['pragma solidity ^0.4.13;\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    isWhitelisted(_beneficiary)\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract OMICrowdsale is WhitelistedCrowdsale, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  /* \n', '   *  Constants\n', '   */\n', '  uint256 constant crowdsaleStartTime = 1530273600; // Pacific/Auckland 2018-06-30 00:00:00 \n', '  uint256 constant crowdsaleFinishTime = 1538222400; // Pacific/Auckland 2018-09-30 00:00:00\n', '  uint256 constant crowdsaleUSDGoal = 22125000;\n', '  uint256 constant crowdsaleTokenGoal = 362500000*1e18;\n', '  uint256 constant minimumTokenPurchase = 2500*1e18;\n', '  uint256 constant maximumTokenPurchase = 5000000*1e18;\n', '\n', '  /*\n', '   *  Storage\n', '   */\n', '  OMIToken public token;\n', '  OMITokenLock public tokenLock;\n', '\n', '  uint256 public totalUSDRaised;\n', '  uint256 public totalTokensSold;\n', '  bool public isFinalized = false;\n', '\n', '  mapping(address => uint256) public purchaseRecords;\n', '\n', '  /*\n', '   *  Events\n', '   */\n', '  event RateChanged(uint256 newRate);\n', '  event USDRaisedUpdated(uint256 newTotal);\n', '  event WhitelistAddressAdded(address newWhitelistAddress);\n', '  event WhitelistAddressRemoved(address removedWhitelistAddress);\n', '  event CrowdsaleStarted();\n', '  event CrowdsaleFinished();\n', '\n', '\n', '  /*\n', '   *  Modifiers\n', '   */\n', '  modifier whenNotFinalized () {\n', '    require(!isFinalized);\n', '    _;\n', '  }\n', '\n', '  /*\n', '   *  Public Functions\n', '   */\n', '  /// @dev Contract constructor sets...\n', '  function OMICrowdsale (\n', '    uint256 _startingRate,\n', '    address _ETHWallet,\n', '    address _OMIToken,\n', '    address _OMITokenLock\n', '  )\n', '    Crowdsale(_startingRate, _ETHWallet, ERC20(_OMIToken))\n', '    public\n', '  {\n', '    token = OMIToken(_OMIToken);\n', '    require(token.isOMITokenContract());\n', '\n', '    tokenLock = OMITokenLock(_OMITokenLock);\n', '    require(tokenLock.isOMITokenLockContract());\n', '\n', '    rate = _startingRate;\n', '  }\n', '\n', '  /// @dev Function to call from other contracts to ensure that this is the proper contract\n', '  function isOMICrowdsaleContract()\n', '    public \n', '    pure \n', '    returns(bool)\n', '  { \n', '    return true; \n', '  }\n', '\n', '  /// @dev Function to check if crowdsale is open\n', '  function isOpen()\n', '    public\n', '    view\n', '    whenNotPaused\n', '    whenNotFinalized\n', '    returns(bool)\n', '  {\n', '    return now >= crowdsaleStartTime;\n', '  }\n', '\n', '  /// @dev Allows the owner to set the current rate for calculating the number of tokens for a purchase.\n', '  /// @dev An external cron job will fetch the ETH/USD daily average from the cryptocompare API and call this function.\n', '  function setRate(uint256 _newRate)\n', '    public\n', '    onlyOwner\n', '    whenNotFinalized\n', '    returns(bool)\n', '  {\n', '    require(_newRate > 0);\n', '    rate = _newRate;\n', '    RateChanged(rate);\n', '    return true;\n', '  }\n', '\n', '  /// @dev Allows the owner to update the total amount of USD raised. T\n', '  function setUSDRaised(uint256 _total)\n', '    public\n', '    onlyOwner\n', '    whenNotFinalized\n', '  {\n', '    require(_total > 0);\n', '    totalUSDRaised = _total;\n', '    USDRaisedUpdated(_total);\n', '  }\n', '\n', '  /// @dev Gets the purchase records for a given address\n', '  /// @param _beneficiary Tokan purchaser\n', '  function getPurchaseRecord(address _beneficiary) \n', '    public \n', '    view \n', '    isWhitelisted(_beneficiary)\n', '    returns(uint256)\n', '  {\n', '    return purchaseRecords[_beneficiary];\n', '  }\n', '\n', '  /// @dev Adds single address to whitelist\n', '  /// @param _beneficiary Address to be added to the whitelist\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '    WhitelistAddressAdded(_beneficiary);\n', '  }\n', '\n', '  /// @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '  /// @param _beneficiaries Addresses to be added to the whitelist\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '      WhitelistAddressAdded(_beneficiaries[i]);\n', '    }\n', '  }\n', '\n', '  /// @dev Removes single address from whitelist.\n', '  /// @param _beneficiary Address to be removed to the whitelist\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '    WhitelistAddressRemoved(_beneficiary);\n', '  }\n', '\n', '  /// @dev Finalizes the crowdsale\n', '  function finalize() external onlyOwner {\n', '    _finalization();\n', '  }\n', '\n', '  /*\n', '   *  Internal Functions\n', '   */\n', '  /// @dev Extend parent behavior to check if current stage should close. Must call super to ensure the enforcement of the whitelist.\n', '  /// @param _beneficiary Token purchaser\n', '  /// @param _weiAmount Amount of wei contributed\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\n', '    internal\n', '    whenNotPaused\n', '    whenNotFinalized\n', '   {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '\n', '    // Beneficiary&#39;s total should be between the minimum and maximum purchase amounts\n', '    uint256 _totalPurchased = purchaseRecords[_beneficiary].add(_getTokenAmount(_weiAmount));\n', '    require(_totalPurchased >= minimumTokenPurchase);\n', '    require(_totalPurchased <= maximumTokenPurchase);\n', '\n', '    // Must make the purchase from the intended whitelisted address\n', '    require(msg.sender == _beneficiary);\n', '\n', '    // Must be after the start time\n', '    require(now >= crowdsaleStartTime);\n', '  }\n', '\n', '  /// @dev Overrides parent by storing balances in timelock contract instead of issuing tokens right away.\n', '  /// @param _beneficiary Token purchaser\n', '  /// @param _tokenAmount Amount of tokens purchased\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount)\n', '    internal\n', '  {\n', '    // Lock beneficiary&#39;s tokens\n', '    tokenLock.lockTokens(_beneficiary, 1 weeks, _tokenAmount);\n', '  }\n', '\n', '  /// @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '  /// @param _beneficiary Address receiving the tokens\n', '  /// @param _weiAmount Value in wei involved in the purchase\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount)\n', '    internal\n', '  {\n', '    uint256 _tokenAmount = _getTokenAmount(_weiAmount);\n', '\n', '    // Add token amount to the purchase history\n', '    purchaseRecords[_beneficiary] = purchaseRecords[_beneficiary].add(_tokenAmount);\n', '    \n', '    // Add token amount to total tokens sold\n', '    totalTokensSold = totalTokensSold.add(_tokenAmount);\n', '\n', '    // Finish the crowdsale...\n', '    // ...if there is not a minimum purchase left\n', '    if (crowdsaleTokenGoal.sub(totalTokensSold) < minimumTokenPurchase) {\n', '      _finalization();\n', '    }\n', '    // ...if USD funding goal has been reached\n', '    if (totalUSDRaised >= crowdsaleUSDGoal) {\n', '      _finalization();\n', '    }\n', '    // ...if the time is after the crowdsale end time\n', '    if (now > crowdsaleFinishTime) {\n', '      _finalization();\n', '    }\n', '  }\n', '\n', '  /// @dev Finalizes crowdsale\n', '  function _finalization()\n', '    internal\n', '    whenNotFinalized\n', '  {\n', '    isFinalized = true;\n', '    tokenLock.finishCrowdsale();\n', '    CrowdsaleFinished();\n', '  }\n', '}\n', '\n', 'contract OMITokenLock is Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  /*\n', '   *  Storage\n', '   */\n', '  OMIToken public token;\n', '  OMICrowdsale public crowdsale;\n', '  address public allowanceProvider;\n', '  bool public crowdsaleFinished = false;\n', '  uint256 public crowdsaleEndTime;\n', '\n', '  struct Lock {\n', '    uint256 amount;\n', '    uint256 lockDuration;\n', '    bool released;\n', '    bool revoked;\n', '  }\n', '  struct TokenLockVault {\n', '    address beneficiary;\n', '    uint256 tokenBalance;\n', '    uint256 lockIndex;\n', '    Lock[] locks;\n', '  }\n', '  mapping(address => TokenLockVault) public tokenLocks;\n', '  address[] public lockIndexes;\n', '  uint256 public totalTokensLocked;\n', '\n', '  /*\n', '   *  Modifiers\n', '   */\n', '  modifier ownerOrCrowdsale () {\n', '    require(msg.sender == owner || OMICrowdsale(msg.sender) == crowdsale);\n', '    _;\n', '  }\n', '\n', '  /*\n', '   *  Events\n', '   */\n', '  event LockedTokens(address indexed beneficiary, uint256 amount, uint256 releaseTime);\n', '  event UnlockedTokens(address indexed beneficiary, uint256 amount);\n', '  event FinishedCrowdsale();\n', '\n', '  /*\n', '   *  Public Functions\n', '   */\n', '  /// @dev Constructor function\n', '  function OMITokenLock (address _token, address _allowanceProvider) public {\n', '    token = OMIToken(_token);\n', '    require(token.isOMITokenContract());\n', '\n', '    allowanceProvider = _allowanceProvider;\n', '  }\n', '\n', '  /// @dev Function to call from other contracts to ensure that this is the proper contract\n', '  function isOMITokenLockContract()\n', '    public \n', '    pure \n', '    returns(bool)\n', '  { \n', '    return true; \n', '  }\n', '\n', '  /// @dev Sets the crowdsale address to allow authorize locking permissions\n', '  /// @param _crowdsale The address of the crowdsale\n', '  function setCrowdsaleAddress (address _crowdsale)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    crowdsale = OMICrowdsale(_crowdsale);\n', '    require(crowdsale.isOMICrowdsaleContract());\n', '\n', '    return true;\n', '  }\n', '\n', '  /// @dev Sets the token allowance provider address\n', '  /// @param _allowanceProvider The address of the token allowance provider\n', '  function setAllowanceAddress (address _allowanceProvider)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    allowanceProvider = _allowanceProvider;\n', '    return true;\n', '  }\n', '\n', '  /// @dev Marks the crowdsale as being finished and sets the crowdsale finish date\n', '  function finishCrowdsale()\n', '    public\n', '    ownerOrCrowdsale\n', '    whenNotPaused\n', '  {\n', '    require(!crowdsaleFinished);\n', '    crowdsaleFinished = true;\n', '    crowdsaleEndTime = now;\n', '    FinishedCrowdsale();\n', '  }\n', '\n', '  /// @dev Gets the total amount of tokens for a given address\n', '  /// @param _beneficiary The address for which to look up the total token amount\n', '  function getTokenBalance(address _beneficiary)\n', '    public\n', '    view\n', '    returns (uint)\n', '  {\n', '    return tokenLocks[_beneficiary].tokenBalance;\n', '  }\n', '\n', '  /// @dev Gets the total number of locks for a given address\n', '  /// @param _beneficiary The address for which to look up the total number of locks\n', '  function getNumberOfLocks(address _beneficiary)\n', '    public\n', '    view\n', '    returns (uint)\n', '  {\n', '    return tokenLocks[_beneficiary].locks.length;\n', '  }\n', '\n', '  /// @dev Gets the lock at a given index for a given address\n', '  /// @param _beneficiary The address used to look up the lock\n', '  /// @param _lockIndex The index used to look up the lock\n', '  function getLockByIndex(address _beneficiary, uint256 _lockIndex)\n', '    public\n', '    view\n', '    returns (uint256 amount, uint256 lockDuration, bool released, bool revoked)\n', '  {\n', '    require(_lockIndex >= 0);\n', '    require(_lockIndex <= tokenLocks[_beneficiary].locks.length.sub(1));\n', '\n', '    return (\n', '      tokenLocks[_beneficiary].locks[_lockIndex].amount,\n', '      tokenLocks[_beneficiary].locks[_lockIndex].lockDuration,\n', '      tokenLocks[_beneficiary].locks[_lockIndex].released,\n', '      tokenLocks[_beneficiary].locks[_lockIndex].revoked\n', '    );\n', '  }\n', '\n', '  /// @dev Revokes the lock at a given index for a given address\n', '  /// @param _beneficiary The address used to look up the lock\n', '  /// @param _lockIndex The lock index to be revoked\n', '  function revokeLockByIndex(address _beneficiary, uint256 _lockIndex)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    require(_lockIndex >= 0);\n', '    require(_lockIndex <= tokenLocks[_beneficiary].locks.length.sub(1));\n', '    require(!tokenLocks[_beneficiary].locks[_lockIndex].revoked);\n', '\n', '    tokenLocks[_beneficiary].locks[_lockIndex].revoked = true;\n', '\n', '    return true;\n', '  }\n', '\n', '  /// @dev Locks tokens for a given beneficiary\n', '  /// @param _beneficiary The address to which the tokens will be released\n', '  /// @param _lockDuration The duration of time that must elapse after the crowdsale end date\n', '  /// @param _tokens The amount of tokens to be locked\n', '  function lockTokens(address _beneficiary, uint256 _lockDuration, uint256 _tokens)\n', '    external\n', '    ownerOrCrowdsale\n', '    whenNotPaused\n', '  {\n', '    // Lock duration must be greater than zero seconds\n', '    require(_lockDuration >= 0);\n', '    // Token amount must be greater than zero\n', '    require(_tokens > 0);\n', '\n', '    // Token Lock must have a sufficient allowance prior to creating locks\n', '    require(_tokens.add(totalTokensLocked) <= token.allowance(allowanceProvider, address(this)));\n', '\n', '    TokenLockVault storage lock = tokenLocks[_beneficiary];\n', '\n', '    // If this is the first lock for this beneficiary, add their address to the lock indexes\n', '    if (lock.beneficiary == 0) {\n', '      lock.beneficiary = _beneficiary;\n', '      lock.lockIndex = lockIndexes.length;\n', '      lockIndexes.push(_beneficiary);\n', '    }\n', '\n', '    // Add the lock\n', '    lock.locks.push(Lock(_tokens, _lockDuration, false, false));\n', '\n', '    // Update the total tokens for this beneficiary\n', '    lock.tokenBalance = lock.tokenBalance.add(_tokens);\n', '\n', '    // Update the number of locked tokens\n', '    totalTokensLocked = _tokens.add(totalTokensLocked);\n', '\n', '    LockedTokens(_beneficiary, _tokens, _lockDuration);\n', '  }\n', '\n', '  /// @dev Transfers any tokens held in a timelock vault to beneficiary if they are due for release.\n', '  function releaseTokens()\n', '    public\n', '    whenNotPaused\n', '    returns(bool)\n', '  {\n', '    require(crowdsaleFinished);\n', '    require(_release(msg.sender));\n', '    return true;\n', '  }\n', '\n', '  /// @dev Transfers tokens held by timelock to all beneficiaries within the provided range.\n', '  /// @param _beneficiary The user for which token locks should be released.\n', '  function releaseTokensByAddress(address _beneficiary)\n', '    external\n', '    whenNotPaused\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    require(crowdsaleFinished);\n', '    require(_release(_beneficiary));\n', '    return true;\n', '  }\n', '\n', '  /*\n', '   *  Internal Functions\n', '   */\n', '  /// @dev Reviews and releases token for a given beneficiary\n', '  /// @param _beneficiary address for which a token release should be attempted\n', '  function _release(address _beneficiary)\n', '    internal\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    TokenLockVault memory lock = tokenLocks[_beneficiary];\n', '    require(lock.beneficiary == _beneficiary);\n', '    require(_beneficiary != 0x0);\n', '\n', '    bool hasUnDueLocks = false;\n', '\n', '    for (uint256 i = 0; i < lock.locks.length; i++) {\n', '      Lock memory currentLock = lock.locks[i];\n', '      // Skip any locks which are already released or revoked\n', '      if (currentLock.released || currentLock.revoked) {\n', '        continue;\n', '      }\n', '\n', '      // Skip any locks that are not due for release\n', '      if (crowdsaleEndTime.add(currentLock.lockDuration) >= now) {\n', '        hasUnDueLocks = true;\n', '        continue;\n', '      }\n', '\n', '      // The amount of tokens to transfer must be less than the number of locked tokens\n', '      require(currentLock.amount <= token.allowance(allowanceProvider, address(this)));\n', '\n', '      // Release Tokens\n', '      UnlockedTokens(_beneficiary, currentLock.amount);\n', '      tokenLocks[_beneficiary].locks[i].released = true;\n', '      tokenLocks[_beneficiary].tokenBalance = tokenLocks[_beneficiary].tokenBalance.sub(currentLock.amount);\n', '      totalTokensLocked = totalTokensLocked.sub(currentLock.amount);\n', '      assert(token.transferFrom(allowanceProvider, _beneficiary, currentLock.amount));\n', '    }\n', '\n', '    // If there are no future locks to be released, delete the lock vault\n', '    if (!hasUnDueLocks) {\n', '      delete tokenLocks[_beneficiary];\n', '      lockIndexes[lock.lockIndex] = 0x0;\n', '    }\n', '\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    onlyOwner\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract OMIToken is CappedToken, PausableToken {\n', '  string public constant name = "Ecomi Token";\n', '  string public constant symbol = "OMI";\n', '  uint256 public decimals = 18;\n', '\n', '  function OMIToken() public CappedToken(1000000000*1e18) {}\n', '\n', '  /// @dev Function to call from other contracts to ensure that this is the proper contract\n', '  function isOMITokenContract()\n', '    public \n', '    pure \n', '    returns(bool)\n', '  { \n', '    return true; \n', '  }\n', '}']