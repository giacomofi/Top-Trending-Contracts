['// based on Bryn Bellomy code\n', '// https://medium.com/@bryn.bellomy/solidity-tutorial-building-a-simple-auction-contract-fcc918b0878a\n', '//\n', '// updated to 0.4.21 standard, replaced blocks with time, converted to hot potato style by Chibi Fighters\n', '// added custom start command for owner so they don&#39;t take off immidiately\n', '//\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, returns 0 if it would go into minus range.\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (b >= a) {\n', '            return 0;\n', '        }\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract AuctionPotato {\n', '    using SafeMath for uint256; \n', '    // static\n', '    address public owner;\n', '    uint public startTime;\n', '    uint public endTime;\n', '    string public infoUrl;\n', '    string name;\n', '    \n', '    // start auction manually at given time\n', '    bool started;\n', '\n', '    // pototo\n', '    uint public potato;\n', '    uint oldPotato;\n', '    uint oldHighestBindingBid;\n', '    \n', '    // transfer ownership\n', '    address creatureOwner;\n', '    address creature_newOwner;\n', '    event CreatureOwnershipTransferred(address indexed _from, address indexed _to);\n', '    \n', '    \n', '    // state\n', '    bool public canceled;\n', '    \n', '    uint public highestBindingBid;\n', '    address public highestBidder;\n', '    \n', '    // used to immidiately block placeBids\n', '    bool blockerPay;\n', '    bool blockerWithdraw;\n', '    \n', '    mapping(address => uint256) public fundsByBidder;\n', '    bool ownerHasWithdrawn;\n', '\n', '    event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid);\n', '    event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount);\n', '    event LogCanceled();\n', '    \n', '    \n', '    // initial settings on contract creation\n', '    constructor() public {\n', '        \n', '        blockerWithdraw = false;\n', '        blockerPay = false;\n', '        \n', '        owner = msg.sender;\n', '        creatureOwner = owner;\n', '        \n', '        // 0.002 ETH\n', '        highestBindingBid = 2000000000000000;\n', '        potato = 0;\n', '        \n', '        started = false;\n', '        \n', '        name = "Minotaur";\n', '        infoUrl = "https://chibifighters.io";\n', '        \n', '    }\n', '\n', '    function getHighestBid() internal\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return fundsByBidder[highestBidder];\n', '    }\n', '    \n', '    // query remaining time\n', '    // this should not be used, query endTime once and then calculate it in your frontend\n', '    // it&#39;s helpful when you want to debug in remix\n', '    function timeLeft() public view returns (uint time) {\n', '        if (now >= endTime) return 0;\n', '        return endTime - now;\n', '    }\n', '    \n', '    function auctionName() public view returns (string _name) {\n', '        return name;\n', '    }\n', '    \n', '    // calculates the next bid amount to you can have a oneclick buy button\n', '    function nextBid() public view returns (uint _nextBid) {\n', '        return highestBindingBid.add(potato);\n', '    }\n', '    \n', '    // calculates the bid after the current bid so nifty hackers can skip the queue\n', '    // this is not in our frontend and no one knows if it actually works\n', '    function nextNextBid() public view returns (uint _nextBid) {\n', '        return highestBindingBid.add(potato).add((highestBindingBid.add(potato)).mul(4).div(9));\n', '    }\n', '    \n', '    // command to start the auction\n', '    function startAuction(string _name, uint _duration_secs) public onlyOwner returns (bool success){\n', '        require(started == false);\n', '        \n', '        started = true;\n', '        startTime = now;\n', '        endTime = now + _duration_secs;\n', '        name = _name;\n', '        \n', '        return true;\n', '        \n', '    }\n', '    \n', '    function isStarted() public view returns (bool success) {\n', '        return started;\n', '    }\n', '\n', '    function placeBid() public\n', '        payable\n', '        onlyAfterStart\n', '        onlyBeforeEnd\n', '        onlyNotCanceled\n', '        onlyNotOwner\n', '        returns (bool success)\n', '    {   \n', '        // we are only allowing to increase in bidIncrements to make for true hot potato style\n', '        require(msg.value == highestBindingBid.add(potato));\n', '        require(msg.sender != highestBidder);\n', '        require(started == true);\n', '        require(blockerPay == false);\n', '        blockerPay = true;\n', '        \n', '        // calculate the user&#39;s total bid based on the current amount they&#39;ve sent to the contract\n', '        // plus whatever has been sent with this transaction\n', '\n', '        fundsByBidder[msg.sender] = fundsByBidder[msg.sender].add(highestBindingBid);\n', '        fundsByBidder[highestBidder] = fundsByBidder[highestBidder].add(potato);\n', '        \n', '        oldHighestBindingBid = highestBindingBid;\n', '        \n', '        // set new highest bidder\n', '        highestBidder = msg.sender;\n', '        highestBindingBid = highestBindingBid.add(potato);\n', '        \n', '        // 40% potato results in ~6% 2/7\n', '        // 44% potato results in ? 13% 4/9 \n', '        // 50% potato results in ~16% /2\n', '        oldPotato = potato;\n', '        potato = highestBindingBid.mul(4).div(9);\n', '        \n', '        emit LogBid(msg.sender, highestBidder, oldHighestBindingBid, highestBindingBid);\n', '        blockerPay = false;\n', '        return true;\n', '    }\n', '\n', '    function cancelAuction() public\n', '        onlyOwner\n', '        onlyBeforeEnd\n', '        onlyNotCanceled\n', '        returns (bool success)\n', '    {\n', '        canceled = true;\n', '        emit LogCanceled();\n', '        return true;\n', '    }\n', '\n', '    function withdraw() public\n', '    // can withdraw once overbid\n', '        returns (bool success)\n', '    {\n', '        require(blockerWithdraw == false);\n', '        blockerWithdraw = true;\n', '        \n', '        address withdrawalAccount;\n', '        uint withdrawalAmount;\n', '\n', '        if (canceled) {\n', '            // if the auction was canceled, everyone should simply be allowed to withdraw their funds\n', '            withdrawalAccount = msg.sender;\n', '            withdrawalAmount = fundsByBidder[withdrawalAccount];\n', '            // set funds to 0\n', '            fundsByBidder[withdrawalAccount] = 0;\n', '        }\n', '        \n', '        // owner can withdraw once auction is cancelled or ended\n', '        if (ownerHasWithdrawn == false && msg.sender == owner && (canceled == true || now > endTime)) {\n', '            withdrawalAccount = owner;\n', '            withdrawalAmount = highestBindingBid.sub(oldPotato);\n', '            ownerHasWithdrawn = true;\n', '            \n', '            // set funds to 0\n', '            fundsByBidder[withdrawalAccount] = 0;\n', '        }\n', '        \n', '        // overbid people can withdraw their bid + profit\n', '        // exclude owner because he is set above\n', '        if (!canceled && (msg.sender != highestBidder && msg.sender != owner)) {\n', '            withdrawalAccount = msg.sender;\n', '            withdrawalAmount = fundsByBidder[withdrawalAccount];\n', '            fundsByBidder[withdrawalAccount] = 0;\n', '        }\n', '\n', '        // highest bidder can withdraw leftovers if he didn&#39;t before\n', '        if (!canceled && msg.sender == highestBidder && msg.sender != owner) {\n', '            withdrawalAccount = msg.sender;\n', '            withdrawalAmount = fundsByBidder[withdrawalAccount].sub(oldHighestBindingBid);\n', '            fundsByBidder[withdrawalAccount] = fundsByBidder[withdrawalAccount].sub(withdrawalAmount);\n', '        }\n', '\n', '        if (withdrawalAmount == 0) revert();\n', '    \n', '        // send the funds\n', '        msg.sender.transfer(withdrawalAmount);\n', '\n', '        emit LogWithdrawal(msg.sender, withdrawalAccount, withdrawalAmount);\n', '        blockerWithdraw = false;\n', '        return true;\n', '    }\n', '    \n', '    // amount owner can withdraw after auction ended\n', '    // that way you can easily compare the contract balance with your amount\n', '    // if there is more in the contract than your balance someone didn&#39;t withdraw\n', '    // let them know that :)\n', '    function ownerCanWithdraw() public view returns (uint amount) {\n', '        return highestBindingBid.sub(oldPotato);\n', '    }\n', '    \n', '    // just in case the contract is bust and can&#39;t pay\n', '    // should never be needed but who knows\n', '    function fuelContract() public onlyOwner payable {\n', '        \n', '    }\n', '    \n', '    function balance() public view returns (uint _balance) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotOwner {\n', '        require(msg.sender != owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterStart {\n', '        if (now < startTime) revert();\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeEnd {\n', '        if (now > endTime) revert();\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotCanceled {\n', '        if (canceled) revert();\n', '        _;\n', '    }\n', '    \n', '    // who owns the creature (not necessarily auction winner)\n', '    function queryCreatureOwner() public view returns (address _creatureOwner) {\n', '        return creatureOwner;\n', '    }\n', '    \n', '    // transfer ownership for auction winners in case they want to trade the creature before release\n', '    function transferCreatureOwnership(address _newOwner) public {\n', '        require(msg.sender == creatureOwner);\n', '        creature_newOwner = _newOwner;\n', '    }\n', '    \n', '    // buyer needs to confirm the transfer\n', '    function acceptCreatureOwnership() public {\n', '        require(msg.sender == creature_newOwner);\n', '        emit CreatureOwnershipTransferred(creatureOwner, creature_newOwner);\n', '        creatureOwner = creature_newOwner;\n', '        creature_newOwner = address(0);\n', '    }\n', '    \n', '}']
['// based on Bryn Bellomy code\n', '// https://medium.com/@bryn.bellomy/solidity-tutorial-building-a-simple-auction-contract-fcc918b0878a\n', '//\n', '// updated to 0.4.21 standard, replaced blocks with time, converted to hot potato style by Chibi Fighters\n', "// added custom start command for owner so they don't take off immidiately\n", '//\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, returns 0 if it would go into minus range.\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (b >= a) {\n', '            return 0;\n', '        }\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract AuctionPotato {\n', '    using SafeMath for uint256; \n', '    // static\n', '    address public owner;\n', '    uint public startTime;\n', '    uint public endTime;\n', '    string public infoUrl;\n', '    string name;\n', '    \n', '    // start auction manually at given time\n', '    bool started;\n', '\n', '    // pototo\n', '    uint public potato;\n', '    uint oldPotato;\n', '    uint oldHighestBindingBid;\n', '    \n', '    // transfer ownership\n', '    address creatureOwner;\n', '    address creature_newOwner;\n', '    event CreatureOwnershipTransferred(address indexed _from, address indexed _to);\n', '    \n', '    \n', '    // state\n', '    bool public canceled;\n', '    \n', '    uint public highestBindingBid;\n', '    address public highestBidder;\n', '    \n', '    // used to immidiately block placeBids\n', '    bool blockerPay;\n', '    bool blockerWithdraw;\n', '    \n', '    mapping(address => uint256) public fundsByBidder;\n', '    bool ownerHasWithdrawn;\n', '\n', '    event LogBid(address bidder, address highestBidder, uint oldHighestBindingBid, uint highestBindingBid);\n', '    event LogWithdrawal(address withdrawer, address withdrawalAccount, uint amount);\n', '    event LogCanceled();\n', '    \n', '    \n', '    // initial settings on contract creation\n', '    constructor() public {\n', '        \n', '        blockerWithdraw = false;\n', '        blockerPay = false;\n', '        \n', '        owner = msg.sender;\n', '        creatureOwner = owner;\n', '        \n', '        // 0.002 ETH\n', '        highestBindingBid = 2000000000000000;\n', '        potato = 0;\n', '        \n', '        started = false;\n', '        \n', '        name = "Minotaur";\n', '        infoUrl = "https://chibifighters.io";\n', '        \n', '    }\n', '\n', '    function getHighestBid() internal\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return fundsByBidder[highestBidder];\n', '    }\n', '    \n', '    // query remaining time\n', '    // this should not be used, query endTime once and then calculate it in your frontend\n', "    // it's helpful when you want to debug in remix\n", '    function timeLeft() public view returns (uint time) {\n', '        if (now >= endTime) return 0;\n', '        return endTime - now;\n', '    }\n', '    \n', '    function auctionName() public view returns (string _name) {\n', '        return name;\n', '    }\n', '    \n', '    // calculates the next bid amount to you can have a oneclick buy button\n', '    function nextBid() public view returns (uint _nextBid) {\n', '        return highestBindingBid.add(potato);\n', '    }\n', '    \n', '    // calculates the bid after the current bid so nifty hackers can skip the queue\n', '    // this is not in our frontend and no one knows if it actually works\n', '    function nextNextBid() public view returns (uint _nextBid) {\n', '        return highestBindingBid.add(potato).add((highestBindingBid.add(potato)).mul(4).div(9));\n', '    }\n', '    \n', '    // command to start the auction\n', '    function startAuction(string _name, uint _duration_secs) public onlyOwner returns (bool success){\n', '        require(started == false);\n', '        \n', '        started = true;\n', '        startTime = now;\n', '        endTime = now + _duration_secs;\n', '        name = _name;\n', '        \n', '        return true;\n', '        \n', '    }\n', '    \n', '    function isStarted() public view returns (bool success) {\n', '        return started;\n', '    }\n', '\n', '    function placeBid() public\n', '        payable\n', '        onlyAfterStart\n', '        onlyBeforeEnd\n', '        onlyNotCanceled\n', '        onlyNotOwner\n', '        returns (bool success)\n', '    {   \n', '        // we are only allowing to increase in bidIncrements to make for true hot potato style\n', '        require(msg.value == highestBindingBid.add(potato));\n', '        require(msg.sender != highestBidder);\n', '        require(started == true);\n', '        require(blockerPay == false);\n', '        blockerPay = true;\n', '        \n', "        // calculate the user's total bid based on the current amount they've sent to the contract\n", '        // plus whatever has been sent with this transaction\n', '\n', '        fundsByBidder[msg.sender] = fundsByBidder[msg.sender].add(highestBindingBid);\n', '        fundsByBidder[highestBidder] = fundsByBidder[highestBidder].add(potato);\n', '        \n', '        oldHighestBindingBid = highestBindingBid;\n', '        \n', '        // set new highest bidder\n', '        highestBidder = msg.sender;\n', '        highestBindingBid = highestBindingBid.add(potato);\n', '        \n', '        // 40% potato results in ~6% 2/7\n', '        // 44% potato results in ? 13% 4/9 \n', '        // 50% potato results in ~16% /2\n', '        oldPotato = potato;\n', '        potato = highestBindingBid.mul(4).div(9);\n', '        \n', '        emit LogBid(msg.sender, highestBidder, oldHighestBindingBid, highestBindingBid);\n', '        blockerPay = false;\n', '        return true;\n', '    }\n', '\n', '    function cancelAuction() public\n', '        onlyOwner\n', '        onlyBeforeEnd\n', '        onlyNotCanceled\n', '        returns (bool success)\n', '    {\n', '        canceled = true;\n', '        emit LogCanceled();\n', '        return true;\n', '    }\n', '\n', '    function withdraw() public\n', '    // can withdraw once overbid\n', '        returns (bool success)\n', '    {\n', '        require(blockerWithdraw == false);\n', '        blockerWithdraw = true;\n', '        \n', '        address withdrawalAccount;\n', '        uint withdrawalAmount;\n', '\n', '        if (canceled) {\n', '            // if the auction was canceled, everyone should simply be allowed to withdraw their funds\n', '            withdrawalAccount = msg.sender;\n', '            withdrawalAmount = fundsByBidder[withdrawalAccount];\n', '            // set funds to 0\n', '            fundsByBidder[withdrawalAccount] = 0;\n', '        }\n', '        \n', '        // owner can withdraw once auction is cancelled or ended\n', '        if (ownerHasWithdrawn == false && msg.sender == owner && (canceled == true || now > endTime)) {\n', '            withdrawalAccount = owner;\n', '            withdrawalAmount = highestBindingBid.sub(oldPotato);\n', '            ownerHasWithdrawn = true;\n', '            \n', '            // set funds to 0\n', '            fundsByBidder[withdrawalAccount] = 0;\n', '        }\n', '        \n', '        // overbid people can withdraw their bid + profit\n', '        // exclude owner because he is set above\n', '        if (!canceled && (msg.sender != highestBidder && msg.sender != owner)) {\n', '            withdrawalAccount = msg.sender;\n', '            withdrawalAmount = fundsByBidder[withdrawalAccount];\n', '            fundsByBidder[withdrawalAccount] = 0;\n', '        }\n', '\n', "        // highest bidder can withdraw leftovers if he didn't before\n", '        if (!canceled && msg.sender == highestBidder && msg.sender != owner) {\n', '            withdrawalAccount = msg.sender;\n', '            withdrawalAmount = fundsByBidder[withdrawalAccount].sub(oldHighestBindingBid);\n', '            fundsByBidder[withdrawalAccount] = fundsByBidder[withdrawalAccount].sub(withdrawalAmount);\n', '        }\n', '\n', '        if (withdrawalAmount == 0) revert();\n', '    \n', '        // send the funds\n', '        msg.sender.transfer(withdrawalAmount);\n', '\n', '        emit LogWithdrawal(msg.sender, withdrawalAccount, withdrawalAmount);\n', '        blockerWithdraw = false;\n', '        return true;\n', '    }\n', '    \n', '    // amount owner can withdraw after auction ended\n', '    // that way you can easily compare the contract balance with your amount\n', "    // if there is more in the contract than your balance someone didn't withdraw\n", '    // let them know that :)\n', '    function ownerCanWithdraw() public view returns (uint amount) {\n', '        return highestBindingBid.sub(oldPotato);\n', '    }\n', '    \n', "    // just in case the contract is bust and can't pay\n", '    // should never be needed but who knows\n', '    function fuelContract() public onlyOwner payable {\n', '        \n', '    }\n', '    \n', '    function balance() public view returns (uint _balance) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotOwner {\n', '        require(msg.sender != owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterStart {\n', '        if (now < startTime) revert();\n', '        _;\n', '    }\n', '\n', '    modifier onlyBeforeEnd {\n', '        if (now > endTime) revert();\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotCanceled {\n', '        if (canceled) revert();\n', '        _;\n', '    }\n', '    \n', '    // who owns the creature (not necessarily auction winner)\n', '    function queryCreatureOwner() public view returns (address _creatureOwner) {\n', '        return creatureOwner;\n', '    }\n', '    \n', '    // transfer ownership for auction winners in case they want to trade the creature before release\n', '    function transferCreatureOwnership(address _newOwner) public {\n', '        require(msg.sender == creatureOwner);\n', '        creature_newOwner = _newOwner;\n', '    }\n', '    \n', '    // buyer needs to confirm the transfer\n', '    function acceptCreatureOwnership() public {\n', '        require(msg.sender == creature_newOwner);\n', '        emit CreatureOwnershipTransferred(creatureOwner, creature_newOwner);\n', '        creatureOwner = creature_newOwner;\n', '        creature_newOwner = address(0);\n', '    }\n', '    \n', '}']
