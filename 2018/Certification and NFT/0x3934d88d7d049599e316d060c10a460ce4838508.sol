['pragma solidity ^0.4.24;\n', '\n', 'contract forwardEth {\n', '    address public owner;\n', '    address public destination;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        destination = msg.sender;\n', '    }\n', '    \n', '    modifier ownerOnly() {\n', '        require(msg.sender==owner);\n', '        _;\n', '    }\n', '    \n', '    // 1. transfer ownership //\n', '    function setNewOwner(address _newOwner) public ownerOnly {\n', '        owner = _newOwner;\n', '    }\n', '    \n', '    // 2. owner can change destination\n', '    function setReceiver(address _newReceiver) public ownerOnly {\n', '        destination = _newReceiver;\n', '    }\n', '    \n', '    // fallback function tigered, when contract gets ETH\n', '    function() payable public {\n', '        //destination.transfer(msg.value);\n', '\t\t\n', '\t\trequire(destination.call.value(msg.value)(msg.data));\n', '    }\n', '    \n', '    // destroy contract, returns remain of funds to owner \n', '    function _destroyContract() public ownerOnly {\n', '        selfdestruct(destination);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract forwardEth {\n', '    address public owner;\n', '    address public destination;\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '        destination = msg.sender;\n', '    }\n', '    \n', '    modifier ownerOnly() {\n', '        require(msg.sender==owner);\n', '        _;\n', '    }\n', '    \n', '    // 1. transfer ownership //\n', '    function setNewOwner(address _newOwner) public ownerOnly {\n', '        owner = _newOwner;\n', '    }\n', '    \n', '    // 2. owner can change destination\n', '    function setReceiver(address _newReceiver) public ownerOnly {\n', '        destination = _newReceiver;\n', '    }\n', '    \n', '    // fallback function tigered, when contract gets ETH\n', '    function() payable public {\n', '        //destination.transfer(msg.value);\n', '\t\t\n', '\t\trequire(destination.call.value(msg.value)(msg.data));\n', '    }\n', '    \n', '    // destroy contract, returns remain of funds to owner \n', '    function _destroyContract() public ownerOnly {\n', '        selfdestruct(destination);\n', '    }\n', '}']
