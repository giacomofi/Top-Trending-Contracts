['pragma solidity ^0.5.1;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '}  \n', '\n', '/// @title Synpatreg smart conract for synpat service\n', '/// @author Telegram: @msmobile, IBerGroup\n', '/// @notice This smart contract write events  with steem post hash\n', '///in particular ProofOfConnect.\n', '\n', 'contract Synpatreg is Claimable {\n', "    string public version = '1.1.0';\n", '    mapping(bytes32 => bool) public permlinkSaved;\n', '    \n', '    event SynpatRecord(string indexed permlinkSaved_permlink, bytes32 _hashSha);\n', '    \n', '    function() external { } \n', ' \n', '    ///@notice Make event record in Ethereumblockchain\n', '    /// @dev Implied that _hashSha is hash of steemet post title+body\n', '    /// @param _permlink  string, _permlink of steem post.\n', '    /// @param _hashSha   - result of Keccak SHA256 function.\n', '    /// @return true if ok, false otherwise \n', '    function writeSha3(string calldata _permlink, bytes32 _hashSha) external  returns (bool){\n', '        bytes32 hash = calculateSha3(_permlink);\n', '        require(!permlinkSaved[hash],"Permalink already exist!");\n', '        permlinkSaved[hash]=true;\n', '        emit SynpatRecord(_permlink, _hashSha);\n', '        return true;\n', '    }\n', '    \n', '    ///@notice Calculate hash\n', "    /// @dev There is web3py analog exists: Web3.soliditySha3(['string'], ['_hashinput'])\n", '    /// @param _hashinput   - string .\n', '    /// @return byte32, result of keccak256 (sha3 in old style) \n', '    function calculateSha3(string memory _hashinput) public pure returns (bytes32){\n', '        return keccak256(bytes(_hashinput)); \n', '    }\n', '   \n', '    \n', '    ///@dev use in case of depricate this contract\n', '    function kill() external onlyOwner {\n', '        selfdestruct(msg.sender);\n', '    }\n', '}']