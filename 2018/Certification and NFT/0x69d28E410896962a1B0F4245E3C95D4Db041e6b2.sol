['pragma solidity 0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev revert()s if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  \n', '  \n', '  function mul256(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div256(uint256 a, uint256 b) internal returns (uint256) {\n', '    require(b > 0); // Solidity automatically revert()s when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub256(uint256 a, uint256 b) internal returns (uint256) {\n', '    require(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add256(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }  \n', '  \n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant public returns (uint256);\n', '  function transfer(address to, uint256 value) public;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev ERC20 interface with allowances. \n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant public returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public;\n', '  function approve(address spender, uint256 value) public;\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '   * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '     require(msg.data.length >= size + 4);\n', '     _;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public {\n', '    balances[msg.sender] = balances[msg.sender].sub256(_value);\n', '    balances[_to] = balances[_to].add256(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant public returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' * @dev Implemantation of the basic standart token.\n', ' */\n', 'contract StandardToken is BasicToken, ERC20 {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) public {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already revert() if this condition is not met\n', '    // if (_value > _allowance) revert();\n', '\n', '    balances[_to] = balances[_to].add256(_value);\n', '    balances[_from] = balances[_from].sub256(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub256(_value);\n', '    Transfer(_from, _to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public {\n', '\n', '    //  To change the approve amount you first have to reduce the addresses\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant public returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title TeuToken\n', ' * @dev The main TEU token contract\n', ' * \n', ' */\n', ' \n', 'contract TeuToken is StandardToken, Ownable{\n', '  string public name = "20-footEqvUnit";\n', '  string public symbol = "TEU";\n', '  uint public decimals = 18;\n', '\n', '  event TokenBurned(uint256 value);\n', '  \n', '  function TeuToken() public {\n', '    totalSupply = (10 ** 8) * (10 ** decimals);\n', '    balances[msg.sender] = totalSupply;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the owner to burn the token\n', '   * @param _value number of tokens to be burned.\n', '   */\n', '  function burn(uint _value) onlyOwner public {\n', '    require(balances[msg.sender] >= _value);\n', '    balances[msg.sender] = balances[msg.sender].sub256(_value);\n', '    totalSupply = totalSupply.sub256(_value);\n', '    TokenBurned(_value);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title teuInitialTokenSale \n', ' * @dev The TEU token ICO contract\n', ' * \n', ' */\n', 'contract teuInitialTokenSale is Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '    event LogContribution(address indexed _contributor, uint256 _etherAmount, uint256 _basicTokenAmount, uint256 _timeBonusTokenAmount, uint256 _volumeBonusTokenAmount);\n', '    event LogContributionBitcoin(address indexed _contributor, uint256 _bitcoinAmount, uint256 _etherAmount, uint256 _basicTokenAmount, uint256 _timeBonusTokenAmount, uint256 _volumeBonusTokenAmount, uint _contributionDatetime);\n', '    event LogOffChainContribution(address indexed _contributor, uint256 _etherAmount, uint256 _tokenAmount);\n', '    event LogReferralAward(address indexed _refereeWallet, address indexed _referrerWallet, uint256 _referralBonusAmount);\n', '    event LogTokenCollected(address indexed _contributor, uint256 _collectedTokenAmount);\n', '    event LogClientIdentRejectListChange(address indexed _contributor, uint8 _newValue);\n', '\n', '\n', '    TeuToken\t\t\t                constant private\t\ttoken = TeuToken(0xeEAc3F8da16bb0485a4A11c5128b0518DaC81448); // hard coded due to token already deployed\n', '    address\t\t                        constant private\t\tetherHolderWallet = 0x00222EaD2D0F83A71F645d3d9634599EC8222830; // hard coded due to deployment for once only\n', '    uint256\t\t                        constant private \t    minContribution = 100 finney;\n', '    uint                                         public         saleStart = 1523498400;\n', '    uint                                         public         saleEnd = 1526090400;\n', '    uint                                constant private        etherToTokenConversionRate = 400;\n', '    uint                                constant private        referralAwardPercent = 20;\n', '    uint256                             constant private        maxCollectableToken = 20 * 10 ** 6 * 10 ** 18;\n', '\n', '    mapping (address => uint256)                private     referralContribution;  // record the referral contribution amount in ether for claiming of referral bonus\n', '    mapping (address => uint)                   private     lastContribitionDate;  // record the last contribution date/time for valid the referral bonus claiming period\n', '\n', '    mapping (address => uint256)                private     collectableToken;  // record the token amount to be collected of each contributor\n', '    mapping (address => uint8)                  private     clientIdentRejectList;  // record a list of contributors who do not pass the client identification process\n', '    bool                                        public      isCollectTokenStart = false;  // flag to indicate if token collection is started\n', '    bool                                        public      isAllowContribution = true; // flag to enable/disable contribution.\n', '    uint256                                     public      totalCollectableToken;  // the total amount of token will be colleceted after considering all the contribution and bonus\n', '\n', '    //  ***** private helper functions ***************\n', '\n', '    \n', '\n', '    /**\n', '    * @dev get the current datetime\n', '    */   \n', '    function getCurrentDatetime() private constant returns (uint) {\n', '        return now; \n', '    }\n', '\n', '    /**\n', '    * @dev get the current sale day\n', '    */   \n', '    function getCurrentSaleDay() private saleIsOn returns (uint) {\n', '        return getCurrentDatetime().sub256(saleStart).div256(86400).add256(1);\n', '    }\n', '\n', '    /**\n', '    * @dev to get the time bonus Percentage based on the no. of sale day(s)\n', '    * @param _days no of sale day to calculate the time bonus\n', '    */      \n', '    function getTimeBonusPercent(uint _days) private pure returns (uint) {\n', '        if (_days <= 20)\n', '            return 50;\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '    * @dev to get the volumne bonus percentage based on the ether amount contributed\n', '    * @param _etherAmount ether amount contributed.\n', '    */          \n', '    function getVolumeBonusPercent(uint256 _etherAmount) private pure returns (uint) {\n', '\n', '        if (_etherAmount < 1 ether)\n', '            return 0;\n', '        if (_etherAmount < 2 ether)\n', '            return 35;\n', '        if (_etherAmount < 3 ether)\n', '            return 40;\n', '        if (_etherAmount < 4 ether)\n', '            return 45;\n', '        if (_etherAmount < 5 ether)\n', '            return 50;\n', '        if (_etherAmount < 10 ether)\n', '            return 55;\n', '        if (_etherAmount < 20 ether)\n', '            return 60;\n', '        if (_etherAmount < 30 ether)\n', '            return 65;\n', '        if (_etherAmount < 40 ether)\n', '            return 70;\n', '        if (_etherAmount < 50 ether)\n', '            return 75;\n', '        if (_etherAmount < 100 ether)\n', '            return 80;\n', '        if (_etherAmount < 200 ether)\n', '            return 90;\n', '        if (_etherAmount >= 200 ether)\n', '            return 100;\n', '        return 0;\n', '    }\n', '    \n', '    /**\n', '    * @dev to get the time bonus amount given the token amount to be collected from contribution\n', '    * @param _tokenAmount token amount to be collected from contribution\n', '    */ \n', '    function getTimeBonusAmount(uint256 _tokenAmount) private returns (uint256) {\n', '        return _tokenAmount.mul256(getTimeBonusPercent(getCurrentSaleDay())).div256(100);\n', '    }\n', '    \n', '    /**\n', '    * @dev to get the volume bonus amount given the token amount to be collected from contribution and the ether amount contributed\n', '    * @param _tokenAmount token amount to be collected from contribution\n', '    * @param _etherAmount ether amount contributed\n', '    */\n', '    function getVolumeBonusAmount(uint256 _tokenAmount, uint256 _etherAmount) private returns (uint256) {\n', '        return _tokenAmount.mul256(getVolumeBonusPercent(_etherAmount)).div256(100);\n', '    }\n', '    \n', '    /**\n', '    * @dev to get the referral bonus amount given the ether amount contributed\n', '    * @param _etherAmount ether amount contributed\n', '    */\n', '    function getReferralBonusAmount(uint256 _etherAmount) private returns (uint256) {\n', '        return _etherAmount.mul256(etherToTokenConversionRate).mul256(referralAwardPercent).div256(100);\n', '    }\n', '    \n', '    /**\n', '    * @dev to get the basic amount of token to be collected given the ether amount contributed\n', '    * @param _etherAmount ether amount contributed\n', '    */\n', '    function getBasicTokenAmount(uint256 _etherAmount) private returns (uint256) {\n', '        return _etherAmount.mul256(etherToTokenConversionRate);\n', '    }\n', '  \n', '  \n', '    // ****** modifiers  ************\n', '\n', '    /**\n', '    * @dev modifier to allow contribution only when the sale is ON\n', '    */\n', '    modifier saleIsOn() {\n', '        require(getCurrentDatetime() >= saleStart && getCurrentDatetime() < saleEnd);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev modifier to check if the sale is ended\n', '    */    \n', '    modifier saleIsEnd() {\n', '        require(getCurrentDatetime() >= saleEnd);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev modifier to check if token is collectable\n', '    */    \n', '    modifier tokenIsCollectable() {\n', '        require(isCollectTokenStart);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev modifier to check if contribution is over the min. contribution amount\n', '    */    \n', '    modifier overMinContribution(uint256 _etherAmount) {\n', '        require(_etherAmount >= minContribution);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '    * @dev modifier to check if max. token pool is not reached\n', '    */\n', '    modifier underMaxTokenPool() {\n', '        require(maxCollectableToken > totalCollectableToken);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev modifier to check if contribution is allowed\n', '    */\n', '    modifier contributionAllowed() {\n', '        require(isAllowContribution);\n', '        _;\n', '    }\n', '\n', '\n', '    //  ***** public transactional functions ***************\n', '    /**\n', '    * @dev called by owner to set the new sale start date/time \n', '    * @param _newStart new start date/time\n', '    */\n', '    function setNewStart(uint _newStart) public onlyOwner {\n', '\trequire(saleStart > getCurrentDatetime());\n', '        require(_newStart > getCurrentDatetime());\n', '\trequire(saleEnd > _newStart);\n', '        saleStart = _newStart;\n', '    }\n', '\n', '    /**\n', '    * @dev called by owner to set the new sale end date/time \n', '    * @param _newEnd new end date/time\n', '    */\n', '    function setNewEnd(uint _newEnd) public onlyOwner {\n', '\trequire(saleEnd < getCurrentDatetime());\n', '        require(_newEnd < getCurrentDatetime());\n', '\trequire(_newEnd > saleStart);\n', '        saleEnd = _newEnd;\n', '    }\n', '\n', '    /**\n', '    * @dev called by owner to enable / disable contribution \n', '    * @param _isAllow true - allow contribution; false - disallow contribution\n', '    */\n', '    function enableContribution(bool _isAllow) public onlyOwner {\n', '        isAllowContribution = _isAllow;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev called by contributors to record a contribution \n', '    */\n', '    function contribute() public payable saleIsOn overMinContribution(msg.value) underMaxTokenPool contributionAllowed {\n', '        uint256 _basicToken = getBasicTokenAmount(msg.value);\n', '        uint256 _timeBonus = getTimeBonusAmount(_basicToken);\n', '        uint256 _volumeBonus = getVolumeBonusAmount(_basicToken, msg.value);\n', '        uint256 _totalToken = _basicToken.add256(_timeBonus).add256(_volumeBonus);\n', '        \n', '        lastContribitionDate[msg.sender] = getCurrentDatetime();\n', '        referralContribution[msg.sender] = referralContribution[msg.sender].add256(msg.value);\n', '        \n', '        collectableToken[msg.sender] = collectableToken[msg.sender].add256(_totalToken);\n', '        totalCollectableToken = totalCollectableToken.add256(_totalToken);\n', '        assert(etherHolderWallet.send(msg.value));\n', '\n', '        LogContribution(msg.sender, msg.value, _basicToken, _timeBonus, _volumeBonus);\n', '    }\n', '\n', '    /**\n', '    * @dev called by contract owner to record a off chain contribution by Bitcoin. The token collection process is the same as those ether contributors\n', '    * @param _bitcoinAmount bitcoin amount contributed\n', '    * @param _etherAmount ether equivalent amount contributed\n', '    * @param _contributorWallet wallet address of contributor which will be used for token collection\n', '    * @param _contributionDatetime date/time of contribution. For calculating time bonus and claiming referral bonus.\n', '    */\n', '    function contributeByBitcoin(uint256 _bitcoinAmount, uint256 _etherAmount, address _contributorWallet, uint _contributionDatetime) public overMinContribution(_etherAmount) onlyOwner contributionAllowed {\n', '        require(_contributionDatetime <= getCurrentDatetime());\n', '\n', '        uint256 _basicToken = getBasicTokenAmount(_etherAmount);\n', '        uint256 _timeBonus = getTimeBonusAmount(_basicToken);\n', '        uint256 _volumeBonus = getVolumeBonusAmount(_basicToken, _etherAmount);\n', '        uint256 _totalToken = _basicToken.add256(_timeBonus).add256(_volumeBonus);\n', '        \n', '\t    if (_contributionDatetime > lastContribitionDate[_contributorWallet])\n', '            lastContribitionDate[_contributorWallet] = _contributionDatetime;\n', '        referralContribution[_contributorWallet] = referralContribution[_contributorWallet].add256(_etherAmount);\n', '    \n', '        collectableToken[_contributorWallet] = collectableToken[_contributorWallet].add256(_totalToken);\n', '        totalCollectableToken = totalCollectableToken.add256(_totalToken);\n', '        LogContributionBitcoin(_contributorWallet, _bitcoinAmount, _etherAmount, _basicToken, _timeBonus, _volumeBonus, _contributionDatetime);\n', '    }\n', '    \n', '    /**\n', '    * @dev called by contract owner to record a off chain contribution by Ether. The token are distributed off chain already.  The contributor can only entitle referral bonus through this smart contract\n', '    * @param _etherAmount ether equivalent amount contributed\n', '    * @param _contributorWallet wallet address of contributor which will be used for referral bonus collection\n', '    * @param _tokenAmount amunt of token distributed to the contributor. For reference only in the event log\n', '    */\n', '    function recordOffChainContribute(uint256 _etherAmount, address _contributorWallet, uint256 _tokenAmount) public overMinContribution(_etherAmount) onlyOwner {\n', '\n', '        lastContribitionDate[_contributorWallet] = getCurrentDatetime();\n', '        LogOffChainContribution(_contributorWallet, _etherAmount, _tokenAmount);\n', '    }    \n', '\n', '    /**\n', '    * @dev called by contract owner for migration of contributors from old contract to new contract\n', '    * @param _contributorWallets wallet addresss of contributors to be migrated\n', '    */\n', '    function migrateContributors(address[] _contributorWallets) public onlyOwner {\n', '\tfor (uint i = 0; i < _contributorWallets.length; i++) {\n', '        \tlastContribitionDate[_contributorWallets[i]] = getCurrentDatetime();\n', '\t}\n', '    }  \n', '\n', '    /**\n', '    * @dev called by contributor to claim the referral bonus\n', '    * @param _referrerWallet wallet address of referrer.  Referrer must also be a contributor\n', '    */\n', '    function referral(address _referrerWallet) public {\n', '\trequire (msg.sender != _referrerWallet);\n', '        require (referralContribution[msg.sender] > 0);\n', '        require (lastContribitionDate[_referrerWallet] > 0);\n', '        require (getCurrentDatetime() - lastContribitionDate[msg.sender] <= (4 * 24 * 60 * 60));\n', '        \n', '        uint256 _referralBonus = getReferralBonusAmount(referralContribution[msg.sender]);\n', '        referralContribution[msg.sender] = 0;\n', '        \n', '        collectableToken[msg.sender] = collectableToken[msg.sender].add256(_referralBonus);\n', '        collectableToken[_referrerWallet] = collectableToken[_referrerWallet].add256(_referralBonus);\n', '        totalCollectableToken = totalCollectableToken.add256(_referralBonus).add256(_referralBonus);\n', '        LogReferralAward(msg.sender, _referrerWallet, _referralBonus);\n', '    }\n', '    \n', '    /**\n', '    * @dev called by contract owener to register a list of rejected clients who cannot pass the client identification process.\n', '    * @param _clients an array of wallet address clients to be set\n', '    * @param _valueToSet  1 - add to reject list, 0 - remove from reject list\n', '    */\n', '    function setClientIdentRejectList(address[] _clients, uint8 _valueToSet) public onlyOwner {\n', '        for (uint i = 0; i < _clients.length; i++) {\n', '            if (_clients[i] != address(0) && clientIdentRejectList[_clients[i]] != _valueToSet) {\n', '                clientIdentRejectList[_clients[i]] = _valueToSet;\n', '                LogClientIdentRejectListChange(_clients[i], _valueToSet);\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '    * @dev called by contract owner to enable / disable token collection process\n', '    * @param _enable true - enable collection; false - disable collection\n', '    */\n', '    function setTokenCollectable(bool _enable) public onlyOwner saleIsEnd {\n', '        isCollectTokenStart = _enable;\n', '    }\n', '    \n', '    /**\n', '    * @dev called by contributor to collect tokens.  If they are rejected by the client identification process, error will be thrown\n', '    */\n', '    function collectToken() public tokenIsCollectable {\n', '\tuint256 _collToken = collectableToken[msg.sender];\n', '\n', '\trequire(clientIdentRejectList[msg.sender] <= 0);\n', '        require(_collToken > 0);\n', '\n', '        collectableToken[msg.sender] = 0;\n', '\n', '        token.transfer(msg.sender, _collToken);\n', '        LogTokenCollected(msg.sender, _collToken);\n', '    }\n', '\n', '    /**\n', '    * @dev Allow owner to transfer out the token left in the contract\n', '    * @param _to address to transfer to\n', '    * @param _amount amount to transfer\n', '    */  \n', '    function transferTokenOut(address _to, uint256 _amount) public onlyOwner {\n', '        token.transfer(_to, _amount);\n', '    }\n', '    \n', '    /**\n', '    * @dev Allow owner to transfer out the ether left in the contract\n', '    * @param _to address to transfer to\n', '    * @param _amount amount to transfer\n', '    */  \n', '    function transferEtherOut(address _to, uint256 _amount) public onlyOwner {\n', '        assert(_to.send(_amount));\n', '    }  \n', '    \n', '\n', '    //  ***** public constant functions ***************\n', '\n', '    /**\n', '    * @dev to get the amount of token collectable by any contributor\n', '    * @param _contributor contributor to get amont\n', '    */  \n', '    function collectableTokenOf(address _contributor) public constant returns (uint256) {\n', '        return collectableToken[_contributor] ;\n', '    }\n', '    \n', '    /**\n', '    * @dev to get the amount of token collectable by any contributor\n', '    * @param _contributor contributor to get amont\n', '    */  \n', '    function isClientIdentRejectedOf(address _contributor) public constant returns (uint8) {\n', '        return clientIdentRejectList[_contributor];\n', '    }    \n', '    \n', '    /**\n', '    * @dev Fallback function which receives ether and create the appropriate number of tokens for the \n', '    * msg.sender.\n', '    */\n', '    function() external payable {\n', '        contribute();\n', '    }\n', '\n', '}']