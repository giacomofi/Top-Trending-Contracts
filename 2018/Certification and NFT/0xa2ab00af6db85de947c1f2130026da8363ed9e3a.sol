['pragma solidity ^0.4.3;\n', '\n', ' /**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract BlockPaperScissors is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '    ERC20Interface bCoin;\n', '    ERC20Interface pCoin;\n', '    ERC20Interface sCoin;\n', '    ERC20Interface tCoin;\n', '\n', '    address public rpsDev = msg.sender;\n', '    uint8 public lastMove = 1; // last played move; 1=rock, 2=paper, 3=scissor\n', '    address public lastPlayer = msg.sender;\n', '    uint public oneCoin = 1000000000000000000;\n', '\n', '//FUNCTIONS setting and retrieving global variables that impact gameplay\n', '\n', '    function setBCoinContractAddress(address _address) external onlyOwner {\n', '      bCoin = ERC20Interface(_address);\n', '    }\n', '    function setPCoinContractAddress(address _address) external onlyOwner {\n', '      pCoin = ERC20Interface(_address);\n', '    }\n', '    function setSCoinContractAddress(address _address) external onlyOwner {\n', '      sCoin = ERC20Interface(_address);\n', '    }\n', '    function setTCoinContractAddress(address _address) external onlyOwner {\n', '      tCoin = ERC20Interface(_address);\n', '    }\n', '\n', '//EVENTS\n', '\n', '    event newMove(uint8 move);\n', '    event newWinner(address winner);\n', '\n', '// FUNCTIONS interacting with the swine structs in contract\n', '\n', '    function playBps(uint8 _choice) public returns (uint8) {\n', '      require (_choice == 1 || _choice == 2 || _choice == 3);\n', '      if (_choice == lastMove) {\n', '        tCoin.transfer(msg.sender, oneCoin);\n', '        tCoin.transfer(lastPlayer, oneCoin);// send tie token to each player\n', '        setGame(_choice, msg.sender);\n', '        return 3; // it&#39;s a tie\n', '      }\n', '      if (_choice == 1) { //choice is block\n', '        if (lastMove == 3) {\n', '          bCoin.transfer(msg.sender, oneCoin);\n', '          emit newWinner(msg.sender);\n', '          setGame(_choice, msg.sender);\n', '          return 1;// win\n', '          } else {\n', '          pCoin.transfer(lastPlayer, oneCoin);\n', '          emit newWinner(lastPlayer);\n', '          setGame(_choice, msg.sender);\n', '          return 2;//lose\n', '          }\n', '      }\n', '      if (_choice == 2) { // choice is paper\n', '        if (lastMove == 1) {\n', '          pCoin.transfer(msg.sender, oneCoin);\n', '          emit newWinner(msg.sender);\n', '          setGame(_choice, msg.sender);\n', '          return 1;// win\n', '          } else {\n', '          sCoin.transfer(lastPlayer, oneCoin);\n', '          emit newWinner(lastPlayer);\n', '          setGame(_choice, msg.sender);\n', '          return 2;//lose\n', '          }\n', '      }\n', '      if (_choice == 3) { // choice is scissors\n', '        if (lastMove == 2) {\n', '          sCoin.transfer(msg.sender, oneCoin);\n', '          emit newWinner(msg.sender);\n', '          setGame(_choice, msg.sender);\n', '          return 1;// win\n', '          } else {\n', '          bCoin.transfer(lastPlayer, oneCoin);\n', '          emit newWinner(lastPlayer);\n', '          setGame(_choice, msg.sender);\n', '          return 2;//lose\n', '          }\n', '      }\n', '    }\n', '\n', '    function setGame(uint8 _move, address _player) private {\n', '      lastMove = _move;\n', '      lastPlayer = _player;\n', '      emit newMove(_move);\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.3;\n', '\n', ' /**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract BlockPaperScissors is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '    ERC20Interface bCoin;\n', '    ERC20Interface pCoin;\n', '    ERC20Interface sCoin;\n', '    ERC20Interface tCoin;\n', '\n', '    address public rpsDev = msg.sender;\n', '    uint8 public lastMove = 1; // last played move; 1=rock, 2=paper, 3=scissor\n', '    address public lastPlayer = msg.sender;\n', '    uint public oneCoin = 1000000000000000000;\n', '\n', '//FUNCTIONS setting and retrieving global variables that impact gameplay\n', '\n', '    function setBCoinContractAddress(address _address) external onlyOwner {\n', '      bCoin = ERC20Interface(_address);\n', '    }\n', '    function setPCoinContractAddress(address _address) external onlyOwner {\n', '      pCoin = ERC20Interface(_address);\n', '    }\n', '    function setSCoinContractAddress(address _address) external onlyOwner {\n', '      sCoin = ERC20Interface(_address);\n', '    }\n', '    function setTCoinContractAddress(address _address) external onlyOwner {\n', '      tCoin = ERC20Interface(_address);\n', '    }\n', '\n', '//EVENTS\n', '\n', '    event newMove(uint8 move);\n', '    event newWinner(address winner);\n', '\n', '// FUNCTIONS interacting with the swine structs in contract\n', '\n', '    function playBps(uint8 _choice) public returns (uint8) {\n', '      require (_choice == 1 || _choice == 2 || _choice == 3);\n', '      if (_choice == lastMove) {\n', '        tCoin.transfer(msg.sender, oneCoin);\n', '        tCoin.transfer(lastPlayer, oneCoin);// send tie token to each player\n', '        setGame(_choice, msg.sender);\n', "        return 3; // it's a tie\n", '      }\n', '      if (_choice == 1) { //choice is block\n', '        if (lastMove == 3) {\n', '          bCoin.transfer(msg.sender, oneCoin);\n', '          emit newWinner(msg.sender);\n', '          setGame(_choice, msg.sender);\n', '          return 1;// win\n', '          } else {\n', '          pCoin.transfer(lastPlayer, oneCoin);\n', '          emit newWinner(lastPlayer);\n', '          setGame(_choice, msg.sender);\n', '          return 2;//lose\n', '          }\n', '      }\n', '      if (_choice == 2) { // choice is paper\n', '        if (lastMove == 1) {\n', '          pCoin.transfer(msg.sender, oneCoin);\n', '          emit newWinner(msg.sender);\n', '          setGame(_choice, msg.sender);\n', '          return 1;// win\n', '          } else {\n', '          sCoin.transfer(lastPlayer, oneCoin);\n', '          emit newWinner(lastPlayer);\n', '          setGame(_choice, msg.sender);\n', '          return 2;//lose\n', '          }\n', '      }\n', '      if (_choice == 3) { // choice is scissors\n', '        if (lastMove == 2) {\n', '          sCoin.transfer(msg.sender, oneCoin);\n', '          emit newWinner(msg.sender);\n', '          setGame(_choice, msg.sender);\n', '          return 1;// win\n', '          } else {\n', '          bCoin.transfer(lastPlayer, oneCoin);\n', '          emit newWinner(lastPlayer);\n', '          setGame(_choice, msg.sender);\n', '          return 2;//lose\n', '          }\n', '      }\n', '    }\n', '\n', '    function setGame(uint8 _move, address _player) private {\n', '      lastMove = _move;\n', '      lastPlayer = _player;\n', '      emit newMove(_move);\n', '    }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}']
