['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    Sale(address ethwallet)   // this will send the received ETH funds to this address\n', '  @author Yumerium Ltd\n', '*/\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract YumeriumManager {\n', '    function getYumerium(address sender) external payable returns (uint256);\n', '}\n', '\n', 'contract Sale {\n', '    uint public saleEnd1 = 1535846400 + 1 days; //9/3/2018 @ 12:00am (UTC)\n', '    uint public saleEnd2 = saleEnd1 + 1 days; //9/4/2018 @ 12:00am (UTC)\n', '    uint public saleEnd3 = saleEnd2 + 1 days; //9/5/2018 @ 12:00am (UTC)\n', '    uint public saleEnd4 = 1539129600; //10/10/2018 @ 12:00am (UTC)\n', '    uint256 public minEthValue = 10 ** 15; // 0.001 eth\n', '    \n', '    using SafeMath for uint256;\n', '    uint256 public maxSale;\n', '    uint256 public totalSaled;\n', '    mapping(uint256 => mapping(address => uint256)) public ticketsEarned;   // tickets earned for each user each day\n', '                                                                            // (day => (user address => # tickets))\n', '    mapping(uint256 => uint256) public totalTickets; // (day => # total tickets)\n', '    mapping(uint256 => uint256) public eachDaySold; // how many ethereum sold for each day\n', '    uint256 public currentDay;  // shows what day current day is for event sale (0 = event sale ended)\n', '                                // 1 = day 1, 2 = day 2, 3 = day 3\n', '    mapping(uint256 => address[]) public eventSaleParticipants; // participants for event sale for each day\n', '    \n', '    YumeriumManager public manager;\n', '\n', '    address public creator;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '\n', '    constructor(address _manager_address) public {\n', '        maxSale = 316906850 * 10 ** 8; \n', '        manager = YumeriumManager(_manager_address);\n', '        creator = msg.sender;\n', '        currentDay = 1;\n', '    }\n', '\n', '    function () external payable {\n', '        buy();\n', '    }\n', '\n', '    // CONTRIBUTE FUNCTION\n', '    // converts ETH to TOKEN and sends new TOKEN to the sender\n', '    function contribute() external payable {\n', '        buy();\n', '    }\n', '    \n', '    function getNumParticipants(uint256 whichDay) public view returns (uint256) {\n', '        return eventSaleParticipants[whichDay].length;\n', '    }\n', '    \n', '    function buy() internal {\n', '        require(msg.value>=minEthValue);\n', '        require(now < saleEnd4); // main sale postponed\n', '        \n', '        uint256 amount = manager.getYumerium.value(msg.value)(msg.sender);\n', '        uint256 total = totalSaled.add(amount);\n', '        \n', '        require(total<=maxSale);\n', '        \n', '        totalSaled = total;\n', '        if (currentDay > 0) {\n', '            eachDaySold[currentDay] = eachDaySold[currentDay].add(msg.value);\n', '            uint256 tickets = msg.value.div(10 ** 17);\n', '            if (ticketsEarned[currentDay][msg.sender] == 0) {\n', '                eventSaleParticipants[currentDay].push(msg.sender);\n', '            }\n', '            ticketsEarned[currentDay][msg.sender] = ticketsEarned[currentDay][msg.sender].add(tickets);\n', '            totalTickets[currentDay] = totalTickets[currentDay].add(tickets);\n', '            if (now >= saleEnd3)\n', '            {\n', '                currentDay = 0;\n', '            }\n', '            else if (now >= saleEnd2)\n', '            {\n', '                currentDay = 3;\n', '            }\n', '            else if (now >= saleEnd1)\n', '            {\n', '                currentDay = 2;\n', '            }\n', '        }\n', '        \n', '        emit Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // change yumo address\n', '    function changeManagerAddress(address _manager_address) external {\n', '        require(msg.sender==creator, "You are not a creator!");\n', '        manager = YumeriumManager(_manager_address);\n', '    }\n', '}']