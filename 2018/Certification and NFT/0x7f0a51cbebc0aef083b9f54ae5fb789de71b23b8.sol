['contract Delegatable {\n', '  address empty1; // unknown slot\n', '  address empty2; // unknown slot\n', '  address empty3;  // unknown slot\n', '  address public owner;  // matches owner slot in controller\n', '  address public delegation; // matches thisAddr slot in controller\n', '\n', '  event DelegationTransferred(address indexed previousDelegate, address indexed newDelegation);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows owner to transfer delegation of the contract to a newDelegation.\n', '   * @param newDelegation The address to transfer delegation to.\n', '   */\n', '  function transferDelegation(address newDelegation) public onlyOwner {\n', '    require(newDelegation != address(0));\n', '    emit DelegationTransferred(delegation, newDelegation);\n', '    delegation = newDelegation;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract DelegateProxy {\n', '\n', '    /**\n', '    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\n', '    * @param _dst Destination address to perform the delegatecall\n', '    * @param _calldata Calldata for the delegatecall\n', '    */\n', '    function delegatedFwd(address _dst, bytes _calldata) internal {\n', '        assembly {\n', '            let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\n', '            let size := returndatasize\n', '\n', '            let ptr := mload(0x40)\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n', '            // if the call returned error data, forward it\n', '            switch result case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '        }\n', '    }\n', '}\n', '\n', 'contract Proxy is Delegatable, DelegateProxy {\n', '\n', '  /**\n', '   * @dev Function to invoke all function that are implemented in controler\n', '   */\n', '  function () public {\n', '    delegatedFwd(delegation, msg.data);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to initialize storage of proxy\n', '   * @param _controller The address of the controller to load the code from\n', '   * @param _cap Max amount of tokens that should be mintable\n', '   */\n', '  function initialize(address _controller, uint256 _cap) public {\n', '    require(owner == 0);\n', '    owner = msg.sender;\n', '    delegation = _controller;\n', '    delegatedFwd(_controller, msg.data);\n', '  }\n', '\n', '}']
['contract Delegatable {\n', '  address empty1; // unknown slot\n', '  address empty2; // unknown slot\n', '  address empty3;  // unknown slot\n', '  address public owner;  // matches owner slot in controller\n', '  address public delegation; // matches thisAddr slot in controller\n', '\n', '  event DelegationTransferred(address indexed previousDelegate, address indexed newDelegation);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows owner to transfer delegation of the contract to a newDelegation.\n', '   * @param newDelegation The address to transfer delegation to.\n', '   */\n', '  function transferDelegation(address newDelegation) public onlyOwner {\n', '    require(newDelegation != address(0));\n', '    emit DelegationTransferred(delegation, newDelegation);\n', '    delegation = newDelegation;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract DelegateProxy {\n', '\n', '    /**\n', '    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\n', '    * @param _dst Destination address to perform the delegatecall\n', '    * @param _calldata Calldata for the delegatecall\n', '    */\n', '    function delegatedFwd(address _dst, bytes _calldata) internal {\n', '        assembly {\n', '            let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\n', '            let size := returndatasize\n', '\n', '            let ptr := mload(0x40)\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n', '            // if the call returned error data, forward it\n', '            switch result case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '        }\n', '    }\n', '}\n', '\n', 'contract Proxy is Delegatable, DelegateProxy {\n', '\n', '  /**\n', '   * @dev Function to invoke all function that are implemented in controler\n', '   */\n', '  function () public {\n', '    delegatedFwd(delegation, msg.data);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to initialize storage of proxy\n', '   * @param _controller The address of the controller to load the code from\n', '   * @param _cap Max amount of tokens that should be mintable\n', '   */\n', '  function initialize(address _controller, uint256 _cap) public {\n', '    require(owner == 0);\n', '    owner = msg.sender;\n', '    delegation = _controller;\n', '    delegatedFwd(_controller, msg.data);\n', '  }\n', '\n', '}']
