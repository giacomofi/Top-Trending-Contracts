['pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Token Interface\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract ERC20Token {\n', '  function name() public view returns (string);\n', '  function symbol() public view returns (string);\n', '  function decimals() public view returns (uint);\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address account) public view returns (uint);\n', '  function transfer(address to, uint amount) public returns (bool);\n', '  function transferFrom(address from, address to, uint amount) public returns (bool);\n', '  function approve(address spender, uint amount) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title This contract handles the airdrop distribution\n', ' */\n', 'contract INNBCAirdropDistribution is Ownable {\n', '  address public tokenINNBCAddress;\n', '\n', '  /**\n', '   * @dev Sets the address of the INNBC token\n', '   * @param tokenAddress The address of the INNBC token contract\n', '   */\n', '  function setINNBCTokenAddress(address tokenAddress) external onlyOwner() {\n', '    require(tokenAddress != address(0), "Token address cannot be null");\n', '\n', '    tokenINNBCAddress = tokenAddress;\n', '  }\n', '\n', '  /**\n', '   * @dev Batch transfers tokens from the owner account to the recipients\n', '   * @param recipients An array of the addresses of the recipients\n', '   * @param amountPerRecipient An array of amounts of tokens to give to each recipient\n', '   */\n', '  function airdropTokens(address[] recipients, uint[] amountPerRecipient) external onlyOwner() {\n', '    /* 100 recipients is the limit, otherwise we may reach the gas limit */\n', '    require(recipients.length <= 100, "Recipients list is too long");\n', '\n', '    /* Both arrays need to have the same length */\n', '    require(recipients.length == amountPerRecipient.length, "Arrays do not have the same length");\n', '\n', '    /* We check if the address of the token contract is set */\n', '    require(tokenINNBCAddress != address(0), "INNBC token contract address cannot be null");\n', '\n', '    ERC20Token tokenINNBC = ERC20Token(tokenINNBCAddress);\n', '\n', '    /* We check if the owner has enough tokens for everyone */\n', '    require(\n', '      calculateSum(amountPerRecipient) <= tokenINNBC.balanceOf(msg.sender),\n', '      "Sender does not have enough tokens"\n', '    );\n', '\n', '    /* We check if the contract is allowed to handle this amount */\n', '    require(\n', '      calculateSum(amountPerRecipient) <= tokenINNBC.allowance(msg.sender, address(this)),\n', '      "This contract is not allowed to handle this amount"\n', '    );\n', '\n', '    /* If everything is okay, we can transfer the tokens */\n', '    for (uint i = 0; i < recipients.length; i += 1) {\n', '      tokenINNBC.transferFrom(msg.sender, recipients[i], amountPerRecipient[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the sum of an array of uints\n', '   * @param a An array of uints\n', '   * @return The sum as an uint\n', '   */\n', '  function calculateSum(uint[] a) private pure returns (uint) {\n', '    uint sum;\n', '\n', '    for (uint i = 0; i < a.length; i = SafeMath.add(i, 1)) {\n', '      sum = SafeMath.add(sum, a[i]);\n', '    }\n', '\n', '    return sum;\n', '  }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Token Interface\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract ERC20Token {\n', '  function name() public view returns (string);\n', '  function symbol() public view returns (string);\n', '  function decimals() public view returns (uint);\n', '  function totalSupply() public view returns (uint);\n', '  function balanceOf(address account) public view returns (uint);\n', '  function transfer(address to, uint amount) public returns (bool);\n', '  function transferFrom(address from, address to, uint amount) public returns (bool);\n', '  function approve(address spender, uint amount) public returns (bool);\n', '  function allowance(address owner, address spender) public view returns (uint);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title This contract handles the airdrop distribution\n', ' */\n', 'contract INNBCAirdropDistribution is Ownable {\n', '  address public tokenINNBCAddress;\n', '\n', '  /**\n', '   * @dev Sets the address of the INNBC token\n', '   * @param tokenAddress The address of the INNBC token contract\n', '   */\n', '  function setINNBCTokenAddress(address tokenAddress) external onlyOwner() {\n', '    require(tokenAddress != address(0), "Token address cannot be null");\n', '\n', '    tokenINNBCAddress = tokenAddress;\n', '  }\n', '\n', '  /**\n', '   * @dev Batch transfers tokens from the owner account to the recipients\n', '   * @param recipients An array of the addresses of the recipients\n', '   * @param amountPerRecipient An array of amounts of tokens to give to each recipient\n', '   */\n', '  function airdropTokens(address[] recipients, uint[] amountPerRecipient) external onlyOwner() {\n', '    /* 100 recipients is the limit, otherwise we may reach the gas limit */\n', '    require(recipients.length <= 100, "Recipients list is too long");\n', '\n', '    /* Both arrays need to have the same length */\n', '    require(recipients.length == amountPerRecipient.length, "Arrays do not have the same length");\n', '\n', '    /* We check if the address of the token contract is set */\n', '    require(tokenINNBCAddress != address(0), "INNBC token contract address cannot be null");\n', '\n', '    ERC20Token tokenINNBC = ERC20Token(tokenINNBCAddress);\n', '\n', '    /* We check if the owner has enough tokens for everyone */\n', '    require(\n', '      calculateSum(amountPerRecipient) <= tokenINNBC.balanceOf(msg.sender),\n', '      "Sender does not have enough tokens"\n', '    );\n', '\n', '    /* We check if the contract is allowed to handle this amount */\n', '    require(\n', '      calculateSum(amountPerRecipient) <= tokenINNBC.allowance(msg.sender, address(this)),\n', '      "This contract is not allowed to handle this amount"\n', '    );\n', '\n', '    /* If everything is okay, we can transfer the tokens */\n', '    for (uint i = 0; i < recipients.length; i += 1) {\n', '      tokenINNBC.transferFrom(msg.sender, recipients[i], amountPerRecipient[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the sum of an array of uints\n', '   * @param a An array of uints\n', '   * @return The sum as an uint\n', '   */\n', '  function calculateSum(uint[] a) private pure returns (uint) {\n', '    uint sum;\n', '\n', '    for (uint i = 0; i < a.length; i = SafeMath.add(i, 1)) {\n', '      sum = SafeMath.add(sum, a[i]);\n', '    }\n', '\n', '    return sum;\n', '  }\n', '}']
