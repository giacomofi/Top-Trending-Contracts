['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', 'contract owned {\n', '    /* Owner definition. */\n', '    address public owner; // Owner address.\n', '    function owned() internal {\n', '        owner = msg.sender ;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner); _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract token { \n', '    /* Base token definition. */\n', '    string  public name;        // Name for the token.\n', '    string  public symbol;      // Symbol for the token.\n', '    uint8   public decimals;    // Number of decimals of the token.\n', '    uint256 public totalSupply; // Total of tokens created.\n', '\n', '    // Array containing the balance foreach address.\n', '    mapping (address => uint256) public balanceOf;\n', '    // Array containing foreach address, an array containing each approved address and the amount of tokens it can spend.\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify about a transfer done. */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Initializes the contract */\n', '    function token(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) internal {\n', '        balanceOf[msg.sender] = initialSupply; // Gives the creator all initial tokens.\n', '        totalSupply           = initialSupply; // Update total supply.\n', '        name                  = tokenName;     // Set the name for display purposes.\n', '        symbol                = tokenSymbol;   // Set the symbol for display purposes.\n', '        decimals              = decimalUnits;  // Amount of decimals for display purposes.\n', '    }\n', '\n', '    /* Internal transfer, only can be called by this contract. */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);                               // Prevent transfer to 0x0 address.\n', '        require(balanceOf[_from] > _value);                // Check if the sender has enough.\n', '        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\n', '        balanceOf[_from] -= _value; // Subtract from the sender.\n', '        balanceOf[_to]   += _value; // Add the same to the recipient.\n', '        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` from your account.\n', '    /// @param _to The address of the recipient.\n', '    /// @param _value The amount to send.\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` in behalf of `_from`.\n', '    /// @param _from The address of the sender.\n', '    /// @param _to The address of the recipient.\n', '    /// @param _value The amount to send.\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]); // Check allowance.\n', '        allowance[_from][msg.sender] -= _value; // Updates the allowance array, substracting the amount sent.\n', '        _transfer(_from, _to, _value); // Makes the transfer.\n', '        return true;\n', '    }\n', '\n', '    /// @notice Allows `_spender` to spend a maximum of `_value` tokens in your behalf.\n', '    /// @param _spender The address authorized to spend.\n', '    /// @param _value The max amount they can spend.\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value; // Adds a new register to allowance, permiting _spender to use _value of your tokens.\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PMHToken is owned, token {\n', '    /* Specific token definition for -HormitechToken-. */\n', '    uint256 public sellPrice         = 5000000000000000;  // Price applied if someone wants to sell a token.\n', '    uint256 public buyPrice          = 10000000000000000; // Price applied if someone wants to buy a token.\n', '    bool    public closeBuy          = false;             // If true, nobody will be able to buy.\n', '    bool    public closeSell         = false;             // If true, nobody will be able to sell.\n', '    uint256 public tokensAvailable   = balanceOf[this];   // Number of tokens available for sell.\n', '    uint256 public solvency          = this.balance;      // Amount of Ether available to pay sales.\n', '    uint256 public profit            = 0;                 // Shows the actual profit for the company.\n', '    address public comisionGetter = 0x70B593f89DaCF6e3BD3e5bD867113FEF0B2ee7aD ; // The address that gets the comisions paid.\n', '\n', '// added MAR 2018\n', '    mapping (address => string ) public emails ;   // Array containing the e-mail addresses of the token holders \n', '    mapping (uint => uint) public dividends ; // for each period in the index, how many weis set for dividends distribution\n', '\n', '    mapping (address => uint[]) public paidDividends ; // for each address, if the period dividend was paid or not and the amount \n', '// added MAR 2018\n', '\n', '    mapping (address => bool) public frozenAccount; // Array containing foreach address if it&#39;s frozen or not.\n', '\n', '    /* This generates a public event on the blockchain that will notify about an address being freezed. */\n', '    event FrozenFunds(address target, bool frozen);\n', '    /* This generates a public event on the blockchain that will notify about an addition of Ether to the contract. */\n', '    event LogDeposit(address sender, uint amount);\n', '    /* This generates a public event on the blockchain that will notify about a Withdrawal of Ether from the contract. */\n', '    event LogWithdrawal(address receiver, uint amount);\n', '\n', '    /* Initializes the contract */\n', '    function PMHToken(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) public \n', '    token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);                               // Prevent transfer to 0x0 address.\n', '        require(balanceOf[_from] >= _value);               // Check if the sender has enough.\n', '        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\n', '        require(!frozenAccount[_from]);                    // Check if sender is frozen.\n', '        require(!frozenAccount[_to]);                      // Check if recipient is frozen.\n', '\t\tbalanceOf[_from] -= _value; // Subtracts _value tokens from the sender.\n', '        balanceOf[_to]   += _value; // Adds the same amount to the recipient.\n', '\n', '        _updateTokensAvailable(balanceOf[this]); // Update the balance of tokens available if necessary.\n', '        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\n', '    }\n', '\n', '    function refillTokens(uint256 _value) public onlyOwner{\n', '        // Owner sends tokens to the contract.\n', '        _transfer(msg.sender, this, _value);\n', '    }\n', '\n', '    /* Overrides basic transfer function due to comision value */\n', '    function transfer(address _to, uint256 _value) public {\n', '    \t// This function requires a comision value of 0.4% of the market value.\n', '        uint market_value = _value * sellPrice;\n', '        uint comision = market_value * 4 / 1000;\n', '        // The token smart-contract pays comision, else the transfer is not possible.\n', '        require(this.balance >= comision);\n', '        comisionGetter.transfer(comision); // Transfers comision to the comisionGetter.\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /* Overrides basic transferFrom function due to comision value */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]); // Check allowance.\n', '        // This function requires a comision value of 0.4% of the market value.\n', '        uint market_value = _value * sellPrice;\n', '        uint comision = market_value * 4 / 1000;\n', '        // The token smart-contract pays comision, else the transfer is not possible.\n', '        require(this.balance >= comision);\n', '        comisionGetter.transfer(comision); // Transfers comision to the comisionGetter.\n', '        allowance[_from][msg.sender] -= _value; // Updates the allowance array, substracting the amount sent.\n', '        _transfer(_from, _to, _value); // Makes the transfer.\n', '        return true;\n', '    }\n', '\n', '    /* Internal, updates the balance of tokens available. */\n', '    function _updateTokensAvailable(uint256 _tokensAvailable) internal { tokensAvailable = _tokensAvailable; }\n', '\n', '    /* Internal, updates the balance of Ether available in order to cover potential sales. */\n', '    function _updateSolvency(uint256 _solvency) internal { solvency = _solvency; }\n', '\n', '    /* Internal, updates the profit value */\n', '    function _updateProfit(uint256 _increment, bool add) internal{\n', '        if (add){\n', '            // Increase the profit value\n', '            profit = profit + _increment;\n', '        }else{\n', '            // Decrease the profit value\n', '            if(_increment > profit){ profit = 0; }\n', '            else{ profit = profit - _increment; }\n', '        }\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`.\n', '    /// @param target Address to receive the tokens.\n', '    /// @param mintedAmount The amount of tokens target will receive.\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] += mintedAmount; // Updates target&#39;s balance.\n', '        totalSupply       += mintedAmount; // Updates totalSupply.\n', '        _updateTokensAvailable(balanceOf[this]); // Update the balance of tokens available if necessary.\n', '        Transfer(0, this, mintedAmount);      // Notifies the blockchain about the tokens created.\n', '        Transfer(this, target, mintedAmount); // Notifies the blockchain about the transfer to target.\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens.\n', '    /// @param target Address to be frozen.\n', '    /// @param freeze Either to freeze target or not.\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze; // Sets the target status. True if it&#39;s frozen, False if it&#39;s not.\n', '        FrozenFunds(target, freeze); // Notifies the blockchain about the change of state.\n', '    }\n', '\n', '    /// @notice Allow addresses to pay `newBuyPrice`ETH when buying and receive `newSellPrice`ETH when selling, foreach token bought/sold.\n', '    /// @param newSellPrice Price applied when an address sells its tokens, amount in WEI (1ETH = 10&#185;⁸WEI).\n', '    /// @param newBuyPrice Price applied when an address buys tokens, amount in WEI (1ETH = 10&#185;⁸WEI).\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice; // Updates the buying price.\n', '        buyPrice = newBuyPrice;   // Updates the selling price.\n', '    }\n', '\n', '    /// @notice Sets the state of buy and sell operations\n', '    /// @param isClosedBuy True if buy operations are closed, False if opened.\n', '    /// @param isClosedSell True if sell operations are closed, False if opened.\n', '    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner public {\n', '        closeBuy = isClosedBuy;   // Updates the state of buy operations.\n', '        closeSell = isClosedSell; // Updates the state of sell operations.\n', '    }\n', '\n', '    /// @notice Deposits Ether to the contract\n', '    function deposit() payable public returns(bool success) {\n', '        require((this.balance + msg.value) > this.balance); // Checks for overflows.\n', '        //Contract has already received the Ether when this function is executed.\n', '        _updateSolvency(this.balance);   // Updates the solvency value of the contract.\n', '        _updateProfit(msg.value, false); // Decrease profit value.\n', '        // Decrease because deposits will be done mostly by the owner.\n', '        // Possible donations won&#39;t count as profit for the company, but in favor of the investors.\n', '        LogDeposit(msg.sender, msg.value); // Notifies the blockchain about the Ether received.\n', '        return true;\n', '    }\n', '\n', '    /// @notice The owner withdraws Ether from the contract.\n', '    /// @param amountInWeis Amount of ETH in WEI which will be withdrawed.\n', '    function withdraw(uint amountInWeis) onlyOwner public {\n', '        LogWithdrawal(msg.sender, amountInWeis); // Notifies the blockchain about the withdrawal.\n', '        _updateSolvency( (this.balance - amountInWeis) ); // Updates the solvency value of the contract.\n', '        _updateProfit(amountInWeis, true);                // Increase the profit value.\n', '        owner.transfer(amountInWeis); // Sends the Ether to owner address.\n', '    }\n', '\n', '    function withdrawDividends(uint amountInWeis) internal returns(bool success) {\n', '        LogWithdrawal(msg.sender, amountInWeis); // Notifies the blockchain about the withdrawal.\n', '        _updateSolvency( (this.balance - amountInWeis) ); // Updates the solvency value of the contract.\n', '        msg.sender.transfer(amountInWeis); // Sends the Ether to owner address.\n', '        return true ; \n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending Ether.\n', '    function buy() public payable {\n', '        require(!closeBuy); //Buy operations must be opened\n', '        uint amount = msg.value / buyPrice; //Calculates the amount of tokens to be sent\n', '        uint market_value = amount * buyPrice; //Market value for this amount\n', '        uint comision = market_value * 4 / 1000; //Calculates the comision for this transaction\n', '        uint profit_in_transaction = market_value - (amount * sellPrice) - comision; //Calculates the relative profit for this transaction\n', '        require(this.balance >= comision); //The token smart-contract pays comision, else the operation is not possible.\n', '        comisionGetter.transfer(comision); //Transfers comision to the comisionGetter.\n', '        _transfer(this, msg.sender, amount); //Makes the transfer of tokens.\n', '        _updateSolvency((this.balance - profit_in_transaction)); //Updates the solvency value of the contract.\n', '        _updateProfit(profit_in_transaction, true); //Increase the profit value.\n', '        owner.transfer(profit_in_transaction); //Sends profit to the owner of the contract.\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to the contract.\n', '    /// @param amount amount of tokens to be sold.\n', '    function sell(uint256 amount) public {\n', '        require(!closeSell); //Sell operations must be opened\n', '        uint market_value = amount * sellPrice; //Market value for this amount\n', '        uint comision = market_value * 4 / 1000; //Calculates the comision for this transaction\n', '        uint amount_weis = market_value + comision; //Total in weis that must be paid\n', '        require(this.balance >= amount_weis); //Contract must have enough weis\n', '        comisionGetter.transfer(comision); //Transfers comision to the comisionGetter\n', '        _transfer(msg.sender, this, amount); //Makes the transfer of tokens, the contract receives the tokens.\n', '        _updateSolvency( (this.balance - amount_weis) ); //Updates the solvency value of the contract.\n', '        msg.sender.transfer(market_value); //Sends Ether to the seller.\n', '    }\n', '\n', '    /// Default function, sender buys tokens by sending ether to the contract:\n', '    function () public payable { buy(); }\n', '\n', '\n', '    function setDividends(uint _period, uint _totalAmount) onlyOwner public returns (bool success) {\n', '        require(this.balance >= _totalAmount ) ; \n', '// period is 201801 201802 etc. yyyymm - no more than 1 dividend distribution per month\n', '        dividends[_period] = _totalAmount ; \n', '        return true ; \n', '    } \n', '\n', '\n', 'function setEmail(string _email ) public returns (bool success) {\n', '    require(balanceOf[msg.sender] > 0 ) ;\n', '   // require(emails[msg.sender] == "" ) ; // checks the e-mail for this address was not already set\n', '    emails[msg.sender] = _email ; \n', '    return true ; \n', '    } \n', '\n', '\n', '    function dividendsGetPaid(uint _period) public returns (bool success) {\n', '     uint percentageDividends ; \n', '     uint qtyDividends ; \n', '\n', '     require(!frozenAccount[msg.sender]); // frozen accounts are not allowed to withdraw ether \n', '     require(balanceOf[msg.sender] > 0 ) ; // sender has a positive balance of tokens to get paid \n', '     require(dividends[_period] > 0) ; // there is an active dividend period  \n', '     require(paidDividends[msg.sender][_period] == 0) ;  // the dividend for this token holder was not yet paid\n', '\n', '    // using here a 10000 (ten thousand) arbitrary multiplying factor for floating point precision\n', '     percentageDividends = (balanceOf[msg.sender] / totalSupply  ) * 10000 ; \n', '     qtyDividends = ( percentageDividends * dividends[_period] ) / 10000  ;\n', '     require(this.balance >= qtyDividends) ; // contract has enough ether to pay this dividend \n', '     paidDividends[msg.sender][_period] = qtyDividends ;  // record the dividend was paid \n', '     require(withdrawDividends(qtyDividends)); \n', '     return true ; \n', '\n', '    }\n', '\n', '\n', 'function adminResetEmail(address _address, string _newEmail ) public onlyOwner  {\n', '    require(balanceOf[_address] > 0 ) ;\n', '    emails[_address] = _newEmail ; \n', '    \n', '    } \n', '\n', '\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', 'contract owned {\n', '    /* Owner definition. */\n', '    address public owner; // Owner address.\n', '    function owned() internal {\n', '        owner = msg.sender ;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner); _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract token { \n', '    /* Base token definition. */\n', '    string  public name;        // Name for the token.\n', '    string  public symbol;      // Symbol for the token.\n', '    uint8   public decimals;    // Number of decimals of the token.\n', '    uint256 public totalSupply; // Total of tokens created.\n', '\n', '    // Array containing the balance foreach address.\n', '    mapping (address => uint256) public balanceOf;\n', '    // Array containing foreach address, an array containing each approved address and the amount of tokens it can spend.\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /* This generates a public event on the blockchain that will notify about a transfer done. */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /* Initializes the contract */\n', '    function token(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) internal {\n', '        balanceOf[msg.sender] = initialSupply; // Gives the creator all initial tokens.\n', '        totalSupply           = initialSupply; // Update total supply.\n', '        name                  = tokenName;     // Set the name for display purposes.\n', '        symbol                = tokenSymbol;   // Set the symbol for display purposes.\n', '        decimals              = decimalUnits;  // Amount of decimals for display purposes.\n', '    }\n', '\n', '    /* Internal transfer, only can be called by this contract. */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);                               // Prevent transfer to 0x0 address.\n', '        require(balanceOf[_from] > _value);                // Check if the sender has enough.\n', '        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\n', '        balanceOf[_from] -= _value; // Subtract from the sender.\n', '        balanceOf[_to]   += _value; // Add the same to the recipient.\n', '        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` from your account.\n', '    /// @param _to The address of the recipient.\n', '    /// @param _value The amount to send.\n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` in behalf of `_from`.\n', '    /// @param _from The address of the sender.\n', '    /// @param _to The address of the recipient.\n', '    /// @param _value The amount to send.\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]); // Check allowance.\n', '        allowance[_from][msg.sender] -= _value; // Updates the allowance array, substracting the amount sent.\n', '        _transfer(_from, _to, _value); // Makes the transfer.\n', '        return true;\n', '    }\n', '\n', '    /// @notice Allows `_spender` to spend a maximum of `_value` tokens in your behalf.\n', '    /// @param _spender The address authorized to spend.\n', '    /// @param _value The max amount they can spend.\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value; // Adds a new register to allowance, permiting _spender to use _value of your tokens.\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract PMHToken is owned, token {\n', '    /* Specific token definition for -HormitechToken-. */\n', '    uint256 public sellPrice         = 5000000000000000;  // Price applied if someone wants to sell a token.\n', '    uint256 public buyPrice          = 10000000000000000; // Price applied if someone wants to buy a token.\n', '    bool    public closeBuy          = false;             // If true, nobody will be able to buy.\n', '    bool    public closeSell         = false;             // If true, nobody will be able to sell.\n', '    uint256 public tokensAvailable   = balanceOf[this];   // Number of tokens available for sell.\n', '    uint256 public solvency          = this.balance;      // Amount of Ether available to pay sales.\n', '    uint256 public profit            = 0;                 // Shows the actual profit for the company.\n', '    address public comisionGetter = 0x70B593f89DaCF6e3BD3e5bD867113FEF0B2ee7aD ; // The address that gets the comisions paid.\n', '\n', '// added MAR 2018\n', '    mapping (address => string ) public emails ;   // Array containing the e-mail addresses of the token holders \n', '    mapping (uint => uint) public dividends ; // for each period in the index, how many weis set for dividends distribution\n', '\n', '    mapping (address => uint[]) public paidDividends ; // for each address, if the period dividend was paid or not and the amount \n', '// added MAR 2018\n', '\n', "    mapping (address => bool) public frozenAccount; // Array containing foreach address if it's frozen or not.\n", '\n', '    /* This generates a public event on the blockchain that will notify about an address being freezed. */\n', '    event FrozenFunds(address target, bool frozen);\n', '    /* This generates a public event on the blockchain that will notify about an addition of Ether to the contract. */\n', '    event LogDeposit(address sender, uint amount);\n', '    /* This generates a public event on the blockchain that will notify about a Withdrawal of Ether from the contract. */\n', '    event LogWithdrawal(address receiver, uint amount);\n', '\n', '    /* Initializes the contract */\n', '    function PMHToken(uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol) public \n', '    token (initialSupply, tokenName, decimalUnits, tokenSymbol) {}\n', '\n', '    /* Internal transfer, only can be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);                               // Prevent transfer to 0x0 address.\n', '        require(balanceOf[_from] >= _value);               // Check if the sender has enough.\n', '        require(balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows.\n', '        require(!frozenAccount[_from]);                    // Check if sender is frozen.\n', '        require(!frozenAccount[_to]);                      // Check if recipient is frozen.\n', '\t\tbalanceOf[_from] -= _value; // Subtracts _value tokens from the sender.\n', '        balanceOf[_to]   += _value; // Adds the same amount to the recipient.\n', '\n', '        _updateTokensAvailable(balanceOf[this]); // Update the balance of tokens available if necessary.\n', '        Transfer(_from, _to, _value); // Notifies the blockchain about the transfer.\n', '    }\n', '\n', '    function refillTokens(uint256 _value) public onlyOwner{\n', '        // Owner sends tokens to the contract.\n', '        _transfer(msg.sender, this, _value);\n', '    }\n', '\n', '    /* Overrides basic transfer function due to comision value */\n', '    function transfer(address _to, uint256 _value) public {\n', '    \t// This function requires a comision value of 0.4% of the market value.\n', '        uint market_value = _value * sellPrice;\n', '        uint comision = market_value * 4 / 1000;\n', '        // The token smart-contract pays comision, else the transfer is not possible.\n', '        require(this.balance >= comision);\n', '        comisionGetter.transfer(comision); // Transfers comision to the comisionGetter.\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    /* Overrides basic transferFrom function due to comision value */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]); // Check allowance.\n', '        // This function requires a comision value of 0.4% of the market value.\n', '        uint market_value = _value * sellPrice;\n', '        uint comision = market_value * 4 / 1000;\n', '        // The token smart-contract pays comision, else the transfer is not possible.\n', '        require(this.balance >= comision);\n', '        comisionGetter.transfer(comision); // Transfers comision to the comisionGetter.\n', '        allowance[_from][msg.sender] -= _value; // Updates the allowance array, substracting the amount sent.\n', '        _transfer(_from, _to, _value); // Makes the transfer.\n', '        return true;\n', '    }\n', '\n', '    /* Internal, updates the balance of tokens available. */\n', '    function _updateTokensAvailable(uint256 _tokensAvailable) internal { tokensAvailable = _tokensAvailable; }\n', '\n', '    /* Internal, updates the balance of Ether available in order to cover potential sales. */\n', '    function _updateSolvency(uint256 _solvency) internal { solvency = _solvency; }\n', '\n', '    /* Internal, updates the profit value */\n', '    function _updateProfit(uint256 _increment, bool add) internal{\n', '        if (add){\n', '            // Increase the profit value\n', '            profit = profit + _increment;\n', '        }else{\n', '            // Decrease the profit value\n', '            if(_increment > profit){ profit = 0; }\n', '            else{ profit = profit - _increment; }\n', '        }\n', '    }\n', '\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`.\n', '    /// @param target Address to receive the tokens.\n', '    /// @param mintedAmount The amount of tokens target will receive.\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', "        balanceOf[target] += mintedAmount; // Updates target's balance.\n", '        totalSupply       += mintedAmount; // Updates totalSupply.\n', '        _updateTokensAvailable(balanceOf[this]); // Update the balance of tokens available if necessary.\n', '        Transfer(0, this, mintedAmount);      // Notifies the blockchain about the tokens created.\n', '        Transfer(this, target, mintedAmount); // Notifies the blockchain about the transfer to target.\n', '    }\n', '\n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens.\n', '    /// @param target Address to be frozen.\n', '    /// @param freeze Either to freeze target or not.\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', "        frozenAccount[target] = freeze; // Sets the target status. True if it's frozen, False if it's not.\n", '        FrozenFunds(target, freeze); // Notifies the blockchain about the change of state.\n', '    }\n', '\n', '    /// @notice Allow addresses to pay `newBuyPrice`ETH when buying and receive `newSellPrice`ETH when selling, foreach token bought/sold.\n', '    /// @param newSellPrice Price applied when an address sells its tokens, amount in WEI (1ETH = 10¹⁸WEI).\n', '    /// @param newBuyPrice Price applied when an address buys tokens, amount in WEI (1ETH = 10¹⁸WEI).\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice; // Updates the buying price.\n', '        buyPrice = newBuyPrice;   // Updates the selling price.\n', '    }\n', '\n', '    /// @notice Sets the state of buy and sell operations\n', '    /// @param isClosedBuy True if buy operations are closed, False if opened.\n', '    /// @param isClosedSell True if sell operations are closed, False if opened.\n', '    function setStatus(bool isClosedBuy, bool isClosedSell) onlyOwner public {\n', '        closeBuy = isClosedBuy;   // Updates the state of buy operations.\n', '        closeSell = isClosedSell; // Updates the state of sell operations.\n', '    }\n', '\n', '    /// @notice Deposits Ether to the contract\n', '    function deposit() payable public returns(bool success) {\n', '        require((this.balance + msg.value) > this.balance); // Checks for overflows.\n', '        //Contract has already received the Ether when this function is executed.\n', '        _updateSolvency(this.balance);   // Updates the solvency value of the contract.\n', '        _updateProfit(msg.value, false); // Decrease profit value.\n', '        // Decrease because deposits will be done mostly by the owner.\n', "        // Possible donations won't count as profit for the company, but in favor of the investors.\n", '        LogDeposit(msg.sender, msg.value); // Notifies the blockchain about the Ether received.\n', '        return true;\n', '    }\n', '\n', '    /// @notice The owner withdraws Ether from the contract.\n', '    /// @param amountInWeis Amount of ETH in WEI which will be withdrawed.\n', '    function withdraw(uint amountInWeis) onlyOwner public {\n', '        LogWithdrawal(msg.sender, amountInWeis); // Notifies the blockchain about the withdrawal.\n', '        _updateSolvency( (this.balance - amountInWeis) ); // Updates the solvency value of the contract.\n', '        _updateProfit(amountInWeis, true);                // Increase the profit value.\n', '        owner.transfer(amountInWeis); // Sends the Ether to owner address.\n', '    }\n', '\n', '    function withdrawDividends(uint amountInWeis) internal returns(bool success) {\n', '        LogWithdrawal(msg.sender, amountInWeis); // Notifies the blockchain about the withdrawal.\n', '        _updateSolvency( (this.balance - amountInWeis) ); // Updates the solvency value of the contract.\n', '        msg.sender.transfer(amountInWeis); // Sends the Ether to owner address.\n', '        return true ; \n', '    }\n', '\n', '    /// @notice Buy tokens from contract by sending Ether.\n', '    function buy() public payable {\n', '        require(!closeBuy); //Buy operations must be opened\n', '        uint amount = msg.value / buyPrice; //Calculates the amount of tokens to be sent\n', '        uint market_value = amount * buyPrice; //Market value for this amount\n', '        uint comision = market_value * 4 / 1000; //Calculates the comision for this transaction\n', '        uint profit_in_transaction = market_value - (amount * sellPrice) - comision; //Calculates the relative profit for this transaction\n', '        require(this.balance >= comision); //The token smart-contract pays comision, else the operation is not possible.\n', '        comisionGetter.transfer(comision); //Transfers comision to the comisionGetter.\n', '        _transfer(this, msg.sender, amount); //Makes the transfer of tokens.\n', '        _updateSolvency((this.balance - profit_in_transaction)); //Updates the solvency value of the contract.\n', '        _updateProfit(profit_in_transaction, true); //Increase the profit value.\n', '        owner.transfer(profit_in_transaction); //Sends profit to the owner of the contract.\n', '    }\n', '\n', '    /// @notice Sell `amount` tokens to the contract.\n', '    /// @param amount amount of tokens to be sold.\n', '    function sell(uint256 amount) public {\n', '        require(!closeSell); //Sell operations must be opened\n', '        uint market_value = amount * sellPrice; //Market value for this amount\n', '        uint comision = market_value * 4 / 1000; //Calculates the comision for this transaction\n', '        uint amount_weis = market_value + comision; //Total in weis that must be paid\n', '        require(this.balance >= amount_weis); //Contract must have enough weis\n', '        comisionGetter.transfer(comision); //Transfers comision to the comisionGetter\n', '        _transfer(msg.sender, this, amount); //Makes the transfer of tokens, the contract receives the tokens.\n', '        _updateSolvency( (this.balance - amount_weis) ); //Updates the solvency value of the contract.\n', '        msg.sender.transfer(market_value); //Sends Ether to the seller.\n', '    }\n', '\n', '    /// Default function, sender buys tokens by sending ether to the contract:\n', '    function () public payable { buy(); }\n', '\n', '\n', '    function setDividends(uint _period, uint _totalAmount) onlyOwner public returns (bool success) {\n', '        require(this.balance >= _totalAmount ) ; \n', '// period is 201801 201802 etc. yyyymm - no more than 1 dividend distribution per month\n', '        dividends[_period] = _totalAmount ; \n', '        return true ; \n', '    } \n', '\n', '\n', 'function setEmail(string _email ) public returns (bool success) {\n', '    require(balanceOf[msg.sender] > 0 ) ;\n', '   // require(emails[msg.sender] == "" ) ; // checks the e-mail for this address was not already set\n', '    emails[msg.sender] = _email ; \n', '    return true ; \n', '    } \n', '\n', '\n', '    function dividendsGetPaid(uint _period) public returns (bool success) {\n', '     uint percentageDividends ; \n', '     uint qtyDividends ; \n', '\n', '     require(!frozenAccount[msg.sender]); // frozen accounts are not allowed to withdraw ether \n', '     require(balanceOf[msg.sender] > 0 ) ; // sender has a positive balance of tokens to get paid \n', '     require(dividends[_period] > 0) ; // there is an active dividend period  \n', '     require(paidDividends[msg.sender][_period] == 0) ;  // the dividend for this token holder was not yet paid\n', '\n', '    // using here a 10000 (ten thousand) arbitrary multiplying factor for floating point precision\n', '     percentageDividends = (balanceOf[msg.sender] / totalSupply  ) * 10000 ; \n', '     qtyDividends = ( percentageDividends * dividends[_period] ) / 10000  ;\n', '     require(this.balance >= qtyDividends) ; // contract has enough ether to pay this dividend \n', '     paidDividends[msg.sender][_period] = qtyDividends ;  // record the dividend was paid \n', '     require(withdrawDividends(qtyDividends)); \n', '     return true ; \n', '\n', '    }\n', '\n', '\n', 'function adminResetEmail(address _address, string _newEmail ) public onlyOwner  {\n', '    require(balanceOf[_address] > 0 ) ;\n', '    emails[_address] = _newEmail ; \n', '    \n', '    } \n', '\n', '\n', '\n', '}']
