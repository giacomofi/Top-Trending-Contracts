['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SMILE Token\n', ' * @author Alex Papageorgiou - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6f0e030a17411f1f082f1f1d001b0001020e0603410c0002">[email&#160;protected]</a>>\n', ' * @notice The Smile Token token & airdrop contract which conforms to EIP-20 & partially ERC-223\n', ' */\n', 'contract SMILE {\n', '\n', '    /**\n', '     * Constant EIP-20 / ERC-223 variables & getters\n', '     */\n', '\n', '    string constant public name = "Smile Token";\n', '    string constant public symbol = "SMILE";\n', '    uint256 constant public decimals = 18;\n', '    uint256 constant public totalSupply = 100000000 * (10 ** decimals);\n', '\n', '    /**\n', '     * A variable to store the contract creator\n', '     */\n', '\n', '    address public creator;\n', '\n', '    /**\n', '     * A variable to declare whether distribution is on-going\n', '     */\n', '\n', '    bool public distributionFinished = false;\n', '\n', '    /**\n', '     * Classic EIP-20 / ERC-223 mappings and getters\n', '     */\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /**\n', '     *      EIP-20 Events. As the ERC-223 Transfer overlaps with EIP-20,\n', '     *      observers are unable to track both. In order to be compatible,\n', '     *      the ERC-223 Event spec is not integrated.\n', '     */\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Mint(address indexed to, uint value);\n', '\n', '    /**\n', '     *      Ensures that the caller is the owner of the\n', '     *      contract and that the address to withdraw from\n', '     *      is not the contract itself.\n', '     */\n', '\n', '    modifier canWithdraw(address _tokenAddress) {\n', '        assert(msg.sender == creator && _tokenAddress != address(this));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *      Ensures that the caller is the owner of the\n', '     *      contract and that the distribution is still\n', '     *      in effect.\n', '     */\n', '\n', '    modifier canDistribute() {\n', '        assert(msg.sender == creator && !distributionFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Contract constructor which assigns total supply to caller & assigns caller as creator\n', '     */\n', '\n', '    constructor() public {\n', '        creator = msg.sender;\n', '        balanceOf[msg.sender] = totalSupply;\n', '        emit Mint(msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * Partial SafeMath library import of safe substraction\n', '     * @param _a Minuend: The number to substract from\n', '     * @param _b Subtrahend: The number that is to be subtracted\n', '     */\n', '\n', '    function safeSub(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        assert((c = _a - _b) <= _a);\n', '    }\n', '\n', '    /**\n', '     * Partial SafeMath library import of safe multiplication\n', '     * @param _a Multiplicand: The number to multiply\n', '     * @param _b Multiplier: The number to multiply by\n', '     */\n', '\n', '    function safeMul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        // Automatic failure on division by zero\n', '        assert((c = _a * _b) / _a == _b);\n', '    }\n', '\n', '    /**\n', '     * EIP-20 Transfer implementation\n', '     * @param _to The address to send tokens to\n', '     * @param _value The amount of tokens to send\n', '     */\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        // Prevent accidental transfers to the default 0x0 address\n', '        assert(_to != 0x0);\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * ERC-223 Transfer implementation\n', '     * @param _to The address to send tokens to\n', '     * @param _value The amount of tokens to send\n', '     * @param _data Any accompanying data for contract transfers\n', '     */\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '        // Prevent accidental transfers to the default 0x0 address\n', '        assert(_to != 0x0);\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * EIP-20 Transfer From implementation\n', '     * @param _from The address to transfer tokens from\n', '     * @param _to The address to transfer tokens to\n', '     * @param _value The amount of tokens to transfer\n', '     */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        allowance[_from][_to] = safeSub(allowance[_from][_to], _value);\n', '        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * EIP-20 Approve implementation (Susceptible to Race Condition, mitigation optional)\n', '     * @param _spender The address to delegate spending rights to\n', '     * @param _value The amount of tokens to delegate\n', '     */\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * ERC-223 Transfer to Contract implementation\n', '     * @param _to The contract address to send tokens to\n', '     * @param _value The amount of tokens to send\n', '     * @param _data Any accompanying data to relay to the contract\n', '     */\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool) {\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] += _value;\n', '        SMILE interfaceProvider = SMILE(_to);\n', '        interfaceProvider.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * ERC-223 Token Fallback interface implementation\n', '     * @param _from The address that initiated the transfer\n', '     * @param _value The amount of tokens transferred\n', '     * @param _data Any accompanying data to relay to the contract\n', '     */\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public {}\n', '\n', '    /**\n', '     * \n', '     *      Partial ERC-223 Transfer to Address implementation.\n', '     *      The bytes parameter is intentioanlly dropped as it\n', '     *      is not utilized.\n', '     *\n', '     * @param _to The address to send tokens to\n', '     * @param _value The amount of tokens to send\n', '     */\n', '\n', '    function transferToAddress(address _to, uint256 _value) private returns (bool) {\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * ERC-223 Contract check implementation\n', '     * @param _addr The address to check contract existance in\n', '     */\n', '\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint256 length;\n', '        assembly {\n', '            length := extcodesize(_addr)\n', '        }\n', '        // NE is more gas efficient than GT\n', '        return (length != 0);\n', '    }\n', '\n', '    /**\n', '     * Implementation of a multi-user distribution function\n', '     * @param _addresses The array of addresses to transfer to\n', '     * @param _value The amount of tokens to transfer to each\n', '     */\n', '\n', '    function distributeSMILE(address[] _addresses, uint256 _value) canDistribute external {\n', '         for (uint256 i = 0; i < _addresses.length; i++) {\n', '             balanceOf[_addresses[i]] += _value;\n', '             emit Transfer(msg.sender, _addresses[i], _value);\n', '         }\n', '         // Can be removed in one call instead of each time within the loop\n', '         balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], safeMul(_value, _addresses.length));\n', '    }\n', '\n', '    /**\n', '     * Implementation to retrieve accidentally sent EIP-20 compliant tokens\n', '     * @param _token The contract address of the EIP-20 compliant token\n', '     */\n', '\n', '    function retrieveERC(address _token) external canWithdraw(_token) {\n', '        SMILE interfaceProvider = SMILE(_token);\n', '        // By default, the whole balance of the contract is sent to the caller\n', '        interfaceProvider.transfer(msg.sender, interfaceProvider.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     *      Absence of payable modifier is intentional as\n', '     *      it causes accidental Ether transfers to throw.\n', '     */\n', '\n', '    function() public {}\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SMILE Token\n', ' * @author Alex Papageorgiou - <alex.ppg@protonmail.com>\n', ' * @notice The Smile Token token & airdrop contract which conforms to EIP-20 & partially ERC-223\n', ' */\n', 'contract SMILE {\n', '\n', '    /**\n', '     * Constant EIP-20 / ERC-223 variables & getters\n', '     */\n', '\n', '    string constant public name = "Smile Token";\n', '    string constant public symbol = "SMILE";\n', '    uint256 constant public decimals = 18;\n', '    uint256 constant public totalSupply = 100000000 * (10 ** decimals);\n', '\n', '    /**\n', '     * A variable to store the contract creator\n', '     */\n', '\n', '    address public creator;\n', '\n', '    /**\n', '     * A variable to declare whether distribution is on-going\n', '     */\n', '\n', '    bool public distributionFinished = false;\n', '\n', '    /**\n', '     * Classic EIP-20 / ERC-223 mappings and getters\n', '     */\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    /**\n', '     *      EIP-20 Events. As the ERC-223 Transfer overlaps with EIP-20,\n', '     *      observers are unable to track both. In order to be compatible,\n', '     *      the ERC-223 Event spec is not integrated.\n', '     */\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event Mint(address indexed to, uint value);\n', '\n', '    /**\n', '     *      Ensures that the caller is the owner of the\n', '     *      contract and that the address to withdraw from\n', '     *      is not the contract itself.\n', '     */\n', '\n', '    modifier canWithdraw(address _tokenAddress) {\n', '        assert(msg.sender == creator && _tokenAddress != address(this));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     *      Ensures that the caller is the owner of the\n', '     *      contract and that the distribution is still\n', '     *      in effect.\n', '     */\n', '\n', '    modifier canDistribute() {\n', '        assert(msg.sender == creator && !distributionFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Contract constructor which assigns total supply to caller & assigns caller as creator\n', '     */\n', '\n', '    constructor() public {\n', '        creator = msg.sender;\n', '        balanceOf[msg.sender] = totalSupply;\n', '        emit Mint(msg.sender, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * Partial SafeMath library import of safe substraction\n', '     * @param _a Minuend: The number to substract from\n', '     * @param _b Subtrahend: The number that is to be subtracted\n', '     */\n', '\n', '    function safeSub(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        assert((c = _a - _b) <= _a);\n', '    }\n', '\n', '    /**\n', '     * Partial SafeMath library import of safe multiplication\n', '     * @param _a Multiplicand: The number to multiply\n', '     * @param _b Multiplier: The number to multiply by\n', '     */\n', '\n', '    function safeMul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '        // Automatic failure on division by zero\n', '        assert((c = _a * _b) / _a == _b);\n', '    }\n', '\n', '    /**\n', '     * EIP-20 Transfer implementation\n', '     * @param _to The address to send tokens to\n', '     * @param _value The amount of tokens to send\n', '     */\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        // Prevent accidental transfers to the default 0x0 address\n', '        assert(_to != 0x0);\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * ERC-223 Transfer implementation\n', '     * @param _to The address to send tokens to\n', '     * @param _value The amount of tokens to send\n', '     * @param _data Any accompanying data for contract transfers\n', '     */\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n', '        // Prevent accidental transfers to the default 0x0 address\n', '        assert(_to != 0x0);\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * EIP-20 Transfer From implementation\n', '     * @param _from The address to transfer tokens from\n', '     * @param _to The address to transfer tokens to\n', '     * @param _value The amount of tokens to transfer\n', '     */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        allowance[_from][_to] = safeSub(allowance[_from][_to], _value);\n', '        balanceOf[_from] = safeSub(balanceOf[_from], _value);\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * EIP-20 Approve implementation (Susceptible to Race Condition, mitigation optional)\n', '     * @param _spender The address to delegate spending rights to\n', '     * @param _value The amount of tokens to delegate\n', '     */\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * ERC-223 Transfer to Contract implementation\n', '     * @param _to The contract address to send tokens to\n', '     * @param _value The amount of tokens to send\n', '     * @param _data Any accompanying data to relay to the contract\n', '     */\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool) {\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] += _value;\n', '        SMILE interfaceProvider = SMILE(_to);\n', '        interfaceProvider.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * ERC-223 Token Fallback interface implementation\n', '     * @param _from The address that initiated the transfer\n', '     * @param _value The amount of tokens transferred\n', '     * @param _data Any accompanying data to relay to the contract\n', '     */\n', '\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public {}\n', '\n', '    /**\n', '     * \n', '     *      Partial ERC-223 Transfer to Address implementation.\n', '     *      The bytes parameter is intentioanlly dropped as it\n', '     *      is not utilized.\n', '     *\n', '     * @param _to The address to send tokens to\n', '     * @param _value The amount of tokens to send\n', '     */\n', '\n', '    function transferToAddress(address _to, uint256 _value) private returns (bool) {\n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * ERC-223 Contract check implementation\n', '     * @param _addr The address to check contract existance in\n', '     */\n', '\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint256 length;\n', '        assembly {\n', '            length := extcodesize(_addr)\n', '        }\n', '        // NE is more gas efficient than GT\n', '        return (length != 0);\n', '    }\n', '\n', '    /**\n', '     * Implementation of a multi-user distribution function\n', '     * @param _addresses The array of addresses to transfer to\n', '     * @param _value The amount of tokens to transfer to each\n', '     */\n', '\n', '    function distributeSMILE(address[] _addresses, uint256 _value) canDistribute external {\n', '         for (uint256 i = 0; i < _addresses.length; i++) {\n', '             balanceOf[_addresses[i]] += _value;\n', '             emit Transfer(msg.sender, _addresses[i], _value);\n', '         }\n', '         // Can be removed in one call instead of each time within the loop\n', '         balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], safeMul(_value, _addresses.length));\n', '    }\n', '\n', '    /**\n', '     * Implementation to retrieve accidentally sent EIP-20 compliant tokens\n', '     * @param _token The contract address of the EIP-20 compliant token\n', '     */\n', '\n', '    function retrieveERC(address _token) external canWithdraw(_token) {\n', '        SMILE interfaceProvider = SMILE(_token);\n', '        // By default, the whole balance of the contract is sent to the caller\n', '        interfaceProvider.transfer(msg.sender, interfaceProvider.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     *      Absence of payable modifier is intentional as\n', '     *      it causes accidental Ether transfers to throw.\n', '     */\n', '\n', '    function() public {}\n', '}']
