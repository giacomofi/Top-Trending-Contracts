['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @notice Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @notice Multiplies two numbers, throws on overflow.\n', '  * @param a Multiplier\n', '  * @param b Multiplicand\n', '  * @return {"result" : "Returns product"}\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 result) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b, "Error: Unsafe multiplication operation!");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @notice Integer division of two numbers, truncating the quotient.\n', '  * @param a Dividend\n', '  * @param b Divisor\n', '  * @return {"result" : "Returns quotient"}\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256 result) {\n', '    // @dev require(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // @dev require(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @notice Subtracts two numbers, throws on underflow.\n', '  * @param a Subtrahend\n', '  * @param b Minuend\n', '  * @return {"result" : "Returns difference"}\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256 result) {\n', '    // @dev throws on overflow (i.e. if subtrahend is greater than minuend)\n', '    require(b <= a, "Error: Unsafe subtraction operation!");\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @notice Adds two numbers, throws on overflow.\n', '  * @param a First addend\n', '  * @param b Second addend\n', '  * @return {"result" : "Returns summation"}\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 result) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "Error: Unsafe addition operation!");\n', '    return c;\n', '  }\n', '}']