['pragma solidity ^0.4.22;\n', '\n', '// File: contracts/ERC223/ERC223_receiving_contract.sol\n', '\n', '/**\n', '* @title Contract that will work with ERC223 tokens.\n', '*/\n', '\n', 'contract ERC223ReceivingContract {\n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from  Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SafeGuardsToken.sol\n', '\n', 'contract SafeGuardsToken is CappedToken {\n', '\n', '    string constant public name = "SafeGuards Coin";\n', '    string constant public symbol = "SGCT";\n', '    uint constant public decimals = 18;\n', '\n', '    // address who can burn tokens\n', '    address public canBurnAddress;\n', '\n', '    // list with frozen addresses\n', '    mapping (address => bool) public frozenList;\n', '\n', '    // timestamp until investors in frozen list can&#39;t transfer tokens\n', '    uint256 public frozenPauseTime = now + 180 days;\n', '\n', '    // timestamp until investors can&#39;t burn tokens\n', '    uint256 public burnPausedTime = now + 180 days;\n', '\n', '\n', '    constructor(address _canBurnAddress) CappedToken(61 * 1e6 * 1e18) public {\n', '        require(_canBurnAddress != 0x0);\n', '        canBurnAddress = _canBurnAddress;\n', '    }\n', '\n', '\n', '    // ===--- Presale frozen functionality ---===\n', '\n', '    event ChangeFrozenPause(uint256 newFrozenPauseTime);\n', '\n', '    /**\n', '     * @dev Function to mint frozen tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintFrozen(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        frozenList[_to] = true;\n', '        return super.mint(_to, _amount);\n', '    }\n', '\n', '    function changeFrozenTime(uint256 _newFrozenPauseTime) onlyOwner public returns (bool) {\n', '        require(_newFrozenPauseTime > now);\n', '\n', '        frozenPauseTime = _newFrozenPauseTime;\n', '        emit ChangeFrozenPause(_newFrozenPauseTime);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ===--- Override transfers with implementation of the ERC223 standard and frozen logic ---===\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        bytes memory empty;\n', '        return transfer(_to, _value, empty);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @param _data Optional metadata.\n', '    */\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n', '        require(now > frozenPauseTime || !frozenList[msg.sender]);\n', '\n', '        super.transfer(_to, _value);\n', '\n', '        if (isContract(_to)) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        bytes memory empty;\n', '        return transferFrom(_from, _to, _value, empty);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint the amount of tokens to be transferred\n', '     * @param _data Optional metadata.\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value, bytes _data) public returns (bool) {\n', '        require(now > frozenPauseTime || !frozenList[msg.sender]);\n', '\n', '        super.transferFrom(_from, _to, _value);\n', '\n', '        if (isContract(_to)) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(_from, _value, _data);\n', '        }\n', '\n', '        emit Transfer(_from, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint length;\n', '        assembly {\n', '        //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length>0);\n', '    }\n', '\n', '\n', '    // ===--- Burnable functionality ---===\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '    event ChangeBurnPause(uint256 newBurnPauseTime);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(burnPausedTime < now || msg.sender == canBurnAddress);\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '    }\n', '\n', '    function changeBurnPausedTime(uint256 _newBurnPauseTime) onlyOwner public returns (bool) {\n', '        require(_newBurnPauseTime > burnPausedTime);\n', '\n', '        burnPausedTime = _newBurnPauseTime;\n', '        emit ChangeBurnPause(_newBurnPauseTime);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override \n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range. \n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(now >= openingTime && now <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= now);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return now > closingTime;\n', '  }\n', '  \n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param _cap Max amount of wei to be contributed\n', '   */\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached. \n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    require(weiRaised.add(_weiAmount) <= cap);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SafeGuardsPreSale.sol\n', '\n', 'contract SafeGuardsPreSale is FinalizableCrowdsale, CappedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // amount of tokens that was sold on the crowdsale\n', '    uint256 public tokensSold;\n', '\n', '    // if minimumGoal will not be reached till _closingTime, buyers will be able to refund ETH\n', '    uint256 public minimumGoal;\n', '\n', '    // how much wei we have returned back to the contract after a failed crowdfund\n', '    uint public loadedRefund;\n', '\n', '    // how much wei we have given back to buyers\n', '    uint public weiRefunded;\n', '\n', '    // how much ETH each address has bought to this crowdsale\n', '    mapping (address => uint) public boughtAmountOf;\n', '\n', '    // minimum amount of wel, that can be contributed\n', '    uint256 constant public minimumAmountWei = 1e16;\n', '\n', '    // timestamp until presale investors can&#39;t transfer tokens\n', '    uint256 public presaleTransfersPaused = now + 180 days;\n', '\n', '    // timestamp until investors can&#39;t burn tokens\n', '    uint256 public presaleBurnPaused = now + 180 days;\n', '\n', '    // ---====== BONUSES for presale users ======---\n', '\n', '    // time presale bonuses\n', '    uint constant public preSaleBonus1Time = 1535155200; // \n', '    uint constant public preSaleBonus1Percent = 25;\n', '    uint constant public preSaleBonus2Time = 1536019200; // \n', '    uint constant public preSaleBonus2Percent = 15;\n', '    uint constant public preSaleBonus3Time = 1536883200; // \n', '    uint constant public preSaleBonus3Percent = 5;\n', '\n', '    // amount presale bonuses\n', '    uint constant public preSaleBonus1Amount = 155   * 1e15;\n', '    uint constant public preSaleBonus2Amount = 387   * 1e15;\n', '    uint constant public preSaleBonus3Amount = 1550  * 1e15;\n', '    uint constant public preSaleBonus4Amount = 15500 * 1e15;\n', '\n', '    // ---=== Addresses of founders, team and bounty ===---\n', '    address constant public w_futureDevelopment = 0x4b297AB09bF4d2d8107fAa03cFF5377638Ec6C83;\n', '    address constant public w_Reserv = 0xbb67c6E089c7801ab3c7790158868970ea0d8a7C;\n', '    address constant public w_Founders = 0xa3b331037e29540F8BD30f3DE4fF4045a8115ff4;\n', '    address constant public w_Team = 0xa8324689c94eC3cbE9413C61b00E86A96978b4A7;\n', '    address constant public w_Advisers = 0x2516998954440b027171Ecb955A4C01DfF610F2d;\n', '    address constant public w_Bounty = 0x1792b603F233220e1E623a6ab3FEc68deFa15f2F;\n', '\n', '\n', '    event AddBonus(address indexed addr, uint256 amountWei, uint256 date, uint bonusType);\n', '\n', '    struct Bonus {\n', '        address addr;\n', '        uint256 amountWei;\n', '        uint256 date;\n', '        uint bonusType;\n', '    }\n', '\n', '    struct Bonuses {\n', '        address addr;\n', '        uint256 numBonusesInAddress;\n', '        uint256[] indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Get all bonuses by account address\n', '     */\n', '    mapping(address => Bonuses) public bonuses;\n', '\n', '    /**\n', '     * @dev Bonuses list\n', '     */\n', '    Bonus[] public bonusList;\n', '\n', '    /**\n', '     * @dev Count of bonuses in list\n', '     */\n', '    function numBonuses() public view returns (uint256)\n', '    { return bonusList.length; }\n', '\n', '    /**\n', '     * @dev Count of members in archive\n', '     */\n', '    function getBonusByAddressAndIndex(address _addr, uint256 _index) public view returns (uint256)\n', '    { return bonuses[_addr].indexes[_index]; }\n', '\n', '\n', '    /**\n', '     * @param _rate Number of token units a buyer gets per one ETH\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     * @param _token Address of the token being sold\n', '     * @param _openingTime Crowdsale opening time\n', '     * @param _closingTime Crowdsale closing time\n', '     * @param _minimumGoal Funding goal (soft cap)\n', '     * @param _cap Max amount of ETH to be contributed (hard cap)\n', '     */\n', '    constructor(\n', '        uint256 _rate,\n', '        address _wallet,\n', '        ERC20 _token,\n', '        uint256 _openingTime,\n', '        uint256 _closingTime,\n', '        uint256 _minimumGoal,\n', '        uint256 _cap\n', '    )\n', '    Crowdsale(_rate * 1 ether, _wallet, _token)\n', '    TimedCrowdsale(_openingTime, _closingTime)\n', '    CappedCrowdsale(_cap * 1 ether)\n', '    public\n', '    {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '\n', '        minimumGoal = _minimumGoal * 1 ether;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer token&#39;s control to a newOwner.\n', '     * @param _newTokenOwner The address to transfer token&#39;s ownership to.\n', '     */\n', '    function changeTokenOwner(address _newTokenOwner) external onlyOwner {\n', '        require(_newTokenOwner != 0x0);\n', '        require(hasClosed());\n', '\n', '        SafeGuardsToken(token).transferOwnership(_newTokenOwner);\n', '    }\n', '\n', '    /**\n', '   * @dev finalization task, called when owner calls finalize()\n', '   */\n', '    function finalization() internal {\n', '        require(isMinimumGoalReached());\n', '\n', '        SafeGuardsToken(token).mint(w_futureDevelopment, tokensSold.mul(20).div(43));\n', '        SafeGuardsToken(token).mint(w_Reserv, tokensSold.mul(20).div(43));\n', '        SafeGuardsToken(token).mint(w_Founders, tokensSold.mul(7).div(43));\n', '        SafeGuardsToken(token).mint(w_Team, tokensSold.mul(5).div(43));\n', '        SafeGuardsToken(token).mint(w_Advisers, tokensSold.mul(3).div(43));\n', '        SafeGuardsToken(token).mint(w_Bounty, tokensSold.mul(2).div(43));\n', '\n', '        super.finalization();\n', '    }\n', '\n', '    /**\n', '   * @dev Validation of an incoming purchase.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_weiAmount >= minimumAmountWei);\n', '\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides delivery by minting tokens upon purchase.\n', '     * @param _beneficiary Token purchaser\n', '     * @param _tokenAmount Number of tokens to be minted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        require(SafeGuardsToken(token).mintFrozen(_beneficiary, _tokenAmount));\n', '        tokensSold = tokensSold.add(_tokenAmount);\n', '    }\n', '\n', '    function changeTransfersPaused(uint256 _newFrozenPauseTime) onlyOwner public returns (bool) {\n', '        require(_newFrozenPauseTime > now);\n', '\n', '        presaleTransfersPaused = _newFrozenPauseTime;\n', '        SafeGuardsToken(token).changeFrozenTime(_newFrozenPauseTime);\n', '        return true;\n', '    }\n', '\n', '    function changeBurnPaused(uint256 _newBurnPauseTime) onlyOwner public returns (bool) {\n', '        require(_newBurnPauseTime > presaleBurnPaused);\n', '\n', '        presaleBurnPaused = _newBurnPauseTime;\n', '        SafeGuardsToken(token).changeBurnPausedTime(_newBurnPauseTime);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ===--- Bonuses functionality ---===\n', '\n', '    /**\n', '     * @dev add bonuses for users\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_weiAmount >= minimumAmountWei);\n', '\n', '        boughtAmountOf[msg.sender] = boughtAmountOf[msg.sender].add(_weiAmount);\n', '\n', '        if (_weiAmount >= preSaleBonus1Amount) {\n', '            if (_weiAmount >= preSaleBonus2Amount) {\n', '                if (_weiAmount >= preSaleBonus3Amount) {\n', '                    if (_weiAmount >= preSaleBonus4Amount) {\n', '                        addBonusToUser(msg.sender, _weiAmount, preSaleBonus4Amount, 4);\n', '                    } else {\n', '                        addBonusToUser(msg.sender, _weiAmount, preSaleBonus3Amount, 3);\n', '                    }\n', '                } else {\n', '                    addBonusToUser(msg.sender, _weiAmount, preSaleBonus2Amount, 2);\n', '                }\n', '            } else {\n', '                addBonusToUser(msg.sender, _weiAmount, preSaleBonus1Amount, 1);\n', '            }\n', '        }\n', '    }\n', '\n', '    function addBonusToUser(address _addr, uint256 _weiAmount, uint256 _bonusAmount, uint _bonusType) internal {\n', '        uint256 countBonuses = _weiAmount.div(_bonusAmount);\n', '\n', '        Bonus memory b;\n', '        b.addr = _addr;\n', '        b.amountWei = _weiAmount;\n', '        b.date = now;\n', '        b.bonusType = _bonusType;\n', '\n', '        for (uint256 i = 0; i < countBonuses; i++) {\n', '            bonuses[_addr].addr = _addr;\n', '            bonuses[_addr].numBonusesInAddress++;\n', '            bonuses[_addr].indexes.push(bonusList.push(b) - 1);\n', '\n', '            emit AddBonus(_addr, _weiAmount, now, _bonusType);\n', '        }\n', '    }\n', '\n', '    /**\n', '   * @dev Returns the rate of tokens per wei at the present time.\n', '   * Note that, as price _increases_ with time, the rate _decreases_.\n', '   * @return The number of tokens a buyer gets per wei at a given time\n', '   */\n', '    function getCurrentRate() public view returns (uint256) {\n', '        if (now > preSaleBonus3Time) {\n', '            return rate;\n', '        }\n', '\n', '        if (now < preSaleBonus1Time) {\n', '            return rate.add(rate.mul(preSaleBonus1Percent).div(100));\n', '        }\n', '\n', '        if (now < preSaleBonus2Time) {\n', '            return rate.add(rate.mul(preSaleBonus2Percent).div(100));\n', '        }\n', '\n', '        if (now < preSaleBonus3Time) {\n', '            return rate.add(rate.mul(preSaleBonus3Percent).div(100));\n', '        }\n', '\n', '        return rate;\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides parent method taking into account variable rate.\n', '     * @param _weiAmount The value in wei to be converted into tokens\n', '     * @return The number of tokens _weiAmount wei will buy at present time\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 currentRate = getCurrentRate();\n', '        return currentRate.mul(_weiAmount);\n', '    }\n', '\n', '\n', '    // ===--- Refund functionality ---===\n', '\n', '    // a refund was processed for an buyer\n', '    event Refund(address buyer, uint weiAmount);\n', '    event RefundLoaded(uint amount);\n', '\n', '    // return true if the crowdsale has raised enough money to be a successful.\n', '    function isMinimumGoalReached() public constant returns (bool) {\n', '        return weiRaised >= minimumGoal;\n', '    }\n', '\n', '    /**\n', '    * Allow load refunds back on the contract for the refunding.\n', '    *\n', '    * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached.\n', '    */\n', '    function loadRefund() external payable {\n', '        require(msg.sender == wallet);\n', '        require(msg.value > 0);\n', '        require(!isMinimumGoalReached());\n', '\n', '        loadedRefund = loadedRefund.add(msg.value);\n', '\n', '        emit RefundLoaded(msg.value);\n', '    }\n', '\n', '    /**\n', '    * Buyers can claim refund.\n', '    *\n', '    * Note that any refunds from proxy buyers should be handled separately,\n', '    * and not through this contract.\n', '    */\n', '    function refund() external {\n', '        require(!isMinimumGoalReached() && loadedRefund > 0);\n', '\n', '        uint weiValue = boughtAmountOf[msg.sender];\n', '        require(weiValue > 0);\n', '        require(weiValue <= loadedRefund);\n', '\n', '        boughtAmountOf[msg.sender] = 0;\n', '        weiRefunded = weiRefunded.add(weiValue);\n', '        msg.sender.transfer(weiValue);\n', '\n', '        emit Refund(msg.sender, weiValue);\n', '    }\n', '}']
['pragma solidity ^0.4.22;\n', '\n', '// File: contracts/ERC223/ERC223_receiving_contract.sol\n', '\n', '/**\n', '* @title Contract that will work with ERC223 tokens.\n', '*/\n', '\n', 'contract ERC223ReceivingContract {\n', '    /**\n', '     * @dev Standard ERC223 function that will handle incoming token transfers.\n', '     *\n', '     * @param _from  Token sender address.\n', '     * @param _value Amount of tokens.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SafeGuardsToken.sol\n', '\n', 'contract SafeGuardsToken is CappedToken {\n', '\n', '    string constant public name = "SafeGuards Coin";\n', '    string constant public symbol = "SGCT";\n', '    uint constant public decimals = 18;\n', '\n', '    // address who can burn tokens\n', '    address public canBurnAddress;\n', '\n', '    // list with frozen addresses\n', '    mapping (address => bool) public frozenList;\n', '\n', "    // timestamp until investors in frozen list can't transfer tokens\n", '    uint256 public frozenPauseTime = now + 180 days;\n', '\n', "    // timestamp until investors can't burn tokens\n", '    uint256 public burnPausedTime = now + 180 days;\n', '\n', '\n', '    constructor(address _canBurnAddress) CappedToken(61 * 1e6 * 1e18) public {\n', '        require(_canBurnAddress != 0x0);\n', '        canBurnAddress = _canBurnAddress;\n', '    }\n', '\n', '\n', '    // ===--- Presale frozen functionality ---===\n', '\n', '    event ChangeFrozenPause(uint256 newFrozenPauseTime);\n', '\n', '    /**\n', '     * @dev Function to mint frozen tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mintFrozen(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        frozenList[_to] = true;\n', '        return super.mint(_to, _amount);\n', '    }\n', '\n', '    function changeFrozenTime(uint256 _newFrozenPauseTime) onlyOwner public returns (bool) {\n', '        require(_newFrozenPauseTime > now);\n', '\n', '        frozenPauseTime = _newFrozenPauseTime;\n', '        emit ChangeFrozenPause(_newFrozenPauseTime);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ===--- Override transfers with implementation of the ERC223 standard and frozen logic ---===\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        bytes memory empty;\n', '        return transfer(_to, _value, empty);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @param _data Optional metadata.\n', '    */\n', '    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n', '        require(now > frozenPauseTime || !frozenList[msg.sender]);\n', '\n', '        super.transfer(_to, _value);\n', '\n', '        if (isContract(_to)) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        bytes memory empty;\n', '        return transferFrom(_from, _to, _value, empty);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint the amount of tokens to be transferred\n', '     * @param _data Optional metadata.\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value, bytes _data) public returns (bool) {\n', '        require(now > frozenPauseTime || !frozenList[msg.sender]);\n', '\n', '        super.transferFrom(_from, _to, _value);\n', '\n', '        if (isContract(_to)) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(_from, _value, _data);\n', '        }\n', '\n', '        emit Transfer(_from, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function isContract(address _addr) private view returns (bool) {\n', '        uint length;\n', '        assembly {\n', '        //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        return (length>0);\n', '    }\n', '\n', '\n', '    // ===--- Burnable functionality ---===\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '    event ChangeBurnPause(uint256 newBurnPauseTime);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(burnPausedTime < now || msg.sender == canBurnAddress);\n', '\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply_ = totalSupply_.sub(_value);\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '    }\n', '\n', '    function changeBurnPausedTime(uint256 _newBurnPauseTime) onlyOwner public returns (bool) {\n', '        require(_newBurnPauseTime > burnPausedTime);\n', '\n', '        burnPausedTime = _newBurnPauseTime;\n', '        emit ChangeBurnPause(_newBurnPauseTime);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override \n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range. \n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(now >= openingTime && now <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= now);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return now > closingTime;\n', '  }\n', '  \n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param _cap Max amount of wei to be contributed\n', '   */\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached. \n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    require(weiRaised.add(_weiAmount) <= cap);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SafeGuardsPreSale.sol\n', '\n', 'contract SafeGuardsPreSale is FinalizableCrowdsale, CappedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // amount of tokens that was sold on the crowdsale\n', '    uint256 public tokensSold;\n', '\n', '    // if minimumGoal will not be reached till _closingTime, buyers will be able to refund ETH\n', '    uint256 public minimumGoal;\n', '\n', '    // how much wei we have returned back to the contract after a failed crowdfund\n', '    uint public loadedRefund;\n', '\n', '    // how much wei we have given back to buyers\n', '    uint public weiRefunded;\n', '\n', '    // how much ETH each address has bought to this crowdsale\n', '    mapping (address => uint) public boughtAmountOf;\n', '\n', '    // minimum amount of wel, that can be contributed\n', '    uint256 constant public minimumAmountWei = 1e16;\n', '\n', "    // timestamp until presale investors can't transfer tokens\n", '    uint256 public presaleTransfersPaused = now + 180 days;\n', '\n', "    // timestamp until investors can't burn tokens\n", '    uint256 public presaleBurnPaused = now + 180 days;\n', '\n', '    // ---====== BONUSES for presale users ======---\n', '\n', '    // time presale bonuses\n', '    uint constant public preSaleBonus1Time = 1535155200; // \n', '    uint constant public preSaleBonus1Percent = 25;\n', '    uint constant public preSaleBonus2Time = 1536019200; // \n', '    uint constant public preSaleBonus2Percent = 15;\n', '    uint constant public preSaleBonus3Time = 1536883200; // \n', '    uint constant public preSaleBonus3Percent = 5;\n', '\n', '    // amount presale bonuses\n', '    uint constant public preSaleBonus1Amount = 155   * 1e15;\n', '    uint constant public preSaleBonus2Amount = 387   * 1e15;\n', '    uint constant public preSaleBonus3Amount = 1550  * 1e15;\n', '    uint constant public preSaleBonus4Amount = 15500 * 1e15;\n', '\n', '    // ---=== Addresses of founders, team and bounty ===---\n', '    address constant public w_futureDevelopment = 0x4b297AB09bF4d2d8107fAa03cFF5377638Ec6C83;\n', '    address constant public w_Reserv = 0xbb67c6E089c7801ab3c7790158868970ea0d8a7C;\n', '    address constant public w_Founders = 0xa3b331037e29540F8BD30f3DE4fF4045a8115ff4;\n', '    address constant public w_Team = 0xa8324689c94eC3cbE9413C61b00E86A96978b4A7;\n', '    address constant public w_Advisers = 0x2516998954440b027171Ecb955A4C01DfF610F2d;\n', '    address constant public w_Bounty = 0x1792b603F233220e1E623a6ab3FEc68deFa15f2F;\n', '\n', '\n', '    event AddBonus(address indexed addr, uint256 amountWei, uint256 date, uint bonusType);\n', '\n', '    struct Bonus {\n', '        address addr;\n', '        uint256 amountWei;\n', '        uint256 date;\n', '        uint bonusType;\n', '    }\n', '\n', '    struct Bonuses {\n', '        address addr;\n', '        uint256 numBonusesInAddress;\n', '        uint256[] indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Get all bonuses by account address\n', '     */\n', '    mapping(address => Bonuses) public bonuses;\n', '\n', '    /**\n', '     * @dev Bonuses list\n', '     */\n', '    Bonus[] public bonusList;\n', '\n', '    /**\n', '     * @dev Count of bonuses in list\n', '     */\n', '    function numBonuses() public view returns (uint256)\n', '    { return bonusList.length; }\n', '\n', '    /**\n', '     * @dev Count of members in archive\n', '     */\n', '    function getBonusByAddressAndIndex(address _addr, uint256 _index) public view returns (uint256)\n', '    { return bonuses[_addr].indexes[_index]; }\n', '\n', '\n', '    /**\n', '     * @param _rate Number of token units a buyer gets per one ETH\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     * @param _token Address of the token being sold\n', '     * @param _openingTime Crowdsale opening time\n', '     * @param _closingTime Crowdsale closing time\n', '     * @param _minimumGoal Funding goal (soft cap)\n', '     * @param _cap Max amount of ETH to be contributed (hard cap)\n', '     */\n', '    constructor(\n', '        uint256 _rate,\n', '        address _wallet,\n', '        ERC20 _token,\n', '        uint256 _openingTime,\n', '        uint256 _closingTime,\n', '        uint256 _minimumGoal,\n', '        uint256 _cap\n', '    )\n', '    Crowdsale(_rate * 1 ether, _wallet, _token)\n', '    TimedCrowdsale(_openingTime, _closingTime)\n', '    CappedCrowdsale(_cap * 1 ether)\n', '    public\n', '    {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '\n', '        minimumGoal = _minimumGoal * 1 ether;\n', '    }\n', '\n', '    /**\n', "     * @dev Allows the current owner to transfer token's control to a newOwner.\n", "     * @param _newTokenOwner The address to transfer token's ownership to.\n", '     */\n', '    function changeTokenOwner(address _newTokenOwner) external onlyOwner {\n', '        require(_newTokenOwner != 0x0);\n', '        require(hasClosed());\n', '\n', '        SafeGuardsToken(token).transferOwnership(_newTokenOwner);\n', '    }\n', '\n', '    /**\n', '   * @dev finalization task, called when owner calls finalize()\n', '   */\n', '    function finalization() internal {\n', '        require(isMinimumGoalReached());\n', '\n', '        SafeGuardsToken(token).mint(w_futureDevelopment, tokensSold.mul(20).div(43));\n', '        SafeGuardsToken(token).mint(w_Reserv, tokensSold.mul(20).div(43));\n', '        SafeGuardsToken(token).mint(w_Founders, tokensSold.mul(7).div(43));\n', '        SafeGuardsToken(token).mint(w_Team, tokensSold.mul(5).div(43));\n', '        SafeGuardsToken(token).mint(w_Advisers, tokensSold.mul(3).div(43));\n', '        SafeGuardsToken(token).mint(w_Bounty, tokensSold.mul(2).div(43));\n', '\n', '        super.finalization();\n', '    }\n', '\n', '    /**\n', '   * @dev Validation of an incoming purchase.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_weiAmount >= minimumAmountWei);\n', '\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides delivery by minting tokens upon purchase.\n', '     * @param _beneficiary Token purchaser\n', '     * @param _tokenAmount Number of tokens to be minted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        require(SafeGuardsToken(token).mintFrozen(_beneficiary, _tokenAmount));\n', '        tokensSold = tokensSold.add(_tokenAmount);\n', '    }\n', '\n', '    function changeTransfersPaused(uint256 _newFrozenPauseTime) onlyOwner public returns (bool) {\n', '        require(_newFrozenPauseTime > now);\n', '\n', '        presaleTransfersPaused = _newFrozenPauseTime;\n', '        SafeGuardsToken(token).changeFrozenTime(_newFrozenPauseTime);\n', '        return true;\n', '    }\n', '\n', '    function changeBurnPaused(uint256 _newBurnPauseTime) onlyOwner public returns (bool) {\n', '        require(_newBurnPauseTime > presaleBurnPaused);\n', '\n', '        presaleBurnPaused = _newBurnPauseTime;\n', '        SafeGuardsToken(token).changeBurnPausedTime(_newBurnPauseTime);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ===--- Bonuses functionality ---===\n', '\n', '    /**\n', '     * @dev add bonuses for users\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_weiAmount >= minimumAmountWei);\n', '\n', '        boughtAmountOf[msg.sender] = boughtAmountOf[msg.sender].add(_weiAmount);\n', '\n', '        if (_weiAmount >= preSaleBonus1Amount) {\n', '            if (_weiAmount >= preSaleBonus2Amount) {\n', '                if (_weiAmount >= preSaleBonus3Amount) {\n', '                    if (_weiAmount >= preSaleBonus4Amount) {\n', '                        addBonusToUser(msg.sender, _weiAmount, preSaleBonus4Amount, 4);\n', '                    } else {\n', '                        addBonusToUser(msg.sender, _weiAmount, preSaleBonus3Amount, 3);\n', '                    }\n', '                } else {\n', '                    addBonusToUser(msg.sender, _weiAmount, preSaleBonus2Amount, 2);\n', '                }\n', '            } else {\n', '                addBonusToUser(msg.sender, _weiAmount, preSaleBonus1Amount, 1);\n', '            }\n', '        }\n', '    }\n', '\n', '    function addBonusToUser(address _addr, uint256 _weiAmount, uint256 _bonusAmount, uint _bonusType) internal {\n', '        uint256 countBonuses = _weiAmount.div(_bonusAmount);\n', '\n', '        Bonus memory b;\n', '        b.addr = _addr;\n', '        b.amountWei = _weiAmount;\n', '        b.date = now;\n', '        b.bonusType = _bonusType;\n', '\n', '        for (uint256 i = 0; i < countBonuses; i++) {\n', '            bonuses[_addr].addr = _addr;\n', '            bonuses[_addr].numBonusesInAddress++;\n', '            bonuses[_addr].indexes.push(bonusList.push(b) - 1);\n', '\n', '            emit AddBonus(_addr, _weiAmount, now, _bonusType);\n', '        }\n', '    }\n', '\n', '    /**\n', '   * @dev Returns the rate of tokens per wei at the present time.\n', '   * Note that, as price _increases_ with time, the rate _decreases_.\n', '   * @return The number of tokens a buyer gets per wei at a given time\n', '   */\n', '    function getCurrentRate() public view returns (uint256) {\n', '        if (now > preSaleBonus3Time) {\n', '            return rate;\n', '        }\n', '\n', '        if (now < preSaleBonus1Time) {\n', '            return rate.add(rate.mul(preSaleBonus1Percent).div(100));\n', '        }\n', '\n', '        if (now < preSaleBonus2Time) {\n', '            return rate.add(rate.mul(preSaleBonus2Percent).div(100));\n', '        }\n', '\n', '        if (now < preSaleBonus3Time) {\n', '            return rate.add(rate.mul(preSaleBonus3Percent).div(100));\n', '        }\n', '\n', '        return rate;\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides parent method taking into account variable rate.\n', '     * @param _weiAmount The value in wei to be converted into tokens\n', '     * @return The number of tokens _weiAmount wei will buy at present time\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 currentRate = getCurrentRate();\n', '        return currentRate.mul(_weiAmount);\n', '    }\n', '\n', '\n', '    // ===--- Refund functionality ---===\n', '\n', '    // a refund was processed for an buyer\n', '    event Refund(address buyer, uint weiAmount);\n', '    event RefundLoaded(uint amount);\n', '\n', '    // return true if the crowdsale has raised enough money to be a successful.\n', '    function isMinimumGoalReached() public constant returns (bool) {\n', '        return weiRaised >= minimumGoal;\n', '    }\n', '\n', '    /**\n', '    * Allow load refunds back on the contract for the refunding.\n', '    *\n', '    * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached.\n', '    */\n', '    function loadRefund() external payable {\n', '        require(msg.sender == wallet);\n', '        require(msg.value > 0);\n', '        require(!isMinimumGoalReached());\n', '\n', '        loadedRefund = loadedRefund.add(msg.value);\n', '\n', '        emit RefundLoaded(msg.value);\n', '    }\n', '\n', '    /**\n', '    * Buyers can claim refund.\n', '    *\n', '    * Note that any refunds from proxy buyers should be handled separately,\n', '    * and not through this contract.\n', '    */\n', '    function refund() external {\n', '        require(!isMinimumGoalReached() && loadedRefund > 0);\n', '\n', '        uint weiValue = boughtAmountOf[msg.sender];\n', '        require(weiValue > 0);\n', '        require(weiValue <= loadedRefund);\n', '\n', '        boughtAmountOf[msg.sender] = 0;\n', '        weiRefunded = weiRefunded.add(weiValue);\n', '        msg.sender.transfer(weiValue);\n', '\n', '        emit Refund(msg.sender, weiValue);\n', '    }\n', '}']
