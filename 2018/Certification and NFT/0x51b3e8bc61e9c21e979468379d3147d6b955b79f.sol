['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract UBOCOIN is BurnableToken, Ownable\n', '{\n', '    // ERC20 token parameters\n', '    string public constant name = "UBOCOIN";\n', '    string public constant symbol = "UBO";\n', '    uint8 public constant decimals = 18;\n', '    \n', '    \n', '    // Crowdsale base price (before bonuses): 0.001 ETH per UBO\n', '    uint256 private UBO_per_ETH = 1000 * (uint256(10) ** decimals);\n', '    \n', '    // 14 days with 43% bonus for purchases of at least 1000 UBO (19 february - 5 march)\n', '    uint256 private constant pre_ICO_duration = 15 days;\n', '    uint256 private constant pre_ICO_bonus_percentage = 43;\n', '    uint256 private constant pre_ICO_bonus_minimum_purchased_UBO = 1000 * (uint256(10) ** decimals);\n', '    \n', '    // 21 days with 15% bonus (6 march - 26 march)\n', '    uint256 private constant first_bonus_sale_duration = 21 days;\n', '    uint256 private constant first_bonus_sale_bonus = 15;\n', '    \n', '    // 15 days with 10% bonus (27 march - 10 april)\n', '    uint256 private constant second_bonus_sale_duration = 15 days;\n', '    uint256 private constant second_bonus_sale_bonus = 10;\n', '    \n', '    // 8 days with 6% bonus (11 april - 18 april)\n', '    uint256 private constant third_bonus_sale_duration = 8 days;\n', '    uint256 private constant third_bonus_sale_bonus = 6;\n', '    \n', '    // 7 days with 3% bonus (19 april - 25 april)\n', '    uint256 private constant fourth_bonus_sale_duration = 7 days;\n', '    uint256 private constant fourth_bonus_sale_bonus = 3;\n', '    \n', '    // 5 days with no bonus (26 april - 30 april)\n', '    uint256 private constant final_sale_duration = 5 days;\n', '    \n', '    \n', '    // The target of the crowdsale is 3500000 UBICOINS.\n', '    // If the crowdsale has finished, and the target has not been reached,\n', '    // all crowdsale participants will be able to call refund() and get their\n', '    // ETH back. The refundMany() function can be used to refund multiple\n', '    // participants in one transaction.\n', '    uint256 public constant crowdsaleTargetUBO = 3500000 * (uint256(10) ** decimals);\n', '    \n', '    \n', '    // Variables that remember the start times of the various crowdsale periods\n', '    uint256 private pre_ICO_start_timestamp;\n', '    uint256 private first_bonus_sale_start_timestamp;\n', '    uint256 private second_bonus_sale_start_timestamp;\n', '    uint256 private third_bonus_sale_start_timestamp;\n', '    uint256 private fourth_bonus_sale_start_timestamp;\n', '    uint256 private final_sale_start_timestamp;\n', '    uint256 private crowdsale_end_timestamp;\n', '    \n', '    \n', '    // Publicly accessible trackers that indicate how much UBO is left\n', '    // in each category\n', '    uint256 public crowdsaleAmountLeft;\n', '    uint256 public foundersAmountLeft;\n', '    uint256 public earlyBackersAmountLeft;\n', '    uint256 public teamAmountLeft;\n', '    uint256 public bountyAmountLeft;\n', '    uint256 public reservedFundLeft;\n', '    \n', '    // Keep track of all participants, how much they bought and how much they spent.\n', '    address[] public allParticipants;\n', '    mapping(address => uint256) public participantToEtherSpent;\n', '    mapping(address => uint256) public participantToUBObought;\n', '    \n', '    \n', '    function crowdsaleTargetReached() public view returns (bool)\n', '    {\n', '        return amountOfUBOsold() >= crowdsaleTargetUBO;\n', '    }\n', '    \n', '    function crowdsaleStarted() public view returns (bool)\n', '    {\n', '        return pre_ICO_start_timestamp > 0 && now >= pre_ICO_start_timestamp;\n', '    }\n', '    \n', '    function crowdsaleFinished() public view returns (bool)\n', '    {\n', '        return pre_ICO_start_timestamp > 0 && now >= crowdsale_end_timestamp;\n', '    }\n', '    \n', '    function amountOfParticipants() external view returns (uint256)\n', '    {\n', '        return allParticipants.length;\n', '    }\n', '    \n', '    function amountOfUBOsold() public view returns (uint256)\n', '    {\n', '        return totalSupply_ * 70 / 100 - crowdsaleAmountLeft;\n', '    }\n', '    \n', '    // If the crowdsale target has not been reached, or the crowdsale has not finished,\n', "    // don't allow the transfer of tokens purchased in the crowdsale.\n", '    function transfer(address _to, uint256 _amount) public returns (bool)\n', '    {\n', '        if (!crowdsaleTargetReached() || !crowdsaleFinished())\n', '        {\n', '            require(balances[msg.sender] - participantToUBObought[msg.sender] >= _amount);\n', '        }\n', '        \n', '        return super.transfer(_to, _amount);\n', '    }\n', '    \n', '    \n', '    // Constructor function\n', '    function UBOCOIN() public\n', '    {\n', '        totalSupply_ = 300000000 * (uint256(10) ** decimals);\n', '        balances[this] = totalSupply_;\n', '        Transfer(0x0, this, totalSupply_);\n', '        \n', '        crowdsaleAmountLeft = totalSupply_ * 70 / 100;   // 70%\n', '        foundersAmountLeft = totalSupply_ * 10 / 100;    // 10%\n', '        earlyBackersAmountLeft = totalSupply_ * 5 / 100; // 5%\n', '        teamAmountLeft = totalSupply_ * 5 / 100;         // 5%\n', '        bountyAmountLeft = totalSupply_ * 5 / 100;       // 5%\n', '        reservedFundLeft = totalSupply_ * 5 / 100;       // 5%\n', '        \n', '        setPreICOStartTime(1518998400); // This timstamp indicates 2018-02-19 00:00 UTC\n', '    }\n', '    \n', '    function setPreICOStartTime(uint256 _timestamp) public onlyOwner\n', '    {\n', "        // If the crowdsale has already started, don't allow re-scheduling it.\n", '        require(!crowdsaleStarted());\n', '        \n', '        pre_ICO_start_timestamp = _timestamp;\n', '        first_bonus_sale_start_timestamp = pre_ICO_start_timestamp + pre_ICO_duration;\n', '        second_bonus_sale_start_timestamp = first_bonus_sale_start_timestamp + first_bonus_sale_duration;\n', '        third_bonus_sale_start_timestamp = second_bonus_sale_start_timestamp + second_bonus_sale_duration;\n', '        fourth_bonus_sale_start_timestamp = third_bonus_sale_start_timestamp + third_bonus_sale_duration;\n', '        final_sale_start_timestamp = fourth_bonus_sale_start_timestamp + fourth_bonus_sale_duration;\n', '        crowdsale_end_timestamp = final_sale_start_timestamp + final_sale_duration;\n', '    }\n', '    \n', '    function startPreICOnow() external onlyOwner\n', '    {\n', '        setPreICOStartTime(now);\n', '    }\n', '    \n', '    function destroyUnsoldTokens() external\n', '    {\n', '        require(crowdsaleStarted() && crowdsaleFinished());\n', '        \n', '        uint256 amountToBurn = crowdsaleAmountLeft;\n', '        crowdsaleAmountLeft = 0;\n', '        this.burn(amountToBurn);\n', '    }\n', '    \n', '    // If someone sends ETH to the contract address,\n', '    // assume that they are trying to buy tokens.\n', '    function () payable external\n', '    {\n', '        buyTokens();\n', '    }\n', '    \n', '    function buyTokens() payable public\n', '    {\n', '        uint256 amountOfUBOpurchased = msg.value * UBO_per_ETH / (1 ether);\n', '        \n', '        // Only allow buying tokens if the ICO has started, and has not finished\n', '        require(crowdsaleStarted());\n', '        require(!crowdsaleFinished());\n', '        \n', "        // If the pre-ICO hasn't started yet, cancel the transaction\n", '        if (now < pre_ICO_start_timestamp)\n', '        {\n', '            revert();\n', '        }\n', '        \n', '        // If we are in the pre-ICO...\n', '        else if (now >= pre_ICO_start_timestamp && now < first_bonus_sale_start_timestamp)\n', '        {\n', '            // If they purchased enough to be eligible for the pre-ICO bonus,\n', '            // then give them the bonus\n', '            if (amountOfUBOpurchased >= pre_ICO_bonus_minimum_purchased_UBO)\n', '            {\n', '                amountOfUBOpurchased = amountOfUBOpurchased * (100 + pre_ICO_bonus_percentage) / 100;\n', '            }\n', '        }\n', '        \n', '        // If we are in the first bonus sale...\n', '        else if (now >= first_bonus_sale_start_timestamp && now < second_bonus_sale_start_timestamp)\n', '        {\n', '            amountOfUBOpurchased = amountOfUBOpurchased * (100 + first_bonus_sale_bonus) / 100;\n', '        }\n', '        \n', '        // If we are in the second bonus sale...\n', '        else if (now >= second_bonus_sale_start_timestamp && now < third_bonus_sale_start_timestamp)\n', '        {\n', '            amountOfUBOpurchased = amountOfUBOpurchased * (100 + second_bonus_sale_bonus) / 100;\n', '        }\n', '        \n', '        // If we are in the third bonus sale...\n', '        else if (now >= third_bonus_sale_start_timestamp && now < fourth_bonus_sale_start_timestamp)\n', '        {\n', '            amountOfUBOpurchased = amountOfUBOpurchased * (100 + third_bonus_sale_bonus) / 100;\n', '        }\n', '        \n', '        // If we are in the fourth bonus sale...\n', '        else if (now >= fourth_bonus_sale_start_timestamp && now < final_sale_start_timestamp)\n', '        {\n', '            amountOfUBOpurchased = amountOfUBOpurchased * (100 + fourth_bonus_sale_bonus) / 100;\n', '        }\n', '        \n', '        // If we are in the final sale...\n', '        else if (now >= final_sale_start_timestamp && now < crowdsale_end_timestamp)\n', '        {\n', '            // No bonus\n', '        }\n', '        \n', '        // If we are passed the final sale, cancel the transaction.\n', '        else\n', '        {\n', '            revert();\n', '        }\n', '        \n', '        // Make sure the crowdsale has enough UBO left\n', '        require(amountOfUBOpurchased <= crowdsaleAmountLeft);\n', '        \n', '        // Remove the tokens from this contract and the crowdsale tokens,\n', '        // add them to the buyer\n', '        crowdsaleAmountLeft -= amountOfUBOpurchased;\n', '        balances[this] -= amountOfUBOpurchased;\n', '        balances[msg.sender] += amountOfUBOpurchased;\n', '        Transfer(this, msg.sender, amountOfUBOpurchased);\n', '        \n', '        // Track statistics\n', '        if (participantToEtherSpent[msg.sender] == 0)\n', '        {\n', '            allParticipants.push(msg.sender);\n', '        }\n', '        participantToUBObought[msg.sender] += amountOfUBOpurchased;\n', '        participantToEtherSpent[msg.sender] += msg.value;\n', '    }\n', '    \n', '    function refund() external\n', '    {\n', "        // If the crowdsale has not started yet, don't allow refund\n", '        require(crowdsaleStarted());\n', '        \n', "        // If the crowdsale has not finished yet, don't allow refund\n", '        require(crowdsaleFinished());\n', '        \n', "        // If the target was reached, don't allow refund\n", '        require(!crowdsaleTargetReached());\n', '        \n', '        _refundParticipant(msg.sender);\n', '    }\n', '    \n', '    function refundMany(uint256 _startIndex, uint256 _endIndex) external\n', '    {\n', "        // If the crowdsale has not started yet, don't allow refund\n", '        require(crowdsaleStarted());\n', '        \n', "        // If the crowdsale has not finished yet, don't allow refund\n", '        require(crowdsaleFinished());\n', '        \n', "        // If the target was reached, don't allow refund\n", '        require(!crowdsaleTargetReached());\n', '        \n', '        for (uint256 i=_startIndex; i<=_endIndex && i<allParticipants.length; i++)\n', '        {\n', '            _refundParticipant(allParticipants[i]);\n', '        }\n', '    }\n', '    \n', '    function _refundParticipant(address _participant) internal\n', '    {\n', '        if (participantToEtherSpent[_participant] > 0)\n', '        {\n', '            // Return the UBO they bought into the crowdsale funds\n', '            uint256 refundUBO = participantToUBObought[_participant];\n', '            participantToUBObought[_participant] = 0;\n', '            balances[_participant] -= refundUBO;\n', '            balances[this] += refundUBO;\n', '            crowdsaleAmountLeft += refundUBO;\n', '            Transfer(_participant, this, refundUBO);\n', '            \n', '            // Return the ETH they spent to buy them\n', '            uint256 refundETH = participantToEtherSpent[_participant];\n', '            participantToEtherSpent[_participant] = 0;\n', '            _participant.transfer(refundETH);\n', '        }\n', '    }\n', '    \n', '    function distributeFounderTokens(address _founderAddress, uint256 _amount) external onlyOwner\n', '    {\n', '        require(_amount <= foundersAmountLeft);\n', '        foundersAmountLeft -= _amount;\n', '        this.transfer(_founderAddress, _amount);\n', '    }\n', '    \n', '    function distributeEarlyBackerTokens(address _earlyBackerAddress, uint256 _amount) external onlyOwner\n', '    {\n', '        require(_amount <= earlyBackersAmountLeft);\n', '        earlyBackersAmountLeft -= _amount;\n', '        this.transfer(_earlyBackerAddress, _amount);\n', '    }\n', '    \n', '    function distributeTeamTokens(address _teamMemberAddress, uint256 _amount) external onlyOwner\n', '    {\n', '        require(_amount <= teamAmountLeft);\n', '        teamAmountLeft -= _amount;\n', '        this.transfer(_teamMemberAddress, _amount);\n', '    }\n', '    \n', '    function distributeBountyTokens(address _bountyReceiverAddress, uint256 _amount) external onlyOwner\n', '    {\n', '        require(_amount <= bountyAmountLeft);\n', '        bountyAmountLeft -= _amount;\n', '        this.transfer(_bountyReceiverAddress, _amount);\n', '    }\n', '    \n', '    function distributeReservedTokens(address _to, uint256 _amount) external onlyOwner\n', '    {\n', '        require(_amount <= reservedFundLeft);\n', '        reservedFundLeft -= _amount;\n', '        this.transfer(_to, _amount);\n', '    }\n', '    \n', '    function distributeCrowdsaleTokens(address _to, uint256 _amount) external onlyOwner\n', '    {\n', '        require(_amount <= crowdsaleAmountLeft);\n', '        crowdsaleAmountLeft -= _amount;\n', '        this.transfer(_to, _amount);\n', '    }\n', '    \n', '    function ownerWithdrawETH() external onlyOwner\n', '    {\n', '        // Only allow the owner to withdraw if the crowdsale target has been reached\n', '        require(crowdsaleTargetReached());\n', '        \n', '        owner.transfer(this.balance);\n', '    }\n', '}']