['pragma solidity ^0.4.11;\n', '\n', 'contract owned {\n', '    address public owner;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        if (msg.sender != owner) throw;\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------------------------\n', '// Original from:\n', '// https://theethereum.wiki/w/index.php/ERC20_Token_Standard\n', '// (c) BokkyPooBah 2017. The MIT Licence.\n', '// ----------------------------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20Interface {\n', '    // Get the total token supply     function totalSupply() constant returns (uint256 totalSupply);\n', ' \n', '    // Get the account balance of another account with address _owner\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', ' \n', '    // Send _value amount of tokens to address _to\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '    // Send _value amount of token from address _from to address _to\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', ' \n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    // this function is required for some DEX functionality\n', '    function approve(address _spender, uint256 _value) returns (bool success); \n', '    \n', '    // Returns the amount which _spender is still allowed to withdraw from _owner\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '   // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', ' \n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '// Migration Agent interface\n', 'contract migration {\n', '    function migrateFrom(address _from, uint256 _value);\n', '}\n', '\n', '/// @title Sotoin (SOTOX)\n', 'contract Sotoin is owned, ERC20Interface {\n', '    // Public variables of the token\n', '    string public constant standard = &#39;ERC20&#39;;\n', '    string public constant name = &#39;Sotoin&#39;;  \n', '    string public constant symbol = &#39;SOTOX&#39;;\n', '    uint8  public constant decimals = 18;\n', '    uint public registrationTime = 0;\n', '    bool public registered = false;\n', '\n', '    uint256 public totalMigrated = 0;\n', '    address public migrationAgent = 0;\n', '\n', '    uint256 totalTokens = 500000000000000000000000000; \n', '\n', '\n', '    // This creates an array with all balances \n', '    mapping (address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '   \n', '    // These are related to SOTOX team members\n', '    mapping (address => bool) public frozenAccount;\n', '    mapping (address => uint[3]) public frozenTokens;\n', '\n', '    // Variables of token frozen rules for SOTOX team members.\n', '    uint[3] public unlockat;\n', '\n', '    event Migrate(address _from, address _to, uint256 _value);\n', '\n', '    // Constructor\n', '    function Sotoin() \n', '    {\n', '    }\n', '\n', '    // This unnamed function is called whenever someone tries to send ether to it \n', '    function () \n', '    {\n', '\n', '    }\n', '\n', '    function totalSupply() \n', '        constant \n', '        returns (uint256) \n', '    {\n', '        return totalTokens;\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner) \n', '        constant \n', '        returns (uint256) \n', '    {\n', '        return balances[_owner];\n', '    }\n', '\n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _amount) \n', '        returns (bool success) \n', '    {\n', '        if (!registered) return false;\n', '        if (_amount <= 0) return false;\n', '        if (frozenRules(msg.sender, _amount)) return false;\n', '\n', '        if (balances[msg.sender] >= _amount\n', '            && balances[_to] + _amount > balances[_to]) {\n', '\n', '            balances[msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(msg.sender, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }     \n', '    }\n', ' \n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from, address _to, uint256 _amount) \n', '        returns (bool success) \n', '    {\n', '        if (!registered) return false;\n', '        if (_amount <= 0) return false;\n', '        if (frozenRules(_from, _amount)) return false;\n', '\n', '        if (balances[_from] >= _amount\n', '            && allowed[_from][msg.sender] >= _amount\n', '            && balances[_to] + _amount > balances[_to]) {\n', '\n', '            balances[_from] -= _amount;\n', '            allowed[_from][msg.sender] -= _amount;\n', '            balances[_to] += _amount;\n', '            Transfer(_from, _to, _amount);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.     \n', '    function approve(address _spender, uint256 _amount) \n', '        returns (bool success) \n', '    {\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', ' \n', '    function allowance(address _owner, address _spender) \n', '        constant \n', '        returns (uint256 remaining) \n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @dev Set address of migration agent contract and enable migration\n', '    /// @param _agent The address of the MigrationAgent contract\n', '    function setMigrationAgent(address _agent) \n', '        public\n', '        onlyOwner\n', '    {\n', '        if (!registered) throw;\n', '        if (migrationAgent != 0) throw;\n', '        migrationAgent = _agent;\n', '    }\n', '\n', '    /// @dev Buyer can apply for migrating tokens to the new token contract.\n', '    /// @param _value The amount of token to be migrated\n', '    function applyMigrate(uint256 _value) \n', '        public\n', '    {\n', '        if (!registered) throw;\n', '        if (migrationAgent == 0) throw;\n', '\n', '        // Validate input value.\n', '        if (_value == 0) throw;\n', '        if (_value > balances[msg.sender]) throw;\n', '\n', '        balances[msg.sender] -= _value;\n', '        totalTokens -= _value;\n', '        totalMigrated += _value;\n', '        migration(migrationAgent).migrateFrom(msg.sender, _value);\n', '        Migrate(msg.sender, migrationAgent, _value);\n', '    }\n', '\n', '\n', '    /// @dev Register for crowdsale and do the token pre-allocation.\n', '    /// @param _tokenFactory The address of ICO-sale contract\n', '    /// @param _reserveAddress The address of multisig token contract\n', '    function registerSale(address _tokenFactory, address _reserveAddress) \n', '        public\n', '        onlyOwner \n', '    {\n', '        // The token contract can be only registered once.\n', '        if (!registered) {\n', '            // Total supply\n', '            totalTokens  = 500 * 1000 * 1000 * 10**18; \n', '\n', '            // (50%) of total supply to ico-sale contract\n', '            balances[_tokenFactory]    = 250 * 1000 * 1000 * 10**18;\n', '\n', '            // (27%) of total supply to the congress address for congress and partners\n', '            balances[_reserveAddress] = 135 * 1000 * 1000 * 10**18;\n', '\n', '            // Allocate rest (15%) of total supply to development team and adviors\n', '            // 75,000,000 * 10**18;\n', '            teamAllocation();\n', '\n', '            registered = true;\n', '            registrationTime = now;\n', '\n', '            unlockat[0] = registrationTime +  6 * 30 days;\n', '            unlockat[1] = registrationTime + 12 * 30 days;\n', '            unlockat[2] = registrationTime + 24 * 30 days;\n', '        }\n', '    }\n', '\n', '    /// @dev Allocate 15% of total supply to ten team members.\n', '    /// @param _account The address of account to be frozen.\n', '    /// @param _totalAmount The amount of tokens to be frozen.\n', '    function freeze(address _account, uint _totalAmount) \n', '        public\n', '        onlyOwner \n', '    {\n', '        frozenAccount[_account] = true;  \n', '        frozenTokens[_account][0] = _totalAmount;            // 100% of locked token within 6 months\n', '        frozenTokens[_account][1] = _totalAmount * 80 / 100; //  80% of locked token within 12 months\n', '        frozenTokens[_account][2] = _totalAmount * 50 / 100; //  50% of locked token within 24 months\n', '    }\n', '\n', '    /// @dev Allocate 15% of total supply to the team members and advisors.\n', '    function teamAllocation() \n', '        internal \n', '    {\n', '        // 1% of total supply allocated to each team member.\n', '        uint individual = 5000 * 1000 * 10**18;\n', '\n', '        balances[0x7F959E124BF6174cA36e899F230a515810140b52] = individual; // 1% \n', '        balances[0x3D26f6D102aCF839243f9e006Ab4d86e6ff5D623] = individual; // 1% \n', '        balances[0x75e46EeF9d9F2fD9C6902c4b41CBa8D9c19aFb34] = individual; // 1% \n', '        balances[0x68522F3D9bcB9227d24dD0107e56Fdb78C403266] = individual; // 1% \n', '        balances[0x11f8f4b49ddBe4eA85Fb1B1698833720D7986611] = individual; // 1% \n', '        balances[0x950f7d328ebc7A593C33Ae357b85ec1D0eC27e98] = individual; // 1%\n', '        balances[0x6d6d77e971A8fb833c5f8dC3C582EC6e833d2017] = individual; // 1% \n', '        balances[0x063b54A94Ff34Bb2646a90629176166563BD40C2] = individual; // 1% \n', '        balances[0x83b861fcfDaebbBBc2fB23aB9EdECbc99E99D997] = individual; // 1% \n', '        balances[0x37F423c65A27fDa83986Faf0a933A370dCB9bbBa] = individual; // 1% \n', '        balances[0x49290391f973C387dB4916C4edCFd281eCC90C3c] = individual; // 1%\n', '        balances[0x6AF12c4738816FDA3d89b968b06A55F638E4F079] = individual; // 1%\n', '        balances[0x82572bd65f6068C0BC7d193fC8a4e8FDCB03627F] = individual; // 1%\n', '        balances[0x257A64D7FBA905d1c2Fb8ba7914Ff80989602C5A] = individual; // 1%\n', '        balances[0x0981F0BD7790B18A3a2B55f40960b5c4472574BE] = individual; // 1%\n', '\n', '        // Freeze tokens allocated to the team for at most two years.\n', '        // Freeze tokens in three phases\n', '        // 75000 * 1000 * 10**18; 100% of locked tokens within 6 months\n', '        // 60000 * 1000 * 10**18;  80% of locked tokens within 12 months\n', '        // 37500 * 1000 * 10**18;  50% of locked tokens within 24 months\n', '        freeze(0x7F959E124BF6174cA36e899F230a515810140b52, individual);\n', '        freeze(0x3D26f6D102aCF839243f9e006Ab4d86e6ff5D623, individual);\n', '        freeze(0x75e46EeF9d9F2fD9C6902c4b41CBa8D9c19aFb34, individual);\n', '        freeze(0x68522F3D9bcB9227d24dD0107e56Fdb78C403266, individual);\n', '        freeze(0x11f8f4b49ddBe4eA85Fb1B1698833720D7986611, individual);\n', '        freeze(0x950f7d328ebc7A593C33Ae357b85ec1D0eC27e98, individual);\n', '        freeze(0x6d6d77e971A8fb833c5f8dC3C582EC6e833d2017, individual); \n', '        freeze(0x063b54A94Ff34Bb2646a90629176166563BD40C2, individual);\n', '        freeze(0x37F423c65A27fDa83986Faf0a933A370dCB9bbBa, individual);\n', '        freeze(0x49290391f973C387dB4916C4edCFd281eCC90C3c, individual);\n', '        freeze(0x6AF12c4738816FDA3d89b968b06A55F638E4F079, individual);\n', '        freeze(0x82572bd65f6068C0BC7d193fC8a4e8FDCB03627F, individual);\n', '        freeze(0x257A64D7FBA905d1c2Fb8ba7914Ff80989602C5A, individual);\n', '        freeze(0x0981F0BD7790B18A3a2B55f40960b5c4472574BE, individual);\n', '    }\n', '\n', '    /// @dev Token frozen rules for token holders.\n', '    /// @param _from The token sender.\n', '    /// @param _value The token amount.\n', '    function frozenRules(address _from, uint256 _value) \n', '        internal \n', '        returns (bool success) \n', '    {\n', '        if (frozenAccount[_from]) {\n', '            if (now < unlockat[0]) {\n', '               // 100% locked within the first 6 months.\n', '               if (balances[_from] - _value < frozenTokens[_from][0]) \n', '                    return true;  \n', '            } else if (now >= unlockat[0] && now < unlockat[1]) {\n', '               // 20% unlocked after 6 months.\n', '               if (balances[_from] - _value < frozenTokens[_from][1]) \n', '                    return true;  \n', '            } else if (now >= unlockat[1] && now < unlockat[2]) {\n', '               // 50% unlocked after 12 months. \n', '               if (balances[_from]- _value < frozenTokens[_from][2]) \n', '                   return true;  \n', '            } else {\n', '               // 100% unlocked after 24 months.\n', '               frozenAccount[_from] = false; \n', '            }\n', '        }\n', '        return false;\n', '    }   \n', '}']