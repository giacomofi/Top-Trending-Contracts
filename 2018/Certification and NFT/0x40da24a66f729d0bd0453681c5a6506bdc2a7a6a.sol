['pragma solidity ^0.4.11;\n', '\n', 'library Bonus {\n', '    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n', '\n', '    function getBonusFactor(uint256 soldToUser)\n', '    internal pure returns (uint256 factor)\n', '    {\n', '        uint256 tokenSold = soldToUser / pointMultiplier;\n', '        //compare whole coins\n', '\n', '        //yes, this is spaghetti code, to avoid complex formulas which would need 3 different sections anyways.\n', '        if (tokenSold >= 100000) {\n', '            return 100;\n', '        }\n', '        //0.5% less per 10000 tokens\n', '        if (tokenSold >= 90000) {\n', '            return 95;\n', '        }\n', '        if (tokenSold >= 80000) {\n', '            return 90;\n', '        }\n', '        if (tokenSold >= 70000) {\n', '            return 85;\n', '        }\n', '        if (tokenSold >= 60000) {\n', '            return 80;\n', '        }\n', '        if (tokenSold >= 50000) {\n', '            return 75;\n', '        }\n', '        if (tokenSold >= 40000) {\n', '            return 70;\n', '        }\n', '        if (tokenSold >= 30000) {\n', '            return 65;\n', '        }\n', '        if (tokenSold >= 20000) {\n', '            return 60;\n', '        }\n', '        if (tokenSold >= 10000) {\n', '            return 55;\n', '        }\n', '        //switch to 0.5% per 1000 tokens\n', '        if (tokenSold >= 9000) {\n', '            return 50;\n', '        }\n', '        if (tokenSold >= 8000) {\n', '            return 45;\n', '        }\n', '        if (tokenSold >= 7000) {\n', '            return 40;\n', '        }\n', '        if (tokenSold >= 6000) {\n', '            return 35;\n', '        }\n', '        if (tokenSold >= 5000) {\n', '            return 30;\n', '        }\n', '        if (tokenSold >= 4000) {\n', '            return 25;\n', '        }\n', '        //switch to 0.5% per 500 tokens\n', '        if (tokenSold >= 3000) {\n', '            return 20;\n', '        }\n', '        if (tokenSold >= 2500) {\n', '            return 15;\n', '        }\n', '        if (tokenSold >= 2000) {\n', '            return 10;\n', '        }\n', '        if (tokenSold >= 1500) {\n', '            return 5;\n', '        }\n', '        //less than 1500 -> 0 volume-dependant bonus\n', '        return 0;\n', '    }\n', '\n', '}\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract CrwdToken is StandardToken {\n', '\n', '    // data structures\n', '    enum States {\n', '        Initial, // deployment time\n', '        ValuationSet,\n', '        Ico, // whitelist addresses, accept funds, update balances\n', '        Underfunded, // ICO time finished and minimal amount not raised\n', '        Operational, // production phase\n', '        Paused         // for contract upgrades\n', '    }\n', '\n', '    mapping(address => uint256) public ethPossibleRefunds;\n', '\n', '    uint256 public soldTokens;\n', '\n', '    string public constant name = "Crwdtoken";\n', '\n', '    string public constant symbol = "CRWD";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    address public teamTimeLock;\n', '    address public devTimeLock;\n', '    address public countryTimeLock;\n', '\n', '    address public miscNotLocked;\n', '\n', '    address public stateControl;\n', '\n', '    address public whitelistControl;\n', '\n', '    address public withdrawControl;\n', '\n', '    address public tokenAssignmentControl;\n', '\n', '    States public state;\n', '\n', '    uint256 public weiICOMinimum;\n', '\n', '    uint256 public weiICOMaximum;\n', '\n', '    uint256 public silencePeriod;\n', '\n', '    uint256 public startAcceptingFundsBlock;\n', '\n', '    uint256 public endBlock;\n', '\n', '    uint256 public ETH_CRWDTOKEN; //number of tokens per ETH\n', '\n', '    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n', '\n', '    uint256 public constant maxTotalSupply = 45000000 * pointMultiplier;\n', '\n', '    uint256 public constant percentForSale = 50;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    bool public bonusPhase = false;\n', '\n', '\n', '    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n', '    function CrwdToken(\n', '        address _stateControl\n', '    , address _whitelistControl\n', '    , address _withdrawControl\n', '    , address _tokenAssignmentControl\n', '    , address _notLocked //15%\n', '    , address _lockedTeam //15%\n', '    , address _lockedDev //10%\n', '    , address _lockedCountry //10%\n', '    ) {\n', '        stateControl = _stateControl;\n', '        whitelistControl = _whitelistControl;\n', '        withdrawControl = _withdrawControl;\n', '        tokenAssignmentControl = _tokenAssignmentControl;\n', '        moveToState(States.Initial);\n', '        weiICOMinimum = 0;\n', '        //to be overridden\n', '        weiICOMaximum = 0;\n', '        endBlock = 0;\n', '        ETH_CRWDTOKEN = 0;\n', '        totalSupply = 0;\n', '        soldTokens = 0;\n', '        uint releaseTime = now + 9 * 31 days;\n', '        teamTimeLock = address(new CrwdTimelock(this, _lockedTeam, releaseTime));\n', '        devTimeLock = address(new CrwdTimelock(this, _lockedDev, releaseTime));\n', '        countryTimeLock = address(new CrwdTimelock(this, _lockedCountry, releaseTime));\n', '        miscNotLocked = _notLocked;\n', '    }\n', '\n', '    event Whitelisted(address addr);\n', '\n', '    event StateTransition(States oldState, States newState);\n', '\n', '    modifier onlyWhitelist() {\n', '        require(msg.sender == whitelistControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStateControl() {\n', '        require(msg.sender == stateControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyTokenAssignmentControl() {\n', '        require(msg.sender == tokenAssignmentControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWithdraw() {\n', '        require(msg.sender == withdrawControl);\n', '        _;\n', '    }\n', '\n', '    modifier requireState(States _requiredState) {\n', '        require(state == _requiredState);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    BEGIN ICO functions\n', '    */\n', '\n', '    //this is the main funding function, it updates the balances of tokens during the ICO.\n', '    //no particular incentive schemes have been implemented here\n', '    //it is only accessible during the "ICO" phase.\n', '    function() payable\n', '    requireState(States.Ico)\n', '    {\n', '        require(whitelist[msg.sender] == true);\n', '        require(this.balance <= weiICOMaximum);\n', '        //note that msg.value is already included in this.balance\n', '        require(block.number < endBlock);\n', '        require(block.number >= startAcceptingFundsBlock);\n', '\n', '        uint256 basisTokens = msg.value.mul(ETH_CRWDTOKEN);\n', '        uint256 soldToTuserWithBonus = addBonus(basisTokens);\n', '\n', '        issueTokensToUser(msg.sender, soldToTuserWithBonus);\n', '        ethPossibleRefunds[msg.sender] = ethPossibleRefunds[msg.sender].add(msg.value);\n', '    }\n', '\n', '    function issueTokensToUser(address beneficiary, uint256 amount)\n', '    internal\n', '    {\n', '        balances[beneficiary] = balances[beneficiary].add(amount);\n', '        soldTokens = soldTokens.add(amount);\n', '        totalSupply = totalSupply.add(amount.mul(100).div(percentForSale));\n', '        Mint(beneficiary, amount);\n', '        Transfer(0x0, beneficiary, amount);\n', '    }\n', '\n', '    function issuePercentToReserve(address beneficiary, uint256 percentOfSold)\n', '    internal\n', '    {\n', '        uint256 amount = totalSupply.mul(percentOfSold).div(100);\n', '        balances[beneficiary] = balances[beneficiary].add(amount);\n', '        Mint(beneficiary, amount);\n', '        Transfer(0x0, beneficiary, amount);\n', '    }\n', '\n', '    function addBonus(uint256 basisTokens)\n', '    public constant\n', '    returns (uint256 resultingTokens)\n', '    {\n', '        //if pre-sale is not active no bonus calculation\n', '        if (!bonusPhase) return basisTokens;\n', '        //percentages are integer numbers as per mill (promille) so we can accurately calculate 0.5% = 5. 100% = 1000\n', '        uint256 perMillBonus = getPhaseBonus();\n', '        //no bonus if investment amount < 1000 tokens\n', '        if (basisTokens >= pointMultiplier.mul(1000)) {\n', '            perMillBonus += Bonus.getBonusFactor(basisTokens);\n', '        }\n', '        //100% + bonus % times original amount divided by 100%.\n', '        return basisTokens.mul(per_mill + perMillBonus).div(per_mill);\n', '    }\n', '\n', '    uint256 constant per_mill = 1000;\n', '\n', '    function setBonusPhase(bool _isBonusPhase)\n', '    onlyStateControl\n', '        //phases are controlled manually through the state control key\n', '    {\n', '        bonusPhase = _isBonusPhase;\n', '    }\n', '\n', '    function getPhaseBonus()\n', '    internal\n', '    constant\n', '    returns (uint256 factor)\n', '    {\n', '        if (bonusPhase) {//20%\n', '            return 200;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '\n', '    function moveToState(States _newState)\n', '    internal\n', '    {\n', '        StateTransition(state, _newState);\n', '        state = _newState;\n', '    }\n', '    // ICO contract configuration function\n', '    // newEthICOMinimum is the minimum amount of funds to raise\n', '    // newEthICOMaximum is the maximum amount of funds to raise\n', '    // silencePeriod is a number of blocks to wait after starting the ICO. No funds are accepted during the silence period. It can be set to zero.\n', '    // newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\n', '    function updateEthICOThresholds(uint256 _newWeiICOMinimum, uint256 _newWeiICOMaximum, uint256 _silencePeriod, uint256 _newEndBlock)\n', '    onlyStateControl\n', '    {\n', '        require(state == States.Initial || state == States.ValuationSet);\n', '        require(_newWeiICOMaximum > _newWeiICOMinimum);\n', '        require(block.number + silencePeriod < _newEndBlock);\n', '        require(block.number < _newEndBlock);\n', '        weiICOMinimum = _newWeiICOMinimum;\n', '        weiICOMaximum = _newWeiICOMaximum;\n', '        silencePeriod = _silencePeriod;\n', '        endBlock = _newEndBlock;\n', '        // initial conversion rate of ETH_CRWDTOKEN set now, this is used during the Ico phase.\n', '        ETH_CRWDTOKEN = maxTotalSupply.mul(percentForSale).div(100).div(weiICOMaximum);\n', '        // check pointMultiplier\n', '        moveToState(States.ValuationSet);\n', '    }\n', '\n', '    function startICO()\n', '    onlyStateControl\n', '    requireState(States.ValuationSet)\n', '    {\n', '        require(block.number < endBlock);\n', '        require(block.number + silencePeriod < endBlock);\n', '        startAcceptingFundsBlock = block.number + silencePeriod;\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    function addPresaleAmount(address beneficiary, uint256 amount)\n', '    onlyTokenAssignmentControl\n', '    {\n', '        require(state == States.ValuationSet || state == States.Ico);\n', '        issueTokensToUser(beneficiary, amount);\n', '    }\n', '\n', '\n', '    function endICO()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        if (this.balance < weiICOMinimum) {\n', '            moveToState(States.Underfunded);\n', '        }\n', '        else {\n', '            burnAndFinish();\n', '            moveToState(States.Operational);\n', '        }\n', '    }\n', '\n', '    function anyoneEndICO()\n', '    requireState(States.Ico)\n', '    {\n', '        require(block.number > endBlock);\n', '        if (this.balance < weiICOMinimum) {\n', '            moveToState(States.Underfunded);\n', '        }\n', '        else {\n', '            burnAndFinish();\n', '            moveToState(States.Operational);\n', '        }\n', '    }\n', '\n', '    function burnAndFinish()\n', '    internal\n', '    {\n', '        issuePercentToReserve(teamTimeLock, 15);\n', '        issuePercentToReserve(devTimeLock, 10);\n', '        issuePercentToReserve(countryTimeLock, 10);\n', '        issuePercentToReserve(miscNotLocked, 15);\n', '\n', '        totalSupply = soldTokens\n', '        .add(balances[teamTimeLock])\n', '        .add(balances[devTimeLock])\n', '        .add(balances[countryTimeLock])\n', '        .add(balances[miscNotLocked]);\n', '\n', '        mintingFinished = true;\n', '        MintFinished();\n', '    }\n', '\n', '    function addToWhitelist(address _whitelisted)\n', '    onlyWhitelist\n', '        //    requireState(States.Ico)\n', '    {\n', '        whitelist[_whitelisted] = true;\n', '        Whitelisted(_whitelisted);\n', '    }\n', '\n', '\n', '    //emergency pause for the ICO\n', '    function pause()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        moveToState(States.Paused);\n', '    }\n', '\n', '    //in case we want to completely abort\n', '    function abort()\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Underfunded);\n', '    }\n', '\n', '    //un-pause\n', '    function resumeICO()\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    //in case of a failed/aborted ICO every investor can get back their money\n', '    function requestRefund()\n', '    requireState(States.Underfunded)\n', '    {\n', '        require(ethPossibleRefunds[msg.sender] > 0);\n', '        //there is no need for updateAccount(msg.sender) since the token never became active.\n', '        uint256 payout = ethPossibleRefunds[msg.sender];\n', '        //reverse calculate the amount to pay out\n', '        ethPossibleRefunds[msg.sender] = 0;\n', '        msg.sender.transfer(payout);\n', '    }\n', '\n', '    //after the ico has run its course, the withdraw account can drain funds bit-by-bit as needed.\n', '    function requestPayout(uint _amount)\n', '    onlyWithdraw //very important!\n', '    requireState(States.Operational)\n', '    {\n', '        msg.sender.transfer(_amount);\n', '    }\n', '\n', '    //if this contract gets a balance in some other ERC20 contract - or even iself - then we can rescue it.\n', '    function rescueToken(ERC20Basic _foreignToken, address _to)\n', '    onlyTokenAssignmentControl\n', '    requireState(States.Operational)\n', '    {\n', '        _foreignToken.transfer(_to, _foreignToken.balanceOf(this));\n', '    }\n', '    /**\n', '    END ICO functions\n', '    */\n', '\n', '    /**\n', '    BEGIN ERC20 functions\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '    requireState(States.Operational)\n', '    returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    requireState(States.Operational)\n', '    returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _account)\n', '    constant\n', '    returns (uint256 balance) {\n', '        return balances[_account];\n', '    }\n', '\n', '    /**\n', '    END ERC20 functions\n', '    */\n', '}\n', 'contract CrwdTimelock {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    uint256 public assignedBalance;\n', '    // beneficiary of tokens after they are released\n', '    address public controller;\n', '\n', '    // timestamp when token release is enabled\n', '    uint public releaseTime;\n', '\n', '    CrwdToken token;\n', '\n', '    function CrwdTimelock(CrwdToken _token, address _controller, uint _releaseTime) {\n', '        require(_releaseTime > now);\n', '        token = _token;\n', '        controller = _controller;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    function assignToBeneficiary(address _beneficiary, uint256 _amount){\n', '        require(msg.sender == controller);\n', '        assignedBalance = assignedBalance.sub(balances[_beneficiary]);\n', '        //todo test that this rolls back correctly!\n', '        //balanceOf(this) will be 0 until the Operational Phase has been reached, no need for explicit check\n', '        require(token.balanceOf(this) >= assignedBalance.add(_amount));\n', '        balances[_beneficiary] = _amount;\n', '        //balance is set, not added, gives _controller the power to set any balance, even 0\n', '        assignedBalance = assignedBalance.add(balances[_beneficiary]);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release(address _beneficiary) {\n', '        require(now >= releaseTime);\n', '        uint amount = balances[_beneficiary];\n', '        require(amount > 0);\n', '        token.transfer(_beneficiary, amount);\n', '        assignedBalance = assignedBalance.sub(amount);\n', '        balances[_beneficiary] = 0;\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', 'library Bonus {\n', '    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n', '\n', '    function getBonusFactor(uint256 soldToUser)\n', '    internal pure returns (uint256 factor)\n', '    {\n', '        uint256 tokenSold = soldToUser / pointMultiplier;\n', '        //compare whole coins\n', '\n', '        //yes, this is spaghetti code, to avoid complex formulas which would need 3 different sections anyways.\n', '        if (tokenSold >= 100000) {\n', '            return 100;\n', '        }\n', '        //0.5% less per 10000 tokens\n', '        if (tokenSold >= 90000) {\n', '            return 95;\n', '        }\n', '        if (tokenSold >= 80000) {\n', '            return 90;\n', '        }\n', '        if (tokenSold >= 70000) {\n', '            return 85;\n', '        }\n', '        if (tokenSold >= 60000) {\n', '            return 80;\n', '        }\n', '        if (tokenSold >= 50000) {\n', '            return 75;\n', '        }\n', '        if (tokenSold >= 40000) {\n', '            return 70;\n', '        }\n', '        if (tokenSold >= 30000) {\n', '            return 65;\n', '        }\n', '        if (tokenSold >= 20000) {\n', '            return 60;\n', '        }\n', '        if (tokenSold >= 10000) {\n', '            return 55;\n', '        }\n', '        //switch to 0.5% per 1000 tokens\n', '        if (tokenSold >= 9000) {\n', '            return 50;\n', '        }\n', '        if (tokenSold >= 8000) {\n', '            return 45;\n', '        }\n', '        if (tokenSold >= 7000) {\n', '            return 40;\n', '        }\n', '        if (tokenSold >= 6000) {\n', '            return 35;\n', '        }\n', '        if (tokenSold >= 5000) {\n', '            return 30;\n', '        }\n', '        if (tokenSold >= 4000) {\n', '            return 25;\n', '        }\n', '        //switch to 0.5% per 500 tokens\n', '        if (tokenSold >= 3000) {\n', '            return 20;\n', '        }\n', '        if (tokenSold >= 2500) {\n', '            return 15;\n', '        }\n', '        if (tokenSold >= 2000) {\n', '            return 10;\n', '        }\n', '        if (tokenSold >= 1500) {\n', '            return 5;\n', '        }\n', '        //less than 1500 -> 0 volume-dependant bonus\n', '        return 0;\n', '    }\n', '\n', '}\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns (uint256);\n', '    function transfer(address to, uint256 value) returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns (bool);\n', '    function approve(address spender, uint256 value) returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amout of tokens to be transfered\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '        var _allowance = allowed[_from][msg.sender];\n', '\n', '        // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '        // require (_value <= _allowance);\n', '\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = _allowance.sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '}\n', '\n', 'contract CrwdToken is StandardToken {\n', '\n', '    // data structures\n', '    enum States {\n', '        Initial, // deployment time\n', '        ValuationSet,\n', '        Ico, // whitelist addresses, accept funds, update balances\n', '        Underfunded, // ICO time finished and minimal amount not raised\n', '        Operational, // production phase\n', '        Paused         // for contract upgrades\n', '    }\n', '\n', '    mapping(address => uint256) public ethPossibleRefunds;\n', '\n', '    uint256 public soldTokens;\n', '\n', '    string public constant name = "Crwdtoken";\n', '\n', '    string public constant symbol = "CRWD";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    address public teamTimeLock;\n', '    address public devTimeLock;\n', '    address public countryTimeLock;\n', '\n', '    address public miscNotLocked;\n', '\n', '    address public stateControl;\n', '\n', '    address public whitelistControl;\n', '\n', '    address public withdrawControl;\n', '\n', '    address public tokenAssignmentControl;\n', '\n', '    States public state;\n', '\n', '    uint256 public weiICOMinimum;\n', '\n', '    uint256 public weiICOMaximum;\n', '\n', '    uint256 public silencePeriod;\n', '\n', '    uint256 public startAcceptingFundsBlock;\n', '\n', '    uint256 public endBlock;\n', '\n', '    uint256 public ETH_CRWDTOKEN; //number of tokens per ETH\n', '\n', '    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n', '\n', '    uint256 public constant maxTotalSupply = 45000000 * pointMultiplier;\n', '\n', '    uint256 public constant percentForSale = 50;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    bool public bonusPhase = false;\n', '\n', '\n', '    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n', '    function CrwdToken(\n', '        address _stateControl\n', '    , address _whitelistControl\n', '    , address _withdrawControl\n', '    , address _tokenAssignmentControl\n', '    , address _notLocked //15%\n', '    , address _lockedTeam //15%\n', '    , address _lockedDev //10%\n', '    , address _lockedCountry //10%\n', '    ) {\n', '        stateControl = _stateControl;\n', '        whitelistControl = _whitelistControl;\n', '        withdrawControl = _withdrawControl;\n', '        tokenAssignmentControl = _tokenAssignmentControl;\n', '        moveToState(States.Initial);\n', '        weiICOMinimum = 0;\n', '        //to be overridden\n', '        weiICOMaximum = 0;\n', '        endBlock = 0;\n', '        ETH_CRWDTOKEN = 0;\n', '        totalSupply = 0;\n', '        soldTokens = 0;\n', '        uint releaseTime = now + 9 * 31 days;\n', '        teamTimeLock = address(new CrwdTimelock(this, _lockedTeam, releaseTime));\n', '        devTimeLock = address(new CrwdTimelock(this, _lockedDev, releaseTime));\n', '        countryTimeLock = address(new CrwdTimelock(this, _lockedCountry, releaseTime));\n', '        miscNotLocked = _notLocked;\n', '    }\n', '\n', '    event Whitelisted(address addr);\n', '\n', '    event StateTransition(States oldState, States newState);\n', '\n', '    modifier onlyWhitelist() {\n', '        require(msg.sender == whitelistControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStateControl() {\n', '        require(msg.sender == stateControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyTokenAssignmentControl() {\n', '        require(msg.sender == tokenAssignmentControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWithdraw() {\n', '        require(msg.sender == withdrawControl);\n', '        _;\n', '    }\n', '\n', '    modifier requireState(States _requiredState) {\n', '        require(state == _requiredState);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    BEGIN ICO functions\n', '    */\n', '\n', '    //this is the main funding function, it updates the balances of tokens during the ICO.\n', '    //no particular incentive schemes have been implemented here\n', '    //it is only accessible during the "ICO" phase.\n', '    function() payable\n', '    requireState(States.Ico)\n', '    {\n', '        require(whitelist[msg.sender] == true);\n', '        require(this.balance <= weiICOMaximum);\n', '        //note that msg.value is already included in this.balance\n', '        require(block.number < endBlock);\n', '        require(block.number >= startAcceptingFundsBlock);\n', '\n', '        uint256 basisTokens = msg.value.mul(ETH_CRWDTOKEN);\n', '        uint256 soldToTuserWithBonus = addBonus(basisTokens);\n', '\n', '        issueTokensToUser(msg.sender, soldToTuserWithBonus);\n', '        ethPossibleRefunds[msg.sender] = ethPossibleRefunds[msg.sender].add(msg.value);\n', '    }\n', '\n', '    function issueTokensToUser(address beneficiary, uint256 amount)\n', '    internal\n', '    {\n', '        balances[beneficiary] = balances[beneficiary].add(amount);\n', '        soldTokens = soldTokens.add(amount);\n', '        totalSupply = totalSupply.add(amount.mul(100).div(percentForSale));\n', '        Mint(beneficiary, amount);\n', '        Transfer(0x0, beneficiary, amount);\n', '    }\n', '\n', '    function issuePercentToReserve(address beneficiary, uint256 percentOfSold)\n', '    internal\n', '    {\n', '        uint256 amount = totalSupply.mul(percentOfSold).div(100);\n', '        balances[beneficiary] = balances[beneficiary].add(amount);\n', '        Mint(beneficiary, amount);\n', '        Transfer(0x0, beneficiary, amount);\n', '    }\n', '\n', '    function addBonus(uint256 basisTokens)\n', '    public constant\n', '    returns (uint256 resultingTokens)\n', '    {\n', '        //if pre-sale is not active no bonus calculation\n', '        if (!bonusPhase) return basisTokens;\n', '        //percentages are integer numbers as per mill (promille) so we can accurately calculate 0.5% = 5. 100% = 1000\n', '        uint256 perMillBonus = getPhaseBonus();\n', '        //no bonus if investment amount < 1000 tokens\n', '        if (basisTokens >= pointMultiplier.mul(1000)) {\n', '            perMillBonus += Bonus.getBonusFactor(basisTokens);\n', '        }\n', '        //100% + bonus % times original amount divided by 100%.\n', '        return basisTokens.mul(per_mill + perMillBonus).div(per_mill);\n', '    }\n', '\n', '    uint256 constant per_mill = 1000;\n', '\n', '    function setBonusPhase(bool _isBonusPhase)\n', '    onlyStateControl\n', '        //phases are controlled manually through the state control key\n', '    {\n', '        bonusPhase = _isBonusPhase;\n', '    }\n', '\n', '    function getPhaseBonus()\n', '    internal\n', '    constant\n', '    returns (uint256 factor)\n', '    {\n', '        if (bonusPhase) {//20%\n', '            return 200;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '\n', '    function moveToState(States _newState)\n', '    internal\n', '    {\n', '        StateTransition(state, _newState);\n', '        state = _newState;\n', '    }\n', '    // ICO contract configuration function\n', '    // newEthICOMinimum is the minimum amount of funds to raise\n', '    // newEthICOMaximum is the maximum amount of funds to raise\n', '    // silencePeriod is a number of blocks to wait after starting the ICO. No funds are accepted during the silence period. It can be set to zero.\n', '    // newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\n', '    function updateEthICOThresholds(uint256 _newWeiICOMinimum, uint256 _newWeiICOMaximum, uint256 _silencePeriod, uint256 _newEndBlock)\n', '    onlyStateControl\n', '    {\n', '        require(state == States.Initial || state == States.ValuationSet);\n', '        require(_newWeiICOMaximum > _newWeiICOMinimum);\n', '        require(block.number + silencePeriod < _newEndBlock);\n', '        require(block.number < _newEndBlock);\n', '        weiICOMinimum = _newWeiICOMinimum;\n', '        weiICOMaximum = _newWeiICOMaximum;\n', '        silencePeriod = _silencePeriod;\n', '        endBlock = _newEndBlock;\n', '        // initial conversion rate of ETH_CRWDTOKEN set now, this is used during the Ico phase.\n', '        ETH_CRWDTOKEN = maxTotalSupply.mul(percentForSale).div(100).div(weiICOMaximum);\n', '        // check pointMultiplier\n', '        moveToState(States.ValuationSet);\n', '    }\n', '\n', '    function startICO()\n', '    onlyStateControl\n', '    requireState(States.ValuationSet)\n', '    {\n', '        require(block.number < endBlock);\n', '        require(block.number + silencePeriod < endBlock);\n', '        startAcceptingFundsBlock = block.number + silencePeriod;\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    function addPresaleAmount(address beneficiary, uint256 amount)\n', '    onlyTokenAssignmentControl\n', '    {\n', '        require(state == States.ValuationSet || state == States.Ico);\n', '        issueTokensToUser(beneficiary, amount);\n', '    }\n', '\n', '\n', '    function endICO()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        if (this.balance < weiICOMinimum) {\n', '            moveToState(States.Underfunded);\n', '        }\n', '        else {\n', '            burnAndFinish();\n', '            moveToState(States.Operational);\n', '        }\n', '    }\n', '\n', '    function anyoneEndICO()\n', '    requireState(States.Ico)\n', '    {\n', '        require(block.number > endBlock);\n', '        if (this.balance < weiICOMinimum) {\n', '            moveToState(States.Underfunded);\n', '        }\n', '        else {\n', '            burnAndFinish();\n', '            moveToState(States.Operational);\n', '        }\n', '    }\n', '\n', '    function burnAndFinish()\n', '    internal\n', '    {\n', '        issuePercentToReserve(teamTimeLock, 15);\n', '        issuePercentToReserve(devTimeLock, 10);\n', '        issuePercentToReserve(countryTimeLock, 10);\n', '        issuePercentToReserve(miscNotLocked, 15);\n', '\n', '        totalSupply = soldTokens\n', '        .add(balances[teamTimeLock])\n', '        .add(balances[devTimeLock])\n', '        .add(balances[countryTimeLock])\n', '        .add(balances[miscNotLocked]);\n', '\n', '        mintingFinished = true;\n', '        MintFinished();\n', '    }\n', '\n', '    function addToWhitelist(address _whitelisted)\n', '    onlyWhitelist\n', '        //    requireState(States.Ico)\n', '    {\n', '        whitelist[_whitelisted] = true;\n', '        Whitelisted(_whitelisted);\n', '    }\n', '\n', '\n', '    //emergency pause for the ICO\n', '    function pause()\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        moveToState(States.Paused);\n', '    }\n', '\n', '    //in case we want to completely abort\n', '    function abort()\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Underfunded);\n', '    }\n', '\n', '    //un-pause\n', '    function resumeICO()\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    //in case of a failed/aborted ICO every investor can get back their money\n', '    function requestRefund()\n', '    requireState(States.Underfunded)\n', '    {\n', '        require(ethPossibleRefunds[msg.sender] > 0);\n', '        //there is no need for updateAccount(msg.sender) since the token never became active.\n', '        uint256 payout = ethPossibleRefunds[msg.sender];\n', '        //reverse calculate the amount to pay out\n', '        ethPossibleRefunds[msg.sender] = 0;\n', '        msg.sender.transfer(payout);\n', '    }\n', '\n', '    //after the ico has run its course, the withdraw account can drain funds bit-by-bit as needed.\n', '    function requestPayout(uint _amount)\n', '    onlyWithdraw //very important!\n', '    requireState(States.Operational)\n', '    {\n', '        msg.sender.transfer(_amount);\n', '    }\n', '\n', '    //if this contract gets a balance in some other ERC20 contract - or even iself - then we can rescue it.\n', '    function rescueToken(ERC20Basic _foreignToken, address _to)\n', '    onlyTokenAssignmentControl\n', '    requireState(States.Operational)\n', '    {\n', '        _foreignToken.transfer(_to, _foreignToken.balanceOf(this));\n', '    }\n', '    /**\n', '    END ICO functions\n', '    */\n', '\n', '    /**\n', '    BEGIN ERC20 functions\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '    requireState(States.Operational)\n', '    returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    requireState(States.Operational)\n', '    returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function balanceOf(address _account)\n', '    constant\n', '    returns (uint256 balance) {\n', '        return balances[_account];\n', '    }\n', '\n', '    /**\n', '    END ERC20 functions\n', '    */\n', '}\n', 'contract CrwdTimelock {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    uint256 public assignedBalance;\n', '    // beneficiary of tokens after they are released\n', '    address public controller;\n', '\n', '    // timestamp when token release is enabled\n', '    uint public releaseTime;\n', '\n', '    CrwdToken token;\n', '\n', '    function CrwdTimelock(CrwdToken _token, address _controller, uint _releaseTime) {\n', '        require(_releaseTime > now);\n', '        token = _token;\n', '        controller = _controller;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    function assignToBeneficiary(address _beneficiary, uint256 _amount){\n', '        require(msg.sender == controller);\n', '        assignedBalance = assignedBalance.sub(balances[_beneficiary]);\n', '        //todo test that this rolls back correctly!\n', '        //balanceOf(this) will be 0 until the Operational Phase has been reached, no need for explicit check\n', '        require(token.balanceOf(this) >= assignedBalance.add(_amount));\n', '        balances[_beneficiary] = _amount;\n', '        //balance is set, not added, gives _controller the power to set any balance, even 0\n', '        assignedBalance = assignedBalance.add(balances[_beneficiary]);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release(address _beneficiary) {\n', '        require(now >= releaseTime);\n', '        uint amount = balances[_beneficiary];\n', '        require(amount > 0);\n', '        token.transfer(_beneficiary, amount);\n', '        assignedBalance = assignedBalance.sub(amount);\n', '        balances[_beneficiary] = 0;\n', '\n', '    }\n', '}']
