['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/libraries/PermissionsLib.sol\n', '\n', '/*\n', '\n', '  Copyright 2017 Dharma Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '/**\n', ' *  Note(kayvon): these events are emitted by our PermissionsLib, but all contracts that\n', ' *  depend on the library must also define the events in order for web3 clients to pick them up.\n', ' *  This topic is discussed in greater detail here (under the section "Events and Libraries"):\n', ' *  https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736\n', ' */\n', 'contract PermissionEvents {\n', '    event Authorized(address indexed agent, string callingContext);\n', '    event AuthorizationRevoked(address indexed agent, string callingContext);\n', '}\n', '\n', '\n', 'library PermissionsLib {\n', '\n', '    // TODO(kayvon): remove these events and inherit from PermissionEvents when libraries are\n', '    // capable of inheritance.\n', '    // See relevant github issue here: https://github.com/ethereum/solidity/issues/891\n', '    event Authorized(address indexed agent, string callingContext);\n', '    event AuthorizationRevoked(address indexed agent, string callingContext);\n', '\n', '    struct Permissions {\n', '        mapping (address => bool) authorized;\n', '        mapping (address => uint) agentToIndex; // ensures O(1) look-up\n', '        address[] authorizedAgents;\n', '    }\n', '\n', '    function authorize(\n', '        Permissions storage self,\n', '        address agent,\n', '        string callingContext\n', '    )\n', '        internal\n', '    {\n', '        require(isNotAuthorized(self, agent));\n', '\n', '        self.authorized[agent] = true;\n', '        self.authorizedAgents.push(agent);\n', '        self.agentToIndex[agent] = self.authorizedAgents.length - 1;\n', '        Authorized(agent, callingContext);\n', '    }\n', '\n', '    function revokeAuthorization(\n', '        Permissions storage self,\n', '        address agent,\n', '        string callingContext\n', '    )\n', '        internal\n', '    {\n', '        /* We only want to do work in the case where the agent whose\n', '        authorization is being revoked had authorization permissions in the\n', '        first place. */\n', '        require(isAuthorized(self, agent));\n', '\n', '        uint indexOfAgentToRevoke = self.agentToIndex[agent];\n', '        uint indexOfAgentToMove = self.authorizedAgents.length - 1;\n', '        address agentToMove = self.authorizedAgents[indexOfAgentToMove];\n', '\n', "        // Revoke the agent's authorization.\n", '        delete self.authorized[agent];\n', '\n', '        // Remove the agent from our collection of authorized agents.\n', '        self.authorizedAgents[indexOfAgentToRevoke] = agentToMove;\n', '\n', '        // Update our indices to reflect the above changes.\n', '        self.agentToIndex[agentToMove] = indexOfAgentToRevoke;\n', '        delete self.agentToIndex[agent];\n', '\n', "        // Clean up memory that's no longer being used.\n", '        delete self.authorizedAgents[indexOfAgentToMove];\n', '        self.authorizedAgents.length -= 1;\n', '\n', '        AuthorizationRevoked(agent, callingContext);\n', '    }\n', '\n', '    function isAuthorized(Permissions storage self, address agent)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return self.authorized[agent];\n', '    }\n', '\n', '    function isNotAuthorized(Permissions storage self, address agent)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return !isAuthorized(self, agent);\n', '    }\n', '\n', '    function getAuthorizedAgents(Permissions storage self)\n', '        internal\n', '        view\n', '        returns (address[])\n', '    {\n', '        return self.authorizedAgents;\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/DebtRegistry.sol\n', '\n', '/*\n', '\n', '  Copyright 2017 Dharma Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * The DebtRegistry stores the parameters and beneficiaries of all debt agreements in\n', ' * Dharma protocol.  It authorizes a limited number of agents to\n', ' * perform mutations on it -- those agents can be changed at any\n', " * time by the contract's owner.\n", ' *\n', ' * Author: Nadav Hollander -- Github: nadavhollander\n', ' */\n', 'contract DebtRegistry is Pausable, PermissionEvents {\n', '    using SafeMath for uint;\n', '    using PermissionsLib for PermissionsLib.Permissions;\n', '\n', '    struct Entry {\n', '        address version;\n', '        address beneficiary;\n', '        address underwriter;\n', '        uint underwriterRiskRating;\n', '        address termsContract;\n', '        bytes32 termsContractParameters;\n', '        uint issuanceBlockTimestamp;\n', '    }\n', '\n', '    // Primary registry mapping agreement IDs to their corresponding entries\n', '    mapping (bytes32 => Entry) internal registry;\n', '\n', "    // Maps debtor addresses to a list of their debts' agreement IDs\n", '    mapping (address => bytes32[]) internal debtorToDebts;\n', '\n', '    PermissionsLib.Permissions internal entryInsertPermissions;\n', '    PermissionsLib.Permissions internal entryEditPermissions;\n', '\n', '    string public constant INSERT_CONTEXT = "debt-registry-insert";\n', '    string public constant EDIT_CONTEXT = "debt-registry-edit";\n', '\n', '    event LogInsertEntry(\n', '        bytes32 indexed agreementId,\n', '        address indexed beneficiary,\n', '        address indexed underwriter,\n', '        uint underwriterRiskRating,\n', '        address termsContract,\n', '        bytes32 termsContractParameters\n', '    );\n', '\n', '    event LogModifyEntryBeneficiary(\n', '        bytes32 indexed agreementId,\n', '        address indexed previousBeneficiary,\n', '        address indexed newBeneficiary\n', '    );\n', '\n', '    modifier onlyAuthorizedToInsert() {\n', '        require(entryInsertPermissions.isAuthorized(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier onlyAuthorizedToEdit() {\n', '        require(entryEditPermissions.isAuthorized(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier onlyExtantEntry(bytes32 agreementId) {\n', '        require(doesEntryExist(agreementId));\n', '        _;\n', '    }\n', '\n', '    modifier nonNullBeneficiary(address beneficiary) {\n', '        require(beneficiary != address(0));\n', '        _;\n', '    }\n', '\n', '    /* Ensures an entry with the specified agreement ID exists within the debt registry. */\n', '    function doesEntryExist(bytes32 agreementId)\n', '        public\n', '        view\n', '        returns (bool exists)\n', '    {\n', '        return registry[agreementId].beneficiary != address(0);\n', '    }\n', '\n', '    /**\n', '     * Inserts a new entry into the registry, if the entry is valid and sender is\n', "     * authorized to make 'insert' mutations to the registry.\n", '     */\n', '    function insert(\n', '        address _version,\n', '        address _beneficiary,\n', '        address _debtor,\n', '        address _underwriter,\n', '        uint _underwriterRiskRating,\n', '        address _termsContract,\n', '        bytes32 _termsContractParameters,\n', '        uint _salt\n', '    )\n', '        public\n', '        onlyAuthorizedToInsert\n', '        whenNotPaused\n', '        nonNullBeneficiary(_beneficiary)\n', '        returns (bytes32 _agreementId)\n', '    {\n', '        Entry memory entry = Entry(\n', '            _version,\n', '            _beneficiary,\n', '            _underwriter,\n', '            _underwriterRiskRating,\n', '            _termsContract,\n', '            _termsContractParameters,\n', '            block.timestamp\n', '        );\n', '\n', '        bytes32 agreementId = _getAgreementId(entry, _debtor, _salt);\n', '\n', '        require(registry[agreementId].beneficiary == address(0));\n', '\n', '        registry[agreementId] = entry;\n', '        debtorToDebts[_debtor].push(agreementId);\n', '\n', '        LogInsertEntry(\n', '            agreementId,\n', '            entry.beneficiary,\n', '            entry.underwriter,\n', '            entry.underwriterRiskRating,\n', '            entry.termsContract,\n', '            entry.termsContractParameters\n', '        );\n', '\n', '        return agreementId;\n', '    }\n', '\n', '    /**\n', '     * Modifies the beneficiary of a debt issuance, if the sender\n', "     * is authorized to make 'modifyBeneficiary' mutations to\n", '     * the registry.\n', '     */\n', '    function modifyBeneficiary(bytes32 agreementId, address newBeneficiary)\n', '        public\n', '        onlyAuthorizedToEdit\n', '        whenNotPaused\n', '        onlyExtantEntry(agreementId)\n', '        nonNullBeneficiary(newBeneficiary)\n', '    {\n', '        address previousBeneficiary = registry[agreementId].beneficiary;\n', '\n', '        registry[agreementId].beneficiary = newBeneficiary;\n', '\n', '        LogModifyEntryBeneficiary(\n', '            agreementId,\n', '            previousBeneficiary,\n', '            newBeneficiary\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Adds an address to the list of agents authorized\n', "     * to make 'insert' mutations to the registry.\n", '     */\n', '    function addAuthorizedInsertAgent(address agent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        entryInsertPermissions.authorize(agent, INSERT_CONTEXT);\n', '    }\n', '\n', '    /**\n', '     * Adds an address to the list of agents authorized\n', "     * to make 'modifyBeneficiary' mutations to the registry.\n", '     */\n', '    function addAuthorizedEditAgent(address agent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        entryEditPermissions.authorize(agent, EDIT_CONTEXT);\n', '    }\n', '\n', '    /**\n', '     * Removes an address from the list of agents authorized\n', "     * to make 'insert' mutations to the registry.\n", '     */\n', '    function revokeInsertAgentAuthorization(address agent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        entryInsertPermissions.revokeAuthorization(agent, INSERT_CONTEXT);\n', '    }\n', '\n', '    /**\n', '     * Removes an address from the list of agents authorized\n', "     * to make 'modifyBeneficiary' mutations to the registry.\n", '     */\n', '    function revokeEditAgentAuthorization(address agent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        entryEditPermissions.revokeAuthorization(agent, EDIT_CONTEXT);\n', '    }\n', '\n', '    /**\n', '     * Returns the parameters of a debt issuance in the registry.\n', '     *\n', '     * TODO(kayvon): protect this function with our `onlyExtantEntry` modifier once the restriction\n', '     * on the size of the call stack has been addressed.\n', '     */\n', '    function get(bytes32 agreementId)\n', '        public\n', '        view\n', '        returns(address, address, address, uint, address, bytes32, uint)\n', '    {\n', '        return (\n', '            registry[agreementId].version,\n', '            registry[agreementId].beneficiary,\n', '            registry[agreementId].underwriter,\n', '            registry[agreementId].underwriterRiskRating,\n', '            registry[agreementId].termsContract,\n', '            registry[agreementId].termsContractParameters,\n', '            registry[agreementId].issuanceBlockTimestamp\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Returns the beneficiary of a given issuance\n', '     */\n', '    function getBeneficiary(bytes32 agreementId)\n', '        public\n', '        view\n', '        onlyExtantEntry(agreementId)\n', '        returns(address)\n', '    {\n', '        return registry[agreementId].beneficiary;\n', '    }\n', '\n', '    /**\n', '     * Returns the terms contract address of a given issuance\n', '     */\n', '    function getTermsContract(bytes32 agreementId)\n', '        public\n', '        view\n', '        onlyExtantEntry(agreementId)\n', '        returns (address)\n', '    {\n', '        return registry[agreementId].termsContract;\n', '    }\n', '\n', '    /**\n', '     * Returns the terms contract parameters of a given issuance\n', '     */\n', '    function getTermsContractParameters(bytes32 agreementId)\n', '        public\n', '        view\n', '        onlyExtantEntry(agreementId)\n', '        returns (bytes32)\n', '    {\n', '        return registry[agreementId].termsContractParameters;\n', '    }\n', '\n', '    /**\n', '     * Returns a tuple of the terms contract and its associated parameters\n', '     * for a given issuance\n', '     */\n', '    function getTerms(bytes32 agreementId)\n', '        public\n', '        view\n', '        onlyExtantEntry(agreementId)\n', '        returns(address, bytes32)\n', '    {\n', '        return (\n', '            registry[agreementId].termsContract,\n', '            registry[agreementId].termsContractParameters\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Returns the timestamp of the block at which a debt agreement was issued.\n', '     */\n', '    function getIssuanceBlockTimestamp(bytes32 agreementId)\n', '        public\n', '        view\n', '        onlyExtantEntry(agreementId)\n', '        returns (uint timestamp)\n', '    {\n', '        return registry[agreementId].issuanceBlockTimestamp;\n', '    }\n', '\n', '    /**\n', "     * Returns the list of agents authorized to make 'insert' mutations\n", '     */\n', '    function getAuthorizedInsertAgents()\n', '        public\n', '        view\n', '        returns(address[])\n', '    {\n', '        return entryInsertPermissions.getAuthorizedAgents();\n', '    }\n', '\n', '    /**\n', "     * Returns the list of agents authorized to make 'modifyBeneficiary' mutations\n", '     */\n', '    function getAuthorizedEditAgents()\n', '        public\n', '        view\n', '        returns(address[])\n', '    {\n', '        return entryEditPermissions.getAuthorizedAgents();\n', '    }\n', '\n', '    /**\n', '     * Returns the list of debt agreements a debtor is party to,\n', '     * with each debt agreement listed by agreement ID.\n', '     */\n', '    function getDebtorsDebts(address debtor)\n', '        public\n', '        view\n', '        returns(bytes32[])\n', '    {\n', '        return debtorToDebts[debtor];\n', '    }\n', '\n', '    /**\n', '     * Helper function for computing the hash of a given issuance,\n', '     * and, in turn, its agreementId\n', '     */\n', '    function _getAgreementId(Entry _entry, address _debtor, uint _salt)\n', '        internal\n', '        pure\n', '        returns(bytes32)\n', '    {\n', '        return keccak256(\n', '            _entry.version,\n', '            _debtor,\n', '            _entry.underwriter,\n', '            _entry.underwriterRiskRating,\n', '            _entry.termsContract,\n', '            _entry.termsContractParameters,\n', '            _salt\n', '        );\n', '    }\n', '}\n', '\n', '// File: contracts/ERC165.sol\n', '\n', '/*\n', '\n', '  Copyright 2017 Dharma Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '/**\n', ' * ERC165 interface required by ERC721 non-fungible token.\n', ' *\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface ERC165 {\n', '    /// @notice Query if a contract implements an interface\n', '    /// @param interfaceID The interface identifier, as specified in ERC-165\n', '    /// @dev Interface identification is specified in ERC-165. This function\n', '    ///  uses less than 30,000 gas.\n', '    /// @return `true` if the contract implements `interfaceID` and\n', '    ///  `interfaceID` is not 0xffffffff, `false` otherwise\n', '    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);  \n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '  \n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '  \n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;  \n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/DeprecatedERC721.sol\n', '\n', '/**\n', ' * @title ERC-721 methods shipped in OpenZeppelin v1.7.0, removed in the latest version of the standard\n', ' * @dev Only use this interface for compatibility with previously deployed contracts\n', ' * @dev Use ERC721 for interacting with new contracts which are standard-compliant\n', ' */\n', 'contract DeprecatedERC721 is ERC721 {\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function tokensOf(address _owner) public view returns (uint256[]);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/AddressUtils.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether there is code in the target address\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address address to check\n', '   * @return whether there is code in the target address\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; \n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '   *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '   *  than the magic value MUST result in the transaction being reverted.\n', '   *  Note: the contract address is always the message sender.\n', '   * @param _from The sending address \n', '   * @param _tokenId The NFT identifier which is being transfered\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '  \n', '  // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; \n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '  * @param _tokenId uint256 ID of the token to validate\n', '  */\n', '  modifier canTransfer(uint256 _tokenId) {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Returns whether the specified token exists\n', '  * @param _tokenId uint256 ID of the token to query the existance of\n', '  * @return whether the token exists\n', '  */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to transfer the given token ID\n', '  * @dev The zero address indicates there is no approved address.\n', '  * @dev There can only be one approved address per token at a given time.\n', '  * @dev Can only be called by the token owner or an approved operator.\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for a the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Sets or unsets the approval of a given operator\n', '  * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '  * @param _to operator address to set the approval\n', '  * @param _approved representing the status of the approval to be set\n', '  */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '  * @dev Requires the msg sender to be the owner, approved, or operator\n', '  * @param _from current owner of the token\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '    \n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Safely transfers the ownership of a given token ID to another address\n', '  * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '  *  which is called upon a safe transfer, and return the magic value\n', '  *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '  *  the transfer is reverted.\n', '  * @dev Requires the msg sender to be the owner, approved, or operator\n', '  * @param _from current owner of the token\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '  * @dev Safely transfers the ownership of a given token ID to another address\n', '  * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '  *  which is called upon a safe transfer, and return the magic value\n', '  *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '  *  the transfer is reverted.\n', '  * @dev Requires the msg sender to be the owner, approved, or operator\n', '  * @param _from current owner of the token\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  * @param _data bytes data to send along with a safe transfer check\n', '  */\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId) {\n', '    transferFrom(_from, _to, _tokenId);\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n', '    address owner = ownerOf(_tokenId);\n', '    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to mint a new token\n', '  * @dev Reverts if the given token ID already exists\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to burn a specific token\n', '  * @dev Reverts if the token does not exist\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @dev Reverts if the given address is not indeed the owner of the token\n', '  * @param _owner owner of the token\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '      Approval(_owner, address(0), _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to invoke `onERC721Received` on a target address\n', '  * @dev The call is not executed if the target address is not a contract\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _to target address that will receive the tokens\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  * @param _data bytes optional data to send along with the call\n', '  * @return whether the call correctly returned the expected magic value\n', '  */\n', '  function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal returns (bool) {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs \n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '  * @dev Constructor function\n', '  */\n', '  function ERC721Token(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the token name\n', '  * @return string representing the token name\n', '  */\n', '  function name() public view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the token symbol\n', '  * @return string representing the token symbol\n', '  */\n', '  function symbol() public view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '  * @dev Returns an URI for a given token ID\n', '  * @dev Throws if the token ID does not exist. May return an empty string.\n', '  * @param _tokenId uint256 ID of the token to query\n', '  */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to set the token URI for a given token\n', '  * @dev Reverts if the token ID does not exist\n', '  * @param _tokenId uint256 ID of the token to set its URI\n', '  * @param _uri string URI to assign\n', '  */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '  * @param _owner address owning the tokens list to be accessed\n', '  * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '  * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '  */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the token ID at a given index of all the tokens in this contract\n', '  * @dev Reverts if the index is greater or equal to the total number of tokens\n', '  * @param _index uint256 representing the index to be accessed of the tokens list\n', '  * @return uint256 token ID at the given index of the tokens list\n', '  */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to mint a new token\n', '  * @dev Reverts if the given token ID already exists\n', '  * @param _to address the beneficiary that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '    \n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to burn a specific token\n', '  * @dev Reverts if the token does not exist\n', '  * @param _owner owner of the token to burn\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.sub(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/DebtToken.sol\n', '\n', '/*\n', '\n', '  Copyright 2017 Dharma Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.18;\n', '\n', '// Internal dependencies.\n', '\n', '\n', '\n', '\n', '// External dependencies.\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * The DebtToken contract governs all business logic for making a debt agreement\n', ' * transferable as an ERC721 non-fungible token.  Additionally, the contract\n', ' * allows authorized contracts to trigger the minting of a debt agreement token\n', ' * and, in turn, the insertion of a debt issuance into the DebtRegsitry.\n', ' *\n', ' * Author: Nadav Hollander -- Github: nadavhollander\n', ' */\n', 'contract DebtToken is ERC721Token, ERC165, Pausable, PermissionEvents {\n', '    using PermissionsLib for PermissionsLib.Permissions;\n', '\n', '    DebtRegistry public registry;\n', '\n', '    PermissionsLib.Permissions internal tokenCreationPermissions;\n', '    PermissionsLib.Permissions internal tokenURIPermissions;\n', '\n', '    string public constant CREATION_CONTEXT = "debt-token-creation";\n', '    string public constant URI_CONTEXT = "debt-token-uri";\n', '\n', '    /**\n', '     * Constructor that sets the address of the debt registry.\n', '     */\n', '    function DebtToken(address _registry)\n', '        public\n', '        ERC721Token("DebtToken", "DDT")\n', '    {\n', '        registry = DebtRegistry(_registry);\n', '    }\n', '\n', '    /**\n', '     * ERC165 interface.\n', '     * Returns true for ERC721, false otherwise\n', '     */\n', '    function supportsInterface(bytes4 interfaceID)\n', '        external\n', '        view\n', '        returns (bool _isSupported)\n', '    {\n', '        return interfaceID == 0x80ac58cd; // ERC721\n', '    }\n', '\n', '    /**\n', '     * Mints a unique debt token and inserts the associated issuance into\n', '     * the debt registry, if the calling address is authorized to do so.\n', '     */\n', '    function create(\n', '        address _version,\n', '        address _beneficiary,\n', '        address _debtor,\n', '        address _underwriter,\n', '        uint _underwriterRiskRating,\n', '        address _termsContract,\n', '        bytes32 _termsContractParameters,\n', '        uint _salt\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (uint _tokenId)\n', '    {\n', '        require(tokenCreationPermissions.isAuthorized(msg.sender));\n', '\n', '        bytes32 entryHash = registry.insert(\n', '            _version,\n', '            _beneficiary,\n', '            _debtor,\n', '            _underwriter,\n', '            _underwriterRiskRating,\n', '            _termsContract,\n', '            _termsContractParameters,\n', '            _salt\n', '        );\n', '\n', '        super._mint(_beneficiary, uint(entryHash));\n', '\n', '        return uint(entryHash);\n', '    }\n', '\n', '    /**\n', '     * Adds an address to the list of agents authorized to mint debt tokens.\n', '     */\n', '    function addAuthorizedMintAgent(address _agent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        tokenCreationPermissions.authorize(_agent, CREATION_CONTEXT);\n', '    }\n', '\n', '    /**\n', '     * Removes an address from the list of agents authorized to mint debt tokens\n', '     */\n', '    function revokeMintAgentAuthorization(address _agent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        tokenCreationPermissions.revokeAuthorization(_agent, CREATION_CONTEXT);\n', '    }\n', '\n', '    /**\n', '     * Returns the list of agents authorized to mint debt tokens\n', '     */\n', '    function getAuthorizedMintAgents()\n', '        public\n', '        view\n', '        returns (address[] _agents)\n', '    {\n', '        return tokenCreationPermissions.getAuthorizedAgents();\n', '    }\n', '\n', '    /**\n', '     * Adds an address to the list of agents authorized to set token URIs.\n', '     */\n', '    function addAuthorizedTokenURIAgent(address _agent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        tokenURIPermissions.authorize(_agent, URI_CONTEXT);\n', '    }\n', '\n', '    /**\n', '     * Returns the list of agents authorized to set token URIs.\n', '     */\n', '    function getAuthorizedTokenURIAgents()\n', '        public\n', '        view\n', '        returns (address[] _agents)\n', '    {\n', '        return tokenURIPermissions.getAuthorizedAgents();\n', '    }\n', '\n', '    /**\n', '     * Removes an address from the list of agents authorized to set token URIs.\n', '     */\n', '    function revokeTokenURIAuthorization(address _agent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        tokenURIPermissions.revokeAuthorization(_agent, URI_CONTEXT);\n', '    }\n', '\n', '    /**\n', '     * We override approval method of the parent ERC721Token\n', '     * contract to allow its functionality to be frozen in the case of an emergency\n', '     */\n', '    function approve(address _to, uint _tokenId)\n', '        public\n', '        whenNotPaused\n', '    {\n', '        super.approve(_to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * We override setApprovalForAll method of the parent ERC721Token\n', '     * contract to allow its functionality to be frozen in the case of an emergency\n', '     */\n', '    function setApprovalForAll(address _to, bool _approved)\n', '        public\n', '        whenNotPaused\n', '    {\n', '        super.setApprovalForAll(_to, _approved);\n', '    }\n', '\n', '    /**\n', '     * Support deprecated ERC721 method\n', '     */\n', '    function transfer(address _to, uint _tokenId)\n', '        public\n', '    {\n', '        safeTransferFrom(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * We override transferFrom methods of the parent ERC721Token\n', '     * contract to allow its functionality to be frozen in the case of an emergency\n', '     */\n', '    function transferFrom(address _from, address _to, uint _tokenId)\n', '        public\n', '        whenNotPaused\n', '    {\n', '        _modifyBeneficiary(_tokenId, _to);\n', '        super.transferFrom(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * We override safeTransferFrom methods of the parent ERC721Token\n', '     * contract to allow its functionality to be frozen in the case of an emergency\n', '     */\n', '    function safeTransferFrom(address _from, address _to, uint _tokenId)\n', '        public\n', '        whenNotPaused\n', '    {\n', '        _modifyBeneficiary(_tokenId, _to);\n', '        super.safeTransferFrom(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '     * We override safeTransferFrom methods of the parent ERC721Token\n', '     * contract to allow its functionality to be frozen in the case of an emergency\n', '     */\n', '    function safeTransferFrom(address _from, address _to, uint _tokenId, bytes _data)\n', '        public\n', '        whenNotPaused\n', '    {\n', '        _modifyBeneficiary(_tokenId, _to);\n', '        super.safeTransferFrom(_from, _to, _tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * Allows senders with special permissions to set the token URI for a given debt token.\n', '     */\n', '    function setTokenURI(uint256 _tokenId, string _uri)\n', '        public\n', '        whenNotPaused\n', '    {\n', '        require(tokenURIPermissions.isAuthorized(msg.sender));\n', '        super._setTokenURI(_tokenId, _uri);\n', '    }\n', '\n', '    /**\n', '     * _modifyBeneficiary mutates the debt registry. This function should be\n', '     * called every time a token is transferred or minted\n', '     */\n', '    function _modifyBeneficiary(uint _tokenId, address _to)\n', '        internal\n', '    {\n', '        if (registry.getBeneficiary(bytes32(_tokenId)) != _to) {\n', '            registry.modifyBeneficiary(bytes32(_tokenId), _to);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/TermsContract.sol\n', '\n', '/*\n', '\n', '  Copyright 2017 Dharma Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.18;\n', '\n', '\n', 'interface TermsContract {\n', '     /// When called, the registerTermStart function registers the fact that\n', '     ///    the debt agreement has begun.  This method is called as a hook by the\n', '     ///    DebtKernel when a debt order associated with `agreementId` is filled.\n', '     ///    Method is not required to make any sort of internal state change\n', "     ///    upon the debt agreement's start, but MUST return `true` in order to\n", '     ///    acknowledge receipt of the transaction.  If, for any reason, the\n', '     ///    debt agreement stored at `agreementId` is incompatible with this contract,\n', '     ///    MUST return `false`, which will cause the pertinent order fill to fail.\n', '     ///    If this method is called for a debt agreement whose term has already begun,\n', '     ///    must THROW.  Similarly, if this method is called by any contract other\n', '     ///    than the current DebtKernel, must THROW.\n', '     /// @param  agreementId bytes32. The agreement id (issuance hash) of the debt agreement to which this pertains.\n', '     /// @param  debtor address. The debtor in this particular issuance.\n', '     /// @return _success bool. Acknowledgment of whether\n', '    function registerTermStart(\n', '        bytes32 agreementId,\n', '        address debtor\n', '    ) public returns (bool _success);\n', '\n', "     /// When called, the registerRepayment function records the debtor's\n", '     ///  repayment, as well as any auxiliary metadata needed by the contract\n', '     ///  to determine ex post facto the value repaid (e.g. current USD\n', '     ///  exchange rate)\n', '     /// @param  agreementId bytes32. The agreement id (issuance hash) of the debt agreement to which this pertains.\n', '     /// @param  payer address. The address of the payer.\n', "     /// @param  beneficiary address. The address of the payment's beneficiary.\n", '     /// @param  unitsOfRepayment uint. The units-of-value repaid in the transaction.\n', '     /// @param  tokenAddress address. The address of the token with which the repayment transaction was executed.\n', '    function registerRepayment(\n', '        bytes32 agreementId,\n', '        address payer,\n', '        address beneficiary,\n', '        uint256 unitsOfRepayment,\n', '        address tokenAddress\n', '    ) public returns (bool _success);\n', '\n', '     /// Returns the cumulative units-of-value expected to be repaid by a given block timestamp.\n', '     ///  Note this is not a constant function -- this value can vary on basis of any number of\n', '     ///  conditions (e.g. interest rates can be renegotiated if repayments are delinquent).\n', '     /// @param  agreementId bytes32. The agreement id (issuance hash) of the debt agreement to which this pertains.\n', '     /// @param  timestamp uint. The timestamp of the block for which repayment expectation is being queried.\n', '     /// @return uint256 The cumulative units-of-value expected to be repaid by the time the given timestamp lapses.\n', '    function getExpectedRepaymentValue(\n', '        bytes32 agreementId,\n', '        uint256 timestamp\n', '    ) public view returns (uint256);\n', '\n', '     /// Returns the cumulative units-of-value repaid by the point at which this method is called.\n', '     /// @param  agreementId bytes32. The agreement id (issuance hash) of the debt agreement to which this pertains.\n', '     /// @return uint256 The cumulative units-of-value repaid up until now.\n', '    function getValueRepaidToDate(\n', '        bytes32 agreementId\n', '    ) public view returns (uint256);\n', '\n', '    /**\n', "     * A method that returns a Unix timestamp representing the end of the debt agreement's term.\n", '     * contract.\n', '     */\n', '    function getTermEndTimestamp(\n', '        bytes32 _agreementId\n', '    ) public view returns (uint);\n', '}\n', '\n', '// File: contracts/TokenTransferProxy.sol\n', '\n', '/*\n', '\n', '  Copyright 2017 Dharma Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * The TokenTransferProxy is a proxy contract for transfering principal\n', ' * and fee payments and repayments between agents and keepers in the Dharma\n', ' * ecosystem.  It is decoupled from the DebtKernel in order to make upgrades to the\n', ' * protocol contracts smoother -- if the DebtKernel or RepyamentRouter is upgraded to a new contract,\n', " * creditors will not have to grant new transfer approvals to a new contract's address.\n", ' *\n', ' * Author: Nadav Hollander -- Github: nadavhollander\n', ' */\n', 'contract TokenTransferProxy is Pausable, PermissionEvents {\n', '    using PermissionsLib for PermissionsLib.Permissions;\n', '\n', '    PermissionsLib.Permissions internal tokenTransferPermissions;\n', '\n', '    string public constant CONTEXT = "token-transfer-proxy";\n', '\n', '    /**\n', '     * Add address to list of agents authorized to initiate `transferFrom` calls\n', '     */\n', '    function addAuthorizedTransferAgent(address _agent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        tokenTransferPermissions.authorize(_agent, CONTEXT);\n', '    }\n', '\n', '    /**\n', '     * Remove address from list of agents authorized to initiate `transferFrom` calls\n', '     */\n', '    function revokeTransferAgentAuthorization(address _agent)\n', '        public\n', '        onlyOwner\n', '    {\n', '        tokenTransferPermissions.revokeAuthorization(_agent, CONTEXT);\n', '    }\n', '\n', '    /**\n', '     * Return list of agents authorized to initiate `transferFrom` calls\n', '     */\n', '    function getAuthorizedTransferAgents()\n', '        public\n', '        view\n', '        returns (address[] authorizedAgents)\n', '    {\n', '        return tokenTransferPermissions.getAuthorizedAgents();\n', '    }\n', '\n', '    /**\n', '     * Transfer specified token amount from _from address to _to address on give token\n', '     */\n', '    function transferFrom(\n', '        address _token,\n', '        address _from,\n', '        address _to,\n', '        uint _amount\n', '    )\n', '        public\n', '        returns (bool _success)\n', '    {\n', '        require(tokenTransferPermissions.isAuthorized(msg.sender));\n', '\n', '        return ERC20(_token).transferFrom(_from, _to, _amount);\n', '    }\n', '}\n', '\n', '// File: contracts/DebtKernel.sol\n', '\n', '/*\n', '\n', '  Copyright 2017 Dharma Labs Inc.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * The DebtKernel is the hub of all business logic governing how and when\n', ' * debt orders can be filled and cancelled.  All logic that determines\n', ' * whether a debt order is valid & consensual is contained herein,\n', ' * as well as the mechanisms that transfer fees to keepers and\n', ' * principal payments to debtors.\n', ' *\n', ' * Author: Nadav Hollander -- Github: nadavhollander\n', ' */\n', 'contract DebtKernel is Pausable {\n', '    using SafeMath for uint;\n', '\n', '    enum Errors {\n', '        // Debt has been already been issued\n', '        DEBT_ISSUED,\n', '        // Order has already expired\n', '        ORDER_EXPIRED,\n', '        // Debt issuance associated with order has been cancelled\n', '        ISSUANCE_CANCELLED,\n', '        // Order has been cancelled\n', '        ORDER_CANCELLED,\n', '        // Order parameters specify amount of creditor / debtor fees\n', '        // that is not equivalent to the amount of underwriter / relayer fees\n', '        ORDER_INVALID_INSUFFICIENT_OR_EXCESSIVE_FEES,\n', '        // Order parameters specify insufficient principal amount for\n', '        // debtor to at least be able to meet his fees\n', '        ORDER_INVALID_INSUFFICIENT_PRINCIPAL,\n', '        // Order parameters specify non zero fee for an unspecified recipient\n', '        ORDER_INVALID_UNSPECIFIED_FEE_RECIPIENT,\n', '        // Order signatures are mismatched / malformed\n', '        ORDER_INVALID_NON_CONSENSUAL,\n', '        // Insufficient balance or allowance for principal token transfer\n', '        CREDITOR_BALANCE_OR_ALLOWANCE_INSUFFICIENT\n', '    }\n', '\n', '    DebtToken public debtToken;\n', '\n', '    // solhint-disable-next-line var-name-mixedcase\n', '    address public TOKEN_TRANSFER_PROXY;\n', '    bytes32 constant public NULL_ISSUANCE_HASH = bytes32(0);\n', '\n', '    /* NOTE(kayvon): Currently, the `view` keyword does not actually enforce the\n', '    static nature of the method; this will change in the future, but for now, in\n', "    order to prevent reentrancy we'll need to arbitrarily set an upper bound on\n", '    the gas limit allotted for certain method calls. */\n', '    uint16 constant public EXTERNAL_QUERY_GAS_LIMIT = 8000;\n', '\n', '    mapping (bytes32 => bool) public issuanceCancelled;\n', '    mapping (bytes32 => bool) public debtOrderCancelled;\n', '\n', '    event LogDebtOrderFilled(\n', '        bytes32 indexed _agreementId,\n', '        uint _principal,\n', '        address _principalToken,\n', '        address indexed _underwriter,\n', '        uint _underwriterFee,\n', '        address indexed _relayer,\n', '        uint _relayerFee\n', '    );\n', '\n', '    event LogIssuanceCancelled(\n', '        bytes32 indexed _agreementId,\n', '        address indexed _cancelledBy\n', '    );\n', '\n', '    event LogDebtOrderCancelled(\n', '        bytes32 indexed _debtOrderHash,\n', '        address indexed _cancelledBy\n', '    );\n', '\n', '    event LogError(\n', '        uint8 indexed _errorId,\n', '        bytes32 indexed _orderHash\n', '    );\n', '\n', '    struct Issuance {\n', '        address version;\n', '        address debtor;\n', '        address underwriter;\n', '        uint underwriterRiskRating;\n', '        address termsContract;\n', '        bytes32 termsContractParameters;\n', '        uint salt;\n', '        bytes32 agreementId;\n', '    }\n', '\n', '    struct DebtOrder {\n', '        Issuance issuance;\n', '        uint underwriterFee;\n', '        uint relayerFee;\n', '        uint principalAmount;\n', '        address principalToken;\n', '        uint creditorFee;\n', '        uint debtorFee;\n', '        address relayer;\n', '        uint expirationTimestampInSec;\n', '        bytes32 debtOrderHash;\n', '    }\n', '\n', '    function DebtKernel(address tokenTransferProxyAddress)\n', '        public\n', '    {\n', '        TOKEN_TRANSFER_PROXY = tokenTransferProxyAddress;\n', '    }\n', '\n', '    ////////////////////////\n', '    // EXTERNAL FUNCTIONS //\n', '    ////////////////////////\n', '\n', '    /**\n', '     * Allows contract owner to set the currently used debt token contract.\n', '     * Function exists to maximize upgradeability of individual modules\n', '     * in the entire system.\n', '     */\n', '    function setDebtToken(address debtTokenAddress)\n', '        public\n', '        onlyOwner\n', '    {\n', '        debtToken = DebtToken(debtTokenAddress);\n', '    }\n', '\n', '    /**\n', '     * Fills a given debt order if it is valid and consensual.\n', '     */\n', '    function fillDebtOrder(\n', '        address creditor,\n', '        address[6] orderAddresses,\n', '        uint[8] orderValues,\n', '        bytes32[1] orderBytes32,\n', '        uint8[3] signaturesV,\n', '        bytes32[3] signaturesR,\n', '        bytes32[3] signaturesS\n', '    )\n', '        public\n', '        whenNotPaused\n', '        returns (bytes32 _agreementId)\n', '    {\n', '        DebtOrder memory debtOrder = getDebtOrder(orderAddresses, orderValues, orderBytes32);\n', '\n', "        // Assert order's validity & consensuality\n", '        if (!assertDebtOrderValidityInvariants(debtOrder) ||\n', '            !assertDebtOrderConsensualityInvariants(\n', '                debtOrder,\n', '                creditor,\n', '                signaturesV,\n', '                signaturesR,\n', '                signaturesS) ||\n', '            !assertExternalBalanceAndAllowanceInvariants(creditor, debtOrder)) {\n', '            return NULL_ISSUANCE_HASH;\n', '        }\n', '\n', '        // Mint debt token and finalize debt agreement\n', '        issueDebtAgreement(creditor, debtOrder.issuance);\n', '\n', "        // Register debt agreement's start with terms contract\n", '        // We permit terms contracts to be undefined (for debt agreements which\n', '        // may not have terms contracts associated with them), and only\n', "        // register a term's start if the terms contract address is defined.\n", '        if (debtOrder.issuance.termsContract != address(0)) {\n', '            require(\n', '                TermsContract(debtOrder.issuance.termsContract)\n', '                    .registerTermStart(\n', '                        debtOrder.issuance.agreementId,\n', '                        debtOrder.issuance.debtor\n', '                    )\n', '            );\n', '        }\n', '\n', '        // Transfer principal to debtor\n', '        if (debtOrder.principalAmount > 0) {\n', '            require(transferTokensFrom(\n', '                debtOrder.principalToken,\n', '                creditor,\n', '                debtOrder.issuance.debtor,\n', '                debtOrder.principalAmount.sub(debtOrder.debtorFee)\n', '            ));\n', '        }\n', '\n', '        // Transfer underwriter fee to underwriter\n', '        if (debtOrder.underwriterFee > 0) {\n', '            require(transferTokensFrom(\n', '                debtOrder.principalToken,\n', '                creditor,\n', '                debtOrder.issuance.underwriter,\n', '                debtOrder.underwriterFee\n', '            ));\n', '        }\n', '\n', '        // Transfer relayer fee to relayer\n', '        if (debtOrder.relayerFee > 0) {\n', '            require(transferTokensFrom(\n', '                debtOrder.principalToken,\n', '                creditor,\n', '                debtOrder.relayer,\n', '                debtOrder.relayerFee\n', '            ));\n', '        }\n', '\n', '        LogDebtOrderFilled(\n', '            debtOrder.issuance.agreementId,\n', '            debtOrder.principalAmount,\n', '            debtOrder.principalToken,\n', '            debtOrder.issuance.underwriter,\n', '            debtOrder.underwriterFee,\n', '            debtOrder.relayer,\n', '            debtOrder.relayerFee\n', '        );\n', '\n', '        return debtOrder.issuance.agreementId;\n', '    }\n', '\n', '    /**\n', '     * Allows both underwriters and debtors to prevent a debt\n', "     * issuance in which they're involved from being used in\n", '     * a future debt order.\n', '     */\n', '    function cancelIssuance(\n', '        address version,\n', '        address debtor,\n', '        address termsContract,\n', '        bytes32 termsContractParameters,\n', '        address underwriter,\n', '        uint underwriterRiskRating,\n', '        uint salt\n', '    )\n', '        public\n', '        whenNotPaused\n', '    {\n', '        require(msg.sender == debtor || msg.sender == underwriter);\n', '\n', '        Issuance memory issuance = getIssuance(\n', '            version,\n', '            debtor,\n', '            underwriter,\n', '            termsContract,\n', '            underwriterRiskRating,\n', '            salt,\n', '            termsContractParameters\n', '        );\n', '\n', '        issuanceCancelled[issuance.agreementId] = true;\n', '\n', '        LogIssuanceCancelled(issuance.agreementId, msg.sender);\n', '    }\n', '\n', '    /**\n', "     * Allows a debtor to cancel a debt order before it's been filled\n", '     * -- preventing any counterparty from filling it in the future.\n', '     */\n', '    function cancelDebtOrder(\n', '        address[6] orderAddresses,\n', '        uint[8] orderValues,\n', '        bytes32[1] orderBytes32\n', '    )\n', '        public\n', '        whenNotPaused\n', '    {\n', '        DebtOrder memory debtOrder = getDebtOrder(orderAddresses, orderValues, orderBytes32);\n', '\n', '        require(msg.sender == debtOrder.issuance.debtor);\n', '\n', '        debtOrderCancelled[debtOrder.debtOrderHash] = true;\n', '\n', '        LogDebtOrderCancelled(debtOrder.debtOrderHash, msg.sender);\n', '    }\n', '\n', '    ////////////////////////\n', '    // INTERNAL FUNCTIONS //\n', '    ////////////////////////\n', '\n', '    /**\n', '     * Helper function that mints debt token associated with the\n', '     * given issuance and grants it to the beneficiary.\n', '     */\n', '    function issueDebtAgreement(address beneficiary, Issuance issuance)\n', '        internal\n', '        returns (bytes32 _agreementId)\n', '    {\n', '        // Mint debt token and finalize debt agreement\n', '        uint tokenId = debtToken.create(\n', '            issuance.version,\n', '            beneficiary,\n', '            issuance.debtor,\n', '            issuance.underwriter,\n', '            issuance.underwriterRiskRating,\n', '            issuance.termsContract,\n', '            issuance.termsContractParameters,\n', '            issuance.salt\n', '        );\n', '\n', '        assert(tokenId == uint(issuance.agreementId));\n', '\n', '        return issuance.agreementId;\n', '    }\n', '\n', '    /**\n', '     * Asserts that a debt order meets all consensuality requirements\n', '     * described in the DebtKernel specification document.\n', '     */\n', '    function assertDebtOrderConsensualityInvariants(\n', '        DebtOrder debtOrder,\n', '        address creditor,\n', '        uint8[3] signaturesV,\n', '        bytes32[3] signaturesR,\n', '        bytes32[3] signaturesS\n', '    )\n', '        internal\n', '        returns (bool _orderIsConsensual)\n', '    {\n', "        // Invariant: debtor's signature must be valid, unless debtor is submitting order\n", '        if (msg.sender != debtOrder.issuance.debtor) {\n', '            if (!isValidSignature(\n', '                debtOrder.issuance.debtor,\n', '                debtOrder.debtOrderHash,\n', '                signaturesV[0],\n', '                signaturesR[0],\n', '                signaturesS[0]\n', '            )) {\n', '                LogError(uint8(Errors.ORDER_INVALID_NON_CONSENSUAL), debtOrder.debtOrderHash);\n', '                return false;\n', '            }\n', '        }\n', '\n', "        // Invariant: creditor's signature must be valid, unless creditor is submitting order\n", '        if (msg.sender != creditor) {\n', '            if (!isValidSignature(\n', '                creditor,\n', '                debtOrder.debtOrderHash,\n', '                signaturesV[1],\n', '                signaturesR[1],\n', '                signaturesS[1]\n', '            )) {\n', '                LogError(uint8(Errors.ORDER_INVALID_NON_CONSENSUAL), debtOrder.debtOrderHash);\n', '                return false;\n', '            }\n', '        }\n', '\n', '\n', "        // Invariant: underwriter's signature must be valid (if present)\n", '        if (debtOrder.issuance.underwriter != address(0) &&\n', '            msg.sender != debtOrder.issuance.underwriter) {\n', '            if (!isValidSignature(\n', '                debtOrder.issuance.underwriter,\n', '                getUnderwriterMessageHash(debtOrder),\n', '                signaturesV[2],\n', '                signaturesR[2],\n', '                signaturesS[2]\n', '            )) {\n', '                LogError(uint8(Errors.ORDER_INVALID_NON_CONSENSUAL), debtOrder.debtOrderHash);\n', '                return false;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Asserts that debt order meets all validity requirements described in\n', '     * the DebtKernel specification document.\n', '     */\n', '    function assertDebtOrderValidityInvariants(DebtOrder debtOrder)\n', '        internal\n', '        returns (bool _orderIsValid)\n', '    {\n', '        uint totalFees = debtOrder.creditorFee.add(debtOrder.debtorFee);\n', '\n', '        // Invariant: the total value of fees contributed by debtors and creditors\n', '        //  must be equivalent to that paid out to underwriters and relayers.\n', '        if (totalFees != debtOrder.relayerFee.add(debtOrder.underwriterFee)) {\n', '            LogError(uint8(Errors.ORDER_INVALID_INSUFFICIENT_OR_EXCESSIVE_FEES), debtOrder.debtOrderHash);\n', '            return false;\n', '        }\n', '\n', '        // Invariant: debtor is given enough principal to cover at least debtorFees\n', '        if (debtOrder.principalAmount < debtOrder.debtorFee) {\n', '            LogError(uint8(Errors.ORDER_INVALID_INSUFFICIENT_PRINCIPAL), debtOrder.debtOrderHash);\n', '            return false;\n', '        }\n', '\n', '        // Invariant: if no underwriter is specified, underwriter fees must be 0\n', '        // Invariant: if no relayer is specified, relayer fees must be 0.\n', '        //      Given that relayer fees = total fees - underwriter fees,\n', '        //      we assert that total fees = underwriter fees.\n', '        if ((debtOrder.issuance.underwriter == address(0) && debtOrder.underwriterFee > 0) ||\n', '            (debtOrder.relayer == address(0) && totalFees != debtOrder.underwriterFee)) {\n', '            LogError(uint8(Errors.ORDER_INVALID_UNSPECIFIED_FEE_RECIPIENT), debtOrder.debtOrderHash);\n', '            return false;\n', '        }\n', '\n', '        // Invariant: debt order must not be expired\n', '        // solhint-disable-next-line not-rely-on-time\n', '        if (debtOrder.expirationTimestampInSec < block.timestamp) {\n', '            LogError(uint8(Errors.ORDER_EXPIRED), debtOrder.debtOrderHash);\n', '            return false;\n', '        }\n', '\n', "        // Invariant: debt order's issuance must not already be minted as debt token\n", '        if (debtToken.exists(uint(debtOrder.issuance.agreementId))) {\n', '            LogError(uint8(Errors.DEBT_ISSUED), debtOrder.debtOrderHash);\n', '            return false;\n', '        }\n', '\n', "        // Invariant: debt order's issuance must not have been cancelled\n", '        if (issuanceCancelled[debtOrder.issuance.agreementId]) {\n', '            LogError(uint8(Errors.ISSUANCE_CANCELLED), debtOrder.debtOrderHash);\n', '            return false;\n', '        }\n', '\n', '        // Invariant: debt order itself must not have been cancelled\n', '        if (debtOrderCancelled[debtOrder.debtOrderHash]) {\n', '            LogError(uint8(Errors.ORDER_CANCELLED), debtOrder.debtOrderHash);\n', '            return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Assert that the creditor has a sufficient token balance and has\n', '     * granted the token transfer proxy contract sufficient allowance to suffice for the principal\n', '     * and creditor fee.\n', '     */\n', '    function assertExternalBalanceAndAllowanceInvariants(\n', '        address creditor,\n', '        DebtOrder debtOrder\n', '    )\n', '        internal\n', '        returns (bool _isBalanceAndAllowanceSufficient)\n', '    {\n', '        uint totalCreditorPayment = debtOrder.principalAmount.add(debtOrder.creditorFee);\n', '\n', '        if (getBalance(debtOrder.principalToken, creditor) < totalCreditorPayment ||\n', '            getAllowance(debtOrder.principalToken, creditor) < totalCreditorPayment) {\n', '            LogError(uint8(Errors.CREDITOR_BALANCE_OR_ALLOWANCE_INSUFFICIENT), debtOrder.debtOrderHash);\n', '            return false;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Helper function transfers a specified amount of tokens between two parties\n', '     * using the token transfer proxy contract.\n', '     */\n', '    function transferTokensFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint amount\n', '    )\n', '        internal\n', '        returns (bool success)\n', '    {\n', '        return TokenTransferProxy(TOKEN_TRANSFER_PROXY).transferFrom(\n', '            token,\n', '            from,\n', '            to,\n', '            amount\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Helper function that constructs a hashed issuance structs from the given\n', '     * parameters.\n', '     */\n', '    function getIssuance(\n', '        address version,\n', '        address debtor,\n', '        address underwriter,\n', '        address termsContract,\n', '        uint underwriterRiskRating,\n', '        uint salt,\n', '        bytes32 termsContractParameters\n', '    )\n', '        internal\n', '        pure\n', '        returns (Issuance _issuance)\n', '    {\n', '        Issuance memory issuance = Issuance({\n', '            version: version,\n', '            debtor: debtor,\n', '            underwriter: underwriter,\n', '            termsContract: termsContract,\n', '            underwriterRiskRating: underwriterRiskRating,\n', '            salt: salt,\n', '            termsContractParameters: termsContractParameters,\n', '            agreementId: getAgreementId(\n', '                version,\n', '                debtor,\n', '                underwriter,\n', '                termsContract,\n', '                underwriterRiskRating,\n', '                salt,\n', '                termsContractParameters\n', '            )\n', '        });\n', '\n', '        return issuance;\n', '    }\n', '\n', '    /**\n', '     * Helper function that constructs a hashed debt order struct given the raw parameters\n', '     * of a debt order.\n', '     */\n', '    function getDebtOrder(address[6] orderAddresses, uint[8] orderValues, bytes32[1] orderBytes32)\n', '        internal\n', '        view\n', '        returns (DebtOrder _debtOrder)\n', '    {\n', '        DebtOrder memory debtOrder = DebtOrder({\n', '            issuance: getIssuance(\n', '                orderAddresses[0],\n', '                orderAddresses[1],\n', '                orderAddresses[2],\n', '                orderAddresses[3],\n', '                orderValues[0],\n', '                orderValues[1],\n', '                orderBytes32[0]\n', '            ),\n', '            principalToken: orderAddresses[4],\n', '            relayer: orderAddresses[5],\n', '            principalAmount: orderValues[2],\n', '            underwriterFee: orderValues[3],\n', '            relayerFee: orderValues[4],\n', '            creditorFee: orderValues[5],\n', '            debtorFee: orderValues[6],\n', '            expirationTimestampInSec: orderValues[7],\n', '            debtOrderHash: bytes32(0)\n', '        });\n', '\n', '        debtOrder.debtOrderHash = getDebtOrderHash(debtOrder);\n', '\n', '        return debtOrder;\n', '    }\n', '\n', '    /**\n', "     * Helper function that returns an issuance's hash\n", '     */\n', '    function getAgreementId(\n', '        address version,\n', '        address debtor,\n', '        address underwriter,\n', '        address termsContract,\n', '        uint underwriterRiskRating,\n', '        uint salt,\n', '        bytes32 termsContractParameters\n', '    )\n', '        internal\n', '        pure\n', '        returns (bytes32 _agreementId)\n', '    {\n', '        return keccak256(\n', '            version,\n', '            debtor,\n', '            underwriter,\n', '            underwriterRiskRating,\n', '            termsContract,\n', '            termsContractParameters,\n', '            salt\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Returns the hash of the parameters which an underwriter is supposed to sign\n', '     */\n', '    function getUnderwriterMessageHash(DebtOrder debtOrder)\n', '        internal\n', '        view\n', '        returns (bytes32 _underwriterMessageHash)\n', '    {\n', '        return keccak256(\n', '            address(this),\n', '            debtOrder.issuance.agreementId,\n', '            debtOrder.underwriterFee,\n', '            debtOrder.principalAmount,\n', '            debtOrder.principalToken,\n', '            debtOrder.expirationTimestampInSec\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Returns the hash of the debt order.\n', '     */\n', '    function getDebtOrderHash(DebtOrder debtOrder)\n', '        internal\n', '        view\n', '        returns (bytes32 _debtorMessageHash)\n', '    {\n', '        return keccak256(\n', '            address(this),\n', '            debtOrder.issuance.agreementId,\n', '            debtOrder.underwriterFee,\n', '            debtOrder.principalAmount,\n', '            debtOrder.principalToken,\n', '            debtOrder.debtorFee,\n', '            debtOrder.creditorFee,\n', '            debtOrder.relayer,\n', '            debtOrder.relayerFee,\n', '            debtOrder.expirationTimestampInSec\n', '        );\n', '    }\n', '\n', '    /**\n', "     * Given a hashed message, a signer's address, and a signature, returns\n", '     * whether the signature is valid.\n', '     */\n', '    function isValidSignature(\n', '        address signer,\n', '        bytes32 hash,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '        internal\n', '        pure\n', '        returns (bool _valid)\n', '    {\n', '        return signer == ecrecover(\n', '            keccak256("\\x19Ethereum Signed Message:\\n32", hash),\n', '            v,\n', '            r,\n', '            s\n', '        );\n', '    }\n', '\n', '    /**\n', "     * Helper function for querying an address' balance on a given token.\n", '     */\n', '    function getBalance(\n', '        address token,\n', '        address owner\n', '    )\n', '        internal\n', '        view\n', '        returns (uint _balance)\n', '    {\n', '        // Limit gas to prevent reentrancy.\n', '        return ERC20(token).balanceOf.gas(EXTERNAL_QUERY_GAS_LIMIT)(owner);\n', '    }\n', '\n', '    /**\n', "     * Helper function for querying an address' allowance to the 0x transfer proxy.\n", '     */\n', '    function getAllowance(\n', '        address token,\n', '        address owner\n', '    )\n', '        internal\n', '        view\n', '        returns (uint _allowance)\n', '    {\n', '        // Limit gas to prevent reentrancy.\n', '        return ERC20(token).allowance.gas(EXTERNAL_QUERY_GAS_LIMIT)(owner, TOKEN_TRANSFER_PROXY);\n', '    }\n', '}']