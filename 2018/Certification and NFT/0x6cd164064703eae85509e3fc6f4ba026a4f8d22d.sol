['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ChristmasClub is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    uint public withdrawalTime = 1543622400; // December 1st\n', '    uint public earlyWithdrawalFeePct = 10;\n', '    \n', '    uint public totalDeposited = 0;\n', '    \n', '    mapping (address => uint) balances;\n', '    \n', '    function setWithdrawalTime (uint newTime) public onlyOwner {\n', '        withdrawalTime = newTime;\n', '    }\n', '    \n', '    function deposit () public payable {\n', '        totalDeposited = totalDeposited.add(msg.value);\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '    }\n', '    \n', '    function withdraw () public {\n', '        uint toWithdraw = balances[msg.sender];\n', '        if (now < withdrawalTime) {\n', '            toWithdraw = toWithdraw.mul(100 - earlyWithdrawalFeePct).div(100);\n', '            balances[owner] = balances[owner].add(balances[msg.sender] - toWithdraw);\n', '        }\n', '        balances[msg.sender] = 0;\n', '        msg.sender.transfer(toWithdraw);\n', '    }\n', '    \n', '    function getBalance () public view returns (uint) {\n', '        return balances[msg.sender];\n', '    }\n', '    \n', '    function () public payable {\n', '    }\n', '}']