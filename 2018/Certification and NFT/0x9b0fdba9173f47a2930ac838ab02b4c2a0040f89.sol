['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// &#39;WTT&#39; &#39;WinTech Token&#39; token contract\n', '//\n', '// Symbol       : WTT\n', '// Name         : WinTech Token\n', '// Total supply : 100,000,000.000000000000000000\n', '// Decimals     : 18\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract WTToken is ERC20Interface {\n', '    using SafeMath for uint;\n', '\n', '    struct UnlockRule {\n', '        uint time;\n', '        uint balance;\n', '    }\n', '\n', '    string constant public symbol  = "WTT";\n', '    string constant public name    = "WinTech Token";\n', '    uint8 constant public decimals = 18;\n', '    uint _totalSupply              = 100000000e18;\n', '\n', '    address crowdSale              = 0x6F76f25ac0D1fCc611dC605E85e57C5516480BD9;\n', '    address founder                = 0x316461dC8aFBFd31c4a11B7e0f1C7D26b8f8160f;\n', '    address team                   = 0xF204b3934d972DfcA1a5Bf990A9650d71008E28d;\n', '    address platform               = 0x66111e6338A5C06568325F845f4030e673f5aF88;\n', '\n', '    uint constant crowdSaleTokens  = 48000000e18; // 48%\n', '    uint constant founderTokens    = 22000000e18; // 22%\n', '    uint constant teamTokens       = 18000000e18; // 18%\n', '    uint constant platformTokens   = 12000000e18; // 12%\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    //  18000000e18 : 1571356800 - 2019-10-18 00:00:00 GMT+00:00\n', '    //  13500000e18 : 1602979200 - 2020-10-18 00:00:00 GMT+00:00\n', '    //   9000000e18 : 1634515200 - 2021-10-18 00:00:00 GMT+00:00\n', '    //   4500000e18 : 1666051200 - 2022-10-18 00:00:00 GMT+00:00\n', '    mapping(uint    => UnlockRule) public unlockRule;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(uint time1, uint time2, uint time3, uint time4, uint bal1, uint bal2, uint bal3, uint bal4) public {\n', '\n', '        unlockRule[1] = UnlockRule(time1, bal1);\n', '        unlockRule[2] = UnlockRule(time2, bal2);\n', '        unlockRule[3] = UnlockRule(time3, bal3);\n', '        unlockRule[4] = UnlockRule(time4, bal4);\n', '\n', '        preSale(crowdSale, crowdSaleTokens);\n', '        preSale(founder,   founderTokens);\n', '        preSale(team,      teamTokens);\n', '        preSale(platform,  platformTokens);\n', '    }\n', '\n', '\n', '    function preSale(address _address, uint _amount) internal returns (bool) {\n', '        balances[_address] = _amount;\n', '        emit Transfer(address(0x0), _address, _amount);\n', '    }\n', '\n', '\n', '    function transferPermissions(address spender, uint tokens) internal constant returns (bool) {\n', '\n', '        if (spender == team) {\n', '            uint bal = balances[team].sub(tokens);\n', '            if (bal < minimumBalance()) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function minimumBalance() public view returns (uint) {\n', '        for (uint i = 1; i <= 4; ++i) {\n', '            if (now < unlockRule[i].time) {\n', '                return unlockRule[i].balance;\n', '            }\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(transferPermissions(msg.sender, tokens), "Lock Rule");\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to]         = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(transferPermissions(from, tokens), "Lock Rule");\n', '        balances[from]            = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to]              = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Don&#39;t accept ETH\n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'WTT' 'WinTech Token' token contract\n", '//\n', '// Symbol       : WTT\n', '// Name         : WinTech Token\n', '// Total supply : 100,000,000.000000000000000000\n', '// Decimals     : 18\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract WTToken is ERC20Interface {\n', '    using SafeMath for uint;\n', '\n', '    struct UnlockRule {\n', '        uint time;\n', '        uint balance;\n', '    }\n', '\n', '    string constant public symbol  = "WTT";\n', '    string constant public name    = "WinTech Token";\n', '    uint8 constant public decimals = 18;\n', '    uint _totalSupply              = 100000000e18;\n', '\n', '    address crowdSale              = 0x6F76f25ac0D1fCc611dC605E85e57C5516480BD9;\n', '    address founder                = 0x316461dC8aFBFd31c4a11B7e0f1C7D26b8f8160f;\n', '    address team                   = 0xF204b3934d972DfcA1a5Bf990A9650d71008E28d;\n', '    address platform               = 0x66111e6338A5C06568325F845f4030e673f5aF88;\n', '\n', '    uint constant crowdSaleTokens  = 48000000e18; // 48%\n', '    uint constant founderTokens    = 22000000e18; // 22%\n', '    uint constant teamTokens       = 18000000e18; // 18%\n', '    uint constant platformTokens   = 12000000e18; // 12%\n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '\n', '    //  18000000e18 : 1571356800 - 2019-10-18 00:00:00 GMT+00:00\n', '    //  13500000e18 : 1602979200 - 2020-10-18 00:00:00 GMT+00:00\n', '    //   9000000e18 : 1634515200 - 2021-10-18 00:00:00 GMT+00:00\n', '    //   4500000e18 : 1666051200 - 2022-10-18 00:00:00 GMT+00:00\n', '    mapping(uint    => UnlockRule) public unlockRule;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor(uint time1, uint time2, uint time3, uint time4, uint bal1, uint bal2, uint bal3, uint bal4) public {\n', '\n', '        unlockRule[1] = UnlockRule(time1, bal1);\n', '        unlockRule[2] = UnlockRule(time2, bal2);\n', '        unlockRule[3] = UnlockRule(time3, bal3);\n', '        unlockRule[4] = UnlockRule(time4, bal4);\n', '\n', '        preSale(crowdSale, crowdSaleTokens);\n', '        preSale(founder,   founderTokens);\n', '        preSale(team,      teamTokens);\n', '        preSale(platform,  platformTokens);\n', '    }\n', '\n', '\n', '    function preSale(address _address, uint _amount) internal returns (bool) {\n', '        balances[_address] = _amount;\n', '        emit Transfer(address(0x0), _address, _amount);\n', '    }\n', '\n', '\n', '    function transferPermissions(address spender, uint tokens) internal constant returns (bool) {\n', '\n', '        if (spender == team) {\n', '            uint bal = balances[team].sub(tokens);\n', '            if (bal < minimumBalance()) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function minimumBalance() public view returns (uint) {\n', '        for (uint i = 1; i <= 4; ++i) {\n', '            if (now < unlockRule[i].time) {\n', '                return unlockRule[i].balance;\n', '            }\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        require(transferPermissions(msg.sender, tokens), "Lock Rule");\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to]         = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces\n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        require(transferPermissions(from, tokens), "Lock Rule");\n', '        balances[from]            = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to]              = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
