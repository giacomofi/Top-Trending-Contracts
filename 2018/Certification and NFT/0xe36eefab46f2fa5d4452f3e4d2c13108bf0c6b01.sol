['pragma solidity ^0.4.13;\n', '\n', 'contract Commons {\n', '\n', '    int256 constant INT256_MIN = int256((uint256(1) << 255));\n', '    int256 constant INT256_MAX = int256(~((uint256(1) << 255)));\n', '    uint256 constant UINT256_MIN = 0;\n', '    uint256 constant UINT256_MAX = ~uint256(0);\n', '\n', '    struct IndexElem {\n', '        bytes32 mappingId;\n', '        int nOp;\n', '    }\n', '\n', '    function Commons() internal { }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address internal owner;\n', '\n', '    event LogTransferOwnership(address previousOwner, address newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() internal\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier ownerOnly()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) external\n', '        ownerOnly\n', '    {\n', '        require(_newOwner != address(0));\n', '        emit LogTransferOwnership(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     *\n', '     */\n', '    function getOwner() external view returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', 'contract Authorized is Ownable {\n', '\n', '    struct User {\n', '        string friendlyName;\n', '        string offChainIdentity;\n', '        bool isRegulator;\n', '        bool isProducer;\n', '        bool isWinery;\n', '    }\n', '\n', '    mapping (address => User) public onChainIdentities;    \n', '    mapping (bytes32 => address) public onChainAddresses;\n', '\n', '    event LogSetUser\n', '    (\n', '        address account, \n', '        string oldFriendlyName, \n', '        string oldOffChainIdentity, \n', '        bool oldIsProducer, \n', '        bool oldIsWinery, \n', '        bool oldIsRegulator, \n', '        address indexed operationSender\n', '    );\n', '\n', '    event LogSetWinery\n', '    (\n', '        address winery, \n', '        bool oldIsValid, \n', '        bool isValid, \n', '        address indexed operationSender\n', '    );\n', '\n', '    event LogSetRegulator\n', '    (\n', '        address regulator, \n', '        bool oldValue, \n', '        bool value, \n', '        address indexed operationSender\n', '    );\n', '\n', '    event LogSetProducer\n', '    (\n', '        address producer, \n', '        bool oldValue, \n', '        bool value, \n', '        address indexed operationSender\n', '    );\n', '\n', '    function Authorized() internal { }\n', '\n', '    modifier producersOnly() {\n', '        require(onChainIdentities[msg.sender].isProducer);\n', '        _;\n', '    }\n', '\n', '    modifier wineriesOnly() {\n', '        require(onChainIdentities[msg.sender].isWinery);\n', '        _;\n', '    }\n', '\n', '    modifier regulatorsOnly() {\n', '        require(onChainIdentities[msg.sender].isRegulator);\n', '        _;\n', '    }\n', '\n', '    function setUser(\n', '        address _address,\n', '        string _friendlyName,\n', '        string _offChainIdentity,\n', '        bool _isRegulator,\n', '        bool _isProducer,\n', '        bool _isWinery\n', '    ) \n', '        public\n', '        ownerOnly\n', '    {\n', '        emit LogSetUser (\n', '            _address, \n', '            onChainIdentities[_address].friendlyName, \n', '            onChainIdentities[_address].offChainIdentity, \n', '            onChainIdentities[_address].isProducer, \n', '            onChainIdentities[_address].isWinery, \n', '            onChainIdentities[_address].isRegulator, \n', '            msg.sender\n', '        );\n', '        onChainAddresses[keccak256(_offChainIdentity)] = _address;\n', '        onChainIdentities[_address].friendlyName = _friendlyName;\n', '        onChainIdentities[_address].offChainIdentity = _offChainIdentity;\n', '        onChainIdentities[_address].isRegulator = _isRegulator;\n', '        onChainIdentities[_address].isProducer = _isProducer;\n', '        onChainIdentities[_address].isWinery = _isWinery;\n', '    }\n', '\n', '    function getOffChainIdentity(address _address) internal view returns (string offChainIdentity)\n', '    {\n', '        return onChainIdentities[_address].offChainIdentity;\n', '    }\n', '\n', '    function getUser(address _address)\n', '        external view\n', '        returns (\n', '            string friendlyName, \n', '            string offChainIdentity, \n', '            bool isRegulator, \n', '            bool isProducer, \n', '            bool isWinery\n', '        ) \n', '    {\n', '        return (\n', '            onChainIdentities[_address].friendlyName,\n', '            onChainIdentities[_address].offChainIdentity,\n', '            onChainIdentities[_address].isRegulator,\n', '            onChainIdentities[_address].isProducer,\n', '            onChainIdentities[_address].isWinery\n', '        );\n', '    }\n', '\n', '    function getAddress(string _offChainIdentity) public view returns (address) {\n', '        return onChainAddresses[keccak256(_offChainIdentity)];\n', '    }\n', '\n', '    function setRegulator(address _address, bool _newValue) external ownerOnly {\n', '        emit LogSetRegulator(_address, onChainIdentities[_address].isRegulator, _newValue, msg.sender);\n', '        onChainIdentities[_address].isRegulator = _newValue;\n', '    }\n', '\n', '    function setProducer(address _address, bool _newValue) external ownerOnly {\n', '        emit LogSetProducer(_address, onChainIdentities[_address].isProducer, _newValue, msg.sender);\n', '        onChainIdentities[_address].isProducer = _newValue;\n', '    }\n', '\n', '    function setWinery(address _address, bool _newValue) external ownerOnly {\n', '        emit LogSetProducer(_address, onChainIdentities[_address].isWinery, _newValue, msg.sender);\n', '        onChainIdentities[_address].isWinery = _newValue;\n', '    }\n', '\n', '}\n', '\n', 'contract WineryOperations is Commons, Authorized {\n', '\n', '    uint256 constant OPERATION_SEARCH_MAX = uint(INT256_MAX);\n', '\n', '    struct WineryOperation {\n', '        address operationSender;\n', '        string offChainIdentity;   //cuaa\n', '        string operationID;        // hash (offChainIdentity, operationDate, operationCode)\n', '        string operationCode;      //Es. IMBO\n', '        uint operationDate;\n', '        uint16 areaCode;           // mapping\n', '        string codeICQRF;          // codice_icqrf_stabilimento\n', '        string attributes;\n', '        Product[] prods;\n', '        IndexElem[] parentList;\n', '        IndexElem[] childList;        \n', '    }\n', '\n', '    struct Product {\n', '        string productID;      // codice_primario + codice_secondario\n', '        string quantity;        // 1,345 kg\n', '        string attributes;      // dsda; dasd;; sadas;\n', '    }\n', '\n', '    mapping(bytes32 => WineryOperation[]) public wineries;\n', '\n', '    event LogAddWineryOperation(\n', '        string _trackID,\n', '        address operationSender,\n', '        address indexed onChainIdentity,\n', '        string operationID,      \n', '        uint index\n', '    );\n', '\n', '    event LogAddProduct(\n', '        string _trackID,\n', '        address operationSender,\n', '        address indexed onChainIdentity,\n', '        string indexed operationID,\n', '        string productID\n', '    );\n', '\n', '    function WineryOperations() internal { }\n', '    \n', '    // ============================================================================================\n', '    // External functions for wineries\n', '    // ============================================================================================\n', '\n', '    function addWineryOperation(\n', '        string _trackID,\n', '        string _operationID,\n', '        string _operationCode,\n', '        uint _operationDate,\n', '        uint16 _areaCode,\n', '        string _codeICQRF\n', '    )\n', '        external\n', '        wineriesOnly\n', '        returns (bool success)\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, msg.sender);\n', '        addWineryOperation(\n', '            _mappingID,\n', '            msg.sender,\n', '            onChainIdentities[msg.sender].offChainIdentity,\n', '            _operationID,\n', '            _operationCode,\n', '            _operationDate,\n', '            _areaCode,\n', '            _codeICQRF\n', '        );\n', '        emit LogAddWineryOperation(\n', '            _trackID,\n', '            msg.sender,\n', '            msg.sender,\n', '            _operationID,\n', '            wineries[_mappingID].length\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function addProduct(\n', '        string _trackID,\n', '        uint _index,\n', '        string _productID,\n', '        string _quantity,\n', '        string _attributes\n', '    )\n', '        external\n', '        wineriesOnly\n', '        returns (bool success)\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, msg.sender);\n', '        addProduct(\n', '            _mappingID,\n', '            _index,\n', '            _productID,\n', '            _quantity,\n', '            _attributes\n', '        );\n', '        emit LogAddProduct(\n', '            _trackID,\n', '            msg.sender,\n', '            msg.sender,\n', '            wineries[_mappingID][_index].operationID,\n', '            _productID\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function addReferenceParentWineryOperation(\n', '        string _trackID,\n', '        uint _numCurOperation,\n', '        string _parentTrackID,\n', '        address _parentWinery,\n', '        int _numParent        \n', '    )\n', '        external\n', '        wineriesOnly\n', '        returns (bool success)\n', '    {\n', '        addRelationshipBindingWineryOperation(\n', '            keccak256(_trackID, msg.sender),\n', '            _numCurOperation,\n', '            keccak256(_parentTrackID, _parentWinery),\n', '            _numParent\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function setOperationAttributes(\n', '        string _trackID,\n', '        uint _operationIndex,\n', '        string attributes\n', '    )\n', '        external\n', '        wineriesOnly\n', '        returns (bool success)\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, msg.sender);\n', '        wineries[_mappingID][_operationIndex].attributes = attributes;\n', '        return true;\n', '    }\n', '\n', '    function setProductAttributes(\n', '        string _trackID,\n', '        uint _operationIndex,\n', '        uint _productIndex,\n', '        string attributes\n', '    )\n', '        external\n', '        wineriesOnly\n', '        returns (bool success)\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, msg.sender);\n', '        wineries[_mappingID][_operationIndex].prods[_productIndex].attributes = attributes;\n', '        return true;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // External functions for regulators\n', '    // ============================================================================================\n', '\n', '    function addWineryOperationByRegulator(\n', '        string _trackID,\n', '        string _offChainIdentity,\n', '        string _operationID,\n', '        string _operationCode,\n', '        uint _operationDate,\n', '        uint16 _areaCode,\n', '        string _codeICQRF\n', '    )\n', '        external\n', '        regulatorsOnly\n', '    {\n', '        address _winery = getAddress(_offChainIdentity);\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        addWineryOperation(\n', '            _mappingID,\n', '            msg.sender,\n', '            _offChainIdentity,\n', '            _operationID,\n', '            _operationCode,\n', '            _operationDate,\n', '            _areaCode,\n', '            _codeICQRF\n', '        );\n', '        emit LogAddWineryOperation(\n', '            _trackID,\n', '            msg.sender,\n', '            _winery,\n', '            _operationID,\n', '            wineries[_mappingID].length\n', '        );\n', '    }\n', '    \n', '    function addProductByRegulator(\n', '        string _trackID,\n', '        uint _index,\n', '        string _offChainIdentity,\n', '        string _productID,\n', '        string _quantity,\n', '        string _attributes\n', '    )\n', '        external\n', '        regulatorsOnly\n', '    {\n', '        address _winery = getAddress(_offChainIdentity);\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        addProduct(\n', '            _mappingID,\n', '            _index,\n', '            _productID,\n', '            _quantity,\n', '            _attributes\n', '        );\n', '        emit LogAddProduct(\n', '            _trackID,\n', '            msg.sender,\n', '            _winery,\n', '            wineries[_mappingID][_index].operationID,\n', '            _productID\n', '        );\n', '    }\n', '\n', '    function setOperationAttributesByRegulator(\n', '        string _trackID,\n', '        string _offChainIdentity,\n', '        uint _operationIndex,\n', '        string attributes\n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {     \n', '        address _winery = getAddress(_offChainIdentity);\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        wineries[_mappingID][_operationIndex].attributes = attributes;\n', '        return true;\n', '    }\n', '\n', '    function setProductAttributesByRegulator(\n', '        string _trackID,\n', '        string _offChainIdentity,\n', '        uint _operationIndex,\n', '        uint _productIndex,\n', '        string attributes\n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {\n', '        address _winery = getAddress(_offChainIdentity);\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        wineries[_mappingID][_operationIndex].prods[_productIndex].attributes = attributes;\n', '        return true;\n', '    }\n', '\n', '    function addReferenceParentWineryOperationByRegulator(\n', '        string _trackID,\n', '        string _offChainIdentity,\n', '        uint _numCurOperation,\n', '        string _parentTrackID,\n', '        string _parentOffChainIdentity,\n', '        int _numParent        \n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {\n', '        address _winery = getAddress(_offChainIdentity);\n', '        address _parentWinery = getAddress(_parentOffChainIdentity);\n', '        addRelationshipBindingWineryOperation(\n', '            keccak256(_trackID, _winery),\n', '            _numCurOperation,\n', '            keccak256(_parentTrackID, _parentWinery),\n', '            _numParent\n', '        );\n', '        return true;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // Helpers for &#208;Apps\n', '    // ============================================================================================\n', '    \n', '    /// @notice ****\n', '    function getWineryOperation(string _trackID, address _winery, uint _index)\n', '        external view\n', '        returns (\n', '            address operationSender,\n', '            string offChainIdentity,\n', '            string operationID,\n', '            string operationCode,\n', '            uint operationDate,\n', '            uint16 areaCode,\n', '            string codeICQRF,\n', '            string attributes\n', '        )\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        operationSender = wineries[_mappingID][_index].operationSender;\n', '        offChainIdentity = wineries[_mappingID][_index].offChainIdentity;\n', '        operationID = wineries[_mappingID][_index].operationID;\n', '        operationCode = wineries[_mappingID][_index].operationCode;\n', '        operationDate = wineries[_mappingID][_index].operationDate;\n', '        areaCode = wineries[_mappingID][_index].areaCode;\n', '        codeICQRF = wineries[_mappingID][_index].codeICQRF;\n', '        attributes = wineries[_mappingID][_index].attributes;\n', '    }\n', '\n', '    function getProductOperation(string _trackID, address _winery, uint _index, uint _productIndex)\n', '        external view\n', '        returns (\n', '            string productID,\n', '            string quantity,\n', '            string attributes\n', '        )\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        productID = wineries[_mappingID][_index].prods[_productIndex].productID;\n', '        quantity = wineries[_mappingID][_index].prods[_productIndex].quantity;\n', '        attributes = wineries[_mappingID][_index].prods[_productIndex].attributes;\n', '    }\n', '\n', '    function getNumPositionOperation(string _trackID, address _winery, string _operationID)\n', '        external view\n', '        returns (int position)\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        for (uint i = 0; i < wineries[_mappingID].length && i < OPERATION_SEARCH_MAX; i++) {\n', '            if (keccak256(wineries[_mappingID][i].operationID) == keccak256(_operationID)) {\n', '                return int(i);\n', '            }\n', '        }\n', '        return -1;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // Private functions\n', '    // ============================================================================================\n', '\n', '    /// @notice TODO Commenti\n', '    function addWineryOperation(\n', '        bytes32 _mappingID,\n', '        address _operationSender,\n', '        string _offChainIdentity,\n', '        string _operationID,\n', '        string _operationCode,\n', '        uint _operationDate,\n', '        uint16 _areaCode,\n', '        string _codeICQRF\n', '    )\n', '        private\n', '    {\n', '        uint size = wineries[_mappingID].length;\n', '        wineries[_mappingID].length++;\n', '        wineries[_mappingID][size].operationSender = _operationSender;\n', '        wineries[_mappingID][size].offChainIdentity = _offChainIdentity;\n', '        wineries[_mappingID][size].operationID = _operationID;\n', '        wineries[_mappingID][size].operationCode = _operationCode;\n', '        wineries[_mappingID][size].operationDate = _operationDate;\n', '        wineries[_mappingID][size].areaCode = _areaCode;\n', '        wineries[_mappingID][size].codeICQRF = _codeICQRF;\n', '    }\n', '\n', '    /// @notice TODO Commenti\n', '    function addProduct(\n', '        bytes32 _mappingID,\n', '        uint _index,\n', '        string _productID,\n', '        string _quantity,\n', '        string _attributes\n', '    )\n', '        private\n', '    {\n', '        wineries[_mappingID][_index].prods.push(\n', '            Product(\n', '                _productID,\n', '                _quantity,\n', '                _attributes\n', '            )\n', '        );\n', '    }\n', '\n', '    function addRelationshipBindingWineryOperation(\n', '        bytes32 _mappingID,\n', '        uint _numCurOperation,\n', '        bytes32 _parentMappingID,        \n', '        int _numParent        \n', '    )\n', '        private\n', '    {\n', '        require(_numCurOperation < OPERATION_SEARCH_MAX);\n', '        require(_numParent >= 0);\n', '        uint _parentIndex = uint(_numParent);\n', '        int _numCurOperationINT = int(_numCurOperation);\n', '        wineries[_mappingID][_numCurOperation].parentList.push(IndexElem(_parentMappingID, _numParent));\n', '        wineries[_parentMappingID][_parentIndex].childList.push(IndexElem(_mappingID, _numCurOperationINT));\n', '    }\n', '\n', '  /*\n', '    \n', '    // ======================================================================================\n', '    // &#208;Apps helpers\n', '    // ======================================================================================\n', '\n', '\n', '\n', '\n', '    function getParentOperation(bytes32 _mappingID, uint8 _index, uint8 _nParent) external view returns (bytes32 id, int num) {\n', '        id = wineries[_mappingID][_index].parentList[_nParent].mappingId;\n', '        num = wineries[_mappingID][_index].parentList[_nParent].nOp;\n', '    }\n', '\n', '    function getNumParentOperation(bytes32 _mappingID, uint8 _index) external view returns (uint num) {\n', '        num = wineries[_mappingID][_index].parentList.length;\n', '    }\n', '\n', '    function getChildOperation(bytes32 _mappingID, uint8 _index, uint8 _nParent) external view returns (bytes32 id, int num) {\n', '        id = wineries[_mappingID][_index].childList[_nParent].mappingId;\n', '        num = wineries[_mappingID][_index].childList[_nParent].nOp;\n', '    }\n', '\n', '    function getNumChildOperation(bytes32 _mappingID, uint8 _index) external view returns (uint num) {\n', '        num = wineries[_mappingID][_index].childList.length;\n', '    }\n', '    \n', '    function getNumPositionProduct(bytes32 _mappingID, uint8 _nPosOp, string _productId) external view returns (int position) {\n', '        position = -1;\n', '        for (uint8 i = 0; i < wineries[_mappingID][_nPosOp].prods.length; i++) {\n', '            if (keccak256(wineries[_mappingID][_nPosOp].prods[i].productID) == keccak256(_productId))\n', '                position = i;\n', '        }\n', '    }\n', '\n', '    function getNumWineryOperation(bytes32 _mappingID) external view returns (uint num) {\n', '        num = wineries[_mappingID].length;\n', '    }\n', '\n', '    */\n', '\n', '}\n', '\n', 'contract ProducerOperations is Commons, Authorized {\n', '\n', '    // ============================================================================================\n', '    // Producer operations\n', '    // ============================================================================================\n', '\n', '    struct HarvestOperation {\n', '        address operationSender;\n', '        string offChainIdentity;\n', '        string operationID;    // codice_allegato\n', '        uint32 quantity;        // uva_rivendicata (kg)\n', '        uint24 areaCode;        // cod_istat regione_provenienza_uve, mapping\n', '        uint16 year;            // anno raccolta\n', '        string attributes;      \n', '        IndexElem child;\n', '        Vineyard[] vineyards;\n', '    }\n', '\n', '    struct Vineyard {\n', '        uint16 variety;        // variet&#224; mapping descrizione_varieta\n', '        uint24 areaCode;       // codice_istat_comune, mapping dal quale si ricaver&#224; anche prov. e descrizione\n', '        uint32 usedSurface;    // vigneto utilizzato (superficie_utilizzata) mq2\n', '        uint16 plantingYear;\n', '    }\n', '\n', '    mapping(bytes32 => HarvestOperation) public harvests;\n', '    \n', '    event LogStoreHarvestOperation(\n', '        string trackIDs,\n', '        address operationSender,\n', '        address indexed onChainIdentity,\n', '        string operationID\n', '    );\n', '\n', '    event LogAddVineyard(\n', '        string trackIDs,\n', '        address operationSender,\n', '        address indexed onChainIdentity,\n', '        uint24 indexed areaCode       \n', '    );\n', '\n', '    function ProducerOperations() internal { }\n', '    \n', '    // ============================================================================================\n', '    // External functions for producers\n', '    // ============================================================================================\n', '\n', '    /// @notice ****\n', '    /// @dev ****\n', '    /// @param _trackIDs ****\n', '    /// @return true if operation is successful\n', '    function storeHarvestOperation(\n', '        string _trackIDs,\n', '        string _operationID,\n', '        uint32 _quantity,\n', '        uint16 _areaCode,\n', '        uint16 _year,\n', '        string _attributes\n', '    )\n', '        external\n', '        producersOnly\n', '        returns (bool success)\n', '    {\n', '        storeHarvestOperation(\n', '            keccak256(_trackIDs, msg.sender),\n', '            msg.sender,\n', '            getOffChainIdentity(msg.sender),\n', '            _operationID,            \n', '            _quantity,\n', '            _areaCode,\n', '            _year,\n', '            _attributes\n', '        );\n', '        emit LogStoreHarvestOperation(\n', '            _trackIDs,\n', '            msg.sender,\n', '            msg.sender,\n', '            _operationID\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /// @notice ****\n', '    /// @dev ****\n', '    /// @param _trackIDs ****\n', '    /// @return true if operation is successful\n', '    function addVineyard(\n', '        string _trackIDs,\n', '        uint16 _variety,\n', '        uint24 _areaCode,\n', '        uint32 _usedSurface,\n', '        uint16 _plantingYear\n', '    )\n', '        external\n', '        producersOnly\n', '        returns (bool success)\n', '    {\n', '        addVineyard(\n', '            keccak256(_trackIDs, msg.sender),\n', '            _variety,\n', '            _areaCode,            \n', '            _usedSurface,\n', '            _plantingYear\n', '        );\n', '        emit LogAddVineyard(_trackIDs, msg.sender, msg.sender, _areaCode);\n', '        return true;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // External functions for regulators\n', '    // ============================================================================================\n', '\n', '    function storeHarvestOperationByRegulator(\n', '        string _trackIDs,\n', '        string _offChainIdentity,\n', '        string _operationID,\n', '        uint32 _quantity,\n', '        uint16 _areaCode,\n', '        uint16 _year,\n', '        string _attributes\n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {\n', '        address _producer = getAddress(_offChainIdentity);\n', '        storeHarvestOperation(\n', '            keccak256(_trackIDs,_producer),\n', '            msg.sender,\n', '            _offChainIdentity,\n', '            _operationID,\n', '            _quantity,\n', '            _areaCode,\n', '            _year,\n', '            _attributes\n', '        );\n', '        emit LogStoreHarvestOperation(\n', '            _trackIDs,\n', '            msg.sender,\n', '            _producer,\n', '            _operationID\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function addVineyardByRegulator(\n', '        string _trackIDs,\n', '        string _offChainIdentity,\n', '        uint16 _variety,\n', '        uint24 _areaCode,\n', '        uint32 _usedSurface,\n', '        uint16 _plantingYear\n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {\n', '        address _producer = getAddress(_offChainIdentity);\n', '        require(_producer != address(0));\n', '        addVineyard(\n', '            keccak256(_trackIDs,_producer),\n', '            _variety,\n', '            _areaCode,\n', '            _usedSurface,\n', '            _plantingYear\n', '        );\n', '        emit LogAddVineyard(_trackIDs, msg.sender, _producer, _areaCode);\n', '        return true;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // Helpers for &#208;Apps\n', '    // ============================================================================================\n', '\n', '    function getHarvestOperation(string _trackID, address _producer)\n', '        external view\n', '        returns (\n', '            address operationSender,\n', '            string offChainIdentity,\n', '            string operationID,\n', '            uint32 quantity,\n', '            uint24 areaCode,\n', '            uint16 year,\n', '            string attributes\n', '        )\n', '    {\n', '        bytes32 _mappingID32 = keccak256(_trackID, _producer);\n', '        operationSender = harvests[_mappingID32].operationSender;\n', '        offChainIdentity = harvests[_mappingID32].offChainIdentity;\n', '        operationID = harvests[_mappingID32].operationID;\n', '        quantity = harvests[_mappingID32].quantity;\n', '        areaCode = harvests[_mappingID32].areaCode;\n', '        year = harvests[_mappingID32].year;\n', '        attributes = harvests[_mappingID32].attributes;\n', '    }\n', '\n', '    function getVineyard(string _trackID, address _producer, uint _index)\n', '        external view\n', '        returns (\n', '            uint32 variety,\n', '            uint32 areaCode,\n', '            uint32 usedSurface,\n', '            uint16 plantingYear\n', '        )\n', '    {\n', '        bytes32 _mappingID32 = keccak256(_trackID, _producer);\n', '        variety = harvests[_mappingID32].vineyards[_index].variety;\n', '        areaCode = harvests[_mappingID32].vineyards[_index].areaCode;\n', '        usedSurface = harvests[_mappingID32].vineyards[_index].usedSurface;\n', '        plantingYear = harvests[_mappingID32].vineyards[_index].plantingYear;\n', '    }\n', '\n', '    function getVineyardCount(string _trackID, address _producer)\n', '        external view\n', '        returns (uint numberOfVineyards)\n', '    {\n', '        bytes32 _mappingID32 = keccak256(_trackID, _producer);\n', '        numberOfVineyards = harvests[_mappingID32].vineyards.length;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // Private functions\n', '    // ============================================================================================\n', '\n', '    function storeHarvestOperation(\n', '        bytes32 _mappingID,\n', '        address _operationSender,\n', '        string _offChainIdentity,\n', '        string _operationID,\n', '        uint32 _quantity,\n', '        uint24 _areaCode,        \n', '        uint16 _year,\n', '        string _attributes\n', '    )\n', '        private\n', '    {\n', '        harvests[_mappingID].operationSender = _operationSender;\n', '        harvests[_mappingID].offChainIdentity = _offChainIdentity;\n', '        harvests[_mappingID].operationID = _operationID;\n', '        harvests[_mappingID].quantity = _quantity;\n', '        harvests[_mappingID].areaCode = _areaCode;\n', '        harvests[_mappingID].year = _year;\n', '        harvests[_mappingID].attributes = _attributes;\n', '    }\n', '\n', '    function addVineyard(\n', '        bytes32 _mappingID,\n', '        uint16 _variety,\n', '        uint24 _areaCode,\n', '        uint32 _usedSurface,\n', '        uint16 _plantingYear        \n', '    )\n', '        private\n', '    {\n', '        harvests[_mappingID].vineyards.push(\n', '            Vineyard(_variety, _areaCode, _usedSurface, _plantingYear)\n', '        );\n', '    }\n', '    \n', '}\n', '\n', 'contract Upgradable is Ownable {\n', '\n', '    address public newAddress;\n', '    uint    public deprecatedSince;\n', '    string  public version;\n', '    string  public newVersion;\n', '    string  public reason;\n', '\n', '    event LogSetDeprecated(address newAddress, string newVersion, string reason);\n', '\n', '    /**\n', '     *\n', '     */\n', '    function Upgradable(string _version) internal\n', '    {\n', '        version = _version;\n', '    }\n', '\n', '    /**\n', '     *\n', '     */\n', '    function setDeprecated(address _newAddress, string _newVersion, string _reason) external\n', '        ownerOnly\n', '        returns (bool success)\n', '    {\n', '        require(!isDeprecated());\n', '        require(_newAddress != address(this));\n', '        require(!Upgradable(_newAddress).isDeprecated());\n', '        deprecatedSince = now;\n', '        newAddress = _newAddress;\n', '        newVersion = _newVersion;\n', '        reason = _reason;\n', '        emit LogSetDeprecated(_newAddress, _newVersion, _reason);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice check if the contract is deprecated\n', '     */\n', '    function isDeprecated() public view returns (bool deprecated)\n', '    {\n', '        return (deprecatedSince != 0);\n', '    }\n', '}\n', '\n', 'contract SmartBinding is Authorized {\n', '\n', '    mapping (bytes32 => bytes32) public bindingSmartIdentity;\n', ' \n', '    event LogBindSmartIdentity (\n', '        string _trackIDs,\n', '        address operationSender,\n', '        address onChainIdentity,\n', '        string smartIdentity\n', '    );\n', '\n', '    function SmartBinding() internal { }\n', '\n', '    // ============================================================================================\n', '    // External functions for wineries\n', '    // ============================================================================================\n', '\n', '    /// @notice ****\n', '    /// @dev ****\n', '    /// @param _trackIDs ****\n', '    /// @return true if operation is successful\n', '    function bindSmartIdentity(string _trackIDs, string _smartIdentity)\n', '        external\n', '        wineriesOnly\n', '    {\n', '        bindingSmartIdentity[keccak256(_smartIdentity, msg.sender)] = keccak256(_trackIDs, msg.sender);\n', '        emit LogBindSmartIdentity(_trackIDs, msg.sender, msg.sender, _smartIdentity);\n', '    }\n', '\n', '    // ============================================================================================\n', '    // External functions for regulators\n', '    // ============================================================================================\n', '    \n', '    /// @notice ****\n', '    /// @dev ****\n', '    /// @param _trackIDs ****\n', '    /// @return true if operation is successful\n', '    function bindSmartIdentityByRegulator(\n', '        string _trackIDs,\n', '        string _offChainIdentity,  \n', '        string _smartIdentity\n', '    )\n', '        external\n', '        regulatorsOnly\n', '    {\n', '        address winery = getAddress(_offChainIdentity);\n', '        bindingSmartIdentity[keccak256(_smartIdentity, winery)] = keccak256(_trackIDs, winery);\n', '        emit LogBindSmartIdentity(_trackIDs, msg.sender, winery, _smartIdentity);\n', '    }\n', '\n', '    // ======================================================================================\n', '    // &#208;Apps helpers\n', '    // ======================================================================================\n', '\n', '    function getWineryMappingID(string _smartIdentity, string _offChainIdentity)\n', '        external view\n', '        returns (bytes32 wineryMappingID)\n', '    {\n', '        bytes32 index = keccak256(_smartIdentity, getAddress(_offChainIdentity));\n', '        wineryMappingID = bindingSmartIdentity[index];\n', '    }\n', '\n', '}\n', '\n', 'contract WineSupplyChain is\n', '    Commons,\n', '    Authorized,\n', '    Upgradable,\n', '    ProducerOperations,\n', '    WineryOperations,\n', '    SmartBinding\n', '{\n', '\n', '    address public endorsements;\n', '\n', '    function WineSupplyChain(address _endorsements) Upgradable("1.0.0") public {\n', '        endorsements = _endorsements;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // External functions for regulators\n', '    // ============================================================================================\n', '\n', '    /// @notice TODO Inserire commenti\n', '    function startWineryProductByRegulator(\n', '        string _harvestTrackID,\n', '        string _producerOffChainIdentity,\n', '        string _wineryOperationTrackIDs,\n', '        string _wineryOffChainIdentity,\n', '        int _productIndex\n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {\n', '        require(_productIndex >= 0);\n', '        address producer = getAddress(_producerOffChainIdentity);\n', '        bytes32 harvestMappingID = keccak256(_harvestTrackID, producer);\n', '        address winery = getAddress(_wineryOffChainIdentity);\n', '        bytes32 wineryOperationMappingID = keccak256(_wineryOperationTrackIDs, winery);\n', '        harvests[harvestMappingID].child = IndexElem(wineryOperationMappingID, _productIndex);\n', '        wineries[wineryOperationMappingID][uint(_productIndex)].parentList.push(\n', '            IndexElem(harvestMappingID, -1));\n', '        return true;\n', '    }\n', '\n', '    /// @notice TODO Commenti\n', '    // TOCHECK AGGIUNGERE REQUIRE SU TIPO_OPERAZIONE = &#39;CASD&#39; ???\n', '    function startWinery(\n', '        string _harvestTrackID,\n', '        string _offChainProducerIdentity,\n', '        string _wineryTrackID,\n', '        uint _productIndex\n', '    )\n', '        external\n', '        wineriesOnly\n', '    {\n', '        require(_productIndex >= 0);\n', '        address producer = getAddress(_offChainProducerIdentity);\n', '        bytes32 harvestMappingID = keccak256(_harvestTrackID, producer);\n', '        bytes32 wineryOperationMappingID = keccak256(_wineryTrackID, msg.sender);\n', '        wineries[wineryOperationMappingID][_productIndex].parentList.push(\n', '            IndexElem(harvestMappingID, -1));\n', '    }\n', '\n', '    /// @notice TODO Commenti\n', '    // TOCHECK AGGIUNGERE REQUIRE SU TIPO_OPERAZIONE = &#39;CASD&#39; ???\n', '    function startProduct(\n', '        string _harvestTrackID,\n', '        string _wineryTrackID,\n', '        string _offChainWineryIdentity,\n', '        int _productIndex\n', '    )\n', '        external\n', '        producersOnly\n', '    {\n', '        require(_productIndex > 0);\n', '        bytes32 harvestMappingID = keccak256(_harvestTrackID, msg.sender);\n', '        address winery = getAddress(_offChainWineryIdentity);\n', '        bytes32 wineryOperationMappingID = keccak256(_wineryTrackID, winery);\n', '        harvests[harvestMappingID].child = IndexElem(wineryOperationMappingID, _productIndex);\n', '    }\n', '\n', '    /// @notice ***\n', '    /// @dev ****\n', '    /// @param _trackIDs **\n', '    /// @param _address **\n', '    /// @return mappingID if ***\n', '    function getMappingID(string _trackIDs, address _address)\n', '        external pure\n', '        returns (bytes32 mappingID)\n', '    {\n', '        mappingID = keccak256(_trackIDs, _address);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract Commons {\n', '\n', '    int256 constant INT256_MIN = int256((uint256(1) << 255));\n', '    int256 constant INT256_MAX = int256(~((uint256(1) << 255)));\n', '    uint256 constant UINT256_MIN = 0;\n', '    uint256 constant UINT256_MAX = ~uint256(0);\n', '\n', '    struct IndexElem {\n', '        bytes32 mappingId;\n', '        int nOp;\n', '    }\n', '\n', '    function Commons() internal { }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address internal owner;\n', '\n', '    event LogTransferOwnership(address previousOwner, address newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() internal\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier ownerOnly()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) external\n', '        ownerOnly\n', '    {\n', '        require(_newOwner != address(0));\n', '        emit LogTransferOwnership(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     *\n', '     */\n', '    function getOwner() external view returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', 'contract Authorized is Ownable {\n', '\n', '    struct User {\n', '        string friendlyName;\n', '        string offChainIdentity;\n', '        bool isRegulator;\n', '        bool isProducer;\n', '        bool isWinery;\n', '    }\n', '\n', '    mapping (address => User) public onChainIdentities;    \n', '    mapping (bytes32 => address) public onChainAddresses;\n', '\n', '    event LogSetUser\n', '    (\n', '        address account, \n', '        string oldFriendlyName, \n', '        string oldOffChainIdentity, \n', '        bool oldIsProducer, \n', '        bool oldIsWinery, \n', '        bool oldIsRegulator, \n', '        address indexed operationSender\n', '    );\n', '\n', '    event LogSetWinery\n', '    (\n', '        address winery, \n', '        bool oldIsValid, \n', '        bool isValid, \n', '        address indexed operationSender\n', '    );\n', '\n', '    event LogSetRegulator\n', '    (\n', '        address regulator, \n', '        bool oldValue, \n', '        bool value, \n', '        address indexed operationSender\n', '    );\n', '\n', '    event LogSetProducer\n', '    (\n', '        address producer, \n', '        bool oldValue, \n', '        bool value, \n', '        address indexed operationSender\n', '    );\n', '\n', '    function Authorized() internal { }\n', '\n', '    modifier producersOnly() {\n', '        require(onChainIdentities[msg.sender].isProducer);\n', '        _;\n', '    }\n', '\n', '    modifier wineriesOnly() {\n', '        require(onChainIdentities[msg.sender].isWinery);\n', '        _;\n', '    }\n', '\n', '    modifier regulatorsOnly() {\n', '        require(onChainIdentities[msg.sender].isRegulator);\n', '        _;\n', '    }\n', '\n', '    function setUser(\n', '        address _address,\n', '        string _friendlyName,\n', '        string _offChainIdentity,\n', '        bool _isRegulator,\n', '        bool _isProducer,\n', '        bool _isWinery\n', '    ) \n', '        public\n', '        ownerOnly\n', '    {\n', '        emit LogSetUser (\n', '            _address, \n', '            onChainIdentities[_address].friendlyName, \n', '            onChainIdentities[_address].offChainIdentity, \n', '            onChainIdentities[_address].isProducer, \n', '            onChainIdentities[_address].isWinery, \n', '            onChainIdentities[_address].isRegulator, \n', '            msg.sender\n', '        );\n', '        onChainAddresses[keccak256(_offChainIdentity)] = _address;\n', '        onChainIdentities[_address].friendlyName = _friendlyName;\n', '        onChainIdentities[_address].offChainIdentity = _offChainIdentity;\n', '        onChainIdentities[_address].isRegulator = _isRegulator;\n', '        onChainIdentities[_address].isProducer = _isProducer;\n', '        onChainIdentities[_address].isWinery = _isWinery;\n', '    }\n', '\n', '    function getOffChainIdentity(address _address) internal view returns (string offChainIdentity)\n', '    {\n', '        return onChainIdentities[_address].offChainIdentity;\n', '    }\n', '\n', '    function getUser(address _address)\n', '        external view\n', '        returns (\n', '            string friendlyName, \n', '            string offChainIdentity, \n', '            bool isRegulator, \n', '            bool isProducer, \n', '            bool isWinery\n', '        ) \n', '    {\n', '        return (\n', '            onChainIdentities[_address].friendlyName,\n', '            onChainIdentities[_address].offChainIdentity,\n', '            onChainIdentities[_address].isRegulator,\n', '            onChainIdentities[_address].isProducer,\n', '            onChainIdentities[_address].isWinery\n', '        );\n', '    }\n', '\n', '    function getAddress(string _offChainIdentity) public view returns (address) {\n', '        return onChainAddresses[keccak256(_offChainIdentity)];\n', '    }\n', '\n', '    function setRegulator(address _address, bool _newValue) external ownerOnly {\n', '        emit LogSetRegulator(_address, onChainIdentities[_address].isRegulator, _newValue, msg.sender);\n', '        onChainIdentities[_address].isRegulator = _newValue;\n', '    }\n', '\n', '    function setProducer(address _address, bool _newValue) external ownerOnly {\n', '        emit LogSetProducer(_address, onChainIdentities[_address].isProducer, _newValue, msg.sender);\n', '        onChainIdentities[_address].isProducer = _newValue;\n', '    }\n', '\n', '    function setWinery(address _address, bool _newValue) external ownerOnly {\n', '        emit LogSetProducer(_address, onChainIdentities[_address].isWinery, _newValue, msg.sender);\n', '        onChainIdentities[_address].isWinery = _newValue;\n', '    }\n', '\n', '}\n', '\n', 'contract WineryOperations is Commons, Authorized {\n', '\n', '    uint256 constant OPERATION_SEARCH_MAX = uint(INT256_MAX);\n', '\n', '    struct WineryOperation {\n', '        address operationSender;\n', '        string offChainIdentity;   //cuaa\n', '        string operationID;        // hash (offChainIdentity, operationDate, operationCode)\n', '        string operationCode;      //Es. IMBO\n', '        uint operationDate;\n', '        uint16 areaCode;           // mapping\n', '        string codeICQRF;          // codice_icqrf_stabilimento\n', '        string attributes;\n', '        Product[] prods;\n', '        IndexElem[] parentList;\n', '        IndexElem[] childList;        \n', '    }\n', '\n', '    struct Product {\n', '        string productID;      // codice_primario + codice_secondario\n', '        string quantity;        // 1,345 kg\n', '        string attributes;      // dsda; dasd;; sadas;\n', '    }\n', '\n', '    mapping(bytes32 => WineryOperation[]) public wineries;\n', '\n', '    event LogAddWineryOperation(\n', '        string _trackID,\n', '        address operationSender,\n', '        address indexed onChainIdentity,\n', '        string operationID,      \n', '        uint index\n', '    );\n', '\n', '    event LogAddProduct(\n', '        string _trackID,\n', '        address operationSender,\n', '        address indexed onChainIdentity,\n', '        string indexed operationID,\n', '        string productID\n', '    );\n', '\n', '    function WineryOperations() internal { }\n', '    \n', '    // ============================================================================================\n', '    // External functions for wineries\n', '    // ============================================================================================\n', '\n', '    function addWineryOperation(\n', '        string _trackID,\n', '        string _operationID,\n', '        string _operationCode,\n', '        uint _operationDate,\n', '        uint16 _areaCode,\n', '        string _codeICQRF\n', '    )\n', '        external\n', '        wineriesOnly\n', '        returns (bool success)\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, msg.sender);\n', '        addWineryOperation(\n', '            _mappingID,\n', '            msg.sender,\n', '            onChainIdentities[msg.sender].offChainIdentity,\n', '            _operationID,\n', '            _operationCode,\n', '            _operationDate,\n', '            _areaCode,\n', '            _codeICQRF\n', '        );\n', '        emit LogAddWineryOperation(\n', '            _trackID,\n', '            msg.sender,\n', '            msg.sender,\n', '            _operationID,\n', '            wineries[_mappingID].length\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function addProduct(\n', '        string _trackID,\n', '        uint _index,\n', '        string _productID,\n', '        string _quantity,\n', '        string _attributes\n', '    )\n', '        external\n', '        wineriesOnly\n', '        returns (bool success)\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, msg.sender);\n', '        addProduct(\n', '            _mappingID,\n', '            _index,\n', '            _productID,\n', '            _quantity,\n', '            _attributes\n', '        );\n', '        emit LogAddProduct(\n', '            _trackID,\n', '            msg.sender,\n', '            msg.sender,\n', '            wineries[_mappingID][_index].operationID,\n', '            _productID\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function addReferenceParentWineryOperation(\n', '        string _trackID,\n', '        uint _numCurOperation,\n', '        string _parentTrackID,\n', '        address _parentWinery,\n', '        int _numParent        \n', '    )\n', '        external\n', '        wineriesOnly\n', '        returns (bool success)\n', '    {\n', '        addRelationshipBindingWineryOperation(\n', '            keccak256(_trackID, msg.sender),\n', '            _numCurOperation,\n', '            keccak256(_parentTrackID, _parentWinery),\n', '            _numParent\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function setOperationAttributes(\n', '        string _trackID,\n', '        uint _operationIndex,\n', '        string attributes\n', '    )\n', '        external\n', '        wineriesOnly\n', '        returns (bool success)\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, msg.sender);\n', '        wineries[_mappingID][_operationIndex].attributes = attributes;\n', '        return true;\n', '    }\n', '\n', '    function setProductAttributes(\n', '        string _trackID,\n', '        uint _operationIndex,\n', '        uint _productIndex,\n', '        string attributes\n', '    )\n', '        external\n', '        wineriesOnly\n', '        returns (bool success)\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, msg.sender);\n', '        wineries[_mappingID][_operationIndex].prods[_productIndex].attributes = attributes;\n', '        return true;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // External functions for regulators\n', '    // ============================================================================================\n', '\n', '    function addWineryOperationByRegulator(\n', '        string _trackID,\n', '        string _offChainIdentity,\n', '        string _operationID,\n', '        string _operationCode,\n', '        uint _operationDate,\n', '        uint16 _areaCode,\n', '        string _codeICQRF\n', '    )\n', '        external\n', '        regulatorsOnly\n', '    {\n', '        address _winery = getAddress(_offChainIdentity);\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        addWineryOperation(\n', '            _mappingID,\n', '            msg.sender,\n', '            _offChainIdentity,\n', '            _operationID,\n', '            _operationCode,\n', '            _operationDate,\n', '            _areaCode,\n', '            _codeICQRF\n', '        );\n', '        emit LogAddWineryOperation(\n', '            _trackID,\n', '            msg.sender,\n', '            _winery,\n', '            _operationID,\n', '            wineries[_mappingID].length\n', '        );\n', '    }\n', '    \n', '    function addProductByRegulator(\n', '        string _trackID,\n', '        uint _index,\n', '        string _offChainIdentity,\n', '        string _productID,\n', '        string _quantity,\n', '        string _attributes\n', '    )\n', '        external\n', '        regulatorsOnly\n', '    {\n', '        address _winery = getAddress(_offChainIdentity);\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        addProduct(\n', '            _mappingID,\n', '            _index,\n', '            _productID,\n', '            _quantity,\n', '            _attributes\n', '        );\n', '        emit LogAddProduct(\n', '            _trackID,\n', '            msg.sender,\n', '            _winery,\n', '            wineries[_mappingID][_index].operationID,\n', '            _productID\n', '        );\n', '    }\n', '\n', '    function setOperationAttributesByRegulator(\n', '        string _trackID,\n', '        string _offChainIdentity,\n', '        uint _operationIndex,\n', '        string attributes\n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {     \n', '        address _winery = getAddress(_offChainIdentity);\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        wineries[_mappingID][_operationIndex].attributes = attributes;\n', '        return true;\n', '    }\n', '\n', '    function setProductAttributesByRegulator(\n', '        string _trackID,\n', '        string _offChainIdentity,\n', '        uint _operationIndex,\n', '        uint _productIndex,\n', '        string attributes\n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {\n', '        address _winery = getAddress(_offChainIdentity);\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        wineries[_mappingID][_operationIndex].prods[_productIndex].attributes = attributes;\n', '        return true;\n', '    }\n', '\n', '    function addReferenceParentWineryOperationByRegulator(\n', '        string _trackID,\n', '        string _offChainIdentity,\n', '        uint _numCurOperation,\n', '        string _parentTrackID,\n', '        string _parentOffChainIdentity,\n', '        int _numParent        \n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {\n', '        address _winery = getAddress(_offChainIdentity);\n', '        address _parentWinery = getAddress(_parentOffChainIdentity);\n', '        addRelationshipBindingWineryOperation(\n', '            keccak256(_trackID, _winery),\n', '            _numCurOperation,\n', '            keccak256(_parentTrackID, _parentWinery),\n', '            _numParent\n', '        );\n', '        return true;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // Helpers for ÐApps\n', '    // ============================================================================================\n', '    \n', '    /// @notice ****\n', '    function getWineryOperation(string _trackID, address _winery, uint _index)\n', '        external view\n', '        returns (\n', '            address operationSender,\n', '            string offChainIdentity,\n', '            string operationID,\n', '            string operationCode,\n', '            uint operationDate,\n', '            uint16 areaCode,\n', '            string codeICQRF,\n', '            string attributes\n', '        )\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        operationSender = wineries[_mappingID][_index].operationSender;\n', '        offChainIdentity = wineries[_mappingID][_index].offChainIdentity;\n', '        operationID = wineries[_mappingID][_index].operationID;\n', '        operationCode = wineries[_mappingID][_index].operationCode;\n', '        operationDate = wineries[_mappingID][_index].operationDate;\n', '        areaCode = wineries[_mappingID][_index].areaCode;\n', '        codeICQRF = wineries[_mappingID][_index].codeICQRF;\n', '        attributes = wineries[_mappingID][_index].attributes;\n', '    }\n', '\n', '    function getProductOperation(string _trackID, address _winery, uint _index, uint _productIndex)\n', '        external view\n', '        returns (\n', '            string productID,\n', '            string quantity,\n', '            string attributes\n', '        )\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        productID = wineries[_mappingID][_index].prods[_productIndex].productID;\n', '        quantity = wineries[_mappingID][_index].prods[_productIndex].quantity;\n', '        attributes = wineries[_mappingID][_index].prods[_productIndex].attributes;\n', '    }\n', '\n', '    function getNumPositionOperation(string _trackID, address _winery, string _operationID)\n', '        external view\n', '        returns (int position)\n', '    {\n', '        bytes32 _mappingID = keccak256(_trackID, _winery);\n', '        for (uint i = 0; i < wineries[_mappingID].length && i < OPERATION_SEARCH_MAX; i++) {\n', '            if (keccak256(wineries[_mappingID][i].operationID) == keccak256(_operationID)) {\n', '                return int(i);\n', '            }\n', '        }\n', '        return -1;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // Private functions\n', '    // ============================================================================================\n', '\n', '    /// @notice TODO Commenti\n', '    function addWineryOperation(\n', '        bytes32 _mappingID,\n', '        address _operationSender,\n', '        string _offChainIdentity,\n', '        string _operationID,\n', '        string _operationCode,\n', '        uint _operationDate,\n', '        uint16 _areaCode,\n', '        string _codeICQRF\n', '    )\n', '        private\n', '    {\n', '        uint size = wineries[_mappingID].length;\n', '        wineries[_mappingID].length++;\n', '        wineries[_mappingID][size].operationSender = _operationSender;\n', '        wineries[_mappingID][size].offChainIdentity = _offChainIdentity;\n', '        wineries[_mappingID][size].operationID = _operationID;\n', '        wineries[_mappingID][size].operationCode = _operationCode;\n', '        wineries[_mappingID][size].operationDate = _operationDate;\n', '        wineries[_mappingID][size].areaCode = _areaCode;\n', '        wineries[_mappingID][size].codeICQRF = _codeICQRF;\n', '    }\n', '\n', '    /// @notice TODO Commenti\n', '    function addProduct(\n', '        bytes32 _mappingID,\n', '        uint _index,\n', '        string _productID,\n', '        string _quantity,\n', '        string _attributes\n', '    )\n', '        private\n', '    {\n', '        wineries[_mappingID][_index].prods.push(\n', '            Product(\n', '                _productID,\n', '                _quantity,\n', '                _attributes\n', '            )\n', '        );\n', '    }\n', '\n', '    function addRelationshipBindingWineryOperation(\n', '        bytes32 _mappingID,\n', '        uint _numCurOperation,\n', '        bytes32 _parentMappingID,        \n', '        int _numParent        \n', '    )\n', '        private\n', '    {\n', '        require(_numCurOperation < OPERATION_SEARCH_MAX);\n', '        require(_numParent >= 0);\n', '        uint _parentIndex = uint(_numParent);\n', '        int _numCurOperationINT = int(_numCurOperation);\n', '        wineries[_mappingID][_numCurOperation].parentList.push(IndexElem(_parentMappingID, _numParent));\n', '        wineries[_parentMappingID][_parentIndex].childList.push(IndexElem(_mappingID, _numCurOperationINT));\n', '    }\n', '\n', '  /*\n', '    \n', '    // ======================================================================================\n', '    // ÐApps helpers\n', '    // ======================================================================================\n', '\n', '\n', '\n', '\n', '    function getParentOperation(bytes32 _mappingID, uint8 _index, uint8 _nParent) external view returns (bytes32 id, int num) {\n', '        id = wineries[_mappingID][_index].parentList[_nParent].mappingId;\n', '        num = wineries[_mappingID][_index].parentList[_nParent].nOp;\n', '    }\n', '\n', '    function getNumParentOperation(bytes32 _mappingID, uint8 _index) external view returns (uint num) {\n', '        num = wineries[_mappingID][_index].parentList.length;\n', '    }\n', '\n', '    function getChildOperation(bytes32 _mappingID, uint8 _index, uint8 _nParent) external view returns (bytes32 id, int num) {\n', '        id = wineries[_mappingID][_index].childList[_nParent].mappingId;\n', '        num = wineries[_mappingID][_index].childList[_nParent].nOp;\n', '    }\n', '\n', '    function getNumChildOperation(bytes32 _mappingID, uint8 _index) external view returns (uint num) {\n', '        num = wineries[_mappingID][_index].childList.length;\n', '    }\n', '    \n', '    function getNumPositionProduct(bytes32 _mappingID, uint8 _nPosOp, string _productId) external view returns (int position) {\n', '        position = -1;\n', '        for (uint8 i = 0; i < wineries[_mappingID][_nPosOp].prods.length; i++) {\n', '            if (keccak256(wineries[_mappingID][_nPosOp].prods[i].productID) == keccak256(_productId))\n', '                position = i;\n', '        }\n', '    }\n', '\n', '    function getNumWineryOperation(bytes32 _mappingID) external view returns (uint num) {\n', '        num = wineries[_mappingID].length;\n', '    }\n', '\n', '    */\n', '\n', '}\n', '\n', 'contract ProducerOperations is Commons, Authorized {\n', '\n', '    // ============================================================================================\n', '    // Producer operations\n', '    // ============================================================================================\n', '\n', '    struct HarvestOperation {\n', '        address operationSender;\n', '        string offChainIdentity;\n', '        string operationID;    // codice_allegato\n', '        uint32 quantity;        // uva_rivendicata (kg)\n', '        uint24 areaCode;        // cod_istat regione_provenienza_uve, mapping\n', '        uint16 year;            // anno raccolta\n', '        string attributes;      \n', '        IndexElem child;\n', '        Vineyard[] vineyards;\n', '    }\n', '\n', '    struct Vineyard {\n', '        uint16 variety;        // varietà mapping descrizione_varieta\n', '        uint24 areaCode;       // codice_istat_comune, mapping dal quale si ricaverà anche prov. e descrizione\n', '        uint32 usedSurface;    // vigneto utilizzato (superficie_utilizzata) mq2\n', '        uint16 plantingYear;\n', '    }\n', '\n', '    mapping(bytes32 => HarvestOperation) public harvests;\n', '    \n', '    event LogStoreHarvestOperation(\n', '        string trackIDs,\n', '        address operationSender,\n', '        address indexed onChainIdentity,\n', '        string operationID\n', '    );\n', '\n', '    event LogAddVineyard(\n', '        string trackIDs,\n', '        address operationSender,\n', '        address indexed onChainIdentity,\n', '        uint24 indexed areaCode       \n', '    );\n', '\n', '    function ProducerOperations() internal { }\n', '    \n', '    // ============================================================================================\n', '    // External functions for producers\n', '    // ============================================================================================\n', '\n', '    /// @notice ****\n', '    /// @dev ****\n', '    /// @param _trackIDs ****\n', '    /// @return true if operation is successful\n', '    function storeHarvestOperation(\n', '        string _trackIDs,\n', '        string _operationID,\n', '        uint32 _quantity,\n', '        uint16 _areaCode,\n', '        uint16 _year,\n', '        string _attributes\n', '    )\n', '        external\n', '        producersOnly\n', '        returns (bool success)\n', '    {\n', '        storeHarvestOperation(\n', '            keccak256(_trackIDs, msg.sender),\n', '            msg.sender,\n', '            getOffChainIdentity(msg.sender),\n', '            _operationID,            \n', '            _quantity,\n', '            _areaCode,\n', '            _year,\n', '            _attributes\n', '        );\n', '        emit LogStoreHarvestOperation(\n', '            _trackIDs,\n', '            msg.sender,\n', '            msg.sender,\n', '            _operationID\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /// @notice ****\n', '    /// @dev ****\n', '    /// @param _trackIDs ****\n', '    /// @return true if operation is successful\n', '    function addVineyard(\n', '        string _trackIDs,\n', '        uint16 _variety,\n', '        uint24 _areaCode,\n', '        uint32 _usedSurface,\n', '        uint16 _plantingYear\n', '    )\n', '        external\n', '        producersOnly\n', '        returns (bool success)\n', '    {\n', '        addVineyard(\n', '            keccak256(_trackIDs, msg.sender),\n', '            _variety,\n', '            _areaCode,            \n', '            _usedSurface,\n', '            _plantingYear\n', '        );\n', '        emit LogAddVineyard(_trackIDs, msg.sender, msg.sender, _areaCode);\n', '        return true;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // External functions for regulators\n', '    // ============================================================================================\n', '\n', '    function storeHarvestOperationByRegulator(\n', '        string _trackIDs,\n', '        string _offChainIdentity,\n', '        string _operationID,\n', '        uint32 _quantity,\n', '        uint16 _areaCode,\n', '        uint16 _year,\n', '        string _attributes\n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {\n', '        address _producer = getAddress(_offChainIdentity);\n', '        storeHarvestOperation(\n', '            keccak256(_trackIDs,_producer),\n', '            msg.sender,\n', '            _offChainIdentity,\n', '            _operationID,\n', '            _quantity,\n', '            _areaCode,\n', '            _year,\n', '            _attributes\n', '        );\n', '        emit LogStoreHarvestOperation(\n', '            _trackIDs,\n', '            msg.sender,\n', '            _producer,\n', '            _operationID\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function addVineyardByRegulator(\n', '        string _trackIDs,\n', '        string _offChainIdentity,\n', '        uint16 _variety,\n', '        uint24 _areaCode,\n', '        uint32 _usedSurface,\n', '        uint16 _plantingYear\n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {\n', '        address _producer = getAddress(_offChainIdentity);\n', '        require(_producer != address(0));\n', '        addVineyard(\n', '            keccak256(_trackIDs,_producer),\n', '            _variety,\n', '            _areaCode,\n', '            _usedSurface,\n', '            _plantingYear\n', '        );\n', '        emit LogAddVineyard(_trackIDs, msg.sender, _producer, _areaCode);\n', '        return true;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // Helpers for ÐApps\n', '    // ============================================================================================\n', '\n', '    function getHarvestOperation(string _trackID, address _producer)\n', '        external view\n', '        returns (\n', '            address operationSender,\n', '            string offChainIdentity,\n', '            string operationID,\n', '            uint32 quantity,\n', '            uint24 areaCode,\n', '            uint16 year,\n', '            string attributes\n', '        )\n', '    {\n', '        bytes32 _mappingID32 = keccak256(_trackID, _producer);\n', '        operationSender = harvests[_mappingID32].operationSender;\n', '        offChainIdentity = harvests[_mappingID32].offChainIdentity;\n', '        operationID = harvests[_mappingID32].operationID;\n', '        quantity = harvests[_mappingID32].quantity;\n', '        areaCode = harvests[_mappingID32].areaCode;\n', '        year = harvests[_mappingID32].year;\n', '        attributes = harvests[_mappingID32].attributes;\n', '    }\n', '\n', '    function getVineyard(string _trackID, address _producer, uint _index)\n', '        external view\n', '        returns (\n', '            uint32 variety,\n', '            uint32 areaCode,\n', '            uint32 usedSurface,\n', '            uint16 plantingYear\n', '        )\n', '    {\n', '        bytes32 _mappingID32 = keccak256(_trackID, _producer);\n', '        variety = harvests[_mappingID32].vineyards[_index].variety;\n', '        areaCode = harvests[_mappingID32].vineyards[_index].areaCode;\n', '        usedSurface = harvests[_mappingID32].vineyards[_index].usedSurface;\n', '        plantingYear = harvests[_mappingID32].vineyards[_index].plantingYear;\n', '    }\n', '\n', '    function getVineyardCount(string _trackID, address _producer)\n', '        external view\n', '        returns (uint numberOfVineyards)\n', '    {\n', '        bytes32 _mappingID32 = keccak256(_trackID, _producer);\n', '        numberOfVineyards = harvests[_mappingID32].vineyards.length;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // Private functions\n', '    // ============================================================================================\n', '\n', '    function storeHarvestOperation(\n', '        bytes32 _mappingID,\n', '        address _operationSender,\n', '        string _offChainIdentity,\n', '        string _operationID,\n', '        uint32 _quantity,\n', '        uint24 _areaCode,        \n', '        uint16 _year,\n', '        string _attributes\n', '    )\n', '        private\n', '    {\n', '        harvests[_mappingID].operationSender = _operationSender;\n', '        harvests[_mappingID].offChainIdentity = _offChainIdentity;\n', '        harvests[_mappingID].operationID = _operationID;\n', '        harvests[_mappingID].quantity = _quantity;\n', '        harvests[_mappingID].areaCode = _areaCode;\n', '        harvests[_mappingID].year = _year;\n', '        harvests[_mappingID].attributes = _attributes;\n', '    }\n', '\n', '    function addVineyard(\n', '        bytes32 _mappingID,\n', '        uint16 _variety,\n', '        uint24 _areaCode,\n', '        uint32 _usedSurface,\n', '        uint16 _plantingYear        \n', '    )\n', '        private\n', '    {\n', '        harvests[_mappingID].vineyards.push(\n', '            Vineyard(_variety, _areaCode, _usedSurface, _plantingYear)\n', '        );\n', '    }\n', '    \n', '}\n', '\n', 'contract Upgradable is Ownable {\n', '\n', '    address public newAddress;\n', '    uint    public deprecatedSince;\n', '    string  public version;\n', '    string  public newVersion;\n', '    string  public reason;\n', '\n', '    event LogSetDeprecated(address newAddress, string newVersion, string reason);\n', '\n', '    /**\n', '     *\n', '     */\n', '    function Upgradable(string _version) internal\n', '    {\n', '        version = _version;\n', '    }\n', '\n', '    /**\n', '     *\n', '     */\n', '    function setDeprecated(address _newAddress, string _newVersion, string _reason) external\n', '        ownerOnly\n', '        returns (bool success)\n', '    {\n', '        require(!isDeprecated());\n', '        require(_newAddress != address(this));\n', '        require(!Upgradable(_newAddress).isDeprecated());\n', '        deprecatedSince = now;\n', '        newAddress = _newAddress;\n', '        newVersion = _newVersion;\n', '        reason = _reason;\n', '        emit LogSetDeprecated(_newAddress, _newVersion, _reason);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice check if the contract is deprecated\n', '     */\n', '    function isDeprecated() public view returns (bool deprecated)\n', '    {\n', '        return (deprecatedSince != 0);\n', '    }\n', '}\n', '\n', 'contract SmartBinding is Authorized {\n', '\n', '    mapping (bytes32 => bytes32) public bindingSmartIdentity;\n', ' \n', '    event LogBindSmartIdentity (\n', '        string _trackIDs,\n', '        address operationSender,\n', '        address onChainIdentity,\n', '        string smartIdentity\n', '    );\n', '\n', '    function SmartBinding() internal { }\n', '\n', '    // ============================================================================================\n', '    // External functions for wineries\n', '    // ============================================================================================\n', '\n', '    /// @notice ****\n', '    /// @dev ****\n', '    /// @param _trackIDs ****\n', '    /// @return true if operation is successful\n', '    function bindSmartIdentity(string _trackIDs, string _smartIdentity)\n', '        external\n', '        wineriesOnly\n', '    {\n', '        bindingSmartIdentity[keccak256(_smartIdentity, msg.sender)] = keccak256(_trackIDs, msg.sender);\n', '        emit LogBindSmartIdentity(_trackIDs, msg.sender, msg.sender, _smartIdentity);\n', '    }\n', '\n', '    // ============================================================================================\n', '    // External functions for regulators\n', '    // ============================================================================================\n', '    \n', '    /// @notice ****\n', '    /// @dev ****\n', '    /// @param _trackIDs ****\n', '    /// @return true if operation is successful\n', '    function bindSmartIdentityByRegulator(\n', '        string _trackIDs,\n', '        string _offChainIdentity,  \n', '        string _smartIdentity\n', '    )\n', '        external\n', '        regulatorsOnly\n', '    {\n', '        address winery = getAddress(_offChainIdentity);\n', '        bindingSmartIdentity[keccak256(_smartIdentity, winery)] = keccak256(_trackIDs, winery);\n', '        emit LogBindSmartIdentity(_trackIDs, msg.sender, winery, _smartIdentity);\n', '    }\n', '\n', '    // ======================================================================================\n', '    // ÐApps helpers\n', '    // ======================================================================================\n', '\n', '    function getWineryMappingID(string _smartIdentity, string _offChainIdentity)\n', '        external view\n', '        returns (bytes32 wineryMappingID)\n', '    {\n', '        bytes32 index = keccak256(_smartIdentity, getAddress(_offChainIdentity));\n', '        wineryMappingID = bindingSmartIdentity[index];\n', '    }\n', '\n', '}\n', '\n', 'contract WineSupplyChain is\n', '    Commons,\n', '    Authorized,\n', '    Upgradable,\n', '    ProducerOperations,\n', '    WineryOperations,\n', '    SmartBinding\n', '{\n', '\n', '    address public endorsements;\n', '\n', '    function WineSupplyChain(address _endorsements) Upgradable("1.0.0") public {\n', '        endorsements = _endorsements;\n', '    }\n', '\n', '    // ============================================================================================\n', '    // External functions for regulators\n', '    // ============================================================================================\n', '\n', '    /// @notice TODO Inserire commenti\n', '    function startWineryProductByRegulator(\n', '        string _harvestTrackID,\n', '        string _producerOffChainIdentity,\n', '        string _wineryOperationTrackIDs,\n', '        string _wineryOffChainIdentity,\n', '        int _productIndex\n', '    )\n', '        external\n', '        regulatorsOnly\n', '        returns (bool success)\n', '    {\n', '        require(_productIndex >= 0);\n', '        address producer = getAddress(_producerOffChainIdentity);\n', '        bytes32 harvestMappingID = keccak256(_harvestTrackID, producer);\n', '        address winery = getAddress(_wineryOffChainIdentity);\n', '        bytes32 wineryOperationMappingID = keccak256(_wineryOperationTrackIDs, winery);\n', '        harvests[harvestMappingID].child = IndexElem(wineryOperationMappingID, _productIndex);\n', '        wineries[wineryOperationMappingID][uint(_productIndex)].parentList.push(\n', '            IndexElem(harvestMappingID, -1));\n', '        return true;\n', '    }\n', '\n', '    /// @notice TODO Commenti\n', "    // TOCHECK AGGIUNGERE REQUIRE SU TIPO_OPERAZIONE = 'CASD' ???\n", '    function startWinery(\n', '        string _harvestTrackID,\n', '        string _offChainProducerIdentity,\n', '        string _wineryTrackID,\n', '        uint _productIndex\n', '    )\n', '        external\n', '        wineriesOnly\n', '    {\n', '        require(_productIndex >= 0);\n', '        address producer = getAddress(_offChainProducerIdentity);\n', '        bytes32 harvestMappingID = keccak256(_harvestTrackID, producer);\n', '        bytes32 wineryOperationMappingID = keccak256(_wineryTrackID, msg.sender);\n', '        wineries[wineryOperationMappingID][_productIndex].parentList.push(\n', '            IndexElem(harvestMappingID, -1));\n', '    }\n', '\n', '    /// @notice TODO Commenti\n', "    // TOCHECK AGGIUNGERE REQUIRE SU TIPO_OPERAZIONE = 'CASD' ???\n", '    function startProduct(\n', '        string _harvestTrackID,\n', '        string _wineryTrackID,\n', '        string _offChainWineryIdentity,\n', '        int _productIndex\n', '    )\n', '        external\n', '        producersOnly\n', '    {\n', '        require(_productIndex > 0);\n', '        bytes32 harvestMappingID = keccak256(_harvestTrackID, msg.sender);\n', '        address winery = getAddress(_offChainWineryIdentity);\n', '        bytes32 wineryOperationMappingID = keccak256(_wineryTrackID, winery);\n', '        harvests[harvestMappingID].child = IndexElem(wineryOperationMappingID, _productIndex);\n', '    }\n', '\n', '    /// @notice ***\n', '    /// @dev ****\n', '    /// @param _trackIDs **\n', '    /// @param _address **\n', '    /// @return mappingID if ***\n', '    function getMappingID(string _trackIDs, address _address)\n', '        external pure\n', '        returns (bytes32 mappingID)\n', '    {\n', '        mappingID = keccak256(_trackIDs, _address);\n', '    }\n', '\n', '}']
