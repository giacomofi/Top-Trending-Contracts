['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/WeAreDevelopersRanklist.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to relinquish control of the contract.\n', '    * @notice Renouncing to ownership will leave the contract without an owner.\n', '    * It will not be possible to call the functions with the `onlyOwner`\n', '    * modifier anymore.\n', '    */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        _transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract WeAreDevelopersRanklist is Ownable {\n', '\n', '    struct Winner {\n', '        string fullName;\n', '        uint8 rank;\n', '    }\n', '    \n', '    Winner[] winners;\n', '    mapping (uint8 => Winner) winnerByRank;\n', '\n', '    constructor() public {\n', '        setWinner("no permission to publish", 1);\n', '        setWinner("Emanuel Schmoczer", 2);\n', '        setWinner("no permission to publish", 3);\n', '        setWinner("Thomas Boigner", 4);\n', '        setWinner("no permission to publish", 5);\n', '        setWinner("no permission to publish", 6);\n', '        setWinner("Magomed Arsaev", 7);\n', '        setWinner("Elsa Heer", 8);\n', '        setWinner("no permission to publish", 9);\n', '        setWinner("no permission to publish", 10);\n', '    }\n', '\n', '    function getDescription() public pure returns(string) {\n', '        return "This is the wall of fame of developers participating in the CONDA developer challange at WeAreDevelopers 2018";\n', '    }\n', '    \n', '    function setWinner(string _fullName, uint8 _rank) public onlyOwner {\n', '        Winner storage winner = winners[winners.length++];\n', '        winner.fullName = _fullName;\n', '        winner.rank = _rank;\n', '\n', '        winnerByRank[_rank] = winner;\n', '    }\n', '    \n', '    function getWinnerWithRank(uint8 _rank) public view returns(string) {\n', '        Winner storage winner = winnerByRank[_rank];\n', '        \n', '        return winner.fullName;\n', '    }\n', '\n', '    function getRank01() public view returns(string) {\n', '        return getWinnerWithRank(1);\n', '    }\n', '\n', '    function getRank02() public view returns(string) {\n', '        return getWinnerWithRank(2);\n', '    }\n', '\n', '    function getRank03() public view returns(string) {\n', '        return getWinnerWithRank(3);\n', '    }\n', '\n', '    function getRank04() public view returns(string) {\n', '        return getWinnerWithRank(4);\n', '    }\n', '\n', '    function getRank05() public view returns(string) {\n', '        return getWinnerWithRank(5);\n', '    }\n', '\n', '    function getRank06() public view returns(string) {\n', '        return getWinnerWithRank(6);\n', '    }\n', '\n', '    function getRank07() public view returns(string) {\n', '        return getWinnerWithRank(7);\n', '    }\n', '\n', '    function getRank08() public view returns(string) {\n', '        return getWinnerWithRank(8);\n', '    }\n', '\n', '    function getRank09() public view returns(string) {\n', '        return getWinnerWithRank(9);\n', '    }\n', '\n', '    function getRank10() public view returns(string) {\n', '        return getWinnerWithRank(10);\n', '    }\n', '}']