['pragma solidity ^0.4.24;\n', '\n', 'contract DiscountToken { mapping (address => uint256) public balanceOf; }\n', '\n', 'contract TwoCoinsOneMoonGame {\n', '    struct Bettor {\n', '        address account;\n', '        uint256 amount;\n', '    }\n', '\n', '    struct Event {\n', '        uint256 winner; //0 - blue; 1 - red\n', '        uint256 newMoonLevel;\n', '        uint256 block;\n', '        uint256 blueCap;\n', '        uint256 redCap;\n', '    }\n', '\n', '    uint256 public lastLevelChangeBlock;\n', '    uint256 public lastEventId;\n', '    uint256 public moonLevel;\n', '\n', '    uint256 public marketCapBlue;\n', '    uint256 public marketCapRed;\n', '    \n', '    uint256 public startBetBlue;\n', '    uint256 public endBetBlue;\n', '    uint256 public startBetRed;\n', '    uint256 public endBetRed;\n', '\n', '    Bettor[] public bettorsBlue;\n', '    Bettor[] public bettorsRed;\n', '\n', '    Event[] public history;\n', '\n', '    mapping (address => uint) public balance;\n', '\n', '    address private feeCollector;\n', '\n', '    DiscountToken discountToken;\n', '\n', '    string public publisherMessage;\n', '    address publisher;\n', '\n', '    constructor() public {\n', '        marketCapBlue = 0;\n', '        marketCapRed = 0;\n', '        \n', '        startBetBlue = 0;\n', '        startBetRed = 0;\n', '        endBetBlue = 0;\n', '        endBetRed = 0;\n', '\n', '        publisher = msg.sender;\n', '        feeCollector = 0xfD4e7B9F4F97330356F7d1b5DDB9843F2C3e9d87;\n', '        discountToken = DiscountToken(0x25a803EC5d9a14D41F1Af5274d3f2C77eec80CE9);\n', '        lastLevelChangeBlock = block.number;\n', '        moonLevel = 500 finney;\n', '    }\n', '\n', '    function getBetAmount() private returns (uint256) {\n', '        require (msg.value >= 100 finney);\n', '\n', '        uint256 betAmount = msg.value;\n', '        if (discountToken.balanceOf(msg.sender) == 0) {\n', '            uint256 comission = betAmount * 48 / 1000;\n', '            betAmount -= comission;\n', '            balance[feeCollector] += comission;\n', '        }\n', '\n', '        return betAmount;\n', '    }\n', '\n', '    function putMessage(string message) public {\n', '        if (msg.sender == publisher) {\n', '            publisherMessage = message;\n', '        }\n', '    }\n', '\n', '    function betBlueCoin() public payable {\n', '        uint256 betAmount = getBetAmount();\n', '\n', '        marketCapBlue += betAmount;\n', '        bettorsBlue.push(Bettor({account:msg.sender, amount:betAmount}));\n', '        endBetBlue = bettorsBlue.length;\n', '\n', '        checkMoon();\n', '    }\n', '\n', '    function betRedCoin() public payable {\n', '        uint256 betAmount = getBetAmount();\n', '\n', '        marketCapRed += betAmount;\n', '        bettorsRed.push(Bettor({account:msg.sender, amount:betAmount}));\n', '        endBetRed = bettorsRed.length;\n', '\n', '        checkMoon();\n', '    }\n', '\n', '    function withdraw() public {\n', '        if (balance[feeCollector] != 0) {\n', '            uint256 fee = balance[feeCollector];\n', '            balance[feeCollector] = 0;\n', '            feeCollector.call.value(fee)();\n', '        }\n', '\n', '        uint256 amount = balance[msg.sender];\n', '        balance[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    function depositBalance(uint256 winner) private {\n', '        uint256 i;\n', '        if (winner == 0) {\n', '            for (i = startBetBlue; i < bettorsBlue.length; i++) {\n', '                balance[bettorsBlue[i].account] += bettorsBlue[i].amount;\n', '                balance[bettorsBlue[i].account] += 10**18 * bettorsBlue[i].amount / marketCapBlue * marketCapRed / 10**18;\n', '            }\n', '        }\n', '        else {\n', '            for (i = startBetRed; i < bettorsRed.length; i++) {\n', '                balance[bettorsRed[i].account] += bettorsRed[i].amount;\n', '                balance[bettorsRed[i].account] += 10**18 * bettorsRed[i].amount / marketCapRed * marketCapBlue / 10**18;\n', '            }\n', '        }\n', '    }\n', '\n', '    function addEvent(uint256 winner) private {\n', '        history.push(Event({winner: winner, newMoonLevel: moonLevel, block: block.number, blueCap: marketCapBlue, redCap: marketCapRed}));\n', '        lastEventId = history.length - 1;\n', '        lastLevelChangeBlock = block.number;\n', '    }\n', '\n', '    function burstBubble() private {\n', '        uint256 winner;\n', '        if (marketCapBlue == marketCapRed) {\n', '            winner = block.number % 2;\n', '        }\n', '        else if (marketCapBlue > marketCapRed) {\n', '            winner = 0;\n', '        }\n', '        else {\n', '            winner = 1;\n', '        }\n', '        depositBalance(winner);\n', '        moonLevel = moonLevel * 2;\n', '        addEvent(winner);\n', '\n', '        marketCapBlue = 0;\n', '        marketCapRed = 0;\n', '        \n', '        startBetBlue = bettorsBlue.length;\n', '        startBetRed = bettorsRed.length;\n', '    }\n', '\n', '    function checkMoon() private {\n', '        if (block.number - lastLevelChangeBlock > 42000) {\n', '           moonLevel = moonLevel / 2;\n', '           addEvent(2);\n', '        }\n', '        if (marketCapBlue >= moonLevel || marketCapRed >= moonLevel) {\n', '            burstBubble();\n', '        }\n', '    }\n', '}']