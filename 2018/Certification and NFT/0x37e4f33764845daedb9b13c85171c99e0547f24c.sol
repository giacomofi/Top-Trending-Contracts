['// solhint-disable max-line-length\n', '// @title A contract to store a list of messages. Obtainable as events.\n', '\n', '/* Deployment:\n', 'Owner: 0x33a7ae7536d39032e16b0475aef6692a09727fe2\n', 'Owner Ropsten testnet: 0x4460f4c8edbca96f9db17ef95aaf329eddaeac29\n', 'Owner private testnet: 0x4460f4c8edbca96f9db17ef95aaf329eddaeac29\n', 'Address: 0x37e4f33764845daedb9b13c85171c99e0547f24c\n', 'Address Ropsten testnet: 0x93f28d717011771aaa0e462bd7ee5c43c98819f2\n', 'Address private testnet: 0x3fb4de9f7a4fe40f10f04bc347c11c5ad9094029\n', 'ABI: [{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"flush","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_version","type":"uint256"},{"name":"_eventType","type":"uint16"},{"name":"_timeSpan","type":"uint256"},{"name":"_dataInfo","type":"string"}],"name":"add","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_tokenAddress","type":"address"}],"name":"flushToken","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contentCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"version","type":"uint256"},{"indexed":true,"name":"sender","type":"address"},{"indexed":true,"name":"timePage","type":"uint256"},{"indexed":false,"name":"eventType","type":"uint16"},{"indexed":false,"name":"timeSpan","type":"uint256"},{"indexed":false,"name":"dataInfo","type":"string"}],"name":"LogStore","type":"event"}]\n', 'Optimized: yes\n', 'Solidity version: v0.4.24\n', '*/\n', '\n', '// solhint-enable max-line-length\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', 'contract MiniMeToken {\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success);\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\n', '\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success);\n', '}\n', '\n', '\n', 'contract Store {\n', '\n', '    //enum EventTypes\n', '    uint16 constant internal NONE = 0;\n', '    uint16 constant internal ADD = 1;\n', '    uint16 constant internal CANCEL = 2;\n', '\n', '    address public owner;\n', '    uint public contentCount = 0;\n', '    \n', '    event LogStore(uint indexed version, address indexed sender, uint indexed timePage,\n', '        uint16 eventType, uint timeSpan, string dataInfo);\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', "    // @notice fallback function, don't allow call to it\n", '    function () public {\n', '        revert();\n', '    }\n', '\n', '    function kill() public onlyOwner {\n', '\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function flush() public onlyOwner {\n', '\n', '        if (!owner.send(address(this).balance))\n', '            revert();\n', '    }\n', '\n', '    function flushToken(address _tokenAddress) public onlyOwner {\n', '\n', '        MiniMeToken token = MiniMeToken(_tokenAddress);\n', '        uint balance = token.balanceOf(this);\n', '\n', '        if (!token.transfer(owner, balance))\n', '            revert();\n', '    }\n', '\n', '    function add(uint _version, uint16 _eventType, uint _timeSpan, string _dataInfo) public {\n', '        contentCount++;\n', '        emit LogStore(_version, msg.sender, block.timestamp / (1 days), _eventType, _timeSpan, _dataInfo);\n', '    }\n', '}']