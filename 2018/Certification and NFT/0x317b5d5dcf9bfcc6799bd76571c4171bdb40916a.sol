['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '  * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    require(msg.data.length >= size + 4) ;\n', '    _;\n', '  }\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  /**\n', '  * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    require(msg.data.length >= size + 4) ;\n', '    _;\n', '  }\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title DML Token Contract\n', ' * @dev DML Token Contract\n', ' * @dev inherite from StandardToken, Pasuable and Ownable by Zeppelin\n', ' * @author DML team\n', ' */\n', '\n', 'contract DmlToken is StandardToken, Pausable{\n', '\tusing SafeMath for uint;\n', '\n', ' \tstring public constant name = "DML Token";\n', '\tuint8 public constant decimals = 18;\n', '\tstring public constant symbol = &#39;DML&#39;;\n', '\n', '\tuint public constant MAX_TOTAL_TOKEN_AMOUNT = 330000000 ether;\n', '\taddress public minter;\n', '\tuint public endTime;\n', '\n', '\tmapping (address => uint) public lockedBalances;\n', '\n', '\tmodifier onlyMinter {\n', '    \t  assert(msg.sender == minter);\n', '    \t  _;\n', '    }\n', '\n', '    modifier maxDmlTokenAmountNotReached (uint amount){\n', '    \t  assert(totalSupply.add(amount) <= MAX_TOTAL_TOKEN_AMOUNT);\n', '    \t  _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param _minter Contribution Smart Contract\n', '     * @return _endTime End of the contribution period\n', '     */\n', '\tfunction DmlToken(address _minter, uint _endTime){\n', '    \t  minter = _minter;\n', '    \t  endTime = _endTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint Token\n', '     * @param receipent address owning mint tokens    \n', '     * @param amount amount of token\n', '     */\n', '    function mintToken(address receipent, uint amount)\n', '        external\n', '        onlyMinter\n', '        maxDmlTokenAmountNotReached(amount)\n', '        returns (bool)\n', '    {\n', '        require(now <= endTime);\n', '      \tlockedBalances[receipent] = lockedBalances[receipent].add(amount);\n', '      \ttotalSupply = totalSupply.add(amount);\n', '      \treturn true;\n', '    }\n', '\n', '    /**\n', '     * @dev Unlock token for trade\n', '     */\n', '    function claimTokens(address receipent)\n', '        public\n', '        onlyMinter\n', '    {\n', '      \tbalances[receipent] = balances[receipent].add(lockedBalances[receipent]);\n', '      \tlockedBalances[receipent] = 0;\n', '    }\n', '\n', '    function lockedBalanceOf(address _owner) constant returns (uint balance) {\n', '        return lockedBalances[_owner];\n', '    }\n', '\n', '\t/**\n', '\t* @dev override to add validRecipient\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint _value)\n', '\t\tpublic\n', '\t\tvalidRecipient(_to)\n', '\t\treturns (bool success)\n', '\t{\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev override to add validRecipient\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _value The amount of tokens to be spent.\n', '\t*/\n', '\tfunction approve(address _spender, uint256 _value)\n', '\t\tpublic\n', '\t\tvalidRecipient(_spender)\n', '\t\treturns (bool)\n', '\t{\n', '\t\treturn super.approve(_spender,  _value);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev override to add validRecipient\n', '\t* @param _from address The address which you want to send tokens from\n', '\t* @param _to address The address which you want to transfer to\n', '\t* @param _value uint256 the amount of tokens to be transferred\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)\n', '\t\tpublic\n', '\t\tvalidRecipient(_to)\n', '\t\treturns (bool)\n', '\t{\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\t// MODIFIERS\n', '\n', ' \tmodifier validRecipient(address _recipient) {\n', '    \trequire(_recipient != address(this));\n', '    \t_;\n', '  \t}\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title DML Contribution Contract\n', ' * @dev DML Contribution Contract\n', ' * @dev inherite from StandardToken, Ownable by Zeppelin\n', ' * @author DML team\n', ' */\n', 'contract DmlContribution is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    /// Constant fields\n', '    /// total tokens supply\n', '    uint public constant DML_TOTAL_SUPPLY = 330000000 ether;\n', '    uint public constant EARLY_CONTRIBUTION_DURATION = 24 hours;\n', '    uint public constant MAX_CONTRIBUTION_DURATION = 5 days;\n', '\n', '    /// Exchange rates\n', '    uint public constant PRICE_RATE_FIRST = 3780;\n', '    uint public constant PRICE_RATE_SECOND = 4158;\n', '\n', '    /// ----------------------------------------------------------------------------------------------------\n', '    /// |                                   |              |                    |             |            |\n', '    /// |    SALE (PRESALE + PUBLIC SALE)   |  ECO SYSTEM  |  COMMUNITY BOUNTY  |  OPERATION  |  RESERVES  |\n', '    /// |            36%                    |     9.9%     |         8.3%       |     30.8%   |     15%    |\n', '    /// ----------------------------------------------------------------------------------------------------\n', '    uint public constant SALE_STAKE = 360;  // 36% for open sale\n', '\n', '    // Reserved stakes\n', '    uint public constant ECO_SYSTEM_STAKE = 99;   // 9.9%\n', '    uint public constant COMMUNITY_BOUNTY_STAKE = 83; // 8.3%\n', '    uint public constant OPERATION_STAKE = 308;     // 30.8%\n', '    uint public constant RESERVES_STAKE = 150;     // 15.0%\n', '\n', '    uint public constant DIVISOR_STAKE = 1000;\n', '\n', '    uint public constant PRESALE_RESERVERED_AMOUNT = 56899342578812412860512236;\n', '    \n', '    /// Holder address\n', '    address public constant ECO_SYSTEM_HOLDER = 0x2D8C705a66b2E87A9249380d4Cdfe9D80BBF826B;\n', '    address public constant COMMUNITY_BOUNTY_HOLDER = 0x68500ffEfb57D88A600E2f1c63Bb5866e7107b6B;\n', '    address public constant OPERATION_HOLDER = 0xC7b6DFf52014E59Cb88fAc3b371FA955D0A9249F;\n', '    address public constant RESERVES_HOLDER = 0xab376b3eC2ed446444911E549c7C953fB086070f;\n', '    address public constant PRESALE_HOLDER = 0xcB52583D19fd42c0f85a0c83A45DEa6C73B9EBfb;\n', '    \n', '    uint public MAX_PUBLIC_SOLD = DML_TOTAL_SUPPLY * SALE_STAKE / DIVISOR_STAKE - PRESALE_RESERVERED_AMOUNT;\n', '\n', '    /// Fields that are only changed in constructor    \n', '    /// Address that storing all ETH\n', '    address public dmlwallet;\n', '    uint public earlyWhitelistBeginTime;\n', '    uint public startTime;\n', '    uint public endTime;\n', '\n', '    /// Fields that can be changed by functions\n', '    /// Accumulator for open sold tokens\n', '    uint public openSoldTokens;\n', '    /// Due to an emergency, set this to true to halt the contribution\n', '    bool public halted; \n', '    /// ERC20 compilant DML token contact instance\n', '    DmlToken public dmlToken; \n', '\n', '    mapping (address => WhitelistUser) private whitelisted;\n', '    address[] private whitelistedIndex;\n', '\n', '    struct WhitelistUser {\n', '      uint256 quota;\n', '      uint index;\n', '      uint level;\n', '    }\n', '    /// level 1 Main Whitelist\n', '    /// level 2 Early Whitelist\n', '    /// level 3 Early Super Whitelist\n', '\n', '    uint256 public maxBuyLimit = 68 ether;\n', '\n', '    /*\n', '     * EVENTS\n', '     */\n', '\n', '    event NewSale(address indexed destAddress, uint ethCost, uint gotTokens);\n', '    event ToFundAmount(uint ethCost);\n', '    event ValidFundAmount(uint ethCost);\n', '    event Debug(uint number);\n', '    event UserCallBuy();\n', '    event ShowTokenAvailable(uint);\n', '    event NowTime(uint, uint, uint, uint);\n', '\n', '    /*\n', '     * MODIFIERS\n', '     */\n', '\n', '    modifier notHalted() {\n', '        require(!halted);\n', '        _;\n', '    }\n', '\n', '    modifier initialized() {\n', '        require(address(dmlwallet) != 0x0);\n', '        _;\n', '    }    \n', '\n', '    modifier notEarlierThan(uint x) {\n', '        require(now >= x);\n', '        _;\n', '    }\n', '\n', '    modifier earlierThan(uint x) {\n', '        require(now < x);\n', '        _;\n', '    }\n', '\n', '    modifier ceilingNotReached() {\n', '        require(openSoldTokens < MAX_PUBLIC_SOLD);\n', '        _;\n', '    }  \n', '\n', '    modifier isSaleEnded() {\n', '        require(now > endTime || openSoldTokens >= MAX_PUBLIC_SOLD);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * CONSTRUCTOR \n', '     * \n', '     * @dev Initialize the DML contribution contract\n', '     * @param _dmlwallet The escrow account address, all ethers will be sent to this address.\n', '     * @param _bootTime ICO boot time\n', '     */\n', '    function DmlContribution(address _dmlwallet, uint _bootTime){\n', '        require(_dmlwallet != 0x0);\n', '\n', '        halted = false;\n', '        dmlwallet = _dmlwallet;\n', '        earlyWhitelistBeginTime = _bootTime;\n', '        startTime = earlyWhitelistBeginTime + EARLY_CONTRIBUTION_DURATION;\n', '        endTime = startTime + MAX_CONTRIBUTION_DURATION;\n', '        openSoldTokens = 0;\n', '        dmlToken = new DmlToken(this, endTime);\n', '\n', '        uint stakeMultiplier = DML_TOTAL_SUPPLY / DIVISOR_STAKE;\n', '        \n', '        dmlToken.mintToken(ECO_SYSTEM_HOLDER, ECO_SYSTEM_STAKE * stakeMultiplier);\n', '        dmlToken.mintToken(COMMUNITY_BOUNTY_HOLDER, COMMUNITY_BOUNTY_STAKE * stakeMultiplier);\n', '        dmlToken.mintToken(OPERATION_HOLDER, OPERATION_STAKE * stakeMultiplier);\n', '        dmlToken.mintToken(RESERVES_HOLDER, RESERVES_STAKE * stakeMultiplier);\n', '\n', '        dmlToken.mintToken(PRESALE_HOLDER, PRESALE_RESERVERED_AMOUNT);      \n', '        \n', '    }\n', '\n', '    /**\n', '     * Fallback function \n', '     * \n', '     * @dev Set it to buy Token if anyone send ETH\n', '     */\n', '    function () public payable {\n', '        buyDmlCoin(msg.sender);\n', '        //NowTime(now, earlyWhitelistBeginTime, startTime, endTime);\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// @dev Exchange msg.value ether to DML for account recepient\n', '    /// @param receipient DML tokens receiver\n', '    function buyDmlCoin(address receipient) \n', '        public \n', '        payable \n', '        notHalted \n', '        initialized \n', '        ceilingNotReached \n', '        notEarlierThan(earlyWhitelistBeginTime)\n', '        earlierThan(endTime)\n', '        returns (bool) \n', '    {\n', '        require(receipient != 0x0);\n', '        require(isWhitelisted(receipient));\n', '\n', '        // Do not allow contracts to game the system\n', '        require(!isContract(msg.sender));        \n', '        require( tx.gasprice <= 99000000000 wei );\n', '\n', '        if( now < startTime && now >= earlyWhitelistBeginTime)\n', '        {\n', '            if (whitelisted[receipient].level >= 2)\n', '            {\n', '                require(msg.value >= 1 ether);\n', '            }\n', '            else\n', '            {\n', '                require(msg.value >= 0.5 ether);\n', '            }\n', '            buyEarlyWhitelist(receipient);\n', '        }\n', '        else\n', '        {\n', '            require(msg.value >= 0.1 ether);\n', '            require(msg.value <= maxBuyLimit);\n', '            buyRemaining(receipient);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function setMaxBuyLimit(uint256 limit)\n', '        public\n', '        initialized\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        maxBuyLimit = limit;\n', '    }\n', '\n', '\n', '    /// @dev batch set quota for early user quota\n', '    function addWhiteListUsers(address[] userAddresses, uint256[] quota, uint[] level)\n', '        public\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        for( uint i = 0; i < userAddresses.length; i++) {\n', '            addWhiteListUser(userAddresses[i], quota[i], level[i]);\n', '        }\n', '    }\n', '\n', '    function addWhiteListUser(address userAddress, uint256 quota, uint level)\n', '        public\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        if (!isWhitelisted(userAddress)) {\n', '            whitelisted[userAddress].quota = quota;\n', '            whitelisted[userAddress].level = level;\n', '            whitelisted[userAddress].index = whitelistedIndex.push(userAddress) - 1;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Get a user&#39;s whitelisted state\n', '    * @param userAddress      address       the wallet address of the user\n', '    * @return bool  true if the user is in the whitelist\n', '    */\n', '    function isWhitelisted (address userAddress) public constant returns (bool isIndeed) {\n', '        if (whitelistedIndex.length == 0) return false;\n', '        return (whitelistedIndex[whitelisted[userAddress].index] == userAddress);\n', '    }\n', '\n', '    /*****\n', '    * @dev Get a whitelisted user\n', '    * @param userAddress      address       the wallet address of the user\n', '    * @return uint256  the amount pledged by the user\n', '    * @return uint     the index of the user\n', '    */\n', '    function getWhitelistUser (address userAddress) public constant returns (uint256 quota, uint index, uint level) {\n', '        require(isWhitelisted(userAddress));\n', '        return(whitelisted[userAddress].quota, whitelisted[userAddress].index, whitelisted[userAddress].level);\n', '    }\n', '\n', '\n', '    /// @dev Emergency situation that requires contribution period to stop.\n', '    /// Contributing not possible anymore.\n', '    function halt() public onlyOwner{\n', '        halted = true;\n', '    }\n', '\n', '    /// @dev Emergency situation resolved.\n', '    /// Contributing becomes possible again withing the outlined restrictions.\n', '    function unHalt() public onlyOwner{\n', '        halted = false;\n', '    }\n', '\n', '    /// @dev Emergency situation\n', '    function changeWalletAddress(address newAddress) onlyOwner{ \n', '        dmlwallet = newAddress; \n', '    }\n', '\n', '    /// @return true if sale not ended, false otherwise.\n', '    function saleNotEnd() constant returns (bool) {\n', '        return now < endTime && openSoldTokens < MAX_PUBLIC_SOLD;\n', '    }\n', '\n', '    /// CONSTANT METHODS\n', '    /// @dev Get current exchange rate\n', '    function priceRate() public constant returns (uint) {\n', '        // Two price tiers\n', '        if (earlyWhitelistBeginTime <= now && now < startTime)\n', '        {\n', '            if (whitelisted[msg.sender].level >= 2)\n', '            {\n', '                return PRICE_RATE_SECOND;\n', '            }\n', '            else\n', '            {\n', '                return PRICE_RATE_FIRST;\n', '            }\n', '        }\n', '        if (startTime <= now && now < endTime)\n', '        {\n', '            return PRICE_RATE_FIRST;\n', '        }\n', '        // Should not be called before or after contribution period\n', '        assert(false);\n', '    }\n', '    function claimTokens(address receipent)\n', '        public\n', '        isSaleEnded\n', '    {\n', '        dmlToken.claimTokens(receipent);\n', '    }\n', '\n', '    /*\n', '     * INTERNAL FUNCTIONS\n', '     */\n', '\n', '    /// @dev early_whitelist to buy token with quota\n', '    function buyEarlyWhitelist(address receipient) internal {\n', '        uint quotaAvailable = whitelisted[receipient].quota;\n', '        require(quotaAvailable > 0);\n', '\n', '        uint tokenAvailable = MAX_PUBLIC_SOLD.sub(openSoldTokens);\n', '        ShowTokenAvailable(tokenAvailable);\n', '        require(tokenAvailable > 0);\n', '\n', '        uint validFund = quotaAvailable.min256(msg.value);\n', '        ValidFundAmount(validFund);\n', '\n', '        uint toFund;\n', '        uint toCollect;\n', '        (toFund, toCollect) = costAndBuyTokens(tokenAvailable, validFund);\n', '\n', '        whitelisted[receipient].quota = whitelisted[receipient].quota.sub(toFund);\n', '        buyCommon(receipient, toFund, toCollect);\n', '    }\n', '\n', '    /// @dev early_whitelist and main whitelist to buy token with their quota + extra quota\n', '    function buyRemaining(address receipient) internal {\n', '        uint tokenAvailable = MAX_PUBLIC_SOLD.sub(openSoldTokens);\n', '        ShowTokenAvailable(tokenAvailable);\n', '        require(tokenAvailable > 0);\n', '\n', '        uint toFund;\n', '        uint toCollect;\n', '        (toFund, toCollect) = costAndBuyTokens(tokenAvailable, msg.value);\n', '        \n', '        buyCommon(receipient, toFund, toCollect);\n', '    }\n', '\n', '    /// @dev Utility function for buy token\n', '    function buyCommon(address receipient, uint toFund, uint dmlTokenCollect) internal {\n', '        require(msg.value >= toFund); // double check\n', '\n', '        if(toFund > 0) {\n', '            require(dmlToken.mintToken(receipient, dmlTokenCollect));\n', '            ToFundAmount(toFund);\n', '            dmlwallet.transfer(toFund);\n', '            openSoldTokens = openSoldTokens.add(dmlTokenCollect);\n', '            NewSale(receipient, toFund, dmlTokenCollect);            \n', '        }\n', '\n', '        uint toReturn = msg.value.sub(toFund);\n', '        if(toReturn > 0) {\n', '            msg.sender.transfer(toReturn);\n', '        }\n', '    }\n', '\n', '    /// @dev Utility function for calculate available tokens and cost ethers\n', '    function costAndBuyTokens(uint availableToken, uint validFund) constant internal returns (uint costValue, uint getTokens){\n', '        // all conditions has checked in the caller functions\n', '        uint exchangeRate = priceRate();\n', '        getTokens = exchangeRate * validFund;\n', '\n', '        if(availableToken >= getTokens){\n', '            costValue = validFund;\n', '        } else {\n', '            costValue = availableToken / exchangeRate;\n', '            getTokens = availableToken;\n', '        }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    assert(b > 0);\n', '    uint c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  /**\n', '  * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    require(msg.data.length >= size + 4) ;\n', '    _;\n', '  }\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  /**\n', '  * @dev Fix for the ERC20 short address attack.\n', '   */\n', '  modifier onlyPayloadSize(uint size) {\n', '    require(msg.data.length >= size + 4) ;\n', '    _;\n', '  }\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title DML Token Contract\n', ' * @dev DML Token Contract\n', ' * @dev inherite from StandardToken, Pasuable and Ownable by Zeppelin\n', ' * @author DML team\n', ' */\n', '\n', 'contract DmlToken is StandardToken, Pausable{\n', '\tusing SafeMath for uint;\n', '\n', ' \tstring public constant name = "DML Token";\n', '\tuint8 public constant decimals = 18;\n', "\tstring public constant symbol = 'DML';\n", '\n', '\tuint public constant MAX_TOTAL_TOKEN_AMOUNT = 330000000 ether;\n', '\taddress public minter;\n', '\tuint public endTime;\n', '\n', '\tmapping (address => uint) public lockedBalances;\n', '\n', '\tmodifier onlyMinter {\n', '    \t  assert(msg.sender == minter);\n', '    \t  _;\n', '    }\n', '\n', '    modifier maxDmlTokenAmountNotReached (uint amount){\n', '    \t  assert(totalSupply.add(amount) <= MAX_TOTAL_TOKEN_AMOUNT);\n', '    \t  _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param _minter Contribution Smart Contract\n', '     * @return _endTime End of the contribution period\n', '     */\n', '\tfunction DmlToken(address _minter, uint _endTime){\n', '    \t  minter = _minter;\n', '    \t  endTime = _endTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint Token\n', '     * @param receipent address owning mint tokens    \n', '     * @param amount amount of token\n', '     */\n', '    function mintToken(address receipent, uint amount)\n', '        external\n', '        onlyMinter\n', '        maxDmlTokenAmountNotReached(amount)\n', '        returns (bool)\n', '    {\n', '        require(now <= endTime);\n', '      \tlockedBalances[receipent] = lockedBalances[receipent].add(amount);\n', '      \ttotalSupply = totalSupply.add(amount);\n', '      \treturn true;\n', '    }\n', '\n', '    /**\n', '     * @dev Unlock token for trade\n', '     */\n', '    function claimTokens(address receipent)\n', '        public\n', '        onlyMinter\n', '    {\n', '      \tbalances[receipent] = balances[receipent].add(lockedBalances[receipent]);\n', '      \tlockedBalances[receipent] = 0;\n', '    }\n', '\n', '    function lockedBalanceOf(address _owner) constant returns (uint balance) {\n', '        return lockedBalances[_owner];\n', '    }\n', '\n', '\t/**\n', '\t* @dev override to add validRecipient\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint _value)\n', '\t\tpublic\n', '\t\tvalidRecipient(_to)\n', '\t\treturns (bool success)\n', '\t{\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev override to add validRecipient\n', '\t* @param _spender The address which will spend the funds.\n', '\t* @param _value The amount of tokens to be spent.\n', '\t*/\n', '\tfunction approve(address _spender, uint256 _value)\n', '\t\tpublic\n', '\t\tvalidRecipient(_spender)\n', '\t\treturns (bool)\n', '\t{\n', '\t\treturn super.approve(_spender,  _value);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev override to add validRecipient\n', '\t* @param _from address The address which you want to send tokens from\n', '\t* @param _to address The address which you want to transfer to\n', '\t* @param _value uint256 the amount of tokens to be transferred\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)\n', '\t\tpublic\n', '\t\tvalidRecipient(_to)\n', '\t\treturns (bool)\n', '\t{\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\t// MODIFIERS\n', '\n', ' \tmodifier validRecipient(address _recipient) {\n', '    \trequire(_recipient != address(this));\n', '    \t_;\n', '  \t}\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title DML Contribution Contract\n', ' * @dev DML Contribution Contract\n', ' * @dev inherite from StandardToken, Ownable by Zeppelin\n', ' * @author DML team\n', ' */\n', 'contract DmlContribution is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    /// Constant fields\n', '    /// total tokens supply\n', '    uint public constant DML_TOTAL_SUPPLY = 330000000 ether;\n', '    uint public constant EARLY_CONTRIBUTION_DURATION = 24 hours;\n', '    uint public constant MAX_CONTRIBUTION_DURATION = 5 days;\n', '\n', '    /// Exchange rates\n', '    uint public constant PRICE_RATE_FIRST = 3780;\n', '    uint public constant PRICE_RATE_SECOND = 4158;\n', '\n', '    /// ----------------------------------------------------------------------------------------------------\n', '    /// |                                   |              |                    |             |            |\n', '    /// |    SALE (PRESALE + PUBLIC SALE)   |  ECO SYSTEM  |  COMMUNITY BOUNTY  |  OPERATION  |  RESERVES  |\n', '    /// |            36%                    |     9.9%     |         8.3%       |     30.8%   |     15%    |\n', '    /// ----------------------------------------------------------------------------------------------------\n', '    uint public constant SALE_STAKE = 360;  // 36% for open sale\n', '\n', '    // Reserved stakes\n', '    uint public constant ECO_SYSTEM_STAKE = 99;   // 9.9%\n', '    uint public constant COMMUNITY_BOUNTY_STAKE = 83; // 8.3%\n', '    uint public constant OPERATION_STAKE = 308;     // 30.8%\n', '    uint public constant RESERVES_STAKE = 150;     // 15.0%\n', '\n', '    uint public constant DIVISOR_STAKE = 1000;\n', '\n', '    uint public constant PRESALE_RESERVERED_AMOUNT = 56899342578812412860512236;\n', '    \n', '    /// Holder address\n', '    address public constant ECO_SYSTEM_HOLDER = 0x2D8C705a66b2E87A9249380d4Cdfe9D80BBF826B;\n', '    address public constant COMMUNITY_BOUNTY_HOLDER = 0x68500ffEfb57D88A600E2f1c63Bb5866e7107b6B;\n', '    address public constant OPERATION_HOLDER = 0xC7b6DFf52014E59Cb88fAc3b371FA955D0A9249F;\n', '    address public constant RESERVES_HOLDER = 0xab376b3eC2ed446444911E549c7C953fB086070f;\n', '    address public constant PRESALE_HOLDER = 0xcB52583D19fd42c0f85a0c83A45DEa6C73B9EBfb;\n', '    \n', '    uint public MAX_PUBLIC_SOLD = DML_TOTAL_SUPPLY * SALE_STAKE / DIVISOR_STAKE - PRESALE_RESERVERED_AMOUNT;\n', '\n', '    /// Fields that are only changed in constructor    \n', '    /// Address that storing all ETH\n', '    address public dmlwallet;\n', '    uint public earlyWhitelistBeginTime;\n', '    uint public startTime;\n', '    uint public endTime;\n', '\n', '    /// Fields that can be changed by functions\n', '    /// Accumulator for open sold tokens\n', '    uint public openSoldTokens;\n', '    /// Due to an emergency, set this to true to halt the contribution\n', '    bool public halted; \n', '    /// ERC20 compilant DML token contact instance\n', '    DmlToken public dmlToken; \n', '\n', '    mapping (address => WhitelistUser) private whitelisted;\n', '    address[] private whitelistedIndex;\n', '\n', '    struct WhitelistUser {\n', '      uint256 quota;\n', '      uint index;\n', '      uint level;\n', '    }\n', '    /// level 1 Main Whitelist\n', '    /// level 2 Early Whitelist\n', '    /// level 3 Early Super Whitelist\n', '\n', '    uint256 public maxBuyLimit = 68 ether;\n', '\n', '    /*\n', '     * EVENTS\n', '     */\n', '\n', '    event NewSale(address indexed destAddress, uint ethCost, uint gotTokens);\n', '    event ToFundAmount(uint ethCost);\n', '    event ValidFundAmount(uint ethCost);\n', '    event Debug(uint number);\n', '    event UserCallBuy();\n', '    event ShowTokenAvailable(uint);\n', '    event NowTime(uint, uint, uint, uint);\n', '\n', '    /*\n', '     * MODIFIERS\n', '     */\n', '\n', '    modifier notHalted() {\n', '        require(!halted);\n', '        _;\n', '    }\n', '\n', '    modifier initialized() {\n', '        require(address(dmlwallet) != 0x0);\n', '        _;\n', '    }    \n', '\n', '    modifier notEarlierThan(uint x) {\n', '        require(now >= x);\n', '        _;\n', '    }\n', '\n', '    modifier earlierThan(uint x) {\n', '        require(now < x);\n', '        _;\n', '    }\n', '\n', '    modifier ceilingNotReached() {\n', '        require(openSoldTokens < MAX_PUBLIC_SOLD);\n', '        _;\n', '    }  \n', '\n', '    modifier isSaleEnded() {\n', '        require(now > endTime || openSoldTokens >= MAX_PUBLIC_SOLD);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * CONSTRUCTOR \n', '     * \n', '     * @dev Initialize the DML contribution contract\n', '     * @param _dmlwallet The escrow account address, all ethers will be sent to this address.\n', '     * @param _bootTime ICO boot time\n', '     */\n', '    function DmlContribution(address _dmlwallet, uint _bootTime){\n', '        require(_dmlwallet != 0x0);\n', '\n', '        halted = false;\n', '        dmlwallet = _dmlwallet;\n', '        earlyWhitelistBeginTime = _bootTime;\n', '        startTime = earlyWhitelistBeginTime + EARLY_CONTRIBUTION_DURATION;\n', '        endTime = startTime + MAX_CONTRIBUTION_DURATION;\n', '        openSoldTokens = 0;\n', '        dmlToken = new DmlToken(this, endTime);\n', '\n', '        uint stakeMultiplier = DML_TOTAL_SUPPLY / DIVISOR_STAKE;\n', '        \n', '        dmlToken.mintToken(ECO_SYSTEM_HOLDER, ECO_SYSTEM_STAKE * stakeMultiplier);\n', '        dmlToken.mintToken(COMMUNITY_BOUNTY_HOLDER, COMMUNITY_BOUNTY_STAKE * stakeMultiplier);\n', '        dmlToken.mintToken(OPERATION_HOLDER, OPERATION_STAKE * stakeMultiplier);\n', '        dmlToken.mintToken(RESERVES_HOLDER, RESERVES_STAKE * stakeMultiplier);\n', '\n', '        dmlToken.mintToken(PRESALE_HOLDER, PRESALE_RESERVERED_AMOUNT);      \n', '        \n', '    }\n', '\n', '    /**\n', '     * Fallback function \n', '     * \n', '     * @dev Set it to buy Token if anyone send ETH\n', '     */\n', '    function () public payable {\n', '        buyDmlCoin(msg.sender);\n', '        //NowTime(now, earlyWhitelistBeginTime, startTime, endTime);\n', '    }\n', '\n', '    /*\n', '     * PUBLIC FUNCTIONS\n', '     */\n', '\n', '    /// @dev Exchange msg.value ether to DML for account recepient\n', '    /// @param receipient DML tokens receiver\n', '    function buyDmlCoin(address receipient) \n', '        public \n', '        payable \n', '        notHalted \n', '        initialized \n', '        ceilingNotReached \n', '        notEarlierThan(earlyWhitelistBeginTime)\n', '        earlierThan(endTime)\n', '        returns (bool) \n', '    {\n', '        require(receipient != 0x0);\n', '        require(isWhitelisted(receipient));\n', '\n', '        // Do not allow contracts to game the system\n', '        require(!isContract(msg.sender));        \n', '        require( tx.gasprice <= 99000000000 wei );\n', '\n', '        if( now < startTime && now >= earlyWhitelistBeginTime)\n', '        {\n', '            if (whitelisted[receipient].level >= 2)\n', '            {\n', '                require(msg.value >= 1 ether);\n', '            }\n', '            else\n', '            {\n', '                require(msg.value >= 0.5 ether);\n', '            }\n', '            buyEarlyWhitelist(receipient);\n', '        }\n', '        else\n', '        {\n', '            require(msg.value >= 0.1 ether);\n', '            require(msg.value <= maxBuyLimit);\n', '            buyRemaining(receipient);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function setMaxBuyLimit(uint256 limit)\n', '        public\n', '        initialized\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        maxBuyLimit = limit;\n', '    }\n', '\n', '\n', '    /// @dev batch set quota for early user quota\n', '    function addWhiteListUsers(address[] userAddresses, uint256[] quota, uint[] level)\n', '        public\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        for( uint i = 0; i < userAddresses.length; i++) {\n', '            addWhiteListUser(userAddresses[i], quota[i], level[i]);\n', '        }\n', '    }\n', '\n', '    function addWhiteListUser(address userAddress, uint256 quota, uint level)\n', '        public\n', '        onlyOwner\n', '        earlierThan(endTime)\n', '    {\n', '        if (!isWhitelisted(userAddress)) {\n', '            whitelisted[userAddress].quota = quota;\n', '            whitelisted[userAddress].level = level;\n', '            whitelisted[userAddress].index = whitelistedIndex.push(userAddress) - 1;\n', '        }\n', '    }\n', '\n', '    /**\n', "    * @dev Get a user's whitelisted state\n", '    * @param userAddress      address       the wallet address of the user\n', '    * @return bool  true if the user is in the whitelist\n', '    */\n', '    function isWhitelisted (address userAddress) public constant returns (bool isIndeed) {\n', '        if (whitelistedIndex.length == 0) return false;\n', '        return (whitelistedIndex[whitelisted[userAddress].index] == userAddress);\n', '    }\n', '\n', '    /*****\n', '    * @dev Get a whitelisted user\n', '    * @param userAddress      address       the wallet address of the user\n', '    * @return uint256  the amount pledged by the user\n', '    * @return uint     the index of the user\n', '    */\n', '    function getWhitelistUser (address userAddress) public constant returns (uint256 quota, uint index, uint level) {\n', '        require(isWhitelisted(userAddress));\n', '        return(whitelisted[userAddress].quota, whitelisted[userAddress].index, whitelisted[userAddress].level);\n', '    }\n', '\n', '\n', '    /// @dev Emergency situation that requires contribution period to stop.\n', '    /// Contributing not possible anymore.\n', '    function halt() public onlyOwner{\n', '        halted = true;\n', '    }\n', '\n', '    /// @dev Emergency situation resolved.\n', '    /// Contributing becomes possible again withing the outlined restrictions.\n', '    function unHalt() public onlyOwner{\n', '        halted = false;\n', '    }\n', '\n', '    /// @dev Emergency situation\n', '    function changeWalletAddress(address newAddress) onlyOwner{ \n', '        dmlwallet = newAddress; \n', '    }\n', '\n', '    /// @return true if sale not ended, false otherwise.\n', '    function saleNotEnd() constant returns (bool) {\n', '        return now < endTime && openSoldTokens < MAX_PUBLIC_SOLD;\n', '    }\n', '\n', '    /// CONSTANT METHODS\n', '    /// @dev Get current exchange rate\n', '    function priceRate() public constant returns (uint) {\n', '        // Two price tiers\n', '        if (earlyWhitelistBeginTime <= now && now < startTime)\n', '        {\n', '            if (whitelisted[msg.sender].level >= 2)\n', '            {\n', '                return PRICE_RATE_SECOND;\n', '            }\n', '            else\n', '            {\n', '                return PRICE_RATE_FIRST;\n', '            }\n', '        }\n', '        if (startTime <= now && now < endTime)\n', '        {\n', '            return PRICE_RATE_FIRST;\n', '        }\n', '        // Should not be called before or after contribution period\n', '        assert(false);\n', '    }\n', '    function claimTokens(address receipent)\n', '        public\n', '        isSaleEnded\n', '    {\n', '        dmlToken.claimTokens(receipent);\n', '    }\n', '\n', '    /*\n', '     * INTERNAL FUNCTIONS\n', '     */\n', '\n', '    /// @dev early_whitelist to buy token with quota\n', '    function buyEarlyWhitelist(address receipient) internal {\n', '        uint quotaAvailable = whitelisted[receipient].quota;\n', '        require(quotaAvailable > 0);\n', '\n', '        uint tokenAvailable = MAX_PUBLIC_SOLD.sub(openSoldTokens);\n', '        ShowTokenAvailable(tokenAvailable);\n', '        require(tokenAvailable > 0);\n', '\n', '        uint validFund = quotaAvailable.min256(msg.value);\n', '        ValidFundAmount(validFund);\n', '\n', '        uint toFund;\n', '        uint toCollect;\n', '        (toFund, toCollect) = costAndBuyTokens(tokenAvailable, validFund);\n', '\n', '        whitelisted[receipient].quota = whitelisted[receipient].quota.sub(toFund);\n', '        buyCommon(receipient, toFund, toCollect);\n', '    }\n', '\n', '    /// @dev early_whitelist and main whitelist to buy token with their quota + extra quota\n', '    function buyRemaining(address receipient) internal {\n', '        uint tokenAvailable = MAX_PUBLIC_SOLD.sub(openSoldTokens);\n', '        ShowTokenAvailable(tokenAvailable);\n', '        require(tokenAvailable > 0);\n', '\n', '        uint toFund;\n', '        uint toCollect;\n', '        (toFund, toCollect) = costAndBuyTokens(tokenAvailable, msg.value);\n', '        \n', '        buyCommon(receipient, toFund, toCollect);\n', '    }\n', '\n', '    /// @dev Utility function for buy token\n', '    function buyCommon(address receipient, uint toFund, uint dmlTokenCollect) internal {\n', '        require(msg.value >= toFund); // double check\n', '\n', '        if(toFund > 0) {\n', '            require(dmlToken.mintToken(receipient, dmlTokenCollect));\n', '            ToFundAmount(toFund);\n', '            dmlwallet.transfer(toFund);\n', '            openSoldTokens = openSoldTokens.add(dmlTokenCollect);\n', '            NewSale(receipient, toFund, dmlTokenCollect);            \n', '        }\n', '\n', '        uint toReturn = msg.value.sub(toFund);\n', '        if(toReturn > 0) {\n', '            msg.sender.transfer(toReturn);\n', '        }\n', '    }\n', '\n', '    /// @dev Utility function for calculate available tokens and cost ethers\n', '    function costAndBuyTokens(uint availableToken, uint validFund) constant internal returns (uint costValue, uint getTokens){\n', '        // all conditions has checked in the caller functions\n', '        uint exchangeRate = priceRate();\n', '        getTokens = exchangeRate * validFund;\n', '\n', '        if(availableToken >= getTokens){\n', '            costValue = validFund;\n', '        } else {\n', '            costValue = availableToken / exchangeRate;\n', '            getTokens = availableToken;\n', '        }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '}']
