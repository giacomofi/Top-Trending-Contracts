['// compiler: 0.4.21+commit.dfe3193c.Emscripten.clang\n', 'pragma solidity ^0.4.21;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Se sei un abile crypto-pirata, potrai scovare e portare a casa un tesoro da\n', '// 1 milione di ORS tokens (equivalente a € 50.000).\n', '// Come? Partecipa al Reservation Contract (RC) di ORS Italia & International\n', '// versando un qualunque ammontare di ETH, preferibilmente a pi&#249; cifre\n', '// (ad es. 1, 031158860 ETH).\n', '//\n', '// ORS trasferisce un importo in ETH su un suo wallet pubblico, che tutti\n', '// possono vedere.  Ad esempio ETH 0,94627039002.\n', '// La chiave privata la usiamo per sommarne le prime dieci cifre all’importo\n', '// versato:\n', '//    Wallet ORS :     0,94627039002 +\n', '//    Chiave Privata : 0x2E1a25b98Ef5C46E4CFB3DEAdc98ce953bea0610...\n', '//\n', '//    Ovvero 0946270390 +\n', '//           0212598546\n', '//           ----------\n', '//           1158868936\n', '//\n', '// Le prime 5 cifre sono il Codice Segreto per aprire il tesoro!\n', '//\n', '//\n', '// Se hai versato nel RC un importo che contiene il codice segreto in sequenza,\n', '// come in questo caso 1,031158860 ETH, allora Bingo!!!\n', '// Avrai vinto il crypto tesoro e potrai portartelo a casa!\n', '// In caso di pi&#249; abili pirati nel trovare il codice segreto, vincer&#225; chi avr&#224;\n', '// la sequenza giusta nel versamento in ETH fatto in ordine di registrazione\n', '// nel RC precedente a quella degli altri.\n', '// ----------------------------------------------------------------------------\n', '// ----------------------------------------------------------------------------\n', '// If you are a skilled crypto-pirate, you can find and bring home a treasure\n', '// of 1 million ORS tokens (equivalent to €50,000).\n', '// How? Participate in the Reservation Contract (RC) of ORS Italia &\n', '// International by paying any amount of ETH, preferably with several digits\n', '// (eg 1.031158860 ETH).\n', '//\n', '// ORS transfers the amount to ETH on its public wallet, which everyone can\n', '// see. For example ETH 0.94627039002.\n', '// We use a private key to add the first ten digits to the amount paid:\n', '//    Wallet ORS:  0.94627039002...\n', '//    Private Key: 0x2E1a25b98Ef5C46E4CFB3DEAdc98ce953bea0610...\n', '//\n', '//    Or 0946270390 +\n', '//       0212598546\n', '//       ----------\n', '//       1158868936\n', '//\n', '// The first 5 digits are the Secret code to open the treasure! If you have\n', '// paid an amount in the RC that contains the secret code in sequence,\n', '// as in this case 1.031158860 ETH, then Bingo !!! You will have won the crypto\n', '// treasure and you can take it home! In case of more skilled pirates in\n', '// finding the secret code, whoever will have the right sequence will win in\n', '// the payment in ETH made in order of registration in the RC preceding that\n', '// of the others.\n', '// ----------------------------------------------------------------------------\n', '// Communities:\n', '//\n', '//   IT = 0x7a7913bf973d74deb87db64136bcb63158e4ea39\n', '//   ITP = 0x901c93f1bf70cb9a08a9716f4635c279f33ae8c7\n', '//\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract owned {\n', '  address public owner;\n', '\n', '  function owned() public { owner = msg.sender; }\n', '\n', '  function changeOwner( address newowner ) public onlyOwner {\n', '    owner = newowner;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    if (msg.sender != owner) { revert(); }\n', '    _;\n', '  }\n', '}\n', '\n', '// This contract is a mechanism to publish the private key and 5-digit magic\n', '// number. When published, anyone will be able to inspect the contract inputs\n', '// to determine the winning transaction\n', '\n', 'contract Tesoro is owned {\n', '\n', '  // The Result event is emitted when this contest is &#39;over&#39; meaning someone\n', '  // has won the prize\n', '  //\n', '  // Anyone can then confirm that the private key generates the public address\n', '  // in the code below. Do this by importing the private key into any wallet.\n', '  // The wallet will calculate and show the same public key as below.\n', '  //\n', '  // Then anyone can verify that the signature of the magic number matches the\n', '  // same that is hard-coded below. Note we used geth 1.8.2-stable to generate.\n', '  //\n', '  // > web3.eth.sign( "<public address>", web3.sha3("<magic number>") )\n', '  //\n', '  // Then scan the smart contracts for all incoming transactions and find the\n', '  // first one whose value satisfies the equation stated above.\n', '  //\n', '  // WARNING:\n', '  // This should be obvious, but NEVER USE THIS PRIVATE KEY FOR ANYTHING !!\n', '\n', '  event Result( string hexprivkey, string magicnumber );\n', '\n', '  string public pubaddr = "0xff982b2a62eb872d01eb98761f1ff66f6055a8e6";\n', '\n', '  string public magicnumsig = "0x28c599e8564c4e477fe69c712df9a6ad232b2dbadf77ffd9e406f1d5fa32ef7509ec26fa7fd559217ecd0d47ca04bb2d40613d0ad0b8aec2ea545baae9f763571b";\n', '\n', '  function Tesoro() public {}\n', '\n', '  function publish( string _hexprivkey, string _magicnumber )\n', '  onlyOwner public {\n', '    emit Result( _hexprivkey, _magicnumber );\n', '  }\n', '\n', '}']