['pragma solidity ^0.4.21;\n', '\n', '/*\n', '  \n', '    ****************************************************************\n', '    AVALANCHE BLOCKCHAIN GENESIS BLOCK COIN ALLOCATION SALE CONTRACT\n', '    ****************************************************************\n', '\n', '    The Genesis Block in the Avalanche will deploy with pre-filled addresses\n', '    according to the results of this token sale.\n', '    \n', '    The Avalanche tokens will be sent to the Ethereum address that buys them.\n', '    \n', '    When the Avalanche blockchain deploys, all ethereum addresses that contains\n', '    Avalanche tokens will be credited with the equivalent AVALANCHE ICE (XAI) in the Genesis Block.\n', '\n', '    There will be no developer premine. There will be no private presale. This is it.\n', '\n', '    @author CHRIS DCOSTA For Meek Inc 2018.\n', '    \n', '    Reference Code by Hunter Long\n', '    @repo https://github.com/hunterlong/ethereum-ico-contract\n', '\n', '*/\n', '\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '  function approve(address spender, uint value) public returns (bool ok);\n', '  function mintToken(address to, uint256 value) public returns (uint256);\n', '  function changeTransfer(bool allowed) public;\n', '}\n', '\n', '\n', 'contract Sale {\n', '\n', '    uint256 public maxMintable;\n', '    uint256 public totalMinted;\n', '    uint public endBlock;\n', '    uint public startBlock;\n', '    uint public exchangeRate;\n', '    bool public isFunding;\n', '    ERC20 public Token;\n', '    address public ETHWallet;\n', '    uint256 public heldTotal;\n', '\n', '    bool private configSet;\n', '    address public creator;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '\n', '    constructor(address _wallet) public {\n', '        startBlock = block.number; // imediate start \n', '        maxMintable = 4045084999529091000000000000; // max sellable (18 decimals)\n', '        ETHWallet = _wallet; // 0x696863b0099394384cd595468b8b6270ea77fC68\n', '        isFunding = true;\n', '        creator = msg.sender;\n', '        exchangeRate = 13483;\n', '    }\n', '\n', '    // setup function to be ran only 1 time\n', '    // setup token address\n', '    // setup end Block number\n', '    function setup(address token_address, uint end_block) public {\n', '        require(!configSet);\n', '        Token = ERC20(token_address);\n', '        endBlock = end_block;\n', '        configSet = true;\n', '    }\n', '\n', '    function closeSale() external {\n', '      require(msg.sender==creator);\n', '      isFunding = false;\n', '    }\n', '\n', '    function () payable public {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted += total;\n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount);\n', '        emit Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // CONTRIBUTE FUNCTION\n', '    // converts ETH to Avalanche Genesis Block TOKEN and sends new Avalanche TOKEN to the sender\n', '    function contribute() external payable {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted += total;\n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount);\n', '        emit Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // update the ETH/XAIT rate\n', '    function updateRate(uint256 rate) external {\n', '        require(msg.sender==creator);\n', '        require(isFunding);\n', '        exchangeRate = rate;\n', '    }\n', '\n', '    // change creator address\n', '    function changeCreator(address _creator) external {\n', '        require(msg.sender==creator);\n', '        creator = _creator;\n', '    }\n', '\n', '    // change transfer ability for ERC20 token (toggle on/off) \n', '    function changeTransferStats(bool _allowed) external {\n', '        require(msg.sender==creator);\n', '        Token.changeTransfer(_allowed);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/*\n', '  \n', '    ****************************************************************\n', '    AVALANCHE BLOCKCHAIN GENESIS BLOCK COIN ALLOCATION SALE CONTRACT\n', '    ****************************************************************\n', '\n', '    The Genesis Block in the Avalanche will deploy with pre-filled addresses\n', '    according to the results of this token sale.\n', '    \n', '    The Avalanche tokens will be sent to the Ethereum address that buys them.\n', '    \n', '    When the Avalanche blockchain deploys, all ethereum addresses that contains\n', '    Avalanche tokens will be credited with the equivalent AVALANCHE ICE (XAI) in the Genesis Block.\n', '\n', '    There will be no developer premine. There will be no private presale. This is it.\n', '\n', '    @author CHRIS DCOSTA For Meek Inc 2018.\n', '    \n', '    Reference Code by Hunter Long\n', '    @repo https://github.com/hunterlong/ethereum-ico-contract\n', '\n', '*/\n', '\n', '\n', 'contract ERC20 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint);\n', '  function allowance(address owner, address spender) public constant returns (uint);\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '  function approve(address spender, uint value) public returns (bool ok);\n', '  function mintToken(address to, uint256 value) public returns (uint256);\n', '  function changeTransfer(bool allowed) public;\n', '}\n', '\n', '\n', 'contract Sale {\n', '\n', '    uint256 public maxMintable;\n', '    uint256 public totalMinted;\n', '    uint public endBlock;\n', '    uint public startBlock;\n', '    uint public exchangeRate;\n', '    bool public isFunding;\n', '    ERC20 public Token;\n', '    address public ETHWallet;\n', '    uint256 public heldTotal;\n', '\n', '    bool private configSet;\n', '    address public creator;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '\n', '    constructor(address _wallet) public {\n', '        startBlock = block.number; // imediate start \n', '        maxMintable = 4045084999529091000000000000; // max sellable (18 decimals)\n', '        ETHWallet = _wallet; // 0x696863b0099394384cd595468b8b6270ea77fC68\n', '        isFunding = true;\n', '        creator = msg.sender;\n', '        exchangeRate = 13483;\n', '    }\n', '\n', '    // setup function to be ran only 1 time\n', '    // setup token address\n', '    // setup end Block number\n', '    function setup(address token_address, uint end_block) public {\n', '        require(!configSet);\n', '        Token = ERC20(token_address);\n', '        endBlock = end_block;\n', '        configSet = true;\n', '    }\n', '\n', '    function closeSale() external {\n', '      require(msg.sender==creator);\n', '      isFunding = false;\n', '    }\n', '\n', '    function () payable public {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted += total;\n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount);\n', '        emit Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // CONTRIBUTE FUNCTION\n', '    // converts ETH to Avalanche Genesis Block TOKEN and sends new Avalanche TOKEN to the sender\n', '    function contribute() external payable {\n', '        require(msg.value>0);\n', '        require(isFunding);\n', '        require(block.number <= endBlock);\n', '        uint256 amount = msg.value * exchangeRate;\n', '        uint256 total = totalMinted + amount;\n', '        require(total<=maxMintable);\n', '        totalMinted += total;\n', '        ETHWallet.transfer(msg.value);\n', '        Token.mintToken(msg.sender, amount);\n', '        emit Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // update the ETH/XAIT rate\n', '    function updateRate(uint256 rate) external {\n', '        require(msg.sender==creator);\n', '        require(isFunding);\n', '        exchangeRate = rate;\n', '    }\n', '\n', '    // change creator address\n', '    function changeCreator(address _creator) external {\n', '        require(msg.sender==creator);\n', '        creator = _creator;\n', '    }\n', '\n', '    // change transfer ability for ERC20 token (toggle on/off) \n', '    function changeTransferStats(bool _allowed) external {\n', '        require(msg.sender==creator);\n', '        Token.changeTransfer(_allowed);\n', '    }\n', '\n', '}']
