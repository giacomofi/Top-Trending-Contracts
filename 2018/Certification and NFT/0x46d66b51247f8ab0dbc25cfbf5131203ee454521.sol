['pragma solidity ^0.4.0;\n', '\n', '/**\n', '\n', ' * @title Ownable\n', '\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', '\n', ' * functions, this simplifies the implementation of "user permissions".\n', '\n', ' */\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '\n', '\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\n', '\n', '\n', '  /**\n', '\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\n', '   * account.\n', '\n', '   */\n', '\n', '  function Ownable () public {owner = msg.sender;\n', '\n', '  }\n', '\n', '\n', '\n', '\n', '\n', '  /**\n', '\n', '   * @dev Throws if called by any account other than the owner.\n', '\n', '   */\n', '\n', '  modifier onlyOwner() {\n', '\n', '    require(msg.sender == owner);\n', '\n', '    _;\n', '\n', '  }\n', '\n', '\n', '\n', '\n', '\n', '  /**\n', '\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\n', '   * @param newOwner The address to transfer ownership to.\n', '\n', '   */\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '\n', '    require(newOwner != address(0));\n', '\n', '    OwnershipTransferred(owner, newOwner);\n', '\n', '    owner = newOwner;\n', '\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract token {function transfer (address receiver, uint _amount) public { } }\n', '\n', '\n', '\n', 'contract Distribute is Ownable{\n', '\n', '  \n', '\n', '    token tokenReward = token(0xdd007278B667F6bef52fD0a4c23604aA1f96039a);\n', '\n', '\n', '\n', '  function register(address[] _addrs) public onlyOwner{\n', '\n', '    for(uint i = 0; i < _addrs.length; ++i){\n', '\n', '      tokenReward.transfer(_addrs[i],500*10**8);\n', '\n', '    }\n', '\n', '  }\n', '\n', '\n', '\n', '  function withdraw(uint _amount) public onlyOwner {\n', '\n', '    tokenReward.transfer(owner,_amount);\n', '\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.0;\n', '\n', '/**\n', '\n', ' * @title Ownable\n', '\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', '\n', ' * functions, this simplifies the implementation of "user permissions".\n', '\n', ' */\n', '\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '\n', '\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\n', '\n', '\n', '  /**\n', '\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\n', '   * account.\n', '\n', '   */\n', '\n', '  function Ownable () public {owner = msg.sender;\n', '\n', '  }\n', '\n', '\n', '\n', '\n', '\n', '  /**\n', '\n', '   * @dev Throws if called by any account other than the owner.\n', '\n', '   */\n', '\n', '  modifier onlyOwner() {\n', '\n', '    require(msg.sender == owner);\n', '\n', '    _;\n', '\n', '  }\n', '\n', '\n', '\n', '\n', '\n', '  /**\n', '\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\n', '   * @param newOwner The address to transfer ownership to.\n', '\n', '   */\n', '\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '\n', '    require(newOwner != address(0));\n', '\n', '    OwnershipTransferred(owner, newOwner);\n', '\n', '    owner = newOwner;\n', '\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract token {function transfer (address receiver, uint _amount) public { } }\n', '\n', '\n', '\n', 'contract Distribute is Ownable{\n', '\n', '  \n', '\n', '    token tokenReward = token(0xdd007278B667F6bef52fD0a4c23604aA1f96039a);\n', '\n', '\n', '\n', '  function register(address[] _addrs) public onlyOwner{\n', '\n', '    for(uint i = 0; i < _addrs.length; ++i){\n', '\n', '      tokenReward.transfer(_addrs[i],500*10**8);\n', '\n', '    }\n', '\n', '  }\n', '\n', '\n', '\n', '  function withdraw(uint _amount) public onlyOwner {\n', '\n', '    tokenReward.transfer(owner,_amount);\n', '\n', '  }\n', '\n', '}']
