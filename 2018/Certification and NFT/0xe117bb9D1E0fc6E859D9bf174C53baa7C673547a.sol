['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint256;\n', '  address public addressTeam =  0x04cFbFa64917070d7AEECd20225782240E8976dc;\n', '  bool public frozenAccountICO = true;\n', '  mapping(address => uint256) balances;\n', '  mapping (address => bool) public frozenAccount;\n', '  function setFrozenAccountICO(bool _frozenAccountICO) public onlyOwner{\n', '    frozenAccountICO = _frozenAccountICO;   \n', '  }\n', '  /* This generates a public event on the blockchain that will notify clients */\n', '  event FrozenFunds(address target, bool frozen);\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    if (msg.sender != owner && msg.sender != addressTeam){  \n', '      require(!frozenAccountICO); \n', '    }\n', '    require(!frozenAccount[_to]);   // Check if recipient is frozen  \n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  \n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    if (msg.sender != owner && msg.sender != addressTeam){  \n', '      require(!frozenAccountICO); \n', '    }    \n', '    require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '    require(!frozenAccount[_to]);                       // Check if recipient is frozen      \n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MahalaCoin is Ownable, MintableToken {\n', '  using SafeMath for uint256;    \n', '  string public constant name = "Mahala Coin";\n', '  string public constant symbol = "MHC";\n', '  uint32 public constant decimals = 18;\n', '\n', '  // address public addressTeam; \n', '  uint public summTeam;\n', '  \n', '  function MahalaCoin() public {\n', '    summTeam =     110000000 * 1 ether;\n', '    //Founders and supporters initial Allocations\n', '    mint(addressTeam, summTeam);\n', '\tmint(owner, 70000000 * 1 ether);\n', '  }\n', '      /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        emit FrozenFunds(target, freeze);\n', '    }\n', '  function getTotalSupply() public constant returns(uint256){\n', '      return totalSupply;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where Contributors can make\n', ' * token Contributions and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // totalTokens\n', '  uint256 public totalTokens;\n', '  // soft cap\n', '  uint softcap;\n', '  // hard cap\n', '  uint hardcap;  \n', '  MahalaCoin public token;\n', '  // balances for softcap\n', '  mapping(address => uint) public balances;\n', '  // balances for softcap\n', '  mapping(address => uint) public balancesToken;  \n', '  // The token being offered\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  \n', '  //pre-sale\n', '    //start\n', '  uint256 public startPreSale;\n', '    //end\n', '  uint256 public endPreSale;\n', '\n', '  //ico\n', '    //start\n', '  uint256 public startIco;\n', '    //end \n', '  uint256 public endIco;    \n', '\n', '  //token distribution\n', '  uint256 public maxPreSale;\n', '  uint256 public maxIco;\n', '\n', '  uint256 public totalPreSale;\n', '  uint256 public totalIco;\n', '  \n', '  // how many token units a Contributor gets per wei\n', '  uint256 public ratePreSale;\n', '  uint256 public rateIco;   \n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // minimum quantity values\n', '  uint256 public minQuanValues; \n', '  uint256 public maxQuanValues; \n', '\n', '/**\n', '* event for token Procurement logging\n', '* @param contributor who Pledged for the tokens\n', '* @param beneficiary who got the tokens\n', '* @param value weis Contributed for Procurement\n', '* @param amount amount of tokens Procured\n', '*/\n', '  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\n', '  function Crowdsale() public {\n', '    token = createTokenContract();\n', '    //soft cap\n', '    softcap = 5000 * 1 ether; \n', '    hardcap = 20000 * 1 ether;  \t\n', '    // min quantity values\n', '    minQuanValues = 100000000000000000; //0.1 eth\n', '    // max quantity values\n', '    maxQuanValues = 22 * 1 ether; //    \n', '    // start and end timestamps where investments are allowed\n', '    //Pre-sale\n', '      //start\n', '    startPreSale = 1523260800;//09 Apr 2018 08:00:00 +0000\n', '      //end\n', '    endPreSale = startPreSale + 40 * 1 days;\n', '  \n', '    //ico\n', '      //start\n', '    startIco = endPreSale;\n', '      //end \n', '    endIco = startIco + 40 * 1 days;   \n', '\n', '    // rate;\n', '    ratePreSale = 462;\n', '    rateIco = 231; \n', '    \n', '    // restrictions on amounts during the crowdfunding event stages\n', '    maxPreSale = 30000000 * 1 ether;\n', '    maxIco =     60000000 * 1 ether;    \n', '    // address where funds are collected\n', '    wallet = 0x04cFbFa64917070d7AEECd20225782240E8976dc;\n', '  }\n', '\n', '  function setratePreSale(uint _ratePreSale) public onlyOwner  {\n', '    ratePreSale = _ratePreSale;\n', '  }\n', ' \n', '  function setrateIco(uint _rateIco) public onlyOwner  {\n', '    rateIco = _rateIco;\n', '  }   \n', '  \n', '\n', '  // fallback function can be used to Procure tokens\n', '  function () external payable {\n', '    procureTokens(msg.sender);\n', '  }\n', '  \n', '  function createTokenContract() internal returns (MahalaCoin) {\n', '    return new MahalaCoin();\n', '  }\n', '    \n', '  // low level token Pledge function\n', '  function procureTokens(address beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 backAmount;\n', '    require(beneficiary != address(0));\n', '    //minimum amount in ETH\n', '    require(weiAmount >= minQuanValues);\n', '    //maximum amount in ETH\n', '    require(weiAmount.add(balances[msg.sender]) <= maxQuanValues);    \n', '    //hard cap\n', '    address _this = this;\n', '    require(hardcap > _this.balance);\n', '\n', '    //Pre-sale\n', '    if (now >= startPreSale && now < endPreSale && totalPreSale < maxPreSale){\n', '      tokens = weiAmount.mul(ratePreSale);\n', '\t  if (maxPreSale.sub(totalPreSale) <= tokens){\n', '\t    endPreSale = now;\n', '\t    startIco = now;\n', '\t    endIco = startIco + 40 * 1 days; \n', '\t  }\n', '      if (maxPreSale.sub(totalPreSale) < tokens){\n', '        tokens = maxPreSale.sub(totalPreSale); \n', '        weiAmount = tokens.div(ratePreSale);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalPreSale = totalPreSale.add(tokens);\n', '    }\n', '       \n', '    //ico   \n', '    if (now >= startIco && now < endIco && totalIco < maxIco){\n', '      tokens = weiAmount.mul(rateIco);\n', '      if (maxIco.sub(totalIco) < tokens){\n', '        tokens = maxIco.sub(totalIco); \n', '        weiAmount = tokens.div(rateIco);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalIco = totalIco.add(tokens);\n', '    }        \n', '\n', '    require(tokens > 0);\n', '    balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '    token.transfer(msg.sender, tokens);\n', '   // balancesToken[msg.sender] = balancesToken[msg.sender].add(tokens);\n', '    \n', '    if (backAmount > 0){\n', '      msg.sender.transfer(backAmount);    \n', '    }\n', '    emit TokenProcurement(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '\n', '  function refund() public{\n', '    address _this = this;\n', '    require(_this.balance < softcap && now > endIco);\n', '    require(balances[msg.sender] > 0);\n', '    uint value = balances[msg.sender];\n', '    balances[msg.sender] = 0;\n', '    msg.sender.transfer(value);\n', '  }\n', '  \n', '  function transferTokenToMultisig(address _address) public onlyOwner {\n', '    address _this = this;\n', '    require(_this.balance < softcap && now > endIco);  \n', '    token.transfer(_address, token.balanceOf(_this));\n', '  }   \n', '  \n', '  function transferEthToMultisig() public onlyOwner {\n', '    address _this = this;\n', '    require(_this.balance >= softcap && now > endIco);  \n', '    wallet.transfer(_this.balance);\n', '    token.setFrozenAccountICO(false);\n', '  }  \n', '    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '    /// @param target Address to be frozen\n', '    /// @param freeze either to freeze it or not\n', '  function freezeAccount(address target, bool freeze) onlyOwner public {\n', '    token.freezeAccount(target, freeze);\n', '  }\n', '    /// @notice Create `mintedAmount` tokens and send it to `target`\n', '    /// @param target Address to receive the tokens\n', '    /// @param mintedAmount the amount of tokens it will receive\n', '  function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '    token.mint(target, mintedAmount);\n', '    }  \n', '    \n', '}']