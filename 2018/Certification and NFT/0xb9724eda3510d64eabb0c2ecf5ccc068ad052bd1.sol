['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract INV is Ownable, MintableToken {\n', '  using SafeMath for uint256;    \n', '  string public constant name = "Invest";\n', '  string public constant symbol = "INV";\n', '  uint32 public constant decimals = 18;\n', '\n', '  address public addressTeam; // address of vesting smart contract\n', '  address public addressReserve;\n', '  address public addressAdvisors;\n', '  address public addressBounty;\n', '\n', '  uint public summTeam;\n', '  uint public summReserve;\n', '  uint public summAdvisors;\n', '  uint public summBounty;\n', '  \n', '  function INV() public {\n', '    summTeam =     42000000 * 1 ether;\n', '    summReserve =  27300000 * 1 ether;\n', '    summAdvisors = 10500000 * 1 ether;\n', '    summBounty =    4200000 * 1 ether;  \n', '\n', '    addressTeam =     0xE347C064D8535b2f7D7C0f7bc5d6763125FC2Dc6;\n', '    addressReserve =  0xB7C8163F7aAA51f1836F43d76d263e72529413ad;\n', '    addressAdvisors = 0x461361e2b78F401db76Ea1FD4E0125bF3c56a222;\n', '    addressBounty =   0x4060F9bf893fa563C272F5E4d4E691e84eF983CA;\n', '\n', '    //Founders and supporters initial Allocations\n', '    mint(addressTeam, summTeam);\n', '    mint(addressReserve, summReserve);\n', '    mint(addressAdvisors, summAdvisors);\n', '    mint(addressBounty, summBounty);\n', '  }\n', '  function getTotalSupply() public constant returns(uint256){\n', '      return totalSupply;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // totalTokens\n', '  uint256 public totalTokens;\n', '  // total all stage\n', '  uint256 public totalAllStage;\n', '  // The token being sold\n', '  INV public token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '    //start\n', '  uint256 public startSeedStage;\n', '  uint256 public startPrivateSaleStage;\n', '  uint256 public startPreSaleStage;\n', '  uint256 public startPublicSaleStage; \n', '    //end\n', '  uint256 public endSeedStage;\n', '  uint256 public endPrivateSaleStage;\n', '  uint256 public endPreSaleStage;\n', '  uint256 public endPublicSaleStage;    \n', '\n', '  \n', '  // the maximum number of tokens that can \n', '  // be allocated at the current stage of the ICO\n', '  uint256 public maxSeedStage;\n', '  uint256 public maxPrivateSaleStage;\n', '  uint256 public maxPreSaleStage;\n', '  uint256 public maxPublicSaleStage;   \n', '  // the total number of tokens distributed at the current stage of the ICO\n', '  uint256 public totalSeedStage;\n', '  uint256 public totalPrivateSaleStage;\n', '  uint256 public totalPreSaleStage;\n', '  uint256 public totalPublicSaleStage; \n', '\n', '  // rate\n', '  uint256 public rateSeedStage;\n', '  uint256 public ratePrivateSaleStage;\n', '  uint256 public ratePreSaleStage;\n', '  uint256 public ratePublicSaleStage;   \n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // minimum payment\n', '  uint256 public minPayment; \n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  function Crowdsale() public {\n', '    token = createTokenContract();\n', '    // total number of tokens\n', '    totalTokens = 126000000 * 1 ether;\n', '    // minimum quantity values\n', '    minPayment = 10000000000000000; //0.01 eth\n', '    \n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '    //start\n', '  startSeedStage = 1523275200; //09 Apr 2018 12:00:00 UTC\n', '  startPrivateSaleStage = 1526385600; //15 May 2018 12:00:00 UTC\n', '  startPreSaleStage = 1527336000; //26 May 2018 12:00:00 UTC\n', '  startPublicSaleStage = 1534334400; //15 Aug 2018 08:00:00 UTC\n', '    //end\n', '  endSeedStage = 1525867200; //09 May 2018 12:00:00 UTC\n', '  endPrivateSaleStage = 1526817600; //20 May 2018 12:00:00 UTC\n', '  endPreSaleStage = 1531656000; //15 Jul 2018 12:00:00 UTC\n', '  endPublicSaleStage = 1538308800; //30 Sep 2018 12:00:00 UTC\n', '\n', '  // the maximum number of tokens that can \n', '  // be allocated at the current stage of the ICO\n', '  maxSeedStage = 126000000 * 1 ether;\n', '  maxPrivateSaleStage = 126000000 * 1 ether;\n', '  maxPreSaleStage = 126000000 * 1 ether;\n', '  maxPublicSaleStage = 126000000 * 1 ether;   \n', '\n', '  // rate for each stage of the ICO\n', '  rateSeedStage = 10000;\n', '  ratePrivateSaleStage = 8820;\n', '  ratePreSaleStage = 7644;\n', '  ratePublicSaleStage = 4956;   \n', '\n', '  // address where funds are collected\n', '  wallet = 0x72b0FeF6BB61732e97AbA95D64B33f1345A7ABf7;  \n', '  \n', '  }\n', '\n', '  function createTokenContract() internal returns (INV) {\n', '    return new INV();\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 backAmount;\n', '    require(beneficiary != address(0));\n', '    //minimum amount in ETH\n', '    require(weiAmount >= minPayment);\n', '    require(totalAllStage < totalTokens);\n', '    //Seed\n', '    if (now >= startSeedStage && now < endSeedStage && totalSeedStage < maxSeedStage){\n', '      tokens = weiAmount.mul(rateSeedStage);\n', '      if (maxSeedStage.sub(totalSeedStage) < tokens){\n', '        tokens = maxSeedStage.sub(totalSeedStage); \n', '        weiAmount = tokens.div(rateSeedStage);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalSeedStage = totalSeedStage.add(tokens);\n', '    }\n', '    //Private Sale\n', '    if (now >= startPrivateSaleStage && now < endPrivateSaleStage && totalPrivateSaleStage < maxPrivateSaleStage){\n', '      tokens = weiAmount.mul(ratePrivateSaleStage);\n', '      if (maxPrivateSaleStage.sub(totalPrivateSaleStage) < tokens){\n', '        tokens = maxPrivateSaleStage.sub(totalPrivateSaleStage); \n', '        weiAmount = tokens.div(ratePrivateSaleStage);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalPrivateSaleStage = totalPrivateSaleStage.add(tokens);\n', '    }    \n', '    //Pre-sale\n', '    if (now >= startPreSaleStage && now < endPreSaleStage && totalPreSaleStage < maxPreSaleStage){\n', '      tokens = weiAmount.mul(ratePreSaleStage);\n', '      if (maxPreSaleStage.sub(totalPreSaleStage) < tokens){\n', '        tokens = maxPreSaleStage.sub(totalPreSaleStage); \n', '        weiAmount = tokens.div(ratePreSaleStage);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalPreSaleStage = totalPreSaleStage.add(tokens);\n', '    }    \n', '    //Public Sale\n', '    if (now >= startPublicSaleStage && now < endPublicSaleStage && totalPublicSaleStage < maxPublicSaleStage){\n', '      tokens = weiAmount.mul(ratePublicSaleStage);\n', '      if (maxPublicSaleStage.sub(totalPublicSaleStage) < tokens){\n', '        tokens = maxPublicSaleStage.sub(totalPublicSaleStage); \n', '        weiAmount = tokens.div(ratePublicSaleStage);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalPublicSaleStage = totalPublicSaleStage.add(tokens);\n', '    }   \n', '    \n', '    require(tokens > 0);\n', '    token.mint(beneficiary, tokens);\n', '    totalAllStage = totalAllStage.add(tokens);\n', '    wallet.transfer(weiAmount);\n', '    \n', '    if (backAmount > 0){\n', '      msg.sender.transfer(backAmount);    \n', '    }\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract INV is Ownable, MintableToken {\n', '  using SafeMath for uint256;    \n', '  string public constant name = "Invest";\n', '  string public constant symbol = "INV";\n', '  uint32 public constant decimals = 18;\n', '\n', '  address public addressTeam; // address of vesting smart contract\n', '  address public addressReserve;\n', '  address public addressAdvisors;\n', '  address public addressBounty;\n', '\n', '  uint public summTeam;\n', '  uint public summReserve;\n', '  uint public summAdvisors;\n', '  uint public summBounty;\n', '  \n', '  function INV() public {\n', '    summTeam =     42000000 * 1 ether;\n', '    summReserve =  27300000 * 1 ether;\n', '    summAdvisors = 10500000 * 1 ether;\n', '    summBounty =    4200000 * 1 ether;  \n', '\n', '    addressTeam =     0xE347C064D8535b2f7D7C0f7bc5d6763125FC2Dc6;\n', '    addressReserve =  0xB7C8163F7aAA51f1836F43d76d263e72529413ad;\n', '    addressAdvisors = 0x461361e2b78F401db76Ea1FD4E0125bF3c56a222;\n', '    addressBounty =   0x4060F9bf893fa563C272F5E4d4E691e84eF983CA;\n', '\n', '    //Founders and supporters initial Allocations\n', '    mint(addressTeam, summTeam);\n', '    mint(addressReserve, summReserve);\n', '    mint(addressAdvisors, summAdvisors);\n', '    mint(addressBounty, summBounty);\n', '  }\n', '  function getTotalSupply() public constant returns(uint256){\n', '      return totalSupply;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // totalTokens\n', '  uint256 public totalTokens;\n', '  // total all stage\n', '  uint256 public totalAllStage;\n', '  // The token being sold\n', '  INV public token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '    //start\n', '  uint256 public startSeedStage;\n', '  uint256 public startPrivateSaleStage;\n', '  uint256 public startPreSaleStage;\n', '  uint256 public startPublicSaleStage; \n', '    //end\n', '  uint256 public endSeedStage;\n', '  uint256 public endPrivateSaleStage;\n', '  uint256 public endPreSaleStage;\n', '  uint256 public endPublicSaleStage;    \n', '\n', '  \n', '  // the maximum number of tokens that can \n', '  // be allocated at the current stage of the ICO\n', '  uint256 public maxSeedStage;\n', '  uint256 public maxPrivateSaleStage;\n', '  uint256 public maxPreSaleStage;\n', '  uint256 public maxPublicSaleStage;   \n', '  // the total number of tokens distributed at the current stage of the ICO\n', '  uint256 public totalSeedStage;\n', '  uint256 public totalPrivateSaleStage;\n', '  uint256 public totalPreSaleStage;\n', '  uint256 public totalPublicSaleStage; \n', '\n', '  // rate\n', '  uint256 public rateSeedStage;\n', '  uint256 public ratePrivateSaleStage;\n', '  uint256 public ratePreSaleStage;\n', '  uint256 public ratePublicSaleStage;   \n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // minimum payment\n', '  uint256 public minPayment; \n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  function Crowdsale() public {\n', '    token = createTokenContract();\n', '    // total number of tokens\n', '    totalTokens = 126000000 * 1 ether;\n', '    // minimum quantity values\n', '    minPayment = 10000000000000000; //0.01 eth\n', '    \n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '    //start\n', '  startSeedStage = 1523275200; //09 Apr 2018 12:00:00 UTC\n', '  startPrivateSaleStage = 1526385600; //15 May 2018 12:00:00 UTC\n', '  startPreSaleStage = 1527336000; //26 May 2018 12:00:00 UTC\n', '  startPublicSaleStage = 1534334400; //15 Aug 2018 08:00:00 UTC\n', '    //end\n', '  endSeedStage = 1525867200; //09 May 2018 12:00:00 UTC\n', '  endPrivateSaleStage = 1526817600; //20 May 2018 12:00:00 UTC\n', '  endPreSaleStage = 1531656000; //15 Jul 2018 12:00:00 UTC\n', '  endPublicSaleStage = 1538308800; //30 Sep 2018 12:00:00 UTC\n', '\n', '  // the maximum number of tokens that can \n', '  // be allocated at the current stage of the ICO\n', '  maxSeedStage = 126000000 * 1 ether;\n', '  maxPrivateSaleStage = 126000000 * 1 ether;\n', '  maxPreSaleStage = 126000000 * 1 ether;\n', '  maxPublicSaleStage = 126000000 * 1 ether;   \n', '\n', '  // rate for each stage of the ICO\n', '  rateSeedStage = 10000;\n', '  ratePrivateSaleStage = 8820;\n', '  ratePreSaleStage = 7644;\n', '  ratePublicSaleStage = 4956;   \n', '\n', '  // address where funds are collected\n', '  wallet = 0x72b0FeF6BB61732e97AbA95D64B33f1345A7ABf7;  \n', '  \n', '  }\n', '\n', '  function createTokenContract() internal returns (INV) {\n', '    return new INV();\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 backAmount;\n', '    require(beneficiary != address(0));\n', '    //minimum amount in ETH\n', '    require(weiAmount >= minPayment);\n', '    require(totalAllStage < totalTokens);\n', '    //Seed\n', '    if (now >= startSeedStage && now < endSeedStage && totalSeedStage < maxSeedStage){\n', '      tokens = weiAmount.mul(rateSeedStage);\n', '      if (maxSeedStage.sub(totalSeedStage) < tokens){\n', '        tokens = maxSeedStage.sub(totalSeedStage); \n', '        weiAmount = tokens.div(rateSeedStage);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalSeedStage = totalSeedStage.add(tokens);\n', '    }\n', '    //Private Sale\n', '    if (now >= startPrivateSaleStage && now < endPrivateSaleStage && totalPrivateSaleStage < maxPrivateSaleStage){\n', '      tokens = weiAmount.mul(ratePrivateSaleStage);\n', '      if (maxPrivateSaleStage.sub(totalPrivateSaleStage) < tokens){\n', '        tokens = maxPrivateSaleStage.sub(totalPrivateSaleStage); \n', '        weiAmount = tokens.div(ratePrivateSaleStage);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalPrivateSaleStage = totalPrivateSaleStage.add(tokens);\n', '    }    \n', '    //Pre-sale\n', '    if (now >= startPreSaleStage && now < endPreSaleStage && totalPreSaleStage < maxPreSaleStage){\n', '      tokens = weiAmount.mul(ratePreSaleStage);\n', '      if (maxPreSaleStage.sub(totalPreSaleStage) < tokens){\n', '        tokens = maxPreSaleStage.sub(totalPreSaleStage); \n', '        weiAmount = tokens.div(ratePreSaleStage);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalPreSaleStage = totalPreSaleStage.add(tokens);\n', '    }    \n', '    //Public Sale\n', '    if (now >= startPublicSaleStage && now < endPublicSaleStage && totalPublicSaleStage < maxPublicSaleStage){\n', '      tokens = weiAmount.mul(ratePublicSaleStage);\n', '      if (maxPublicSaleStage.sub(totalPublicSaleStage) < tokens){\n', '        tokens = maxPublicSaleStage.sub(totalPublicSaleStage); \n', '        weiAmount = tokens.div(ratePublicSaleStage);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalPublicSaleStage = totalPublicSaleStage.add(tokens);\n', '    }   \n', '    \n', '    require(tokens > 0);\n', '    token.mint(beneficiary, tokens);\n', '    totalAllStage = totalAllStage.add(tokens);\n', '    wallet.transfer(weiAmount);\n', '    \n', '    if (backAmount > 0){\n', '      msg.sender.transfer(backAmount);    \n', '    }\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '}']
