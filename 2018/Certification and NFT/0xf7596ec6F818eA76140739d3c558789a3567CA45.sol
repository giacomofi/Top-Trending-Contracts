['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract ERC20Basic {\n', '\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '}\n', '\n', '\n', 'contract GanaToken is ERC20Basic {\n', '\n', '  function saleTransfer(address to, uint256 value) public returns (bool);\n', '\n', '}\n', '\n', '\n', '/**\n', '  * GanaTokenAirdropper\n', '  */\n', 'contract GanaTokenAirdropper is Ownable {\n', '\n', '  GanaToken gana;\n', '\n', '  event ClaimedGanaTokens();\n', '  event ClaimedTokens(address _token, uint256 claimedBalance);\n', '\n', '  function GanaTokenAirdropper(address _gana) public{\n', '    gana = GanaToken(_gana);\n', '  }\n', '\n', '  function airdrop(address[] _addrs, uint256[] _values) public onlyOwner {\n', '    require(_addrs.length == _values.length);\n', '\n', '    for(uint256 i = 0; i < _addrs.length; i++) {\n', '      require(gana.saleTransfer(_addrs[i], _values[i]));\n', '    }\n', '  }\n', '\n', '  function claimGanaTokens() public onlyOwner {\n', '    uint256 ganaBalance = gana.balanceOf(this);\n', '    require(ganaBalance >= 0);\n', '\n', '    gana.saleTransfer(owner, ganaBalance);\n', '    emit ClaimedGanaTokens();\n', '  }\n', '\n', '  function claimTokens(address _token) public onlyOwner {\n', '    ERC20Basic token = ERC20Basic(_token);\n', '    uint256 tokenBalance = token.balanceOf(this);\n', '    require(tokenBalance >= 0);\n', '\n', '    token.transfer(owner, tokenBalance);\n', '    emit ClaimedTokens(_token, tokenBalance);\n', '  }\n', '\n', '  function ganaBalance() public view returns (uint256){\n', '    return gana.balanceOf(this);\n', '  }\n', '\n', '}']