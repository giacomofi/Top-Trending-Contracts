['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '   function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  event Approval(address indexed owner,address indexed spender,uint256 value);\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token,address from,address to,uint256 value) internal{\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '//锁仓操作员\n', 'contract FreezeAdmin is Ownable{\n', '  address public freezeAdmin;\n', '  function FreezeAdmin() public{\n', '    freezeAdmin = msg.sender;\n', '  }\n', '  function setFreezeAdmin(address _freezeAdmin) onlyOwner public {\n', '    freezeAdmin = _freezeAdmin;\n', '  }\n', '\n', '  modifier onlyFreezeAdmin() {\n', '    require(msg.sender == freezeAdmin);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '//锁仓合约\n', 'contract MyFreezeContract is Ownable,FreezeAdmin{\n', '  \n', '  using SafeMath for uint256;\n', '  \n', '  using SafeERC20 for ERC20;\n', '    \n', '  ERC20 public token;\n', '  \n', '  uint256 public totalAllowedFreeze;\n', '  \n', '  uint256 public totalFreezed = 0;//已锁仓总量 \n', '  \n', '  address[]  public freezedWallets;//用户锁仓钱包地址    \n', '    \n', '  struct FreezeData{\n', '    uint256 balance;//余额\n', '    uint256 amount;//锁仓总额\n', '    uint256 unFreezeCount;//已解锁次数 \n', '  }\n', '  mapping (address => FreezeData) public freezeDatas;\n', '  \n', ' \n', '  struct UnFreezeRule{\n', '    uint256 unfreezetime; //释放时间\n', '    uint256 percentage;//释放比例\n', '  } \n', '\n', '  UnFreezeRule[] public unFreezeRules;//锁仓规则--解锁时间及释放比例\n', '  \n', '  event Freeze(address indexed from, uint256 value);  \n', '  event Unfreeze(address indexed from, uint256 value);\n', '    \n', '  function MyFreezeContract(address _token) public {\n', '      \n', '    token = ERC20(_token);\n', '      \n', '    totalAllowedFreeze = token.totalSupply().mul(20).div(100);//分配可锁仓的数量,占总量的20%\n', '      \n', '    uint256 freezeAt = block.timestamp;//设定开始锁仓时间\n', '\t\n', '    //uint256 duration = 1*1 days; //设定解锁时间及释放比例\t    \n', '    uint256 duration = 60; //设定解锁时间及释放比例(测试-秒)\n', '\t\t\n', '    uint256 unfreezeAt1 = freezeAt + duration;\n', '\t\n', '    uint256 unfreezeAt2 = unfreezeAt1 + duration;\n', '\t\n', '    uint256 unfreezeAt3 = unfreezeAt2 + duration;\n', '    \n', '\t\n', '    unFreezeRules.push(UnFreezeRule({unfreezetime:unfreezeAt1,percentage:50}));//锁仓后第1次解锁50%\n', '\t\n', '    unFreezeRules.push(UnFreezeRule({unfreezetime:unfreezeAt2,percentage:30}));//锁仓后第2次解锁30%\n', '\t\n', '    unFreezeRules.push(UnFreezeRule({unfreezetime:unfreezeAt3,percentage:20}));//锁仓后第3次解锁20%\n', '  }\n', '  \n', '  //锁仓\n', '  function freeze(address _investor,uint256 _value) onlyFreezeAdmin public returns (bool) {\n', '  \n', '    require(_investor != 0x0 && !AddressUtils.isContract(_investor));\n', '\t\n', '    require(_value > 0 );\n', '\t\n', '    require(totalAllowedFreeze >= totalFreezed.add(_value));//锁仓总额不能超过上限\n', '\t\n', '    FreezeData storage freezeData =  freezeDatas[_investor];\n', '\t\n', '    require(freezeData.amount == 0);//已经参加过锁仓的地址不要进行锁仓\n', '\t\n', '    freezeData.balance = freezeData.balance.add(_value); \n', '\t\n', '    freezeData.amount = freezeData.amount.add(_value);  \n', '\t\n', '    totalFreezed = totalFreezed.add(_value);  \n', '\t\n', '    freezedWallets.push(_investor);//添加进锁仓地址列表    \n', '\t\n', '    emit Freeze(_investor,_value);\n', '    \n', '    return true;\n', '  }\n', '  \n', '  //已经到了解锁时间节点，按照指定的比例进行释放\n', '  function unFreeze(address _investor) onlyFreezeAdmin public returns(bool){\n', '      \n', '    require(freezeDatas[_investor].balance > 0);\n', '    \n', '    require(freezeDatas[_investor].unFreezeCount < unFreezeRules.length);\n', '    \n', '    uint256 unfreezetime = unFreezeRules[freezeDatas[_investor].unFreezeCount].unfreezetime;\n', '    \n', '    uint256 percentage =  unFreezeRules[freezeDatas[_investor].unFreezeCount].percentage;\n', '    \n', '    require(block.timestamp >= unfreezetime);\n', '    \n', '    uint256  currentUnFreezeAmount = freezeDatas[_investor].amount.mul(percentage).div(100);\n', '    \n', '    require(token.balanceOf(address(this)) >= currentUnFreezeAmount);\n', '    \n', '    freezeDatas[_investor].balance = freezeDatas[_investor].balance.sub(currentUnFreezeAmount);\n', '    \n', '    freezeDatas[_investor].unFreezeCount = freezeDatas[_investor].unFreezeCount.add(1);\n', '    \n', '    token.safeTransfer(_investor,currentUnFreezeAmount);\n', '    \n', '    emit Unfreeze(_investor,currentUnFreezeAmount);    \n', '    \n', '    return true;\n', '  }\n', '\n', '}']