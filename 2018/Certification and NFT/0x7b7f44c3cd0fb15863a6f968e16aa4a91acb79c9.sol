['pragma solidity ^0.4.24;\n', '\n', '\n', '/// @title Abstract oracle contract - Functions to be implemented by oracles\n', 'contract Oracle {\n', '\n', '    function isOutcomeSet() public view returns (bool);\n', '    function getOutcome() public view returns (int);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/// @title Proxied - indicates that a contract will be proxied. Also defines storage requirements for Proxy.\n', '/// @author Alan Lu - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="02636e636c42656c6d716b712c726f">[email&#160;protected]</a>>\n', 'contract Proxied {\n', '    address public masterCopy;\n', '}\n', '\n', '/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n', '/// @author Stefan George - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0271766764636c42656c6d716b712c726f">[email&#160;protected]</a>>\n', 'contract Proxy is Proxied {\n', '    /// @dev Constructor function sets address of master copy contract.\n', '    /// @param _masterCopy Master copy address.\n', '    constructor(address _masterCopy)\n', '        public\n', '    {\n', '        require(_masterCopy != 0);\n', '        masterCopy = _masterCopy;\n', '    }\n', '\n', '    /// @dev Fallback function forwards all transactions and returns all received return data.\n', '    function ()\n', '        external\n', '        payable\n', '    {\n', '        address _masterCopy = masterCopy;\n', '        assembly {\n', '            calldatacopy(0, 0, calldatasize())\n', '            let success := delegatecall(not(0), _masterCopy, 0, calldatasize(), 0, 0)\n', '            returndatacopy(0, 0, returndatasize())\n', '            switch success\n', '            case 0 { revert(0, returndatasize()) }\n', '            default { return(0, returndatasize()) }\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract CentralizedBugOracleData {\n', '  event OwnerReplacement(address indexed newOwner);\n', '  event OutcomeAssignment(int outcome);\n', '\n', '  /*\n', '   *  Storage\n', '   */\n', '  address public owner;\n', '  bytes public ipfsHash;\n', '  bool public isSet;\n', '  int public outcome;\n', '  address public maker;\n', '  address public taker;\n', '\n', '  /*\n', '   *  Modifiers\n', '   */\n', '  modifier isOwner () {\n', '      // Only owner is allowed to proceed\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '}\n', '\n', 'contract CentralizedBugOracleProxy is Proxy, CentralizedBugOracleData {\n', '\n', '    /// @dev Constructor sets owner address and IPFS hash\n', '    /// @param _ipfsHash Hash identifying off chain event description\n', '    constructor(address proxied, address _owner, bytes _ipfsHash, address _maker, address _taker)\n', '        public\n', '        Proxy(proxied)\n', '    {\n', '        // Description hash cannot be null\n', '        require(_ipfsHash.length == 46);\n', '        owner = _owner;\n', '        ipfsHash = _ipfsHash;\n', '        maker = _maker;\n', '        taker = _taker;\n', '    }\n', '}\n', '\n', 'contract CentralizedBugOracle is Proxied,Oracle, CentralizedBugOracleData{\n', '\n', '  /// @dev Sets event outcome\n', '  /// @param _outcome Event outcome\n', '  function setOutcome(int _outcome)\n', '      public\n', '      isOwner\n', '  {\n', '      // Result is not set yet\n', '      require(!isSet);\n', '      _setOutcome(_outcome);\n', '  }\n', '\n', '  /// @dev Returns if winning outcome is set\n', '  /// @return Is outcome set?\n', '  function isOutcomeSet()\n', '      public\n', '      view\n', '      returns (bool)\n', '  {\n', '      return isSet;\n', '  }\n', '\n', '  /// @dev Returns outcome\n', '  /// @return Outcome\n', '  function getOutcome()\n', '      public\n', '      view\n', '      returns (int)\n', '  {\n', '      return outcome;\n', '  }\n', '\n', '\n', '  //@dev internal funcion to set the outcome sat\n', '  function _setOutcome(int _outcome) internal {\n', '    isSet = true;\n', '    outcome = _outcome;\n', '    emit OutcomeAssignment(_outcome);\n', '  }\n', '\n', '\n', '}']