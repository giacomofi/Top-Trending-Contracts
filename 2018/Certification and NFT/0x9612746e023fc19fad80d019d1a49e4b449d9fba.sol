['pragma solidity ^0.4.23;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: contracts/TakeBack.sol\n', '\n', 'contract TakeBack is Ownable{\n', '\n', '    // address of RING.sol on ethereum\n', '    address public tokenAdd;\n', '\n', '    address public supervisor;\n', '\n', '    uint256 public networkId;\n', '\n', '    mapping (address => uint256) public userToNonce;\n', '\n', '    // used for old&new users to claim their ring out\n', '    event TakedBack(address indexed _user, uint indexed _nonce, uint256 _value);\n', '    // used for supervisor to claim all kind of token\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '\n', '\n', '    constructor(address _token, address _supervisor, uint256 _networkId) public {\n', '        tokenAdd = _token;\n', '        supervisor = _supervisor;\n', '        networkId = _networkId;\n', '    }\n', '\n', '    // _hashmessage = hash("${_user}${_nonce}${_value}")\n', '    // _v, _r, _s are from supervisor&#39;s signature on _hashmessage\n', '    // claimRing(...) is invoked by the user who want to claim rings\n', '    // while the _hashmessage is signed by supervisor\n', '    function takeBack(uint256 _nonce, uint256 _value, bytes32 _hashmessage, uint8 _v, bytes32 _r, bytes32 _s) public {\n', '        address _user = msg.sender;\n', '\n', '        // verify the _nonce is right\n', '        require(userToNonce[_user] == _nonce);\n', '\n', '        // verify the _hashmessage is signed by supervisor\n', '        require(supervisor == verify(_hashmessage, _v, _r, _s));\n', '\n', '        // verify that the _user, _nonce, _value are exactly what they should be\n', '        require(keccak256(abi.encodePacked(_user,_nonce,_value,networkId)) == _hashmessage);\n', '\n', '        // transfer token from address(this) to _user\n', '        ERC20 token = ERC20(tokenAdd);\n', '        token.transfer(_user, _value);\n', '\n', '        // after the claiming operation succeeds\n', '        userToNonce[_user]  += 1;\n', '        emit TakedBack(_user, _nonce, _value);\n', '    }\n', '\n', '    function verify(bytes32 _hashmessage, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {\n', '        bytes memory prefix = "\\x19EvolutionLand Signed Message:\\n32";\n', '        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, _hashmessage));\n', '        address signer = ecrecover(prefixedHash, _v, _r, _s);\n', '        return signer;\n', '    }\n', '\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (_token == 0x0) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        ERC20 token = ERC20(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '\n', '        emit ClaimedTokens(_token, owner, balance);\n', '    }\n', '\n', '    function changeSupervisor(address _newSupervisor) public onlyOwner {\n', '        supervisor = _newSupervisor;\n', '    }\n', '}']