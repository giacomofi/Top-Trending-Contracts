['pragma solidity ^0.4.2;\n', 'interface token {\n', '   function transfer (address receiver, uint amount) public;\n', '}\n', 'contract Crowdsale {\n', '   address public beneficiary;\n', '   uint public fundingGoal;\n', '   uint public amountRaised;\n', '   uint public currentBalance;\n', '   uint public deadline;\n', '   uint public bonusPhaseOneDeadline;\n', '   uint public bonusPhaseTwoDeadline;\n', '   uint public bonusPhaseThreeDeadline;\n', '   uint public price;\n', '   uint public phaseOneBonusPercent;\n', '   uint public phaseTwoBonusPercent;\n', '   uint public phaseThreeBonusPercent;\n', '   uint public remainingTokens;\n', '   token public tokenReward;\n', '   mapping(address => uint256) public balanceOf;\n', '   bool public crowdsaleClosed = false;\n', '   event GoalReached(address recipient, uint totalAmountRaised);\n', '   event FundTransfer(address backer, uint amount, bool isContribution);\n', '   function Crowdsale(\n', '       address ifSuccessfulSendTo,\n', '       uint fundingGoalInEthers,\n', '       uint durationInMinutes,\n', '       address addressOfTokenUsedAsReward,\n', '       uint phaseOneDuration,\n', '       uint phaseTwoDuration,\n', '       uint phaseThreeDuration,\n', '       uint additionalBonusTokens\n', '   ) public {\n', '       beneficiary = ifSuccessfulSendTo;\n', '       fundingGoal = fundingGoalInEthers * 1 ether;\n', '       deadline = now + durationInMinutes * 1 minutes;\n', '       bonusPhaseOneDeadline = now + phaseOneDuration * 1 minutes;\n', '       bonusPhaseTwoDeadline = now + phaseTwoDuration * 1 minutes;\n', '       bonusPhaseThreeDeadline = now + phaseThreeDuration * 1 minutes;\n', '       price = 0.0002 * 1 ether;\n', '       tokenReward = token(addressOfTokenUsedAsReward);\n', '       currentBalance = 0;\n', '       remainingTokens = (5000 * fundingGoalInEthers * 10 ** uint256(8)) + (additionalBonusTokens * 10 ** uint256(8));\n', '       phaseOneBonusPercent = 40;\n', '       phaseTwoBonusPercent = 35;\n', '       phaseThreeBonusPercent = 30;\n', '   }\n', '   function () public payable {\n', '       require(!crowdsaleClosed);\n', '       require(now < deadline);\n', '       uint amount = msg.value;\n', '       if (msg.sender != beneficiary) {\n', '           require(msg.value >= 1 ether);\n', '           amountRaised += amount;\n', '           uint tokens = uint(amount * 10 ** uint256(8) / price);\n', '           if (now < bonusPhaseOneDeadline) {\n', '               tokens += ((phaseOneBonusPercent * tokens)/100 );\n', '           } else if (now < bonusPhaseTwoDeadline) {\n', '               tokens += ((phaseTwoBonusPercent * tokens)/100);\n', '           } else if (now < bonusPhaseThreeDeadline) {\n', '               tokens += ((phaseThreeBonusPercent * tokens)/100);\n', '           }\n', '           balanceOf[msg.sender] += tokens;\n', '           remainingTokens -= tokens;\n', '           tokenReward.transfer(msg.sender, tokens);\n', '           FundTransfer(msg.sender, amount, true);\n', '       }\n', '       currentBalance += amount;\n', '   }\n', '   function checkGoalReached() public {\n', '       require(beneficiary == msg.sender);\n', '       crowdsaleClosed = true;\n', '   }\n', '   function safeWithdrawal(uint amountInWei) public {\n', '       require(beneficiary == msg.sender);\n', '       if (beneficiary.send(amountInWei)) {\n', '           FundTransfer(beneficiary, amountInWei, false);\n', '           currentBalance -= amountInWei;\n', '       }\n', '   }\n', '   function withdrawUnsold() public {\n', '       require(msg.sender == beneficiary);\n', '       require(remainingTokens > 0);\n', '       tokenReward.transfer(msg.sender, remainingTokens);\n', '   }\n', '}']
['pragma solidity ^0.4.2;\n', 'interface token {\n', '   function transfer (address receiver, uint amount) public;\n', '}\n', 'contract Crowdsale {\n', '   address public beneficiary;\n', '   uint public fundingGoal;\n', '   uint public amountRaised;\n', '   uint public currentBalance;\n', '   uint public deadline;\n', '   uint public bonusPhaseOneDeadline;\n', '   uint public bonusPhaseTwoDeadline;\n', '   uint public bonusPhaseThreeDeadline;\n', '   uint public price;\n', '   uint public phaseOneBonusPercent;\n', '   uint public phaseTwoBonusPercent;\n', '   uint public phaseThreeBonusPercent;\n', '   uint public remainingTokens;\n', '   token public tokenReward;\n', '   mapping(address => uint256) public balanceOf;\n', '   bool public crowdsaleClosed = false;\n', '   event GoalReached(address recipient, uint totalAmountRaised);\n', '   event FundTransfer(address backer, uint amount, bool isContribution);\n', '   function Crowdsale(\n', '       address ifSuccessfulSendTo,\n', '       uint fundingGoalInEthers,\n', '       uint durationInMinutes,\n', '       address addressOfTokenUsedAsReward,\n', '       uint phaseOneDuration,\n', '       uint phaseTwoDuration,\n', '       uint phaseThreeDuration,\n', '       uint additionalBonusTokens\n', '   ) public {\n', '       beneficiary = ifSuccessfulSendTo;\n', '       fundingGoal = fundingGoalInEthers * 1 ether;\n', '       deadline = now + durationInMinutes * 1 minutes;\n', '       bonusPhaseOneDeadline = now + phaseOneDuration * 1 minutes;\n', '       bonusPhaseTwoDeadline = now + phaseTwoDuration * 1 minutes;\n', '       bonusPhaseThreeDeadline = now + phaseThreeDuration * 1 minutes;\n', '       price = 0.0002 * 1 ether;\n', '       tokenReward = token(addressOfTokenUsedAsReward);\n', '       currentBalance = 0;\n', '       remainingTokens = (5000 * fundingGoalInEthers * 10 ** uint256(8)) + (additionalBonusTokens * 10 ** uint256(8));\n', '       phaseOneBonusPercent = 40;\n', '       phaseTwoBonusPercent = 35;\n', '       phaseThreeBonusPercent = 30;\n', '   }\n', '   function () public payable {\n', '       require(!crowdsaleClosed);\n', '       require(now < deadline);\n', '       uint amount = msg.value;\n', '       if (msg.sender != beneficiary) {\n', '           require(msg.value >= 1 ether);\n', '           amountRaised += amount;\n', '           uint tokens = uint(amount * 10 ** uint256(8) / price);\n', '           if (now < bonusPhaseOneDeadline) {\n', '               tokens += ((phaseOneBonusPercent * tokens)/100 );\n', '           } else if (now < bonusPhaseTwoDeadline) {\n', '               tokens += ((phaseTwoBonusPercent * tokens)/100);\n', '           } else if (now < bonusPhaseThreeDeadline) {\n', '               tokens += ((phaseThreeBonusPercent * tokens)/100);\n', '           }\n', '           balanceOf[msg.sender] += tokens;\n', '           remainingTokens -= tokens;\n', '           tokenReward.transfer(msg.sender, tokens);\n', '           FundTransfer(msg.sender, amount, true);\n', '       }\n', '       currentBalance += amount;\n', '   }\n', '   function checkGoalReached() public {\n', '       require(beneficiary == msg.sender);\n', '       crowdsaleClosed = true;\n', '   }\n', '   function safeWithdrawal(uint amountInWei) public {\n', '       require(beneficiary == msg.sender);\n', '       if (beneficiary.send(amountInWei)) {\n', '           FundTransfer(beneficiary, amountInWei, false);\n', '           currentBalance -= amountInWei;\n', '       }\n', '   }\n', '   function withdrawUnsold() public {\n', '       require(msg.sender == beneficiary);\n', '       require(remainingTokens > 0);\n', '       tokenReward.transfer(msg.sender, remainingTokens);\n', '   }\n', '}']
