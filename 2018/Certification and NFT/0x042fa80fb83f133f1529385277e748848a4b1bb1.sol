['pragma solidity ^0.4.19;\n', '\n', 'interface ERC20 {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Airdrop contract used to perform bulk transfers within a single transaction.\n', ' */\n', 'contract Airdrop {\n', '  address _owner;\n', '\n', '  modifier ownerOnly {\n', '    if (_owner == msg.sender) _;\n', '  }\n', '\n', '  function Airdrop() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public ownerOnly {\n', '    _owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Perform the airdrop. Restricted to no more than 300 accounts in a single transactions\n', '   * @notice More than 300 accounts will exceed gas block limit. It is recommended to perform\n', '   * batches using no more than 250 accounts as the actual gas cost is dependent on the\n', '   * tokenContractAddress&#39;s implementation of transfer())\n', '   *\n', '   * @param tokenContractAddress The address of the token contract being transfered.\n', '   * @param recipients Array of accounts receiving tokens.\n', '   * @param amounts Array of amount of tokens to be transferred. Index of amounts lines up with\n', '   *                the index of recipients.\n', '   */\n', '  function drop(address tokenContractAddress, address[] recipients, uint256[] amounts) public ownerOnly {\n', '    require(tokenContractAddress != 0x0);\n', '    require(recipients.length == amounts.length);\n', '    require(recipients.length <= 300);\n', '\n', '    ERC20 tokenContract = ERC20(tokenContractAddress);\n', '\n', '    for (uint8 i = 0; i < recipients.length; i++) {\n', '      tokenContract.transfer(recipients[i], amounts[i]);\n', '    }\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'interface ERC20 {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Airdrop contract used to perform bulk transfers within a single transaction.\n', ' */\n', 'contract Airdrop {\n', '  address _owner;\n', '\n', '  modifier ownerOnly {\n', '    if (_owner == msg.sender) _;\n', '  }\n', '\n', '  function Airdrop() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public ownerOnly {\n', '    _owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Perform the airdrop. Restricted to no more than 300 accounts in a single transactions\n', '   * @notice More than 300 accounts will exceed gas block limit. It is recommended to perform\n', '   * batches using no more than 250 accounts as the actual gas cost is dependent on the\n', "   * tokenContractAddress's implementation of transfer())\n", '   *\n', '   * @param tokenContractAddress The address of the token contract being transfered.\n', '   * @param recipients Array of accounts receiving tokens.\n', '   * @param amounts Array of amount of tokens to be transferred. Index of amounts lines up with\n', '   *                the index of recipients.\n', '   */\n', '  function drop(address tokenContractAddress, address[] recipients, uint256[] amounts) public ownerOnly {\n', '    require(tokenContractAddress != 0x0);\n', '    require(recipients.length == amounts.length);\n', '    require(recipients.length <= 300);\n', '\n', '    ERC20 tokenContract = ERC20(tokenContractAddress);\n', '\n', '    for (uint8 i = 0; i < recipients.length; i++) {\n', '      tokenContract.transfer(recipients[i], amounts[i]);\n', '    }\n', '  }\n', '}']
