['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract Phila_Token is ERC20Interface, Owned {\n', '    string public constant symbol = "φιλα";\n', '    string public constant name = "φιλανθρωπία";\n', '    uint8 public constant decimals = 0;\n', '    uint private constant _totalSupply = 10000000;\n', '\n', '    address public vaultAddress;\n', '    bool public fundingEnabled;\n', '    uint public totalCollected;         // In wei\n', '    uint public tokenPrice;         // In wei\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        balances[this] = _totalSupply;\n', '        emit Transfer(address(0), this, _totalSupply);\n', '    }\n', '\n', '    function setVaultAddress(address _vaultAddress) public onlyOwner {\n', '        vaultAddress = _vaultAddress;\n', '        return;\n', '    }\n', '\n', '    function setFundingEnabled(bool _fundingEnabled) public onlyOwner {\n', '        fundingEnabled = _fundingEnabled;\n', '        return;\n', '    }\n', '\n', '    function updateTokenPrice(uint _newTokenPrice) public onlyOwner {\n', '        require(_newTokenPrice > 0);\n', '        tokenPrice = _newTokenPrice;\n', '        return;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    //\n', '    // THIS TOKENS ARE NOT TRANSFERRABLE.\n', '    //\n', '    // ------------------------------------------------------------------------\n', '    function approve(address, uint) public returns (bool) {\n', '        revert();\n', '        return false;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    //\n', '    // THIS TOKENS ARE NOT TRANSFERRABLE.\n', '    //\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address, address) public constant returns (uint) {\n', '        return 0;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    //\n', '    // THIS TOKENS ARE NOT TRANSFERRABLE.\n', '    //\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) public returns (bool) {\n', '       if (_amount == 0) {\n', '           emit Transfer(msg.sender, _to, _amount);    // Follow the spec to louch the event when transfer 0\n', '           return true;\n', '       }\n', '        revert();\n', '        return false;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // THIS TOKENS ARE NOT TRANSFERRABLE.\n', '    //\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address, address, uint) public returns (bool) {\n', '        revert();\n', '        return false;\n', '    }\n', '\n', '\n', '    function () public payable {\n', '        require (fundingEnabled && (tokenPrice > 0) && (msg.value >= tokenPrice));\n', '        \n', '        totalCollected += msg.value;\n', '\n', '        //Send the ether to the vault\n', '        vaultAddress.transfer(msg.value);\n', '\n', '        uint tokens = msg.value / tokenPrice;\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           require((msg.sender != 0) && (msg.sender != address(this)));\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer throws\n', '           uint previousBalanceFrom = balances[this];\n', '\n', '           require(previousBalanceFrom >= tokens);\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           balances[this] = previousBalanceFrom - tokens;\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           uint previousBalanceTo = balances[msg.sender];\n', '           require(previousBalanceTo + tokens >= previousBalanceTo); // Check for overflow\n', '           balances[msg.sender] = previousBalanceTo + tokens;\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           emit Transfer(this, msg.sender, tokens);\n', '\n', '        return;\n', '    }\n', '\n', '\n', '    /// @notice This method can be used by the owner to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    //\n', '    // THIS TOKENS ARE NOT TRANSFERRABLE.\n', '    //\n', '    function claimTokens(address _token) public onlyOwner {\n', '        require(_token != address(this));\n', '        if (_token == 0x0) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        ERC20Interface token = ERC20Interface(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '        emit ClaimedTokens(_token, owner, balance);\n', '    }\n', '    \n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract Phila_Token is ERC20Interface, Owned {\n', '    string public constant symbol = "φιλα";\n', '    string public constant name = "φιλανθρωπία";\n', '    uint8 public constant decimals = 0;\n', '    uint private constant _totalSupply = 10000000;\n', '\n', '    address public vaultAddress;\n', '    bool public fundingEnabled;\n', '    uint public totalCollected;         // In wei\n', '    uint public tokenPrice;         // In wei\n', '\n', '    mapping(address => uint) balances;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        balances[this] = _totalSupply;\n', '        emit Transfer(address(0), this, _totalSupply);\n', '    }\n', '\n', '    function setVaultAddress(address _vaultAddress) public onlyOwner {\n', '        vaultAddress = _vaultAddress;\n', '        return;\n', '    }\n', '\n', '    function setFundingEnabled(bool _fundingEnabled) public onlyOwner {\n', '        fundingEnabled = _fundingEnabled;\n', '        return;\n', '    }\n', '\n', '    function updateTokenPrice(uint _newTokenPrice) public onlyOwner {\n', '        require(_newTokenPrice > 0);\n', '        tokenPrice = _newTokenPrice;\n', '        return;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint) {\n', '        return _totalSupply  - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    //\n', '    // THIS TOKENS ARE NOT TRANSFERRABLE.\n', '    //\n', '    // ------------------------------------------------------------------------\n', '    function approve(address, uint) public returns (bool) {\n', '        revert();\n', '        return false;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    //\n', '    // THIS TOKENS ARE NOT TRANSFERRABLE.\n', '    //\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address, address) public constant returns (uint) {\n', '        return 0;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", '    //\n', '    // THIS TOKENS ARE NOT TRANSFERRABLE.\n', '    //\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint _amount) public returns (bool) {\n', '       if (_amount == 0) {\n', '           emit Transfer(msg.sender, _to, _amount);    // Follow the spec to louch the event when transfer 0\n', '           return true;\n', '       }\n', '        revert();\n', '        return false;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // THIS TOKENS ARE NOT TRANSFERRABLE.\n', '    //\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address, address, uint) public returns (bool) {\n', '        revert();\n', '        return false;\n', '    }\n', '\n', '\n', '    function () public payable {\n', '        require (fundingEnabled && (tokenPrice > 0) && (msg.value >= tokenPrice));\n', '        \n', '        totalCollected += msg.value;\n', '\n', '        //Send the ether to the vault\n', '        vaultAddress.transfer(msg.value);\n', '\n', '        uint tokens = msg.value / tokenPrice;\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           require((msg.sender != 0) && (msg.sender != address(this)));\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer throws\n', '           uint previousBalanceFrom = balances[this];\n', '\n', '           require(previousBalanceFrom >= tokens);\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           balances[this] = previousBalanceFrom - tokens;\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           uint previousBalanceTo = balances[msg.sender];\n', '           require(previousBalanceTo + tokens >= previousBalanceTo); // Check for overflow\n', '           balances[msg.sender] = previousBalanceTo + tokens;\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           emit Transfer(this, msg.sender, tokens);\n', '\n', '        return;\n', '    }\n', '\n', '\n', '    /// @notice This method can be used by the owner to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    //\n', '    // THIS TOKENS ARE NOT TRANSFERRABLE.\n', '    //\n', '    function claimTokens(address _token) public onlyOwner {\n', '        require(_token != address(this));\n', '        if (_token == 0x0) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        ERC20Interface token = ERC20Interface(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '        emit ClaimedTokens(_token, owner, balance);\n', '    }\n', '    \n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '}']
