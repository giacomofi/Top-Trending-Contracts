['library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev XGETokensale contract describes deatils of\n', ' * Exchangeable Gram Equivalent tokensale\n', ' */\n', 'contract XGETokensale is Pausable, Destructible {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;    \n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * @dev Price of XGE token in dollars is fixed as 1.995\n', '     * so in order to calculate the right price from this variable\n', '     * we need to divide result by 1000\n', '     */\n', '    uint256 public USDXGE = 1995;\n', '\n', '    /**\n', '     * @dev Price of ETH in dollars\n', '     * To save percition we base it onto 10**18\n', '     * and mutiply by 1000 to compensate USGXGE\n', '     */\n', '    uint256 public USDETH = 400 * 10**21;\n', '\n', '    /**\n', '     * @dev minimum amount of tokens that can be bought\n', '     */\n', '    uint256 public MIN_AMOUNT = 100 * 10**18;\n', '\n', '    /**\n', '     * Whitelist of approved buyers\n', '     */\n', '    mapping(address => uint8) public whitelist;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * Event for adding new beneficeary account to the contract whitelist\n', '     * @param beneficiary who will get the tokens\n', '     */\n', '    event WhitelistAdd(address indexed beneficiary);\n', '    \n', '    /**\n', '     * Event for removing beneficeary account from the contract whitelist\n', '     * @param beneficiary who was gonna get the tokens\n', '     */\n', '    event WhitelistRemove(address indexed beneficiary);\n', '\n', '    /**\n', '     * Event for update USD/ETH conversion rate\n', '     * @param oldRate old rate\n', '     * @param newRate new rate\n', '     */\n', '    event USDETHRateUpdate(uint256 oldRate, uint256 newRate);\n', '    \n', '    /**\n', '     * Event for update USD/XGE conversion rate\n', '     * @param oldRate old rate\n', '     * @param newRate new rate\n', '     */\n', '    event USDXGERateUpdate(uint256 oldRate, uint256 newRate);\n', '  \n', '    /**\n', '     * @dev XGETokensale constructor\n', '     * @param _wallet wallet that will hold the main balance\n', '     * @param _token address of deployed XGEToken contract\n', '     */\n', '    function XGETokensale(address _wallet, ERC20 _token) public\n', '    {\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Function that updates ETH/USD rate\n', '     * Meant too be called only by owner\n', '     */\n', '    function updateUSDETH(uint256 rate) public onlyOwner {\n', '        require(rate > 0);\n', '        USDETHRateUpdate(USDETH, rate * 10**18);\n', '        USDETH = rate * 10**18;\n', '    }\n', '\n', '    /**\n', '     * @dev Function that updates ETH/XGE rate\n', '     * Meant too be called only by owner\n', '     */\n', '    function updateUSDXGE(uint256 rate) public onlyOwner {\n', '        require(rate > 0);\n', '        USDETHRateUpdate(USDXGE, rate);\n', '        USDXGE = rate;\n', '    }\n', '\n', '    /**\n', '     * @dev Mail method that contains tokensale logic\n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '        require(_beneficiary != address(0));\n', '        require(whitelist[_beneficiary] != 0);\n', '        require(msg.value != 0);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 rate = USDETH.div(USDXGE);\n', '\n', '        uint256 tokens = weiAmount.mul(rate).div(10**18);\n', '\n', '        // Revert if amount of tokens less then minimum\n', '        if (tokens < MIN_AMOUNT) {\n', '            revert();\n', '        }\n', '\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        token.transferFrom(owner, _beneficiary, tokens);\n', '        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        wallet.transfer(weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Add buyer to whitelist so it will possbile for him to buy a token\n', '     * @param buyer address to add\n', '     */\n', '    function addToWhitelist(address buyer) public onlyOwner {\n', '        require(buyer != address(0));\n', '        whitelist[buyer] = 1;\n', '        WhitelistAdd(buyer);\n', '    }\n', '\n', '    /**\n', '     * @dev Remove buyer fromt whitelist\n', '     * @param buyer address to remove\n', '     */\n', '    function removeFromWhitelist(address buyer) public onlyOwner {\n', '        require(buyer != address(0));\n', '        delete whitelist[buyer];\n', '        WhitelistRemove(buyer);\n', '    }\n', '}']
['library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev XGETokensale contract describes deatils of\n', ' * Exchangeable Gram Equivalent tokensale\n', ' */\n', 'contract XGETokensale is Pausable, Destructible {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;    \n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * @dev Price of XGE token in dollars is fixed as 1.995\n', '     * so in order to calculate the right price from this variable\n', '     * we need to divide result by 1000\n', '     */\n', '    uint256 public USDXGE = 1995;\n', '\n', '    /**\n', '     * @dev Price of ETH in dollars\n', '     * To save percition we base it onto 10**18\n', '     * and mutiply by 1000 to compensate USGXGE\n', '     */\n', '    uint256 public USDETH = 400 * 10**21;\n', '\n', '    /**\n', '     * @dev minimum amount of tokens that can be bought\n', '     */\n', '    uint256 public MIN_AMOUNT = 100 * 10**18;\n', '\n', '    /**\n', '     * Whitelist of approved buyers\n', '     */\n', '    mapping(address => uint8) public whitelist;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * Event for adding new beneficeary account to the contract whitelist\n', '     * @param beneficiary who will get the tokens\n', '     */\n', '    event WhitelistAdd(address indexed beneficiary);\n', '    \n', '    /**\n', '     * Event for removing beneficeary account from the contract whitelist\n', '     * @param beneficiary who was gonna get the tokens\n', '     */\n', '    event WhitelistRemove(address indexed beneficiary);\n', '\n', '    /**\n', '     * Event for update USD/ETH conversion rate\n', '     * @param oldRate old rate\n', '     * @param newRate new rate\n', '     */\n', '    event USDETHRateUpdate(uint256 oldRate, uint256 newRate);\n', '    \n', '    /**\n', '     * Event for update USD/XGE conversion rate\n', '     * @param oldRate old rate\n', '     * @param newRate new rate\n', '     */\n', '    event USDXGERateUpdate(uint256 oldRate, uint256 newRate);\n', '  \n', '    /**\n', '     * @dev XGETokensale constructor\n', '     * @param _wallet wallet that will hold the main balance\n', '     * @param _token address of deployed XGEToken contract\n', '     */\n', '    function XGETokensale(address _wallet, ERC20 _token) public\n', '    {\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Function that updates ETH/USD rate\n', '     * Meant too be called only by owner\n', '     */\n', '    function updateUSDETH(uint256 rate) public onlyOwner {\n', '        require(rate > 0);\n', '        USDETHRateUpdate(USDETH, rate * 10**18);\n', '        USDETH = rate * 10**18;\n', '    }\n', '\n', '    /**\n', '     * @dev Function that updates ETH/XGE rate\n', '     * Meant too be called only by owner\n', '     */\n', '    function updateUSDXGE(uint256 rate) public onlyOwner {\n', '        require(rate > 0);\n', '        USDETHRateUpdate(USDXGE, rate);\n', '        USDXGE = rate;\n', '    }\n', '\n', '    /**\n', '     * @dev Mail method that contains tokensale logic\n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '        require(_beneficiary != address(0));\n', '        require(whitelist[_beneficiary] != 0);\n', '        require(msg.value != 0);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 rate = USDETH.div(USDXGE);\n', '\n', '        uint256 tokens = weiAmount.mul(rate).div(10**18);\n', '\n', '        // Revert if amount of tokens less then minimum\n', '        if (tokens < MIN_AMOUNT) {\n', '            revert();\n', '        }\n', '\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        token.transferFrom(owner, _beneficiary, tokens);\n', '        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '        wallet.transfer(weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Add buyer to whitelist so it will possbile for him to buy a token\n', '     * @param buyer address to add\n', '     */\n', '    function addToWhitelist(address buyer) public onlyOwner {\n', '        require(buyer != address(0));\n', '        whitelist[buyer] = 1;\n', '        WhitelistAdd(buyer);\n', '    }\n', '\n', '    /**\n', '     * @dev Remove buyer fromt whitelist\n', '     * @param buyer address to remove\n', '     */\n', '    function removeFromWhitelist(address buyer) public onlyOwner {\n', '        require(buyer != address(0));\n', '        delete whitelist[buyer];\n', '        WhitelistRemove(buyer);\n', '    }\n', '}']
