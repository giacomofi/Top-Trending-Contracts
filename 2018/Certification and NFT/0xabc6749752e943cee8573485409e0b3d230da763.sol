['pragma solidity 0.4.20;\n', '\n', '/*\n', '* Team AppX presents...\n', '* https://powtf.com/\n', '* https://discord.gg/Ne2PTnS\n', '*\n', '* /======== A Community Marketing Fund Project for PoWTF ========/\n', '*\n', '* -> WTF is this!?\n', '* In short, this is a contract to accept PoWTF token / ETH donations from community members\n', '* as a way of gathering funds for regular marketing and contests.\n', '* [✓] Hands of Stainless Steel! This contract never sells, it can&#39;t and just simply don&#39;t know how to sell!\n', '* [✓] Community Goods: All dividends will be used for promotional fee / contest prizes, when the accumulated dividends reached certain amount, we&#39;ll create some campaign.\n', '* [✓] Transparency: How to use the dividends will be regularly updated in website and discord announcement.\n', '* [✓] Security: You need to trust me (@AppX Matthew) not taking the dividends and go away :)\n', '* \n', '* -> Quotes\n', '* "Real, sustainable community change requires the initiative and engagement of community members." - Helene D. Gayle\n', '* "Every successful individual knows that his or her achievement depends on a community of persons working together." - Paul Ryan\n', '* "Empathy is the starting point for creating a community and taking action. It&#39;s the impetus for creating change." - Max Carver\n', '* "WTF Moon!" - AppX Matthew \n', '*\n', '* =================================================*\n', '*                                                  *\n', '* __________      __      ________________________ *\n', '* \\______   \\____/  \\    /  \\__    ___/\\_   _____/ *\n', '*  |     ___/  _ \\   \\/\\/   / |    |    |    __)   *\n', '*  |    |  (  <_> )        /  |    |    |     \\    *\n', '*  |____|   \\____/ \\__/\\  /   |____|    \\___  /    *\n', '*                       \\/                  \\/     *\n', '*                                                  *\n', '* =================================================*\n', '*\n', '*/\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title PullPayment\n', ' * @dev Base contract supporting async send for pull payments. Inherit from this\n', ' * contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  /**\n', '   * @dev withdraw accumulated balance, called by payee.\n', '   */\n', '  function withdrawPayments() public {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '\n', '  /**\n', '   * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '   * @param dest The destination address of the funds.\n', '   * @param amount The amount to transfer.\n', '   */\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '  \n', '}\n', '\n', '/// @dev Interface to the PoWTF contract.\n', 'contract PoWTFInterface {\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS           =\n', '    =======================================*/\n', '\n', '    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '    function buy(address _referredBy) public payable returns (uint256);\n', '\n', '    /// @dev Converts all of caller&#39;s dividends to tokens.\n', '    function reinvest() public;\n', '\n', '    /// @dev Alias of sell() and withdraw().\n', '    function exit() public;\n', '\n', '    /// @dev Withdraws all of the callers earnings.\n', '    function withdraw() public;\n', '\n', '    /// @dev Liquifies tokens to ethereum.\n', '    function sell(uint256 _amountOfTokens) public;\n', '\n', '    /**\n', '     * @dev Transfer tokens from the caller to a new holder.\n', '     *  Remember, there&#39;s a 15% fee here as well.\n', '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) public returns (bool);\n', '\n', '\n', '    /*=====================================\n', '    =      HELPERS AND CALCULATORS        =\n', '    =====================================*/\n', '\n', '    /**\n', '     * @dev Method to view the current Ethereum stored in the contract\n', '     *  Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance() public view returns (uint256);\n', '\n', '    /// @dev Retrieve the total token supply.\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    /// @dev Retrieve the tokens owned by the caller.\n', '    function myTokens() public view returns (uint256);\n', '\n', '    /**\n', '     * @dev Retrieve the dividends owned by the caller.\n', '     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     *  But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus) public view returns (uint256);\n', '\n', '    /// @dev Retrieve the token balance of any single address.\n', '    function balanceOf(address _customerAddress) public view returns (uint256);\n', '\n', '    /// @dev Retrieve the dividend balance of any single address.\n', '    function dividendsOf(address _customerAddress) public view returns (uint256);\n', '\n', '    /// @dev Return the sell price of 1 individual token.\n', '    function sellPrice() public view returns (uint256);\n', '\n', '    /// @dev Return the buy price of 1 individual token.\n', '    function buyPrice() public view returns (uint256);\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256);\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256);\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '    /// @dev Internal function to actually purchase the tokens.\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256);\n', '\n', '    /**\n', '     * @dev Calculate Token price based on an amount of incoming ethereum\n', '     *  It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256);\n', '\n', '    /**\n', '     * @dev Calculate token sell value.\n', '     *  It&#39;s an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n', '     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256);\n', '\n', '    /// @dev This is where all your gas goes.\n', '    function sqrt(uint256 x) internal pure returns (uint256 y);\n', '\n', '\n', '}\n', '\n', '/// @dev Core Contract\n', 'contract PoWTFCommunityFund is Ownable, PullPayment {\n', '\n', '\n', '    /*=================================\n', '    =            CONTRACTS            =\n', '    =================================*/\n', '\n', '    /// @dev The address of the EtherDungeonCore contract.\n', '    PoWTFInterface public poWtfContract = PoWTFInterface(0x702392282255f8c0993dBBBb148D80D2ef6795b1);\n', '\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '    event LogDonateETH(\n', '        address indexed donarAddress,\n', '        uint256 amount,\n', '        uint256 timestamp\n', '    );\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS           =\n', '    =======================================*/\n', '    \n', '    /// @dev Besides donating PoWTF tokens, you can also donate ETH as well.\n', '    function donateETH() public payable {\n', '        // When you make an ETH donation, it will use your address as referrer / masternode.\n', '        poWtfContract.buy.value(msg.value)(msg.sender);\n', '        \n', '        // Emit LogDonateETH event.\n', '        LogDonateETH(msg.sender, msg.value, now);\n', '    }\n', '\n', '    /// @dev Converts ETH dividends to PoWTF tokens.\n', '    function reinvestDividend() onlyOwner public {\n', '        poWtfContract.reinvest();\n', '    }\n', '\n', '    /// @dev Withdraw ETH dividends and put it to this contract.\n', '    function withdrawDividend() onlyOwner public {\n', '        poWtfContract.withdraw();\n', '    }\n', '\n', '    /// @dev Assign who can get how much of the dividends.\n', '    function assignFundReceiver(address _fundReceiver, uint _amount) onlyOwner public {\n', '        // Ensure there are sufficient available balance.\n', '        require(_amount <= this.balance - totalPayments);\n', '\n', '        // Using the asyncSend function of PullPayment, fund receiver can withdraw it anytime.\n', '        asyncSend(_fundReceiver, _amount);\n', '    }\n', '\n', '    /// @dev Fallback function to allow receiving funds from PoWTF contract.\n', '    function() public payable {}\n', '\n', '    /*=======================================\n', '    =           SETTER FUNCTIONS            =\n', '    =======================================*/\n', '\n', '    function setPoWtfContract(address _newPoWtfContractAddress) onlyOwner external {\n', '        poWtfContract = PoWTFInterface(_newPoWtfContractAddress);\n', '    }\n', '\n', '    \n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}']
['pragma solidity 0.4.20;\n', '\n', '/*\n', '* Team AppX presents...\n', '* https://powtf.com/\n', '* https://discord.gg/Ne2PTnS\n', '*\n', '* /======== A Community Marketing Fund Project for PoWTF ========/\n', '*\n', '* -> WTF is this!?\n', '* In short, this is a contract to accept PoWTF token / ETH donations from community members\n', '* as a way of gathering funds for regular marketing and contests.\n', "* [✓] Hands of Stainless Steel! This contract never sells, it can't and just simply don't know how to sell!\n", "* [✓] Community Goods: All dividends will be used for promotional fee / contest prizes, when the accumulated dividends reached certain amount, we'll create some campaign.\n", '* [✓] Transparency: How to use the dividends will be regularly updated in website and discord announcement.\n', '* [✓] Security: You need to trust me (@AppX Matthew) not taking the dividends and go away :)\n', '* \n', '* -> Quotes\n', '* "Real, sustainable community change requires the initiative and engagement of community members." - Helene D. Gayle\n', '* "Every successful individual knows that his or her achievement depends on a community of persons working together." - Paul Ryan\n', '* "Empathy is the starting point for creating a community and taking action. It\'s the impetus for creating change." - Max Carver\n', '* "WTF Moon!" - AppX Matthew \n', '*\n', '* =================================================*\n', '*                                                  *\n', '* __________      __      ________________________ *\n', '* \\______   \\____/  \\    /  \\__    ___/\\_   _____/ *\n', '*  |     ___/  _ \\   \\/\\/   / |    |    |    __)   *\n', '*  |    |  (  <_> )        /  |    |    |     \\    *\n', '*  |____|   \\____/ \\__/\\  /   |____|    \\___  /    *\n', '*                       \\/                  \\/     *\n', '*                                                  *\n', '* =================================================*\n', '*\n', '*/\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title PullPayment\n', ' * @dev Base contract supporting async send for pull payments. Inherit from this\n', ' * contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  /**\n', '   * @dev withdraw accumulated balance, called by payee.\n', '   */\n', '  function withdrawPayments() public {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '\n', '  /**\n', '   * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '   * @param dest The destination address of the funds.\n', '   * @param amount The amount to transfer.\n', '   */\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '  \n', '}\n', '\n', '/// @dev Interface to the PoWTF contract.\n', 'contract PoWTFInterface {\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS           =\n', '    =======================================*/\n', '\n', '    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n', '    function buy(address _referredBy) public payable returns (uint256);\n', '\n', "    /// @dev Converts all of caller's dividends to tokens.\n", '    function reinvest() public;\n', '\n', '    /// @dev Alias of sell() and withdraw().\n', '    function exit() public;\n', '\n', '    /// @dev Withdraws all of the callers earnings.\n', '    function withdraw() public;\n', '\n', '    /// @dev Liquifies tokens to ethereum.\n', '    function sell(uint256 _amountOfTokens) public;\n', '\n', '    /**\n', '     * @dev Transfer tokens from the caller to a new holder.\n', "     *  Remember, there's a 15% fee here as well.\n", '     */\n', '    function transfer(address _toAddress, uint256 _amountOfTokens) public returns (bool);\n', '\n', '\n', '    /*=====================================\n', '    =      HELPERS AND CALCULATORS        =\n', '    =====================================*/\n', '\n', '    /**\n', '     * @dev Method to view the current Ethereum stored in the contract\n', '     *  Example: totalEthereumBalance()\n', '     */\n', '    function totalEthereumBalance() public view returns (uint256);\n', '\n', '    /// @dev Retrieve the total token supply.\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    /// @dev Retrieve the tokens owned by the caller.\n', '    function myTokens() public view returns (uint256);\n', '\n', '    /**\n', '     * @dev Retrieve the dividends owned by the caller.\n', '     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n', '     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n', '     *  But in the internal calculations, we want them separate.\n', '     */\n', '    function myDividends(bool _includeReferralBonus) public view returns (uint256);\n', '\n', '    /// @dev Retrieve the token balance of any single address.\n', '    function balanceOf(address _customerAddress) public view returns (uint256);\n', '\n', '    /// @dev Retrieve the dividend balance of any single address.\n', '    function dividendsOf(address _customerAddress) public view returns (uint256);\n', '\n', '    /// @dev Return the sell price of 1 individual token.\n', '    function sellPrice() public view returns (uint256);\n', '\n', '    /// @dev Return the buy price of 1 individual token.\n', '    function buyPrice() public view returns (uint256);\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n', '    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256);\n', '\n', '    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n', '    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256);\n', '\n', '\n', '    /*==========================================\n', '    =            INTERNAL FUNCTIONS            =\n', '    ==========================================*/\n', '\n', '    /// @dev Internal function to actually purchase the tokens.\n', '    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256);\n', '\n', '    /**\n', '     * @dev Calculate Token price based on an amount of incoming ethereum\n', "     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256);\n', '\n', '    /**\n', '     * @dev Calculate token sell value.\n', "     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n", '     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n', '     */\n', '    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256);\n', '\n', '    /// @dev This is where all your gas goes.\n', '    function sqrt(uint256 x) internal pure returns (uint256 y);\n', '\n', '\n', '}\n', '\n', '/// @dev Core Contract\n', 'contract PoWTFCommunityFund is Ownable, PullPayment {\n', '\n', '\n', '    /*=================================\n', '    =            CONTRACTS            =\n', '    =================================*/\n', '\n', '    /// @dev The address of the EtherDungeonCore contract.\n', '    PoWTFInterface public poWtfContract = PoWTFInterface(0x702392282255f8c0993dBBBb148D80D2ef6795b1);\n', '\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '    event LogDonateETH(\n', '        address indexed donarAddress,\n', '        uint256 amount,\n', '        uint256 timestamp\n', '    );\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS           =\n', '    =======================================*/\n', '    \n', '    /// @dev Besides donating PoWTF tokens, you can also donate ETH as well.\n', '    function donateETH() public payable {\n', '        // When you make an ETH donation, it will use your address as referrer / masternode.\n', '        poWtfContract.buy.value(msg.value)(msg.sender);\n', '        \n', '        // Emit LogDonateETH event.\n', '        LogDonateETH(msg.sender, msg.value, now);\n', '    }\n', '\n', '    /// @dev Converts ETH dividends to PoWTF tokens.\n', '    function reinvestDividend() onlyOwner public {\n', '        poWtfContract.reinvest();\n', '    }\n', '\n', '    /// @dev Withdraw ETH dividends and put it to this contract.\n', '    function withdrawDividend() onlyOwner public {\n', '        poWtfContract.withdraw();\n', '    }\n', '\n', '    /// @dev Assign who can get how much of the dividends.\n', '    function assignFundReceiver(address _fundReceiver, uint _amount) onlyOwner public {\n', '        // Ensure there are sufficient available balance.\n', '        require(_amount <= this.balance - totalPayments);\n', '\n', '        // Using the asyncSend function of PullPayment, fund receiver can withdraw it anytime.\n', '        asyncSend(_fundReceiver, _amount);\n', '    }\n', '\n', '    /// @dev Fallback function to allow receiving funds from PoWTF contract.\n', '    function() public payable {}\n', '\n', '    /*=======================================\n', '    =           SETTER FUNCTIONS            =\n', '    =======================================*/\n', '\n', '    function setPoWtfContract(address _newPoWtfContractAddress) onlyOwner external {\n', '        poWtfContract = PoWTFInterface(_newPoWtfContractAddress);\n', '    }\n', '\n', '    \n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}']
