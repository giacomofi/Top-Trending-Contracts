['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract Primacorp is Ownable {\n', '\n', '    mapping (address => uint256) public allowance;\n', '    uint256 public contributionInWei;\n', '    address _tokenAddress = 0x2A22e5cCA00a3D63308fa39f29202eB1b39eEf52;\n', '    address _wallet = 0x269D55Ef8AcFdf0B83cCd08278ab440f87f9E9D8;\n', '\n', '    constructor(uint256 _contributionInWei) public {\n', '        contributionInWei = _contributionInWei;\n', '    }\n', '\n', '    function() public payable {\n', '        require(allowance[msg.sender] > 0);\n', '        require(msg.value >= contributionInWei);\n', '        ERC20(_tokenAddress).transfer(msg.sender, allowance[msg.sender]);\n', '        allowance[msg.sender] = 0;\n', '        _wallet.transfer(msg.value);\n', '    }\n', '\n', '    function withdraw(uint256 amount) external onlyOwner {\n', '        ERC20(_tokenAddress).transfer(msg.sender, amount);\n', '    }\n', '\n', '    function changeAllowance(address _address, uint256 value) external onlyOwner {\n', '        allowance[_address] = value;\n', '    }\n', '\n', '    function setWalletAddress(address newWalletAddress) external onlyOwner {\n', '        _wallet = newWalletAddress;\n', '    }\n', '\n', '    function setContributionInWei(uint256 _valueInWei) external onlyOwner {\n', '        contributionInWei = _valueInWei;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', 'contract Primacorp is Ownable {\n', '\n', '    mapping (address => uint256) public allowance;\n', '    uint256 public contributionInWei;\n', '    address _tokenAddress = 0x2A22e5cCA00a3D63308fa39f29202eB1b39eEf52;\n', '    address _wallet = 0x269D55Ef8AcFdf0B83cCd08278ab440f87f9E9D8;\n', '\n', '    constructor(uint256 _contributionInWei) public {\n', '        contributionInWei = _contributionInWei;\n', '    }\n', '\n', '    function() public payable {\n', '        require(allowance[msg.sender] > 0);\n', '        require(msg.value >= contributionInWei);\n', '        ERC20(_tokenAddress).transfer(msg.sender, allowance[msg.sender]);\n', '        allowance[msg.sender] = 0;\n', '        _wallet.transfer(msg.value);\n', '    }\n', '\n', '    function withdraw(uint256 amount) external onlyOwner {\n', '        ERC20(_tokenAddress).transfer(msg.sender, amount);\n', '    }\n', '\n', '    function changeAllowance(address _address, uint256 value) external onlyOwner {\n', '        allowance[_address] = value;\n', '    }\n', '\n', '    function setWalletAddress(address newWalletAddress) external onlyOwner {\n', '        _wallet = newWalletAddress;\n', '    }\n', '\n', '    function setContributionInWei(uint256 _valueInWei) external onlyOwner {\n', '        contributionInWei = _valueInWei;\n', '    }\n', '\n', '}']
