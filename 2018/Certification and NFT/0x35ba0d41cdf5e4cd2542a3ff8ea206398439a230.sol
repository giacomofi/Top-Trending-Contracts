['pragma solidity ^0.4.18;\n', '/**\n', '* SMARTRealty\n', '* ERC-20 Token Standard Compliant + Crowdsale\n', '* @author Oyewole A. Samuel oyewoleabayomi@gmail.com\n', '*/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined {\n', '    //This token contract is administered\n', '    address public admin; //Admin address is public\n', '    bool public lockSupply; //Mint and Burn Lock flag\n', '    bool public lockTransfer; //Transfer Lock flag\n', '    address public allowedAddress; //an address that can override lock condition\n', '    bool public lockTokenSupply;\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    function admined() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        Admined(admin);\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set an allowed address\n', '    * @param _to The address to give privileges.\n', '    */\n', '    function setAllowedAddress(address _to) public {\n', '        allowedAddress = _to;\n', '        AllowedSet(_to);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier supplyLock() { //A modifier to lock mint and burn transactions\n', '        require(lockSupply == false);\n', '        _;\n', '    }\n', '\n', '    modifier transferLock() { //A modifier to lock transactions\n', '        require(lockTransfer == false || allowedAddress == msg.sender);\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        admin = _newAdmin;\n', '        TransferAdminship(admin);\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set mint and burn locks\n', '    * @param _set boolean flag (true | false)\n', '    */\n', '    function setSupplyLock(bool _set) onlyAdmin public { //Only the admin can set a lock on supply\n', '        lockSupply = _set;\n', '        SetSupplyLock(_set);\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set transfer lock\n', '    * @param _set boolean flag (true | false)\n', '    */\n', '    function setTransferLock(bool _set) onlyAdmin public { //Only the admin can set a lock on transfers\n', '        lockTransfer = _set;\n', '        SetTransferLock(_set);\n', '    }\n', '\n', '    function setLockTokenSupply(bool _set) onlyAdmin public {\n', '        lockTokenSupply = _set;\n', '        SetLockTokenSupply(_set);\n', '    }\n', '\n', '    function getLockTokenSupply() returns (bool) {\n', '        return lockTokenSupply;\n', '    }\n', '\n', '    //All admin actions have a log for public review\n', '    event AllowedSet(address _to);\n', '    event SetSupplyLock(bool _set);\n', '    event SetTransferLock(bool _set);\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '    event SetLockTokenSupply(bool _set);\n', '\n', '}\n', '\n', '/**\n', ' * Token contract interface for external use\n', ' */\n', 'contract ERC20TokenInterface {\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '}\n', '\n', '/**\n', '* @title Token definition\n', '* @dev Define token paramters including ERC20 ones\n', '*/\n', 'contract StandardToken is ERC20TokenInterface, admined { //Standard definition of a ERC20Token\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '    mapping (address => bool) frozen; //A mapping of frozen accounts\n', '\n', '    /**\n', '    * @dev Get the balance of an specified address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '      return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) transferLock public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(balances[msg.sender] >= _value);\n', '        require(frozen[msg.sender]==false);\n', '        balances[msg.sender] = balances[msg.sender].safeSub(_value);\n', '        balances[_to] = balances[_to].safeAdd(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token from an address to another specified address using allowance\n', '    * @param _from The address where token comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) transferLock public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n', '        require(frozen[_from]==false);\n', '        balances[_to] = balances[_to].safeAdd(_value);\n', '        balances[_from] = balances[_from].safeSub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].safeSub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Assign allowance to an specified address to use the owner balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '      allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Mint token to an specified address.\n', '    * @param _target The address of the receiver of the tokens.\n', '    * @param _mintedAmount amount to mint.\n', '    */\n', '    function mintToken(address _target, uint256 _mintedAmount) onlyAdmin supplyLock public {\n', '        balances[_target] = SafeMath.safeAdd(balances[_target], _mintedAmount);\n', '        totalSupply = SafeMath.safeAdd(totalSupply, _mintedAmount);\n', '        Transfer(0, this, _mintedAmount);\n', '        Transfer(this, _target, _mintedAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Burn token of an specified address.\n', '    * @param _target The address of the holder of the tokens.\n', '    * @param _burnedAmount amount to burn.\n', '    */\n', '    function burnToken(address _target, uint256 _burnedAmount) onlyAdmin supplyLock public {\n', '        balances[_target] = SafeMath.safeSub(balances[_target], _burnedAmount);\n', '        totalSupply = SafeMath.safeSub(totalSupply, _burnedAmount);\n', '        Burned(_target, _burnedAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Frozen account.\n', '    * @param _target The address to being frozen.\n', '    * @param _flag The status of the frozen\n', '    */\n', '    function setFrozen(address _target,bool _flag) onlyAdmin public {\n', '        frozen[_target]=_flag;\n', '        FrozenStatus(_target,_flag);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burned(address indexed _target, uint256 _value);\n', '    event FrozenStatus(address _target,bool _flag);\n', '}\n', '\n', 'contract SMARTRealty is StandardToken{\n', '    //using SafeMath for uint256;\n', '    \n', '    string public name = "SMARTRealty";\n', '    string public symbol = "RLTY";\n', '    uint8 public decimals = 8;\n', '    string public version = "1.0.0";\n', '\n', '    uint public constant RATE = 1250; //1 RLTY = 0.0008 ETH\n', '    address public owner;\n', '    \n', '    // amount of raised money in wei\n', '    uint256 weiRaised;    \n', '    \n', '    struct ICOPhase {\n', '        uint fromTimestamp; //ico starting timestamp\n', '        uint toTimestamp; // ico end timestamp\n', '        uint256 minimum; // Minimum purchase for each phase\n', '        uint256 fundRaised;\n', '        uint bonus; // In percent, ie 10 is a 10% for bonus\n', '        uint totalNumberOfTokenPurchase; //number of token allowed for each phase\n', '    }\n', '    \n', '    mapping(uint => ICOPhase) phases;\n', '    uint icoPhaseCounter = 0;\n', '    \n', '    enum IcoStatus{Pending, Active, Inactive}\n', '    IcoStatus status;    \n', '    \n', '    function SMARTRealty() public payable {\n', '        \n', '        owner = msg.sender;\n', '        \n', '        totalSupply = 500000000 * (10**uint256(decimals));          //500 million initial token creation\n', '        \n', '        //Tokens to creator wallet - For distribution        \n', '        balances[owner] = 200000000 * (10**uint256(decimals)); //40% for public distribution\n', '        \n', '        //Initial Token Distribution\n', '        balances[0xF9568bd772C9B517193275b3C2E0CDAd38E586bB] = 50000000 * (10**uint256(decimals)); //10% Development, Executive, and Advisory Teams\n', '        balances[0x07ADB1D9399Bd1Fa4fD613D3179DFE883755Bb13] = 50000000 * (10**uint256(decimals)); //10% SMARTRealty Economy\n', '        balances[0xd35909DbeEb5255D65b1ea14602C7f00ce3872f6] = 50000000 * (10**uint256(decimals)); //10% Marketing\n', '        balances[0x9D2Fe4D5f1dc4FcA1f0Ea5f461C9fAA5D09b9CCE] = 50000000 * (10**uint256(decimals)); //10% SMARTMortgages\n', '        balances[0x8Bb41848B6dD3D98b8849049b780dC3549568c89] = 25000000 * (10**uint256(decimals)); //5% Admin\n', '        balances[0xC78DF195DE5717FB15FB3448D5C6893E8e7fB254] = 25000000 * (10**uint256(decimals)); //5% Contractors\n', '        balances[0x4690678926BCf9B30985c06806d4568C0C498123] = 25000000 * (10**uint256(decimals)); //5% Legal\n', '        balances[0x08AF803F0F90ccDBFCe046Bc113822cFf415e148] = 20000000 * (10**uint256(decimals)); //4% Bounties and Giveaways\n', '        balances[0x8661dFb67dE4E5569da9859f5CB4Aa676cd5F480] = 5000000 * (10**uint256(decimals)); //1% Charitable Use\n', '        \n', '    }\n', '    \n', '    //Set ICO Status\n', '    function activateICOStatus() public {\n', '        status = IcoStatus.Active;\n', '    }    \n', '    \n', '    //Set each Phase of your ICO here\n', '    function setICOPhase(uint _fromTimestamp, uint _toTimestamp, uint256 _min, uint _bonus) onlyAdmin public returns (uint ICOPhaseId) {\n', '        uint icoPhaseId = icoPhaseCounter++;\n', '        ICOPhase storage ico = phases[icoPhaseId];\n', '        ico.fromTimestamp = _fromTimestamp;\n', '        ico.toTimestamp = _toTimestamp;\n', '        ico.minimum = _min;\n', '        ico.bonus = _bonus;\n', '        //ico.totalNumberOfTokenPurchase = _numOfToken;\n', '\n', '        phases[icoPhaseId] = ico;\n', '\n', '        return icoPhaseId;\n', '    }\n', '    \n', '    //Get current ICO Phase\n', '    function getCurrentICOPhaseBonus() public view returns (uint _bonus, uint icoPhaseId) {\n', '        require(icoPhaseCounter > 0);\n', '        uint currentTimestamp = block.timestamp; //Get the current block timestamp\n', '\n', '        for (uint i = 0; i < icoPhaseCounter; i++) {\n', '            \n', '            ICOPhase storage ico = phases[i];\n', '\n', '            if (currentTimestamp >= ico.fromTimestamp && currentTimestamp <= ico.toTimestamp) {\n', '                return (ico.bonus, i);\n', '            }\n', '        }\n', '\n', '    }\n', '    \n', '    // Override this method to have a way to add business logic to your crowdsale when buying\n', '    function getTokenAmount(uint256 weiAmount) internal returns(uint256 token, uint id) {\n', '        var (bonus, phaseId) = getCurrentICOPhaseBonus();       //get current ICO phase information\n', '        uint256 numOfTokens = weiAmount.safeMul(RATE);\n', '        uint256 bonusToken = (bonus / 100) * numOfTokens;\n', '        \n', '        uint256 totalToken = numOfTokens.safeAdd(bonusToken);               //Total tokens to transfer\n', '        return (totalToken, phaseId);\n', '    }    \n', '    \n', '    // low level token purchase function\n', '    function _buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0) && beneficiary != owner);\n', '        \n', '        uint256 weiAmount = msg.value;\n', '        \n', '        // calculate token amount to be created\n', '        var (tokens, phaseId) = getTokenAmount(weiAmount);\n', '        \n', '        //update the current ICO Phase\n', '        ICOPhase storage ico = phases[phaseId]; //get phase\n', '        ico.fundRaised = ico.fundRaised.safeAdd(msg.value); //Update fundRaised for a particular phase\n', '        phases[phaseId] = ico;\n', '        \n', '        // update state\n', '        weiRaised = weiRaised.safeAdd(weiAmount);\n', '        \n', '        _transferToken(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '        \n', '        forwardFunds();\n', '    }\n', '    \n', '    function _transferToken(address _to, uint256 _amount) public returns (bool){\n', '        balances[owner] = balances[owner].safeSub(_amount);\n', '        balances[_to] = balances[_to].safeAdd(_amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;        \n', '    }\n', '    \n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        owner.transfer(msg.value);\n', '    }    \n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        _buyTokens(msg.sender);\n', '    } \n', '    \n', '    \n', '    event TokenPurchase(address _sender, address _beneficiary, uint256 weiAmount, uint256 tokens);\n', '    \n', '}']