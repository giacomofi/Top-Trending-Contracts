['pragma solidity 0.4.23;\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * @notice Checks if the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *      as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    // a variable to load `extcodesize` to\n', '    uint256 size = 0;\n', '\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603 for more details about how this works.\n', '    // TODO: Check this again before the Serenity release, because all addresses will be contracts.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      // retrieve the size of the code at address `addr`\n', '      size := extcodesize(addr)\n', '    }\n', '\n', '    // positive size indicates a smart contract address\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Library for working with strings, primarily converting\n', ' * between strings and integer types\n', ' */\n', 'library StringUtils {\n', '  /**\n', '   * @dev Converts a string to unsigned integer using the specified `base`\n', '   * @dev Throws on invalid input\n', '   *      (wrong characters for a given `base`)\n', '   * @dev Throws if given `base` is not supported\n', '   * @param a string to convert\n', '   * @param base number base, one of 2, 8, 10, 16\n', '   * @return a number representing given string\n', '   */\n', '  function atoi(string a, uint8 base) internal pure returns (uint256 i) {\n', '    // check if the base is valid\n', '    require(base == 2 || base == 8 || base == 10 || base == 16);\n', '\n', '    // convert string into bytes for convenient iteration\n', '    bytes memory buf = bytes(a);\n', '\n', '    // iterate over the string (bytes buffer)\n', '    for(uint256 p = 0; p < buf.length; p++) {\n', '      // extract the digit\n', '      uint8 digit = uint8(buf[p]) - 0x30;\n', '\n', '      // if digit is greater then 10 â€“ mind the gap\n', '      // see `itoa` function for more details\n', '      if(digit > 10) {\n', '        // remove the gap\n', '        digit -= 7;\n', '      }\n', '\n', '      // check if digit meets the base\n', '      require(digit < base);\n', '\n', '      // move to the next digit slot\n', '      i *= base;\n', '\n', '      // add digit to the result\n', '      i += digit;\n', '    }\n', '\n', '    // return the result\n', '    return i;\n', '  }\n', '\n', '  /**\n', '   * @dev Converts a integer to a string using the specified `base`\n', '   * @dev Throws if given `base` is not supported\n', '   * @param i integer to convert\n', '   * @param base number base, one of 2, 8, 10, 16\n', '   * @return a string representing given integer\n', '   */\n', '  function itoa(uint256 i, uint8 base) internal pure returns (string a) {\n', '    // check if the base is valid\n', '    require(base == 2 || base == 8 || base == 10 || base == 16);\n', '\n', '    // for zero input the result is "0" string for any base\n', '    if (i == 0) {\n', '      return "0";\n', '    }\n', '\n', '    // bytes buffer to put ASCII characters into\n', '    bytes memory buf = new bytes(256);\n', '\n', '    // position within a buffer to be used in cycle\n', '    uint256 p = 0;\n', '\n', '    // extract digits one by one in a cycle\n', '    while (i > 0) {\n', '      // extract current digit\n', '      uint8 digit = uint8(i % base);\n', '\n', '      // convert it to an ASCII code\n', '      // 0x20 is " "\n', '      // 0x30-0x39 is "0"-"9"\n', '      // 0x41-0x5A is "A"-"Z"\n', '      // 0x61-0x7A is "a"-"z" ("A"-"Z" XOR " ")\n', '      uint8 ascii = digit + 0x30;\n', '\n', '      // if digit is greater then 10,\n', '      // fix the 0x3A-0x40 gap of punctuation marks\n', '      // (7 characters in ASCII table)\n', '      if(digit > 10) {\n', '        // jump through the gap\n', '        ascii += 7;\n', '      }\n', '\n', '      // write character into the buffer\n', '      buf[p++] = byte(ascii);\n', '\n', '      // move to the next digit\n', '      i /= base;\n', '    }\n', '\n', '    // `p` contains real length of the buffer now, save it\n', '    uint256 length = p;\n', '\n', '    // reverse the buffer\n', '    for(p = 0; p < length / 2; p++) {\n', '      // swap elements at position `p` from the beginning and end using XOR:\n', '      // https://en.wikipedia.org/wiki/XOR_swap_algorithm\n', '      buf[p] ^= buf[length - 1 - p];\n', '      buf[length - 1 - p] ^= buf[p];\n', '      buf[p] ^= buf[length - 1 - p];\n', '    }\n', '\n', '    // construct string and return\n', '    return string(buf);\n', '  }\n', '\n', '  /**\n', '   * @dev Concatenates two strings `s1` and `s2`, for example, if\n', '   *      `s1` == `foo` and `s2` == `bar`, the result `s` == `foobar`\n', '   * @param s1 first string\n', '   * @param s2 second string\n', '   * @return concatenation result s1 + s2\n', '   */\n', '  function concat(string s1, string s2) internal pure returns (string s) {\n', '    // convert s1 into buffer 1\n', '    bytes memory buf1 = bytes(s1);\n', '    // convert s2 into buffer 2\n', '    bytes memory buf2 = bytes(s2);\n', '    // create a buffer for concatenation result\n', '    bytes memory buf = new bytes(buf1.length + buf2.length);\n', '\n', '    // copy buffer 1 into buffer\n', '    for(uint256 i = 0; i < buf1.length; i++) {\n', '      buf[i] = buf1[i];\n', '    }\n', '\n', '    // copy buffer 2 into buffer\n', '    for(uint256 j = buf1.length; j < buf2.length; j++) {\n', '      buf[j] = buf2[j - buf1.length];\n', '    }\n', '\n', '    // construct string and return\n', '    return string(buf);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Access control module provides an API to check\n', ' *      if specific operation is permitted globally and\n', " *      if particular user's has a permission to execute it\n", ' */\n', 'contract AccessControl {\n', '  /// @notice Role manager is responsible for assigning the roles\n', '  /// @dev Role ROLE_ROLE_MANAGER allows executing addOperator/removeOperator\n', '  uint256 private constant ROLE_ROLE_MANAGER = 0x10000000;\n', '\n', '  /// @notice Feature manager is responsible for enabling/disabling\n', '  ///      global features of the smart contract\n', '  /// @dev Role ROLE_FEATURE_MANAGER allows enabling/disabling global features\n', '  uint256 private constant ROLE_FEATURE_MANAGER = 0x20000000;\n', '\n', '  /// @dev Bitmask representing all the possible permissions (super admin role)\n', '  uint256 private constant FULL_PRIVILEGES_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /// @dev A bitmask of globally enabled features\n', '  uint256 public features;\n', '\n', '  /// @notice Privileged addresses with defined roles/permissions\n', '  /// @notice In the context of ERC20/ERC721 tokens these can be permissions to\n', '  ///      allow minting tokens, transferring on behalf and so on\n', '  /// @dev Maps an address to the permissions bitmask (role), where each bit\n', '  ///      represents a permission\n', '  /// @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n', '  ///      represents all possible permissions\n', '  mapping(address => uint256) public userRoles;\n', '\n', '  /// @dev Fired in updateFeatures()\n', '  event FeaturesUpdated(address indexed _by, uint256 _requested, uint256 _actual);\n', '\n', '  /// @dev Fired in addOperator(), removeOperator(), addRole(), removeRole()\n', '  event RoleUpdated(address indexed _by, address indexed _to, uint256 _role);\n', '\n', '  /**\n', '   * @dev Creates an access controlled instance\n', '   */\n', '  constructor() public {\n', '    // contract creator has full privileges\n', '    userRoles[msg.sender] = FULL_PRIVILEGES_MASK;\n', '  }\n', '\n', '  /**\n', '   * @dev Updates set of the globally enabled features (`f`),\n', "   *      taking into account sender's permissions.\n", '   * @dev Requires sender to have `ROLE_FEATURE_MANAGER` permission.\n', '   * @param mask bitmask representing a set of features to enable/disable\n', '   */\n', '  function updateFeatures(uint256 mask) public {\n', '    // call sender nicely - caller\n', '    address caller = msg.sender;\n', "    // read caller's permissions\n", '    uint256 p = userRoles[caller];\n', '\n', '    // caller should have a permission to update global features\n', '    require(__hasRole(p, ROLE_FEATURE_MANAGER));\n', '\n', "    // taking into account caller's permissions,\n", '    // 1) enable features requested\n', '    features |= p & mask;\n', '    // 2) disable features requested\n', '    features &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ mask));\n', '\n', '    // fire an event\n', '    emit FeaturesUpdated(caller, mask, features);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds a new `operator` - an address which has\n', '   *      some extended privileges over the smart contract,\n', '   *      for example token minting, transferring on behalf, etc.\n', '   * @dev Newly added `operator` cannot have any permissions which\n', "   *      transaction sender doesn't have.\n", '   * @dev Requires transaction sender to have `ROLE_ROLE_MANAGER` permission.\n', '   * @dev Cannot update existing operator. Throws if `operator` already exists.\n', '   * @param operator address of the operator to add\n', '   * @param role bitmask representing a set of permissions which\n', '   *      newly created operator will have\n', '   */\n', '  function addOperator(address operator, uint256 role) public {\n', '    // call sender gracefully - `manager`\n', '    address manager = msg.sender;\n', '\n', "    // read manager's permissions (role)\n", '    uint256 permissions = userRoles[manager];\n', '\n', "    // check that `operator` doesn't exist\n", '    require(userRoles[operator] == 0);\n', '\n', '    // manager must have a ROLE_ROLE_MANAGER role\n', '    require(__hasRole(permissions, ROLE_ROLE_MANAGER));\n', '\n', '    // recalculate permissions (role) to set:\n', '    // we cannot create an operator more powerful then calling `manager`\n', '    uint256 r = role & permissions;\n', '\n', '    // check if we still have some permissions (role) to set\n', '    require(r != 0);\n', '\n', '    // create an operator by persisting his permissions (roles) to storage\n', '    userRoles[operator] = r;\n', '\n', '    // fire an event\n', '    emit RoleUpdated(manager, operator, userRoles[operator]);\n', '  }\n', '\n', '  /**\n', '   * @dev Deletes an existing `operator`.\n', '   * @dev Requires sender to have `ROLE_ROLE_MANAGER` permission.\n', '   * @param operator address of the operator to delete\n', '   */\n', '  function removeOperator(address operator) public {\n', '    // call sender gracefully - `manager`\n', '    address manager = msg.sender;\n', '\n', '    // check if an `operator` exists\n', '    require(userRoles[operator] != 0);\n', '\n', '    // do not allow transaction sender to remove himself\n', '    // protects from an accidental removal of all the operators\n', '    require(operator != manager);\n', '\n', '    // manager must have a ROLE_ROLE_MANAGER role\n', '    // and he must have all the permissions operator has\n', '    require(__hasRole(userRoles[manager], ROLE_ROLE_MANAGER | userRoles[operator]));\n', '\n', '    // perform operator deletion\n', '    delete userRoles[operator];\n', '\n', '    // fire an event\n', '    emit RoleUpdated(manager, operator, 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Updates an existing `operator`, adding a specified role to it.\n', '   * @dev Note that `operator` cannot receive permission which\n', "   *      transaction sender doesn't have.\n", '   * @dev Requires transaction sender to have `ROLE_ROLE_MANAGER` permission.\n', "   * @dev Cannot create a new operator. Throws if `operator` doesn't exist.\n", '   * @dev Existing permissions of the `operator` are preserved\n', '   * @param operator address of the operator to update\n', '   * @param role bitmask representing a set of permissions which\n', '   *      `operator` will have\n', '   */\n', '  function addRole(address operator, uint256 role) public {\n', '    // call sender gracefully - `manager`\n', '    address manager = msg.sender;\n', '\n', "    // read manager's permissions (role)\n", '    uint256 permissions = userRoles[manager];\n', '\n', '    // check that `operator` exists\n', '    require(userRoles[operator] != 0);\n', '\n', '    // manager must have a ROLE_ROLE_MANAGER role\n', '    require(__hasRole(permissions, ROLE_ROLE_MANAGER));\n', '\n', '    // recalculate permissions (role) to add:\n', '    // we cannot make an operator more powerful then calling `manager`\n', '    uint256 r = role & permissions;\n', '\n', '    // check if we still have some permissions (role) to add\n', '    require(r != 0);\n', '\n', "    // update operator's permissions (roles) in the storage\n", '    userRoles[operator] |= r;\n', '\n', '    // fire an event\n', '    emit RoleUpdated(manager, operator, userRoles[operator]);\n', '  }\n', '\n', '  /**\n', '   * @dev Updates an existing `operator`, removing a specified role from it.\n', "   * @dev Note that  permissions which transaction sender doesn't have\n", '   *      cannot be removed.\n', '   * @dev Requires transaction sender to have `ROLE_ROLE_MANAGER` permission.\n', '   * @dev Cannot remove all permissions. Throws on such an attempt.\n', '   * @param operator address of the operator to update\n', '   * @param role bitmask representing a set of permissions which\n', '   *      will be removed from the `operator`\n', '   */\n', '  function removeRole(address operator, uint256 role) public {\n', '    // call sender gracefully - `manager`\n', '    address manager = msg.sender;\n', '\n', "    // read manager's permissions (role)\n", '    uint256 permissions = userRoles[manager];\n', '\n', "    // check that we're not removing all the `operator`s permissions\n", '    // this is not really required and just causes inconveniences is function use\n', '    //require(userRoles[operator] ^ role != 0);\n', '\n', '    // manager must have a ROLE_ROLE_MANAGER role\n', '    require(__hasRole(permissions, ROLE_ROLE_MANAGER));\n', '\n', '    // recalculate permissions (role) to remove:\n', "    // we cannot revoke permissions which calling `manager` doesn't have\n", '    uint256 r = role & permissions;\n', '\n', '    // check if we still have some permissions (role) to revoke\n', '    require(r != 0);\n', '\n', "    // update operator's permissions (roles) in the storage\n", '    userRoles[operator] &= FULL_PRIVILEGES_MASK ^ r;\n', '\n', '    // fire an event\n', '    emit RoleUpdated(manager, operator, userRoles[operator]);\n', '  }\n', '\n', '  /// @dev Checks if requested feature is enabled globally on the contract\n', '  function __isFeatureEnabled(uint256 featureRequired) internal constant returns(bool) {\n', '    // delegate call to `__hasRole`\n', '    return __hasRole(features, featureRequired);\n', '  }\n', '\n', '  /// @dev Checks if transaction sender `msg.sender` has all the required permissions `roleRequired`\n', '  function __isSenderInRole(uint256 roleRequired) internal constant returns(bool) {\n', "    // read sender's permissions (role)\n", '    uint256 userRole = userRoles[msg.sender];\n', '\n', '    // delegate call to `__hasRole`\n', '    return __hasRole(userRole, roleRequired);\n', '  }\n', '\n', '  /// @dev Checks if user role `userRole` contain all the permissions required `roleRequired`\n', '  function __hasRole(uint256 userRole, uint256 roleRequired) internal pure returns(bool) {\n', '    // check the bitmask for the role required and return the result\n', '    return userRole & roleRequired == roleRequired;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safe transfers\n', ' *      from ERC721 asset contracts.\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'interface ERC721Receiver {\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient after a `transfer`.\n', '   *      This function MAY throw to revert and reject the transfer.\n', '   *      Return of other than the magic value MUST result in the transaction being reverted.\n', '   * @notice The contract address is always the message sender.\n', '   *      A wallet/broker/auction application MUST implement the wallet interface\n', '   *      if it will accept safe transfers.\n', '   * @param _operator The address which called `safeTransferFrom` function\n', '   * @param _from The address which previously owned the token\n', '   * @param _tokenId The NFT identifier which is being transferred\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing\n', '   */\n', '  function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'contract ERC165 {\n', '  /**\n', "   * 0x01ffc9a7 == bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) internal supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor() public {\n', '    // register itself in a lookup table\n', '    _registerInterface(InterfaceId_ERC165);\n', '  }\n', '\n', '\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param _interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165.\n', '   * @dev This function uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId) public constant returns (bool) {\n', '    // find if interface is supported using a lookup table\n', '    return supportedInterfaces[_interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 _interfaceId) internal {\n', '    require(_interfaceId != 0xffffffff);\n', '    supportedInterfaces[_interfaceId] = true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @notice Gem is unique tradable entity. Non-fungible.\n', ' * @dev A gem is an ERC721 non-fungible token, which maps Token ID,\n', ' *      a 32 bit number to a set of gem properties -\n', ' *      attributes (mostly immutable by their nature) and state variables (mutable)\n', ' * @dev A gem token supports only minting, it can be only created\n', ' */\n', 'contract GemERC721 is AccessControl, ERC165 {\n', '  /// @dev Smart contract version\n', '  /// @dev Should be incremented manually in this source code\n', '  ///      each time smart contact source code is changed\n', '  uint32 public constant TOKEN_VERSION = 0x3;\n', '\n', '  /// @dev ERC20 compliant token symbol\n', '  string public constant symbol = "GEM";\n', '  /// @dev ERC20 compliant token name\n', '  string public constant name = "GEM â€“ CryptoMiner World";\n', '  /// @dev ERC20 compliant token decimals\n', '  /// @dev this can be only zero, since ERC721 token is non-fungible\n', '  uint8 public constant decimals = 0;\n', '\n', '  /// @dev A gem data structure\n', '  /// @dev Occupies 64 bytes of storage (512 bits)\n', '  struct Gem {\n', '    /// High 256 bits\n', '    /// @dev Where gem was found: land plot ID,\n', '    ///      land block within a plot,\n', '    ///      gem number (id) within a block of land, immutable\n', '    uint64 coordinates;\n', '\n', '    /// @dev Gem color, one of 12 values, immutable\n', '    uint8 color;\n', '\n', '    /// @dev Level modified time\n', '    /// @dev Stored as Ethereum Block Number of the transaction\n', '    ///      when the gem was created\n', '    uint32 levelModified;\n', '\n', '    /// @dev Level value (mutable), one of 1, 2, 3, 4, 5\n', '    uint8 level;\n', '\n', '    /// @dev Grade modified time\n', '    /// @dev Stored as Ethereum Block Number of the transaction\n', '    ///      when the gem was created\n', '    uint32 gradeModified;\n', '\n', '    /// @dev High 8 bits store grade type and low 24 bits grade value\n', '    /// @dev Grade type is one of D (1), C (2), B (3), A (4), AA (5) and AAA (6)\n', '    uint32 grade;\n', '\n', '    /// @dev Store state modified time\n', '    /// @dev Stored as Ethereum Block Number of the transaction\n', '    ///      when the gem was created\n', '    uint32 stateModified;\n', '\n', '    /// @dev State value, mutable\n', '    uint48 state;\n', '\n', '\n', '    /// Low 256 bits\n', '    /// @dev Gem creation time, immutable, cannot be zero\n', '    /// @dev Stored as Ethereum Block Number of the transaction\n', '    ///      when the gem was created\n', '    uint32 creationTime;\n', '\n', "    /// @dev Gem index within an owner's collection of gems, mutable\n", '    uint32 index;\n', '\n', '    /// @dev Initially zero, changes when ownership is transferred\n', '    /// @dev Stored as Ethereum Block Number of the transaction\n', "    ///      when the gem's ownership was changed, mutable\n", '    uint32 ownershipModified;\n', '\n', "    /// @dev Gem's owner, initialized upon gem creation, mutable\n", '    address owner;\n', '  }\n', '\n', '  /// @notice All the emitted gems\n', '  /// @dev Core of the Gem as ERC721 token\n', '  /// @dev Maps Gem ID => Gem Data Structure\n', '  mapping(uint256 => Gem) public gems;\n', '\n', '  /// @dev Mapping from a gem ID to an address approved to\n', '  ///      transfer ownership rights for this gem\n', '  mapping(uint256 => address) public approvals;\n', '\n', '  /// @dev Mapping from owner to operator approvals\n', '  ///      token owner => approved token operator => is approved\n', '  mapping(address => mapping(address => bool)) public approvedOperators;\n', '\n', '  /// @notice Storage for a collections of tokens\n', '  /// @notice A collection of tokens is an ordered list of token IDs,\n', '  ///      owned by a particular address (owner)\n', '  /// @dev A mapping from owner to a collection of his tokens (IDs)\n', '  /// @dev ERC20 compliant structure for balances can be derived\n', '  ///      as a length of each collection in the mapping\n', '  /// @dev ERC20 balances[owner] is equal to collections[owner].length\n', '  mapping(address => uint32[]) public collections;\n', '\n', '  /// @dev Array with all token ids, used for enumeration\n', '  /// @dev ERC20 compliant structure for totalSupply can be derived\n', '  ///      as a length of this collection\n', '  /// @dev ERC20 totalSupply() is equal to allTokens.length\n', '  uint32[] public allTokens;\n', '\n', "  /// @dev The data in token's state may contain lock(s)\n", '  ///      (ex.: is gem currently mining or not)\n', '  /// @dev A locked token cannot be transferred or upgraded\n', '  /// @dev The token is locked if it contains any bits\n', '  ///      from the `lockedBitmask` in its `state` set\n', '  uint64 public lockedBitmask = DEFAULT_MINING_BIT;\n', '\n', '  /// @dev Enables ERC721 transfers of the tokens\n', '  uint32 public constant FEATURE_TRANSFERS = 0x00000001;\n', '\n', '  /// @dev Enables ERC721 transfers on behalf\n', '  uint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x00000002;\n', '\n', '  /// @dev Enables partial support of ERC20 transfers of the tokens,\n', '  ///      allowing to transfer only all owned tokens at once\n', '  //uint32 public constant ERC20_TRANSFERS = 0x00000004;\n', '\n', '  /// @dev Enables partial support of ERC20 transfers on behalf\n', '  ///      allowing to transfer only all owned tokens at once\n', '  //uint32 public constant ERC20_TRANSFERS_ON_BEHALF = 0x00000008;\n', '\n', '  /// @dev Enables full support of ERC20 transfers of the tokens,\n', '  ///      allowing to transfer arbitrary amount of the tokens at once\n', '  //uint32 public constant ERC20_INSECURE_TRANSFERS = 0x00000010;\n', '\n', '  /// @dev Default bitmask indicating that the gem is `mining`\n', '  /// @dev Consists of a single bit at position 1 â€“ binary 1\n', '  /// @dev This bit is cleared by `miningComplete`\n', "  /// @dev The bit meaning in gem's `state` is as follows:\n", '  ///      0: not mining\n', '  ///      1: mining\n', '  uint64 public constant DEFAULT_MINING_BIT = 0x1; // bit number 1\n', '\n', '  /// @notice Exchange is responsible for trading tokens on behalf of token holders\n', '  /// @dev Role ROLE_EXCHANGE allows executing transfer on behalf of token holders\n', '  /// @dev Not used\n', '  //uint32 public constant ROLE_EXCHANGE = 0x00010000;\n', '\n', '  /// @notice Level provider is responsible for enabling the workshop\n', '  /// @dev Role ROLE_LEVEL_PROVIDER allows leveling up the gem\n', '  uint32 public constant ROLE_LEVEL_PROVIDER = 0x00100000;\n', '\n', '  /// @notice Grade provider is responsible for enabling the workshop\n', "  /// @dev Role ROLE_GRADE_PROVIDER allows modifying gem's grade\n", '  uint32 public constant ROLE_GRADE_PROVIDER = 0x00200000;\n', '\n', '  /// @notice Token state provider is responsible for enabling the mining protocol\n', "  /// @dev Role ROLE_STATE_PROVIDER allows modifying token's state\n", '  uint32 public constant ROLE_STATE_PROVIDER = 0x00400000;\n', '\n', '  /// @notice Token state provider is responsible for enabling the mining protocol\n', "  /// @dev Role ROLE_STATE_LOCK_PROVIDER allows modifying token's locked bitmask\n", '  uint32 public constant ROLE_STATE_LOCK_PROVIDER = 0x00800000;\n', '\n', '  /// @notice Token creator is responsible for creating tokens\n', '  /// @dev Role ROLE_TOKEN_CREATOR allows minting tokens\n', '  uint32 public constant ROLE_TOKEN_CREATOR = 0x00040000;\n', '\n', '  /// @notice Token destroyer is responsible for destroying tokens\n', '  /// @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\n', '  //uint32 public constant ROLE_TOKEN_DESTROYER = 0x00080000;\n', '\n', '  /// @dev Magic value to be returned upon successful reception of an NFT\n', '  /// @dev Equal to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '  ///      which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  /**\n', '   * Supported interfaces section\n', '   */\n', '\n', '  /**\n', '   * ERC721 interface definition in terms of ERC165\n', '   *\n', '   * 0x80ac58cd ==\n', "   *   bytes4(keccak256('balanceOf(address)')) ^\n", "   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '   */\n', '  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n', '\n', '  /**\n', '   * ERC721 interface extension â€“ exists(uint256)\n', '   *\n', "   * 0x4f558e79 == bytes4(keccak256('exists(uint256)'))\n", '   */\n', '  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n', '\n', '  /**\n', '   * ERC721 interface extension - ERC721Enumerable\n', '   *\n', '   * 0x780e9d63 ==\n', "   *   bytes4(keccak256('totalSupply()')) ^\n", "   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '   */\n', '  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '\n', '  /**\n', '   * ERC721 interface extension - ERC721Metadata\n', '   *\n', '   * 0x5b5e139f ==\n', "   *   bytes4(keccak256('name()')) ^\n", "   *   bytes4(keccak256('symbol()')) ^\n", "   *   bytes4(keccak256('tokenURI(uint256)'))\n", '   */\n', '  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '\n', '  /// @dev Event names are self-explanatory:\n', '  /// @dev Fired in mint()\n', '  /// @dev Address `_by` allows to track who created a token\n', '  event Minted(address indexed _by, address indexed _to, uint32 indexed _tokenId);\n', '\n', '  /// @dev Fired in burn()\n', '  /// @dev Address `_by` allows to track who destroyed a token\n', '  //event Burnt(address indexed _from, address _by, uint32 indexed _tokenId);\n', '\n', '  /// @dev Fired in transfer(), transferFor(), mint()\n', '  /// @dev When minting a token, address `_from` is zero\n', '  /// @dev ERC20/ERC721 compliant event\n', '  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId, uint256 _value);\n', '\n', '  /// @dev Fired in approve()\n', '  /// @dev ERC721 compliant event\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n', '\n', '  /// @dev Fired in setApprovalForAll()\n', '  /// @dev ERC721 compliant event\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _value);\n', '\n', '  /// @dev Fired in levelUp()\n', '  event LevelUp(address indexed _by, address indexed _owner, uint256 indexed _tokenId, uint8 _levelReached);\n', '\n', '  /// @dev Fired in upgradeGrade()\n', '  event UpgradeComplete(address indexed _by, address indexed _owner, uint256 indexed _tokenId, uint32 _gradeFrom, uint32 _gradeTo);\n', '\n', '  /// @dev Fired in setState()\n', '  event StateModified(address indexed _by, address indexed _owner, uint256 indexed _tokenId, uint48 _stateFrom, uint48 _stateTo);\n', '\n', '  /// @dev Creates a Gem ERC721 instance,\n', '  /// @dev Registers a ERC721 interface using ERC165\n', '  constructor() public {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721);\n', '    _registerInterface(InterfaceId_ERC721Exists);\n', '    _registerInterface(InterfaceId_ERC721Enumerable);\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets a gem by ID, representing it as two integers.\n', '   *      The two integers are tightly packed with a gem data:\n', '   *      First integer (high bits) contains (from higher to lower bits order):\n', '   *          coordinates:\n', '   *            plotId,\n', '   *            depth (block ID),\n', '   *            gemNum (gem ID within a block)\n', '   *          color,\n', '   *          levelModified,\n', '   *          level,\n', '   *          gradeModified,\n', '   *          grade,\n', '   *          stateModified,\n', '   *          state,\n', '   *      Second integer (low bits) contains (from higher to lower bits order):\n', '   *          creationTime,\n', '   *          index,\n', '   *          ownershipModified,\n', '   *          owner\n', "   * @dev Throws if gem doesn't exist\n", '   * @param _tokenId ID of the gem to fetch\n', '   */\n', '  function getPacked(uint256 _tokenId) public constant returns(uint256, uint256) {\n', '    // validate gem existence\n', '    require(exists(_tokenId));\n', '\n', '    // load the gem from storage\n', '    Gem memory gem = gems[_tokenId];\n', '\n', '    // pack high 256 bits of the result\n', '    uint256 high = uint256(gem.coordinates) << 192\n', '                 | uint192(gem.color) << 184\n', '                 | uint184(gem.levelModified) << 152\n', '                 | uint152(gem.level) << 144\n', '                 | uint144(gem.gradeModified) << 112\n', '                 | uint112(gem.grade) << 80\n', '                 | uint80(gem.stateModified) << 48\n', '                 | uint48(gem.state);\n', '\n', '    // pack low 256 bits of the result\n', '    uint256 low  = uint256(gem.creationTime) << 224\n', '                 | uint224(gem.index) << 192\n', '                 | uint192(gem.ownershipModified) << 160\n', '                 | uint160(gem.owner);\n', '\n', '    // return the whole 512 bits of result\n', '    return (high, low);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows to fetch collection of tokens, including internal token data\n', '   *       in a single function, useful when connecting to external node like INFURA\n', '   * @param owner an address to query a collection for\n', '   */\n', '  function getPackedCollection(address owner) public constant returns (uint80[]) {\n', '    // get an array of Gem IDs owned by an `owner` address\n', '    uint32[] memory tokenIds = getCollection(owner);\n', '\n', '    // how many gems are there in a collection\n', '    uint32 balance = uint32(tokenIds.length);\n', '\n', '    // data container to store the result\n', '    uint80[] memory result = new uint80[](balance);\n', '\n', '    // fetch token info one by one and pack into structure\n', '    for(uint32 i = 0; i < balance; i++) {\n', '      // token ID to work with\n', '      uint32 tokenId = tokenIds[i];\n', '      // get the token properties and pack them together with tokenId\n', '      uint48 properties = getProperties(tokenId);\n', '\n', '      // pack the data\n', '      result[i] = uint80(tokenId) << 48 | properties;\n', '    }\n', '\n', '    // return the packed data structure\n', '    return result;\n', '  }\n', '\n', '  /**\n', '   * @notice Retrieves a collection of tokens owned by a particular address\n', '   * @notice An order of token IDs is not guaranteed and may change\n', '   *      when a token from the list is transferred\n', '   * @param owner an address to query a collection for\n', '   * @return an ordered list of tokens\n', '   */\n', '  function getCollection(address owner) public constant returns(uint32[]) {\n', '    // read a collection from mapping and return\n', '    return collections[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Allows setting the `lockedBitmask` parameter of the contract,\n', '   *      which is used to determine if a particular token is locked or not\n', '   * @dev A locked token cannot be transferred, upgraded or burnt\n', '   * @dev The token is locked if it contains any bits\n', '   *      from the `lockedBitmask` in its `state` set\n', '   * @dev Requires sender to have `ROLE_STATE_PROVIDER` permission.\n', '   * @param bitmask a value to set `lockedBitmask` to\n', '   */\n', '  function setLockedBitmask(uint64 bitmask) public {\n', '    // check that the call is made by a state lock provider\n', '    require(__isSenderInRole(ROLE_STATE_LOCK_PROVIDER));\n', '\n', '    // update the locked bitmask\n', '    lockedBitmask = bitmask;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the coordinates of a token\n', '   * @param _tokenId ID of the token to get coordinates for\n', '   * @return a token coordinates\n', '   */\n', '  function getCoordinates(uint256 _tokenId) public constant returns(uint64) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', "    // obtain token's coordinates from storage and return\n", '    return gems[_tokenId].coordinates;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the land plot ID of a gem\n', '   * @param _tokenId ID of the gem to get land plot ID value for\n', '   * @return a token land plot ID\n', '   */\n', '  function getPlotId(uint256 _tokenId) public constant returns(uint32) {\n', '    // extract high 32 bits of the coordinates and return\n', '    return uint32(getCoordinates(_tokenId) >> 32);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the depth (block ID) within plot of land of a gem\n', '   * @param _tokenId ID of the gem to get depth value for\n', '   * @return a token depth\n', '   */\n', '  function getDepth(uint256 _tokenId) public constant returns(uint16) {\n', '    // extract middle 16 bits of the coordinates and return\n', '    return uint16(getCoordinates(_tokenId) >> 16);\n', '  }\n', '\n', '  /**\n', "   * @dev Gets the gem's number within land block\n", '   * @param _tokenId ID of the gem to get depth value for\n', '   * @return a gem number within a land block\n', '   */\n', '  function getGemNum(uint256 _tokenId) public constant returns(uint16) {\n', '    // extract low 16 bits of the coordinates and return\n', '    return uint16(getCoordinates(_tokenId));\n', '  }\n', '\n', '  /**\n', "   * @dev Gets the gem's properties â€“ color, level and\n", '   *      grade - as packed uint32 number\n', '   * @param _tokenId ID of the gem to get properties for\n', "   * @return gem's properties - color, level, grade as packed uint32\n", '   */\n', '  function getProperties(uint256 _tokenId) public constant returns(uint48) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', '    // read gem from storage\n', '    Gem memory gem = gems[_tokenId];\n', '\n', '    // pack data structure and return\n', '    return uint48(gem.color) << 40 | uint40(gem.level) << 32 | gem.grade;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the color of a token\n', '   * @param _tokenId ID of the token to get color for\n', '   * @return a token color\n', '   */\n', '  function getColor(uint256 _tokenId) public constant returns(uint8) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', "    // obtain token's color from storage and return\n", '    return gems[_tokenId].color;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the level modified date of a token\n', '   * @param _tokenId ID of the token to get level modification date for\n', '   * @return a token level modification date\n', '   */\n', '  function getLevelModified(uint256 _tokenId) public constant returns(uint32) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', "    // obtain token's level modified date from storage and return\n", '    return gems[_tokenId].levelModified;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the level of a token\n', '   * @param _tokenId ID of the token to get level for\n', '   * @return a token level\n', '   */\n', '  function getLevel(uint256 _tokenId) public constant returns(uint8) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', "    // obtain token's level from storage and return\n", '    return gems[_tokenId].level;\n', '  }\n', '\n', '  /**\n', '   * @dev Levels up a gem\n', '   * @dev Requires sender to have `ROLE_STATE_PROVIDER` permission\n', '   * @param _tokenId ID of the gem to level up\n', '   */\n', '  function levelUp(uint256 _tokenId) public {\n', '    // check that the call is made by a level provider\n', '    require(__isSenderInRole(ROLE_LEVEL_PROVIDER));\n', '\n', '    // check that token to set state for exists\n', '    require(exists(_tokenId));\n', '\n', '    // update the level modified date\n', '    gems[_tokenId].levelModified = uint32(block.number);\n', '\n', '    // increment the level required\n', '    gems[_tokenId].level++;\n', '\n', '    // emit an event\n', '    emit LevelUp(msg.sender, ownerOf(_tokenId), _tokenId, gems[_tokenId].level);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the grade modified date of a gem\n', '   * @param _tokenId ID of the gem to get grade modified date for\n', '   * @return a token grade modified date\n', '   */\n', '  function getGradeModified(uint256 _tokenId) public constant returns(uint32) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', "    // obtain token's grade modified date from storage and return\n", '    return gems[_tokenId].gradeModified;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the grade of a gem\n', '   * @param _tokenId ID of the gem to get grade for\n', '   * @return a token grade\n', '   */\n', '  function getGrade(uint256 _tokenId) public constant returns(uint32) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', "    // obtain token's grade from storage and return\n", '    return gems[_tokenId].grade;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the grade type of a gem\n', '   * @param _tokenId ID of the gem to get grade type for\n', '   * @return a token grade type\n', '   */\n', '  function getGradeType(uint256 _tokenId) public constant returns(uint8) {\n', '    // extract high 8 bits of the grade and return\n', '    return uint8(getGrade(_tokenId) >> 24);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the grade value of a gem\n', '   * @param _tokenId ID of the gem to get grade value for\n', '   * @return a token grade value\n', '   */\n', '  function getGradeValue(uint256 _tokenId) public constant returns(uint24) {\n', '    // extract low 24 bits of the grade and return\n', '    return uint24(getGrade(_tokenId));\n', '  }\n', '\n', '  /**\n', '   * @dev Upgrades the grade of the gem\n', '   * @dev Requires new grade to be higher than an old one\n', '   * @dev Requires sender to have `ROLE_GRADE_PROVIDER` permission\n', '   * @param _tokenId ID of the gem to modify the grade for\n', '   * @param grade new grade to set for the token, should be higher then current state\n', '   */\n', '  function upgradeGrade(uint256 _tokenId, uint32 grade) public {\n', '    // check that the call is made by a grade provider\n', '    require(__isSenderInRole(ROLE_GRADE_PROVIDER));\n', '\n', '    // check that token to set grade for exists\n', '    require(exists(_tokenId));\n', '\n', "    // check if we're not downgrading the gem\n", '    require(gems[_tokenId].grade < grade);\n', '\n', '    // emit an event\n', '    emit UpgradeComplete(msg.sender, ownerOf(_tokenId), _tokenId, gems[_tokenId].grade, grade);\n', '\n', '    // set the grade required\n', '    gems[_tokenId].grade = grade;\n', '\n', '    // update the grade modified date\n', '    gems[_tokenId].gradeModified = uint32(block.number);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the state modified date of a token\n', '   * @param _tokenId ID of the token to get state modified date for\n', '   * @return a token state modification date\n', '   */\n', '  function getStateModified(uint256 _tokenId) public constant returns(uint32) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', "    // obtain token's state modified date from storage and return\n", '    return gems[_tokenId].stateModified;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the state of a token\n', '   * @param _tokenId ID of the token to get state for\n', '   * @return a token state\n', '   */\n', '  function getState(uint256 _tokenId) public constant returns(uint48) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', "    // obtain token's state from storage and return\n", '    return gems[_tokenId].state;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the state of a token\n', '   * @dev Requires sender to have `ROLE_STATE_PROVIDER` permission\n', '   * @param _tokenId ID of the token to set state for\n', '   * @param state new state to set for the token\n', '   */\n', '  function setState(uint256 _tokenId, uint48 state) public {\n', '    // check that the call is made by a state provider\n', '    require(__isSenderInRole(ROLE_STATE_PROVIDER));\n', '\n', '    // check that token to set state for exists\n', '    require(exists(_tokenId));\n', '\n', '    // emit an event\n', '    emit StateModified(msg.sender, ownerOf(_tokenId), _tokenId, gems[_tokenId].state, state);\n', '\n', '    // set the state required\n', '    gems[_tokenId].state = state;\n', '\n', '    // update the state modified date\n', '    gems[_tokenId].stateModified = uint32(block.number);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the creation time of a token\n', '   * @param _tokenId ID of the token to get creation time for\n', '   * @return a token creation time\n', '   */\n', '  function getCreationTime(uint256 _tokenId) public constant returns(uint32) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', "    // obtain token's creation time from storage and return\n", '    return gems[_tokenId].creationTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the ownership modified time of a token\n', '   * @param _tokenId ID of the token to get ownership modified time for\n', '   * @return a token ownership modified time\n', '   */\n', '  function getOwnershipModified(uint256 _tokenId) public constant returns(uint32) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', "    // obtain token's ownership modified time from storage and return\n", '    return gems[_tokenId].ownershipModified;\n', '  }\n', '\n', '  /**\n', '   * @notice Total number of existing tokens (tracked by this contract)\n', '   * @return A count of valid tokens tracked by this contract,\n', '   *    where each one of them has an assigned and\n', '   *    queryable owner not equal to the zero address\n', '   */\n', '  function totalSupply() public constant returns (uint256) {\n', '    // read the length of the `allTokens` collection\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @notice Enumerate valid tokens\n', '   * @dev Throws if `_index` >= `totalSupply()`.\n', '   * @param _index a counter less than `totalSupply()`\n', '   * @return The token ID for the `_index`th token, unsorted\n', '   */\n', '  function tokenByIndex(uint256 _index) public constant returns (uint256) {\n', '    // out of bounds check\n', '    require(_index < allTokens.length);\n', '\n', '    // get the token ID and return\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @notice Enumerate tokens assigned to an owner\n', '   * @dev Throws if `_index` >= `balanceOf(_owner)`.\n', '   * @param _owner an address of the owner to query token from\n', '   * @param _index a counter less than `balanceOf(_owner)`\n', '   * @return the token ID for the `_index`th token assigned to `_owner`, unsorted\n', '   */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public constant returns (uint256) {\n', '    // out of bounds check\n', '    require(_index < collections[_owner].length);\n', '\n', '    // get the token ID from owner collection and return\n', '    return collections[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @notice Gets an amount of token owned by the given address\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance for\n', '   * @return an amount owned by the address passed as an input parameter\n', '   */\n', '  function balanceOf(address _owner) public constant returns (uint256) {\n', '    // read the length of the `who`s collection of tokens\n', '    return collections[_owner].length;\n', '  }\n', '\n', '  /**\n', '   * @notice Checks if specified token exists\n', '   * @dev Returns whether the specified token ID exists\n', '   * @param _tokenId ID of the token to query the existence for\n', '   * @return whether the token exists (true - exists)\n', '   */\n', '  function exists(uint256 _tokenId) public constant returns (bool) {\n', '    // check if this token exists (owner is not zero)\n', '    return gems[_tokenId].owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @notice Finds an owner address for a token specified\n', '   * @dev Gets the owner of the specified token from the `gems` mapping\n', "   * @dev Throws if a token with the ID specified doesn't exist\n", '   * @param _tokenId ID of the token to query the owner for\n', '   * @return owner address currently marked as the owner of the given token\n', '   */\n', '  function ownerOf(uint256 _tokenId) public constant returns (address) {\n', '    // check if this token exists\n', '    require(exists(_tokenId));\n', '\n', "    // return owner's address\n", '    return gems[_tokenId].owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Creates new token with `tokenId` ID specified and\n', '   *      assigns an ownership `to` for that token\n', "   * @dev Allows setting initial token's properties\n", '   * @param to an address to assign created token ownership to\n', '   * @param tokenId ID of the token to create\n', '   */\n', '  function mint(\n', '    address to,\n', '    uint32 tokenId,\n', '    uint32 plotId,\n', '    uint16 depth,\n', '    uint16 gemNum,\n', '    uint8 color,\n', '    uint8 level,\n', '    uint8 gradeType,\n', '    uint24 gradeValue\n', '  ) public {\n', '    // validate destination address\n', '    require(to != address(0));\n', '    require(to != address(this));\n', '\n', '    // check if caller has sufficient permissions to mint a token\n', '    // and if feature is enabled globally\n', '    require(__isSenderInRole(ROLE_TOKEN_CREATOR));\n', '\n', '    // delegate call to `__mint`\n', '    __mint(to, tokenId, plotId, depth, gemNum, color, level, gradeType, gradeValue);\n', '\n', '    // fire ERC20 transfer event\n', '    emit Transfer(address(0), to, tokenId, 1);\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers ownership rights of a token defined\n', '   *      by the `tokenId` to a new owner specified by address `to`\n', '   * @dev Requires the sender of the transaction to be an owner\n', '   *      of the token specified (`tokenId`)\n', '   * @param to new owner address\n', '   * @param _tokenId ID of the token to transfer ownership rights for\n', '   */\n', '  function transfer(address to, uint256 _tokenId) public {\n', '    // check if token transfers feature is enabled\n', '    require(__isFeatureEnabled(FEATURE_TRANSFERS));\n', '\n', '    // call sender gracefully - `from`\n', '    address from = msg.sender;\n', '\n', '    // delegate call to unsafe `__transfer`\n', '    __transfer(from, to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @notice A.k.a "transfer a token on behalf"\n', '   * @notice Transfers ownership rights of a token defined\n', '   *      by the `tokenId` to a new owner specified by address `to`\n', '   * @notice Allows transferring ownership rights by a trading operator\n', '   *      on behalf of token owner. Allows building an exchange of tokens.\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * @dev Requires the transaction sender to be one of:\n', '   *      owner of a gem - then its just a usual `transfer`\n', '   *      approved â€“ an address explicitly approved earlier by\n', '   *        the owner of a token to transfer this particular token `tokenId`\n', '   *      operator - an address explicitly approved earlier by\n', '   *        the owner to transfer all his tokens on behalf\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the token\n', '   * @param _tokenId ID of the token to be transferred\n', '   */\n', '  function transferFrom(address from, address to, uint256 _tokenId) public {\n', '    // check if transfers on behalf feature is enabled\n', '    require(__isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF));\n', '\n', '    // call sender gracefully - `operator`\n', '    address operator = msg.sender;\n', '\n', '    // find if an approved address exists for this token\n', '    address approved = approvals[_tokenId];\n', '\n', '    // we assume `from` is an owner of the token,\n', '    // this will be explicitly checked in `__transfer`\n', '\n', '    // fetch how much approvals left for an operator\n', '    bool approvedOperator = approvedOperators[from][operator];\n', '\n', '    // operator must have an approval to transfer this particular token\n', '    // or operator must be approved to transfer all the tokens\n', '    // or, if nothing satisfies, this is equal to regular transfer,\n', '    // where `from` is basically a transaction sender and owner of the token\n', '    if(operator != approved && !approvedOperator) {\n', "      // transaction sender doesn't have any special permissions\n", '      // we will treat him as a token owner and sender and try to perform\n', '      // a regular transfer:\n', '      // check `from` to be `operator` (transaction sender):\n', '      require(from == operator);\n', '\n', '      // additionally check if token transfers feature is enabled\n', '      require(__isFeatureEnabled(FEATURE_TRANSFERS));\n', '    }\n', '\n', '    // delegate call to unsafe `__transfer`\n', '    __transfer(from, to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @notice A.k.a "safe transfer a token on behalf"\n', '   * @notice Transfers ownership rights of a token defined\n', '   *      by the `tokenId` to a new owner specified by address `to`\n', '   * @notice Allows transferring ownership rights by a trading operator\n', '   *      on behalf of token owner. Allows building an exchange of tokens.\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev Requires the transaction sender to be the owner, approved, or operator\n', '   * @dev When transfer is complete, this function\n', '   *      checks if `_to` is a smart contract (code size > 0). If so, it calls\n', '   *      `onERC721Received` on `_to` and throws if the return value is not\n', '   *      `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the token\n', '   * @param _tokenId ID of the token to be transferred\n', '   * @param _data Additional data with no specified format, sent in call to `_to`\n', '   */\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public {\n', '    // delegate call to usual (unsafe) `transferFrom`\n', '    transferFrom(_from, _to, _tokenId);\n', '\n', '    // check if receiver `_to` supports ERC721 interface\n', '    if (AddressUtils.isContract(_to)) {\n', '      // if `_to` is a contract â€“ execute onERC721Received\n', '      bytes4 response = ERC721Receiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\n', '\n', '      // expected response is ERC721_RECEIVED\n', '      require(response == ERC721_RECEIVED);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice A.k.a "safe transfer a token on behalf"\n', '   * @notice Transfers ownership rights of a token defined\n', '   *      by the `tokenId` to a new owner specified by address `to`\n', '   * @notice Allows transferring ownership rights by a trading operator\n', '   *      on behalf of token owner. Allows building an exchange of tokens.\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev Requires the transaction sender to be the owner, approved, or operator\n', '   * @dev Requires from to be an owner of the token\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *      which is called upon a safe transfer, and return the magic value\n', '   *      `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`;\n', '   *      otherwise the transfer is reverted.\n', '   * @dev This works identically to the other function with an extra data parameter,\n', '   *      except this function just sets data to "".\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the token\n', '   * @param _tokenId ID of the token to be transferred\n', '   */\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public {\n', '    // delegate call to overloaded `safeTransferFrom`, set data to ""\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @notice Approves an address to transfer the given token on behalf of its owner\n', '   *      Can also be used to revoke an approval by setting `to` address to zero\n', '   * @dev The zero `to` address revokes an approval for a given token\n', '   * @dev There can only be one approved address per token at a given time\n', '   * @dev This function can only be called by the token owner\n', '   * @param _approved address to be approved to transfer the token on behalf of its owner\n', '   * @param _tokenId ID of the token to be approved for transfer on behalf\n', '   */\n', '  function approve(address _approved, uint256 _tokenId) public {\n', '    // call sender nicely - `from`\n', '    address from = msg.sender;\n', '\n', '    // get token owner address (also ensures that token exists)\n', '    address owner = ownerOf(_tokenId);\n', '\n', '    // caller must own this token\n', '    require(from == owner);\n', '    // approval for owner himself is pointless, do not allow\n', '    require(_approved != owner);\n', "    // either we're removing approval, or setting it\n", '    require(approvals[_tokenId] != address(0) || _approved != address(0));\n', '\n', '    // set an approval (deletes an approval if to == 0)\n', '    approvals[_tokenId] = _approved;\n', '\n', '    // emit an ERC721 event\n', '    emit Approval(from, _approved, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @notice Removes an approved address, which was previously added by `approve`\n', '   *      for the given token. Equivalent to calling approve(0, tokenId)\n', '   * @dev Same as calling approve(0, tokenId)\n', '   * @param _tokenId ID of the token to remove approved address for\n', '   */\n', '  function revokeApproval(uint256 _tokenId) public {\n', '    // delegate call to `approve`\n', '    approve(address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * @dev An operator is allowed to transfer *all* tokens of the sender on their behalf\n', '   * @param to operator address to set the approval for\n', '   * @param approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address to, bool approved) public {\n', '    // call sender nicely - `from`\n', '    address from = msg.sender;\n', '\n', '    // validate destination address\n', '    require(to != address(0));\n', '\n', '    // approval for owner himself is pointless, do not allow\n', '    require(to != from);\n', '\n', '    // set an approval\n', '    approvedOperators[from][to] = approved;\n', '\n', '    // emit an ERC721 compliant event\n', '    emit ApprovalForAll(from, to, approved);\n', '  }\n', '\n', '  /**\n', '   * @notice Get the approved address for a single token\n', '   * @dev Throws if `_tokenId` is not a valid token ID.\n', '   * @param _tokenId ID of the token to find the approved address for\n', '   * @return the approved address for this token, or the zero address if there is none\n', '   */\n', '  function getApproved(uint256 _tokenId) public constant returns (address) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', '    // find approved address and return\n', '    return approvals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @notice Query if an address is an authorized operator for another address\n', '   * @param _owner the address that owns at least one token\n', '   * @param _operator the address that acts on behalf of the owner\n', '   * @return true if `_operator` is an approved operator for `_owner`, false otherwise\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public constant returns (bool) {\n', '    // is there a positive amount of approvals left\n', '    return approvedOperators[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n', '   * @dev Throws if `_tokenId` is not a valid token ID.\n', '   *      URIs are defined in RFC 3986.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   * @return token URI\n', '   */\n', '  function tokenURI(uint256 _tokenId) public constant returns (string) {\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', '    // token URL consists of base URL part (domain) and token ID\n', '    return StringUtils.concat("http://cryptominerworld.com/gem/", StringUtils.itoa(_tokenId, 16));\n', '  }\n', '\n', '  /// @dev Creates new token with `tokenId` ID specified and\n', '  ///      assigns an ownership `to` for this token\n', "  /// @dev Unsafe: doesn't check if caller has enough permissions to execute the call\n", "  ///      checks only that the token doesn't exist yet\n", '  /// @dev Must be kept private at all times\n', '  function __mint(\n', '    address to,\n', '    uint32 tokenId,\n', '    uint32 plotId,\n', '    uint16 depth,\n', '    uint16 gemNum,\n', '    uint8 color,\n', '    uint8 level,\n', '    uint8 gradeType,\n', '    uint24 gradeValue\n', '  ) private {\n', '    // check that `tokenId` is inside valid bounds\n', '    require(tokenId > 0);\n', '\n', "    // ensure that token with such ID doesn't exist\n", '    require(!exists(tokenId));\n', '\n', '    // create new gem in memory\n', '    Gem memory gem = Gem({\n', '      coordinates: uint64(plotId) << 32 | uint32(depth) << 16 | gemNum,\n', '      color: color,\n', '      levelModified: 0,\n', '      level: level,\n', '      gradeModified: 0,\n', '      grade: uint32(gradeType) << 24 | gradeValue,\n', '      stateModified: 0,\n', '      state: 0,\n', '\n', '      creationTime: uint32(block.number),\n', "      // token index within the owner's collection of token\n", '      // points to the place where the token will be placed to\n', '      index: uint32(collections[to].length),\n', '      ownershipModified: 0,\n', '      owner: to\n', '    });\n', '\n', "    // push newly created `tokenId` to the owner's collection of tokens\n", '    collections[to].push(tokenId);\n', '\n', '    // persist gem to the storage\n', '    gems[tokenId] = gem;\n', '\n', '    // add token ID to the `allTokens` collection,\n', '    // automatically updates total supply\n', '    allTokens.push(tokenId);\n', '\n', '    // fire Minted event\n', '    emit Minted(msg.sender, to, tokenId);\n', '    // fire ERC20/ERC721 transfer event\n', '    emit Transfer(address(0), to, tokenId, 1);\n', '  }\n', '\n', '  /// @dev Performs a transfer of a token `tokenId` from address `from` to address `to`\n', "  /// @dev Unsafe: doesn't check if caller has enough permissions to execute the call;\n", '  ///      checks only for token existence and that ownership belongs to `from`\n', "  /// @dev Is save to call from `transfer(to, tokenId)` since it doesn't need any additional checks\n", '  /// @dev Must be kept private at all times\n', '  function __transfer(address from, address to, uint256 _tokenId) private {\n', '    // validate source and destination address\n', '    require(to != address(0));\n', '    require(to != from);\n', '    // impossible by design of transfer(), transferFrom(),\n', '    // approveToken() and approve()\n', '    assert(from != address(0));\n', '\n', '    // validate token existence\n', '    require(exists(_tokenId));\n', '\n', '    // validate token ownership\n', '    require(ownerOf(_tokenId) == from);\n', '\n', '    // transfer is not allowed for a locked gem\n', '    // (ex.: if ge is currently mining)\n', '    require(getState(_tokenId) & lockedBitmask == 0);\n', '\n', '    // clear approved address for this particular token + emit event\n', '    __clearApprovalFor(_tokenId);\n', '\n', '    // move gem ownership,\n', "    // update old and new owner's gem collections accordingly\n", '    __move(from, to, _tokenId);\n', '\n', '    // fire ERC20/ERC721 transfer event\n', '    emit Transfer(from, to, _tokenId, 1);\n', '  }\n', '\n', '  /// @dev Clears approved address for a particular token\n', '  function __clearApprovalFor(uint256 _tokenId) private {\n', "    // check if approval exists - we don't want to fire an event in vain\n", '    if(approvals[_tokenId] != address(0)) {\n', '      // clear approval\n', '      delete approvals[_tokenId];\n', '\n', '      // emit an ERC721 event\n', '      emit Approval(msg.sender, address(0), _tokenId);\n', '    }\n', '  }\n', '\n', '  /// @dev Move a `gem` from owner `from` to a new owner `to`\n', "  /// @dev Unsafe, doesn't check for consistence\n", '  /// @dev Must be kept private at all times\n', '  function __move(address from, address to, uint256 _tokenId) private {\n', '    // cast token ID to uint32 space\n', '    uint32 tokenId = uint32(_tokenId);\n', '\n', '    // overflow check, failure impossible by design of mint()\n', '    assert(tokenId == _tokenId);\n', '\n', '    // get the gem pointer to the storage\n', '    Gem storage gem = gems[_tokenId];\n', '\n', '    // get a reference to the collection where gem is now\n', '    uint32[] storage source = collections[from];\n', '\n', '    // get a reference to the collection where gem goes to\n', '    uint32[] storage destination = collections[to];\n', '\n', "    // collection `source` cannot be empty, if it is - it's a bug\n", '    assert(source.length != 0);\n', '\n', '    // index of the gem within collection `source`\n', '    uint32 i = gem.index;\n', '\n', '    // we put the last gem in the collection `source` to the position released\n', '    // get an ID of the last gem in `source`\n', '    uint32 sourceId = source[source.length - 1];\n', '\n', '    // update gem index to point to proper place in the collection `source`\n', '    gems[sourceId].index = i;\n', '\n', '    // put it into the position i within `source`\n', '    source[i] = sourceId;\n', '\n', '    // trim the collection `source` by removing last element\n', '    source.length--;\n', '\n', '    // update gem index according to position in new collection `destination`\n', '    gem.index = uint32(destination.length);\n', '\n', '    // update gem owner\n', '    gem.owner = to;\n', '\n', '    // update ownership transfer date\n', '    gem.ownershipModified = uint32(block.number);\n', '\n', '    // push gem into collection\n', '    destination.push(tokenId);\n', '  }\n', '\n', '}']