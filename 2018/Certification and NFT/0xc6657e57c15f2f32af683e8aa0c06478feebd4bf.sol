['// CryptoRabbit Source code\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/// @title A base contract to control ownership\n', '/// @author cuilichen\n', 'contract OwnerBase {\n', '\n', '    // The addresses of the accounts that can execute actions within each roles.\n', '    address public ceoAddress;\n', '    address public cfoAddress;\n', '    address public cooAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '    \n', '    /// constructor\n', '    function OwnerBase() public {\n', '       ceoAddress = msg.sender;\n', '       cfoAddress = msg.sender;\n', '       cooAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Access modifier for CEO-only functionality\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CFO-only functionality\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '    \n', '    /// @dev Access modifier for COO-only functionality\n', '    modifier onlyCOO() {\n', '        require(msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '\n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCFO The address of the new COO\n', '    function setCFO(address _newCFO) external onlyCEO {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '    \n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCOO The address of the new COO\n', '    function setCOO(address _newCOO) external onlyCEO {\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCOO whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CFO or COO accounts are\n', '    ///  compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCOO whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/// @title all functions related to food\n', 'contract FoodStore is OwnerBase {\n', '\t/// event\n', '\tevent Bought(address buyer, uint32 bundles);\n', '\t\n', '\t\n', '    event ContractUpgrade(address newContract);\n', '\n', '\t\n', '    // Set in case the core contract is broken and an upgrade is required\n', '    address public newContractAddress;\n', '    \n', '    // Price (in wei) for food\n', '    uint public price = 10 finney;    \n', '    \n', '    \n', '    \n', '\n', '    /// @notice \n', '    function FoodStore() public {\n', '        // the creator of the contract is the initial CEO\n', '        ceoAddress = msg.sender;\n', '        cooAddress = msg.sender;\n', '        cfoAddress = msg.sender;\n', '    }\n', '    \n', '        \n', '    /// @notice customer buy food\n', '    /// @param _bundles The num of food\n', '    function buyFood(uint32 _bundles) external payable whenNotPaused returns (bool) {\n', '\t\trequire(newContractAddress == address(0));\n', '\t\t\n', '        uint cost = _bundles * price;\n', '\t\trequire(msg.value >= cost);\n', '\t\t\n', '        // Return the funds. \n', '        uint fundsExcess = msg.value - cost;\n', '        if (fundsExcess > 1 finney) {\n', '            msg.sender.transfer(fundsExcess);\n', '        }\n', '\t\temit Bought(msg.sender, _bundles);\n', '        return true;\n', '    }\n', '    \n', '    \n', '\n', '    /// @dev Used to mark the smart contract as upgraded.\n', '    /// @param _v2Address new address\n', '    function upgradeContract(address _v2Address) external onlyCOO whenPaused {\n', '        newContractAddress = _v2Address;\n', '        emit ContractUpgrade(_v2Address);\n', '    }\n', '\n', '    // @dev Allows the CEO to capture the balance available to the contract.\n', '    function withdrawBalance() external onlyCFO {\n', '        address tmp = address(this);\n', '        cfoAddress.transfer(tmp.balance);\n', '    }\n', '}']
['// CryptoRabbit Source code\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/// @title A base contract to control ownership\n', '/// @author cuilichen\n', 'contract OwnerBase {\n', '\n', '    // The addresses of the accounts that can execute actions within each roles.\n', '    address public ceoAddress;\n', '    address public cfoAddress;\n', '    address public cooAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '    \n', '    /// constructor\n', '    function OwnerBase() public {\n', '       ceoAddress = msg.sender;\n', '       cfoAddress = msg.sender;\n', '       cooAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Access modifier for CEO-only functionality\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CFO-only functionality\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '    \n', '    /// @dev Access modifier for COO-only functionality\n', '    modifier onlyCOO() {\n', '        require(msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '\n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCFO The address of the new COO\n', '    function setCFO(address _newCFO) external onlyCEO {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '    \n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCOO The address of the new COO\n', '    function setCOO(address _newCOO) external onlyCEO {\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCOO whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CFO or COO accounts are\n', '    ///  compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCOO whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/// @title all functions related to food\n', 'contract FoodStore is OwnerBase {\n', '\t/// event\n', '\tevent Bought(address buyer, uint32 bundles);\n', '\t\n', '\t\n', '    event ContractUpgrade(address newContract);\n', '\n', '\t\n', '    // Set in case the core contract is broken and an upgrade is required\n', '    address public newContractAddress;\n', '    \n', '    // Price (in wei) for food\n', '    uint public price = 10 finney;    \n', '    \n', '    \n', '    \n', '\n', '    /// @notice \n', '    function FoodStore() public {\n', '        // the creator of the contract is the initial CEO\n', '        ceoAddress = msg.sender;\n', '        cooAddress = msg.sender;\n', '        cfoAddress = msg.sender;\n', '    }\n', '    \n', '        \n', '    /// @notice customer buy food\n', '    /// @param _bundles The num of food\n', '    function buyFood(uint32 _bundles) external payable whenNotPaused returns (bool) {\n', '\t\trequire(newContractAddress == address(0));\n', '\t\t\n', '        uint cost = _bundles * price;\n', '\t\trequire(msg.value >= cost);\n', '\t\t\n', '        // Return the funds. \n', '        uint fundsExcess = msg.value - cost;\n', '        if (fundsExcess > 1 finney) {\n', '            msg.sender.transfer(fundsExcess);\n', '        }\n', '\t\temit Bought(msg.sender, _bundles);\n', '        return true;\n', '    }\n', '    \n', '    \n', '\n', '    /// @dev Used to mark the smart contract as upgraded.\n', '    /// @param _v2Address new address\n', '    function upgradeContract(address _v2Address) external onlyCOO whenPaused {\n', '        newContractAddress = _v2Address;\n', '        emit ContractUpgrade(_v2Address);\n', '    }\n', '\n', '    // @dev Allows the CEO to capture the balance available to the contract.\n', '    function withdrawBalance() external onlyCFO {\n', '        address tmp = address(this);\n', '        cfoAddress.transfer(tmp.balance);\n', '    }\n', '}']
