['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  constructor() public { owner = msg.sender;  }\n', ' \n', '  modifier onlyOwner() {     \n', '      address sender =  msg.sender;\n', '      address _owner = owner;\n', '      require(msg.sender == _owner);    \n', '      _;  \n', '  }\n', '  \n', '  function transferOwnership(address newOwner) onlyOwner public { \n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mintFinalize(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SwordToken\n', ' * @dev Sword ERC20 Token that can be minted.\n', ' * It is meant to be used in Sword crowdsale contract.\n', ' */\n', 'contract SwordToken is MintableToken {\n', '\n', '    string public constant name = "Sword Coin"; \n', '    string public constant symbol = "SWDC";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function getTotalSupply() view public returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '    \n', '}\n', '\n', 'contract KycContractInterface {\n', '    function isAddressVerified(address _address) public view returns (bool);\n', '}\n', '\n', 'contract KycContract is Ownable {\n', '    \n', '    mapping (address => bool) verifiedAddresses;\n', '    \n', '    function isAddressVerified(address _address) public view returns (bool) {\n', '        return verifiedAddresses[_address];\n', '    }\n', '    \n', '    function addAddress(address _newAddress) public onlyOwner {\n', '        require(!verifiedAddresses[_newAddress]);\n', '        \n', '        verifiedAddresses[_newAddress] = true;\n', '    }\n', '    \n', '    function removeAddress(address _oldAddress) public onlyOwner {\n', '        require(verifiedAddresses[_oldAddress]);\n', '        \n', '        verifiedAddresses[_oldAddress] = false;\n', '    }\n', '    \n', '    function batchAddAddresses(address[] _addresses) public onlyOwner {\n', '        for (uint cnt = 0; cnt < _addresses.length; cnt++) {\n', '            assert(!verifiedAddresses[_addresses[cnt]]);\n', '            verifiedAddresses[_addresses[cnt]] = true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SwordCrowdsale\n', ' * @dev This is Sword&#39;s crowdsale contract.\n', ' */\n', 'contract SwordCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '    uint256 public limitDateSale; // end date in units\n', '   \n', '    bool public isSoftCapHit = false;\n', '    bool public isStarted = false;\n', '    bool public isFinalized = false;\n', '   \n', '   struct ContributorData {\n', '        uint256 contributionAmount;\n', '        uint256 tokensIssued;\n', '    }\n', '   \n', '   address[] public tokenSendFailures;\n', '   \n', '    mapping(address => ContributorData) public contributorList;\n', '    mapping(uint => address) contributorIndexes;\n', '    uint nextContributorIndex;\n', '\n', '    constructor() public {}\n', '    \n', '   function init(uint256 _totalTokens, uint256 _tokensForCrowdsale, address _wallet, \n', '        uint256 _etherInUSD, address _tokenAddress, uint256 _softCapInEthers, uint256 _hardCapInEthers, \n', '        uint _saleDurationInDays, address _kycAddress, uint bonus) onlyOwner public {\n', '        \n', '        setTotalTokens(_totalTokens);\n', '        setTokensForCrowdSale(_tokensForCrowdsale);\n', '        setWallet(_wallet);\n', '        setRate(_etherInUSD);\n', '        setTokenAddress(_tokenAddress);\n', '        setSoftCap(_softCapInEthers);\n', '        setHardCap(_hardCapInEthers);\n', '        setSaleDuration(_saleDurationInDays);\n', '        setKycAddress(_kycAddress);\n', '        setSaleBonus(bonus);\n', '        kyc = KycContract(_kycAddress);\n', '        start(); // starting the crowdsale\n', '   }\n', '   \n', '    /**\n', '    * @dev Must be called to start the crowdsale\n', '    */\n', '    function start() onlyOwner public {\n', '        require(!isStarted);\n', '        require(!hasStarted());\n', '        require(wallet != address(0));\n', '        require(tokenAddress != address(0));\n', '        require(kycAddress != address(0));\n', '        require(rate != 0);\n', '        require(saleDuration != 0);\n', '        require(totalTokens != 0);\n', '        require(tokensForCrowdSale != 0);\n', '        require(softCap != 0);\n', '        require(hardCap != 0);\n', '        \n', '        starting();\n', '        emit SwordStarted();\n', '        \n', '        isStarted = true;\n', '    }\n', '  \n', '  \n', '   uint256 public totalTokens = 0;\n', '   function setTotalTokens(uint256 _totalTokens) onlyOwner public {\n', '       totalTokens = _totalTokens * (10 ** 18); // Total 1 billion tokens, 75 percent will be sold\n', '   }\n', '    \n', '   uint256 public tokensForCrowdSale = 0;\n', '   function setTokensForCrowdSale(uint256 _tokensForCrowdsale) onlyOwner public {\n', '       tokensForCrowdSale = _tokensForCrowdsale * (10 ** 18); // Total 1 billion tokens, 75 percent will be sold \n', '   }\n', ' \n', '    // address where funds are collected\n', '    address public wallet = 0x0;\n', '    function setWallet(address _wallet) onlyOwner public {\n', '        wallet = _wallet;\n', '    } \n', '\n', '    uint256 public rate = 0;\n', '    function setRate(uint256 _etherInUSD) public onlyOwner{\n', '         rate = (5 * (10**18) / 100) / _etherInUSD;\n', '    }\n', '    \n', '    // The token being sold\n', '    SwordToken public token;\n', '    address tokenAddress = 0x0; \n', '    function setTokenAddress(address _tokenAddress) public onlyOwner {\n', '        tokenAddress = _tokenAddress; // to check if token address is provided at start\n', '        token = SwordToken(_tokenAddress);\n', '    }\n', '\n', '   uint256 public softCap = 0;\n', '   function setSoftCap(uint256 _softCap) onlyOwner public {\n', '       softCap = _softCap * (10 ** 18); \n', '    }\n', '   \n', '   uint256 public hardCap = 0; \n', '   function setHardCap(uint256 _hardCap) onlyOwner public {\n', '       hardCap = _hardCap * (10 ** 18); \n', '   }\n', '  \n', '    // sale period (includes holidays)\n', '    uint public saleDuration = 0; // in days ex: 60.\n', '    function setSaleDuration(uint _saleDurationInDays) onlyOwner public {\n', '        saleDuration = _saleDurationInDays;\n', '\t\tlimitDateSale = startTime + (saleDuration * 1 days);\n', '        endTime = limitDateSale;\n', '    }\n', '  \n', '    address kycAddress = 0x0;\n', '    function setKycAddress(address _kycAddress) onlyOwner public {\n', '        kycAddress = _kycAddress;\n', '    }\n', '\t\n', '    uint public saleBonus = 0; // ex. 10\n', '    function setSaleBonus(uint bonus) public onlyOwner{\n', '        saleBonus = bonus;\n', '    }\n', '  \n', '   bool public isKYCRequiredToReceiveFunds = true; // whether Kyc is required to receive funds.\n', '    function setKYCRequiredToReceiveFunds(bool IS_KYCRequiredToReceiveFunds) public onlyOwner{\n', '        isKYCRequiredToReceiveFunds = IS_KYCRequiredToReceiveFunds;\n', '    }\n', '    \n', '    bool public isKYCRequiredToSendTokens = true; // whether Kyc is required to send tokens.\n', '      function setKYCRequiredToSendTokens(bool IS_KYCRequiredToSendTokens) public onlyOwner{\n', '        isKYCRequiredToSendTokens = IS_KYCRequiredToSendTokens;\n', '    }\n', '    \n', '    \n', '    // fallback function can be used to buy tokens\n', '    function () public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '   KycContract public kyc;\n', '   function transferKycOwnerShip(address _address) onlyOwner public {\n', '       kyc.transferOwnership(_address);\n', '   }\n', '   \n', '   function transferTokenOwnership(address _address) onlyOwner public {\n', '       token.transferOwnership(_address);\n', '   }\n', '   \n', '    /**\n', '     * release Tokens\n', '     */\n', '    function releaseAllTokens() onlyOwner public {\n', '        for(uint i=0; i < nextContributorIndex; i++) {\n', '            address addressToSendTo = contributorIndexes[i]; // address of user\n', '            releaseTokens(addressToSendTo);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * release Tokens of an individual address\n', '     */\n', '    function releaseTokens(address _contributerAddress) onlyOwner public {\n', '        if(isKYCRequiredToSendTokens){\n', '             if(KycContractInterface(kycAddress).isAddressVerified(_contributerAddress)){ // if kyc needs to be checked at release time\n', '                release(_contributerAddress);\n', '             }\n', '        } else {\n', '            release(_contributerAddress);\n', '        }\n', '    }\n', '    \n', '    function release(address _contributerAddress) internal {\n', '        if(contributorList[_contributerAddress].tokensIssued > 0) { \n', '            if(token.mint(_contributerAddress, contributorList[_contributerAddress].tokensIssued)) { // tokens sent successfully\n', '                contributorList[_contributerAddress].tokensIssued = 0;\n', '                contributorList[_contributerAddress].contributionAmount = 0;\n', '            } else { // token sending failed, has to be processed manually\n', '                tokenSendFailures.push(_contributerAddress);\n', '            }\n', '        }\n', '    }\n', '    \n', '    function tokenSendFailuresCount() public view returns (uint) {\n', '        return tokenSendFailures.length;\n', '    }\n', '   \n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '        if(isKYCRequiredToReceiveFunds){\n', '            require(KycContractInterface(kycAddress).isAddressVerified(msg.sender));\n', '        }\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = computeTokens(weiAmount);\n', '\n', '        require(isWithinTokenAllocLimit(tokens));\n', '\n', '        // update state - Add to eth raised\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        if (contributorList[beneficiary].contributionAmount == 0) { // if its a new contributor, add him and increase index\n', '            contributorIndexes[nextContributorIndex] = beneficiary;\n', '            nextContributorIndex += 1;\n', '        }\n', '        contributorList[beneficiary].contributionAmount += weiAmount;\n', '        contributorList[beneficiary].tokensIssued += tokens;\n', '\n', '        emit SwordTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '        handleFunds();\n', '    }\n', '  \n', '      /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event SwordTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '    function investorCount() constant public returns(uint) {\n', '        return nextContributorIndex;\n', '    }\n', '    \n', '    // @return true if crowdsale event has started\n', '    function hasStarted() public constant returns (bool) {\n', '        return (startTime != 0 && now > startTime);\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '    \n', '     // send ether to the fund collection wallet\n', '    function forwardAllRaisedFunds() internal {\n', '        wallet.transfer(weiRaised);\n', '    }\n', '\n', '    function isWithinSaleTimeLimit() internal view returns (bool) {\n', '        return now <= limitDateSale;\n', '    }\n', '\n', '    function isWithinSaleLimit(uint256 _tokens) internal view returns (bool) {\n', '        return token.getTotalSupply().add(_tokens) <= tokensForCrowdSale;\n', '    }\n', '\n', '    function computeTokens(uint256 weiAmount) view internal returns (uint256) {\n', '        uint256 appliedBonus = 0;\n', '        if (isWithinSaleTimeLimit()) {\n', '            appliedBonus = saleBonus;\n', '        } \n', '        return (weiAmount.div(rate) + (weiAmount.div(rate).mul(appliedBonus).div(100))) * (10 ** 18);\n', '    }\n', '    \n', '    function isWithinTokenAllocLimit(uint256 _tokens) view internal returns (bool) {\n', '        return (isWithinSaleTimeLimit() && isWithinSaleLimit(_tokens));\n', '    }\n', '\n', '    function didSoftCapReached() internal returns (bool) {\n', '        if(weiRaised >= softCap){\n', '            isSoftCapHit = true; // setting the flag that soft cap is hit and all funds should be sent directly to wallet from now on.\n', '        } else {\n', '            isSoftCapHit = false;\n', '        }\n', '        return isSoftCapHit;\n', '    }\n', '\n', '    // overriding SwordBaseCrowdsale#validPurchase to add extra cap logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinCap = weiRaised.add(msg.value) <= hardCap;\n', '        bool withinPeriod = now >= startTime && now <= endTime; \n', '        bool nonZeroPurchase = msg.value != 0; \n', '        return (withinPeriod && nonZeroPurchase) && withinCap && isWithinSaleTimeLimit();\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        bool capReached = weiRaised >= hardCap;\n', '        return (endTime != 0 && now > endTime) || capReached;\n', '    }\n', '\n', '  \n', '\n', '  event SwordStarted();\n', '  event SwordFinalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '   // require(hasEnded());\n', '\n', '    finalization();\n', '    emit SwordFinalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '    function starting() internal {\n', '        startTime = now;\n', '        limitDateSale = startTime + (saleDuration * 1 days);\n', '        endTime = limitDateSale;\n', '    }\n', '\n', '    function finalization() internal {\n', '        uint256 remainingTokens = totalTokens.sub(token.getTotalSupply());\n', '        token.mintFinalize(wallet, remainingTokens);\n', '        forwardAllRaisedFunds(); \n', '    }\n', '    \n', '    // overridden\n', '    function handleFunds() internal {\n', '        if(isSoftCapHit){ // if soft cap is reached, start transferring funds immediately to wallet\n', '            forwardFunds();  \n', '        } else {\n', '            if(didSoftCapReached()){    \n', '                forwardAllRaisedFunds();            \n', '            }\n', '        }\n', '    }\n', '    \n', '     modifier afterDeadline() { if (hasEnded() || isFinalized) _; } // a modifier to tell token sale ended \n', '    \n', '  /**\n', '     * auto refund Tokens\n', '     */\n', '    function refundAllMoney() onlyOwner public {\n', '        for(uint i=0; i < nextContributorIndex; i++) {\n', '            address addressToSendTo = contributorIndexes[i];\n', '            refundMoney(addressToSendTo); \n', '        }\n', '    }\n', '    \n', '    /**\n', '     * refund Tokens of a single address\n', '     */\n', '    function refundMoney(address _address) onlyOwner public {\n', '        uint amount = contributorList[_address].contributionAmount;\n', '        if (amount > 0 && _address.send(amount)) { // user got money back\n', '            contributorList[_address].contributionAmount =  0;\n', '            contributorList[_address].tokensIssued =  0;\n', '        } \n', '    }\n', '}']