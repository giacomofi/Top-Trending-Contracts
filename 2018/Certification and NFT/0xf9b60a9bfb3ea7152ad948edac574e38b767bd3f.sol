['pragma solidity 0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', '* @title LendingBlockToken\n', '* @dev LND or LendingBlock Token\n', '* Max supply of 1 billion\n', '* 18 decimals\n', '* not transferable before end of token generation event\n', '* transferable time can be set\n', '*/\n', 'contract LendingBlockToken is StandardToken, BurnableToken, Ownable {\n', '\tstring public constant name = "Lendingblock";\n', '\tstring public constant symbol = "LND";\n', '\tuint8 public constant decimals = 18;\n', '\tuint256 public transferableTime = 1546300800;// 1/1/2019\n', '\taddress public tokenEventAddress;\n', '\n', '\t/**\n', '\t* @dev before transferableTime, only the token event contract and owner\n', '\t* can transfer tokens\n', '\t*/\n', '\tmodifier afterTransferableTime() {\n', '\t\tif (now <= transferableTime) {\n', '\t\t\trequire(msg.sender == tokenEventAddress || msg.sender == owner);\n', '\t\t}\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev constructor to initiate values\n', '\t* msg.sender is the token event contract\n', '\t* supply is 1 billion\n', '\t* @param _owner address that has can transfer tokens and access to change transferableTime\n', '\t*/\n', '\tfunction LendingBlockToken(address _owner) public {\n', '\t\ttokenEventAddress = msg.sender;\n', '\t\towner = _owner;\n', '\t\ttotalSupply = 1e9 * 1e18;\n', '\t\tbalances[_owner] = totalSupply;\n', '\t\tTransfer(address(0), _owner, totalSupply);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transferableTime restrictions on the parent function\n', '\t* @param _to address that will receive tokens\n', '\t* @param _value amount of tokens to transfer\n', '\t* @return boolean that indicates if the operation was successful\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value)\n', '\t\tpublic\n', '\t\tafterTransferableTime\n', '\t\treturns (bool)\n', '\t{\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transferableTime restrictions on the parent function\n', '\t* @param _from address that is approving the tokens\n', '\t* @param _to address that will receive approval for the tokens\n', '\t* @param _value amount of tokens to approve\n', '\t* @return boolean that indicates if the operation was successful\n', '\t*/\n', '\tfunction transferFrom(address _from, address _to, uint256 _value)\n', '\t\tpublic\n', '\t\tafterTransferableTime\n', '\t\treturns (bool)\n', '\t{\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev set transferableTime\n', '\t* transferableTime can only be set earlier, not later\n', '\t* once tokens are transferable, it cannot be paused\n', '\t* @param _transferableTime epoch time for transferableTime\n', '\t*/\n', '\tfunction setTransferableTime(uint256 _transferableTime)\n', '\t\texternal\n', '\t\tonlyOwner\n', '\t{\n', '\t\trequire(_transferableTime < transferableTime);\n', '\t\ttransferableTime = _transferableTime;\n', '\t}\n', '}\n', '\n', '/**\n', '* @title LendingBlockTokenEvent\n', '* @dev sale contract that accepts eth and sends LND tokens in return\n', '* only the owner can change parameters\n', '* deploys LND token when this contract is deployed\n', '* 2 separate list of participants, mainly pre sale and main sale\n', '* multiple rounds are possible for pre sale and main sale\n', '* within a round, all participants have the same contribution min, max and rate\n', '*/\n', 'contract LendingBlockTokenEvent is Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tLendingBlockToken public token;\n', '\taddress public wallet;\n', '\tbool public eventEnded;\n', '\tuint256 public startTimePre;\n', '\tuint256 public startTimeMain;\n', '\tuint256 public endTimePre;\n', '\tuint256 public endTimeMain;\n', '\tuint256 public ratePre;\n', '\tuint256 public rateMain;\n', '\tuint256 public minCapPre;\n', '\tuint256 public minCapMain;\n', '\tuint256 public maxCapPre;\n', '\tuint256 public maxCapMain;\n', '\tuint256 public weiTotal;\n', '\tmapping(address => bool) public whitelistedAddressPre;\n', '\tmapping(address => bool) public whitelistedAddressMain;\n', '\tmapping(address => uint256) public contributedValue;\n', '\n', '\tevent TokenPre(address indexed participant, uint256 value, uint256 tokens);\n', '\tevent TokenMain(address indexed participant, uint256 value, uint256 tokens);\n', '\tevent SetPre(uint256 startTimePre, uint256 endTimePre, uint256 minCapPre, uint256 maxCapPre, uint256 ratePre);\n', '\tevent SetMain(uint256 startTimeMain, uint256 endTimeMain, uint256 minCapMain, uint256 maxCapMain, uint256 rateMain);\n', '\tevent WhitelistPre(address indexed whitelistedAddress, bool whitelistedStatus);\n', '\tevent WhitelistMain(address indexed whitelistedAddress, bool whitelistedStatus);\n', '\n', '\t/**\n', '\t* @dev all functions can only be called before event has ended\n', '\t*/\n', '\tmodifier eventNotEnded() {\n', '\t\trequire(eventEnded == false);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev constructor to initiate values\n', '\t* @param _wallet address that will receive the contributed eth\n', '\t*/\n', '\tfunction LendingBlockTokenEvent(address _wallet) public {\n', '\t\ttoken = new LendingBlockToken(msg.sender);\n', '\t\twallet = _wallet;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev function to join the pre sale\n', '\t* associated with variables, functions, events of suffix Pre\n', '\t*/\n', '\tfunction joinPre()\n', '\t\tpublic\n', '\t\tpayable\n', '\t\teventNotEnded\n', '\t{\n', '\t\trequire(now >= startTimePre);//after start time\n', '\t\trequire(now <= endTimePre);//before end time\n', '\t\trequire(msg.value >= minCapPre);//contribution is at least minimum\n', '\t\trequire(whitelistedAddressPre[msg.sender] == true);//sender is whitelisted\n', '\n', '\t\tuint256 weiValue = msg.value;\n', '\t\tcontributedValue[msg.sender] = contributedValue[msg.sender].add(weiValue);//store amount contributed\n', '\t\trequire(contributedValue[msg.sender] <= maxCapPre);//total contribution not above maximum\n', '\n', '\t\tuint256 tokens = weiValue.mul(ratePre);//find amount of tokens\n', '\t\tweiTotal = weiTotal.add(weiValue);//store total collected eth\n', '\n', '\t\ttoken.transfer(msg.sender, tokens);//send token to participant\n', '\t\tTokenPre(msg.sender, weiValue, tokens);//record contribution in logs\n', '\n', '\t\tforwardFunds();//send eth for safekeeping\n', '\t}\n', '\n', '\t/**\n', '\t* @dev function to join the main sale\n', '\t* associated with variables, functions, events of suffix Main\n', '\t*/\n', '\tfunction joinMain()\n', '\t\tpublic\n', '\t\tpayable\n', '\t\teventNotEnded\n', '\t{\n', '\t\trequire(now >= startTimeMain);//after start time\n', '\t\trequire(now <= endTimeMain);//before end time\n', '\t\trequire(msg.value >= minCapMain);//contribution is at least minimum\n', '\t\trequire(whitelistedAddressMain[msg.sender] == true);//sender is whitelisted\n', '\n', '\t\tuint256 weiValue = msg.value;\n', '\t\tcontributedValue[msg.sender] = contributedValue[msg.sender].add(weiValue);//store amount contributed\n', '\t\trequire(contributedValue[msg.sender] <= maxCapMain);//total contribution not above maximum\n', '\n', '\t\tuint256 tokens = weiValue.mul(rateMain);//find amount of tokens\n', '\t\tweiTotal = weiTotal.add(weiValue);//store total collected eth\n', '\n', '\t\ttoken.transfer(msg.sender, tokens);//send token to participant\n', '\t\tTokenMain(msg.sender, weiValue, tokens);//record contribution in logs\n', '\n', '\t\tforwardFunds();//send eth for safekeeping\n', '\t}\n', '\n', '\t/**\n', '\t* @dev send eth for safekeeping\n', '\t*/\n', '\tfunction forwardFunds() internal {\n', '\t\twallet.transfer(msg.value);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev set the parameters for the contribution round\n', '\t* associated with variables, functions, events of suffix Pre\n', '\t* @param _startTimePre start time of contribution round\n', '\t* @param _endTimePre end time of contribution round\n', '\t* @param _minCapPre minimum contribution for this round\n', '\t* @param _maxCapPre maximum contribution for this round\n', '\t* @param _ratePre token exchange rate for this round\n', '\t*/\n', '\tfunction setPre(\n', '\t\tuint256 _startTimePre,\n', '\t\tuint256 _endTimePre,\n', '\t\tuint256 _minCapPre,\n', '\t\tuint256 _maxCapPre,\n', '\t\tuint256 _ratePre\n', '\t)\n', '\t\texternal\n', '\t\tonlyOwner\n', '\t\teventNotEnded\n', '\t{\n', '\t\trequire(now < _startTimePre);//start time must be in the future\n', '\t\trequire(_startTimePre < _endTimePre);//end time must be later than start time\n', '\t\trequire(_minCapPre <= _maxCapPre);//minimum must be smaller or equal to maximum\n', '\t\tstartTimePre = _startTimePre;\n', '\t\tendTimePre = _endTimePre;\n', '\t\tminCapPre = _minCapPre;\n', '\t\tmaxCapPre = _maxCapPre;\n', '\t\tratePre = _ratePre;\n', '\t\tSetPre(_startTimePre, _endTimePre, _minCapPre, _maxCapPre, _ratePre);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev set the parameters for the contribution round\n', '\t* associated with variables, functions, events of suffix Main\n', '\t* @param _startTimeMain start time of contribution round\n', '\t* @param _endTimeMain end time of contribution round\n', '\t* @param _minCapMain minimum contribution for this round\n', '\t* @param _maxCapMain maximum contribution for this round\n', '\t* @param _rateMain token exchange rate for this round\n', '\t*/\n', '\tfunction setMain(\n', '\t\tuint256 _startTimeMain,\n', '\t\tuint256 _endTimeMain,\n', '\t\tuint256 _minCapMain,\n', '\t\tuint256 _maxCapMain,\n', '\t\tuint256 _rateMain\n', '\t)\n', '\t\texternal\n', '\t\tonlyOwner\n', '\t\teventNotEnded\n', '\t{\n', '\t\trequire(now < _startTimeMain);//start time must be in the future\n', '\t\trequire(_startTimeMain < _endTimeMain);//end time must be later than start time\n', '\t\trequire(_minCapMain <= _maxCapMain);//minimum must be smaller or equal to maximum\n', '\t\trequire(_startTimeMain > endTimePre);//main round should be after pre round\n', '\t\tstartTimeMain = _startTimeMain;\n', '\t\tendTimeMain = _endTimeMain;\n', '\t\tminCapMain = _minCapMain;\n', '\t\tmaxCapMain = _maxCapMain;\n', '\t\trateMain = _rateMain;\n', '\t\tSetMain(_startTimeMain, _endTimeMain, _minCapMain, _maxCapMain, _rateMain);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev change the whitelist status of an address for pre sale\n', '\t* associated with variables, functions, events of suffix Pre\n', '\t* @param whitelistedAddress list of addresses for whitelist status change\n', '\t* @param whitelistedStatus set the address whitelist status to true or false\n', '\t*/\n', '\tfunction setWhitelistedAddressPre(address[] whitelistedAddress, bool whitelistedStatus)\n', '\t\texternal\n', '\t\tonlyOwner\n', '\t\teventNotEnded\n', '\t{\n', '\t\tfor (uint256 i = 0; i < whitelistedAddress.length; i++) {\n', '\t\t\twhitelistedAddressPre[whitelistedAddress[i]] = whitelistedStatus;\n', '\t\t\tWhitelistPre(whitelistedAddress[i], whitelistedStatus);\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t* @dev change the whitelist status of an address for main sale\n', '\t* associated with variables, functions, events of suffix Main\n', '\t* @param whitelistedAddress list of addresses for whitelist status change\n', '\t* @param whitelistedStatus set the address whitelist status to true or false\n', '\t*/\n', '\tfunction setWhitelistedAddressMain(address[] whitelistedAddress, bool whitelistedStatus)\n', '\t\texternal\n', '\t\tonlyOwner\n', '\t\teventNotEnded\n', '\t{\n', '\t\tfor (uint256 i = 0; i < whitelistedAddress.length; i++) {\n', '\t\t\twhitelistedAddressMain[whitelistedAddress[i]] = whitelistedStatus;\n', '\t\t\tWhitelistMain(whitelistedAddress[i], whitelistedStatus);\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t* @dev end the token generation event and deactivates all functions\n', '\t* can only be called after end time\n', '\t* burn all remaining tokens in this contract that are not exchanged\n', '\t*/\n', '\tfunction endEvent()\n', '\t\texternal\n', '\t\tonlyOwner\n', '\t\teventNotEnded\n', '\t{\n', '\t\trequire(now > endTimeMain);//can only be called after end time\n', '\t\trequire(endTimeMain > 0);//can only be called after end time has been set\n', '\t\tuint256 leftTokens = token.balanceOf(this);//find if any tokens are left\n', '\t\tif (leftTokens > 0) {\n', '\t\t\ttoken.burn(leftTokens);//burn all remaining tokens\n', '\t\t}\n', '\t\teventEnded = true;//deactivates all functions\n', '\t}\n', '\n', '\t/**\n', '\t* @dev default function to call the right function for exchanging tokens\n', '\t* main sale should start only after pre sale\n', '\t*/\n', '\tfunction () external payable {\n', '\t\tif (now <= endTimePre) {//call pre function if before pre sale end time\n', '\t\t\tjoinPre();\n', '\t\t} else if (now <= endTimeMain) {//call main function if before main sale end time\n', '\t\t\tjoinMain();\n', '\t\t} else {\n', '\t\t\trevert();\n', '\t\t}\n', '\t}\n', '\n', '}']