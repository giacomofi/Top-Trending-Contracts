['pragma solidity ^0.4.21;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event TransferOwnership(address oldaddr, address newaddr);\n', '\n', '    modifier onlyOwner() { if (msg.sender != owner) return; _; }\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transferOwnership(address _new) onlyOwner public {\n', '        address oldaddr = owner;\n', '        owner = _new;\n', '        emit TransferOwnership(oldaddr, owner);\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '\tuint256 public totalSupply;\n', '\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success);\n', '\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract DACVest is Owned {\n', '    uint256 constant public initialVestAmount = 880000000 ether;\n', '\n', '    uint256 constant public start = 1533081600; // 2018/08/01\n', '    uint256 constant public phaseDuration = 30 days;\n', '    uint256 constant public phaseReleaseAmount = 176000000 ether;\n', '\n', '    uint256 public latestPhaseNumber = 0;\n', '    bool public ready = false;\n', '\n', '    ERC20Interface constant public DACContract = ERC20Interface(0xAAD54C9f27B876D2538455DdA69207279fF673a5);\n', '\n', '    function DACVest() public {\n', '        \n', '    }\n', '\n', '    function setup() onlyOwner public {\n', '        ready = true;\n', '        require(DACContract.transferFrom(owner, this, initialVestAmount));\n', '    }\n', '\n', '    function release() onlyOwner public {\n', '        require(ready);\n', '        require(now > start);\n', '\n', '        uint256 currentPhaseNumber = (now - start) / phaseDuration + 1;\n', '        require(currentPhaseNumber > latestPhaseNumber);\n', '\n', '        uint256 maxReleaseAmount = (currentPhaseNumber - latestPhaseNumber) * phaseReleaseAmount;\n', '        latestPhaseNumber = currentPhaseNumber;\n', '        uint256 tokenBalance = DACContract.balanceOf(this);\n', '        uint256 returnAmount = maxReleaseAmount > tokenBalance ? tokenBalance : maxReleaseAmount;\n', '\n', '        require(DACContract.transfer(owner, returnAmount));\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event TransferOwnership(address oldaddr, address newaddr);\n', '\n', '    modifier onlyOwner() { if (msg.sender != owner) return; _; }\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transferOwnership(address _new) onlyOwner public {\n', '        address oldaddr = owner;\n', '        owner = _new;\n', '        emit TransferOwnership(oldaddr, owner);\n', '    }\n', '}\n', '\n', 'contract ERC20Interface {\n', '\tuint256 public totalSupply;\n', '\tfunction balanceOf(address _owner) public constant returns (uint256 balance);\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool success);\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool success);\n', '\tfunction allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\tevent Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\tevent Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract DACVest is Owned {\n', '    uint256 constant public initialVestAmount = 880000000 ether;\n', '\n', '    uint256 constant public start = 1533081600; // 2018/08/01\n', '    uint256 constant public phaseDuration = 30 days;\n', '    uint256 constant public phaseReleaseAmount = 176000000 ether;\n', '\n', '    uint256 public latestPhaseNumber = 0;\n', '    bool public ready = false;\n', '\n', '    ERC20Interface constant public DACContract = ERC20Interface(0xAAD54C9f27B876D2538455DdA69207279fF673a5);\n', '\n', '    function DACVest() public {\n', '        \n', '    }\n', '\n', '    function setup() onlyOwner public {\n', '        ready = true;\n', '        require(DACContract.transferFrom(owner, this, initialVestAmount));\n', '    }\n', '\n', '    function release() onlyOwner public {\n', '        require(ready);\n', '        require(now > start);\n', '\n', '        uint256 currentPhaseNumber = (now - start) / phaseDuration + 1;\n', '        require(currentPhaseNumber > latestPhaseNumber);\n', '\n', '        uint256 maxReleaseAmount = (currentPhaseNumber - latestPhaseNumber) * phaseReleaseAmount;\n', '        latestPhaseNumber = currentPhaseNumber;\n', '        uint256 tokenBalance = DACContract.balanceOf(this);\n', '        uint256 returnAmount = maxReleaseAmount > tokenBalance ? tokenBalance : maxReleaseAmount;\n', '\n', '        require(DACContract.transfer(owner, returnAmount));\n', '    }\n', '}']
