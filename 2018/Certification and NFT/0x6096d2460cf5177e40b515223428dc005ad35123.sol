['pragma solidity ^0.4.24;\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract PreciumTokenBase is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) public balances_;\n', '    mapping (address => mapping (address => uint256)) public allowed_;\n', '\n', '    uint256 public totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances_[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed_[_owner][_spender];\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_value <= balances_[_from]);\n', '        require(_to != address(0));\n', '\n', '        balances_[_from] = balances_[_from].sub(_value);\n', '        balances_[_to] = balances_[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        return _transfer(msg.sender, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed_[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function _transferFrom(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_value <= balances_[_from]);\n', '        require(_value <= allowed_[_from][msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances_[_from] = balances_[_from].sub(_value);\n', '        balances_[_to] = balances_[_to].add(_value);\n', '        allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        return _transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '        allowed_[msg.sender][_spender] = allowed_[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '        uint256 oldValue = allowed_[msg.sender][_spender];\n', '        if (_subtractedValue >= oldValue) {\n', '            allowed_[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed_[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed_[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function _burn(address _account, uint256 _amount) internal {\n', '        require(_account != 0);\n', '        require(_amount <= balances_[_account]);\n', '\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        balances_[_account] = balances_[_account].sub(_amount);\n', '        emit Transfer(_account, address(0), _amount);\n', '    }\n', '    \n', '    function burn(uint256 _amount) public {\n', '        _burn(msg.sender, _amount);\n', '    }\n', '}\n', '\n', 'contract PreciumToken is PreciumTokenBase, Ownable {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals = 18;\n', '    struct lockInfo {\n', '        uint256 lockQuantity;\n', '        uint lockPeriod;\n', '    }\n', '    mapping (address => lockInfo[]) public tokenLockInfo;\n', '    mapping (address => uint256) public unlockQuantity;\n', '    mapping (address => bool) public lockStatus;\n', '    mapping (address => bool) private FreezedWallet;\n', '\n', '    function PreciumToken(uint256 initialSupply, string tokenName, uint256 decimalsToken, string tokenSymbol) public {\n', '        decimals = decimalsToken;\n', '        totalSupply_ = initialSupply * 10 ** uint256(decimals);\n', '        emit Transfer(0, msg.sender, totalSupply_);\n', '        balances_[msg.sender] = totalSupply_;\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        unlockQuantity[msg.sender] = balances_[msg.sender];\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '\n', '        bool transferResult;\n', '        uint256 lockQuantity;\n', '        uint256 lockTotalQuantity;\n', '        uint lockPeriod;\n', '\n', '        require(FreezedWallet[msg.sender] == false);\n', '        require(FreezedWallet[_to] == false);\n', '        \n', '        if(lockStatus[msg.sender] == false) {\n', '            transferResult = _transfer(msg.sender, _to, _value);\n', '            if (transferResult == true) {\n', '                unlockQuantity[msg.sender] = unlockQuantity[msg.sender].sub(_value);\n', '                unlockQuantity[_to] = unlockQuantity[_to].add(_value);\n', '            }\n', '        }\n', '        else{\n', '            for(uint i = 0; i < tokenLockInfo[msg.sender].length; i++) {\n', '                lockQuantity = tokenLockInfo[msg.sender][i].lockQuantity;\n', '                lockPeriod = tokenLockInfo[msg.sender][i].lockPeriod;\n', '\n', '                if(lockPeriod <= now && lockQuantity != 0) {\n', '                    unlockQuantity[msg.sender] = unlockQuantity[msg.sender].add(lockQuantity);\n', '                    tokenLockInfo[msg.sender][i].lockQuantity = 0;\n', '                    lockQuantity = tokenLockInfo[msg.sender][i].lockQuantity;\n', '                }\n', '                lockTotalQuantity = lockTotalQuantity.add(lockQuantity);\n', '            }\n', '            if(lockTotalQuantity == 0)\n', '                lockStatus[msg.sender] = false;\n', '                    \n', '            require(_value <= unlockQuantity[msg.sender]);\n', '            \n', '            transferResult = _transfer(msg.sender, _to, _value);\n', '            if (transferResult == true) {\n', '                unlockQuantity[msg.sender] = unlockQuantity[msg.sender].sub(_value);\n', '                unlockQuantity[_to] = unlockQuantity[_to].add(_value);\n', '            }\n', '        }\n', '        \n', '        return transferResult;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        \n', '        bool transferResult;\n', '        uint256 lockQuantity;\n', '        uint256 lockTotalQuantity;\n', '        uint lockPeriod;\n', '        \n', '        require(FreezedWallet[_from] == false);\n', '        require(FreezedWallet[_to] == false);\n', '        \n', '        if(lockStatus[_from] == false) {\n', '            transferResult = _transferFrom(_from, _to, _value);\n', '            if (transferResult == true) {\n', '                unlockQuantity[_from] = unlockQuantity[_from].sub(_value);\n', '                unlockQuantity[_to] = unlockQuantity[_to].add(_value);\n', '            }\n', '        }\n', '        else{\n', '            for(uint i = 0; i < tokenLockInfo[_from].length; i++) {\n', '                lockQuantity = tokenLockInfo[_from][i].lockQuantity;\n', '                lockPeriod = tokenLockInfo[_from][i].lockPeriod;\n', '\n', '                if(lockPeriod <= now && lockQuantity != 0) {\n', '                    unlockQuantity[_from] = unlockQuantity[_from].add(lockQuantity);\n', '                    tokenLockInfo[_from][i].lockQuantity = 0;\n', '                    lockQuantity = tokenLockInfo[_from][i].lockQuantity;\n', '                }\n', '                lockTotalQuantity = lockTotalQuantity.add(lockQuantity);\n', '            }\n', '            if(lockTotalQuantity == 0)\n', '                lockStatus[_from] = false;\n', '                    \n', '            require(_value <= unlockQuantity[_from]);\n', '            \n', '            transferResult = _transferFrom(_from, _to, _value);\n', '            if (transferResult == true) {\n', '                unlockQuantity[_from] = unlockQuantity[_from].sub(_value);\n', '                unlockQuantity[_to] = unlockQuantity[_to].add(_value);\n', '            }\n', '        }\n', '        \n', '        return transferResult;\n', '    }\n', '\n', '    function transferAndLock(address _to, uint256 _value, uint _lockPeriod) onlyOwner public {\n', '       \n', '        bool transferResult;\n', '        \n', '        require(FreezedWallet[_to] == false);\n', '        \n', '        transferResult = _transfer(msg.sender, _to, _value);\n', '        if (transferResult == true) {\n', '            lockStatus[_to] = true;\n', '            tokenLockInfo[_to].push(lockInfo(_value, now + _lockPeriod * 1 days ));\n', '            unlockQuantity[msg.sender] = unlockQuantity[msg.sender].sub(_value);\n', '        }\n', '    }\n', '\n', '    function changeLockPeriod(address _owner, uint256 _index, uint _newLockPeriod) onlyOwner public {\n', '        \n', '        require(_index < tokenLockInfo[_owner].length);\n', '        \n', '        tokenLockInfo[_owner][_index].lockPeriod = now + _newLockPeriod * 1 days;\n', '    }\n', '    \n', '    function freezingWallet(address _owner) onlyOwner public {\n', '        \n', '        FreezedWallet[_owner] = true;\n', '    }\n', '    \n', '    function unfreezingWallet(address _owner) onlyOwner public {\n', '        \n', '        FreezedWallet[_owner] = false;\n', '    }\n', '    \n', '    function burn(uint256 _amount) onlyOwner public {\n', '        \n', '        _burn(msg.sender, _amount);\n', '        unlockQuantity[msg.sender] = unlockQuantity[msg.sender].sub(_amount);\n', '    }\n', '\n', '    function getNowTime() view public returns(uint res) {\n', '        \n', '        return now;\n', '    }\n', '\n', '    function getLockInfo(address _owner, uint256 _index) view public returns(uint256, uint) {\n', '        \n', '        return (tokenLockInfo[_owner][_index].lockQuantity, tokenLockInfo[_owner][_index].lockPeriod);\n', '    }\n', '\n', '    function getUnlockQuantity(address _owner) view public returns(uint res) {\n', '        \n', '        return unlockQuantity[_owner];\n', '    }\n', '    \n', '    function getLockStatus(address _owner) view public returns(bool res) {\n', '        \n', '        return lockStatus[_owner];\n', '    }\n', '    \n', '    function getLockCount(address _owner) view public returns(uint res) {\n', '        \n', '        return tokenLockInfo[_owner].length;\n', '    }\n', '    \n', '    function getFreezingInfo(address _owner) view public returns(bool res) {\n', '        \n', '        return FreezedWallet[_owner];\n', '    }\n', '}']