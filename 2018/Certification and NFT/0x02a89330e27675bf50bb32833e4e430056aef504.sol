['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract token { function transfer(address receiver, uint amount){  } }\n', '\n', 'contract SmartBondsSale {\n', '  using SafeMath for uint256;\n', '\n', '  // uint256 durationInMinutes;\n', '  // address where funds are collected\n', '  address public badgerWallet;\n', '  address public investmentFundWallet;\n', '  address public buyoutWallet;\n', '  // token address\n', '  address addressOfTokenUsedAsReward;\n', '\n', '  token tokenReward;\n', '\n', '\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  \n', '  uint256 public badgerAmount;\n', '  uint256 public investAmount;\n', '  uint256 public buyoutAmount;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function SmartBondsSale() {\n', '    // ether addressess where funds will be distributed\n', '    badgerWallet = 0x5cB7a6547A9408e3C9B09FB5c640d4fB767b8070; \n', '    investmentFundWallet = 0x8F2d31E3c259F65222D0748e416A79e51589Ce3b;\n', '    buyoutWallet = 0x336b903eF5e3c911df7f8172EcAaAA651B80CA1D;\n', '   \n', '    // address of SmartBonds Token \n', '    addressOfTokenUsedAsReward = 0x38dCb83980183f089FC7D147c5bF82E5C9b8F237;\n', '    tokenReward = token(addressOfTokenUsedAsReward);\n', '    \n', '    // start and end times of contract sale \n', '    startTime = 1533583718; // now\n', '    endTime = startTime + 182 * 1 days; // 182 days\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    // minimum amount is 2.5 eth, and max is 25 eth \n', '    uint256 weiAmount = msg.value;\n', '    if(weiAmount < 2.5 * 10**18) throw; \n', '    if(weiAmount > 25 * 10**18) throw;\n', '    \n', '    // divide wei sent into distribution wallets \n', '    badgerAmount = (5 * weiAmount)/100;\n', '    buyoutAmount = (25 * weiAmount)/100;\n', '    investAmount = (70 * weiAmount)/100;\n', '\n', '    // tokenPrice\n', '    uint256 tokenPrice = 25000000000000000;\n', '    // calculate token amount to be sent\n', '    uint256 tokens = (weiAmount *10**18) / tokenPrice;\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    tokenReward.transfer(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    // wallet.transfer(msg.value);\n', '    if (!badgerWallet.send(badgerAmount)) {\n', '      throw;\n', '    }\n', '    if (!investmentFundWallet.send(investAmount)){\n', '        throw;\n', '    }\n', '    if (!buyoutWallet.send(buyoutAmount)){\n', '        throw;\n', '    }\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  function withdrawTokens(uint256 _amount) {\n', '    if(msg.sender!=badgerWallet) throw;\n', '    tokenReward.transfer(badgerWallet,_amount);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract token { function transfer(address receiver, uint amount){  } }\n', '\n', 'contract SmartBondsSale {\n', '  using SafeMath for uint256;\n', '\n', '  // uint256 durationInMinutes;\n', '  // address where funds are collected\n', '  address public badgerWallet;\n', '  address public investmentFundWallet;\n', '  address public buyoutWallet;\n', '  // token address\n', '  address addressOfTokenUsedAsReward;\n', '\n', '  token tokenReward;\n', '\n', '\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  \n', '  uint256 public badgerAmount;\n', '  uint256 public investAmount;\n', '  uint256 public buyoutAmount;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function SmartBondsSale() {\n', '    // ether addressess where funds will be distributed\n', '    badgerWallet = 0x5cB7a6547A9408e3C9B09FB5c640d4fB767b8070; \n', '    investmentFundWallet = 0x8F2d31E3c259F65222D0748e416A79e51589Ce3b;\n', '    buyoutWallet = 0x336b903eF5e3c911df7f8172EcAaAA651B80CA1D;\n', '   \n', '    // address of SmartBonds Token \n', '    addressOfTokenUsedAsReward = 0x38dCb83980183f089FC7D147c5bF82E5C9b8F237;\n', '    tokenReward = token(addressOfTokenUsedAsReward);\n', '    \n', '    // start and end times of contract sale \n', '    startTime = 1533583718; // now\n', '    endTime = startTime + 182 * 1 days; // 182 days\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    // minimum amount is 2.5 eth, and max is 25 eth \n', '    uint256 weiAmount = msg.value;\n', '    if(weiAmount < 2.5 * 10**18) throw; \n', '    if(weiAmount > 25 * 10**18) throw;\n', '    \n', '    // divide wei sent into distribution wallets \n', '    badgerAmount = (5 * weiAmount)/100;\n', '    buyoutAmount = (25 * weiAmount)/100;\n', '    investAmount = (70 * weiAmount)/100;\n', '\n', '    // tokenPrice\n', '    uint256 tokenPrice = 25000000000000000;\n', '    // calculate token amount to be sent\n', '    uint256 tokens = (weiAmount *10**18) / tokenPrice;\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    tokenReward.transfer(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    // wallet.transfer(msg.value);\n', '    if (!badgerWallet.send(badgerAmount)) {\n', '      throw;\n', '    }\n', '    if (!investmentFundWallet.send(investAmount)){\n', '        throw;\n', '    }\n', '    if (!buyoutWallet.send(buyoutAmount)){\n', '        throw;\n', '    }\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  function withdrawTokens(uint256 _amount) {\n', '    if(msg.sender!=badgerWallet) throw;\n', '    tokenReward.transfer(badgerWallet,_amount);\n', '  }\n', '}']
