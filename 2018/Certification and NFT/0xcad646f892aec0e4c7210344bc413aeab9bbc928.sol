['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    Sale(address ethwallet)   // this will send the received ETH funds to this address\n', '  @author Yumerium Ltd\n', '*/\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract YumeriumManager {\n', '    function getYumerium(uint256 value, address sender) external returns (uint256);\n', '}\n', '\n', 'contract Sale {\n', '    uint public saleEnd1 = 1535846400 + 1 days; //9/3/2018 @ 12:00am (UTC)\n', '    uint public saleEnd2 = saleEnd1 + 1 days; //9/4/2018 @ 12:00am (UTC)\n', '    uint public saleEnd3 = saleEnd2 + 1 days; //9/5/2018 @ 12:00am (UTC)\n', '    uint public saleEnd4 = 1539129600; //10/10/2018 @ 12:00am (UTC)\n', '    uint256 public minEthValue = 10 ** 15; // 0.001 eth\n', '\n', '    uint256 public totalPariticpants = 0;\n', '    uint256 public adjustedValue = 0;\n', '    mapping(address => Renowned) public renownedPlayers; // map for the player information\n', '    mapping(bytes8 => address) public referral; // map for the player information\n', '    \n', '    using SafeMath for uint256;\n', '    uint256 public maxSale;\n', '    uint256 public totalSaled;\n', '    \n', '    YumeriumManager public manager;\n', '    address public owner;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '\n', '    constructor(address _manager_address) public {\n', '        maxSale = 316906850 * 10 ** 8; \n', '        manager = YumeriumManager(_manager_address);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function () external payable {\n', '        buy("");\n', '    }\n', '\n', '    // CONTRIBUTE FUNCTION\n', '    // converts ETH to TOKEN and sends new TOKEN to the sender\n', '    function contribute(bytes8 referralCode) external payable {\n', '        buy(referralCode);\n', '    }\n', '    \n', '    function becomeRenown() public payable {\n', '        generateRenown();\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function generateRenown() private {\n', '        require(!renownedPlayers[msg.sender].isRenowned, "You already registered as renowned!");\n', '        bytes8 referralCode = bytes8(keccak256(abi.encodePacked(totalPariticpants + adjustedValue)));\n', '        // check hash collision and regenerate hash value again\n', '        while (renownedPlayers[referral[referralCode]].isRenowned)\n', '        {\n', '            adjustedValue = adjustedValue.add(1);\n', '            referralCode = bytes8(keccak256(abi.encodePacked(totalPariticpants + adjustedValue)));\n', '        }\n', '        renownedPlayers[msg.sender].addr = msg.sender;\n', '        renownedPlayers[msg.sender].referralCode = referralCode;\n', '        renownedPlayers[msg.sender].isRenowned = true;\n', '        referral[renownedPlayers[msg.sender].referralCode] = msg.sender;\n', '        totalPariticpants = totalPariticpants.add(1);\n', '    }\n', '    \n', '    function buy(bytes8 referralCode) internal {\n', '        require(msg.value>=minEthValue);\n', '        require(now < saleEnd4); // main sale postponed\n', '\n', '        // distribution for referral\n', '        uint256 remainEth = msg.value;\n', '        if (referral[referralCode] != msg.sender && renownedPlayers[referral[referralCode]].isRenowned)\n', '        {\n', '            uint256 referEth = msg.value.mul(10).div(100);\n', '            referral[referralCode].transfer(referEth);\n', '            remainEth = remainEth.sub(referEth);\n', '        }\n', '\n', '        if (!renownedPlayers[msg.sender].isRenowned)\n', '        {\n', '            generateRenown();\n', '        }\n', '        \n', '        uint256 amount = manager.getYumerium(msg.value, msg.sender);\n', '        uint256 total = totalSaled.add(amount);\n', '        owner.transfer(remainEth);\n', '        \n', '        require(total<=maxSale);\n', '        \n', '        totalSaled = total;\n', '        \n', '        emit Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // change yumo address\n', '    function changeManagerAddress(address _manager_address) external {\n', '        require(msg.sender==owner, "You are not an owner!");\n', '        manager = YumeriumManager(_manager_address);\n', '    }\n', '    // change yumo address\n', '    function changeTeamWallet(address _team_address) external {\n', '        require(msg.sender==owner, "You are not an owner!");\n', '        owner = YumeriumManager(_team_address);\n', '    }\n', '\n', '    struct Renowned {\n', '        bool isRenowned;\n', '        address addr;\n', '        bytes8 referralCode;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    Sale(address ethwallet)   // this will send the received ETH funds to this address\n', '  @author Yumerium Ltd\n', '*/\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract YumeriumManager {\n', '    function getYumerium(uint256 value, address sender) external returns (uint256);\n', '}\n', '\n', 'contract Sale {\n', '    uint public saleEnd1 = 1535846400 + 1 days; //9/3/2018 @ 12:00am (UTC)\n', '    uint public saleEnd2 = saleEnd1 + 1 days; //9/4/2018 @ 12:00am (UTC)\n', '    uint public saleEnd3 = saleEnd2 + 1 days; //9/5/2018 @ 12:00am (UTC)\n', '    uint public saleEnd4 = 1539129600; //10/10/2018 @ 12:00am (UTC)\n', '    uint256 public minEthValue = 10 ** 15; // 0.001 eth\n', '\n', '    uint256 public totalPariticpants = 0;\n', '    uint256 public adjustedValue = 0;\n', '    mapping(address => Renowned) public renownedPlayers; // map for the player information\n', '    mapping(bytes8 => address) public referral; // map for the player information\n', '    \n', '    using SafeMath for uint256;\n', '    uint256 public maxSale;\n', '    uint256 public totalSaled;\n', '    \n', '    YumeriumManager public manager;\n', '    address public owner;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '\n', '    constructor(address _manager_address) public {\n', '        maxSale = 316906850 * 10 ** 8; \n', '        manager = YumeriumManager(_manager_address);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function () external payable {\n', '        buy("");\n', '    }\n', '\n', '    // CONTRIBUTE FUNCTION\n', '    // converts ETH to TOKEN and sends new TOKEN to the sender\n', '    function contribute(bytes8 referralCode) external payable {\n', '        buy(referralCode);\n', '    }\n', '    \n', '    function becomeRenown() public payable {\n', '        generateRenown();\n', '        owner.transfer(msg.value);\n', '    }\n', '\n', '    function generateRenown() private {\n', '        require(!renownedPlayers[msg.sender].isRenowned, "You already registered as renowned!");\n', '        bytes8 referralCode = bytes8(keccak256(abi.encodePacked(totalPariticpants + adjustedValue)));\n', '        // check hash collision and regenerate hash value again\n', '        while (renownedPlayers[referral[referralCode]].isRenowned)\n', '        {\n', '            adjustedValue = adjustedValue.add(1);\n', '            referralCode = bytes8(keccak256(abi.encodePacked(totalPariticpants + adjustedValue)));\n', '        }\n', '        renownedPlayers[msg.sender].addr = msg.sender;\n', '        renownedPlayers[msg.sender].referralCode = referralCode;\n', '        renownedPlayers[msg.sender].isRenowned = true;\n', '        referral[renownedPlayers[msg.sender].referralCode] = msg.sender;\n', '        totalPariticpants = totalPariticpants.add(1);\n', '    }\n', '    \n', '    function buy(bytes8 referralCode) internal {\n', '        require(msg.value>=minEthValue);\n', '        require(now < saleEnd4); // main sale postponed\n', '\n', '        // distribution for referral\n', '        uint256 remainEth = msg.value;\n', '        if (referral[referralCode] != msg.sender && renownedPlayers[referral[referralCode]].isRenowned)\n', '        {\n', '            uint256 referEth = msg.value.mul(10).div(100);\n', '            referral[referralCode].transfer(referEth);\n', '            remainEth = remainEth.sub(referEth);\n', '        }\n', '\n', '        if (!renownedPlayers[msg.sender].isRenowned)\n', '        {\n', '            generateRenown();\n', '        }\n', '        \n', '        uint256 amount = manager.getYumerium(msg.value, msg.sender);\n', '        uint256 total = totalSaled.add(amount);\n', '        owner.transfer(remainEth);\n', '        \n', '        require(total<=maxSale);\n', '        \n', '        totalSaled = total;\n', '        \n', '        emit Contribution(msg.sender, amount);\n', '    }\n', '\n', '    // change yumo address\n', '    function changeManagerAddress(address _manager_address) external {\n', '        require(msg.sender==owner, "You are not an owner!");\n', '        manager = YumeriumManager(_manager_address);\n', '    }\n', '    // change yumo address\n', '    function changeTeamWallet(address _team_address) external {\n', '        require(msg.sender==owner, "You are not an owner!");\n', '        owner = YumeriumManager(_team_address);\n', '    }\n', '\n', '    struct Renowned {\n', '        bool isRenowned;\n', '        address addr;\n', '        bytes8 referralCode;\n', '    }\n', '}']
