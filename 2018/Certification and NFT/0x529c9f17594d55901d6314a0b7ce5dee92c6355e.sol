['pragma solidity 0.4.15;\n', '\n', 'contract Ambi2 {\n', '    function claimFor(address _address, address _owner) returns(bool);\n', '    function hasRole(address _from, bytes32 _role, address _to) constant returns(bool);\n', '    function isOwner(address _node, address _owner) constant returns(bool);\n', '}\n', '\n', 'contract Ambi2Enabled {\n', '    Ambi2 ambi2;\n', '\n', '    modifier onlyRole(bytes32 _role) {\n', '        if (address(ambi2) != 0x0 && ambi2.hasRole(this, _role, msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    // Perform only after claiming the node, or claim in the same tx.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Ambi2EnabledFull is Ambi2Enabled {\n', '    // Setup and claim atomically.\n', '    function setupAmbi2(Ambi2 _ambi2) returns(bool) {\n', '        if (address(ambi2) != 0x0) {\n', '            return false;\n', '        }\n', '        if (!_ambi2.claimFor(this, msg.sender) && !_ambi2.isOwner(this, msg.sender)) {\n', '            return false;\n', '        }\n', '\n', '        ambi2 = _ambi2;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract AssetProxyInterface {\n', '    function balanceOf(address _owner) constant returns(uint);\n', '    function transferFrom(address _from, address _to, uint _value) returns(bool);\n', '    function transferFromToICAP(address _from, bytes32 _icap, uint _value) returns(bool);\n', '    function transferFromWithReference(address _from, address _to, uint _value, string _reference) returns(bool);\n', '    function transfer(address _to, uint _value) returns(bool);\n', '    function transferToICAP(bytes32 _icap, uint _value) returns(bool);\n', '    function transferWithReference(address _to, uint _value, string _reference) returns(bool);\n', '    function totalSupply() constant returns(uint);\n', '    function approve(address _spender, uint _value) returns(bool);\n', '}\n', '\n', 'contract VestingInterface {\n', '    function createVesting(address _receiver, AssetProxyInterface _AssetProxy, uint _amount, uint _parts, uint _paymentInterval, uint _schedule) returns(bool);\n', '    function sendVesting(uint _id) returns(bool);\n', '    function getReceiverVesting(address _receiver, address _ERC20) constant returns(uint);\n', '}\n', '\n', 'contract CryptykVestingManager is Ambi2EnabledFull {\n', '\n', '    AssetProxyInterface public assetProxy;\n', '    VestingInterface public vesting;\n', '\n', '    uint public paymentInterval;\n', '    uint public schedule;\n', '    uint public presaleDeadline;\n', '\n', "    function setVesting(VestingInterface _vesting) onlyRole('admin') returns(bool) {\n", '        require(address(vesting) == 0x0);\n', '\n', '        vesting = _vesting;\n', '        return true;\n', '    }\n', '\n', "    function setAssetProxy(AssetProxyInterface _assetProxy) onlyRole('admin') returns(bool) {\n", '        require(address(assetProxy) == 0x0);\n', '        require(address(vesting) != 0x0);\n', '\n', '        assetProxy = _assetProxy;\n', '        assetProxy.approve(vesting, ((2 ** 256) - 1));\n', '        return true;\n', '    }\n', '\n', "    function setIntervalSchedulePresale(uint _paymentInterval, uint _schedule, uint _presaleDeadline) onlyRole('admin') returns(bool) {\n", '        paymentInterval = _paymentInterval;\n', '        schedule = _schedule;\n', '        presaleDeadline = _presaleDeadline;\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) returns(bool) {\n', '        if (now < presaleDeadline) {\n', '            require(assetProxy.transferFrom(msg.sender, address(this), _value));\n', '            require(vesting.createVesting(_to, assetProxy, _value, 1, paymentInterval, schedule));\n', '            return true;\n', '        }\n', '        return assetProxy.transferFrom(msg.sender, _to, _value);\n', '    }\n', '\n', '    function transferToICAP(bytes32 _icap, uint _value) returns(bool) {\n', '        return assetProxy.transferFromToICAP(msg.sender, _icap, _value);\n', '    }\n', '\n', '    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\n', '        if (now < presaleDeadline) {\n', '            require(assetProxy.transferFromWithReference(msg.sender, address(this), _value, _reference));\n', '            require(vesting.createVesting(_to, assetProxy, _value, 1, paymentInterval, schedule));\n', '            return true;\n', '        }\n', '        return assetProxy.transferFromWithReference(msg.sender, _to, _value, _reference);\n', '    }\n', '\n', '    function balanceOf(address _address) constant returns(uint) {\n', '        return (vesting.getReceiverVesting(_address, assetProxy) + assetProxy.balanceOf(_address));\n', '    }\n', '\n', '    function totalSupply() constant returns(uint) {\n', '        return assetProxy.totalSupply();\n', '    }\n', '}']