['pragma solidity ^0.4.23;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/MidasToken.sol\n', '\n', 'contract MidasToken is StandardToken, Pausable {\n', '    string public constant name = &#39;MidasProtocol&#39;;\n', '    string public constant symbol = &#39;MAS&#39;;\n', '    uint256 public constant minTomoContribution = 100 ether;\n', '    uint256 public constant minEthContribution = 0.1 ether;\n', '    uint256 public constant maxEthContribution = 500 ether;\n', '    uint256 public constant ethConvertRate = 10000; // 1 ETH = 10000 MAS\n', '    uint256 public constant tomoConvertRate = 10; // 1 TOMO = 10 MAS\n', '    uint256 public totalTokenSold = 0;\n', '    uint256 public maxCap = maxEthContribution.mul(ethConvertRate); // Max MAS can buy\n', '\n', '    uint256 public constant decimals = 18;\n', '    address public tokenSaleAddress;\n', '    address public midasDepositAddress;\n', '    address public ethFundDepositAddress;\n', '    address public midasFounderAddress;\n', '    address public midasAdvisorOperateMarketingAddress;\n', '\n', '    uint256 public fundingStartTime;\n', '    uint256 public fundingEndTime;\n', '\n', '    uint256 public constant midasDeposit = 500000000 * 10 ** decimals; // 500.000.000 tokens\n', '    uint256 public constant tokenCreationCap = 5000000 * 10 ** 18; // 5.000.000 token for sale\n', '\n', '    mapping(address => bool) public frozenAccount;\n', '    mapping(address => uint256) public participated;\n', '\n', '    mapping(address => uint256) public whitelist;\n', '    bool public isFinalized;\n', '    bool public isTransferable;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '    event BuyByEth(address from, address to, uint256 val);\n', '    event BuyByTomo(address from, address to, uint256 val);\n', '    event ListAddress(address _user, uint256 cap, uint256 _time);\n', '    event RefundMidas(address to, uint256 val);\n', '\n', '    //============== MIDAS TOKEN ===================//\n', '\n', '    constructor (address _midasDepositAddress, address _ethFundDepositAddress, address _midasFounderAddress, address _midasAdvisorOperateMarketingAddress, uint256 _fundingStartTime, uint256 _fundingEndTime) public {\n', '        midasDepositAddress = _midasDepositAddress;\n', '        ethFundDepositAddress = _ethFundDepositAddress;\n', '        midasFounderAddress = _midasFounderAddress;\n', '        midasAdvisorOperateMarketingAddress = _midasAdvisorOperateMarketingAddress;\n', '\n', '        fundingStartTime = _fundingStartTime;\n', '        fundingEndTime = _fundingEndTime;\n', '\n', '        balances[midasDepositAddress] = midasDeposit;\n', '        emit Transfer(0x0, midasDepositAddress, midasDeposit);\n', '        totalSupply_ = midasDeposit;\n', '        isFinalized = false;\n', '        isTransferable = true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\n', '        require(isTransferable == true || msg.sender == midasAdvisorOperateMarketingAddress || msg.sender == midasDepositAddress);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function setTransferStatus(bool status) public onlyOwner {\n', '        isTransferable = status;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return super.balanceOf(_owner);\n', '    }\n', '\n', '    function freezeAccount(address _target, bool _freeze) onlyOwner public {\n', '        frozenAccount[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '    }\n', '\n', '    function freezeAccounts(address[] _targets, bool _freeze) onlyOwner public {\n', '        for (uint i = 0; i < _targets.length; i++) {\n', '            freezeAccount(_targets[i], _freeze);\n', '        }\n', '    }\n', '\n', '    //============== MIDAS PIONEER SALE ===================//\n', '\n', '    //============== MIDAS WHITELIST ===================//\n', '\n', '    function listAddress(address _user, uint256 cap) public onlyOwner {\n', '        whitelist[_user] = cap;\n', '        emit ListAddress(_user, cap, now);\n', '    }\n', '\n', '    function listAddresses(address[] _users, uint256[] _caps) public onlyOwner {\n', '        for (uint i = 0; i < _users.length; i++) {\n', '            listAddress(_users[i], _caps[i]);\n', '        }\n', '    }\n', '\n', '    function getCap(address _user) public view returns (uint) {\n', '        return whitelist[_user];\n', '    }\n', '\n', '    //============== MIDAS PUBLIC SALE =================//\n', '\n', '    function() public payable {\n', '        buyByEth(msg.sender, msg.value);\n', '    }\n', '\n', '    function buyByEth(address _recipient, uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(now >= fundingStartTime);\n', '        require(now <= fundingEndTime);\n', '        require(_value >= minEthContribution);\n', '        require(_value <= maxEthContribution);\n', '        require(!isFinalized);\n', '        require(totalTokenSold < tokenCreationCap);\n', '\n', '        uint256 tokens = _value.mul(ethConvertRate);\n', '\n', '        uint256 cap = getCap(_recipient);\n', '        require(cap > 0);\n', '\n', '        uint256 tokensToAllocate = 0;\n', '        uint256 tokensToRefund = 0;\n', '        uint256 etherToRefund = 0;\n', '\n', '        tokensToAllocate = maxCap.sub(participated[_recipient]);\n', '\n', '        // calculate refund if over max cap or individual cap\n', '        if (tokens > tokensToAllocate) {\n', '            tokensToRefund = tokens.sub(tokensToAllocate);\n', '            etherToRefund = tokensToRefund.div(ethConvertRate);\n', '        } else {\n', '            // user can buy amount they want\n', '            tokensToAllocate = tokens;\n', '        }\n', '\n', '        uint256 checkedTokenSold = totalTokenSold.add(tokensToAllocate);\n', '\n', '        // if reaches hard cap\n', '        if (tokenCreationCap < checkedTokenSold) {\n', '            tokensToAllocate = tokenCreationCap.sub(totalTokenSold);\n', '            tokensToRefund = tokens.sub(tokensToAllocate);\n', '            etherToRefund = tokensToRefund.div(ethConvertRate);\n', '            totalTokenSold = tokenCreationCap;\n', '        } else {\n', '            totalTokenSold = checkedTokenSold;\n', '        }\n', '\n', '        // save to participated data\n', '        participated[_recipient] = participated[_recipient].add(tokensToAllocate);\n', '\n', '        // allocate tokens\n', '        balances[midasDepositAddress] = balances[midasDepositAddress].sub(tokensToAllocate);\n', '        balances[_recipient] = balances[_recipient].add(tokensToAllocate);\n', '\n', '        // refund ether\n', '        if (etherToRefund > 0) {\n', '            // refund in case user buy over hard cap, individual cap\n', '            emit RefundMidas(msg.sender, etherToRefund);\n', '            msg.sender.transfer(etherToRefund);\n', '        }\n', '        ethFundDepositAddress.transfer(address(this).balance);\n', '        //        // lock this account balance\n', '        emit BuyByEth(midasDepositAddress, _recipient, _value);\n', '        return true;\n', '    }\n', '\n', '    function buyByTomo(address _recipient, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(_value > 0);\n', '        require(now >= fundingStartTime);\n', '        require(now <= fundingEndTime);\n', '        require(_value >= minTomoContribution);\n', '        require(!isFinalized);\n', '        require(totalTokenSold < tokenCreationCap);\n', '\n', '        uint256 tokens = _value.mul(tomoConvertRate);\n', '\n', '        uint256 cap = getCap(_recipient);\n', '        require(cap > 0);\n', '\n', '        uint256 tokensToAllocate = 0;\n', '        uint256 tokensToRefund = 0;\n', '        tokensToAllocate = maxCap;\n', '        // calculate refund if over max cap or individual cap\n', '        if (tokens > tokensToAllocate) {\n', '            tokensToRefund = tokens.sub(tokensToAllocate);\n', '        } else {\n', '            // user can buy amount they want\n', '            tokensToAllocate = tokens;\n', '        }\n', '\n', '        uint256 checkedTokenSold = totalTokenSold.add(tokensToAllocate);\n', '\n', '        // if reaches hard cap\n', '        if (tokenCreationCap < checkedTokenSold) {\n', '            tokensToAllocate = tokenCreationCap.sub(totalTokenSold);\n', '            totalTokenSold = tokenCreationCap;\n', '        } else {\n', '            totalTokenSold = checkedTokenSold;\n', '        }\n', '\n', '        // allocate tokens\n', '        balances[midasDepositAddress] = balances[midasDepositAddress].sub(tokensToAllocate);\n', '        balances[_recipient] = balances[_recipient].add(tokensToAllocate);\n', '\n', '        emit BuyByTomo(midasDepositAddress, _recipient, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function finalize() external onlyOwner {\n', '        require(!isFinalized);\n', '        // move to operational\n', '        isFinalized = true;\n', '        ethFundDepositAddress.transfer(address(this).balance);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/MidasToken.sol\n', '\n', 'contract MidasToken is StandardToken, Pausable {\n', "    string public constant name = 'MidasProtocol';\n", "    string public constant symbol = 'MAS';\n", '    uint256 public constant minTomoContribution = 100 ether;\n', '    uint256 public constant minEthContribution = 0.1 ether;\n', '    uint256 public constant maxEthContribution = 500 ether;\n', '    uint256 public constant ethConvertRate = 10000; // 1 ETH = 10000 MAS\n', '    uint256 public constant tomoConvertRate = 10; // 1 TOMO = 10 MAS\n', '    uint256 public totalTokenSold = 0;\n', '    uint256 public maxCap = maxEthContribution.mul(ethConvertRate); // Max MAS can buy\n', '\n', '    uint256 public constant decimals = 18;\n', '    address public tokenSaleAddress;\n', '    address public midasDepositAddress;\n', '    address public ethFundDepositAddress;\n', '    address public midasFounderAddress;\n', '    address public midasAdvisorOperateMarketingAddress;\n', '\n', '    uint256 public fundingStartTime;\n', '    uint256 public fundingEndTime;\n', '\n', '    uint256 public constant midasDeposit = 500000000 * 10 ** decimals; // 500.000.000 tokens\n', '    uint256 public constant tokenCreationCap = 5000000 * 10 ** 18; // 5.000.000 token for sale\n', '\n', '    mapping(address => bool) public frozenAccount;\n', '    mapping(address => uint256) public participated;\n', '\n', '    mapping(address => uint256) public whitelist;\n', '    bool public isFinalized;\n', '    bool public isTransferable;\n', '\n', '    /* This generates a public event on the blockchain that will notify clients */\n', '    event FrozenFunds(address target, bool frozen);\n', '    event BuyByEth(address from, address to, uint256 val);\n', '    event BuyByTomo(address from, address to, uint256 val);\n', '    event ListAddress(address _user, uint256 cap, uint256 _time);\n', '    event RefundMidas(address to, uint256 val);\n', '\n', '    //============== MIDAS TOKEN ===================//\n', '\n', '    constructor (address _midasDepositAddress, address _ethFundDepositAddress, address _midasFounderAddress, address _midasAdvisorOperateMarketingAddress, uint256 _fundingStartTime, uint256 _fundingEndTime) public {\n', '        midasDepositAddress = _midasDepositAddress;\n', '        ethFundDepositAddress = _ethFundDepositAddress;\n', '        midasFounderAddress = _midasFounderAddress;\n', '        midasAdvisorOperateMarketingAddress = _midasAdvisorOperateMarketingAddress;\n', '\n', '        fundingStartTime = _fundingStartTime;\n', '        fundingEndTime = _fundingEndTime;\n', '\n', '        balances[midasDepositAddress] = midasDeposit;\n', '        emit Transfer(0x0, midasDepositAddress, midasDeposit);\n', '        totalSupply_ = midasDeposit;\n', '        isFinalized = false;\n', '        isTransferable = true;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool success) {\n', '        require(isTransferable == true || msg.sender == midasAdvisorOperateMarketingAddress || msg.sender == midasDepositAddress);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function setTransferStatus(bool status) public onlyOwner {\n', '        isTransferable = status;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool success) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return super.balanceOf(_owner);\n', '    }\n', '\n', '    function freezeAccount(address _target, bool _freeze) onlyOwner public {\n', '        frozenAccount[_target] = _freeze;\n', '        emit FrozenFunds(_target, _freeze);\n', '    }\n', '\n', '    function freezeAccounts(address[] _targets, bool _freeze) onlyOwner public {\n', '        for (uint i = 0; i < _targets.length; i++) {\n', '            freezeAccount(_targets[i], _freeze);\n', '        }\n', '    }\n', '\n', '    //============== MIDAS PIONEER SALE ===================//\n', '\n', '    //============== MIDAS WHITELIST ===================//\n', '\n', '    function listAddress(address _user, uint256 cap) public onlyOwner {\n', '        whitelist[_user] = cap;\n', '        emit ListAddress(_user, cap, now);\n', '    }\n', '\n', '    function listAddresses(address[] _users, uint256[] _caps) public onlyOwner {\n', '        for (uint i = 0; i < _users.length; i++) {\n', '            listAddress(_users[i], _caps[i]);\n', '        }\n', '    }\n', '\n', '    function getCap(address _user) public view returns (uint) {\n', '        return whitelist[_user];\n', '    }\n', '\n', '    //============== MIDAS PUBLIC SALE =================//\n', '\n', '    function() public payable {\n', '        buyByEth(msg.sender, msg.value);\n', '    }\n', '\n', '    function buyByEth(address _recipient, uint256 _value) public returns (bool success) {\n', '        require(_value > 0);\n', '        require(now >= fundingStartTime);\n', '        require(now <= fundingEndTime);\n', '        require(_value >= minEthContribution);\n', '        require(_value <= maxEthContribution);\n', '        require(!isFinalized);\n', '        require(totalTokenSold < tokenCreationCap);\n', '\n', '        uint256 tokens = _value.mul(ethConvertRate);\n', '\n', '        uint256 cap = getCap(_recipient);\n', '        require(cap > 0);\n', '\n', '        uint256 tokensToAllocate = 0;\n', '        uint256 tokensToRefund = 0;\n', '        uint256 etherToRefund = 0;\n', '\n', '        tokensToAllocate = maxCap.sub(participated[_recipient]);\n', '\n', '        // calculate refund if over max cap or individual cap\n', '        if (tokens > tokensToAllocate) {\n', '            tokensToRefund = tokens.sub(tokensToAllocate);\n', '            etherToRefund = tokensToRefund.div(ethConvertRate);\n', '        } else {\n', '            // user can buy amount they want\n', '            tokensToAllocate = tokens;\n', '        }\n', '\n', '        uint256 checkedTokenSold = totalTokenSold.add(tokensToAllocate);\n', '\n', '        // if reaches hard cap\n', '        if (tokenCreationCap < checkedTokenSold) {\n', '            tokensToAllocate = tokenCreationCap.sub(totalTokenSold);\n', '            tokensToRefund = tokens.sub(tokensToAllocate);\n', '            etherToRefund = tokensToRefund.div(ethConvertRate);\n', '            totalTokenSold = tokenCreationCap;\n', '        } else {\n', '            totalTokenSold = checkedTokenSold;\n', '        }\n', '\n', '        // save to participated data\n', '        participated[_recipient] = participated[_recipient].add(tokensToAllocate);\n', '\n', '        // allocate tokens\n', '        balances[midasDepositAddress] = balances[midasDepositAddress].sub(tokensToAllocate);\n', '        balances[_recipient] = balances[_recipient].add(tokensToAllocate);\n', '\n', '        // refund ether\n', '        if (etherToRefund > 0) {\n', '            // refund in case user buy over hard cap, individual cap\n', '            emit RefundMidas(msg.sender, etherToRefund);\n', '            msg.sender.transfer(etherToRefund);\n', '        }\n', '        ethFundDepositAddress.transfer(address(this).balance);\n', '        //        // lock this account balance\n', '        emit BuyByEth(midasDepositAddress, _recipient, _value);\n', '        return true;\n', '    }\n', '\n', '    function buyByTomo(address _recipient, uint256 _value) public onlyOwner returns (bool success) {\n', '        require(_value > 0);\n', '        require(now >= fundingStartTime);\n', '        require(now <= fundingEndTime);\n', '        require(_value >= minTomoContribution);\n', '        require(!isFinalized);\n', '        require(totalTokenSold < tokenCreationCap);\n', '\n', '        uint256 tokens = _value.mul(tomoConvertRate);\n', '\n', '        uint256 cap = getCap(_recipient);\n', '        require(cap > 0);\n', '\n', '        uint256 tokensToAllocate = 0;\n', '        uint256 tokensToRefund = 0;\n', '        tokensToAllocate = maxCap;\n', '        // calculate refund if over max cap or individual cap\n', '        if (tokens > tokensToAllocate) {\n', '            tokensToRefund = tokens.sub(tokensToAllocate);\n', '        } else {\n', '            // user can buy amount they want\n', '            tokensToAllocate = tokens;\n', '        }\n', '\n', '        uint256 checkedTokenSold = totalTokenSold.add(tokensToAllocate);\n', '\n', '        // if reaches hard cap\n', '        if (tokenCreationCap < checkedTokenSold) {\n', '            tokensToAllocate = tokenCreationCap.sub(totalTokenSold);\n', '            totalTokenSold = tokenCreationCap;\n', '        } else {\n', '            totalTokenSold = checkedTokenSold;\n', '        }\n', '\n', '        // allocate tokens\n', '        balances[midasDepositAddress] = balances[midasDepositAddress].sub(tokensToAllocate);\n', '        balances[_recipient] = balances[_recipient].add(tokensToAllocate);\n', '\n', '        emit BuyByTomo(midasDepositAddress, _recipient, _value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function finalize() external onlyOwner {\n', '        require(!isFinalized);\n', '        // move to operational\n', '        isFinalized = true;\n', '        ethFundDepositAddress.transfer(address(this).balance);\n', '    }\n', '}']
