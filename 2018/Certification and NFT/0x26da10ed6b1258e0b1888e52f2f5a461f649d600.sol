['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '/// @dev Implements access control to the Chronos contract.\n', 'contract ChronosAccessControl is Claimable, Pausable, CanReclaimToken {\n', '    address public cfoAddress;\n', '    \n', '    function ChronosAccessControl() public {\n', '        // The creator of the contract is the initial CFO.\n', '        cfoAddress = msg.sender;\n', '    }\n', '    \n', '    /// @dev Access modifier for CFO-only functionality.\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CFO. Only available to the current contract owner.\n', '    /// @param _newCFO The address of the new CFO.\n', '    function setCFO(address _newCFO) external onlyOwner {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '}\n', '\n', '\n', '/// @dev Defines base data structures for Chronos.\n', 'contract ChronosBase is ChronosAccessControl {\n', '    using SafeMath for uint256;\n', ' \n', '    /// @notice Boolean indicating whether a game is live.\n', '    bool public gameStarted;\n', '    \n', '    /// @notice The player who started the game.\n', '    address public gameStarter;\n', '    \n', '    /// @notice The last player to have entered.\n', '    address public lastPlayer;\n', '    \n', '    /// @notice The timestamp the last wager times out.\n', '    uint256 public lastWagerTimeoutTimestamp;\n', '\n', '    /// @notice The number of seconds before the game ends.\n', '    uint256 public timeout;\n', '    \n', '    /// @notice The number of seconds before the game ends -- setting\n', '    /// for the next game.\n', '    uint256 public nextTimeout;\n', '    \n', '    /// @notice The minimum number of seconds before the game ends.\n', '    uint256 public minimumTimeout;\n', '    \n', '    /// @notice The minmum number of seconds before the game ends --\n', '    /// setting for the next game.\n', '    uint256 public nextMinimumTimeout;\n', '    \n', '    /// @notice The number of wagers required to move to the\n', '    /// minimum timeout.\n', '    uint256 public numberOfWagersToMinimumTimeout;\n', '    \n', '    /// @notice The number of wagers required to move to the\n', '    /// minimum timeout -- setting for the next game.\n', '    uint256 public nextNumberOfWagersToMinimumTimeout;\n', '    \n', '    /// @notice The wager index of the the current wager in the game.\n', '    uint256 public wagerIndex = 0;\n', '    \n', "    /// @notice Calculate the current game's timeout.\n", '    function calculateTimeout() public view returns(uint256) {\n', '        if (wagerIndex >= numberOfWagersToMinimumTimeout || numberOfWagersToMinimumTimeout == 0) {\n', '            return minimumTimeout;\n', '        } else {\n', '            // This cannot underflow, as timeout is guaranteed to be\n', '            // greater than or equal to minimumTimeout.\n', '            uint256 difference = timeout - minimumTimeout;\n', '            \n', '            // Calculate the decrease in timeout, based on the number of wagers performed.\n', '            uint256 decrease = difference.mul(wagerIndex).div(numberOfWagersToMinimumTimeout);\n', '            \n', '            // This subtraction cannot underflow, as decrease is guaranteed to be less than or equal to timeout.            \n', '            return (timeout - decrease);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title PullPayment\n', ' * @dev Base contract supporting async send for pull payments. Inherit from this\n', ' * contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  /**\n', '  * @dev withdraw accumulated balance, called by payee.\n', '  */\n', '  function withdrawPayments() public {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '\n', '  /**\n', '  * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '  * @param dest The destination address of the funds.\n', '  * @param amount The amount to transfer.\n', '  */\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '}\n', '\n', '\n', '/// @dev Defines base finance functionality for Chronos.\n', 'contract ChronosFinance is ChronosBase, PullPayment {\n', '    /// @notice The dev fee in 1/1000th\n', '    /// of a percentage.\n', '    uint256 public feePercentage = 2500;\n', '    \n', '    /// @notice The game starter fee.\n', '    uint256 public gameStarterDividendPercentage = 1000;\n', '    \n', '    /// @notice The wager price.\n', '    uint256 public price;\n', '    \n', '    /// @notice The wager price -- setting for the next game.\n', '    uint256 public nextPrice;\n', '    \n', '    /// @notice The current prize pool (in wei).\n', '    uint256 public prizePool;\n', '    \n', '    /// @notice The current 7th wager pool (in wei).\n', '    uint256 public wagerPool;\n', '    \n', '    /// @notice Sets a new game starter dividend percentage.\n', '    /// @param _gameStarterDividendPercentage The new game starter dividend percentage.\n', '    function setGameStarterDividendPercentage(uint256 _gameStarterDividendPercentage) external onlyCFO {\n', '        // Game started dividend percentage must be 0.5% at least and 4% at the most.\n', '        require(500 <= _gameStarterDividendPercentage && _gameStarterDividendPercentage <= 4000);\n', '        \n', '        gameStarterDividendPercentage = _gameStarterDividendPercentage;\n', '    }\n', '    \n', '    /// @dev Send funds to a beneficiary. If sending fails, assign\n', "    /// funds to the beneficiary's balance for manual withdrawal.\n", "    /// @param beneficiary The beneficiary's address to send funds to\n", '    /// @param amount The amount to send.\n', '    function _sendFunds(address beneficiary, uint256 amount) internal {\n', '        if (!beneficiary.send(amount)) {\n', '            // Failed to send funds. This can happen due to a failure in\n', '            // fallback code of the beneficiary, or because of callstack\n', '            // depth.\n', '            // Send funds asynchronously for manual withdrawal by the\n', '            // beneficiary.\n', '            asyncSend(beneficiary, amount);\n', '        }\n', '    }\n', '    \n', '    /// @notice Withdraw (unowed) contract balance.\n', '    function withdrawFreeBalance() external onlyCFO {\n', '        // Calculate the free (unowed) balance.\n', '        uint256 freeBalance = this.balance.sub(totalPayments).sub(prizePool).sub(wagerPool);\n', '        \n', '        cfoAddress.transfer(freeBalance);\n', '    }\n', '}\n', '\n', '\n', '/// @dev Defines core Chronos functionality.\n', 'contract ChronosCore is ChronosFinance {\n', '    \n', '    function ChronosCore(uint256 _price, uint256 _timeout, uint256 _minimumTimeout, uint256 _numberOfWagersToMinimumTimeout) public {\n', '        require(_timeout >= _minimumTimeout);\n', '        \n', '        nextPrice = _price;\n', '        nextTimeout = _timeout;\n', '        nextMinimumTimeout = _minimumTimeout;\n', '        nextNumberOfWagersToMinimumTimeout = _numberOfWagersToMinimumTimeout;\n', '        NextGame(nextPrice, nextTimeout, nextMinimumTimeout, nextNumberOfWagersToMinimumTimeout);\n', '    }\n', '    \n', '    event NextGame(uint256 price, uint256 timeout, uint256 minimumTimeout, uint256 numberOfWagersToMinimumTimeout);\n', '    event Start(address indexed starter, uint256 timestamp, uint256 price, uint256 timeout, uint256 minimumTimeout, uint256 numberOfWagersToMinimumTimeout);\n', '    event End(address indexed winner, uint256 timestamp, uint256 prize);\n', '    event Play(address indexed player, uint256 timestamp, uint256 timeoutTimestamp, uint256 wagerIndex, uint256 newPrizePool);\n', '    event SpiceUpPrizePool(address indexed spicer, uint256 spiceAdded, string message, uint256 newPrizePool);\n', '    \n', '    /// @notice Participate in the game.\n', '    /// @param startNewGameIfIdle Start a new game if the current game is idle.\n', '    function play(bool startNewGameIfIdle) external payable {\n', '        // Check to see if the game should end. Process payment.\n', '        _processGameEnd();\n', '        \n', '        if (!gameStarted) {\n', '            // If the game is not started, the contract must not be paused.\n', '            require(!paused);\n', '            \n', '            // If the game is not started, the player must be willing to start\n', '            // a new game.\n', '            require(startNewGameIfIdle);\n', '            \n', '            // Set the price and timeout.\n', '            price = nextPrice;\n', '            timeout = nextTimeout;\n', '            minimumTimeout = nextMinimumTimeout;\n', '            numberOfWagersToMinimumTimeout = nextNumberOfWagersToMinimumTimeout;\n', '            \n', '            // Start the game.\n', '            gameStarted = true;\n', '            \n', '            // Set the game starter.\n', '            gameStarter = msg.sender;\n', '            \n', '            // Emit start event.\n', '            Start(msg.sender, block.timestamp, price, timeout, minimumTimeout, numberOfWagersToMinimumTimeout);\n', '        }\n', '        \n', '        // Enough Ether must be supplied.\n', '        require(msg.value >= price);\n', '        \n', '        // Calculate the fees and dividends.\n', '        uint256 fee = price.mul(feePercentage).div(100000);\n', '        uint256 dividend = price.mul(gameStarterDividendPercentage).div(100000);\n', '        uint256 wagerPoolPart;\n', '        \n', '        if (wagerIndex % 7 == 6) {\n', '            // Give the wager prize every 7th wager.\n', '            \n', '            // Calculate total 7th wager prize.\n', '            uint256 wagerPrize = price.mul(2);\n', '            \n', '            // Calculate the missing wager pool part (equal to price.mul(2).div(7) plus a few wei).\n', '            wagerPoolPart = wagerPrize.sub(wagerPool);\n', '        \n', '            // Give the wager prize to the sender.\n', '            msg.sender.transfer(wagerPrize);\n', '            \n', '            // Reset the wager pool.\n', '            wagerPool = 0;\n', '        } else {\n', '            // On every non-7th wager, increase the wager pool.\n', '            \n', '            // Calculate the wager pool part.\n', '            wagerPoolPart = price.mul(2).div(7);\n', '            \n', '            // Add funds to the wager pool.\n', '            wagerPool = wagerPool.add(wagerPoolPart);\n', '        }\n', '        \n', '        // Calculate the timeout.\n', '        uint256 currentTimeout = calculateTimeout();\n', '        \n', '        // Set the last player, timestamp, timeout timestamp, and increase prize.\n', '        lastPlayer = msg.sender;\n', '        lastWagerTimeoutTimestamp = block.timestamp + currentTimeout;\n', '        prizePool = prizePool.add(price.sub(fee).sub(dividend).sub(wagerPoolPart));\n', '        \n', '        // Emit event.\n', '        Play(msg.sender, block.timestamp, lastWagerTimeoutTimestamp, wagerIndex, prizePool);\n', '        \n', '        // Send the game starter dividend.\n', '        _sendFunds(gameStarter, dividend);\n', '        \n', '        // Increment the wager index.\n', '        wagerIndex = wagerIndex.add(1);\n', '        \n', '        // Refund any excess Ether sent.\n', '        // This subtraction never underflows, as msg.value is guaranteed\n', '        // to be greater than or equal to price.\n', '        uint256 excess = msg.value - price;\n', '        \n', '        if (excess > 0) {\n', '            msg.sender.transfer(excess);\n', '        }\n', '    }\n', '    \n', '    /// @notice Spice up the prize pool.\n', '    /// @param message An optional message to be sent along with the spice.\n', '    function spiceUp(string message) external payable {\n', '        // Game must be live or unpaused.\n', '        require(gameStarted || !paused);\n', '        \n', '        // Funds must be sent.\n', '        require(msg.value > 0);\n', '        \n', '        // Add funds to the prize pool.\n', '        prizePool = prizePool.add(msg.value);\n', '        \n', '        // Emit event.\n', '        SpiceUpPrizePool(msg.sender, msg.value, message, prizePool);\n', '    }\n', '    \n', '    /// @notice Set the parameters for the next game.\n', '    /// @param _price The price of wagers for the next game.\n', '    /// @param _timeout The timeout in seconds for the next game.\n', '    /// @param _minimumTimeout The minimum timeout in seconds for\n', '    /// the next game.\n', '    /// @param _numberOfWagersToMinimumTimeout The number of wagers\n', '    /// required to move to the minimum timeout for the next game.\n', '    function setNextGame(uint256 _price, uint256 _timeout, uint256 _minimumTimeout, uint256 _numberOfWagersToMinimumTimeout) external onlyCFO {\n', '        require(_timeout >= _minimumTimeout);\n', '    \n', '        nextPrice = _price;\n', '        nextTimeout = _timeout;\n', '        nextMinimumTimeout = _minimumTimeout;\n', '        nextNumberOfWagersToMinimumTimeout = _numberOfWagersToMinimumTimeout;\n', '        NextGame(nextPrice, nextTimeout, nextMinimumTimeout, nextNumberOfWagersToMinimumTimeout);\n', '    } \n', '    \n', '    /// @notice End the game. Pay prize.\n', '    function endGame() external {\n', '        require(_processGameEnd());\n', '    }\n', '    \n', '    /// @dev End the game. Pay prize.\n', '    function _processGameEnd() internal returns(bool) {\n', '        if (!gameStarted) {\n', '            // No game is started.\n', '            return false;\n', '        }\n', '    \n', '        if (block.timestamp <= lastWagerTimeoutTimestamp) {\n', '            // The game has not yet finished.\n', '            return false;\n', '        }\n', '        \n', '        // Calculate the prize. Any leftover funds for the\n', '        // 7th wager prize is added to the prize pool.\n', '        uint256 prize = prizePool.add(wagerPool);\n', '        \n', '        // The game has finished. Pay the prize to the last player.\n', '        _sendFunds(lastPlayer, prize);\n', '        \n', '        // Emit event.\n', '        End(lastPlayer, lastWagerTimeoutTimestamp, prize);\n', '        \n', '        // Reset the game.\n', '        gameStarted = false;\n', '        gameStarter = 0x0;\n', '        lastPlayer = 0x0;\n', '        lastWagerTimeoutTimestamp = 0;\n', '        wagerIndex = 0;\n', '        prizePool = 0;\n', '        wagerPool = 0;\n', '        \n', '        // Indicate ending the game was successful.\n', '        return true;\n', '    }\n', '}']