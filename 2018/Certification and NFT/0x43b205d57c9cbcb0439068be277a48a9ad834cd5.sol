['pragma solidity 0.4.24;\n', '\n', '/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n', '/// @author Stefan George - <stefan@gnosis.pm>\n', 'contract Proxy {\n', '\n', '    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n', '    address masterCopy;\n', '\n', '    /// @dev Constructor function sets address of master copy contract.\n', '    /// @param _masterCopy Master copy address.\n', '    constructor(address _masterCopy)\n', '        public\n', '    {\n', '        require(_masterCopy != 0, "Invalid master copy address provided");\n', '        masterCopy = _masterCopy;\n', '    }\n', '\n', '    /// @dev Fallback function forwards all transactions and returns all received return data.\n', '    function ()\n', '        external\n', '        payable\n', '    {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n', '            calldatacopy(0, 0, calldatasize())\n', '            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\n', '            returndatacopy(0, 0, returndatasize())\n', '            if eq(success, 0) { revert(0, returndatasize()) }\n', '            return(0, returndatasize())\n', '        }\n', '    }\n', '\n', '    function implementation()\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return masterCopy;\n', '    }\n', '\n', '    function proxyType()\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return 2;\n', '    }\n', '}\n', '\n', '/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n', '/// @author Stefan George - <stefan@gnosis.pm>\n', 'contract ProxyFactory {\n', '\n', '    event ProxyCreation(Proxy proxy);\n', '\n', '    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n', '    /// @param masterCopy Address of master copy.\n', '    /// @param data Payload for message call sent to new proxy contract.\n', '    function createProxy(address masterCopy, bytes data)\n', '        public\n', '        returns (Proxy proxy)\n', '    {\n', '        proxy = new Proxy(masterCopy);\n', '        if (data.length > 0)\n', '            // solium-disable-next-line security/no-inline-assembly\n', '            assembly {\n', '                if eq(call(gas, proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) { revert(0, 0) }\n', '            }\n', '        emit ProxyCreation(proxy);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n', '/// @author Stefan George - <stefan@gnosis.pm>\n', 'contract Proxy {\n', '\n', '    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n', '    address masterCopy;\n', '\n', '    /// @dev Constructor function sets address of master copy contract.\n', '    /// @param _masterCopy Master copy address.\n', '    constructor(address _masterCopy)\n', '        public\n', '    {\n', '        require(_masterCopy != 0, "Invalid master copy address provided");\n', '        masterCopy = _masterCopy;\n', '    }\n', '\n', '    /// @dev Fallback function forwards all transactions and returns all received return data.\n', '    function ()\n', '        external\n', '        payable\n', '    {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n', '            calldatacopy(0, 0, calldatasize())\n', '            let success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\n', '            returndatacopy(0, 0, returndatasize())\n', '            if eq(success, 0) { revert(0, returndatasize()) }\n', '            return(0, returndatasize())\n', '        }\n', '    }\n', '\n', '    function implementation()\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return masterCopy;\n', '    }\n', '\n', '    function proxyType()\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return 2;\n', '    }\n', '}\n', '\n', '/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n', '/// @author Stefan George - <stefan@gnosis.pm>\n', 'contract ProxyFactory {\n', '\n', '    event ProxyCreation(Proxy proxy);\n', '\n', '    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n', '    /// @param masterCopy Address of master copy.\n', '    /// @param data Payload for message call sent to new proxy contract.\n', '    function createProxy(address masterCopy, bytes data)\n', '        public\n', '        returns (Proxy proxy)\n', '    {\n', '        proxy = new Proxy(masterCopy);\n', '        if (data.length > 0)\n', '            // solium-disable-next-line security/no-inline-assembly\n', '            assembly {\n', '                if eq(call(gas, proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) { revert(0, 0) }\n', '            }\n', '        emit ProxyCreation(proxy);\n', '    }\n', '}']
