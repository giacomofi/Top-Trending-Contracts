['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title EtherGoToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract EtherGoToken is StandardToken, Ownable {\n', '\n', '  string public name = "ETHERGO";           \n', '  uint8 public decimals = 2;                         \n', '  string public symbol = "XGO";                            \n', '                                           \n', '  uint256 public constant INITIAL_SUPPLY = 0.0000000095 ether;\n', '\n', '  // Flag that determines if the token is transferable or not.\n', '  bool public transfersEnabled = false;\n', '\n', '  /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens. \n', '   */\n', '  function EtherGoToken() {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '\n', '\n', '   /// @notice Enables token holders to transfer their tokens freely if true\n', '   /// @param _transfersEnabled True if transfers are allowed in the clone\n', '   function enableTransfers(bool _transfersEnabled) onlyOwner {\n', '      transfersEnabled = _transfersEnabled;\n', '   }\n', '\n', '  function transferFromContract(address _to, uint256 _value) onlyOwner returns (bool success) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    require(transfersEnabled);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    require(transfersEnabled);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '      require(transfersEnabled);\n', '      return super.approve(_spender, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title  \n', ' * @dev DatCrowdSale is a contract for managing a token crowdsale.\n', ' * DatCrowdSale have a start and end date, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a refundable valut \n', ' * as they arrive.\n', ' */\n', 'contract DatCrowdPreSale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  EtherGoToken public token;\n', '\n', '  // start and end date where investments are allowed (both inclusive)\n', '  uint256 public startDate = 1523469083; \n', '  uint256 public endDate = 1555005081; \n', '\n', '  // Minimum amount to participate\n', '  uint256 public minimumParticipationAmount = 300000000000000 wei; //0.0003 ether\n', '\n', '  // Maximum amount to participate\n', '  uint256 public maximalParticipationAmount = 5000000000000000000 wei; //0.05 ether\n', '\n', '  // address where funds are collected\n', '  address wallet;\n', '\n', '  // how many token units a buyer gets per ether\n', '  uint256 rate = 150000;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  //flag for final of crowdsale\n', '  bool public isFinalized = false;\n', '\n', '  //cap for the sale\n', '  uint256 public cap = 5000000000000000000000 wei; //500 ether\n', ' \n', '\n', '\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '\n', '  /**\n', '  * @notice Log an event for each funding contributed during the public phase\n', '  * @notice Events are not logged when the constructor is being executed during\n', '  *         deployment, so the preallocations will not be logged\n', '  */\n', '  event LogParticipation(address indexed sender, uint256 value, uint256 timestamp);\n', '\n', '\n', '  \n', '  function DatCrowdPreSale(address _wallet) {\n', '    token = createTokenContract();\n', '    wallet = _wallet;\n', '  }\n', '\n', '\n', '// creates the token to be sold. \n', '  // override this method to have crowdsale of a specific datum token.\n', '  function createTokenContract() internal returns (EtherGoToken) {\n', '    return new EtherGoToken();\n', '}\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    //get ammount in wei\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(425);\n', '\n', '    //purchase tokens and transfer to beneficiary\n', '    token.transferFromContract(beneficiary, 45500);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    //Token purchase event\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    //forward funds to wallet\n', '    forwardFunds();\n', '  }\n', '\n', '  //send tokens to the given address used for investors with other conditions, only contract owner can call this\n', '  function transferTokensManual(address beneficiary, uint256 amount) onlyOwner {\n', '    require(beneficiary != 0x0);\n', '    require(amount != 0);\n', '    require(weiRaised.add(amount) <= cap);\n', '\n', '    //transfer tokens\n', '    token.transferFromContract(beneficiary, amount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(amount);\n', '\n', '    //Token purchase event\n', '    TokenPurchase(wallet, beneficiary, 0, amount);\n', '\n', '  }\n', '\n', '   /// @notice Enables token holders to transfer their tokens freely if true\n', '   /// @param _transfersEnabled True if transfers are allowed in the clone\n', '   function enableTransfers(bool _transfersEnabled) onlyOwner {\n', '      token.enableTransfers(_transfersEnabled);\n', '   }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // should be called after crowdsale ends or to emergency stop the sale\n', '  function finalize() onlyOwner {\n', '    require(!isFinalized);\n', '    Finalized();\n', '    isFinalized = true;\n', '  }\n', '\n', '\n', '  // @return true if the transaction can buy tokens\n', '  // check for valid time period, min amount and within cap\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = startDate <= now && endDate >= now;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool minAmount = msg.value >= minimumParticipationAmount;\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '\n', '    return withinPeriod && nonZeroPurchase && minAmount && !isFinalized && withinCap;\n', '  }\n', '\n', '    // @return true if the goal is reached\n', '  function capReached() public constant returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return isFinalized;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title EtherGoToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator. \n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract EtherGoToken is StandardToken, Ownable {\n', '\n', '  string public name = "ETHERGO";           \n', '  uint8 public decimals = 2;                         \n', '  string public symbol = "XGO";                            \n', '                                           \n', '  uint256 public constant INITIAL_SUPPLY = 0.0000000095 ether;\n', '\n', '  // Flag that determines if the token is transferable or not.\n', '  bool public transfersEnabled = false;\n', '\n', '  /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens. \n', '   */\n', '  function EtherGoToken() {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '\n', '\n', '   /// @notice Enables token holders to transfer their tokens freely if true\n', '   /// @param _transfersEnabled True if transfers are allowed in the clone\n', '   function enableTransfers(bool _transfersEnabled) onlyOwner {\n', '      transfersEnabled = _transfersEnabled;\n', '   }\n', '\n', '  function transferFromContract(address _to, uint256 _value) onlyOwner returns (bool success) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success) {\n', '    require(transfersEnabled);\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '    require(transfersEnabled);\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '      require(transfersEnabled);\n', '      return super.approve(_spender, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title  \n', ' * @dev DatCrowdSale is a contract for managing a token crowdsale.\n', ' * DatCrowdSale have a start and end date, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a refundable valut \n', ' * as they arrive.\n', ' */\n', 'contract DatCrowdPreSale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  EtherGoToken public token;\n', '\n', '  // start and end date where investments are allowed (both inclusive)\n', '  uint256 public startDate = 1523469083; \n', '  uint256 public endDate = 1555005081; \n', '\n', '  // Minimum amount to participate\n', '  uint256 public minimumParticipationAmount = 300000000000000 wei; //0.0003 ether\n', '\n', '  // Maximum amount to participate\n', '  uint256 public maximalParticipationAmount = 5000000000000000000 wei; //0.05 ether\n', '\n', '  // address where funds are collected\n', '  address wallet;\n', '\n', '  // how many token units a buyer gets per ether\n', '  uint256 rate = 150000;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  //flag for final of crowdsale\n', '  bool public isFinalized = false;\n', '\n', '  //cap for the sale\n', '  uint256 public cap = 5000000000000000000000 wei; //500 ether\n', ' \n', '\n', '\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '\n', '  /**\n', '  * @notice Log an event for each funding contributed during the public phase\n', '  * @notice Events are not logged when the constructor is being executed during\n', '  *         deployment, so the preallocations will not be logged\n', '  */\n', '  event LogParticipation(address indexed sender, uint256 value, uint256 timestamp);\n', '\n', '\n', '  \n', '  function DatCrowdPreSale(address _wallet) {\n', '    token = createTokenContract();\n', '    wallet = _wallet;\n', '  }\n', '\n', '\n', '// creates the token to be sold. \n', '  // override this method to have crowdsale of a specific datum token.\n', '  function createTokenContract() internal returns (EtherGoToken) {\n', '    return new EtherGoToken();\n', '}\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    //get ammount in wei\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(425);\n', '\n', '    //purchase tokens and transfer to beneficiary\n', '    token.transferFromContract(beneficiary, 45500);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    //Token purchase event\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    //forward funds to wallet\n', '    forwardFunds();\n', '  }\n', '\n', '  //send tokens to the given address used for investors with other conditions, only contract owner can call this\n', '  function transferTokensManual(address beneficiary, uint256 amount) onlyOwner {\n', '    require(beneficiary != 0x0);\n', '    require(amount != 0);\n', '    require(weiRaised.add(amount) <= cap);\n', '\n', '    //transfer tokens\n', '    token.transferFromContract(beneficiary, amount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(amount);\n', '\n', '    //Token purchase event\n', '    TokenPurchase(wallet, beneficiary, 0, amount);\n', '\n', '  }\n', '\n', '   /// @notice Enables token holders to transfer their tokens freely if true\n', '   /// @param _transfersEnabled True if transfers are allowed in the clone\n', '   function enableTransfers(bool _transfersEnabled) onlyOwner {\n', '      token.enableTransfers(_transfersEnabled);\n', '   }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // should be called after crowdsale ends or to emergency stop the sale\n', '  function finalize() onlyOwner {\n', '    require(!isFinalized);\n', '    Finalized();\n', '    isFinalized = true;\n', '  }\n', '\n', '\n', '  // @return true if the transaction can buy tokens\n', '  // check for valid time period, min amount and within cap\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = startDate <= now && endDate >= now;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool minAmount = msg.value >= minimumParticipationAmount;\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '\n', '    return withinPeriod && nonZeroPurchase && minAmount && !isFinalized && withinCap;\n', '  }\n', '\n', '    // @return true if the goal is reached\n', '  function capReached() public constant returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return isFinalized;\n', '  }\n', '\n', '}']
