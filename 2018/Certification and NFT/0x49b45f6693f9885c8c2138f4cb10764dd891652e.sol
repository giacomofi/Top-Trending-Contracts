['pragma solidity ^0.4.24;\n', '\n', 'contract Kiwiana {\n', '    address public owner;\n', '    mapping (address => uint) public payments;\n', '    mapping (address => string) public allergies;\n', '    address public chris = 0xC369B30c8eC960260631E20081A32e4c61E5Ea9d;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function () external payable {\n', '        register(msg.sender);\n', '    }\n', '\n', '    function register(address _attendee) public payable returns(bool) {\n', '        uint weiAmount = msg.value;\n', '        if(weiAmount >= 100000000000000000) {\n', '            payments[_attendee] = weiAmount;\n', '            return true;\n', '        }\n', '        else {\n', '            // you didn&#39;t pay enough, so we&#39;re just swallowing how much you spent\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function isEatingAndDrinking(address __attendee) public view returns(bool) {\n', '        if(payments[__attendee] >= 150000000000000000) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function isEating(address __attendee) public view returns(bool) {\n', '        if(payments[__attendee] >= 100000000000000000) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function allergy(string _description) public payable returns(bool) {\n', '        if(payments[msg.sender] >= 100000000000000000) {\n', '            // you paid so we care about your allergies\n', '            allergies[msg.sender] = _description;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function giveMeBackMyMoney() public onlyOwner {\n', '        //send all money to chris\n', '        chris.transfer(address(this).balance);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Kiwiana {\n', '    address public owner;\n', '    mapping (address => uint) public payments;\n', '    mapping (address => string) public allergies;\n', '    address public chris = 0xC369B30c8eC960260631E20081A32e4c61E5Ea9d;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function () external payable {\n', '        register(msg.sender);\n', '    }\n', '\n', '    function register(address _attendee) public payable returns(bool) {\n', '        uint weiAmount = msg.value;\n', '        if(weiAmount >= 100000000000000000) {\n', '            payments[_attendee] = weiAmount;\n', '            return true;\n', '        }\n', '        else {\n', "            // you didn't pay enough, so we're just swallowing how much you spent\n", '            return false;\n', '        }\n', '    }\n', '\n', '    function isEatingAndDrinking(address __attendee) public view returns(bool) {\n', '        if(payments[__attendee] >= 150000000000000000) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function isEating(address __attendee) public view returns(bool) {\n', '        if(payments[__attendee] >= 100000000000000000) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function allergy(string _description) public payable returns(bool) {\n', '        if(payments[msg.sender] >= 100000000000000000) {\n', '            // you paid so we care about your allergies\n', '            allergies[msg.sender] = _description;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function giveMeBackMyMoney() public onlyOwner {\n', '        //send all money to chris\n', '        chris.transfer(address(this).balance);\n', '    }\n', '}']
