['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6f0b0a1b0a2f0e17060002150a01410c00">[email&#160;protected]</a>> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '}\n', '\n', '\n', 'contract MemeToken is ERC721 {\n', '  /*** EVENTS ***/\n', '  /// @dev The Birth event is fired whenever a new meme comes into existence.\n', '  event Birth(uint256 tokenId, uint256 metadata, string text, address owner);\n', '\n', '  /// @dev The TokenSold event is fired whenever a meme is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address newOwner, uint256 metadata, string text);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721. \n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  /*** CONSTANTS ***/\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "CryptoMemes"; // solhint-disable-line\n', '  string public constant SYMBOL = "CM"; // solhint-disable-line\n', '\n', '  uint256 private startingPrice = 0.001 ether;\n', '  uint256 private constant PROMO_CREATION_LIMIT = 50000;\n', '  uint256 private firstStepLimit =  0.05 ether;\n', '  uint256 private secondStepLimit = 0.5 ether;\n', '\n', '  /*** STORAGE ***/\n', '  /// @dev A mapping from meme IDs to the address that owns them. All memes have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public memeIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from memeIDs to an address that has been approved to call\n', '  ///  transferFrom(). Each meme can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public memeIndexToApproved;\n', '\n', '  // @dev A mapping from memeIDs to the price of the token.\n', '  mapping (uint256 => uint256) private memeIndexToPrice;\n', '\n', '  // The address of the account that can execute special actions.\n', '  // Not related to Dogecoin, just a normal Doge.\n', '  address public dogeAddress;\n', '  // Robot9000 address for automation.\n', '  // Not related to r9k, just a normal robot.\n', '  address public r9kAddress;\n', '\n', '  uint256 public promoCreatedCount;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Meme {\n', '    uint256 metadata;\n', '    string text;\n', '  }\n', '\n', '  // All your memes are belong to us.\n', '  Meme[] private memes;\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for Doge functionality\n', '  modifier onlyDoge() {\n', '    require(msg.sender == dogeAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for Robot functionality\n', '  modifier onlyr9k() {\n', '    require(msg.sender == r9kAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for Doge and Robot functionality\n', '  modifier onlyDogeAndr9k() {\n', '    require(\n', '      msg.sender == dogeAddress ||\n', '      msg.sender == r9kAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function MemeToken() public {\n', '    dogeAddress = msg.sender;\n', '    r9kAddress = msg.sender;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public\n', '  {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    memeIndexToApproved[_tokenId] = _to;\n', '\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  /// @dev Creates a new promo meme with the given metadata and text, with given _price and\n', '  ///  assignes it to an address.\n', '  function createPromoMeme(address _owner, uint256 _metadata, string _text, uint256 _price) public onlyDogeAndr9k {\n', '    require(promoCreatedCount < PROMO_CREATION_LIMIT);\n', '\n', '    address memeOwner = _owner;\n', '    if (memeOwner == address(0)) {\n', '      memeOwner = dogeAddress;\n', '    }\n', '\n', '    if (_price <= 0) {\n', '      _price = startingPrice;\n', '    }\n', '\n', '    promoCreatedCount++;\n', '    _createMeme(_metadata, _text, memeOwner, _price);\n', '  }\n', '\n', '  /// @dev Creates a new user-generated meme with the given metadata and text, with given _price and\n', '  ///  assignes it to an address.\n', '  function createUserMeme(address _owner, uint256 _metadata, string _text, uint256 _price) public onlyDogeAndr9k {\n', '    address memeOwner = _owner;\n', '    if (memeOwner == address(0)) {\n', '      memeOwner = dogeAddress;\n', '    }\n', '\n', '    if (_price <= 0) {\n', '      _price = startingPrice;\n', '    }\n', '\n', '    _createMeme(_metadata, _text, memeOwner, _price);\n', '  }\n', '\n', '  /// @dev Creates a new meme with the given name.\n', '  function createContractMeme(uint256 _metadata, string _text) public onlyDogeAndr9k {\n', '    _createMeme(_metadata, _text, address(this), startingPrice);\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific meme.\n', '  /// @param _tokenId The tokenId of the meme of interest.\n', '  function getMeme(uint256 _tokenId) public view returns (\n', '    uint256 metadata,\n', '    string text,\n', '    uint256 sellingPrice,\n', '    address owner\n', '  ) {\n', '    Meme storage meme = memes[_tokenId];\n', '    metadata = meme.metadata;\n', '    text = meme.text;\n', '    sellingPrice = memeIndexToPrice[_tokenId];\n', '    owner = memeIndexToOwner[_tokenId];\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = memeIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  function payout(address _to) public onlyDoge {\n', '    _payout(_to);\n', '  }\n', '\n', '  // Allows someone to send ether and obtain the meme\n', '  function purchase(uint256 _tokenId) public payable {\n', '    address oldOwner = memeIndexToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '    uint256 sellingPrice = memeIndexToPrice[_tokenId];\n', '\n', '    // Making sure meme owner is not sending to self\n', '    require(oldOwner != newOwner);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice);\n', '\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 97), 100));\n', '    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '\n', '    // Update prices\n', '    if (sellingPrice < firstStepLimit) {\n', '      // first stage\n', '      memeIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 100);\n', '    } else if (sellingPrice < secondStepLimit) {\n', '      // second stage\n', '      memeIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 150), 100);\n', '    } else {\n', '      // third stage\n', '      memeIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 125), 100);\n', '    }\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(payment); //(1 - 0.05)\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, memeIndexToPrice[_tokenId], oldOwner, newOwner, memes[_tokenId].metadata, memes[_tokenId].text);\n', '\n', '    msg.sender.transfer(purchaseExcess);\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return memeIndexToPrice[_tokenId];\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as Doge. Only available to the current Doge.\n', '  /// @param _newDoge The address of the new Doge\n', '  function setDoge(address _newDoge) public onlyDoge {\n', '    require(_newDoge != address(0));\n', '\n', '    dogeAddress = _newDoge;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as Robot. Only available to the current Doge.\n', '  /// @param _newRobot The address of the new Robot\n', '  function setRobot(address _newRobot) public onlyDoge {\n', '    require(_newRobot != address(0));\n', '\n', '    r9kAddress = _newRobot;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a meme\n', '  /// @param _tokenId The ID of the meme that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = memeIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose meme tokens we are interested in.\n', '  /// @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '  ///  expensive (it walks the entire memes array looking for memes belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 memeCount = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 memeId;\n', '      for (memeId = 0; memeId <= memeCount; memeId++) {\n', '        if (memeIndexToOwner[memeId] == _owner) {\n', '          result[resultIndex] = memeId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return memes.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the meme to another account\n', '  /// @param _to The address for the meme to be transferred to.\n', '  /// @param _tokenId The ID of the meme that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public\n', '  {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public\n', '  {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return memeIndexToApproved[_tokenId] == _to;\n', '  }\n', '\n', '  /// For creating a new meme\n', '  function _createMeme(uint256 _metadata, string _text, address _owner, uint256 _price) private {\n', '    Meme memory _meme = Meme({\n', '      metadata: _metadata,\n', '      text: _text\n', '    });\n', '    uint256 newMemeId = memes.push(_meme) - 1;\n', '\n', '    // It&#39;s probably never going to happen, 2^64 memes are A LOT, but\n', '    // let&#39;s just be 100% sure we never let this happen.\n', '    require(newMemeId == uint256(uint64(newMemeId)));\n', '\n', '    Birth(newMemeId, _metadata, _text, _owner);\n', '\n', '    memeIndexToPrice[newMemeId] = _price;\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newMemeId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == memeIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    if (_to == address(0)) {\n', '      dogeAddress.transfer(this.balance);\n', '    } else {\n', '      _to.transfer(this.balance);\n', '    }\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific meme to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    // Since the number of memes is capped to 2^32 we can&#39;t overflow this\n', '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    memeIndexToOwner[_tokenId] = _to;\n', '\n', '    // When creating new memes _from is 0x0, but we can&#39;t account that address.\n', '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete memeIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '}\n', '\n', '\n', 'contract MemeToken is ERC721 {\n', '  /*** EVENTS ***/\n', '  /// @dev The Birth event is fired whenever a new meme comes into existence.\n', '  event Birth(uint256 tokenId, uint256 metadata, string text, address owner);\n', '\n', '  /// @dev The TokenSold event is fired whenever a meme is sold.\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address newOwner, uint256 metadata, string text);\n', '\n', '  /// @dev Transfer event as defined in current draft of ERC721. \n', '  ///  ownership is assigned, including births.\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  /*** CONSTANTS ***/\n', '  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '  string public constant NAME = "CryptoMemes"; // solhint-disable-line\n', '  string public constant SYMBOL = "CM"; // solhint-disable-line\n', '\n', '  uint256 private startingPrice = 0.001 ether;\n', '  uint256 private constant PROMO_CREATION_LIMIT = 50000;\n', '  uint256 private firstStepLimit =  0.05 ether;\n', '  uint256 private secondStepLimit = 0.5 ether;\n', '\n', '  /*** STORAGE ***/\n', '  /// @dev A mapping from meme IDs to the address that owns them. All memes have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public memeIndexToOwner;\n', '\n', '  // @dev A mapping from owner address to count of tokens that address owns.\n', '  //  Used internally inside balanceOf() to resolve ownership count.\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  /// @dev A mapping from memeIDs to an address that has been approved to call\n', '  ///  transferFrom(). Each meme can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public memeIndexToApproved;\n', '\n', '  // @dev A mapping from memeIDs to the price of the token.\n', '  mapping (uint256 => uint256) private memeIndexToPrice;\n', '\n', '  // The address of the account that can execute special actions.\n', '  // Not related to Dogecoin, just a normal Doge.\n', '  address public dogeAddress;\n', '  // Robot9000 address for automation.\n', '  // Not related to r9k, just a normal robot.\n', '  address public r9kAddress;\n', '\n', '  uint256 public promoCreatedCount;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Meme {\n', '    uint256 metadata;\n', '    string text;\n', '  }\n', '\n', '  // All your memes are belong to us.\n', '  Meme[] private memes;\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for Doge functionality\n', '  modifier onlyDoge() {\n', '    require(msg.sender == dogeAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for Robot functionality\n', '  modifier onlyr9k() {\n', '    require(msg.sender == r9kAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for Doge and Robot functionality\n', '  modifier onlyDogeAndr9k() {\n', '    require(\n', '      msg.sender == dogeAddress ||\n', '      msg.sender == r9kAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function MemeToken() public {\n', '    dogeAddress = msg.sender;\n', '    r9kAddress = msg.sender;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public\n', '  {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    memeIndexToApproved[_tokenId] = _to;\n', '\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  /// @dev Creates a new promo meme with the given metadata and text, with given _price and\n', '  ///  assignes it to an address.\n', '  function createPromoMeme(address _owner, uint256 _metadata, string _text, uint256 _price) public onlyDogeAndr9k {\n', '    require(promoCreatedCount < PROMO_CREATION_LIMIT);\n', '\n', '    address memeOwner = _owner;\n', '    if (memeOwner == address(0)) {\n', '      memeOwner = dogeAddress;\n', '    }\n', '\n', '    if (_price <= 0) {\n', '      _price = startingPrice;\n', '    }\n', '\n', '    promoCreatedCount++;\n', '    _createMeme(_metadata, _text, memeOwner, _price);\n', '  }\n', '\n', '  /// @dev Creates a new user-generated meme with the given metadata and text, with given _price and\n', '  ///  assignes it to an address.\n', '  function createUserMeme(address _owner, uint256 _metadata, string _text, uint256 _price) public onlyDogeAndr9k {\n', '    address memeOwner = _owner;\n', '    if (memeOwner == address(0)) {\n', '      memeOwner = dogeAddress;\n', '    }\n', '\n', '    if (_price <= 0) {\n', '      _price = startingPrice;\n', '    }\n', '\n', '    _createMeme(_metadata, _text, memeOwner, _price);\n', '  }\n', '\n', '  /// @dev Creates a new meme with the given name.\n', '  function createContractMeme(uint256 _metadata, string _text) public onlyDogeAndr9k {\n', '    _createMeme(_metadata, _text, address(this), startingPrice);\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific meme.\n', '  /// @param _tokenId The tokenId of the meme of interest.\n', '  function getMeme(uint256 _tokenId) public view returns (\n', '    uint256 metadata,\n', '    string text,\n', '    uint256 sellingPrice,\n', '    address owner\n', '  ) {\n', '    Meme storage meme = memes[_tokenId];\n', '    metadata = meme.metadata;\n', '    text = meme.text;\n', '    sellingPrice = memeIndexToPrice[_tokenId];\n', '    owner = memeIndexToOwner[_tokenId];\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = memeIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  function payout(address _to) public onlyDoge {\n', '    _payout(_to);\n', '  }\n', '\n', '  // Allows someone to send ether and obtain the meme\n', '  function purchase(uint256 _tokenId) public payable {\n', '    address oldOwner = memeIndexToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '    uint256 sellingPrice = memeIndexToPrice[_tokenId];\n', '\n', '    // Making sure meme owner is not sending to self\n', '    require(oldOwner != newOwner);\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure sent amount is greater than or equal to the sellingPrice\n', '    require(msg.value >= sellingPrice);\n', '\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 97), 100));\n', '    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '\n', '    // Update prices\n', '    if (sellingPrice < firstStepLimit) {\n', '      // first stage\n', '      memeIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 100);\n', '    } else if (sellingPrice < secondStepLimit) {\n', '      // second stage\n', '      memeIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 150), 100);\n', '    } else {\n', '      // third stage\n', '      memeIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 125), 100);\n', '    }\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(payment); //(1 - 0.05)\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, memeIndexToPrice[_tokenId], oldOwner, newOwner, memes[_tokenId].metadata, memes[_tokenId].text);\n', '\n', '    msg.sender.transfer(purchaseExcess);\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    return memeIndexToPrice[_tokenId];\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as Doge. Only available to the current Doge.\n', '  /// @param _newDoge The address of the new Doge\n', '  function setDoge(address _newDoge) public onlyDoge {\n', '    require(_newDoge != address(0));\n', '\n', '    dogeAddress = _newDoge;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as Robot. Only available to the current Doge.\n', '  /// @param _newRobot The address of the new Robot\n', '  function setRobot(address _newRobot) public onlyDoge {\n', '    require(_newRobot != address(0));\n', '\n', '    r9kAddress = _newRobot;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a meme\n', '  /// @param _tokenId The ID of the meme that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = memeIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// @param _owner The owner whose meme tokens we are interested in.\n', "  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '  ///  expensive (it walks the entire memes array looking for memes belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 memeCount = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 memeId;\n', '      for (memeId = 0; memeId <= memeCount; memeId++) {\n', '        if (memeIndexToOwner[memeId] == _owner) {\n', '          result[resultIndex] = memeId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /// For querying totalSupply of token\n', '  /// @dev Required for ERC-721 compliance.\n', '  function totalSupply() public view returns (uint256 total) {\n', '    return memes.length;\n', '  }\n', '\n', '  /// Owner initates the transfer of the meme to another account\n', '  /// @param _to The address for the meme to be transferred to.\n', '  /// @param _tokenId The ID of the meme that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public\n', '  {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public\n', '  {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return memeIndexToApproved[_tokenId] == _to;\n', '  }\n', '\n', '  /// For creating a new meme\n', '  function _createMeme(uint256 _metadata, string _text, address _owner, uint256 _price) private {\n', '    Meme memory _meme = Meme({\n', '      metadata: _metadata,\n', '      text: _text\n', '    });\n', '    uint256 newMemeId = memes.push(_meme) - 1;\n', '\n', "    // It's probably never going to happen, 2^64 memes are A LOT, but\n", "    // let's just be 100% sure we never let this happen.\n", '    require(newMemeId == uint256(uint64(newMemeId)));\n', '\n', '    Birth(newMemeId, _metadata, _text, _owner);\n', '\n', '    memeIndexToPrice[newMemeId] = _price;\n', '\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), _owner, newMemeId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == memeIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    if (_to == address(0)) {\n', '      dogeAddress.transfer(this.balance);\n', '    } else {\n', '      _to.transfer(this.balance);\n', '    }\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific meme to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', "    // Since the number of memes is capped to 2^32 we can't overflow this\n", '    ownershipTokenCount[_to]++;\n', '    //transfer ownership\n', '    memeIndexToOwner[_tokenId] = _to;\n', '\n', "    // When creating new memes _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete memeIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
