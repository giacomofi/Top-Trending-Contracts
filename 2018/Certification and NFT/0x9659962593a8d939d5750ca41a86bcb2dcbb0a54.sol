['pragma solidity ^0.4.24;\n', '\n', '\n', 'interface DelegatedERC20 {\n', '    function allowance(address _owner, address _spender) external view returns (uint256); \n', '    function transferFrom(address from, address to, uint256 value, address sender) external returns (bool); \n', '    function approve(address _spender, uint256 _value, address sender) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function transfer(address _to, uint256 _value, address sender) external returns (bool);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenFront is intended to provide a permanent address for a\n', ' * restricted token.  Systems which intend to use the token front should not\n', ' * emit ERC20 events.  Rather this contract should emit them. \n', ' */\n', 'contract TokenFront is ERC20, Ownable {\n', '\n', '    string public name = "Test Fox Token";\n', '    string public symbol = "TFT";\n', '\n', '    DelegatedERC20 public tokenLogic;\n', '    \n', '    constructor(DelegatedERC20 _tokenLogic, address _owner) public {\n', '        owner = _owner;\n', '        tokenLogic = _tokenLogic; \n', '    }\n', '\n', '    function migrate(DelegatedERC20 newTokenLogic) public onlyOwner {\n', '        tokenLogic = newTokenLogic;\n', '    }\n', '\n', '    function allowance(address owner, address spender) \n', '        public \n', '        view \n', '        returns (uint256)\n', '    {\n', '        return tokenLogic.allowance(owner, spender);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n', '        if (tokenLogic.transferFrom(from, to, value, msg.sender)) {\n', '            emit Transfer(from, to, value);\n', '            return true;\n', '        } \n', '        return false;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        if (tokenLogic.approve(spender, value, msg.sender)) {\n', '            emit Approval(msg.sender, spender, value);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return tokenLogic.totalSupply();\n', '    }\n', '    \n', '    function balanceOf(address who) public view returns (uint256) {\n', '        return tokenLogic.balanceOf(who);\n', '    }\n', '\n', '    function transfer(address to, uint256 value) public returns (bool) {\n', '        if (tokenLogic.transfer(to, value, msg.sender)) {\n', '            emit Transfer(msg.sender, to, value);\n', '            return true;\n', '        } \n', '        return false;\n', '    }\n', '\n', '}']