['pragma solidity ^0.4.23;\n', '\n', 'contract Owned {\n', '\n', '    event OwnerChanged(address indexed from, address indexed to);\n', '\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function _transferOwnership(address _from, address _to) internal {\n', '        owner = _to;\n', '        emit OwnerChanged(_from, _to);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        _transferOwnership(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Whitelisted is Owned {\n', '\n', '    event WhitelistModified(address indexed who, bool inWhitelist);\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    constructor() public {\n', '        whitelist[msg.sender] = true;\n', '    }\n', '\n', '    function addToWhitelist(address who) public onlyOwner {\n', '        whitelist[who] = true;\n', '        emit WhitelistModified(who, true);\n', '    }\n', '    \n', '    function removeFromWhitelist(address who) public onlyOwner {\n', '        whitelist[who] = false;\n', '        emit WhitelistModified(who, false);\n', '    }\n', '\n', '    modifier whitelisted {\n', '        require(whitelist[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', '        allowance[_from][msg.sender] -= _value;             // Subtract from the sender&#39;s allowance\n', '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Ellobitz is TokenERC20, Owned, Whitelisted {\n', '\n', '    uint256 public mineCount;\n', '    uint256 public minMineSize;\n', '    uint256 public maxMineSize;\n', '    uint256 public chipSize;\n', '    uint256 public firstChipBonus;\n', '    uint public chipSpeed;\n', '\n', '    uint256 internal activeMine;\n', '    uint256 internal mineSize;\n', '    bool internal firstChip;\n', '    \n', '    mapping(address => uint) public lastChipTime;\n', '\n', '    event MineFound(address indexed chipper, uint256 activeMine);\n', '    event MineChipped(address indexed chipper, uint256 indexed activeMine, uint256 amount);\n', '    event MineExausted(address indexed chipper, uint256 activeMine);\n', '\n', '    modifier validMineParameters (\n', '        uint256 _mineCount,\n', '        uint256 _minMineSize,\n', '        uint256 _maxMineSize,\n', '        uint256 _chipSize,\n', '        uint256 _firstChipBonus,\n', '        uint _chipSpeed\n', '    ) {\n', '        require(_minMineSize <= _maxMineSize, "Smallest mine size smaller than largest mine size");\n', '        require(_chipSize + _firstChipBonus <= _minMineSize, "First chip would exhaust mine");\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint256 _mineCount,\n', '        uint256 _minMineSize,\n', '        uint256 _maxMineSize,\n', '        uint256 _chipSize,\n', '        uint256 _firstChipBonus,\n', '        uint _chipSpeed\n', '    ) TokenERC20(0, tokenName, tokenSymbol) validMineParameters(\n', '        _mineCount,\n', '        _minMineSize,\n', '        _maxMineSize,\n', '        _chipSize,\n', '        _firstChipBonus,\n', '        _chipSpeed\n', '    ) public {\n', '        \n', '        // variable setting\n', '        mineCount = _mineCount;\n', '        minMineSize = _minMineSize;\n', '        maxMineSize = _maxMineSize;\n', '        chipSize = _chipSize;\n', '        firstChipBonus = _firstChipBonus;\n', '        chipSpeed = _chipSpeed;\n', '\n', '        // other variable initialization\n', '        activeMine = 0;\n', '        mineSize = minMineSize;\n', '        firstChip = true;\n', '    }\n', '\n', '    function _resetMine() internal {\n', '        activeMine = random() % mineCount;\n', '        mineSize = random() % (maxMineSize - minMineSize + 1) + minMineSize;\n', '        firstChip = true;\n', '    }\n', '\n', '    function chip(uint256 mineNumber) public whitelisted {\n', '        \n', '        require(mineNumber == activeMine, "Chipped wrong mine");\n', '        require(now >= lastChipTime[msg.sender] + chipSpeed, "Chipped too fast");\n', '        \n', '        uint256 thisChipNoCap = firstChip ? firstChipBonus + chipSize : chipSize;\n', '        uint256 thisChip = thisChipNoCap > mineSize ? mineSize : thisChipNoCap;\n', '\n', '        if (firstChip) {\n', '            emit MineFound(msg.sender, activeMine);\n', '        }\n', '\n', '        mineSize -= thisChip;\n', '        mintToken(msg.sender, thisChip);\n', '        lastChipTime[msg.sender] = now;\n', '        firstChip = false;\n', '        emit MineChipped(msg.sender, activeMine, thisChip);\n', '\n', '        if (mineSize <= 0) {\n', '            emit MineExausted(msg.sender, activeMine);\n', '            _resetMine();\n', '        }\n', '    }\n', '\n', '    function setParameters(\n', '        uint256 _mineCount,\n', '        uint256 _minMineSize,\n', '        uint256 _maxMineSize,\n', '        uint256 _chipSize,\n', '        uint256 _firstChipBonus,\n', '        uint _chipSpeed\n', '    ) onlyOwner validMineParameters(\n', '        _mineCount,\n', '        _minMineSize,\n', '        _maxMineSize,\n', '        _chipSize,\n', '        _firstChipBonus,\n', '        _chipSpeed\n', '    ) public {\n', '        mineCount = _mineCount;\n', '        minMineSize = _minMineSize;\n', '        maxMineSize = _maxMineSize;\n', '        chipSize = _chipSize;\n', '        firstChipBonus = _firstChipBonus;\n', '        chipSpeed = _chipSpeed;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) internal {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    // adapted from https://medium.com/@promentol/lottery-smart-contract-can-we-generate-random-numbers-in-solidity-4f586a152b27\n', '    function random() internal view returns (uint256) {\n', '        return uint256(keccak256(\n', '            abi.encodePacked(block.timestamp, block.difficulty)\n', '        ));\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract Owned {\n', '\n', '    event OwnerChanged(address indexed from, address indexed to);\n', '\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function _transferOwnership(address _from, address _to) internal {\n', '        owner = _to;\n', '        emit OwnerChanged(_from, _to);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        _transferOwnership(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Whitelisted is Owned {\n', '\n', '    event WhitelistModified(address indexed who, bool inWhitelist);\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    constructor() public {\n', '        whitelist[msg.sender] = true;\n', '    }\n', '\n', '    function addToWhitelist(address who) public onlyOwner {\n', '        whitelist[who] = true;\n', '        emit WhitelistModified(who, true);\n', '    }\n', '    \n', '    function removeFromWhitelist(address who) public onlyOwner {\n', '        whitelist[who] = false;\n', '        emit WhitelistModified(who, false);\n', '    }\n', '\n', '    modifier whitelisted {\n', '        require(whitelist[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '}\n', '\n', 'contract TokenERC20 {\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 18;\n', '    // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public totalSupply;\n', '\n', '    // This creates an array with all balances\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '\n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '    // This generates a public event on the blockchain that will notify clients\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor(\n', '        uint256 initialSupply,\n', '        string tokenName,\n', '        string tokenSymbol\n', '    ) public {\n', '        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n', '        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n', '        name = tokenName;                                   // Set the name for display purposes\n', '        symbol = tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balanceOf[_from] >= _value);\n', '        // Check for overflows\n', '        require(balanceOf[_to] + _value >= balanceOf[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n', '        // Subtract from the sender\n', '        balanceOf[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens from other address\n', '     *\n', '     * Send `_value` tokens to `_to` on behalf of `_from`\n', '     *\n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] -= _value;\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     */\n', '    function approve(address _spender, uint256 _value) public\n', '        returns (bool success) {\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly\n', '     *\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n', '        totalSupply -= _value;                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n", '        totalSupply -= _value;                              // Update totalSupply\n', '        emit Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Ellobitz is TokenERC20, Owned, Whitelisted {\n', '\n', '    uint256 public mineCount;\n', '    uint256 public minMineSize;\n', '    uint256 public maxMineSize;\n', '    uint256 public chipSize;\n', '    uint256 public firstChipBonus;\n', '    uint public chipSpeed;\n', '\n', '    uint256 internal activeMine;\n', '    uint256 internal mineSize;\n', '    bool internal firstChip;\n', '    \n', '    mapping(address => uint) public lastChipTime;\n', '\n', '    event MineFound(address indexed chipper, uint256 activeMine);\n', '    event MineChipped(address indexed chipper, uint256 indexed activeMine, uint256 amount);\n', '    event MineExausted(address indexed chipper, uint256 activeMine);\n', '\n', '    modifier validMineParameters (\n', '        uint256 _mineCount,\n', '        uint256 _minMineSize,\n', '        uint256 _maxMineSize,\n', '        uint256 _chipSize,\n', '        uint256 _firstChipBonus,\n', '        uint _chipSpeed\n', '    ) {\n', '        require(_minMineSize <= _maxMineSize, "Smallest mine size smaller than largest mine size");\n', '        require(_chipSize + _firstChipBonus <= _minMineSize, "First chip would exhaust mine");\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        string tokenName,\n', '        string tokenSymbol,\n', '        uint256 _mineCount,\n', '        uint256 _minMineSize,\n', '        uint256 _maxMineSize,\n', '        uint256 _chipSize,\n', '        uint256 _firstChipBonus,\n', '        uint _chipSpeed\n', '    ) TokenERC20(0, tokenName, tokenSymbol) validMineParameters(\n', '        _mineCount,\n', '        _minMineSize,\n', '        _maxMineSize,\n', '        _chipSize,\n', '        _firstChipBonus,\n', '        _chipSpeed\n', '    ) public {\n', '        \n', '        // variable setting\n', '        mineCount = _mineCount;\n', '        minMineSize = _minMineSize;\n', '        maxMineSize = _maxMineSize;\n', '        chipSize = _chipSize;\n', '        firstChipBonus = _firstChipBonus;\n', '        chipSpeed = _chipSpeed;\n', '\n', '        // other variable initialization\n', '        activeMine = 0;\n', '        mineSize = minMineSize;\n', '        firstChip = true;\n', '    }\n', '\n', '    function _resetMine() internal {\n', '        activeMine = random() % mineCount;\n', '        mineSize = random() % (maxMineSize - minMineSize + 1) + minMineSize;\n', '        firstChip = true;\n', '    }\n', '\n', '    function chip(uint256 mineNumber) public whitelisted {\n', '        \n', '        require(mineNumber == activeMine, "Chipped wrong mine");\n', '        require(now >= lastChipTime[msg.sender] + chipSpeed, "Chipped too fast");\n', '        \n', '        uint256 thisChipNoCap = firstChip ? firstChipBonus + chipSize : chipSize;\n', '        uint256 thisChip = thisChipNoCap > mineSize ? mineSize : thisChipNoCap;\n', '\n', '        if (firstChip) {\n', '            emit MineFound(msg.sender, activeMine);\n', '        }\n', '\n', '        mineSize -= thisChip;\n', '        mintToken(msg.sender, thisChip);\n', '        lastChipTime[msg.sender] = now;\n', '        firstChip = false;\n', '        emit MineChipped(msg.sender, activeMine, thisChip);\n', '\n', '        if (mineSize <= 0) {\n', '            emit MineExausted(msg.sender, activeMine);\n', '            _resetMine();\n', '        }\n', '    }\n', '\n', '    function setParameters(\n', '        uint256 _mineCount,\n', '        uint256 _minMineSize,\n', '        uint256 _maxMineSize,\n', '        uint256 _chipSize,\n', '        uint256 _firstChipBonus,\n', '        uint _chipSpeed\n', '    ) onlyOwner validMineParameters(\n', '        _mineCount,\n', '        _minMineSize,\n', '        _maxMineSize,\n', '        _chipSize,\n', '        _firstChipBonus,\n', '        _chipSpeed\n', '    ) public {\n', '        mineCount = _mineCount;\n', '        minMineSize = _minMineSize;\n', '        maxMineSize = _maxMineSize;\n', '        chipSize = _chipSize;\n', '        firstChipBonus = _firstChipBonus;\n', '        chipSpeed = _chipSpeed;\n', '    }\n', '\n', '    function mintToken(address target, uint256 mintedAmount) internal {\n', '        balanceOf[target] += mintedAmount;\n', '        totalSupply += mintedAmount;\n', '        emit Transfer(this, target, mintedAmount);\n', '    }\n', '\n', '    // adapted from https://medium.com/@promentol/lottery-smart-contract-can-we-generate-random-numbers-in-solidity-4f586a152b27\n', '    function random() internal view returns (uint256) {\n', '        return uint256(keccak256(\n', '            abi.encodePacked(block.timestamp, block.difficulty)\n', '        ));\n', '    }\n', '\n', '}']
