['pragma solidity ^0.4.24;\n', '/**\n', ' * Copyright YHT Community.\n', ' * This software is copyrighted by the YHT community.\n', ' * Prohibits any unauthorized copying and modification.\n', ' * It is allowed through ABI calls.\n', ' */\n', ' \n', '//==============================================================================\n', '// Begin: This part comes from openzeppelin-solidity\n', '//        https://github.com/OpenZeppelin/openzeppelin-solidity\n', '//============================================================================== \n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard Burnable Token\n', ' * @dev Adds burnFrom method to ERC20 implementations\n', ' */\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _burn(_from, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '//==============================================================================\n', '// End: This part comes from openzeppelin-solidity\n', '//============================================================================== \n', '\n', '\n', '/**\n', ' * @dev Lottery Interface  \n', ' */ \n', 'contract LotteryInterface {\n', '  function checkLastMintData(address addr) external;   \n', '  function getLastMintAmount(address addr) view external returns(uint256, uint256);\n', '  function getReferrerEarnings(address addr) view external returns(uint256);\n', '  function checkReferrerEarnings(address addr) external;\n', '  function deposit() public payable;\n', '}\n', '\n', '/**\n', ' * @title YHT Token\n', ' * @dev The initial total is zero, which can only be produced by mining, halved production per 314 cycles.\n', ' * After call startMinting function, no one can pause it.\n', ' * All the people who hold it will enjoy the dividends.\n', ' * See the YHT whitepaper to get more information.\n', ' * https://github.com/ethergame/whitepaper\n', ' */\n', 'contract YHToken is StandardBurnableToken, Ownable {\n', '  string public constant name = "YHToken";\n', '  string public constant symbol = "YHT";\n', '  uint8 public constant decimals = 18;\n', '  \n', '  uint256 constant private kAutoCombineBonusesCount = 50;           // if the last two balance snapshot records are not far apart, they will be merged automatically.\n', '  \n', '  struct Bonus {                                                                    \n', '    uint256 payment;                                                // payment of dividends\n', '    uint256 currentTotalSupply;                                     // total supply at the payment time point  \n', '  }\n', '  \n', '  struct BalanceSnapshot {\n', '    uint256 balance;                                                // balance of snapshot     \n', '    uint256 bonusIdBegin;                                           // begin of bonusId\n', '    uint256 bonusIdEnd;                                             // end of bonusId\n', '  }\n', '  \n', '  struct User {\n', '    uint256 extraEarnings;                                              \n', '    uint256 bonusEarnings;\n', '    BalanceSnapshot[] snapshots;                                    // the balance snapshot array\n', '    uint256 snapshotsLength;                                        // the length of balance snapshot array    \n', '  }\n', '  \n', '  LotteryInterface public Lottery;\n', '  uint256 public bonusRoundId_;                                     // next bonus id\n', '  mapping(address => User) public users_;                           // user informations\n', '  mapping(uint256 => Bonus) public bonuses_;                        // the records of all bonuses\n', '    \n', '  event Started(address lottery);\n', '  event AddTotalSupply(uint256 addValue, uint256 total);\n', '  event AddExtraEarnings(address indexed from, address indexed to, uint256 amount);\n', '  event AddBonusEarnings(address indexed from, uint256 amount, uint256 bonusId, uint256 currentTotalSupply);\n', '  event Withdraw(address indexed addr, uint256 amount);\n', '\n', '  constructor() public {\n', '    totalSupply_ = 0;      //initial is 0\n', '    bonusRoundId_ = 1;\n', '  }\n', '\n', '  /**\n', '   * @dev only the lottery contract can transfer earnings\n', '   */\n', '  modifier isLottery() {\n', '    require(msg.sender == address(Lottery)); \n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to start. just start once.\n', '   */\n', '  function start(address lottery) onlyOwner public {\n', '    require(Lottery == address(0));\n', '    Lottery = LotteryInterface(lottery);\n', '    emit Started(lottery);\n', '  }\n', '  \n', '  /**\n', '   * @dev record a snapshot of balance\n', '   * with the bonuses information can accurately calculate the earnings \n', '   */ \n', '  function balanceSnapshot(address addr, uint256 bonusRoundId) private {\n', '    uint256 currentBalance = balances[addr];     \n', '    User storage user = users_[addr];   \n', '    if (user.snapshotsLength == 0) {\n', '      user.snapshotsLength = 1;\n', '      user.snapshots.push(BalanceSnapshot(currentBalance, bonusRoundId, 0));\n', '    }\n', '    else {\n', '      BalanceSnapshot storage lastSnapshot = user.snapshots[user.snapshotsLength - 1];\n', '      assert(lastSnapshot.bonusIdEnd == 0);\n', '      \n', '      // same as last record point just updated balance\n', '      if (lastSnapshot.bonusIdBegin == bonusRoundId) {\n', '        lastSnapshot.balance = currentBalance;      \n', '      }\n', '      else {\n', '        assert(lastSnapshot.bonusIdBegin < bonusRoundId);\n', '        \n', '        // if this snapshot is not the same as the last time, automatically merges part of the earnings\n', '        if (bonusRoundId - lastSnapshot.bonusIdBegin < kAutoCombineBonusesCount) {\n', '           uint256 amount = computeRoundBonuses(lastSnapshot.bonusIdBegin, bonusRoundId, lastSnapshot.balance);\n', '           user.bonusEarnings = user.bonusEarnings.add(amount);\n', '           \n', '           lastSnapshot.balance = currentBalance;\n', '           lastSnapshot.bonusIdBegin = bonusRoundId;\n', '           lastSnapshot.bonusIdEnd = 0;\n', '        }\n', '        else {\n', '          lastSnapshot.bonusIdEnd = bonusRoundId;     \n', '          \n', '          /* \n', '          reuse this array to store data, based on code from\n', '          https://ethereum.stackexchange.com/questions/3373/how-to-clear-large-arrays-without-blowing-the-gas-limit?answertab=votes#tab-top\n', '          */\n', '          if (user.snapshotsLength == user.snapshots.length) {\n', '            user.snapshots.length += 1;  \n', '          } \n', '          user.snapshots[user.snapshotsLength++] = BalanceSnapshot(currentBalance, bonusRoundId, 0);\n', '        }\n', '      }\n', '    }\n', '  }\n', '  \n', '  /**\n', '   * @dev mint to add balance then do snapshot\n', '   */ \n', '  function mint(address to, uint256 amount, uint256 bonusRoundId) private {\n', '    balances[to] = balances[to].add(amount);\n', '    emit Transfer(address(0), to, amount); \n', '    balanceSnapshot(to, bonusRoundId);  \n', '  }\n', '  \n', '  /**\n', '   * @dev add total supply and mint extra to founder team\n', '   */  \n', '  function mintToFounder(address to, uint256 amount, uint256 normalAmount) isLottery external {\n', '    checkLastMint(to);\n', '    uint256 value = normalAmount.add(amount);\n', '    totalSupply_ = totalSupply_.add(value);\n', '    emit AddTotalSupply(value, totalSupply_);\n', '    mint(to, amount, bonusRoundId_);\n', '  }\n', '  \n', '  /**\n', '   * @dev mint tokens for player\n', '   */ \n', '  function mintToNormal(address to, uint256 amount, uint256 bonusRoundId) isLottery external {\n', '    require(bonusRoundId < bonusRoundId_);\n', '    mint(to, amount, bonusRoundId);\n', '  }\n', '  \n', '  /**\n', '   * @dev check player last mint status, mint for player if necessary\n', '   */ \n', '  function checkLastMint(address addr) private {\n', '    Lottery.checkLastMintData(addr);  \n', '  }\n', '\n', '  function balanceSnapshot(address addr) private {\n', '    balanceSnapshot(addr, bonusRoundId_);  \n', '  }\n', '\n', '  /**\n', '   * @dev get balance snapshot\n', '   */ \n', '  function getBalanceSnapshot(address addr, uint256 index) view public returns(uint256, uint256, uint256) {\n', '    BalanceSnapshot storage snapshot = users_[addr].snapshots[index];\n', '    return (\n', '      snapshot.bonusIdBegin,\n', '      snapshot.bonusIdEnd,\n', '      snapshot.balance\n', '    );\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    checkLastMint(msg.sender);\n', '    checkLastMint(_to);\n', '    super.transfer(_to, _value);\n', '    balanceSnapshot(msg.sender);\n', '    balanceSnapshot(_to);\n', '    return true;\n', '  } \n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    checkLastMint(_from);\n', '    checkLastMint(_to);\n', '    super.transferFrom(_from, _to, _value);\n', '    balanceSnapshot(_from);\n', '    balanceSnapshot(_to);\n', '    return true;\n', '  }\n', '  \n', '  function _burn(address _who, uint256 _value) internal {\n', '    checkLastMint(_who);  \n', '    super._burn(_who, _value);  \n', '    balanceSnapshot(_who);\n', '  } \n', '  \n', '  /**\n', '   * @dev clear warnings for unused variables  \n', '   */ \n', '  function unused(uint256) pure private {} \n', '  \n', ' /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    (uint256 lastMintAmount, uint256 lastBonusRoundId) = Lottery.getLastMintAmount(_owner);  \n', '    unused(lastBonusRoundId);\n', '    return balances[_owner].add(lastMintAmount);  \n', '  }\n', '\n', '  /**\n', '   * @dev Others contract transfer earnings to someone\n', '   * The lottery contract transfer the big reward to winner\n', '   * It is open interface, more game contracts may be used in the future\n', '   */\n', '  function transferExtraEarnings(address to) external payable {\n', '    if (msg.sender != address(Lottery)) {\n', '      require(msg.value > 662607004);\n', '      require(msg.value < 66740800000000000000000);\n', '    }  \n', '    users_[to].extraEarnings = users_[to].extraEarnings.add(msg.value);   \n', '    emit AddExtraEarnings(msg.sender, to, msg.value);\n', '  }\n', '  \n', '  /**\n', '   * @dev Others contract transfer bonus earnings to all the people who hold YHT  \n', '   * It is open interface, more game contracts may be used in the future\n', '   */\n', '  function transferBonusEarnings() external payable returns(uint256) {\n', '    require(msg.value > 0);\n', '    require(totalSupply_ > 0);\n', '    if (msg.sender != address(Lottery)) {\n', '      require(msg.value > 314159265358979323);\n', '      require(msg.value < 29979245800000000000000);   \n', '    }\n', '    \n', '    uint256 bonusRoundId = bonusRoundId_;\n', '    bonuses_[bonusRoundId].payment = msg.value;\n', '    bonuses_[bonusRoundId].currentTotalSupply = totalSupply_;\n', '    emit AddBonusEarnings(msg.sender, msg.value, bonusRoundId_, totalSupply_);\n', '    \n', '    ++bonusRoundId_;\n', '    return bonusRoundId;\n', '  }\n', '\n', '  /**\n', '   * @dev get earings of user, can directly withdraw \n', '   */ \n', '  function getEarnings(address addr) view public returns(uint256) {\n', '    User storage user = users_[addr];  \n', '    uint256 amount;\n', '    (uint256 lastMintAmount, uint256 lastBonusRoundId) = Lottery.getLastMintAmount(addr);\n', '    if (lastMintAmount > 0) {\n', '      amount = computeSnapshotBonuses(user, lastBonusRoundId);\n', '      amount = amount.add(computeRoundBonuses(lastBonusRoundId, bonusRoundId_, balances[addr].add(lastMintAmount)));\n', '    } else {\n', '      amount = computeSnapshotBonuses(user, bonusRoundId_);     \n', '    }\n', '    uint256 referrerEarnings = Lottery.getReferrerEarnings(addr);\n', '    return user.extraEarnings + user.bonusEarnings + amount + referrerEarnings;\n', '  }\n', '  \n', '  /**\n', '   * @dev get bonuses \n', '   * @param begin begin bonusId\n', '   * @param end end bonusId\n', '   * @param balance the balance in the round \n', '   * Not use SafeMath, it is core loop, not use SafeMath will be saved 20% gas\n', '   */ \n', '  function computeRoundBonuses(uint256 begin, uint256 end, uint256 balance) view private returns(uint256) {\n', '    require(begin != 0);\n', '    require(end != 0);  \n', '    \n', '    uint256 amount = 0;\n', '    while (begin < end) {\n', '      uint256 value = balance * bonuses_[begin].payment / bonuses_[begin].currentTotalSupply;      \n', '      amount += value;\n', '      ++begin;    \n', '    }\n', '    return amount;\n', '  }\n', '  \n', '  /**\n', '   * @dev compute snapshot bonuses\n', '   */ \n', '  function computeSnapshotBonuses(User storage user, uint256 lastBonusRoundId) view private returns(uint256) {\n', '    uint256 amount = 0;\n', '    uint256 length = user.snapshotsLength;\n', '    for (uint256 i = 0; i < length; ++i) {\n', '      uint256 value = computeRoundBonuses(\n', '        user.snapshots[i].bonusIdBegin,\n', '        i < length - 1 ? user.snapshots[i].bonusIdEnd : lastBonusRoundId,\n', '        user.snapshots[i].balance);\n', '      amount = amount.add(value);\n', '    }\n', '    return amount;\n', '  }\n', '    \n', '  /**\n', '   * @dev add earnings from bonuses\n', '   */ \n', '  function combineBonuses(address addr) private {\n', '    checkLastMint(addr);\n', '    User storage user = users_[addr];\n', '    if (user.snapshotsLength > 0) {\n', '      uint256 amount = computeSnapshotBonuses(user, bonusRoundId_);\n', '      if (amount > 0) {\n', '        user.bonusEarnings = user.bonusEarnings.add(amount);\n', '        user.snapshotsLength = 1;\n', '        user.snapshots[0].balance = balances[addr];\n', '        user.snapshots[0].bonusIdBegin = bonusRoundId_;\n', '        user.snapshots[0].bonusIdEnd = 0;     \n', '      }\n', '    }\n', '    Lottery.checkReferrerEarnings(addr);\n', '  }\n', '  \n', '  /**\n', '   * @dev withdraws all of your earnings\n', '   */\n', '  function withdraw() public {\n', '    combineBonuses(msg.sender);\n', '    uint256 amount = users_[msg.sender].extraEarnings.add(users_[msg.sender].bonusEarnings);\n', '    if (amount > 0) {\n', '      users_[msg.sender].extraEarnings = 0;\n', '      users_[msg.sender].bonusEarnings = 0;\n', '      msg.sender.transfer(amount);\n', '    }\n', '    emit Withdraw(msg.sender, amount);\n', '  }\n', '  \n', '  /**\n', '   * @dev withdraw immediateness to bet\n', '   */ \n', '  function withdrawForBet(address addr, uint256 value) isLottery external {\n', '    combineBonuses(addr);\n', '    uint256 extraEarnings = users_[addr].extraEarnings; \n', '    if (extraEarnings >= value) {\n', '      users_[addr].extraEarnings -= value;    \n', '    } else {\n', '      users_[addr].extraEarnings = 0;\n', '      uint256 remain = value - extraEarnings;\n', '      require(users_[addr].bonusEarnings >= remain);\n', '      users_[addr].bonusEarnings -= remain;\n', '    }\n', '    Lottery.deposit.value(value)();\n', '  }\n', '  \n', '  /**\n', '   * @dev get user informations at once\n', '   */\n', '  function getUserInfos(address addr) view public returns(uint256, uint256, uint256) {\n', '    return (\n', '      totalSupply_,\n', '      balanceOf(addr),\n', '      getEarnings(addr)\n', '    );  \n', '  }\n', '}']