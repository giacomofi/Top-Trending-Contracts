['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '   * @dev Multiplies two numbers, throws on overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Integer division of two numbers, truncating the quotient.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds two numbers, throws on overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. \n', ' *\n', ' * Presales:\n', ' * Certain addresses are allowed to buy at a presale rate during the presale period. The\n', ' * contribution of the investor needs to be of at least 5 ETH. A maximum of 15 million tokens\n', ' * in total can be bought at the presale rate. Once the presale has been instructed to end, it\n', ' * is not possible to enable it again.\n', ' *\n', ' * Sales:\n', ' * Any address can purchase at the regular sale price. Sales can be pauses, resumed, and stopped.\n', ' *\n', ' * Minting:\n', ' * The transferTokens function will mint the tokens in the Token contract. After the minting \n', ' * is done, the Crowdsale is reset.\n', ' * \n', ' * Refunds:\n', ' * A investor can be refunded by the owner. Calling the refund function resets the tokens bought\n', ' * to zero for that investor. The Ether refund needs to be processed manually. It is important\n', ' * to record how many tokens the investor had bought before calling refund().\n', ' *\n', '*/\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  StandardToken public token;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // How many token units a buyer gets per wei if entitled to the presale\n', '  uint public presaleRate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  // Administrator of the sale\n', '  address public owner;\n', '\n', '  // How many tokens each address bought at the normal rate\n', '  mapping (address => uint) public regularTokensSold;\n', '\n', '  // How many tokens each address bought at the presale rate\n', '  mapping (address => uint) public presaleTokensSold;\n', '\n', '  // List of all the investors\n', '  address[] public investors;\n', '\n', '  // Whether the sale is active\n', '  bool public inSale = true;\n', '\n', '  // Whether the presale is active\n', '  bool public inPresale = true;\n', '\n', '  // How many tokens each address can buy at the presale rate\n', '  mapping (address => uint) public presaleAllocations;\n', '\n', '  // The total number of tokens bought\n', '  uint256 public totalPresaleTokensSold = 0;\n', '\n', '  // The total number of tokens bought\n', '  uint256 public totalRegularTokensSold = 0;\n', '\n', '  // The maximum number of tokens which can be sold during presale\n', '  uint256 constant public PRESALETOKENMAXSALES = 15000000000000000000000000;\n', '\n', '  // The maximum number of tokens which can be sold during regular sale\n', '  uint256 public regularTokenMaxSales = 16000000000000000000000000;\n', '\n', '  // The minimum investment (5 ETH) during presale\n', '  uint256 constant public MINIMUMINVESTMENTPRESALE = 5000000000000000000;\n', '\n', '  // The minimum investment (5 ETH) during sale\n', '  uint256 constant public MINIMUMINVESTMENTSALE = 1000000000000000000;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier onlyDuringPresale() {\n', '    require(inPresale);\n', '    _;\n', '  }\n', '\n', '  modifier onlyWhenSalesEnabled() {\n', '    require(inSale);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   * @param rate the rate at which the tokens were purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 rate);\n', '\n', '  /**\n', '   * Constructor for the crowdsale\n', '   * @param _owner owner of the contract, which can call privileged functions, and where every ether\n', '   *        is sent to\n', '   * @param _rate the rate for regular sales\n', '   * @param _rate the rate for presales\n', '   * @param _ownerInitialTokens the number of tokens the owner is allocated initially\n', '   */\n', '  function Crowdsale(\n', '    address _owner, \n', '    uint256 _rate, \n', '    uint256 _presaleRate, \n', '    uint256 _ownerInitialTokens\n', '  ) public payable {\n', '    require(_rate > 0);\n', '    require(_presaleRate > 0);\n', '    require(_owner != address(0));\n', '\n', '    rate = _rate;\n', '    presaleRate = _presaleRate;\n', '    owner = _owner;\n', '\n', '    investors.push(owner);\n', '    regularTokensSold[owner] = _ownerInitialTokens;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  function () external payable {\n', '    buyTokens();\n', '  }\n', '\n', '  /**\n', '   * Sets the address of the Token contract.\n', '   */\n', '  function setToken(StandardToken _token) public onlyOwner {\n', '    token = _token;\n', '  }\n', '\n', '  /**\n', '   * Buy a token at presale price. Converts ETH to as much QNT the sender can purchase. Any change\n', '   * is refunded to the sender. Minimum contribution is 5 ETH.\n', '   */\n', '  function buyPresaleTokens() onlyDuringPresale onlyWhenSalesEnabled public payable {\n', '    address _beneficiary = msg.sender;\n', '    uint256 weiAmount = msg.value;\n', '\n', '    _preValidatePurchase(_beneficiary);\n', '    require(weiAmount >= MINIMUMINVESTMENTPRESALE);\n', '\n', '    uint256 presaleAllocation = presaleAllocations[_beneficiary];\n', '\n', '    uint256 presaleTokens = _min256(weiAmount.mul(presaleRate), presaleAllocation);\n', '\n', '    _recordPresalePurchase(_beneficiary, presaleTokens);\n', '\n', '    // Remove presale tokens allocation\n', '    presaleAllocations[_beneficiary] = presaleAllocations[_beneficiary].sub(presaleTokens);\n', '\n', '    uint256 weiCharged = presaleTokens.div(presaleRate);\n', '\n', '    // Return any extra Wei to the sender\n', '    uint256 change = weiAmount.sub(weiCharged);\n', '    _beneficiary.transfer(change);\n', '\n', '    // Update total number of Wei raised\n', '    weiRaised = weiRaised.add(weiAmount.sub(change));\n', '\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiCharged, presaleTokens, presaleRate);\n', '\n', '    // Forward the funds to owner\n', '    _forwardFunds(weiCharged);\n', '  }\n', '\n', '  /**\n', '   * Buy a token at sale price. Minimum contribution is 1 ETH.\n', '   */\n', '  function buyTokens() onlyWhenSalesEnabled public payable {\n', '    address _beneficiary = msg.sender;\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary);\n', '\n', '    require(weiAmount >= MINIMUMINVESTMENTSALE);\n', '\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // Check we haven&#39;t sold too many tokens\n', '    totalRegularTokensSold = totalRegularTokensSold.add(tokens);\n', '    require(totalRegularTokensSold <= regularTokenMaxSales);\n', '\n', '    // Update total number of Wei raised\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    investors.push(_beneficiary);\n', '\n', '    // Give tokens\n', '    regularTokensSold[_beneficiary] = regularTokensSold[_beneficiary].add(tokens);\n', '\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens, rate);\n', '\n', '    // Forward the funds to owner\n', '    _forwardFunds(weiAmount);\n', '  }\n', '\n', '  /**\n', '   * Records a purchase which has been completed before the instantiation of this contract.\n', '   * @param _beneficiary the investor\n', '   * @param _presaleTokens the number of tokens which the investor has bought\n', '   */\n', '  function recordPresalePurchase(address _beneficiary, uint256 _presaleTokens) public onlyOwner {\n', '    weiRaised = weiRaised.add(_presaleTokens.div(presaleRate));\n', '    return _recordPresalePurchase(_beneficiary, _presaleTokens);\n', '  }\n', '\n', '  function enableSale() onlyOwner public {\n', '    inSale = true;\n', '  }\n', '\n', '  function disableSale() onlyOwner public {\n', '    inSale = false;\n', '  }\n', '\n', '  function endPresale() onlyOwner public {\n', '    inPresale = false;\n', '\n', '    // Convert the unsold presale tokens to regular tokens\n', '    uint256 remainingPresaleTokens = PRESALETOKENMAXSALES.sub(totalPresaleTokensSold);\n', '    regularTokenMaxSales = regularTokenMaxSales.add(remainingPresaleTokens);\n', '  }\n', '\n', '  /**\n', '   * Mints the tokens in the Token contract.\n', '   */\n', '  function transferTokens() public onlyOwner {\n', '    for (uint256 i = 0; i < investors.length; i = i.add(1)) {\n', '      address investor = investors[i];\n', '\n', '      uint256 tokens = regularTokensSold[investor];\n', '      uint256 presaleTokens = presaleTokensSold[investor];\n', '      \n', '      regularTokensSold[investor] = 0;\n', '      presaleTokensSold[investor] = 0;\n', '\n', '      if (tokens > 0) {\n', '        _deliverTokens(token, investor, tokens);\n', '      }\n', '\n', '      if (presaleTokens > 0) {\n', '        _deliverTokens(token, investor, presaleTokens);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Mints the tokens in the Token contract. With Offset and Limit\n', '   */\n', '  function transferTokensWithOffsetAndLimit(uint256 offset, uint256 limit) public onlyOwner {\n', '    for (uint256 i = offset; i <  _min256(investors.length,offset+limit); i = i.add(1)) {\n', '      address investor = investors[i];\n', '\n', '      uint256 tokens = regularTokensSold[investor];\n', '      uint256 presaleTokens = presaleTokensSold[investor];\n', '\n', '      regularTokensSold[investor] = 0;\n', '      presaleTokensSold[investor] = 0;\n', '\n', '      if (tokens > 0) {\n', '        _deliverTokens(token, investor, tokens);\n', '      }\n', '\n', '      if (presaleTokens > 0) {\n', '        _deliverTokens(token, investor, presaleTokens);\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '   * Clears the number of tokens bought by an investor. The ETH refund needs to be processed\n', '   * manually.\n', '   */\n', '  function refund(address investor) onlyOwner public {\n', '    require(investor != owner);\n', '\n', '    uint256 regularTokens = regularTokensSold[investor];\n', '    totalRegularTokensSold = totalRegularTokensSold.sub(regularTokens);\n', '    weiRaised = weiRaised.sub(regularTokens.div(rate));\n', '\n', '    uint256 presaleTokens = presaleTokensSold[investor];\n', '    totalPresaleTokensSold = totalPresaleTokensSold.sub(presaleTokens);\n', '    weiRaised = weiRaised.sub(presaleTokens.div(presaleRate));\n', '\n', '    regularTokensSold[investor] = 0;\n', '    presaleTokensSold[investor] = 0;\n', '\n', '    // Manually send ether to the account\n', '  }\n', '\n', '  /**\n', '  * Accessor for Index\n', '  */\n', '  function getInvestorAtIndex(uint256 _index) public view returns(address) {\n', '    return investors[_index];\n', '  }\n', '\n', '  /**\n', '  * Return the length of the investors array\n', '  */\n', '  function getInvestorsLength() public view returns(uint256) {\n', '    return investors.length;\n', '  }\n', '\n', '  /**\n', '   * Get the number of tokens bought at the regular price for an address.\n', '   */\n', '  function getNumRegularTokensBought(address _address) public view returns(uint256) {\n', '    return regularTokensSold[_address];\n', '  }\n', '\n', '  /**\n', '   * Get the number of tokens bought at the presale price for an address.\n', '   */\n', '  function getNumPresaleTokensBought(address _address) public view returns(uint256) {\n', '    return presaleTokensSold[_address];\n', '  }\n', '\n', '  /**\n', '   * Get the number of tokens which an investor can purchase at presale rate.\n', '   */\n', '  function getPresaleAllocation(address investor) view public returns(uint256) {\n', '    return presaleAllocations[investor];\n', '  }\n', '\n', '  /**\n', '   * Set the number of tokens which an investor can purchase at presale rate.\n', '   */\n', '  function setPresaleAllocation(address investor, uint allocation) onlyOwner public {\n', '    presaleAllocations[investor] = allocation;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary) internal pure {\n', '    require(_beneficiary != address(0));\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(StandardToken _token, address _beneficiary, uint256 _tokenAmount) internal {\n', '    _token.mint(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds(uint256 amount) internal {\n', '    owner.transfer(amount);\n', '  }\n', '\n', '  function _min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  /**\n', '   * Records a presale purchase.\n', '   * @param _beneficiary the investor\n', '   * @param _presaleTokens the number of tokens which the investor has bought\n', '   */\n', '  function _recordPresalePurchase(address _beneficiary, uint256 _presaleTokens) internal {\n', '    // Check we haven&#39;t sold too many presale tokens\n', '    totalPresaleTokensSold = totalPresaleTokensSold.add(_presaleTokens);\n', '    require(totalPresaleTokensSold <= PRESALETOKENMAXSALES);\n', '\n', '    investors.push(_beneficiary);\n', '\n', '    // Give presale tokens\n', '    presaleTokensSold[_beneficiary] = presaleTokensSold[_beneficiary].add(_presaleTokens);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_ = 45467000000000000000000000;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  // Name of the token\n', '  string constant public name = "Quant";\n', '  // Token abbreviation\n', '  string constant public symbol = "QNT";\n', '  // Decimal places\n', '  uint8 constant public decimals = 18;\n', '  // Zeros after the point\n', '  uint256 constant public DECIMAL_ZEROS = 1000000000000000000;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  address public crowdsale;\n', '\n', '  modifier onlyCrowdsale() {\n', '    require(msg.sender == crowdsale);\n', '    _;\n', '  }\n', '\n', '  function StandardToken(address _crowdsale) public {\n', '    require(_crowdsale != address(0));\n', '    crowdsale = _crowdsale;\n', '  }\n', '\n', '  function mint(address _address, uint256 _value) public onlyCrowdsale {\n', '    balances[_address] = balances[_address].add(_value);\n', '    emit Transfer(0, _address, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '   * @dev Multiplies two numbers, throws on overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Integer division of two numbers, truncating the quotient.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds two numbers, throws on overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. \n', ' *\n', ' * Presales:\n', ' * Certain addresses are allowed to buy at a presale rate during the presale period. The\n', ' * contribution of the investor needs to be of at least 5 ETH. A maximum of 15 million tokens\n', ' * in total can be bought at the presale rate. Once the presale has been instructed to end, it\n', ' * is not possible to enable it again.\n', ' *\n', ' * Sales:\n', ' * Any address can purchase at the regular sale price. Sales can be pauses, resumed, and stopped.\n', ' *\n', ' * Minting:\n', ' * The transferTokens function will mint the tokens in the Token contract. After the minting \n', ' * is done, the Crowdsale is reset.\n', ' * \n', ' * Refunds:\n', ' * A investor can be refunded by the owner. Calling the refund function resets the tokens bought\n', ' * to zero for that investor. The Ether refund needs to be processed manually. It is important\n', ' * to record how many tokens the investor had bought before calling refund().\n', ' *\n', '*/\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  StandardToken public token;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // How many token units a buyer gets per wei if entitled to the presale\n', '  uint public presaleRate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  // Administrator of the sale\n', '  address public owner;\n', '\n', '  // How many tokens each address bought at the normal rate\n', '  mapping (address => uint) public regularTokensSold;\n', '\n', '  // How many tokens each address bought at the presale rate\n', '  mapping (address => uint) public presaleTokensSold;\n', '\n', '  // List of all the investors\n', '  address[] public investors;\n', '\n', '  // Whether the sale is active\n', '  bool public inSale = true;\n', '\n', '  // Whether the presale is active\n', '  bool public inPresale = true;\n', '\n', '  // How many tokens each address can buy at the presale rate\n', '  mapping (address => uint) public presaleAllocations;\n', '\n', '  // The total number of tokens bought\n', '  uint256 public totalPresaleTokensSold = 0;\n', '\n', '  // The total number of tokens bought\n', '  uint256 public totalRegularTokensSold = 0;\n', '\n', '  // The maximum number of tokens which can be sold during presale\n', '  uint256 constant public PRESALETOKENMAXSALES = 15000000000000000000000000;\n', '\n', '  // The maximum number of tokens which can be sold during regular sale\n', '  uint256 public regularTokenMaxSales = 16000000000000000000000000;\n', '\n', '  // The minimum investment (5 ETH) during presale\n', '  uint256 constant public MINIMUMINVESTMENTPRESALE = 5000000000000000000;\n', '\n', '  // The minimum investment (5 ETH) during sale\n', '  uint256 constant public MINIMUMINVESTMENTSALE = 1000000000000000000;\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier onlyDuringPresale() {\n', '    require(inPresale);\n', '    _;\n', '  }\n', '\n', '  modifier onlyWhenSalesEnabled() {\n', '    require(inSale);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   * @param rate the rate at which the tokens were purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount, uint256 rate);\n', '\n', '  /**\n', '   * Constructor for the crowdsale\n', '   * @param _owner owner of the contract, which can call privileged functions, and where every ether\n', '   *        is sent to\n', '   * @param _rate the rate for regular sales\n', '   * @param _rate the rate for presales\n', '   * @param _ownerInitialTokens the number of tokens the owner is allocated initially\n', '   */\n', '  function Crowdsale(\n', '    address _owner, \n', '    uint256 _rate, \n', '    uint256 _presaleRate, \n', '    uint256 _ownerInitialTokens\n', '  ) public payable {\n', '    require(_rate > 0);\n', '    require(_presaleRate > 0);\n', '    require(_owner != address(0));\n', '\n', '    rate = _rate;\n', '    presaleRate = _presaleRate;\n', '    owner = _owner;\n', '\n', '    investors.push(owner);\n', '    regularTokensSold[owner] = _ownerInitialTokens;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  function () external payable {\n', '    buyTokens();\n', '  }\n', '\n', '  /**\n', '   * Sets the address of the Token contract.\n', '   */\n', '  function setToken(StandardToken _token) public onlyOwner {\n', '    token = _token;\n', '  }\n', '\n', '  /**\n', '   * Buy a token at presale price. Converts ETH to as much QNT the sender can purchase. Any change\n', '   * is refunded to the sender. Minimum contribution is 5 ETH.\n', '   */\n', '  function buyPresaleTokens() onlyDuringPresale onlyWhenSalesEnabled public payable {\n', '    address _beneficiary = msg.sender;\n', '    uint256 weiAmount = msg.value;\n', '\n', '    _preValidatePurchase(_beneficiary);\n', '    require(weiAmount >= MINIMUMINVESTMENTPRESALE);\n', '\n', '    uint256 presaleAllocation = presaleAllocations[_beneficiary];\n', '\n', '    uint256 presaleTokens = _min256(weiAmount.mul(presaleRate), presaleAllocation);\n', '\n', '    _recordPresalePurchase(_beneficiary, presaleTokens);\n', '\n', '    // Remove presale tokens allocation\n', '    presaleAllocations[_beneficiary] = presaleAllocations[_beneficiary].sub(presaleTokens);\n', '\n', '    uint256 weiCharged = presaleTokens.div(presaleRate);\n', '\n', '    // Return any extra Wei to the sender\n', '    uint256 change = weiAmount.sub(weiCharged);\n', '    _beneficiary.transfer(change);\n', '\n', '    // Update total number of Wei raised\n', '    weiRaised = weiRaised.add(weiAmount.sub(change));\n', '\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiCharged, presaleTokens, presaleRate);\n', '\n', '    // Forward the funds to owner\n', '    _forwardFunds(weiCharged);\n', '  }\n', '\n', '  /**\n', '   * Buy a token at sale price. Minimum contribution is 1 ETH.\n', '   */\n', '  function buyTokens() onlyWhenSalesEnabled public payable {\n', '    address _beneficiary = msg.sender;\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary);\n', '\n', '    require(weiAmount >= MINIMUMINVESTMENTSALE);\n', '\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', "    // Check we haven't sold too many tokens\n", '    totalRegularTokensSold = totalRegularTokensSold.add(tokens);\n', '    require(totalRegularTokensSold <= regularTokenMaxSales);\n', '\n', '    // Update total number of Wei raised\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    investors.push(_beneficiary);\n', '\n', '    // Give tokens\n', '    regularTokensSold[_beneficiary] = regularTokensSold[_beneficiary].add(tokens);\n', '\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens, rate);\n', '\n', '    // Forward the funds to owner\n', '    _forwardFunds(weiAmount);\n', '  }\n', '\n', '  /**\n', '   * Records a purchase which has been completed before the instantiation of this contract.\n', '   * @param _beneficiary the investor\n', '   * @param _presaleTokens the number of tokens which the investor has bought\n', '   */\n', '  function recordPresalePurchase(address _beneficiary, uint256 _presaleTokens) public onlyOwner {\n', '    weiRaised = weiRaised.add(_presaleTokens.div(presaleRate));\n', '    return _recordPresalePurchase(_beneficiary, _presaleTokens);\n', '  }\n', '\n', '  function enableSale() onlyOwner public {\n', '    inSale = true;\n', '  }\n', '\n', '  function disableSale() onlyOwner public {\n', '    inSale = false;\n', '  }\n', '\n', '  function endPresale() onlyOwner public {\n', '    inPresale = false;\n', '\n', '    // Convert the unsold presale tokens to regular tokens\n', '    uint256 remainingPresaleTokens = PRESALETOKENMAXSALES.sub(totalPresaleTokensSold);\n', '    regularTokenMaxSales = regularTokenMaxSales.add(remainingPresaleTokens);\n', '  }\n', '\n', '  /**\n', '   * Mints the tokens in the Token contract.\n', '   */\n', '  function transferTokens() public onlyOwner {\n', '    for (uint256 i = 0; i < investors.length; i = i.add(1)) {\n', '      address investor = investors[i];\n', '\n', '      uint256 tokens = regularTokensSold[investor];\n', '      uint256 presaleTokens = presaleTokensSold[investor];\n', '      \n', '      regularTokensSold[investor] = 0;\n', '      presaleTokensSold[investor] = 0;\n', '\n', '      if (tokens > 0) {\n', '        _deliverTokens(token, investor, tokens);\n', '      }\n', '\n', '      if (presaleTokens > 0) {\n', '        _deliverTokens(token, investor, presaleTokens);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Mints the tokens in the Token contract. With Offset and Limit\n', '   */\n', '  function transferTokensWithOffsetAndLimit(uint256 offset, uint256 limit) public onlyOwner {\n', '    for (uint256 i = offset; i <  _min256(investors.length,offset+limit); i = i.add(1)) {\n', '      address investor = investors[i];\n', '\n', '      uint256 tokens = regularTokensSold[investor];\n', '      uint256 presaleTokens = presaleTokensSold[investor];\n', '\n', '      regularTokensSold[investor] = 0;\n', '      presaleTokensSold[investor] = 0;\n', '\n', '      if (tokens > 0) {\n', '        _deliverTokens(token, investor, tokens);\n', '      }\n', '\n', '      if (presaleTokens > 0) {\n', '        _deliverTokens(token, investor, presaleTokens);\n', '      }\n', '    }\n', '  }\n', '\n', '\n', '  /**\n', '   * Clears the number of tokens bought by an investor. The ETH refund needs to be processed\n', '   * manually.\n', '   */\n', '  function refund(address investor) onlyOwner public {\n', '    require(investor != owner);\n', '\n', '    uint256 regularTokens = regularTokensSold[investor];\n', '    totalRegularTokensSold = totalRegularTokensSold.sub(regularTokens);\n', '    weiRaised = weiRaised.sub(regularTokens.div(rate));\n', '\n', '    uint256 presaleTokens = presaleTokensSold[investor];\n', '    totalPresaleTokensSold = totalPresaleTokensSold.sub(presaleTokens);\n', '    weiRaised = weiRaised.sub(presaleTokens.div(presaleRate));\n', '\n', '    regularTokensSold[investor] = 0;\n', '    presaleTokensSold[investor] = 0;\n', '\n', '    // Manually send ether to the account\n', '  }\n', '\n', '  /**\n', '  * Accessor for Index\n', '  */\n', '  function getInvestorAtIndex(uint256 _index) public view returns(address) {\n', '    return investors[_index];\n', '  }\n', '\n', '  /**\n', '  * Return the length of the investors array\n', '  */\n', '  function getInvestorsLength() public view returns(uint256) {\n', '    return investors.length;\n', '  }\n', '\n', '  /**\n', '   * Get the number of tokens bought at the regular price for an address.\n', '   */\n', '  function getNumRegularTokensBought(address _address) public view returns(uint256) {\n', '    return regularTokensSold[_address];\n', '  }\n', '\n', '  /**\n', '   * Get the number of tokens bought at the presale price for an address.\n', '   */\n', '  function getNumPresaleTokensBought(address _address) public view returns(uint256) {\n', '    return presaleTokensSold[_address];\n', '  }\n', '\n', '  /**\n', '   * Get the number of tokens which an investor can purchase at presale rate.\n', '   */\n', '  function getPresaleAllocation(address investor) view public returns(uint256) {\n', '    return presaleAllocations[investor];\n', '  }\n', '\n', '  /**\n', '   * Set the number of tokens which an investor can purchase at presale rate.\n', '   */\n', '  function setPresaleAllocation(address investor, uint allocation) onlyOwner public {\n', '    presaleAllocations[investor] = allocation;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary) internal pure {\n', '    require(_beneficiary != address(0));\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(StandardToken _token, address _beneficiary, uint256 _tokenAmount) internal {\n', '    _token.mint(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds(uint256 amount) internal {\n', '    owner.transfer(amount);\n', '  }\n', '\n', '  function _min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  /**\n', '   * Records a presale purchase.\n', '   * @param _beneficiary the investor\n', '   * @param _presaleTokens the number of tokens which the investor has bought\n', '   */\n', '  function _recordPresalePurchase(address _beneficiary, uint256 _presaleTokens) internal {\n', "    // Check we haven't sold too many presale tokens\n", '    totalPresaleTokensSold = totalPresaleTokensSold.add(_presaleTokens);\n', '    require(totalPresaleTokensSold <= PRESALETOKENMAXSALES);\n', '\n', '    investors.push(_beneficiary);\n', '\n', '    // Give presale tokens\n', '    presaleTokensSold[_beneficiary] = presaleTokensSold[_beneficiary].add(_presaleTokens);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_ = 45467000000000000000000000;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  // Name of the token\n', '  string constant public name = "Quant";\n', '  // Token abbreviation\n', '  string constant public symbol = "QNT";\n', '  // Decimal places\n', '  uint8 constant public decimals = 18;\n', '  // Zeros after the point\n', '  uint256 constant public DECIMAL_ZEROS = 1000000000000000000;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  address public crowdsale;\n', '\n', '  modifier onlyCrowdsale() {\n', '    require(msg.sender == crowdsale);\n', '    _;\n', '  }\n', '\n', '  function StandardToken(address _crowdsale) public {\n', '    require(_crowdsale != address(0));\n', '    crowdsale = _crowdsale;\n', '  }\n', '\n', '  function mint(address _address, uint256 _value) public onlyCrowdsale {\n', '    balances[_address] = balances[_address].add(_value);\n', '    emit Transfer(0, _address, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}']
