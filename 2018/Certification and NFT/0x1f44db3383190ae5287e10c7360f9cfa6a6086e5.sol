['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract WETH9 {\n', '    string public name     = "Wrapped Ether";\n', '    string public symbol   = "WETH";\n', '    uint8  public decimals = 18;\n', '\n', '    event  Approval(address indexed src, address indexed guy, uint wad);\n', '    event  Transfer(address indexed src, address indexed dst, uint wad);\n', '    event  Deposit(address indexed dst, uint wad);\n', '    event  Withdrawal(address indexed src, uint wad);\n', '\n', '    mapping (address => uint)                       public  balanceOf;\n', '    mapping (address => mapping (address => uint))  public  allowance;\n', '\n', '    function() public payable {\n', '        deposit();\n', '    }\n', '    function deposit() public payable {\n', '        balanceOf[msg.sender] += msg.value;\n', '        Deposit(msg.sender, msg.value);\n', '    }\n', '    function withdraw(uint wad) public {\n', '        require(balanceOf[msg.sender] >= wad);\n', '        balanceOf[msg.sender] -= wad;\n', '        msg.sender.transfer(wad);\n', '        Withdrawal(msg.sender, wad);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return this.balance;\n', '    }\n', '\n', '    function approve(address guy, uint wad) public returns (bool) {\n', '        allowance[msg.sender][guy] = wad;\n', '        Approval(msg.sender, guy, wad);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        return transferFrom(msg.sender, dst, wad);\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(balanceOf[src] >= wad);\n', '\n', '        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n', '            require(allowance[src][msg.sender] >= wad);\n', '            allowance[src][msg.sender] -= wad;\n', '        }\n', '\n', '        balanceOf[src] -= wad;\n', '        balanceOf[dst] += wad;\n', '\n', '        Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'interface Registry {\n', '    function isAffiliated(address _affiliate) external returns (bool);\n', '}\n', '\n', 'contract Affiliate {\n', '  struct Share {\n', '      address shareholder;\n', '      uint stake;\n', '  }\n', '\n', '  Share[] shares;\n', '  uint public totalShares;\n', '  string public relayerName;\n', '  address registry;\n', '  WETH9 weth;\n', '\n', '  event Payout(address indexed token, uint amount);\n', '\n', '  function init(address _registry, address[] shareholders, uint[] stakes, address _weth, string _name) public returns (bool) {\n', '    require(totalShares == 0);\n', '    require(shareholders.length == stakes.length);\n', '    weth = WETH9(_weth);\n', '    totalShares = 0;\n', '    for(uint i=0; i < shareholders.length; i++) {\n', '        shares.push(Share({shareholder: shareholders[i], stake: stakes[i]}));\n', '        totalShares += stakes[i];\n', '    }\n', '    relayerName = _name;\n', '    registry = _registry;\n', '    return true;\n', '  }\n', '  function payout(address[] tokens) public {\n', '      // Payout all stakes at once, so we don&#39;t have to do bookkeeping on who has\n', '      // claimed their shares and who hasn&#39;t. If the number of shareholders is large\n', '      // this could run into some gas limits. In most cases, I expect two\n', '      // shareholders, but it could be a small handful. This also means the caller\n', '      // must pay gas for everyone&#39;s payouts.\n', '      for(uint i=0; i < tokens.length; i++) {\n', '          ERC20 token = ERC20(tokens[i]);\n', '          uint balance = token.balanceOf(this);\n', '          for(uint j=0; j < shares.length; j++) {\n', '              token.transfer(shares[j].shareholder, SafeMath.mul(balance, shares[j].stake) / totalShares);\n', '          }\n', '          emit Payout(tokens[i], balance);\n', '      }\n', '  }\n', '  function isAffiliated(address _affiliate) public returns (bool)\n', '  {\n', '      return Registry(registry).isAffiliated(_affiliate);\n', '  }\n', '\n', '  function() public payable {\n', '    // If we get paid in ETH, convert to WETH so payouts work the same.\n', '    // Converting to WETH also makes payouts a bit safer, as we don&#39;t have to\n', '    // worry about code execution if the stakeholder is a contract.\n', '    weth.deposit.value(msg.value)();\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract WETH9 {\n', '    string public name     = "Wrapped Ether";\n', '    string public symbol   = "WETH";\n', '    uint8  public decimals = 18;\n', '\n', '    event  Approval(address indexed src, address indexed guy, uint wad);\n', '    event  Transfer(address indexed src, address indexed dst, uint wad);\n', '    event  Deposit(address indexed dst, uint wad);\n', '    event  Withdrawal(address indexed src, uint wad);\n', '\n', '    mapping (address => uint)                       public  balanceOf;\n', '    mapping (address => mapping (address => uint))  public  allowance;\n', '\n', '    function() public payable {\n', '        deposit();\n', '    }\n', '    function deposit() public payable {\n', '        balanceOf[msg.sender] += msg.value;\n', '        Deposit(msg.sender, msg.value);\n', '    }\n', '    function withdraw(uint wad) public {\n', '        require(balanceOf[msg.sender] >= wad);\n', '        balanceOf[msg.sender] -= wad;\n', '        msg.sender.transfer(wad);\n', '        Withdrawal(msg.sender, wad);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return this.balance;\n', '    }\n', '\n', '    function approve(address guy, uint wad) public returns (bool) {\n', '        allowance[msg.sender][guy] = wad;\n', '        Approval(msg.sender, guy, wad);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        return transferFrom(msg.sender, dst, wad);\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(balanceOf[src] >= wad);\n', '\n', '        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n', '            require(allowance[src][msg.sender] >= wad);\n', '            allowance[src][msg.sender] -= wad;\n', '        }\n', '\n', '        balanceOf[src] -= wad;\n', '        balanceOf[dst] += wad;\n', '\n', '        Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'interface Registry {\n', '    function isAffiliated(address _affiliate) external returns (bool);\n', '}\n', '\n', 'contract Affiliate {\n', '  struct Share {\n', '      address shareholder;\n', '      uint stake;\n', '  }\n', '\n', '  Share[] shares;\n', '  uint public totalShares;\n', '  string public relayerName;\n', '  address registry;\n', '  WETH9 weth;\n', '\n', '  event Payout(address indexed token, uint amount);\n', '\n', '  function init(address _registry, address[] shareholders, uint[] stakes, address _weth, string _name) public returns (bool) {\n', '    require(totalShares == 0);\n', '    require(shareholders.length == stakes.length);\n', '    weth = WETH9(_weth);\n', '    totalShares = 0;\n', '    for(uint i=0; i < shareholders.length; i++) {\n', '        shares.push(Share({shareholder: shareholders[i], stake: stakes[i]}));\n', '        totalShares += stakes[i];\n', '    }\n', '    relayerName = _name;\n', '    registry = _registry;\n', '    return true;\n', '  }\n', '  function payout(address[] tokens) public {\n', "      // Payout all stakes at once, so we don't have to do bookkeeping on who has\n", "      // claimed their shares and who hasn't. If the number of shareholders is large\n", '      // this could run into some gas limits. In most cases, I expect two\n', '      // shareholders, but it could be a small handful. This also means the caller\n', "      // must pay gas for everyone's payouts.\n", '      for(uint i=0; i < tokens.length; i++) {\n', '          ERC20 token = ERC20(tokens[i]);\n', '          uint balance = token.balanceOf(this);\n', '          for(uint j=0; j < shares.length; j++) {\n', '              token.transfer(shares[j].shareholder, SafeMath.mul(balance, shares[j].stake) / totalShares);\n', '          }\n', '          emit Payout(tokens[i], balance);\n', '      }\n', '  }\n', '  function isAffiliated(address _affiliate) public returns (bool)\n', '  {\n', '      return Registry(registry).isAffiliated(_affiliate);\n', '  }\n', '\n', '  function() public payable {\n', '    // If we get paid in ETH, convert to WETH so payouts work the same.\n', "    // Converting to WETH also makes payouts a bit safer, as we don't have to\n", '    // worry about code execution if the stakeholder is a contract.\n', '    weth.deposit.value(msg.value)();\n', '  }\n', '\n', '}']
