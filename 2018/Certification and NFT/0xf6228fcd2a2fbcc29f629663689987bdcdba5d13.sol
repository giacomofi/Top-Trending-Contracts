['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract HelpMeTokenInterface{\n', '    function thankYou( address _a ) public returns(bool);\n', '    function stopIt() public returns(bool);\n', '}\n', '\n', '\n', 'contract HelpMeTokenPart1 is Ownable {\n', '    \n', '    string public name = ") IM DESPERATE I NEED YOUR HELP";\n', '    string public symbol = ") IM DESPERATE I NEED YOUR HELP";\n', '    uint256 public num = 1;\n', '    uint256 public totalSupply = 2100005 ether;\n', '    uint32 public constant decimals = 18;\n', '    address[] public HelpMeTokens;\n', '    mapping(address => bool) thank_you;\n', '    bool public stop_it = false;\n', '    \n', '    modifier onlyParts() {\n', '        require(\n', '               msg.sender == HelpMeTokens[0]\n', '            || msg.sender == HelpMeTokens[1]\n', '            || msg.sender == HelpMeTokens[2]\n', '            || msg.sender == HelpMeTokens[3]\n', '            || msg.sender == HelpMeTokens[4]\n', '            || msg.sender == HelpMeTokens[5]\n', '            || msg.sender == HelpMeTokens[6]\n', '            );\n', '        _;\n', '    }\n', '    \n', '    event Transfer(address from, address to, uint tokens);\n', '    \n', '    function setHelpMeTokenParts(address[] _a) public onlyOwner returns(bool)\n', '    {\n', '        HelpMeTokens = _a;\n', '    }\n', '\n', '    function() public payable\n', '    {\n', '        require( msg.value > 0 );\n', '        \n', '        owner.transfer(msg.value);\n', '        \n', '        thank_you[msg.sender] = true;\n', '        emit Transfer(msg.sender, address(this), num * 1 ether);\n', '        for(uint256 i=0; i<= HelpMeTokens.length-1; i++){\n', '            HelpMeTokenInterface token = HelpMeTokenInterface( HelpMeTokens[i] );\n', '            token.thankYou( msg.sender );\n', '        }\n', '    }\n', '    \n', '    function thankYou(address _a) public onlyParts returns(bool)\n', '    {\n', '        for(uint256 i=0; i<= HelpMeTokens.length-1; i++){\n', '            HelpMeTokenInterface token = HelpMeTokenInterface( HelpMeTokens[i] );\n', '            token.thankYou( _a );\n', '        }\n', '        thank_you[_a] = true;\n', '        emit Transfer(msg.sender, address(this), 1 ether);\n', '        return true;\n', '    }\n', '    \n', '    function stopIt() public onlyOwner returns(bool)\n', '    {\n', '        stop_it = true;\n', '        for(uint256 i=0; i<= HelpMeTokens.length-1; i++){\n', '            HelpMeTokenInterface( HelpMeTokens[i] ).stopIt();\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        if( stop_it ) return 0;\n', '        else if( thank_you[_owner] == true ) return 0;\n', '        else return num  * 1 ether;\n', '        \n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return 0;\n', '     }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract HelpMeTokenInterface{\n', '    function thankYou( address _a ) public returns(bool);\n', '    function stopIt() public returns(bool);\n', '}\n', '\n', '\n', 'contract HelpMeTokenPart1 is Ownable {\n', '    \n', '    string public name = ") IM DESPERATE I NEED YOUR HELP";\n', '    string public symbol = ") IM DESPERATE I NEED YOUR HELP";\n', '    uint256 public num = 1;\n', '    uint256 public totalSupply = 2100005 ether;\n', '    uint32 public constant decimals = 18;\n', '    address[] public HelpMeTokens;\n', '    mapping(address => bool) thank_you;\n', '    bool public stop_it = false;\n', '    \n', '    modifier onlyParts() {\n', '        require(\n', '               msg.sender == HelpMeTokens[0]\n', '            || msg.sender == HelpMeTokens[1]\n', '            || msg.sender == HelpMeTokens[2]\n', '            || msg.sender == HelpMeTokens[3]\n', '            || msg.sender == HelpMeTokens[4]\n', '            || msg.sender == HelpMeTokens[5]\n', '            || msg.sender == HelpMeTokens[6]\n', '            );\n', '        _;\n', '    }\n', '    \n', '    event Transfer(address from, address to, uint tokens);\n', '    \n', '    function setHelpMeTokenParts(address[] _a) public onlyOwner returns(bool)\n', '    {\n', '        HelpMeTokens = _a;\n', '    }\n', '\n', '    function() public payable\n', '    {\n', '        require( msg.value > 0 );\n', '        \n', '        owner.transfer(msg.value);\n', '        \n', '        thank_you[msg.sender] = true;\n', '        emit Transfer(msg.sender, address(this), num * 1 ether);\n', '        for(uint256 i=0; i<= HelpMeTokens.length-1; i++){\n', '            HelpMeTokenInterface token = HelpMeTokenInterface( HelpMeTokens[i] );\n', '            token.thankYou( msg.sender );\n', '        }\n', '    }\n', '    \n', '    function thankYou(address _a) public onlyParts returns(bool)\n', '    {\n', '        for(uint256 i=0; i<= HelpMeTokens.length-1; i++){\n', '            HelpMeTokenInterface token = HelpMeTokenInterface( HelpMeTokens[i] );\n', '            token.thankYou( _a );\n', '        }\n', '        thank_you[_a] = true;\n', '        emit Transfer(msg.sender, address(this), 1 ether);\n', '        return true;\n', '    }\n', '    \n', '    function stopIt() public onlyOwner returns(bool)\n', '    {\n', '        stop_it = true;\n', '        for(uint256 i=0; i<= HelpMeTokens.length-1; i++){\n', '            HelpMeTokenInterface( HelpMeTokens[i] ).stopIt();\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        if( stop_it ) return 0;\n', '        else if( thank_you[_owner] == true ) return 0;\n', '        else return num  * 1 ether;\n', '        \n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        return true;\n', '    }\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        return true;\n', '    }\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        return true;\n', '    }\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return 0;\n', '     }\n', '\n', '}']
