['pragma solidity ^0.4.16;\n', '/*\n', '\n', '    GOeureka SimpleAudit Smart Contract\n', '    \n', '    This contract stores a client and supplier reference between customers and \n', '    hotels on the blockchain for audit log purposes\n', '    \n', '    bytes32 goeureka_audit_ref \n', '    - a blockchain reference ID generated by goeureka\n', '    \n', '    string reference\n', '    - a hash of two reference code from supplier and goeureka\n', '\n', '*/\n', 'contract SimpleAudit {\n', '    \n', '    struct Audit {\n', '        string reference;        // a hash of two reference code from supplier and goeureka\n', '        bool exist;              // checks if the reference exists\n', '    }\n', '    \n', '    address creator;\n', '    mapping(bytes32 => Audit) public records;\n', '    \n', '    constructor() public {\n', '        creator = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(\n', '            msg.sender == creator, "Only owner can call this function."\n', '        );\n', '        _;\n', '    }\n', '    \n', '    modifier noEdit(bytes32 goeureka_audit_ref) {\n', '        \n', '        require(\n', '            records[goeureka_audit_ref].exist == false, \n', '            "Already set, audit log cannot be modified"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function set(bytes32 goeureka_audit_ref, string reference) \n', '        onlyOwner \n', '        noEdit(goeureka_audit_ref) \n', '        public {\n', '            records[goeureka_audit_ref].reference = reference;\n', '            records[goeureka_audit_ref].exist = true;\n', '    }\n', '\n', '    function get(bytes32 goeureka_audit_ref) public constant returns (string) {\n', '        return records[goeureka_audit_ref].reference;\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.16;\n', '/*\n', '\n', '    GOeureka SimpleAudit Smart Contract\n', '    \n', '    This contract stores a client and supplier reference between customers and \n', '    hotels on the blockchain for audit log purposes\n', '    \n', '    bytes32 goeureka_audit_ref \n', '    - a blockchain reference ID generated by goeureka\n', '    \n', '    string reference\n', '    - a hash of two reference code from supplier and goeureka\n', '\n', '*/\n', 'contract SimpleAudit {\n', '    \n', '    struct Audit {\n', '        string reference;        // a hash of two reference code from supplier and goeureka\n', '        bool exist;              // checks if the reference exists\n', '    }\n', '    \n', '    address creator;\n', '    mapping(bytes32 => Audit) public records;\n', '    \n', '    constructor() public {\n', '        creator = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner {\n', '        require(\n', '            msg.sender == creator, "Only owner can call this function."\n', '        );\n', '        _;\n', '    }\n', '    \n', '    modifier noEdit(bytes32 goeureka_audit_ref) {\n', '        \n', '        require(\n', '            records[goeureka_audit_ref].exist == false, \n', '            "Already set, audit log cannot be modified"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function set(bytes32 goeureka_audit_ref, string reference) \n', '        onlyOwner \n', '        noEdit(goeureka_audit_ref) \n', '        public {\n', '            records[goeureka_audit_ref].reference = reference;\n', '            records[goeureka_audit_ref].exist = true;\n', '    }\n', '\n', '    function get(bytes32 goeureka_audit_ref) public constant returns (string) {\n', '        return records[goeureka_audit_ref].reference;\n', '    }\n', '    \n', '}']
