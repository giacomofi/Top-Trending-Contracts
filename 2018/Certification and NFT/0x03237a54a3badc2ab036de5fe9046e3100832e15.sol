['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract APOToken is MintableToken {\n', '    string public name = "Advanced Parimutuel Options";\n', '    string public symbol = "APO";\n', '    uint8 public decimals = 18;\n', '}\n', '\n', 'contract TokenTimelock {\n', '    \n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '    \n', '    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '        require(_releaseTime > now);\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers tokens held by timelock to beneficiary.\n', '    */\n', '    function release() public {\n', '        require(now >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '    \n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '    using SafeMath for uint256;   \n', '    \n', '    enum State { Active, Refunding, Closed }\n', '\n', '    mapping (address => uint256) public deposited;\n', '    address public wallet;\n', '    State public state;\n', '    //  \n', '     \n', '    event Closed();\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '    \n', '     \n', '    /**\n', '    * @param _wallet Vault address\n', '    */\n', '    function RefundVault(address _wallet) public {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '        state = State.Active;\n', '    }\n', '    \n', '    /**\n', '    * @param investor Investor address\n', '    */\n', '    function deposit(address investor) onlyOwner public payable {\n', '        require(state == State.Active);\n', '        deposited[investor] = deposited[investor].add(msg.value);\n', '    }\n', '    \n', '    function close() onlyOwner public  {\n', '        require(state == State.Active);\n', '        state = State.Closed;\n', '        emit Closed();\n', '        wallet.transfer(address(this).balance); // check\n', '    }\n', '\n', '    function enableRefunds() onlyOwner public {\n', '        require(state == State.Active);\n', '        state = State.Refunding;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    /**\n', '    * @param investor Investor address\n', '    */\n', '    function refund(address investor) public {\n', '        require(state == State.Refunding);\n', '        uint256 depositedValue = deposited[investor];\n', '        deposited[investor] = 0;\n', '        investor.transfer(depositedValue);\n', '        emit Refunded(investor, depositedValue);\n', '    }\n', '     \n', '}\n', '\n', 'contract Crowdsale {\n', '    \n', '  using SafeMath for uint256;\n', '  \n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '    \n', '    \n', '   /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public \n', '    {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '    }\n', '  \n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '   /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '   /**\n', '    * @dev low level token purchase ***DO NOT OVERRIDE***\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '        \n', '        _forwardFunds();\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '\n', '    /**\n', '    * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 etherAmount = _weiAmount.mul(rate).div(1 ether);\n', '        return etherAmount;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '    \n', '}\n', '\n', 'contract APOTokenCrowdsale is Ownable, Crowdsale  {\n', '\n', '    // The token being sold\n', '    APOToken public token = new APOToken();\n', '    \n', '    // Locked Tokens for 12 month\n', '    TokenTimelock public teamTokens;\n', '    TokenTimelock public reserveTokens;\n', '    \n', '    // Address where funds are collected\n', '    address public wallet;\n', '    \n', '    // Address of ither wallets\n', '    address public bountyWallet;\n', '    \n', '    address public privateWallet;\n', '    \n', '    // refund vault used to hold funds while crowdsale is running\n', '    RefundVault public vault = new RefundVault(msg.sender);\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate = 15000;\n', '\n', '    // ICO start time\n', '    uint256 public startTime = 1524650400;\n', '    \n', '    // ICO end time\n', '    uint256 public endTime = 1527069599;\n', '    \n', '    // Min Amount for Purchase\n', '    uint256 public minAmount = 0.1 * 1 ether;\n', '    \n', '    // Soft Cap\n', '    uint256 public softCap = 5500 * 1 ether;\n', '    \n', '    // Hard Cap\n', '    uint256 public hardCap = 12700 * 1 ether;\n', '    \n', '    // Unlock Date\n', '    uint256 public unlockTime = endTime + 1 years;\n', '    \n', '    // Discount\n', '    uint256 public discountPeriod =  1 weeks;\n', '         \n', '    // Finished\n', '    bool public isFinalized = false;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event Finalized();\n', '\n', '    modifier onlyWhileOpen {\n', '        require(now >= startTime && now <= endTime);\n', '        _;\n', '    }\n', '    \n', '    // Initial function\n', '    function APOTokenCrowdsale() public\n', '    Crowdsale(rate, vault, token) \n', '    {\n', '        wallet = msg.sender;\n', '        bountyWallet = 0x06F05ebdf3b871813f80C4A1744e66357B0d9e44;\n', '        privateWallet = 0xb62109986F19f710415e71F27fAaF4ece89eFf83;\n', '        teamTokens = new TokenTimelock(token, msg.sender, unlockTime);\n', '        reserveTokens = new TokenTimelock(token, 0x2700C56A67F12899a4CB9316ab6541d90EcE52E9, unlockTime);\n', '    }\n', '\n', '\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(_weiAmount >= minAmount);\n', '        require(weiRaised.add(_weiAmount) <= hardCap);\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        // Calculate discount rate\n', '        if (now <= startTime + 1 * discountPeriod) {\n', '            _tokenAmount = _tokenAmount.mul(125).div(100);\n', '        } else if ((now > startTime + 1 * discountPeriod) && (now <= startTime + 2 * discountPeriod))  {\n', '            _tokenAmount = _tokenAmount.mul(115).div(100);\n', '        } else if ((now > startTime + 2 * discountPeriod) && (now <= startTime + 3 * discountPeriod))  {\n', '            _tokenAmount = _tokenAmount.mul(105).div(100);\n', '        }\n', '        \n', '        // Mint token for contributor\n', '        token.mint(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() internal {\n', '        vault.deposit.value(msg.value)(msg.sender);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Checks whether the cap has been reached. \n', '    * @return Whether the cap was reached\n', '    */\n', '    function capReached() public view returns (bool) {\n', '        return weiRaised >= hardCap;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', '    * work. Calls the contract&#39;s finalization function.\n', '    */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasClosed());\n', '        \n', '        // Finalize\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Can be overridden to add finalization logic. The overriding function\n', '    * should call super.finalization() to ensure the chain of finalization is\n', '    * executed entirely.\n', '    */\n', '    function finalization() internal {\n', '        // \n', '        if (goalReached()) {\n', '            \n', '            vault.close();\n', '            \n', '            // For team - 20%, reserve - 25%, bounty - 5%, private investors - 10%\n', '            uint issuedTokenSupply = token.totalSupply();\n', '            uint teamPercent = issuedTokenSupply.mul(20).div(40);\n', '            uint reservePercent = issuedTokenSupply.mul(25).div(40);\n', '            uint bountyPercent = issuedTokenSupply.mul(5).div(40);\n', '            uint privatePercent = issuedTokenSupply.mul(10).div(40);   \n', '            \n', '            // Mint\n', '            token.mint(teamTokens, teamPercent);\n', '            token.mint(reserveTokens, reservePercent);\n', '            token.mint(bountyWallet, bountyPercent);\n', '            token.mint(privateWallet, privatePercent);\n', '            \n', '            // Finish minting\n', '            token.finishMinting();\n', '            \n', '        } else {\n', '            vault.enableRefunds();\n', '            // Finish minting\n', '            token.finishMinting();\n', '        }\n', '        \n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '    * @return Whether crowdsale period has elapsed\n', '    */\n', '    function hasClosed() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '    */\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev Checks whether funding goal was reached. \n', '    * @return Whether funding goal was reached\n', '    */\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised >= softCap;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract APOToken is MintableToken {\n', '    string public name = "Advanced Parimutuel Options";\n', '    string public symbol = "APO";\n', '    uint8 public decimals = 18;\n', '}\n', '\n', 'contract TokenTimelock {\n', '    \n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    // ERC20 basic token contract being held\n', '    ERC20Basic public token;\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    // timestamp when token release is enabled\n', '    uint256 public releaseTime;\n', '    \n', '    function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '        require(_releaseTime > now);\n', '        token = _token;\n', '        beneficiary = _beneficiary;\n', '        releaseTime = _releaseTime;\n', '    }\n', '\n', '    /**\n', '    * @notice Transfers tokens held by timelock to beneficiary.\n', '    */\n', '    function release() public {\n', '        require(now >= releaseTime);\n', '\n', '        uint256 amount = token.balanceOf(this);\n', '        require(amount > 0);\n', '\n', '        token.safeTransfer(beneficiary, amount);\n', '    }\n', '    \n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '    using SafeMath for uint256;   \n', '    \n', '    enum State { Active, Refunding, Closed }\n', '\n', '    mapping (address => uint256) public deposited;\n', '    address public wallet;\n', '    State public state;\n', '    //  \n', '     \n', '    event Closed();\n', '    event RefundsEnabled();\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '    \n', '     \n', '    /**\n', '    * @param _wallet Vault address\n', '    */\n', '    function RefundVault(address _wallet) public {\n', '        require(_wallet != address(0));\n', '        wallet = _wallet;\n', '        state = State.Active;\n', '    }\n', '    \n', '    /**\n', '    * @param investor Investor address\n', '    */\n', '    function deposit(address investor) onlyOwner public payable {\n', '        require(state == State.Active);\n', '        deposited[investor] = deposited[investor].add(msg.value);\n', '    }\n', '    \n', '    function close() onlyOwner public  {\n', '        require(state == State.Active);\n', '        state = State.Closed;\n', '        emit Closed();\n', '        wallet.transfer(address(this).balance); // check\n', '    }\n', '\n', '    function enableRefunds() onlyOwner public {\n', '        require(state == State.Active);\n', '        state = State.Refunding;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    /**\n', '    * @param investor Investor address\n', '    */\n', '    function refund(address investor) public {\n', '        require(state == State.Refunding);\n', '        uint256 depositedValue = deposited[investor];\n', '        deposited[investor] = 0;\n', '        investor.transfer(depositedValue);\n', '        emit Refunded(investor, depositedValue);\n', '    }\n', '     \n', '}\n', '\n', 'contract Crowdsale {\n', '    \n', '  using SafeMath for uint256;\n', '  \n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '    \n', '    \n', '   /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public \n', '    {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '    }\n', '  \n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '   /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '   /**\n', '    * @dev low level token purchase ***DO NOT OVERRIDE***\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '        \n', '        _forwardFunds();\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '\n', '    /**\n', '    * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 etherAmount = _weiAmount.mul(rate).div(1 ether);\n', '        return etherAmount;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '    \n', '}\n', '\n', 'contract APOTokenCrowdsale is Ownable, Crowdsale  {\n', '\n', '    // The token being sold\n', '    APOToken public token = new APOToken();\n', '    \n', '    // Locked Tokens for 12 month\n', '    TokenTimelock public teamTokens;\n', '    TokenTimelock public reserveTokens;\n', '    \n', '    // Address where funds are collected\n', '    address public wallet;\n', '    \n', '    // Address of ither wallets\n', '    address public bountyWallet;\n', '    \n', '    address public privateWallet;\n', '    \n', '    // refund vault used to hold funds while crowdsale is running\n', '    RefundVault public vault = new RefundVault(msg.sender);\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate = 15000;\n', '\n', '    // ICO start time\n', '    uint256 public startTime = 1524650400;\n', '    \n', '    // ICO end time\n', '    uint256 public endTime = 1527069599;\n', '    \n', '    // Min Amount for Purchase\n', '    uint256 public minAmount = 0.1 * 1 ether;\n', '    \n', '    // Soft Cap\n', '    uint256 public softCap = 5500 * 1 ether;\n', '    \n', '    // Hard Cap\n', '    uint256 public hardCap = 12700 * 1 ether;\n', '    \n', '    // Unlock Date\n', '    uint256 public unlockTime = endTime + 1 years;\n', '    \n', '    // Discount\n', '    uint256 public discountPeriod =  1 weeks;\n', '         \n', '    // Finished\n', '    bool public isFinalized = false;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event Finalized();\n', '\n', '    modifier onlyWhileOpen {\n', '        require(now >= startTime && now <= endTime);\n', '        _;\n', '    }\n', '    \n', '    // Initial function\n', '    function APOTokenCrowdsale() public\n', '    Crowdsale(rate, vault, token) \n', '    {\n', '        wallet = msg.sender;\n', '        bountyWallet = 0x06F05ebdf3b871813f80C4A1744e66357B0d9e44;\n', '        privateWallet = 0xb62109986F19f710415e71F27fAaF4ece89eFf83;\n', '        teamTokens = new TokenTimelock(token, msg.sender, unlockTime);\n', '        reserveTokens = new TokenTimelock(token, 0x2700C56A67F12899a4CB9316ab6541d90EcE52E9, unlockTime);\n', '    }\n', '\n', '\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '        require(_weiAmount >= minAmount);\n', '        require(weiRaised.add(_weiAmount) <= hardCap);\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        // Calculate discount rate\n', '        if (now <= startTime + 1 * discountPeriod) {\n', '            _tokenAmount = _tokenAmount.mul(125).div(100);\n', '        } else if ((now > startTime + 1 * discountPeriod) && (now <= startTime + 2 * discountPeriod))  {\n', '            _tokenAmount = _tokenAmount.mul(115).div(100);\n', '        } else if ((now > startTime + 2 * discountPeriod) && (now <= startTime + 3 * discountPeriod))  {\n', '            _tokenAmount = _tokenAmount.mul(105).div(100);\n', '        }\n', '        \n', '        // Mint token for contributor\n', '        token.mint(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() internal {\n', '        vault.deposit.value(msg.value)(msg.sender);\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Checks whether the cap has been reached. \n', '    * @return Whether the cap was reached\n', '    */\n', '    function capReached() public view returns (bool) {\n', '        return weiRaised >= hardCap;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', "    * work. Calls the contract's finalization function.\n", '    */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasClosed());\n', '        \n', '        // Finalize\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Can be overridden to add finalization logic. The overriding function\n', '    * should call super.finalization() to ensure the chain of finalization is\n', '    * executed entirely.\n', '    */\n', '    function finalization() internal {\n', '        // \n', '        if (goalReached()) {\n', '            \n', '            vault.close();\n', '            \n', '            // For team - 20%, reserve - 25%, bounty - 5%, private investors - 10%\n', '            uint issuedTokenSupply = token.totalSupply();\n', '            uint teamPercent = issuedTokenSupply.mul(20).div(40);\n', '            uint reservePercent = issuedTokenSupply.mul(25).div(40);\n', '            uint bountyPercent = issuedTokenSupply.mul(5).div(40);\n', '            uint privatePercent = issuedTokenSupply.mul(10).div(40);   \n', '            \n', '            // Mint\n', '            token.mint(teamTokens, teamPercent);\n', '            token.mint(reserveTokens, reservePercent);\n', '            token.mint(bountyWallet, bountyPercent);\n', '            token.mint(privateWallet, privatePercent);\n', '            \n', '            // Finish minting\n', '            token.finishMinting();\n', '            \n', '        } else {\n', '            vault.enableRefunds();\n', '            // Finish minting\n', '            token.finishMinting();\n', '        }\n', '        \n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '    * @return Whether crowdsale period has elapsed\n', '    */\n', '    function hasClosed() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '    */\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev Checks whether funding goal was reached. \n', '    * @return Whether funding goal was reached\n', '    */\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised >= softCap;\n', '    }\n', '\n', '}']
