['pragma solidity ^0.4.17;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev ERC20 interface\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title MiniMe interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20MiniMe is ERC20, Controlled {\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool);\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint);\n', '    function totalSupplyAt(uint _blockNumber) public constant returns(uint);\n', '    function createCloneToken(string _cloneTokenName, uint8 _cloneDecimalUnits, string _cloneTokenSymbol, uint _snapshotBlock, bool _transfersEnabled) public returns(address);\n', '    function generateTokens(address _owner, uint _amount) public returns (bool);\n', '    function destroyTokens(address _owner, uint _amount)  public returns (bool);\n', '    function enableTransfers(bool _transfersEnabled) public;\n', '    function isContract(address _addr) constant internal returns(bool);\n', '    function claimTokens(address _token) public;\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20MiniMe public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    buyTokens(beneficiary, msg.value);\n', '  }\n', '\n', '  // implementation of low level token purchase function\n', '  function buyTokens(address beneficiary, uint256 weiAmount) internal {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase(weiAmount));\n', '\n', '    transferToken(beneficiary, weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    forwardFunds(weiAmount);\n', '  }\n', '\n', '  // low level transfer token\n', '  // override to create custom token transfer mechanism, eg. pull pattern\n', '  function transferToken(address beneficiary, uint256 weiAmount) internal {\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    token.generateTokens(beneficiary, tokens);\n', '\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds(uint256 weiAmount) internal {\n', '    wallet.transfer(weiAmount);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase(uint256 weiAmount) internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = weiAmount != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // @return true if crowdsale has started\n', '  function hasStarted() public constant returns (bool) {\n', '    return now >= startTime;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase(uint256 weiAmount) internal constant returns (bool) {\n', '    return super.validPurchase(weiAmount) && !capReached();\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return super.hasEnded() || capReached();\n', '  }\n', '\n', '  // @return true if cap has been reached\n', '  function capReached() internal constant returns (bool) {\n', '   return weiRaised >= cap;\n', '  }\n', '\n', '  // overriding Crowdsale#buyTokens to add partial refund logic\n', '  function buyTokens(address beneficiary) public payable {\n', '     uint256 weiToCap = cap.sub(weiRaised);\n', '     uint256 weiAmount = weiToCap < msg.value ? weiToCap : msg.value;\n', '\n', '     buyTokens(beneficiary, weiAmount);\n', '\n', '     uint256 refund = msg.value.sub(weiAmount);\n', '     if (refund > 0) {\n', '       msg.sender.transfer(refund);\n', '     }\n', '   }\n', '}\n', '\n', '\n', '\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    ERC20MiniMe public ethealToken;\n', '    address public SALE; // address where sale tokens are located\n', '\n', '    /// @notice needed for hodler handling\n', '    function addHodlerStake(address _beneficiary, uint256 _stake) public;\n', '    function setHodlerStake(address _beneficiary, uint256 _stake) public;\n', '    function setHodlerTime(uint256 _time) public;\n', '\n', '\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) public payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public returns(bool);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Eliptic curve signature operations\n', ' *\n', ' * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n', ' */\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using his signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    //Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title EthealWhitelist\n', ' * @author thesved\n', ' * @notice EthealWhitelist contract which handles KYC\n', ' */\n', 'contract EthealWhitelist is Ownable {\n', '    using ECRecovery for bytes32;\n', '\n', '    // signer address for offchain whitelist signing\n', '    address public signer;\n', '\n', '    // storing whitelisted addresses\n', '    mapping(address => bool) public isWhitelisted;\n', '\n', '    event WhitelistSet(address indexed _address, bool _state);\n', '\n', '    ////////////////\n', '    // Constructor\n', '    ////////////////\n', '    function EthealWhitelist(address _signer) {\n', '        require(_signer != address(0));\n', '\n', '        signer = _signer;\n', '    }\n', '\n', '    /// @notice set signing address after deployment\n', '    function setSigner(address _signer) public onlyOwner {\n', '        require(_signer != address(0));\n', '\n', '        signer = _signer;\n', '    }\n', '\n', '    ////////////////\n', '    // Whitelisting: only owner\n', '    ////////////////\n', '\n', '    ///&#160;@notice Set whitelist state for an address.\n', '    function setWhitelist(address _addr, bool _state) public onlyOwner {\n', '        require(_addr != address(0));\n', '        isWhitelisted[_addr] = _state;\n', '        WhitelistSet(_addr, _state);\n', '    }\n', '\n', '    ///&#160;@notice Set whitelist state for multiple addresses\n', '    function setManyWhitelist(address[] _addr, bool _state) public onlyOwner {\n', '        for (uint256 i = 0; i < _addr.length; i++) {\n', '            setWhitelist(_addr[i], _state);\n', '        }\n', '    }\n', '\n', '    /// @notice offchain whitelist check\n', '    function isOffchainWhitelisted(address _addr, bytes _sig) public view returns (bool) {\n', '        bytes32 hash = keccak256("\\x19Ethereum Signed Message:\\n20",_addr);\n', '        return hash.recover(_sig) == signer;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title EthealNormalSale\n', ' * @author thesved\n', ' * @notice Etheal Token Sale contract, with softcap and hardcap (cap)\n', ' * @dev This contract has to be finalized before token claims are enabled\n', ' */\n', 'contract EthealNormalSale is Pausable, FinalizableCrowdsale, CappedCrowdsale {\n', '    // the token is here\n', '    TokenController public ethealController;\n', '\n', '    // after reaching {weiRaised} >= {softCap}, there is {softCapTime} seconds until the sale closes\n', '    // {softCapClose} contains the closing time\n', '    uint256 public rate = 700;\n', '    uint256 public softCap = 6800 ether;\n', '    uint256 public softCapTime = 120 hours;\n', '    uint256 public softCapClose;\n', '    uint256 public cap = 14300 ether;\n', '\n', '    // how many token is sold and not claimed, used for refunding to token controller\n', '    uint256 public tokenBalance;\n', '\n', '    // total token sold\n', '    uint256 public tokenSold;\n', '\n', '    // minimum contribution, 0.1ETH\n', '    uint256 public minContribution = 0.1 ether;\n', '\n', '    // whitelist: above threshold the contract has to approve each transaction\n', '    EthealWhitelist public whitelist;\n', '    uint256 public whitelistThreshold = 1 ether;\n', '\n', '    // deposit address from which it can get funds before sale\n', '    address public deposit;\n', '    \n', '    // stakes contains token bought and contirbutions contains the value in wei\n', '    mapping (address => uint256) public stakes;\n', '    mapping (address => uint256) public contributions;\n', '\n', '    // promo token bonus\n', '    address public promoTokenController;\n', '    mapping (address => uint256) public bonusExtra;\n', '\n', '    // addresses of contributors to handle finalization after token sale end (refunds or token claims)\n', '    address[] public contributorsKeys; \n', '\n', '    // events for token purchase during sale and claiming tokens after sale\n', '    event LogTokenClaimed(address indexed _claimer, address indexed _beneficiary, uint256 _amount);\n', '    event LogTokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount, uint256 _participants, uint256 _weiRaised);\n', '    event LogTokenSoftCapReached(uint256 _closeTime);\n', '    event LogTokenHardCapReached();\n', '\n', '    ////////////////\n', '    // Constructor and inherited function overrides\n', '    ////////////////\n', '\n', '    /// @notice Constructor to create PreSale contract\n', '    /// @param _ethealController Address of ethealController\n', '    /// @param _startTime The start time of token sale in seconds.\n', '    /// @param _endTime The end time of token sale in seconds.\n', '    /// @param _minContribution The minimum contribution per transaction in wei (0.1 ETH)\n', '    /// @param _rate Number of HEAL tokens per 1 ETH\n', '    /// @param _softCap Softcap in wei, reaching it ends the sale in _softCapTime seconds\n', '    /// @param _softCapTime Seconds until the sale remains open after reaching _softCap\n', '    /// @param _cap Maximum cap in wei, we can&#39;t raise more funds\n', '    /// @param _wallet Address of multisig wallet, which will get all the funds after successful sale\n', '    function EthealNormalSale(\n', '        address _ethealController,\n', '        uint256 _startTime, \n', '        uint256 _endTime, \n', '        uint256 _minContribution, \n', '        uint256 _rate, \n', '        uint256 _softCap, \n', '        uint256 _softCapTime, \n', '        uint256 _cap, \n', '        address _wallet\n', '    )\n', '        CappedCrowdsale(_cap)\n', '        FinalizableCrowdsale()\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '        // ethealController must be valid\n', '        require(_ethealController != address(0));\n', '        ethealController = TokenController(_ethealController);\n', '\n', '        // caps have to be consistent with each other\n', '        require(_softCap <= _cap);\n', '        softCap = _softCap;\n', '        softCapTime = _softCapTime;\n', '\n', '        // this is needed since super constructor wont overwite overriden variables\n', '        cap = _cap;\n', '        rate = _rate;\n', '\n', '        minContribution = _minContribution;\n', '    }\n', '\n', '    ////////////////\n', '    // Administer contract details\n', '    ////////////////\n', '\n', '    /// @notice Sets min contribution\n', '    function setMinContribution(uint256 _minContribution) public onlyOwner {\n', '        minContribution = _minContribution;\n', '    }\n', '\n', '    /// @notice Sets soft cap and max cap\n', '    function setCaps(uint256 _softCap, uint256 _softCapTime, uint256 _cap) public onlyOwner {\n', '        require(_softCap <= _cap);\n', '        softCap = _softCap;\n', '        softCapTime = _softCapTime;\n', '        cap = _cap;\n', '    }\n', '\n', '    /// @notice Sets crowdsale start and end time\n', '    function setTimes(uint256 _startTime, uint256 _endTime) public onlyOwner {\n', '        require(_startTime <= _endTime);\n', '        require(!hasEnded());\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '    }\n', '\n', '    /// @notice Set rate\n', '    function setRate(uint256 _rate) public onlyOwner {\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '    }\n', '\n', '    /// @notice Set address of promo token\n', '    function setPromoTokenController(address _addr) public onlyOwner {\n', '        require(_addr != address(0));\n', '        promoTokenController = _addr;\n', '    }\n', '\n', '    /// @notice Set whitelist contract address and minimum threshold\n', '    function setWhitelist(address _whitelist, uint256 _threshold) public onlyOwner {\n', '        // if whitelist contract address is provided we set it\n', '        if (_whitelist != address(0)) {\n', '            whitelist = EthealWhitelist(_whitelist);\n', '        }\n', '        whitelistThreshold = _threshold;\n', '    }\n', '\n', '    /// @notice Set deposit contract address from which it can receive money before sale\n', '    function setDeposit(address _deposit) public onlyOwner {\n', '        deposit = _deposit;\n', '    }\n', '\n', '    /// @notice move excess tokens, eg to hodler/sale contract\n', '    function moveTokens(address _to, uint256 _amount) public onlyOwner {\n', '        require(_to != address(0));\n', '        require(_amount <= getHealBalance().sub(tokenBalance));\n', '        require(ethealController.ethealToken().transfer(_to, _amount));\n', '    }\n', '\n', '    ////////////////\n', '    // Purchase functions\n', '    ////////////////\n', '\n', '    /// @dev Overriding Crowdsale#buyTokens to add partial refund\n', '    /// @param _beneficiary Beneficiary of the token purchase\n', '    function buyTokens(address _beneficiary) public payable whenNotPaused {\n', '        handlePayment(_beneficiary, msg.value, now, "");\n', '    }\n', '\n', '    /// @dev buying tokens for someone with offchain whitelist signature\n', '    function buyTokensSigned(address _beneficiary, bytes _whitelistSign) public payable whenNotPaused {\n', '        handlePayment(_beneficiary, msg.value, now, _whitelistSign);\n', '    }\n', '\n', '    /// @dev Internal function for handling transactions with ether.\n', '    function handlePayment(address _beneficiary, uint256 _amount, uint256 _time, bytes memory _whitelistSign) internal {\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 weiAmount = handleContribution(_beneficiary, _amount, _time, _whitelistSign);      \n', '        forwardFunds(weiAmount);  \n', '\n', '        // handle refund excess tokens\n', '        uint256 refund = _amount.sub(weiAmount);\n', '        if (refund > 0) {\n', '            _beneficiary.transfer(refund);\n', '        }\n', '    }\n', '\n', '    /// @dev Handling the amount of contribution and cap logic. Internal function.\n', '    /// @return Wei successfully contributed.\n', '    function handleContribution(address _beneficiary, uint256 _amount, uint256 _time, bytes memory _whitelistSign) internal returns (uint256) {\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 weiToCap = howMuchCanXContributeNow(_beneficiary);\n', '        uint256 weiAmount = uint256Min(weiToCap, _amount);\n', '\n', '        // account the new contribution\n', '        transferToken(_beneficiary, weiAmount, _time, _whitelistSign);\n', '\n', '        // close sale in softCapTime seconds after reaching softCap\n', '        if (weiRaised >= softCap && softCapClose == 0) {\n', '            softCapClose = now.add(softCapTime);\n', '            LogTokenSoftCapReached(uint256Min(softCapClose, endTime));\n', '        }\n', '\n', '        // event for hard cap reached\n', '        if (weiRaised >= cap) {\n', '            LogTokenHardCapReached();\n', '        }\n', '\n', '        return weiAmount;\n', '    }\n', '\n', '    /// @dev Handling token distribution and accounting. Overriding Crowdsale#transferToken.\n', '    /// @param _beneficiary Address of the recepient of the tokens\n', '    /// @param _weiAmount Contribution in wei\n', '    /// @param _time When the contribution was made\n', '    function transferToken(address _beneficiary, uint256 _weiAmount, uint256 _time, bytes memory _whitelistSign) internal {\n', '        require(_beneficiary != address(0));\n', '        require(validPurchase(_weiAmount));\n', '\n', '        // increase wei Raised\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '\n', '        // require whitelist above threshold\n', '        contributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount);\n', '        require(contributions[_beneficiary] <= whitelistThreshold \n', '                || whitelist.isWhitelisted(_beneficiary)\n', '                || whitelist.isOffchainWhitelisted(_beneficiary, _whitelistSign)\n', '        );\n', '\n', '        // calculate tokens, so we can refund excess tokens to EthealController after token sale\n', '        uint256 _bonus = getBonus(_beneficiary, _weiAmount, _time);\n', '        uint256 tokens = _weiAmount.mul(rate).mul(_bonus).div(100);\n', '        tokenBalance = tokenBalance.add(tokens);\n', '\n', '        if (stakes[_beneficiary] == 0) {\n', '            contributorsKeys.push(_beneficiary);\n', '        }\n', '        stakes[_beneficiary] = stakes[_beneficiary].add(tokens);\n', '\n', '        LogTokenPurchase(msg.sender, _beneficiary, _weiAmount, tokens, contributorsKeys.length, weiRaised);\n', '    }\n', '\n', '    /// @dev Get eth deposit from Deposit contract\n', '    function depositEth(address _beneficiary, uint256 _time, bytes _whitelistSign) public payable whenNotPaused {\n', '        require(msg.sender == deposit);\n', '\n', '        handlePayment(_beneficiary, msg.value, _time, _whitelistSign);\n', '    }\n', '\n', '    /// @dev Deposit from other currencies\n', '    function depositOffchain(address _beneficiary, uint256 _amount, uint256 _time, bytes _whitelistSign) public onlyOwner whenNotPaused {\n', '        handleContribution(_beneficiary, _amount, _time, _whitelistSign);\n', '    }\n', '\n', '    /// @dev Overriding Crowdsale#validPurchase to add min contribution logic\n', '    /// @param _weiAmount Contribution amount in wei\n', '    /// @return true if contribution is okay\n', '    function validPurchase(uint256 _weiAmount) internal constant returns (bool) {\n', '        bool nonEnded = !hasEnded();\n', '        bool nonZero = _weiAmount != 0;\n', '        bool enoughContribution = _weiAmount >= minContribution;\n', '        return nonEnded && nonZero && enoughContribution;\n', '    }\n', '\n', '    /// @dev Overriding Crowdsale#hasEnded to add soft cap logic\n', '    /// @return true if crowdsale event has ended or a softCapClose time is set and passed\n', '    function hasEnded() public constant returns (bool) {\n', '        return super.hasEnded() || softCapClose > 0 && now > softCapClose;\n', '    }\n', '\n', '    /// @dev Extending RefundableCrowdsale#finalization sending back excess tokens to ethealController\n', '    function finalization() internal {\n', '        uint256 _balance = getHealBalance();\n', '\n', '        // saving token balance for future reference\n', '        tokenSold = tokenBalance; \n', '\n', '        // send back the excess token to ethealController\n', '        if (_balance > tokenBalance) {\n', '            ethealController.ethealToken().transfer(ethealController.SALE(), _balance.sub(tokenBalance));\n', '        }\n', '\n', '        // hodler stake counting starts 14 days after closing normal sale\n', '        ethealController.setHodlerTime(now + 14 days);\n', '\n', '        super.finalization();\n', '    }\n', '\n', '\n', '    ////////////////\n', '    // AFTER token sale\n', '    ////////////////\n', '\n', '    /// @notice Modifier for after sale finalization\n', '    modifier afterSale() {\n', '        require(isFinalized);\n', '        _;\n', '    }\n', '\n', '    /// @notice Claim token for msg.sender after token sale based on stake.\n', '    function claimToken() public afterSale {\n', '        claimTokenFor(msg.sender);\n', '    }\n', '\n', '    /// @notice Claim token after token sale based on stake.\n', '    /// @dev Anyone can call this function and distribute tokens after successful token sale\n', '    /// @param _beneficiary Address of the beneficiary who gets the token\n', '    function claimTokenFor(address _beneficiary) public afterSale whenNotPaused {\n', '        uint256 tokens = stakes[_beneficiary];\n', '        require(tokens > 0);\n', '\n', '        // set the stake 0 for beneficiary\n', '        stakes[_beneficiary] = 0;\n', '\n', '        // decrease tokenBalance, to make it possible to withdraw excess HEAL funds\n', '        tokenBalance = tokenBalance.sub(tokens);\n', '\n', '        // distribute hodlr stake\n', '        ethealController.addHodlerStake(_beneficiary, tokens);\n', '\n', '        // distribute token\n', '        require(ethealController.ethealToken().transfer(_beneficiary, tokens));\n', '        LogTokenClaimed(msg.sender, _beneficiary, tokens);\n', '    }\n', '\n', '    /// @notice claimToken() for multiple addresses\n', '    /// @dev Anyone can call this function and distribute tokens after successful token sale\n', '    /// @param _beneficiaries Array of addresses for which we want to claim tokens\n', '    function claimManyTokenFor(address[] _beneficiaries) external afterSale {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            claimTokenFor(_beneficiaries[i]);\n', '        }\n', '    }\n', '\n', '\n', '    ////////////////\n', '    // Bonus functions\n', '    ////////////////\n', '\n', '    /// @notice Sets extra 5% bonus for those addresses who send back a promo token\n', '    /// @notice It contains an easter egg.\n', '    ///&#160;@param _addr this address gets the bonus\n', '    ///&#160;@param _value how many tokens are transferred\n', '    function setPromoBonus(address _addr, uint256 _value) public {\n', '        require(msg.sender == promoTokenController || msg.sender == owner);\n', '        require(_value>0);\n', '\n', '        uint256 _bonus = keccak256(_value) == 0xbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d2 ? 6 : 5;\n', '\n', '        if (bonusExtra[ _addr ] < _bonus) {\n', '            bonusExtra[ _addr ] = _bonus;\n', '        }\n', '    }\n', '\n', '    /// @notice Manual set extra bonus for addresses\n', '    function setBonusExtra(address _addr, uint256 _bonus) public onlyOwner {\n', '        require(_addr != address(0));\n', '        bonusExtra[_addr] = _bonus;\n', '    }\n', '\n', '    /// @notice Mass set extra bonus for addresses\n', '    function setManyBonusExtra(address[] _addr, uint256 _bonus) external onlyOwner {\n', '        for (uint256 i = 0; i < _addr.length; i++) {\n', '            setBonusExtra(_addr[i],_bonus);\n', '        }\n', '    }\n', '\n', '    /// @notice Returns bonus for now\n', '    function getBonusNow(address _addr, uint256 _size) public view returns (uint256) {\n', '        return getBonus(_addr, _size, now);\n', '    }\n', '\n', '    /// @notice Returns the bonus in percentage, eg 130 means 30% bonus\n', '    function getBonus(address _addr, uint256 _size, uint256 _time) public view returns (uint256 _bonus) {\n', '        // detailed bonus structure: https://etheal.com/#heal-token\n', '        _bonus = 100;\n', '        \n', '        // time based bonuses\n', '        uint256 _day = getSaleDay(_time);\n', '        uint256 _hour = getSaleHour(_time);\n', '        if (_day <= 1) {\n', '            if (_hour <= 1) _bonus = 130;\n', '            else if (_hour <= 5) _bonus = 125;\n', '            else if (_hour <= 8) _bonus = 120;\n', '            else _bonus = 118;\n', '        } \n', '        else if (_day <= 2) { _bonus = 116; }\n', '        else if (_day <= 3) { _bonus = 115; }\n', '        else if (_day <= 5) { _bonus = 114; }\n', '        else if (_day <= 7) { _bonus = 113; }\n', '        else if (_day <= 9) { _bonus = 112; }\n', '        else if (_day <= 11) { _bonus = 111; }\n', '        else if (_day <= 13) { _bonus = 110; }\n', '        else if (_day <= 15) { _bonus = 108; }\n', '        else if (_day <= 17) { _bonus = 107; }\n', '        else if (_day <= 19) { _bonus = 106; }\n', '        else if (_day <= 21) { _bonus = 105; }\n', '        else if (_day <= 23) { _bonus = 104; }\n', '        else if (_day <= 25) { _bonus = 103; }\n', '        else if (_day <= 27) { _bonus = 102; }\n', '\n', '        // size based bonuses\n', '        if (_size >= 100 ether) { _bonus = _bonus + 4; }\n', '        else if (_size >= 10 ether) { _bonus = _bonus + 2; }\n', '\n', '        // manual bonus\n', '        _bonus += bonusExtra[ _addr ];\n', '\n', '        return _bonus;\n', '    }\n', '\n', '\n', '    ////////////////\n', '    // Constant, helper functions\n', '    ////////////////\n', '\n', '    /// @notice How many wei can the msg.sender contribute now.\n', '    function howMuchCanIContributeNow() view public returns (uint256) {\n', '        return howMuchCanXContributeNow(msg.sender);\n', '    }\n', '\n', '    /// @notice How many wei can an ethereum address contribute now.\n', '    /// @param _beneficiary Ethereum address\n', '    /// @return Number of wei the _beneficiary can contribute now.\n', '    function howMuchCanXContributeNow(address _beneficiary) view public returns (uint256) {\n', '        require(_beneficiary != address(0));\n', '\n', '        if (hasEnded() || paused) \n', '            return 0;\n', '\n', '        // wei to hard cap\n', '        uint256 weiToCap = cap.sub(weiRaised);\n', '\n', '        return weiToCap;\n', '    }\n', '\n', '    /// @notice For a give date how many 24 hour blocks have ellapsed since token sale start\n', '    ///  Before sale return 0, first day 1, second day 2, ...\n', '    /// @param _time Date in seconds for which we want to know which sale day it is\n', '    /// @return Number of 24 hour blocks ellapsing since token sale start starting from 1\n', '    function getSaleDay(uint256 _time) view public returns (uint256) {\n', '        uint256 _day = 0;\n', '        if (_time > startTime) {\n', '            _day = _time.sub(startTime).div(60*60*24).add(1);\n', '        }\n', '        return _day;\n', '    }\n', '\n', '    /// @notice How many 24 hour blocks have ellapsed since token sale start\n', '    /// @return Number of 24 hour blocks ellapsing since token sale start starting from 1\n', '    function getSaleDayNow() view public returns (uint256) {\n', '        return getSaleDay(now);\n', '    }\n', '\n', '    /// @notice Returns sale hour: 0 before sale, 1 for the first hour, ...\n', '    /// @param _time Date in seconds for which we want to know which sale hour it is\n', '    /// @return Number of 1 hour blocks ellapsing since token sale start starting from 1\n', '    function getSaleHour(uint256 _time) view public returns (uint256) {\n', '        uint256 _hour = 0;\n', '        if (_time > startTime) {\n', '            _hour = _time.sub(startTime).div(60*60).add(1);\n', '        }\n', '        return _hour;\n', '    }\n', '\n', '    /// @notice How many 1 hour blocks have ellapsed since token sale start\n', '    /// @return Number of 1 hour blocks ellapsing since token sale start starting from 1\n', '    function getSaleHourNow() view public returns (uint256) {\n', '        return getSaleHour(now);\n', '    }\n', '\n', '    /// @notice Minimum between two uint256 numbers\n', '    function uint256Min(uint256 a, uint256 b) pure internal returns (uint256) {\n', '        return a > b ? b : a;\n', '    }\n', '\n', '\n', '    ////////////////\n', '    // Test and contribution web app, NO audit is needed\n', '    ////////////////\n', '\n', '    /// @notice How many contributors we have.\n', '    /// @return Number of different contributor ethereum addresses\n', '    function getContributorsCount() view public returns (uint256) {\n', '        return contributorsKeys.length;\n', '    }\n', '\n', '    /// @notice Get contributor addresses to manage refunds or token claims.\n', '    /// @dev If the sale is not yet successful, then it searches in the RefundVault.\n', '    ///  If the sale is successful, it searches in contributors.\n', '    /// @param _pending If true, then returns addresses which didn&#39;t get their tokens distributed to them\n', '    /// @param _claimed If true, then returns already distributed addresses\n', '    /// @return Array of addresses of contributors\n', '    function getContributors(bool _pending, bool _claimed) view public returns (address[] contributors) {\n', '        uint256 i = 0;\n', '        uint256 results = 0;\n', '        address[] memory _contributors = new address[](contributorsKeys.length);\n', '\n', '        // search in contributors\n', '        for (i = 0; i < contributorsKeys.length; i++) {\n', '            if (_pending && stakes[contributorsKeys[i]] > 0 || _claimed && stakes[contributorsKeys[i]] == 0) {\n', '                _contributors[results] = contributorsKeys[i];\n', '                results++;\n', '            }\n', '        }\n', '\n', '        contributors = new address[](results);\n', '        for (i = 0; i < results; i++) {\n', '            contributors[i] = _contributors[i];\n', '        }\n', '\n', '        return contributors;\n', '    }\n', '\n', '    /// @notice How many HEAL tokens do this contract have\n', '    function getHealBalance() view public returns (uint256) {\n', '        return ethealController.ethealToken().balanceOf(address(this));\n', '    }\n', '\n', '    /// @notice Get current date for web3\n', '    function getNow() view public returns (uint256) {\n', '        return now;\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev ERC20 interface\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title MiniMe interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20MiniMe is ERC20, Controlled {\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns (bool);\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint);\n', '    function totalSupplyAt(uint _blockNumber) public constant returns(uint);\n', '    function createCloneToken(string _cloneTokenName, uint8 _cloneDecimalUnits, string _cloneTokenSymbol, uint _snapshotBlock, bool _transfersEnabled) public returns(address);\n', '    function generateTokens(address _owner, uint _amount) public returns (bool);\n', '    function destroyTokens(address _owner, uint _amount)  public returns (bool);\n', '    function enableTransfers(bool _transfersEnabled) public;\n', '    function isContract(address _addr) constant internal returns(bool);\n', '    function claimTokens(address _token) public;\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20MiniMe public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != 0x0);\n', '\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    buyTokens(beneficiary, msg.value);\n', '  }\n', '\n', '  // implementation of low level token purchase function\n', '  function buyTokens(address beneficiary, uint256 weiAmount) internal {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase(weiAmount));\n', '\n', '    transferToken(beneficiary, weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    forwardFunds(weiAmount);\n', '  }\n', '\n', '  // low level transfer token\n', '  // override to create custom token transfer mechanism, eg. pull pattern\n', '  function transferToken(address beneficiary, uint256 weiAmount) internal {\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    token.generateTokens(beneficiary, tokens);\n', '\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds(uint256 weiAmount) internal {\n', '    wallet.transfer(weiAmount);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase(uint256 weiAmount) internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = weiAmount != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // @return true if crowdsale has started\n', '  function hasStarted() public constant returns (bool) {\n', '    return now >= startTime;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase(uint256 weiAmount) internal constant returns (bool) {\n', '    return super.validPurchase(weiAmount) && !capReached();\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return super.hasEnded() || capReached();\n', '  }\n', '\n', '  // @return true if cap has been reached\n', '  function capReached() internal constant returns (bool) {\n', '   return weiRaised >= cap;\n', '  }\n', '\n', '  // overriding Crowdsale#buyTokens to add partial refund logic\n', '  function buyTokens(address beneficiary) public payable {\n', '     uint256 weiToCap = cap.sub(weiRaised);\n', '     uint256 weiAmount = weiToCap < msg.value ? weiToCap : msg.value;\n', '\n', '     buyTokens(beneficiary, weiAmount);\n', '\n', '     uint256 refund = msg.value.sub(weiAmount);\n', '     if (refund > 0) {\n', '       msg.sender.transfer(refund);\n', '     }\n', '   }\n', '}\n', '\n', '\n', '\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    ERC20MiniMe public ethealToken;\n', '    address public SALE; // address where sale tokens are located\n', '\n', '    /// @notice needed for hodler handling\n', '    function addHodlerStake(address _beneficiary, uint256 _stake) public;\n', '    function setHodlerStake(address _beneficiary, uint256 _stake) public;\n', '    function setHodlerTime(uint256 _time) public;\n', '\n', '\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) public payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public returns(bool);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Eliptic curve signature operations\n', ' *\n', ' * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n', ' */\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using his signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig) public pure returns (address) {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    //Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title EthealWhitelist\n', ' * @author thesved\n', ' * @notice EthealWhitelist contract which handles KYC\n', ' */\n', 'contract EthealWhitelist is Ownable {\n', '    using ECRecovery for bytes32;\n', '\n', '    // signer address for offchain whitelist signing\n', '    address public signer;\n', '\n', '    // storing whitelisted addresses\n', '    mapping(address => bool) public isWhitelisted;\n', '\n', '    event WhitelistSet(address indexed _address, bool _state);\n', '\n', '    ////////////////\n', '    // Constructor\n', '    ////////////////\n', '    function EthealWhitelist(address _signer) {\n', '        require(_signer != address(0));\n', '\n', '        signer = _signer;\n', '    }\n', '\n', '    /// @notice set signing address after deployment\n', '    function setSigner(address _signer) public onlyOwner {\n', '        require(_signer != address(0));\n', '\n', '        signer = _signer;\n', '    }\n', '\n', '    ////////////////\n', '    // Whitelisting: only owner\n', '    ////////////////\n', '\n', '    ///\xa0@notice Set whitelist state for an address.\n', '    function setWhitelist(address _addr, bool _state) public onlyOwner {\n', '        require(_addr != address(0));\n', '        isWhitelisted[_addr] = _state;\n', '        WhitelistSet(_addr, _state);\n', '    }\n', '\n', '    ///\xa0@notice Set whitelist state for multiple addresses\n', '    function setManyWhitelist(address[] _addr, bool _state) public onlyOwner {\n', '        for (uint256 i = 0; i < _addr.length; i++) {\n', '            setWhitelist(_addr[i], _state);\n', '        }\n', '    }\n', '\n', '    /// @notice offchain whitelist check\n', '    function isOffchainWhitelisted(address _addr, bytes _sig) public view returns (bool) {\n', '        bytes32 hash = keccak256("\\x19Ethereum Signed Message:\\n20",_addr);\n', '        return hash.recover(_sig) == signer;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title EthealNormalSale\n', ' * @author thesved\n', ' * @notice Etheal Token Sale contract, with softcap and hardcap (cap)\n', ' * @dev This contract has to be finalized before token claims are enabled\n', ' */\n', 'contract EthealNormalSale is Pausable, FinalizableCrowdsale, CappedCrowdsale {\n', '    // the token is here\n', '    TokenController public ethealController;\n', '\n', '    // after reaching {weiRaised} >= {softCap}, there is {softCapTime} seconds until the sale closes\n', '    // {softCapClose} contains the closing time\n', '    uint256 public rate = 700;\n', '    uint256 public softCap = 6800 ether;\n', '    uint256 public softCapTime = 120 hours;\n', '    uint256 public softCapClose;\n', '    uint256 public cap = 14300 ether;\n', '\n', '    // how many token is sold and not claimed, used for refunding to token controller\n', '    uint256 public tokenBalance;\n', '\n', '    // total token sold\n', '    uint256 public tokenSold;\n', '\n', '    // minimum contribution, 0.1ETH\n', '    uint256 public minContribution = 0.1 ether;\n', '\n', '    // whitelist: above threshold the contract has to approve each transaction\n', '    EthealWhitelist public whitelist;\n', '    uint256 public whitelistThreshold = 1 ether;\n', '\n', '    // deposit address from which it can get funds before sale\n', '    address public deposit;\n', '    \n', '    // stakes contains token bought and contirbutions contains the value in wei\n', '    mapping (address => uint256) public stakes;\n', '    mapping (address => uint256) public contributions;\n', '\n', '    // promo token bonus\n', '    address public promoTokenController;\n', '    mapping (address => uint256) public bonusExtra;\n', '\n', '    // addresses of contributors to handle finalization after token sale end (refunds or token claims)\n', '    address[] public contributorsKeys; \n', '\n', '    // events for token purchase during sale and claiming tokens after sale\n', '    event LogTokenClaimed(address indexed _claimer, address indexed _beneficiary, uint256 _amount);\n', '    event LogTokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount, uint256 _participants, uint256 _weiRaised);\n', '    event LogTokenSoftCapReached(uint256 _closeTime);\n', '    event LogTokenHardCapReached();\n', '\n', '    ////////////////\n', '    // Constructor and inherited function overrides\n', '    ////////////////\n', '\n', '    /// @notice Constructor to create PreSale contract\n', '    /// @param _ethealController Address of ethealController\n', '    /// @param _startTime The start time of token sale in seconds.\n', '    /// @param _endTime The end time of token sale in seconds.\n', '    /// @param _minContribution The minimum contribution per transaction in wei (0.1 ETH)\n', '    /// @param _rate Number of HEAL tokens per 1 ETH\n', '    /// @param _softCap Softcap in wei, reaching it ends the sale in _softCapTime seconds\n', '    /// @param _softCapTime Seconds until the sale remains open after reaching _softCap\n', "    /// @param _cap Maximum cap in wei, we can't raise more funds\n", '    /// @param _wallet Address of multisig wallet, which will get all the funds after successful sale\n', '    function EthealNormalSale(\n', '        address _ethealController,\n', '        uint256 _startTime, \n', '        uint256 _endTime, \n', '        uint256 _minContribution, \n', '        uint256 _rate, \n', '        uint256 _softCap, \n', '        uint256 _softCapTime, \n', '        uint256 _cap, \n', '        address _wallet\n', '    )\n', '        CappedCrowdsale(_cap)\n', '        FinalizableCrowdsale()\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '        // ethealController must be valid\n', '        require(_ethealController != address(0));\n', '        ethealController = TokenController(_ethealController);\n', '\n', '        // caps have to be consistent with each other\n', '        require(_softCap <= _cap);\n', '        softCap = _softCap;\n', '        softCapTime = _softCapTime;\n', '\n', '        // this is needed since super constructor wont overwite overriden variables\n', '        cap = _cap;\n', '        rate = _rate;\n', '\n', '        minContribution = _minContribution;\n', '    }\n', '\n', '    ////////////////\n', '    // Administer contract details\n', '    ////////////////\n', '\n', '    /// @notice Sets min contribution\n', '    function setMinContribution(uint256 _minContribution) public onlyOwner {\n', '        minContribution = _minContribution;\n', '    }\n', '\n', '    /// @notice Sets soft cap and max cap\n', '    function setCaps(uint256 _softCap, uint256 _softCapTime, uint256 _cap) public onlyOwner {\n', '        require(_softCap <= _cap);\n', '        softCap = _softCap;\n', '        softCapTime = _softCapTime;\n', '        cap = _cap;\n', '    }\n', '\n', '    /// @notice Sets crowdsale start and end time\n', '    function setTimes(uint256 _startTime, uint256 _endTime) public onlyOwner {\n', '        require(_startTime <= _endTime);\n', '        require(!hasEnded());\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '    }\n', '\n', '    /// @notice Set rate\n', '    function setRate(uint256 _rate) public onlyOwner {\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '    }\n', '\n', '    /// @notice Set address of promo token\n', '    function setPromoTokenController(address _addr) public onlyOwner {\n', '        require(_addr != address(0));\n', '        promoTokenController = _addr;\n', '    }\n', '\n', '    /// @notice Set whitelist contract address and minimum threshold\n', '    function setWhitelist(address _whitelist, uint256 _threshold) public onlyOwner {\n', '        // if whitelist contract address is provided we set it\n', '        if (_whitelist != address(0)) {\n', '            whitelist = EthealWhitelist(_whitelist);\n', '        }\n', '        whitelistThreshold = _threshold;\n', '    }\n', '\n', '    /// @notice Set deposit contract address from which it can receive money before sale\n', '    function setDeposit(address _deposit) public onlyOwner {\n', '        deposit = _deposit;\n', '    }\n', '\n', '    /// @notice move excess tokens, eg to hodler/sale contract\n', '    function moveTokens(address _to, uint256 _amount) public onlyOwner {\n', '        require(_to != address(0));\n', '        require(_amount <= getHealBalance().sub(tokenBalance));\n', '        require(ethealController.ethealToken().transfer(_to, _amount));\n', '    }\n', '\n', '    ////////////////\n', '    // Purchase functions\n', '    ////////////////\n', '\n', '    /// @dev Overriding Crowdsale#buyTokens to add partial refund\n', '    /// @param _beneficiary Beneficiary of the token purchase\n', '    function buyTokens(address _beneficiary) public payable whenNotPaused {\n', '        handlePayment(_beneficiary, msg.value, now, "");\n', '    }\n', '\n', '    /// @dev buying tokens for someone with offchain whitelist signature\n', '    function buyTokensSigned(address _beneficiary, bytes _whitelistSign) public payable whenNotPaused {\n', '        handlePayment(_beneficiary, msg.value, now, _whitelistSign);\n', '    }\n', '\n', '    /// @dev Internal function for handling transactions with ether.\n', '    function handlePayment(address _beneficiary, uint256 _amount, uint256 _time, bytes memory _whitelistSign) internal {\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 weiAmount = handleContribution(_beneficiary, _amount, _time, _whitelistSign);      \n', '        forwardFunds(weiAmount);  \n', '\n', '        // handle refund excess tokens\n', '        uint256 refund = _amount.sub(weiAmount);\n', '        if (refund > 0) {\n', '            _beneficiary.transfer(refund);\n', '        }\n', '    }\n', '\n', '    /// @dev Handling the amount of contribution and cap logic. Internal function.\n', '    /// @return Wei successfully contributed.\n', '    function handleContribution(address _beneficiary, uint256 _amount, uint256 _time, bytes memory _whitelistSign) internal returns (uint256) {\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 weiToCap = howMuchCanXContributeNow(_beneficiary);\n', '        uint256 weiAmount = uint256Min(weiToCap, _amount);\n', '\n', '        // account the new contribution\n', '        transferToken(_beneficiary, weiAmount, _time, _whitelistSign);\n', '\n', '        // close sale in softCapTime seconds after reaching softCap\n', '        if (weiRaised >= softCap && softCapClose == 0) {\n', '            softCapClose = now.add(softCapTime);\n', '            LogTokenSoftCapReached(uint256Min(softCapClose, endTime));\n', '        }\n', '\n', '        // event for hard cap reached\n', '        if (weiRaised >= cap) {\n', '            LogTokenHardCapReached();\n', '        }\n', '\n', '        return weiAmount;\n', '    }\n', '\n', '    /// @dev Handling token distribution and accounting. Overriding Crowdsale#transferToken.\n', '    /// @param _beneficiary Address of the recepient of the tokens\n', '    /// @param _weiAmount Contribution in wei\n', '    /// @param _time When the contribution was made\n', '    function transferToken(address _beneficiary, uint256 _weiAmount, uint256 _time, bytes memory _whitelistSign) internal {\n', '        require(_beneficiary != address(0));\n', '        require(validPurchase(_weiAmount));\n', '\n', '        // increase wei Raised\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '\n', '        // require whitelist above threshold\n', '        contributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount);\n', '        require(contributions[_beneficiary] <= whitelistThreshold \n', '                || whitelist.isWhitelisted(_beneficiary)\n', '                || whitelist.isOffchainWhitelisted(_beneficiary, _whitelistSign)\n', '        );\n', '\n', '        // calculate tokens, so we can refund excess tokens to EthealController after token sale\n', '        uint256 _bonus = getBonus(_beneficiary, _weiAmount, _time);\n', '        uint256 tokens = _weiAmount.mul(rate).mul(_bonus).div(100);\n', '        tokenBalance = tokenBalance.add(tokens);\n', '\n', '        if (stakes[_beneficiary] == 0) {\n', '            contributorsKeys.push(_beneficiary);\n', '        }\n', '        stakes[_beneficiary] = stakes[_beneficiary].add(tokens);\n', '\n', '        LogTokenPurchase(msg.sender, _beneficiary, _weiAmount, tokens, contributorsKeys.length, weiRaised);\n', '    }\n', '\n', '    /// @dev Get eth deposit from Deposit contract\n', '    function depositEth(address _beneficiary, uint256 _time, bytes _whitelistSign) public payable whenNotPaused {\n', '        require(msg.sender == deposit);\n', '\n', '        handlePayment(_beneficiary, msg.value, _time, _whitelistSign);\n', '    }\n', '\n', '    /// @dev Deposit from other currencies\n', '    function depositOffchain(address _beneficiary, uint256 _amount, uint256 _time, bytes _whitelistSign) public onlyOwner whenNotPaused {\n', '        handleContribution(_beneficiary, _amount, _time, _whitelistSign);\n', '    }\n', '\n', '    /// @dev Overriding Crowdsale#validPurchase to add min contribution logic\n', '    /// @param _weiAmount Contribution amount in wei\n', '    /// @return true if contribution is okay\n', '    function validPurchase(uint256 _weiAmount) internal constant returns (bool) {\n', '        bool nonEnded = !hasEnded();\n', '        bool nonZero = _weiAmount != 0;\n', '        bool enoughContribution = _weiAmount >= minContribution;\n', '        return nonEnded && nonZero && enoughContribution;\n', '    }\n', '\n', '    /// @dev Overriding Crowdsale#hasEnded to add soft cap logic\n', '    /// @return true if crowdsale event has ended or a softCapClose time is set and passed\n', '    function hasEnded() public constant returns (bool) {\n', '        return super.hasEnded() || softCapClose > 0 && now > softCapClose;\n', '    }\n', '\n', '    /// @dev Extending RefundableCrowdsale#finalization sending back excess tokens to ethealController\n', '    function finalization() internal {\n', '        uint256 _balance = getHealBalance();\n', '\n', '        // saving token balance for future reference\n', '        tokenSold = tokenBalance; \n', '\n', '        // send back the excess token to ethealController\n', '        if (_balance > tokenBalance) {\n', '            ethealController.ethealToken().transfer(ethealController.SALE(), _balance.sub(tokenBalance));\n', '        }\n', '\n', '        // hodler stake counting starts 14 days after closing normal sale\n', '        ethealController.setHodlerTime(now + 14 days);\n', '\n', '        super.finalization();\n', '    }\n', '\n', '\n', '    ////////////////\n', '    // AFTER token sale\n', '    ////////////////\n', '\n', '    /// @notice Modifier for after sale finalization\n', '    modifier afterSale() {\n', '        require(isFinalized);\n', '        _;\n', '    }\n', '\n', '    /// @notice Claim token for msg.sender after token sale based on stake.\n', '    function claimToken() public afterSale {\n', '        claimTokenFor(msg.sender);\n', '    }\n', '\n', '    /// @notice Claim token after token sale based on stake.\n', '    /// @dev Anyone can call this function and distribute tokens after successful token sale\n', '    /// @param _beneficiary Address of the beneficiary who gets the token\n', '    function claimTokenFor(address _beneficiary) public afterSale whenNotPaused {\n', '        uint256 tokens = stakes[_beneficiary];\n', '        require(tokens > 0);\n', '\n', '        // set the stake 0 for beneficiary\n', '        stakes[_beneficiary] = 0;\n', '\n', '        // decrease tokenBalance, to make it possible to withdraw excess HEAL funds\n', '        tokenBalance = tokenBalance.sub(tokens);\n', '\n', '        // distribute hodlr stake\n', '        ethealController.addHodlerStake(_beneficiary, tokens);\n', '\n', '        // distribute token\n', '        require(ethealController.ethealToken().transfer(_beneficiary, tokens));\n', '        LogTokenClaimed(msg.sender, _beneficiary, tokens);\n', '    }\n', '\n', '    /// @notice claimToken() for multiple addresses\n', '    /// @dev Anyone can call this function and distribute tokens after successful token sale\n', '    /// @param _beneficiaries Array of addresses for which we want to claim tokens\n', '    function claimManyTokenFor(address[] _beneficiaries) external afterSale {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            claimTokenFor(_beneficiaries[i]);\n', '        }\n', '    }\n', '\n', '\n', '    ////////////////\n', '    // Bonus functions\n', '    ////////////////\n', '\n', '    /// @notice Sets extra 5% bonus for those addresses who send back a promo token\n', '    /// @notice It contains an easter egg.\n', '    ///\xa0@param _addr this address gets the bonus\n', '    ///\xa0@param _value how many tokens are transferred\n', '    function setPromoBonus(address _addr, uint256 _value) public {\n', '        require(msg.sender == promoTokenController || msg.sender == owner);\n', '        require(_value>0);\n', '\n', '        uint256 _bonus = keccak256(_value) == 0xbeced09521047d05b8960b7e7bcc1d1292cf3e4b2a6b63f48335cbde5f7545d2 ? 6 : 5;\n', '\n', '        if (bonusExtra[ _addr ] < _bonus) {\n', '            bonusExtra[ _addr ] = _bonus;\n', '        }\n', '    }\n', '\n', '    /// @notice Manual set extra bonus for addresses\n', '    function setBonusExtra(address _addr, uint256 _bonus) public onlyOwner {\n', '        require(_addr != address(0));\n', '        bonusExtra[_addr] = _bonus;\n', '    }\n', '\n', '    /// @notice Mass set extra bonus for addresses\n', '    function setManyBonusExtra(address[] _addr, uint256 _bonus) external onlyOwner {\n', '        for (uint256 i = 0; i < _addr.length; i++) {\n', '            setBonusExtra(_addr[i],_bonus);\n', '        }\n', '    }\n', '\n', '    /// @notice Returns bonus for now\n', '    function getBonusNow(address _addr, uint256 _size) public view returns (uint256) {\n', '        return getBonus(_addr, _size, now);\n', '    }\n', '\n', '    /// @notice Returns the bonus in percentage, eg 130 means 30% bonus\n', '    function getBonus(address _addr, uint256 _size, uint256 _time) public view returns (uint256 _bonus) {\n', '        // detailed bonus structure: https://etheal.com/#heal-token\n', '        _bonus = 100;\n', '        \n', '        // time based bonuses\n', '        uint256 _day = getSaleDay(_time);\n', '        uint256 _hour = getSaleHour(_time);\n', '        if (_day <= 1) {\n', '            if (_hour <= 1) _bonus = 130;\n', '            else if (_hour <= 5) _bonus = 125;\n', '            else if (_hour <= 8) _bonus = 120;\n', '            else _bonus = 118;\n', '        } \n', '        else if (_day <= 2) { _bonus = 116; }\n', '        else if (_day <= 3) { _bonus = 115; }\n', '        else if (_day <= 5) { _bonus = 114; }\n', '        else if (_day <= 7) { _bonus = 113; }\n', '        else if (_day <= 9) { _bonus = 112; }\n', '        else if (_day <= 11) { _bonus = 111; }\n', '        else if (_day <= 13) { _bonus = 110; }\n', '        else if (_day <= 15) { _bonus = 108; }\n', '        else if (_day <= 17) { _bonus = 107; }\n', '        else if (_day <= 19) { _bonus = 106; }\n', '        else if (_day <= 21) { _bonus = 105; }\n', '        else if (_day <= 23) { _bonus = 104; }\n', '        else if (_day <= 25) { _bonus = 103; }\n', '        else if (_day <= 27) { _bonus = 102; }\n', '\n', '        // size based bonuses\n', '        if (_size >= 100 ether) { _bonus = _bonus + 4; }\n', '        else if (_size >= 10 ether) { _bonus = _bonus + 2; }\n', '\n', '        // manual bonus\n', '        _bonus += bonusExtra[ _addr ];\n', '\n', '        return _bonus;\n', '    }\n', '\n', '\n', '    ////////////////\n', '    // Constant, helper functions\n', '    ////////////////\n', '\n', '    /// @notice How many wei can the msg.sender contribute now.\n', '    function howMuchCanIContributeNow() view public returns (uint256) {\n', '        return howMuchCanXContributeNow(msg.sender);\n', '    }\n', '\n', '    /// @notice How many wei can an ethereum address contribute now.\n', '    /// @param _beneficiary Ethereum address\n', '    /// @return Number of wei the _beneficiary can contribute now.\n', '    function howMuchCanXContributeNow(address _beneficiary) view public returns (uint256) {\n', '        require(_beneficiary != address(0));\n', '\n', '        if (hasEnded() || paused) \n', '            return 0;\n', '\n', '        // wei to hard cap\n', '        uint256 weiToCap = cap.sub(weiRaised);\n', '\n', '        return weiToCap;\n', '    }\n', '\n', '    /// @notice For a give date how many 24 hour blocks have ellapsed since token sale start\n', '    ///  Before sale return 0, first day 1, second day 2, ...\n', '    /// @param _time Date in seconds for which we want to know which sale day it is\n', '    /// @return Number of 24 hour blocks ellapsing since token sale start starting from 1\n', '    function getSaleDay(uint256 _time) view public returns (uint256) {\n', '        uint256 _day = 0;\n', '        if (_time > startTime) {\n', '            _day = _time.sub(startTime).div(60*60*24).add(1);\n', '        }\n', '        return _day;\n', '    }\n', '\n', '    /// @notice How many 24 hour blocks have ellapsed since token sale start\n', '    /// @return Number of 24 hour blocks ellapsing since token sale start starting from 1\n', '    function getSaleDayNow() view public returns (uint256) {\n', '        return getSaleDay(now);\n', '    }\n', '\n', '    /// @notice Returns sale hour: 0 before sale, 1 for the first hour, ...\n', '    /// @param _time Date in seconds for which we want to know which sale hour it is\n', '    /// @return Number of 1 hour blocks ellapsing since token sale start starting from 1\n', '    function getSaleHour(uint256 _time) view public returns (uint256) {\n', '        uint256 _hour = 0;\n', '        if (_time > startTime) {\n', '            _hour = _time.sub(startTime).div(60*60).add(1);\n', '        }\n', '        return _hour;\n', '    }\n', '\n', '    /// @notice How many 1 hour blocks have ellapsed since token sale start\n', '    /// @return Number of 1 hour blocks ellapsing since token sale start starting from 1\n', '    function getSaleHourNow() view public returns (uint256) {\n', '        return getSaleHour(now);\n', '    }\n', '\n', '    /// @notice Minimum between two uint256 numbers\n', '    function uint256Min(uint256 a, uint256 b) pure internal returns (uint256) {\n', '        return a > b ? b : a;\n', '    }\n', '\n', '\n', '    ////////////////\n', '    // Test and contribution web app, NO audit is needed\n', '    ////////////////\n', '\n', '    /// @notice How many contributors we have.\n', '    /// @return Number of different contributor ethereum addresses\n', '    function getContributorsCount() view public returns (uint256) {\n', '        return contributorsKeys.length;\n', '    }\n', '\n', '    /// @notice Get contributor addresses to manage refunds or token claims.\n', '    /// @dev If the sale is not yet successful, then it searches in the RefundVault.\n', '    ///  If the sale is successful, it searches in contributors.\n', "    /// @param _pending If true, then returns addresses which didn't get their tokens distributed to them\n", '    /// @param _claimed If true, then returns already distributed addresses\n', '    /// @return Array of addresses of contributors\n', '    function getContributors(bool _pending, bool _claimed) view public returns (address[] contributors) {\n', '        uint256 i = 0;\n', '        uint256 results = 0;\n', '        address[] memory _contributors = new address[](contributorsKeys.length);\n', '\n', '        // search in contributors\n', '        for (i = 0; i < contributorsKeys.length; i++) {\n', '            if (_pending && stakes[contributorsKeys[i]] > 0 || _claimed && stakes[contributorsKeys[i]] == 0) {\n', '                _contributors[results] = contributorsKeys[i];\n', '                results++;\n', '            }\n', '        }\n', '\n', '        contributors = new address[](results);\n', '        for (i = 0; i < results; i++) {\n', '            contributors[i] = _contributors[i];\n', '        }\n', '\n', '        return contributors;\n', '    }\n', '\n', '    /// @notice How many HEAL tokens do this contract have\n', '    function getHealBalance() view public returns (uint256) {\n', '        return ethealController.ethealToken().balanceOf(address(this));\n', '    }\n', '\n', '    /// @notice Get current date for web3\n', '    function getNow() view public returns (uint256) {\n', '        return now;\n', '    }\n', '}']
