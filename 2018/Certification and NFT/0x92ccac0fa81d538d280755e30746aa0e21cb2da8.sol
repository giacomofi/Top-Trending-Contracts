['/*\n', 'Implements DET token standard ERC20\n', 'POWER BY DET\n', '.*/\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', 'contract EIP20Interface {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    // solhint-disable-next-line no-simple-event-func-name\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '// ERC2.0 代币\n', 'contract DET is EIP20Interface {\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    //创始者\n', '    address public god;\n', '    // 点卡余额\n', '    mapping (address => uint256) public balances;\n', '    // 点卡授权维护\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    //服务节点\n', '    struct ServiceStat {\n', '        address user;\n', '        uint64 serviceId;\n', '        string serviceName;\n', '        uint256 timestamp; \n', '    }\n', '\n', '    //每个用户状态状态\n', '    mapping (address => mapping (uint64 => ServiceStat)) public serviceStatMap;\n', '\n', '    //服务价格\n', '    struct ServiceConfig{\n', '        uint64 serviceId;\n', '        string serviceName;\n', '        uint256 price;\n', '        uint256 discount;\n', '        address fitAddr;\n', '        string detail;\n', '    }\n', '    //服务价格配置\n', '    mapping (uint64 => ServiceConfig) public serviceConfgMap;\n', '    mapping (uint64 => uint256) public serviceWin;\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show.\n', '    string public symbol;                 //An identifier: eg SBX\n', '    //兑换比例\n', '    uint256 public tokenPrice;\n', '    \n', '    //以下为ERC20的规范\n', '    constructor(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '    ) public {\n', '        god = msg.sender;\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        emit Transfer(_from, _to, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //以下为服务相关\n', '    function getMsgSender() public view returns(address sender){\n', '        return msg.sender;\n', '    }\n', '\n', '    //设置服务价格配置\n', '    function setConfig(uint64 _serviceId, string _serviceName, uint256 _price, uint256 _discount, address _fitAddr, string _desc) public returns (bool success){\n', '        require(msg.sender==god);\n', '        serviceConfgMap[_serviceId].serviceId = _serviceId;\n', '        serviceConfgMap[_serviceId].serviceName = _serviceName;\n', '        serviceConfgMap[_serviceId].price = _price;\n', '        serviceConfgMap[_serviceId].discount = _discount;\n', '        serviceConfgMap[_serviceId].fitAddr = _fitAddr;\n', '        serviceConfgMap[_serviceId].detail = _desc;\n', '        return true;\n', '    }\n', '\n', '    //获取服务价格\n', '    function configOf(uint64 _serviceId) public view returns (string serviceName, uint256 price, uint256 discount, address addr, string desc){\n', '        serviceName = serviceConfgMap[_serviceId].serviceName;\n', '        price = serviceConfgMap[_serviceId].price;\n', '        discount = serviceConfgMap[_serviceId].discount;\n', '        addr = serviceConfgMap[_serviceId].fitAddr;\n', '        desc = serviceConfgMap[_serviceId].detail;\n', '    }\n', '\n', '    //购买服务\n', '    function buyService(uint64 _serviceId,uint64 _count) public returns (uint256 cost, uint256 timestamp){\n', '        require(_count >= 1);\n', '        //计算多少点卡\n', '        //ServiceConfig storage config = serviceConfgMap[_serviceId];\n', '        cost = serviceConfgMap[_serviceId].price * serviceConfgMap[_serviceId].discount * _count / 100;\n', '        address fitAddr = serviceConfgMap[_serviceId].fitAddr;\n', '        //require(balances[msg.sender]>need);\n', '        if( transfer(fitAddr,cost ) == true ){\n', '            uint256 timeEx = serviceStatMap[msg.sender][_serviceId].timestamp;\n', '            if(timeEx == 0){\n', '                serviceStatMap[msg.sender][_serviceId].serviceId = _serviceId;\n', '                serviceStatMap[msg.sender][_serviceId].serviceName = serviceConfgMap[_serviceId].serviceName;\n', '                serviceStatMap[msg.sender][_serviceId].user = msg.sender;\n', '                serviceStatMap[msg.sender][_serviceId].timestamp = now + (_count * 86400);\n', '                serviceWin[_serviceId] += cost;\n', '                timestamp = serviceStatMap[msg.sender][_serviceId].timestamp;\n', '            }else{\n', '                if(timeEx < now){\n', '                    timeEx = now;\n', '                }\n', '                timeEx += (_count * 86400);\n', '                serviceStatMap[msg.sender][_serviceId].timestamp = timeEx;\n', '                timestamp = timeEx;\n', '            }\n', '        }else{\n', '            timestamp = 0;\n', '        }\n', '        \n', '    }\n', '\n', '    //购买服务\n', '    function buyServiceByAdmin(uint64 _serviceId,uint64 _count,address addr) public returns (uint256 cost, uint256 timestamp){\n', '        require(msg.sender==god);\n', '        require(_count >= 1);\n', '        //计算多少点卡\n', '        //ServiceConfig storage config = serviceConfgMap[_serviceId];\n', '        cost = serviceConfgMap[_serviceId].price * serviceConfgMap[_serviceId].discount * _count / 100;\n', '        address fitAddr = serviceConfgMap[_serviceId].fitAddr;\n', '        timestamp = 0;\n', '        require(balances[addr] >= cost);\n', '        balances[fitAddr] += cost;\n', '        balances[addr] -= cost;\n', '        emit Transfer(addr, fitAddr, cost); \n', '\n', '        uint256 timeEx = serviceStatMap[addr][_serviceId].timestamp;\n', '        if(timeEx == 0){\n', '            serviceStatMap[addr][_serviceId].serviceId = _serviceId;\n', '            serviceStatMap[addr][_serviceId].serviceName = serviceConfgMap[_serviceId].serviceName;\n', '            serviceStatMap[addr][_serviceId].user = addr;\n', '            serviceStatMap[addr][_serviceId].timestamp = now + (_count * 86400); \n', '            serviceWin[_serviceId] += cost;\n', '            timestamp = serviceStatMap[addr][_serviceId].timestamp;\n', '        }else{\n', '            if(timeEx < now){\n', '                timeEx = now;\n', '            }\n', '            timeEx += (_count * 86400);\n', '            serviceStatMap[addr][_serviceId].timestamp = timeEx;\n', '            timestamp = timeEx;\n', '        }    \n', '    }\n', '\n', '    //获取服务时长\n', '    function getServiceStat(uint64 _serviceId) public view returns (uint256 timestamp){\n', '        timestamp = serviceStatMap[msg.sender][_serviceId].timestamp;\n', '    }\n', '    \n', '    //获取服务时长\n', '    function getServiceStatByAddr(uint64 _serviceId,address addr) public view returns (uint256 timestamp){\n', '        require(msg.sender==god);\n', '        timestamp = serviceStatMap[addr][_serviceId].timestamp;\n', '    }\n', '\n', '    //admin\n', '    function getWin(uint64 _serviceId) public view returns (uint256 win){\n', '        require(msg.sender==god);\n', '        win = serviceWin[_serviceId];\n', '        return win;\n', '    }\n', '    //设置token price\n', '    function setPrice(uint256 _price) public returns (bool success){\n', '        require(msg.sender==god);\n', '        tokenPrice = _price;\n', '        return true;\n', '    }\n', '\n', '    //get token price\n', '    function getPrice() public view returns (uint256 _price){\n', '        require(msg.sender==god);\n', '        _price = tokenPrice;\n', '        return tokenPrice;\n', '    }\n', '}']