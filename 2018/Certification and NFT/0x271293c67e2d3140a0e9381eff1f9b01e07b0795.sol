['// proxy.sol - execute actions atomically through the proxy&#39;s identity\n', '\n', '// Copyright (C) 2017  DappHub, LLC\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '// DSProxyCache\n', '// This global cache stores addresses of contracts previously deployed\n', '// by a proxy. This saves gas from repeat deployment of the same\n', '// contracts and eliminates blockchain bloat.\n', '\n', '// By default, all proxies deployed from the same factory store\n', '// contracts in the same cache. The cache a proxy instance uses can be\n', '// changed.  The cache uses the sha3 hash of a contract&#39;s bytecode to\n', '// lookup the address\n', 'contract DSProxyCache {\n', '    mapping(bytes32 => address) cache;\n', '\n', '    function read(bytes _code) public view returns (address) {\n', '        bytes32 hash = keccak256(_code);\n', '        return cache[hash];\n', '    }\n', '\n', '    function write(bytes _code) public returns (address target) {\n', '        assembly {\n', '            target := create(0, add(_code, 0x20), mload(_code))\n', '            switch iszero(extcodesize(target))\n', '            case 1 {\n', '                // throw if contract failed to deploy\n', '                revert(0, 0)\n', '            }\n', '        }\n', '        bytes32 hash = keccak256(_code);\n', '        cache[hash] = target;\n', '    }\n', '}']