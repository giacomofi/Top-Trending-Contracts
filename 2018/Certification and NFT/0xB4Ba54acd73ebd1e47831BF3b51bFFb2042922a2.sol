['pragma solidity ^0.4.16;\n', '\n', '/**\n', ' * This contract specially developed for http://diceforslice.co\n', ' * \n', ' * What is it?\n', ' * This is a game that allows you to win an amount of ETH to your personal ethereum address.\n', ' * The possible winning depends on your stake and on amount of ETH in the bank.\n', ' *\n', ' * Wanna profit?\n', ' * Be a sponsor or referral - read more on http://diceforslice.co\n', ' *\n', ' * Win chances:\n', ' * 1 dice = 1/6\n', ' * 2 dice = 1/18\n', ' * 3 dice = 1/36\n', ' * 4 dice = 1/54\n', ' * 5 dice = 1/64\n', ' */\n', '\n', '/**\n', ' * Become a sponsor dude. (small update for you)\n', ' * I have exhausted the entire limit of my ETH.\n', ' */\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Math operations with safety checks that throw on error. Added: random and "float" divide for numbers\n', ' */\n', 'library Math {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', ' \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', ' \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', ' \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function divf(int256 numerator, int256 denominator, uint256 precision) internal pure returns(int256) {\n', '        int256 _numerator = numerator * int256(10 ** (precision + 1));\n', '        int256 _quotient  = ((_numerator / denominator) + 5) / 10;\n', '        return _quotient;\n', '    }\n', '\n', '    function percent(uint256 value, uint256 per) internal pure returns(uint256) {\n', '        return uint256((divf(int256(value), 100, 4) * int256(per)) / 10000);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Randomizer contract interface\n', ' */\n', 'contract Randomizer {\n', '    function getRandomNumber(int256 min, int256 max) public returns(int256);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev Check contract ownable for some admin operations\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    modifier onlyOwner()  { require(msg.sender == owner); _; }\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function updateContractOwner(address newOwner) external onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev General contract\n', ' */\n', 'contract DiceForSlice is Ownable {\n', '    // Contract events\n', '    event UserBet       (address user, uint8 number1, uint8 number2, uint8 number3, uint8 number4, uint8 number5);\n', '    event DiceRoll      (uint8 number1, uint8 number2, uint8 number3, uint8 number4, uint8 number5);\n', '    event Loser         (address loser);\n', '    event WeHaveAWinner (address winner, uint256 amount);\n', '    event OMGItIsJackPot(address winner);\n', '\n', '    // Address storage for referral system\n', '    mapping(address => uint256) private bets;\n', '\n', '    // Randomizer contract\n', '    Randomizer private rand;\n', '\n', '    // Sponsor data\n', '    address private sponsor;\n', '    uint256 private sponsorDiff  = 100000000000000000;\n', '    uint256 public sponsorValue  = 0;\n', '\n', '    // Current balances of contract\n', '    // -bank  - available reward value\n', '    // -stock - available value for restore bank in emergency\n', '    uint256 public bank          = 0;\n', '    uint256 public stock         = 0;\n', '\n', '    // Bet price\n', '    uint256 private betPrice     = 500000000000000000;\n', '\n', '    // Current bet split rules (in percent)\n', '    uint8   private partBank     = 55;\n', '    uint8   private partOwner    = 20;\n', '    uint8   private partSponsor  = 12;\n', '    uint8   private partStock    = 10;\n', '    uint8   private partReferral = 3;\n', '\n', '    // Current rewards (in percent from bank)\n', '    uint8   private rewardOne    = 10;\n', '    uint8   private rewardTwo    = 20;\n', '    uint8   private rewardThree  = 30;\n', '    uint8   private rewardFour   = 50;\n', '    uint8   private jackPot      = 100;\n', '\n', '    // Current number min max\n', '    uint8   private minNumber    = 1;\n', '    uint8   private maxNumber    = 6;\n', '\n', '    /**\n', '     * @dev Check is valid msg value\n', '     */\n', '    modifier isValidBet(uint8 reward) {\n', '        require(msg.value == Math.percent(betPrice, reward));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Ok. Enough. No contracts call allowed\n', '     * Become a sponsor dude.\n', '     */\n', '    modifier notFromContract() {\n', '        require(tx.origin == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Check bank not empty (empty is < betPrice eth)\n', '     */\n', '    modifier bankNotEmpty() {\n', '        require(bank >= Math.percent(betPrice, rewardTwo));\n', '        require(address(this).balance >= bank);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Set randomizer address\n', '     */\n', '    function setRandomizer(address _rand) external onlyOwner {\n', '        rand = Randomizer(_rand);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Special method for fill contract bank \n', '     */\n', '    function fillTheBank() public payable {\n', '        require(msg.value >= sponsorDiff);\n', '        if (msg.value >= sponsorValue + sponsorDiff) {\n', '            sponsorValue = msg.value;\n', '            sponsor      = msg.sender;\n', '        }\n', '        bank = Math.add(bank, msg.value);\n', '    }\n', '    \n', '    function() public payable {\n', '        fillTheBank();\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Restore value from stock\n', '     */\n', '    function appendStock(uint256 amount) external onlyOwner {\n', '        require(amount > 0);\n', '        require(stock >= amount);\n', '        bank  = Math.add(bank,  amount);\n', '        stock = Math.sub(stock, amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Get full contract balance\n', '     */\n', '    function getBalance() public view returns(uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Get random number\n', '     */\n', '    function getRN() private returns(uint8) {\n', '        return uint8(rand.getRandomNumber(minNumber, maxNumber + minNumber));\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Check is valid number\n', '     */\n', '    function isValidNumber(uint8 number) private view returns(bool) {\n', '        return number >= minNumber && number <= maxNumber;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Split user bet in some pieces:\n', '     * - 55% go to bank\n', '     * - 20% go to contract developer :)\n', '     * - 12% go to sponsor\n', '     * - 10% go to stock for future restores\n', '     * - 3%  go to referral (if exists, if not - go into stock)\n', '     */\n', '    function splitTheBet(address referral) private {\n', '        uint256 _partBank     = Math.percent(msg.value, partBank);\n', '        uint256 _partOwner    = Math.percent(msg.value, partOwner);\n', '        uint256 _partStock    = Math.percent(msg.value, partStock);\n', '        uint256 _partSponsor  = Math.percent(msg.value, partSponsor);\n', '        uint256 _partReferral = Math.percent(msg.value, partReferral);\n', '        \n', '        bank  = Math.add(bank,  _partBank);\n', '        stock = Math.add(stock, _partStock);\n', '        owner.transfer(_partOwner);\n', '        sponsor.transfer(_partSponsor);\n', '\n', '        if (referral != address(0) && referral != msg.sender && bets[referral] > 0) {\n', '            referral.transfer(_partReferral);\n', '        } else {\n', '            stock = Math.add(stock, _partReferral);\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Check the winner\n', '     */\n', '    function isWinner(uint8 required, uint8[5] numbers, uint8[5] randoms) private pure returns(bool) {\n', '        uint8 count = 0;\n', '        for (uint8 i = 0; i < numbers.length; i++) {\n', '            if (numbers[i] == 0) continue;\n', '            for (uint8 j = 0; j < randoms.length; j++) {\n', '                if (randoms[j] == 0) continue;\n', '                if (randoms[j] == numbers[i]) {\n', '                    count++;\n', '                    delete randoms[j];\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '        return count == required;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Reward the winner\n', '     */\n', '    function rewardTheWinner(uint8 reward) private {\n', '        uint256 rewardValue = Math.percent(bank, reward);\n', '        require(rewardValue <= getBalance());\n', '        require(rewardValue <= bank);\n', '        bank = Math.sub(bank, rewardValue);\n', '        msg.sender.transfer(rewardValue);\n', '        emit WeHaveAWinner(msg.sender, rewardValue);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Roll the dice for numbers\n', '     */\n', '    function rollOne(address referral, uint8 number)\n', '    external payable isValidBet(rewardOne) bankNotEmpty notFromContract {\n', '        require(isValidNumber(number));       \n', '        bets[msg.sender]++;\n', '\n', '        splitTheBet(referral);\n', '\n', '        uint8[5] memory numbers = [number,  0, 0, 0, 0];\n', '        uint8[5] memory randoms = [getRN(), 0, 0, 0, 0];\n', '\n', '        emit UserBet(msg.sender, number, 0, 0, 0, 0);\n', '        emit DiceRoll(randoms[0], 0, 0, 0, 0);\n', '        if (isWinner(1, numbers, randoms)) {\n', '            rewardTheWinner(rewardOne);\n', '        } else {\n', '            emit Loser(msg.sender);\n', '        }\n', '    }\n', '\n', '\n', '    function rollTwo(address referral, uint8 number1, uint8 number2)\n', '    external payable isValidBet(rewardTwo) bankNotEmpty notFromContract {\n', '        require(isValidNumber(number1) && isValidNumber(number2));\n', '        bets[msg.sender]++;\n', '\n', '        splitTheBet(referral);\n', '\n', '        uint8[5] memory numbers = [number1, number2, 0, 0, 0];\n', '        uint8[5] memory randoms = [getRN(), getRN(), 0, 0, 0];\n', '\n', '        emit UserBet(msg.sender, number1, number2, 0, 0, 0);\n', '        emit DiceRoll(randoms[0], randoms[1], 0, 0, 0);\n', '        if (isWinner(2, numbers, randoms)) {\n', '            rewardTheWinner(rewardTwo);\n', '        } else {\n', '            emit Loser(msg.sender);\n', '        }\n', '    }\n', '\n', '\n', '    function rollThree(address referral, uint8 number1, uint8 number2, uint8 number3)\n', '    external payable isValidBet(rewardThree) bankNotEmpty notFromContract {\n', '        require(isValidNumber(number1) && isValidNumber(number2) && isValidNumber(number3));\n', '        bets[msg.sender]++;\n', '\n', '        splitTheBet(referral);\n', '\n', '        uint8[5] memory numbers = [number1, number2, number3, 0, 0];\n', '        uint8[5] memory randoms = [getRN(), getRN(), getRN(), 0, 0];\n', '\n', '        emit UserBet(msg.sender, number1, number2, number3, 0, 0);\n', '        emit DiceRoll(randoms[0], randoms[1], randoms[2], 0, 0);\n', '        if (isWinner(3, numbers, randoms)) {\n', '            rewardTheWinner(rewardThree);\n', '        } else {\n', '            emit Loser(msg.sender);\n', '        }\n', '    }\n', '\n', '\n', '    function rollFour(address referral, uint8 number1, uint8 number2, uint8 number3, uint8 number4)\n', '    external payable isValidBet(rewardFour) bankNotEmpty notFromContract {\n', '        require(isValidNumber(number1) && isValidNumber(number2) && isValidNumber(number3) && isValidNumber(number4));\n', '        bets[msg.sender]++;\n', '\n', '        splitTheBet(referral);\n', '\n', '        uint8[5] memory numbers = [number1, number2, number3, number4, 0];\n', '        uint8[5] memory randoms = [getRN(), getRN(), getRN(), getRN(), 0];\n', '\n', '        emit UserBet(msg.sender, number1, number2, number3, number4, 0);\n', '        emit DiceRoll(randoms[0], randoms[1], randoms[2], randoms[3], 0);\n', '        if (isWinner(4, numbers, randoms)) {\n', '            rewardTheWinner(rewardFour);\n', '        } else {\n', '            emit Loser(msg.sender);\n', '        }\n', '    }\n', '\n', '\n', '    function rollFive(address referral, uint8 number1, uint8 number2, uint8 number3, uint8 number4, uint8 number5)\n', '    external payable isValidBet(jackPot) bankNotEmpty notFromContract {\n', '        require(isValidNumber(number1) && isValidNumber(number2) && isValidNumber(number3) && isValidNumber(number4) && isValidNumber(number5));\n', '        bets[msg.sender]++;\n', '\n', '        splitTheBet(referral);\n', '\n', '        uint8[5] memory numbers = [number1, number2, number3, number4, number5];\n', '        uint8[5] memory randoms = [getRN(), getRN(), getRN(), getRN(), getRN()];\n', '\n', '        emit UserBet(msg.sender, number1, number2, number3, number4, number5);\n', '        emit DiceRoll(randoms[0], randoms[1], randoms[2], randoms[3], randoms[4]);\n', '        if (isWinner(5, numbers, randoms)) {\n', '            rewardTheWinner(jackPot);\n', '            emit OMGItIsJackPot(msg.sender);\n', '        } else {\n', '            emit Loser(msg.sender);\n', '        }\n', '    }\n', '}']