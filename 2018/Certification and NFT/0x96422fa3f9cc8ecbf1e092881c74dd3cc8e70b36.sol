['pragma solidity 0.4.24;\n', '\n', '// File: contracts/lib/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "only owner is able to call this function");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist - crowdsale whitelist contract\n', ' * @author Gustavo Guimaraes - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="620517111603140d2211160310000311074c010d">[email&#160;protected]</a>>\n', ' */\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) public allowedAddresses;\n', '\n', '    event WhitelistUpdated(uint256 timestamp, string operation, address indexed member);\n', '\n', '    /**\n', '    * @dev Adds single address to whitelist.\n', '    * @param _address Address to be added to the whitelist\n', '    */\n', '    function addToWhitelist(address _address) external onlyOwner {\n', '        allowedAddresses[_address] = true;\n', '        emit WhitelistUpdated(now, "Added", _address);\n', '    }\n', '\n', '    /**\n', '     * @dev add various whitelist addresses\n', '     * @param _addresses Array of ethereum addresses\n', '     */\n', '    function addManyToWhitelist(address[] _addresses) external onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = true;\n', '            emit WhitelistUpdated(now, "Added", _addresses[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev remove whitelist addresses\n', '     * @param _addresses Array of ethereum addresses\n', '     */\n', '    function removeManyFromWhitelist(address[] _addresses) public onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = false;\n', '            emit WhitelistUpdated(now, "Removed", _addresses[i]);\n', '        }\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: contracts/lib/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "only owner is able to call this function");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist - crowdsale whitelist contract\n', ' * @author Gustavo Guimaraes - <gustavo@starbase.co>\n', ' */\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) public allowedAddresses;\n', '\n', '    event WhitelistUpdated(uint256 timestamp, string operation, address indexed member);\n', '\n', '    /**\n', '    * @dev Adds single address to whitelist.\n', '    * @param _address Address to be added to the whitelist\n', '    */\n', '    function addToWhitelist(address _address) external onlyOwner {\n', '        allowedAddresses[_address] = true;\n', '        emit WhitelistUpdated(now, "Added", _address);\n', '    }\n', '\n', '    /**\n', '     * @dev add various whitelist addresses\n', '     * @param _addresses Array of ethereum addresses\n', '     */\n', '    function addManyToWhitelist(address[] _addresses) external onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = true;\n', '            emit WhitelistUpdated(now, "Added", _addresses[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev remove whitelist addresses\n', '     * @param _addresses Array of ethereum addresses\n', '     */\n', '    function removeManyFromWhitelist(address[] _addresses) public onlyOwner {\n', '        for (uint256 i = 0; i < _addresses.length; i++) {\n', '            allowedAddresses[_addresses[i]] = false;\n', '            emit WhitelistUpdated(now, "Removed", _addresses[i]);\n', '        }\n', '    }\n', '}']
