['pragma solidity 0.4.19;\n', '\n', '// File: contracts/SaleInterfaceForAllocations.sol\n', '\n', 'contract SaleInterfaceForAllocations {\n', '\n', '    //function from Sale.sol\n', '    function allocateTokens(address _contributor) external;\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/TokenAllocator.sol\n', '\n', 'contract TokenAllocator is Ownable {\n', '\n', '    SaleInterfaceForAllocations public sale;\n', '\n', '    //constructor\n', '    function TokenAllocator(SaleInterfaceForAllocations _sale) public {\n', '        sale = _sale;\n', '    }\n', '\n', '    //allow the sale to be changed for single deployment\n', '    function updateSale(SaleInterfaceForAllocations _sale) external onlyOwner {\n', '        sale = _sale;\n', '    }\n', '\n', '    //function to allocate tokens for a set of contributors\n', '    function allocateTokens(address[] _contributors) external {\n', '        for (uint256 i = 0; i < _contributors.length; i++) {\n', '            sale.allocateTokens(_contributors[i]);\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity 0.4.19;\n', '\n', '// File: contracts/SaleInterfaceForAllocations.sol\n', '\n', 'contract SaleInterfaceForAllocations {\n', '\n', '    //function from Sale.sol\n', '    function allocateTokens(address _contributor) external;\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/TokenAllocator.sol\n', '\n', 'contract TokenAllocator is Ownable {\n', '\n', '    SaleInterfaceForAllocations public sale;\n', '\n', '    //constructor\n', '    function TokenAllocator(SaleInterfaceForAllocations _sale) public {\n', '        sale = _sale;\n', '    }\n', '\n', '    //allow the sale to be changed for single deployment\n', '    function updateSale(SaleInterfaceForAllocations _sale) external onlyOwner {\n', '        sale = _sale;\n', '    }\n', '\n', '    //function to allocate tokens for a set of contributors\n', '    function allocateTokens(address[] _contributors) external {\n', '        for (uint256 i = 0; i < _contributors.length; i++) {\n', '            sale.allocateTokens(_contributors[i]);\n', '        }\n', '    }\n', '\n', '}']
