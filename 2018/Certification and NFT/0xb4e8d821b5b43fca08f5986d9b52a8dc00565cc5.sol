['pragma solidity ^0.4.17;\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Application Entity Generic Contract\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', '    Used for the ABI interface when assets need to call Application Entity.\n', '\n', '    This is required, otherwise we end up loading the assets themselves when we load the ApplicationEntity contract\n', '    and end up in a loop\n', '*/\n', '\n', '\n', '\n', 'contract ApplicationEntityABI {\n', '\n', '    address public ProposalsEntity;\n', '    address public FundingEntity;\n', '    address public MilestonesEntity;\n', '    address public MeetingsEntity;\n', '    address public BountyManagerEntity;\n', '    address public TokenManagerEntity;\n', '    address public ListingContractEntity;\n', '    address public FundingManagerEntity;\n', '    address public NewsContractEntity;\n', '\n', '    bool public _initialized = false;\n', '    bool public _locked = false;\n', '    uint8 public CurrentEntityState;\n', '    uint8 public AssetCollectionNum;\n', '    address public GatewayInterfaceAddress;\n', '    address public deployerAddress;\n', '    address testAddressAllowUpgradeFrom;\n', '    mapping (bytes32 => uint8) public EntityStates;\n', '    mapping (bytes32 => address) public AssetCollection;\n', '    mapping (uint8 => bytes32) public AssetCollectionIdToName;\n', '    mapping (bytes32 => uint256) public BylawsUint256;\n', '    mapping (bytes32 => bytes32) public BylawsBytes32;\n', '\n', '    function ApplicationEntity() public;\n', '    function getEntityState(bytes32 name) public view returns (uint8);\n', '    function linkToGateway( address _GatewayInterfaceAddress, bytes32 _sourceCodeUrl ) external;\n', '    function setUpgradeState(uint8 state) public ;\n', '    function addAssetProposals(address _assetAddresses) external;\n', '    function addAssetFunding(address _assetAddresses) external;\n', '    function addAssetMilestones(address _assetAddresses) external;\n', '    function addAssetMeetings(address _assetAddresses) external;\n', '    function addAssetBountyManager(address _assetAddresses) external;\n', '    function addAssetTokenManager(address _assetAddresses) external;\n', '    function addAssetFundingManager(address _assetAddresses) external;\n', '    function addAssetListingContract(address _assetAddresses) external;\n', '    function addAssetNewsContract(address _assetAddresses) external;\n', '    function getAssetAddressByName(bytes32 _name) public view returns (address);\n', '    function setBylawUint256(bytes32 name, uint256 value) public;\n', '    function getBylawUint256(bytes32 name) public view returns (uint256);\n', '    function setBylawBytes32(bytes32 name, bytes32 value) public;\n', '    function getBylawBytes32(bytes32 name) public view returns (bytes32);\n', '    function initialize() external returns (bool);\n', '    function getParentAddress() external view returns(address);\n', '    function createCodeUpgradeProposal( address _newAddress, bytes32 _sourceCodeUrl ) external returns (uint256);\n', '    function acceptCodeUpgradeProposal(address _newAddress) external;\n', '    function initializeAssetsToThisApplication() external returns (bool);\n', '    function transferAssetsToNewApplication(address _newAddress) external returns (bool);\n', '    function lock() external returns (bool);\n', '    function canInitiateCodeUpgrade(address _sender) public view returns(bool);\n', '    function doStateChanges() public;\n', '    function hasRequiredStateChanges() public view returns (bool);\n', '    function anyAssetHasChanges() public view returns (bool);\n', '    function extendedAnyAssetHasChanges() internal view returns (bool);\n', '    function getRequiredStateChanges() public view returns (uint8, uint8);\n', '    function getTimestamp() view public returns (uint256);\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Application Asset Contract\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Any contract inheriting this will be usable as an Asset in the Application Entity\n', '\n', '*/\n', '\n', '\n', '\n', '\n', 'contract ApplicationAsset {\n', '\n', '    event EventAppAssetOwnerSet(bytes32 indexed _name, address indexed _owner);\n', '    event EventRunBeforeInit(bytes32 indexed _name);\n', '    event EventRunBeforeApplyingSettings(bytes32 indexed _name);\n', '\n', '\n', '    mapping (bytes32 => uint8) public EntityStates;\n', '    mapping (bytes32 => uint8) public RecordStates;\n', '    uint8 public CurrentEntityState;\n', '\n', '    event EventEntityProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);\n', '    event DebugEntityRequiredChanges( bytes32 _assetName, uint8 indexed _current, uint8 indexed _required );\n', '\n', '    bytes32 public assetName;\n', '\n', '    /* Asset records */\n', '    uint8 public RecordNum = 0;\n', '\n', '    /* Asset initialised or not */\n', '    bool public _initialized = false;\n', '\n', '    /* Asset settings present or not */\n', '    bool public _settingsApplied = false;\n', '\n', '    /* Asset owner ( ApplicationEntity address ) */\n', '    address public owner = address(0x0) ;\n', '    address public deployerAddress;\n', '\n', '    function ApplicationAsset() public {\n', '        deployerAddress = msg.sender;\n', '    }\n', '\n', '    function setInitialApplicationAddress(address _ownerAddress) public onlyDeployer requireNotInitialised {\n', '        owner = _ownerAddress;\n', '    }\n', '\n', '    function setInitialOwnerAndName(bytes32 _name) external\n', '        requireNotInitialised\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        // init states\n', '        setAssetStates();\n', '        assetName = _name;\n', '        // set initial state\n', '        CurrentEntityState = getEntityState("NEW");\n', '        runBeforeInitialization();\n', '        _initialized = true;\n', '        EventAppAssetOwnerSet(_name, owner);\n', '        return true;\n', '    }\n', '\n', '    function setAssetStates() internal {\n', '        // Asset States\n', '        EntityStates["__IGNORED__"]     = 0;\n', '        EntityStates["NEW"]             = 1;\n', '        // Funding Stage States\n', '        RecordStates["__IGNORED__"]     = 0;\n', '    }\n', '\n', '    function getRecordState(bytes32 name) public view returns (uint8) {\n', '        return RecordStates[name];\n', '    }\n', '\n', '    function getEntityState(bytes32 name) public view returns (uint8) {\n', '        return EntityStates[name];\n', '    }\n', '\n', '    function runBeforeInitialization() internal requireNotInitialised  {\n', '        EventRunBeforeInit(assetName);\n', '    }\n', '\n', '    function applyAndLockSettings()\n', '        public\n', '        onlyDeployer\n', '        requireInitialised\n', '        requireSettingsNotApplied\n', '        returns(bool)\n', '    {\n', '        runBeforeApplyingSettings();\n', '        _settingsApplied = true;\n', '        return true;\n', '    }\n', '\n', '    function runBeforeApplyingSettings() internal requireInitialised requireSettingsNotApplied  {\n', '        EventRunBeforeApplyingSettings(assetName);\n', '    }\n', '\n', '    function transferToNewOwner(address _newOwner) public requireInitialised onlyOwner returns (bool) {\n', '        require(owner != address(0x0) && _newOwner != address(0x0));\n', '        owner = _newOwner;\n', '        EventAppAssetOwnerSet(assetName, owner);\n', '        return true;\n', '    }\n', '\n', '    function getApplicationAssetAddressByName(bytes32 _name)\n', '        public\n', '        view\n', '        returns(address)\n', '    {\n', '        address asset = ApplicationEntityABI(owner).getAssetAddressByName(_name);\n', '        if( asset != address(0x0) ) {\n', '            return asset;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function getApplicationState() public view returns (uint8) {\n', '        return ApplicationEntityABI(owner).CurrentEntityState();\n', '    }\n', '\n', '    function getApplicationEntityState(bytes32 name) public view returns (uint8) {\n', '        return ApplicationEntityABI(owner).getEntityState(name);\n', '    }\n', '\n', '    function getAppBylawUint256(bytes32 name) public view requireInitialised returns (uint256) {\n', '        ApplicationEntityABI CurrentApp = ApplicationEntityABI(owner);\n', '        return CurrentApp.getBylawUint256(name);\n', '    }\n', '\n', '    function getAppBylawBytes32(bytes32 name) public view requireInitialised returns (bytes32) {\n', '        ApplicationEntityABI CurrentApp = ApplicationEntityABI(owner);\n', '        return CurrentApp.getBylawBytes32(name);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyApplicationEntity() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier requireInitialised() {\n', '        require(_initialized == true);\n', '        _;\n', '    }\n', '\n', '    modifier requireNotInitialised() {\n', '        require(_initialized == false);\n', '        _;\n', '    }\n', '\n', '    modifier requireSettingsApplied() {\n', '        require(_settingsApplied == true);\n', '        _;\n', '    }\n', '\n', '    modifier requireSettingsNotApplied() {\n', '        require(_settingsApplied == false);\n', '        _;\n', '    }\n', '\n', '    modifier onlyDeployer() {\n', '        require(msg.sender == deployerAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAsset(bytes32 _name) {\n', '        address AssetAddress = getApplicationAssetAddressByName(_name);\n', '        require( msg.sender == AssetAddress);\n', '        _;\n', '    }\n', '\n', '    function getTimestamp() view public returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Application Asset Contract ABI\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Any contract inheriting this will be usable as an Asset in the Application Entity\n', '\n', '*/\n', '\n', '\n', '\n', 'contract ABIApplicationAsset {\n', '\n', '    bytes32 public assetName;\n', '    uint8 public CurrentEntityState;\n', '    uint8 public RecordNum;\n', '    bool public _initialized;\n', '    bool public _settingsApplied;\n', '    address public owner;\n', '    address public deployerAddress;\n', '    mapping (bytes32 => uint8) public EntityStates;\n', '    mapping (bytes32 => uint8) public RecordStates;\n', '\n', '    function setInitialApplicationAddress(address _ownerAddress) public;\n', '    function setInitialOwnerAndName(bytes32 _name) external returns (bool);\n', '    function getRecordState(bytes32 name) public view returns (uint8);\n', '    function getEntityState(bytes32 name) public view returns (uint8);\n', '    function applyAndLockSettings() public returns(bool);\n', '    function transferToNewOwner(address _newOwner) public returns (bool);\n', '    function getApplicationAssetAddressByName(bytes32 _name) public returns(address);\n', '    function getApplicationState() public view returns (uint8);\n', '    function getApplicationEntityState(bytes32 name) public view returns (uint8);\n', '    function getAppBylawUint256(bytes32 name) public view returns (uint256);\n', '    function getAppBylawBytes32(bytes32 name) public view returns (bytes32);\n', '    function getTimestamp() view public returns (uint256);\n', '\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Funding Contract ABI\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Contains the Funding Contract code deployed and linked to the Application Entity\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract ABIFundingManager is ABIApplicationAsset {\n', '\n', '    bool public fundingProcessed;\n', '    bool FundingPoolBalancesAllocated;\n', '    uint8 public VaultCountPerProcess;\n', '    uint256 public lastProcessedVaultId;\n', '    uint256 public vaultNum;\n', '    uint256 public LockedVotingTokens;\n', '    bytes32 public currentTask;\n', '    mapping (bytes32 => bool) public taskByHash;\n', '    mapping  (address => address) public vaultList;\n', '    mapping  (uint256 => address) public vaultById;\n', '\n', '    function receivePayment(address _sender, uint8 _payment_method, uint8 _funding_stage) payable public returns(bool);\n', '    function getMyVaultAddress(address _sender) public view returns (address);\n', '    function setVaultCountPerProcess(uint8 _perProcess) external;\n', '    function getHash(bytes32 actionType, bytes32 arg1) public pure returns ( bytes32 );\n', '    function getCurrentMilestoneProcessed() public view returns (bool);\n', '    function processFundingFailedFinished() public view returns (bool);\n', '    function processFundingSuccessfulFinished() public view returns (bool);\n', '    function getCurrentMilestoneIdHash() internal view returns (bytes32);\n', '    function processMilestoneFinished() public view returns (bool);\n', '    function processEmergencyFundReleaseFinished() public view returns (bool);\n', '    function getAfterTransferLockedTokenBalances(address vaultAddress, bool excludeCurrent) public view returns (uint256);\n', '    function VaultRequestedUpdateForLockedVotingTokens(address owner) public;\n', '    function doStateChanges() public;\n', '    function hasRequiredStateChanges() public view returns (bool);\n', '    function getRequiredStateChanges() public view returns (uint8, uint8);\n', '    function ApplicationInFundingOrDevelopment() public view returns(bool);\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Meetings Contract ABI\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Contains the Meetings Contract code deployed and linked to the Application Entity\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract ABIMeetings is ABIApplicationAsset {\n', '    struct Record {\n', '        bytes32 hash;\n', '        bytes32 name;\n', '        uint8 state;\n', '        uint256 time_start;                     // start at unixtimestamp\n', '        uint256 duration;\n', '        uint8 index;\n', '    }\n', '    mapping (uint8 => Record) public Collection;\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Proposals Contract\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Contains the Proposals Contract code deployed and linked to the Application Entity\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract ABIProposals is ABIApplicationAsset {\n', '\n', '    address public Application;\n', '    address public ListingContractEntity;\n', '    address public FundingEntity;\n', '    address public FundingManagerEntity;\n', '    address public TokenManagerEntity;\n', '    address public TokenEntity;\n', '    address public MilestonesEntity;\n', '\n', '    struct ProposalRecord {\n', '        address creator;\n', '        bytes32 name;\n', '        uint8 actionType;\n', '        uint8 state;\n', '        bytes32 hash;                       // action name + args hash\n', '        address addr;\n', '        bytes32 sourceCodeUrl;\n', '        uint256 extra;\n', '        uint256 time_start;\n', '        uint256 time_end;\n', '        uint256 index;\n', '    }\n', '\n', '    struct VoteStruct {\n', '        address voter;\n', '        uint256 time;\n', '        bool    vote;\n', '        uint256 power;\n', '        bool    annulled;\n', '        uint256 index;\n', '    }\n', '\n', '    struct ResultRecord {\n', '        uint256 totalAvailable;\n', '        uint256 requiredForResult;\n', '        uint256 totalSoFar;\n', '        uint256 yes;\n', '        uint256 no;\n', '        bool    requiresCounting;\n', '    }\n', '\n', '    uint8 public ActiveProposalNum;\n', '    uint256 public VoteCountPerProcess;\n', '    bool public EmergencyFundingReleaseApproved;\n', '\n', '    mapping (bytes32 => uint8) public ActionTypes;\n', '    mapping (uint8 => uint256) public ActiveProposalIds;\n', '    mapping (uint256 => bool) public ExpiredProposalIds;\n', '    mapping (uint256 => ProposalRecord) public ProposalsById;\n', '    mapping (bytes32 => uint256) public ProposalIdByHash;\n', '    mapping (uint256 => mapping (uint256 => VoteStruct) ) public VotesByProposalId;\n', '    mapping (uint256 => mapping (address => VoteStruct) ) public VotesByCaster;\n', '    mapping (uint256 => uint256) public VotesNumByProposalId;\n', '    mapping (uint256 => ResultRecord ) public ResultsByProposalId;\n', '    mapping (uint256 => uint256) public lastProcessedVoteIdByProposal;\n', '    mapping (uint256 => uint256) public ProcessedVotesByProposal;\n', '    mapping (uint256 => uint256) public VoteCountAtProcessingStartByProposal;\n', '\n', '    function getRecordState(bytes32 name) public view returns (uint8);\n', '    function getActionType(bytes32 name) public view returns (uint8);\n', '    function getProposalState(uint256 _proposalId) public view returns (uint8);\n', '    function getBylawsProposalVotingDuration() public view returns (uint256);\n', '    function getBylawsMilestoneMinPostponing() public view returns (uint256);\n', '    function getBylawsMilestoneMaxPostponing() public view returns (uint256);\n', '    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 );\n', '    function process() public;\n', '    function hasRequiredStateChanges() public view returns (bool);\n', '    function getRequiredStateChanges() public view returns (uint8);\n', '    function addCodeUpgradeProposal(address _addr, bytes32 _sourceCodeUrl) external returns (uint256);\n', '    function createMilestoneAcceptanceProposal() external returns (uint256);\n', '    function createMilestonePostponingProposal(uint256 _duration) external returns (uint256);\n', '    function getCurrentMilestonePostponingProposalDuration() public view returns (uint256);\n', '    function getCurrentMilestoneProposalStatusForType(uint8 _actionType ) public view returns (uint8);\n', '    function createEmergencyFundReleaseProposal() external returns (uint256);\n', '    function createDelistingProposal(uint256 _projectId) external returns (uint256);\n', '    function RegisterVote(uint256 _proposalId, bool _myVote) public;\n', '    function hasPreviousVote(uint256 _proposalId, address _voter) public view returns (bool);\n', '    function getTotalTokenVotingPower(address _voter) public view returns ( uint256 );\n', '    function getVotingPower(uint256 _proposalId, address _voter) public view returns ( uint256 );\n', '    function setVoteCountPerProcess(uint256 _perProcess) external;\n', '    function ProcessVoteTotals(uint256 _proposalId, uint256 length) public;\n', '    function canEndVoting(uint256 _proposalId) public view returns (bool);\n', '    function getProposalType(uint256 _proposalId) public view returns (uint8);\n', '    function expiryChangesState(uint256 _proposalId) public view returns (bool);\n', '    function needsProcessing(uint256 _proposalId) public view returns (bool);\n', '    function getMyVoteForCurrentMilestoneRelease(address _voter) public view returns (bool);\n', '    function getHasVoteForCurrentMilestoneRelease(address _voter) public view returns (bool);\n', '    function getMyVote(uint256 _proposalId, address _voter) public view returns (bool);\n', '\n', '}\n', '\n', '/*\n', '\n', ' * source       https://github.com/blockbitsio/\n', '\n', ' * @name        Milestones Contract\n', ' * @package     BlockBitsIO\n', ' * @author      Micky Socaci <micky@nowlive.ro>\n', '\n', ' Contains the Milestones Contract code deployed and linked to the Application Entity\n', '\n', '*/\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Milestones is ApplicationAsset {\n', '\n', '    ABIFundingManager FundingManagerEntity;\n', '    ABIProposals ProposalsEntity;\n', '    ABIMeetings MeetingsEntity;\n', '\n', '    struct Record {\n', '        bytes32 name;\n', '        string description;                     // will change to hash pointer ( external storage )\n', '        uint8 state;\n', '        uint256 duration;\n', '        uint256 time_start;                     // start at unixtimestamp\n', '        uint256 last_state_change_time;         // time of last state change\n', '        uint256 time_end;                       // estimated end time >> can be increased by proposal\n', '        uint256 time_ended;                     // actual end time\n', '        uint256 meeting_time;\n', '        uint8 funding_percentage;\n', '        uint8 index;\n', '    }\n', '\n', '    mapping (uint8 => Record) public Collection;\n', '    uint8 public currentRecord = 1;\n', '\n', '    event DebugRecordRequiredChanges( bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required );\n', '    event DebugCallAgain(uint8 indexed _who);\n', '\n', '    event EventEntityProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);\n', '    event EventRecordProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);\n', '\n', '    event DebugAction(bytes32 indexed _name, bool indexed _allowed);\n', '\n', '\n', '    function setAssetStates() internal {\n', '\n', '        // Contract States\n', '        EntityStates["__IGNORED__"]                  = 0;\n', '        EntityStates["NEW"]                          = 1;\n', '        EntityStates["WAITING"]                      = 2;\n', '\n', '        EntityStates["IN_DEVELOPMENT"]               = 5;\n', '\n', '        EntityStates["WAITING_MEETING_TIME"]         = 10;\n', '        EntityStates["DEADLINE_MEETING_TIME_YES"]    = 11;\n', '        EntityStates["DEADLINE_MEETING_TIME_FAILED"] = 12;\n', '\n', '        EntityStates["VOTING_IN_PROGRESS"]           = 20;\n', '        // EntityStates["VOTING_ENDED"]              = 21;\n', '        EntityStates["VOTING_ENDED_YES"]             = 22;\n', '        EntityStates["VOTING_ENDED_NO"]              = 23;\n', '        EntityStates["VOTING_ENDED_NO_FINAL"]        = 25;\n', '\n', '        EntityStates["VOTING_FUNDS_PROCESSED"]       = 30;\n', '        EntityStates["FINAL"]                        = 50;\n', '\n', '        EntityStates["CASHBACK_OWNER_MIA"]           = 99;\n', '        EntityStates["DEVELOPMENT_COMPLETE"]         = 250;\n', '\n', '        // Funding Stage States\n', '        RecordStates["__IGNORED__"]     = 0;\n', '        RecordStates["NEW"]             = 1;\n', '        RecordStates["IN_PROGRESS"]     = 2;\n', '        RecordStates["FINAL"]           = 3;\n', '    }\n', '\n', '    function runBeforeInitialization() internal requireNotInitialised {\n', "        FundingManagerEntity = ABIFundingManager( getApplicationAssetAddressByName('FundingManager') );\n", "        MeetingsEntity = ABIMeetings( getApplicationAssetAddressByName('Meetings') );\n", "        ProposalsEntity = ABIProposals( getApplicationAssetAddressByName('Proposals') );\n", '        EventRunBeforeInit(assetName);\n', '    }\n', '\n', '    function runBeforeApplyingSettings() internal requireInitialised requireSettingsNotApplied  {\n', '        // setup first milestone\n', '        Record storage rec = Collection[currentRecord];\n', '            rec.time_start = getBylawsProjectDevelopmentStart();\n', '            rec.time_end = rec.time_start + rec.duration;\n', '        EventRunBeforeApplyingSettings(assetName);\n', '    }\n', '\n', '    function getBylawsProjectDevelopmentStart() public view returns (uint256) {\n', '        return getAppBylawUint256("development_start");\n', '    }\n', '\n', '    function getBylawsMinTimeInTheFutureForMeetingCreation() public view returns (uint256) {\n', '        return getAppBylawUint256("meeting_time_set_req");\n', '    }\n', '\n', '    function getBylawsCashBackVoteRejectedDuration() public view returns (uint256) {\n', '        return getAppBylawUint256("cashback_investor_no");\n', '    }\n', '\n', '    /*\n', '    * Add Record\n', '    *\n', '    * @param        bytes32 _name\n', '    * @param        string _description\n', '    * @param        uint256 _duration\n', '    * @param        uint256 _funding_percentage\n', '    *\n', '    * @access       public\n', '    * @type         method\n', '    * @modifiers    onlyDeployer, requireNotInitialised\n', '    */\n', '    function addRecord(\n', '        bytes32 _name,\n', '        string _description,\n', '        uint256 _duration,\n', '        uint8   _perc\n', '    )\n', '        public\n', '        onlyDeployer\n', '        requireSettingsNotApplied\n', '    {\n', '\n', '        Record storage rec = Collection[++RecordNum];\n', '\n', '        rec.name                = _name;\n', '        rec.description         = _description;\n', '        rec.duration            = _duration;\n', '        rec.funding_percentage  = _perc;\n', '        rec.state               = getRecordState("NEW");\n', '        rec.index               = RecordNum;\n', '    }\n', '\n', '    function getMilestoneFundingPercentage(uint8 recordId) public view returns (uint8){\n', '        return Collection[recordId].funding_percentage;\n', '    }\n', '\n', '    function doStateChanges() public {\n', '\n', '        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n', '        bool callAgain = false;\n', '\n', '        DebugRecordRequiredChanges( assetName, CurrentRecordState, RecordStateRequired );\n', '        DebugEntityRequiredChanges( assetName, CurrentEntityState, EntityStateRequired );\n', '\n', '        if( RecordStateRequired != getRecordState("__IGNORED__") ) {\n', '            // process record changes.\n', '            RecordProcessor(CurrentRecordState, RecordStateRequired);\n', '            DebugCallAgain(2);\n', '            callAgain = true;\n', '        }\n', '\n', '        if(EntityStateRequired != getEntityState("__IGNORED__") ) {\n', '            // process entity changes.\n', '            EntityProcessor(EntityStateRequired);\n', '            DebugCallAgain(1);\n', '            callAgain = true;\n', '        }\n', '\n', '\n', '    }\n', '\n', '    function MilestonesCanChange() internal view returns (bool) {\n', '        if(\n', '            CurrentEntityState == getEntityState("WAITING") ||\n', '            CurrentEntityState == getEntityState("IN_DEVELOPMENT") ||\n', '            CurrentEntityState == getEntityState("VOTING_FUNDS_PROCESSED")\n', '        ) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '\n', '    /*\n', '     * Method: Get Record Required State Changes\n', '     *\n', '     * @access       public\n', '     * @type         method\n', '     *\n', '     * @return       uint8 RecordStateRequired\n', '     */\n', '    function getRecordStateRequiredChanges() public view returns (uint8) {\n', '        Record memory record = Collection[currentRecord];\n', '        uint8 RecordStateRequired = getRecordState("__IGNORED__");\n', '\n', '        if( ApplicationIsInDevelopment() && MilestonesCanChange() ) {\n', '\n', '            if( record.state == getRecordState("NEW") ) {\n', '\n', '                if( getTimestamp() >= record.time_start ) {\n', '                    RecordStateRequired = getRecordState("IN_PROGRESS");\n', '                }\n', '\n', '            } else if( record.state == getRecordState("IN_PROGRESS") ) {\n', '\n', '                if( getTimestamp() >= record.time_end || ( getTimestamp() >= record.meeting_time && record.meeting_time > 0 ) ) {\n', '                    RecordStateRequired = getRecordState("FINAL");\n', '                }\n', '            }\n', '\n', '            if( record.state == RecordStateRequired ) {\n', '                RecordStateRequired = getRecordState("__IGNORED__");\n', '            }\n', '        }\n', '        return RecordStateRequired;\n', '    }\n', '\n', '\n', '    function hasRequiredStateChanges() public view returns (bool) {\n', '        bool hasChanges = false;\n', '        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n', '        CurrentRecordState = 0;\n', '\n', '        if( RecordStateRequired != getRecordState("__IGNORED__") ) {\n', '            hasChanges = true;\n', '        }\n', '        if(EntityStateRequired != getEntityState("__IGNORED__") ) {\n', '            hasChanges = true;\n', '        }\n', '\n', '        return hasChanges;\n', '    }\n', '\n', '    // view methods decide if changes are to be made\n', '    // in case of tasks, we do them in the Processors.\n', '\n', '    function RecordProcessor(uint8 CurrentRecordState, uint8 RecordStateRequired) internal {\n', '        EventRecordProcessor( assetName, CurrentRecordState, RecordStateRequired );\n', '        updateRecord( RecordStateRequired );\n', '    }\n', '\n', '\n', '    function EntityProcessor(uint8 EntityStateRequired) internal {\n', '        EventEntityProcessor( assetName, CurrentEntityState, EntityStateRequired );\n', '\n', '        // Do State Specific Updates\n', '        // Update our Entity State\n', '        CurrentEntityState = EntityStateRequired;\n', '\n', '        if ( CurrentEntityState == getEntityState("DEADLINE_MEETING_TIME_YES") ) {\n', '            // create meeting\n', '            // Meetings.create("internal", "MILESTONE_END", "");\n', '\n', '        } else if( CurrentEntityState == getEntityState("VOTING_IN_PROGRESS") ) {\n', '            // create proposal and start voting on it\n', '            createMilestoneAcceptanceProposal();\n', '\n', '        } else if( CurrentEntityState == getEntityState("WAITING_MEETING_TIME") ) {\n', '\n', '            PostponeMeetingIfApproved();\n', '\n', '        } else if( CurrentEntityState == getEntityState("VOTING_ENDED_YES") ) {\n', '\n', '        } else if( CurrentEntityState == getEntityState("VOTING_ENDED_NO") ) {\n', '\n', '            // possible cashback time starts from now\n', '            MilestoneCashBackTime = getTimestamp();\n', '\n', '        } else if( CurrentEntityState == getEntityState("VOTING_FUNDS_PROCESSED") ) {\n', '            MilestoneCashBackTime = 0;\n', '            startNextMilestone();\n', '        }\n', '\n', '    }\n', '\n', '    mapping (bytes32 => bool) public MilestonePostponingHash;\n', '\n', '    function PostponeMeetingIfApproved() internal {\n', '        if(MilestonePostponingHash[ bytes32(currentRecord) ] == false ) {\n', '            if(PostponeForCurrentMilestoneIsApproved()) {\n', '                uint256 time = ProposalsEntity.getCurrentMilestonePostponingProposalDuration();\n', '                Record storage record = Collection[currentRecord];\n', '                record.time_end = record.time_end + time;\n', '                MilestonePostponingHash[ bytes32(currentRecord) ] = true;\n', '            }\n', '        }\n', '    }\n', '\n', '    function PostponeForCurrentMilestoneIsApproved() internal view returns ( bool ) {\n', '        uint8 ProposalActionType = ProposalsEntity.getActionType("MILESTONE_POSTPONING");\n', '        uint8 ProposalRecordState = ProposalsEntity.getCurrentMilestoneProposalStatusForType( ProposalActionType  );\n', '        if(ProposalRecordState == ProposalsEntity.getRecordState("VOTING_RESULT_YES") ) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    uint256 public MilestoneCashBackTime = 0;\n', '\n', '    function afterVoteNoCashBackTime() public view returns ( bool ) {\n', '        uint256 time =  MilestoneCashBackTime + getBylawsCashBackVoteRejectedDuration();\n', '        // after cash back time\n', '        if(getTimestamp() > time) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 ) {\n', '        return keccak256(actionType, arg1, arg2);\n', '    }\n', '\n', '    function getCurrentHash() public view returns ( bytes32 ) {\n', '        return getHash(1, bytes32(currentRecord), 0);\n', '    }\n', '\n', '    mapping (bytes32 => uint256) public ProposalIdByHash;\n', '    function createMilestoneAcceptanceProposal() internal {\n', '        if(ProposalIdByHash[ getCurrentHash() ] == 0x0 ) {\n', '            ProposalIdByHash[ getCurrentHash() ] = ProposalsEntity.createMilestoneAcceptanceProposal();\n', '        }\n', '    }\n', '\n', '    function getCurrentProposalId() internal view returns ( uint256 ) {\n', '        return ProposalIdByHash[ getCurrentHash() ];\n', '    }\n', '\n', '    function setCurrentMilestoneMeetingTime(uint256 _meeting_time) public onlyDeployer {\n', '        if ( CurrentEntityState == getEntityState("WAITING_MEETING_TIME") ) {\n', '            if(MeetingTimeSetFailure() == false ) {\n', '                Record storage record = Collection[currentRecord];\n', '                // minimum x days into the future\n', '                uint256 min = getTimestamp() + getBylawsMinTimeInTheFutureForMeetingCreation();\n', '                // minimum days before end date\n', '                uint256 max = record.time_end + 24 * 3600;\n', '                if(_meeting_time > min && _meeting_time < max ) {\n', '                    record.meeting_time = _meeting_time;\n', '                }\n', '            } else {\n', '                revert();\n', '            }\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function startNextMilestone() internal {\n', '        Record storage rec = Collection[currentRecord];\n', '\n', '        // set current record end date etc\n', '        rec.time_ended = getTimestamp();\n', '        rec.state = getRecordState("FINAL");\n', '\n', '        if(currentRecord < RecordNum) {\n', '            // jump to next milestone\n', '            currentRecord++;\n', '\n', '            Record storage nextRec = Collection[currentRecord];\n', '                nextRec.time_start = rec.time_ended;\n', '                nextRec.time_end = rec.time_ended + nextRec.duration;\n', '        }\n', '\n', '    }\n', '\n', '    /*\n', '    * Update Existing Record\n', '    *\n', '    * @param        uint8 _record_id\n', '    * @param        uint8 _new_state\n', '    * @param        uint8 _duration\n', '    *\n', '    * @access       public\n', '    * @type         method\n', '    * @modifiers    onlyOwner, requireInitialised, RecordUpdateAllowed\n', '    *\n', '    * @return       void\n', '    */\n', '\n', '    function updateRecord( uint8 _new_state )\n', '        internal\n', '        requireInitialised\n', '        RecordUpdateAllowed(_new_state)\n', '        returns (bool)\n', '    {\n', '        Record storage rec = Collection[currentRecord];\n', '        rec.state       = _new_state;\n', '        return true;\n', '    }\n', '\n', '\n', '    /*\n', '    * Modifier: Validate if record updates are allowed\n', '    *\n', '    * @type         modifier\n', '    *\n', '    * @param        uint8 _record_id\n', '    * @param        uint8 _new_state\n', '    * @param        uint256 _duration\n', '    *\n', '    * @return       bool\n', '    */\n', '\n', '    modifier RecordUpdateAllowed(uint8 _new_state) {\n', '        require( isRecordUpdateAllowed( _new_state )  );\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * Method: Validate if record can be updated to requested state\n', '     *\n', '     * @access       public\n', '     * @type         method\n', '     *\n', '     * @param        uint8 _record_id\n', '     * @param        uint8 _new_state\n', '     *\n', '     * @return       bool\n', '     */\n', '    function isRecordUpdateAllowed(uint8 _new_state ) public view returns (bool) {\n', '\n', '        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();\n', '\n', '        CurrentRecordState = 0;\n', '        EntityStateRequired = 0;\n', '\n', '        if(_new_state == uint8(RecordStateRequired)) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /*\n', '     * Method: Get Record and Entity State Changes\n', '     *\n', '     * @access       public\n', '     * @type         method\n', '     *\n', '     * @return       ( uint8 CurrentRecordState, uint8 RecordStateRequired, uint8 EntityStateRequired)\n', '     */\n', '    function getRequiredStateChanges() public view returns (uint8, uint8, uint8) {\n', '\n', '        Record memory record = Collection[currentRecord];\n', '\n', '        uint8 CurrentRecordState = record.state;\n', '        uint8 RecordStateRequired = getRecordStateRequiredChanges();\n', '        uint8 EntityStateRequired = getEntityState("__IGNORED__");\n', '\n', '        if( ApplicationIsInDevelopment() ) {\n', '\n', '            // Do Entity Checks\n', '\n', '            if ( CurrentEntityState == getEntityState("WAITING") ) {\n', '\n', '                if(RecordStateRequired == getRecordState("IN_PROGRESS") ) {\n', '                    // both record and entity states need to move to IN_PROGRESS\n', '                    EntityStateRequired = getEntityState("IN_DEVELOPMENT");\n', '                }\n', '\n', '            } else if ( CurrentEntityState == getEntityState("IN_DEVELOPMENT") ) {\n', '\n', '                EntityStateRequired = getEntityState("WAITING_MEETING_TIME");\n', '\n', '            } else if ( CurrentEntityState == getEntityState("WAITING_MEETING_TIME") ) {\n', '\n', '                if(record.meeting_time > 0) {\n', '\n', '                    EntityStateRequired = getEntityState("DEADLINE_MEETING_TIME_YES");\n', '\n', '                } else {\n', '\n', '                    if(MilestonePostponingHash[ bytes32(currentRecord) ] == false) {\n', '                        if(PostponeForCurrentMilestoneIsApproved()) {\n', '                            EntityStateRequired = getEntityState("WAITING_MEETING_TIME");\n', '                        }\n', '                    }\n', '\n', '                    if(MeetingTimeSetFailure()) {\n', '                        // Force Owner Missing in Action - Cash Back Procedure\n', '                        EntityStateRequired = getEntityState("DEADLINE_MEETING_TIME_FAILED");\n', '                    }\n', '                }\n', '\n', '            } else if ( CurrentEntityState == getEntityState("DEADLINE_MEETING_TIME_FAILED") ) {\n', '\n', '\n', '            } else if ( CurrentEntityState == getEntityState("DEADLINE_MEETING_TIME_YES") ) {\n', '\n', '                // create proposal\n', '                // start voting if time passed\n', '                if(getTimestamp() >= record.meeting_time ) {\n', '                    EntityStateRequired = getEntityState("VOTING_IN_PROGRESS");\n', '                }\n', '\n', '            } else if ( CurrentEntityState == getEntityState("VOTING_IN_PROGRESS") ) {\n', '\n', '                uint8 ProposalRecordState = ProposalsEntity.getProposalState( getCurrentProposalId() );\n', '\n', '                if ( ProposalRecordState == ProposalsEntity.getRecordState("VOTING_RESULT_YES") ) {\n', '                    EntityStateRequired = getEntityState("VOTING_ENDED_YES");\n', '                }\n', '\n', '                if (ProposalRecordState == ProposalsEntity.getRecordState("VOTING_RESULT_NO") ) {\n', '                    EntityStateRequired = getEntityState("VOTING_ENDED_NO");\n', '                }\n', '\n', '            } else if ( CurrentEntityState == getEntityState("VOTING_ENDED_YES") ) {\n', '\n', '                if( FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState("MILESTONE_PROCESS_DONE")) {\n', '                    EntityStateRequired = getEntityState("VOTING_FUNDS_PROCESSED");\n', '                }\n', '\n', '            } else if ( CurrentEntityState == getEntityState("VOTING_ENDED_NO") ) {\n', '\n', '                // check if milestone cashout period has passed and if so process fund releases\n', '                if(afterVoteNoCashBackTime()) {\n', '                    EntityStateRequired = getEntityState("VOTING_ENDED_NO_FINAL");\n', '                }\n', '\n', '            } else if ( CurrentEntityState == getEntityState("VOTING_ENDED_NO_FINAL") ) {\n', '\n', '                if( FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState("MILESTONE_PROCESS_DONE")) {\n', '                    EntityStateRequired = getEntityState("VOTING_FUNDS_PROCESSED");\n', '                }\n', '\n', '            } else if ( CurrentEntityState == getEntityState("VOTING_FUNDS_PROCESSED") ) {\n', '\n', '\n', '                if(currentRecord < RecordNum) {\n', '                    EntityStateRequired = getEntityState("IN_DEVELOPMENT");\n', '                } else {\n', '\n', '                    if(FundingManagerEntity.getCurrentMilestoneProcessed() == true) {\n', '                        if(FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState("COMPLETE_PROCESS_DONE")) {\n', '                            EntityStateRequired = getEntityState("DEVELOPMENT_COMPLETE");\n', '                        } else {\n', '                            EntityStateRequired = getEntityState("VOTING_FUNDS_PROCESSED");\n', '                        }\n', '                    } else {\n', '                        EntityStateRequired = getEntityState("IN_DEVELOPMENT");\n', '                    }\n', '                }\n', '\n', '            }\n', '            /*\n', '            else if ( CurrentEntityState == getEntityState("DEVELOPMENT_COMPLETE") ) {\n', '\n', '            }\n', '            */\n', '\n', '        } else {\n', '\n', '            if( CurrentEntityState == getEntityState("NEW") ) {\n', '                EntityStateRequired = getEntityState("WAITING");\n', '            }\n', '        }\n', '\n', '        return (CurrentRecordState, RecordStateRequired, EntityStateRequired);\n', '    }\n', '\n', '    function ApplicationIsInDevelopment() public view returns(bool) {\n', '        if( getApplicationState() == getApplicationEntityState("IN_DEVELOPMENT") ) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function MeetingTimeSetFailure() public view returns (bool) {\n', '        Record memory record = Collection[currentRecord];\n', '        uint256 meetingCreationMaxTime = record.time_end - getBylawsMinTimeInTheFutureForMeetingCreation();\n', '        if(getTimestamp() >= meetingCreationMaxTime ) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '}']