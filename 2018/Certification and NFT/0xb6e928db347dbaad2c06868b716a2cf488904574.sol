['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Acceptable.sol\n', '\n', '// @title Acceptable\n', '// @author Takayuki Jimba\n', '// @dev Provide basic access control.\n', 'contract Acceptable is Ownable {\n', '    address public sender;\n', '\n', '    // @dev Throws if called by any address other than the sender.\n', '    modifier onlyAcceptable {\n', '        require(msg.sender == sender);\n', '        _;\n', '    }\n', '\n', '    // @dev Change acceptable address\n', '    // @param _sender The address to new sender\n', '    function setAcceptable(address _sender) public onlyOwner {\n', '        sender = _sender;\n', '    }\n', '}\n', '\n', '// File: contracts/ExchangeBase.sol\n', '\n', '// @title ExchangeBase\n', '// @author Takayuki Jimba\n', '// @dev create, remove and succeed are supposed to be called from CryptoCrystal contract only.\n', 'contract ExchangeBase is Acceptable {\n', '    struct Exchange {\n', '        address owner;\n', '        uint256 tokenId;\n', '        uint8 kind;\n', '        uint128 weight;\n', '        uint64 createdAt;\n', '    }\n', '\n', '    Exchange[] exchanges;\n', '\n', '    mapping(uint256 => Exchange) tokenIdToExchange;\n', '\n', '    event ExchangeCreated(\n', '        uint256 indexed id,\n', '        address owner,\n', '        uint256 ownerTokenId,\n', '        uint256 ownerTokenGene,\n', '        uint256 ownerTokenKind,\n', '        uint256 ownerTokenWeight,\n', '        uint256 kind,\n', '        uint256 weight,\n', '        uint256 createdAt\n', '    );\n', '    event ExchangeRemoved(uint256 indexed id, uint256 removedAt);\n', '\n', '    function create(\n', '        address _owner,\n', '        uint256 _ownerTokenId,\n', '        uint256 _ownerTokenGene,\n', '        uint256 _ownerTokenKind,\n', '        uint256 _ownerTokenWeight,\n', '        uint256 _kind,\n', '        uint256 _weight,\n', '        uint256 _createdAt\n', '    ) public onlyAcceptable returns(uint256) {\n', '        require(!isOnExchange(_ownerTokenId));\n', '        require(_ownerTokenWeight > 0);\n', '        require(_weight > 0);\n', '        require(_createdAt > 0);\n', '        require(_weight <= 1384277343750);\n', '\n', '        Exchange memory _exchange = Exchange({\n', '            owner: _owner,\n', '            tokenId: _ownerTokenId,\n', '            kind: uint8(_kind),\n', '            weight: uint128(_weight),\n', '            createdAt: uint64(_createdAt)\n', '            });\n', '        uint256 _id = exchanges.push(_exchange) - 1;\n', '        tokenIdToExchange[_ownerTokenId] = _exchange;\n', '        emit ExchangeCreated(\n', '            _id,\n', '            _owner,\n', '            _ownerTokenId,\n', '            _ownerTokenGene,\n', '            _ownerTokenKind,\n', '            _ownerTokenWeight,\n', '            _kind,\n', '            _weight,\n', '            _createdAt\n', '        );\n', '        return _id;\n', '    }\n', '\n', '    function remove(uint256 _id) public onlyAcceptable {\n', '        require(isOnExchangeById(_id));\n', '\n', '        Exchange memory _exchange = exchanges[_id];\n', '        delete tokenIdToExchange[_exchange.tokenId];\n', '        delete exchanges[_id];\n', '\n', '        emit ExchangeRemoved(_id, now);\n', '    }\n', '\n', '    function getExchange(uint256 _id) public view returns(\n', '        address owner,\n', '        uint256 tokenId,\n', '        uint256 kind,\n', '        uint256 weight,\n', '        uint256 createdAt\n', '    ) {\n', '        require(isOnExchangeById(_id));\n', '\n', '        Exchange memory _exchange = exchanges[_id];\n', '        owner = _exchange.owner;\n', '        tokenId = _exchange.tokenId;\n', '        kind = _exchange.kind;\n', '        weight = _exchange.weight;\n', '        createdAt = _exchange.createdAt;\n', '    }\n', '\n', '    function getTokenId(uint256 _id) public view returns(uint256) {\n', '        require(isOnExchangeById(_id));\n', '\n', '        Exchange memory _exchange = exchanges[_id];\n', '        return _exchange.tokenId;\n', '    }\n', '\n', '    function ownerOf(uint256 _id) public view returns(address) {\n', '        require(isOnExchangeById(_id));\n', '\n', '        return exchanges[_id].owner;\n', '    }\n', '\n', '    function isOnExchange(uint256 _tokenId) public view returns(bool) {\n', '        return tokenIdToExchange[_tokenId].createdAt > 0;\n', '    }\n', '\n', '    function isOnExchangeById(uint256 _id) public view returns(bool) {\n', '        return (_id < exchanges.length) && (exchanges[_id].createdAt > 0);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Acceptable.sol\n', '\n', '// @title Acceptable\n', '// @author Takayuki Jimba\n', '// @dev Provide basic access control.\n', 'contract Acceptable is Ownable {\n', '    address public sender;\n', '\n', '    // @dev Throws if called by any address other than the sender.\n', '    modifier onlyAcceptable {\n', '        require(msg.sender == sender);\n', '        _;\n', '    }\n', '\n', '    // @dev Change acceptable address\n', '    // @param _sender The address to new sender\n', '    function setAcceptable(address _sender) public onlyOwner {\n', '        sender = _sender;\n', '    }\n', '}\n', '\n', '// File: contracts/ExchangeBase.sol\n', '\n', '// @title ExchangeBase\n', '// @author Takayuki Jimba\n', '// @dev create, remove and succeed are supposed to be called from CryptoCrystal contract only.\n', 'contract ExchangeBase is Acceptable {\n', '    struct Exchange {\n', '        address owner;\n', '        uint256 tokenId;\n', '        uint8 kind;\n', '        uint128 weight;\n', '        uint64 createdAt;\n', '    }\n', '\n', '    Exchange[] exchanges;\n', '\n', '    mapping(uint256 => Exchange) tokenIdToExchange;\n', '\n', '    event ExchangeCreated(\n', '        uint256 indexed id,\n', '        address owner,\n', '        uint256 ownerTokenId,\n', '        uint256 ownerTokenGene,\n', '        uint256 ownerTokenKind,\n', '        uint256 ownerTokenWeight,\n', '        uint256 kind,\n', '        uint256 weight,\n', '        uint256 createdAt\n', '    );\n', '    event ExchangeRemoved(uint256 indexed id, uint256 removedAt);\n', '\n', '    function create(\n', '        address _owner,\n', '        uint256 _ownerTokenId,\n', '        uint256 _ownerTokenGene,\n', '        uint256 _ownerTokenKind,\n', '        uint256 _ownerTokenWeight,\n', '        uint256 _kind,\n', '        uint256 _weight,\n', '        uint256 _createdAt\n', '    ) public onlyAcceptable returns(uint256) {\n', '        require(!isOnExchange(_ownerTokenId));\n', '        require(_ownerTokenWeight > 0);\n', '        require(_weight > 0);\n', '        require(_createdAt > 0);\n', '        require(_weight <= 1384277343750);\n', '\n', '        Exchange memory _exchange = Exchange({\n', '            owner: _owner,\n', '            tokenId: _ownerTokenId,\n', '            kind: uint8(_kind),\n', '            weight: uint128(_weight),\n', '            createdAt: uint64(_createdAt)\n', '            });\n', '        uint256 _id = exchanges.push(_exchange) - 1;\n', '        tokenIdToExchange[_ownerTokenId] = _exchange;\n', '        emit ExchangeCreated(\n', '            _id,\n', '            _owner,\n', '            _ownerTokenId,\n', '            _ownerTokenGene,\n', '            _ownerTokenKind,\n', '            _ownerTokenWeight,\n', '            _kind,\n', '            _weight,\n', '            _createdAt\n', '        );\n', '        return _id;\n', '    }\n', '\n', '    function remove(uint256 _id) public onlyAcceptable {\n', '        require(isOnExchangeById(_id));\n', '\n', '        Exchange memory _exchange = exchanges[_id];\n', '        delete tokenIdToExchange[_exchange.tokenId];\n', '        delete exchanges[_id];\n', '\n', '        emit ExchangeRemoved(_id, now);\n', '    }\n', '\n', '    function getExchange(uint256 _id) public view returns(\n', '        address owner,\n', '        uint256 tokenId,\n', '        uint256 kind,\n', '        uint256 weight,\n', '        uint256 createdAt\n', '    ) {\n', '        require(isOnExchangeById(_id));\n', '\n', '        Exchange memory _exchange = exchanges[_id];\n', '        owner = _exchange.owner;\n', '        tokenId = _exchange.tokenId;\n', '        kind = _exchange.kind;\n', '        weight = _exchange.weight;\n', '        createdAt = _exchange.createdAt;\n', '    }\n', '\n', '    function getTokenId(uint256 _id) public view returns(uint256) {\n', '        require(isOnExchangeById(_id));\n', '\n', '        Exchange memory _exchange = exchanges[_id];\n', '        return _exchange.tokenId;\n', '    }\n', '\n', '    function ownerOf(uint256 _id) public view returns(address) {\n', '        require(isOnExchangeById(_id));\n', '\n', '        return exchanges[_id].owner;\n', '    }\n', '\n', '    function isOnExchange(uint256 _tokenId) public view returns(bool) {\n', '        return tokenIdToExchange[_tokenId].createdAt > 0;\n', '    }\n', '\n', '    function isOnExchangeById(uint256 _id) public view returns(bool) {\n', '        return (_id < exchanges.length) && (exchanges[_id].createdAt > 0);\n', '    }\n', '}']
