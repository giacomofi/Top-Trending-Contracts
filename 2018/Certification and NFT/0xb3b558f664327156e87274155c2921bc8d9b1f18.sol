['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract CHXToken is BurnableToken, Ownable {\n', '    string public constant name = "Chainium";\n', '    string public constant symbol = "CHX";\n', '    uint8 public constant decimals = 18;\n', '\n', '    bool public isRestricted = true;\n', '    address public tokenSaleContractAddress;\n', '\n', '    function CHXToken()\n', '        public\n', '    {\n', '        totalSupply = 200000000e18;\n', '        balances[owner] = totalSupply;\n', '        Transfer(address(0), owner, totalSupply);\n', '    }\n', '\n', '    function setTokenSaleContractAddress(address _tokenSaleContractAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_tokenSaleContractAddress != address(0));\n', '        tokenSaleContractAddress = _tokenSaleContractAddress;\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Transfer Restriction\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function setRestrictedState(bool _isRestricted)\n', '        external\n', '        onlyOwner\n', '    {\n', '        isRestricted = _isRestricted;\n', '    }\n', '\n', '    modifier restricted() {\n', '        if (isRestricted) {\n', '            require(\n', '                msg.sender == owner ||\n', '                (msg.sender == tokenSaleContractAddress && tokenSaleContractAddress != address(0))\n', '            );\n', '        }\n', '        _;\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Transfers\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function transfer(address _to, uint _value)\n', '        public\n', '        restricted\n', '        returns (bool)\n', '    {\n', '        require(_to != address(this));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        restricted\n', '        returns (bool)\n', '    {\n', '        require(_to != address(this));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value)\n', '        public\n', '        restricted\n', '        returns (bool)\n', '    {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue)\n', '        public\n', '        restricted\n', '        returns (bool success)\n', '    {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue)\n', '        public\n', '        restricted\n', '        returns (bool success)\n', '    {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Batch transfers\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function batchTransfer(address[] _recipients, uint[] _values)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_recipients.length == _values.length);\n', '\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(transfer(_recipients[i], _values[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchTransferFrom(address _from, address[] _recipients, uint[] _values)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_recipients.length == _values.length);\n', '\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(transferFrom(_from, _recipients[i], _values[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchTransferFromMany(address[] _senders, address _to, uint[] _values)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_senders.length == _values.length);\n', '\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(transferFrom(_senders[i], _to, _values[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchTransferFromManyToMany(address[] _senders, address[] _recipients, uint[] _values)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_senders.length == _recipients.length);\n', '        require(_senders.length == _values.length);\n', '\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(transferFrom(_senders[i], _recipients[i], _values[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchApprove(address[] _spenders, uint[] _values)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_spenders.length == _values.length);\n', '\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(approve(_spenders[i], _values[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchIncreaseApproval(address[] _spenders, uint[] _addedValues)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_spenders.length == _addedValues.length);\n', '\n', '        for (uint i = 0; i < _addedValues.length; i++) {\n', '            require(increaseApproval(_spenders[i], _addedValues[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchDecreaseApproval(address[] _spenders, uint[] _subtractedValues)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_spenders.length == _subtractedValues.length);\n', '\n', '        for (uint i = 0; i < _subtractedValues.length; i++) {\n', '            require(decreaseApproval(_spenders[i], _subtractedValues[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Miscellaneous\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function burn(uint _value)\n', '        public\n', '        onlyOwner\n', '    {\n', '        super.burn(_value);\n', '    }\n', '\n', '    // Enable recovery of ether sent by mistake to this contract&#39;s address.\n', '    function drainStrayEther(uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        owner.transfer(_amount);\n', '        return true;\n', '    }\n', '\n', '    // Enable recovery of any ERC20 compatible token, sent by mistake to this contract&#39;s address.\n', '    function drainStrayTokens(ERC20Basic _token, uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return _token.transfer(owner, _amount);\n', '    }\n', '}\n', '\n', '////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', 'contract Whitelistable is Ownable {\n', '\n', '    mapping (address => bool) whitelist;\n', '    address public whitelistAdmin;\n', '\n', '    function Whitelistable()\n', '        public\n', '    {\n', '        whitelistAdmin = owner; // Owner fulfils the role of the admin initially, until new admin is set.\n', '    }\n', '\n', '    modifier onlyOwnerOrWhitelistAdmin() {\n', '        require(msg.sender == owner || msg.sender == whitelistAdmin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(whitelist[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function isWhitelisted(address _address)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return whitelist[_address];\n', '    }\n', '\n', '    function addToWhitelist(address[] _addresses)\n', '        external\n', '        onlyOwnerOrWhitelistAdmin\n', '    {\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            whitelist[_addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function removeFromWhitelist(address[] _addresses)\n', '        external\n', '        onlyOwnerOrWhitelistAdmin\n', '    {\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            whitelist[_addresses[i]] = false;\n', '        }\n', '    }\n', '\n', '    function setWhitelistAdmin(address _newAdmin)\n', '        public\n', '        onlyOwnerOrWhitelistAdmin\n', '    {\n', '        require(_newAdmin != address(0));\n', '        whitelistAdmin = _newAdmin;\n', '    }\n', '}\n', '\n', 'contract CHXTokenSale is Whitelistable {\n', '    using SafeMath for uint;\n', '\n', '    event TokenPurchased(address indexed investor, uint contribution, uint tokens);\n', '\n', '    uint public constant TOKEN_PRICE = 170 szabo; // Assumes token has 18 decimals\n', '\n', '    uint public saleStartTime;\n', '    uint public saleEndTime;\n', '    uint public maxGasPrice = 20e9 wei; // 20 GWEI - to prevent "gas race"\n', '    uint public minContribution = 100 finney; // 0.1 ETH\n', '    uint public maxContributionPhase1 = 500 finney; // 0.5 ETH\n', '    uint public maxContributionPhase2 = 10 ether;\n', '    uint public phase1DurationInHours = 24;\n', '\n', '    CHXToken public tokenContract;\n', '\n', '    mapping (address => uint) public etherContributions;\n', '    mapping (address => uint) public tokenAllocations;\n', '    uint public etherCollected;\n', '    uint public tokensSold;\n', '\n', '    function CHXTokenSale()\n', '        public\n', '    {\n', '    }\n', '\n', '    function setTokenContract(address _tokenContractAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_tokenContractAddress != address(0));\n', '        tokenContract = CHXToken(_tokenContractAddress);\n', '        require(tokenContract.decimals() == 18); // Calculations assume 18 decimals (1 ETH = 10^18 WEI)\n', '    }\n', '\n', '    function transferOwnership(address newOwner)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(newOwner != owner);\n', '\n', '        if (whitelistAdmin == owner) {\n', '            setWhitelistAdmin(newOwner);\n', '        }\n', '\n', '        super.transferOwnership(newOwner);\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Sale\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function()\n', '        public\n', '        payable\n', '    {\n', '        address investor = msg.sender;\n', '        uint contribution = msg.value;\n', '\n', '        require(saleStartTime <= now && now <= saleEndTime);\n', '        require(tx.gasprice <= maxGasPrice);\n', '        require(whitelist[investor]);\n', '        require(contribution >= minContribution);\n', '        if (phase1DurationInHours.mul(1 hours).add(saleStartTime) >= now) {\n', '            require(etherContributions[investor].add(contribution) <= maxContributionPhase1);\n', '        } else {\n', '            require(etherContributions[investor].add(contribution) <= maxContributionPhase2);\n', '        }\n', '\n', '        etherContributions[investor] = etherContributions[investor].add(contribution);\n', '        etherCollected = etherCollected.add(contribution);\n', '\n', '        uint multiplier = 1e18; // 18 decimal places\n', '        uint tokens = contribution.mul(multiplier).div(TOKEN_PRICE);\n', '        tokenAllocations[investor] = tokenAllocations[investor].add(tokens);\n', '        tokensSold = tokensSold.add(tokens);\n', '\n', '        require(tokenContract.transfer(investor, tokens));\n', '        TokenPurchased(investor, contribution, tokens);\n', '    }\n', '\n', '    function sendCollectedEther(address _recipient)\n', '        external\n', '        onlyOwner\n', '    {\n', '        if (this.balance > 0) {\n', '            _recipient.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    function sendRemainingTokens(address _recipient)\n', '        external\n', '        onlyOwner\n', '    {\n', '        uint unsoldTokens = tokenContract.balanceOf(this);\n', '        if (unsoldTokens > 0) {\n', '            require(tokenContract.transfer(_recipient, unsoldTokens));\n', '        }\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Configuration\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function setSaleTime(uint _newStartTime, uint _newEndTime)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newStartTime <= _newEndTime);\n', '        saleStartTime = _newStartTime;\n', '        saleEndTime = _newEndTime;\n', '    }\n', '\n', '    function setMaxGasPrice(uint _newMaxGasPrice)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newMaxGasPrice > 0);\n', '        maxGasPrice = _newMaxGasPrice;\n', '    }\n', '\n', '    function setMinContribution(uint _newMinContribution)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newMinContribution > 0);\n', '        minContribution = _newMinContribution;\n', '    }\n', '\n', '    function setMaxContributionPhase1(uint _newMaxContributionPhase1)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newMaxContributionPhase1 > minContribution);\n', '        maxContributionPhase1 = _newMaxContributionPhase1;\n', '    }\n', '\n', '    function setMaxContributionPhase2(uint _newMaxContributionPhase2)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newMaxContributionPhase2 > minContribution);\n', '        maxContributionPhase2 = _newMaxContributionPhase2;\n', '    }\n', '\n', '    function setPhase1DurationInHours(uint _newPhase1DurationInHours)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newPhase1DurationInHours > 0);\n', '        phase1DurationInHours = _newPhase1DurationInHours;\n', '    }\n', '}']
['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract CHXToken is BurnableToken, Ownable {\n', '    string public constant name = "Chainium";\n', '    string public constant symbol = "CHX";\n', '    uint8 public constant decimals = 18;\n', '\n', '    bool public isRestricted = true;\n', '    address public tokenSaleContractAddress;\n', '\n', '    function CHXToken()\n', '        public\n', '    {\n', '        totalSupply = 200000000e18;\n', '        balances[owner] = totalSupply;\n', '        Transfer(address(0), owner, totalSupply);\n', '    }\n', '\n', '    function setTokenSaleContractAddress(address _tokenSaleContractAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_tokenSaleContractAddress != address(0));\n', '        tokenSaleContractAddress = _tokenSaleContractAddress;\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Transfer Restriction\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function setRestrictedState(bool _isRestricted)\n', '        external\n', '        onlyOwner\n', '    {\n', '        isRestricted = _isRestricted;\n', '    }\n', '\n', '    modifier restricted() {\n', '        if (isRestricted) {\n', '            require(\n', '                msg.sender == owner ||\n', '                (msg.sender == tokenSaleContractAddress && tokenSaleContractAddress != address(0))\n', '            );\n', '        }\n', '        _;\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Transfers\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function transfer(address _to, uint _value)\n', '        public\n', '        restricted\n', '        returns (bool)\n', '    {\n', '        require(_to != address(this));\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value)\n', '        public\n', '        restricted\n', '        returns (bool)\n', '    {\n', '        require(_to != address(this));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint _value)\n', '        public\n', '        restricted\n', '        returns (bool)\n', '    {\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue)\n', '        public\n', '        restricted\n', '        returns (bool success)\n', '    {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue)\n', '        public\n', '        restricted\n', '        returns (bool success)\n', '    {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Batch transfers\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function batchTransfer(address[] _recipients, uint[] _values)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_recipients.length == _values.length);\n', '\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(transfer(_recipients[i], _values[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchTransferFrom(address _from, address[] _recipients, uint[] _values)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_recipients.length == _values.length);\n', '\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(transferFrom(_from, _recipients[i], _values[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchTransferFromMany(address[] _senders, address _to, uint[] _values)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_senders.length == _values.length);\n', '\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(transferFrom(_senders[i], _to, _values[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchTransferFromManyToMany(address[] _senders, address[] _recipients, uint[] _values)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_senders.length == _recipients.length);\n', '        require(_senders.length == _values.length);\n', '\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(transferFrom(_senders[i], _recipients[i], _values[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchApprove(address[] _spenders, uint[] _values)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_spenders.length == _values.length);\n', '\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            require(approve(_spenders[i], _values[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchIncreaseApproval(address[] _spenders, uint[] _addedValues)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_spenders.length == _addedValues.length);\n', '\n', '        for (uint i = 0; i < _addedValues.length; i++) {\n', '            require(increaseApproval(_spenders[i], _addedValues[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function batchDecreaseApproval(address[] _spenders, uint[] _subtractedValues)\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(_spenders.length == _subtractedValues.length);\n', '\n', '        for (uint i = 0; i < _subtractedValues.length; i++) {\n', '            require(decreaseApproval(_spenders[i], _subtractedValues[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Miscellaneous\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function burn(uint _value)\n', '        public\n', '        onlyOwner\n', '    {\n', '        super.burn(_value);\n', '    }\n', '\n', "    // Enable recovery of ether sent by mistake to this contract's address.\n", '    function drainStrayEther(uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        owner.transfer(_amount);\n', '        return true;\n', '    }\n', '\n', "    // Enable recovery of any ERC20 compatible token, sent by mistake to this contract's address.\n", '    function drainStrayTokens(ERC20Basic _token, uint _amount)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return _token.transfer(owner, _amount);\n', '    }\n', '}\n', '\n', '////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', 'contract Whitelistable is Ownable {\n', '\n', '    mapping (address => bool) whitelist;\n', '    address public whitelistAdmin;\n', '\n', '    function Whitelistable()\n', '        public\n', '    {\n', '        whitelistAdmin = owner; // Owner fulfils the role of the admin initially, until new admin is set.\n', '    }\n', '\n', '    modifier onlyOwnerOrWhitelistAdmin() {\n', '        require(msg.sender == owner || msg.sender == whitelistAdmin);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhitelisted() {\n', '        require(whitelist[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function isWhitelisted(address _address)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return whitelist[_address];\n', '    }\n', '\n', '    function addToWhitelist(address[] _addresses)\n', '        external\n', '        onlyOwnerOrWhitelistAdmin\n', '    {\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            whitelist[_addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function removeFromWhitelist(address[] _addresses)\n', '        external\n', '        onlyOwnerOrWhitelistAdmin\n', '    {\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            whitelist[_addresses[i]] = false;\n', '        }\n', '    }\n', '\n', '    function setWhitelistAdmin(address _newAdmin)\n', '        public\n', '        onlyOwnerOrWhitelistAdmin\n', '    {\n', '        require(_newAdmin != address(0));\n', '        whitelistAdmin = _newAdmin;\n', '    }\n', '}\n', '\n', 'contract CHXTokenSale is Whitelistable {\n', '    using SafeMath for uint;\n', '\n', '    event TokenPurchased(address indexed investor, uint contribution, uint tokens);\n', '\n', '    uint public constant TOKEN_PRICE = 170 szabo; // Assumes token has 18 decimals\n', '\n', '    uint public saleStartTime;\n', '    uint public saleEndTime;\n', '    uint public maxGasPrice = 20e9 wei; // 20 GWEI - to prevent "gas race"\n', '    uint public minContribution = 100 finney; // 0.1 ETH\n', '    uint public maxContributionPhase1 = 500 finney; // 0.5 ETH\n', '    uint public maxContributionPhase2 = 10 ether;\n', '    uint public phase1DurationInHours = 24;\n', '\n', '    CHXToken public tokenContract;\n', '\n', '    mapping (address => uint) public etherContributions;\n', '    mapping (address => uint) public tokenAllocations;\n', '    uint public etherCollected;\n', '    uint public tokensSold;\n', '\n', '    function CHXTokenSale()\n', '        public\n', '    {\n', '    }\n', '\n', '    function setTokenContract(address _tokenContractAddress)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_tokenContractAddress != address(0));\n', '        tokenContract = CHXToken(_tokenContractAddress);\n', '        require(tokenContract.decimals() == 18); // Calculations assume 18 decimals (1 ETH = 10^18 WEI)\n', '    }\n', '\n', '    function transferOwnership(address newOwner)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(newOwner != owner);\n', '\n', '        if (whitelistAdmin == owner) {\n', '            setWhitelistAdmin(newOwner);\n', '        }\n', '\n', '        super.transferOwnership(newOwner);\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Sale\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function()\n', '        public\n', '        payable\n', '    {\n', '        address investor = msg.sender;\n', '        uint contribution = msg.value;\n', '\n', '        require(saleStartTime <= now && now <= saleEndTime);\n', '        require(tx.gasprice <= maxGasPrice);\n', '        require(whitelist[investor]);\n', '        require(contribution >= minContribution);\n', '        if (phase1DurationInHours.mul(1 hours).add(saleStartTime) >= now) {\n', '            require(etherContributions[investor].add(contribution) <= maxContributionPhase1);\n', '        } else {\n', '            require(etherContributions[investor].add(contribution) <= maxContributionPhase2);\n', '        }\n', '\n', '        etherContributions[investor] = etherContributions[investor].add(contribution);\n', '        etherCollected = etherCollected.add(contribution);\n', '\n', '        uint multiplier = 1e18; // 18 decimal places\n', '        uint tokens = contribution.mul(multiplier).div(TOKEN_PRICE);\n', '        tokenAllocations[investor] = tokenAllocations[investor].add(tokens);\n', '        tokensSold = tokensSold.add(tokens);\n', '\n', '        require(tokenContract.transfer(investor, tokens));\n', '        TokenPurchased(investor, contribution, tokens);\n', '    }\n', '\n', '    function sendCollectedEther(address _recipient)\n', '        external\n', '        onlyOwner\n', '    {\n', '        if (this.balance > 0) {\n', '            _recipient.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    function sendRemainingTokens(address _recipient)\n', '        external\n', '        onlyOwner\n', '    {\n', '        uint unsoldTokens = tokenContract.balanceOf(this);\n', '        if (unsoldTokens > 0) {\n', '            require(tokenContract.transfer(_recipient, unsoldTokens));\n', '        }\n', '    }\n', '\n', '\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '    // Configuration\n', '    ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', '    function setSaleTime(uint _newStartTime, uint _newEndTime)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newStartTime <= _newEndTime);\n', '        saleStartTime = _newStartTime;\n', '        saleEndTime = _newEndTime;\n', '    }\n', '\n', '    function setMaxGasPrice(uint _newMaxGasPrice)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newMaxGasPrice > 0);\n', '        maxGasPrice = _newMaxGasPrice;\n', '    }\n', '\n', '    function setMinContribution(uint _newMinContribution)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newMinContribution > 0);\n', '        minContribution = _newMinContribution;\n', '    }\n', '\n', '    function setMaxContributionPhase1(uint _newMaxContributionPhase1)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newMaxContributionPhase1 > minContribution);\n', '        maxContributionPhase1 = _newMaxContributionPhase1;\n', '    }\n', '\n', '    function setMaxContributionPhase2(uint _newMaxContributionPhase2)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newMaxContributionPhase2 > minContribution);\n', '        maxContributionPhase2 = _newMaxContributionPhase2;\n', '    }\n', '\n', '    function setPhase1DurationInHours(uint _newPhase1DurationInHours)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(_newPhase1DurationInHours > 0);\n', '        phase1DurationInHours = _newPhase1DurationInHours;\n', '    }\n', '}']
