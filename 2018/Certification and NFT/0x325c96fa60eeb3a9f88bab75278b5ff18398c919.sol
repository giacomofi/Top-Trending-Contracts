['pragma solidity ^0.4.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract InvestorWhiteList is Ownable {\n', '  mapping (address => bool) public investorWhiteList;\n', '\n', '  mapping (address => address) public referralList;\n', '\n', '  function InvestorWhiteList() {\n', '\n', '  }\n', '\n', '  function addInvestorToWhiteList(address investor) external onlyOwner {\n', '    require(investor != 0x0 && !investorWhiteList[investor]);\n', '    investorWhiteList[investor] = true;\n', '  }\n', '\n', '  function removeInvestorFromWhiteList(address investor) external onlyOwner {\n', '    require(investor != 0x0 && investorWhiteList[investor]);\n', '    investorWhiteList[investor] = false;\n', '  }\n', '\n', '  //when new user will contribute ICO contract will automatically send bonus to referral\n', '  function addReferralOf(address investor, address referral) external onlyOwner {\n', '    require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);\n', '    referralList[investor] = referral;\n', '  }\n', '\n', '  function isAllowed(address investor) constant external returns (bool result) {\n', '    return investorWhiteList[investor];\n', '  }\n', '\n', '  function getReferralOf(address investor) constant external returns (address result) {\n', '    return referralList[investor];\n', '  }\n', '}']
['pragma solidity ^0.4.0;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract InvestorWhiteList is Ownable {\n', '  mapping (address => bool) public investorWhiteList;\n', '\n', '  mapping (address => address) public referralList;\n', '\n', '  function InvestorWhiteList() {\n', '\n', '  }\n', '\n', '  function addInvestorToWhiteList(address investor) external onlyOwner {\n', '    require(investor != 0x0 && !investorWhiteList[investor]);\n', '    investorWhiteList[investor] = true;\n', '  }\n', '\n', '  function removeInvestorFromWhiteList(address investor) external onlyOwner {\n', '    require(investor != 0x0 && investorWhiteList[investor]);\n', '    investorWhiteList[investor] = false;\n', '  }\n', '\n', '  //when new user will contribute ICO contract will automatically send bonus to referral\n', '  function addReferralOf(address investor, address referral) external onlyOwner {\n', '    require(investor != 0x0 && referral != 0x0 && referralList[investor] == 0x0 && investor != referral);\n', '    referralList[investor] = referral;\n', '  }\n', '\n', '  function isAllowed(address investor) constant external returns (bool result) {\n', '    return investorWhiteList[investor];\n', '  }\n', '\n', '  function getReferralOf(address investor) constant external returns (address result) {\n', '    return referralList[investor];\n', '  }\n', '}']
