['// PixelCoins Source code\n', 'pragma solidity ^0.4.11;\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3054554455705148595f5d4a555e1e535f">[email&#160;protected]</a>> (https://github.com/dete)\n', 'contract ERC721 {\n', '    // Required methods\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) external view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) external;\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '\n', '    // Events\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '    event Approval(address owner, address approved, uint256 tokenId);\n', '\n', '    // Optional\n', '    // function name() public view returns (string name);\n', '    // function symbol() public view returns (string symbol);\n', '    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n', '    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n', '\n', '    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', '\n', '/// @title A facet of PixelCore that manages special access privileges.\n', '/// @author Oliver Schneider <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c7aea9a1a887b7aebfa2aba4a8aea9b4e9aea8">[email&#160;protected]</a>> (https://pixelcoins.io)\n', 'contract PixelAuthority {\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    address public authorityAddress;\n', '    uint public authorityBalance = 0;\n', '\n', '    /// @dev Access modifier for authority-only functionality\n', '    modifier onlyAuthority() {\n', '        require(msg.sender == authorityAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the authority. Only available to the current authority.\n', '    /// @param _newAuthority The address of the new authority\n', '    function setAuthority(address _newAuthority) external onlyAuthority {\n', '        require(_newAuthority != address(0));\n', '        authorityAddress = _newAuthority;\n', '    }\n', '\n', '}\n', '\n', '\n', '/// @title Base contract for PixelCoins. Holds all common structs, events and base variables.\n', '/// @author Oliver Schneider <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="056c6b636a45756c7d6069666a6c6b762b6c6a">[email&#160;protected]</a>> (https://pixelcoins.io)\n', '/// @dev See the PixelCore contract documentation to understand how the various contract facets are arranged.\n', 'contract PixelBase is PixelAuthority {\n', '    /*** EVENTS ***/\n', '\n', '    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a Pixel\n', '    ///  ownership is assigned.\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '\n', '    /*** CONSTANTS ***/\n', '    uint32 public WIDTH = 1000;\n', '    uint32 public HEIGHT = 1000;\n', '\n', '    /*** STORAGE ***/\n', '    /// @dev A mapping from pixel ids to the address that owns them. A pixel address of 0 means,\n', '    /// that the pixel can still be bought.\n', '    mapping (uint256 => address) public pixelIndexToOwner;\n', '    /// Address that is approved to change ownship\n', '    mapping (uint256 => address) public pixelIndexToApproved;\n', '    /// Stores the color of an pixel, indexed by pixelid\n', '    mapping (uint256 => uint32) public colors;\n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping (address => uint256) ownershipTokenCount;\n', '\n', '    // Internal utility functions: These functions all assume that their input arguments\n', '    // are valid. We leave it to public methods to sanitize their inputs and follow\n', '    // the required logic.\n', '\n', '    /// @dev Assigns ownership of a specific Pixel to an address.\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        // Can no overflowe since the number of Pixels is capped.\n', '        // transfer ownership\n', '        ownershipTokenCount[_to]++;\n', '        pixelIndexToOwner[_tokenId] = _to;\n', '        if (_from != address(0)) {\n', '            ownershipTokenCount[_from]--;\n', '            delete pixelIndexToApproved[_tokenId];\n', '        }\n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Checks if a given address is the current owner of a particular Pixel.\n', '    /// @param _claimant the address we are validating against.\n', '    /// @param _tokenId Pixel id\n', '    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return pixelIndexToOwner[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Checks if a given address currently has transferApproval for a particular Pixel.\n', '    /// @param _claimant the address we are confirming pixel is approved for.\n', '    /// @param _tokenId pixel id, only valid when > 0\n', '    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return pixelIndexToApproved[_tokenId] == _claimant;\n', '    }\n', '}\n', '\n', '\n', '/// @title The facet of the PixelCoins core contract that manages ownership, ERC-721 (draft) compliant.\n', '/// @author Oliver Schneider <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d7beb9b1b897a7beafb2bbb4b8beb9a4f9beb8">[email&#160;protected]</a>> (https://pixelcoins.io), based on Axiom Zen (https://www.axiomzen.co)\n', '/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\n', '///  See the PixelCore contract documentation to understand how the various contract facets are arranged.\n', 'contract PixelOwnership is PixelBase, ERC721 {\n', '\n', '    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant name = "PixelCoins";\n', '    string public constant symbol = "PXL";\n', '\n', '\n', '    bytes4 constant InterfaceSignature_ERC165 =\n', '        bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;));\n', '\n', '    bytes4 constant InterfaceSignature_ERC721 =\n', '        bytes4(keccak256(&#39;name()&#39;)) ^\n', '        bytes4(keccak256(&#39;symbol()&#39;)) ^\n', '        bytes4(keccak256(&#39;totalSupply()&#39;)) ^\n', '        bytes4(keccak256(&#39;balanceOf(address)&#39;)) ^\n', '        bytes4(keccak256(&#39;ownerOf(uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;approve(address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;transfer(address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;transferFrom(address,address,uint256)&#39;)) ^\n', '        bytes4(keccak256(&#39;tokensOfOwner(address)&#39;)) ^\n', '        bytes4(keccak256(&#39;tokenMetadata(uint256,string)&#39;));\n', '\n', '\n', '    string public metaBaseUrl = "https://pixelcoins.io/meta/";\n', '\n', '\n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n', '    ///  ERC-165 (obviously!) and ERC-721.\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\n', '        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n', '    }\n', '\n', '    /// @notice Returns the number ofd Pixels owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    /// @dev Required for ERC-721 compliance\n', '    function balanceOf(address _owner) public view returns (uint256 count) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    /// @notice Transfers a Pixel to another address. If transferring to a smart\n', '    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n', '    ///  PixelCoins specifically) or your Pixel may be lost forever. Seriously.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _tokenId The ID of the Pixel to transfer.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '    {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own any pixel (except very briefly\n', '        // after a gen0 cat is created and before it goes on auction).\n', '        require(_to != address(this));\n', '\n', '        // You can only send your own pixel.\n', '        require(_owns(msg.sender, _tokenId));\n', '        // address is not currently managed by the contract (it is in an auction)\n', '        require(pixelIndexToApproved[_tokenId] != address(this));\n', '\n', '        // Reassign ownership, clear pending approvals, emit Transfer event.\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Grant another address the right to transfer a specific pixel via\n', '    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the pixel that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '    {\n', '        // Only an owner can grant transfer approval.\n', '        require(_owns(msg.sender, _tokenId));\n', '        // address is not currently managed by the contract (it is in an auction)\n', '        require(pixelIndexToApproved[_tokenId] != address(this));\n', '\n', '        // Register the approval (replacing any previous approval).\n', '        pixelIndexToApproved[_tokenId] = _to;\n', '\n', '        // Emit approval event.\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Transfer a Pixel owned by another address, for which the calling address\n', '    ///  has previously been granted transfer approval by the owner.\n', '    /// @param _from The address that owns the pixel to be transfered.\n', '    /// @param _to The address that should take ownership of the Pixel. Can be any address,\n', '    ///  including the caller.\n', '    /// @param _tokenId The ID of the Pixel to be transferred.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '    {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own anyd Pixels (except very briefly\n', '        // after a gen0 cat is created and before it goes on auction).\n', '        require(_to != address(this));\n', '        // Check for approval and valid ownership\n', '        require(_approvedFor(msg.sender, _tokenId));\n', '        require(_owns(_from, _tokenId));\n', '\n', '        // Reassign ownership (also clears pending approvals and emits Transfer event).\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Returns the total number of pixels currently in existence.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function totalSupply() public view returns (uint) {\n', '        return WIDTH * HEIGHT;\n', '    }\n', '\n', '    /// @notice Returns the address currently assigned ownership of a given Pixel.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns (address owner)\n', '    {\n', '        owner = pixelIndexToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '\n', '    /// @notice Returns the addresses currently assigned ownership of the given pixel area.\n', '    function ownersOfArea(uint256 x, uint256 y, uint256 x2, uint256 y2) external view returns (address[] result) {\n', '        require(x2 > x && y2 > y);\n', '        require(x2 <= WIDTH && y2 <= HEIGHT);\n', '        result = new address[]((y2 - y) * (x2 - x));\n', '\n', '        uint256 r = 0;\n', '        for (uint256 i = y; i < y2; i++) {\n', '            uint256 tokenId = i * WIDTH;\n', '            for (uint256 j = x; j < x2; j++) {\n', '                result[r] = pixelIndexToOwner[tokenId + j];\n', '                r++;\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Returns a list of all Pixel IDs assigned to an address.\n', '    /// @param _owner The owner whosed Pixels we are interested in.\n', '    /// @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '    ///  expensive (it walks the entire Pixel array looking for pixels belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalPixels = totalSupply();\n', '            uint256 resultIndex = 0;\n', '\n', '            // We count on the fact that all pixels have IDs starting at 0 and increasing\n', '            // sequentially up to the totalCat count.\n', '            uint256 pixelId;\n', '\n', '            for (pixelId = 0; pixelId <= totalPixels; pixelId++) {\n', '                if (pixelIndexToOwner[pixelId] == _owner) {\n', '                    result[resultIndex] = pixelId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '\n', '    // Taken from https://ethereum.stackexchange.com/a/10929\n', '    function uintToString(uint v) constant returns (string str) {\n', '        uint maxlength = 100;\n', '        bytes memory reversed = new bytes(maxlength);\n', '        uint i = 0;\n', '        while (v != 0) {\n', '            uint remainder = v % 10;\n', '            v = v / 10;\n', '            reversed[i++] = byte(48 + remainder);\n', '        }\n', '        bytes memory s = new bytes(i);\n', '        for (uint j = 0; j < i; j++) {\n', '            s[j] = reversed[i - 1 - j];\n', '        }\n', '        str = string(s);\n', '    }\n', '\n', '    // Taken from https://ethereum.stackexchange.com/a/10929\n', '    function appendUintToString(string inStr, uint v) constant returns (string str) {\n', '        uint maxlength = 100;\n', '        bytes memory reversed = new bytes(maxlength);\n', '        uint i = 0;\n', '        while (v != 0) {\n', '            uint remainder = v % 10;\n', '            v = v / 10;\n', '            reversed[i++] = byte(48 + remainder);\n', '        }\n', '        bytes memory inStrb = bytes(inStr);\n', '        bytes memory s = new bytes(inStrb.length + i);\n', '        uint j;\n', '        for (j = 0; j < inStrb.length; j++) {\n', '            s[j] = inStrb[j];\n', '        }\n', '        for (j = 0; j < i; j++) {\n', '            s[j + inStrb.length] = reversed[i - 1 - j];\n', '        }\n', '        str = string(s);\n', '    }\n', '\n', '    function setMetaBaseUrl(string _metaBaseUrl) external onlyAuthority {\n', '        metaBaseUrl = _metaBaseUrl;\n', '    }\n', '\n', '    /// @notice Returns a URI pointing to a metadata package for this token conforming to\n', '    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\n', '    /// @param _tokenId The ID number of the Pixel whose metadata should be returned.\n', '    function tokenMetadata(uint256 _tokenId) external view returns (string infoUrl) {\n', '        return appendUintToString(metaBaseUrl, _tokenId);\n', '    }\n', '}\n', '\n', 'contract PixelPainting is PixelOwnership {\n', '\n', '    event Paint(uint256 tokenId, uint32 color);\n', '\n', '    // Sets the color of an individual pixel\n', '    function setPixelColor(uint256 _tokenId, uint32 _color) external {\n', '        // check that the token id is in the range\n', '        require(_tokenId < HEIGHT * WIDTH);\n', '        // check that the sender is owner of the pixel\n', '        require(_owns(msg.sender, _tokenId));\n', '        colors[_tokenId] = _color;\n', '    }\n', '\n', '    // Sets the color of the pixels in an area, left to right and then top to bottom\n', '    function setPixelAreaColor(uint256 x, uint256 y, uint256 x2, uint256 y2, uint32[] _colors) external {\n', '        require(x2 > x && y2 > y);\n', '        require(x2 <= WIDTH && y2 <= HEIGHT);\n', '        require(_colors.length == (y2 - y) * (x2 - x));\n', '        uint256 r = 0;\n', '        for (uint256 i = y; i < y2; i++) {\n', '            uint256 tokenId = i * WIDTH;\n', '            for (uint256 j = x; j < x2; j++) {\n', '                if (_owns(msg.sender, tokenId + j)) {\n', '                    uint32 color = _colors[r];\n', '                    colors[tokenId + j] = color;\n', '                    Paint(tokenId + j, color);\n', '                }\n', '                r++;\n', '            }\n', '        }\n', '    }\n', '\n', '    // Returns the color of a given pixel\n', '    function getPixelColor(uint256 _tokenId) external view returns (uint32 color) {\n', '        require(_tokenId < HEIGHT * WIDTH);\n', '        color = colors[_tokenId];\n', '    }\n', '\n', '    // Returns the colors of the pixels in an area, left to right and then top to bottom\n', '    function getPixelAreaColor(uint256 x, uint256 y, uint256 x2, uint256 y2) external view returns (uint32[] result) {\n', '        require(x2 > x && y2 > y);\n', '        require(x2 <= WIDTH && y2 <= HEIGHT);\n', '        result = new uint32[]((y2 - y) * (x2 - x));\n', '        uint256 r = 0;\n', '        for (uint256 i = y; i < y2; i++) {\n', '            uint256 tokenId = i * WIDTH;\n', '            for (uint256 j = x; j < x2; j++) {\n', '                result[r] = colors[tokenId + j];\n', '                r++;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @title all functions for buying empty pixels\n', 'contract PixelMinting is PixelPainting {\n', '\n', '    uint public pixelPrice = 3030 szabo;\n', '\n', '    // Set the price for a pixel\n', '    function setNewPixelPrice(uint _pixelPrice) external onlyAuthority {\n', '        pixelPrice = _pixelPrice;\n', '    }\n', '    \n', '    // buy en empty pixel\n', '    function buyEmptyPixel(uint256 _tokenId) external payable {\n', '        require(msg.value == pixelPrice);\n', '        require(_tokenId < HEIGHT * WIDTH);\n', '        require(pixelIndexToOwner[_tokenId] == address(0));\n', '        // increase authority balance\n', '        authorityBalance += msg.value;\n', '        // This will assign ownership, and also emit the Transfer event as\n', '        // per ERC721 draft\n', '        _transfer(0, msg.sender, _tokenId);\n', '    }\n', '\n', '    // buy an area of pixels, left to right, top to bottom\n', '    function buyEmptyPixelArea(uint256 x, uint256 y, uint256 x2, uint256 y2) external payable {\n', '        require(x2 > x && y2 > y);\n', '        require(x2 <= WIDTH && y2 <= HEIGHT);\n', '        require(msg.value == pixelPrice * (x2-x) * (y2-y));\n', '        \n', '        uint256 i;\n', '        uint256 tokenId;\n', '        uint256 j;\n', '        // check that all pixels to buy are available\n', '        for (i = y; i < y2; i++) {\n', '            tokenId = i * WIDTH;\n', '            for (j = x; j < x2; j++) {\n', '                require(pixelIndexToOwner[tokenId + j] == address(0));\n', '            }\n', '        }\n', '\n', '        authorityBalance += msg.value;\n', '\n', '        // Do the actual transfer\n', '        for (i = y; i < y2; i++) {\n', '            tokenId = i * WIDTH;\n', '            for (j = x; j < x2; j++) {\n', '                _transfer(0, msg.sender, tokenId + j);\n', '            }\n', '        }\n', '    }\n', '\n', '}\n', '\n', '/// @title all functions for managing pixel auctions\n', 'contract PixelAuction is PixelMinting {\n', '\n', '    // Represents an auction on an NFT\n', '    struct Auction {\n', '         // Current state of the auction.\n', '        address highestBidder;\n', '        uint highestBid;\n', '        uint256 endTime;\n', '        bool live;\n', '    }\n', '\n', '    // Map from token ID to their corresponding auction.\n', '    mapping (uint256 => Auction) tokenIdToAuction;\n', '    // Allowed withdrawals of previous bids\n', '    mapping (address => uint) pendingReturns;\n', '\n', '    // Duration of an auction\n', '    uint256 public duration = 60 * 60 * 24 * 4;\n', '    // Auctions will be enabled later\n', '    bool public auctionsEnabled = false;\n', '\n', '    // Change the duration for new auctions\n', '    function setDuration(uint _duration) external onlyAuthority {\n', '        duration = _duration;\n', '    }\n', '\n', '    // Enable or disable auctions\n', '    function setAuctionsEnabled(bool _auctionsEnabled) external onlyAuthority {\n', '        auctionsEnabled = _auctionsEnabled;\n', '    }\n', '\n', '    // create a new auctions for a given pixel, only owner or authority can do this\n', '    // The authority will only do this if pixels are misused or lost\n', '    function createAuction(\n', '        uint256 _tokenId\n', '    )\n', '        external payable\n', '    {\n', '        // only authority or owner can start auction\n', '        require(auctionsEnabled);\n', '        require(_owns(msg.sender, _tokenId) || msg.sender == authorityAddress);\n', '        // No auction is currently running\n', '        require(!tokenIdToAuction[_tokenId].live);\n', '\n', '        uint startPrice = pixelPrice;\n', '        if (msg.sender == authorityAddress) {\n', '            startPrice = 0;\n', '        }\n', '\n', '        require(msg.value == startPrice);\n', '        // this prevents transfers during the auction\n', '        pixelIndexToApproved[_tokenId] = address(this);\n', '\n', '        tokenIdToAuction[_tokenId] = Auction(\n', '            msg.sender,\n', '            startPrice,\n', '            block.timestamp + duration,\n', '            true\n', '        );\n', '        AuctionStarted(_tokenId);\n', '    }\n', '\n', '    // bid for an pixel auction\n', '    function bid(uint256 _tokenId) external payable {\n', '        // No arguments are necessary, all\n', '        // information is already part of\n', '        // the transaction. The keyword payable\n', '        // is required for the function to\n', '        // be able to receive Ether.\n', '        Auction storage auction = tokenIdToAuction[_tokenId];\n', '\n', '        // Revert the call if the bidding\n', '        // period is over.\n', '        require(auction.live);\n', '        require(auction.endTime > block.timestamp);\n', '\n', '        // If the bid is not higher, send the\n', '        // money back.\n', '        require(msg.value > auction.highestBid);\n', '\n', '        if (auction.highestBidder != 0) {\n', '            // Sending back the money by simply using\n', '            // highestBidder.send(highestBid) is a security risk\n', '            // because it could execute an untrusted contract.\n', '            // It is always safer to let the recipients\n', '            // withdraw their money themselves.\n', '            pendingReturns[auction.highestBidder] += auction.highestBid;\n', '        }\n', '        \n', '        auction.highestBidder = msg.sender;\n', '        auction.highestBid = msg.value;\n', '\n', '        HighestBidIncreased(_tokenId, msg.sender, msg.value);\n', '    }\n', '\n', '    /// Withdraw a bid that was overbid.\n', '    function withdraw() external returns (bool) {\n', '        uint amount = pendingReturns[msg.sender];\n', '        if (amount > 0) {\n', '            // It is important to set this to zero because the recipient\n', '            // can call this function again as part of the receiving call\n', '            // before `send` returns.\n', '            pendingReturns[msg.sender] = 0;\n', '\n', '            if (!msg.sender.send(amount)) {\n', '                // No need to call throw here, just reset the amount owing\n', '                pendingReturns[msg.sender] = amount;\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // /// End the auction and send the highest bid\n', '    // /// to the beneficiary.\n', '    function endAuction(uint256 _tokenId) external {\n', '        // It is a good guideline to structure functions that interact\n', '        // with other contracts (i.e. they call functions or send Ether)\n', '        // into three phases:\n', '        // 1. checking conditions\n', '        // 2. performing actions (potentially changing conditions)\n', '        // 3. interacting with other contracts\n', '        // If these phases are mixed up, the other contract could call\n', '        // back into the current contract and modify the state or cause\n', '        // effects (ether payout) to be performed multiple times.\n', '        // If functions called internally include interaction with external\n', '        // contracts, they also have to be considered interaction with\n', '        // external contracts.\n', '\n', '        Auction storage auction = tokenIdToAuction[_tokenId];\n', '\n', '        // 1. Conditions\n', '        require(auction.endTime < block.timestamp);\n', '        require(auction.live); // this function has already been called\n', '\n', '        // 2. Effects\n', '        auction.live = false;\n', '        AuctionEnded(_tokenId, auction.highestBidder, auction.highestBid);\n', '\n', '        // 3. Interaction\n', '        address owner = pixelIndexToOwner[_tokenId];\n', '        // transfer money without \n', '        uint amount = auction.highestBid * 9 / 10;\n', '        pendingReturns[owner] += amount;\n', '        authorityBalance += (auction.highestBid - amount);\n', '        // transfer token\n', '        _transfer(owner, auction.highestBidder, _tokenId);\n', '\n', '       \n', '    }\n', '\n', '    // // Events that will be fired on changes.\n', '    event AuctionStarted(uint256 _tokenId);\n', '    event HighestBidIncreased(uint256 _tokenId, address bidder, uint amount);\n', '    event AuctionEnded(uint256 _tokenId, address winner, uint amount);\n', '\n', '\n', '    /// @dev Returns auction info for an NFT on auction.\n', '    /// @param _tokenId - ID of NFT on auction.\n', '    function getAuction(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns\n', '    (\n', '        address highestBidder,\n', '        uint highestBid,\n', '        uint endTime,\n', '        bool live\n', '    ) {\n', '        Auction storage auction = tokenIdToAuction[_tokenId];\n', '        return (\n', '            auction.highestBidder,\n', '            auction.highestBid,\n', '            auction.endTime,\n', '            auction.live\n', '        );\n', '    }\n', '\n', '    /// @dev Returns the current price of an auction.\n', '    /// @param _tokenId - ID of the token price we are checking.\n', '    function getHighestBid(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        Auction storage auction = tokenIdToAuction[_tokenId];\n', '        return auction.highestBid;\n', '    }\n', '}\n', '\n', '\n', '/// @title PixelCore: Pixels in the blockchain\n', '/// @author Oliver Schneider <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9bf2f5fdf4dbebf2e3fef7f8f4f2f5e8b5f2f4">[email&#160;protected]</a>> (https://pixelcoins.io), based on Axiom Zen (https://www.axiomzen.co)\n', '/// @dev The main PixelCoins contract\n', 'contract PixelCore is PixelAuction {\n', '\n', '    // Set in case the core contract is broken and an upgrade is required\n', '    address public newContractAddress;\n', '\n', '    /// @notice Creates the main PixelCore smart contract instance.\n', '    function PixelCore() public {\n', '        // the creator of the contract is the initial authority\n', '        authorityAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n', '    ///  breaking bug. This method does nothing but keep track of the new contract and\n', '    ///  emit a message indicating that the new address is set. It&#39;s up to clients of this\n', '    ///  contract to update to the new contract address in that case. (This contract will\n', '    ///  be paused indefinitely if such an upgrade takes place.)\n', '    /// @param _v2Address new address\n', '    function setNewAddress(address _v2Address) external onlyAuthority {\n', '        newContractAddress = _v2Address;\n', '        ContractUpgrade(_v2Address);\n', '    }\n', '\n', '    // @dev Allows the authority to capture the balance available to the contract.\n', '    function withdrawBalance() external onlyAuthority returns (bool) {\n', '        uint amount = authorityBalance;\n', '        if (amount > 0) {\n', '            authorityBalance = 0;\n', '            if (!authorityAddress.send(amount)) {\n', '                authorityBalance = amount;\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '}']
['// PixelCoins Source code\n', 'pragma solidity ^0.4.11;\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '    // Required methods\n', '    function totalSupply() public view returns (uint256 total);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function ownerOf(uint256 _tokenId) external view returns (address owner);\n', '    function approve(address _to, uint256 _tokenId) external;\n', '    function transfer(address _to, uint256 _tokenId) external;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '\n', '    // Events\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '    event Approval(address owner, address approved, uint256 tokenId);\n', '\n', '    // Optional\n', '    // function name() public view returns (string name);\n', '    // function symbol() public view returns (string symbol);\n', '    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n', '    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\n', '\n', '    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\n', '}\n', '\n', '\n', '/// @title A facet of PixelCore that manages special access privileges.\n', '/// @author Oliver Schneider <info@pixelcoins.io> (https://pixelcoins.io)\n', 'contract PixelAuthority {\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    address public authorityAddress;\n', '    uint public authorityBalance = 0;\n', '\n', '    /// @dev Access modifier for authority-only functionality\n', '    modifier onlyAuthority() {\n', '        require(msg.sender == authorityAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the authority. Only available to the current authority.\n', '    /// @param _newAuthority The address of the new authority\n', '    function setAuthority(address _newAuthority) external onlyAuthority {\n', '        require(_newAuthority != address(0));\n', '        authorityAddress = _newAuthority;\n', '    }\n', '\n', '}\n', '\n', '\n', '/// @title Base contract for PixelCoins. Holds all common structs, events and base variables.\n', '/// @author Oliver Schneider <info@pixelcoins.io> (https://pixelcoins.io)\n', '/// @dev See the PixelCore contract documentation to understand how the various contract facets are arranged.\n', 'contract PixelBase is PixelAuthority {\n', '    /*** EVENTS ***/\n', '\n', '    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a Pixel\n', '    ///  ownership is assigned.\n', '    event Transfer(address from, address to, uint256 tokenId);\n', '\n', '    /*** CONSTANTS ***/\n', '    uint32 public WIDTH = 1000;\n', '    uint32 public HEIGHT = 1000;\n', '\n', '    /*** STORAGE ***/\n', '    /// @dev A mapping from pixel ids to the address that owns them. A pixel address of 0 means,\n', '    /// that the pixel can still be bought.\n', '    mapping (uint256 => address) public pixelIndexToOwner;\n', '    /// Address that is approved to change ownship\n', '    mapping (uint256 => address) public pixelIndexToApproved;\n', '    /// Stores the color of an pixel, indexed by pixelid\n', '    mapping (uint256 => uint32) public colors;\n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping (address => uint256) ownershipTokenCount;\n', '\n', '    // Internal utility functions: These functions all assume that their input arguments\n', '    // are valid. We leave it to public methods to sanitize their inputs and follow\n', '    // the required logic.\n', '\n', '    /// @dev Assigns ownership of a specific Pixel to an address.\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        // Can no overflowe since the number of Pixels is capped.\n', '        // transfer ownership\n', '        ownershipTokenCount[_to]++;\n', '        pixelIndexToOwner[_tokenId] = _to;\n', '        if (_from != address(0)) {\n', '            ownershipTokenCount[_from]--;\n', '            delete pixelIndexToApproved[_tokenId];\n', '        }\n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Checks if a given address is the current owner of a particular Pixel.\n', '    /// @param _claimant the address we are validating against.\n', '    /// @param _tokenId Pixel id\n', '    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return pixelIndexToOwner[_tokenId] == _claimant;\n', '    }\n', '\n', '    /// @dev Checks if a given address currently has transferApproval for a particular Pixel.\n', '    /// @param _claimant the address we are confirming pixel is approved for.\n', '    /// @param _tokenId pixel id, only valid when > 0\n', '    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return pixelIndexToApproved[_tokenId] == _claimant;\n', '    }\n', '}\n', '\n', '\n', '/// @title The facet of the PixelCoins core contract that manages ownership, ERC-721 (draft) compliant.\n', '/// @author Oliver Schneider <info@pixelcoins.io> (https://pixelcoins.io), based on Axiom Zen (https://www.axiomzen.co)\n', '/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\n', '///  See the PixelCore contract documentation to understand how the various contract facets are arranged.\n', 'contract PixelOwnership is PixelBase, ERC721 {\n', '\n', '    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant name = "PixelCoins";\n', '    string public constant symbol = "PXL";\n', '\n', '\n', '    bytes4 constant InterfaceSignature_ERC165 =\n', "        bytes4(keccak256('supportsInterface(bytes4)'));\n", '\n', '    bytes4 constant InterfaceSignature_ERC721 =\n', "        bytes4(keccak256('name()')) ^\n", "        bytes4(keccak256('symbol()')) ^\n", "        bytes4(keccak256('totalSupply()')) ^\n", "        bytes4(keccak256('balanceOf(address)')) ^\n", "        bytes4(keccak256('ownerOf(uint256)')) ^\n", "        bytes4(keccak256('approve(address,uint256)')) ^\n", "        bytes4(keccak256('transfer(address,uint256)')) ^\n", "        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "        bytes4(keccak256('tokensOfOwner(address)')) ^\n", "        bytes4(keccak256('tokenMetadata(uint256,string)'));\n", '\n', '\n', '    string public metaBaseUrl = "https://pixelcoins.io/meta/";\n', '\n', '\n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    ///  Returns true for any standardized interfaces implemented by this contract. We implement\n', '    ///  ERC-165 (obviously!) and ERC-721.\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\n', '        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\n', '    }\n', '\n', '    /// @notice Returns the number ofd Pixels owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    /// @dev Required for ERC-721 compliance\n', '    function balanceOf(address _owner) public view returns (uint256 count) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    /// @notice Transfers a Pixel to another address. If transferring to a smart\n', '    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\n', '    ///  PixelCoins specifically) or your Pixel may be lost forever. Seriously.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _tokenId The ID of the Pixel to transfer.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '    {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own any pixel (except very briefly\n', '        // after a gen0 cat is created and before it goes on auction).\n', '        require(_to != address(this));\n', '\n', '        // You can only send your own pixel.\n', '        require(_owns(msg.sender, _tokenId));\n', '        // address is not currently managed by the contract (it is in an auction)\n', '        require(pixelIndexToApproved[_tokenId] != address(this));\n', '\n', '        // Reassign ownership, clear pending approvals, emit Transfer event.\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Grant another address the right to transfer a specific pixel via\n', '    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the pixel that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '    {\n', '        // Only an owner can grant transfer approval.\n', '        require(_owns(msg.sender, _tokenId));\n', '        // address is not currently managed by the contract (it is in an auction)\n', '        require(pixelIndexToApproved[_tokenId] != address(this));\n', '\n', '        // Register the approval (replacing any previous approval).\n', '        pixelIndexToApproved[_tokenId] = _to;\n', '\n', '        // Emit approval event.\n', '        Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Transfer a Pixel owned by another address, for which the calling address\n', '    ///  has previously been granted transfer approval by the owner.\n', '    /// @param _from The address that owns the pixel to be transfered.\n', '    /// @param _to The address that should take ownership of the Pixel. Can be any address,\n', '    ///  including the caller.\n', '    /// @param _tokenId The ID of the Pixel to be transferred.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        external\n', '    {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        // The contract should never own anyd Pixels (except very briefly\n', '        // after a gen0 cat is created and before it goes on auction).\n', '        require(_to != address(this));\n', '        // Check for approval and valid ownership\n', '        require(_approvedFor(msg.sender, _tokenId));\n', '        require(_owns(_from, _tokenId));\n', '\n', '        // Reassign ownership (also clears pending approvals and emits Transfer event).\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @notice Returns the total number of pixels currently in existence.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function totalSupply() public view returns (uint) {\n', '        return WIDTH * HEIGHT;\n', '    }\n', '\n', '    /// @notice Returns the address currently assigned ownership of a given Pixel.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns (address owner)\n', '    {\n', '        owner = pixelIndexToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '\n', '    /// @notice Returns the addresses currently assigned ownership of the given pixel area.\n', '    function ownersOfArea(uint256 x, uint256 y, uint256 x2, uint256 y2) external view returns (address[] result) {\n', '        require(x2 > x && y2 > y);\n', '        require(x2 <= WIDTH && y2 <= HEIGHT);\n', '        result = new address[]((y2 - y) * (x2 - x));\n', '\n', '        uint256 r = 0;\n', '        for (uint256 i = y; i < y2; i++) {\n', '            uint256 tokenId = i * WIDTH;\n', '            for (uint256 j = x; j < x2; j++) {\n', '                result[r] = pixelIndexToOwner[tokenId + j];\n', '                r++;\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Returns a list of all Pixel IDs assigned to an address.\n', '    /// @param _owner The owner whosed Pixels we are interested in.\n', "    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '    ///  expensive (it walks the entire Pixel array looking for pixels belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalPixels = totalSupply();\n', '            uint256 resultIndex = 0;\n', '\n', '            // We count on the fact that all pixels have IDs starting at 0 and increasing\n', '            // sequentially up to the totalCat count.\n', '            uint256 pixelId;\n', '\n', '            for (pixelId = 0; pixelId <= totalPixels; pixelId++) {\n', '                if (pixelIndexToOwner[pixelId] == _owner) {\n', '                    result[resultIndex] = pixelId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '\n', '    // Taken from https://ethereum.stackexchange.com/a/10929\n', '    function uintToString(uint v) constant returns (string str) {\n', '        uint maxlength = 100;\n', '        bytes memory reversed = new bytes(maxlength);\n', '        uint i = 0;\n', '        while (v != 0) {\n', '            uint remainder = v % 10;\n', '            v = v / 10;\n', '            reversed[i++] = byte(48 + remainder);\n', '        }\n', '        bytes memory s = new bytes(i);\n', '        for (uint j = 0; j < i; j++) {\n', '            s[j] = reversed[i - 1 - j];\n', '        }\n', '        str = string(s);\n', '    }\n', '\n', '    // Taken from https://ethereum.stackexchange.com/a/10929\n', '    function appendUintToString(string inStr, uint v) constant returns (string str) {\n', '        uint maxlength = 100;\n', '        bytes memory reversed = new bytes(maxlength);\n', '        uint i = 0;\n', '        while (v != 0) {\n', '            uint remainder = v % 10;\n', '            v = v / 10;\n', '            reversed[i++] = byte(48 + remainder);\n', '        }\n', '        bytes memory inStrb = bytes(inStr);\n', '        bytes memory s = new bytes(inStrb.length + i);\n', '        uint j;\n', '        for (j = 0; j < inStrb.length; j++) {\n', '            s[j] = inStrb[j];\n', '        }\n', '        for (j = 0; j < i; j++) {\n', '            s[j + inStrb.length] = reversed[i - 1 - j];\n', '        }\n', '        str = string(s);\n', '    }\n', '\n', '    function setMetaBaseUrl(string _metaBaseUrl) external onlyAuthority {\n', '        metaBaseUrl = _metaBaseUrl;\n', '    }\n', '\n', '    /// @notice Returns a URI pointing to a metadata package for this token conforming to\n', '    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\n', '    /// @param _tokenId The ID number of the Pixel whose metadata should be returned.\n', '    function tokenMetadata(uint256 _tokenId) external view returns (string infoUrl) {\n', '        return appendUintToString(metaBaseUrl, _tokenId);\n', '    }\n', '}\n', '\n', 'contract PixelPainting is PixelOwnership {\n', '\n', '    event Paint(uint256 tokenId, uint32 color);\n', '\n', '    // Sets the color of an individual pixel\n', '    function setPixelColor(uint256 _tokenId, uint32 _color) external {\n', '        // check that the token id is in the range\n', '        require(_tokenId < HEIGHT * WIDTH);\n', '        // check that the sender is owner of the pixel\n', '        require(_owns(msg.sender, _tokenId));\n', '        colors[_tokenId] = _color;\n', '    }\n', '\n', '    // Sets the color of the pixels in an area, left to right and then top to bottom\n', '    function setPixelAreaColor(uint256 x, uint256 y, uint256 x2, uint256 y2, uint32[] _colors) external {\n', '        require(x2 > x && y2 > y);\n', '        require(x2 <= WIDTH && y2 <= HEIGHT);\n', '        require(_colors.length == (y2 - y) * (x2 - x));\n', '        uint256 r = 0;\n', '        for (uint256 i = y; i < y2; i++) {\n', '            uint256 tokenId = i * WIDTH;\n', '            for (uint256 j = x; j < x2; j++) {\n', '                if (_owns(msg.sender, tokenId + j)) {\n', '                    uint32 color = _colors[r];\n', '                    colors[tokenId + j] = color;\n', '                    Paint(tokenId + j, color);\n', '                }\n', '                r++;\n', '            }\n', '        }\n', '    }\n', '\n', '    // Returns the color of a given pixel\n', '    function getPixelColor(uint256 _tokenId) external view returns (uint32 color) {\n', '        require(_tokenId < HEIGHT * WIDTH);\n', '        color = colors[_tokenId];\n', '    }\n', '\n', '    // Returns the colors of the pixels in an area, left to right and then top to bottom\n', '    function getPixelAreaColor(uint256 x, uint256 y, uint256 x2, uint256 y2) external view returns (uint32[] result) {\n', '        require(x2 > x && y2 > y);\n', '        require(x2 <= WIDTH && y2 <= HEIGHT);\n', '        result = new uint32[]((y2 - y) * (x2 - x));\n', '        uint256 r = 0;\n', '        for (uint256 i = y; i < y2; i++) {\n', '            uint256 tokenId = i * WIDTH;\n', '            for (uint256 j = x; j < x2; j++) {\n', '                result[r] = colors[tokenId + j];\n', '                r++;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @title all functions for buying empty pixels\n', 'contract PixelMinting is PixelPainting {\n', '\n', '    uint public pixelPrice = 3030 szabo;\n', '\n', '    // Set the price for a pixel\n', '    function setNewPixelPrice(uint _pixelPrice) external onlyAuthority {\n', '        pixelPrice = _pixelPrice;\n', '    }\n', '    \n', '    // buy en empty pixel\n', '    function buyEmptyPixel(uint256 _tokenId) external payable {\n', '        require(msg.value == pixelPrice);\n', '        require(_tokenId < HEIGHT * WIDTH);\n', '        require(pixelIndexToOwner[_tokenId] == address(0));\n', '        // increase authority balance\n', '        authorityBalance += msg.value;\n', '        // This will assign ownership, and also emit the Transfer event as\n', '        // per ERC721 draft\n', '        _transfer(0, msg.sender, _tokenId);\n', '    }\n', '\n', '    // buy an area of pixels, left to right, top to bottom\n', '    function buyEmptyPixelArea(uint256 x, uint256 y, uint256 x2, uint256 y2) external payable {\n', '        require(x2 > x && y2 > y);\n', '        require(x2 <= WIDTH && y2 <= HEIGHT);\n', '        require(msg.value == pixelPrice * (x2-x) * (y2-y));\n', '        \n', '        uint256 i;\n', '        uint256 tokenId;\n', '        uint256 j;\n', '        // check that all pixels to buy are available\n', '        for (i = y; i < y2; i++) {\n', '            tokenId = i * WIDTH;\n', '            for (j = x; j < x2; j++) {\n', '                require(pixelIndexToOwner[tokenId + j] == address(0));\n', '            }\n', '        }\n', '\n', '        authorityBalance += msg.value;\n', '\n', '        // Do the actual transfer\n', '        for (i = y; i < y2; i++) {\n', '            tokenId = i * WIDTH;\n', '            for (j = x; j < x2; j++) {\n', '                _transfer(0, msg.sender, tokenId + j);\n', '            }\n', '        }\n', '    }\n', '\n', '}\n', '\n', '/// @title all functions for managing pixel auctions\n', 'contract PixelAuction is PixelMinting {\n', '\n', '    // Represents an auction on an NFT\n', '    struct Auction {\n', '         // Current state of the auction.\n', '        address highestBidder;\n', '        uint highestBid;\n', '        uint256 endTime;\n', '        bool live;\n', '    }\n', '\n', '    // Map from token ID to their corresponding auction.\n', '    mapping (uint256 => Auction) tokenIdToAuction;\n', '    // Allowed withdrawals of previous bids\n', '    mapping (address => uint) pendingReturns;\n', '\n', '    // Duration of an auction\n', '    uint256 public duration = 60 * 60 * 24 * 4;\n', '    // Auctions will be enabled later\n', '    bool public auctionsEnabled = false;\n', '\n', '    // Change the duration for new auctions\n', '    function setDuration(uint _duration) external onlyAuthority {\n', '        duration = _duration;\n', '    }\n', '\n', '    // Enable or disable auctions\n', '    function setAuctionsEnabled(bool _auctionsEnabled) external onlyAuthority {\n', '        auctionsEnabled = _auctionsEnabled;\n', '    }\n', '\n', '    // create a new auctions for a given pixel, only owner or authority can do this\n', '    // The authority will only do this if pixels are misused or lost\n', '    function createAuction(\n', '        uint256 _tokenId\n', '    )\n', '        external payable\n', '    {\n', '        // only authority or owner can start auction\n', '        require(auctionsEnabled);\n', '        require(_owns(msg.sender, _tokenId) || msg.sender == authorityAddress);\n', '        // No auction is currently running\n', '        require(!tokenIdToAuction[_tokenId].live);\n', '\n', '        uint startPrice = pixelPrice;\n', '        if (msg.sender == authorityAddress) {\n', '            startPrice = 0;\n', '        }\n', '\n', '        require(msg.value == startPrice);\n', '        // this prevents transfers during the auction\n', '        pixelIndexToApproved[_tokenId] = address(this);\n', '\n', '        tokenIdToAuction[_tokenId] = Auction(\n', '            msg.sender,\n', '            startPrice,\n', '            block.timestamp + duration,\n', '            true\n', '        );\n', '        AuctionStarted(_tokenId);\n', '    }\n', '\n', '    // bid for an pixel auction\n', '    function bid(uint256 _tokenId) external payable {\n', '        // No arguments are necessary, all\n', '        // information is already part of\n', '        // the transaction. The keyword payable\n', '        // is required for the function to\n', '        // be able to receive Ether.\n', '        Auction storage auction = tokenIdToAuction[_tokenId];\n', '\n', '        // Revert the call if the bidding\n', '        // period is over.\n', '        require(auction.live);\n', '        require(auction.endTime > block.timestamp);\n', '\n', '        // If the bid is not higher, send the\n', '        // money back.\n', '        require(msg.value > auction.highestBid);\n', '\n', '        if (auction.highestBidder != 0) {\n', '            // Sending back the money by simply using\n', '            // highestBidder.send(highestBid) is a security risk\n', '            // because it could execute an untrusted contract.\n', '            // It is always safer to let the recipients\n', '            // withdraw their money themselves.\n', '            pendingReturns[auction.highestBidder] += auction.highestBid;\n', '        }\n', '        \n', '        auction.highestBidder = msg.sender;\n', '        auction.highestBid = msg.value;\n', '\n', '        HighestBidIncreased(_tokenId, msg.sender, msg.value);\n', '    }\n', '\n', '    /// Withdraw a bid that was overbid.\n', '    function withdraw() external returns (bool) {\n', '        uint amount = pendingReturns[msg.sender];\n', '        if (amount > 0) {\n', '            // It is important to set this to zero because the recipient\n', '            // can call this function again as part of the receiving call\n', '            // before `send` returns.\n', '            pendingReturns[msg.sender] = 0;\n', '\n', '            if (!msg.sender.send(amount)) {\n', '                // No need to call throw here, just reset the amount owing\n', '                pendingReturns[msg.sender] = amount;\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // /// End the auction and send the highest bid\n', '    // /// to the beneficiary.\n', '    function endAuction(uint256 _tokenId) external {\n', '        // It is a good guideline to structure functions that interact\n', '        // with other contracts (i.e. they call functions or send Ether)\n', '        // into three phases:\n', '        // 1. checking conditions\n', '        // 2. performing actions (potentially changing conditions)\n', '        // 3. interacting with other contracts\n', '        // If these phases are mixed up, the other contract could call\n', '        // back into the current contract and modify the state or cause\n', '        // effects (ether payout) to be performed multiple times.\n', '        // If functions called internally include interaction with external\n', '        // contracts, they also have to be considered interaction with\n', '        // external contracts.\n', '\n', '        Auction storage auction = tokenIdToAuction[_tokenId];\n', '\n', '        // 1. Conditions\n', '        require(auction.endTime < block.timestamp);\n', '        require(auction.live); // this function has already been called\n', '\n', '        // 2. Effects\n', '        auction.live = false;\n', '        AuctionEnded(_tokenId, auction.highestBidder, auction.highestBid);\n', '\n', '        // 3. Interaction\n', '        address owner = pixelIndexToOwner[_tokenId];\n', '        // transfer money without \n', '        uint amount = auction.highestBid * 9 / 10;\n', '        pendingReturns[owner] += amount;\n', '        authorityBalance += (auction.highestBid - amount);\n', '        // transfer token\n', '        _transfer(owner, auction.highestBidder, _tokenId);\n', '\n', '       \n', '    }\n', '\n', '    // // Events that will be fired on changes.\n', '    event AuctionStarted(uint256 _tokenId);\n', '    event HighestBidIncreased(uint256 _tokenId, address bidder, uint amount);\n', '    event AuctionEnded(uint256 _tokenId, address winner, uint amount);\n', '\n', '\n', '    /// @dev Returns auction info for an NFT on auction.\n', '    /// @param _tokenId - ID of NFT on auction.\n', '    function getAuction(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns\n', '    (\n', '        address highestBidder,\n', '        uint highestBid,\n', '        uint endTime,\n', '        bool live\n', '    ) {\n', '        Auction storage auction = tokenIdToAuction[_tokenId];\n', '        return (\n', '            auction.highestBidder,\n', '            auction.highestBid,\n', '            auction.endTime,\n', '            auction.live\n', '        );\n', '    }\n', '\n', '    /// @dev Returns the current price of an auction.\n', '    /// @param _tokenId - ID of the token price we are checking.\n', '    function getHighestBid(uint256 _tokenId)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        Auction storage auction = tokenIdToAuction[_tokenId];\n', '        return auction.highestBid;\n', '    }\n', '}\n', '\n', '\n', '/// @title PixelCore: Pixels in the blockchain\n', '/// @author Oliver Schneider <info@pixelcoins.io> (https://pixelcoins.io), based on Axiom Zen (https://www.axiomzen.co)\n', '/// @dev The main PixelCoins contract\n', 'contract PixelCore is PixelAuction {\n', '\n', '    // Set in case the core contract is broken and an upgrade is required\n', '    address public newContractAddress;\n', '\n', '    /// @notice Creates the main PixelCore smart contract instance.\n', '    function PixelCore() public {\n', '        // the creator of the contract is the initial authority\n', '        authorityAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\n', '    ///  breaking bug. This method does nothing but keep track of the new contract and\n', "    ///  emit a message indicating that the new address is set. It's up to clients of this\n", '    ///  contract to update to the new contract address in that case. (This contract will\n', '    ///  be paused indefinitely if such an upgrade takes place.)\n', '    /// @param _v2Address new address\n', '    function setNewAddress(address _v2Address) external onlyAuthority {\n', '        newContractAddress = _v2Address;\n', '        ContractUpgrade(_v2Address);\n', '    }\n', '\n', '    // @dev Allows the authority to capture the balance available to the contract.\n', '    function withdrawBalance() external onlyAuthority returns (bool) {\n', '        uint amount = authorityBalance;\n', '        if (amount > 0) {\n', '            authorityBalance = 0;\n', '            if (!authorityAddress.send(amount)) {\n', '                authorityBalance = amount;\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '}']
