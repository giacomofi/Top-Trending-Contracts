['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract ERC20Basic {\n', '}\n', '\n', 'contract FreeItemFarm\n', '{\n', '    ERC20Basic public object;\n', '    function buyObject(address _beneficiary) external payable;\n', '}\n', '\n', 'interface Item_token\n', '{\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/*  In the event that the frontend goes down you will still be able to access the contract\n', '    through myetherwallet.  You go to myetherwallet, select the contract tab, then copy paste in the address\n', '    of the farming contract.  Then copy paste in the ABI and click access.  You will see the available functions \n', '    in the drop down below.\n', '\n', '    Quick instructions for each function. List of addresses for token and shops found here.  http://ethercraft.info/index.php/Addresses \n', '\n', '    farmItem:  shop_address is the address of the item shop you want to farm.  buy_amount is the amount you want to buy.\n', '    e.g. stone boots.  shop_address = 0xc5cE28De7675a3a4518F2F697249F1c90856d0F5, buy_amount = 100\n', '\n', '    withdrawMultiTokens: takes in multiple token_addresses that you want to withdraw.  Token addresses can be found in the site above.\n', '    e.g. token_address1, token_address2, token_address3.\n', '\n', '    If you want to view the balance of a token you have in the contract select tokenInventory in the dropdown on myetherwallet.\n', '    The first address box is the address you used to call the farm function from.\n', '    The second address box is the address of the token you want to check.\n', '    The result is the amount you have in the contract.*/   \n', '\n', 'contract FlexiFarmv2 is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    bool private reentrancy_lock = false;\n', '\n', '    mapping(address => mapping(address => uint256)) public tokenInventory;\n', '    mapping(address => address) public shops;\n', '\n', '    uint256 public total_buy;\n', '    uint256 public gas_amount;\n', '      \n', '    modifier nonReentrant() {\n', '        require(!reentrancy_lock);\n', '        reentrancy_lock = true;\n', '        _;\n', '        reentrancy_lock = false;\n', '    }\n', '\n', '   \n', '    function set_Gas(uint256 gas_val) onlyOwner external{\n', '      gas_amount = gas_val;\n', '    }\n', '\n', '    \n', '    function set_Total(uint256 buy_val) onlyOwner external{\n', '      total_buy = buy_val;\n', '    }\n', '\n', '    //associating each shop with a token to prevent anyone gaming the system.  users can view these themselves to ensure the shops match the tokens\n', '    //if they want.  \n', '    function set_Shops(address[] shop_addresses, address[] token_addresses) onlyOwner nonReentrant external\n', '    {\n', '      require (shop_addresses.length == token_addresses.length);       \n', '\n', '      for(uint256 i = 0; i < shop_addresses.length; i++){        \n', '          shops[shop_addresses[i]] = token_addresses[i];              \n', '      } \n', '    }\n', '\n', '    //populates contract with 1 of each farmable token to deal with storage creation gas cost\n', '\n', '    function initialBuy(address[] shop_addresses) onlyOwner nonReentrant external\n', '    {\n', '      require (shop_addresses.length <= 15);       \n', '\n', '      for(uint256 i = 0; i < shop_addresses.length; i++){        \n', '          FreeItemFarm(shop_addresses[i]).buyObject(this);              \n', '      } \n', '    }\n', '\n', '    function farmItems(address[] shop_addresses, uint256[] buy_amounts) nonReentrant external\n', '    {\n', '      require(shop_addresses.length == buy_amounts.length);\n', '      uint256 totals;\n', '      for (uint256 j = 0; j < buy_amounts.length; j++){  \n', '        totals+=buy_amounts[j];\n', '        assert(totals >= buy_amounts[j]);\n', '      }\n', '      require(totals <= total_buy);     \n', '      \n', '      for (uint256 i = 0; i < buy_amounts.length; i++){\n', '        farmSingle(shop_addresses[i], buy_amounts[i]);\n', '      }\n', '    }\n', '\n', '    function farmSingle(address shop_address, uint256 buy_amount) private\n', '    {   \n', '      address token_address = shops[shop_address];\n', '                               \n', '      for (uint256 i = 0; i < buy_amount; i++) {\n', '            require(shop_address.call.gas(26290).value(0)() == true);\n', '      }\n', '      tokenInventory[msg.sender][token_address] = tokenInventory[msg.sender][token_address].add(buy_amount);   \n', '    } \n', '\n', '    function withdrawTokens(address[] token_addresses) nonReentrant external{\n', '      for(uint256 i = 0; i < token_addresses.length; i++){\n', '        withdrawToken(token_addresses[i]);\n', '      }\n', '    }\n', '\n', '    function withdrawToken(address token_address) private {\n', '        require(tokenInventory[msg.sender][token_address] > 0);\n', '        uint256 tokenbal = tokenInventory[msg.sender][token_address].mul(1 ether);\n', '        tokenInventory[msg.sender][token_address] = 0;\n', '        Item_token(token_address).transfer(msg.sender, tokenbal);        \n', '    }  \n', '\n', '    //just in case the amount of gas per item exceeds 26290.\n', '    function backupfarmItems(address[] shop_addresses, uint256[] buy_amounts) nonReentrant external\n', '    {\n', '      require(shop_addresses.length == buy_amounts.length);\n', '      uint256 totals;\n', '      for (uint256 j = 0; j < buy_amounts.length; j++){  \n', '        totals=buy_amounts[j];\n', '        assert(totals >= buy_amounts[j]);\n', '      }\n', '      require(totals <= total_buy);     \n', '      \n', '      for (uint256 i = 0; i < buy_amounts.length; i++){\n', '        backupfarmSingle(shop_addresses[i], buy_amounts[i]);\n', '      }\n', '    }        \n', '   \n', '    function backupfarmSingle(address shop_address, uint256 buy_amount) private\n', '    { \n', '      address token_address = shops[shop_address]; \n', '      for (uint256 i = 0; i < buy_amount; i++) {\n', '            require(shop_address.call.gas(gas_amount).value(0)() == true);\n', '      }\n', '      tokenInventory[msg.sender][token_address] = tokenInventory[msg.sender][token_address].add(buy_amount); \n', '    } \n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract ERC20Basic {\n', '}\n', '\n', 'contract FreeItemFarm\n', '{\n', '    ERC20Basic public object;\n', '    function buyObject(address _beneficiary) external payable;\n', '}\n', '\n', 'interface Item_token\n', '{\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/*  In the event that the frontend goes down you will still be able to access the contract\n', '    through myetherwallet.  You go to myetherwallet, select the contract tab, then copy paste in the address\n', '    of the farming contract.  Then copy paste in the ABI and click access.  You will see the available functions \n', '    in the drop down below.\n', '\n', '    Quick instructions for each function. List of addresses for token and shops found here.  http://ethercraft.info/index.php/Addresses \n', '\n', '    farmItem:  shop_address is the address of the item shop you want to farm.  buy_amount is the amount you want to buy.\n', '    e.g. stone boots.  shop_address = 0xc5cE28De7675a3a4518F2F697249F1c90856d0F5, buy_amount = 100\n', '\n', '    withdrawMultiTokens: takes in multiple token_addresses that you want to withdraw.  Token addresses can be found in the site above.\n', '    e.g. token_address1, token_address2, token_address3.\n', '\n', '    If you want to view the balance of a token you have in the contract select tokenInventory in the dropdown on myetherwallet.\n', '    The first address box is the address you used to call the farm function from.\n', '    The second address box is the address of the token you want to check.\n', '    The result is the amount you have in the contract.*/   \n', '\n', 'contract FlexiFarmv2 is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    bool private reentrancy_lock = false;\n', '\n', '    mapping(address => mapping(address => uint256)) public tokenInventory;\n', '    mapping(address => address) public shops;\n', '\n', '    uint256 public total_buy;\n', '    uint256 public gas_amount;\n', '      \n', '    modifier nonReentrant() {\n', '        require(!reentrancy_lock);\n', '        reentrancy_lock = true;\n', '        _;\n', '        reentrancy_lock = false;\n', '    }\n', '\n', '   \n', '    function set_Gas(uint256 gas_val) onlyOwner external{\n', '      gas_amount = gas_val;\n', '    }\n', '\n', '    \n', '    function set_Total(uint256 buy_val) onlyOwner external{\n', '      total_buy = buy_val;\n', '    }\n', '\n', '    //associating each shop with a token to prevent anyone gaming the system.  users can view these themselves to ensure the shops match the tokens\n', '    //if they want.  \n', '    function set_Shops(address[] shop_addresses, address[] token_addresses) onlyOwner nonReentrant external\n', '    {\n', '      require (shop_addresses.length == token_addresses.length);       \n', '\n', '      for(uint256 i = 0; i < shop_addresses.length; i++){        \n', '          shops[shop_addresses[i]] = token_addresses[i];              \n', '      } \n', '    }\n', '\n', '    //populates contract with 1 of each farmable token to deal with storage creation gas cost\n', '\n', '    function initialBuy(address[] shop_addresses) onlyOwner nonReentrant external\n', '    {\n', '      require (shop_addresses.length <= 15);       \n', '\n', '      for(uint256 i = 0; i < shop_addresses.length; i++){        \n', '          FreeItemFarm(shop_addresses[i]).buyObject(this);              \n', '      } \n', '    }\n', '\n', '    function farmItems(address[] shop_addresses, uint256[] buy_amounts) nonReentrant external\n', '    {\n', '      require(shop_addresses.length == buy_amounts.length);\n', '      uint256 totals;\n', '      for (uint256 j = 0; j < buy_amounts.length; j++){  \n', '        totals+=buy_amounts[j];\n', '        assert(totals >= buy_amounts[j]);\n', '      }\n', '      require(totals <= total_buy);     \n', '      \n', '      for (uint256 i = 0; i < buy_amounts.length; i++){\n', '        farmSingle(shop_addresses[i], buy_amounts[i]);\n', '      }\n', '    }\n', '\n', '    function farmSingle(address shop_address, uint256 buy_amount) private\n', '    {   \n', '      address token_address = shops[shop_address];\n', '                               \n', '      for (uint256 i = 0; i < buy_amount; i++) {\n', '            require(shop_address.call.gas(26290).value(0)() == true);\n', '      }\n', '      tokenInventory[msg.sender][token_address] = tokenInventory[msg.sender][token_address].add(buy_amount);   \n', '    } \n', '\n', '    function withdrawTokens(address[] token_addresses) nonReentrant external{\n', '      for(uint256 i = 0; i < token_addresses.length; i++){\n', '        withdrawToken(token_addresses[i]);\n', '      }\n', '    }\n', '\n', '    function withdrawToken(address token_address) private {\n', '        require(tokenInventory[msg.sender][token_address] > 0);\n', '        uint256 tokenbal = tokenInventory[msg.sender][token_address].mul(1 ether);\n', '        tokenInventory[msg.sender][token_address] = 0;\n', '        Item_token(token_address).transfer(msg.sender, tokenbal);        \n', '    }  \n', '\n', '    //just in case the amount of gas per item exceeds 26290.\n', '    function backupfarmItems(address[] shop_addresses, uint256[] buy_amounts) nonReentrant external\n', '    {\n', '      require(shop_addresses.length == buy_amounts.length);\n', '      uint256 totals;\n', '      for (uint256 j = 0; j < buy_amounts.length; j++){  \n', '        totals=buy_amounts[j];\n', '        assert(totals >= buy_amounts[j]);\n', '      }\n', '      require(totals <= total_buy);     \n', '      \n', '      for (uint256 i = 0; i < buy_amounts.length; i++){\n', '        backupfarmSingle(shop_addresses[i], buy_amounts[i]);\n', '      }\n', '    }        \n', '   \n', '    function backupfarmSingle(address shop_address, uint256 buy_amount) private\n', '    { \n', '      address token_address = shops[shop_address]; \n', '      for (uint256 i = 0; i < buy_amount; i++) {\n', '            require(shop_address.call.gas(gas_amount).value(0)() == true);\n', '      }\n', '      tokenInventory[msg.sender][token_address] = tokenInventory[msg.sender][token_address].add(buy_amount); \n', '    } \n', '}']
