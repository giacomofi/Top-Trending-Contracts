['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/controller/Reputation.sol\n', '\n', '/**\n', ' * @title Reputation system\n', ' * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\n', ' * A reputation is use to assign influence measure to a DAO&#39;S peers.\n', ' * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\n', ' * The Reputation contract maintain a map of address to reputation value.\n', ' * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\n', ' */\n', '\n', 'contract Reputation is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint256) public balances;\n', '    uint256 public totalSupply;\n', '    uint public decimals = 18;\n', '\n', '    // Event indicating minting of reputation to an address.\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    // Event indicating burning of reputation for an address.\n', '    event Burn(address indexed _from, uint256 _amount);\n', '\n', '    /**\n', '    * @dev return the reputation amount of a given owner\n', '    * @param _owner an address of the owner which we want to get his reputation\n', '    */\n', '    function reputationOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Generates `_amount` of reputation that are assigned to `_to`\n', '    * @param _to The address that will be assigned the new reputation\n', '    * @param _amount The quantity of reputation to be generated\n', '    * @return True if the reputation are generated correctly\n', '    */\n', '    function mint(address _to, uint _amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burns `_amount` of reputation from `_from`\n', '    * if _amount tokens to burn > balances[_from] the balance of _from will turn to zero.\n', '    * @param _from The address that will lose the reputation\n', '    * @param _amount The quantity of reputation to burn\n', '    * @return True if the reputation are burned correctly\n', '    */\n', '    function burn(address _from, uint _amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        uint amountMinted = _amount;\n', '        if (balances[_from] < _amount) {\n', '            amountMinted = balances[_from];\n', '        }\n', '        totalSupply = totalSupply.sub(amountMinted);\n', '        balances[_from] = balances[_from].sub(amountMinted);\n', '        emit Burn(_from, amountMinted);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC827/ERC827.sol\n', '\n', '/**\n', ' * @title ERC827 interface, an extension of ERC20 token standard\n', ' *\n', ' * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '\n', '  function transferAndCall(\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC827/ERC827Token.sol\n', '\n', '/* solium-disable security/no-low-level-calls */\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC827, an extension of ERC20 token standard\n', ' *\n', ' * @dev Implementation the ERC827, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' *\n', ' * @dev Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. It allows to\n', '   * @dev approve the transfer of value and execute a call with the sent data.\n', '   *\n', '   * @dev Beware that changing an allowance with this method brings the risk that\n', '   * @dev someone may use both the old and the new allowance by unfortunate\n', '   * @dev transaction ordering. One possible solution to mitigate this race condition\n', '   * @dev is to first reduce the spender&#39;s allowance to 0 and set the desired value\n', '   * @dev afterwards:\n', '   * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * @param _spender The address that will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '   * @dev address and execute a call with the sent data on the same transaction\n', '   *\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferAndCall(\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transfer(_to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '   * @dev another and make a contract call on the same transaction\n', '   *\n', '   * @param _from The address which you want to send tokens from\n', '   * @param _to The address which you want to transfer to\n', '   * @param _value The amout of tokens to be transferred\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public payable returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To increment\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function increaseApprovalAndCall(\n', '    address _spender,\n', '    uint _addedValue,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.increaseApproval(_spender, _addedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To decrement\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function decreaseApprovalAndCall(\n', '    address _spender,\n', '    uint _subtractedValue,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/controller/DAOToken.sol\n', '\n', '/**\n', ' * @title DAOToken, base on zeppelin contract.\n', ' * @dev ERC20 compatible token. It is a mintable, destructible, burnable token.\n', ' */\n', '\n', 'contract DAOToken is ERC827Token,MintableToken,BurnableToken {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    // solium-disable-next-line uppercase\n', '    uint8 public constant decimals = 18;\n', '    uint public cap;\n', '\n', '    /**\n', '    * @dev Constructor\n', '    * @param _name - token name\n', '    * @param _symbol - token symbol\n', '    * @param _cap - token cap - 0 value means no cap\n', '    */\n', '    constructor(string _name, string _symbol,uint _cap) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        if (cap > 0)\n', '            require(totalSupply_.add(_amount) <= cap);\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Avatar.sol\n', '\n', '/**\n', ' * @title An Avatar holds tokens, reputation and ether for a controller\n', ' */\n', 'contract Avatar is Ownable {\n', '    bytes32 public orgName;\n', '    DAOToken public nativeToken;\n', '    Reputation public nativeReputation;\n', '\n', '    event GenericAction(address indexed _action, bytes32[] _params);\n', '    event SendEther(uint _amountInWei, address indexed _to);\n', '    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint _value);\n', '    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint _value);\n', '    event ExternalTokenIncreaseApproval(StandardToken indexed _externalToken, address _spender, uint _addedValue);\n', '    event ExternalTokenDecreaseApproval(StandardToken indexed _externalToken, address _spender, uint _subtractedValue);\n', '    event ReceiveEther(address indexed _sender, uint _value);\n', '\n', '    /**\n', '    * @dev the constructor takes organization name, native token and reputation system\n', '    and creates an avatar for a controller\n', '    */\n', '    constructor(bytes32 _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\n', '        orgName = _orgName;\n', '        nativeToken = _nativeToken;\n', '        nativeReputation = _nativeReputation;\n', '    }\n', '\n', '    /**\n', '    * @dev enables an avatar to receive ethers\n', '    */\n', '    function() public payable {\n', '        emit ReceiveEther(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @dev perform a generic call to an arbitrary contract\n', '    * @param _contract  the contract&#39;s address to call\n', '    * @param _data ABI-encoded contract call to call `_contract` address.\n', '    * @return the return bytes of the called contract&#39;s function.\n', '    */\n', '    function genericCall(address _contract,bytes _data) public onlyOwner {\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        bool result = _contract.call(_data);\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '        // Copy the returned data.\n', '        returndatacopy(0, 0, returndatasize)\n', '\n', '        switch result\n', '        // call returns 0 on error.\n', '        case 0 { revert(0, returndatasize) }\n', '        default { return(0, returndatasize) }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev send ethers from the avatar&#39;s wallet\n', '    * @param _amountInWei amount to send in Wei units\n', '    * @param _to send the ethers to this address\n', '    * @return bool which represents success\n', '    */\n', '    function sendEther(uint _amountInWei, address _to) public onlyOwner returns(bool) {\n', '        _to.transfer(_amountInWei);\n', '        emit SendEther(_amountInWei, _to);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev external token transfer\n', '    * @param _externalToken the token contract\n', '    * @param _to the destination address\n', '    * @param _value the amount of tokens to transfer\n', '    * @return bool which represents success\n', '    */\n', '    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value)\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.transfer(_to, _value);\n', '        emit ExternalTokenTransfer(_externalToken, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev external token transfer from a specific account\n', '    * @param _externalToken the token contract\n', '    * @param _from the account to spend token from\n', '    * @param _to the destination address\n', '    * @param _value the amount of tokens to transfer\n', '    * @return bool which represents success\n', '    */\n', '    function externalTokenTransferFrom(\n', '        StandardToken _externalToken,\n', '        address _from,\n', '        address _to,\n', '        uint _value\n', '    )\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.transferFrom(_from, _to, _value);\n', '        emit ExternalTokenTransferFrom(_externalToken, _from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev increase approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue)\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.increaseApproval(_spender, _addedValue);\n', '        emit ExternalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev decrease approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue )\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.decreaseApproval(_spender, _subtractedValue);\n', '        emit ExternalTokenDecreaseApproval(_externalToken,_spender, _subtractedValue);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/globalConstraints/GlobalConstraintInterface.sol\n', '\n', 'contract GlobalConstraintInterface {\n', '\n', '    enum CallPhase { Pre, Post,PreAndPost }\n', '\n', '    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n', '    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n', '    /**\n', '     * @dev when return if this globalConstraints is pre, post or both.\n', '     * @return CallPhase enum indication  Pre, Post or PreAndPost.\n', '     */\n', '    function when() public returns(CallPhase);\n', '}\n', '\n', '// File: contracts/controller/ControllerInterface.sol\n', '\n', '/**\n', ' * @title Controller contract\n', ' * @dev A controller controls the organizations tokens ,reputation and avatar.\n', ' * It is subject to a set of schemes and constraints that determine its behavior.\n', ' * Each scheme has it own parameters and operation permissions.\n', ' */\n', 'interface ControllerInterface {\n', '\n', '    /**\n', '     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n', '     * @param  _amount amount of reputation to mint\n', '     * @param _to beneficiary address\n', '     * @return bool which represents a success\n', '    */\n', '    function mintReputation(uint256 _amount, address _to,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev Burns `_amount` of reputation from `_from`\n', '     * @param _amount amount of reputation to burn\n', '     * @param _from The address that will lose the reputation\n', '     * @return bool which represents a success\n', '     */\n', '    function burnReputation(uint256 _amount, address _from,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev mint tokens .\n', '     * @param  _amount amount of token to mint\n', '     * @param _beneficiary beneficiary address\n', '     * @param _avatar address\n', '     * @return bool which represents a success\n', '     */\n', '    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '  /**\n', '   * @dev register or update a scheme\n', '   * @param _scheme the address of the scheme\n', '   * @param _paramsHash a hashed configuration of the usage of the scheme\n', '   * @param _permissions the permissions the new scheme will have\n', '   * @param _avatar address\n', '   * @return bool which represents a success\n', '   */\n', '    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev unregister a scheme\n', '     * @param _avatar address\n', '     * @param _scheme the address of the scheme\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterScheme(address _scheme,address _avatar)\n', '    external\n', '    returns(bool);\n', '    /**\n', '     * @dev unregister the caller&#39;s scheme\n', '     * @param _avatar address\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterSelf(address _avatar) external returns(bool);\n', '\n', '    function isSchemeRegistered( address _scheme,address _avatar) external view returns(bool);\n', '\n', '    function getSchemeParameters(address _scheme,address _avatar) external view returns(bytes32);\n', '\n', '    function getGlobalConstraintParameters(address _globalConstraint,address _avatar) external view returns(bytes32);\n', '\n', '    function getSchemePermissions(address _scheme,address _avatar) external view returns(bytes4);\n', '\n', '    /**\n', '     * @dev globalConstraintsCount return the global constraint pre and post count\n', '     * @return uint globalConstraintsPre count.\n', '     * @return uint globalConstraintsPost count.\n', '     */\n', '    function globalConstraintsCount(address _avatar) external view returns(uint,uint);\n', '\n', '    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar) external view returns(bool);\n', '\n', '    /**\n', '     * @dev add or update Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be added.\n', '     * @param _params the constraint parameters hash.\n', '     * @param _avatar the avatar of the organization\n', '     * @return bool which represents a success\n', '     */\n', '    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\n', '    external returns(bool);\n', '\n', '    /**\n', '     * @dev remove Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be remove.\n', '     * @param _avatar the organization avatar.\n', '     * @return bool which represents a success\n', '     */\n', '    function removeGlobalConstraint (address _globalConstraint,address _avatar)\n', '    external  returns(bool);\n', '\n', '  /**\n', '    * @dev upgrade the Controller\n', '    *      The function will trigger an event &#39;UpgradeController&#39;.\n', '    * @param  _newController the address of the new controller.\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function upgradeController(address _newController,address _avatar)\n', '    external returns(bool);\n', '\n', '    /**\n', '    * @dev perform a generic call to an arbitrary contract\n', '    * @param _contract  the contract&#39;s address to call\n', '    * @param _data ABI-encoded contract call to call `_contract` address.\n', '    * @param _avatar the controller&#39;s avatar address\n', '    * @return bytes32  - the return value of the called _contract&#39;s function.\n', '    */\n', '    function genericCall(address _contract,bytes _data,address _avatar)\n', '    external\n', '    returns(bytes32);\n', '\n', '  /**\n', '   * @dev send some ether\n', '   * @param _amountInWei the amount of ether (in Wei) to send\n', '   * @param _to address of the beneficiary\n', '   * @param _avatar address\n', '   * @return bool which represents a success\n', '   */\n', '    function sendEther(uint _amountInWei, address _to,address _avatar)\n', '    external returns(bool);\n', '\n', '    /**\n', '    * @dev send some amount of arbitrary ERC20 Tokens\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '    * @dev transfer token "from" address "to" address\n', '    *      One must to approve the amount of tokens which can be spend from the\n', '    *      "from" account.This can be done using externalTokenApprove.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _from address of the account to send from\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '    * @dev increase approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '    * @dev decrease approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev getNativeReputation\n', '     * @param _avatar the organization avatar.\n', '     * @return organization native reputation\n', '     */\n', '    function getNativeReputation(address _avatar)\n', '    external\n', '    view\n', '    returns(address);\n', '}\n', '\n', '// File: contracts/controller/Controller.sol\n', '\n', '/**\n', ' * @title Controller contract\n', ' * @dev A controller controls the organizations tokens,reputation and avatar.\n', ' * It is subject to a set of schemes and constraints that determine its behavior.\n', ' * Each scheme has it own parameters and operation permissions.\n', ' */\n', 'contract Controller is ControllerInterface {\n', '\n', '    struct Scheme {\n', '        bytes32 paramsHash;  // a hash "configuration" of the scheme\n', '        bytes4  permissions; // A bitwise flags of permissions,\n', '                             // All 0: Not registered,\n', '                             // 1st bit: Flag if the scheme is registered,\n', '                             // 2nd bit: Scheme can register other schemes\n', '                             // 3rd bit: Scheme can add/remove global constraints\n', '                             // 4th bit: Scheme can upgrade the controller\n', '                             // 5th bit: Scheme can call genericCall on behalf of\n', '                             //          the organization avatar\n', '    }\n', '\n', '    struct GlobalConstraint {\n', '        address gcAddress;\n', '        bytes32 params;\n', '    }\n', '\n', '    struct GlobalConstraintRegister {\n', '        bool isRegistered; //is registered\n', '        uint index;    //index at globalConstraints\n', '    }\n', '\n', '    mapping(address=>Scheme) public schemes;\n', '\n', '    Avatar public avatar;\n', '    DAOToken public nativeToken;\n', '    Reputation public nativeReputation;\n', '  // newController will point to the new controller after the present controller is upgraded\n', '    address public newController;\n', '  // globalConstraintsPre that determine pre conditions for all actions on the controller\n', '\n', '    GlobalConstraint[] public globalConstraintsPre;\n', '  // globalConstraintsPost that determine post conditions for all actions on the controller\n', '    GlobalConstraint[] public globalConstraintsPost;\n', '  // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint\n', '    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPre;\n', '  // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint\n', '    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPost;\n', '\n', '    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);\n', '    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);\n', '    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);\n', '    event RegisterScheme (address indexed _sender, address indexed _scheme);\n', '    event UnregisterScheme (address indexed _sender, address indexed _scheme);\n', '    event GenericAction (address indexed _sender, bytes32[] _params);\n', '    event SendEther (address indexed _sender, uint _amountInWei, address indexed _to);\n', '    event ExternalTokenTransfer (address indexed _sender, address indexed _externalToken, address indexed _to, uint _value);\n', '    event ExternalTokenTransferFrom (address indexed _sender, address indexed _externalToken, address _from, address _to, uint _value);\n', '    event ExternalTokenIncreaseApproval (address indexed _sender, StandardToken indexed _externalToken, address _spender, uint _value);\n', '    event ExternalTokenDecreaseApproval (address indexed _sender, StandardToken indexed _externalToken, address _spender, uint _value);\n', '    event UpgradeController(address indexed _oldController,address _newController);\n', '    event AddGlobalConstraint(address indexed _globalConstraint, bytes32 _params,GlobalConstraintInterface.CallPhase _when);\n', '    event RemoveGlobalConstraint(address indexed _globalConstraint ,uint256 _index,bool _isPre);\n', '    event GenericCall(address indexed _contract,bytes _data);\n', '\n', '    constructor( Avatar _avatar) public\n', '    {\n', '        avatar = _avatar;\n', '        nativeToken = avatar.nativeToken();\n', '        nativeReputation = avatar.nativeReputation();\n', '        schemes[msg.sender] = Scheme({paramsHash: bytes32(0),permissions: bytes4(0x1F)});\n', '    }\n', '\n', '  // Do not allow mistaken calls:\n', '    function() external {\n', '        revert();\n', '    }\n', '\n', '  // Modifiers:\n', '    modifier onlyRegisteredScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(1) == bytes4(1));\n', '        _;\n', '    }\n', '\n', '    modifier onlyRegisteringSchemes() {\n', '        require(schemes[msg.sender].permissions&bytes4(2) == bytes4(2));\n', '        _;\n', '    }\n', '\n', '    modifier onlyGlobalConstraintsScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(4) == bytes4(4));\n', '        _;\n', '    }\n', '\n', '    modifier onlyUpgradingScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(8) == bytes4(8));\n', '        _;\n', '    }\n', '\n', '    modifier onlyGenericCallScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(16) == bytes4(16));\n', '        _;\n', '    }\n', '\n', '    modifier onlySubjectToConstraint(bytes32 func) {\n', '        uint idx;\n', '        for (idx = 0;idx<globalConstraintsPre.length;idx++) {\n', '            require((GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress)).pre(msg.sender,globalConstraintsPre[idx].params,func));\n', '        }\n', '        _;\n', '        for (idx = 0;idx<globalConstraintsPost.length;idx++) {\n', '            require((GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress)).post(msg.sender,globalConstraintsPost[idx].params,func));\n', '        }\n', '    }\n', '\n', '    modifier isAvatarValid(address _avatar) {\n', '        require(_avatar == address(avatar));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n', '     * @param  _amount amount of reputation to mint\n', '     * @param _to beneficiary address\n', '     * @return bool which represents a success\n', '     */\n', '    function mintReputation(uint256 _amount, address _to,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("mintReputation")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit MintReputation(msg.sender, _to, _amount);\n', '        return nativeReputation.mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns `_amount` of reputation from `_from`\n', '     * @param _amount amount of reputation to burn\n', '     * @param _from The address that will lose the reputation\n', '     * @return bool which represents a success\n', '     */\n', '    function burnReputation(uint256 _amount, address _from,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("burnReputation")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit BurnReputation(msg.sender, _from, _amount);\n', '        return nativeReputation.burn(_from, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev mint tokens .\n', '     * @param  _amount amount of token to mint\n', '     * @param _beneficiary beneficiary address\n', '     * @return bool which represents a success\n', '     */\n', '    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("mintTokens")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit MintTokens(msg.sender, _beneficiary, _amount);\n', '        return nativeToken.mint(_beneficiary, _amount);\n', '    }\n', '\n', '  /**\n', '   * @dev register a scheme\n', '   * @param _scheme the address of the scheme\n', '   * @param _paramsHash a hashed configuration of the usage of the scheme\n', '   * @param _permissions the permissions the new scheme will have\n', '   * @return bool which represents a success\n', '   */\n', '    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\n', '    external\n', '    onlyRegisteringSchemes\n', '    onlySubjectToConstraint("registerScheme")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '\n', '        Scheme memory scheme = schemes[_scheme];\n', '\n', '    // Check scheme has at least the permissions it is changing, and at least the current permissions:\n', '    // Implementation is a bit messy. One must recall logic-circuits ^^\n', '\n', '    // produces non-zero if sender does not have all of the perms that are changing between old and new\n', '        require(bytes4(0x1F)&(_permissions^scheme.permissions)&(~schemes[msg.sender].permissions) == bytes4(0));\n', '\n', '    // produces non-zero if sender does not have all of the perms in the old scheme\n', '        require(bytes4(0x1F)&(scheme.permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\n', '\n', '    // Add or change the scheme:\n', '        schemes[_scheme].paramsHash = _paramsHash;\n', '        schemes[_scheme].permissions = _permissions|bytes4(1);\n', '        emit RegisterScheme(msg.sender, _scheme);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev unregister a scheme\n', '     * @param _scheme the address of the scheme\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterScheme( address _scheme,address _avatar)\n', '    external\n', '    onlyRegisteringSchemes\n', '    onlySubjectToConstraint("unregisterScheme")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '    //check if the scheme is registered\n', '        if (schemes[_scheme].permissions&bytes4(1) == bytes4(0)) {\n', '            return false;\n', '          }\n', '    // Check the unregistering scheme has enough permissions:\n', '        require(bytes4(0x1F)&(schemes[_scheme].permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\n', '\n', '    // Unregister:\n', '        emit UnregisterScheme(msg.sender, _scheme);\n', '        delete schemes[_scheme];\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev unregister the caller&#39;s scheme\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {\n', '        if (_isSchemeRegistered(msg.sender,_avatar) == false) {\n', '            return false;\n', '        }\n', '        delete schemes[msg.sender];\n', '        emit UnregisterScheme(msg.sender, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function isSchemeRegistered(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bool) {\n', '        return _isSchemeRegistered(_scheme,_avatar);\n', '    }\n', '\n', '    function getSchemeParameters(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bytes32) {\n', '        return schemes[_scheme].paramsHash;\n', '    }\n', '\n', '    function getSchemePermissions(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bytes4) {\n', '        return schemes[_scheme].permissions;\n', '    }\n', '\n', '    function getGlobalConstraintParameters(address _globalConstraint,address) external view returns(bytes32) {\n', '\n', '        GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];\n', '\n', '        if (register.isRegistered) {\n', '            return globalConstraintsPre[register.index].params;\n', '        }\n', '\n', '        register = globalConstraintsRegisterPost[_globalConstraint];\n', '\n', '        if (register.isRegistered) {\n', '            return globalConstraintsPost[register.index].params;\n', '        }\n', '    }\n', '\n', '   /**\n', '    * @dev globalConstraintsCount return the global constraint pre and post count\n', '    * @return uint globalConstraintsPre count.\n', '    * @return uint globalConstraintsPost count.\n', '    */\n', '    function globalConstraintsCount(address _avatar)\n', '        external\n', '        isAvatarValid(_avatar)\n', '        view\n', '        returns(uint,uint)\n', '        {\n', '        return (globalConstraintsPre.length,globalConstraintsPost.length);\n', '    }\n', '\n', '    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar)\n', '        external\n', '        isAvatarValid(_avatar)\n', '        view\n', '        returns(bool)\n', '        {\n', '        return (globalConstraintsRegisterPre[_globalConstraint].isRegistered || globalConstraintsRegisterPost[_globalConstraint].isRegistered);\n', '    }\n', '\n', '    /**\n', '     * @dev add or update Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be added.\n', '     * @param _params the constraint parameters hash.\n', '     * @return bool which represents a success\n', '     */\n', '    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\n', '    external\n', '    onlyGlobalConstraintsScheme\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\n', '        if ((when == GlobalConstraintInterface.CallPhase.Pre)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\n', '                globalConstraintsPre.push(GlobalConstraint(_globalConstraint,_params));\n', '                globalConstraintsRegisterPre[_globalConstraint] = GlobalConstraintRegister(true,globalConstraintsPre.length-1);\n', '            }else {\n', '                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;\n', '            }\n', '        }\n', '        if ((when == GlobalConstraintInterface.CallPhase.Post)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\n', '                globalConstraintsPost.push(GlobalConstraint(_globalConstraint,_params));\n', '                globalConstraintsRegisterPost[_globalConstraint] = GlobalConstraintRegister(true,globalConstraintsPost.length-1);\n', '            }else {\n', '                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;\n', '            }\n', '        }\n', '        emit AddGlobalConstraint(_globalConstraint, _params,when);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev remove Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be remove.\n', '     * @return bool which represents a success\n', '     */\n', '    function removeGlobalConstraint (address _globalConstraint,address _avatar)\n', '    external\n', '    onlyGlobalConstraintsScheme\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        GlobalConstraintRegister memory globalConstraintRegister;\n', '        GlobalConstraint memory globalConstraint;\n', '        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\n', '        bool retVal = false;\n', '\n', '        if ((when == GlobalConstraintInterface.CallPhase.Pre)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];\n', '            if (globalConstraintRegister.isRegistered) {\n', '                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {\n', '                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];\n', '                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;\n', '                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;\n', '                }\n', '                globalConstraintsPre.length--;\n', '                delete globalConstraintsRegisterPre[_globalConstraint];\n', '                retVal = true;\n', '            }\n', '        }\n', '        if ((when == GlobalConstraintInterface.CallPhase.Post)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];\n', '            if (globalConstraintRegister.isRegistered) {\n', '                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {\n', '                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];\n', '                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;\n', '                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;\n', '                }\n', '                globalConstraintsPost.length--;\n', '                delete globalConstraintsRegisterPost[_globalConstraint];\n', '                retVal = true;\n', '            }\n', '        }\n', '        if (retVal) {\n', '            emit RemoveGlobalConstraint(_globalConstraint,globalConstraintRegister.index,when == GlobalConstraintInterface.CallPhase.Pre);\n', '        }\n', '        return retVal;\n', '    }\n', '\n', '  /**\n', '    * @dev upgrade the Controller\n', '    *      The function will trigger an event &#39;UpgradeController&#39;.\n', '    * @param  _newController the address of the new controller.\n', '    * @return bool which represents a success\n', '    */\n', '    function upgradeController(address _newController,address _avatar)\n', '    external\n', '    onlyUpgradingScheme\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        require(newController == address(0));   // so the upgrade could be done once for a contract.\n', '        require(_newController != address(0));\n', '        newController = _newController;\n', '        avatar.transferOwnership(_newController);\n', '        require(avatar.owner()==_newController);\n', '        if (nativeToken.owner() == address(this)) {\n', '            nativeToken.transferOwnership(_newController);\n', '            require(nativeToken.owner()==_newController);\n', '        }\n', '        if (nativeReputation.owner() == address(this)) {\n', '            nativeReputation.transferOwnership(_newController);\n', '            require(nativeReputation.owner()==_newController);\n', '        }\n', '        emit UpgradeController(this,newController);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev perform a generic call to an arbitrary contract\n', '    * @param _contract  the contract&#39;s address to call\n', '    * @param _data ABI-encoded contract call to call `_contract` address.\n', '    * @param _avatar the controller&#39;s avatar address\n', '    * @return bytes32  - the return value of the called _contract&#39;s function.\n', '    */\n', '    function genericCall(address _contract,bytes _data,address _avatar)\n', '    external\n', '    onlyGenericCallScheme\n', '    onlySubjectToConstraint("genericCall")\n', '    isAvatarValid(_avatar)\n', '    returns (bytes32)\n', '    {\n', '        emit GenericCall(_contract, _data);\n', '        avatar.genericCall(_contract, _data);\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '        // Copy the returned data.\n', '        returndatacopy(0, 0, returndatasize)\n', '        return(0, returndatasize)\n', '        }\n', '    }\n', '\n', '  /**\n', '   * @dev send some ether\n', '   * @param _amountInWei the amount of ether (in Wei) to send\n', '   * @param _to address of the beneficiary\n', '   * @return bool which represents a success\n', '   */\n', '    function sendEther(uint _amountInWei, address _to,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("sendEther")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit SendEther(msg.sender, _amountInWei, _to);\n', '        return avatar.sendEther(_amountInWei, _to);\n', '    }\n', '\n', '    /**\n', '    * @dev send some amount of arbitrary ERC20 Tokens\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenTransfer")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenTransfer(msg.sender, _externalToken, _to, _value);\n', '        return avatar.externalTokenTransfer(_externalToken, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token "from" address "to" address\n', '    *      One must to approve the amount of tokens which can be spend from the\n', '    *      "from" account.This can be done using externalTokenApprove.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _from address of the account to send from\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenTransferFrom")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenTransferFrom(msg.sender, _externalToken, _from, _to, _value);\n', '        return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev increase approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenIncreaseApproval")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenIncreaseApproval(msg.sender,_externalToken,_spender,_addedValue);\n', '        return avatar.externalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '    * @dev decrease approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenDecreaseApproval")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenDecreaseApproval(msg.sender,_externalToken,_spender,_subtractedValue);\n', '        return avatar.externalTokenDecreaseApproval(_externalToken, _spender, _subtractedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev getNativeReputation\n', '     * @param _avatar the organization avatar.\n', '     * @return organization native reputation\n', '     */\n', '    function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {\n', '        return address(nativeReputation);\n', '    }\n', '\n', '    function _isSchemeRegistered(address _scheme,address _avatar) private isAvatarValid(_avatar) view returns(bool) {\n', '        return (schemes[_scheme].permissions&bytes4(1) != bytes4(0));\n', '    }\n', '}\n', '\n', '// File: contracts/universalSchemes/ExecutableInterface.sol\n', '\n', 'contract ExecutableInterface {\n', '    function execute(bytes32 _proposalId, address _avatar, int _param) public returns(bool);\n', '}\n', '\n', '// File: contracts/VotingMachines/IntVoteInterface.sol\n', '\n', 'interface IntVoteInterface {\n', '    //When implementing this interface please do not only override function and modifier,\n', '    //but also to keep the modifiers on the overridden functions.\n', '    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\n', '    modifier votable(bytes32 _proposalId) {revert(); _;}\n', '\n', '    event NewProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _numOfChoices, address _proposer, bytes32 _paramsHash);\n', '    event ExecuteProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _decision, uint _totalReputation);\n', '    event VoteProposal(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter, uint _vote, uint _reputation);\n', '    event CancelProposal(bytes32 indexed _proposalId, address indexed _avatar );\n', '    event CancelVoting(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter);\n', '\n', '    /**\n', '     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n', '     * generated by calculating keccak256 of a incremented counter.\n', '     * @param _numOfChoices number of voting choices\n', '     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\n', '     * @param _avatar an address to be sent as the payload to the _executable contract.\n', '     * @param _executable This contract will be executed when vote is over.\n', '     * @param _proposer address\n', '     * @return proposal&#39;s id.\n', '     */\n', '    function propose(\n', '        uint _numOfChoices,\n', '        bytes32 _proposalParameters,\n', '        address _avatar,\n', '        ExecutableInterface _executable,\n', '        address _proposer\n', '        ) external returns(bytes32);\n', '\n', '    // Only owned proposals and only the owner:\n', '    function cancelProposal(bytes32 _proposalId) external onlyProposalOwner(_proposalId) votable(_proposalId) returns(bool);\n', '\n', '    // Only owned proposals and only the owner:\n', '    function ownerVote(bytes32 _proposalId, uint _vote, address _voter) external onlyProposalOwner(_proposalId) returns(bool);\n', '\n', '    function vote(bytes32 _proposalId, uint _vote) external votable(_proposalId) returns(bool);\n', '\n', '    function voteWithSpecifiedAmounts(\n', '        bytes32 _proposalId,\n', '        uint _vote,\n', '        uint _rep,\n', '        uint _token) external votable(_proposalId) returns(bool);\n', '\n', '    function cancelVote(bytes32 _proposalId) external votable(_proposalId);\n', '\n', '    //@dev execute check if the proposal has been decided, and if so, execute the proposal\n', '    //@param _proposalId the id of the proposal\n', '    //@return bool true - the proposal has been executed\n', '    //             false - otherwise.\n', '    function execute(bytes32 _proposalId) public votable(_proposalId) returns(bool);\n', '\n', '    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint);\n', '\n', '    function isVotable(bytes32 _proposalId) external view returns(bool);\n', '\n', '    /**\n', '     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n', '     * @param _proposalId the ID of the proposal\n', '     * @param _choice the index in the\n', '     * @return voted reputation for the given choice\n', '     */\n', '    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint);\n', '\n', '    /**\n', '     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n', '     * @return bool true or false\n', '     */\n', '    function isAbstainAllow() external pure returns(bool);\n', '\n', '    /**\n', '     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n', '     * @return min - minimum number of choices\n', '               max - maximum number of choices\n', '     */\n', '    function getAllowedRangeOfChoices() external pure returns(uint min,uint max);\n', '}\n', '\n', '// File: contracts/VotingMachines/AbsoluteVote.sol\n', '\n', 'contract AbsoluteVote is IntVoteInterface {\n', '    using SafeMath for uint;\n', '\n', '\n', '    struct Parameters {\n', '        Reputation reputationSystem; // the reputation system that is being used\n', '        uint precReq; // how many percentages required for the proposal to be passed\n', '        bool allowOwner; // does this proposal has an owner who has owner rights?\n', '    }\n', '\n', '    struct Voter {\n', '        uint vote; // 0 - &#39;abstain&#39;\n', '        uint reputation; // amount of voter&#39;s reputation\n', '    }\n', '\n', '    struct Proposal {\n', '        address owner; // the proposal&#39;s owner\n', '        address avatar; // the avatar of the organization that owns the proposal\n', '        uint numOfChoices;\n', '        ExecutableInterface executable; // will be executed if the proposal will pass\n', '        bytes32 paramsHash; // the hash of the parameters of the proposal\n', '        uint totalVotes;\n', '        mapping(uint=>uint) votes;\n', '        mapping(address=>Voter) voters;\n', '        bool open; // voting open flag\n', '    }\n', '\n', '    event AVVoteProposal(bytes32 indexed _proposalId, bool _isOwnerVote);\n', '    event RefreshReputation(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter,uint _reputation);\n', '\n', '\n', '    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\n', '    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\n', '\n', '    uint public constant MAX_NUM_OF_CHOICES = 10;\n', '    uint public proposalsCnt; // Total amount of proposals\n', '\n', '  /**\n', '   * @dev Check that there is owner for the proposal and he sent the transaction\n', '   */\n', '    modifier onlyProposalOwner(bytes32 _proposalId) {\n', '        require(msg.sender == proposals[_proposalId].owner);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Check that the proposal is votable (open and not executed yet)\n', '   */\n', '    modifier votable(bytes32 _proposalId) {\n', '        require(proposals[_proposalId].open);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n', '     * generated by calculating keccak256 of a incremented counter.\n', '     * @param _numOfChoices number of voting choices\n', '     * @param _paramsHash defined the parameters of the voting machine used for this proposal\n', '     * @param _avatar an address to be sent as the payload to the _executable contract.\n', '     * @param _executable This contract will be executed when vote is over.\n', '     * @return proposal&#39;s id.\n', '     */\n', '    function propose(uint _numOfChoices, bytes32 _paramsHash, address _avatar, ExecutableInterface _executable,address)\n', '        external\n', '        returns(bytes32)\n', '    {\n', '        // Check valid params and number of choices:\n', '        require(parameters[_paramsHash].reputationSystem != address(0));\n', '        require(_numOfChoices > 0 && _numOfChoices <= MAX_NUM_OF_CHOICES);\n', '        // Generate a unique ID:\n', '        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\n', '        proposalsCnt++;\n', '        // Open proposal:\n', '        Proposal memory proposal;\n', '        proposal.numOfChoices = _numOfChoices;\n', '        proposal.paramsHash = _paramsHash;\n', '        proposal.avatar = _avatar;\n', '        proposal.executable = _executable;\n', '        proposal.owner = msg.sender;\n', '        proposal.open = true;\n', '        proposals[proposalId] = proposal;\n', '        emit NewProposal(proposalId, _avatar, _numOfChoices, msg.sender, _paramsHash);\n', '        return proposalId;\n', '    }\n', '\n', '  /**\n', '   * @dev Cancel a proposal, only the owner can call this function and only if allowOwner flag is true.\n', '   * @param _proposalId the proposal ID\n', '   */\n', '    function cancelProposal(bytes32 _proposalId) external onlyProposalOwner(_proposalId) votable(_proposalId) returns(bool) {\n', '        if (! parameters[proposals[_proposalId].paramsHash].allowOwner) {\n', '            return false;\n', '        }\n', '        address avatar = proposals[_proposalId].avatar;\n', '        deleteProposal(_proposalId);\n', '        emit CancelProposal(_proposalId, avatar);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev voting function\n', '   * @param _proposalId id of the proposal\n', '   * @param _vote a value between 0 to and the proposal number of choices.\n', '   * @return bool true - the proposal has been executed\n', '   *              false - otherwise.\n', '   */\n', '    function vote(bytes32 _proposalId, uint _vote) external votable(_proposalId) returns(bool) {\n', '        return internalVote(_proposalId, msg.sender, _vote, 0);\n', '    }\n', '\n', '  /**\n', '   * @dev voting function with owner functionality (can vote on behalf of someone else)\n', '   * @param _proposalId id of the proposal\n', '   * @param _vote a value between 0 to and the proposal number of choices.\n', '   * @param _voter will be voted with that voter&#39;s address\n', '   * @return bool true - the proposal has been executed\n', '   *              false - otherwise.\n', '   */\n', '    function ownerVote(bytes32 _proposalId, uint _vote, address _voter)\n', '        external\n', '        onlyProposalOwner(_proposalId)\n', '        votable(_proposalId)\n', '        returns(bool)\n', '    {\n', '        if (! parameters[proposals[_proposalId].paramsHash].allowOwner) {\n', '            return false;\n', '        }\n', '        return  internalVote(_proposalId, _voter, _vote, 0);\n', '    }\n', '\n', '    function voteWithSpecifiedAmounts(bytes32 _proposalId,uint _vote,uint _rep,uint) external votable(_proposalId) returns(bool) {\n', '        return internalVote(_proposalId,msg.sender,_vote,_rep);\n', '    }\n', '\n', '  /**\n', '   * @dev Cancel the vote of the msg.sender: subtract the reputation amount from the votes\n', '   * and delete the voter from the proposal struct\n', '   * @param _proposalId id of the proposal\n', '   */\n', '    function cancelVote(bytes32 _proposalId) external votable(_proposalId) {\n', '        cancelVoteInternal(_proposalId, msg.sender);\n', '    }\n', '\n', '  /**\n', '   * @dev getNumberOfChoices returns the number of choices possible in this proposal\n', '   * @param _proposalId the ID of the proposal\n', '   * @return uint that contains number of choices\n', '   */\n', '    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint) {\n', '        return proposals[_proposalId].numOfChoices;\n', '    }\n', '\n', '  /**\n', '   * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\n', '   * @param _proposalId the ID of the proposal\n', '   * @param _voter the address of the voter\n', '   * @return uint vote - the voters vote\n', '   *        uint reputation - amount of reputation committed by _voter to _proposalId\n', '   */\n', '    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\n', '        Voter memory voter = proposals[_proposalId].voters[_voter];\n', '        return (voter.vote, voter.reputation);\n', '    }\n', '\n', '    /**\n', '     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n', '     * @param _proposalId the ID of the proposal\n', '     * @param _choice the index in the\n', '     * @return voted reputation for the given choice\n', '     */\n', '    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint) {\n', '        return proposals[_proposalId].votes[_choice];\n', '    }\n', '\n', '    /**\n', '      * @dev isVotable check if the proposal is votable\n', '      * @param _proposalId the ID of the proposal\n', '      * @return bool true or false\n', '    */\n', '    function isVotable(bytes32 _proposalId) external view returns(bool) {\n', '        return  proposals[_proposalId].open;\n', '    }\n', '\n', '    /**\n', '     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n', '     * @return bool true or false\n', '     */\n', '    function isAbstainAllow() external pure returns(bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev refreshReputation refresh the reputation for a given voters list\n', '     * @param _proposalId the ID of the proposal\n', '     * @param _voters list to be refreshed\n', '     * @return bool true or false\n', '     */\n', '    function refreshReputation(bytes32 _proposalId, address[] _voters) external returns(bool) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        Parameters memory params = parameters[proposal.paramsHash];\n', '\n', '        for (uint i = 0; i < _voters.length; i++) {\n', '            Voter storage voter = proposal.voters[_voters[i]];\n', '             //check that the voters already votes.\n', '            if (voter.reputation > 0) {\n', '                //update only if there is a mismatch between the voter&#39;s system reputation\n', '                //and the reputation stored in the voting machine for the voter.\n', '                uint rep = params.reputationSystem.reputationOf(_voters[i]);\n', '                if (rep > voter.reputation) {\n', '                    proposal.votes[voter.vote] = proposal.votes[voter.vote].add(rep - voter.reputation);\n', '                    proposal.totalVotes = (proposal.totalVotes).add(rep - voter.reputation);\n', '                  } else if (rep < voter.reputation) {\n', '                    proposal.votes[voter.vote] = proposal.votes[voter.vote].sub(voter.reputation - rep);\n', '                    proposal.totalVotes = (proposal.totalVotes).sub(voter.reputation - rep);\n', '                  }\n', '                if (rep != voter.reputation) {\n', '                    voter.reputation = rep;\n', '                    emit RefreshReputation(_proposalId, proposal.avatar, _voters[i],rep);\n', '                }\n', '             }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n', '     * @return min - minimum number of choices\n', '               max - maximum number of choices\n', '     */\n', '    function getAllowedRangeOfChoices() external pure returns(uint min,uint max) {\n', '        return (1,MAX_NUM_OF_CHOICES);\n', '    }\n', '\n', '    /**\n', '      * @dev execute check if the proposal has been decided, and if so, execute the proposal\n', '      * @param _proposalId the id of the proposal\n', '      * @return bool true - the proposal has been executed\n', '      *              false - otherwise.\n', '     */\n', '    function execute(bytes32 _proposalId) public votable(_proposalId) returns(bool) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        Reputation reputation = parameters[proposal.paramsHash].reputationSystem;\n', '        require(reputation != address(0));\n', '        uint totalReputation = reputation.totalSupply();\n', '        uint precReq = parameters[proposal.paramsHash].precReq;\n', '        // Check if someone crossed the bar:\n', '        for (uint cnt = 0; cnt <= proposal.numOfChoices; cnt++) {\n', '            if (proposal.votes[cnt] > totalReputation*precReq/100) {\n', '                Proposal memory tmpProposal = proposal;\n', '                deleteProposal(_proposalId);\n', '                emit ExecuteProposal(_proposalId, tmpProposal.avatar, cnt, totalReputation);\n', '                (tmpProposal.executable).execute(_proposalId, tmpProposal.avatar, int(cnt));\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev hash the parameters, save them if necessary, and return the hash value\n', '    */\n', '    function setParameters(Reputation _reputationSystem, uint _precReq, bool _allowOwner) public returns(bytes32) {\n', '        require(_precReq <= 100 && _precReq > 0);\n', '        bytes32 hashedParameters = getParametersHash(_reputationSystem, _precReq, _allowOwner);\n', '        parameters[hashedParameters] = Parameters({\n', '            reputationSystem: _reputationSystem,\n', '            precReq: _precReq,\n', '            allowOwner: _allowOwner\n', '        });\n', '        return hashedParameters;\n', '    }\n', '\n', '    /**\n', '     * @dev hashParameters returns a hash of the given parameters\n', '     */\n', '    function getParametersHash(Reputation _reputationSystem, uint _precReq, bool _allowOwner) public pure returns(bytes32) {\n', '        return keccak256(abi.encodePacked(_reputationSystem, _precReq, _allowOwner));\n', '    }\n', '\n', '    function cancelVoteInternal(bytes32 _proposalId, address _voter) internal {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        Voter memory voter = proposal.voters[_voter];\n', '        proposal.votes[voter.vote] = (proposal.votes[voter.vote]).sub(voter.reputation);\n', '        proposal.totalVotes = (proposal.totalVotes).sub(voter.reputation);\n', '        delete proposal.voters[_voter];\n', '        emit CancelVoting(_proposalId, proposal.avatar, _voter);\n', '    }\n', '\n', '    function deleteProposal(bytes32 _proposalId) internal {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        for (uint cnt = 0; cnt <= proposal.numOfChoices; cnt++) {\n', '            delete proposal.votes[cnt];\n', '        }\n', '        delete proposals[_proposalId];\n', '    }\n', '\n', '    /**\n', '     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\n', '     * @param _proposalId id of the proposal\n', '     * @param _voter used in case the vote is cast for someone else\n', '     * @param _vote a value between 0 to and the proposal&#39;s number of choices.\n', '     * @return true in case of proposal execution otherwise false\n', '     * throws if proposal is not open or if it has been executed\n', '     * NB: executes the proposal if a decision has been reached\n', '     */\n', '    function internalVote(bytes32 _proposalId, address _voter, uint _vote, uint _rep) private returns(bool) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        Parameters memory params = parameters[proposal.paramsHash];\n', '        // Check valid vote:\n', '        require(_vote <= proposal.numOfChoices);\n', '        // Check voter has enough reputation:\n', '        uint reputation = params.reputationSystem.reputationOf(_voter);\n', '        require(reputation >= _rep);\n', '        uint rep = _rep;\n', '        if (rep == 0) {\n', '            rep = reputation;\n', '        }\n', '        // If this voter has already voted, first cancel the vote:\n', '        if (proposal.voters[_voter].reputation != 0) {\n', '            cancelVoteInternal(_proposalId, _voter);\n', '        }\n', '        // The voting itself:\n', '        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\n', '        proposal.totalVotes = rep.add(proposal.totalVotes);\n', '        proposal.voters[_voter] = Voter({\n', '            reputation: rep,\n', '            vote: _vote\n', '        });\n', '        // Event:\n', '        emit VoteProposal(_proposalId, proposal.avatar, _voter, _vote, reputation);\n', '        emit AVVoteProposal(_proposalId, (_voter != msg.sender));\n', '        // execute the proposal if this vote was decisive:\n', '        return execute(_proposalId);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/controller/Reputation.sol\n', '\n', '/**\n', ' * @title Reputation system\n', ' * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\n', " * A reputation is use to assign influence measure to a DAO'S peers.\n", ' * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\n', ' * The Reputation contract maintain a map of address to reputation value.\n', ' * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\n', ' */\n', '\n', 'contract Reputation is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint256) public balances;\n', '    uint256 public totalSupply;\n', '    uint public decimals = 18;\n', '\n', '    // Event indicating minting of reputation to an address.\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    // Event indicating burning of reputation for an address.\n', '    event Burn(address indexed _from, uint256 _amount);\n', '\n', '    /**\n', '    * @dev return the reputation amount of a given owner\n', '    * @param _owner an address of the owner which we want to get his reputation\n', '    */\n', '    function reputationOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Generates `_amount` of reputation that are assigned to `_to`\n', '    * @param _to The address that will be assigned the new reputation\n', '    * @param _amount The quantity of reputation to be generated\n', '    * @return True if the reputation are generated correctly\n', '    */\n', '    function mint(address _to, uint _amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burns `_amount` of reputation from `_from`\n', '    * if _amount tokens to burn > balances[_from] the balance of _from will turn to zero.\n', '    * @param _from The address that will lose the reputation\n', '    * @param _amount The quantity of reputation to burn\n', '    * @return True if the reputation are burned correctly\n', '    */\n', '    function burn(address _from, uint _amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        uint amountMinted = _amount;\n', '        if (balances[_from] < _amount) {\n', '            amountMinted = balances[_from];\n', '        }\n', '        totalSupply = totalSupply.sub(amountMinted);\n', '        balances[_from] = balances[_from].sub(amountMinted);\n', '        emit Burn(_from, amountMinted);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC827/ERC827.sol\n', '\n', '/**\n', ' * @title ERC827 interface, an extension of ERC20 token standard\n', ' *\n', ' * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '\n', '  function transferAndCall(\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC827/ERC827Token.sol\n', '\n', '/* solium-disable security/no-low-level-calls */\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC827, an extension of ERC20 token standard\n', ' *\n', ' * @dev Implementation the ERC827, following the ERC20 standard with extra\n', ' * @dev methods to transfer value and data and execute calls in transfers and\n', ' * @dev approvals.\n', ' *\n', ' * @dev Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. It allows to\n', '   * @dev approve the transfer of value and execute a call with the sent data.\n', '   *\n', '   * @dev Beware that changing an allowance with this method brings the risk that\n', '   * @dev someone may use both the old and the new allowance by unfortunate\n', '   * @dev transaction ordering. One possible solution to mitigate this race condition\n', "   * @dev is to first reduce the spender's allowance to 0 and set the desired value\n", '   * @dev afterwards:\n', '   * @dev https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * @param _spender The address that will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function approveAndCall(\n', '    address _spender,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.approve(_spender, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '   * @dev address and execute a call with the sent data on the same transaction\n', '   *\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferAndCall(\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transfer(_to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '   * @dev another and make a contract call on the same transaction\n', '   *\n', '   * @param _from The address which you want to send tokens from\n', '   * @param _to The address which you want to transfer to\n', '   * @param _value The amout of tokens to be transferred\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   *\n', '   * @return true if the call function was executed successfully\n', '   */\n', '  function transferFromAndCall(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value,\n', '    bytes _data\n', '  )\n', '    public payable returns (bool)\n', '  {\n', '    require(_to != address(this));\n', '\n', '    super.transferFrom(_from, _to, _value);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_to.call.value(msg.value)(_data));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To increment\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function increaseApprovalAndCall(\n', '    address _spender,\n', '    uint _addedValue,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.increaseApproval(_spender, _addedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * @dev an owner allowed to a spender and execute a call with the sent data.\n', '   *\n', '   * @dev approve should be called when allowed[_spender] == 0. To decrement\n', '   * @dev allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * @dev the first transaction is mined)\n', '   * @dev From MonolithDAO Token.sol\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '  function decreaseApprovalAndCall(\n', '    address _spender,\n', '    uint _subtractedValue,\n', '    bytes _data\n', '  )\n', '    public\n', '    payable\n', '    returns (bool)\n', '  {\n', '    require(_spender != address(this));\n', '\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '    // solium-disable-next-line security/no-call-value\n', '    require(_spender.call.value(msg.value)(_data));\n', '\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/controller/DAOToken.sol\n', '\n', '/**\n', ' * @title DAOToken, base on zeppelin contract.\n', ' * @dev ERC20 compatible token. It is a mintable, destructible, burnable token.\n', ' */\n', '\n', 'contract DAOToken is ERC827Token,MintableToken,BurnableToken {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    // solium-disable-next-line uppercase\n', '    uint8 public constant decimals = 18;\n', '    uint public cap;\n', '\n', '    /**\n', '    * @dev Constructor\n', '    * @param _name - token name\n', '    * @param _symbol - token symbol\n', '    * @param _cap - token cap - 0 value means no cap\n', '    */\n', '    constructor(string _name, string _symbol,uint _cap) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        if (cap > 0)\n', '            require(totalSupply_.add(_amount) <= cap);\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Avatar.sol\n', '\n', '/**\n', ' * @title An Avatar holds tokens, reputation and ether for a controller\n', ' */\n', 'contract Avatar is Ownable {\n', '    bytes32 public orgName;\n', '    DAOToken public nativeToken;\n', '    Reputation public nativeReputation;\n', '\n', '    event GenericAction(address indexed _action, bytes32[] _params);\n', '    event SendEther(uint _amountInWei, address indexed _to);\n', '    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint _value);\n', '    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint _value);\n', '    event ExternalTokenIncreaseApproval(StandardToken indexed _externalToken, address _spender, uint _addedValue);\n', '    event ExternalTokenDecreaseApproval(StandardToken indexed _externalToken, address _spender, uint _subtractedValue);\n', '    event ReceiveEther(address indexed _sender, uint _value);\n', '\n', '    /**\n', '    * @dev the constructor takes organization name, native token and reputation system\n', '    and creates an avatar for a controller\n', '    */\n', '    constructor(bytes32 _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\n', '        orgName = _orgName;\n', '        nativeToken = _nativeToken;\n', '        nativeReputation = _nativeReputation;\n', '    }\n', '\n', '    /**\n', '    * @dev enables an avatar to receive ethers\n', '    */\n', '    function() public payable {\n', '        emit ReceiveEther(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @dev perform a generic call to an arbitrary contract\n', "    * @param _contract  the contract's address to call\n", '    * @param _data ABI-encoded contract call to call `_contract` address.\n', "    * @return the return bytes of the called contract's function.\n", '    */\n', '    function genericCall(address _contract,bytes _data) public onlyOwner {\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        bool result = _contract.call(_data);\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '        // Copy the returned data.\n', '        returndatacopy(0, 0, returndatasize)\n', '\n', '        switch result\n', '        // call returns 0 on error.\n', '        case 0 { revert(0, returndatasize) }\n', '        default { return(0, returndatasize) }\n', '        }\n', '    }\n', '\n', '    /**\n', "    * @dev send ethers from the avatar's wallet\n", '    * @param _amountInWei amount to send in Wei units\n', '    * @param _to send the ethers to this address\n', '    * @return bool which represents success\n', '    */\n', '    function sendEther(uint _amountInWei, address _to) public onlyOwner returns(bool) {\n', '        _to.transfer(_amountInWei);\n', '        emit SendEther(_amountInWei, _to);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev external token transfer\n', '    * @param _externalToken the token contract\n', '    * @param _to the destination address\n', '    * @param _value the amount of tokens to transfer\n', '    * @return bool which represents success\n', '    */\n', '    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value)\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.transfer(_to, _value);\n', '        emit ExternalTokenTransfer(_externalToken, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev external token transfer from a specific account\n', '    * @param _externalToken the token contract\n', '    * @param _from the account to spend token from\n', '    * @param _to the destination address\n', '    * @param _value the amount of tokens to transfer\n', '    * @return bool which represents success\n', '    */\n', '    function externalTokenTransferFrom(\n', '        StandardToken _externalToken,\n', '        address _from,\n', '        address _to,\n', '        uint _value\n', '    )\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.transferFrom(_from, _to, _value);\n', '        emit ExternalTokenTransferFrom(_externalToken, _from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev increase approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue)\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.increaseApproval(_spender, _addedValue);\n', '        emit ExternalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev decrease approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue )\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.decreaseApproval(_spender, _subtractedValue);\n', '        emit ExternalTokenDecreaseApproval(_externalToken,_spender, _subtractedValue);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/globalConstraints/GlobalConstraintInterface.sol\n', '\n', 'contract GlobalConstraintInterface {\n', '\n', '    enum CallPhase { Pre, Post,PreAndPost }\n', '\n', '    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n', '    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n', '    /**\n', '     * @dev when return if this globalConstraints is pre, post or both.\n', '     * @return CallPhase enum indication  Pre, Post or PreAndPost.\n', '     */\n', '    function when() public returns(CallPhase);\n', '}\n', '\n', '// File: contracts/controller/ControllerInterface.sol\n', '\n', '/**\n', ' * @title Controller contract\n', ' * @dev A controller controls the organizations tokens ,reputation and avatar.\n', ' * It is subject to a set of schemes and constraints that determine its behavior.\n', ' * Each scheme has it own parameters and operation permissions.\n', ' */\n', 'interface ControllerInterface {\n', '\n', '    /**\n', '     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n', '     * @param  _amount amount of reputation to mint\n', '     * @param _to beneficiary address\n', '     * @return bool which represents a success\n', '    */\n', '    function mintReputation(uint256 _amount, address _to,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev Burns `_amount` of reputation from `_from`\n', '     * @param _amount amount of reputation to burn\n', '     * @param _from The address that will lose the reputation\n', '     * @return bool which represents a success\n', '     */\n', '    function burnReputation(uint256 _amount, address _from,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev mint tokens .\n', '     * @param  _amount amount of token to mint\n', '     * @param _beneficiary beneficiary address\n', '     * @param _avatar address\n', '     * @return bool which represents a success\n', '     */\n', '    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '  /**\n', '   * @dev register or update a scheme\n', '   * @param _scheme the address of the scheme\n', '   * @param _paramsHash a hashed configuration of the usage of the scheme\n', '   * @param _permissions the permissions the new scheme will have\n', '   * @param _avatar address\n', '   * @return bool which represents a success\n', '   */\n', '    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev unregister a scheme\n', '     * @param _avatar address\n', '     * @param _scheme the address of the scheme\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterScheme(address _scheme,address _avatar)\n', '    external\n', '    returns(bool);\n', '    /**\n', "     * @dev unregister the caller's scheme\n", '     * @param _avatar address\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterSelf(address _avatar) external returns(bool);\n', '\n', '    function isSchemeRegistered( address _scheme,address _avatar) external view returns(bool);\n', '\n', '    function getSchemeParameters(address _scheme,address _avatar) external view returns(bytes32);\n', '\n', '    function getGlobalConstraintParameters(address _globalConstraint,address _avatar) external view returns(bytes32);\n', '\n', '    function getSchemePermissions(address _scheme,address _avatar) external view returns(bytes4);\n', '\n', '    /**\n', '     * @dev globalConstraintsCount return the global constraint pre and post count\n', '     * @return uint globalConstraintsPre count.\n', '     * @return uint globalConstraintsPost count.\n', '     */\n', '    function globalConstraintsCount(address _avatar) external view returns(uint,uint);\n', '\n', '    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar) external view returns(bool);\n', '\n', '    /**\n', '     * @dev add or update Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be added.\n', '     * @param _params the constraint parameters hash.\n', '     * @param _avatar the avatar of the organization\n', '     * @return bool which represents a success\n', '     */\n', '    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\n', '    external returns(bool);\n', '\n', '    /**\n', '     * @dev remove Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be remove.\n', '     * @param _avatar the organization avatar.\n', '     * @return bool which represents a success\n', '     */\n', '    function removeGlobalConstraint (address _globalConstraint,address _avatar)\n', '    external  returns(bool);\n', '\n', '  /**\n', '    * @dev upgrade the Controller\n', "    *      The function will trigger an event 'UpgradeController'.\n", '    * @param  _newController the address of the new controller.\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function upgradeController(address _newController,address _avatar)\n', '    external returns(bool);\n', '\n', '    /**\n', '    * @dev perform a generic call to an arbitrary contract\n', "    * @param _contract  the contract's address to call\n", '    * @param _data ABI-encoded contract call to call `_contract` address.\n', "    * @param _avatar the controller's avatar address\n", "    * @return bytes32  - the return value of the called _contract's function.\n", '    */\n', '    function genericCall(address _contract,bytes _data,address _avatar)\n', '    external\n', '    returns(bytes32);\n', '\n', '  /**\n', '   * @dev send some ether\n', '   * @param _amountInWei the amount of ether (in Wei) to send\n', '   * @param _to address of the beneficiary\n', '   * @param _avatar address\n', '   * @return bool which represents a success\n', '   */\n', '    function sendEther(uint _amountInWei, address _to,address _avatar)\n', '    external returns(bool);\n', '\n', '    /**\n', '    * @dev send some amount of arbitrary ERC20 Tokens\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '    * @dev transfer token "from" address "to" address\n', '    *      One must to approve the amount of tokens which can be spend from the\n', '    *      "from" account.This can be done using externalTokenApprove.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _from address of the account to send from\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '    * @dev increase approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '    * @dev decrease approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev getNativeReputation\n', '     * @param _avatar the organization avatar.\n', '     * @return organization native reputation\n', '     */\n', '    function getNativeReputation(address _avatar)\n', '    external\n', '    view\n', '    returns(address);\n', '}\n', '\n', '// File: contracts/controller/Controller.sol\n', '\n', '/**\n', ' * @title Controller contract\n', ' * @dev A controller controls the organizations tokens,reputation and avatar.\n', ' * It is subject to a set of schemes and constraints that determine its behavior.\n', ' * Each scheme has it own parameters and operation permissions.\n', ' */\n', 'contract Controller is ControllerInterface {\n', '\n', '    struct Scheme {\n', '        bytes32 paramsHash;  // a hash "configuration" of the scheme\n', '        bytes4  permissions; // A bitwise flags of permissions,\n', '                             // All 0: Not registered,\n', '                             // 1st bit: Flag if the scheme is registered,\n', '                             // 2nd bit: Scheme can register other schemes\n', '                             // 3rd bit: Scheme can add/remove global constraints\n', '                             // 4th bit: Scheme can upgrade the controller\n', '                             // 5th bit: Scheme can call genericCall on behalf of\n', '                             //          the organization avatar\n', '    }\n', '\n', '    struct GlobalConstraint {\n', '        address gcAddress;\n', '        bytes32 params;\n', '    }\n', '\n', '    struct GlobalConstraintRegister {\n', '        bool isRegistered; //is registered\n', '        uint index;    //index at globalConstraints\n', '    }\n', '\n', '    mapping(address=>Scheme) public schemes;\n', '\n', '    Avatar public avatar;\n', '    DAOToken public nativeToken;\n', '    Reputation public nativeReputation;\n', '  // newController will point to the new controller after the present controller is upgraded\n', '    address public newController;\n', '  // globalConstraintsPre that determine pre conditions for all actions on the controller\n', '\n', '    GlobalConstraint[] public globalConstraintsPre;\n', '  // globalConstraintsPost that determine post conditions for all actions on the controller\n', '    GlobalConstraint[] public globalConstraintsPost;\n', '  // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint\n', '    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPre;\n', '  // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint\n', '    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPost;\n', '\n', '    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);\n', '    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);\n', '    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);\n', '    event RegisterScheme (address indexed _sender, address indexed _scheme);\n', '    event UnregisterScheme (address indexed _sender, address indexed _scheme);\n', '    event GenericAction (address indexed _sender, bytes32[] _params);\n', '    event SendEther (address indexed _sender, uint _amountInWei, address indexed _to);\n', '    event ExternalTokenTransfer (address indexed _sender, address indexed _externalToken, address indexed _to, uint _value);\n', '    event ExternalTokenTransferFrom (address indexed _sender, address indexed _externalToken, address _from, address _to, uint _value);\n', '    event ExternalTokenIncreaseApproval (address indexed _sender, StandardToken indexed _externalToken, address _spender, uint _value);\n', '    event ExternalTokenDecreaseApproval (address indexed _sender, StandardToken indexed _externalToken, address _spender, uint _value);\n', '    event UpgradeController(address indexed _oldController,address _newController);\n', '    event AddGlobalConstraint(address indexed _globalConstraint, bytes32 _params,GlobalConstraintInterface.CallPhase _when);\n', '    event RemoveGlobalConstraint(address indexed _globalConstraint ,uint256 _index,bool _isPre);\n', '    event GenericCall(address indexed _contract,bytes _data);\n', '\n', '    constructor( Avatar _avatar) public\n', '    {\n', '        avatar = _avatar;\n', '        nativeToken = avatar.nativeToken();\n', '        nativeReputation = avatar.nativeReputation();\n', '        schemes[msg.sender] = Scheme({paramsHash: bytes32(0),permissions: bytes4(0x1F)});\n', '    }\n', '\n', '  // Do not allow mistaken calls:\n', '    function() external {\n', '        revert();\n', '    }\n', '\n', '  // Modifiers:\n', '    modifier onlyRegisteredScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(1) == bytes4(1));\n', '        _;\n', '    }\n', '\n', '    modifier onlyRegisteringSchemes() {\n', '        require(schemes[msg.sender].permissions&bytes4(2) == bytes4(2));\n', '        _;\n', '    }\n', '\n', '    modifier onlyGlobalConstraintsScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(4) == bytes4(4));\n', '        _;\n', '    }\n', '\n', '    modifier onlyUpgradingScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(8) == bytes4(8));\n', '        _;\n', '    }\n', '\n', '    modifier onlyGenericCallScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(16) == bytes4(16));\n', '        _;\n', '    }\n', '\n', '    modifier onlySubjectToConstraint(bytes32 func) {\n', '        uint idx;\n', '        for (idx = 0;idx<globalConstraintsPre.length;idx++) {\n', '            require((GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress)).pre(msg.sender,globalConstraintsPre[idx].params,func));\n', '        }\n', '        _;\n', '        for (idx = 0;idx<globalConstraintsPost.length;idx++) {\n', '            require((GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress)).post(msg.sender,globalConstraintsPost[idx].params,func));\n', '        }\n', '    }\n', '\n', '    modifier isAvatarValid(address _avatar) {\n', '        require(_avatar == address(avatar));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n', '     * @param  _amount amount of reputation to mint\n', '     * @param _to beneficiary address\n', '     * @return bool which represents a success\n', '     */\n', '    function mintReputation(uint256 _amount, address _to,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("mintReputation")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit MintReputation(msg.sender, _to, _amount);\n', '        return nativeReputation.mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns `_amount` of reputation from `_from`\n', '     * @param _amount amount of reputation to burn\n', '     * @param _from The address that will lose the reputation\n', '     * @return bool which represents a success\n', '     */\n', '    function burnReputation(uint256 _amount, address _from,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("burnReputation")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit BurnReputation(msg.sender, _from, _amount);\n', '        return nativeReputation.burn(_from, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev mint tokens .\n', '     * @param  _amount amount of token to mint\n', '     * @param _beneficiary beneficiary address\n', '     * @return bool which represents a success\n', '     */\n', '    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("mintTokens")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit MintTokens(msg.sender, _beneficiary, _amount);\n', '        return nativeToken.mint(_beneficiary, _amount);\n', '    }\n', '\n', '  /**\n', '   * @dev register a scheme\n', '   * @param _scheme the address of the scheme\n', '   * @param _paramsHash a hashed configuration of the usage of the scheme\n', '   * @param _permissions the permissions the new scheme will have\n', '   * @return bool which represents a success\n', '   */\n', '    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\n', '    external\n', '    onlyRegisteringSchemes\n', '    onlySubjectToConstraint("registerScheme")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '\n', '        Scheme memory scheme = schemes[_scheme];\n', '\n', '    // Check scheme has at least the permissions it is changing, and at least the current permissions:\n', '    // Implementation is a bit messy. One must recall logic-circuits ^^\n', '\n', '    // produces non-zero if sender does not have all of the perms that are changing between old and new\n', '        require(bytes4(0x1F)&(_permissions^scheme.permissions)&(~schemes[msg.sender].permissions) == bytes4(0));\n', '\n', '    // produces non-zero if sender does not have all of the perms in the old scheme\n', '        require(bytes4(0x1F)&(scheme.permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\n', '\n', '    // Add or change the scheme:\n', '        schemes[_scheme].paramsHash = _paramsHash;\n', '        schemes[_scheme].permissions = _permissions|bytes4(1);\n', '        emit RegisterScheme(msg.sender, _scheme);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev unregister a scheme\n', '     * @param _scheme the address of the scheme\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterScheme( address _scheme,address _avatar)\n', '    external\n', '    onlyRegisteringSchemes\n', '    onlySubjectToConstraint("unregisterScheme")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '    //check if the scheme is registered\n', '        if (schemes[_scheme].permissions&bytes4(1) == bytes4(0)) {\n', '            return false;\n', '          }\n', '    // Check the unregistering scheme has enough permissions:\n', '        require(bytes4(0x1F)&(schemes[_scheme].permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\n', '\n', '    // Unregister:\n', '        emit UnregisterScheme(msg.sender, _scheme);\n', '        delete schemes[_scheme];\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * @dev unregister the caller's scheme\n", '     * @return bool which represents a success\n', '     */\n', '    function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {\n', '        if (_isSchemeRegistered(msg.sender,_avatar) == false) {\n', '            return false;\n', '        }\n', '        delete schemes[msg.sender];\n', '        emit UnregisterScheme(msg.sender, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function isSchemeRegistered(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bool) {\n', '        return _isSchemeRegistered(_scheme,_avatar);\n', '    }\n', '\n', '    function getSchemeParameters(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bytes32) {\n', '        return schemes[_scheme].paramsHash;\n', '    }\n', '\n', '    function getSchemePermissions(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bytes4) {\n', '        return schemes[_scheme].permissions;\n', '    }\n', '\n', '    function getGlobalConstraintParameters(address _globalConstraint,address) external view returns(bytes32) {\n', '\n', '        GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];\n', '\n', '        if (register.isRegistered) {\n', '            return globalConstraintsPre[register.index].params;\n', '        }\n', '\n', '        register = globalConstraintsRegisterPost[_globalConstraint];\n', '\n', '        if (register.isRegistered) {\n', '            return globalConstraintsPost[register.index].params;\n', '        }\n', '    }\n', '\n', '   /**\n', '    * @dev globalConstraintsCount return the global constraint pre and post count\n', '    * @return uint globalConstraintsPre count.\n', '    * @return uint globalConstraintsPost count.\n', '    */\n', '    function globalConstraintsCount(address _avatar)\n', '        external\n', '        isAvatarValid(_avatar)\n', '        view\n', '        returns(uint,uint)\n', '        {\n', '        return (globalConstraintsPre.length,globalConstraintsPost.length);\n', '    }\n', '\n', '    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar)\n', '        external\n', '        isAvatarValid(_avatar)\n', '        view\n', '        returns(bool)\n', '        {\n', '        return (globalConstraintsRegisterPre[_globalConstraint].isRegistered || globalConstraintsRegisterPost[_globalConstraint].isRegistered);\n', '    }\n', '\n', '    /**\n', '     * @dev add or update Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be added.\n', '     * @param _params the constraint parameters hash.\n', '     * @return bool which represents a success\n', '     */\n', '    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\n', '    external\n', '    onlyGlobalConstraintsScheme\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\n', '        if ((when == GlobalConstraintInterface.CallPhase.Pre)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\n', '                globalConstraintsPre.push(GlobalConstraint(_globalConstraint,_params));\n', '                globalConstraintsRegisterPre[_globalConstraint] = GlobalConstraintRegister(true,globalConstraintsPre.length-1);\n', '            }else {\n', '                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;\n', '            }\n', '        }\n', '        if ((when == GlobalConstraintInterface.CallPhase.Post)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\n', '                globalConstraintsPost.push(GlobalConstraint(_globalConstraint,_params));\n', '                globalConstraintsRegisterPost[_globalConstraint] = GlobalConstraintRegister(true,globalConstraintsPost.length-1);\n', '            }else {\n', '                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;\n', '            }\n', '        }\n', '        emit AddGlobalConstraint(_globalConstraint, _params,when);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev remove Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be remove.\n', '     * @return bool which represents a success\n', '     */\n', '    function removeGlobalConstraint (address _globalConstraint,address _avatar)\n', '    external\n', '    onlyGlobalConstraintsScheme\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        GlobalConstraintRegister memory globalConstraintRegister;\n', '        GlobalConstraint memory globalConstraint;\n', '        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\n', '        bool retVal = false;\n', '\n', '        if ((when == GlobalConstraintInterface.CallPhase.Pre)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];\n', '            if (globalConstraintRegister.isRegistered) {\n', '                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {\n', '                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];\n', '                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;\n', '                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;\n', '                }\n', '                globalConstraintsPre.length--;\n', '                delete globalConstraintsRegisterPre[_globalConstraint];\n', '                retVal = true;\n', '            }\n', '        }\n', '        if ((when == GlobalConstraintInterface.CallPhase.Post)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];\n', '            if (globalConstraintRegister.isRegistered) {\n', '                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {\n', '                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];\n', '                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;\n', '                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;\n', '                }\n', '                globalConstraintsPost.length--;\n', '                delete globalConstraintsRegisterPost[_globalConstraint];\n', '                retVal = true;\n', '            }\n', '        }\n', '        if (retVal) {\n', '            emit RemoveGlobalConstraint(_globalConstraint,globalConstraintRegister.index,when == GlobalConstraintInterface.CallPhase.Pre);\n', '        }\n', '        return retVal;\n', '    }\n', '\n', '  /**\n', '    * @dev upgrade the Controller\n', "    *      The function will trigger an event 'UpgradeController'.\n", '    * @param  _newController the address of the new controller.\n', '    * @return bool which represents a success\n', '    */\n', '    function upgradeController(address _newController,address _avatar)\n', '    external\n', '    onlyUpgradingScheme\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        require(newController == address(0));   // so the upgrade could be done once for a contract.\n', '        require(_newController != address(0));\n', '        newController = _newController;\n', '        avatar.transferOwnership(_newController);\n', '        require(avatar.owner()==_newController);\n', '        if (nativeToken.owner() == address(this)) {\n', '            nativeToken.transferOwnership(_newController);\n', '            require(nativeToken.owner()==_newController);\n', '        }\n', '        if (nativeReputation.owner() == address(this)) {\n', '            nativeReputation.transferOwnership(_newController);\n', '            require(nativeReputation.owner()==_newController);\n', '        }\n', '        emit UpgradeController(this,newController);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev perform a generic call to an arbitrary contract\n', "    * @param _contract  the contract's address to call\n", '    * @param _data ABI-encoded contract call to call `_contract` address.\n', "    * @param _avatar the controller's avatar address\n", "    * @return bytes32  - the return value of the called _contract's function.\n", '    */\n', '    function genericCall(address _contract,bytes _data,address _avatar)\n', '    external\n', '    onlyGenericCallScheme\n', '    onlySubjectToConstraint("genericCall")\n', '    isAvatarValid(_avatar)\n', '    returns (bytes32)\n', '    {\n', '        emit GenericCall(_contract, _data);\n', '        avatar.genericCall(_contract, _data);\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '        // Copy the returned data.\n', '        returndatacopy(0, 0, returndatasize)\n', '        return(0, returndatasize)\n', '        }\n', '    }\n', '\n', '  /**\n', '   * @dev send some ether\n', '   * @param _amountInWei the amount of ether (in Wei) to send\n', '   * @param _to address of the beneficiary\n', '   * @return bool which represents a success\n', '   */\n', '    function sendEther(uint _amountInWei, address _to,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("sendEther")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit SendEther(msg.sender, _amountInWei, _to);\n', '        return avatar.sendEther(_amountInWei, _to);\n', '    }\n', '\n', '    /**\n', '    * @dev send some amount of arbitrary ERC20 Tokens\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenTransfer")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenTransfer(msg.sender, _externalToken, _to, _value);\n', '        return avatar.externalTokenTransfer(_externalToken, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token "from" address "to" address\n', '    *      One must to approve the amount of tokens which can be spend from the\n', '    *      "from" account.This can be done using externalTokenApprove.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _from address of the account to send from\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenTransferFrom")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenTransferFrom(msg.sender, _externalToken, _from, _to, _value);\n', '        return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev increase approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenIncreaseApproval")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenIncreaseApproval(msg.sender,_externalToken,_spender,_addedValue);\n', '        return avatar.externalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '    * @dev decrease approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenDecreaseApproval")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenDecreaseApproval(msg.sender,_externalToken,_spender,_subtractedValue);\n', '        return avatar.externalTokenDecreaseApproval(_externalToken, _spender, _subtractedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev getNativeReputation\n', '     * @param _avatar the organization avatar.\n', '     * @return organization native reputation\n', '     */\n', '    function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {\n', '        return address(nativeReputation);\n', '    }\n', '\n', '    function _isSchemeRegistered(address _scheme,address _avatar) private isAvatarValid(_avatar) view returns(bool) {\n', '        return (schemes[_scheme].permissions&bytes4(1) != bytes4(0));\n', '    }\n', '}\n', '\n', '// File: contracts/universalSchemes/ExecutableInterface.sol\n', '\n', 'contract ExecutableInterface {\n', '    function execute(bytes32 _proposalId, address _avatar, int _param) public returns(bool);\n', '}\n', '\n', '// File: contracts/VotingMachines/IntVoteInterface.sol\n', '\n', 'interface IntVoteInterface {\n', '    //When implementing this interface please do not only override function and modifier,\n', '    //but also to keep the modifiers on the overridden functions.\n', '    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\n', '    modifier votable(bytes32 _proposalId) {revert(); _;}\n', '\n', '    event NewProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _numOfChoices, address _proposer, bytes32 _paramsHash);\n', '    event ExecuteProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _decision, uint _totalReputation);\n', '    event VoteProposal(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter, uint _vote, uint _reputation);\n', '    event CancelProposal(bytes32 indexed _proposalId, address indexed _avatar );\n', '    event CancelVoting(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter);\n', '\n', '    /**\n', '     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n', '     * generated by calculating keccak256 of a incremented counter.\n', '     * @param _numOfChoices number of voting choices\n', '     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\n', '     * @param _avatar an address to be sent as the payload to the _executable contract.\n', '     * @param _executable This contract will be executed when vote is over.\n', '     * @param _proposer address\n', "     * @return proposal's id.\n", '     */\n', '    function propose(\n', '        uint _numOfChoices,\n', '        bytes32 _proposalParameters,\n', '        address _avatar,\n', '        ExecutableInterface _executable,\n', '        address _proposer\n', '        ) external returns(bytes32);\n', '\n', '    // Only owned proposals and only the owner:\n', '    function cancelProposal(bytes32 _proposalId) external onlyProposalOwner(_proposalId) votable(_proposalId) returns(bool);\n', '\n', '    // Only owned proposals and only the owner:\n', '    function ownerVote(bytes32 _proposalId, uint _vote, address _voter) external onlyProposalOwner(_proposalId) returns(bool);\n', '\n', '    function vote(bytes32 _proposalId, uint _vote) external votable(_proposalId) returns(bool);\n', '\n', '    function voteWithSpecifiedAmounts(\n', '        bytes32 _proposalId,\n', '        uint _vote,\n', '        uint _rep,\n', '        uint _token) external votable(_proposalId) returns(bool);\n', '\n', '    function cancelVote(bytes32 _proposalId) external votable(_proposalId);\n', '\n', '    //@dev execute check if the proposal has been decided, and if so, execute the proposal\n', '    //@param _proposalId the id of the proposal\n', '    //@return bool true - the proposal has been executed\n', '    //             false - otherwise.\n', '    function execute(bytes32 _proposalId) public votable(_proposalId) returns(bool);\n', '\n', '    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint);\n', '\n', '    function isVotable(bytes32 _proposalId) external view returns(bool);\n', '\n', '    /**\n', '     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n', '     * @param _proposalId the ID of the proposal\n', '     * @param _choice the index in the\n', '     * @return voted reputation for the given choice\n', '     */\n', '    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint);\n', '\n', '    /**\n', '     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n', '     * @return bool true or false\n', '     */\n', '    function isAbstainAllow() external pure returns(bool);\n', '\n', '    /**\n', '     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n', '     * @return min - minimum number of choices\n', '               max - maximum number of choices\n', '     */\n', '    function getAllowedRangeOfChoices() external pure returns(uint min,uint max);\n', '}\n', '\n', '// File: contracts/VotingMachines/AbsoluteVote.sol\n', '\n', 'contract AbsoluteVote is IntVoteInterface {\n', '    using SafeMath for uint;\n', '\n', '\n', '    struct Parameters {\n', '        Reputation reputationSystem; // the reputation system that is being used\n', '        uint precReq; // how many percentages required for the proposal to be passed\n', '        bool allowOwner; // does this proposal has an owner who has owner rights?\n', '    }\n', '\n', '    struct Voter {\n', "        uint vote; // 0 - 'abstain'\n", "        uint reputation; // amount of voter's reputation\n", '    }\n', '\n', '    struct Proposal {\n', "        address owner; // the proposal's owner\n", '        address avatar; // the avatar of the organization that owns the proposal\n', '        uint numOfChoices;\n', '        ExecutableInterface executable; // will be executed if the proposal will pass\n', '        bytes32 paramsHash; // the hash of the parameters of the proposal\n', '        uint totalVotes;\n', '        mapping(uint=>uint) votes;\n', '        mapping(address=>Voter) voters;\n', '        bool open; // voting open flag\n', '    }\n', '\n', '    event AVVoteProposal(bytes32 indexed _proposalId, bool _isOwnerVote);\n', '    event RefreshReputation(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter,uint _reputation);\n', '\n', '\n', '    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\n', '    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\n', '\n', '    uint public constant MAX_NUM_OF_CHOICES = 10;\n', '    uint public proposalsCnt; // Total amount of proposals\n', '\n', '  /**\n', '   * @dev Check that there is owner for the proposal and he sent the transaction\n', '   */\n', '    modifier onlyProposalOwner(bytes32 _proposalId) {\n', '        require(msg.sender == proposals[_proposalId].owner);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Check that the proposal is votable (open and not executed yet)\n', '   */\n', '    modifier votable(bytes32 _proposalId) {\n', '        require(proposals[_proposalId].open);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n', '     * generated by calculating keccak256 of a incremented counter.\n', '     * @param _numOfChoices number of voting choices\n', '     * @param _paramsHash defined the parameters of the voting machine used for this proposal\n', '     * @param _avatar an address to be sent as the payload to the _executable contract.\n', '     * @param _executable This contract will be executed when vote is over.\n', "     * @return proposal's id.\n", '     */\n', '    function propose(uint _numOfChoices, bytes32 _paramsHash, address _avatar, ExecutableInterface _executable,address)\n', '        external\n', '        returns(bytes32)\n', '    {\n', '        // Check valid params and number of choices:\n', '        require(parameters[_paramsHash].reputationSystem != address(0));\n', '        require(_numOfChoices > 0 && _numOfChoices <= MAX_NUM_OF_CHOICES);\n', '        // Generate a unique ID:\n', '        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\n', '        proposalsCnt++;\n', '        // Open proposal:\n', '        Proposal memory proposal;\n', '        proposal.numOfChoices = _numOfChoices;\n', '        proposal.paramsHash = _paramsHash;\n', '        proposal.avatar = _avatar;\n', '        proposal.executable = _executable;\n', '        proposal.owner = msg.sender;\n', '        proposal.open = true;\n', '        proposals[proposalId] = proposal;\n', '        emit NewProposal(proposalId, _avatar, _numOfChoices, msg.sender, _paramsHash);\n', '        return proposalId;\n', '    }\n', '\n', '  /**\n', '   * @dev Cancel a proposal, only the owner can call this function and only if allowOwner flag is true.\n', '   * @param _proposalId the proposal ID\n', '   */\n', '    function cancelProposal(bytes32 _proposalId) external onlyProposalOwner(_proposalId) votable(_proposalId) returns(bool) {\n', '        if (! parameters[proposals[_proposalId].paramsHash].allowOwner) {\n', '            return false;\n', '        }\n', '        address avatar = proposals[_proposalId].avatar;\n', '        deleteProposal(_proposalId);\n', '        emit CancelProposal(_proposalId, avatar);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev voting function\n', '   * @param _proposalId id of the proposal\n', '   * @param _vote a value between 0 to and the proposal number of choices.\n', '   * @return bool true - the proposal has been executed\n', '   *              false - otherwise.\n', '   */\n', '    function vote(bytes32 _proposalId, uint _vote) external votable(_proposalId) returns(bool) {\n', '        return internalVote(_proposalId, msg.sender, _vote, 0);\n', '    }\n', '\n', '  /**\n', '   * @dev voting function with owner functionality (can vote on behalf of someone else)\n', '   * @param _proposalId id of the proposal\n', '   * @param _vote a value between 0 to and the proposal number of choices.\n', "   * @param _voter will be voted with that voter's address\n", '   * @return bool true - the proposal has been executed\n', '   *              false - otherwise.\n', '   */\n', '    function ownerVote(bytes32 _proposalId, uint _vote, address _voter)\n', '        external\n', '        onlyProposalOwner(_proposalId)\n', '        votable(_proposalId)\n', '        returns(bool)\n', '    {\n', '        if (! parameters[proposals[_proposalId].paramsHash].allowOwner) {\n', '            return false;\n', '        }\n', '        return  internalVote(_proposalId, _voter, _vote, 0);\n', '    }\n', '\n', '    function voteWithSpecifiedAmounts(bytes32 _proposalId,uint _vote,uint _rep,uint) external votable(_proposalId) returns(bool) {\n', '        return internalVote(_proposalId,msg.sender,_vote,_rep);\n', '    }\n', '\n', '  /**\n', '   * @dev Cancel the vote of the msg.sender: subtract the reputation amount from the votes\n', '   * and delete the voter from the proposal struct\n', '   * @param _proposalId id of the proposal\n', '   */\n', '    function cancelVote(bytes32 _proposalId) external votable(_proposalId) {\n', '        cancelVoteInternal(_proposalId, msg.sender);\n', '    }\n', '\n', '  /**\n', '   * @dev getNumberOfChoices returns the number of choices possible in this proposal\n', '   * @param _proposalId the ID of the proposal\n', '   * @return uint that contains number of choices\n', '   */\n', '    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint) {\n', '        return proposals[_proposalId].numOfChoices;\n', '    }\n', '\n', '  /**\n', '   * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\n', '   * @param _proposalId the ID of the proposal\n', '   * @param _voter the address of the voter\n', '   * @return uint vote - the voters vote\n', '   *        uint reputation - amount of reputation committed by _voter to _proposalId\n', '   */\n', '    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\n', '        Voter memory voter = proposals[_proposalId].voters[_voter];\n', '        return (voter.vote, voter.reputation);\n', '    }\n', '\n', '    /**\n', '     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n', '     * @param _proposalId the ID of the proposal\n', '     * @param _choice the index in the\n', '     * @return voted reputation for the given choice\n', '     */\n', '    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint) {\n', '        return proposals[_proposalId].votes[_choice];\n', '    }\n', '\n', '    /**\n', '      * @dev isVotable check if the proposal is votable\n', '      * @param _proposalId the ID of the proposal\n', '      * @return bool true or false\n', '    */\n', '    function isVotable(bytes32 _proposalId) external view returns(bool) {\n', '        return  proposals[_proposalId].open;\n', '    }\n', '\n', '    /**\n', '     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n', '     * @return bool true or false\n', '     */\n', '    function isAbstainAllow() external pure returns(bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev refreshReputation refresh the reputation for a given voters list\n', '     * @param _proposalId the ID of the proposal\n', '     * @param _voters list to be refreshed\n', '     * @return bool true or false\n', '     */\n', '    function refreshReputation(bytes32 _proposalId, address[] _voters) external returns(bool) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        Parameters memory params = parameters[proposal.paramsHash];\n', '\n', '        for (uint i = 0; i < _voters.length; i++) {\n', '            Voter storage voter = proposal.voters[_voters[i]];\n', '             //check that the voters already votes.\n', '            if (voter.reputation > 0) {\n', "                //update only if there is a mismatch between the voter's system reputation\n", '                //and the reputation stored in the voting machine for the voter.\n', '                uint rep = params.reputationSystem.reputationOf(_voters[i]);\n', '                if (rep > voter.reputation) {\n', '                    proposal.votes[voter.vote] = proposal.votes[voter.vote].add(rep - voter.reputation);\n', '                    proposal.totalVotes = (proposal.totalVotes).add(rep - voter.reputation);\n', '                  } else if (rep < voter.reputation) {\n', '                    proposal.votes[voter.vote] = proposal.votes[voter.vote].sub(voter.reputation - rep);\n', '                    proposal.totalVotes = (proposal.totalVotes).sub(voter.reputation - rep);\n', '                  }\n', '                if (rep != voter.reputation) {\n', '                    voter.reputation = rep;\n', '                    emit RefreshReputation(_proposalId, proposal.avatar, _voters[i],rep);\n', '                }\n', '             }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n', '     * @return min - minimum number of choices\n', '               max - maximum number of choices\n', '     */\n', '    function getAllowedRangeOfChoices() external pure returns(uint min,uint max) {\n', '        return (1,MAX_NUM_OF_CHOICES);\n', '    }\n', '\n', '    /**\n', '      * @dev execute check if the proposal has been decided, and if so, execute the proposal\n', '      * @param _proposalId the id of the proposal\n', '      * @return bool true - the proposal has been executed\n', '      *              false - otherwise.\n', '     */\n', '    function execute(bytes32 _proposalId) public votable(_proposalId) returns(bool) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        Reputation reputation = parameters[proposal.paramsHash].reputationSystem;\n', '        require(reputation != address(0));\n', '        uint totalReputation = reputation.totalSupply();\n', '        uint precReq = parameters[proposal.paramsHash].precReq;\n', '        // Check if someone crossed the bar:\n', '        for (uint cnt = 0; cnt <= proposal.numOfChoices; cnt++) {\n', '            if (proposal.votes[cnt] > totalReputation*precReq/100) {\n', '                Proposal memory tmpProposal = proposal;\n', '                deleteProposal(_proposalId);\n', '                emit ExecuteProposal(_proposalId, tmpProposal.avatar, cnt, totalReputation);\n', '                (tmpProposal.executable).execute(_proposalId, tmpProposal.avatar, int(cnt));\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev hash the parameters, save them if necessary, and return the hash value\n', '    */\n', '    function setParameters(Reputation _reputationSystem, uint _precReq, bool _allowOwner) public returns(bytes32) {\n', '        require(_precReq <= 100 && _precReq > 0);\n', '        bytes32 hashedParameters = getParametersHash(_reputationSystem, _precReq, _allowOwner);\n', '        parameters[hashedParameters] = Parameters({\n', '            reputationSystem: _reputationSystem,\n', '            precReq: _precReq,\n', '            allowOwner: _allowOwner\n', '        });\n', '        return hashedParameters;\n', '    }\n', '\n', '    /**\n', '     * @dev hashParameters returns a hash of the given parameters\n', '     */\n', '    function getParametersHash(Reputation _reputationSystem, uint _precReq, bool _allowOwner) public pure returns(bytes32) {\n', '        return keccak256(abi.encodePacked(_reputationSystem, _precReq, _allowOwner));\n', '    }\n', '\n', '    function cancelVoteInternal(bytes32 _proposalId, address _voter) internal {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        Voter memory voter = proposal.voters[_voter];\n', '        proposal.votes[voter.vote] = (proposal.votes[voter.vote]).sub(voter.reputation);\n', '        proposal.totalVotes = (proposal.totalVotes).sub(voter.reputation);\n', '        delete proposal.voters[_voter];\n', '        emit CancelVoting(_proposalId, proposal.avatar, _voter);\n', '    }\n', '\n', '    function deleteProposal(bytes32 _proposalId) internal {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        for (uint cnt = 0; cnt <= proposal.numOfChoices; cnt++) {\n', '            delete proposal.votes[cnt];\n', '        }\n', '        delete proposals[_proposalId];\n', '    }\n', '\n', '    /**\n', '     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\n', '     * @param _proposalId id of the proposal\n', '     * @param _voter used in case the vote is cast for someone else\n', "     * @param _vote a value between 0 to and the proposal's number of choices.\n", '     * @return true in case of proposal execution otherwise false\n', '     * throws if proposal is not open or if it has been executed\n', '     * NB: executes the proposal if a decision has been reached\n', '     */\n', '    function internalVote(bytes32 _proposalId, address _voter, uint _vote, uint _rep) private returns(bool) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        Parameters memory params = parameters[proposal.paramsHash];\n', '        // Check valid vote:\n', '        require(_vote <= proposal.numOfChoices);\n', '        // Check voter has enough reputation:\n', '        uint reputation = params.reputationSystem.reputationOf(_voter);\n', '        require(reputation >= _rep);\n', '        uint rep = _rep;\n', '        if (rep == 0) {\n', '            rep = reputation;\n', '        }\n', '        // If this voter has already voted, first cancel the vote:\n', '        if (proposal.voters[_voter].reputation != 0) {\n', '            cancelVoteInternal(_proposalId, _voter);\n', '        }\n', '        // The voting itself:\n', '        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\n', '        proposal.totalVotes = rep.add(proposal.totalVotes);\n', '        proposal.voters[_voter] = Voter({\n', '            reputation: rep,\n', '            vote: _vote\n', '        });\n', '        // Event:\n', '        emit VoteProposal(_proposalId, proposal.avatar, _voter, _vote, reputation);\n', '        emit AVVoteProposal(_proposalId, (_voter != msg.sender));\n', '        // execute the proposal if this vote was decisive:\n', '        return execute(_proposalId);\n', '    }\n', '}']
