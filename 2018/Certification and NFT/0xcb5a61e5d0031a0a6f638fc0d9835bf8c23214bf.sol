['pragma solidity ^0.4.20;\n', '\n', '/*************************************************************************************\n', '*\n', '* Transfiere 2018 Database\n', '* Property of FYCMA\n', '* Powered by TICsmart\n', '* Description: \n', '* Smart Contract of attendance at the event and forum Transfiere 2018\n', '* C&#243;digo: C&#243;digo Hash impreso en el diploma facilitado por Transfiere 2018\n', '*\n', '**************************************************************************************/\n', '\n', 'contract Transfiere2018Asistencia {\n', '    struct Organization {\n', '        string codigo;\n', '    }\n', '\n', '    Organization[] internal availableOrgs;\n', '    address public owner = msg.sender;\n', '\n', '    function addOrg(string _codigo) public {\n', '        require(msg.sender == owner);\n', '        \n', '        for (uint i = 0; i < availableOrgs.length; i++) {\n', '            if (keccak256(availableOrgs[i].codigo) == keccak256(_codigo)) {\n', '                return;\n', '            }\n', '        }\n', '        \n', '        availableOrgs.push(Organization(_codigo));\n', '    }\n', '\n', '    function deleteOrg(string _codigo) public {\n', '        require(msg.sender == owner);\n', '\n', '        for (uint i = 0; i < availableOrgs.length; i++) {\n', '            if (keccak256(availableOrgs[i].codigo) == keccak256(_codigo)) {\n', '                delete availableOrgs[i];\n', '                availableOrgs.length--;\n', '                return;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function checkCode(string _codigo) public view returns (string, string) {\n', '        for (uint i = 0; i < availableOrgs.length; i++) {\n', '            if (keccak256(availableOrgs[i].codigo) == keccak256(_codigo)) {\n', '                return (_codigo,"El c&#243;digo es v&#225;lido.");\n', '            }\n', '        }\n', '    \n', '        return (_codigo,"El c&#243;digo no existe.");\n', '    }\n', '    \n', '    function destroy() public {\n', '        require(msg.sender == owner);\n', '        selfdestruct(owner);\n', '    }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '/*************************************************************************************\n', '*\n', '* Transfiere 2018 Database\n', '* Property of FYCMA\n', '* Powered by TICsmart\n', '* Description: \n', '* Smart Contract of attendance at the event and forum Transfiere 2018\n', '* Código: Código Hash impreso en el diploma facilitado por Transfiere 2018\n', '*\n', '**************************************************************************************/\n', '\n', 'contract Transfiere2018Asistencia {\n', '    struct Organization {\n', '        string codigo;\n', '    }\n', '\n', '    Organization[] internal availableOrgs;\n', '    address public owner = msg.sender;\n', '\n', '    function addOrg(string _codigo) public {\n', '        require(msg.sender == owner);\n', '        \n', '        for (uint i = 0; i < availableOrgs.length; i++) {\n', '            if (keccak256(availableOrgs[i].codigo) == keccak256(_codigo)) {\n', '                return;\n', '            }\n', '        }\n', '        \n', '        availableOrgs.push(Organization(_codigo));\n', '    }\n', '\n', '    function deleteOrg(string _codigo) public {\n', '        require(msg.sender == owner);\n', '\n', '        for (uint i = 0; i < availableOrgs.length; i++) {\n', '            if (keccak256(availableOrgs[i].codigo) == keccak256(_codigo)) {\n', '                delete availableOrgs[i];\n', '                availableOrgs.length--;\n', '                return;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function checkCode(string _codigo) public view returns (string, string) {\n', '        for (uint i = 0; i < availableOrgs.length; i++) {\n', '            if (keccak256(availableOrgs[i].codigo) == keccak256(_codigo)) {\n', '                return (_codigo,"El código es válido.");\n', '            }\n', '        }\n', '    \n', '        return (_codigo,"El código no existe.");\n', '    }\n', '    \n', '    function destroy() public {\n', '        require(msg.sender == owner);\n', '        selfdestruct(owner);\n', '    }\n', '}']
