['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title DealsRootStorage\n', ' * @dev Storage for precalculated merkle roots.\n', ' */\n', 'contract DealsRootStorage is Ownable {\n', '  mapping(uint256 => bytes32) roots;\n', '  uint256 public lastTimestamp = 0;\n', '\n', '  /**\n', '   * @dev Sets merkle root at the specified timestamp.\n', '   */\n', '  function setRoot(uint256 _timestamp, bytes32 _root) onlyOwner public returns (bool) {\n', '    require(_timestamp > 0);\n', '    require(roots[_timestamp] == 0);\n', '\n', '    roots[_timestamp] = _root;\n', '    lastTimestamp = _timestamp;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets last available merkle root.\n', '   */\n', '  function lastRoot() public view returns (bytes32) {\n', '    return roots[lastTimestamp];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets merkle root by the specified timestamp.\n', '   */\n', '  function getRoot(uint256 _timestamp) public view returns (bytes32) {\n', '    return roots[_timestamp];\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title DealsRootStorage\n', ' * @dev Storage for precalculated merkle roots.\n', ' */\n', 'contract DealsRootStorage is Ownable {\n', '  mapping(uint256 => bytes32) roots;\n', '  uint256 public lastTimestamp = 0;\n', '\n', '  /**\n', '   * @dev Sets merkle root at the specified timestamp.\n', '   */\n', '  function setRoot(uint256 _timestamp, bytes32 _root) onlyOwner public returns (bool) {\n', '    require(_timestamp > 0);\n', '    require(roots[_timestamp] == 0);\n', '\n', '    roots[_timestamp] = _root;\n', '    lastTimestamp = _timestamp;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets last available merkle root.\n', '   */\n', '  function lastRoot() public view returns (bytes32) {\n', '    return roots[lastTimestamp];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets merkle root by the specified timestamp.\n', '   */\n', '  function getRoot(uint256 _timestamp) public view returns (bytes32) {\n', '    return roots[_timestamp];\n', '  }\n', '}']
