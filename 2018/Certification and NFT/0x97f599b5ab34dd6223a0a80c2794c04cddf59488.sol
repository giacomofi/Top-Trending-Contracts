['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev Adds onlyOwner modifier. Subcontracts should implement checkOwner to check if caller is owner.\n', ' */\n', 'contract Ownable {\n', '    modifier onlyOwner() {\n', '        checkOwner();\n', '        _;\n', '    }\n', '\n', '    function checkOwner() internal;\n', '}\n', '\n', '/**\n', ' * @title OwnableImpl\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract OwnableImpl is Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function OwnableImpl() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    function checkOwner() internal {\n', '        require(msg.sender == owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract EtherReceiver {\n', '\tfunction receiveWithData(bytes _data) payable public;\n', '}\n', '\n', 'contract Forwarder is OwnableImpl {\n', '\tfunction withdraw(address to, uint256 value) onlyOwner public {\n', '\t\tto.transfer(value);\n', '\t}\n', '\n', '\tfunction forward(address to, bytes data, uint256 value) payable public {\n', '\t\tuint256 toTransfer = value - value / 100;\n', '\t\tif (msg.value > toTransfer) {\n', '\t\t\tEtherReceiver(to).receiveWithData.value(toTransfer)(data);\n', '\t\t} else {\n', '\t\t\tEtherReceiver(to).receiveWithData.value(msg.value)(data);\n', '\t\t}\n', '\t}\n', '}']