['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Authored by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Envisioned in FirstBlood ICO contract.\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '\n', '  event Halted(bool halted);\n', '\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '    Halted(true);\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '    Halted(false);\n', '  }\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint a, uint b) internal pure returns (uint) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint a, uint b) internal pure returns (uint) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Interface for the standard token.\n', ' * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'contract EIP20Token {\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool success);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '  function approve(address spender, uint256 value) public returns (bool success);\n', '  function allowance(address owner, address spender) public view returns (uint256 remaining);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  /**\n', '  ** Optional functions\n', '  *\n', '  function name() public view returns (string name);\n', '  function symbol() public view returns (string symbol);\n', '  function decimals() public view returns (uint8 decimals);\n', '  *\n', '  **/\n', '\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '// Interface for burning tokens\n', 'contract Burnable {\n', '  // @dev Destroys tokens for an account\n', '  // @param account Account whose tokens are destroyed\n', '  // @param value Amount of tokens to destroy\n', '  function burnTokens(address account, uint value) internal;\n', '  event Burned(address account, uint value);\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Authored by https://www.coinfabrik.com/\n', ' */\n', '\n', '\n', '/**\n', ' * Internal interface for the minting of tokens.\n', ' */\n', 'contract Mintable {\n', '\n', '  /**\n', '   * @dev Mints tokens for an account\n', '   * This function should the Minted event.\n', '   */\n', '  function mintInternal(address receiver, uint amount) internal;\n', '\n', '  /** Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '}\n', '\n', '/**\n', ' * @title Standard token\n', ' * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\n', ' */\n', 'contract StandardToken is EIP20Token, Burnable, Mintable {\n', '  using SafeMath for uint;\n', '\n', '  uint private total_supply;\n', '  mapping(address => uint) private balances;\n', '  mapping(address => mapping (address => uint)) private allowed;\n', '\n', '\n', '  function totalSupply() public view returns (uint) {\n', '    return total_supply;\n', '  }\n', '\n', '  /**\n', '   * @dev transfer token for a specified address\n', '   * @param to The address to transfer to.\n', '   * @param value The amount to be transferred.\n', '   */\n', '  function transfer(address to, uint value) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param account The address whose balance is to be queried.\n', '   * @return An uint representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address account) public view returns (uint balance) {\n', '    return balances[account];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address from, address to, uint value) public returns (bool success) {\n', '    uint allowance = allowed[from][msg.sender];\n', '\n', '    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\n', '    // require(value <= allowance);\n', '    // SafeMath uses assert instead of require though, beware when using an analysis tool\n', '\n', '    balances[from] = balances[from].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    allowed[from][msg.sender] = allowance.sub(value);\n', '    Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint value) public returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses&#39;\n', '    //  allowance to zero by calling `approve(spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require (value == 0 || allowed[msg.sender][spender] == 0);\n', '\n', '    allowed[msg.sender][spender] = value;\n', '    Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param account address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address account, address spender) public view returns (uint remaining) {\n', '    return allowed[account][spender];\n', '  }\n', '\n', '  /**\n', '   * Atomic increment of approved spending\n', '   *\n', '   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   */\n', '  function addApproval(address spender, uint addedValue) public returns (bool success) {\n', '      uint oldValue = allowed[msg.sender][spender];\n', '      allowed[msg.sender][spender] = oldValue.add(addedValue);\n', '      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Atomic decrement of approved spending.\n', '   *\n', '   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   */\n', '  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n', '\n', '      uint oldVal = allowed[msg.sender][spender];\n', '\n', '      if (subtractedValue > oldVal) {\n', '          allowed[msg.sender][spender] = 0;\n', '      } else {\n', '          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n', '      }\n', '      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\n', '   */\n', '  function burnTokens(address account, uint value) internal {\n', '    balances[account] = balances[account].sub(value);\n', '    total_supply = total_supply.sub(value);\n', '    Transfer(account, 0, value);\n', '    Burned(account, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Provides an internal minting function.\n', '   */\n', '  function mintInternal(address receiver, uint amount) internal {\n', '    total_supply = total_supply.add(amount);\n', '    balances[receiver] = balances[receiver].add(amount);\n', '    Minted(receiver, amount);\n', '\n', '    // Beware: Address zero may be used for special transactions in a future fork.\n', '    // This will make the mint transaction appear in EtherScan.io\n', '    // We can remove this after there is a standardized minting event\n', '    Transfer(0, receiver, amount);\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * Define interface for releasing the token transfer after a successful crowdsale.\n', ' */\n', 'contract ReleasableToken is StandardToken, Ownable {\n', '\n', '  /* The finalizer contract that allows lifting the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Since the owner of this contract is (or should be) the crowdsale,\n', '   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '    // We don&#39;t do interface check here as we might want to have a normal wallet address to act as a release agent.\n', '    releaseAgent = addr;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '   * One way function to release the tokens into the wild.\n', '   *\n', '   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\n', '   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   */\n', '  modifier canTransfer(address sender) {\n', '    require(released || transferAgents[sender]);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been released */\n', '  modifier inReleaseState(bool releaseState) {\n', '    require(releaseState == released);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    require(msg.sender == releaseAgent);\n', '    _;\n', '  }\n', '\n', '  /** We restrict transfer by overriding it */\n', '  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\n', '    // Call StandardToken.transfer()\n', '   return super.transfer(to, value);\n', '  }\n', '\n', '  /** We restrict transferFrom by overriding it */\n', '  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\n', '    // Call StandardToken.transferForm()\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * First envisioned by Golem and Lunyr projects.\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Inspired by Lunyr.\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' */\n', '\n', '/**\n', ' * Upgrade agent transfers tokens to a new contract.\n', ' * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' *\n', ' * The Upgrade agent is the interface used to implement a token\n', ' * migration in the case of an emergency.\n', ' * The function upgradeFrom has to implement the part of the creation\n', ' * of new tokens on behalf of the user doing the upgrade.\n', ' *\n', ' * The new token can implement this interface directly, or use.\n', ' */\n', 'contract UpgradeAgent {\n', '\n', '  /** This value should be the same as the original token&#39;s total supply */\n', '  uint public originalSupply;\n', '\n', '  /** Interface to ensure the contract is correctly configured */\n', '  function isUpgradeAgent() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  Upgrade an account\n', '\n', '  When the token contract is in the upgrade status the each user will\n', '  have to call `upgrade(value)` function from UpgradeableToken.\n', '\n', '  The upgrade function adjust the balance of the user and the supply\n', '  of the previous token and then call `upgradeFrom(value)`.\n', '\n', '  The UpgradeAgent is the responsible to create the tokens for the user\n', '  in the new contract.\n', '\n', '  * @param from Account to upgrade.\n', '  * @param value Tokens to upgrade.\n', '\n', '  */\n', '  function upgradeFrom(address from, uint value) public;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' */\n', 'contract UpgradeableToken is EIP20Token, Burnable {\n', '  using SafeMath for uint;\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint public totalUpgraded = 0;\n', '\n', '  /**\n', '   * Upgrade states.\n', '   *\n', '   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n', '   * - WaitingForAgent: Token allows upgrade, but we don&#39;t have a new agent yet\n', '   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\n', '   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '   *\n', '   */\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed from, address to, uint value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeableToken(address master) internal {\n', '    setUpgradeMaster(master);\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint value) public {\n', '    UpgradeState state = getUpgradeState();\n', '    // Ensure it&#39;s not called in a bad state\n', '    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n', '\n', '    // Validate input value.\n', '    require(value != 0);\n', '\n', '    // Upgrade agent reissues the tokens\n', '    upgradeAgent.upgradeFrom(msg.sender, value);\n', '    \n', '    // Take tokens out from circulation\n', '    burnTokens(msg.sender, value);\n', '    totalUpgraded = totalUpgraded.add(value);\n', '\n', '    Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles the upgrade process\n', '   */\n', '  function setUpgradeAgent(address agent) onlyMaster external {\n', '    // Check whether the token is in a state that we could think of upgrading\n', '    require(canUpgrade());\n', '\n', '    require(agent != 0x0);\n', '    // Upgrade has already begun for an agent\n', '    require(getUpgradeState() != UpgradeState.Upgrading);\n', '\n', '    upgradeAgent = UpgradeAgent(agent);\n', '\n', '    // Bad interface\n', '    require(upgradeAgent.isUpgradeAgent());\n', '    // Make sure that token supplies match in source and target\n', '    require(upgradeAgent.originalSupply() == totalSupply());\n', '\n', '    UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public view returns(UpgradeState) {\n', '    if (!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function changeUpgradeMaster(address new_master) onlyMaster public {\n', '    setUpgradeMaster(new_master);\n', '  }\n', '\n', '  /**\n', '   * Internal upgrade master setter.\n', '   */\n', '  function setUpgradeMaster(address new_master) private {\n', '    require(new_master != 0x0);\n', '    upgradeMaster = new_master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can override to provide the condition in which the upgrade can begin.\n', '   */\n', '  function canUpgrade() public view returns(bool) {\n', '     return true;\n', '  }\n', '\n', '\n', '  modifier onlyMaster() {\n', '    require(msg.sender == upgradeMaster);\n', '    _;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Authored by https://www.coinfabrik.com/\n', ' */\n', '\n', '\n', '// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\n', '// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\n', '// Of course, this contract imposes support costs upon whoever is the lost and found master.\n', 'contract LostAndFoundToken {\n', '  /**\n', '   * @return Address of the account that handles movements.\n', '   */\n', '  function getLostAndFoundMaster() internal view returns (address);\n', '\n', '  /**\n', '   * @param agent Address that will be able to move tokens with transferFrom\n', '   * @param tokens Amount of tokens approved for transfer\n', '   * @param token_contract Contract of the token\n', '   */\n', '  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n', '    require(msg.sender == getLostAndFoundMaster());\n', '    // We use approve instead of transfer to minimize the possibility of the lost and found master\n', '    //  getting them stuck in another address by accident.\n', '    token_contract.approve(agent, tokens);\n', '  }\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', '\n', '/**\n', ' * A public interface to increase the supply of a token.\n', ' *\n', ' * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n', ' * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\n', ' *\n', ' */\n', 'contract MintableToken is Mintable, Ownable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  /** List of agents that are allowed to create new tokens */\n', '  mapping (address => bool) public mintAgents;\n', '\n', '  event MintingAgentChanged(address addr, bool state);\n', '\n', '\n', '  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\n', '    require(multisig != address(0));\n', '    // Cannot create a token without supply and no minting\n', '    require(mintable || initialSupply != 0);\n', '    // Create initially all balance on the team multisig\n', '    if (initialSupply > 0)\n', '      mintInternal(multisig, initialSupply);\n', '    // No more new supply allowed after the token creation\n', '    mintingFinished = !mintable;\n', '  }\n', '\n', '  /**\n', '   * Create new tokens and allocate them to an address.\n', '   *\n', '   * Only callable by a mint agent (e.g. crowdsale contract).\n', '   */\n', '  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n', '    mintInternal(receiver, amount);\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a crowdsale contract to mint new tokens.\n', '   */\n', '  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '    mintAgents[addr] = state;\n', '    MintingAgentChanged(addr, state);\n', '  }\n', '\n', '  modifier onlyMintAgent() {\n', '    // Only mint agents are allowed to mint new tokens\n', '    require(mintAgents[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /** Make sure we are not done yet. */\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * A crowdsale token.\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token transfer() is disabled until the crowdsale is over\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' * - The same token can be part of several crowdsales through the approve() mechanism\n', ' * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n', ' * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\n', ' *\n', ' */\n', 'contract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\n', '\n', '  string public name = "Cryptosolartech";\n', '\n', '  string public symbol = "CST";\n', '\n', '  uint8 public decimals;\n', '\n', '  address public lost_and_found_master;\n', '\n', '  /**\n', '   * Construct the token.\n', '   *\n', '   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '   *\n', '   * @param initial_supply How many tokens we start with.\n', '   * @param token_decimals Number of decimal places.\n', '   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\n', '   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\n', '   */\n', '  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\n', '  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\n', '    require(token_retriever != address(0));\n', '    decimals = token_decimals;\n', '    lost_and_found_master = token_retriever;\n', '  }\n', '\n', '  /**\n', '   * When token is released to be transferable, prohibit new token creation.\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    mintingFinished = true;\n', '    super.releaseTokenTransfer();\n', '  }\n', '\n', '  /**\n', '   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\n', '   */\n', '  function canUpgrade() public view returns(bool) {\n', '    return released && super.canUpgrade();\n', '  }\n', '\n', '  function burn(uint value) public {\n', '    burnTokens(msg.sender, value);\n', '  }\n', '\n', '  function getLostAndFoundMaster() internal view returns(address) {\n', '    return lost_and_found_master;\n', '  }\n', '}\n', '\n', '/**\n', ' * Abstract base contract for token sales.\n', ' *\n', ' * Handles\n', ' * - start and end dates\n', ' * - accepting investments\n', ' * - various statistics during the crowdfund\n', ' * - different investment policies (require server side customer id, allow only whitelisted addresses)\n', ' *\n', ' */\n', 'contract GenericCrowdsale is Haltable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  /* The token we are selling */\n', '  CrowdsaleToken public token;\n', '\n', '  /* ether will be transferred to this address */\n', '  address public multisigWallet;\n', '\n', '  /* the starting timestamp of the crowdsale */\n', '  uint public startsAt;\n', '\n', '  /* the ending timestamp of the crowdsale */\n', '  uint public endsAt;\n', '\n', '  /* the number of tokens already sold through this contract*/\n', '  uint public tokensSold = 0;\n', '\n', '  /* How many wei of funding we have raised */\n', '  uint public weiRaised = 0;\n', '\n', '  /* How many distinct addresses have invested */\n', '  uint public investorCount = 0;\n', '\n', '  /* Has this crowdsale been finalized */\n', '  bool public finalized = false;\n', '\n', '  /* Do we need to have a unique contributor id for each customer */\n', '  bool public requireCustomerId = false;\n', '\n', '  /* Has this crowdsale been configured */\n', '  bool public configured = false;\n', '\n', '  /**\n', '   * Do we verify that contributor has been cleared on the server side (accredited investors only).\n', '   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\n', '   */\n', '  bool public requiredSignedAddress = false;\n', '\n', '  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\n', '  address public signerAddress;\n', '\n', '  /** How many ETH each address has invested in this crowdsale */\n', '  mapping (address => uint) public investedAmountOf;\n', '\n', '  /** How many tokens this crowdsale has credited for each investor address */\n', '  mapping (address => uint) public tokenAmountOf;\n', '\n', '  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\n', '  mapping (address => bool) public earlyParticipantWhitelist;\n', '\n', '  /** State machine\n', '   *\n', '   * - PendingConfiguration: Crowdsale not yet configured\n', '   * - Prefunding: We have not reached the starting timestamp yet\n', '   * - Funding: Active crowdsale\n', '   * - Success: Crowdsale ended\n', '   * - Finalized: The finalize function has been called and successfully executed\n', '   */\n', '  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\n', '\n', '\n', '  // A new investment was made\n', '  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\n', '\n', '  // The rules about what kind of investments we accept were changed\n', '  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\n', '\n', '  // Address early participation whitelist status changed\n', '  event Whitelisted(address addr, bool status);\n', '\n', '  // Crowdsale&#39;s finalize function has been called\n', '  event Finalized();\n', '\n', '  /*\n', '   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\n', '   *\n', '   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\n', '   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\n', '   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\n', '   *\n', '   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\n', '   */\n', '  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\n', '    setMultisig(team_multisig);\n', '\n', '    // Don&#39;t mess the dates\n', '    require(start != 0 && end != 0);\n', '    require(now < start && start < end);\n', '    startsAt = start;\n', '    endsAt = end;\n', '    configured = true;\n', '  }\n', '\n', '  /**\n', '   * Default fallback behaviour is to call buy.\n', '   * Ideally, no contract calls this crowdsale without supporting ERC20.\n', '   * However, some sort of refunding function may be desired to cover such situations.\n', '   */\n', '  function() payable public {\n', '    buy();\n', '  }\n', '\n', '  /**\n', '   * Make an investment.\n', '   *\n', '   * The crowdsale must be running for one to invest.\n', '   * We must have not pressed the emergency brake.\n', '   *\n', '   * @param receiver The Ethereum address who receives the tokens\n', '   * @param customerId (optional) UUID v4 to track the successful payments on the server side\n', '   *\n', '   */\n', '  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\n', '    // Determine if it&#39;s a good time to accept investment from this participant\n', '    if (getState() == State.PreFunding) {\n', '      // Are we whitelisted for early deposit\n', '      require(earlyParticipantWhitelist[msg.sender]);\n', '    }\n', '\n', '    uint weiAmount;\n', '    uint tokenAmount;\n', '    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\n', '    // Sanity check against bad implementation.\n', '    assert(weiAmount <= msg.value);\n', '    \n', '    // Dust transaction if no tokens can be given\n', '    require(tokenAmount != 0);\n', '\n', '    if (investedAmountOf[receiver] == 0) {\n', '      // A new investor\n', '      investorCount++;\n', '    }\n', '    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\n', '\n', '    // Pocket the money\n', '    multisigWallet.transfer(weiAmount);\n', '\n', '    // Return excess of money\n', '    returnExcedent(msg.value.sub(weiAmount), msg.sender);\n', '  }\n', '\n', '  /**\n', '   * Preallocate tokens for the early investors.\n', '   *\n', '   * Preallocated tokens have been sold before the actual crowdsale opens.\n', '   * This function mints the tokens and moves the crowdsale needle.\n', '   *\n', '   * No money is exchanged, as the crowdsale team already have received the payment.\n', '   *\n', '   * @param receiver Account that receives the tokens.\n', '   * @param fullTokens tokens as full tokens - decimal places are added internally.\n', '   * @param weiPrice Price of a single indivisible token in wei.\n', '   *\n', '   */\n', '  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\n', '    require(receiver != address(0));\n', '    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\n', '    require(tokenAmount != 0);\n', '    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\n', '    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\n', '  }\n', '\n', '  /**\n', '   * Private function to update accounting in the crowdsale.\n', '   */\n', '  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\n', '    // Update investor\n', '    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\n', '    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\n', '\n', '    // Update totals\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokensSold = tokensSold.add(tokenAmount);\n', '\n', '    assignTokens(receiver, tokenAmount);\n', '    // Tell us that the investment was completed successfully\n', '    Invested(receiver, weiAmount, tokenAmount, customerId);\n', '  }\n', '\n', '  /**\n', '   * Investing function that recognizes the receiver and verifies he is allowed to invest.\n', '   *\n', '   * @param customerId UUIDv4 that identifies this contributor\n', '   */\n', '  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\n', '    bytes32 hash = sha256(receiver);\n', '    require(ecrecover(hash, v, r, s) == signerAddress);\n', '    investInternal(receiver, customerId);\n', '  }\n', '\n', '  /**\n', '   * Investing function that recognizes the receiver.\n', '   * \n', '   * @param customerId UUIDv4 that identifies this contributor\n', '   */\n', '  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\n', '    investInternal(receiver, customerId);\n', '  }\n', '\n', '  /**\n', '   * Buys tokens on behalf of an address.\n', '   *\n', '   * Pay for funding, get invested tokens back in the receiver address.\n', '   */\n', '  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\n', '    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\n', '    investInternal(receiver, 0);\n', '  }\n', '\n', '  /**\n', '   * Investing function that recognizes the payer and verifies he is allowed to invest.\n', '   *\n', '   * @param customerId UUIDv4 that identifies this contributor\n', '   */\n', '  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n', '    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\n', '  }\n', '\n', '\n', '  /**\n', '   * Investing function that recognizes the payer.\n', '   * \n', '   * @param customerId UUIDv4 that identifies this contributor\n', '   */\n', '  function buyWithCustomerId(uint128 customerId) public payable {\n', '    buyOnBehalfWithCustomerId(msg.sender, customerId);\n', '  }\n', '\n', '  /**\n', '   * The basic entry point to participate in the crowdsale process.\n', '   *\n', '   * Pay for funding, get invested tokens back in the sender address.\n', '   */\n', '  function buy() public payable {\n', '    buyOnBehalf(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * Finalize a successful crowdsale.\n', '   *\n', '   * The owner can trigger post-crowdsale actions, like releasing the tokens.\n', '   * Note that by default tokens are not in a released state.\n', '   */\n', '  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '    finalized = true;\n', '    Finalized();\n', '  }\n', '\n', '  /**\n', '   * Set policy do we need to have server-side customer ids for the investments.\n', '   *\n', '   */\n', '  function setRequireCustomerId(bool value) public onlyOwner {\n', '    requireCustomerId = value;\n', '    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n', '  }\n', '\n', '  /**\n', '   * Set policy if all investors must be cleared on the server side first.\n', '   *\n', '   * This is e.g. for the accredited investor clearing.\n', '   *\n', '   */\n', '  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\n', '    requiredSignedAddress = value;\n', '    signerAddress = signer;\n', '    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n', '  }\n', '\n', '  /**\n', '   * Allow addresses to do early participation.\n', '   */\n', '  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\n', '    earlyParticipantWhitelist[addr] = status;\n', '    Whitelisted(addr, status);\n', '  }\n', '\n', '  /**\n', '   * Internal setter for the multisig wallet\n', '   */\n', '  function setMultisig(address addr) internal {\n', '    require(addr != 0);\n', '    multisigWallet = addr;\n', '  }\n', '\n', '  /**\n', '   * Crowdfund state machine management.\n', '   *\n', '   * This function has the timed transition builtin.\n', '   * So there is no chance of the variable being stale.\n', '   */\n', '  function getState() public view returns (State) {\n', '    if (finalized) return State.Finalized;\n', '    else if (!configured) return State.PendingConfiguration;\n', '    else if (now < startsAt) return State.PreFunding;\n', '    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\n', '    else return State.Success;\n', '  }\n', '\n', '  /** Internal functions that exist to provide inversion of control should they be overriden */\n', '\n', '  /** Interface for the concrete instance to interact with the token contract in a customizable way */\n', '  function assignTokens(address receiver, uint tokenAmount) internal;\n', '\n', '  /**\n', '   *  Determine if the goal was already reached in the current crowdsale\n', '   */\n', '  function isCrowdsaleFull() internal view returns (bool full);\n', '\n', '  /**\n', '   * Returns any excess wei received\n', '   * \n', '   * This function can be overriden to provide a different refunding method.\n', '   */\n', '  function returnExcedent(uint excedent, address receiver) internal {\n', '    if (excedent > 0) {\n', '      receiver.transfer(excedent);\n', '    }\n', '  }\n', '\n', '  /** \n', '   *  Calculate the amount of tokens that corresponds to the received amount.\n', '   *  The wei amount is returned too in case not all of it can be invested.\n', '   *\n', '   *  Note: When there&#39;s an excedent due to rounding error, it should be returned to allow refunding.\n', '   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\n', '   *  The workaround is good enough for most use cases, hence the simplified function signature.\n', '   *  @return weiAllowed The amount of wei accepted in this transaction.\n', '   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\n', '   */\n', '  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\n', '\n', '  //\n', '  // Modifiers\n', '  //\n', '\n', '  modifier inState(State state) {\n', '    require(getState() == state);\n', '    _;\n', '  }\n', '\n', '  modifier unsignedBuyAllowed() {\n', '    require(!requiredSignedAddress);\n', '    _;\n', '  }\n', '\n', '  /** Modifier allowing execution only if the crowdsale is currently running.  */\n', '  modifier notFinished() {\n', '    State current_state = getState();\n', '    require(current_state == State.PreFunding || current_state == State.Funding);\n', '    _;\n', '  }\n', '\n', '  modifier validCustomerId(uint128 customerId) {\n', '    require(customerId != 0);  // UUIDv4 sanity check\n', '    _;\n', '  }\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '// Simple deployment information store inside contract storage.\n', 'contract DeploymentInfo {\n', '  uint private deployed_on;\n', '\n', '  function DeploymentInfo() public {\n', '    deployed_on = block.number;\n', '  }\n', '\n', '\n', '  function getDeploymentBlock() public view returns (uint) {\n', '    return deployed_on;\n', '  }\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' *\n', ' * Heavily modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '\n', '/// @dev Tranche based pricing.\n', '///      Implementing "first price" tranches, meaning, that if a buyer&#39;s order is\n', '///      covering more than one tranche, the price of the lowest tranche will apply\n', '///      to the whole order.\n', 'contract TokenTranchePricing {\n', '\n', '  using SafeMath for uint;\n', '\n', '  /**\n', '   * Define pricing schedule using tranches.\n', '   */\n', '  struct Tranche {\n', '      // Amount in tokens when this tranche becomes inactive\n', '      uint amount;\n', '      // Timestamp interval [start, end)\n', '      // Starting timestamp (included in the interval)\n', '      uint start;\n', '      // Ending timestamp (excluded from the interval)\n', '      uint end;\n', '      // How many tokens per wei you will get while this tranche is active\n', '      uint price;\n', '  }\n', '  // We define offsets and size for the deserialization of ordered tuples in raw arrays\n', '  uint private constant amount_offset = 0;\n', '  uint private constant start_offset = 1;\n', '  uint private constant end_offset = 2;\n', '  uint private constant price_offset = 3;\n', '  uint private constant tranche_size = 4;\n', '\n', '  Tranche[] public tranches;\n', '\n', '  function getTranchesLength() public view returns (uint) {\n', '    return tranches.length;\n', '  }\n', '  \n', '  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\n', '  //\n', '  /// @dev Construction, creating a list of tranches\n', '  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\n', '  //\n', '  function configurationTokenTranchePricing(uint[] init_tranches) internal {\n', '    // Need to have tuples, length check\n', '    require(init_tranches.length % tranche_size == 0);\n', '    // A tranche with amount zero can never be selected and is therefore useless.\n', '    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\n', '    require(init_tranches[amount_offset] > 0);\n', '\n', '    uint input_tranches_length = init_tranches.length.div(tranche_size);\n', '    Tranche memory last_tranche;\n', '    for (uint i = 0; i < input_tranches_length; i++) {\n', '      uint tranche_offset = i.mul(tranche_size);\n', '      uint amount = init_tranches[tranche_offset.add(amount_offset)];\n', '      uint start = init_tranches[tranche_offset.add(start_offset)];\n', '      uint end = init_tranches[tranche_offset.add(end_offset)];\n', '      uint price = init_tranches[tranche_offset.add(price_offset)];\n', '      // No invalid steps\n', '      require(start < end && now < end);\n', '      // Bail out when entering unnecessary tranches\n', '      // This is preferably checked before deploying contract into any blockchain.\n', '      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\n', '              (end > last_tranche.end && amount >= last_tranche.amount));\n', '\n', '      last_tranche = Tranche(amount, start, end, price);\n', '      tranches.push(last_tranche);\n', '    }\n', '  }\n', '\n', '  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\n', '  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\n', '  /// @return Returns the struct representing the current tranche\n', '  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\n', '    for (uint i = 0; i < tranches.length; i++) {\n', '      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\n', '        return tranches[i];\n', '      }\n', '    }\n', '    // No tranche is currently active\n', '    revert();\n', '  }\n', '\n', '  /// @dev Get the current price. May revert if there is no tranche currently active.\n', '  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\n', '  /// @return The current price\n', '  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\n', '    return getCurrentTranche(tokensSold).price;\n', '  }\n', '\n', '}\n', '\n', '// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\n', 'contract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\n', '  uint public sellable_tokens;\n', '  uint public initial_tokens;\n', '  uint public milieurs_per_eth;\n', '  // Minimum amounts of tokens that must be bought by an investor\n', '  uint public minimum_buy_value;\n', '  address public price_agent; \n', '\n', '  /*\n', '   * The constructor for the crowdsale was removed given it didn&#39;t receive any arguments nor had any body.\n', '   *\n', '   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\n', '   * \n', '   *\n', '   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\n', '   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\n', '   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\n', '   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\n', '   */\n', '\n', '  function configurationCrowdsale(address team_multisig, uint start, uint end,\n', '  address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply,\n', '  uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\n', '\n', '    initial_tokens = multisig_supply;\n', '    minimum_buy_value = uint(100).mul(10 ** uint(token_decimals));\n', '    token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\n', '    // Necessary if assignTokens mints\n', '    token.setMintAgent(address(this), true);\n', '    // Necessary if finalize is overriden to release the tokens for public trading.\n', '    token.setReleaseAgent(address(this));\n', '    // Necessary for the execution of buy function and of the subsequent CrowdsaleToken&#39;s transfer function. \n', '    token.setTransferAgent(address(this), true);\n', '    // Crowdsale mints to himself the initial supply\n', '    token.mint(address(this), crowdsale_supply);\n', '\n', '    sellable_tokens = max_tokens_to_sell;\n', '\n', '    // Configuration functionality for GenericCrowdsale.\n', '    configurationGenericCrowdsale(team_multisig, start, end);\n', '\n', '    // Configuration functionality for TokenTranchePricing.\n', '    configurationTokenTranchePricing(init_tranches);\n', '  }\n', '\n', '  //token assignation\n', '  function assignTokens(address receiver, uint tokenAmount) internal {\n', '    token.transfer(receiver, tokenAmount);\n', '  }\n', '\n', '  //token amount calculation\n', '  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\n', '    //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\n', '    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\n', '    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\n', '    weiAllowed = maxWeiAllowed.min256(weiAmount);\n', '\n', '    if (weiAmount < maxWeiAllowed) {\n', '      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\n', '    }\n', '    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\n', '    else {\n', '      tokenAmount = sellable_tokens.sub(tokensSold);\n', '    }\n', '\n', '    // Require a minimum contribution of 100 fulltokens\n', '    require(token.balanceOf(receiver).add(tokenAmount) >= minimum_buy_value);\n', '  }\n', '\n', '  // Implements funding state criterion\n', '  function isCrowdsaleFull() internal view returns (bool full) {\n', '    return tokensSold >= sellable_tokens;\n', '  }\n', '\n', '  /**\n', '   * Finalize a successful crowdsale.\n', '   *\n', '   * The owner can trigger post-crowdsale actions, like releasing the tokens.\n', '   * Note that by default tokens are not in a released state.\n', '   */\n', '  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '    //Tokens sold + bounties represent 82% of the total, the other 18% goes to the multisig, partners and market making\n', '    uint sold = tokensSold.add(initial_tokens);\n', '    uint toShare = sold.mul(18).div(82);\n', '\n', '    // Mint the 18% to the multisig\n', '    token.setMintAgent(address(this), true);\n', '    token.mint(multisigWallet, toShare);\n', '    token.setMintAgent(address(this), false);\n', '\n', '    // Release transfers and burn unsold tokens.\n', '    token.releaseTokenTransfer();\n', '    token.burn(token.balanceOf(address(this)));\n', '\n', '    super.finalize();\n', '  }\n', '\n', '  /**\n', '   * This function decides who handles lost tokens.\n', '   * Do note that this function is NOT meant to be used in a token refund mecahnism.\n', '   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\n', '   */\n', '  function getLostAndFoundMaster() internal view returns (address) {\n', '    return owner;\n', '  }\n', '\n', '  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\n', '  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\n', '    require(now < startingTime && startingTime < endsAt);\n', '    startsAt = startingTime;\n', '  }\n', '\n', '  function setEndingTime(uint endingTime) public onlyOwner notFinished {\n', '    require(now < endingTime && startsAt < endingTime);\n', '    endsAt = endingTime;\n', '  }\n', '\n', '  function updateEursPerEth (uint milieurs_amount) public notFinished {\n', '    require(milieurs_amount >= 100);\n', '    require(msg.sender == price_agent);\n', '    milieurs_per_eth = milieurs_amount;\n', '  }\n', '\n', '  function updatePriceAgent(address new_price_agent) public onlyOwner notFinished {\n', '    price_agent = new_price_agent;\n', '  }\n', '\n', '  /**\n', '   * @param new_minimum New minimum amount of indivisible tokens to be required\n', '   */\n', '  function setMinimumBuyValue(uint new_minimum) public onlyOwner notFinished {\n', '    minimum_buy_value = new_minimum;\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Authored by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Envisioned in FirstBlood ICO contract.\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() internal {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '\n', '  event Halted(bool halted);\n', '\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '    Halted(true);\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '    Halted(false);\n', '  }\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal pure returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal pure returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal pure returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint a, uint b) internal pure returns (uint) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint a, uint b) internal pure returns (uint) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Interface for the standard token.\n', ' * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', ' */\n', 'contract EIP20Token {\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool success);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '  function approve(address spender, uint256 value) public returns (bool success);\n', '  function allowance(address owner, address spender) public view returns (uint256 remaining);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '  /**\n', '  ** Optional functions\n', '  *\n', '  function name() public view returns (string name);\n', '  function symbol() public view returns (string symbol);\n', '  function decimals() public view returns (uint8 decimals);\n', '  *\n', '  **/\n', '\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '// Interface for burning tokens\n', 'contract Burnable {\n', '  // @dev Destroys tokens for an account\n', '  // @param account Account whose tokens are destroyed\n', '  // @param value Amount of tokens to destroy\n', '  function burnTokens(address account, uint value) internal;\n', '  event Burned(address account, uint value);\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Authored by https://www.coinfabrik.com/\n', ' */\n', '\n', '\n', '/**\n', ' * Internal interface for the minting of tokens.\n', ' */\n', 'contract Mintable {\n', '\n', '  /**\n', '   * @dev Mints tokens for an account\n', '   * This function should the Minted event.\n', '   */\n', '  function mintInternal(address receiver, uint amount) internal;\n', '\n', '  /** Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint amount);\n', '}\n', '\n', '/**\n', ' * @title Standard token\n', ' * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\n', ' */\n', 'contract StandardToken is EIP20Token, Burnable, Mintable {\n', '  using SafeMath for uint;\n', '\n', '  uint private total_supply;\n', '  mapping(address => uint) private balances;\n', '  mapping(address => mapping (address => uint)) private allowed;\n', '\n', '\n', '  function totalSupply() public view returns (uint) {\n', '    return total_supply;\n', '  }\n', '\n', '  /**\n', '   * @dev transfer token for a specified address\n', '   * @param to The address to transfer to.\n', '   * @param value The amount to be transferred.\n', '   */\n', '  function transfer(address to, uint value) public returns (bool success) {\n', '    balances[msg.sender] = balances[msg.sender].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    Transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address.\n', '   * @param account The address whose balance is to be queried.\n', '   * @return An uint representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address account) public view returns (uint balance) {\n', '    return balances[account];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address from, address to, uint value) public returns (bool success) {\n', '    uint allowance = allowed[from][msg.sender];\n', '\n', '    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\n', '    // require(value <= allowance);\n', '    // SafeMath uses assert instead of require though, beware when using an analysis tool\n', '\n', '    balances[from] = balances[from].sub(value);\n', '    balances[to] = balances[to].add(value);\n', '    allowed[from][msg.sender] = allowance.sub(value);\n', '    Transfer(from, to, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint value) public returns (bool success) {\n', '\n', "    // To change the approve amount you first have to reduce the addresses'\n", '    //  allowance to zero by calling `approve(spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require (value == 0 || allowed[msg.sender][spender] == 0);\n', '\n', '    allowed[msg.sender][spender] = value;\n', '    Approval(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n', '   * @param account address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address account, address spender) public view returns (uint remaining) {\n', '    return allowed[account][spender];\n', '  }\n', '\n', '  /**\n', '   * Atomic increment of approved spending\n', '   *\n', '   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   */\n', '  function addApproval(address spender, uint addedValue) public returns (bool success) {\n', '      uint oldValue = allowed[msg.sender][spender];\n', '      allowed[msg.sender][spender] = oldValue.add(addedValue);\n', '      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * Atomic decrement of approved spending.\n', '   *\n', '   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   */\n', '  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n', '\n', '      uint oldVal = allowed[msg.sender][spender];\n', '\n', '      if (subtractedValue > oldVal) {\n', '          allowed[msg.sender][spender] = 0;\n', '      } else {\n', '          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n', '      }\n', '      Approval(msg.sender, spender, allowed[msg.sender][spender]);\n', '      return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\n', '   */\n', '  function burnTokens(address account, uint value) internal {\n', '    balances[account] = balances[account].sub(value);\n', '    total_supply = total_supply.sub(value);\n', '    Transfer(account, 0, value);\n', '    Burned(account, value);\n', '  }\n', '\n', '  /**\n', '   * @dev Provides an internal minting function.\n', '   */\n', '  function mintInternal(address receiver, uint amount) internal {\n', '    total_supply = total_supply.add(amount);\n', '    balances[receiver] = balances[receiver].add(amount);\n', '    Minted(receiver, amount);\n', '\n', '    // Beware: Address zero may be used for special transactions in a future fork.\n', '    // This will make the mint transaction appear in EtherScan.io\n', '    // We can remove this after there is a standardized minting event\n', '    Transfer(0, receiver, amount);\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * Define interface for releasing the token transfer after a successful crowdsale.\n', ' */\n', 'contract ReleasableToken is StandardToken, Ownable {\n', '\n', '  /* The finalizer contract that allows lifting the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Since the owner of this contract is (or should be) the crowdsale,\n', '   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', "    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\n", '    releaseAgent = addr;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '   * One way function to release the tokens into the wild.\n', '   *\n', '   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\n', '   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   */\n', '  modifier canTransfer(address sender) {\n', '    require(released || transferAgents[sender]);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been released */\n', '  modifier inReleaseState(bool releaseState) {\n', '    require(releaseState == released);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    require(msg.sender == releaseAgent);\n', '    _;\n', '  }\n', '\n', '  /** We restrict transfer by overriding it */\n', '  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\n', '    // Call StandardToken.transfer()\n', '   return super.transfer(to, value);\n', '  }\n', '\n', '  /** We restrict transferFrom by overriding it */\n', '  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\n', '    // Call StandardToken.transferForm()\n', '    return super.transferFrom(from, to, value);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * First envisioned by Golem and Lunyr projects.\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Inspired by Lunyr.\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' */\n', '\n', '/**\n', ' * Upgrade agent transfers tokens to a new contract.\n', ' * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' *\n', ' * The Upgrade agent is the interface used to implement a token\n', ' * migration in the case of an emergency.\n', ' * The function upgradeFrom has to implement the part of the creation\n', ' * of new tokens on behalf of the user doing the upgrade.\n', ' *\n', ' * The new token can implement this interface directly, or use.\n', ' */\n', 'contract UpgradeAgent {\n', '\n', "  /** This value should be the same as the original token's total supply */\n", '  uint public originalSupply;\n', '\n', '  /** Interface to ensure the contract is correctly configured */\n', '  function isUpgradeAgent() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  Upgrade an account\n', '\n', '  When the token contract is in the upgrade status the each user will\n', '  have to call `upgrade(value)` function from UpgradeableToken.\n', '\n', '  The upgrade function adjust the balance of the user and the supply\n', '  of the previous token and then call `upgradeFrom(value)`.\n', '\n', '  The UpgradeAgent is the responsible to create the tokens for the user\n', '  in the new contract.\n', '\n', '  * @param from Account to upgrade.\n', '  * @param value Tokens to upgrade.\n', '\n', '  */\n', '  function upgradeFrom(address from, uint value) public;\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' */\n', 'contract UpgradeableToken is EIP20Token, Burnable {\n', '  using SafeMath for uint;\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint public totalUpgraded = 0;\n', '\n', '  /**\n', '   * Upgrade states.\n', '   *\n', '   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n', "   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n", '   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\n', '   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '   *\n', '   */\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed from, address to, uint value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeableToken(address master) internal {\n', '    setUpgradeMaster(master);\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint value) public {\n', '    UpgradeState state = getUpgradeState();\n', "    // Ensure it's not called in a bad state\n", '    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n', '\n', '    // Validate input value.\n', '    require(value != 0);\n', '\n', '    // Upgrade agent reissues the tokens\n', '    upgradeAgent.upgradeFrom(msg.sender, value);\n', '    \n', '    // Take tokens out from circulation\n', '    burnTokens(msg.sender, value);\n', '    totalUpgraded = totalUpgraded.add(value);\n', '\n', '    Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles the upgrade process\n', '   */\n', '  function setUpgradeAgent(address agent) onlyMaster external {\n', '    // Check whether the token is in a state that we could think of upgrading\n', '    require(canUpgrade());\n', '\n', '    require(agent != 0x0);\n', '    // Upgrade has already begun for an agent\n', '    require(getUpgradeState() != UpgradeState.Upgrading);\n', '\n', '    upgradeAgent = UpgradeAgent(agent);\n', '\n', '    // Bad interface\n', '    require(upgradeAgent.isUpgradeAgent());\n', '    // Make sure that token supplies match in source and target\n', '    require(upgradeAgent.originalSupply() == totalSupply());\n', '\n', '    UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public view returns(UpgradeState) {\n', '    if (!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function changeUpgradeMaster(address new_master) onlyMaster public {\n', '    setUpgradeMaster(new_master);\n', '  }\n', '\n', '  /**\n', '   * Internal upgrade master setter.\n', '   */\n', '  function setUpgradeMaster(address new_master) private {\n', '    require(new_master != 0x0);\n', '    upgradeMaster = new_master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can override to provide the condition in which the upgrade can begin.\n', '   */\n', '  function canUpgrade() public view returns(bool) {\n', '     return true;\n', '  }\n', '\n', '\n', '  modifier onlyMaster() {\n', '    require(msg.sender == upgradeMaster);\n', '    _;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Authored by https://www.coinfabrik.com/\n', ' */\n', '\n', '\n', '// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\n', '// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\n', '// Of course, this contract imposes support costs upon whoever is the lost and found master.\n', 'contract LostAndFoundToken {\n', '  /**\n', '   * @return Address of the account that handles movements.\n', '   */\n', '  function getLostAndFoundMaster() internal view returns (address);\n', '\n', '  /**\n', '   * @param agent Address that will be able to move tokens with transferFrom\n', '   * @param tokens Amount of tokens approved for transfer\n', '   * @param token_contract Contract of the token\n', '   */\n', '  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n', '    require(msg.sender == getLostAndFoundMaster());\n', '    // We use approve instead of transfer to minimize the possibility of the lost and found master\n', '    //  getting them stuck in another address by accident.\n', '    token_contract.approve(agent, tokens);\n', '  }\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Originally from https://github.com/TokenMarketNet/ico\n', ' * Modified by https://www.coinfabrik.com/\n', ' */\n', '\n', '\n', '/**\n', ' * A public interface to increase the supply of a token.\n', ' *\n', ' * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n', ' * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\n', ' *\n', ' */\n', 'contract MintableToken is Mintable, Ownable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  /** List of agents that are allowed to create new tokens */\n', '  mapping (address => bool) public mintAgents;\n', '\n', '  event MintingAgentChanged(address addr, bool state);\n', '\n', '\n', '  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\n', '    require(multisig != address(0));\n', '    // Cannot create a token without supply and no minting\n', '    require(mintable || initialSupply != 0);\n', '    // Create initially all balance on the team multisig\n', '    if (initialSupply > 0)\n', '      mintInternal(multisig, initialSupply);\n', '    // No more new supply allowed after the token creation\n', '    mintingFinished = !mintable;\n', '  }\n', '\n', '  /**\n', '   * Create new tokens and allocate them to an address.\n', '   *\n', '   * Only callable by a mint agent (e.g. crowdsale contract).\n', '   */\n', '  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n', '    mintInternal(receiver, amount);\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a crowdsale contract to mint new tokens.\n', '   */\n', '  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '    mintAgents[addr] = state;\n', '    MintingAgentChanged(addr, state);\n', '  }\n', '\n', '  modifier onlyMintAgent() {\n', '    // Only mint agents are allowed to mint new tokens\n', '    require(mintAgents[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /** Make sure we are not done yet. */\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * A crowdsale token.\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token transfer() is disabled until the crowdsale is over\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' * - The same token can be part of several crowdsales through the approve() mechanism\n', ' * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n', ' * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\n', ' *\n', ' */\n', 'contract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\n', '\n', '  string public name = "Cryptosolartech";\n', '\n', '  string public symbol = "CST";\n', '\n', '  uint8 public decimals;\n', '\n', '  address public lost_and_found_master;\n', '\n', '  /**\n', '   * Construct the token.\n', '   *\n', '   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '   *\n', '   * @param initial_supply How many tokens we start with.\n', '   * @param token_decimals Number of decimal places.\n', '   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\n', '   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\n', '   */\n', '  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\n', '  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\n', '    require(token_retriever != address(0));\n', '    decimals = token_decimals;\n', '    lost_and_found_master = token_retriever;\n', '  }\n', '\n', '  /**\n', '   * When token is released to be transferable, prohibit new token creation.\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    mintingFinished = true;\n', '    super.releaseTokenTransfer();\n', '  }\n', '\n', '  /**\n', '   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\n', '   */\n', '  function canUpgrade() public view returns(bool) {\n', '    return released && super.canUpgrade();\n', '  }\n', '\n', '  function burn(uint value) public {\n', '    burnTokens(msg.sender, value);\n', '  }\n', '\n', '  function getLostAndFoundMaster() internal view returns(address) {\n', '    return lost_and_found_master;\n', '  }\n', '}\n', '\n', '/**\n', ' * Abstract base contract for token sales.\n', ' *\n', ' * Handles\n', ' * - start and end dates\n', ' * - accepting investments\n', ' * - various statistics during the crowdfund\n', ' * - different investment policies (require server side customer id, allow only whitelisted addresses)\n', ' *\n', ' */\n', 'contract GenericCrowdsale is Haltable {\n', '\n', '  using SafeMath for uint;\n', '\n', '  /* The token we are selling */\n', '  CrowdsaleToken public token;\n', '\n', '  /* ether will be transferred to this address */\n', '  address public multisigWallet;\n', '\n', '  /* the starting timestamp of the crowdsale */\n', '  uint public startsAt;\n', '\n', '  /* the ending timestamp of the crowdsale */\n', '  uint public endsAt;\n', '\n', '  /* the number of tokens already sold through this contract*/\n', '  uint public tokensSold = 0;\n', '\n', '  /* How many wei of funding we have raised */\n', '  uint public weiRaised = 0;\n', '\n', '  /* How many distinct addresses have invested */\n', '  uint public investorCount = 0;\n', '\n', '  /* Has this crowdsale been finalized */\n', '  bool public finalized = false;\n', '\n', '  /* Do we need to have a unique contributor id for each customer */\n', '  bool public requireCustomerId = false;\n', '\n', '  /* Has this crowdsale been configured */\n', '  bool public configured = false;\n', '\n', '  /**\n', '   * Do we verify that contributor has been cleared on the server side (accredited investors only).\n', '   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\n', '   */\n', '  bool public requiredSignedAddress = false;\n', '\n', '  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\n', '  address public signerAddress;\n', '\n', '  /** How many ETH each address has invested in this crowdsale */\n', '  mapping (address => uint) public investedAmountOf;\n', '\n', '  /** How many tokens this crowdsale has credited for each investor address */\n', '  mapping (address => uint) public tokenAmountOf;\n', '\n', '  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\n', '  mapping (address => bool) public earlyParticipantWhitelist;\n', '\n', '  /** State machine\n', '   *\n', '   * - PendingConfiguration: Crowdsale not yet configured\n', '   * - Prefunding: We have not reached the starting timestamp yet\n', '   * - Funding: Active crowdsale\n', '   * - Success: Crowdsale ended\n', '   * - Finalized: The finalize function has been called and successfully executed\n', '   */\n', '  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\n', '\n', '\n', '  // A new investment was made\n', '  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\n', '\n', '  // The rules about what kind of investments we accept were changed\n', '  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\n', '\n', '  // Address early participation whitelist status changed\n', '  event Whitelisted(address addr, bool status);\n', '\n', "  // Crowdsale's finalize function has been called\n", '  event Finalized();\n', '\n', '  /*\n', '   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\n', '   *\n', '   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\n', '   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\n', '   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\n', '   *\n', '   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\n', '   */\n', '  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\n', '    setMultisig(team_multisig);\n', '\n', "    // Don't mess the dates\n", '    require(start != 0 && end != 0);\n', '    require(now < start && start < end);\n', '    startsAt = start;\n', '    endsAt = end;\n', '    configured = true;\n', '  }\n', '\n', '  /**\n', '   * Default fallback behaviour is to call buy.\n', '   * Ideally, no contract calls this crowdsale without supporting ERC20.\n', '   * However, some sort of refunding function may be desired to cover such situations.\n', '   */\n', '  function() payable public {\n', '    buy();\n', '  }\n', '\n', '  /**\n', '   * Make an investment.\n', '   *\n', '   * The crowdsale must be running for one to invest.\n', '   * We must have not pressed the emergency brake.\n', '   *\n', '   * @param receiver The Ethereum address who receives the tokens\n', '   * @param customerId (optional) UUID v4 to track the successful payments on the server side\n', '   *\n', '   */\n', '  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\n', "    // Determine if it's a good time to accept investment from this participant\n", '    if (getState() == State.PreFunding) {\n', '      // Are we whitelisted for early deposit\n', '      require(earlyParticipantWhitelist[msg.sender]);\n', '    }\n', '\n', '    uint weiAmount;\n', '    uint tokenAmount;\n', '    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\n', '    // Sanity check against bad implementation.\n', '    assert(weiAmount <= msg.value);\n', '    \n', '    // Dust transaction if no tokens can be given\n', '    require(tokenAmount != 0);\n', '\n', '    if (investedAmountOf[receiver] == 0) {\n', '      // A new investor\n', '      investorCount++;\n', '    }\n', '    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\n', '\n', '    // Pocket the money\n', '    multisigWallet.transfer(weiAmount);\n', '\n', '    // Return excess of money\n', '    returnExcedent(msg.value.sub(weiAmount), msg.sender);\n', '  }\n', '\n', '  /**\n', '   * Preallocate tokens for the early investors.\n', '   *\n', '   * Preallocated tokens have been sold before the actual crowdsale opens.\n', '   * This function mints the tokens and moves the crowdsale needle.\n', '   *\n', '   * No money is exchanged, as the crowdsale team already have received the payment.\n', '   *\n', '   * @param receiver Account that receives the tokens.\n', '   * @param fullTokens tokens as full tokens - decimal places are added internally.\n', '   * @param weiPrice Price of a single indivisible token in wei.\n', '   *\n', '   */\n', '  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\n', '    require(receiver != address(0));\n', '    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\n', '    require(tokenAmount != 0);\n', '    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\n', '    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\n', '  }\n', '\n', '  /**\n', '   * Private function to update accounting in the crowdsale.\n', '   */\n', '  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\n', '    // Update investor\n', '    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\n', '    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\n', '\n', '    // Update totals\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokensSold = tokensSold.add(tokenAmount);\n', '\n', '    assignTokens(receiver, tokenAmount);\n', '    // Tell us that the investment was completed successfully\n', '    Invested(receiver, weiAmount, tokenAmount, customerId);\n', '  }\n', '\n', '  /**\n', '   * Investing function that recognizes the receiver and verifies he is allowed to invest.\n', '   *\n', '   * @param customerId UUIDv4 that identifies this contributor\n', '   */\n', '  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\n', '    bytes32 hash = sha256(receiver);\n', '    require(ecrecover(hash, v, r, s) == signerAddress);\n', '    investInternal(receiver, customerId);\n', '  }\n', '\n', '  /**\n', '   * Investing function that recognizes the receiver.\n', '   * \n', '   * @param customerId UUIDv4 that identifies this contributor\n', '   */\n', '  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\n', '    investInternal(receiver, customerId);\n', '  }\n', '\n', '  /**\n', '   * Buys tokens on behalf of an address.\n', '   *\n', '   * Pay for funding, get invested tokens back in the receiver address.\n', '   */\n', '  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\n', '    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\n', '    investInternal(receiver, 0);\n', '  }\n', '\n', '  /**\n', '   * Investing function that recognizes the payer and verifies he is allowed to invest.\n', '   *\n', '   * @param customerId UUIDv4 that identifies this contributor\n', '   */\n', '  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n', '    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\n', '  }\n', '\n', '\n', '  /**\n', '   * Investing function that recognizes the payer.\n', '   * \n', '   * @param customerId UUIDv4 that identifies this contributor\n', '   */\n', '  function buyWithCustomerId(uint128 customerId) public payable {\n', '    buyOnBehalfWithCustomerId(msg.sender, customerId);\n', '  }\n', '\n', '  /**\n', '   * The basic entry point to participate in the crowdsale process.\n', '   *\n', '   * Pay for funding, get invested tokens back in the sender address.\n', '   */\n', '  function buy() public payable {\n', '    buyOnBehalf(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * Finalize a successful crowdsale.\n', '   *\n', '   * The owner can trigger post-crowdsale actions, like releasing the tokens.\n', '   * Note that by default tokens are not in a released state.\n', '   */\n', '  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '    finalized = true;\n', '    Finalized();\n', '  }\n', '\n', '  /**\n', '   * Set policy do we need to have server-side customer ids for the investments.\n', '   *\n', '   */\n', '  function setRequireCustomerId(bool value) public onlyOwner {\n', '    requireCustomerId = value;\n', '    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n', '  }\n', '\n', '  /**\n', '   * Set policy if all investors must be cleared on the server side first.\n', '   *\n', '   * This is e.g. for the accredited investor clearing.\n', '   *\n', '   */\n', '  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\n', '    requiredSignedAddress = value;\n', '    signerAddress = signer;\n', '    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n', '  }\n', '\n', '  /**\n', '   * Allow addresses to do early participation.\n', '   */\n', '  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\n', '    earlyParticipantWhitelist[addr] = status;\n', '    Whitelisted(addr, status);\n', '  }\n', '\n', '  /**\n', '   * Internal setter for the multisig wallet\n', '   */\n', '  function setMultisig(address addr) internal {\n', '    require(addr != 0);\n', '    multisigWallet = addr;\n', '  }\n', '\n', '  /**\n', '   * Crowdfund state machine management.\n', '   *\n', '   * This function has the timed transition builtin.\n', '   * So there is no chance of the variable being stale.\n', '   */\n', '  function getState() public view returns (State) {\n', '    if (finalized) return State.Finalized;\n', '    else if (!configured) return State.PendingConfiguration;\n', '    else if (now < startsAt) return State.PreFunding;\n', '    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\n', '    else return State.Success;\n', '  }\n', '\n', '  /** Internal functions that exist to provide inversion of control should they be overriden */\n', '\n', '  /** Interface for the concrete instance to interact with the token contract in a customizable way */\n', '  function assignTokens(address receiver, uint tokenAmount) internal;\n', '\n', '  /**\n', '   *  Determine if the goal was already reached in the current crowdsale\n', '   */\n', '  function isCrowdsaleFull() internal view returns (bool full);\n', '\n', '  /**\n', '   * Returns any excess wei received\n', '   * \n', '   * This function can be overriden to provide a different refunding method.\n', '   */\n', '  function returnExcedent(uint excedent, address receiver) internal {\n', '    if (excedent > 0) {\n', '      receiver.transfer(excedent);\n', '    }\n', '  }\n', '\n', '  /** \n', '   *  Calculate the amount of tokens that corresponds to the received amount.\n', '   *  The wei amount is returned too in case not all of it can be invested.\n', '   *\n', "   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\n", '   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\n', '   *  The workaround is good enough for most use cases, hence the simplified function signature.\n', '   *  @return weiAllowed The amount of wei accepted in this transaction.\n', '   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\n', '   */\n', '  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\n', '\n', '  //\n', '  // Modifiers\n', '  //\n', '\n', '  modifier inState(State state) {\n', '    require(getState() == state);\n', '    _;\n', '  }\n', '\n', '  modifier unsignedBuyAllowed() {\n', '    require(!requiredSignedAddress);\n', '    _;\n', '  }\n', '\n', '  /** Modifier allowing execution only if the crowdsale is currently running.  */\n', '  modifier notFinished() {\n', '    State current_state = getState();\n', '    require(current_state == State.PreFunding || current_state == State.Funding);\n', '    _;\n', '  }\n', '\n', '  modifier validCustomerId(uint128 customerId) {\n', '    require(customerId != 0);  // UUIDv4 sanity check\n', '    _;\n', '  }\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '// Simple deployment information store inside contract storage.\n', 'contract DeploymentInfo {\n', '  uint private deployed_on;\n', '\n', '  function DeploymentInfo() public {\n', '    deployed_on = block.number;\n', '  }\n', '\n', '\n', '  function getDeploymentBlock() public view returns (uint) {\n', '    return deployed_on;\n', '  }\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' *\n', ' * Heavily modified by https://www.coinfabrik.com/\n', ' */\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '\n', '/// @dev Tranche based pricing.\n', '///      Implementing "first price" tranches, meaning, that if a buyer\'s order is\n', '///      covering more than one tranche, the price of the lowest tranche will apply\n', '///      to the whole order.\n', 'contract TokenTranchePricing {\n', '\n', '  using SafeMath for uint;\n', '\n', '  /**\n', '   * Define pricing schedule using tranches.\n', '   */\n', '  struct Tranche {\n', '      // Amount in tokens when this tranche becomes inactive\n', '      uint amount;\n', '      // Timestamp interval [start, end)\n', '      // Starting timestamp (included in the interval)\n', '      uint start;\n', '      // Ending timestamp (excluded from the interval)\n', '      uint end;\n', '      // How many tokens per wei you will get while this tranche is active\n', '      uint price;\n', '  }\n', '  // We define offsets and size for the deserialization of ordered tuples in raw arrays\n', '  uint private constant amount_offset = 0;\n', '  uint private constant start_offset = 1;\n', '  uint private constant end_offset = 2;\n', '  uint private constant price_offset = 3;\n', '  uint private constant tranche_size = 4;\n', '\n', '  Tranche[] public tranches;\n', '\n', '  function getTranchesLength() public view returns (uint) {\n', '    return tranches.length;\n', '  }\n', '  \n', '  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\n', '  //\n', '  /// @dev Construction, creating a list of tranches\n', '  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\n', '  //\n', '  function configurationTokenTranchePricing(uint[] init_tranches) internal {\n', '    // Need to have tuples, length check\n', '    require(init_tranches.length % tranche_size == 0);\n', '    // A tranche with amount zero can never be selected and is therefore useless.\n', '    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\n', '    require(init_tranches[amount_offset] > 0);\n', '\n', '    uint input_tranches_length = init_tranches.length.div(tranche_size);\n', '    Tranche memory last_tranche;\n', '    for (uint i = 0; i < input_tranches_length; i++) {\n', '      uint tranche_offset = i.mul(tranche_size);\n', '      uint amount = init_tranches[tranche_offset.add(amount_offset)];\n', '      uint start = init_tranches[tranche_offset.add(start_offset)];\n', '      uint end = init_tranches[tranche_offset.add(end_offset)];\n', '      uint price = init_tranches[tranche_offset.add(price_offset)];\n', '      // No invalid steps\n', '      require(start < end && now < end);\n', '      // Bail out when entering unnecessary tranches\n', '      // This is preferably checked before deploying contract into any blockchain.\n', '      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\n', '              (end > last_tranche.end && amount >= last_tranche.amount));\n', '\n', '      last_tranche = Tranche(amount, start, end, price);\n', '      tranches.push(last_tranche);\n', '    }\n', '  }\n', '\n', '  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\n', '  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\n', '  /// @return Returns the struct representing the current tranche\n', '  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\n', '    for (uint i = 0; i < tranches.length; i++) {\n', '      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\n', '        return tranches[i];\n', '      }\n', '    }\n', '    // No tranche is currently active\n', '    revert();\n', '  }\n', '\n', '  /// @dev Get the current price. May revert if there is no tranche currently active.\n', '  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\n', '  /// @return The current price\n', '  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\n', '    return getCurrentTranche(tokensSold).price;\n', '  }\n', '\n', '}\n', '\n', '// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\n', 'contract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\n', '  uint public sellable_tokens;\n', '  uint public initial_tokens;\n', '  uint public milieurs_per_eth;\n', '  // Minimum amounts of tokens that must be bought by an investor\n', '  uint public minimum_buy_value;\n', '  address public price_agent; \n', '\n', '  /*\n', "   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\n", '   *\n', '   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\n', '   * \n', '   *\n', '   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\n', '   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\n', '   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\n', '   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\n', '   */\n', '\n', '  function configurationCrowdsale(address team_multisig, uint start, uint end,\n', '  address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply,\n', '  uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\n', '\n', '    initial_tokens = multisig_supply;\n', '    minimum_buy_value = uint(100).mul(10 ** uint(token_decimals));\n', '    token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\n', '    // Necessary if assignTokens mints\n', '    token.setMintAgent(address(this), true);\n', '    // Necessary if finalize is overriden to release the tokens for public trading.\n', '    token.setReleaseAgent(address(this));\n', "    // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \n", '    token.setTransferAgent(address(this), true);\n', '    // Crowdsale mints to himself the initial supply\n', '    token.mint(address(this), crowdsale_supply);\n', '\n', '    sellable_tokens = max_tokens_to_sell;\n', '\n', '    // Configuration functionality for GenericCrowdsale.\n', '    configurationGenericCrowdsale(team_multisig, start, end);\n', '\n', '    // Configuration functionality for TokenTranchePricing.\n', '    configurationTokenTranchePricing(init_tranches);\n', '  }\n', '\n', '  //token assignation\n', '  function assignTokens(address receiver, uint tokenAmount) internal {\n', '    token.transfer(receiver, tokenAmount);\n', '  }\n', '\n', '  //token amount calculation\n', '  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\n', '    //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\n', '    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\n', '    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\n', '    weiAllowed = maxWeiAllowed.min256(weiAmount);\n', '\n', '    if (weiAmount < maxWeiAllowed) {\n', '      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\n', '    }\n', '    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\n', '    else {\n', '      tokenAmount = sellable_tokens.sub(tokensSold);\n', '    }\n', '\n', '    // Require a minimum contribution of 100 fulltokens\n', '    require(token.balanceOf(receiver).add(tokenAmount) >= minimum_buy_value);\n', '  }\n', '\n', '  // Implements funding state criterion\n', '  function isCrowdsaleFull() internal view returns (bool full) {\n', '    return tokensSold >= sellable_tokens;\n', '  }\n', '\n', '  /**\n', '   * Finalize a successful crowdsale.\n', '   *\n', '   * The owner can trigger post-crowdsale actions, like releasing the tokens.\n', '   * Note that by default tokens are not in a released state.\n', '   */\n', '  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '    //Tokens sold + bounties represent 82% of the total, the other 18% goes to the multisig, partners and market making\n', '    uint sold = tokensSold.add(initial_tokens);\n', '    uint toShare = sold.mul(18).div(82);\n', '\n', '    // Mint the 18% to the multisig\n', '    token.setMintAgent(address(this), true);\n', '    token.mint(multisigWallet, toShare);\n', '    token.setMintAgent(address(this), false);\n', '\n', '    // Release transfers and burn unsold tokens.\n', '    token.releaseTokenTransfer();\n', '    token.burn(token.balanceOf(address(this)));\n', '\n', '    super.finalize();\n', '  }\n', '\n', '  /**\n', '   * This function decides who handles lost tokens.\n', '   * Do note that this function is NOT meant to be used in a token refund mecahnism.\n', '   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\n', '   */\n', '  function getLostAndFoundMaster() internal view returns (address) {\n', '    return owner;\n', '  }\n', '\n', '  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\n', '  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\n', '    require(now < startingTime && startingTime < endsAt);\n', '    startsAt = startingTime;\n', '  }\n', '\n', '  function setEndingTime(uint endingTime) public onlyOwner notFinished {\n', '    require(now < endingTime && startsAt < endingTime);\n', '    endsAt = endingTime;\n', '  }\n', '\n', '  function updateEursPerEth (uint milieurs_amount) public notFinished {\n', '    require(milieurs_amount >= 100);\n', '    require(msg.sender == price_agent);\n', '    milieurs_per_eth = milieurs_amount;\n', '  }\n', '\n', '  function updatePriceAgent(address new_price_agent) public onlyOwner notFinished {\n', '    price_agent = new_price_agent;\n', '  }\n', '\n', '  /**\n', '   * @param new_minimum New minimum amount of indivisible tokens to be required\n', '   */\n', '  function setMinimumBuyValue(uint new_minimum) public onlyOwner notFinished {\n', '    minimum_buy_value = new_minimum;\n', '  }\n', '}']
