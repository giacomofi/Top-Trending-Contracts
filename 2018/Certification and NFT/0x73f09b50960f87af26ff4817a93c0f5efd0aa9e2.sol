['pragma solidity ^0.4.24;\n', '\n', '// Author: Bruno Block\n', '// Version: 0.5\n', '\n', 'interface contractInterface {\n', '    function balanceOf(address _owner) external constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) external;\n', '}\n', '\n', 'contract DualSig {\n', '    address public directorA;\n', '    address public directorB;\n', '    address public proposalAuthor;\n', '    address public proposalContract;\n', '    address public proposalDestination;\n', '    uint256 public proposalAmount;\n', '    uint256 public proposalBlock;\n', '    uint256 public proposalNonce;\n', '    uint256 public overrideBlock;\n', '    uint256 public transferSafety;\n', '\n', '    event Proposal(uint256 _nonce, address _author, address _contract, uint256 _amount, address _destination, uint256 _timestamp);\n', '\n', '    event Accept(uint256 _nonce);\n', '\n', '    event NewDirectorA(address _director);\n', '\n', '    event NewDirectorB(address _director);\n', '\n', '    modifier onlyDirectors {\n', '        require(msg.sender == directorA || msg.sender == directorB);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        overrideBlock = (60*60*24*30)/15;// One month override interval assuming 15 second blocks (172,800 blocks)\n', '        proposalNonce = 0;\n', '        transferSafety = 1 ether;\n', '        directorA = msg.sender;\n', '        directorB = msg.sender;\n', '        reset();\n', '    }\n', '\n', '    function () public payable {}\n', '\n', '    function proposal(address proposalContractSet, uint256 proposalAmountSet, address proposalDestinationSet) public onlyDirectors {\n', '        proposalNonce++;\n', '        proposalAuthor = msg.sender;\n', '        proposalContract = proposalContractSet;\n', '        proposalAmount = proposalAmountSet;\n', '        proposalDestination = proposalDestinationSet;\n', '        proposalBlock = block.number + overrideBlock;\n', '        emit Proposal(proposalNonce, proposalAuthor, proposalContract, proposalAmount, proposalDestination, proposalBlock);\n', '    }\n', '\n', '    function reset() public onlyDirectors {\n', '        proposalNonce++;\n', '        if (proposalNonce > 1000000) {\n', '            proposalNonce = 0;\n', '        }\n', '        proposalAuthor = 0x0;\n', '        proposalContract = 0x0;\n', '        proposalAmount = 0;\n', '        proposalDestination = 0x0;\n', '        proposalBlock = 0;\n', '    }\n', '\n', '    function accept(uint256 acceptNonce) public onlyDirectors {\n', '        require(proposalNonce == acceptNonce);\n', '        require(proposalAmount > 0);\n', '        require(proposalDestination != 0x0);\n', '        require(proposalAuthor != msg.sender || block.number >= proposalBlock);\n', '\n', '        address localContract = proposalContract;\n', '        address localDestination = proposalDestination;\n', '        uint256 localAmount = proposalAmount;\n', '        reset();\n', '\n', '        if (localContract==0x0) {\n', '            require(localAmount <= address(this).balance);\n', '            localDestination.transfer(localAmount);\n', '        }\n', '        else {\n', '            contractInterface tokenContract = contractInterface(localContract);\n', '            tokenContract.transfer(localDestination, localAmount);\n', '        }\n', '        emit Accept(acceptNonce);\n', '    }\n', '\n', '    function transferDirectorA(address newDirectorA) public payable {\n', '        require(msg.sender==directorA);\n', '        require(msg.value==transferSafety);// Prevents accidental transfer\n', '        directorA.transfer(transferSafety);// Reimburse safety deposit\n', '        reset();\n', '        directorA = newDirectorA;\n', '        emit NewDirectorA(directorA);\n', '    }\n', '\n', '    function transferDirectorB(address newDirectorB) public payable {\n', '        require(msg.sender==directorB);\n', '        require(msg.value==transferSafety);// Prevents accidental transfer\n', '        directorB.transfer(transferSafety);// Reimburse safety deposit\n', '        reset();\n', '        directorB = newDirectorB;\n', '        emit NewDirectorB(directorB);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// Author: Bruno Block\n', '// Version: 0.5\n', '\n', 'interface contractInterface {\n', '    function balanceOf(address _owner) external constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) external;\n', '}\n', '\n', 'contract DualSig {\n', '    address public directorA;\n', '    address public directorB;\n', '    address public proposalAuthor;\n', '    address public proposalContract;\n', '    address public proposalDestination;\n', '    uint256 public proposalAmount;\n', '    uint256 public proposalBlock;\n', '    uint256 public proposalNonce;\n', '    uint256 public overrideBlock;\n', '    uint256 public transferSafety;\n', '\n', '    event Proposal(uint256 _nonce, address _author, address _contract, uint256 _amount, address _destination, uint256 _timestamp);\n', '\n', '    event Accept(uint256 _nonce);\n', '\n', '    event NewDirectorA(address _director);\n', '\n', '    event NewDirectorB(address _director);\n', '\n', '    modifier onlyDirectors {\n', '        require(msg.sender == directorA || msg.sender == directorB);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        overrideBlock = (60*60*24*30)/15;// One month override interval assuming 15 second blocks (172,800 blocks)\n', '        proposalNonce = 0;\n', '        transferSafety = 1 ether;\n', '        directorA = msg.sender;\n', '        directorB = msg.sender;\n', '        reset();\n', '    }\n', '\n', '    function () public payable {}\n', '\n', '    function proposal(address proposalContractSet, uint256 proposalAmountSet, address proposalDestinationSet) public onlyDirectors {\n', '        proposalNonce++;\n', '        proposalAuthor = msg.sender;\n', '        proposalContract = proposalContractSet;\n', '        proposalAmount = proposalAmountSet;\n', '        proposalDestination = proposalDestinationSet;\n', '        proposalBlock = block.number + overrideBlock;\n', '        emit Proposal(proposalNonce, proposalAuthor, proposalContract, proposalAmount, proposalDestination, proposalBlock);\n', '    }\n', '\n', '    function reset() public onlyDirectors {\n', '        proposalNonce++;\n', '        if (proposalNonce > 1000000) {\n', '            proposalNonce = 0;\n', '        }\n', '        proposalAuthor = 0x0;\n', '        proposalContract = 0x0;\n', '        proposalAmount = 0;\n', '        proposalDestination = 0x0;\n', '        proposalBlock = 0;\n', '    }\n', '\n', '    function accept(uint256 acceptNonce) public onlyDirectors {\n', '        require(proposalNonce == acceptNonce);\n', '        require(proposalAmount > 0);\n', '        require(proposalDestination != 0x0);\n', '        require(proposalAuthor != msg.sender || block.number >= proposalBlock);\n', '\n', '        address localContract = proposalContract;\n', '        address localDestination = proposalDestination;\n', '        uint256 localAmount = proposalAmount;\n', '        reset();\n', '\n', '        if (localContract==0x0) {\n', '            require(localAmount <= address(this).balance);\n', '            localDestination.transfer(localAmount);\n', '        }\n', '        else {\n', '            contractInterface tokenContract = contractInterface(localContract);\n', '            tokenContract.transfer(localDestination, localAmount);\n', '        }\n', '        emit Accept(acceptNonce);\n', '    }\n', '\n', '    function transferDirectorA(address newDirectorA) public payable {\n', '        require(msg.sender==directorA);\n', '        require(msg.value==transferSafety);// Prevents accidental transfer\n', '        directorA.transfer(transferSafety);// Reimburse safety deposit\n', '        reset();\n', '        directorA = newDirectorA;\n', '        emit NewDirectorA(directorA);\n', '    }\n', '\n', '    function transferDirectorB(address newDirectorB) public payable {\n', '        require(msg.sender==directorB);\n', '        require(msg.value==transferSafety);// Prevents accidental transfer\n', '        directorB.transfer(transferSafety);// Reimburse safety deposit\n', '        reset();\n', '        directorB = newDirectorB;\n', '        emit NewDirectorB(directorB);\n', '    }\n', '}']
