['pragma solidity ^ 0.4.17;\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint a, uint b) internal pure returns(uint) {\n', '        uint c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure  returns(uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint a, uint b) internal  pure returns(uint) {\n', '        uint c = a + b;\n', '        assert(c >= a && c >= b);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '\n', '    function balanceOf(address who) public view returns(uint);\n', '\n', '    function allowance(address owner, address spender) public view returns(uint);\n', '\n', '    function transfer(address to, uint value) public returns(bool ok);\n', '\n', '    function transferFrom(address from, address to, uint value) public returns(bool ok);\n', '\n', '    function approve(address spender, uint value) public returns(bool ok);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '/**\n', '* @title Ownable\n', '* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '// DeployTokenContract Smart Contract \n', '// This smart contract collects ETH and in return creates Token contract\n', '// based on the amount of money sent it will create two kinds of contract\n', '// 1. Simple ERC20 token contract\n', '// 2. As aboove with option to purchase tokens with set exchange rate to ETH\n', 'contract DeployTokenContract is Ownable {\n', '    \n', '    address public commissionAddress;           // address to deposit commissions\n', '    uint public deploymentCost;                 // cost of deployment with exchange feature\n', '    uint public tokenOnlyDeploymentCost;        // cost of deployment with basic ERC20 feature\n', '    uint public exchangeEnableCost;             // cost of upgrading existing ERC20 to exchange feature\n', '    uint public codeExportCost;                 // cost of exporting the code\n', '    MultiToken multiToken;                      // ERC20 token with exchange feature\n', '\n', '    event TokenDeployed(address newToken, uint amountPaid);    \n', '    event ExchangeEnabled(address token, uint amountPaid);\n', '    event CodeExportEnabled(address sender);\n', '\n', '    // @notice deploy token with exchnge functionality\n', '    // @param _initialSupply {uint} initial supply of token\n', '    // @param _tokenName {string} name of token\n', '    // @param _decimalUnits {uint} how many decimal units token will have\n', '    // @param _tokenSymbol {string} ticker for the token\n', '    // @param _version {string} version of the token\n', '    // @param _tokenPriceETH {uint} price of token for exchange functionality\n', '    function deployMultiToken () public returns (address) {\n', '\n', '        MultiToken token;\n', '\n', '        token = new MultiToken();                                                       \n', '        TokenDeployed(token, 0);\n', '        return token;                                                \n', '    }   \n', '\n', '    // @notice to enable code export functionality\n', '    // @param _token {address} to token contract \n', '    function enableCodeExport(address _token) public payable {\n', '\n', '        require(msg.value == codeExportCost);\n', '        require(_token != address(0));\n', '        multiToken = MultiToken(_token);\n', '        if (!multiToken.enableCodeExport())\n', '            revert();\n', '        commissionAddress.transfer(msg.value); \n', '        CodeExportEnabled(msg.sender);\n', '    }\n', '\n', '}\n', '\n', '\n', '// The  Exchange token\n', 'contract MultiToken is ERC20, Ownable {\n', '\n', '    using SafeMath for uint;\n', '    // Public variables of the token\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals; // How many decimals to show.\n', '    string public version;\n', '    uint public totalSupply;\n', '    uint public tokenPrice;\n', '    bool public exchangeEnabled;\n', '    address public parentContract;\n', '    bool public codeExportEnabled;\n', '\n', '    mapping(address => uint) public balances;\n', '    mapping(address => mapping(address => uint)) public allowed;\n', '\n', '    modifier onlyAuthorized() {\n', '        if (msg.sender != parentContract) \n', '            revert();\n', '        _;\n', '    }\n', '\n', '    // The Token constructor     \n', '    function MultiToken() public \n', '    {\n', '\n', '        totalSupply = 10000 * (10**8);                                             \n', '        name = "ICO";          // Set the name for display purposes\n', '        symbol = "ICO";      // Set the symbol for display purposes\n', '        decimals = 8;   // Amount of decimals for display purposes\n', '        version = "1.0";         // Version of token\n', '        tokenPrice = 1 ether / 100;   // Token price in ETH\n', '        codeExportEnabled = true; // If true allow code export\n', '        exchangeEnabled = true;\n', '        balances[owner] = totalSupply;    \n', '        parentContract = msg.sender;    // save parent contract address to allow enabling of exchange                                       // feature if required later for onlyAuthorized()\n', '    }\n', '\n', '    event TransferSold(address indexed to, uint value);\n', '\n', '    // @noice To be called by parent contract to enable exchange functionality\n', '    // @param _tokenPrice {uint} costo of token in ETH\n', '    // @return true {bool} if successful\n', '    function enableExchange(uint _tokenPrice) public onlyAuthorized() returns(bool) {\n', '        exchangeEnabled = true;\n', '        tokenPrice = _tokenPrice;\n', '        return true; \n', '    }\n', '\n', '        // @notice to enable code export functionality\n', '    function enableCodeExport() public onlyAuthorized() returns(bool) {        \n', '        codeExportEnabled = true;\n', '        return true;\n', '    }\n', '\n', '    // @notice It will send tokens to sender based on the token price    \n', '    function swapTokens() public payable {     \n', '\n', '        require(exchangeEnabled);   \n', '        uint tokensToSend;\n', '        tokensToSend = (msg.value * (10**decimals)) / tokenPrice; \n', '        require(balances[owner] >= tokensToSend);\n', '        balances[msg.sender] += tokensToSend;\n', '        balances[owner] -= tokensToSend;\n', '        Transfer(owner, msg.sender, tokensToSend);\n', '        TransferSold(msg.sender, tokensToSend);       \n', '    }\n', '\n', '    // @notice will be able to mint tokens in the future\n', '    // @param _target {address} address to which new tokens will be assigned\n', '    // @parm _mintedAmount {uint256} amouont of tokens to mint\n', '    function mintToken(address _target, uint256 _mintedAmount) public onlyOwner() {        \n', '        \n', '        balances[_target] += _mintedAmount;\n', '        totalSupply += _mintedAmount;\n', '        Transfer(0, _target, _mintedAmount);       \n', '    }\n', '  \n', '    // @notice transfer tokens to given address\n', '    // @param _to {address} address or recipient\n', '    // @param _value {uint} amount to transfer\n', '    // @return  {bool} true if successful\n', '    function transfer(address _to, uint _value) public returns(bool) {\n', '\n', '        require(_to != address(0));\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @notice transfer tokens from given address to another address\n', '    // @param _from {address} from whom tokens are transferred\n', '    // @param _to {address} to whom tokens are transferred\n', '    // @param _value {uint} amount of tokens to transfer\n', '    // @return  {bool} true if successful\n', '    function transferFrom(address _from, address _to, uint256 _value) public  returns(bool success) {\n', '\n', '        require(_to != address(0));\n', '        require(balances[_from] >= _value); // Check if the sender has enough\n', '        require(_value <= allowed[_from][msg.sender]); // Check if allowed is greater or equal\n', '        balances[_from] -= _value; // Subtract from the sender\n', '        balances[_to] += _value; // Add the same to the recipient\n', '        allowed[_from][msg.sender] -= _value;  // adjust allowed\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // @notice to query balance of account\n', '    // @return _owner {address} address of user to query balance\n', '    function balanceOf(address _owner) public view returns(uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint _value) public returns(bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // @notice to query of allowance of one user to the other\n', '    // @param _owner {address} of the owner of the account\n', '    // @param _spender {address} of the spender of the account\n', '    // @return remaining {uint} amount of remaining allowance\n', '    function allowance(address _owner, address _spender) public view returns(uint remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}']