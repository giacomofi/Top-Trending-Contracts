['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/TokenController.sol\n', '\n', '/** The interface for a token contract to notify a controller of every transfers. */\n', 'contract TokenController {\n', '    bytes4 public constant INTERFACE = bytes4(keccak256("TokenController"));\n', '\n', '    function allowTransfer(address _sender, address _from, address _to, uint256 _value, bytes _purpose) public returns (bool);\n', '}\n', '\n', '\n', '// Basic examples\n', '\n', 'contract YesController is TokenController {\n', '    function allowTransfer(address /* _sender */, address /* _from */, address /* _to */, uint256 /* _value */, bytes /* _purpose */)\n', '        public returns (bool)\n', '    {\n', '        return true; // allow all transfers\n', '    }\n', '}\n', '\n', '\n', 'contract NoController is TokenController {\n', '    function allowTransfer(address /* _sender */, address /* _from */, address /* _to */, uint256 /* _value */, bytes /* _purpose */)\n', '        public returns (bool)\n', '    {\n', '        return false; // veto all transfers\n', '    }\n', '}\n', '\n', '// File: contracts/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SaleController.sol\n', '\n', '/** Forbid trading, but allow transfers from a seller and from the owner.\n', '    Setting to 0 effectively pauses the sale.\n', '*/\n', 'contract SaleController is TokenController, Ownable {\n', '\n', '    address public seller = 0;\n', '\n', '    /** @dev `owner` can change the `seller`. */\n', '    function changeSeller(address _newSeller)\n', '        onlyOwner public\n', '    {\n', '        seller = _newSeller;\n', '    }\n', '\n', '    /** @dev Allow transfers from the `seller` and the `owner`, but nobody else. No state changes. */\n', '    function allowTransfer(address /* _sender */, address _from, address /* _to */, uint256 /* _value */, bytes /* _purpose */)\n', '        public returns (bool)\n', '    {\n', '        return _from == seller || _from == owner;\n', '    }\n', '\n', '}']