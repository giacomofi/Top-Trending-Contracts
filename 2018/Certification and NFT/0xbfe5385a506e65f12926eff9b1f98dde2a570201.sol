['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Rivetz SPID Registration Contract\n', ' *\n', ' * @dev This is a Registrar-like contract\n', ' *\n', ' */\n', 'contract RivetzRegistrar is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct SPEntry {\n', '        // Ethereum Address of Registrant - may use a multi-sig wallet-contract and can assign an admin\n', '        address registrant;\n', '        // Ethereum address of Administrator - must be an address that can sign arbitrary messages for Registrar authentication\n', '        address admin;\n', '        // Hash of SPID public key that is stored in Registrar\n', '        uint256 pubKeyHash;\n', '        // Hash of Service Provider organization data, etc.\n', '        uint256 infoHash;\n', '        // Expiration date of subscription in UNIX epoch seconds\n', '        uint256  expiration;\n', '        // Flag indicating whether this SPID has been approved by Rivetz for operation (KYC/AML)\n', '        bool    valid;\n', '    }\n', '\n', '    // Add an event, so we an find all SPIDs via the log\n', '    event SPCreated(uint256 indexed spid);\n', '\n', '    mapping(uint256 => SPEntry) public spEntries;\n', '\n', '    // ERC-20 token that will be accepted for payment\n', '    ERC20 public rvt;\n', '    // Address of wallet to which received funds will be sent\n', '    address public paymentWalletAddress;\n', '    // Typed contract instance of the ERC20 token\n', '\n', '    // Seconds per year, used in subscription calculations\n', '    uint64 constant secPerYear = 365 days;  /* Sec/Year */\n', '\n', '    // Fee in ERC-20 that is charged to register a SPID\n', '    uint256 public registrationFee = 1000 ether;               /* Initial fee (in wei) -- includes 1 year */\n', '    // Annual subscription fee\n', '    uint256 constant defaultAnnualFee = 1000 ether;     /* wei/year */\n', '    // Annual fee as a per-second charge in "wei"\n', '    uint256 public feePerSec = defaultAnnualFee / secPerYear;  /* wei/sec = (wei/year) / (sec/year) */\n', '\n', '\n', '    /**\n', '      * Constructor\n', '      * @param paymentTokenAddress Address of ERC-20 token that will be accepted for payment\n', '      * @param paymentDestAddress Address wallet to which payments will be sent\n', '      */\n', '    constructor(address paymentTokenAddress, address paymentDestAddress) public {\n', '        rvt = ERC20(paymentTokenAddress);\n', '        paymentWalletAddress = paymentDestAddress;\n', '    }\n', '\n', '    /**\n', '     * Register a new SPID\n', '     * Sending address is initial registrant and administrator\n', '     */\n', '    function register(uint256 spid, uint256 pubKeyHash, uint256 infoHash) public {\n', '        require(rvt.transferFrom(msg.sender, paymentWalletAddress, registrationFee));\n', '        SPEntry storage spEntry = newEntry(spid);\n', '        spEntry.registrant = msg.sender;\n', '        spEntry.admin = msg.sender;\n', '        spEntry.pubKeyHash = pubKeyHash;\n', '        spEntry.infoHash = infoHash;\n', '        spEntry.valid = false;\n', '    }\n', '\n', '    /**\n', '     * Register a new SPID, sender must be Rivetz\n', '     */\n', '    function rivetzRegister(uint256 spid, uint256 pubKeyHash, uint256 infoHash, address spidRegistrant, address spidAdmin) onlyOwner public {\n', '        SPEntry storage spEntry = newEntry(spid);\n', '        spEntry.registrant = spidRegistrant;\n', '        spEntry.admin = spidAdmin;\n', '        spEntry.pubKeyHash = pubKeyHash;\n', '        spEntry.infoHash = infoHash;\n', '        spEntry.valid = true;\n', '    }\n', '\n', '    /**\n', '     * Create a new SP entry for further modification\n', '     */\n', '    function newEntry(uint256 spid) internal returns (SPEntry storage) {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        require(spEntry.registrant == 0);\n', '        spEntry.expiration = now + secPerYear;\n', '        emit SPCreated(spid);\n', '        return spEntry;\n', '    }\n', '\n', '    /**\n', '     * Change registrant, must be existing registrant or Rivetz\n', '     */\n', '    function setRegistrant(uint256 spid, address registrant) public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        require(spEntry.registrant != 0 && spEntry.registrant != address(0x1) );\n', '        requireRegistrantOrGreater(spEntry);\n', '        spEntry.registrant = registrant;\n', '    }\n', '\n', '    /**\n', '     * Change admin, must be existing registrant or Rivetz\n', '     */\n', '    function setAdmin(uint256 spid, address admin) public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        requireRegistrantOrGreater(spEntry);\n', '        spEntry.admin = admin;\n', '    }\n', '\n', '    /**\n', '     * Change pubKey, must be existing registrant or Rivetz\n', '     */\n', '    function setPubKey(uint256 spid, uint256 pubKeyHash) public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        requireRegistrantOrGreater(spEntry);\n', '        spEntry.pubKeyHash = pubKeyHash;\n', '    }\n', '\n', '    /**\n', '     * Change info hash, must be admin, registrant or Rivetz\n', '     */\n', '    function setInfo(uint256 spid, uint256 infoHash) public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        requireAdminOrGreater(spEntry);\n', '        spEntry.infoHash = infoHash;\n', '    }\n', '\n', '    /**\n', '     * Mark as approved, must be done by Rivetz\n', '     */\n', '    function setValid(uint256 spid, bool valid) onlyOwner public {\n', '        spEntries[spid].valid = valid;\n', '    }\n', '\n', '    /**\n', '     * Renew subscription -- can be done by anyone that pays\n', '     */\n', '    function renew(uint256 spid, uint256 payment) public returns (uint256 expiration) {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        require(rvt.transferFrom(msg.sender, paymentWalletAddress, payment));\n', '        uint256 periodStart = (spEntry.expiration > now) ? spEntry.expiration : now;\n', '        spEntry.expiration = periodStart.add(feeToSeconds(payment));\n', '        return spEntry.expiration;\n', '    }\n', '\n', '    /**\n', '     * Set subscription end date -- can only be done by Rivetz\n', '     */\n', '    function setExpiration(uint256 spid, uint256 expiration) onlyOwner public {\n', '        spEntries[spid].expiration = expiration;\n', '    }\n', '\n', '    /**\n', '     * Permanently deactivate SPID, must be registrant -- expires subscription, invalidates\n', '     */\n', '    function release(uint256 spid) public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        requireRegistrantOrGreater(spEntry);\n', '        spEntry.expiration = 0;\n', '        spEntry.registrant = address(0x1);\n', '        spEntry.admin = address(0x1);\n', '        spEntry.valid = false;\n', '    }\n', '\n', '    /**\n', '     * Disable SPID, zeroes out everything -- must be Rivetz\n', '     */\n', '    function rivetzRelease(uint256 spid) onlyOwner public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        spEntry.registrant = address(0x1);\n', '        spEntry.admin = address(0x1);\n', '        spEntry.pubKeyHash = 0;\n', '        spEntry.infoHash = 0;\n', '        spEntry.expiration = 0;\n', '        spEntry.valid = false;\n', '    }\n', '\n', '    /**\n', '     * Set new registration and annual fees -- must be Rivetz\n', '     */\n', '    function setFees(uint256 newRegistrationFee, uint256 newAnnualFee) onlyOwner public {\n', '        registrationFee = newRegistrationFee;\n', '        feePerSec = newAnnualFee / secPerYear;\n', '    }\n', '\n', '\n', '    /**\n', '     * RvT is upgradeable, make sure we can update Registrar to use upgraded RvT\n', '     */\n', '    function setToken(address erc20Address) onlyOwner public {\n', '        rvt = ERC20(erc20Address);\n', '    }\n', '\n', '    /**\n', '     * Change payment address -- must be Rivetz\n', '     */\n', '    function setPaymentAddress(address paymentAddress) onlyOwner public {\n', '        paymentWalletAddress = paymentAddress;\n', '    }\n', '\n', '    /**\n', '     * Permission check - admin or greater\n', '     * SP Registrant or Admin can&#39;t proceed if subscription expired\n', '     */\n', '    function requireAdminOrGreater(SPEntry spEntry) internal view {\n', '        require (msg.sender == spEntry.admin ||\n', '                 msg.sender == spEntry.registrant ||\n', '                 msg.sender == owner);\n', '        require (isSubscribed(spEntry) || msg.sender == owner);\n', '    }\n', '\n', '    /**\n', '     * Permission check - registrant or greater\n', '     * SP Registrant or Admin can&#39;t proceed if subscription expired\n', '     */\n', '    function requireRegistrantOrGreater(SPEntry spEntry) internal view  {\n', '        require (msg.sender == spEntry.registrant ||\n', '                 msg.sender == owner);\n', '        require (isSubscribed(spEntry) || msg.sender == owner);\n', '    }\n', '\n', '    /**\n', '     * Get annual fee in RvT\n', '     */\n', '    function getAnnualFee() public view returns (uint256) {\n', '        return feePerSec.mul(secPerYear);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the number of seconds feeAmount would add to expiration date\n', '     * @param feeAmount : Amount of RvT-wei to convert to seconds\n', '     * @return seconds :  Equivalent number of seconds purchased\n', '     */\n', '    function feeToSeconds(uint256 feeAmount) internal view returns (uint256 seconds_)\n', '    {\n', '        return feeAmount / feePerSec;                   /* secs = wei / ( wei/sec)  */\n', '    }\n', '\n', '    function isSubscribed(SPEntry spEntry) internal view returns (bool subscribed)\n', '    {\n', '        return now < spEntry.expiration;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Rivetz SPID Registration Contract\n', ' *\n', ' * @dev This is a Registrar-like contract\n', ' *\n', ' */\n', 'contract RivetzRegistrar is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct SPEntry {\n', '        // Ethereum Address of Registrant - may use a multi-sig wallet-contract and can assign an admin\n', '        address registrant;\n', '        // Ethereum address of Administrator - must be an address that can sign arbitrary messages for Registrar authentication\n', '        address admin;\n', '        // Hash of SPID public key that is stored in Registrar\n', '        uint256 pubKeyHash;\n', '        // Hash of Service Provider organization data, etc.\n', '        uint256 infoHash;\n', '        // Expiration date of subscription in UNIX epoch seconds\n', '        uint256  expiration;\n', '        // Flag indicating whether this SPID has been approved by Rivetz for operation (KYC/AML)\n', '        bool    valid;\n', '    }\n', '\n', '    // Add an event, so we an find all SPIDs via the log\n', '    event SPCreated(uint256 indexed spid);\n', '\n', '    mapping(uint256 => SPEntry) public spEntries;\n', '\n', '    // ERC-20 token that will be accepted for payment\n', '    ERC20 public rvt;\n', '    // Address of wallet to which received funds will be sent\n', '    address public paymentWalletAddress;\n', '    // Typed contract instance of the ERC20 token\n', '\n', '    // Seconds per year, used in subscription calculations\n', '    uint64 constant secPerYear = 365 days;  /* Sec/Year */\n', '\n', '    // Fee in ERC-20 that is charged to register a SPID\n', '    uint256 public registrationFee = 1000 ether;               /* Initial fee (in wei) -- includes 1 year */\n', '    // Annual subscription fee\n', '    uint256 constant defaultAnnualFee = 1000 ether;     /* wei/year */\n', '    // Annual fee as a per-second charge in "wei"\n', '    uint256 public feePerSec = defaultAnnualFee / secPerYear;  /* wei/sec = (wei/year) / (sec/year) */\n', '\n', '\n', '    /**\n', '      * Constructor\n', '      * @param paymentTokenAddress Address of ERC-20 token that will be accepted for payment\n', '      * @param paymentDestAddress Address wallet to which payments will be sent\n', '      */\n', '    constructor(address paymentTokenAddress, address paymentDestAddress) public {\n', '        rvt = ERC20(paymentTokenAddress);\n', '        paymentWalletAddress = paymentDestAddress;\n', '    }\n', '\n', '    /**\n', '     * Register a new SPID\n', '     * Sending address is initial registrant and administrator\n', '     */\n', '    function register(uint256 spid, uint256 pubKeyHash, uint256 infoHash) public {\n', '        require(rvt.transferFrom(msg.sender, paymentWalletAddress, registrationFee));\n', '        SPEntry storage spEntry = newEntry(spid);\n', '        spEntry.registrant = msg.sender;\n', '        spEntry.admin = msg.sender;\n', '        spEntry.pubKeyHash = pubKeyHash;\n', '        spEntry.infoHash = infoHash;\n', '        spEntry.valid = false;\n', '    }\n', '\n', '    /**\n', '     * Register a new SPID, sender must be Rivetz\n', '     */\n', '    function rivetzRegister(uint256 spid, uint256 pubKeyHash, uint256 infoHash, address spidRegistrant, address spidAdmin) onlyOwner public {\n', '        SPEntry storage spEntry = newEntry(spid);\n', '        spEntry.registrant = spidRegistrant;\n', '        spEntry.admin = spidAdmin;\n', '        spEntry.pubKeyHash = pubKeyHash;\n', '        spEntry.infoHash = infoHash;\n', '        spEntry.valid = true;\n', '    }\n', '\n', '    /**\n', '     * Create a new SP entry for further modification\n', '     */\n', '    function newEntry(uint256 spid) internal returns (SPEntry storage) {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        require(spEntry.registrant == 0);\n', '        spEntry.expiration = now + secPerYear;\n', '        emit SPCreated(spid);\n', '        return spEntry;\n', '    }\n', '\n', '    /**\n', '     * Change registrant, must be existing registrant or Rivetz\n', '     */\n', '    function setRegistrant(uint256 spid, address registrant) public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        require(spEntry.registrant != 0 && spEntry.registrant != address(0x1) );\n', '        requireRegistrantOrGreater(spEntry);\n', '        spEntry.registrant = registrant;\n', '    }\n', '\n', '    /**\n', '     * Change admin, must be existing registrant or Rivetz\n', '     */\n', '    function setAdmin(uint256 spid, address admin) public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        requireRegistrantOrGreater(spEntry);\n', '        spEntry.admin = admin;\n', '    }\n', '\n', '    /**\n', '     * Change pubKey, must be existing registrant or Rivetz\n', '     */\n', '    function setPubKey(uint256 spid, uint256 pubKeyHash) public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        requireRegistrantOrGreater(spEntry);\n', '        spEntry.pubKeyHash = pubKeyHash;\n', '    }\n', '\n', '    /**\n', '     * Change info hash, must be admin, registrant or Rivetz\n', '     */\n', '    function setInfo(uint256 spid, uint256 infoHash) public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        requireAdminOrGreater(spEntry);\n', '        spEntry.infoHash = infoHash;\n', '    }\n', '\n', '    /**\n', '     * Mark as approved, must be done by Rivetz\n', '     */\n', '    function setValid(uint256 spid, bool valid) onlyOwner public {\n', '        spEntries[spid].valid = valid;\n', '    }\n', '\n', '    /**\n', '     * Renew subscription -- can be done by anyone that pays\n', '     */\n', '    function renew(uint256 spid, uint256 payment) public returns (uint256 expiration) {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        require(rvt.transferFrom(msg.sender, paymentWalletAddress, payment));\n', '        uint256 periodStart = (spEntry.expiration > now) ? spEntry.expiration : now;\n', '        spEntry.expiration = periodStart.add(feeToSeconds(payment));\n', '        return spEntry.expiration;\n', '    }\n', '\n', '    /**\n', '     * Set subscription end date -- can only be done by Rivetz\n', '     */\n', '    function setExpiration(uint256 spid, uint256 expiration) onlyOwner public {\n', '        spEntries[spid].expiration = expiration;\n', '    }\n', '\n', '    /**\n', '     * Permanently deactivate SPID, must be registrant -- expires subscription, invalidates\n', '     */\n', '    function release(uint256 spid) public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        requireRegistrantOrGreater(spEntry);\n', '        spEntry.expiration = 0;\n', '        spEntry.registrant = address(0x1);\n', '        spEntry.admin = address(0x1);\n', '        spEntry.valid = false;\n', '    }\n', '\n', '    /**\n', '     * Disable SPID, zeroes out everything -- must be Rivetz\n', '     */\n', '    function rivetzRelease(uint256 spid) onlyOwner public {\n', '        SPEntry storage spEntry = spEntries[spid];\n', '        spEntry.registrant = address(0x1);\n', '        spEntry.admin = address(0x1);\n', '        spEntry.pubKeyHash = 0;\n', '        spEntry.infoHash = 0;\n', '        spEntry.expiration = 0;\n', '        spEntry.valid = false;\n', '    }\n', '\n', '    /**\n', '     * Set new registration and annual fees -- must be Rivetz\n', '     */\n', '    function setFees(uint256 newRegistrationFee, uint256 newAnnualFee) onlyOwner public {\n', '        registrationFee = newRegistrationFee;\n', '        feePerSec = newAnnualFee / secPerYear;\n', '    }\n', '\n', '\n', '    /**\n', '     * RvT is upgradeable, make sure we can update Registrar to use upgraded RvT\n', '     */\n', '    function setToken(address erc20Address) onlyOwner public {\n', '        rvt = ERC20(erc20Address);\n', '    }\n', '\n', '    /**\n', '     * Change payment address -- must be Rivetz\n', '     */\n', '    function setPaymentAddress(address paymentAddress) onlyOwner public {\n', '        paymentWalletAddress = paymentAddress;\n', '    }\n', '\n', '    /**\n', '     * Permission check - admin or greater\n', "     * SP Registrant or Admin can't proceed if subscription expired\n", '     */\n', '    function requireAdminOrGreater(SPEntry spEntry) internal view {\n', '        require (msg.sender == spEntry.admin ||\n', '                 msg.sender == spEntry.registrant ||\n', '                 msg.sender == owner);\n', '        require (isSubscribed(spEntry) || msg.sender == owner);\n', '    }\n', '\n', '    /**\n', '     * Permission check - registrant or greater\n', "     * SP Registrant or Admin can't proceed if subscription expired\n", '     */\n', '    function requireRegistrantOrGreater(SPEntry spEntry) internal view  {\n', '        require (msg.sender == spEntry.registrant ||\n', '                 msg.sender == owner);\n', '        require (isSubscribed(spEntry) || msg.sender == owner);\n', '    }\n', '\n', '    /**\n', '     * Get annual fee in RvT\n', '     */\n', '    function getAnnualFee() public view returns (uint256) {\n', '        return feePerSec.mul(secPerYear);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the number of seconds feeAmount would add to expiration date\n', '     * @param feeAmount : Amount of RvT-wei to convert to seconds\n', '     * @return seconds :  Equivalent number of seconds purchased\n', '     */\n', '    function feeToSeconds(uint256 feeAmount) internal view returns (uint256 seconds_)\n', '    {\n', '        return feeAmount / feePerSec;                   /* secs = wei / ( wei/sec)  */\n', '    }\n', '\n', '    function isSubscribed(SPEntry spEntry) internal view returns (bool subscribed)\n', '    {\n', '        return now < spEntry.expiration;\n', '    }\n', '}']
