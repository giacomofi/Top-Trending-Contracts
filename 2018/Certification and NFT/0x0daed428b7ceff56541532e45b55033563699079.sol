['pragma solidity ^0.4.16;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', 'contract knuckCrowdsaleOne {\n', '    address public beneficiary;\n', '    uint public amountRaised;\n', '    uint public price;\n', '    token public knuckReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    bool crowdsaleClosed = false;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function knuckCrowdsaleOne(\n', '        address ifSuccessfulSendTo,\n', '        uint CostOfEachKnuck,\n', '        address addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        price = CostOfEachKnuck * 1 szabo;\n', '        knuckReward = token(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        knuckReward.transfer(msg.sender, amount / price);\n', '        FundTransfer(msg.sender, amount, true);\n', '                    if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            } \n', '            else {\n', '                \n', '    }\n', '\n', '}\n', '    }']