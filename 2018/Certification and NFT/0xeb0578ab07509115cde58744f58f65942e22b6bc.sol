['pragma solidity 0.4.24;\n', '/**\n', '* @title ROC ICO Contract\n', '*/\n', '\n', '/**\n', ' * @title SafeMath by OpenZeppelin\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'interface ERC20Basic {\n', '    function totalSupply() constant external returns (uint256 supply);\n', '    function balanceOf(address _owner) constant external returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '/**\n', ' * @title admined\n', ' * @notice This contract is administered\n', ' */\n', 'contract admined {\n', '    mapping(address => uint8) public level;\n', '    //Levels are\n', '    //0 normal user (default)\n', '    //1 basic admin\n', '    //2 master admin\n', '\n', '    /**\n', '    * @dev This contructor takes the msg.sender (deployer wallet) as the first master admin\n', '    */\n', '    constructor() internal {\n', '        level[msg.sender] = 2; //Set initial admin to contract creator\n', '        emit AdminshipUpdated(msg.sender,2);\n', '    }\n', '\n', '    /**\n', '    * @dev This modifier limits function execution to the admin\n', '    */\n', '    modifier onlyAdmin(uint8 _level) { //A modifier to define admin-only functions\n', '        require(level[msg.sender] >= _level );\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice This function set adminship on the contract to _newAdmin\n', '    * @param _newAdmin The new admin of the contract\n', '    * @param _level The level assigned\n', '    */\n', '    function adminshipLevel(address _newAdmin, uint8 _level) onlyAdmin(2) public { //Admin can be set\n', '        require(_newAdmin != address(0));\n', '        level[_newAdmin] = _level;\n', '        emit AdminshipUpdated(_newAdmin,_level);\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event AdminshipUpdated(address _newAdmin, uint8 _level);\n', '\n', '}\n', '\n', 'contract ROCICO is admined {\n', '\n', '    using SafeMath for uint256;\n', '    //This ico have these possible states\n', '    enum State {\n', '        Stage1,\n', '        Stage2,\n', '        Stage3,\n', '        Successful\n', '    }\n', '    //Public variables\n', '\n', '    //Time-state Related\n', '    State public state = State.Stage1; //Set initial stage\n', '    uint256 public startTime = 1536883200; //Human time (GMT): Friday, 14 September 2018 0:00:00\n', '    uint256 public Stage1Deadline = 1537833600; //Human time (GMT): Tuesday, 25 September 2018 0:00:00\n', '    uint256 public Stage2Deadline = 1538697600; //Human time (GMT): Friday, 5 October 2018 0:00:00\n', '    uint256 public Stage3Deadline = 1539647999; //Human time (GMT): Monday, 15 October 2018 23:59:59\n', '    uint256 public completedAt; //Set when ico finish\n', '\n', '    //Token-eth related\n', '    uint256 public totalRaised; //eth collected in wei\n', '    uint256 public totalDistributed; //Whole sale tokens distributed\n', '    ERC20Basic public tokenReward; //Token contract address\n', '\n', '    //Contract details\n', '    address public creator;\n', '    address public beneficiary;\n', "    string public version = '1';\n", '\n', '    //Tokens per eth rates\n', '    uint256[3] rates = [1000000,800000,700000];\n', '\n', '    //events for log\n', '    event LogFundrisingInitialized(address _creator);\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '\n', '    //Modifier to prevent execution if ico has ended\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice ICO constructor\n', '    */\n', '    constructor(address _beneficiaryAddress, address _tokenAddress) public {\n', '\n', '        require(_beneficiaryAddress != address(0));\n', '\n', '        beneficiary = _beneficiaryAddress;\n', '        creator = msg.sender; //Creator is set on deployment\n', '        tokenReward = ERC20Basic(_tokenAddress); //Token contract address\n', '\n', '        emit LogFundrisingInitialized(beneficiary);\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '\n', '        //Minimum contribution 0.001 eth\n', '        require(msg.value >= 1 finney);\n', '\n', '        uint256 tokenBought = 0; //tokens bought variable\n', '\n', '        totalRaised = totalRaised.add(msg.value); //ether received counter updated\n', '\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised); //log\n', '\n', '        if(state == State.Stage1){\n', '\n', '            tokenBought = msg.value.mul(rates[0]); //Stage1 rate\n', '\n', '            //Bonus 25%\n', '            tokenBought = tokenBought.mul(125);\n', '            tokenBought = tokenBought.div(100);\n', '\n', '        } else if(state == State.Stage2){\n', '\n', '            tokenBought = msg.value.mul(rates[1]); //Stage2 rate\n', '\n', '            //Bonus 15%\n', '            tokenBought = tokenBought.mul(115);\n', '            tokenBought = tokenBought.div(100);\n', '\n', '        } else {\n', '\n', '            tokenBought = msg.value.mul(rates[2]); //Stage3 rate\n', '\n', '            //Bonus 5%\n', '            tokenBought = tokenBought.mul(105);\n', '            tokenBought = tokenBought.div(100);\n', '\n', '        }\n', '\n', '        tokenBought = tokenBought.div(1e10); //Decimals correction\n', '\n', '        if(msg.value >= 5 ether){\n', '          tokenBought = tokenBought.mul(2); //+100%\n', '        }\n', '\n', '        totalDistributed = totalDistributed.add(tokenBought); //whole tokens sold counter updated\n', '\n', '        beneficiary.transfer(address(this).balance);\n', '\n', '        emit LogBeneficiaryPaid(creator);\n', '\n', '        require(tokenReward.transfer(msg.sender,tokenBought));\n', '\n', '        emit LogContributorsPayout(msg.sender,tokenBought); //Log the claim\n', '\n', '        checkIfFundingCompleteOrExpired(); //State check\n', '    }\n', '\n', '    /**\n', '    * @notice function to check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        if( now >= Stage3Deadline && state != State.Successful ){//If deadline is reached\n', '\n', '            state = State.Successful; //ICO becomes Successful\n', '            completedAt = now; //ICO is complete\n', '\n', '            emit LogFundingSuccessful(totalRaised); //we log the finish\n', '            successful(); //and execute closure\n', '\n', '        } else if (state == State.Stage1 && now >= Stage1Deadline){\n', '\n', '            state = State.Stage2;\n', '\n', '        } else if (state == State.Stage2 && now >= Stage2Deadline){\n', '\n', '            state = State.Stage3;\n', '\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice successful closure handler\n', '    */\n', '    function successful() public {\n', '        //When successful\n', '        require(state == State.Successful);\n', '\n', '        //If there is any token left after ico\n', '        uint256 remanent = tokenReward.balanceOf(this); //Total tokens remaining\n', '        require(tokenReward.transfer(beneficiary,remanent));//Tokens are send back to creator\n', '\n', '        //After successful ico all remaining eth is send to beneficiary\n', '        beneficiary.transfer(address(this).balance);\n', '        emit LogBeneficiaryPaid(creator);\n', '    }\n', '\n', '    /**\n', '    * @notice Function to claim any token stuck on contract\n', '    */\n', '    function externalTokensRecovery(ERC20Basic _address) onlyAdmin(2) public{\n', '\n', '        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n', '        _address.transfer(msg.sender,remainder); //Transfer tokens to admin\n', '\n', '    }\n', '\n', '    /*\n', '    * @dev Direct payments handler\n', '    */\n', '    function () public payable {\n', '\n', '        contribute();\n', '\n', '    }\n', '}']