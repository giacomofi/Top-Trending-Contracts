['pragma solidity ^0.4.18;\n', '\n', 'library Search {\n', '  function indexOf(uint32[] storage self, uint32 value) public view returns (uint32) {\n', '    for (uint32 i = 0; i < self.length; i++) {\n', '      if (self[i] == value) return i;\n', '    }\n', '    return uint32(- 1);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract PresidentElections {\n', '  address owner;\n', '\n', '  using SafeMath for uint;\n', '\n', '  struct Candidate {\n', '    uint32 id;\n', '    address owner;\n', '    uint256 votes;\n', '  }\n', '  uint end = 1521406800;\n', '  mapping(address => uint) votes;\n', '  mapping(uint32 => Candidate) candidates;\n', '  using Search for uint32[];\n', '  uint32[] candidate_ids;\n', '  uint constant price = 0.01 ether;\n', '  uint public create_price = 0.1 ether;\n', '  uint constant percent = 10;\n', '\n', '  enum Candidates {\n', '    NULL,\n', '    Baburin,\n', '    Grudinin,\n', '    Zhirinovsky,\n', '    Putin,\n', '    Sobchak,\n', '    Suraykin,\n', '    Titov,\n', '    Yavlinsky\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier isCandidate(uint32 candidate) {\n', '    require(candidates[candidate].id > 0);\n', '    _;\n', '  }\n', '\n', '  modifier isNotVoted() {\n', '    require(votes[msg.sender] == 0);\n', '    _;\n', '  }\n', '\n', '  modifier voteIsOn() {\n', '    require(now < end);\n', '    _;\n', '  }\n', '\n', '  function PresidentElections() public {\n', '    owner = msg.sender;\n', '    _add(uint32(Candidates.Baburin), owner);\n', '    _add(uint32(Candidates.Grudinin), owner);\n', '    _add(uint32(Candidates.Zhirinovsky), owner);\n', '    _add(uint32(Candidates.Putin), owner);\n', '    _add(uint32(Candidates.Sobchak), owner);\n', '    _add(uint32(Candidates.Suraykin), owner);\n', '    _add(uint32(Candidates.Titov), owner);\n', '    _add(uint32(Candidates.Yavlinsky), owner);\n', '  }\n', '\n', '  function _add(uint32 candidate, address sender) private {\n', '    require(candidates[candidate].id == 0);\n', '\n', '    candidates[candidate] = Candidate(candidate, sender, 0);\n', '    candidate_ids.push(candidate);\n', '  }\n', '\n', '  function isFinished() constant public returns (bool) {\n', '    return now > end;\n', '  }\n', '\n', '  function isVoted() constant public returns (bool) {\n', '    return votes[msg.sender] > 0;\n', '  }\n', '\n', '  function vote(uint32 candidate) public payable isCandidate(candidate) voteIsOn isNotVoted returns (bool) {\n', '    require(msg.value == price);\n', '\n', '    votes[msg.sender] = candidate;\n', '    candidates[candidate].votes += 1;\n', '\n', '    if( candidates[candidate].owner != owner ) {\n', '      owner.transfer(msg.value.mul(100 - percent).div(100));\n', '      candidates[candidate].owner.transfer(msg.value.mul(percent).div(100));\n', '    } else {\n', '      owner.transfer(msg.value);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function add(uint32 candidate) public payable voteIsOn returns (bool) {\n', '    require(msg.value == create_price);\n', '\n', '    _add(candidate, msg.sender);\n', '\n', '    owner.transfer(msg.value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function getCandidates() public view returns (uint32[]) {\n', '    return candidate_ids;\n', '  }\n', '\n', '  function getVotes() public view returns (uint256[]) {\n', '    uint256[] memory v = new uint256[](candidate_ids.length);\n', '    for(uint i = 0; i < candidate_ids.length; i++ ) {\n', '      v[i] = candidates[candidate_ids[i]].votes;\n', '    }\n', '    return v;\n', '  }\n', '\n', '  function setCreatePrice(uint _price) public onlyOwner {\n', '    create_price = _price;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library Search {\n', '  function indexOf(uint32[] storage self, uint32 value) public view returns (uint32) {\n', '    for (uint32 i = 0; i < self.length; i++) {\n', '      if (self[i] == value) return i;\n', '    }\n', '    return uint32(- 1);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract PresidentElections {\n', '  address owner;\n', '\n', '  using SafeMath for uint;\n', '\n', '  struct Candidate {\n', '    uint32 id;\n', '    address owner;\n', '    uint256 votes;\n', '  }\n', '  uint end = 1521406800;\n', '  mapping(address => uint) votes;\n', '  mapping(uint32 => Candidate) candidates;\n', '  using Search for uint32[];\n', '  uint32[] candidate_ids;\n', '  uint constant price = 0.01 ether;\n', '  uint public create_price = 0.1 ether;\n', '  uint constant percent = 10;\n', '\n', '  enum Candidates {\n', '    NULL,\n', '    Baburin,\n', '    Grudinin,\n', '    Zhirinovsky,\n', '    Putin,\n', '    Sobchak,\n', '    Suraykin,\n', '    Titov,\n', '    Yavlinsky\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier isCandidate(uint32 candidate) {\n', '    require(candidates[candidate].id > 0);\n', '    _;\n', '  }\n', '\n', '  modifier isNotVoted() {\n', '    require(votes[msg.sender] == 0);\n', '    _;\n', '  }\n', '\n', '  modifier voteIsOn() {\n', '    require(now < end);\n', '    _;\n', '  }\n', '\n', '  function PresidentElections() public {\n', '    owner = msg.sender;\n', '    _add(uint32(Candidates.Baburin), owner);\n', '    _add(uint32(Candidates.Grudinin), owner);\n', '    _add(uint32(Candidates.Zhirinovsky), owner);\n', '    _add(uint32(Candidates.Putin), owner);\n', '    _add(uint32(Candidates.Sobchak), owner);\n', '    _add(uint32(Candidates.Suraykin), owner);\n', '    _add(uint32(Candidates.Titov), owner);\n', '    _add(uint32(Candidates.Yavlinsky), owner);\n', '  }\n', '\n', '  function _add(uint32 candidate, address sender) private {\n', '    require(candidates[candidate].id == 0);\n', '\n', '    candidates[candidate] = Candidate(candidate, sender, 0);\n', '    candidate_ids.push(candidate);\n', '  }\n', '\n', '  function isFinished() constant public returns (bool) {\n', '    return now > end;\n', '  }\n', '\n', '  function isVoted() constant public returns (bool) {\n', '    return votes[msg.sender] > 0;\n', '  }\n', '\n', '  function vote(uint32 candidate) public payable isCandidate(candidate) voteIsOn isNotVoted returns (bool) {\n', '    require(msg.value == price);\n', '\n', '    votes[msg.sender] = candidate;\n', '    candidates[candidate].votes += 1;\n', '\n', '    if( candidates[candidate].owner != owner ) {\n', '      owner.transfer(msg.value.mul(100 - percent).div(100));\n', '      candidates[candidate].owner.transfer(msg.value.mul(percent).div(100));\n', '    } else {\n', '      owner.transfer(msg.value);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function add(uint32 candidate) public payable voteIsOn returns (bool) {\n', '    require(msg.value == create_price);\n', '\n', '    _add(candidate, msg.sender);\n', '\n', '    owner.transfer(msg.value);\n', '\n', '    return true;\n', '  }\n', '\n', '  function getCandidates() public view returns (uint32[]) {\n', '    return candidate_ids;\n', '  }\n', '\n', '  function getVotes() public view returns (uint256[]) {\n', '    uint256[] memory v = new uint256[](candidate_ids.length);\n', '    for(uint i = 0; i < candidate_ids.length; i++ ) {\n', '      v[i] = candidates[candidate_ids[i]].votes;\n', '    }\n', '    return v;\n', '  }\n', '\n', '  function setCreatePrice(uint _price) public onlyOwner {\n', '    create_price = _price;\n', '  }\n', '}']
