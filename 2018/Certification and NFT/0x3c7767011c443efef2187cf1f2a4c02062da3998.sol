['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract CratePreSale is Ownable {\n', '    \n', '    // ------ STATE ------ \n', '    uint256 constant public MAX_CRATES_TO_SELL = 3900; // Max no. of robot crates to ever be sold\n', '    uint256 constant public PRESALE_END_TIMESTAMP = 1518699600; // End date for the presale - no purchases can be made after this date - Midnight 16 Feb 2018 UTC\n', '\n', '    uint256 public appreciationRateWei = 400000000000000;  \n', '    uint256 public currentPrice = appreciationRateWei; // initalise the price to the appreciation rate\n', '    uint32 public cratesSold;\n', '    \n', '    mapping (address => uint32) public userCrateCount; // store how many crates a user has bought\n', '    mapping (address => uint[]) public userToRobots; // store the DNA/robot information of bought crates\n', '    \n', '    // ------ EVENTS ------ \n', '    event LogCratePurchase( \n', '        address indexed _from,\n', '        uint256 _value,\n', '        uint32 _quantity\n', '        );\n', '\n', '\n', '    // ------ FUNCTIONS ------ \n', '    function getPrice() view public returns (uint256) {\n', '        return currentPrice;\n', '    }\n', '\n', '    function getRobotsForUser( address _user ) view public returns (uint[]) {\n', '        return userToRobots[_user];\n', '    }\n', '\n', '    function incrementPrice() private { \n', '        // Decrease the rate of increase of the crate price\n', '        // as the crates become more expensive\n', '        // to avoid runaway pricing\n', '        // (halving rate of increase at 0.1 ETH, 0.2 ETH, 0.3 ETH).\n', '        if ( currentPrice == 100000000000000000 ) {\n', '            appreciationRateWei = 200000000000000;\n', '        } else if ( currentPrice == 200000000000000000) {\n', '            appreciationRateWei = 100000000000000;\n', '        } else if (currentPrice == 300000000000000000) {\n', '            appreciationRateWei = 50000000000000;\n', '        }\n', '        currentPrice += appreciationRateWei;\n', '    }\n', '\n', '    function purchaseCrate() payable public {\n', '        require(now < PRESALE_END_TIMESTAMP); // Check presale is still ongoing\n', '        require(cratesSold < MAX_CRATES_TO_SELL); // Check max crates sold is less than hard limit\n', '        require(msg.value >= currentPrice); // Check buyer sent sufficient funds to purchase\n', '        if (msg.value > currentPrice) { //overpaid, return excess\n', '            msg.sender.transfer(msg.value-currentPrice);\n', '        }\n', '        userCrateCount[msg.sender] += 1;\n', '        cratesSold++;\n', '        incrementPrice();\n', '        userToRobots[msg.sender].push(genRandom());\n', '        LogCratePurchase(msg.sender, msg.value, 1);\n', '\n', '    }\n', '\n', '    // ROBOT FORMAT\n', '    // [3 digits - RARITY][2 digits - PART] * 4 (4 parts)\n', '    // e.g. [140][20][218][04]\n', '    // Presale exclusives are encoded by extending the range of the part by 1\n', '    // ie lamborghini will be the 23rd body. If 23 (or a multiple of it) is generated, a lamborghini will be awarded.\n', '    //RARITY INFORMATION:\n', '    //All parts are of equal rarity, except for presale exclusives.\n', '    //A three-digit modifier precedes each part, denoting whether it is of type\n', '    //normal, rare shadow, or legendary gold.\n', '    //Shadow has a 10% chance of applying for the presale (2% in game)\n', '    //Gold has a 5% chance of applying for the presale (1% in game).\n', '    function genRandom() private view returns (uint) {\n', '        uint rand = uint(keccak256(block.blockhash(block.number-1)));\n', '        return uint(rand % (10 ** 20));\n', '    }\n', '\n', '    //owner only withdrawal function for the presale\n', '    function withdraw() onlyOwner public {\n', '        owner.transfer(this.balance);\n', '    }\n', '}']