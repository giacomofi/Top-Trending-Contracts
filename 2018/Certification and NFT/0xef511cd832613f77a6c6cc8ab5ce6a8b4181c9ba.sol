['pragma solidity ^0.4.13;\n', '\n', '/*\n', 'Proxy Buyer\n', '========================\n', '*/\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract ICOBuyer {\n', '\n', '  // Emergency kill switch in case a critical bug is found.\n', '  address public developer = 0xF23B127Ff5a6a8b60CC4cbF937e5683315894DDA;\n', '  // The crowdsale address.  Settable by the developer.\n', '  address public sale = 0x0;\n', '  // The token address.  Settable by the developer.\n', '  ERC20 public token;\n', '  \n', '  // Allows the developer to set the crowdsale and token addresses.\n', '  function set_addresses(address _sale, address _token) {\n', '    // Only allow the developer to set the sale and token addresses.\n', '    require(msg.sender == developer);\n', '    // Only allow setting the addresses once.\n', '    // Set the crowdsale and token addresses.\n', '    sale = _sale;\n', '    token = ERC20(_token);\n', '  }\n', '  \n', '  \n', '  // Withdraws all ETH deposited or tokens purchased by the given user and rewards the caller.\n', '\n', '  \n', '  function withdrawToken(address _token){\n', '      require(msg.sender == developer);\n', '      require(token.transfer(developer, ERC20(_token).balanceOf(address(this))));\n', '  }\n', '  \n', '  function withdrawETH(){\n', '      require(msg.sender == developer);\n', '      developer.transfer(this.balance);\n', '  }\n', '  \n', '  // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\n', '  function buy(){\n', '    require(sale != 0x0);\n', '    require(sale.call.value(this.balance)());\n', '    \n', '  }\n', '  \n', '  function buyWithFunction(bytes4 methodId){\n', '      require(sale != 0x0);\n', '      require(sale.call.value(this.balance)(methodId));\n', '  }\n', '  \n', '  function buyWithAddress(address _ICO){\n', '      require(msg.sender == developer);\n', '      require(_ICO != 0x0);\n', '      require(_ICO.call.value(this.balance)());\n', '  }\n', '  \n', '  function buyWithAddressAndFunction(address _ICO, bytes4 methodId){\n', '      require(msg.sender == developer);\n', '      require(_ICO != 0x0);\n', '      require(_ICO.call.value(this.balance)(methodId));\n', '  }\n', '  \n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    \n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', '/*\n', 'Proxy Buyer\n', '========================\n', '*/\n', '\n', '// ERC20 Interface: https://github.com/ethereum/EIPs/issues/20\n', 'contract ERC20 {\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '}\n', '\n', 'contract ICOBuyer {\n', '\n', '  // Emergency kill switch in case a critical bug is found.\n', '  address public developer = 0xF23B127Ff5a6a8b60CC4cbF937e5683315894DDA;\n', '  // The crowdsale address.  Settable by the developer.\n', '  address public sale = 0x0;\n', '  // The token address.  Settable by the developer.\n', '  ERC20 public token;\n', '  \n', '  // Allows the developer to set the crowdsale and token addresses.\n', '  function set_addresses(address _sale, address _token) {\n', '    // Only allow the developer to set the sale and token addresses.\n', '    require(msg.sender == developer);\n', '    // Only allow setting the addresses once.\n', '    // Set the crowdsale and token addresses.\n', '    sale = _sale;\n', '    token = ERC20(_token);\n', '  }\n', '  \n', '  \n', '  // Withdraws all ETH deposited or tokens purchased by the given user and rewards the caller.\n', '\n', '  \n', '  function withdrawToken(address _token){\n', '      require(msg.sender == developer);\n', '      require(token.transfer(developer, ERC20(_token).balanceOf(address(this))));\n', '  }\n', '  \n', '  function withdrawETH(){\n', '      require(msg.sender == developer);\n', '      developer.transfer(this.balance);\n', '  }\n', '  \n', '  // Buys tokens in the crowdsale and rewards the caller, callable by anyone.\n', '  function buy(){\n', '    require(sale != 0x0);\n', '    require(sale.call.value(this.balance)());\n', '    \n', '  }\n', '  \n', '  function buyWithFunction(bytes4 methodId){\n', '      require(sale != 0x0);\n', '      require(sale.call.value(this.balance)(methodId));\n', '  }\n', '  \n', '  function buyWithAddress(address _ICO){\n', '      require(msg.sender == developer);\n', '      require(_ICO != 0x0);\n', '      require(_ICO.call.value(this.balance)());\n', '  }\n', '  \n', '  function buyWithAddressAndFunction(address _ICO, bytes4 methodId){\n', '      require(msg.sender == developer);\n', '      require(_ICO != 0x0);\n', '      require(_ICO.call.value(this.balance)(methodId));\n', '  }\n', '  \n', '  // Default function.  Called when a user sends ETH to the contract.\n', '  function () payable {\n', '    \n', '  }\n', '}']
