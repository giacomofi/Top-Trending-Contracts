['pragma solidity ^0.4.21;\n', '/**\n', ' * Changes by https://www.docademic.com/\n', ' */\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Destroyable is Ownable{\n', '    /**\n', '     * @notice Allows to destroy the contract and return the tokens to the owner.\n', '     */\n', '    function destroy() public onlyOwner{\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', 'interface Token {\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '\n', '    function balanceOf(address who) view external returns (uint256);\n', '}\n', '\n', 'contract Airdrop is Ownable, Destroyable {\n', '    using SafeMath for uint256;\n', '\n', '    /*\n', '     *   Structures\n', '     */\n', '    // Holder of tokens\n', '    struct Beneficiary {\n', '        uint256 balance;\n', '        uint256 airdrop;\n', '        bool isBeneficiary;\n', '    }\n', '\n', '    /*\n', '     *  State\n', '     */\n', '    bool public filled;\n', '    bool public airdropped;\n', '    uint256 public airdropLimit;\n', '    uint256 public currentCirculating;\n', '    uint256 public toVault;\n', '    address public vault;\n', '    address[] public addresses;\n', '    Token public token;\n', '    mapping(address => Beneficiary) public beneficiaries;\n', '\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event NewBeneficiary(address _beneficiary);\n', '    event SnapshotTaken(uint256 _totalBalance, uint256 _totalAirdrop, uint256 _toBurn,uint256 _numberOfBeneficiaries, uint256 _numberOfAirdrops);\n', '    event Airdropped(uint256 _totalAirdrop, uint256 _numberOfAirdrops);\n', '    event TokenChanged(address _prevToken, address _token);\n', '    event VaultChanged(address _prevVault, address _vault);\n', '    event AirdropLimitChanged(uint256 _prevLimit, uint256 _airdropLimit);\n', '    event CurrentCirculatingChanged(uint256 _prevCirculating, uint256 _currentCirculating);\n', '    event Cleaned(uint256 _numberOfBeneficiaries);\n', '    event Vaulted(uint256 _tokensBurned);\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier isNotBeneficiary(address _beneficiary) {\n', '        require(!beneficiaries[_beneficiary].isBeneficiary);\n', '        _;\n', '    }\n', '    modifier isBeneficiary(address _beneficiary) {\n', '        require(beneficiaries[_beneficiary].isBeneficiary);\n', '        _;\n', '    }\n', '    modifier isFilled() {\n', '        require(filled);\n', '        _;\n', '    }\n', '    modifier isNotFilled() {\n', '        require(!filled);\n', '        _;\n', '    }\n', '    modifier wasAirdropped() {\n', '        require(airdropped);\n', '        _;\n', '    }\n', '    modifier wasNotAirdropped() {\n', '        require(!airdropped);\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Behavior\n', '     */\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param _token The token address\n', '     * @param _airdropLimit The token limit by airdrop in wei\n', '     * @param _currentCirculating The current circulating tokens in wei\n', '     * @param _vault The address where tokens will be vaulted\n', '     */\n', '    function Airdrop(address _token, uint256 _airdropLimit, uint256 _currentCirculating, address _vault) public{\n', '        require(_token != address(0));\n', '        token = Token(_token);\n', '        airdropLimit = _airdropLimit;\n', '        currentCirculating = _currentCirculating;\n', '        vault = _vault;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the sender to register itself as a beneficiary for the airdrop.\n', '     */\n', '    function() payable public {\n', '        addBeneficiary(msg.sender);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the sender to register itself as a beneficiary for the airdrop.\n', '     */\n', '    function register() public {\n', '        addBeneficiary(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to register a beneficiary for the airdrop.\n', '     * @param _beneficiary The address of the beneficiary\n', '     */\n', '    function registerBeneficiary(address _beneficiary) public\n', '    onlyOwner {\n', '        addBeneficiary(_beneficiary);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to register beneficiaries for the airdrop.\n', '     * @param _beneficiaries The array of addresses\n', '     */\n', '    function registerBeneficiaries(address[] _beneficiaries) public\n', '    onlyOwner {\n', '        for (uint i = 0; i < _beneficiaries.length; i++) {\n', '            addBeneficiary(_beneficiaries[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Add a beneficiary for the airdrop.\n', '     * @param _beneficiary The address of the beneficiary\n', '     */\n', '    function addBeneficiary(address _beneficiary) private\n', '    isNotBeneficiary(_beneficiary) {\n', '        require(_beneficiary != address(0));\n', '        beneficiaries[_beneficiary] = Beneficiary({\n', '            balance : 0,\n', '            airdrop : 0,\n', '            isBeneficiary : true\n', '            });\n', '        addresses.push(_beneficiary);\n', '        emit NewBeneficiary(_beneficiary);\n', '    }\n', '\n', '    /**\n', '     * @dev Take the balance of all the beneficiaries.\n', '     */\n', '    function takeSnapshot() public\n', '    onlyOwner\n', '    isNotFilled\n', '    wasNotAirdropped {\n', '        uint256 totalBalance = 0;\n', '        uint256 totalAirdrop = 0;\n', '        uint256 airdrops = 0;\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            Beneficiary storage beneficiary = beneficiaries[addresses[i]];\n', '            beneficiary.balance = token.balanceOf(addresses[i]);\n', '            totalBalance = totalBalance.add(beneficiary.balance);\n', '            if (beneficiary.balance > 0) {\n', '                beneficiary.airdrop = (beneficiary.balance.mul(airdropLimit).div(currentCirculating));\n', '                totalAirdrop = totalAirdrop.add(beneficiary.airdrop);\n', '                airdrops = airdrops.add(1);\n', '            }\n', '        }\n', '        filled = true;\n', '        toVault = airdropLimit.sub(totalAirdrop);\n', '        emit SnapshotTaken(totalBalance, totalAirdrop, toVault, addresses.length, airdrops);\n', '    }\n', '\n', '    /**\n', '     * @dev Start the airdrop.\n', '     */\n', '    function airdropAndVault() public\n', '    onlyOwner\n', '    isFilled\n', '    wasNotAirdropped {\n', '        uint256 airdrops = 0;\n', '        uint256 totalAirdrop = 0;\n', '        for (uint256 i = 0; i < addresses.length; i++)\n', '        {\n', '            Beneficiary storage beneficiary = beneficiaries[addresses[i]];\n', '            if (beneficiary.airdrop > 0) {\n', '                require(token.transfer(addresses[i], beneficiary.airdrop));\n', '                totalAirdrop = totalAirdrop.add(beneficiary.airdrop);\n', '                airdrops = airdrops.add(1);\n', '            }\n', '        }\n', '        airdropped = true;\n', '        currentCirculating = currentCirculating.add(airdropLimit);\n', '        emit Airdropped(totalAirdrop, airdrops);\n', '\n', '        token.transfer(vault, toVault);\n', '        emit Vaulted(toVault);\n', '    }\n', '\n', '    /**\n', '     * @dev Reset all the balances to 0 and the state to false.\n', '     */\n', '    function clean() public\n', '    onlyOwner {\n', '        for (uint256 i = 0; i < addresses.length; i++)\n', '        {\n', '            Beneficiary storage beneficiary = beneficiaries[addresses[i]];\n', '            beneficiary.balance = 0;\n', '            beneficiary.airdrop = 0;\n', '        }\n', '        filled = false;\n', '        airdropped = false;\n', '        toVault = 0;\n', '        emit Cleaned(addresses.length);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to change the token address.\n', '     * @param _token New token address.\n', '     */\n', '    function changeToken(address _token) public\n', '    onlyOwner {\n', '        emit TokenChanged(address(token), _token);\n', '        token = Token(_token);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to change the vault address.\n', '     * @param _vault New vault address.\n', '     */\n', '    function changeVault(address _vault) public\n', '    onlyOwner {\n', '        emit VaultChanged(vault, _vault);\n', '        vault = _vault;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to change the token limit by airdrop.\n', '     * @param _airdropLimit The token limit by airdrop in wei.\n', '     */\n', '    function changeAirdropLimit(uint256 _airdropLimit) public\n', '    onlyOwner {\n', '        emit AirdropLimitChanged(airdropLimit, _airdropLimit);\n', '        airdropLimit = _airdropLimit;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to change the token limit by airdrop.\n', '     * @param _currentCirculating The current circulating tokens in wei.\n', '     */\n', '    function changeCurrentCirculating(uint256 _currentCirculating) public\n', '    onlyOwner {\n', '        emit CurrentCirculatingChanged(currentCirculating, _currentCirculating);\n', '        currentCirculating = _currentCirculating;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to flush the eth.\n', '     */\n', '    function flushEth() public onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to flush the tokens of the contract.\n', '     */\n', '    function flushTokens() public onlyOwner {\n', '        token.transfer(owner, token.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the owner to destroy the contract and return the tokens to the owner.\n', '     */\n', '    function destroy() public onlyOwner {\n', '        token.transfer(owner, token.balanceOf(address(this)));\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the token balance of the contract.\n', '     * @return _balance The token balance of this contract\n', '     */\n', '    function tokenBalance() view public returns (uint256 _balance) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Get the token balance of the beneficiary.\n', '     * @param _beneficiary The address of the beneficiary\n', '     * @return _balance The token balance of the beneficiary\n', '     */\n', '    function getBalanceAtSnapshot(address _beneficiary) view public returns (uint256 _balance) {\n', '        return beneficiaries[_beneficiary].balance / 1 ether;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the airdrop reward of the beneficiary.\n', '     * @param _beneficiary The address of the beneficiary\n', '     * @return _airdrop The token balance of the beneficiary\n', '     */\n', '    function getAirdropAtSnapshot(address _beneficiary) view public returns (uint256 _airdrop) {\n', '        return beneficiaries[_beneficiary].airdrop / 1 ether;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows a beneficiary to verify if he is already registered.\n', '     * @param _beneficiary The address of the beneficiary\n', '     * @return _isBeneficiary The boolean value\n', '     */\n', '    function amIBeneficiary(address _beneficiary) view public returns (bool _isBeneficiary) {\n', '        return beneficiaries[_beneficiary].isBeneficiary;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the number of beneficiaries.\n', '     * @return _length The number of beneficiaries\n', '     */\n', '    function beneficiariesLength() view public returns (uint256 _length) {\n', '        return addresses.length;\n', '    }\n', '}']