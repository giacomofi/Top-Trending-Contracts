['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Helps contracts guard agains reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>\n', ' * @notice If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract PriceUpdaterInterface {\n', '  enum Currency { ETH, BTC, WME, WMZ, WMR, WMX }\n', '\n', '  uint public decimalPrecision = 3;\n', '\n', '  mapping(uint => uint) public price;\n', '}\n', '\n', 'contract CrowdsaleInterface {\n', '  uint public rate;\n', '  uint public minimumAmount;\n', '\n', '  function externalBuyToken(address _beneficiary, PriceUpdaterInterface.Currency _currency, uint _amount, uint _tokens) external;\n', '}\n', '\n', 'contract MerchantControllerInterface {\n', '  mapping(uint => uint) public totalInvested;\n', '  mapping(uint => bool) public paymentId;\n', '\n', '  function calcPrice(PriceUpdaterInterface.Currency _currency, uint _tokens) public view returns(uint);\n', '  function buyTokens(address _beneficiary, PriceUpdaterInterface.Currency _currency, uint _amount, uint _tokens, uint _paymentId) external;\n', '}\n', '\n', 'contract MerchantController is MerchantControllerInterface, ReentrancyGuard, Ownable {\n', '  using SafeMath for uint;\n', '\n', '  PriceUpdaterInterface public priceUpdater;\n', '  CrowdsaleInterface public crowdsale;\n', '\n', '  constructor(PriceUpdaterInterface _priceUpdater, CrowdsaleInterface _crowdsale) public  {\n', '    priceUpdater = _priceUpdater;\n', '    crowdsale = _crowdsale;\n', '  }\n', '\n', '  function calcPrice(PriceUpdaterInterface.Currency _currency, uint _tokens) \n', '      public \n', '      view \n', '      returns(uint) \n', '  {\n', '    uint priceInWei = _tokens.mul(1 ether).div(crowdsale.rate());\n', '    if (_currency == PriceUpdaterInterface.Currency.ETH) {\n', '      return priceInWei;\n', '    }\n', '    uint etherPrice = priceUpdater.price(uint(PriceUpdaterInterface.Currency.ETH));\n', '    uint priceInEur = priceInWei.mul(etherPrice).div(1 ether);\n', '\n', '    uint currencyPrice = priceUpdater.price(uint(_currency));\n', '    uint tokensPrice = priceInEur.mul(currencyPrice);\n', '    \n', '    return tokensPrice;\n', '  }\n', '\n', '  function buyTokens(\n', '    address _beneficiary,\n', '    PriceUpdaterInterface.Currency _currency,\n', '    uint _amount,\n', '    uint _tokens,\n', '    uint _paymentId)\n', '      external\n', '      onlyOwner\n', '      nonReentrant\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_currency != PriceUpdaterInterface.Currency.ETH);\n', '    require(_amount != 0);\n', '    require(_tokens >= crowdsale.minimumAmount());\n', '    require(_paymentId != 0);\n', '    require(!paymentId[_paymentId]);\n', '    paymentId[_paymentId] = true;\n', '    crowdsale.externalBuyToken(_beneficiary, _currency, _amount, _tokens);\n', '  }\n', '}']