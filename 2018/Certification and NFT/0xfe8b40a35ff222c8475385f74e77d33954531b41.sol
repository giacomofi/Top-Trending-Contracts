['pragma solidity ^0.4.24;\n', '\n', '// ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '//                     ___           ___           ___                    __      \n', '//       ___          /  /\\         /  /\\         /  /\\                  |  |\\    \n', '//      /__/\\        /  /::\\       /  /::\\       /  /::|                 |  |:|   \n', '//      \\  \\:\\      /  /:/\\:\\     /  /:/\\:\\     /  /:|:|                 |  |:|   \n', '//       \\__\\:\\    /  /::\\ \\:\\   /  /::\\ \\:\\   /  /:/|:|__               |__|:|__ \n', '//       /  /::\\  /__/:/\\:\\ \\:\\ /__/:/\\:\\_\\:\\ /__/:/_|::::\\          ____/__/::::\\\n', '//      /  /:/\\:\\ \\  \\:\\ \\:\\_\\/ \\__\\/  \\:\\/:/ \\__\\/  /~~/:/          \\__\\::::/~~~~\n', '//     /  /:/__\\/  \\  \\:\\ \\:\\        \\__\\::/        /  /:/              |~~|:|    \n', '//    /__/:/        \\  \\:\\_\\/        /  /:/        /  /:/               |  |:|    \n', '//    \\__\\/          \\  \\:\\         /__/:/        /__/:/                |__|:|    \n', '//                    \\__\\/         \\__\\/         \\__\\/                  \\__\\|    \n', '//  ______   ______   ______   _____    _    _   ______  ______  _____ \n', '// | |  | \\ | |  | \\ / |  | \\ | | \\ \\  | |  | | | |     | |     | | \\ \\ \n', '// | |__|_/ | |__| | | |  | | | |  | | | |  | | | |     | |---- | |  | |\n', '// |_|      |_|  \\_\\ \\_|__|_/ |_|_/_/  \\_|__|_| |_|____ |_|____ |_|_/_/ \n', '// \n', '// TEAM X All Rights Received. http://teamx.club \n', '// This product is protected under license.  Any unauthorized copy, modification, or use without \n', '// express written consent from the creators is prohibited.\n', '// Any cooperation Please email: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f5869087839c9690b5819094988ddb96998097">[email&#160;protected]</a>\n', '// ////////////////////////////////////////////////////////////////////////////////////////////////////\n', '\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '//=========================================================...\n', '// |\\/| _ . _   /~` _  _ _|_ _ _  __|_  .\n', '// |  |(_||| |  \\_,(_)| | | | (_|(_ |   . Main Contract\n', '//=========================================================    \n', 'contract XToken is Owned {\n', '    using SafeMath for uint256;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '    mapping(address => uint256) balances;\n', '\n', '    string public name = "XToken";\n', '    string public symbol = "XT";\n', '    uint8 public decimals = 18;\n', '    uint256 private fee_ = 5; // 5% fee to buy and sell\n', '\n', '    uint256 public totalSupply = 100000000 * (1 ether);\n', '    uint256 public tokenMarketPool = 0; // no shares\n', '    uint256 public poolPrice = 1 finney;\n', '\n', '\n', '    //=========================================================...\n', '    //  _ _  _  __|_ _   __|_ _  _\n', '    // (_(_)| |_\\ | ||_|(_ | (_)| \n', '    //=========================================================\n', '    constructor () public {\n', '        balances[msg.sender] = 30000000 * (1 ether); // keeps 30%\n', '        tokenMarketPool = totalSupply.sub(balances[msg.sender]);\n', '    }\n', '\n', '    //=========================================================...\n', '    //  _    |_ |. _   |`    _  __|_. _  _  _  .\n', '    // |_)|_||_)||(_  ~|~|_|| |(_ | |(_)| |_\\  . public functions\n', '    //=|=======================================================\n', '    function () public payable {\n', '        if (!isContract(msg.sender)) {\n', '            revert("Can not Send Eth directly to this token");\n', '        }\n', '    }\n', '\n', '    function buy() public payable {\n', '        uint256 ethAmount = msg.value;\n', '        uint256 taxed = ethAmount.sub(ethAmount.mul(fee_).div(100));\n', '        uint256 tokenAmount = taxed.mul(1 ether).div(poolPrice);\n', '\n', '        require(tokenMarketPool >= tokenAmount, "No enough token in market pool");\n', '        tokenMarketPool = tokenMarketPool.sub(tokenAmount);\n', '        balances[msg.sender] = balanceOf(msg.sender).add(tokenAmount);\n', '    }\n', '\n', '    function sell(uint256 tokenAmount) public {\n', '        require(balanceOf(msg.sender) >= tokenAmount, "No enough token");\n', '        uint256 sellPrice = getSellPrice();\n', '        uint256 soldEth = tokenAmount.mul(sellPrice).div(1 ether);\n', '\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(tokenAmount);\n', '        tokenMarketPool = tokenMarketPool.add(tokenAmount);\n', '        uint256 gotEth = soldEth.sub(soldEth.mul(fee_).div(100));\n', '        msg.sender.transfer(gotEth);\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data, string _custom_fallback) public returns (bool success) {\n', '        if (isContract(_to)) {\n', '            require(balanceOf(msg.sender) >= _value, "no enough token");\n', '            balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '            balances[_to] = balanceOf(_to).add(_value);\n', '            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, _data);\n', '        } else {\n', '            return transferToAddress(_to, _value, _data);\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        bytes memory empty;\n', '        if (isContract(_to)) {\n', '            return transferToContract(_to, _value, empty);\n', '        } else {\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '    }\n', '\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    //=========================================================...\n', '    //   . _      |`    _  __|_. _  _  _  .\n', '    // \\/|(/_VV  ~|~|_|| |(_ | |(_)| |_\\  . view functions\n', '    //=========================================================\n', '    function getShareToken() public view returns (uint256) {\n', '        return totalSupply.sub(tokenMarketPool);\n', '    }\n', '\n', '    function getSellPrice() public view returns (uint256) {\n', '        return address(this).balance.mul(1 ether).div(getShareToken());\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    //=========================================================...\n', '    //  _  _.   _ _|_ _    |`    _  __|_. _  _  _  .\n', '    // |_)| |\\/(_| | (/_  ~|~|_|| |(_ | |(_)| |_\\  . private functions\n', '    //=|=======================================================\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '    function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        require (balanceOf(msg.sender) >= _value, "No Enough Token");\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '\n', '    function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\n', '        require (balanceOf(msg.sender) >= _value, "No Enough Token");\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '        balances[_to] = balanceOf(_to).add(_value);\n', '        ContractReceiver receiver = ContractReceiver(_to);\n', '        receiver.tokenFallback(msg.sender, _value, _data);\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '        return true;\n', '    }\n', '}\n', '\n', '//=========================================================...\n', '// . _ _|_ _  _|` _  _ _ \n', '// || | | (/_|~|~(_|(_(/_\n', '//=========================================================\n', 'interface ContractReceiver {\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) external;\n', '}\n', '\n', 'interface ERC20Interface {\n', '    function transfer(address _to, uint256 _value) external returns (bool);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']