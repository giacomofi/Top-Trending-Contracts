['pragma solidity ^0.4.18;\n', '\n', '/**************************\n', ' * SATURN ICO smart contract *\n', ' **************************/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '\n', '  function name() constant returns (string _name);\n', '  function symbol() constant returns (string _symbol);\n', '  function decimals() constant returns (uint8 _decimals);\n', '  function totalSupply() constant returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) returns (bool ok);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ContractReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', 'contract ERC223Token is ERC223 {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '\n', '  // Function to access name of token .\n', '  function name() constant returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() constant returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() constant returns (uint8 _decimals) {\n', '      return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() constant returns (uint256 _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '\n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '}\n', '\n', '//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        if(length>0) {\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver reciever = ContractReceiver(_to);\n', '    reciever.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract TokenSale is ContractReceiver {\n', '  using SafeMath for uint256;\n', '\n', '  bool    public active = false;\n', '  address public tokenAddress;\n', '  uint256 public hardCap;\n', '  uint256 public sold;\n', '\n', '  // 1 eth = 50,000 SATURN\n', '  uint256 private priceDiv = 2000000000;\n', '  address private stn;\n', '  address private owner;\n', '  address private treasury;\n', '\n', '  struct Ref {\n', '    uint256 amount;\n', '    uint256 rewardDiv;\n', '    uint256 etherAmount;\n', '  }\n', '\n', '  mapping(address => Ref) private referrals;\n', '\n', '  event Activated(uint256 time);\n', '  event Finished(uint256 time);\n', '  event Purchase(address indexed purchaser, uint256 amount);\n', '  event Referral(address indexed referrer, uint256 amount);\n', '\n', '  function TokenSale(address token, address presaleToken, address ethRecepient, uint256 cap) public {\n', '    tokenAddress  = token;\n', '    stn           = presaleToken;\n', '    owner         = msg.sender;\n', '    treasury      = ethRecepient;\n', '    hardCap       = cap;\n', '  }\n', '\n', '  function tokenFallback(address _from, uint _value, bytes /* _data */) public {\n', '    if (active && msg.sender == stn) {\n', '      stnExchange(_from, _value);\n', '    } else {\n', '      if (msg.sender != tokenAddress) { revert(); }\n', '      if (active) { revert(); }\n', '      if (_value != hardCap) { revert(); }\n', '\n', '      active = true;\n', '      Activated(now);\n', '    }\n', '  }\n', '\n', '  function stnExchange(address buyer, uint256 value) private {\n', '    uint256 purchasedAmount = value.mul(50000);\n', '    if (purchasedAmount == 0) { revert(); } // not enough STN sent\n', '    if (purchasedAmount > hardCap - sold) { revert(); } // too much STN sent\n', '\n', '    sold += purchasedAmount;\n', '\n', '    ERC223 token = ERC223(tokenAddress);\n', '    token.transfer(buyer, purchasedAmount);\n', '    Purchase(buyer, purchasedAmount);\n', '  }\n', '\n', '  function refAmount(address user) constant public returns (uint256 amount) {\n', '    return referrals[user].amount;\n', '  }\n', '\n', '  function refPercentage(address user) constant public returns (uint256 percentage) {\n', '    uint256 rewardDiv = referrals[user].rewardDiv;\n', '    if (rewardDiv == 0)   { return 1; }\n', '    if (rewardDiv == 100) { return 1; }\n', '    if (rewardDiv == 50)  { return 2; }\n', '    if (rewardDiv == 20)  { return 5; }\n', '    if (rewardDiv == 10)  { return 10; }\n', '  }\n', '\n', '  function () external payable {\n', '    processPurchase(0x0);\n', '  }\n', '\n', '  function processPurchase(address referrer) payable public {\n', '    if (!active) { revert(); }\n', '    if (msg.value == 0) { revert(); }\n', '\n', '    uint256 purchasedAmount = msg.value.div(priceDiv);\n', '    if (purchasedAmount == 0) { revert(); } // not enough ETH sent\n', '    if (purchasedAmount > hardCap - sold) { revert(); } // too much ETH sent\n', '\n', '    sold += purchasedAmount;\n', '    treasury.transfer(msg.value);\n', '\n', '    ERC223 token = ERC223(tokenAddress);\n', '    token.transfer(msg.sender, purchasedAmount);\n', '    Purchase(msg.sender, purchasedAmount);\n', '    processReferral(referrer, purchasedAmount, msg.value);\n', '  }\n', '\n', '  function processReferral(address referrer, uint256 tokenAmount, uint256 etherAmount) private returns (bool success) {\n', '    if (referrer == 0x0) { return true; }\n', '    Ref memory ref = referrals[referrer];\n', '    if (ref.rewardDiv == 0) { ref.rewardDiv = 100; } // on your first referral you get 1%\n', '    uint256 referralAmount = tokenAmount.div(ref.rewardDiv);\n', '    if (referralAmount == 0) { return true; }\n', '    // cannot pay more than the contract has itself\n', '    if (referralAmount > hardCap - sold) { referralAmount = hardCap - sold; }\n', '    ref.amount = ref.amount.add(referralAmount);\n', '    ref.etherAmount = ref.etherAmount.add(etherAmount);\n', '\n', '    // ugly block of code that handles variable referral commisions\n', '    if (ref.etherAmount > 5 ether)   { ref.rewardDiv = 50; } // 2% from 5 eth\n', '    if (ref.etherAmount > 10 ether)  { ref.rewardDiv = 20; } // 5% from 10 eth\n', '    if (ref.etherAmount > 100 ether) { ref.rewardDiv = 10; } // 10% from 100 eth\n', '    // end referral updates\n', '\n', '    sold += referralAmount;\n', '    referrals[referrer] = ref; // update the mapping and store our changes\n', '    ERC223 token = ERC223(tokenAddress);\n', '    token.transfer(referrer, referralAmount);\n', '    Referral(referrer, referralAmount);\n', '    return true;\n', '  }\n', '\n', '  function endSale() public {\n', '    // only the creator of the smart contract can end the crowdsale\n', '    if (msg.sender != owner) { revert(); }\n', '    // can only stop an active crowdsale\n', '    if (!active) { revert(); }\n', '    _end();\n', '  }\n', '\n', '  function _end() private {\n', '    // if there are any tokens remaining - return them to the treasury\n', '    if (sold < hardCap) {\n', '      ERC223 token = ERC223(tokenAddress);\n', '      token.transfer(treasury, hardCap.sub(sold));\n', '    }\n', '    active = false;\n', '    Finished(now);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**************************\n', ' * SATURN ICO smart contract *\n', ' **************************/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ERC223 {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) constant returns (uint);\n', '\n', '  function name() constant returns (string _name);\n', '  function symbol() constant returns (string _symbol);\n', '  function decimals() constant returns (uint8 _decimals);\n', '  function totalSupply() constant returns (uint256 _supply);\n', '\n', '  function transfer(address to, uint value) returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) returns (bool ok);\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event ERC223Transfer(address indexed _from, address indexed _to, uint256 _value, bytes _data);\n', '}\n', '\n', 'contract ContractReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '\n', 'contract ERC223Token is ERC223 {\n', '  using SafeMath for uint;\n', '\n', '  mapping(address => uint) balances;\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '\n', '  // Function to access name of token .\n', '  function name() constant returns (string _name) {\n', '      return name;\n', '  }\n', '  // Function to access symbol of token .\n', '  function symbol() constant returns (string _symbol) {\n', '      return symbol;\n', '  }\n', '  // Function to access decimals of token .\n', '  function decimals() constant returns (uint8 _decimals) {\n', '      return decimals;\n', '  }\n', '  // Function to access total supply of tokens .\n', '  function totalSupply() constant returns (uint256 _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '\n', '  // Function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) returns (bool success) {\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, _data);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, _data);\n', '    }\n', '}\n', '\n', '  // Standard function transfer similar to ERC20 transfer with no _data .\n', '  // Added due to backwards compatibility reasons .\n', '  function transfer(address _to, uint _value) returns (bool success) {\n', '\n', '    //standard function transfer similar to ERC20 transfer with no _data\n', '    //added due to backwards compatibility reasons\n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '        return transferToContract(_to, _value, empty);\n', '    }\n', '    else {\n', '        return transferToAddress(_to, _value, empty);\n', '    }\n', '}\n', '\n', '//assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private returns (bool is_contract) {\n', '      uint length;\n', '      assembly {\n', '            //retrieve the size of the code on target address, this needs assembly\n', '            length := extcodesize(_addr)\n', '        }\n', '        if(length>0) {\n', '            return true;\n', '        }\n', '        else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '  //function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  //function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    ContractReceiver reciever = ContractReceiver(_to);\n', '    reciever.tokenFallback(msg.sender, _value, _data);\n', '    Transfer(msg.sender, _to, _value);\n', '    ERC223Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '\n', '  function balanceOf(address _owner) constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract TokenSale is ContractReceiver {\n', '  using SafeMath for uint256;\n', '\n', '  bool    public active = false;\n', '  address public tokenAddress;\n', '  uint256 public hardCap;\n', '  uint256 public sold;\n', '\n', '  // 1 eth = 50,000 SATURN\n', '  uint256 private priceDiv = 2000000000;\n', '  address private stn;\n', '  address private owner;\n', '  address private treasury;\n', '\n', '  struct Ref {\n', '    uint256 amount;\n', '    uint256 rewardDiv;\n', '    uint256 etherAmount;\n', '  }\n', '\n', '  mapping(address => Ref) private referrals;\n', '\n', '  event Activated(uint256 time);\n', '  event Finished(uint256 time);\n', '  event Purchase(address indexed purchaser, uint256 amount);\n', '  event Referral(address indexed referrer, uint256 amount);\n', '\n', '  function TokenSale(address token, address presaleToken, address ethRecepient, uint256 cap) public {\n', '    tokenAddress  = token;\n', '    stn           = presaleToken;\n', '    owner         = msg.sender;\n', '    treasury      = ethRecepient;\n', '    hardCap       = cap;\n', '  }\n', '\n', '  function tokenFallback(address _from, uint _value, bytes /* _data */) public {\n', '    if (active && msg.sender == stn) {\n', '      stnExchange(_from, _value);\n', '    } else {\n', '      if (msg.sender != tokenAddress) { revert(); }\n', '      if (active) { revert(); }\n', '      if (_value != hardCap) { revert(); }\n', '\n', '      active = true;\n', '      Activated(now);\n', '    }\n', '  }\n', '\n', '  function stnExchange(address buyer, uint256 value) private {\n', '    uint256 purchasedAmount = value.mul(50000);\n', '    if (purchasedAmount == 0) { revert(); } // not enough STN sent\n', '    if (purchasedAmount > hardCap - sold) { revert(); } // too much STN sent\n', '\n', '    sold += purchasedAmount;\n', '\n', '    ERC223 token = ERC223(tokenAddress);\n', '    token.transfer(buyer, purchasedAmount);\n', '    Purchase(buyer, purchasedAmount);\n', '  }\n', '\n', '  function refAmount(address user) constant public returns (uint256 amount) {\n', '    return referrals[user].amount;\n', '  }\n', '\n', '  function refPercentage(address user) constant public returns (uint256 percentage) {\n', '    uint256 rewardDiv = referrals[user].rewardDiv;\n', '    if (rewardDiv == 0)   { return 1; }\n', '    if (rewardDiv == 100) { return 1; }\n', '    if (rewardDiv == 50)  { return 2; }\n', '    if (rewardDiv == 20)  { return 5; }\n', '    if (rewardDiv == 10)  { return 10; }\n', '  }\n', '\n', '  function () external payable {\n', '    processPurchase(0x0);\n', '  }\n', '\n', '  function processPurchase(address referrer) payable public {\n', '    if (!active) { revert(); }\n', '    if (msg.value == 0) { revert(); }\n', '\n', '    uint256 purchasedAmount = msg.value.div(priceDiv);\n', '    if (purchasedAmount == 0) { revert(); } // not enough ETH sent\n', '    if (purchasedAmount > hardCap - sold) { revert(); } // too much ETH sent\n', '\n', '    sold += purchasedAmount;\n', '    treasury.transfer(msg.value);\n', '\n', '    ERC223 token = ERC223(tokenAddress);\n', '    token.transfer(msg.sender, purchasedAmount);\n', '    Purchase(msg.sender, purchasedAmount);\n', '    processReferral(referrer, purchasedAmount, msg.value);\n', '  }\n', '\n', '  function processReferral(address referrer, uint256 tokenAmount, uint256 etherAmount) private returns (bool success) {\n', '    if (referrer == 0x0) { return true; }\n', '    Ref memory ref = referrals[referrer];\n', '    if (ref.rewardDiv == 0) { ref.rewardDiv = 100; } // on your first referral you get 1%\n', '    uint256 referralAmount = tokenAmount.div(ref.rewardDiv);\n', '    if (referralAmount == 0) { return true; }\n', '    // cannot pay more than the contract has itself\n', '    if (referralAmount > hardCap - sold) { referralAmount = hardCap - sold; }\n', '    ref.amount = ref.amount.add(referralAmount);\n', '    ref.etherAmount = ref.etherAmount.add(etherAmount);\n', '\n', '    // ugly block of code that handles variable referral commisions\n', '    if (ref.etherAmount > 5 ether)   { ref.rewardDiv = 50; } // 2% from 5 eth\n', '    if (ref.etherAmount > 10 ether)  { ref.rewardDiv = 20; } // 5% from 10 eth\n', '    if (ref.etherAmount > 100 ether) { ref.rewardDiv = 10; } // 10% from 100 eth\n', '    // end referral updates\n', '\n', '    sold += referralAmount;\n', '    referrals[referrer] = ref; // update the mapping and store our changes\n', '    ERC223 token = ERC223(tokenAddress);\n', '    token.transfer(referrer, referralAmount);\n', '    Referral(referrer, referralAmount);\n', '    return true;\n', '  }\n', '\n', '  function endSale() public {\n', '    // only the creator of the smart contract can end the crowdsale\n', '    if (msg.sender != owner) { revert(); }\n', '    // can only stop an active crowdsale\n', '    if (!active) { revert(); }\n', '    _end();\n', '  }\n', '\n', '  function _end() private {\n', '    // if there are any tokens remaining - return them to the treasury\n', '    if (sold < hardCap) {\n', '      ERC223 token = ERC223(tokenAddress);\n', '      token.transfer(treasury, hardCap.sub(sold));\n', '    }\n', '    active = false;\n', '    Finished(now);\n', '  }\n', '}']
