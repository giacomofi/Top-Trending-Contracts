['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract GigERC20 is StandardToken, Ownable {\n', '    /* Public variables of the token */\n', '    uint256 public creationBlock;\n', '\n', '    uint8 public decimals;\n', '\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    string public standard;\n', '\n', '    bool public locked;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function GigERC20(\n', '        uint256 _totalSupply,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transferAllSupplyToOwner,\n', '        bool _locked\n', '    ) public {\n', '        standard = &#39;ERC20 0.1&#39;;\n', '        locked = _locked;\n', '        totalSupply_ = _totalSupply;\n', '\n', '        if (_transferAllSupplyToOwner) {\n', '            balances[msg.sender] = totalSupply_;\n', '        } else {\n', '            balances[this] = totalSupply_;\n', '        }\n', '        name = _tokenName;\n', '        // Set the name for display purposes\n', '        symbol = _tokenSymbol;\n', '        // Set the symbol for display purposes\n', '        decimals = _decimalUnits;\n', '        // Amount of decimals for display purposes\n', '        creationBlock = block.number;\n', '    }\n', '\n', '    function setLocked(bool _locked) public onlyOwner {\n', '        locked = _locked;\n', '    }\n', '\n', '    /* public methods */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(locked == false);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/*\n', 'This contract manages the minters and the modifier to allow mint to happen only if called by minters\n', 'This contract contains basic minting functionality though\n', '*/\n', 'contract MintingERC20 is GigERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    //Variables\n', '    mapping (address => bool) public minters;\n', '\n', '    uint256 public maxSupply;\n', '\n', '    //Modifiers\n', '    modifier onlyMinters () {\n', '        require(true == minters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function MintingERC20(\n', '        uint256 _initialSupply,\n', '        uint256 _maxSupply,\n', '        string _tokenName,\n', '        uint8 _decimals,\n', '        string _symbol,\n', '        bool _transferAllSupplyToOwner,\n', '        bool _locked\n', '    )\n', '        public GigERC20(_initialSupply, _tokenName, _decimals, _symbol, _transferAllSupplyToOwner, _locked)\n', '    {\n', '        standard = &#39;MintingERC20 0.1&#39;;\n', '        minters[msg.sender] = true;\n', '        maxSupply = _maxSupply;\n', '    }\n', '\n', '    function addMinter(address _newMinter) public onlyOwner {\n', '        minters[_newMinter] = true;\n', '    }\n', '\n', '    function removeMinter(address _minter) public onlyOwner {\n', '        minters[_minter] = false;\n', '    }\n', '\n', '    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n', '        if (true == locked) {\n', '            return uint256(0);\n', '        }\n', '\n', '        if (_amount == uint256(0)) {\n', '            return uint256(0);\n', '        }\n', '\n', '        if (totalSupply_.add(_amount) > maxSupply) {\n', '            return uint256(0);\n', '        }\n', '\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_addr] = balances[_addr].add(_amount);\n', '        Transfer(address(0), _addr, _amount);\n', '\n', '        return _amount;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/*\n', '    Tests:\n', '    - check that created token has correct name, symbol, decimals, locked, maxSupply\n', '    - check that setPrivateSale updates privateSale, and not affects crowdSaleEndTime\n', '    - check that setCrowdSale updates crowdSale, and changes crowdSaleEndTime\n', '    - check that trasnferFrom, approve, increaseApproval, decreaseApproval are forbidden to call before end of ICO\n', '    - check that burn is not allowed to call before end of CrowdSale\n', '    - check that increaseLockedBalance only increases investor locked amount\n', '    - check that isTransferAllowed failed if transferFrozen\n', '    - check that isTransferAllowed failed if user has not enough unlocked balance\n', '    - check that isTransferAllowed failed if user has not enough unlocked balance, after transfering enough tokens balance\n', '    - check that isTransferAllowed succeed if user has enough unlocked balance\n', '    - check that isTransferAllowed succeed if user has enough unlocked balance, after transfering enough tokens balance\n', '*/\n', '\n', 'contract GigToken is MintingERC20 {\n', '    SellableToken public crowdSale; // Pre ICO & ICO\n', '    SellableToken public privateSale;\n', '\n', '    bool public transferFrozen = false;\n', '\n', '    uint256 public crowdSaleEndTime;\n', '\n', '    mapping(address => uint256) public lockedBalancesReleasedAfterOneYear;\n', '\n', '    modifier onlyCrowdSale() {\n', '        require(crowdSale != address(0) && msg.sender == address(crowdSale));\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlySales() {\n', '        require((privateSale != address(0) && msg.sender == address(privateSale)) ||\n', '            (crowdSale != address(0) && msg.sender == address(crowdSale)));\n', '\n', '        _;\n', '    }\n', '\n', '    event MaxSupplyBurned(uint256 burnedTokens);\n', '\n', '    function GigToken(bool _locked) public\n', '        MintingERC20(0, maxSupply, &#39;GigBit&#39;, 18, &#39;GBTC&#39;, false, _locked)\n', '    {\n', '        standard = &#39;GBTC 0.1&#39;;\n', '\n', '        maxSupply = uint256(1000000000).mul(uint256(10) ** decimals);\n', '    }\n', '\n', '    function setCrowdSale(address _crowdSale) public onlyOwner {\n', '        require(_crowdSale != address(0));\n', '\n', '        crowdSale = SellableToken(_crowdSale);\n', '\n', '        crowdSaleEndTime = crowdSale.endTime();\n', '    }\n', '\n', '    function setPrivateSale(address _privateSale) public onlyOwner {\n', '        require(_privateSale != address(0));\n', '\n', '        privateSale = SellableToken(_privateSale);\n', '    }\n', '\n', '    function freezing(bool _transferFrozen) public onlyOwner {\n', '        transferFrozen = _transferFrozen;\n', '    }\n', '\n', '    function isTransferAllowed(address _from, uint256 _value) public view returns (bool status) {\n', '        uint256 senderBalance = balanceOf(_from);\n', '        if (transferFrozen == true || senderBalance < _value) {\n', '            return false;\n', '        }\n', '\n', '        uint256 lockedBalance = lockedBalancesReleasedAfterOneYear[_from];\n', '\n', '        // check if holder tries to transfer more than locked tokens\n', '    if (lockedBalance > 0 && senderBalance.sub(_value) < lockedBalance) {\n', '            uint256 unlockTime = crowdSaleEndTime + 1 years;\n', '\n', '            // fail if unlock time is not come\n', '            if (crowdSaleEndTime == 0 || block.timestamp < unlockTime) {\n', '                return false;\n', '            }\n', '\n', '            uint256 secsFromUnlock = block.timestamp.sub(unlockTime);\n', '\n', '            // number of months over from unlock\n', '            uint256 months = secsFromUnlock / 30 days;\n', '\n', '            if (months > 12) {\n', '                months = 12;\n', '            }\n', '\n', '            uint256 tokensPerMonth = lockedBalance / 12;\n', '\n', '            uint256 unlockedBalance = tokensPerMonth.mul(months);\n', '\n', '            uint256 actualLockedBalance = lockedBalance.sub(unlockedBalance);\n', '\n', '            if (senderBalance.sub(_value) < actualLockedBalance) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        if (block.timestamp < crowdSaleEndTime &&\n', '            crowdSale != address(0) &&\n', '            crowdSale.isTransferAllowed(_from, _value) == false\n', '        ) {\n', '            return false;\n', '        }\n', '\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        require(isTransferAllowed(msg.sender, _value));\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        // transferFrom & approve are disabled before end of ICO\n', '        require((crowdSaleEndTime <= block.timestamp) && isTransferAllowed(_from, _value));\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // transferFrom & approve are disabled before end of ICO\n', '\n', '        require(crowdSaleEndTime <= block.timestamp);\n', '\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        // transferFrom & approve are disabled before end of ICO\n', '\n', '        require(crowdSaleEndTime <= block.timestamp);\n', '\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        // transferFrom & approve are disabled before end of ICO\n', '\n', '        require(crowdSaleEndTime <= block.timestamp);\n', '\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function increaseLockedBalance(address _address, uint256 _tokens) public onlySales {\n', '        lockedBalancesReleasedAfterOneYear[_address] =\n', '            lockedBalancesReleasedAfterOneYear[_address].add(_tokens);\n', '    }\n', '\n', '    // burn tokens if soft cap is not reached\n', '    function burnInvestorTokens(\n', '        address _address,\n', '        uint256 _amount\n', '    ) public onlyCrowdSale returns (uint256) {\n', '        require(block.timestamp > crowdSaleEndTime);\n', '\n', '        require(_amount <= balances[_address]);\n', '\n', '        balances[_address] = balances[_address].sub(_amount);\n', '\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '\n', '        Transfer(_address, address(0), _amount);\n', '\n', '        return _amount;\n', '    }\n', '\n', '    // decrease max supply of tokens that are not sold\n', '    function burnUnsoldTokens(uint256 _amount) public onlyCrowdSale {\n', '        require(block.timestamp > crowdSaleEndTime);\n', '\n', '        maxSupply = maxSupply.sub(_amount);\n', '\n', '        MaxSupplyBurned(_amount);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Multivest is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /* public variables */\n', '    mapping (address => bool) public allowedMultivests;\n', '\n', '    /* events */\n', '    event MultivestSet(address multivest);\n', '\n', '    event MultivestUnset(address multivest);\n', '\n', '    event Contribution(address holder, uint256 value, uint256 tokens);\n', '\n', '    modifier onlyAllowedMultivests(address _addresss) {\n', '        require(allowedMultivests[_addresss] == true);\n', '        _;\n', '    }\n', '\n', '    /* constructor */\n', '    function Multivest() public {}\n', '\n', '    function setAllowedMultivest(address _address) public onlyOwner {\n', '        allowedMultivests[_address] = true;\n', '        MultivestSet(_address);\n', '    }\n', '\n', '    function unsetAllowedMultivest(address _address) public onlyOwner {\n', '        allowedMultivests[_address] = false;\n', '        MultivestUnset(_address);\n', '    }\n', '\n', '    function multivestBuy(address _address, uint256 _value) public onlyAllowedMultivests(msg.sender) {\n', '        require(buy(_address, _value) == true);\n', '    }\n', '\n', '    function multivestBuy(\n', '        address _address,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s\n', '    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\n', '        require(_address == msg.sender && buy(msg.sender, msg.value) == true);\n', '    }\n', '\n', '    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {\n', '        bytes memory prefix = &#39;\\x19Ethereum Signed Message:\\n32&#39;;\n', '\n', '        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\n', '    }\n', '\n', '    function buy(address _address, uint256 _value) internal returns (bool);\n', '\n', '}\n', '\n', '\n', '\n', 'contract SellableToken is Multivest {\n', '    uint256 public constant MONTH_IN_SEC = 2629743;\n', '    GigToken public token;\n', '\n', '    uint256 public minPurchase = 100 * 10 ** 5;\n', '    uint256 public maxPurchase;\n', '\n', '    uint256 public softCap;\n', '    uint256 public hardCap;\n', '\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    uint256 public maxTokenSupply;\n', '\n', '    uint256 public soldTokens;\n', '\n', '    uint256 public collectedEthers;\n', '\n', '    address public etherHolder;\n', '\n', '    uint256 public collectedUSD;\n', '\n', '    uint256 public etherPriceInUSD;\n', '    uint256 public priceUpdateAt;\n', '\n', '    mapping(address => uint256) public etherBalances;\n', '\n', '    Tier[] public tiers;\n', '\n', '    struct Tier {\n', '        uint256 discount;\n', '        uint256 startTime;\n', '        uint256 endTime;\n', '    }\n', '\n', '    event Refund(address _holder, uint256 _ethers, uint256 _tokens);\n', '    event NewPriceTicker(string _price);\n', '\n', '    function SellableToken(\n', '        address _token,\n', '        address _etherHolder,\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _maxTokenSupply,\n', '        uint256 _etherPriceInUSD\n', '    )\n', '    public Multivest()\n', '    {\n', '        require(_token != address(0) && _etherHolder != address(0));\n', '        token = GigToken(_token);\n', '\n', '        require(_startTime < _endTime);\n', '        etherHolder = _etherHolder;\n', '        require((_maxTokenSupply == uint256(0)) || (_maxTokenSupply <= token.maxSupply()));\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        maxTokenSupply = _maxTokenSupply;\n', '        etherPriceInUSD = _etherPriceInUSD;\n', '\n', '        priceUpdateAt = block.timestamp;\n', '    }\n', '\n', '    function setTokenContract(address _token) public onlyOwner {\n', '        require(_token != address(0));\n', '        token = GigToken(_token);\n', '    }\n', '\n', '    function setEtherHolder(address _etherHolder) public onlyOwner {\n', '        if (_etherHolder != address(0)) {\n', '            etherHolder = _etherHolder;\n', '        }\n', '    }\n', '\n', '    function setPurchaseLimits(uint256 _min, uint256 _max) public onlyOwner {\n', '        if (_min < _max) {\n', '            minPurchase = _min;\n', '            maxPurchase = _max;\n', '        }\n', '    }\n', '\n', '    function mint(address _address, uint256 _tokenAmount) public onlyOwner returns (uint256) {\n', '        return mintInternal(_address, _tokenAmount);\n', '    }\n', '\n', '    function isActive() public view returns (bool);\n', '\n', '    function isTransferAllowed(address _from, uint256 _value) public view returns (bool);\n', '\n', '    function withinPeriod() public view returns (bool);\n', '\n', '    function getMinEthersInvestment() public view returns (uint256) {\n', '        return uint256(1 ether).mul(minPurchase).div(etherPriceInUSD);\n', '    }\n', '\n', '    function calculateTokensAmount(uint256 _value) public view returns (uint256 tokenAmount, uint256 usdAmount);\n', '\n', '    function calculateEthersAmount(uint256 _tokens) public view returns (uint256 ethers, uint256 bonus);\n', '\n', '    function updatePreICOMaxTokenSupply(uint256 _amount) public;\n', '\n', '    // set ether price in USD with 5 digits after the decimal point\n', '    //ex. 308.75000\n', '    //for updating the price through  multivest\n', '    function setEtherInUSD(string _price) public onlyAllowedMultivests(msg.sender) {\n', '        bytes memory bytePrice = bytes(_price);\n', '        uint256 dot = bytePrice.length.sub(uint256(6));\n', '\n', '        // check if dot is in 6 position  from  the last\n', '        require(0x2e == uint(bytePrice[dot]));\n', '\n', '        uint256 newPrice = uint256(10 ** 23).div(parseInt(_price, 5));\n', '\n', '        require(newPrice > 0);\n', '\n', '        etherPriceInUSD = parseInt(_price, 5);\n', '\n', '        priceUpdateAt = block.timestamp;\n', '\n', '        NewPriceTicker(_price);\n', '    }\n', '\n', '    function mintInternal(address _address, uint256 _tokenAmount) internal returns (uint256) {\n', '        uint256 mintedAmount = token.mint(_address, _tokenAmount);\n', '\n', '        require(mintedAmount == _tokenAmount);\n', '\n', '        soldTokens = soldTokens.add(_tokenAmount);\n', '        if (maxTokenSupply > 0) {\n', '            require(maxTokenSupply >= soldTokens);\n', '        }\n', '\n', '        return _tokenAmount;\n', '    }\n', '\n', '    function transferEthers() internal;\n', '\n', '    function parseInt(string _a, uint _b) internal pure returns (uint) {\n', '        bytes memory bresult = bytes(_a);\n', '        uint res = 0;\n', '        bool decimals = false;\n', '        for (uint i = 0; i < bresult.length; i++) {\n', '            if ((bresult[i] >= 48) && (bresult[i] <= 57)) {\n', '                if (decimals) {\n', '                    if (_b == 0) break;\n', '                    else _b--;\n', '                }\n', '                res *= 10;\n', '                res += uint(bresult[i]) - 48;\n', '            } else if (bresult[i] == 46) decimals = true;\n', '        }\n', '        if (_b > 0) res *= 10 ** _b;\n', '        return res;\n', '    }\n', '}\n', '\n', '\n', 'contract CrowdSale is SellableToken {\n', '    uint256 public constant PRE_ICO_TIER_FIRST = 0;\n', '    uint256 public constant PRE_ICO_TIER_LAST = 4;\n', '    uint256 public constant ICO_TIER_FIRST = 5;\n', '    uint256 public constant ICO_TIER_LAST = 8;\n', '\n', '    SellableToken public privateSale;\n', '\n', '    uint256 public price;\n', '\n', '    Stats public preICOStats;\n', '    mapping(address => uint256) public icoBalances;\n', '\n', '    struct Stats {\n', '        uint256 soldTokens;\n', '        uint256 maxTokenSupply;\n', '        uint256 collectedUSD;\n', '        uint256 collectedEthers;\n', '        bool burned;\n', '    }\n', '\n', '    function CrowdSale(\n', '        address _token,\n', '        address _etherHolder,\n', '        uint256 _maxPreICOTokenSupply,\n', '    //10000000000000000000000000-527309544043097299200271 + 177500000000000000000000000 = 186972690455956902700799729\n', '        uint256 _maxICOTokenSupply, //62500000000000000000000000\n', '        uint256 _price,\n', '        uint256[2] _preIcoDuration, //1530432000  -1533081599\n', '        uint256[2] _icoDuration, // 1533110400 - 1538351999\n', '        uint256 _etherPriceInUSD\n', '    ) public\n', '    SellableToken(\n', '        _token,\n', '        _etherHolder,\n', '            _preIcoDuration[0],\n', '            _icoDuration[1],\n', '        _maxPreICOTokenSupply.add(_maxICOTokenSupply),\n', '        _etherPriceInUSD\n', '    ) {\n', '        softCap = 250000000000;\n', '        hardCap = 3578912800000;\n', '        price = _price;\n', '        preICOStats.maxTokenSupply = _maxPreICOTokenSupply;\n', '        //0.2480* 10^5\n', '        //PreICO\n', '        tiers.push(\n', '            Tier(\n', '                uint256(65),\n', '                _preIcoDuration[0],\n', '                _preIcoDuration[0].add(1 hours)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(60),\n', '                _preIcoDuration[0].add(1 hours),\n', '                _preIcoDuration[0].add(1 days)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(57),\n', '                _preIcoDuration[0].add(1 days),\n', '                _preIcoDuration[0].add(2 days)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(55),\n', '                _preIcoDuration[0].add(2 days),\n', '                _preIcoDuration[0].add(3 days)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(50),\n', '                _preIcoDuration[0].add(3 days),\n', '                _preIcoDuration[1]\n', '            )\n', '        );\n', '        //ICO\n', '        tiers.push(\n', '            Tier(\n', '                uint256(25),\n', '                _icoDuration[0],\n', '                _icoDuration[0].add(1 weeks)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(15),\n', '                _icoDuration[0].add(1 weeks),\n', '                _icoDuration[0].add(2 weeks)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(10),\n', '                _icoDuration[0].add(2 weeks),\n', '                _icoDuration[0].add(3 weeks)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(5),\n', '                _icoDuration[0].add(3 weeks),\n', '                _icoDuration[1]\n', '            )\n', '        );\n', '\n', '    }\n', '\n', '    function changeICODates(uint256 _tierId, uint256 _start, uint256 _end) public onlyOwner {\n', '        require(_start != 0 && _start < _end && _tierId < tiers.length);\n', '        Tier storage icoTier = tiers[_tierId];\n', '        icoTier.startTime = _start;\n', '        icoTier.endTime = _end;\n', '        if (_tierId == PRE_ICO_TIER_FIRST) {\n', '            startTime = _start;\n', '        } else if (_tierId == ICO_TIER_LAST) {\n', '            endTime = _end;\n', '        }\n', '    }\n', '\n', '    function isActive() public view returns (bool) {\n', '        if (hardCap == collectedUSD.add(preICOStats.collectedUSD)) {\n', '            return false;\n', '        }\n', '        if (soldTokens == maxTokenSupply) {\n', '            return false;\n', '        }\n', '\n', '        return withinPeriod();\n', '    }\n', '\n', '    function withinPeriod() public view returns (bool) {\n', '        return getActiveTier() != tiers.length;\n', '    }\n', '\n', '    function setPrivateSale(address _privateSale) public onlyOwner {\n', '        if (_privateSale != address(0)) {\n', '            privateSale = SellableToken(_privateSale);\n', '        }\n', '    }\n', '\n', '    function getActiveTier() public view returns (uint256) {\n', '        for (uint256 i = 0; i < tiers.length; i++) {\n', '            if (block.timestamp >= tiers[i].startTime && block.timestamp <= tiers[i].endTime) {\n', '                return i;\n', '            }\n', '        }\n', '\n', '        return uint256(tiers.length);\n', '    }\n', '\n', '    function calculateTokensAmount(uint256 _value) public view returns (uint256 tokenAmount, uint256 usdAmount) {\n', '        if (_value == 0) {\n', '            return (0, 0);\n', '        }\n', '        uint256 activeTier = getActiveTier();\n', '\n', '        if (activeTier == tiers.length) {\n', '            if (endTime < block.timestamp) {\n', '                return (0, 0);\n', '            }\n', '            if (startTime > block.timestamp) {\n', '                activeTier = PRE_ICO_TIER_FIRST;\n', '            }\n', '        }\n', '        usdAmount = _value.mul(etherPriceInUSD);\n', '\n', '        tokenAmount = usdAmount.div(price * (100 - tiers[activeTier].discount) / 100);\n', '\n', '        usdAmount = usdAmount.div(uint256(10) ** 18);\n', '\n', '        if (usdAmount < minPurchase) {\n', '            return (0, 0);\n', '        }\n', '    }\n', '\n', '    function calculateEthersAmount(uint256 _tokens) public view returns (uint256 ethers, uint256 usdAmount) {\n', '        if (_tokens == 0) {\n', '            return (0, 0);\n', '        }\n', '\n', '        uint256 activeTier = getActiveTier();\n', '\n', '        if (activeTier == tiers.length) {\n', '            if (endTime < block.timestamp) {\n', '                return (0, 0);\n', '            }\n', '            if (startTime > block.timestamp) {\n', '                activeTier = PRE_ICO_TIER_FIRST;\n', '            }\n', '        }\n', '\n', '        usdAmount = _tokens.mul((price * (100 - tiers[activeTier].discount) / 100));\n', '        ethers = usdAmount.div(etherPriceInUSD);\n', '\n', '        if (ethers < getMinEthersInvestment()) {\n', '            return (0, 0);\n', '        }\n', '\n', '        usdAmount = usdAmount.div(uint256(10) ** 18);\n', '    }\n', '\n', '    function getStats(uint256 _ethPerBtc) public view returns (\n', '        uint256 sold,\n', '        uint256 maxSupply,\n', '        uint256 min,\n', '        uint256 soft,\n', '        uint256 hard,\n', '        uint256 tokenPrice,\n', '        uint256 tokensPerEth,\n', '        uint256 tokensPerBtc,\n', '        uint256[24] tiersData\n', '    ) {\n', '        sold = soldTokens;\n', '        maxSupply = maxTokenSupply.sub(preICOStats.maxTokenSupply);\n', '        min = minPurchase;\n', '        soft = softCap;\n', '        hard = hardCap;\n', '        tokenPrice = price;\n', '        uint256 usd;\n', '        (tokensPerEth, usd) = calculateTokensAmount(1 ether);\n', '        (tokensPerBtc, usd) = calculateTokensAmount(_ethPerBtc);\n', '        uint256 j = 0;\n', '        for (uint256 i = 0; i < tiers.length; i++) {\n', '            tiersData[j++] = uint256(tiers[i].discount);\n', '            tiersData[j++] = uint256(tiers[i].startTime);\n', '            tiersData[j++] = uint256(tiers[i].endTime);\n', '        }\n', '    }\n', '\n', '    function burnUnsoldTokens() public onlyOwner {\n', '        if (block.timestamp >= endTime && maxTokenSupply > soldTokens) {\n', '            token.burnUnsoldTokens(maxTokenSupply.sub(soldTokens));\n', '            maxTokenSupply = soldTokens;\n', '        }\n', '    }\n', '\n', '    function isTransferAllowed(address _from, uint256 _value) public view returns (bool status){\n', '        if (collectedUSD.add(preICOStats.collectedUSD) < softCap) {\n', '            if (token.balanceOf(_from) >= icoBalances[_from] && token.balanceOf(_from).sub(icoBalances[_from])> _value) {\n', '                return true;\n', '            }\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function isRefundPossible() public view returns (bool) {\n', '        if (isActive() || block.timestamp < startTime || collectedUSD.add(preICOStats.collectedUSD) >= softCap) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function refund() public returns (bool) {\n', '        if (!isRefundPossible() || etherBalances[msg.sender] == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 burnedAmount = token.burnInvestorTokens(msg.sender, icoBalances[msg.sender]);\n', '        if (burnedAmount == 0) {\n', '            return false;\n', '        }\n', '        uint256 etherBalance = etherBalances[msg.sender];\n', '        etherBalances[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(etherBalance);\n', '\n', '        Refund(msg.sender, etherBalance, burnedAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function updatePreICOMaxTokenSupply(uint256 _amount) public {\n', '        if (msg.sender == address(privateSale)) {\n', '            maxTokenSupply = maxTokenSupply.add(_amount);\n', '            preICOStats.maxTokenSupply = preICOStats.maxTokenSupply.add(_amount);\n', '        }\n', '    }\n', '\n', '    function moveUnsoldTokensToICO() public onlyOwner {\n', '        uint256 unsoldTokens = preICOStats.maxTokenSupply - preICOStats.soldTokens;\n', '        if (unsoldTokens > 0) {\n', '            preICOStats.maxTokenSupply = preICOStats.soldTokens;\n', '        }\n', '    }\n', '\n', '    function transferEthers() internal {\n', '        if (collectedUSD.add(preICOStats.collectedUSD) >= softCap) {\n', '            etherHolder.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    function mintPreICO(\n', '        address _address,\n', '        uint256 _tokenAmount,\n', '        uint256 _ethAmount,\n', '        uint256 _usdAmount\n', '    ) internal returns (uint256) {\n', '        uint256 mintedAmount = token.mint(_address, _tokenAmount);\n', '\n', '        require(mintedAmount == _tokenAmount);\n', '\n', '        preICOStats.soldTokens = preICOStats.soldTokens.add(_tokenAmount);\n', '        preICOStats.collectedEthers = preICOStats.collectedEthers.add(_ethAmount);\n', '        preICOStats.collectedUSD = preICOStats.collectedUSD.add(_usdAmount);\n', '\n', '        require(preICOStats.maxTokenSupply >= preICOStats.soldTokens);\n', '        require(maxTokenSupply >= preICOStats.soldTokens);\n', '\n', '        return _tokenAmount;\n', '    }\n', '\n', '    function buy(address _address, uint256 _value) internal returns (bool) {\n', '        if (_value == 0 || _address == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        uint256 activeTier = getActiveTier();\n', '        if (activeTier == tiers.length) {\n', '            return false;\n', '        }\n', '\n', '        uint256 tokenAmount;\n', '        uint256 usdAmount;\n', '        uint256 mintedAmount;\n', '\n', '        (tokenAmount, usdAmount) = calculateTokensAmount(_value);\n', '        require(usdAmount > 0 && tokenAmount > 0);\n', '\n', '        if (activeTier >= PRE_ICO_TIER_FIRST && activeTier <= PRE_ICO_TIER_LAST) {\n', '            mintedAmount = mintPreICO(_address, tokenAmount, _value, usdAmount);\n', '            etherHolder.transfer(this.balance);\n', '        } else {\n', '            mintedAmount = mintInternal(_address, tokenAmount);\n', '            require(soldTokens <= maxTokenSupply.sub(preICOStats.maxTokenSupply));\n', '            collectedUSD = collectedUSD.add(usdAmount);\n', '            require(hardCap >= collectedUSD.add(preICOStats.collectedUSD) && usdAmount > 0 && mintedAmount > 0);\n', '\n', '            collectedEthers = collectedEthers.add(_value);\n', '            etherBalances[_address] = etherBalances[_address].add(_value);\n', '            icoBalances[_address] = icoBalances[_address].add(tokenAmount);\n', '            transferEthers();\n', '        }\n', '\n', '        Contribution(_address, _value, tokenAmount);\n', '\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract GigERC20 is StandardToken, Ownable {\n', '    /* Public variables of the token */\n', '    uint256 public creationBlock;\n', '\n', '    uint8 public decimals;\n', '\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    string public standard;\n', '\n', '    bool public locked;\n', '\n', '    /* Initializes contract with initial supply tokens to the creator of the contract */\n', '    function GigERC20(\n', '        uint256 _totalSupply,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transferAllSupplyToOwner,\n', '        bool _locked\n', '    ) public {\n', "        standard = 'ERC20 0.1';\n", '        locked = _locked;\n', '        totalSupply_ = _totalSupply;\n', '\n', '        if (_transferAllSupplyToOwner) {\n', '            balances[msg.sender] = totalSupply_;\n', '        } else {\n', '            balances[this] = totalSupply_;\n', '        }\n', '        name = _tokenName;\n', '        // Set the name for display purposes\n', '        symbol = _tokenSymbol;\n', '        // Set the symbol for display purposes\n', '        decimals = _decimalUnits;\n', '        // Amount of decimals for display purposes\n', '        creationBlock = block.number;\n', '    }\n', '\n', '    function setLocked(bool _locked) public onlyOwner {\n', '        locked = _locked;\n', '    }\n', '\n', '    /* public methods */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(locked == false);\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (locked) {\n', '            return false;\n', '        }\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/*\n', 'This contract manages the minters and the modifier to allow mint to happen only if called by minters\n', 'This contract contains basic minting functionality though\n', '*/\n', 'contract MintingERC20 is GigERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    //Variables\n', '    mapping (address => bool) public minters;\n', '\n', '    uint256 public maxSupply;\n', '\n', '    //Modifiers\n', '    modifier onlyMinters () {\n', '        require(true == minters[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function MintingERC20(\n', '        uint256 _initialSupply,\n', '        uint256 _maxSupply,\n', '        string _tokenName,\n', '        uint8 _decimals,\n', '        string _symbol,\n', '        bool _transferAllSupplyToOwner,\n', '        bool _locked\n', '    )\n', '        public GigERC20(_initialSupply, _tokenName, _decimals, _symbol, _transferAllSupplyToOwner, _locked)\n', '    {\n', "        standard = 'MintingERC20 0.1';\n", '        minters[msg.sender] = true;\n', '        maxSupply = _maxSupply;\n', '    }\n', '\n', '    function addMinter(address _newMinter) public onlyOwner {\n', '        minters[_newMinter] = true;\n', '    }\n', '\n', '    function removeMinter(address _minter) public onlyOwner {\n', '        minters[_minter] = false;\n', '    }\n', '\n', '    function mint(address _addr, uint256 _amount) public onlyMinters returns (uint256) {\n', '        if (true == locked) {\n', '            return uint256(0);\n', '        }\n', '\n', '        if (_amount == uint256(0)) {\n', '            return uint256(0);\n', '        }\n', '\n', '        if (totalSupply_.add(_amount) > maxSupply) {\n', '            return uint256(0);\n', '        }\n', '\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_addr] = balances[_addr].add(_amount);\n', '        Transfer(address(0), _addr, _amount);\n', '\n', '        return _amount;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '/*\n', '    Tests:\n', '    - check that created token has correct name, symbol, decimals, locked, maxSupply\n', '    - check that setPrivateSale updates privateSale, and not affects crowdSaleEndTime\n', '    - check that setCrowdSale updates crowdSale, and changes crowdSaleEndTime\n', '    - check that trasnferFrom, approve, increaseApproval, decreaseApproval are forbidden to call before end of ICO\n', '    - check that burn is not allowed to call before end of CrowdSale\n', '    - check that increaseLockedBalance only increases investor locked amount\n', '    - check that isTransferAllowed failed if transferFrozen\n', '    - check that isTransferAllowed failed if user has not enough unlocked balance\n', '    - check that isTransferAllowed failed if user has not enough unlocked balance, after transfering enough tokens balance\n', '    - check that isTransferAllowed succeed if user has enough unlocked balance\n', '    - check that isTransferAllowed succeed if user has enough unlocked balance, after transfering enough tokens balance\n', '*/\n', '\n', 'contract GigToken is MintingERC20 {\n', '    SellableToken public crowdSale; // Pre ICO & ICO\n', '    SellableToken public privateSale;\n', '\n', '    bool public transferFrozen = false;\n', '\n', '    uint256 public crowdSaleEndTime;\n', '\n', '    mapping(address => uint256) public lockedBalancesReleasedAfterOneYear;\n', '\n', '    modifier onlyCrowdSale() {\n', '        require(crowdSale != address(0) && msg.sender == address(crowdSale));\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlySales() {\n', '        require((privateSale != address(0) && msg.sender == address(privateSale)) ||\n', '            (crowdSale != address(0) && msg.sender == address(crowdSale)));\n', '\n', '        _;\n', '    }\n', '\n', '    event MaxSupplyBurned(uint256 burnedTokens);\n', '\n', '    function GigToken(bool _locked) public\n', "        MintingERC20(0, maxSupply, 'GigBit', 18, 'GBTC', false, _locked)\n", '    {\n', "        standard = 'GBTC 0.1';\n", '\n', '        maxSupply = uint256(1000000000).mul(uint256(10) ** decimals);\n', '    }\n', '\n', '    function setCrowdSale(address _crowdSale) public onlyOwner {\n', '        require(_crowdSale != address(0));\n', '\n', '        crowdSale = SellableToken(_crowdSale);\n', '\n', '        crowdSaleEndTime = crowdSale.endTime();\n', '    }\n', '\n', '    function setPrivateSale(address _privateSale) public onlyOwner {\n', '        require(_privateSale != address(0));\n', '\n', '        privateSale = SellableToken(_privateSale);\n', '    }\n', '\n', '    function freezing(bool _transferFrozen) public onlyOwner {\n', '        transferFrozen = _transferFrozen;\n', '    }\n', '\n', '    function isTransferAllowed(address _from, uint256 _value) public view returns (bool status) {\n', '        uint256 senderBalance = balanceOf(_from);\n', '        if (transferFrozen == true || senderBalance < _value) {\n', '            return false;\n', '        }\n', '\n', '        uint256 lockedBalance = lockedBalancesReleasedAfterOneYear[_from];\n', '\n', '        // check if holder tries to transfer more than locked tokens\n', '    if (lockedBalance > 0 && senderBalance.sub(_value) < lockedBalance) {\n', '            uint256 unlockTime = crowdSaleEndTime + 1 years;\n', '\n', '            // fail if unlock time is not come\n', '            if (crowdSaleEndTime == 0 || block.timestamp < unlockTime) {\n', '                return false;\n', '            }\n', '\n', '            uint256 secsFromUnlock = block.timestamp.sub(unlockTime);\n', '\n', '            // number of months over from unlock\n', '            uint256 months = secsFromUnlock / 30 days;\n', '\n', '            if (months > 12) {\n', '                months = 12;\n', '            }\n', '\n', '            uint256 tokensPerMonth = lockedBalance / 12;\n', '\n', '            uint256 unlockedBalance = tokensPerMonth.mul(months);\n', '\n', '            uint256 actualLockedBalance = lockedBalance.sub(unlockedBalance);\n', '\n', '            if (senderBalance.sub(_value) < actualLockedBalance) {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        if (block.timestamp < crowdSaleEndTime &&\n', '            crowdSale != address(0) &&\n', '            crowdSale.isTransferAllowed(_from, _value) == false\n', '        ) {\n', '            return false;\n', '        }\n', '\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        require(isTransferAllowed(msg.sender, _value));\n', '\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n', '        // transferFrom & approve are disabled before end of ICO\n', '        require((crowdSaleEndTime <= block.timestamp) && isTransferAllowed(_from, _value));\n', '\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        // transferFrom & approve are disabled before end of ICO\n', '\n', '        require(crowdSaleEndTime <= block.timestamp);\n', '\n', '        return super.approve(_spender, _value);\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n', '        // transferFrom & approve are disabled before end of ICO\n', '\n', '        require(crowdSaleEndTime <= block.timestamp);\n', '\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n', '        // transferFrom & approve are disabled before end of ICO\n', '\n', '        require(crowdSaleEndTime <= block.timestamp);\n', '\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '\n', '    function increaseLockedBalance(address _address, uint256 _tokens) public onlySales {\n', '        lockedBalancesReleasedAfterOneYear[_address] =\n', '            lockedBalancesReleasedAfterOneYear[_address].add(_tokens);\n', '    }\n', '\n', '    // burn tokens if soft cap is not reached\n', '    function burnInvestorTokens(\n', '        address _address,\n', '        uint256 _amount\n', '    ) public onlyCrowdSale returns (uint256) {\n', '        require(block.timestamp > crowdSaleEndTime);\n', '\n', '        require(_amount <= balances[_address]);\n', '\n', '        balances[_address] = balances[_address].sub(_amount);\n', '\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '\n', '        Transfer(_address, address(0), _amount);\n', '\n', '        return _amount;\n', '    }\n', '\n', '    // decrease max supply of tokens that are not sold\n', '    function burnUnsoldTokens(uint256 _amount) public onlyCrowdSale {\n', '        require(block.timestamp > crowdSaleEndTime);\n', '\n', '        maxSupply = maxSupply.sub(_amount);\n', '\n', '        MaxSupplyBurned(_amount);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Multivest is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /* public variables */\n', '    mapping (address => bool) public allowedMultivests;\n', '\n', '    /* events */\n', '    event MultivestSet(address multivest);\n', '\n', '    event MultivestUnset(address multivest);\n', '\n', '    event Contribution(address holder, uint256 value, uint256 tokens);\n', '\n', '    modifier onlyAllowedMultivests(address _addresss) {\n', '        require(allowedMultivests[_addresss] == true);\n', '        _;\n', '    }\n', '\n', '    /* constructor */\n', '    function Multivest() public {}\n', '\n', '    function setAllowedMultivest(address _address) public onlyOwner {\n', '        allowedMultivests[_address] = true;\n', '        MultivestSet(_address);\n', '    }\n', '\n', '    function unsetAllowedMultivest(address _address) public onlyOwner {\n', '        allowedMultivests[_address] = false;\n', '        MultivestUnset(_address);\n', '    }\n', '\n', '    function multivestBuy(address _address, uint256 _value) public onlyAllowedMultivests(msg.sender) {\n', '        require(buy(_address, _value) == true);\n', '    }\n', '\n', '    function multivestBuy(\n', '        address _address,\n', '        uint8 _v,\n', '        bytes32 _r,\n', '        bytes32 _s\n', '    ) public payable onlyAllowedMultivests(verify(keccak256(msg.sender), _v, _r, _s)) {\n', '        require(_address == msg.sender && buy(msg.sender, msg.value) == true);\n', '    }\n', '\n', '    function verify(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal pure returns (address) {\n', "        bytes memory prefix = '\\x19Ethereum Signed Message:\\n32';\n", '\n', '        return ecrecover(keccak256(prefix, _hash), _v, _r, _s);\n', '    }\n', '\n', '    function buy(address _address, uint256 _value) internal returns (bool);\n', '\n', '}\n', '\n', '\n', '\n', 'contract SellableToken is Multivest {\n', '    uint256 public constant MONTH_IN_SEC = 2629743;\n', '    GigToken public token;\n', '\n', '    uint256 public minPurchase = 100 * 10 ** 5;\n', '    uint256 public maxPurchase;\n', '\n', '    uint256 public softCap;\n', '    uint256 public hardCap;\n', '\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    uint256 public maxTokenSupply;\n', '\n', '    uint256 public soldTokens;\n', '\n', '    uint256 public collectedEthers;\n', '\n', '    address public etherHolder;\n', '\n', '    uint256 public collectedUSD;\n', '\n', '    uint256 public etherPriceInUSD;\n', '    uint256 public priceUpdateAt;\n', '\n', '    mapping(address => uint256) public etherBalances;\n', '\n', '    Tier[] public tiers;\n', '\n', '    struct Tier {\n', '        uint256 discount;\n', '        uint256 startTime;\n', '        uint256 endTime;\n', '    }\n', '\n', '    event Refund(address _holder, uint256 _ethers, uint256 _tokens);\n', '    event NewPriceTicker(string _price);\n', '\n', '    function SellableToken(\n', '        address _token,\n', '        address _etherHolder,\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _maxTokenSupply,\n', '        uint256 _etherPriceInUSD\n', '    )\n', '    public Multivest()\n', '    {\n', '        require(_token != address(0) && _etherHolder != address(0));\n', '        token = GigToken(_token);\n', '\n', '        require(_startTime < _endTime);\n', '        etherHolder = _etherHolder;\n', '        require((_maxTokenSupply == uint256(0)) || (_maxTokenSupply <= token.maxSupply()));\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        maxTokenSupply = _maxTokenSupply;\n', '        etherPriceInUSD = _etherPriceInUSD;\n', '\n', '        priceUpdateAt = block.timestamp;\n', '    }\n', '\n', '    function setTokenContract(address _token) public onlyOwner {\n', '        require(_token != address(0));\n', '        token = GigToken(_token);\n', '    }\n', '\n', '    function setEtherHolder(address _etherHolder) public onlyOwner {\n', '        if (_etherHolder != address(0)) {\n', '            etherHolder = _etherHolder;\n', '        }\n', '    }\n', '\n', '    function setPurchaseLimits(uint256 _min, uint256 _max) public onlyOwner {\n', '        if (_min < _max) {\n', '            minPurchase = _min;\n', '            maxPurchase = _max;\n', '        }\n', '    }\n', '\n', '    function mint(address _address, uint256 _tokenAmount) public onlyOwner returns (uint256) {\n', '        return mintInternal(_address, _tokenAmount);\n', '    }\n', '\n', '    function isActive() public view returns (bool);\n', '\n', '    function isTransferAllowed(address _from, uint256 _value) public view returns (bool);\n', '\n', '    function withinPeriod() public view returns (bool);\n', '\n', '    function getMinEthersInvestment() public view returns (uint256) {\n', '        return uint256(1 ether).mul(minPurchase).div(etherPriceInUSD);\n', '    }\n', '\n', '    function calculateTokensAmount(uint256 _value) public view returns (uint256 tokenAmount, uint256 usdAmount);\n', '\n', '    function calculateEthersAmount(uint256 _tokens) public view returns (uint256 ethers, uint256 bonus);\n', '\n', '    function updatePreICOMaxTokenSupply(uint256 _amount) public;\n', '\n', '    // set ether price in USD with 5 digits after the decimal point\n', '    //ex. 308.75000\n', '    //for updating the price through  multivest\n', '    function setEtherInUSD(string _price) public onlyAllowedMultivests(msg.sender) {\n', '        bytes memory bytePrice = bytes(_price);\n', '        uint256 dot = bytePrice.length.sub(uint256(6));\n', '\n', '        // check if dot is in 6 position  from  the last\n', '        require(0x2e == uint(bytePrice[dot]));\n', '\n', '        uint256 newPrice = uint256(10 ** 23).div(parseInt(_price, 5));\n', '\n', '        require(newPrice > 0);\n', '\n', '        etherPriceInUSD = parseInt(_price, 5);\n', '\n', '        priceUpdateAt = block.timestamp;\n', '\n', '        NewPriceTicker(_price);\n', '    }\n', '\n', '    function mintInternal(address _address, uint256 _tokenAmount) internal returns (uint256) {\n', '        uint256 mintedAmount = token.mint(_address, _tokenAmount);\n', '\n', '        require(mintedAmount == _tokenAmount);\n', '\n', '        soldTokens = soldTokens.add(_tokenAmount);\n', '        if (maxTokenSupply > 0) {\n', '            require(maxTokenSupply >= soldTokens);\n', '        }\n', '\n', '        return _tokenAmount;\n', '    }\n', '\n', '    function transferEthers() internal;\n', '\n', '    function parseInt(string _a, uint _b) internal pure returns (uint) {\n', '        bytes memory bresult = bytes(_a);\n', '        uint res = 0;\n', '        bool decimals = false;\n', '        for (uint i = 0; i < bresult.length; i++) {\n', '            if ((bresult[i] >= 48) && (bresult[i] <= 57)) {\n', '                if (decimals) {\n', '                    if (_b == 0) break;\n', '                    else _b--;\n', '                }\n', '                res *= 10;\n', '                res += uint(bresult[i]) - 48;\n', '            } else if (bresult[i] == 46) decimals = true;\n', '        }\n', '        if (_b > 0) res *= 10 ** _b;\n', '        return res;\n', '    }\n', '}\n', '\n', '\n', 'contract CrowdSale is SellableToken {\n', '    uint256 public constant PRE_ICO_TIER_FIRST = 0;\n', '    uint256 public constant PRE_ICO_TIER_LAST = 4;\n', '    uint256 public constant ICO_TIER_FIRST = 5;\n', '    uint256 public constant ICO_TIER_LAST = 8;\n', '\n', '    SellableToken public privateSale;\n', '\n', '    uint256 public price;\n', '\n', '    Stats public preICOStats;\n', '    mapping(address => uint256) public icoBalances;\n', '\n', '    struct Stats {\n', '        uint256 soldTokens;\n', '        uint256 maxTokenSupply;\n', '        uint256 collectedUSD;\n', '        uint256 collectedEthers;\n', '        bool burned;\n', '    }\n', '\n', '    function CrowdSale(\n', '        address _token,\n', '        address _etherHolder,\n', '        uint256 _maxPreICOTokenSupply,\n', '    //10000000000000000000000000-527309544043097299200271 + 177500000000000000000000000 = 186972690455956902700799729\n', '        uint256 _maxICOTokenSupply, //62500000000000000000000000\n', '        uint256 _price,\n', '        uint256[2] _preIcoDuration, //1530432000  -1533081599\n', '        uint256[2] _icoDuration, // 1533110400 - 1538351999\n', '        uint256 _etherPriceInUSD\n', '    ) public\n', '    SellableToken(\n', '        _token,\n', '        _etherHolder,\n', '            _preIcoDuration[0],\n', '            _icoDuration[1],\n', '        _maxPreICOTokenSupply.add(_maxICOTokenSupply),\n', '        _etherPriceInUSD\n', '    ) {\n', '        softCap = 250000000000;\n', '        hardCap = 3578912800000;\n', '        price = _price;\n', '        preICOStats.maxTokenSupply = _maxPreICOTokenSupply;\n', '        //0.2480* 10^5\n', '        //PreICO\n', '        tiers.push(\n', '            Tier(\n', '                uint256(65),\n', '                _preIcoDuration[0],\n', '                _preIcoDuration[0].add(1 hours)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(60),\n', '                _preIcoDuration[0].add(1 hours),\n', '                _preIcoDuration[0].add(1 days)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(57),\n', '                _preIcoDuration[0].add(1 days),\n', '                _preIcoDuration[0].add(2 days)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(55),\n', '                _preIcoDuration[0].add(2 days),\n', '                _preIcoDuration[0].add(3 days)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(50),\n', '                _preIcoDuration[0].add(3 days),\n', '                _preIcoDuration[1]\n', '            )\n', '        );\n', '        //ICO\n', '        tiers.push(\n', '            Tier(\n', '                uint256(25),\n', '                _icoDuration[0],\n', '                _icoDuration[0].add(1 weeks)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(15),\n', '                _icoDuration[0].add(1 weeks),\n', '                _icoDuration[0].add(2 weeks)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(10),\n', '                _icoDuration[0].add(2 weeks),\n', '                _icoDuration[0].add(3 weeks)\n', '            )\n', '        );\n', '        tiers.push(\n', '            Tier(\n', '                uint256(5),\n', '                _icoDuration[0].add(3 weeks),\n', '                _icoDuration[1]\n', '            )\n', '        );\n', '\n', '    }\n', '\n', '    function changeICODates(uint256 _tierId, uint256 _start, uint256 _end) public onlyOwner {\n', '        require(_start != 0 && _start < _end && _tierId < tiers.length);\n', '        Tier storage icoTier = tiers[_tierId];\n', '        icoTier.startTime = _start;\n', '        icoTier.endTime = _end;\n', '        if (_tierId == PRE_ICO_TIER_FIRST) {\n', '            startTime = _start;\n', '        } else if (_tierId == ICO_TIER_LAST) {\n', '            endTime = _end;\n', '        }\n', '    }\n', '\n', '    function isActive() public view returns (bool) {\n', '        if (hardCap == collectedUSD.add(preICOStats.collectedUSD)) {\n', '            return false;\n', '        }\n', '        if (soldTokens == maxTokenSupply) {\n', '            return false;\n', '        }\n', '\n', '        return withinPeriod();\n', '    }\n', '\n', '    function withinPeriod() public view returns (bool) {\n', '        return getActiveTier() != tiers.length;\n', '    }\n', '\n', '    function setPrivateSale(address _privateSale) public onlyOwner {\n', '        if (_privateSale != address(0)) {\n', '            privateSale = SellableToken(_privateSale);\n', '        }\n', '    }\n', '\n', '    function getActiveTier() public view returns (uint256) {\n', '        for (uint256 i = 0; i < tiers.length; i++) {\n', '            if (block.timestamp >= tiers[i].startTime && block.timestamp <= tiers[i].endTime) {\n', '                return i;\n', '            }\n', '        }\n', '\n', '        return uint256(tiers.length);\n', '    }\n', '\n', '    function calculateTokensAmount(uint256 _value) public view returns (uint256 tokenAmount, uint256 usdAmount) {\n', '        if (_value == 0) {\n', '            return (0, 0);\n', '        }\n', '        uint256 activeTier = getActiveTier();\n', '\n', '        if (activeTier == tiers.length) {\n', '            if (endTime < block.timestamp) {\n', '                return (0, 0);\n', '            }\n', '            if (startTime > block.timestamp) {\n', '                activeTier = PRE_ICO_TIER_FIRST;\n', '            }\n', '        }\n', '        usdAmount = _value.mul(etherPriceInUSD);\n', '\n', '        tokenAmount = usdAmount.div(price * (100 - tiers[activeTier].discount) / 100);\n', '\n', '        usdAmount = usdAmount.div(uint256(10) ** 18);\n', '\n', '        if (usdAmount < minPurchase) {\n', '            return (0, 0);\n', '        }\n', '    }\n', '\n', '    function calculateEthersAmount(uint256 _tokens) public view returns (uint256 ethers, uint256 usdAmount) {\n', '        if (_tokens == 0) {\n', '            return (0, 0);\n', '        }\n', '\n', '        uint256 activeTier = getActiveTier();\n', '\n', '        if (activeTier == tiers.length) {\n', '            if (endTime < block.timestamp) {\n', '                return (0, 0);\n', '            }\n', '            if (startTime > block.timestamp) {\n', '                activeTier = PRE_ICO_TIER_FIRST;\n', '            }\n', '        }\n', '\n', '        usdAmount = _tokens.mul((price * (100 - tiers[activeTier].discount) / 100));\n', '        ethers = usdAmount.div(etherPriceInUSD);\n', '\n', '        if (ethers < getMinEthersInvestment()) {\n', '            return (0, 0);\n', '        }\n', '\n', '        usdAmount = usdAmount.div(uint256(10) ** 18);\n', '    }\n', '\n', '    function getStats(uint256 _ethPerBtc) public view returns (\n', '        uint256 sold,\n', '        uint256 maxSupply,\n', '        uint256 min,\n', '        uint256 soft,\n', '        uint256 hard,\n', '        uint256 tokenPrice,\n', '        uint256 tokensPerEth,\n', '        uint256 tokensPerBtc,\n', '        uint256[24] tiersData\n', '    ) {\n', '        sold = soldTokens;\n', '        maxSupply = maxTokenSupply.sub(preICOStats.maxTokenSupply);\n', '        min = minPurchase;\n', '        soft = softCap;\n', '        hard = hardCap;\n', '        tokenPrice = price;\n', '        uint256 usd;\n', '        (tokensPerEth, usd) = calculateTokensAmount(1 ether);\n', '        (tokensPerBtc, usd) = calculateTokensAmount(_ethPerBtc);\n', '        uint256 j = 0;\n', '        for (uint256 i = 0; i < tiers.length; i++) {\n', '            tiersData[j++] = uint256(tiers[i].discount);\n', '            tiersData[j++] = uint256(tiers[i].startTime);\n', '            tiersData[j++] = uint256(tiers[i].endTime);\n', '        }\n', '    }\n', '\n', '    function burnUnsoldTokens() public onlyOwner {\n', '        if (block.timestamp >= endTime && maxTokenSupply > soldTokens) {\n', '            token.burnUnsoldTokens(maxTokenSupply.sub(soldTokens));\n', '            maxTokenSupply = soldTokens;\n', '        }\n', '    }\n', '\n', '    function isTransferAllowed(address _from, uint256 _value) public view returns (bool status){\n', '        if (collectedUSD.add(preICOStats.collectedUSD) < softCap) {\n', '            if (token.balanceOf(_from) >= icoBalances[_from] && token.balanceOf(_from).sub(icoBalances[_from])> _value) {\n', '                return true;\n', '            }\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function isRefundPossible() public view returns (bool) {\n', '        if (isActive() || block.timestamp < startTime || collectedUSD.add(preICOStats.collectedUSD) >= softCap) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function refund() public returns (bool) {\n', '        if (!isRefundPossible() || etherBalances[msg.sender] == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint256 burnedAmount = token.burnInvestorTokens(msg.sender, icoBalances[msg.sender]);\n', '        if (burnedAmount == 0) {\n', '            return false;\n', '        }\n', '        uint256 etherBalance = etherBalances[msg.sender];\n', '        etherBalances[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(etherBalance);\n', '\n', '        Refund(msg.sender, etherBalance, burnedAmount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function updatePreICOMaxTokenSupply(uint256 _amount) public {\n', '        if (msg.sender == address(privateSale)) {\n', '            maxTokenSupply = maxTokenSupply.add(_amount);\n', '            preICOStats.maxTokenSupply = preICOStats.maxTokenSupply.add(_amount);\n', '        }\n', '    }\n', '\n', '    function moveUnsoldTokensToICO() public onlyOwner {\n', '        uint256 unsoldTokens = preICOStats.maxTokenSupply - preICOStats.soldTokens;\n', '        if (unsoldTokens > 0) {\n', '            preICOStats.maxTokenSupply = preICOStats.soldTokens;\n', '        }\n', '    }\n', '\n', '    function transferEthers() internal {\n', '        if (collectedUSD.add(preICOStats.collectedUSD) >= softCap) {\n', '            etherHolder.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    function mintPreICO(\n', '        address _address,\n', '        uint256 _tokenAmount,\n', '        uint256 _ethAmount,\n', '        uint256 _usdAmount\n', '    ) internal returns (uint256) {\n', '        uint256 mintedAmount = token.mint(_address, _tokenAmount);\n', '\n', '        require(mintedAmount == _tokenAmount);\n', '\n', '        preICOStats.soldTokens = preICOStats.soldTokens.add(_tokenAmount);\n', '        preICOStats.collectedEthers = preICOStats.collectedEthers.add(_ethAmount);\n', '        preICOStats.collectedUSD = preICOStats.collectedUSD.add(_usdAmount);\n', '\n', '        require(preICOStats.maxTokenSupply >= preICOStats.soldTokens);\n', '        require(maxTokenSupply >= preICOStats.soldTokens);\n', '\n', '        return _tokenAmount;\n', '    }\n', '\n', '    function buy(address _address, uint256 _value) internal returns (bool) {\n', '        if (_value == 0 || _address == address(0)) {\n', '            return false;\n', '        }\n', '\n', '        uint256 activeTier = getActiveTier();\n', '        if (activeTier == tiers.length) {\n', '            return false;\n', '        }\n', '\n', '        uint256 tokenAmount;\n', '        uint256 usdAmount;\n', '        uint256 mintedAmount;\n', '\n', '        (tokenAmount, usdAmount) = calculateTokensAmount(_value);\n', '        require(usdAmount > 0 && tokenAmount > 0);\n', '\n', '        if (activeTier >= PRE_ICO_TIER_FIRST && activeTier <= PRE_ICO_TIER_LAST) {\n', '            mintedAmount = mintPreICO(_address, tokenAmount, _value, usdAmount);\n', '            etherHolder.transfer(this.balance);\n', '        } else {\n', '            mintedAmount = mintInternal(_address, tokenAmount);\n', '            require(soldTokens <= maxTokenSupply.sub(preICOStats.maxTokenSupply));\n', '            collectedUSD = collectedUSD.add(usdAmount);\n', '            require(hardCap >= collectedUSD.add(preICOStats.collectedUSD) && usdAmount > 0 && mintedAmount > 0);\n', '\n', '            collectedEthers = collectedEthers.add(_value);\n', '            etherBalances[_address] = etherBalances[_address].add(_value);\n', '            icoBalances[_address] = icoBalances[_address].add(tokenAmount);\n', '            transferEthers();\n', '        }\n', '\n', '        Contribution(_address, _value, tokenAmount);\n', '\n', '        return true;\n', '    }\n', '}']
