['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: contracts/ExternalCall.sol\n', '\n', 'library ExternalCall {\n', '    // Source: https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\n', '    // call has been separated into its own function in order to take advantage\n', "    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\n", '    function externalCall(address destination, uint value, bytes data, uint dataOffset, uint dataLength) internal returns(bool result) {\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)\n', '            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n', '            result := call(\n', '                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting\n', '                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n', '                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n', '                destination,\n', '                value,\n', '                add(d, dataOffset),\n', '                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\n', '                x,\n', '                0                  // Output is ignored, therefore the output size is zero\n', '            )\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/ISetToken.sol\n', '\n', '/*\n', '    Copyright 2018 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title ISetToken\n', ' * @author Set Protocol\n', ' *\n', ' * The ISetToken interface provides a light-weight, structured way to interact with the\n', ' * SetToken contract from another contract.\n', ' */\n', 'interface ISetToken {\n', '\n', '    /* ============ External Functions ============ */\n', '\n', '    /*\n', '     * Issue token set\n', '     *\n', '     * @param  amount     Amount of set being issued\n', '     */\n', '    function issue(uint256 amount)\n', '        external;\n', '\n', '    /*\n', '     * Get natural unit of Set\n', '     *\n', '     * @return  uint256       Natural unit of Set\n', '     */\n', '    function naturalUnit()\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /*\n', '     * Get addresses of all components in the Set\n', '     *\n', '     * @return  componentAddresses       Array of component tokens\n', '     */\n', '    function getComponents()\n', '        external\n', '        view\n', '        returns(address[]);\n', '\n', '    /*\n', '     * Get units of all tokens in Set\n', '     *\n', '     * @return  units       Array of component units\n', '     */\n', '    function getUnits()\n', '        external\n', '        view\n', '        returns(uint256[]);\n', '\n', '    /*\n', '     * Checks to make sure token is component of Set\n', '     *\n', '     * @param  _tokenAddress     Address of token being checked\n', '     * @return  bool             True if token is component of Set\n', '     */\n', '    function tokenIsComponent(\n', '        address _tokenAddress\n', '    )\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    /*\n', '     * Mint set token for given address.\n', '     * Can only be called by authorized contracts.\n', '     *\n', '     * @param  _issuer      The address of the issuing account\n', '     * @param  _quantity    The number of sets to attribute to issuer\n', '     */\n', '    function mint(\n', '        address _issuer,\n', '        uint256 _quantity\n', '    )\n', '        external;\n', '\n', '    /*\n', '     * Burn set token for given address\n', '     * Can only be called by authorized contracts\n', '     *\n', '     * @param  _from        The address of the redeeming account\n', '     * @param  _quantity    The number of sets to burn from redeemer\n', '     */\n', '    function burn(\n', '        address _from,\n', '        uint256 _quantity\n', '    )\n', '        external;\n', '\n', '    /**\n', '    * Balance of token for a specified address\n', '    *\n', '    * @param who  The address\n', '    * @return uint256 Balance of address\n', '    */\n', '    function balanceOf(\n', '        address who\n', '    )\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', '    * Transfer token for a specified address\n', '    *\n', '    * @param to The address to transfer to.\n', '    * @param value The amount to be transferred.\n', '    */\n', '    function transfer(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '}\n', '\n', '// File: contracts/SetBuyer.sol\n', '\n', 'contract IKyberNetworkProxy {\n', '    function tradeWithHint(\n', '        address src,\n', '        uint256 srcAmount,\n', '        address dest,\n', '        address destAddress,\n', '        uint256 maxDestAmount,\n', '        uint256 minConversionRate,\n', '        address walletId,\n', '        bytes hint\n', '    )\n', '        public\n', '        payable\n', '        returns(uint);\n', '\n', '    function getExpectedRate(\n', '        address source,\n', '        address dest,\n', '        uint srcQty\n', '    )\n', '        public\n', '        view\n', '        returns (\n', '            uint expectedPrice,\n', '            uint slippagePrice\n', '        );\n', '}\n', '\n', '\n', 'contract SetBuyer {\n', '    using SafeMath for uint256;\n', '    using ExternalCall for address;\n', '\n', '    address constant public ETHER_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    function buy(\n', '        ISetToken set,\n', '        IKyberNetworkProxy kyber\n', '    )\n', '        public\n', '        payable\n', '    {\n', '        address[] memory components = set.getComponents();\n', '        uint256[] memory units = set.getUnits();\n', '\n', '        uint256 weightSum = 0;\n', '        uint256[] memory weight = new uint256[](components.length);\n', '        for (uint i = 0; i < components.length; i++) {\n', '            (weight[i], ) = kyber.getExpectedRate(components[i], ETHER_ADDRESS, units[i]);\n', '            weightSum = weightSum.add(weight[i]);\n', '        }\n', '\n', '        uint256 fitMintAmount = uint256(-1);\n', '        for (i = 0; i < components.length; i++) {\n', '            IERC20 token = IERC20(components[i]);\n', '\n', '            if (token.allowance(this, set) == 0) {\n', '                require(token.approve(set, uint256(-1)), "Approve failed");\n', '            }\n', '\n', '            uint256 amount = msg.value.mul(weight[i]).div(weightSum);\n', '            uint256 received = kyber.tradeWithHint.value(amount)(\n', '                ETHER_ADDRESS,\n', '                amount,\n', '                components[i],\n', '                this,\n', '                1 << 255,\n', '                0,\n', '                0,\n', '                ""\n', '            );\n', '\n', '            if (received / units[i] < fitMintAmount) {\n', '                fitMintAmount = received / units[i];\n', '            }\n', '        }\n', '\n', '        set.issue(fitMintAmount * set.naturalUnit());\n', '        set.transfer(msg.sender, set.balanceOf(this));\n', '\n', '        if (address(this).balance > 0) {\n', '            msg.sender.transfer(address(this).balance);\n', '        }\n', '        for (i = 0; i < components.length; i++) {\n', '            token = IERC20(components[i]);\n', '            if (token.balanceOf(this) > 0) {\n', '                require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");\n', '            }\n', '        }\n', '    }\n', '\n', '    function() public payable {\n', '        require(tx.origin != msg.sender);\n', '    }\n', '\n', '    // function sell(\n', '    //     ISetToken set,\n', '    //     uint256 amount,\n', '    //     bytes callDatas,\n', '    //     uint[] starts // including 0 and LENGTH values\n', '    // )\n', '    //     public\n', '    // {\n', '    //     set.burn(msg.sender, amount);\n', '\n', '    //     change(callDatas, starts);\n', '\n', '    //     address[] memory components = set.getComponents();\n', '\n', '    //     if (address(this).balance > 0) {\n', '    //         msg.sender.transfer(address(this).balance);\n', '    //     }\n', '    //     for (uint i = 0; i < components.length; i++) {\n', '    //         IERC20 token = IERC20(components[i]);\n', '    //         if (token.balanceOf(this) > 0) {\n', '    //             require(token.transfer(msg.sender, token.balanceOf(this)), "transfer failed");\n', '    //         }\n', '    //     }\n', '    // }\n', '}']