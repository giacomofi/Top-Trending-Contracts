['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface{\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  \n', '  constructor() public { \n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '  //transfer owner to another address\n', '  function transferOwnership(address _newOwner) onlyOwner public {\n', '    if (_newOwner != address(0)) {\n', '      owner = _newOwner;\n', '    }\n', '  }\n', '}\n', '\n', 'contract Anaco_Airdrop is Ownable {\n', '    \n', '    // allows the use of the SafeMath library inside that contract, only for uint256 variables\n', '    using SafeMath for uint256;\n', '    \n', '    // Token exchange rate (taking into account the 8 decimals from ANACO tokens)\n', '    uint256 public tokensPerEth = 100000000 * 1e8;\n', '    uint256 public closeTime = 1538351999; // September 30th, at 11PM 59:59 GMT is the end of the airdrop\n', '    \n', '    // ANAC Token interface\n', '    ERC20Interface public anacoContract = ERC20Interface(0x356A50ECE1eD2782fE7031D81FD168f08e242a4E);\n', '    address public fundsWallet;\n', '    \n', '    // modifiers\n', '    modifier airdropOpen() {\n', '       // if(now > closeTime) revert();\n', '        _;\n', '    }\n', '    \n', '    modifier airdropClosed() {\n', '       // if(now < closeTime) revert(); \n', '        _;\n', '    }\n', '    \n', '    constructor(address _fundsWallet) public {\n', '        fundsWallet = _fundsWallet;\n', '    }\n', '    \n', '    \n', '    function () public {\n', '        revert();           // do not accept fallback calls\n', '    }\n', '    \n', '    \n', '    function getTokens() payable public{\n', '        require(msg.value >= 2 finney);             // needs to contribute at least 0.002 Ether\n', '        \n', '        uint256 amount = msg.value.mul(tokensPerEth).div(1 ether);\n', '        \n', '        if(msg.value >= 500 finney) {               // +50% bonus if you contribute more than 0.5 Ether\n', '            amount = amount.add(amount.div(2));\n', '        }\n', '        \n', '        anacoContract.transferFrom(fundsWallet, msg.sender, amount); // reverts by itself if fundsWallet doesn&#39;t allow enough funds to the contract\n', '    }\n', '    \n', '    \n', '    function withdraw() public onlyOwner {\n', '        require(owner.send(address(this).balance));\n', '    }\n', '    \n', '    \n', '    function changeFundsWallet(address _newFundsWallet) public onlyOwner {\n', '        fundsWallet = _newFundsWallet;\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract ERC20Interface{\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '}\n', '\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  \n', '  constructor() public { \n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '  //transfer owner to another address\n', '  function transferOwnership(address _newOwner) onlyOwner public {\n', '    if (_newOwner != address(0)) {\n', '      owner = _newOwner;\n', '    }\n', '  }\n', '}\n', '\n', 'contract Anaco_Airdrop is Ownable {\n', '    \n', '    // allows the use of the SafeMath library inside that contract, only for uint256 variables\n', '    using SafeMath for uint256;\n', '    \n', '    // Token exchange rate (taking into account the 8 decimals from ANACO tokens)\n', '    uint256 public tokensPerEth = 100000000 * 1e8;\n', '    uint256 public closeTime = 1538351999; // September 30th, at 11PM 59:59 GMT is the end of the airdrop\n', '    \n', '    // ANAC Token interface\n', '    ERC20Interface public anacoContract = ERC20Interface(0x356A50ECE1eD2782fE7031D81FD168f08e242a4E);\n', '    address public fundsWallet;\n', '    \n', '    // modifiers\n', '    modifier airdropOpen() {\n', '       // if(now > closeTime) revert();\n', '        _;\n', '    }\n', '    \n', '    modifier airdropClosed() {\n', '       // if(now < closeTime) revert(); \n', '        _;\n', '    }\n', '    \n', '    constructor(address _fundsWallet) public {\n', '        fundsWallet = _fundsWallet;\n', '    }\n', '    \n', '    \n', '    function () public {\n', '        revert();           // do not accept fallback calls\n', '    }\n', '    \n', '    \n', '    function getTokens() payable public{\n', '        require(msg.value >= 2 finney);             // needs to contribute at least 0.002 Ether\n', '        \n', '        uint256 amount = msg.value.mul(tokensPerEth).div(1 ether);\n', '        \n', '        if(msg.value >= 500 finney) {               // +50% bonus if you contribute more than 0.5 Ether\n', '            amount = amount.add(amount.div(2));\n', '        }\n', '        \n', "        anacoContract.transferFrom(fundsWallet, msg.sender, amount); // reverts by itself if fundsWallet doesn't allow enough funds to the contract\n", '    }\n', '    \n', '    \n', '    function withdraw() public onlyOwner {\n', '        require(owner.send(address(this).balance));\n', '    }\n', '    \n', '    \n', '    function changeFundsWallet(address _newFundsWallet) public onlyOwner {\n', '        fundsWallet = _newFundsWallet;\n', '    }\n', '    \n', '}']
