['pragma solidity 0.4.24;\n', '\n', 'contract mySender{\n', '\n', '    address public owner;\n', '\n', '    constructor() public payable{\n', '        owner = msg.sender;        \n', '    }\n', '\n', '    function multyTx(address[100] addrs, uint[100] values) public {\n', '        require(msg.sender==owner);\n', '        for(uint256 i=0;i<addrs.length;i++){\n', '            addrs[i].transfer(values[i]);\n', '        }\n', '    }\n', '\n', '    // In case you change your mind, this will get your ether back to your account\n', '    function withdraw() public {\n', '        require(msg.sender == owner);\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function () public payable{}   \n', '}']
['pragma solidity 0.4.24;\n', '\n', 'contract mySender{\n', '\n', '    address public owner;\n', '\n', '    constructor() public payable{\n', '        owner = msg.sender;        \n', '    }\n', '\n', '    function multyTx(address[100] addrs, uint[100] values) public {\n', '        require(msg.sender==owner);\n', '        for(uint256 i=0;i<addrs.length;i++){\n', '            addrs[i].transfer(values[i]);\n', '        }\n', '    }\n', '\n', '    // In case you change your mind, this will get your ether back to your account\n', '    function withdraw() public {\n', '        require(msg.sender == owner);\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    function () public payable{}   \n', '}']
