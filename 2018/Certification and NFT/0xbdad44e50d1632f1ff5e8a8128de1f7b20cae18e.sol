['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Claimable.sol\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '    address public pendingOwner;\n', '\n', '    /**\n', '     * @dev Modifier throws if called by any account other than the pendingOwner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to set the pendingOwner address.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() onlyPendingOwner public {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/AddressList.sol\n', '\n', 'contract AddressList is Claimable {\n', '    string public name;\n', '    mapping(address => bool) public onList;\n', '\n', '    constructor(string _name, bool nullValue) public {\n', '        name = _name;\n', '        onList[0x0] = nullValue;\n', '    }\n', '\n', '    event ChangeWhiteList(address indexed to, bool onList);\n', '\n', '    // Set whether _to is on the list or not. Whether 0x0 is on the list\n', '    // or not cannot be set here - it is set once and for all by the constructor.\n', '    function changeList(address _to, bool _onList) onlyOwner public {\n', '        require(_to != 0x0);\n', '        if (onList[_to] != _onList) {\n', '            onList[_to] = _onList;\n', '            emit ChangeWhiteList(_to, _onList);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/NamableAddressList.sol\n', '\n', 'contract NamableAddressList is AddressList {\n', '    constructor(string _name, bool nullValue)\n', '    AddressList(_name, nullValue) public {}\n', '\n', '    function changeName(string _name) onlyOwner public {\n', '        name = _name;\n', '    }\n', '}']