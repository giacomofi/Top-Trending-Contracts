['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  address public contractOwner;\n', '\n', '  event ContractOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    contractOwner = msg.sender;\n', '  }\n', '\n', '  modifier onlyContractOwner() {\n', '    require(msg.sender == contractOwner);\n', '    _;\n', '  }\n', '\n', '  function transferContractOwnership(address _newOwner) public onlyContractOwner {\n', '    require(_newOwner != address(0));\n', '    ContractOwnershipTransferred(contractOwner, _newOwner);\n', '    contractOwner = _newOwner;\n', '  }\n', '  \n', '  function payoutFromContract() public onlyContractOwner {\n', '      contractOwner.transfer(this.balance);\n', '  }  \n', '\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', 'contract DoggyEthPics is ERC721, Ownable {\n', '\n', '  event DoggyCreated(uint256 tokenId, string name, address owner);\n', '  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);\n', '  event Transfer(address from, address to, uint256 tokenId);\n', '\n', '  string public constant NAME = "DoggyEthPics";\n', '  string public constant SYMBOL = "DoggyPicsToken";\n', '\n', '  uint256 private startingPrice = 0.01 ether;\n', '\n', '  mapping (uint256 => address) public doggyIdToOwner;\n', '\n', '  mapping (uint256 => address) public doggyIdToDivs;\n', '\n', '  mapping (address => uint256) private ownershipTokenCount;\n', '\n', '  mapping (uint256 => address) public doggyIdToApproved;\n', '\n', '  mapping (uint256 => uint256) private doggyIdToPrice;\n', '\n', '  /*** DATATYPES ***/\n', '  struct Doggy {\n', '    string name;\n', '  }\n', '\n', '  Doggy[] private doggies;\n', '\n', '  function approve(address _to, uint256 _tokenId) public { //ERC721\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '    doggyIdToApproved[_tokenId] = _to;\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) { //ERC721\n', '    return ownershipTokenCount[_owner];\n', '  }\n', '\n', '  function createDoggyToken(string _name, uint256 _price) private {\n', '    _createDoggy(_name, msg.sender, _price);\n', '  }\n', '\n', '  function create3DoggiesTokens() public onlyContractOwner { //migration\n', '\t  _createDoggy("EthDoggy", 0x4844928357e83855b1b9fbacf65947fe1ff48e26, 170859375000000000);\n', '\t  _createDoggy("EthDoggy", 0x5632ca98e5788eddb2397757aa82d1ed6171e5ad, 384433593750000000);\n', '\t  _createDoggy("EthDoggy", 0x28d02f67316123dc0293849a0d254ad86b379b34, 113906250000000000);\n', '\t  _createDoggy("EthDoggy", 0x28d02f67316123dc0293849a0d254ad86b379b34, 172995117187500000);\n', '\t  _createDoggy("EthDoggy", 0x7cd84443027d2e19473c3657f167ada34417654f, 113906250000000000);\n', '\t  _createDoggy("EthDoggy", 0x7cd84443027d2e19473c3657f167ada34417654f, 172995117187500000);\n', '\t  _createDoggy("EthDoggy", 0x7cd84443027d2e19473c3657f167ada34417654f, 403655273437500000);\n', '\t  _createDoggy("EthDoggy", 0xe6c58f8e459fe570afff5b4622990ea1744f0e28, 181644873046875000);\n', '\t  _createDoggy("EthDoggy", 0xe6c58f8e459fe570afff5b4622990ea1744f0e28, 423838037109375000);\n', '\t  \n', '  }\n', '  \n', '  function getDoggy(uint256 _tokenId) public view returns (string doggyName, uint256 sellingPrice, address owner) {\n', '    Doggy storage doggy = doggies[_tokenId];\n', '    doggyName = doggy.name;\n', '    sellingPrice = doggyIdToPrice[_tokenId];\n', '    owner = doggyIdToOwner[_tokenId];\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function name() public pure returns (string) { //ERC721\n', '    return NAME;\n', '  }\n', '\n', '  function ownerOf(uint256 _tokenId) public view returns (address owner) { //ERC721\n', '    owner = doggyIdToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  // Allows someone to send ether and obtain the token\n', '  function purchase(uint256 _tokenId) public payable {\n', '    address oldOwner = doggyIdToOwner[_tokenId];\n', '    address newOwner = msg.sender;\n', '\n', '    uint256 sellingPrice = doggyIdToPrice[_tokenId];\n', '\n', '    require(oldOwner != newOwner);\n', '    require(_addressNotNull(newOwner));\n', '    require(msg.value >= sellingPrice);\n', '\n', '    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 9), 10)); //90% to previous owner\n', '    uint256 divs_payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 1), 20)); //5% divs\n', '    \n', '\taddress divs_address = doggyIdToDivs[_tokenId];\n', '\t\n', '    // Next price will rise on 50%\n', '    doggyIdToPrice[_tokenId] = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 3), 2)); \n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '\n', '    // Pay previous tokenOwner if owner is not contract\n', '    if (oldOwner != address(this)) {\n', '      oldOwner.transfer(payment); //\n', '    }\n', '\n', '    // Pay winner tokenOwner if owner is not contract\n', '    if (divs_address != address(this)) {\n', '      divs_address.transfer(divs_payment); //\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, doggyIdToPrice[_tokenId], oldOwner, newOwner, doggies[_tokenId].name);\n', '\t\n', '    if (msg.value > sellingPrice) { //if excess pay\n', '\t    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '\t\tmsg.sender.transfer(purchaseExcess);\n', '\t}\n', '  }\n', '  \n', '  function changeDoggy(uint256 _tokenId) public payable { //\n', '    require(doggyIdToPrice[_tokenId] >= 300 finney);\n', '\t\n', '    require(doggyIdToOwner[_tokenId] == msg.sender && msg.value == 20 finney); //tax 0.02eth for change\n', '\t\n', '\tuint256 newPrice1 =  uint256(SafeMath.div(SafeMath.mul(doggyIdToPrice[_tokenId], 3), 10)); //30%\n', '\tuint256 newPrice2 =  uint256(SafeMath.div(SafeMath.mul(doggyIdToPrice[_tokenId], 7), 10)); //70%\n', '    \n', '    //get two doggies within one\n', '\tcreateDoggyToken("EthDoggy", newPrice1);\n', '\tcreateDoggyToken("EthDoggy", newPrice2);\n', '\t\n', '\tdoggyIdToOwner[_tokenId] = address(this); //return changed doggy to doggypics\n', '\tdoggyIdToPrice[_tokenId] = 10 finney;\n', '\t \n', '  }\n', '\n', '\n', '  function symbol() public pure returns (string) { //ERC721\n', '    return SYMBOL;\n', '  }\n', '\n', '\n', '  function takeOwnership(uint256 _tokenId) public { //ERC721\n', '    address newOwner = msg.sender;\n', '    address oldOwner = doggyIdToOwner[_tokenId];\n', '\n', '    require(_addressNotNull(newOwner));\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) { //for web site view\n', '    return doggyIdToPrice[_tokenId];\n', '  }\n', '\n', '  function ALLownersANDprices(uint256 _startDoggyId) public view returns (address[] owners, address[] divs, uint256[] prices) { //for web site view\n', '\t\n', '\tuint256 totalDoggies = totalSupply();\n', '\t\n', '    if (totalDoggies == 0 || _startDoggyId >= totalDoggies) {\n', '        // Return an empty array\n', '      return (new address[](0),new address[](0),new uint256[](0));\n', '    }\n', '\t\n', '\tuint256 indexTo;\n', '\tif (totalDoggies > _startDoggyId+1000)\n', '\t\tindexTo = _startDoggyId + 1000;\n', '\telse \t\n', '\t\tindexTo = totalDoggies;\n', '\t\t\n', '    uint256 totalResultDoggies = indexTo - _startDoggyId;\t\t\n', '\t\t\n', '\taddress[] memory owners_res = new address[](totalResultDoggies);\n', '\taddress[] memory divs_res = new address[](totalResultDoggies);\n', '\tuint256[] memory prices_res = new uint256[](totalResultDoggies);\n', '\t\n', '\tfor (uint256 doggyId = _startDoggyId; doggyId < indexTo; doggyId++) {\n', '\t  owners_res[doggyId - _startDoggyId] = doggyIdToOwner[doggyId];\n', '\t  divs_res[doggyId - _startDoggyId] = doggyIdToDivs[doggyId];\n', '\t  prices_res[doggyId - _startDoggyId] = doggyIdToPrice[doggyId];\n', '\t}\n', '\t\n', '\treturn (owners_res, divs_res, prices_res);\n', '  }\n', '  \n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerToken) { //ERC721 for web site view\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalDoggies = totalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 doggyId;\n', '      for (doggyId = 0; doggyId <= totalDoggies; doggyId++) {\n', '        if (doggyIdToOwner[doggyId] == _owner) {\n', '          result[resultIndex] = doggyId;\n', '          resultIndex++;\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256 total) { //ERC721\n', '    return doggies.length;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _tokenId) public { //ERC721\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '\t_transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public { //ERC721\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '\n', '  /* PRIVATE FUNCTIONS */\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return doggyIdToApproved[_tokenId] == _to;\n', '  }\n', '\n', '  function _createDoggy(string _name, address _owner, uint256 _price) private {\n', '    Doggy memory _doggy = Doggy({\n', '      name: _name\n', '    });\n', '    uint256 newDoggyId = doggies.push(_doggy) - 1;\n', '\n', '    require(newDoggyId == uint256(uint32(newDoggyId))); //check maximum limit of tokens\n', '\n', '    DoggyCreated(newDoggyId, _name, _owner);\n', '\n', '    doggyIdToPrice[newDoggyId] = _price;\n', '\t\n', '\tif (newDoggyId<3) //migration\n', '\t\tdoggyIdToDivs[newDoggyId] = address(this); //dividents address;\n', '\telse if (newDoggyId>2 && newDoggyId<=4) \n', '\t\tdoggyIdToDivs[newDoggyId] = address(0x28d02f67316123dc0293849a0d254ad86b379b34); //dividents address;\n', '\telse if (newDoggyId>4 && newDoggyId<=6) \n', '\t\tdoggyIdToDivs[newDoggyId] = address(0x7cd84443027d2e19473c3657f167ada34417654f); //dividents address;\n', '\telse if (newDoggyId>6 && newDoggyId<=8) \n', '\t\tdoggyIdToDivs[newDoggyId] = address(0xe6c58f8e459fe570afff5b4622990ea1744f0e28); //dividents address;\n', '\telse \n', '\t\tdoggyIdToDivs[newDoggyId] = _owner; //dividents address;\n', '\n', '    _transfer(address(0), _owner, newDoggyId);\n', '  }\n', '\n', '  function _owns(address _checkedAddr, uint256 _tokenId) private view returns (bool) {\n', '    return _checkedAddr == doggyIdToOwner[_tokenId];\n', '  }\n', '\n', 'function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    ownershipTokenCount[_to]++;\n', '    doggyIdToOwner[_tokenId] = _to;\n', '\n', "    // When creating new doggies _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      ownershipTokenCount[_from]--;\n', '      // clear any previously approved ownership exchange\n', '      delete doggyIdToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '}']