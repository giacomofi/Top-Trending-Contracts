['/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', 'contract ERC223Interface {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) constant returns (uint);\n', '    function transfer(address to, uint value);\n', '    function transfer(address to, uint value, bytes data);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '\n', ' /**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC223Token is ERC223Interface {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances; // List of user balances.\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) {\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', '     *      but doesn&#39;t contain `_data` param.\n', '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) {\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        Transfer(msg.sender, _to, _value, empty);\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', 'contract PajCoin223 is ERC223Token {\n', '\n', '    string public constant name = "PajCoin";\n', '    bytes32 public constant symbol = "PJC";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function PajCoin223() public {\n', '        bytes memory empty;\n', '        totalSupply = 150000000e18;\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(0x0, msg.sender, totalSupply, empty);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Exchanger is ERC223ReceivingContract, Ownable {\n', '\n', '    uint public rate = 30*1000000000;\n', '    uint public fee = 100000*3e9;\n', '\n', '    PajCoin223 public token = PajCoin223(0x1a85180ce3012e7715b913dd585afdf1a10f3025);\n', '\n', '    // event DataEvent(string comment);\n', '    event DataEvent(uint value, string comment);\n', '    // event DataEvent(bytes32 value, string comment);\n', '    // event DataEvent(bool value, string comment);\n', '    // event DataEvent(address addr, string comment);\n', '\n', '    // структ с юзером и суммой, которую он переслал\n', '    struct Deal {\n', '        address user;\n', '        uint money;\n', '    }\n', '    // очередь "забронированных" переводов на покупку токенов\n', '    mapping(uint => Deal) ethSended;\n', '    mapping(uint => Deal) coinSended;\n', '\n', '    // Счетчик людей, "забронировавших" токены.\n', '    // "Бронирование" значит, что человек прислал деньги на покупку, но курс еще\n', '    // не установлен. Соответственно, перевод средств добавляется в очередь и при\n', '    // следующем обновлении курса будет обработан\n', '    uint ethSendedNumber = 0;\n', '    uint coinSendedNumber = 0;\n', '\n', '    modifier allDealsArePaid {\n', '        require(ethSendedNumber == 0);\n', '        require(coinSendedNumber == 0);\n', '        _;\n', '    }\n', '\n', '    event LogPriceUpdated(uint price);\n', '\n', '    function Exchanger() public payable {\n', '        updater = msg.sender;\n', '    }\n', '\n', '    function needUpdate() public view returns (bool) {\n', '        return ethSendedNumber + coinSendedNumber > 0;\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev We use a single lock for the whole contract.\n', '     */\n', '    bool private reentrancy_lock = false;\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * @notice If you mark a function `nonReentrant`, you should also\n', '     * mark it `external`. Calling one nonReentrant function from\n', '     * another is not supported. Instead, you can implement a\n', '     * `private` function doing the actual work, and a `external`\n', '     * wrapper marked as `nonReentrant`.\n', '     */\n', '    modifier nonReentrant() {\n', '        require(!reentrancy_lock);\n', '        reentrancy_lock = true;\n', '        _;\n', '        reentrancy_lock = false;\n', '    }\n', '\n', '    /**\n', '     * @dev An account that commands to change a rate\n', '     */\n', '    address updater;\n', '\n', '    modifier onlyUpdater() {\n', '        require(msg.sender == updater);\n', '        _;\n', '    }\n', '\n', '    function setUpdater(address _updater) public onlyOwner() {\n', '        updater = _updater;\n', '    }\n', '\n', '    function setFee(uint _fee) public onlyOwner() {\n', '        fee = _fee;\n', '    }\n', '\n', '    function setToken(address addr) public onlyOwner {\n', '        token = PajCoin223(addr);\n', '    }\n', '\n', '    function getEth(uint amount) public onlyOwner allDealsArePaid {\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function getTokens(uint amount) public onlyOwner allDealsArePaid {\n', '        token.transfer(owner, amount);\n', '    }\n', '\n', '    function() public payable {\n', '        if (msg.sender != owner) {\n', '            require(fee <= msg.value);\n', '            DataEvent(msg.value, "Someone sent ether: amount");\n', '            ethSended[ethSendedNumber++] = Deal({user: msg.sender, money: msg.value});\n', '        }\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) {\n', '        // DataEvent(msg.sender, "from");\n', '\n', '        require(msg.sender == address(token));\n', '        if (_from != owner) {\n', '            require(fee <= _value * 1e9 / rate);\n', '            DataEvent(_value, "Someone sent coin: amount");\n', '            coinSended[coinSendedNumber++] = Deal({user: _from, money: _value});\n', '        }\n', '    }\n', '\n', '    function updateRate(uint _rate) public onlyUpdater nonReentrant{\n', '\n', '        rate = _rate;\n', '        LogPriceUpdated(rate);\n', '\n', '        uint personalFee = fee / (ethSendedNumber + coinSendedNumber);\n', '        DataEvent(personalFee, "Personal fee");\n', '\n', '        proceedEtherDeals(personalFee);\n', '        proceedTokenDeals(personalFee);\n', '\n', '    }\n', '\n', '    function proceedEtherDeals(uint personalFee) internal {\n', '        for (uint8 i = 0; i < ethSendedNumber; i++) {\n', '            address user = ethSended[i].user;\n', '            DataEvent(ethSended[i].money, "Someone sent ether: amount");\n', '            DataEvent(personalFee, "Fee: amount");\n', '            uint money = ethSended[i].money - personalFee;\n', '\n', '            DataEvent(money, "Discounted amount: amount");\n', '            uint value = money * rate / 1e9;\n', '            DataEvent(value, "Ether to tokens: amount");\n', '            if (money < 0) {\n', '                // Скинуто эфира меньше, чем комиссия\n', '            } else if (token.balanceOf(this) < value) {\n', '                DataEvent(token.balanceOf(this), "Not enough tokens: owner balance");\n', '                // Вернуть деньги, если токенов не осталось\n', '                user.transfer(money);\n', '            } else {\n', '                token.transfer(user, value);\n', '                DataEvent(value, "Tokens were sent to customer: amount");\n', '            }\n', '        }\n', '        ethSendedNumber = 0;\n', '    }\n', '\n', '    function proceedTokenDeals(uint personalFee) internal {\n', '        for (uint8 j = 0; j < coinSendedNumber; j++) {\n', '            address user = coinSended[j].user;\n', '            uint coin = coinSended[j].money;\n', '\n', '            DataEvent(coin, "Someone sent tokens: amount");\n', '            DataEvent(coin * 1e9 / rate, "Tokens to ether: amount");\n', '            uint value = coin * 1e9 / rate - personalFee;\n', '            DataEvent(personalFee, "Fee: amount");\n', '            DataEvent(value, "Tokens to discounted ether: amount");\n', '\n', '            if (value < 0) {\n', '                // Скинуто токенов меньше, чем комиссия\n', '            } else if (this.balance < value) {\n', '                // Вернуть токены, если денег не осталось\n', '                DataEvent(this.balance, "Not enough ether: contract balance");\n', '\n', '                token.transfer(user, coin);\n', '            } else {\n', '                user.transfer(value);\n', '                DataEvent(value, "Ether was sent to customer: amount");\n', '            }\n', '        }\n', '        coinSendedNumber = 0;\n', '    }\n', '}']
['/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      throw;\n', '    }\n', '  }\n', '}\n', '\n', '\n', 'contract ERC223Interface {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) constant returns (uint);\n', '    function transfer(address to, uint value);\n', '    function transfer(address to, uint value, bytes data);\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '\n', ' /**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', 'contract ERC223Token is ERC223Interface {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances; // List of user balances.\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint _value, bytes _data) {\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', "     *      but doesn't contain `_data` param.\n", '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) {\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        Transfer(msg.sender, _to, _value, empty);\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) constant returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', 'contract PajCoin223 is ERC223Token {\n', '\n', '    string public constant name = "PajCoin";\n', '    bytes32 public constant symbol = "PJC";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function PajCoin223() public {\n', '        bytes memory empty;\n', '        totalSupply = 150000000e18;\n', '        balances[msg.sender] = totalSupply;\n', '        Transfer(0x0, msg.sender, totalSupply, empty);\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Exchanger is ERC223ReceivingContract, Ownable {\n', '\n', '    uint public rate = 30*1000000000;\n', '    uint public fee = 100000*3e9;\n', '\n', '    PajCoin223 public token = PajCoin223(0x1a85180ce3012e7715b913dd585afdf1a10f3025);\n', '\n', '    // event DataEvent(string comment);\n', '    event DataEvent(uint value, string comment);\n', '    // event DataEvent(bytes32 value, string comment);\n', '    // event DataEvent(bool value, string comment);\n', '    // event DataEvent(address addr, string comment);\n', '\n', '    // структ с юзером и суммой, которую он переслал\n', '    struct Deal {\n', '        address user;\n', '        uint money;\n', '    }\n', '    // очередь "забронированных" переводов на покупку токенов\n', '    mapping(uint => Deal) ethSended;\n', '    mapping(uint => Deal) coinSended;\n', '\n', '    // Счетчик людей, "забронировавших" токены.\n', '    // "Бронирование" значит, что человек прислал деньги на покупку, но курс еще\n', '    // не установлен. Соответственно, перевод средств добавляется в очередь и при\n', '    // следующем обновлении курса будет обработан\n', '    uint ethSendedNumber = 0;\n', '    uint coinSendedNumber = 0;\n', '\n', '    modifier allDealsArePaid {\n', '        require(ethSendedNumber == 0);\n', '        require(coinSendedNumber == 0);\n', '        _;\n', '    }\n', '\n', '    event LogPriceUpdated(uint price);\n', '\n', '    function Exchanger() public payable {\n', '        updater = msg.sender;\n', '    }\n', '\n', '    function needUpdate() public view returns (bool) {\n', '        return ethSendedNumber + coinSendedNumber > 0;\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * @dev We use a single lock for the whole contract.\n', '     */\n', '    bool private reentrancy_lock = false;\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * @notice If you mark a function `nonReentrant`, you should also\n', '     * mark it `external`. Calling one nonReentrant function from\n', '     * another is not supported. Instead, you can implement a\n', '     * `private` function doing the actual work, and a `external`\n', '     * wrapper marked as `nonReentrant`.\n', '     */\n', '    modifier nonReentrant() {\n', '        require(!reentrancy_lock);\n', '        reentrancy_lock = true;\n', '        _;\n', '        reentrancy_lock = false;\n', '    }\n', '\n', '    /**\n', '     * @dev An account that commands to change a rate\n', '     */\n', '    address updater;\n', '\n', '    modifier onlyUpdater() {\n', '        require(msg.sender == updater);\n', '        _;\n', '    }\n', '\n', '    function setUpdater(address _updater) public onlyOwner() {\n', '        updater = _updater;\n', '    }\n', '\n', '    function setFee(uint _fee) public onlyOwner() {\n', '        fee = _fee;\n', '    }\n', '\n', '    function setToken(address addr) public onlyOwner {\n', '        token = PajCoin223(addr);\n', '    }\n', '\n', '    function getEth(uint amount) public onlyOwner allDealsArePaid {\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function getTokens(uint amount) public onlyOwner allDealsArePaid {\n', '        token.transfer(owner, amount);\n', '    }\n', '\n', '    function() public payable {\n', '        if (msg.sender != owner) {\n', '            require(fee <= msg.value);\n', '            DataEvent(msg.value, "Someone sent ether: amount");\n', '            ethSended[ethSendedNumber++] = Deal({user: msg.sender, money: msg.value});\n', '        }\n', '    }\n', '\n', '    function tokenFallback(address _from, uint _value, bytes _data) {\n', '        // DataEvent(msg.sender, "from");\n', '\n', '        require(msg.sender == address(token));\n', '        if (_from != owner) {\n', '            require(fee <= _value * 1e9 / rate);\n', '            DataEvent(_value, "Someone sent coin: amount");\n', '            coinSended[coinSendedNumber++] = Deal({user: _from, money: _value});\n', '        }\n', '    }\n', '\n', '    function updateRate(uint _rate) public onlyUpdater nonReentrant{\n', '\n', '        rate = _rate;\n', '        LogPriceUpdated(rate);\n', '\n', '        uint personalFee = fee / (ethSendedNumber + coinSendedNumber);\n', '        DataEvent(personalFee, "Personal fee");\n', '\n', '        proceedEtherDeals(personalFee);\n', '        proceedTokenDeals(personalFee);\n', '\n', '    }\n', '\n', '    function proceedEtherDeals(uint personalFee) internal {\n', '        for (uint8 i = 0; i < ethSendedNumber; i++) {\n', '            address user = ethSended[i].user;\n', '            DataEvent(ethSended[i].money, "Someone sent ether: amount");\n', '            DataEvent(personalFee, "Fee: amount");\n', '            uint money = ethSended[i].money - personalFee;\n', '\n', '            DataEvent(money, "Discounted amount: amount");\n', '            uint value = money * rate / 1e9;\n', '            DataEvent(value, "Ether to tokens: amount");\n', '            if (money < 0) {\n', '                // Скинуто эфира меньше, чем комиссия\n', '            } else if (token.balanceOf(this) < value) {\n', '                DataEvent(token.balanceOf(this), "Not enough tokens: owner balance");\n', '                // Вернуть деньги, если токенов не осталось\n', '                user.transfer(money);\n', '            } else {\n', '                token.transfer(user, value);\n', '                DataEvent(value, "Tokens were sent to customer: amount");\n', '            }\n', '        }\n', '        ethSendedNumber = 0;\n', '    }\n', '\n', '    function proceedTokenDeals(uint personalFee) internal {\n', '        for (uint8 j = 0; j < coinSendedNumber; j++) {\n', '            address user = coinSended[j].user;\n', '            uint coin = coinSended[j].money;\n', '\n', '            DataEvent(coin, "Someone sent tokens: amount");\n', '            DataEvent(coin * 1e9 / rate, "Tokens to ether: amount");\n', '            uint value = coin * 1e9 / rate - personalFee;\n', '            DataEvent(personalFee, "Fee: amount");\n', '            DataEvent(value, "Tokens to discounted ether: amount");\n', '\n', '            if (value < 0) {\n', '                // Скинуто токенов меньше, чем комиссия\n', '            } else if (this.balance < value) {\n', '                // Вернуть токены, если денег не осталось\n', '                DataEvent(this.balance, "Not enough ether: contract balance");\n', '\n', '                token.transfer(user, coin);\n', '            } else {\n', '                user.transfer(value);\n', '                DataEvent(value, "Ether was sent to customer: amount");\n', '            }\n', '        }\n', '        coinSendedNumber = 0;\n', '    }\n', '}']
