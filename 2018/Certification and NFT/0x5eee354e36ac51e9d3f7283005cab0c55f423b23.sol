['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/ArbitrageETHStaking.sol\n', '\n', '/**\n', '* @title ArbitrageETHStaking\n', '* @dev The ArbitrageETHStaking contract staking Ether(ETH) tokens.\n', '*      Here is stored all function and data of user stakes in contract.\n', '*      Staking is configured for 2%.\n', '*/\n', 'contract ArbitrageETHStaking is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /*==============================\n', '     =            EVENTS            =\n', '     ==============================*/\n', '\n', '    event onPurchase(\n', '       address indexed customerAddress,\n', '       uint256 etherIn,\n', '       uint256 contractBal,\n', '       uint256 poolFee,\n', '       uint timestamp\n', '    );\n', '\n', '    event onWithdraw(\n', '         address indexed customerAddress,\n', '         uint256 etherOut,\n', '         uint256 contractBal,\n', '         uint timestamp\n', '    );\n', '\n', '\n', '    /*** STORAGE ***/\n', '\n', '    mapping(address => uint256) internal personalFactorLedger_; // personal factor ledger\n', '    mapping(address => uint256) internal balanceLedger_; // users balance ledger\n', '\n', '    // Configurations\n', '    uint256 minBuyIn = 0.001 ether; // can&#39;t buy less then 0.0001 ETH\n', '    uint256 stakingPrecent = 2;\n', '    uint256 internal globalFactor = 10e21; // global factor\n', '    uint256 constant internal constantFactor = 10e21 * 10e21; // constant factor\n', '\n', '    /// @dev Forward all Ether in buy() function\n', '    function() external payable {\n', '        buy();\n', '    }\n', '\n', '    // @dev Buy in staking pool, transfer ethereum in the contract, pay 2% fee\n', '    function buy()\n', '        public\n', '        payable\n', '    {\n', '        address _customerAddress = msg.sender;\n', '\n', '        require(msg.value >= minBuyIn, "should be more the 0.0001 ether sent");\n', '\n', '        uint256 _etherBeforeBuyIn = getBalance().sub(msg.value);\n', '\n', '        uint256 poolFee;\n', '        // Check is not a first buy in\n', '        if (_etherBeforeBuyIn != 0) {\n', '\n', '            // Add 2% fee of the buy to the staking pool\n', '            poolFee = msg.value.mul(stakingPrecent).div(100);\n', '\n', '            // Increase amount of eth everyone else owns\n', '            uint256 globalIncrease = globalFactor.mul(poolFee) / _etherBeforeBuyIn;\n', '            globalFactor = globalFactor.add(globalIncrease);\n', '        }\n', '\n', '\n', '        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).add(msg.value).sub(poolFee);\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '\n', '        emit onPurchase(_customerAddress, msg.value, getBalance(), poolFee, now);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw selected amount of ethereum from the contract back to user,\n', '     *      update the balance.\n', '     * @param _sellEth - Amount of ethereum to withdraw from contract\n', '     */\n', '    function withdraw(uint256 _sellEth)\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        // User must have enough eth and cannot sell 0\n', '        require(_sellEth > 0, "user cant spam transactions with 0 value");\n', '        require(_sellEth <= ethBalanceOf(_customerAddress), "user cant withdraw more then he holds ");\n', '\n', '\n', '        // Transfer balance and update user ledgers\n', '        _customerAddress.transfer(_sellEth);\n', '        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).sub(_sellEth);\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '\n', '        emit onWithdraw(_customerAddress, _sellEth, getBalance(), now);\n', '    }\n', '\n', '    // @dev Withdraw all the ethereum user holds in the contract, set balance to 0\n', '    function withdrawAll()\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        // Set the sell amount to the user&#39;s full balance, don&#39;t sell if empty\n', '        uint256 _sellEth = ethBalanceOf(_customerAddress);\n', '        require(_sellEth > 0, "user cant call withdraw, when holds nothing");\n', '        // Transfer balance and update user ledgers\n', '        _customerAddress.transfer(_sellEth);\n', '        balanceLedger_[_customerAddress] = 0;\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '\n', '        emit onWithdraw(_customerAddress, _sellEth, getBalance(), now);\n', '    }\n', '\n', '    /**\n', '    * UI Logic - View Functions\n', '    */\n', '\n', '    // @dev Returns contract ETH balance\n', '    function getBalance()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '\n', '    // @dev Returns user ETH tokens balance in contract\n', '    function ethBalanceOf(address _customerAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // Balance ledger * personal factor * globalFactor / constantFactor\n', '        return balanceLedger_[_customerAddress].mul(personalFactorLedger_[_customerAddress]).mul(globalFactor) / constantFactor;\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/ArbitrageETHStaking.sol\n', '\n', '/**\n', '* @title ArbitrageETHStaking\n', '* @dev The ArbitrageETHStaking contract staking Ether(ETH) tokens.\n', '*      Here is stored all function and data of user stakes in contract.\n', '*      Staking is configured for 2%.\n', '*/\n', 'contract ArbitrageETHStaking is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /*==============================\n', '     =            EVENTS            =\n', '     ==============================*/\n', '\n', '    event onPurchase(\n', '       address indexed customerAddress,\n', '       uint256 etherIn,\n', '       uint256 contractBal,\n', '       uint256 poolFee,\n', '       uint timestamp\n', '    );\n', '\n', '    event onWithdraw(\n', '         address indexed customerAddress,\n', '         uint256 etherOut,\n', '         uint256 contractBal,\n', '         uint timestamp\n', '    );\n', '\n', '\n', '    /*** STORAGE ***/\n', '\n', '    mapping(address => uint256) internal personalFactorLedger_; // personal factor ledger\n', '    mapping(address => uint256) internal balanceLedger_; // users balance ledger\n', '\n', '    // Configurations\n', "    uint256 minBuyIn = 0.001 ether; // can't buy less then 0.0001 ETH\n", '    uint256 stakingPrecent = 2;\n', '    uint256 internal globalFactor = 10e21; // global factor\n', '    uint256 constant internal constantFactor = 10e21 * 10e21; // constant factor\n', '\n', '    /// @dev Forward all Ether in buy() function\n', '    function() external payable {\n', '        buy();\n', '    }\n', '\n', '    // @dev Buy in staking pool, transfer ethereum in the contract, pay 2% fee\n', '    function buy()\n', '        public\n', '        payable\n', '    {\n', '        address _customerAddress = msg.sender;\n', '\n', '        require(msg.value >= minBuyIn, "should be more the 0.0001 ether sent");\n', '\n', '        uint256 _etherBeforeBuyIn = getBalance().sub(msg.value);\n', '\n', '        uint256 poolFee;\n', '        // Check is not a first buy in\n', '        if (_etherBeforeBuyIn != 0) {\n', '\n', '            // Add 2% fee of the buy to the staking pool\n', '            poolFee = msg.value.mul(stakingPrecent).div(100);\n', '\n', '            // Increase amount of eth everyone else owns\n', '            uint256 globalIncrease = globalFactor.mul(poolFee) / _etherBeforeBuyIn;\n', '            globalFactor = globalFactor.add(globalIncrease);\n', '        }\n', '\n', '\n', '        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).add(msg.value).sub(poolFee);\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '\n', '        emit onPurchase(_customerAddress, msg.value, getBalance(), poolFee, now);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw selected amount of ethereum from the contract back to user,\n', '     *      update the balance.\n', '     * @param _sellEth - Amount of ethereum to withdraw from contract\n', '     */\n', '    function withdraw(uint256 _sellEth)\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        // User must have enough eth and cannot sell 0\n', '        require(_sellEth > 0, "user cant spam transactions with 0 value");\n', '        require(_sellEth <= ethBalanceOf(_customerAddress), "user cant withdraw more then he holds ");\n', '\n', '\n', '        // Transfer balance and update user ledgers\n', '        _customerAddress.transfer(_sellEth);\n', '        balanceLedger_[_customerAddress] = ethBalanceOf(_customerAddress).sub(_sellEth);\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '\n', '        emit onWithdraw(_customerAddress, _sellEth, getBalance(), now);\n', '    }\n', '\n', '    // @dev Withdraw all the ethereum user holds in the contract, set balance to 0\n', '    function withdrawAll()\n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', "        // Set the sell amount to the user's full balance, don't sell if empty\n", '        uint256 _sellEth = ethBalanceOf(_customerAddress);\n', '        require(_sellEth > 0, "user cant call withdraw, when holds nothing");\n', '        // Transfer balance and update user ledgers\n', '        _customerAddress.transfer(_sellEth);\n', '        balanceLedger_[_customerAddress] = 0;\n', '        personalFactorLedger_[_customerAddress] = constantFactor / globalFactor;\n', '\n', '        emit onWithdraw(_customerAddress, _sellEth, getBalance(), now);\n', '    }\n', '\n', '    /**\n', '    * UI Logic - View Functions\n', '    */\n', '\n', '    // @dev Returns contract ETH balance\n', '    function getBalance()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '\n', '    // @dev Returns user ETH tokens balance in contract\n', '    function ethBalanceOf(address _customerAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // Balance ledger * personal factor * globalFactor / constantFactor\n', '        return balanceLedger_[_customerAddress].mul(personalFactorLedger_[_customerAddress]).mul(globalFactor) / constantFactor;\n', '    }\n', '}']
