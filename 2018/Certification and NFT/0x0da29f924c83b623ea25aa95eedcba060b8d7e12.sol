['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title VeloxCrowdsale\n', ' * @dev VeloxToken ERC20 token crowdsale contract\n', ' */\n', 'contract VeloxCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Crowdsale start and end timestamps\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // Price per smallest token unit in wei\n', '    uint256 public rate;\n', '\n', '    // Crowdsale cap in tokens\n', '    uint256 public cap;\n', '\n', '    // Address where ETH and unsold tokens are collected\n', '    address public wallet;\n', '\n', '    // Amount of tokens sold\n', '    uint256 public sold;\n', '\n', '    /**\n', '     * @dev Constructor to set instance variables\n', '     */\n', '    constructor(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        uint256 _cap,\n', '        address _wallet,\n', '        ERC20 _token\n', '    ) public {\n', '        require(_startTime >= block.timestamp && _endTime >= _startTime);\n', '        require(_rate > 0);\n', '        require(_cap > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        rate = _rate;\n', '        cap = _cap;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    /**\n', '     * @dev Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * @dev Fallback token purchase function\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Token purchase function\n', '     * @param _beneficiary Address receiving the purchased tokens\n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '        uint256 weiAmount = msg.value;\n', '        require(_beneficiary != address(0));\n', '        require(weiAmount != 0);\n', '        require(block.timestamp >= startTime && block.timestamp <= endTime);\n', '        uint256 tokens = weiAmount.div(rate);\n', '        require(tokens != 0 && sold.add(tokens) <= cap);\n', '        sold = sold.add(tokens);\n', '        require(token.transfer(_beneficiary, tokens));\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _beneficiary,\n', '            weiAmount,\n', '            tokens\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Checks whether the cap has been reached.\n', '    * @return Whether the cap was reached\n', '    */\n', '    function capReached() public view returns (bool) {\n', '        return sold >= cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Boolean to protect from replaying the finalization function\n', '     */\n', '    bool public isFinalized = false;\n', '\n', '    /**\n', '     * @dev Event for crowdsale finalization (forwarding)\n', '     */\n', '    event Finalized();\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends to forward all funds\n', '     */\n', '    function finalize() external onlyOwner {\n', '        require(!isFinalized);\n', '        require(block.timestamp > endTime || sold >= cap);\n', '        token.transfer(wallet, token.balanceOf(this));\n', '        wallet.transfer(address(this).balance);\n', '        emit Finalized();\n', '        isFinalized = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function for owner to forward ETH from contract\n', '     */\n', '    function forwardFunds() external onlyOwner {\n', '        require(!isFinalized);\n', '        require(block.timestamp > startTime);\n', '        uint256 balance = address(this).balance;\n', '        require(balance > 0);\n', '        wallet.transfer(balance);\n', '    }\n', '}']