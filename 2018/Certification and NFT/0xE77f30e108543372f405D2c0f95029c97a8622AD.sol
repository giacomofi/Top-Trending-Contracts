['pragma solidity ^0.4.18;\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '    function approve(address spender, uint256 tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', '/*\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '*/\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    \n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and an\n', '// initial fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract StandardToken is ERC20Interface, Owned {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant symbol = "ast";\n', '    string public constant name = "AllStocks Token";\n', '    uint256 public constant decimals = 18;\n', '    uint256 public _totalSupply;\n', '\n', '    bool public isFinalized;              // switched to true in operational state\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '\n', '    mapping(address => uint256) refunds;\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    function StandardToken() public {\n', '\n', '        //_totalSupply = 1000000 * 10**uint(decimals);\n', '        //balances[owner] = _totalSupply;\n', '        //Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply - balances[address(0)];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public constant returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint256 tokens) public returns (bool success) {\n', '        \n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(to != 0x0);\n', '        \n', '        //allow trading in tokens only if sale fhined or by token creator (for bounty program)\n', '        if (msg.sender != owner)\n', '            require(isFinalized);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint256 tokens) public returns (bool success) {\n', '        //allow trading in token only if sale fhined \n', '        require(isFinalized);\n', '\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint256 tokens) public returns (bool success) {\n', '        //allow trading in token only if sale fhined \n', '        require(isFinalized);\n', '\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining) {\n', '        //allow trading in token only if sale fhined \n', '        require(isFinalized);\n', '        \n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '}\n', '\n', '// note introduced onlyPayloadSize in StandardToken.sol to protect against short address attacks\n', '\n', 'contract AllstocksToken is StandardToken {\n', '    string public version = "1.0";\n', '\n', '    // contracts\n', '    address public ethFundDeposit;        // deposit address for ETH for Allstocks Fund\n', '\n', '    // crowdsale parameters\n', '    bool public isActive;                 // switched to true in after setup\n', '    uint256 public fundingStartTime = 0;\n', '    uint256 public fundingEndTime = 0;\n', '    uint256 public allstocksFund = 25 * (10**6) * 10**decimals;     // 25m reserved for Allstocks use\n', '    uint256 public tokenExchangeRate = 625;                         // 625 Allstocks tokens per 1 ETH\n', '    uint256 public tokenCreationCap =  50 * (10**6) * 10**decimals; // 50m hard cap\n', '    \n', '    //this is for production\n', '    uint256 public tokenCreationMin =  25 * (10**5) * 10**decimals; // 2.5m minimum\n', '\n', '\n', '    // events\n', '    event LogRefund(address indexed _to, uint256 _value);\n', '    event CreateAllstocksToken(address indexed _to, uint256 _value);\n', '\n', '    // constructor\n', '    function AllstocksToken() public {\n', '      isFinalized = false;                         //controls pre through crowdsale state\n', '      owner = msg.sender;\n', '      _totalSupply = allstocksFund;\n', '      balances[owner] = allstocksFund;             // Deposit Allstocks share\n', '      CreateAllstocksToken(owner, allstocksFund);  // logs Allstocks fund\n', '    }\n', '\n', '    function setup (\n', '        uint256 _fundingStartTime,\n', '        uint256 _fundingEndTime) onlyOwner external\n', '    {\n', '      require (isActive == false); \n', '      require (isFinalized == false); \t\t\t        \t   \n', '      require (msg.sender == owner);                 // locks finalize to the ultimate ETH owner\n', '      require (fundingStartTime == 0);              //run once\n', '      require (fundingEndTime == 0);                //first time \n', '      require(_fundingStartTime > 0);\n', '      require(_fundingEndTime > 0 && _fundingEndTime > _fundingStartTime);\n', '\n', '      isFinalized = false;                          //controls pre through crowdsale state\n', '      isActive = true;\n', '      ethFundDeposit = owner;                       // set ETH wallet owner \n', '      fundingStartTime = _fundingStartTime;\n', '      fundingEndTime = _fundingEndTime;\n', '    }\n', '\n', '    function () public payable {       \n', '      createTokens(msg.value);\n', '    }\n', '\n', '    /// @dev Accepts ether and creates new Allstocks tokens.\n', '    function createTokens(uint256 _value)  internal {\n', '      require(isFinalized == false);    \n', '      require(now >= fundingStartTime);\n', '      require(now < fundingEndTime); \n', '      require(msg.value > 0);         \n', '\n', '      uint256 tokens = _value.mul(tokenExchangeRate); // check that we&#39;re not over totals\n', '      uint256 checkedSupply = _totalSupply.add(tokens);\n', '\n', '      require(checkedSupply <= tokenCreationCap);\n', '\n', '      _totalSupply = checkedSupply;\n', '      balances[msg.sender] += tokens;  // safeAdd not needed\n', '\n', '      //add sent eth to refunds list\n', '      refunds[msg.sender] = _value.add(refunds[msg.sender]);  // safeAdd \n', '\n', '      CreateAllstocksToken(msg.sender, tokens);  // logs token creation\n', '      Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\t\n', '\t//method for manageing bonus phases \n', '\tfunction setRate(uint256 _value) external onlyOwner {\n', '      require (isFinalized == false);\n', '      require (isActive == true);\n', '      require (_value > 0);\n', '      require(msg.sender == owner); // Allstocks double chack \n', '      tokenExchangeRate = _value;\n', '\n', '    }\n', '\n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function finalize() external onlyOwner {\n', '      require (isFinalized == false);\n', '      require(msg.sender == owner); // Allstocks double chack  \n', '      require(_totalSupply >= tokenCreationMin + allstocksFund);  // have to sell minimum to move to operational\n', '      require(_totalSupply > 0);\n', '\n', '      if (now < fundingEndTime) {    //if try to close before end time, check that we reach target\n', '        require(_totalSupply >= tokenCreationCap);\n', '      }\n', '      else \n', '        require(now >= fundingEndTime);\n', '      \n', '\t    // move to operational\n', '      isFinalized = true;\n', '      ethFundDeposit.transfer(this.balance);  // send the eth to Allstocks\n', '    }\n', '\n', '    /// @dev send funding to safe wallet if minimum is reached \n', '    function vaultFunds() external onlyOwner {\n', '      require(msg.sender == owner);            // Allstocks double chack\n', '      require(_totalSupply >= tokenCreationMin + allstocksFund); // have to sell minimum to move to operational\n', '      ethFundDeposit.transfer(this.balance);  // send the eth to Allstocks\n', '    }\n', '\n', '    /// @dev Allows contributors to recover their ether in the case of a failed funding campaign.\n', '    function refund() external {\n', '      require (isFinalized == false);  // prevents refund if operational\n', '      require (isActive == true);\n', '      require (now > fundingEndTime); // prevents refund until sale period is over\n', '     \n', '      require(_totalSupply < tokenCreationMin + allstocksFund);  // no refunds if we sold enough\n', '      require(msg.sender != owner); // Allstocks not entitled to a refund\n', '      \n', '      uint256 allstocksVal = balances[msg.sender];\n', '      uint256 ethValRefund = refunds[msg.sender];\n', '     \n', '      require(allstocksVal > 0);   \n', '      require(ethValRefund > 0);  \n', '     \n', '      balances[msg.sender] = 0;\n', '      refunds[msg.sender] = 0;\n', '      \n', '      _totalSupply = _totalSupply.sub(allstocksVal); // extra safe\n', '      \n', '      uint256 ethValToken = allstocksVal / tokenExchangeRate;     // should be safe; previous throws covers edges\n', '\n', '      require(ethValRefund <= ethValToken);\n', '      msg.sender.transfer(ethValRefund);                 // if you&#39;re using a contract; make sure it works with .send gas limits\n', '      LogRefund(msg.sender, ethValRefund);               // log it\n', '    }\n', '}']