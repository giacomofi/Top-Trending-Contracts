['pragma solidity ^0.4.24;\n', '\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address indexed operator, string role);\n', '  event RoleRemoved(address indexed operator, string role);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address _operator, string _role)\n', '    public\n', '    view\n', '  {\n', '    roles[_role].check(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address _operator, string _role)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return roles[_role].has(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function addRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].add(_operator);\n', '    emit RoleAdded(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function removeRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].remove(_operator);\n', '    emit RoleRemoved(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string _role)\n', '  {\n', '    checkRole(msg.sender, _role);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param _roles the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] _roles) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < _roles.length; i++) {\n', '  //         if (hasRole(msg.sender, _roles[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage _role, address _addr)\n', '    internal\n', '  {\n', '    _role.bearer[_addr] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address&#39; access to this role\n', '   */\n', '  function remove(Role storage _role, address _addr)\n', '    internal\n', '  {\n', '    _role.bearer[_addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage _role, address _addr)\n', '    internal\n', '    view\n', '  {\n', '    require(has(_role, _addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage _role, address _addr)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _role.bearer[_addr];\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', '   * Example from CappedCrowdsale.sol&#39;s _preValidatePurchase method: \n', '   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n', '   *   require(weiRaised.add(_weiAmount) <= cap);\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.safeTransfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract Whitelist is Ownable, RBAC {\n', '  string public constant ROLE_WHITELISTED = "whitelist";\n', '\n', '  /**\n', '   * @dev Throws if operator is not whitelisted.\n', '   * @param _operator address\n', '   */\n', '  modifier onlyIfWhitelisted(address _operator) {\n', '    checkRole(_operator, ROLE_WHITELISTED);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address _operator)\n', '    public\n', '    onlyOwner\n', '  {\n', '    addRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function whitelist(address _operator)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return hasRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] _operators)\n', '    public\n', '    onlyOwner\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was removed from the whitelist,\n', '   * false if the address wasn&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressFromWhitelist(address _operator)\n', '    public\n', '    onlyOwner\n', '  {\n', '    removeRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', '   * false if all addresses weren&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressesFromWhitelist(address[] _operators)\n', '    public\n', '    onlyOwner\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract TokenDestructible is Ownable {\n', '\n', '  constructor() public payable { }\n', '\n', '  /**\n', '   * @notice Terminate contract and refund to owner\n', '   * @param _tokens List of addresses of ERC20 or ERC20Basic token contracts to\n', '   refund.\n', '   * @notice The called token contracts could try to re-enter this contract. Only\n', '   supply token contracts you trust.\n', '   */\n', '  function destroy(address[] _tokens) public onlyOwner {\n', '\n', '    // Transfer tokens to owner\n', '    for (uint256 i = 0; i < _tokens.length; i++) {\n', '      ERC20Basic token = ERC20Basic(_tokens[i]);\n', '      uint256 balance = token.balanceOf(this);\n', '      token.transfer(owner, balance);\n', '    }\n', '\n', '    // Transfer Eth to owner and terminate contract\n', '    selfdestruct(owner);\n', '  }\n', '}\n', '\n', 'contract VictorTokenSale is TimedCrowdsale, Ownable, Whitelist, TokenDestructible {\n', '\n', '  using SafeMath for uint256;\n', '\n', '\n', '\n', '  // stage bonus\n', '\n', '  uint256 public constant STAGE_1_BONUS_RT = 35;\n', '\n', '  uint256 public constant STAGE_2_BONUS_RT = 30;\n', '\n', '  uint256 public constant STAGE_3_BONUS_RT = 25;\n', '\n', '  uint256 public constant STAGE_4_BONUS_RT = 20;\n', '\n', '  uint256 public constant STAGE_5_BONUS_RT = 15;\n', '\n', '  uint256 public constant STAGE_6_BONUS_RT = 10;\n', '\n', '  uint256 public constant STAGE_7_BONUS_RT =  5;\n', '\n', '\n', '\n', '  // BOUNDARY ethereum conv:  22000 / 44000 / 66000 / 88000 / 110000 / 132000 / 154000\n', '\n', '  // This is wei * 25000 limit.\n', '\n', '  uint256 public constant BOUNDARY_1 =  550000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_2 = 1100000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_3 = 1650000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_4 = 2200000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_5 = 2750000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_6 = 3300000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_7 = 3850000000000000000000000000; // End of Sales amount\n', '\n', '\n', '\n', '  VictorToken _token;\n', '\n', '\n', '\n', '  uint256 public bonusRate;\n', '\n', '  uint256 public calcAdditionalRatio;\n', '\n', '  uint256 public cumulativeSumofToken = 0;\n', '\n', '\n', '\n', '  uint256 public minimum_buy_limit = 0.1 ether;\n', '\n', '  uint256 public maximum_buy_limit = 1000 ether;\n', '\n', '\n', '\n', '  event SetPeriod(uint256 _openingTime, uint256 _closingTime);\n', '\n', '  event SetBuyLimit(uint256 _minLimit, uint256 _maxLimit);\n', '\n', '\n', '\n', '  // ----------------------------------------------------------------------------------- \n', '\n', '  // Constructor\n', '\n', '  // ----------------------------------------------------------------------------------- \n', '\n', '  // Fixed exchange ratio: 25000 (FIXED!)\n', '\n', '  // Fixed period of sale: 16 weeks from now set as sales period (changeable)\n', '\n', '  constructor(\n', '\n', '    VictorToken _token_,\n', '\n', '    address _wallet\n', '\n', '  )\n', '\n', '    public\n', '\n', '    Crowdsale(25000, _wallet, _token_)\n', '\n', '    TimedCrowdsale(block.timestamp, block.timestamp + 16 weeks)\n', '\n', '  {\n', '\n', '    _token = _token_;\n', '\n', '\n', '\n', '    emit SetPeriod(openingTime, closingTime);\n', '\n', '\n', '\n', '    calcBonusRate();\n', '\n', '  }\n', '\n', '\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  // override fuction.\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  function _preValidatePurchase(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _weiAmount\n', '\n', '  )\n', '\n', '    onlyWhileOpen\n', '\n', '    onlyIfWhitelisted(_beneficiary)\n', '\n', '    internal\n', '\n', '  {\n', '\n', '    require(_beneficiary != address(0));\n', '\n', '    require(_weiAmount >= minimum_buy_limit);\n', '\n', '    require(_weiAmount <= maximum_buy_limit);\n', '\n', '    require(BOUNDARY_7 >= (cumulativeSumofToken + _weiAmount));\n', '\n', '  }\n', '\n', '\n', '\n', '  // override fuction. default + bonus token\n', '\n', '  function _getTokenAmount(\n', '\n', '    uint256 _weiAmount\n', '\n', '  )\n', '\n', '    internal\n', '\n', '    view\n', '\n', '    returns (uint256)\n', '\n', '  {\n', '\n', '    return (_weiAmount.mul(rate)).add(_weiAmount.mul(calcAdditionalRatio)) ;\n', '\n', '  }\n', '\n', '\n', '\n', '  // override fuction.\n', '\n', '  // bonus token locking\n', '\n', '  // stage bonus boundary check and change.\n', '\n', '  function _updatePurchasingState(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _weiAmount\n', '\n', '  )\n', '\n', '    internal\n', '\n', '  {\n', '\n', '    uint256 lockBalance = _weiAmount.mul(calcAdditionalRatio);\n', '\n', '\n', '\n', '    _token.increaseLockBalance(_beneficiary, lockBalance);\n', '\n', '    \n', '\n', '    cumulativeSumofToken = cumulativeSumofToken.add(_weiAmount.mul(rate));\n', '\n', '\n', '\n', '    calcBonusRate();\n', '\n', '\n', '\n', '    return;\n', '\n', '  }\n', '\n', '\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  // Utility function\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  // Bonus rate calcuration.\n', '\n', '  function calcBonusRate()\n', '\n', '    public\n', '\n', '  {\n', '\n', '    if      (cumulativeSumofToken >=          0 && cumulativeSumofToken < BOUNDARY_1 && bonusRate != STAGE_1_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_1_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_1 && cumulativeSumofToken < BOUNDARY_2 && bonusRate != STAGE_2_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_2_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_2 && cumulativeSumofToken < BOUNDARY_3 && bonusRate != STAGE_3_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_3_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_3 && cumulativeSumofToken < BOUNDARY_4 && bonusRate != STAGE_4_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_4_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_4 && cumulativeSumofToken < BOUNDARY_5 && bonusRate != STAGE_5_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_5_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_5 && cumulativeSumofToken < BOUNDARY_6 && bonusRate != STAGE_6_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_6_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_6 && cumulativeSumofToken < BOUNDARY_7 && bonusRate != STAGE_7_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_7_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_7)\n', '\n', '    {\n', '\n', '      bonusRate = 0;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    \n', '\n', '    return;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Change open, close time and bonus rate. _openingTime, _closingTime is epoch (like 1532919600)\n', '\n', '  function changePeriod(\n', '\n', '    uint256 _openingTime,\n', '\n', '    uint256 _closingTime\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(_openingTime >= block.timestamp);\n', '\n', '    require(_closingTime >= _openingTime);\n', '\n', '\n', '\n', '    openingTime = _openingTime;\n', '\n', '    closingTime = _closingTime;\n', '\n', '\n', '\n', '    calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '\n', '\n', '    emit SetPeriod(openingTime, closingTime);\n', '\n', '\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Buyer limit change\n', '\n', '  function changeLimit(\n', '\n', '    uint256 _minLimit,\n', '\n', '    uint256 _maxLimit\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(_minLimit >= 0 ether);\n', '\n', '    require(_maxLimit >= 3 ether);\n', '\n', '\n', '\n', '    minimum_buy_limit = _minLimit;\n', '\n', '    maximum_buy_limit = _maxLimit;\n', '\n', '\n', '\n', '    emit SetBuyLimit(minimum_buy_limit, maximum_buy_limit);\n', '\n', '\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // bonus drop. Bonus tokens take a lock.\n', '\n', '  function bonusDrop(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _tokenAmount\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    _processPurchase(_beneficiary, _tokenAmount);\n', '\n', '\n', '\n', '    emit TokenPurchase(\n', '\n', '      msg.sender,\n', '\n', '      _beneficiary,\n', '\n', '      0,\n', '\n', '      _tokenAmount\n', '\n', '    );\n', '\n', '\n', '\n', '    _token.increaseLockBalance(_beneficiary, _tokenAmount);\n', '\n', '\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // bonus drop. Bonus tokens are not locked !!!\n', '\n', '  function unlockBonusDrop(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _tokenAmount\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    _processPurchase(_beneficiary, _tokenAmount);\n', '\n', '\n', '\n', '    emit TokenPurchase(\n', '\n', '      msg.sender,\n', '\n', '      _beneficiary,\n', '\n', '      0,\n', '\n', '      _tokenAmount\n', '\n', '    );\n', '\n', '\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  // Token Interface\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  // Increases the lock on the balance at a specific address.\n', '\n', '  function increaseTokenLock(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _tokenAmount\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    return(_token.increaseLockBalance(_beneficiary, _tokenAmount));\n', '\n', '  }\n', '\n', '\n', '\n', '  // Decreases the lock on the balance at a specific address.\n', '\n', '  function decreaseTokenLock(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _tokenAmount\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    return(_token.decreaseLockBalance(_beneficiary, _tokenAmount));\n', '\n', '  }\n', '\n', '\n', '\n', '  // It completely unlocks a specific address.\n', '\n', '  function clearTokenLock(\n', '\n', '    address _beneficiary\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    return(_token.clearLock(_beneficiary));\n', '\n', '  }\n', '\n', '\n', '\n', '  // Redefine the point at which a lock that affects the whole is released.\n', '\n', '  function resetLockReleaseTime(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _releaseTime\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    return(_token.setReleaseTime(_beneficiary, _releaseTime));\n', '\n', '  }\n', '\n', '\n', '\n', '  // Attention of administrator is required!! Migrate the owner of the token.\n', '\n', '  function transferTokenOwnership(\n', '\n', '    address _newOwner\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    _token.transferOwnership(_newOwner);\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Stops the entire transaction of the token completely.\n', '\n', '  function pauseToken()\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    _token.pause();\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Resume a suspended transaction.\n', '\n', '  function unpauseToken()\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    _token.unpause();\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract IndividualLockableToken is PausableToken{\n', '\n', '  using SafeMath for uint256;\n', '\n', '\n', '\n', '  event LockTimeSetted(address indexed holder, uint256 old_release_time, uint256 new_release_time);\n', '\n', '  event Locked(address indexed holder, uint256 locked_balance_change, uint256 total_locked_balance, uint256 release_time);\n', '\n', '\n', '\n', '  struct lockState {\n', '\n', '    uint256 locked_balance;\n', '\n', '    uint256 release_time;\n', '\n', '  }\n', '\n', '\n', '\n', '  // default lock period\n', '\n', '  uint256 public lock_period = 24 weeks;\n', '\n', '\n', '\n', '  mapping(address => lockState) internal userLock;\n', '\n', '\n', '\n', '  // Specify the time that a particular person&#39;s lock will be released\n', '\n', '  function setReleaseTime(address _holder, uint256 _release_time)\n', '\n', '    public\n', '\n', '    onlyOwner\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(_holder != address(0));\n', '\n', '\trequire(_release_time >= block.timestamp);\n', '\n', '\n', '\n', '\tuint256 old_release_time = userLock[_holder].release_time;\n', '\n', '\n', '\n', '\tuserLock[_holder].release_time = _release_time;\n', '\n', '\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\n', '\n', '\treturn true;\n', '\n', '  }\n', '\n', '  \n', '\n', '  // Returns the point at which token holder&#39;s lock is released\n', '\n', '  function getReleaseTime(address _holder)\n', '\n', '    public\n', '\n', '    view\n', '\n', '    returns (uint256)\n', '\n', '  {\n', '\n', '    require(_holder != address(0));\n', '\n', '\n', '\n', '\treturn userLock[_holder].release_time;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Unlock a specific person. Free trading even with a lock balance\n', '\n', '  function clearReleaseTime(address _holder)\n', '\n', '    public\n', '\n', '    onlyOwner\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(_holder != address(0));\n', '\n', '    require(userLock[_holder].release_time > 0);\n', '\n', '\n', '\n', '\tuint256 old_release_time = userLock[_holder].release_time;\n', '\n', '\n', '\n', '\tuserLock[_holder].release_time = 0;\n', '\n', '\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\n', '\n', '\treturn true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Increase the lock balance of a specific person.\n', '\n', '  // If you only want to increase the balance, the release_time must be specified in advance.\n', '\n', '  function increaseLockBalance(address _holder, uint256 _value)\n', '\n', '    public\n', '\n', '    onlyOwner\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '\trequire(_holder != address(0));\n', '\n', '\trequire(_value > 0);\n', '\n', '\trequire(balances[_holder] >= _value);\n', '\n', '\t\n', '\n', '\tif (userLock[_holder].release_time == 0) {\n', '\n', '\t\tuserLock[_holder].release_time = block.timestamp + lock_period;\n', '\n', '\t}\n', '\n', '\t\n', '\n', '\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).add(_value);\n', '\n', '\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\n', '\n', '\treturn true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Decrease the lock balance of a specific person.\n', '\n', '  function decreaseLockBalance(address _holder, uint256 _value)\n', '\n', '    public\n', '\n', '    onlyOwner\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '\trequire(_holder != address(0));\n', '\n', '\trequire(_value > 0);\n', '\n', '\trequire(userLock[_holder].locked_balance >= _value);\n', '\n', '\n', '\n', '\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).sub(_value);\n', '\n', '\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\n', '\n', '\treturn true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Clear the lock.\n', '\n', '  function clearLock(address _holder)\n', '\n', '    public\n', '\n', '    onlyOwner\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '\trequire(_holder != address(0));\n', '\n', '\trequire(userLock[_holder].release_time > 0);\n', '\n', '\n', '\n', '\tuserLock[_holder].locked_balance = 0;\n', '\n', '\tuserLock[_holder].release_time = 0;\n', '\n', '\temit Locked(_holder, 0, userLock[_holder].locked_balance, userLock[_holder].release_time);\n', '\n', '\treturn true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Check the amount of the lock\n', '\n', '  function getLockedBalance(address _holder)\n', '\n', '    public\n', '\n', '    view\n', '\n', '    returns (uint256)\n', '\n', '  {\n', '\n', '    if(block.timestamp >= userLock[_holder].release_time) return uint256(0);\n', '\n', '    return userLock[_holder].locked_balance;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Check your remaining balance\n', '\n', '  function getFreeBalance(address _holder)\n', '\n', '    public\n', '\n', '    view\n', '\n', '    returns (uint256)\n', '\n', '  {\n', '\n', '    if(block.timestamp >= userLock[_holder].release_time) return balances[_holder];\n', '\n', '    return balances[_holder].sub(userLock[_holder].locked_balance);\n', '\n', '  }\n', '\n', '\n', '\n', '  // transfer overrride\n', '\n', '  function transfer(\n', '\n', '    address _to,\n', '\n', '    uint256 _value\n', '\n', '  )\n', '\n', '    public\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(getFreeBalance(msg.sender) >= _value);\n', '\n', '    return super.transfer(_to, _value);\n', '\n', '  }\n', '\n', '\n', '\n', '  // transferFrom overrride\n', '\n', '  function transferFrom(\n', '\n', '    address _from,\n', '\n', '    address _to,\n', '\n', '    uint256 _value\n', '\n', '  )\n', '\n', '    public\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(getFreeBalance(_from) >= _value);\n', '\n', '    return super.transferFrom(_from, _to, _value);\n', '\n', '  }\n', '\n', '\n', '\n', '  // approve overrride\n', '\n', '  function approve(\n', '\n', '    address _spender,\n', '\n', '    uint256 _value\n', '\n', '  )\n', '\n', '    public\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(getFreeBalance(msg.sender) >= _value);\n', '\n', '    return super.approve(_spender, _value);\n', '\n', '  }\n', '\n', '\n', '\n', '  // increaseApproval overrride\n', '\n', '  function increaseApproval(\n', '\n', '    address _spender,\n', '\n', '    uint _addedValue\n', '\n', '  )\n', '\n', '    public\n', '\n', '    returns (bool success)\n', '\n', '  {\n', '\n', '    require(getFreeBalance(msg.sender) >= allowed[msg.sender][_spender].add(_addedValue));\n', '\n', '    return super.increaseApproval(_spender, _addedValue);\n', '\n', '  }\n', '\n', '  \n', '\n', '  // decreaseApproval overrride\n', '\n', '  function decreaseApproval(\n', '\n', '    address _spender,\n', '\n', '    uint _subtractedValue\n', '\n', '  )\n', '\n', '    public\n', '\n', '    returns (bool success)\n', '\n', '  {\n', '\n', '\tuint256 oldValue = allowed[msg.sender][_spender];\n', '\n', '\t\n', '\n', '    if (_subtractedValue < oldValue) {\n', '\n', '      require(getFreeBalance(msg.sender) >= oldValue.sub(_subtractedValue));\t  \n', '\n', '    }    \n', '\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract VictorToken is IndividualLockableToken, TokenDestructible {\n', '\n', '  using SafeMath for uint256;\n', '\n', '\n', '\n', '  string public constant name = "VictorToken";\n', '\n', '  string public constant symbol = "VIC";\n', '\n', '  uint8  public constant decimals = 18;\n', '\n', '\n', '\n', '  // 10,000,000,000 10 billion\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\n', '\n', '\n', '\n', '  constructor()\n', '\n', '    public\n', '\n', '  {\n', '\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '\n', '    balances[msg.sender] = totalSupply_;\n', '\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address indexed operator, string role);\n', '  event RoleRemoved(address indexed operator, string role);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address _operator, string _role)\n', '    public\n', '    view\n', '  {\n', '    roles[_role].check(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address _operator, string _role)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return roles[_role].has(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function addRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].add(_operator);\n', '    emit RoleAdded(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function removeRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].remove(_operator);\n', '    emit RoleRemoved(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string _role)\n', '  {\n', '    checkRole(msg.sender, _role);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param _roles the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] _roles) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < _roles.length; i++) {\n', '  //         if (hasRole(msg.sender, _roles[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage _role, address _addr)\n', '    internal\n', '  {\n', '    _role.bearer[_addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage _role, address _addr)\n', '    internal\n', '  {\n', '    _role.bearer[_addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage _role, address _addr)\n', '    internal\n', '    view\n', '  {\n', '    require(has(_role, _addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage _role, address _addr)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _role.bearer[_addr];\n', '  }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \n", '   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n', '   *   require(weiRaised.add(_weiAmount) <= cap);\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.safeTransfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract Whitelist is Ownable, RBAC {\n', '  string public constant ROLE_WHITELISTED = "whitelist";\n', '\n', '  /**\n', '   * @dev Throws if operator is not whitelisted.\n', '   * @param _operator address\n', '   */\n', '  modifier onlyIfWhitelisted(address _operator) {\n', '    checkRole(_operator, ROLE_WHITELISTED);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address _operator)\n', '    public\n', '    onlyOwner\n', '  {\n', '    addRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function whitelist(address _operator)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return hasRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] _operators)\n', '    public\n', '    onlyOwner\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address _operator)\n', '    public\n', '    onlyOwner\n', '  {\n', '    removeRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] _operators)\n', '    public\n', '    onlyOwner\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'contract TokenDestructible is Ownable {\n', '\n', '  constructor() public payable { }\n', '\n', '  /**\n', '   * @notice Terminate contract and refund to owner\n', '   * @param _tokens List of addresses of ERC20 or ERC20Basic token contracts to\n', '   refund.\n', '   * @notice The called token contracts could try to re-enter this contract. Only\n', '   supply token contracts you trust.\n', '   */\n', '  function destroy(address[] _tokens) public onlyOwner {\n', '\n', '    // Transfer tokens to owner\n', '    for (uint256 i = 0; i < _tokens.length; i++) {\n', '      ERC20Basic token = ERC20Basic(_tokens[i]);\n', '      uint256 balance = token.balanceOf(this);\n', '      token.transfer(owner, balance);\n', '    }\n', '\n', '    // Transfer Eth to owner and terminate contract\n', '    selfdestruct(owner);\n', '  }\n', '}\n', '\n', 'contract VictorTokenSale is TimedCrowdsale, Ownable, Whitelist, TokenDestructible {\n', '\n', '  using SafeMath for uint256;\n', '\n', '\n', '\n', '  // stage bonus\n', '\n', '  uint256 public constant STAGE_1_BONUS_RT = 35;\n', '\n', '  uint256 public constant STAGE_2_BONUS_RT = 30;\n', '\n', '  uint256 public constant STAGE_3_BONUS_RT = 25;\n', '\n', '  uint256 public constant STAGE_4_BONUS_RT = 20;\n', '\n', '  uint256 public constant STAGE_5_BONUS_RT = 15;\n', '\n', '  uint256 public constant STAGE_6_BONUS_RT = 10;\n', '\n', '  uint256 public constant STAGE_7_BONUS_RT =  5;\n', '\n', '\n', '\n', '  // BOUNDARY ethereum conv:  22000 / 44000 / 66000 / 88000 / 110000 / 132000 / 154000\n', '\n', '  // This is wei * 25000 limit.\n', '\n', '  uint256 public constant BOUNDARY_1 =  550000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_2 = 1100000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_3 = 1650000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_4 = 2200000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_5 = 2750000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_6 = 3300000000000000000000000000;\n', '\n', '  uint256 public constant BOUNDARY_7 = 3850000000000000000000000000; // End of Sales amount\n', '\n', '\n', '\n', '  VictorToken _token;\n', '\n', '\n', '\n', '  uint256 public bonusRate;\n', '\n', '  uint256 public calcAdditionalRatio;\n', '\n', '  uint256 public cumulativeSumofToken = 0;\n', '\n', '\n', '\n', '  uint256 public minimum_buy_limit = 0.1 ether;\n', '\n', '  uint256 public maximum_buy_limit = 1000 ether;\n', '\n', '\n', '\n', '  event SetPeriod(uint256 _openingTime, uint256 _closingTime);\n', '\n', '  event SetBuyLimit(uint256 _minLimit, uint256 _maxLimit);\n', '\n', '\n', '\n', '  // ----------------------------------------------------------------------------------- \n', '\n', '  // Constructor\n', '\n', '  // ----------------------------------------------------------------------------------- \n', '\n', '  // Fixed exchange ratio: 25000 (FIXED!)\n', '\n', '  // Fixed period of sale: 16 weeks from now set as sales period (changeable)\n', '\n', '  constructor(\n', '\n', '    VictorToken _token_,\n', '\n', '    address _wallet\n', '\n', '  )\n', '\n', '    public\n', '\n', '    Crowdsale(25000, _wallet, _token_)\n', '\n', '    TimedCrowdsale(block.timestamp, block.timestamp + 16 weeks)\n', '\n', '  {\n', '\n', '    _token = _token_;\n', '\n', '\n', '\n', '    emit SetPeriod(openingTime, closingTime);\n', '\n', '\n', '\n', '    calcBonusRate();\n', '\n', '  }\n', '\n', '\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  // override fuction.\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  function _preValidatePurchase(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _weiAmount\n', '\n', '  )\n', '\n', '    onlyWhileOpen\n', '\n', '    onlyIfWhitelisted(_beneficiary)\n', '\n', '    internal\n', '\n', '  {\n', '\n', '    require(_beneficiary != address(0));\n', '\n', '    require(_weiAmount >= minimum_buy_limit);\n', '\n', '    require(_weiAmount <= maximum_buy_limit);\n', '\n', '    require(BOUNDARY_7 >= (cumulativeSumofToken + _weiAmount));\n', '\n', '  }\n', '\n', '\n', '\n', '  // override fuction. default + bonus token\n', '\n', '  function _getTokenAmount(\n', '\n', '    uint256 _weiAmount\n', '\n', '  )\n', '\n', '    internal\n', '\n', '    view\n', '\n', '    returns (uint256)\n', '\n', '  {\n', '\n', '    return (_weiAmount.mul(rate)).add(_weiAmount.mul(calcAdditionalRatio)) ;\n', '\n', '  }\n', '\n', '\n', '\n', '  // override fuction.\n', '\n', '  // bonus token locking\n', '\n', '  // stage bonus boundary check and change.\n', '\n', '  function _updatePurchasingState(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _weiAmount\n', '\n', '  )\n', '\n', '    internal\n', '\n', '  {\n', '\n', '    uint256 lockBalance = _weiAmount.mul(calcAdditionalRatio);\n', '\n', '\n', '\n', '    _token.increaseLockBalance(_beneficiary, lockBalance);\n', '\n', '    \n', '\n', '    cumulativeSumofToken = cumulativeSumofToken.add(_weiAmount.mul(rate));\n', '\n', '\n', '\n', '    calcBonusRate();\n', '\n', '\n', '\n', '    return;\n', '\n', '  }\n', '\n', '\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  // Utility function\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  // Bonus rate calcuration.\n', '\n', '  function calcBonusRate()\n', '\n', '    public\n', '\n', '  {\n', '\n', '    if      (cumulativeSumofToken >=          0 && cumulativeSumofToken < BOUNDARY_1 && bonusRate != STAGE_1_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_1_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_1 && cumulativeSumofToken < BOUNDARY_2 && bonusRate != STAGE_2_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_2_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_2 && cumulativeSumofToken < BOUNDARY_3 && bonusRate != STAGE_3_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_3_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_3 && cumulativeSumofToken < BOUNDARY_4 && bonusRate != STAGE_4_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_4_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_4 && cumulativeSumofToken < BOUNDARY_5 && bonusRate != STAGE_5_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_5_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_5 && cumulativeSumofToken < BOUNDARY_6 && bonusRate != STAGE_6_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_6_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_6 && cumulativeSumofToken < BOUNDARY_7 && bonusRate != STAGE_7_BONUS_RT)\n', '\n', '    {\n', '\n', '      bonusRate = STAGE_7_BONUS_RT;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    else if (cumulativeSumofToken >= BOUNDARY_7)\n', '\n', '    {\n', '\n', '      bonusRate = 0;\n', '\n', '      calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '    }\n', '\n', '    \n', '\n', '    return;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Change open, close time and bonus rate. _openingTime, _closingTime is epoch (like 1532919600)\n', '\n', '  function changePeriod(\n', '\n', '    uint256 _openingTime,\n', '\n', '    uint256 _closingTime\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(_openingTime >= block.timestamp);\n', '\n', '    require(_closingTime >= _openingTime);\n', '\n', '\n', '\n', '    openingTime = _openingTime;\n', '\n', '    closingTime = _closingTime;\n', '\n', '\n', '\n', '    calcAdditionalRatio = (rate.mul(bonusRate)).div(100);\n', '\n', '\n', '\n', '    emit SetPeriod(openingTime, closingTime);\n', '\n', '\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Buyer limit change\n', '\n', '  function changeLimit(\n', '\n', '    uint256 _minLimit,\n', '\n', '    uint256 _maxLimit\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(_minLimit >= 0 ether);\n', '\n', '    require(_maxLimit >= 3 ether);\n', '\n', '\n', '\n', '    minimum_buy_limit = _minLimit;\n', '\n', '    maximum_buy_limit = _maxLimit;\n', '\n', '\n', '\n', '    emit SetBuyLimit(minimum_buy_limit, maximum_buy_limit);\n', '\n', '\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // bonus drop. Bonus tokens take a lock.\n', '\n', '  function bonusDrop(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _tokenAmount\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    _processPurchase(_beneficiary, _tokenAmount);\n', '\n', '\n', '\n', '    emit TokenPurchase(\n', '\n', '      msg.sender,\n', '\n', '      _beneficiary,\n', '\n', '      0,\n', '\n', '      _tokenAmount\n', '\n', '    );\n', '\n', '\n', '\n', '    _token.increaseLockBalance(_beneficiary, _tokenAmount);\n', '\n', '\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // bonus drop. Bonus tokens are not locked !!!\n', '\n', '  function unlockBonusDrop(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _tokenAmount\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    _processPurchase(_beneficiary, _tokenAmount);\n', '\n', '\n', '\n', '    emit TokenPurchase(\n', '\n', '      msg.sender,\n', '\n', '      _beneficiary,\n', '\n', '      0,\n', '\n', '      _tokenAmount\n', '\n', '    );\n', '\n', '\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  // Token Interface\n', '\n', '  // -----------------------------------------------------------------------------------\n', '\n', '  // Increases the lock on the balance at a specific address.\n', '\n', '  function increaseTokenLock(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _tokenAmount\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    return(_token.increaseLockBalance(_beneficiary, _tokenAmount));\n', '\n', '  }\n', '\n', '\n', '\n', '  // Decreases the lock on the balance at a specific address.\n', '\n', '  function decreaseTokenLock(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _tokenAmount\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    return(_token.decreaseLockBalance(_beneficiary, _tokenAmount));\n', '\n', '  }\n', '\n', '\n', '\n', '  // It completely unlocks a specific address.\n', '\n', '  function clearTokenLock(\n', '\n', '    address _beneficiary\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    return(_token.clearLock(_beneficiary));\n', '\n', '  }\n', '\n', '\n', '\n', '  // Redefine the point at which a lock that affects the whole is released.\n', '\n', '  function resetLockReleaseTime(\n', '\n', '    address _beneficiary,\n', '\n', '    uint256 _releaseTime\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    return(_token.setReleaseTime(_beneficiary, _releaseTime));\n', '\n', '  }\n', '\n', '\n', '\n', '  // Attention of administrator is required!! Migrate the owner of the token.\n', '\n', '  function transferTokenOwnership(\n', '\n', '    address _newOwner\n', '\n', '  )\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    _token.transferOwnership(_newOwner);\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Stops the entire transaction of the token completely.\n', '\n', '  function pauseToken()\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    _token.pause();\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Resume a suspended transaction.\n', '\n', '  function unpauseToken()\n', '\n', '    onlyOwner\n', '\n', '    external\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    _token.unpause();\n', '\n', '    return true;\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract IndividualLockableToken is PausableToken{\n', '\n', '  using SafeMath for uint256;\n', '\n', '\n', '\n', '  event LockTimeSetted(address indexed holder, uint256 old_release_time, uint256 new_release_time);\n', '\n', '  event Locked(address indexed holder, uint256 locked_balance_change, uint256 total_locked_balance, uint256 release_time);\n', '\n', '\n', '\n', '  struct lockState {\n', '\n', '    uint256 locked_balance;\n', '\n', '    uint256 release_time;\n', '\n', '  }\n', '\n', '\n', '\n', '  // default lock period\n', '\n', '  uint256 public lock_period = 24 weeks;\n', '\n', '\n', '\n', '  mapping(address => lockState) internal userLock;\n', '\n', '\n', '\n', "  // Specify the time that a particular person's lock will be released\n", '\n', '  function setReleaseTime(address _holder, uint256 _release_time)\n', '\n', '    public\n', '\n', '    onlyOwner\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(_holder != address(0));\n', '\n', '\trequire(_release_time >= block.timestamp);\n', '\n', '\n', '\n', '\tuint256 old_release_time = userLock[_holder].release_time;\n', '\n', '\n', '\n', '\tuserLock[_holder].release_time = _release_time;\n', '\n', '\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\n', '\n', '\treturn true;\n', '\n', '  }\n', '\n', '  \n', '\n', "  // Returns the point at which token holder's lock is released\n", '\n', '  function getReleaseTime(address _holder)\n', '\n', '    public\n', '\n', '    view\n', '\n', '    returns (uint256)\n', '\n', '  {\n', '\n', '    require(_holder != address(0));\n', '\n', '\n', '\n', '\treturn userLock[_holder].release_time;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Unlock a specific person. Free trading even with a lock balance\n', '\n', '  function clearReleaseTime(address _holder)\n', '\n', '    public\n', '\n', '    onlyOwner\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(_holder != address(0));\n', '\n', '    require(userLock[_holder].release_time > 0);\n', '\n', '\n', '\n', '\tuint256 old_release_time = userLock[_holder].release_time;\n', '\n', '\n', '\n', '\tuserLock[_holder].release_time = 0;\n', '\n', '\temit LockTimeSetted(_holder, old_release_time, userLock[_holder].release_time);\n', '\n', '\treturn true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Increase the lock balance of a specific person.\n', '\n', '  // If you only want to increase the balance, the release_time must be specified in advance.\n', '\n', '  function increaseLockBalance(address _holder, uint256 _value)\n', '\n', '    public\n', '\n', '    onlyOwner\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '\trequire(_holder != address(0));\n', '\n', '\trequire(_value > 0);\n', '\n', '\trequire(balances[_holder] >= _value);\n', '\n', '\t\n', '\n', '\tif (userLock[_holder].release_time == 0) {\n', '\n', '\t\tuserLock[_holder].release_time = block.timestamp + lock_period;\n', '\n', '\t}\n', '\n', '\t\n', '\n', '\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).add(_value);\n', '\n', '\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\n', '\n', '\treturn true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Decrease the lock balance of a specific person.\n', '\n', '  function decreaseLockBalance(address _holder, uint256 _value)\n', '\n', '    public\n', '\n', '    onlyOwner\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '\trequire(_holder != address(0));\n', '\n', '\trequire(_value > 0);\n', '\n', '\trequire(userLock[_holder].locked_balance >= _value);\n', '\n', '\n', '\n', '\tuserLock[_holder].locked_balance = (userLock[_holder].locked_balance).sub(_value);\n', '\n', '\temit Locked(_holder, _value, userLock[_holder].locked_balance, userLock[_holder].release_time);\n', '\n', '\treturn true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Clear the lock.\n', '\n', '  function clearLock(address _holder)\n', '\n', '    public\n', '\n', '    onlyOwner\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '\trequire(_holder != address(0));\n', '\n', '\trequire(userLock[_holder].release_time > 0);\n', '\n', '\n', '\n', '\tuserLock[_holder].locked_balance = 0;\n', '\n', '\tuserLock[_holder].release_time = 0;\n', '\n', '\temit Locked(_holder, 0, userLock[_holder].locked_balance, userLock[_holder].release_time);\n', '\n', '\treturn true;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Check the amount of the lock\n', '\n', '  function getLockedBalance(address _holder)\n', '\n', '    public\n', '\n', '    view\n', '\n', '    returns (uint256)\n', '\n', '  {\n', '\n', '    if(block.timestamp >= userLock[_holder].release_time) return uint256(0);\n', '\n', '    return userLock[_holder].locked_balance;\n', '\n', '  }\n', '\n', '\n', '\n', '  // Check your remaining balance\n', '\n', '  function getFreeBalance(address _holder)\n', '\n', '    public\n', '\n', '    view\n', '\n', '    returns (uint256)\n', '\n', '  {\n', '\n', '    if(block.timestamp >= userLock[_holder].release_time) return balances[_holder];\n', '\n', '    return balances[_holder].sub(userLock[_holder].locked_balance);\n', '\n', '  }\n', '\n', '\n', '\n', '  // transfer overrride\n', '\n', '  function transfer(\n', '\n', '    address _to,\n', '\n', '    uint256 _value\n', '\n', '  )\n', '\n', '    public\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(getFreeBalance(msg.sender) >= _value);\n', '\n', '    return super.transfer(_to, _value);\n', '\n', '  }\n', '\n', '\n', '\n', '  // transferFrom overrride\n', '\n', '  function transferFrom(\n', '\n', '    address _from,\n', '\n', '    address _to,\n', '\n', '    uint256 _value\n', '\n', '  )\n', '\n', '    public\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(getFreeBalance(_from) >= _value);\n', '\n', '    return super.transferFrom(_from, _to, _value);\n', '\n', '  }\n', '\n', '\n', '\n', '  // approve overrride\n', '\n', '  function approve(\n', '\n', '    address _spender,\n', '\n', '    uint256 _value\n', '\n', '  )\n', '\n', '    public\n', '\n', '    returns (bool)\n', '\n', '  {\n', '\n', '    require(getFreeBalance(msg.sender) >= _value);\n', '\n', '    return super.approve(_spender, _value);\n', '\n', '  }\n', '\n', '\n', '\n', '  // increaseApproval overrride\n', '\n', '  function increaseApproval(\n', '\n', '    address _spender,\n', '\n', '    uint _addedValue\n', '\n', '  )\n', '\n', '    public\n', '\n', '    returns (bool success)\n', '\n', '  {\n', '\n', '    require(getFreeBalance(msg.sender) >= allowed[msg.sender][_spender].add(_addedValue));\n', '\n', '    return super.increaseApproval(_spender, _addedValue);\n', '\n', '  }\n', '\n', '  \n', '\n', '  // decreaseApproval overrride\n', '\n', '  function decreaseApproval(\n', '\n', '    address _spender,\n', '\n', '    uint _subtractedValue\n', '\n', '  )\n', '\n', '    public\n', '\n', '    returns (bool success)\n', '\n', '  {\n', '\n', '\tuint256 oldValue = allowed[msg.sender][_spender];\n', '\n', '\t\n', '\n', '    if (_subtractedValue < oldValue) {\n', '\n', '      require(getFreeBalance(msg.sender) >= oldValue.sub(_subtractedValue));\t  \n', '\n', '    }    \n', '\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract VictorToken is IndividualLockableToken, TokenDestructible {\n', '\n', '  using SafeMath for uint256;\n', '\n', '\n', '\n', '  string public constant name = "VictorToken";\n', '\n', '  string public constant symbol = "VIC";\n', '\n', '  uint8  public constant decimals = 18;\n', '\n', '\n', '\n', '  // 10,000,000,000 10 billion\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals));\n', '\n', '\n', '\n', '  constructor()\n', '\n', '    public\n', '\n', '  {\n', '\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '\n', '    balances[msg.sender] = totalSupply_;\n', '\n', '  }\n', '\n', '}']
