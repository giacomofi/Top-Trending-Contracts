['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool)\n', '  {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    whenNotPaused\n', '    returns (bool success)\n', '  {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract LittlePhilCoin is MintableToken, PausableToken {\n', '    string public name = "Little Phil Coin";\n', '    string public symbol = "LPC";\n', '    uint8 public decimals = 18;\n', '\n', '    constructor () public {\n', '        // Pause token on creation and only unpause after ICO\n', '        pause();\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.safeTransfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting.\n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param _cap Max amount of wei to be contributed\n', '   */\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached.\n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    require(weiRaised.add(_weiAmount) <= cap);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenCappedCrowdsale\n', ' * @dev Crowdsale with a limit for total minted tokens.\n', ' */\n', 'contract TokenCappedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public tokenCap = 0;\n', '\n', '    // Amount of LPC raised\n', '    uint256 public tokensRaised = 0;\n', '\n', '    // Event for manual refund of cap overflow\n', '    event CapOverflow(address sender, uint256 weiAmount, uint256 receivedTokens);\n', '\n', '    /**\n', '     * @notice Checks whether the tokenCap has been reached.\n', '     * @return Whether the tokenCap was reached\n', '     */\n', '    function capReached() public view returns (bool) {\n', '        return tokensRaised >= tokenCap;\n', '    }\n', '\n', '    /**\n', '     * @notice Update the amount of tokens raised & emit cap overflow events.\n', '     */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._updatePurchasingState(_beneficiary, _weiAmount);\n', '        uint256 purchasedTokens = _getTokenAmount(_weiAmount);\n', '        tokensRaised = tokensRaised.add(purchasedTokens);\n', '\n', '        if (capReached()) {\n', '            // manual process unused eth amount to sender\n', '            emit CapOverflow(_beneficiary, _weiAmount, purchasedTokens);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Tiered Crowdsale\n', ' * @dev Extension of Crowdsale contract that decreases the number of LPC tokens purchases dependent on the current number of tokens sold.\n', ' */\n', 'contract TieredCrowdsale is TokenCappedCrowdsale, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '    SalesState enum for use in state machine to manage sales rates\n', '    */\n', '    enum SaleState { \n', '        Initial,              // All contract initialization calls\n', '        PrivateSale,          // Private sale for industy and closed group investors\n', '        FinalisedPrivateSale, // Close private sale\n', '        PreSale,              // Pre sale ICO (40% bonus LPC hard-capped at 180 million tokens)\n', '        FinalisedPreSale,     // Close presale\n', '        PublicSaleTier1,      // Tier 1 ICO public sale (30% bonus LPC capped at 85 million tokens)\n', '        PublicSaleTier2,      // Tier 2 ICO public sale (20% bonus LPC capped at 65 million tokens)\n', '        PublicSaleTier3,      // Tier 3 ICO public sale (10% bonus LPC capped at 45 million tokens)\n', '        PublicSaleTier4,      // Tier 4 ICO public sale (standard rate capped at 25 million tokens)\n', '        FinalisedPublicSale,  // Close public sale\n', '        Closed                // ICO has finished, all tokens must have been claimed\n', '    }\n', '    SaleState public state = SaleState.Initial;\n', '\n', '    struct TierConfig {\n', '        string stateName;\n', '        uint256 tierRatePercentage;\n', '        uint256 hardCap;\n', '    }\n', '\n', '    mapping(bytes32 => TierConfig) private tierConfigs;\n', '\n', '    // Event for manual refund of cap overflow\n', '    event IncrementTieredState(string stateName);\n', '\n', '    /**\n', '     * @notice Checks the state when validating a purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(\n', '            state == SaleState.PrivateSale ||\n', '            state == SaleState.PreSale ||\n', '            state == SaleState.PublicSaleTier1 ||\n', '            state == SaleState.PublicSaleTier2 ||\n', '            state == SaleState.PublicSaleTier3 ||\n', '            state == SaleState.PublicSaleTier4\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Constructor\n', '     * @dev Caveat emptor: this base contract is intended for inheritance by the Little Phil crowdsale only\n', '     */\n', '    constructor() public {\n', '        // setup the map of bonus-rates for each SaleState tier\n', '        createSalesTierConfigMap();\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides parent method taking into account variable rate (as a percentage).\n', '     * @param _weiAmount The value in wei to be converted into tokens\n', '     * @return The number of tokens _weiAmount wei will buy at present time.\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 currentTierRate = getCurrentTierRatePercentage();\n', '\n', '        uint256 requestedTokenAmount = _weiAmount.mul(rate).mul(currentTierRate).div(100);\n', '\n', '        uint256 remainingTokens = tokenCap.sub(tokensRaised);\n', '\n', '        // Return number of LPC to provide\n', '        if (requestedTokenAmount > remainingTokens) {\n', '            return remainingTokens;\n', '        }\n', '\n', '        return requestedTokenAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Setup the map of bonus-rates (as a percentage) and total hardCap for each SaleState tier\n', '     * to be called by the constructor.\n', '     */\n', '    function createSalesTierConfigMap() private {\n', '\n', '        tierConfigs [keccak256(SaleState.Initial)] = TierConfig({\n', '            stateName: "Initial",\n', '            tierRatePercentage: 0,\n', '            hardCap: 0\n', '        });\n', '        tierConfigs [keccak256(SaleState.PrivateSale)] = TierConfig({\n', '            stateName: "PrivateSale",\n', '            tierRatePercentage: 100,\n', '            hardCap: SafeMath.mul(400000000, (10 ** 18))\n', '        });\n', '        tierConfigs [keccak256(SaleState.FinalisedPrivateSale)] = TierConfig({\n', '            stateName: "FinalisedPrivateSale",\n', '            tierRatePercentage: 0,\n', '            hardCap: 0\n', '        });\n', '        tierConfigs [keccak256(SaleState.PreSale)] = TierConfig({\n', '            stateName: "PreSale",\n', '            tierRatePercentage: 140,\n', '            hardCap: SafeMath.mul(180000000, (10 ** 18))\n', '        });\n', '        tierConfigs [keccak256(SaleState.FinalisedPreSale)] = TierConfig({\n', '            stateName: "FinalisedPreSale",\n', '            tierRatePercentage: 0,\n', '            hardCap: 0\n', '        });\n', '        tierConfigs [keccak256(SaleState.PublicSaleTier1)] = TierConfig({\n', '            stateName: "PublicSaleTier1",\n', '            tierRatePercentage: 130,\n', '            hardCap: SafeMath.mul(265000000, (10 ** 18))\n', '        });\n', '        tierConfigs [keccak256(SaleState.PublicSaleTier2)] = TierConfig({\n', '            stateName: "PublicSaleTier2",\n', '            tierRatePercentage: 120,\n', '            hardCap: SafeMath.mul(330000000, (10 ** 18))\n', '        });\n', '        tierConfigs [keccak256(SaleState.PublicSaleTier3)] = TierConfig({\n', '            stateName: "PublicSaleTier3",\n', '            tierRatePercentage: 110,\n', '            hardCap: SafeMath.mul(375000000, (10 ** 18))\n', '        });\n', '        tierConfigs [keccak256(SaleState.PublicSaleTier4)] = TierConfig({\n', '            stateName: "PublicSaleTier4",\n', '            tierRatePercentage: 100,\n', '            hardCap: SafeMath.mul(400000000, (10 ** 18))\n', '        });\n', '        tierConfigs [keccak256(SaleState.FinalisedPublicSale)] = TierConfig({\n', '            stateName: "FinalisedPublicSale",\n', '            tierRatePercentage: 0,\n', '            hardCap: 0\n', '        });\n', '        tierConfigs [keccak256(SaleState.Closed)] = TierConfig({\n', '            stateName: "Closed",\n', '            tierRatePercentage: 0,\n', '            hardCap: SafeMath.mul(400000000, (10 ** 18))\n', '        });\n', '        \n', '\n', '    }\n', '\n', '    /**\n', '     * @dev get the current bonus-rate for the current SaleState\n', '     * @return the current rate as a percentage (e.g. 140 = 140% bonus)\n', '     */\n', '    function getCurrentTierRatePercentage() public view returns (uint256) {\n', '        return tierConfigs[keccak256(state)].tierRatePercentage;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the current hardCap for the current SaleState\n', '     * @return The current hardCap\n', '     */\n', '    function getCurrentTierHardcap() public view returns (uint256) {\n', '        return tierConfigs[keccak256(state)].hardCap;\n', '    }\n', '\n', '    /**\n', '     * @dev Only allow the owner to set the state.\n', '     */\n', '    function setState(uint256 _state) onlyOwner public {\n', '        state = SaleState(_state);\n', '\n', '        // Update cap when state changes\n', '        tokenCap = getCurrentTierHardcap();\n', '\n', '        if (state == SaleState.Closed) {\n', '            crowdsaleClosed();\n', '        }\n', '    }\n', '\n', '    function getState() public view returns (string) {\n', '        return tierConfigs[keccak256(state)].stateName;\n', '    }\n', '\n', '    /**\n', '     * @dev Change the bonus tier after a purchase.\n', '     */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._updatePurchasingState(_beneficiary, _weiAmount);\n', '\n', '        if (capReached()) {\n', '            if (state == SaleState.PrivateSale) {\n', '                state = SaleState.FinalisedPrivateSale;\n', '            }\n', '            else if (state == SaleState.PreSale) {\n', '                state = SaleState.FinalisedPreSale;\n', '            }\n', '            else if (state == SaleState.PublicSaleTier1) {\n', '                state = SaleState.PublicSaleTier2;\n', '            }\n', '            else if (state == SaleState.PublicSaleTier2) {\n', '                state = SaleState.PublicSaleTier3;\n', '            }\n', '            else if (state == SaleState.PublicSaleTier3) {\n', '                state = SaleState.PublicSaleTier4;\n', '            }\n', '            else if (state == SaleState.PublicSaleTier4) {\n', '                state = SaleState.FinalisedPublicSale;\n', '            } else {\n', '                return;\n', '            }\n', '\n', '            tokenCap = getCurrentTierHardcap();\n', '            emit IncrementTieredState(getState());\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * Override for extensions that require an internal notification when the crowdsale has closed\n', '     */\n', '    function crowdsaleClosed() internal {\n', '        // optional override\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  constructor(\n', '    ERC20Basic _token,\n', '    address _beneficiary,\n', '    uint256 _releaseTime\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', 'contract InitialSupplyCrowdsale is Crowdsale, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant decimals = 18;\n', '\n', '    // Wallet properties\n', '    address public companyWallet;\n', '    address public teamWallet;\n', '    address public projectWallet;\n', '    address public advisorWallet;\n', '    address public bountyWallet;\n', '    address public airdropWallet;\n', '\n', '    // Team locked tokens\n', '    TokenTimelock public teamTimeLock1;\n', '    TokenTimelock public teamTimeLock2;\n', '\n', '    // Reserved tokens\n', '    uint256 public constant companyTokens    = SafeMath.mul(150000000, (10 ** decimals));\n', '    uint256 public constant teamTokens       = SafeMath.mul(150000000, (10 ** decimals));\n', '    uint256 public constant projectTokens    = SafeMath.mul(150000000, (10 ** decimals));\n', '    uint256 public constant advisorTokens    = SafeMath.mul(100000000, (10 ** decimals));\n', '    uint256 public constant bountyTokens     = SafeMath.mul(30000000, (10 ** decimals));\n', '    uint256 public constant airdropTokens    = SafeMath.mul(20000000, (10 ** decimals));\n', '\n', '    bool private isInitialised = false;\n', '\n', '    constructor(\n', '        address[6] _wallets\n', '    ) public {\n', '        address _companyWallet  = _wallets[0];\n', '        address _teamWallet     = _wallets[1];\n', '        address _projectWallet  = _wallets[2];\n', '        address _advisorWallet  = _wallets[3];\n', '        address _bountyWallet   = _wallets[4];\n', '        address _airdropWallet  = _wallets[5];\n', '\n', '        require(_companyWallet != address(0));\n', '        require(_teamWallet != address(0));\n', '        require(_projectWallet != address(0));\n', '        require(_advisorWallet != address(0));\n', '        require(_bountyWallet != address(0));\n', '        require(_airdropWallet != address(0));\n', '\n', '        // Set reserved wallets\n', '        companyWallet = _companyWallet;\n', '        teamWallet = _teamWallet;\n', '        projectWallet = _projectWallet;\n', '        advisorWallet = _advisorWallet;\n', '        bountyWallet = _bountyWallet;\n', '        airdropWallet = _airdropWallet;\n', '\n', '        // Lock team tokens in wallet over time periods\n', '        teamTimeLock1 = new TokenTimelock(token, teamWallet, uint64(now + 182 days));\n', '        teamTimeLock2 = new TokenTimelock(token, teamWallet, uint64(now + 365 days));\n', '    }\n', '\n', '    /**\n', '     * Function: Distribute initial token supply\n', '     */\n', '    function setupInitialSupply() internal onlyOwner {\n', '        require(isInitialised == false);\n', '        uint256 teamTokensSplit = teamTokens.mul(50).div(100);\n', '\n', '        // Distribute tokens to reserved wallets\n', '        LittlePhilCoin(token).mint(companyWallet, companyTokens);\n', '        LittlePhilCoin(token).mint(projectWallet, projectTokens);\n', '        LittlePhilCoin(token).mint(advisorWallet, advisorTokens);\n', '        LittlePhilCoin(token).mint(bountyWallet, bountyTokens);\n', '        LittlePhilCoin(token).mint(airdropWallet, airdropTokens);\n', '        LittlePhilCoin(token).mint(address(teamTimeLock1), teamTokensSplit);\n', '        LittlePhilCoin(token).mint(address(teamTimeLock2), teamTokensSplit);\n', '\n', '        isInitialised = true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _start the time (as Unix time) at which point vesting starts \n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  constructor(\n', '    address _beneficiary,\n', '    uint256 _start,\n', '    uint256 _cliff,\n', '    uint256 _duration,\n', '    bool _revocable\n', '  )\n', '    public\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    emit Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    emit Revoked();\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested but hasn&#39;t been released yet.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (block.timestamp < cliff) {\n', '      return 0;\n', '    } else if (block.timestamp >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(block.timestamp.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract TokenVestingCrowdsale is Crowdsale, Ownable {\n', '\n', '    function addBeneficiaryVestor(\n', '            address beneficiaryWallet, \n', '            uint256 tokenAmount, \n', '            uint256 vestingEpocStart, \n', '            uint256 cliffInSeconds, \n', '            uint256 vestingEpocEnd\n', '        ) external onlyOwner {\n', '        TokenVesting newVault = new TokenVesting(\n', '            beneficiaryWallet, \n', '            vestingEpocStart, \n', '            cliffInSeconds, \n', '            vestingEpocEnd, \n', '            false\n', '        );\n', '        LittlePhilCoin(token).mint(address(newVault), tokenAmount);\n', '    }\n', '\n', '    function releaseVestingTokens(address vaultAddress) external onlyOwner {\n', '        TokenVesting(vaultAddress).release(token);\n', '    }\n', '\n', '}\n', '\n', '\n', ' \n', ' \n', '\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '    address public whitelister;\n', '    mapping(address => bool) public whitelist;\n', '\n', '    constructor(address _whitelister) public {\n', '        require(_whitelister != address(0));\n', '        whitelister = _whitelister;\n', '    }\n', '\n', '    modifier isWhitelisted(address _beneficiary) {\n', '        require(whitelist[_beneficiary]);\n', '        _;\n', '    }\n', '\n', '    function addToWhitelist(address _beneficiary) public onlyOwnerOrWhitelister {\n', '        whitelist[_beneficiary] = true;\n', '    }\n', '\n', '    function addManyToWhitelist(address[] _beneficiaries) public onlyOwnerOrWhitelister {\n', '        for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '            whitelist[_beneficiaries[i]] = true;\n', '        }\n', '    }\n', '\n', '    function removeFromWhitelist(address _beneficiary) public onlyOwnerOrWhitelister {\n', '        whitelist[_beneficiary] = false;\n', '    }\n', '\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    modifier onlyOwnerOrWhitelister() {\n', '        require(msg.sender == owner || msg.sender == whitelister);\n', '        _;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Little Phil Crowdsale\n', ' */\n', 'contract LittlePhilCrowdsale is MintedCrowdsale, TieredCrowdsale, InitialSupplyCrowdsale, TokenVestingCrowdsale, WhitelistedCrowdsale {\n', '\n', '    /**\n', '     * @notice Event for rate-change logging\n', '     * @param rate the new ETH-to_LPC exchange rate\n', '     */\n', '    event NewRate(uint256 rate);\n', '\n', '    /**\n', '     * @notice Constructor\n', '     */\n', '    constructor(\n', '        uint256 _rate,\n', '        address _fundsWallet,\n', '        address[6] _wallets,\n', '        LittlePhilCoin _token,\n', '        address _whitelister\n', '    ) public\n', '    Crowdsale(_rate, _fundsWallet, _token)\n', '    InitialSupplyCrowdsale(_wallets) \n', '    WhitelistedCrowdsale(_whitelister){}\n', '\n', '    /**\n', '     * @notice Sets up the initial balances\n', '     * @dev This must be called after ownership of the token is transferred to the crowdsale\n', '     */\n', '    function setupInitialState() external onlyOwner {\n', '        setupInitialSupply();\n', '    }\n', '\n', '    /**\n', '     * @notice Ownership management\n', '     */\n', '    function transferTokenOwnership(address _newOwner) external onlyOwner {\n', '        require(_newOwner != address(0));\n', '        // I assume the crowdsale contract holds a reference to the token contract.\n', '        LittlePhilCoin(token).transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '     * @notice Crowdsale Closed\n', '     * @dev Called at the end of the crowdsale when it is ended\n', '     */\n', '    function crowdsaleClosed() internal {\n', '        uint256 remainingTokens = tokenCap.sub(tokensRaised);\n', '        _deliverTokens(airdropWallet, remainingTokens);\n', '        LittlePhilCoin(token).finishMinting();\n', '    }\n', '\n', '    /**\n', '     * @notice Checks the state when validating a purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(_weiAmount >= 500000000000000000);\n', '    }\n', '\n', '    /**\n', '     * @notice Update the ETH-to-LPC exchange rate\n', '     * @param _rate The Rate that will applied to ETH to derive how many LPC to mint\n', '     * does not affect, nor influenced by the bonus rates based on the current tier.\n', '     */\n', '    function setRate(uint256 _rate) public onlyOwner {\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '        emit NewRate(rate);\n', '    }\n', '\n', '     /**\n', '      * @notice Mint for Private Fiat Transactions\n', '      * @dev Allows for minting from owner account\n', '      */\n', '    function mintForPrivateFiat(address _beneficiary, uint256 _weiAmount) public onlyOwner {\n', '        _preValidatePurchase(_beneficiary, _weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(_weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(_weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(\n', '            msg.sender,\n', '            _beneficiary,\n', '            _weiAmount,\n', '            tokens\n', '        );\n', '\n', '        _updatePurchasingState(_beneficiary, _weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '}']