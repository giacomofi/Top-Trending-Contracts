['pragma solidity 0.4.24;\n', 'pragma experimental "v0.5.0";\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/Math.sol\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '    return _a >= _b ? _a : _b;\n', '  }\n', '\n', '  function min64(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '    return _a < _b ? _a : _b;\n', '  }\n', '\n', '  function max256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a >= _b ? _a : _b;\n', '  }\n', '\n', '  function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a < _b ? _a : _b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/AccessControlledBase.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title AccessControlledBase\n', ' * @author dYdX\n', ' *\n', ' * Base functionality for access control. Requires an implementation to\n', ' * provide a way to grant and optionally revoke access\n', ' */\n', 'contract AccessControlledBase {\n', '    // ============ State Variables ============\n', '\n', '    mapping (address => bool) public authorized;\n', '\n', '    // ============ Events ============\n', '\n', '    event AccessGranted(\n', '        address who\n', '    );\n', '\n', '    event AccessRevoked(\n', '        address who\n', '    );\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier requiresAuthorization() {\n', '        require(\n', '            authorized[msg.sender],\n', '            "AccessControlledBase#requiresAuthorization: Sender not authorized"\n', '        );\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/StaticAccessControlled.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title StaticAccessControlled\n', ' * @author dYdX\n', ' *\n', ' * Allows for functions to be access controled\n', ' * Permissions cannot be changed after a grace period\n', ' */\n', 'contract StaticAccessControlled is AccessControlledBase, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ State Variables ============\n', '\n', '    // Timestamp after which no additional access can be granted\n', '    uint256 public GRACE_PERIOD_EXPIRATION;\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor(\n', '        uint256 gracePeriod\n', '    )\n', '        public\n', '        Ownable()\n', '    {\n', '        GRACE_PERIOD_EXPIRATION = block.timestamp.add(gracePeriod);\n', '    }\n', '\n', '    // ============ Owner-Only State-Changing Functions ============\n', '\n', '    function grantAccess(\n', '        address who\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            block.timestamp < GRACE_PERIOD_EXPIRATION,\n', '            "StaticAccessControlled#grantAccess: Cannot grant access after grace period"\n', '        );\n', '\n', '        emit AccessGranted(who);\n', '        authorized[who] = true;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/GeneralERC20.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title GeneralERC20\n', ' * @author dYdX\n', ' *\n', ' * Interface for using ERC20 Tokens. We have to use a special interface to call ERC20 functions so\n', ' * that we dont automatically revert when calling non-compliant tokens that have no return value for\n', ' * transfer(), transferFrom(), or approve().\n', ' */\n', 'interface GeneralERC20 {\n', '    function totalSupply(\n', '    )\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function balanceOf(\n', '        address who\n', '    )\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '    )\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function transfer(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '    function approve(\n', '        address spender,\n', '        uint256 value\n', '    )\n', '        external;\n', '}\n', '\n', '// File: contracts/lib/TokenInteract.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title TokenInteract\n', ' * @author dYdX\n', ' *\n', ' * This library contains functions for interacting with ERC20 tokens\n', ' */\n', 'library TokenInteract {\n', '    function balanceOf(\n', '        address token,\n', '        address owner\n', '    )\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return GeneralERC20(token).balanceOf(owner);\n', '    }\n', '\n', '    function allowance(\n', '        address token,\n', '        address owner,\n', '        address spender\n', '    )\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return GeneralERC20(token).allowance(owner, spender);\n', '    }\n', '\n', '    function approve(\n', '        address token,\n', '        address spender,\n', '        uint256 amount\n', '    )\n', '        internal\n', '    {\n', '        GeneralERC20(token).approve(spender, amount);\n', '\n', '        require(\n', '            checkSuccess(),\n', '            "TokenInteract#approve: Approval failed"\n', '        );\n', '    }\n', '\n', '    function transfer(\n', '        address token,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        internal\n', '    {\n', '        address from = address(this);\n', '        if (\n', '            amount == 0\n', '            || from == to\n', '        ) {\n', '            return;\n', '        }\n', '\n', '        GeneralERC20(token).transfer(to, amount);\n', '\n', '        require(\n', '            checkSuccess(),\n', '            "TokenInteract#transfer: Transfer failed"\n', '        );\n', '    }\n', '\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        internal\n', '    {\n', '        if (\n', '            amount == 0\n', '            || from == to\n', '        ) {\n', '            return;\n', '        }\n', '\n', '        GeneralERC20(token).transferFrom(from, to, amount);\n', '\n', '        require(\n', '            checkSuccess(),\n', '            "TokenInteract#transferFrom: TransferFrom failed"\n', '        );\n', '    }\n', '\n', '    // ============ Private Helper-Functions ============\n', '\n', '    /**\n', '     * Checks the return value of the previous function up to 32 bytes. Returns true if the previous\n', '     * function returned 0 bytes or 32 bytes that are not all-zero.\n', '     */\n', '    function checkSuccess(\n', '    )\n', '        private\n', '        pure\n', '        returns (bool)\n', '    {\n', '        uint256 returnValue = 0;\n', '\n', '        /* solium-disable-next-line security/no-inline-assembly */\n', '        assembly {\n', '            // check number of bytes returned from last function call\n', '            switch returndatasize\n', '\n', '            // no bytes returned: assume success\n', '            case 0x0 {\n', '                returnValue := 1\n', '            }\n', '\n', '            // 32 bytes returned: check if non-zero\n', '            case 0x20 {\n', '                // copy 32 bytes into scratch space\n', '                returndatacopy(0x0, 0x0, 0x20)\n', '\n', '                // load those bytes into returnValue\n', '                returnValue := mload(0x0)\n', '            }\n', '\n', '            // not sure what was returned: dont mark as success\n', '            default { }\n', '        }\n', '\n', '        return returnValue != 0;\n', '    }\n', '}\n', '\n', '// File: contracts/margin/TokenProxy.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title TokenProxy\n', ' * @author dYdX\n', ' *\n', ' * Used to transfer tokens between addresses which have set allowance on this contract.\n', ' */\n', 'contract TokenProxy is StaticAccessControlled {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor(\n', '        uint256 gracePeriod\n', '    )\n', '        public\n', '        StaticAccessControlled(gracePeriod)\n', '    {}\n', '\n', '    // ============ Authorized-Only State Changing Functions ============\n', '\n', '    /**\n', '     * Transfers tokens from an address (that has set allowance on the proxy) to another address.\n', '     *\n', '     * @param  token  The address of the ERC20 token\n', '     * @param  from   The address to transfer token from\n', '     * @param  to     The address to transfer tokens to\n', '     * @param  value  The number of tokens to transfer\n', '     */\n', '    function transferTokens(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external\n', '        requiresAuthorization\n', '    {\n', '        TokenInteract.transferFrom(\n', '            token,\n', '            from,\n', '            to,\n', '            value\n', '        );\n', '    }\n', '\n', '    // ============ Public Constant Functions ============\n', '\n', '    /**\n', '     * Getter function to get the amount of token that the proxy is able to move for a particular\n', '     * address. The minimum of 1) the balance of that address and 2) the allowance given to proxy.\n', '     *\n', '     * @param  who    The owner of the tokens\n', '     * @param  token  The address of the ERC20 token\n', '     * @return        The number of tokens able to be moved by the proxy from the address specified\n', '     */\n', '    function available(\n', '        address who,\n', '        address token\n', '    )\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return Math.min256(\n', '            TokenInteract.allowance(token, who, address(this)),\n', '            TokenInteract.balanceOf(token, who)\n', '        );\n', '    }\n', '}\n', '\n', '// File: contracts/margin/Vault.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title Vault\n', ' * @author dYdX\n', ' *\n', ' * Holds and transfers tokens in vaults denominated by id\n', ' *\n', ' * Vault only supports ERC20 tokens, and will not accept any tokens that require\n', ' * a tokenFallback or equivalent function (See ERC223, ERC777, etc.)\n', ' */\n', 'contract Vault is StaticAccessControlled\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Events ============\n', '\n', '    event ExcessTokensWithdrawn(\n', '        address indexed token,\n', '        address indexed to,\n', '        address caller\n', '    );\n', '\n', '    // ============ State Variables ============\n', '\n', '    // Address of the TokenProxy contract. Used for moving tokens.\n', '    address public TOKEN_PROXY;\n', '\n', '    // Map from vault ID to map from token address to amount of that token attributed to the\n', '    // particular vault ID.\n', '    mapping (bytes32 => mapping (address => uint256)) public balances;\n', '\n', '    // Map from token address to total amount of that token attributed to some account.\n', '    mapping (address => uint256) public totalBalances;\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor(\n', '        address proxy,\n', '        uint256 gracePeriod\n', '    )\n', '        public\n', '        StaticAccessControlled(gracePeriod)\n', '    {\n', '        TOKEN_PROXY = proxy;\n', '    }\n', '\n', '    // ============ Owner-Only State-Changing Functions ============\n', '\n', '    /**\n', '     * Allows the owner to withdraw any excess tokens sent to the vault by unconventional means,\n', '     * including (but not limited-to) token airdrops. Any tokens moved to the vault by TOKEN_PROXY\n', '     * will be accounted for and will not be withdrawable by this function.\n', '     *\n', '     * @param  token  ERC20 token address\n', '     * @param  to     Address to transfer tokens to\n', '     * @return        Amount of tokens withdrawn\n', '     */\n', '    function withdrawExcessToken(\n', '        address token,\n', '        address to\n', '    )\n', '        external\n', '        onlyOwner\n', '        returns (uint256)\n', '    {\n', '        uint256 actualBalance = TokenInteract.balanceOf(token, address(this));\n', '        uint256 accountedBalance = totalBalances[token];\n', '        uint256 withdrawableBalance = actualBalance.sub(accountedBalance);\n', '\n', '        require(\n', '            withdrawableBalance != 0,\n', '            "Vault#withdrawExcessToken: Withdrawable token amount must be non-zero"\n', '        );\n', '\n', '        TokenInteract.transfer(token, to, withdrawableBalance);\n', '\n', '        emit ExcessTokensWithdrawn(token, to, msg.sender);\n', '\n', '        return withdrawableBalance;\n', '    }\n', '\n', '    // ============ Authorized-Only State-Changing Functions ============\n', '\n', '    /**\n', '     * Transfers tokens from an address (that has approved the proxy) to the vault.\n', '     *\n', '     * @param  id      The vault which will receive the tokens\n', '     * @param  token   ERC20 token address\n', '     * @param  from    Address from which the tokens will be taken\n', '     * @param  amount  Number of the token to be sent\n', '     */\n', '    function transferToVault(\n', '        bytes32 id,\n', '        address token,\n', '        address from,\n', '        uint256 amount\n', '    )\n', '        external\n', '        requiresAuthorization\n', '    {\n', '        // First send tokens to this contract\n', '        TokenProxy(TOKEN_PROXY).transferTokens(\n', '            token,\n', '            from,\n', '            address(this),\n', '            amount\n', '        );\n', '\n', '        // Then increment balances\n', '        balances[id][token] = balances[id][token].add(amount);\n', '        totalBalances[token] = totalBalances[token].add(amount);\n', '\n', '        // This should always be true. If not, something is very wrong\n', '        assert(totalBalances[token] >= balances[id][token]);\n', '\n', '        validateBalance(token);\n', '    }\n', '\n', '    /**\n', '     * Transfers a certain amount of funds to an address.\n', '     *\n', '     * @param  id      The vault from which to send the tokens\n', '     * @param  token   ERC20 token address\n', '     * @param  to      Address to transfer tokens to\n', '     * @param  amount  Number of the token to be sent\n', '     */\n', '    function transferFromVault(\n', '        bytes32 id,\n', '        address token,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        external\n', '        requiresAuthorization\n', '    {\n', '        // Next line also asserts that (balances[id][token] >= amount);\n', '        balances[id][token] = balances[id][token].sub(amount);\n', '\n', '        // Next line also asserts that (totalBalances[token] >= amount);\n', '        totalBalances[token] = totalBalances[token].sub(amount);\n', '\n', '        // This should always be true. If not, something is very wrong\n', '        assert(totalBalances[token] >= balances[id][token]);\n', '\n', '        // Do the sending\n', '        TokenInteract.transfer(token, to, amount); // asserts transfer succeeded\n', '\n', '        // Final validation\n', '        validateBalance(token);\n', '    }\n', '\n', '    // ============ Private Helper-Functions ============\n', '\n', '    /**\n', '     * Verifies that this contract is in control of at least as many tokens as accounted for\n', '     *\n', '     * @param  token  Address of ERC20 token\n', '     */\n', '    function validateBalance(\n', '        address token\n', '    )\n', '        private\n', '        view\n', '    {\n', '        // The actual balance could be greater than totalBalances[token] because anyone\n', '        // can send tokens to the contract&#39;s address which cannot be accounted for\n', '        assert(TokenInteract.balanceOf(token, address(this)) >= totalBalances[token]);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', 'pragma experimental "v0.5.0";\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/Math.sol\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '    return _a >= _b ? _a : _b;\n', '  }\n', '\n', '  function min64(uint64 _a, uint64 _b) internal pure returns (uint64) {\n', '    return _a < _b ? _a : _b;\n', '  }\n', '\n', '  function max256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a >= _b ? _a : _b;\n', '  }\n', '\n', '  function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    return _a < _b ? _a : _b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/lib/AccessControlledBase.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title AccessControlledBase\n', ' * @author dYdX\n', ' *\n', ' * Base functionality for access control. Requires an implementation to\n', ' * provide a way to grant and optionally revoke access\n', ' */\n', 'contract AccessControlledBase {\n', '    // ============ State Variables ============\n', '\n', '    mapping (address => bool) public authorized;\n', '\n', '    // ============ Events ============\n', '\n', '    event AccessGranted(\n', '        address who\n', '    );\n', '\n', '    event AccessRevoked(\n', '        address who\n', '    );\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier requiresAuthorization() {\n', '        require(\n', '            authorized[msg.sender],\n', '            "AccessControlledBase#requiresAuthorization: Sender not authorized"\n', '        );\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/StaticAccessControlled.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title StaticAccessControlled\n', ' * @author dYdX\n', ' *\n', ' * Allows for functions to be access controled\n', ' * Permissions cannot be changed after a grace period\n', ' */\n', 'contract StaticAccessControlled is AccessControlledBase, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ State Variables ============\n', '\n', '    // Timestamp after which no additional access can be granted\n', '    uint256 public GRACE_PERIOD_EXPIRATION;\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor(\n', '        uint256 gracePeriod\n', '    )\n', '        public\n', '        Ownable()\n', '    {\n', '        GRACE_PERIOD_EXPIRATION = block.timestamp.add(gracePeriod);\n', '    }\n', '\n', '    // ============ Owner-Only State-Changing Functions ============\n', '\n', '    function grantAccess(\n', '        address who\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            block.timestamp < GRACE_PERIOD_EXPIRATION,\n', '            "StaticAccessControlled#grantAccess: Cannot grant access after grace period"\n', '        );\n', '\n', '        emit AccessGranted(who);\n', '        authorized[who] = true;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/GeneralERC20.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title GeneralERC20\n', ' * @author dYdX\n', ' *\n', ' * Interface for using ERC20 Tokens. We have to use a special interface to call ERC20 functions so\n', ' * that we dont automatically revert when calling non-compliant tokens that have no return value for\n', ' * transfer(), transferFrom(), or approve().\n', ' */\n', 'interface GeneralERC20 {\n', '    function totalSupply(\n', '    )\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function balanceOf(\n', '        address who\n', '    )\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function allowance(\n', '        address owner,\n', '        address spender\n', '    )\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function transfer(\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external;\n', '\n', '    function approve(\n', '        address spender,\n', '        uint256 value\n', '    )\n', '        external;\n', '}\n', '\n', '// File: contracts/lib/TokenInteract.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title TokenInteract\n', ' * @author dYdX\n', ' *\n', ' * This library contains functions for interacting with ERC20 tokens\n', ' */\n', 'library TokenInteract {\n', '    function balanceOf(\n', '        address token,\n', '        address owner\n', '    )\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return GeneralERC20(token).balanceOf(owner);\n', '    }\n', '\n', '    function allowance(\n', '        address token,\n', '        address owner,\n', '        address spender\n', '    )\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return GeneralERC20(token).allowance(owner, spender);\n', '    }\n', '\n', '    function approve(\n', '        address token,\n', '        address spender,\n', '        uint256 amount\n', '    )\n', '        internal\n', '    {\n', '        GeneralERC20(token).approve(spender, amount);\n', '\n', '        require(\n', '            checkSuccess(),\n', '            "TokenInteract#approve: Approval failed"\n', '        );\n', '    }\n', '\n', '    function transfer(\n', '        address token,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        internal\n', '    {\n', '        address from = address(this);\n', '        if (\n', '            amount == 0\n', '            || from == to\n', '        ) {\n', '            return;\n', '        }\n', '\n', '        GeneralERC20(token).transfer(to, amount);\n', '\n', '        require(\n', '            checkSuccess(),\n', '            "TokenInteract#transfer: Transfer failed"\n', '        );\n', '    }\n', '\n', '    function transferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        internal\n', '    {\n', '        if (\n', '            amount == 0\n', '            || from == to\n', '        ) {\n', '            return;\n', '        }\n', '\n', '        GeneralERC20(token).transferFrom(from, to, amount);\n', '\n', '        require(\n', '            checkSuccess(),\n', '            "TokenInteract#transferFrom: TransferFrom failed"\n', '        );\n', '    }\n', '\n', '    // ============ Private Helper-Functions ============\n', '\n', '    /**\n', '     * Checks the return value of the previous function up to 32 bytes. Returns true if the previous\n', '     * function returned 0 bytes or 32 bytes that are not all-zero.\n', '     */\n', '    function checkSuccess(\n', '    )\n', '        private\n', '        pure\n', '        returns (bool)\n', '    {\n', '        uint256 returnValue = 0;\n', '\n', '        /* solium-disable-next-line security/no-inline-assembly */\n', '        assembly {\n', '            // check number of bytes returned from last function call\n', '            switch returndatasize\n', '\n', '            // no bytes returned: assume success\n', '            case 0x0 {\n', '                returnValue := 1\n', '            }\n', '\n', '            // 32 bytes returned: check if non-zero\n', '            case 0x20 {\n', '                // copy 32 bytes into scratch space\n', '                returndatacopy(0x0, 0x0, 0x20)\n', '\n', '                // load those bytes into returnValue\n', '                returnValue := mload(0x0)\n', '            }\n', '\n', '            // not sure what was returned: dont mark as success\n', '            default { }\n', '        }\n', '\n', '        return returnValue != 0;\n', '    }\n', '}\n', '\n', '// File: contracts/margin/TokenProxy.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title TokenProxy\n', ' * @author dYdX\n', ' *\n', ' * Used to transfer tokens between addresses which have set allowance on this contract.\n', ' */\n', 'contract TokenProxy is StaticAccessControlled {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor(\n', '        uint256 gracePeriod\n', '    )\n', '        public\n', '        StaticAccessControlled(gracePeriod)\n', '    {}\n', '\n', '    // ============ Authorized-Only State Changing Functions ============\n', '\n', '    /**\n', '     * Transfers tokens from an address (that has set allowance on the proxy) to another address.\n', '     *\n', '     * @param  token  The address of the ERC20 token\n', '     * @param  from   The address to transfer token from\n', '     * @param  to     The address to transfer tokens to\n', '     * @param  value  The number of tokens to transfer\n', '     */\n', '    function transferTokens(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        external\n', '        requiresAuthorization\n', '    {\n', '        TokenInteract.transferFrom(\n', '            token,\n', '            from,\n', '            to,\n', '            value\n', '        );\n', '    }\n', '\n', '    // ============ Public Constant Functions ============\n', '\n', '    /**\n', '     * Getter function to get the amount of token that the proxy is able to move for a particular\n', '     * address. The minimum of 1) the balance of that address and 2) the allowance given to proxy.\n', '     *\n', '     * @param  who    The owner of the tokens\n', '     * @param  token  The address of the ERC20 token\n', '     * @return        The number of tokens able to be moved by the proxy from the address specified\n', '     */\n', '    function available(\n', '        address who,\n', '        address token\n', '    )\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return Math.min256(\n', '            TokenInteract.allowance(token, who, address(this)),\n', '            TokenInteract.balanceOf(token, who)\n', '        );\n', '    }\n', '}\n', '\n', '// File: contracts/margin/Vault.sol\n', '\n', '/*\n', '\n', '    Copyright 2018 dYdX Trading Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', '\n', '/**\n', ' * @title Vault\n', ' * @author dYdX\n', ' *\n', ' * Holds and transfers tokens in vaults denominated by id\n', ' *\n', ' * Vault only supports ERC20 tokens, and will not accept any tokens that require\n', ' * a tokenFallback or equivalent function (See ERC223, ERC777, etc.)\n', ' */\n', 'contract Vault is StaticAccessControlled\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Events ============\n', '\n', '    event ExcessTokensWithdrawn(\n', '        address indexed token,\n', '        address indexed to,\n', '        address caller\n', '    );\n', '\n', '    // ============ State Variables ============\n', '\n', '    // Address of the TokenProxy contract. Used for moving tokens.\n', '    address public TOKEN_PROXY;\n', '\n', '    // Map from vault ID to map from token address to amount of that token attributed to the\n', '    // particular vault ID.\n', '    mapping (bytes32 => mapping (address => uint256)) public balances;\n', '\n', '    // Map from token address to total amount of that token attributed to some account.\n', '    mapping (address => uint256) public totalBalances;\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor(\n', '        address proxy,\n', '        uint256 gracePeriod\n', '    )\n', '        public\n', '        StaticAccessControlled(gracePeriod)\n', '    {\n', '        TOKEN_PROXY = proxy;\n', '    }\n', '\n', '    // ============ Owner-Only State-Changing Functions ============\n', '\n', '    /**\n', '     * Allows the owner to withdraw any excess tokens sent to the vault by unconventional means,\n', '     * including (but not limited-to) token airdrops. Any tokens moved to the vault by TOKEN_PROXY\n', '     * will be accounted for and will not be withdrawable by this function.\n', '     *\n', '     * @param  token  ERC20 token address\n', '     * @param  to     Address to transfer tokens to\n', '     * @return        Amount of tokens withdrawn\n', '     */\n', '    function withdrawExcessToken(\n', '        address token,\n', '        address to\n', '    )\n', '        external\n', '        onlyOwner\n', '        returns (uint256)\n', '    {\n', '        uint256 actualBalance = TokenInteract.balanceOf(token, address(this));\n', '        uint256 accountedBalance = totalBalances[token];\n', '        uint256 withdrawableBalance = actualBalance.sub(accountedBalance);\n', '\n', '        require(\n', '            withdrawableBalance != 0,\n', '            "Vault#withdrawExcessToken: Withdrawable token amount must be non-zero"\n', '        );\n', '\n', '        TokenInteract.transfer(token, to, withdrawableBalance);\n', '\n', '        emit ExcessTokensWithdrawn(token, to, msg.sender);\n', '\n', '        return withdrawableBalance;\n', '    }\n', '\n', '    // ============ Authorized-Only State-Changing Functions ============\n', '\n', '    /**\n', '     * Transfers tokens from an address (that has approved the proxy) to the vault.\n', '     *\n', '     * @param  id      The vault which will receive the tokens\n', '     * @param  token   ERC20 token address\n', '     * @param  from    Address from which the tokens will be taken\n', '     * @param  amount  Number of the token to be sent\n', '     */\n', '    function transferToVault(\n', '        bytes32 id,\n', '        address token,\n', '        address from,\n', '        uint256 amount\n', '    )\n', '        external\n', '        requiresAuthorization\n', '    {\n', '        // First send tokens to this contract\n', '        TokenProxy(TOKEN_PROXY).transferTokens(\n', '            token,\n', '            from,\n', '            address(this),\n', '            amount\n', '        );\n', '\n', '        // Then increment balances\n', '        balances[id][token] = balances[id][token].add(amount);\n', '        totalBalances[token] = totalBalances[token].add(amount);\n', '\n', '        // This should always be true. If not, something is very wrong\n', '        assert(totalBalances[token] >= balances[id][token]);\n', '\n', '        validateBalance(token);\n', '    }\n', '\n', '    /**\n', '     * Transfers a certain amount of funds to an address.\n', '     *\n', '     * @param  id      The vault from which to send the tokens\n', '     * @param  token   ERC20 token address\n', '     * @param  to      Address to transfer tokens to\n', '     * @param  amount  Number of the token to be sent\n', '     */\n', '    function transferFromVault(\n', '        bytes32 id,\n', '        address token,\n', '        address to,\n', '        uint256 amount\n', '    )\n', '        external\n', '        requiresAuthorization\n', '    {\n', '        // Next line also asserts that (balances[id][token] >= amount);\n', '        balances[id][token] = balances[id][token].sub(amount);\n', '\n', '        // Next line also asserts that (totalBalances[token] >= amount);\n', '        totalBalances[token] = totalBalances[token].sub(amount);\n', '\n', '        // This should always be true. If not, something is very wrong\n', '        assert(totalBalances[token] >= balances[id][token]);\n', '\n', '        // Do the sending\n', '        TokenInteract.transfer(token, to, amount); // asserts transfer succeeded\n', '\n', '        // Final validation\n', '        validateBalance(token);\n', '    }\n', '\n', '    // ============ Private Helper-Functions ============\n', '\n', '    /**\n', '     * Verifies that this contract is in control of at least as many tokens as accounted for\n', '     *\n', '     * @param  token  Address of ERC20 token\n', '     */\n', '    function validateBalance(\n', '        address token\n', '    )\n', '        private\n', '        view\n', '    {\n', '        // The actual balance could be greater than totalBalances[token] because anyone\n', "        // can send tokens to the contract's address which cannot be accounted for\n", '        assert(TokenInteract.balanceOf(token, address(this)) >= totalBalances[token]);\n', '    }\n', '}']
