['pragma solidity ^0.4.24;\n', '\n', 'contract ERC820Registry {\n', '    function getManager(address addr) public view returns(address);\n', '    function setManager(address addr, address newManager) public;\n', '    function getInterfaceImplementer(address addr, bytes32 iHash) public constant returns (address);\n', '    function setInterfaceImplementer(address addr, bytes32 iHash, address implementer) public;\n', '}\n', '\n', 'contract ERC820Implementer {\n', '    ERC820Registry erc820Registry = ERC820Registry(0x991a1bcb077599290d7305493c9A630c20f8b798);\n', '\n', '    function setInterfaceImplementation(string ifaceLabel, address impl) internal {\n', '        bytes32 ifaceHash = keccak256(abi.encodePacked(ifaceLabel));\n', '        erc820Registry.setInterfaceImplementer(this, ifaceHash, impl);\n', '    }\n', '\n', '    function interfaceAddr(address addr, string ifaceLabel) internal constant returns(address) {\n', '        bytes32 ifaceHash = keccak256(abi.encodePacked(ifaceLabel));\n', '        return erc820Registry.getInterfaceImplementer(addr, ifaceHash);\n', '    }\n', '\n', '    function delegateManagement(address newManager) internal {\n', '        erc820Registry.setManager(this, newManager);\n', '    }\n', '}\n', '\n', 'contract ERC777Token {\n', '    function name() public view returns (string);\n', '    function symbol() public view returns (string);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address owner) public view returns (uint256);\n', '    function granularity() public view returns (uint256);\n', '\n', '    function defaultOperators() public view returns (address[]);\n', '    function isOperatorFor(address operator, address tokenHolder) public view returns (bool);\n', '    function authorizeOperator(address operator) public;\n', '    function revokeOperator(address operator) public;\n', '\n', '    function send(address to, uint256 amount, bytes holderData) public;\n', '    function operatorSend(address from, address to, uint256 amount, bytes holderData, bytes operatorData) public;\n', '\n', '    function burn(uint256 amount, bytes holderData) public;\n', '    function operatorBurn(address from, uint256 amount, bytes holderData, bytes operatorData) public;\n', '\n', '    event Sent(\n', '        address indexed operator,\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 amount,\n', '        bytes holderData,\n', '        bytes operatorData\n', '    ); // solhint-disable-next-line separate-by-one-line-in-contract\n', '    event Minted(address indexed operator, address indexed to, uint256 amount, bytes operatorData);\n', '    event Burned(address indexed operator, address indexed from, uint256 amount, bytes holderData, bytes operatorData);\n', '    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\n', '    event RevokedOperator(address indexed operator, address indexed tokenHolder);\n', '}\n', '\n', 'contract ERC777TokensRecipient {\n', '    function tokensReceived(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint amount,\n', '        bytes userData,\n', '        bytes operatorData\n', '    ) public;\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC777TokenScheduledTimelock is ERC820Implementer, ERC777TokensRecipient, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ERC777Token public token;\n', '    uint256 public totalVested;\n', '\n', '    struct Timelock {\n', '        uint256 till;\n', '        uint256 amount;\n', '    }\n', '\n', '    mapping(address => Timelock[]) public schedule;\n', '\n', '    event Released(address to, uint256 amount);\n', '\n', '    constructor(address _token) public {\n', '        setInterfaceImplementation("ERC777TokensRecipient", this);\n', '        address tokenAddress = interfaceAddr(_token, "ERC777Token");\n', '        require(tokenAddress != address(0));\n', '        token = ERC777Token(tokenAddress);\n', '    }\n', '\n', '    function scheduleTimelock(address _beneficiary, uint256 _lockTokenAmount, uint256 _lockTill) public onlyOwner {\n', '        require(_beneficiary != address(0));\n', '        require(_lockTill > getNow());\n', '        require(token.balanceOf(address(this)) >= totalVested.add(_lockTokenAmount));\n', '        totalVested = totalVested.add(_lockTokenAmount);\n', '\n', '        schedule[_beneficiary].push(Timelock({ till: _lockTill, amount: _lockTokenAmount }));\n', '    }\n', '\n', '    function release(address _to) public {\n', '        Timelock[] storage timelocks = schedule[_to];\n', '        uint256 tokens = 0;\n', '        uint256 till;\n', '        uint256 n = timelocks.length;\n', '        uint256 timestamp = getNow();\n', '        for (uint256 i = 0; i < n; i++) {\n', '            Timelock storage timelock = timelocks[i];\n', '            till = timelock.till;\n', '            if (till > 0 && till <= timestamp) {\n', '                tokens = tokens.add(timelock.amount);\n', '                timelock.amount = 0;\n', '                timelock.till = 0;\n', '            }\n', '        }\n', '        if (tokens > 0) {\n', '            totalVested = totalVested.sub(tokens);\n', '            token.send(_to, tokens, &#39;&#39;);\n', '            emit Released(_to, tokens);\n', '        }\n', '    }\n', '\n', '    function releaseBatch(address[] _to) public {\n', '        require(_to.length > 0 && _to.length < 100);\n', '\n', '        for (uint256 i = 0; i < _to.length; i++) {\n', '            release(_to[i]);\n', '        }\n', '    }\n', '\n', '    function tokensReceived(address, address, address, uint256, bytes, bytes) public {}\n', '\n', '    function getScheduledTimelockCount(address _beneficiary) public view returns (uint256) {\n', '        return schedule[_beneficiary].length;\n', '    }\n', '\n', '    function getNow() internal view returns (uint256) {\n', '        return now; // solhint-disable-line\n', '    }\n', '}']