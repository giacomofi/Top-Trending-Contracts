['/**\n', '* Copyright Accelerator 2018\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is furnished to\n', '* do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n', '* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n', '* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', '*/\n', 'pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    function safeMul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function safeSub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function safeAdd(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract EtherDelta {\n', '  function deposit() public payable {}\n', '  function withdrawToken(address token, uint amount) public {}\n', '  function trade(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, uint nonce, address user, uint8 v, bytes32 r, bytes32 s, uint amount) public {}\n', '  function balanceOf(address token, address user) public view returns (uint);\n', '}\n', '\n', 'contract Accelerator {\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '}\n', '\n', 'contract AcceleratorX {\n', '  /// @dev Set constant values here\n', '  string public constant name = "AcceleratorX";\n', '  string public constant symbol = "ACCx";\n', '  uint8 public constant decimals = 18;\n', '  uint public totalSupply;\n', '  uint public constant maxTotalSupply = 10**27;\n', '  address constant public ETHERDELTA_ADDR = 0x8d12A197cB00D4747a1fe03395095ce2A5CC6819; // EtherDelta contract address\n', '  address constant public ACCELERATOR_ADDR = 0x13f1b7fdfbe1fc66676d56483e21b1ecb40b58e2; // Accelerator contract address\n', '\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '  event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping(address => mapping (address => uint256)) allowed;\n', '\n', '  using SafeMath for uint256;\n', '  /// @dev Burn ACC tokens\n', '  function burn(\n', '    uint volume,\n', '    uint volumeETH,\n', '    uint expires,\n', '    uint nonce,\n', '    address user,\n', '    uint8 v,\n', '    bytes32 r,\n', '    bytes32 s,\n', '    uint amount\n', '  ) public payable\n', '  {\n', '    /// @dev Deposit ethers in EtherDelta\n', '    deposit(msg.value);\n', '    /// @dev Execute the trade\n', '    EtherDelta(ETHERDELTA_ADDR).trade(\n', '      address(0),\n', '      volume,\n', '      ACCELERATOR_ADDR,\n', '      volumeETH,\n', '      expires,\n', '      nonce,\n', '      user,\n', '      v,\n', '      r,\n', '      s,\n', '      amount\n', '    );\n', '    /// @dev Get the balance of ACC tokens stored in the EtherDelta contract\n', '    uint ACC = EtherDelta(ETHERDELTA_ADDR).balanceOf(ACCELERATOR_ADDR, address(this));\n', '    /// @dev Withdraw ACC tokens from EtherDelta\n', '    withdrawToken(ACCELERATOR_ADDR, ACC);\n', '    /// @dev Send the tokens to address(0) (the burn address) - require it or fail here\n', '    require(Accelerator(ACCELERATOR_ADDR).transfer(address(0), ACC));\n', '    /// @dev Proof of Burn = Credit the msg.sender address with volume of tokens trasfered to burn address multiplied by 100 (1 ACC = 100 ACCX)\n', '    uint256 numTokens = SafeMath.safeMul(ACC, 100);\n', '    balances[msg.sender] = balances[msg.sender].safeAdd(numTokens);\n', '    totalSupply = totalSupply.safeAdd(numTokens);\n', '    emit Transfer(address(0), msg.sender, numTokens);\n', '  }\n', '/// @dev Deposit ethers to EtherDelta.\n', '/// @param amount Amount of ethers to deposit in EtherDelta\n', 'function deposit(uint amount) internal {\n', '  EtherDelta(ETHERDELTA_ADDR).deposit.value(amount)();\n', '}\n', '/// @dev Withdraw tokens from EtherDelta.\n', '/// @param token Address of token to withdraw from EtherDelta\n', '/// @param amount Amount of tokens to withdraw from EtherDelta\n', 'function withdrawToken(address token, uint amount) internal {\n', '  EtherDelta(ETHERDELTA_ADDR).withdrawToken(token, amount);\n', '}\n', '\n', '/// @dev ERC20 logic for AcceleratorX token\n', 'function balanceOf(address tokenOwner) public view returns (uint) {\n', '    return balances[tokenOwner];\n', '}\n', '\n', 'function transfer(address receiver, uint numTokens) public returns (bool) {\n', '    require(numTokens <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].safeSub(numTokens);\n', '    balances[receiver] = balances[receiver].safeAdd(numTokens);\n', '    emit Transfer(msg.sender, receiver, numTokens);\n', '    return true;\n', '}\n', '\n', 'function approve(address delegate, uint numTokens) public returns (bool) {\n', '    allowed[msg.sender][delegate] = numTokens;\n', '    emit Approval(msg.sender, delegate, numTokens);\n', '    return true;\n', '}\n', '\n', 'function allowance(address owner, address delegate) public view returns (uint) {\n', '    return allowed[owner][delegate];\n', '}\n', '\n', 'function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\n', '    require(numTokens <= balances[owner]);\n', '    require(numTokens <= allowed[owner][msg.sender]);\n', '\n', '    balances[owner] = balances[owner].safeSub(numTokens);\n', '    allowed[owner][msg.sender] = allowed[owner][msg.sender].safeSub(numTokens);\n', '    balances[buyer] = balances[buyer].safeAdd(numTokens);\n', '    emit Transfer(owner, buyer, numTokens);\n', '    return true;\n', '}\n', '}']