['pragma solidity ^0.4.13;\n', '\n', 'interface CompetitionInterface {\n', '\n', '    // EVENTS\n', '\n', '    event Register(uint withId, address fund, address manager);\n', '    event ClaimReward(address registrant, address fund, uint shares);\n', '\n', '    // PRE, POST, INVARIANT CONDITIONS\n', '\n', '    function termsAndConditionsAreSigned(address byManager, uint8 v, bytes32 r, bytes32 s) view returns (bool);\n', '    function isWhitelisted(address x) view returns (bool);\n', '    function isCompetitionActive() view returns (bool);\n', '\n', '    // CONSTANT METHODS\n', '\n', '    function getMelonAsset() view returns (address);\n', '    function getRegistrantId(address x) view returns (uint);\n', '    function getRegistrantFund(address x) view returns (address);\n', '    function getCompetitionStatusOfRegistrants() view returns (address[], address[], bool[]);\n', '    function getTimeTillEnd() view returns (uint);\n', '    function getEtherValue(uint amount) view returns (uint);\n', '    function calculatePayout(uint payin) view returns (uint);\n', '\n', '    // PUBLIC METHODS\n', '\n', '    function registerForCompetition(address fund, uint8 v, bytes32 r, bytes32 s) payable;\n', '    function batchAddToWhitelist(uint maxBuyinQuantity, address[] whitelistants);\n', '    function withdrawMln(address to, uint amount);\n', '    function claimReward();\n', '\n', '}\n', '\n', 'interface ComplianceInterface {\n', '\n', '    // PUBLIC VIEW METHODS\n', '\n', '    /// @notice Checks whether investment is permitted for a participant\n', '    /// @param ofParticipant Address requesting to invest in a Melon fund\n', '    /// @param giveQuantity Quantity of Melon token times 10 ** 18 offered to receive shareQuantity\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 requested to be received\n', '    /// @return Whether identity is eligible to invest in a Melon fund.\n', '    function isInvestmentPermitted(\n', '        address ofParticipant,\n', '        uint256 giveQuantity,\n', '        uint256 shareQuantity\n', '    ) view returns (bool);\n', '\n', '    /// @notice Checks whether redemption is permitted for a participant\n', '    /// @param ofParticipant Address requesting to redeem from a Melon fund\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 offered to redeem\n', '    /// @param receiveQuantity Quantity of Melon token times 10 ** 18 requested to receive for shareQuantity\n', '    /// @return Whether identity is eligible to redeem from a Melon fund.\n', '    function isRedemptionPermitted(\n', '        address ofParticipant,\n', '        uint256 shareQuantity,\n', '        uint256 receiveQuantity\n', '    ) view returns (bool);\n', '}\n', '\n', 'contract DBC {\n', '\n', '    // MODIFIERS\n', '\n', '    modifier pre_cond(bool condition) {\n', '        require(condition);\n', '        _;\n', '    }\n', '\n', '    modifier post_cond(bool condition) {\n', '        _;\n', '        assert(condition);\n', '    }\n', '\n', '    modifier invariant(bool condition) {\n', '        require(condition);\n', '        _;\n', '        assert(condition);\n', '    }\n', '}\n', '\n', 'contract Owned is DBC {\n', '\n', '    // FIELDS\n', '\n', '    address public owner;\n', '\n', '    // NON-CONSTANT METHODS\n', '\n', '    function Owned() { owner = msg.sender; }\n', '\n', '    function changeOwner(address ofNewOwner) pre_cond(isOwner()) { owner = ofNewOwner; }\n', '\n', '    // PRE, POST, INVARIANT CONDITIONS\n', '\n', '    function isOwner() internal returns (bool) { return msg.sender == owner; }\n', '\n', '}\n', '\n', 'contract CompetitionCompliance is ComplianceInterface, DBC, Owned {\n', '\n', '    address public competitionAddress;\n', '\n', '    // CONSTRUCTOR\n', '\n', '    /// @dev Constructor\n', '    /// @param ofCompetition Address of the competition contract\n', '    function CompetitionCompliance(address ofCompetition) public {\n', '        competitionAddress = ofCompetition;\n', '    }\n', '\n', '    // PUBLIC VIEW METHODS\n', '\n', '    /// @notice Checks whether investment is permitted for a participant\n', '    /// @param ofParticipant Address requesting to invest in a Melon fund\n', '    /// @param giveQuantity Quantity of Melon token times 10 ** 18 offered to receive shareQuantity\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 requested to be received\n', '    /// @return Whether identity is eligible to invest in a Melon fund.\n', '    function isInvestmentPermitted(\n', '        address ofParticipant,\n', '        uint256 giveQuantity,\n', '        uint256 shareQuantity\n', '    )\n', '        view\n', '        returns (bool)\n', '    {\n', '        return competitionAddress == ofParticipant;\n', '    }\n', '\n', '    /// @notice Checks whether redemption is permitted for a participant\n', '    /// @param ofParticipant Address requesting to redeem from a Melon fund\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 offered to redeem\n', '    /// @param receiveQuantity Quantity of Melon token times 10 ** 18 requested to receive for shareQuantity\n', '    /// @return isEligible Whether identity is eligible to redeem from a Melon fund.\n', '    function isRedemptionPermitted(\n', '        address ofParticipant,\n', '        uint256 shareQuantity,\n', '        uint256 receiveQuantity\n', '    )\n', '        view\n', '        returns (bool)\n', '    {\n', '        return competitionAddress == ofParticipant;\n', '    }\n', '\n', '    /// @notice Checks whether an address is whitelisted in the competition contract and competition is active\n', '    /// @param x Address\n', '    /// @return Whether the address is whitelisted\n', '    function isCompetitionAllowed(\n', '        address x\n', '    )\n', '        view\n', '        returns (bool)\n', '    {\n', '        return CompetitionInterface(competitionAddress).isWhitelisted(x) && CompetitionInterface(competitionAddress).isCompetitionActive();\n', '    }\n', '\n', '\n', '    // PUBLIC METHODS\n', '\n', '    /// @notice Changes the competition address\n', '    /// @param ofCompetition Address of the competition contract\n', '    function changeCompetitionAddress(\n', '        address ofCompetition\n', '    )\n', '        pre_cond(isOwner())\n', '    {\n', '        competitionAddress = ofCompetition;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'interface CompetitionInterface {\n', '\n', '    // EVENTS\n', '\n', '    event Register(uint withId, address fund, address manager);\n', '    event ClaimReward(address registrant, address fund, uint shares);\n', '\n', '    // PRE, POST, INVARIANT CONDITIONS\n', '\n', '    function termsAndConditionsAreSigned(address byManager, uint8 v, bytes32 r, bytes32 s) view returns (bool);\n', '    function isWhitelisted(address x) view returns (bool);\n', '    function isCompetitionActive() view returns (bool);\n', '\n', '    // CONSTANT METHODS\n', '\n', '    function getMelonAsset() view returns (address);\n', '    function getRegistrantId(address x) view returns (uint);\n', '    function getRegistrantFund(address x) view returns (address);\n', '    function getCompetitionStatusOfRegistrants() view returns (address[], address[], bool[]);\n', '    function getTimeTillEnd() view returns (uint);\n', '    function getEtherValue(uint amount) view returns (uint);\n', '    function calculatePayout(uint payin) view returns (uint);\n', '\n', '    // PUBLIC METHODS\n', '\n', '    function registerForCompetition(address fund, uint8 v, bytes32 r, bytes32 s) payable;\n', '    function batchAddToWhitelist(uint maxBuyinQuantity, address[] whitelistants);\n', '    function withdrawMln(address to, uint amount);\n', '    function claimReward();\n', '\n', '}\n', '\n', 'interface ComplianceInterface {\n', '\n', '    // PUBLIC VIEW METHODS\n', '\n', '    /// @notice Checks whether investment is permitted for a participant\n', '    /// @param ofParticipant Address requesting to invest in a Melon fund\n', '    /// @param giveQuantity Quantity of Melon token times 10 ** 18 offered to receive shareQuantity\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 requested to be received\n', '    /// @return Whether identity is eligible to invest in a Melon fund.\n', '    function isInvestmentPermitted(\n', '        address ofParticipant,\n', '        uint256 giveQuantity,\n', '        uint256 shareQuantity\n', '    ) view returns (bool);\n', '\n', '    /// @notice Checks whether redemption is permitted for a participant\n', '    /// @param ofParticipant Address requesting to redeem from a Melon fund\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 offered to redeem\n', '    /// @param receiveQuantity Quantity of Melon token times 10 ** 18 requested to receive for shareQuantity\n', '    /// @return Whether identity is eligible to redeem from a Melon fund.\n', '    function isRedemptionPermitted(\n', '        address ofParticipant,\n', '        uint256 shareQuantity,\n', '        uint256 receiveQuantity\n', '    ) view returns (bool);\n', '}\n', '\n', 'contract DBC {\n', '\n', '    // MODIFIERS\n', '\n', '    modifier pre_cond(bool condition) {\n', '        require(condition);\n', '        _;\n', '    }\n', '\n', '    modifier post_cond(bool condition) {\n', '        _;\n', '        assert(condition);\n', '    }\n', '\n', '    modifier invariant(bool condition) {\n', '        require(condition);\n', '        _;\n', '        assert(condition);\n', '    }\n', '}\n', '\n', 'contract Owned is DBC {\n', '\n', '    // FIELDS\n', '\n', '    address public owner;\n', '\n', '    // NON-CONSTANT METHODS\n', '\n', '    function Owned() { owner = msg.sender; }\n', '\n', '    function changeOwner(address ofNewOwner) pre_cond(isOwner()) { owner = ofNewOwner; }\n', '\n', '    // PRE, POST, INVARIANT CONDITIONS\n', '\n', '    function isOwner() internal returns (bool) { return msg.sender == owner; }\n', '\n', '}\n', '\n', 'contract CompetitionCompliance is ComplianceInterface, DBC, Owned {\n', '\n', '    address public competitionAddress;\n', '\n', '    // CONSTRUCTOR\n', '\n', '    /// @dev Constructor\n', '    /// @param ofCompetition Address of the competition contract\n', '    function CompetitionCompliance(address ofCompetition) public {\n', '        competitionAddress = ofCompetition;\n', '    }\n', '\n', '    // PUBLIC VIEW METHODS\n', '\n', '    /// @notice Checks whether investment is permitted for a participant\n', '    /// @param ofParticipant Address requesting to invest in a Melon fund\n', '    /// @param giveQuantity Quantity of Melon token times 10 ** 18 offered to receive shareQuantity\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 requested to be received\n', '    /// @return Whether identity is eligible to invest in a Melon fund.\n', '    function isInvestmentPermitted(\n', '        address ofParticipant,\n', '        uint256 giveQuantity,\n', '        uint256 shareQuantity\n', '    )\n', '        view\n', '        returns (bool)\n', '    {\n', '        return competitionAddress == ofParticipant;\n', '    }\n', '\n', '    /// @notice Checks whether redemption is permitted for a participant\n', '    /// @param ofParticipant Address requesting to redeem from a Melon fund\n', '    /// @param shareQuantity Quantity of shares times 10 ** 18 offered to redeem\n', '    /// @param receiveQuantity Quantity of Melon token times 10 ** 18 requested to receive for shareQuantity\n', '    /// @return isEligible Whether identity is eligible to redeem from a Melon fund.\n', '    function isRedemptionPermitted(\n', '        address ofParticipant,\n', '        uint256 shareQuantity,\n', '        uint256 receiveQuantity\n', '    )\n', '        view\n', '        returns (bool)\n', '    {\n', '        return competitionAddress == ofParticipant;\n', '    }\n', '\n', '    /// @notice Checks whether an address is whitelisted in the competition contract and competition is active\n', '    /// @param x Address\n', '    /// @return Whether the address is whitelisted\n', '    function isCompetitionAllowed(\n', '        address x\n', '    )\n', '        view\n', '        returns (bool)\n', '    {\n', '        return CompetitionInterface(competitionAddress).isWhitelisted(x) && CompetitionInterface(competitionAddress).isCompetitionActive();\n', '    }\n', '\n', '\n', '    // PUBLIC METHODS\n', '\n', '    /// @notice Changes the competition address\n', '    /// @param ofCompetition Address of the competition contract\n', '    function changeCompetitionAddress(\n', '        address ofCompetition\n', '    )\n', '        pre_cond(isOwner())\n', '    {\n', '        competitionAddress = ofCompetition;\n', '    }\n', '\n', '}']
