['pragma solidity 0.4.21;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Forwarder is Ownable {\n', '  address destinationAddress;\n', '  event LogForwarded(address indexed sender, uint amount);\n', '  event LogFlushed(address indexed sender, uint amount);\n', '\n', '  function Forwarder() public {\n', '    destinationAddress = msg.sender;\n', '  }\n', '\n', '  function() payable public {\n', '    emit LogForwarded(msg.sender, msg.value);\n', '    destinationAddress.transfer(msg.value);\n', '  }\n', '\n', '  function flush(address owner) public {\n', '    emit LogFlushed(destinationAddress, address(this).balance);\n', '    destinationAddress.transfer(address(this).balance);\n', '  }\n', '\n', '}']