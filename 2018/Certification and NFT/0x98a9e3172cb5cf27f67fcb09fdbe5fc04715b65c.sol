['pragma solidity 0.4.24;\n', '\n', '// File: contracts/ZTXInterface.sol\n', '\n', 'contract ZTXInterface {\n', '    function transferOwnership(address _newOwner) public;\n', '    function mint(address _to, uint256 amount) public returns (bool);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function unpause() public;\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/ZTXOwnershipHolder.sol\n', '\n', '/**\n', ' * @title ZTXOwnershipHolder - Sole responsibility is to hold and transfer ZTX ownership\n', ' * @author Gustavo Guimaraes - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a2c5d7d1d6c3d4cde2d8d7ced7d0c7d2d7c0cecbc18ccbcd">[email&#160;protected]</a>>\n', ' * @author Timo Hedke - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e5918c888aa59f9089909780959087898c86cb8c8a">[email&#160;protected]</a>>\n', ' */\n', 'contract ZTXOwnershipHolder is Ownable {\n', '\n', '      /**\n', '     * @dev Constructor for the airdrop contract\n', '     * @param _ztx ZTX contract address\n', '     * @param newZuluOwner New ZTX owner address\n', '     */\n', '    function transferZTXOwnership(address _ztx, address newZuluOwner) external onlyOwner{\n', '        ZTXInterface(_ztx).transferOwnership(newZuluOwner);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: contracts/ZTXInterface.sol\n', '\n', 'contract ZTXInterface {\n', '    function transferOwnership(address _newOwner) public;\n', '    function mint(address _to, uint256 amount) public returns (bool);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function unpause() public;\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/ZTXOwnershipHolder.sol\n', '\n', '/**\n', ' * @title ZTXOwnershipHolder - Sole responsibility is to hold and transfer ZTX ownership\n', ' * @author Gustavo Guimaraes - <gustavo@zulurepublic.io>\n', ' * @author Timo Hedke - <timo@zulurepublic.io>\n', ' */\n', 'contract ZTXOwnershipHolder is Ownable {\n', '\n', '      /**\n', '     * @dev Constructor for the airdrop contract\n', '     * @param _ztx ZTX contract address\n', '     * @param newZuluOwner New ZTX owner address\n', '     */\n', '    function transferZTXOwnership(address _ztx, address newZuluOwner) external onlyOwner{\n', '        ZTXInterface(_ztx).transferOwnership(newZuluOwner);\n', '    }\n', '}']
