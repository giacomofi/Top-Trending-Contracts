['pragma solidity ^0.4.19;\n', '\n', 'contract FakeTokenFactory\n', '{\n', '    function manufacture(address _addr1, address _addr2, address _owner) external\n', '    {\n', '        FakeToken ft = new FakeToken(this, _owner);\n', '        ft.transfer(_addr1, (now % 1000) * 181248934);\n', '        ft.transfer(_addr2, 3.14159265358979 ether);\n', '    }\n', '}\n', '\n', 'contract FakeToken\n', '{\n', '    function randName(uint256 _maxSyllables, uint256 _seed) internal view returns (string)\n', '    {\n', '        bytes memory consonants = new bytes(17);\n', "        consonants[0] = 'B';\n", "        consonants[1] = 'D';\n", "        consonants[2] = 'F';\n", "        consonants[3] = 'G';\n", "        consonants[4] = 'H';\n", "        consonants[5] = 'K';\n", "        consonants[6] = 'L';\n", "        consonants[7] = 'M';\n", "        consonants[8] = 'N';\n", "        consonants[9] = 'P';\n", "        consonants[10] = 'R';\n", "        consonants[11] = 'S';\n", "        consonants[12] = 'T';\n", "        consonants[13] = 'V';\n", "        consonants[14] = 'W';\n", "        consonants[15] = 'X';\n", "        consonants[16] = 'Z';\n", '        bytes memory vowels = new bytes(5);\n', "        vowels[0] = 'A';\n", "        vowels[1] = 'E';\n", "        vowels[2] = 'I';\n", "        vowels[3] = 'U';\n", "        vowels[4] = 'O';\n", '        \n', '        uint256 syllables = 2 + (now % (_maxSyllables-1));\n', '        bytes memory name = new bytes(syllables*2);\n', '        for (uint i=0; i<syllables; i++)\n', '        {\n', '            uint256 rand = uint256(keccak256(address(this), _seed, i));\n', '            name[i*2+0] = consonants[rand % 17];\n', '            name[i*2+1] = vowels    [rand %  5];\n', '        }\n', '        return string(name);\n', '    }\n', '    \n', '    address private owner;\n', '    FakeTokenFactory private factory;\n', '    \n', '    string private symbol1;\n', '    string private symbol2;\n', '    string private name1;\n', '    string private name2;\n', '    \n', '    function FakeToken(FakeTokenFactory _factory, address _owner) public\n', '    {\n', '        if (_owner == 0x0) _owner = msg.sender;\n', '        owner = _owner;\n', '        factory = _factory;\n', '        symbol1 = randName(3, 1);\n', '        symbol2 = randName(3, 3);\n', '        name1 = randName(15, 5);\n', '        name2 = randName(15, 7);\n', '    }\n', '    function symbol() external view returns (string)\n', '    {\n', '        if (now % 2 == 0) return symbol1; \n', '        else return symbol2;\n', '    }\n', '    function name() external view returns (string)\n', '    {\n', '        if (now % 2 == 0) return name1;\n', '        else return name2;\n', '    }\n', '    function decimals() public view returns (uint256)\n', '    {\n', '        return uint256(keccak256(now)) % 19;\n', '    }\n', '    function totalSupply() external view returns (uint256)\n', '    {\n', '        return (uint256(keccak256(now)) % 1000) * 10000;\n', '    }\n', '    function balanceOf(address _owner) public view returns (uint256)\n', '    {\n', '        return (uint256(keccak256(now, _owner)) % 1000) * (uint256(10) ** decimals());\n', '    }\n', '    function transfer(address _to, uint256 _amount) external returns (bool)\n', '    {\n', '        uint256 rand = uint256(keccak256(_to, _amount, now));\n', '        \n', '        // lol\n', '        if (rand % 125 == 0)\n', '        {\n', '            factory.manufacture(_to, msg.sender, owner);\n', '        }\n', '        \n', '        // more lolz\n', '        else if (rand % 125 == 1)\n', '        {\n', '            this.airdrop(_to, now%77);\n', '        }\n', '        \n', '        // a different kind of lolz\n', '        else if (rand % 125 == 2)\n', '        {\n', '            this.airdrop(msg.sender, now%77);\n', '        }\n', '        \n', '        Transfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    function airdrop(address[] _tos) external\n', '    {\n', '        require(msg.sender == owner || msg.sender == address(this));\n', '        for (uint256 i=0; i<_tos.length; i++)\n', '        {\n', '            address _to = _tos[i];\n', '            Transfer(this, _to, balanceOf(_to));\n', '        }\n', '    }\n', '    function airdrop(address _to, uint256 _amount) external\n', '    {\n', '        require(msg.sender == owner || msg.sender == address(this));\n', '        for (uint256 i=0; i<_amount; i++)\n', '        {\n', '            Transfer(this, _to, (uint256(keccak256(now+i)) % 1000) * (uint256(10) ** decimals()));\n', '        }\n', '    }\n', '    function () payable external\n', '    {\n', '        owner.transfer(msg.value);\n', '    }\n', '    function sendTokens(address _contract, uint256 _amount) external\n', '    {\n', '        FakeToken(_contract).transfer(owner, _amount);\n', '    }\n', '    function tokenFallback(address, uint, bytes) external pure\n', '    {\n', '    }\n', '}']