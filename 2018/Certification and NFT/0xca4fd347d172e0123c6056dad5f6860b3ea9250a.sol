['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SimpleToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract OpportyToken is StandardToken {\n', '\n', '  string public constant name = "OpportyToken";\n', '  string public constant symbol = "OPP";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));\n', '\n', '  /**\n', '   * @dev Contructor that gives msg.sender all of existing tokens.\n', '   */\n', '  function OpportyToken() public {\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '    Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract OpportyYearHold is Pausable {\n', '  using SafeMath for uint256;\n', '  OpportyToken public token;\n', '\n', '  uint public holdPeriod;\n', '  address public multisig;\n', '\n', '  // start and end timestamps where investments are allowed\n', '  uint public startDate;\n', '  uint public endDate;\n', '  uint public endSaleDate;\n', '\n', '  uint private price;\n', '\n', '  uint public minimalContribution;\n', '\n', '  // total ETH collected\n', '  uint public ethRaised;\n', '\n', '  enum SaleState { NEW, SALE, ENDED }\n', '  SaleState public state;\n', '\n', '  mapping (uint => address) private assetOwners;\n', '  mapping (address => uint) private assetOwnersIndex;\n', '  uint public assetOwnersIndexes;\n', '\n', '  struct Bonus {\n', '    uint minAmount;\n', '    uint maxAmount;\n', '    uint8 bonus;\n', '  }\n', '\n', '  Bonus[]  bonuses;\n', '\n', '  struct Holder {\n', '    bool isActive;\n', '    uint tokens;\n', '    uint holdPeriodTimestamp;\n', '    bool withdrawed;\n', '  }\n', '\n', '  mapping(address => Holder) public holderList;\n', '  mapping(uint => address) private holderIndexes;\n', '  uint private holderIndex;\n', '\n', '\n', '  event TokensTransfered(address contributor , uint amount);\n', '  event Hold(address sender, address contributor, uint amount, uint8 holdPeriod);\n', '  event ManualChangeStartDate(uint beforeDate, uint afterDate);\n', '  event ManualChangeEndDate(uint beforeDate, uint afterDate);\n', '  event ChangeMinAmount(uint oldMinAmount, uint minAmount);\n', '  event BonusChanged(uint minAmount, uint maxAmount, uint8 newBonus);\n', '  event HolderAdded(address addr, uint contribution, uint tokens, uint holdPeriodTimestamp);\n', '  event FundsTransferredToMultisig(address multisig, uint value);\n', '  event SaleNew();\n', '  event SaleStarted();\n', '  event SaleEnded();\n', '  event ManualPriceChange(uint beforePrice, uint afterPrice);\n', '  event HoldChanged(address holder, uint tokens, uint timest);\n', '  event TokenChanged(address newAddress);\n', '\n', '  modifier onlyAssetsOwners() {\n', '    require(assetOwnersIndex[msg.sender] > 0 || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function OpportyYearHold(address walletAddress, uint start, uint end, uint endSale) public {\n', '    holdPeriod = 1 years;\n', '    state = SaleState.NEW;\n', '\n', '    startDate = start;\n', '    endDate   = end;\n', '    endSaleDate = endSale;\n', '    price = 0.0002 * 1 ether;\n', '    multisig = walletAddress;\n', '    minimalContribution = 0.3 * 1 ether;\n', '\n', '    bonuses.push(Bonus({minAmount: 0, maxAmount: 50, bonus: 35 }));\n', '    bonuses.push(Bonus({minAmount: 50, maxAmount: 100, bonus: 40 }));\n', '    bonuses.push(Bonus({minAmount: 100, maxAmount: 250, bonus: 45 }));\n', '    bonuses.push(Bonus({minAmount: 250, maxAmount: 500, bonus: 50 }));\n', '    bonuses.push(Bonus({minAmount: 500, maxAmount: 1000, bonus: 70 }));\n', '    bonuses.push(Bonus({minAmount: 1000, maxAmount: 5000, bonus: 80 }));\n', '    bonuses.push(Bonus({minAmount: 5000, maxAmount: 99999999, bonus: 90 }));\n', '  }\n', '\n', '  function changeBonus(uint minAmount, uint maxAmount, uint8 newBonus) public {\n', '    bool find = false;\n', '    for (uint i = 0; i < bonuses.length; ++i) {\n', '      if (bonuses[i].minAmount == minAmount && bonuses[i].maxAmount == maxAmount ) {\n', '        bonuses[i].bonus = newBonus;\n', '        find = true;\n', '        break;\n', '      }\n', '    }\n', '    if (!find) {\n', '      bonuses.push(Bonus({minAmount:minAmount, maxAmount: maxAmount, bonus:newBonus}));\n', '    }\n', '    BonusChanged(minAmount, maxAmount, newBonus);\n', '  }\n', '\n', '  function getBonus(uint am) public view returns(uint8) {\n', '    uint8 bon = 0;\n', '    am /= 10 ** 18;\n', '\n', '    for (uint i = 0; i < bonuses.length; ++i) {\n', '      if (am >= bonuses[i].minAmount && am<bonuses[i].maxAmount)\n', '        bon = bonuses[i].bonus;\n', '    }\n', '\n', '    return bon;\n', '  }\n', '\n', '  function() public payable {\n', '    require(state == SaleState.SALE);\n', '    require(msg.value >= minimalContribution);\n', '    require(now >= startDate);\n', '\n', '    if (now > endDate) {\n', '      state = SaleState.ENDED;\n', '      msg.sender.transfer(msg.value);\n', '      SaleEnded();\n', '      return ;\n', '    }\n', '\n', '    uint tokenAmount = msg.value.div(price);\n', '    tokenAmount += tokenAmount.mul(getBonus(msg.value)).div(100);\n', '    tokenAmount *= 10 ** 18;\n', '\n', '    uint holdTimestamp = endSaleDate.add(holdPeriod);\n', '    addHolder(msg.sender, tokenAmount, holdTimestamp);\n', '    HolderAdded(msg.sender, msg.value, tokenAmount, holdTimestamp);\n', '\n', '    forwardFunds();\n', '\n', '  }\n', '\n', '  function addHolder(address holder, uint tokens, uint timest) internal {\n', '    if (holderList[holder].isActive == false) {\n', '      holderList[holder].isActive = true;\n', '      holderList[holder].tokens = tokens;\n', '      holderList[holder].holdPeriodTimestamp = timest;\n', '      holderIndexes[holderIndex] = holder;\n', '      holderIndex++;\n', '    } else {\n', '      holderList[holder].tokens += tokens;\n', '      holderList[holder].holdPeriodTimestamp = timest;\n', '    }\n', '  }\n', '\n', '  function changeHold(address holder, uint tokens, uint timest) onlyAssetsOwners public {\n', '    if (holderList[holder].isActive == true) {\n', '      holderList[holder].tokens = tokens;\n', '      holderList[holder].holdPeriodTimestamp = timest;\n', '      HoldChanged(holder, tokens, timest);\n', '    }\n', '  }\n', '\n', '  function forwardFunds() internal {\n', '    ethRaised += msg.value;\n', '    multisig.transfer(msg.value);\n', '    FundsTransferredToMultisig(multisig, msg.value);\n', '  }\n', '\n', '  function newPresale() public onlyOwner {\n', '    state = SaleState.NEW;\n', '    SaleNew();\n', '  }\n', '\n', '  function startPresale() public onlyOwner {\n', '    state = SaleState.SALE;\n', '    SaleStarted();\n', '  }\n', '\n', '  function endPresale() public onlyOwner {\n', '    state = SaleState.ENDED;\n', '    SaleEnded();\n', '  }\n', '\n', '  function addAssetsOwner(address _owner) public onlyOwner {\n', '    assetOwnersIndexes++;\n', '    assetOwners[assetOwnersIndexes] = _owner;\n', '    assetOwnersIndex[_owner] = assetOwnersIndexes;\n', '  }\n', '\n', '  function removeAssetsOwner(address _owner) public onlyOwner {\n', '    uint index = assetOwnersIndex[_owner];\n', '    delete assetOwnersIndex[_owner];\n', '    delete assetOwners[index];\n', '    assetOwnersIndexes--;\n', '  }\n', '\n', '  function getAssetsOwners(uint _index) onlyOwner public constant returns (address) {\n', '    return assetOwners[_index];\n', '  }\n', '\n', '  function getBalance() public constant returns (uint) {\n', '    return token.balanceOf(this);\n', '  }\n', '\n', '  function returnTokens(uint nTokens) public onlyOwner returns (bool) {\n', '    require(nTokens <= getBalance());\n', '    token.transfer(msg.sender, nTokens);\n', '    TokensTransfered(msg.sender, nTokens);\n', '    return true;\n', '  }\n', '\n', '  function unlockTokens() public returns (bool) {\n', '    require(holderList[msg.sender].isActive);\n', '    require(!holderList[msg.sender].withdrawed);\n', '    require(now >= holderList[msg.sender].holdPeriodTimestamp);\n', '\n', '    token.transfer(msg.sender, holderList[msg.sender].tokens);\n', '    holderList[msg.sender].withdrawed = true;\n', '    TokensTransfered(msg.sender, holderList[msg.sender].tokens);\n', '    return true;\n', '  }\n', '\n', '  function setStartDate(uint date) public onlyOwner {\n', '    uint oldStartDate = startDate;\n', '    startDate = date;\n', '    ManualChangeStartDate(oldStartDate, date);\n', '  }\n', '\n', '  function setEndSaleDate(uint date) public onlyOwner {\n', '    uint oldEndDate = endSaleDate;\n', '    endSaleDate = date;\n', '    ManualChangeEndDate(oldEndDate, date);\n', '  }\n', '\n', '  function setEndDate(uint date) public onlyOwner {\n', '    uint oldEndDate = endDate;\n', '    endDate = date;\n', '    ManualChangeEndDate(oldEndDate, date);\n', '  }\n', '\n', '  function setPrice(uint newPrice) public onlyOwner {\n', '    uint oldPrice = price;\n', '    price = newPrice;\n', '    ManualPriceChange(oldPrice, newPrice);\n', '  }\n', '\n', '  function setMinimalContribution(uint minimumAmount) public onlyOwner {\n', '    uint oldMinAmount = minimalContribution;\n', '    minimalContribution = minimumAmount;\n', '    ChangeMinAmount(oldMinAmount, minimalContribution);\n', '  }\n', '\n', '  function batchChangeHoldPeriod(uint holdedPeriod) public onlyAssetsOwners {\n', '    for (uint i = 0; i < holderIndex; ++i) {\n', '      holderList[holderIndexes[i]].holdPeriodTimestamp = holdedPeriod;\n', '      HoldChanged(holderIndexes[i], holderList[holderIndexes[i]].tokens, holdedPeriod);\n', '    }\n', '  }\n', '\n', '  function setToken(address newToken) public onlyOwner {\n', '    token = OpportyToken(newToken);\n', '    TokenChanged(token);\n', '  }\n', '\n', '  function getTokenAmount() public view returns (uint) {\n', '    uint tokens = 0;\n', '    for (uint i = 0; i < holderIndex; ++i) {\n', '      if (!holderList[holderIndexes[i]].withdrawed) {\n', '        tokens += holderList[holderIndexes[i]].tokens;\n', '      }\n', '    }\n', '    return tokens;\n', '  }\n', '\n', '  function getEthRaised() constant external returns (uint) {\n', '    return ethRaised;\n', '  }\n', '\n', '}']