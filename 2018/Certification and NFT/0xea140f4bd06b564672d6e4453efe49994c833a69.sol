['pragma solidity ^0.4.24;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external returns(bool);\n', '    function balanceOf(address who) external returns(uint256);\n', '}\n', '\n', 'interface AddressRegistry {\n', '    function getAddr(string AddrName) external returns(address);\n', '}\n', '\n', 'contract Registry {\n', '    address public RegistryAddress;\n', '    address public deployer;\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == getAddress("admin"));\n', '        _;\n', '    }\n', '    function getAddress(string AddressName) internal view returns(address) {\n', '        AddressRegistry aRegistry = AddressRegistry(RegistryAddress);\n', '        address realAddress = aRegistry.getAddr(AddressName);\n', '        require(realAddress != address(0));\n', '        return realAddress;\n', '    }\n', '    constructor () public {\n', '        deployer = msg.sender;\n', '    }\n', '    function setRegistryAddr(address rAddress) public {\n', '        require(msg.sender == deployer);\n', '        RegistryAddress = rAddress;\n', '    }\n', '}\n', '\n', 'interface MFund {\n', '    function NonIssueDeposits() external payable;\n', '}\n', '\n', 'contract MoatAsset is Registry {\n', '\n', '    event etherReceived(uint val);\n', '    function () public payable {\n', '        emit etherReceived(msg.value);\n', '    }\n', '\n', '    constructor(address rAddress) public {\n', '        RegistryAddress = rAddress;\n', '    }    \n', '\n', '    function SendEtherToFund(uint256 weiAmt) onlyAdmin public {\n', '        MFund MoatFund = MFund(getAddress("fund"));\n', '        MoatFund.NonIssueDeposits.value(weiAmt)();\n', '    }\n', '\n', '    function CollectERC20(address tokenAddress) onlyAdmin public {\n', '        token tokenFunctions = token(tokenAddress);\n', '        uint256 tokenBal = tokenFunctions.balanceOf(address(this));\n', '        tokenFunctions.transfer(msg.sender, tokenBal);\n', '    }\n', '\n', '    function SendEtherToDex(uint256 weiAmt) onlyAdmin public {\n', '        getAddress("dex").transfer(weiAmt);\n', '    }\n', '\n', '    function SendERC20ToDex(address tokenAddress) onlyAdmin public {\n', '        token tokenFunctions = token(tokenAddress);\n', '        uint256 tokenBal = tokenFunctions.balanceOf(address(this));\n', '        tokenFunctions.transfer(getAddress("dex"), tokenBal);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external returns(bool);\n', '    function balanceOf(address who) external returns(uint256);\n', '}\n', '\n', 'interface AddressRegistry {\n', '    function getAddr(string AddrName) external returns(address);\n', '}\n', '\n', 'contract Registry {\n', '    address public RegistryAddress;\n', '    address public deployer;\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == getAddress("admin"));\n', '        _;\n', '    }\n', '    function getAddress(string AddressName) internal view returns(address) {\n', '        AddressRegistry aRegistry = AddressRegistry(RegistryAddress);\n', '        address realAddress = aRegistry.getAddr(AddressName);\n', '        require(realAddress != address(0));\n', '        return realAddress;\n', '    }\n', '    constructor () public {\n', '        deployer = msg.sender;\n', '    }\n', '    function setRegistryAddr(address rAddress) public {\n', '        require(msg.sender == deployer);\n', '        RegistryAddress = rAddress;\n', '    }\n', '}\n', '\n', 'interface MFund {\n', '    function NonIssueDeposits() external payable;\n', '}\n', '\n', 'contract MoatAsset is Registry {\n', '\n', '    event etherReceived(uint val);\n', '    function () public payable {\n', '        emit etherReceived(msg.value);\n', '    }\n', '\n', '    constructor(address rAddress) public {\n', '        RegistryAddress = rAddress;\n', '    }    \n', '\n', '    function SendEtherToFund(uint256 weiAmt) onlyAdmin public {\n', '        MFund MoatFund = MFund(getAddress("fund"));\n', '        MoatFund.NonIssueDeposits.value(weiAmt)();\n', '    }\n', '\n', '    function CollectERC20(address tokenAddress) onlyAdmin public {\n', '        token tokenFunctions = token(tokenAddress);\n', '        uint256 tokenBal = tokenFunctions.balanceOf(address(this));\n', '        tokenFunctions.transfer(msg.sender, tokenBal);\n', '    }\n', '\n', '    function SendEtherToDex(uint256 weiAmt) onlyAdmin public {\n', '        getAddress("dex").transfer(weiAmt);\n', '    }\n', '\n', '    function SendERC20ToDex(address tokenAddress) onlyAdmin public {\n', '        token tokenFunctions = token(tokenAddress);\n', '        uint256 tokenBal = tokenFunctions.balanceOf(address(this));\n', '        tokenFunctions.transfer(getAddress("dex"), tokenBal);\n', '    }\n', '\n', '}']
