['// Ethertote - Eth Raised from Token Sale\n', '//\n', '// The following contract automatically distributes the Eth raised from the\n', '// token sale.\n', '\n', '// 1. 50% of the Eth raised will go into a "development" ethereum wallet, immediately\n', '// accessible to the team, to be used for marketing, promotion, development, \n', '// running costs, exchange listing fees, bug bounties and other aspects of \n', '// running the company.\n', '//\n', '// 2. 25% of the Eth will go into a "Tote Liquidator" ethereum wallet, which will be\n', '// used by the team purely to to liquidate the ethertote over the the opening\n', '// 12 weeks. It will be very easy to see the transactions on Etherscan as \n', '// they will match the CryptoPot smart contracts that make up the Ethertote\n', '// ecosystem.\n', '//\n', '// 3. 25% of the Eth will go into a time-locked smart contract called "Team Eth"\n', '// which will be available to claim by the Ethertote team over a 12-month period\n', '//\n', '//\n', '// Note that ALL Eth raised from the token sale will initially go to this \n', '// smart contract\n', '// ----------------------------------------------------------------------------\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '///////////////////////////////////////////////////////////////////////////////\n', '// SafeMath Library \n', '///////////////////////////////////////////////////////////////////////////////\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '///////////////////////////////////////////////////////////////////////////////\n', '// Main contract\n', '//////////////////////////////////////////////////////////////////////////////\n', '\n', 'contract EthRaised {\n', '    using SafeMath for uint256;\n', '\n', '    address public thisContractAddress;\n', '    address public admin;\n', '    \n', '    // time contract was deployed\n', '    uint public createdAt;\n', '    \n', '    // address of the Ethertote Development wallet\n', '    address public ethertoteDevelopmentWallet = \n', '    0x1a3c1ca46c58e9b140485A9B0B740d42aB3B4a26;\n', '    \n', '    // address of the ToteLiquidator wallet\n', '    address public toteLiquidatorWallet = \n', '    0x8AF2dA3182a3dae379d51367a34480Bd5d04F4e2;\n', '    \n', '    // address of the TeamEth time-locked contract\n', '    address public teamEthContract = \n', '    0x67ed24A0dB2Ae01C4841Cd8aef1DA519B588E2B2;\n', '    \n', '\n', '    // ensure call to each function is only made once\n', '    bool public ethertoteDevelopmentTransferComplete;\n', '    bool public toteLiquidatorTransferComplete;\n', '    bool public teamEthTransferComplete;\n', '\n', '\n', '    \n', '    // amount of eth that will be distributed\n', '    uint public ethToBeDistributed;\n', '    \n', '    // ensure the function is called once\n', '    bool public ethToBeDistributedSet;\n', '\n', '///////////////////////////////////////////////////////////////////////////////    \n', '// percentages to be sent\n', '//////////////////////////////////////////////////////////////////////////////\n', '\n', '    // 50% to the development wallet\n', '    // 100/50 = 2\n', '    uint public divForEthertoteDevelopmentWallet = 2;\n', '    \n', '    // 25% to the liquidator wallet\n', '    // 100/25 = 4\n', '    uint public divForEthertoteLiquidatorWallet = 4;\n', '    \n', '    // 25% to the TeamEth Smart Contract\n', '    // 100/25 = 4\n', '    uint public divForTeamEthContract = 4;\n', '\n', '/////////////////////////////////////////////////////////////////////////////\n', '    \n', '    // EVENTS\n', '    event Received(uint256);\n', '    event SentToTeamEth(uint256);\n', '    event SentToLiquidator(uint256);\n', '    event SentToDev(uint256);\n', '    \n', '    // MODIFIER\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    constructor () public {\n', '        admin = msg.sender;\n', '        thisContractAddress = address(this);\n', '        createdAt = now;\n', '    }\n', '\n', '    // fallback to store all the ether sent to this address\n', '    function() payable public { \n', '    }\n', '    \n', '    function thisContractBalance() public view returns(uint) {\n', '        return address(this).balance;\n', '    }\n', '    \n', '    \n', '    // declare the token sale is complete, reference the balance, and make\n', '    // the necessary transfers\n', '    function _A_tokenSaleCompleted() onlyAdmin public {\n', '        require(ethToBeDistributedSet == false);\n', '        ethToBeDistributed = address(this).balance;\n', '        ethToBeDistributedSet = true;\n', '        emit Received(now);\n', '    }   \n', '    \n', '    \n', '    // move Eth to Ethertote development wallet\n', '    function _B_sendToEthertoteDevelopmentWallet() onlyAdmin public {\n', '       require(ethertoteDevelopmentTransferComplete == false);\n', '       require(ethToBeDistributed > 0);\n', '       // now allow a percentage of the balance\n', '       // total balance divided by 5 = 50% of balance\n', '       address(ethertoteDevelopmentWallet).transfer(ethToBeDistributed.div(divForEthertoteDevelopmentWallet));\n', '       emit SentToDev(ethToBeDistributed.div(divForEthertoteDevelopmentWallet)); \n', '       //ensure function can only ever be called once\n', '       ethertoteDevelopmentTransferComplete = true;\n', '    }\n', '    \n', '    // move Eth to tote liquidator wallet\n', '    function _C_sendToToteLiquidatorWallet() onlyAdmin public {\n', '       require(toteLiquidatorTransferComplete == false);\n', '       require(ethToBeDistributed > 0);\n', '       // now allow a percentage of the balance\n', '       // total balance divided by 4 = 25% of balance\n', '       address(toteLiquidatorWallet).transfer(ethToBeDistributed.div(divForEthertoteLiquidatorWallet));\n', '       emit SentToLiquidator(ethToBeDistributed.div(divForEthertoteLiquidatorWallet)); \n', '       //ensure function can only ever be called once\n', '       toteLiquidatorTransferComplete = true;\n', '    }\n', '\n', '    // move Eth to team eth time-locked contract\n', '    function _D_sendToTeamEthContract() onlyAdmin public {\n', '       require(teamEthTransferComplete == false);\n', '       require(ethToBeDistributed > 0);\n', '       // now allow a percentage of the balance\n', '       // total balance divided by 4 = 25% of balance\n', '       address(teamEthContract).transfer(ethToBeDistributed.div(divForTeamEthContract));\n', '       emit SentToTeamEth(ethToBeDistributed.div(divForTeamEthContract)); \n', '       //ensure function can only ever be called once\n', '       teamEthTransferComplete = true;\n', '    }\n', '    \n', '// ----------------------------------------------------------------------------\n', '// This method can be used by admin to extract Eth accidentally \n', '// sent to this smart contract after all previous transfers have been made\n', '// to the correct addresses\n', '// ----------------------------------------------------------------------------\n', '    function ClaimEth() onlyAdmin public {\n', '        require(ethertoteDevelopmentTransferComplete == true);\n', '        require(toteLiquidatorTransferComplete == true);\n', '        require(teamEthTransferComplete == true);\n', '        \n', '        // now withdraw any accidental Eth sent to this contract\n', '        require(address(this).balance > 0);\n', '        address(admin).transfer(address(this).balance);\n', '\n', '    }\n', '}']