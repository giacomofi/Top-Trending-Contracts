['pragma solidity ^0.4.18;\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '\n', '\n', 'contract ERC721Token is ERC721 {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addToken(_to, _tokenId);\n', '    Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Burns a specific token\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n', '    if (approvedFor(_tokenId) != 0) {\n', '      clearApproval(msg.sender, _tokenId);\n', '    }\n', '    removeToken(msg.sender, _tokenId);\n', '    Transfer(msg.sender, 0x0, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract CommonEth {\n', '\n', '    //模式\n', '    enum  Modes {LIVE, TEST}\n', '\n', '    //合约当前模式\n', '    Modes public mode = Modes.LIVE;\n', '\n', '    //管理人员列表\n', '    address internal ceoAddress;\n', '    address internal cfoAddress;\n', '    address internal cooAddress;\n', '\n', '\n', '    address public newContractAddress;\n', '\n', '    event ContractUpgrade(address newContract);\n', '\n', '    function setNewAddress(address _v2Address) external onlyCEO {\n', '        newContractAddress = _v2Address;\n', '        ContractUpgrade(_v2Address);\n', '    }\n', '\n', '\n', '    //构造\n', '    function CommonEth() public {\n', '        ceoAddress = msg.sender;\n', '    }\n', '\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCOO() {\n', '        require(msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStaff() {\n', '        require(msg.sender == ceoAddress || msg.sender == cooAddress || msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManger() {\n', '        require(msg.sender == ceoAddress || msg.sender == cooAddress || msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    //合约状态检查：live状态、管理员或者测试人员不受限制\n', '    modifier onlyLiveMode() {\n', '        require(mode == Modes.LIVE || msg.sender == ceoAddress || msg.sender == cooAddress || msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    //获取自己的身份\n', '    function staffInfo() public view onlyStaff returns (bool ceo, bool coo, bool cfo, bool qa){\n', '        return (msg.sender == ceoAddress, msg.sender == cooAddress, msg.sender == cfoAddress,false);\n', '    }\n', '\n', '\n', '    //进入测试模式\n', '    function stopLive() public onlyCOO {\n', '        mode = Modes.TEST;\n', '    }\n', '\n', '    //开启LIVE模式式\n', '    function startLive() public onlyCOO {\n', '        mode = Modes.LIVE;\n', '    }\n', '\n', '    function getMangers() public view onlyManger returns (address _ceoAddress, address _cooAddress, address _cfoAddress){\n', '        return (ceoAddress, cooAddress, cfoAddress);\n', '    }\n', '\n', '    function setCEO(address _newCEO) public onlyCEO {\n', '        require(_newCEO != address(0));\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    function setCFO(address _newCFO) public onlyCEO {\n', '        require(_newCFO != address(0));\n', '        cfoAddress = _newCFO;\n', '    }\n', '\n', '    function setCOO(address _newCOO) public onlyCEO {\n', '        require(_newCOO != address(0));\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '\n', 'contract NFToken is ERC721Token, CommonEth {\n', '    //TOKEN结构\n', '    struct TokenModel {\n', '        uint id;//id\n', '        string serial;//编号\n', '        uint createTime;\n', '        uint price;//当前价格\n', '        uint lastTime;\n', '        uint openTime;\n', '    }\n', '\n', '    //所有tokens\n', '    mapping(uint => TokenModel)  tokens;\n', '    mapping(string => uint)  idOfSerial;\n', '\n', '    //每次交易后价格上涨\n', '    uint RISE_RATE = 110;\n', '    uint RISE_RATE_FAST = 150;\n', '    //平台抽成\n', '    uint8 SALE_FEE_RATE = 2;\n', '\n', '    //瓜分活动投入\n', '    uint CARVE_UP_INPUT = 0.01 ether;\n', '    //瓜分票\n', '    uint[10] carveUpTokens = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n', '    uint8 carverUpIndex = 0;\n', '\n', '    function NFToken() {\n', '        setCFO(msg.sender);\n', '        setCOO(msg.sender);\n', '    }\n', '\n', '    //默认方法\n', '    function() external payable {\n', '\n', '    }\n', '\n', '    //交易分红\n', '    event TransferBonus(address indexed _to, uint256 _tokenId, uint _bonus);\n', '    //未交易卡更新\n', '    event UnsoldUpdate(uint256 indexed _tokenId, uint price, uint openTime);\n', '    //加入瓜分\n', '    event JoinCarveUp(address indexed _account, uint _tokenId, uint _input);\n', '    //瓜分分红\n', '    event CarveUpBonus(address indexed _account, uint _tokenId, uint _bonus);\n', '    //event CarveUpDone(uint _t, uint _t0, uint _t1, uint _t2, uint _t3, uint _t4, uint _t5, uint _t6, uint _t7, uint _t8, uint _t9);\n', '\n', '    //加入瓜分活动\n', '    function joinCarveUpTen(uint _tokenId) public payable onlyLiveMode onlyOwnerOf(_tokenId) returns (bool){\n', '        //确认投入金额\n', '        require(msg.value == CARVE_UP_INPUT);\n', '        //确认 这张卡的本轮只用一次\n', '        for (uint8 i = 0; i < carverUpIndex; i++) {\n', '            require(carveUpTokens[i] != _tokenId);\n', '        }\n', '        //按当前索引进入队列\n', '        carveUpTokens[carverUpIndex] = _tokenId;\n', '\n', '        //日志&事件\n', '        JoinCarveUp(msg.sender, _tokenId, msg.value);\n', '        //第10人出现,结算了\n', '        if (carverUpIndex % 10 == 9) {\n', '            //索引归0\n', '            carverUpIndex = 0;\n', '            uint theLoserIndex = (now % 10 + (now / 10 % 10) + (now / 100 % 10) + (now / 1000 % 10)) % 10;\n', '            for (uint8 j = 0; j < 10; j++) {\n', '                if (j != theLoserIndex) {\n', '                    uint bonus = CARVE_UP_INPUT * 110 / 100;\n', '                    ownerOf(carveUpTokens[j]).transfer(bonus);\n', '                    CarveUpBonus(ownerOf(carveUpTokens[j]), carveUpTokens[j], bonus);\n', '                }else{\n', '                    CarveUpBonus(ownerOf(carveUpTokens[j]), carveUpTokens[j], 0);\n', '                }\n', '            }\n', '            //日志&事件\n', '            //CarveUpDone(theLoserIndex, carveUpTokens[0], carveUpTokens[1], carveUpTokens[2], carveUpTokens[3], carveUpTokens[4], carveUpTokens[5], carveUpTokens[6], carveUpTokens[7], carveUpTokens[8], carveUpTokens[9]);\n', '            carveUpTokens = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n', '        } else {\n', '            carverUpIndex++;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // 买入【其它人可以以等于或高于当前价格买入，交易过程平台收取交易价格抽成2%，每次交易后价格上涨】\n', '    function buy(uint _id) public payable onlyLiveMode returns (bool){\n', '        TokenModel storage token = tokens[_id];\n', '        require(token.price != 0);\n', '        require(token.openTime < now);\n', '        //检查价格\n', '        require(msg.value >= token.price);\n', '        //付钱给出让转\n', '        ownerOf(_id).transfer(token.price * (100 - 2 * SALE_FEE_RATE) / 100);\n', '        //给用户分成\n', '        if (totalSupply() > 1) {\n', '            uint bonus = token.price * SALE_FEE_RATE / 100 / (totalSupply() - 1);\n', '            for (uint i = 1; i <= totalSupply(); i++) {\n', '                if (i != _id) {\n', '                    ownerOf(i).transfer(bonus);\n', '                    TransferBonus(ownerOf(i), i, bonus);\n', '                }\n', '            }\n', '        }\n', '        //转让\n', '        clearApprovalAndTransfer(ownerOf(_id), msg.sender, _id);\n', '        //价格上涨\n', '        if (token.price < 1 ether) {\n', '            token.price = token.price * RISE_RATE_FAST / 100;\n', '        } else {\n', '            token.price = token.price * RISE_RATE / 100;\n', '        }\n', '        token.lastTime = now;\n', '        return true;\n', '    }\n', '\n', '    //上架\n', '    function createByCOO(string serial, uint price, uint openTime) public onlyCOO returns (uint){\n', '        uint currentTime = now;\n', '        return __createNewToken(this, serial, currentTime, price, currentTime, openTime).id;\n', '    }\n', '\n', '    //更新未出售中的token\n', '    function updateUnsold(string serial, uint _price, uint _openTime) public onlyCOO returns (bool){\n', '        require(idOfSerial[serial] > 0);\n', '        TokenModel storage token = tokens[idOfSerial[serial]];\n', '        require(token.lastTime == token.createTime);\n', '        token.price = _price;\n', '        token.openTime = _openTime;\n', '        UnsoldUpdate(token.id, token.price, token.openTime);\n', '        return true;\n', '    }\n', '\n', '    //生成新的token\n', '    function __createNewToken(address _to, string serial, uint createTime, uint price, uint lastTime, uint openTime) private returns (TokenModel){\n', '        require(price > 0);\n', '        require(idOfSerial[serial] == 0);\n', '        uint id = totalSupply() + 1;\n', '        idOfSerial[serial] = id;\n', '        TokenModel memory s = TokenModel(id, serial, createTime, price, lastTime, openTime);\n', '        tokens[id] = s;\n', '        _mint(_to, id);\n', '        return s;\n', '    }\n', '\n', '    //根据ID得详细\n', '    function getTokenById(uint _id) public view returns (uint id, string serial, uint createTime, uint price, uint lastTime, uint openTime, address owner)\n', '    {\n', '        return (tokens[_id].id, tokens[_id].serial, tokens[_id].createTime, tokens[_id].price, tokens[_id].lastTime, tokens[_id].openTime, ownerOf(_id));\n', '    }\n', '\n', '    //获取瓜分游戏\n', '    function getCarveUpTokens() public view returns (uint[10]){\n', '        return carveUpTokens;\n', '    }\n', '\n', '    //财务提现\n', '    function withdrawContractEther(uint withdrawAmount) public onlyCFO {\n', '        uint256 balance = this.balance;\n', '        require(balance - carverUpIndex * CARVE_UP_INPUT > withdrawAmount);\n', '        cfoAddress.transfer(withdrawAmount);\n', '    }\n', '\n', '    //获取可提现金额\n', '    function withdrawAbleEther() public view onlyCFO returns (uint){\n', '        return this.balance - carverUpIndex * CARVE_UP_INPUT;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '\n', '\n', 'contract ERC721Token is ERC721 {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addToken(_to, _tokenId);\n', '    Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Burns a specific token\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n', '    if (approvedFor(_tokenId) != 0) {\n', '      clearApproval(msg.sender, _tokenId);\n', '    }\n', '    removeToken(msg.sender, _tokenId);\n', '    Transfer(msg.sender, 0x0, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract CommonEth {\n', '\n', '    //模式\n', '    enum  Modes {LIVE, TEST}\n', '\n', '    //合约当前模式\n', '    Modes public mode = Modes.LIVE;\n', '\n', '    //管理人员列表\n', '    address internal ceoAddress;\n', '    address internal cfoAddress;\n', '    address internal cooAddress;\n', '\n', '\n', '    address public newContractAddress;\n', '\n', '    event ContractUpgrade(address newContract);\n', '\n', '    function setNewAddress(address _v2Address) external onlyCEO {\n', '        newContractAddress = _v2Address;\n', '        ContractUpgrade(_v2Address);\n', '    }\n', '\n', '\n', '    //构造\n', '    function CommonEth() public {\n', '        ceoAddress = msg.sender;\n', '    }\n', '\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCOO() {\n', '        require(msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStaff() {\n', '        require(msg.sender == ceoAddress || msg.sender == cooAddress || msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManger() {\n', '        require(msg.sender == ceoAddress || msg.sender == cooAddress || msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    //合约状态检查：live状态、管理员或者测试人员不受限制\n', '    modifier onlyLiveMode() {\n', '        require(mode == Modes.LIVE || msg.sender == ceoAddress || msg.sender == cooAddress || msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    //获取自己的身份\n', '    function staffInfo() public view onlyStaff returns (bool ceo, bool coo, bool cfo, bool qa){\n', '        return (msg.sender == ceoAddress, msg.sender == cooAddress, msg.sender == cfoAddress,false);\n', '    }\n', '\n', '\n', '    //进入测试模式\n', '    function stopLive() public onlyCOO {\n', '        mode = Modes.TEST;\n', '    }\n', '\n', '    //开启LIVE模式式\n', '    function startLive() public onlyCOO {\n', '        mode = Modes.LIVE;\n', '    }\n', '\n', '    function getMangers() public view onlyManger returns (address _ceoAddress, address _cooAddress, address _cfoAddress){\n', '        return (ceoAddress, cooAddress, cfoAddress);\n', '    }\n', '\n', '    function setCEO(address _newCEO) public onlyCEO {\n', '        require(_newCEO != address(0));\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '    function setCFO(address _newCFO) public onlyCEO {\n', '        require(_newCFO != address(0));\n', '        cfoAddress = _newCFO;\n', '    }\n', '\n', '    function setCOO(address _newCOO) public onlyCEO {\n', '        require(_newCOO != address(0));\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '\n', 'contract NFToken is ERC721Token, CommonEth {\n', '    //TOKEN结构\n', '    struct TokenModel {\n', '        uint id;//id\n', '        string serial;//编号\n', '        uint createTime;\n', '        uint price;//当前价格\n', '        uint lastTime;\n', '        uint openTime;\n', '    }\n', '\n', '    //所有tokens\n', '    mapping(uint => TokenModel)  tokens;\n', '    mapping(string => uint)  idOfSerial;\n', '\n', '    //每次交易后价格上涨\n', '    uint RISE_RATE = 110;\n', '    uint RISE_RATE_FAST = 150;\n', '    //平台抽成\n', '    uint8 SALE_FEE_RATE = 2;\n', '\n', '    //瓜分活动投入\n', '    uint CARVE_UP_INPUT = 0.01 ether;\n', '    //瓜分票\n', '    uint[10] carveUpTokens = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n', '    uint8 carverUpIndex = 0;\n', '\n', '    function NFToken() {\n', '        setCFO(msg.sender);\n', '        setCOO(msg.sender);\n', '    }\n', '\n', '    //默认方法\n', '    function() external payable {\n', '\n', '    }\n', '\n', '    //交易分红\n', '    event TransferBonus(address indexed _to, uint256 _tokenId, uint _bonus);\n', '    //未交易卡更新\n', '    event UnsoldUpdate(uint256 indexed _tokenId, uint price, uint openTime);\n', '    //加入瓜分\n', '    event JoinCarveUp(address indexed _account, uint _tokenId, uint _input);\n', '    //瓜分分红\n', '    event CarveUpBonus(address indexed _account, uint _tokenId, uint _bonus);\n', '    //event CarveUpDone(uint _t, uint _t0, uint _t1, uint _t2, uint _t3, uint _t4, uint _t5, uint _t6, uint _t7, uint _t8, uint _t9);\n', '\n', '    //加入瓜分活动\n', '    function joinCarveUpTen(uint _tokenId) public payable onlyLiveMode onlyOwnerOf(_tokenId) returns (bool){\n', '        //确认投入金额\n', '        require(msg.value == CARVE_UP_INPUT);\n', '        //确认 这张卡的本轮只用一次\n', '        for (uint8 i = 0; i < carverUpIndex; i++) {\n', '            require(carveUpTokens[i] != _tokenId);\n', '        }\n', '        //按当前索引进入队列\n', '        carveUpTokens[carverUpIndex] = _tokenId;\n', '\n', '        //日志&事件\n', '        JoinCarveUp(msg.sender, _tokenId, msg.value);\n', '        //第10人出现,结算了\n', '        if (carverUpIndex % 10 == 9) {\n', '            //索引归0\n', '            carverUpIndex = 0;\n', '            uint theLoserIndex = (now % 10 + (now / 10 % 10) + (now / 100 % 10) + (now / 1000 % 10)) % 10;\n', '            for (uint8 j = 0; j < 10; j++) {\n', '                if (j != theLoserIndex) {\n', '                    uint bonus = CARVE_UP_INPUT * 110 / 100;\n', '                    ownerOf(carveUpTokens[j]).transfer(bonus);\n', '                    CarveUpBonus(ownerOf(carveUpTokens[j]), carveUpTokens[j], bonus);\n', '                }else{\n', '                    CarveUpBonus(ownerOf(carveUpTokens[j]), carveUpTokens[j], 0);\n', '                }\n', '            }\n', '            //日志&事件\n', '            //CarveUpDone(theLoserIndex, carveUpTokens[0], carveUpTokens[1], carveUpTokens[2], carveUpTokens[3], carveUpTokens[4], carveUpTokens[5], carveUpTokens[6], carveUpTokens[7], carveUpTokens[8], carveUpTokens[9]);\n', '            carveUpTokens = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n', '        } else {\n', '            carverUpIndex++;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // 买入【其它人可以以等于或高于当前价格买入，交易过程平台收取交易价格抽成2%，每次交易后价格上涨】\n', '    function buy(uint _id) public payable onlyLiveMode returns (bool){\n', '        TokenModel storage token = tokens[_id];\n', '        require(token.price != 0);\n', '        require(token.openTime < now);\n', '        //检查价格\n', '        require(msg.value >= token.price);\n', '        //付钱给出让转\n', '        ownerOf(_id).transfer(token.price * (100 - 2 * SALE_FEE_RATE) / 100);\n', '        //给用户分成\n', '        if (totalSupply() > 1) {\n', '            uint bonus = token.price * SALE_FEE_RATE / 100 / (totalSupply() - 1);\n', '            for (uint i = 1; i <= totalSupply(); i++) {\n', '                if (i != _id) {\n', '                    ownerOf(i).transfer(bonus);\n', '                    TransferBonus(ownerOf(i), i, bonus);\n', '                }\n', '            }\n', '        }\n', '        //转让\n', '        clearApprovalAndTransfer(ownerOf(_id), msg.sender, _id);\n', '        //价格上涨\n', '        if (token.price < 1 ether) {\n', '            token.price = token.price * RISE_RATE_FAST / 100;\n', '        } else {\n', '            token.price = token.price * RISE_RATE / 100;\n', '        }\n', '        token.lastTime = now;\n', '        return true;\n', '    }\n', '\n', '    //上架\n', '    function createByCOO(string serial, uint price, uint openTime) public onlyCOO returns (uint){\n', '        uint currentTime = now;\n', '        return __createNewToken(this, serial, currentTime, price, currentTime, openTime).id;\n', '    }\n', '\n', '    //更新未出售中的token\n', '    function updateUnsold(string serial, uint _price, uint _openTime) public onlyCOO returns (bool){\n', '        require(idOfSerial[serial] > 0);\n', '        TokenModel storage token = tokens[idOfSerial[serial]];\n', '        require(token.lastTime == token.createTime);\n', '        token.price = _price;\n', '        token.openTime = _openTime;\n', '        UnsoldUpdate(token.id, token.price, token.openTime);\n', '        return true;\n', '    }\n', '\n', '    //生成新的token\n', '    function __createNewToken(address _to, string serial, uint createTime, uint price, uint lastTime, uint openTime) private returns (TokenModel){\n', '        require(price > 0);\n', '        require(idOfSerial[serial] == 0);\n', '        uint id = totalSupply() + 1;\n', '        idOfSerial[serial] = id;\n', '        TokenModel memory s = TokenModel(id, serial, createTime, price, lastTime, openTime);\n', '        tokens[id] = s;\n', '        _mint(_to, id);\n', '        return s;\n', '    }\n', '\n', '    //根据ID得详细\n', '    function getTokenById(uint _id) public view returns (uint id, string serial, uint createTime, uint price, uint lastTime, uint openTime, address owner)\n', '    {\n', '        return (tokens[_id].id, tokens[_id].serial, tokens[_id].createTime, tokens[_id].price, tokens[_id].lastTime, tokens[_id].openTime, ownerOf(_id));\n', '    }\n', '\n', '    //获取瓜分游戏\n', '    function getCarveUpTokens() public view returns (uint[10]){\n', '        return carveUpTokens;\n', '    }\n', '\n', '    //财务提现\n', '    function withdrawContractEther(uint withdrawAmount) public onlyCFO {\n', '        uint256 balance = this.balance;\n', '        require(balance - carverUpIndex * CARVE_UP_INPUT > withdrawAmount);\n', '        cfoAddress.transfer(withdrawAmount);\n', '    }\n', '\n', '    //获取可提现金额\n', '    function withdrawAbleEther() public view onlyCFO returns (uint){\n', '        return this.balance - carverUpIndex * CARVE_UP_INPUT;\n', '    }\n', '}']
