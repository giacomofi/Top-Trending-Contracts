['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations that are safe for uint256 against overflow and negative values\n', ' * @dev https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '} \n', '\n', '\n', '\n', '/**\n', ' * @title Moderated\n', ' * @dev restricts execution of &#39;onlyModerator&#39; modified functions to the contract moderator\n', ' * @dev restricts execution of &#39;ifUnrestricted&#39; modified functions to when unrestricted \n', ' *      boolean state is true\n', ' * @dev allows for the extraction of ether or other ERC20 tokens mistakenly sent to this address\n', ' */\n', 'contract Moderated {\n', '    \n', '    address public moderator;\n', '    \n', '    bool public unrestricted;\n', '    \n', '    modifier onlyModerator {\n', '        require(msg.sender == moderator);\n', '        _;\n', '    }\n', '    \n', '    modifier ifUnrestricted {\n', '        require(unrestricted);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyPayloadSize(uint256 numWords) {\n', '        assert(msg.data.length >= numWords * 32 + 4);\n', '        _;\n', '    }    \n', '    \n', '    function Moderated() public {\n', '        moderator = msg.sender;\n', '        unrestricted = true;\n', '    }\n', '    \n', '    function reassignModerator(address newModerator) public onlyModerator {\n', '        moderator = newModerator;\n', '    }\n', '    \n', '    function restrict() public onlyModerator {\n', '        unrestricted = false;\n', '    }\n', '    \n', '    function unrestrict() public onlyModerator {\n', '        unrestricted = true;\n', '    }  \n', '    \n', '    /// This method can be used to extract tokens mistakenly sent to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    function extract(address _token) public returns (bool) {\n', '        require(_token != address(0x0));\n', '        Token token = Token(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        return token.transfer(moderator, balance);\n', '    }\n', '    \n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(_addr) }\n', '        return (size > 0);\n', '    }  \n', '    \n', '    function getModerator() public view returns (address) {\n', '        return moderator;\n', '    }\n', '} \n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token { \n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);    \n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);    \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);    \n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// @dev Assign moderation of contract to CrowdSale\n', '\n', 'contract LEON is Moderated {\t\n', '\tusing SafeMath for uint256;\n', '\n', '\t\tstring public name = "LEONS Coin";\t\n', '\t\tstring public symbol = "LEONS";\t\t\t\n', '\t\tuint8 public decimals = 18;\n', '\t\t\n', '\t\tmapping(address => uint256) internal balances;\n', '\t\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\t\tuint256 internal totalSupply_;\n', '\n', '\t\t// the maximum number of LEONS there may exist is capped at 200 million tokens\n', '\t\tuint256 public constant maximumTokenIssue = 200000000 * 10**18;\n', '\t\t\n', '\t\tevent Approval(address indexed owner, address indexed spender, uint256 value); \n', '\t\tevent Transfer(address indexed from, address indexed to, uint256 value);\t\t\n', '\n', '\t\t/**\n', '\t\t* @dev total number of tokens in existence\n', '\t\t*/\n', '\t\tfunction totalSupply() public view returns (uint256) {\n', '\t\t\treturn totalSupply_;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev transfer token for a specified address\n', '\t\t* @param _to The address to transfer to.\n', '\t\t* @param _value The amount to be transferred.\n', '\t\t*/\n', '\t\tfunction transfer(address _to, uint256 _value) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\n', '\t\t    return _transfer(msg.sender, _to, _value);\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Transfer tokens from one address to another\n', '\t\t* @param _from address The address which you want to send tokens from\n', '\t\t* @param _to address The address which you want to transfer to\n', '\t\t* @param _value uint256 the amount of tokens to be transferred\n', '\t\t*/\n', '\t\tfunction transferFrom(address _from, address _to, uint256 _value) public ifUnrestricted onlyPayloadSize(3) returns (bool) {\n', '\t\t    require(_value <= allowed[_from][msg.sender]);\n', '\t\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\t    return _transfer(_from, _to, _value);\n', '\t\t}\t\t\n', '\n', '\t\tfunction _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '\t\t\t// Do not allow transfers to 0x0 or to this contract\n', '\t\t\trequire(_to != address(0x0) && _to != address(this));\n', '\t\t\t// Do not allow transfer of value greater than sender&#39;s current balance\n', '\t\t\trequire(_value <= balances[_from]);\n', '\t\t\t// Update balance of sending address\n', '\t\t\tbalances[_from] = balances[_from].sub(_value);\t\n', '\t\t\t// Update balance of receiving address\n', '\t\t\tbalances[_to] = balances[_to].add(_value);\t\t\n', '\t\t\t// An event to make the transfer easy to find on the blockchain\n', '\t\t\tTransfer(_from, _to, _value);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Gets the balance of the specified address.\n', '\t\t* @param _owner The address to query the the balance of.\n', '\t\t* @return An uint256 representing the amount owned by the passed address.\n', '\t\t*/\n', '\t\tfunction balanceOf(address _owner) public view returns (uint256) {\n', '\t\t\treturn balances[_owner];\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t\t*\n', '\t\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '\t\t* race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '\t\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\t* @param _spender The address which will spend the funds.\n', '\t\t* @param _value The amount of tokens to be spent.\n', '\t\t*/\n', '\t\tfunction approve(address _spender, uint256 _value) public ifUnrestricted onlyPayloadSize(2) returns (bool sucess) {\n', '\t\t\t// Can only approve when value has not already been set or is zero\n', '\t\t\trequire(allowed[msg.sender][_spender] == 0 || _value == 0);\n', '\t\t\tallowed[msg.sender][_spender] = _value;\n', '\t\t\tApproval(msg.sender, _spender, _value);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t\t* @param _owner address The address which owns the funds.\n', '\t\t* @param _spender address The address which will spend the funds.\n', '\t\t* @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t\t*/\n', '\t\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\t\treturn allowed[_owner][_spender];\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t\t*\n', '\t\t* approve should be called when allowed[_spender] == 0. To increment\n', '\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t\t* the first transaction is mined)\n', '\t\t* From MonolithDAO Token.sol\n', '\t\t* @param _spender The address which will spend the funds.\n', '\t\t* @param _addedValue The amount of tokens to increase the allowance by.\n', '\t\t*/\n', '\t\tfunction increaseApproval(address _spender, uint256 _addedValue) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\n', '\t\t\trequire(_addedValue > 0);\n', '\t\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t\t*\n', '\t\t* approve should be called when allowed[_spender] == 0. To decrement\n', '\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t\t* the first transaction is mined)\n', '\t\t* From MonolithDAO Token.sol\n', '\t\t* @param _spender The address which will spend the funds.\n', '\t\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t\t*/\n', '\t\tfunction decreaseApproval(address _spender, uint256 _subtractedValue) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\n', '\t\t\tuint256 oldValue = allowed[msg.sender][_spender];\n', '\t\t\trequire(_subtractedValue > 0);\n', '\t\t\tif (_subtractedValue > oldValue) {\n', '\t\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t\t} else {\n', '\t\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t\t}\n', '\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Function to mint tokens\n', '\t\t* @param _to The address that will receive the minted tokens.\n', '\t\t* @param _amount The amount of tokens to mint.\n', '\t\t* @return A boolean that indicates if the operation was successful.\n', '\t\t*/\n', '\t\tfunction generateTokens(address _to, uint _amount) public onlyModerator returns (bool) {\n', '\t\t    require(isContract(moderator));\n', '\t\t\trequire(totalSupply_.add(_amount) <= maximumTokenIssue);\n', '\t\t\ttotalSupply_ = totalSupply_.add(_amount);\n', '\t\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\t\tTransfer(address(0x0), _to, _amount);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t\t/**\n', '\t\t* @dev fallback function - reverts transaction\n', '\t\t*/\t\t\n', '    \tfunction () external payable {\n', '    \t    revert();\n', '    \t}\t\t\n', '}\n', '\n', '\n', 'contract CrowdSale is Moderated {\n', '    using SafeMath for uint256;\n', '    \n', '    // LEON ERC20 smart contract\n', '    LEON public tokenContract;\n', '    \n', '    // crowdsale aims to sell at least 10 000 000 LEONS\n', '    uint256 public constant crowdsaleTarget = 10000000 * 10**18;\n', '    // running total of LEONS sold\n', '    uint256 public tokensSold;\n', '    // running total of ether raised\n', '    uint256 public weiRaised;\n', '\n', '    // 1 Ether buys 13 000 LEONS\n', '    uint256 public constant etherToLEONRate = 13000;\n', '    // address to receive ether \n', '    address public constant etherVault = 0xD8d97E3B5dB13891e082F00ED3fe9A0BC6B7eA01;    \n', '    // address to store bounty allocation\n', '    address public constant bountyVault = 0x96B083a253A90e321fb9F53645483745630be952;\n', '    // vesting contract to store team allocation\n', '    VestingVault public vestingContract;\n', '    // minimum of 1 ether to participate in crowdsale\n', '    uint256 constant purchaseMinimum = 1 ether;\n', '    // maximum of 65 ether \n', '    uint256 constant purchaseMaximum = 65 ether;\n', '    \n', '    // boolean to indicate crowdsale finalized state    \n', '    bool public isFinalized;\n', '    // boolean to indicate crowdsale is actively accepting ether\n', '    bool public active;\n', '    \n', '    // mapping of whitelisted participants\n', '    mapping (address => bool) internal whitelist;   \n', '    \n', '    // finalization event\n', '    event Finalized(uint256 sales, uint256 raised);\n', '    // purchase event\n', '    event Purchased(address indexed purchaser, uint256 tokens, uint256 totsales, uint256 ethraised);\n', '    // whitelisting event\n', '    event Whitelisted(address indexed participant);\n', '    // revocation of whitelisting event\n', '    event Revoked(address indexed participant);\n', '    \n', '    // limits purchase to whitelisted participants only\n', '    modifier onlyWhitelist {\n', '        require(whitelist[msg.sender]);\n', '        _;\n', '    }\n', '    // purchase while crowdsale is live only   \n', '    modifier whileActive {\n', '        require(active);\n', '        _;\n', '    }\n', '    \n', '    // constructor\n', '    // @param _tokenAddr, the address of the deployed LEON token\n', '    function CrowdSale(address _tokenAddr) public {\n', '        tokenContract = LEON(_tokenAddr);\n', '    }   \n', '\n', '    // fallback function invokes buyTokens method\n', '    function() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '    // forwards ether received to refund vault and generates tokens for purchaser\n', '    function buyTokens(address _purchaser) public payable ifUnrestricted onlyWhitelist whileActive {\n', '        // purchase value must be between 10 Ether and 65 Ether\n', '        require(msg.value > purchaseMinimum && msg.value < purchaseMaximum);\n', '        // transfer ether to the ether vault\n', '        etherVault.transfer(msg.value);\n', '        // increment wei raised total\n', '        weiRaised = weiRaised.add(msg.value);\n', '        // 1 ETHER buys 13 000 LEONS\n', '        uint256 _tokens = (msg.value).mul(etherToLEONRate); \n', '        // mint tokens into purchaser address\n', '        require(tokenContract.generateTokens(_purchaser, _tokens));\n', '        // increment token sales total\n', '        tokensSold = tokensSold.add(_tokens);\n', '        // emit purchase event\n', '        Purchased(_purchaser, _tokens, tokensSold, weiRaised);\n', '    }\n', '    \n', '    function initialize() external onlyModerator {\n', '        // cannot have been finalized nor previously activated\n', '        require(!isFinalized && !active);\n', '        // check that this contract address is the moderator of the token contract\n', '        require(tokenContract.getModerator() == address(this));\n', '        // restrict trading\n', '        tokenContract.restrict();\n', '        // set crowd sale to active state\n', '        active = true;\n', '    }\n', '    \n', '    // close sale and allocate bounty and team tokens\n', '    function finalize() external onlyModerator {\n', '        // cannot have been finalized and must be in active state\n', '        require(!isFinalized && active);\n', '        // calculate team allocation (45% of total supply)\n', '        uint256 teamAllocation = tokensSold.mul(9000).div(10000);\n', '        // calculate bounty allocation (5% of total supply)\n', '        uint256 bountyAllocation = tokensSold.sub(teamAllocation);\n', '        // spawn new vesting contract, time of release in six months from present date\n', '        vestingContract = new VestingVault(address(tokenContract), etherVault, (block.timestamp + 26 weeks));\n', '        // generate team allocation\n', '        require(tokenContract.generateTokens(address(vestingContract), teamAllocation));\n', '        // generate bounty tokens\n', '        require(tokenContract.generateTokens(bountyVault, bountyAllocation));\n', '        // emit finalized event\n', '        Finalized(tokensSold, weiRaised);\n', '        // set state to finalized\n', '        isFinalized = true;\n', '        // deactivate crowdsale\n', '        active = false;\n', '    }\n', '    \n', '    // reassign LEON token to the subsequent ICO smart contract\n', '    function migrate(address _moderator) external onlyModerator {\n', '        // only after finalization\n', '        require(isFinalized);\n', '        // can only reassign moderator privelege to another contract\n', '        require(isContract(_moderator));\n', '        // reassign moderator role\n', '        tokenContract.reassignModerator(_moderator);    \n', '    }\n', '    \n', '    // add address to whitelist\n', '    function verifyParticipant(address participant) external onlyModerator {\n', '        // whitelist the address\n', '        whitelist[participant] = true;\n', '        // emit whitelisted event\n', '        Whitelisted(participant);\n', '    }\n', '    \n', '    // remove address from whitelist\n', '    function revokeParticipation(address participant) external onlyModerator {\n', '        // remove address from whitelist\n', '        whitelist[participant] = false;\n', '        // emit revoked event\n', '        Revoked(participant);\n', '    }\n', '    \n', '    // check if an address is whitelisted\n', '    function checkParticipantStatus(address participant) external view returns (bool whitelisted) {\n', '        return whitelist[participant];\n', '    }\n', '}   \n', '\n', '// Vesting contract to lock team allocation\n', 'contract VestingVault {\n', '\n', '    // reference to LEON smart contract\n', '    LEON public tokenContract; \n', '    // address to which the tokens are released\n', '    address public beneficiary;\n', '    // time upon which tokens may be released\n', '    uint256 public releaseDate;\n', '    \n', '    // constructor takes LEON token address, etherVault address and current time + 6 months as parameters\n', '    function VestingVault(address _token, address _beneficiary, uint256 _time) public {\n', '        tokenContract = LEON(_token);\n', '        beneficiary = _beneficiary;\n', '        releaseDate = _time;\n', '    }\n', '    \n', '    // check token balance in this contract\n', '    function checkBalance() constant public returns (uint256 tokenBalance) {\n', '        return tokenContract.balanceOf(this);\n', '    }\n', '\n', '    // function to release tokens to beneficiary address\n', '    function claim() external {\n', '        // can only be invoked by beneficiary\n', '        require(msg.sender == beneficiary);\n', '        // can only be invoked at maturity of vesting period\n', '        require(block.timestamp > releaseDate);\n', '        // compute current balance\n', '        uint256 balance = tokenContract.balanceOf(this);\n', '        // transfer tokens to beneficary\n', '        tokenContract.transfer(beneficiary, balance);\n', '    }\n', '    \n', '    // change the beneficary address\n', '    function changeBeneficiary(address _newBeneficiary) external {\n', '        // can only be changed by current beneficary\n', '        require(msg.sender == beneficiary);\n', '        // assign to new beneficiary\n', '        beneficiary = _newBeneficiary;\n', '    }\n', '    \n', '    /// This method can be used to extract tokens mistakenly sent to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    function extract(address _token) public returns (bool) {\n', '        require(_token != address(0x0) || _token != address(tokenContract));\n', '        Token token = Token(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        return token.transfer(beneficiary, balance);\n', '    }   \n', '    \n', '    function() external payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations that are safe for uint256 against overflow and negative values\n', ' * @dev https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', ' */\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '} \n', '\n', '\n', '\n', '/**\n', ' * @title Moderated\n', " * @dev restricts execution of 'onlyModerator' modified functions to the contract moderator\n", " * @dev restricts execution of 'ifUnrestricted' modified functions to when unrestricted \n", ' *      boolean state is true\n', ' * @dev allows for the extraction of ether or other ERC20 tokens mistakenly sent to this address\n', ' */\n', 'contract Moderated {\n', '    \n', '    address public moderator;\n', '    \n', '    bool public unrestricted;\n', '    \n', '    modifier onlyModerator {\n', '        require(msg.sender == moderator);\n', '        _;\n', '    }\n', '    \n', '    modifier ifUnrestricted {\n', '        require(unrestricted);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyPayloadSize(uint256 numWords) {\n', '        assert(msg.data.length >= numWords * 32 + 4);\n', '        _;\n', '    }    \n', '    \n', '    function Moderated() public {\n', '        moderator = msg.sender;\n', '        unrestricted = true;\n', '    }\n', '    \n', '    function reassignModerator(address newModerator) public onlyModerator {\n', '        moderator = newModerator;\n', '    }\n', '    \n', '    function restrict() public onlyModerator {\n', '        unrestricted = false;\n', '    }\n', '    \n', '    function unrestrict() public onlyModerator {\n', '        unrestricted = true;\n', '    }  \n', '    \n', '    /// This method can be used to extract tokens mistakenly sent to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    function extract(address _token) public returns (bool) {\n', '        require(_token != address(0x0));\n', '        Token token = Token(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        return token.transfer(moderator, balance);\n', '    }\n', '    \n', '    function isContract(address _addr) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(_addr) }\n', '        return (size > 0);\n', '    }  \n', '    \n', '    function getModerator() public view returns (address) {\n', '        return moderator;\n', '    }\n', '} \n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract Token { \n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);    \n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);    \n', '    event Approval(address indexed owner, address indexed spender, uint256 value);    \n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// @dev Assign moderation of contract to CrowdSale\n', '\n', 'contract LEON is Moderated {\t\n', '\tusing SafeMath for uint256;\n', '\n', '\t\tstring public name = "LEONS Coin";\t\n', '\t\tstring public symbol = "LEONS";\t\t\t\n', '\t\tuint8 public decimals = 18;\n', '\t\t\n', '\t\tmapping(address => uint256) internal balances;\n', '\t\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\t\tuint256 internal totalSupply_;\n', '\n', '\t\t// the maximum number of LEONS there may exist is capped at 200 million tokens\n', '\t\tuint256 public constant maximumTokenIssue = 200000000 * 10**18;\n', '\t\t\n', '\t\tevent Approval(address indexed owner, address indexed spender, uint256 value); \n', '\t\tevent Transfer(address indexed from, address indexed to, uint256 value);\t\t\n', '\n', '\t\t/**\n', '\t\t* @dev total number of tokens in existence\n', '\t\t*/\n', '\t\tfunction totalSupply() public view returns (uint256) {\n', '\t\t\treturn totalSupply_;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev transfer token for a specified address\n', '\t\t* @param _to The address to transfer to.\n', '\t\t* @param _value The amount to be transferred.\n', '\t\t*/\n', '\t\tfunction transfer(address _to, uint256 _value) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\n', '\t\t    return _transfer(msg.sender, _to, _value);\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Transfer tokens from one address to another\n', '\t\t* @param _from address The address which you want to send tokens from\n', '\t\t* @param _to address The address which you want to transfer to\n', '\t\t* @param _value uint256 the amount of tokens to be transferred\n', '\t\t*/\n', '\t\tfunction transferFrom(address _from, address _to, uint256 _value) public ifUnrestricted onlyPayloadSize(3) returns (bool) {\n', '\t\t    require(_value <= allowed[_from][msg.sender]);\n', '\t\t    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\t    return _transfer(_from, _to, _value);\n', '\t\t}\t\t\n', '\n', '\t\tfunction _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '\t\t\t// Do not allow transfers to 0x0 or to this contract\n', '\t\t\trequire(_to != address(0x0) && _to != address(this));\n', "\t\t\t// Do not allow transfer of value greater than sender's current balance\n", '\t\t\trequire(_value <= balances[_from]);\n', '\t\t\t// Update balance of sending address\n', '\t\t\tbalances[_from] = balances[_from].sub(_value);\t\n', '\t\t\t// Update balance of receiving address\n', '\t\t\tbalances[_to] = balances[_to].add(_value);\t\t\n', '\t\t\t// An event to make the transfer easy to find on the blockchain\n', '\t\t\tTransfer(_from, _to, _value);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Gets the balance of the specified address.\n', '\t\t* @param _owner The address to query the the balance of.\n', '\t\t* @return An uint256 representing the amount owned by the passed address.\n', '\t\t*/\n', '\t\tfunction balanceOf(address _owner) public view returns (uint256) {\n', '\t\t\treturn balances[_owner];\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t\t*\n', '\t\t* Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t\t* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "\t\t* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '\t\t* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t\t* @param _spender The address which will spend the funds.\n', '\t\t* @param _value The amount of tokens to be spent.\n', '\t\t*/\n', '\t\tfunction approve(address _spender, uint256 _value) public ifUnrestricted onlyPayloadSize(2) returns (bool sucess) {\n', '\t\t\t// Can only approve when value has not already been set or is zero\n', '\t\t\trequire(allowed[msg.sender][_spender] == 0 || _value == 0);\n', '\t\t\tallowed[msg.sender][_spender] = _value;\n', '\t\t\tApproval(msg.sender, _spender, _value);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t\t* @param _owner address The address which owns the funds.\n', '\t\t* @param _spender address The address which will spend the funds.\n', '\t\t* @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t\t*/\n', '\t\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\t\treturn allowed[_owner][_spender];\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t\t*\n', '\t\t* approve should be called when allowed[_spender] == 0. To increment\n', '\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t\t* the first transaction is mined)\n', '\t\t* From MonolithDAO Token.sol\n', '\t\t* @param _spender The address which will spend the funds.\n', '\t\t* @param _addedValue The amount of tokens to increase the allowance by.\n', '\t\t*/\n', '\t\tfunction increaseApproval(address _spender, uint256 _addedValue) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\n', '\t\t\trequire(_addedValue > 0);\n', '\t\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t\t*\n', '\t\t* approve should be called when allowed[_spender] == 0. To decrement\n', '\t\t* allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t\t* the first transaction is mined)\n', '\t\t* From MonolithDAO Token.sol\n', '\t\t* @param _spender The address which will spend the funds.\n', '\t\t* @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t\t*/\n', '\t\tfunction decreaseApproval(address _spender, uint256 _subtractedValue) public ifUnrestricted onlyPayloadSize(2) returns (bool) {\n', '\t\t\tuint256 oldValue = allowed[msg.sender][_spender];\n', '\t\t\trequire(_subtractedValue > 0);\n', '\t\t\tif (_subtractedValue > oldValue) {\n', '\t\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t\t} else {\n', '\t\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t\t}\n', '\t\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\t\treturn true;\n', '\t\t}\n', '\n', '\t\t/**\n', '\t\t* @dev Function to mint tokens\n', '\t\t* @param _to The address that will receive the minted tokens.\n', '\t\t* @param _amount The amount of tokens to mint.\n', '\t\t* @return A boolean that indicates if the operation was successful.\n', '\t\t*/\n', '\t\tfunction generateTokens(address _to, uint _amount) public onlyModerator returns (bool) {\n', '\t\t    require(isContract(moderator));\n', '\t\t\trequire(totalSupply_.add(_amount) <= maximumTokenIssue);\n', '\t\t\ttotalSupply_ = totalSupply_.add(_amount);\n', '\t\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\t\tTransfer(address(0x0), _to, _amount);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t\t/**\n', '\t\t* @dev fallback function - reverts transaction\n', '\t\t*/\t\t\n', '    \tfunction () external payable {\n', '    \t    revert();\n', '    \t}\t\t\n', '}\n', '\n', '\n', 'contract CrowdSale is Moderated {\n', '    using SafeMath for uint256;\n', '    \n', '    // LEON ERC20 smart contract\n', '    LEON public tokenContract;\n', '    \n', '    // crowdsale aims to sell at least 10 000 000 LEONS\n', '    uint256 public constant crowdsaleTarget = 10000000 * 10**18;\n', '    // running total of LEONS sold\n', '    uint256 public tokensSold;\n', '    // running total of ether raised\n', '    uint256 public weiRaised;\n', '\n', '    // 1 Ether buys 13 000 LEONS\n', '    uint256 public constant etherToLEONRate = 13000;\n', '    // address to receive ether \n', '    address public constant etherVault = 0xD8d97E3B5dB13891e082F00ED3fe9A0BC6B7eA01;    \n', '    // address to store bounty allocation\n', '    address public constant bountyVault = 0x96B083a253A90e321fb9F53645483745630be952;\n', '    // vesting contract to store team allocation\n', '    VestingVault public vestingContract;\n', '    // minimum of 1 ether to participate in crowdsale\n', '    uint256 constant purchaseMinimum = 1 ether;\n', '    // maximum of 65 ether \n', '    uint256 constant purchaseMaximum = 65 ether;\n', '    \n', '    // boolean to indicate crowdsale finalized state    \n', '    bool public isFinalized;\n', '    // boolean to indicate crowdsale is actively accepting ether\n', '    bool public active;\n', '    \n', '    // mapping of whitelisted participants\n', '    mapping (address => bool) internal whitelist;   \n', '    \n', '    // finalization event\n', '    event Finalized(uint256 sales, uint256 raised);\n', '    // purchase event\n', '    event Purchased(address indexed purchaser, uint256 tokens, uint256 totsales, uint256 ethraised);\n', '    // whitelisting event\n', '    event Whitelisted(address indexed participant);\n', '    // revocation of whitelisting event\n', '    event Revoked(address indexed participant);\n', '    \n', '    // limits purchase to whitelisted participants only\n', '    modifier onlyWhitelist {\n', '        require(whitelist[msg.sender]);\n', '        _;\n', '    }\n', '    // purchase while crowdsale is live only   \n', '    modifier whileActive {\n', '        require(active);\n', '        _;\n', '    }\n', '    \n', '    // constructor\n', '    // @param _tokenAddr, the address of the deployed LEON token\n', '    function CrowdSale(address _tokenAddr) public {\n', '        tokenContract = LEON(_tokenAddr);\n', '    }   \n', '\n', '    // fallback function invokes buyTokens method\n', '    function() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '    // forwards ether received to refund vault and generates tokens for purchaser\n', '    function buyTokens(address _purchaser) public payable ifUnrestricted onlyWhitelist whileActive {\n', '        // purchase value must be between 10 Ether and 65 Ether\n', '        require(msg.value > purchaseMinimum && msg.value < purchaseMaximum);\n', '        // transfer ether to the ether vault\n', '        etherVault.transfer(msg.value);\n', '        // increment wei raised total\n', '        weiRaised = weiRaised.add(msg.value);\n', '        // 1 ETHER buys 13 000 LEONS\n', '        uint256 _tokens = (msg.value).mul(etherToLEONRate); \n', '        // mint tokens into purchaser address\n', '        require(tokenContract.generateTokens(_purchaser, _tokens));\n', '        // increment token sales total\n', '        tokensSold = tokensSold.add(_tokens);\n', '        // emit purchase event\n', '        Purchased(_purchaser, _tokens, tokensSold, weiRaised);\n', '    }\n', '    \n', '    function initialize() external onlyModerator {\n', '        // cannot have been finalized nor previously activated\n', '        require(!isFinalized && !active);\n', '        // check that this contract address is the moderator of the token contract\n', '        require(tokenContract.getModerator() == address(this));\n', '        // restrict trading\n', '        tokenContract.restrict();\n', '        // set crowd sale to active state\n', '        active = true;\n', '    }\n', '    \n', '    // close sale and allocate bounty and team tokens\n', '    function finalize() external onlyModerator {\n', '        // cannot have been finalized and must be in active state\n', '        require(!isFinalized && active);\n', '        // calculate team allocation (45% of total supply)\n', '        uint256 teamAllocation = tokensSold.mul(9000).div(10000);\n', '        // calculate bounty allocation (5% of total supply)\n', '        uint256 bountyAllocation = tokensSold.sub(teamAllocation);\n', '        // spawn new vesting contract, time of release in six months from present date\n', '        vestingContract = new VestingVault(address(tokenContract), etherVault, (block.timestamp + 26 weeks));\n', '        // generate team allocation\n', '        require(tokenContract.generateTokens(address(vestingContract), teamAllocation));\n', '        // generate bounty tokens\n', '        require(tokenContract.generateTokens(bountyVault, bountyAllocation));\n', '        // emit finalized event\n', '        Finalized(tokensSold, weiRaised);\n', '        // set state to finalized\n', '        isFinalized = true;\n', '        // deactivate crowdsale\n', '        active = false;\n', '    }\n', '    \n', '    // reassign LEON token to the subsequent ICO smart contract\n', '    function migrate(address _moderator) external onlyModerator {\n', '        // only after finalization\n', '        require(isFinalized);\n', '        // can only reassign moderator privelege to another contract\n', '        require(isContract(_moderator));\n', '        // reassign moderator role\n', '        tokenContract.reassignModerator(_moderator);    \n', '    }\n', '    \n', '    // add address to whitelist\n', '    function verifyParticipant(address participant) external onlyModerator {\n', '        // whitelist the address\n', '        whitelist[participant] = true;\n', '        // emit whitelisted event\n', '        Whitelisted(participant);\n', '    }\n', '    \n', '    // remove address from whitelist\n', '    function revokeParticipation(address participant) external onlyModerator {\n', '        // remove address from whitelist\n', '        whitelist[participant] = false;\n', '        // emit revoked event\n', '        Revoked(participant);\n', '    }\n', '    \n', '    // check if an address is whitelisted\n', '    function checkParticipantStatus(address participant) external view returns (bool whitelisted) {\n', '        return whitelist[participant];\n', '    }\n', '}   \n', '\n', '// Vesting contract to lock team allocation\n', 'contract VestingVault {\n', '\n', '    // reference to LEON smart contract\n', '    LEON public tokenContract; \n', '    // address to which the tokens are released\n', '    address public beneficiary;\n', '    // time upon which tokens may be released\n', '    uint256 public releaseDate;\n', '    \n', '    // constructor takes LEON token address, etherVault address and current time + 6 months as parameters\n', '    function VestingVault(address _token, address _beneficiary, uint256 _time) public {\n', '        tokenContract = LEON(_token);\n', '        beneficiary = _beneficiary;\n', '        releaseDate = _time;\n', '    }\n', '    \n', '    // check token balance in this contract\n', '    function checkBalance() constant public returns (uint256 tokenBalance) {\n', '        return tokenContract.balanceOf(this);\n', '    }\n', '\n', '    // function to release tokens to beneficiary address\n', '    function claim() external {\n', '        // can only be invoked by beneficiary\n', '        require(msg.sender == beneficiary);\n', '        // can only be invoked at maturity of vesting period\n', '        require(block.timestamp > releaseDate);\n', '        // compute current balance\n', '        uint256 balance = tokenContract.balanceOf(this);\n', '        // transfer tokens to beneficary\n', '        tokenContract.transfer(beneficiary, balance);\n', '    }\n', '    \n', '    // change the beneficary address\n', '    function changeBeneficiary(address _newBeneficiary) external {\n', '        // can only be changed by current beneficary\n', '        require(msg.sender == beneficiary);\n', '        // assign to new beneficiary\n', '        beneficiary = _newBeneficiary;\n', '    }\n', '    \n', '    /// This method can be used to extract tokens mistakenly sent to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    function extract(address _token) public returns (bool) {\n', '        require(_token != address(0x0) || _token != address(tokenContract));\n', '        Token token = Token(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        return token.transfer(beneficiary, balance);\n', '    }   \n', '    \n', '    function() external payable {\n', '        revert();\n', '    }\n', '}']
