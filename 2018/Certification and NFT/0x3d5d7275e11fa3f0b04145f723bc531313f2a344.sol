['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', '* @title TuurntToken \n', '* @dev The TuurntToken contract contains the information about \n', '* Tuurnt token.\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract TuurntToken is StandardToken, DetailedERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // distribution variables\n', '    uint256 public tokenAllocToTeam;\n', '    uint256 public tokenAllocToCrowdsale;\n', '    uint256 public tokenAllocToCompany;\n', '\n', '    // addresses\n', '    address public crowdsaleAddress;\n', '    address public teamAddress;\n', '    address public companyAddress;\n', '    \n', '\n', '    /**\n', '    * @dev The TuurntToken constructor set the orginal crowdsaleAddress,teamAddress and companyAddress and allocate the\n', '    * tokens to them.\n', '    * @param _crowdsaleAddress The address of crowsale contract\n', '    * @param _teamAddress The address of team\n', '    * @param _companyAddress The address of company \n', '    */\n', '\n', '    constructor(address _crowdsaleAddress, address _teamAddress, address _companyAddress, string _name, string _symbol, uint8 _decimals) public \n', '        DetailedERC20(_name, _symbol, _decimals)\n', '    {\n', '        require(_crowdsaleAddress != address(0));\n', '        require(_teamAddress != address(0));\n', '        require(_companyAddress != address(0));\n', '        totalSupply_ = 500000000 * 10 ** 18;\n', '        tokenAllocToTeam = (totalSupply_.mul(33)).div(100);     // 33 % Allocation\n', '        tokenAllocToCompany = (totalSupply_.mul(33)).div(100);  // 33 % Allocation \n', '        tokenAllocToCrowdsale = (totalSupply_.mul(34)).div(100);// 34 % Allocation\n', '\n', '        // Address      \n', '        crowdsaleAddress = _crowdsaleAddress;\n', '        teamAddress = _teamAddress;\n', '        companyAddress = _companyAddress;\n', '        \n', '\n', '        // Allocations\n', '        balances[crowdsaleAddress] = tokenAllocToCrowdsale;\n', '        balances[companyAddress] = tokenAllocToCompany;\n', '        balances[teamAddress] = tokenAllocToTeam; \n', '       \n', '        //transfer event\n', '        emit Transfer(address(0), crowdsaleAddress, tokenAllocToCrowdsale);\n', '        emit Transfer(address(0), companyAddress, tokenAllocToCompany);\n', '        emit Transfer(address(0), teamAddress, tokenAllocToTeam);\n', '       \n', '        \n', '    }  \n', '}\n', '\n', 'contract WhitelistInterface {\n', '    function checkWhitelist(address _whiteListAddress) public view returns(bool);\n', '}\n', '\n', '/**\n', '* @title TuurntCrowdsale\n', '* @dev The Crowdsale contract holds the token for the public sale of token and \n', '* contains the function to buy token.  \n', '*/\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TuurntCrowdsale is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    TuurntToken public token;\n', '    WhitelistInterface public whitelist;\n', '\n', '    //variable declaration\n', '    uint256 public MIN_INVESTMENT = 0.2 ether;\n', '    uint256 public ethRaised;\n', '    uint256 public ethRate = 524;\n', '    uint256 public startCrowdsalePhase1Date;\n', '    uint256 public endCrowdsalePhase1Date;\n', '    uint256 public startCrowdsalePhase2Date;\n', '    uint256 public endCrowdsalePhase2Date;\n', '    uint256 public startCrowdsalePhase3Date;\n', '    uint256 public endCrowdsalePhase3Date;\n', '    uint256 public startPresaleDate;\n', '    uint256 public endPresaleDate;\n', '    uint256 public startPrivatesaleDate;\n', '    uint256 public soldToken = 0;                                                           \n', '\n', '    //addresses\n', '    address public beneficiaryAddress;\n', '    address public tokenAddress;\n', '\n', '    bool private isPrivatesaleActive = false;\n', '    bool private isPresaleActive = false;\n', '    bool private isPhase1CrowdsaleActive = false;\n', '    bool private isPhase2CrowdsaleActive = false;\n', '    bool private isPhase3CrowdsaleActive = false;\n', '    bool private isGapActive = false;\n', '\n', '    event TokenBought(address indexed _investor, uint256 _token, uint256 _timestamp);\n', '    event LogTokenSet(address _token, uint256 _timestamp);\n', '\n', '    enum State { PrivateSale, PreSale, Gap, CrowdSalePhase1, CrowdSalePhase2, CrowdSalePhase3 }\n', '\n', '    /**\n', '    * @dev Transfer the ether to the beneficiaryAddress.\n', '    * @param _fund The ether that is transferred to contract to buy tokens.  \n', '    */\n', '    function fundTransfer(uint256 _fund) internal returns(bool) {\n', '        beneficiaryAddress.transfer(_fund);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev fallback function which accepts the ether and call the buy token function.\n', '    */\n', '    function () payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev TuurntCrowdsale constructor sets the original beneficiaryAddress and \n', '    * set the timeslot for the Pre-ICO and ICO.\n', '    * @param _beneficiaryAddress The address to transfer the ether that is raised during crowdsale. \n', '    */\n', '    constructor(address _beneficiaryAddress, address _whitelist, uint256 _startDate) public {\n', '        require(_beneficiaryAddress != address(0));\n', '        beneficiaryAddress = _beneficiaryAddress;\n', '        whitelist = WhitelistInterface(_whitelist);\n', '        startPrivatesaleDate = _startDate;\n', '        isPrivatesaleActive = !isPrivatesaleActive;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow founder to end the Private sale.\n', '    */\n', '    function endPrivatesale() onlyOwner public {\n', '        require(isPrivatesaleActive == true);\n', '        isPrivatesaleActive = !isPrivatesaleActive;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow founder to set the token contract address.\n', '    * @param _tokenAddress The address of token contract.\n', '    */\n', '    function setTokenAddress(address _tokenAddress) onlyOwner public {\n', '        require(tokenAddress == address(0));\n', '        token = TuurntToken(_tokenAddress);\n', '        tokenAddress = _tokenAddress;\n', '        emit LogTokenSet(token, now);\n', '    }\n', '\n', '     /**\n', '    * @dev Allow founder to start the Presale.\n', '    */\n', '    function activePresale(uint256 _presaleDate) onlyOwner public {\n', '        require(isPresaleActive == false);\n', '        require(isPrivatesaleActive == false);\n', '        startPresaleDate = _presaleDate;\n', '        endPresaleDate = startPresaleDate + 2 days;\n', '        isPresaleActive = !isPresaleActive;\n', '    }\n', '   \n', '    /**\n', '    * @dev Allow founder to start the Crowdsale phase1.\n', '    */\n', '    function activeCrowdsalePhase1(uint256 _phase1Date) onlyOwner public {\n', '        require(isPresaleActive == true);\n', '        require(_phase1Date > endPresaleDate);\n', '        require(isPhase1CrowdsaleActive == false);\n', '        startCrowdsalePhase1Date = _phase1Date;\n', '        endCrowdsalePhase1Date = _phase1Date + 1 weeks;\n', '        isPresaleActive = !isPresaleActive;\n', '        isPhase1CrowdsaleActive = !isPhase1CrowdsaleActive;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow founder to start the Crowdsale phase2. \n', '    */\n', '\n', '    function activeCrowdsalePhase2(uint256 _phase2Date) onlyOwner public {\n', '        require(isPhase2CrowdsaleActive == false);\n', '        require(_phase2Date > endCrowdsalePhase1Date);\n', '        require(isPhase1CrowdsaleActive == true);\n', '        startCrowdsalePhase2Date = _phase2Date;\n', '        endCrowdsalePhase2Date = _phase2Date + 2 weeks;\n', '        isPhase2CrowdsaleActive = !isPhase2CrowdsaleActive;\n', '        isPhase1CrowdsaleActive = !isPhase1CrowdsaleActive;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow founder to start the Crowdsale phase3. \n', '    */\n', '    function activeCrowdsalePhase3(uint256 _phase3Date) onlyOwner public {\n', '        require(isPhase3CrowdsaleActive == false);\n', '        require(_phase3Date > endCrowdsalePhase2Date);\n', '        require(isPhase2CrowdsaleActive == true);\n', '        startCrowdsalePhase3Date = _phase3Date;\n', '        endCrowdsalePhase3Date = _phase3Date + 3 weeks;\n', '        isPhase3CrowdsaleActive = !isPhase3CrowdsaleActive;\n', '        isPhase2CrowdsaleActive = !isPhase2CrowdsaleActive;\n', '    }\n', '    /**\n', '    * @dev Allow founder to change the minimum investment of ether.\n', '    * @param _newMinInvestment The value of new minimum ether investment. \n', '    */\n', '    function changeMinInvestment(uint256 _newMinInvestment) onlyOwner public {\n', '        MIN_INVESTMENT = _newMinInvestment;\n', '    }\n', '\n', '     /**\n', '    * @dev Allow founder to change the ether rate.\n', '    * @param _newEthRate current rate of ether. \n', '    */\n', '    function setEtherRate(uint256 _newEthRate) onlyOwner public {\n', '        require(_newEthRate != 0);\n', '        ethRate = _newEthRate;\n', '    }\n', '\n', '    /**\n', '    * @dev Return the state based on the timestamp. \n', '    */\n', '\n', '    function getState() view public returns(State) {\n', '        \n', '        if(now >= startPrivatesaleDate && isPrivatesaleActive == true) {\n', '            return State.PrivateSale;\n', '        }\n', '        if (now >= startPresaleDate && now <= endPresaleDate) {\n', '            require(isPresaleActive == true);\n', '            return State.PreSale;\n', '        }\n', '        if (now >= startCrowdsalePhase1Date && now <= endCrowdsalePhase1Date) {\n', '            require(isPhase1CrowdsaleActive == true);\n', '            return State.CrowdSalePhase1;\n', '        }\n', '        if (now >= startCrowdsalePhase2Date && now <= endCrowdsalePhase2Date) {\n', '            require(isPhase2CrowdsaleActive == true);\n', '            return State.CrowdSalePhase2;\n', '        }\n', '        if (now >= startCrowdsalePhase3Date && now <= endCrowdsalePhase3Date) {\n', '            require(isPhase3CrowdsaleActive == true);\n', '            return State.CrowdSalePhase3;\n', '        }\n', '        return State.Gap;\n', '\n', '    }\n', ' \n', '    /**\n', '    * @dev Return the rate based on the state and timestamp.\n', '    */\n', '\n', '    function getRate() view public returns(uint256) {\n', '        if (getState() == State.PrivateSale) {\n', '            return 5;\n', '        }\n', '        if (getState() == State.PreSale) {\n', '            return 6;\n', '        }\n', '        if (getState() == State.CrowdSalePhase1) {\n', '            return 7;\n', '        }\n', '        if (getState() == State.CrowdSalePhase2) {\n', '            return 8;\n', '        }\n', '        if (getState() == State.CrowdSalePhase3) {\n', '            return 10;\n', '        }\n', '    }\n', '    \n', '    /**\n', '    * @dev Calculate the number of tokens to be transferred to the investor address \n', '    * based on the invested ethers.\n', '    * @param _investedAmount The value of ether that is invested.  \n', '    */\n', '    function getTokenAmount(uint256 _investedAmount) view public returns(uint256) {\n', '        uint256 tokenRate = getRate();\n', '        uint256 tokenAmount = _investedAmount.mul((ethRate.mul(100)).div(tokenRate));\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the tokens to the investor address.\n', '    * @param _investorAddress The address of investor. \n', '    */\n', '    function buyTokens(address _investorAddress) \n', '    public \n', '    payable\n', '    returns(bool)\n', '    {   \n', '        require(whitelist.checkWhitelist(_investorAddress));\n', '        if ((getState() == State.PreSale) ||\n', '            (getState() == State.CrowdSalePhase1) || \n', '            (getState() == State.CrowdSalePhase2) || \n', '            (getState() == State.CrowdSalePhase3) || \n', '            (getState() == State.PrivateSale)) {\n', '            uint256 amount;\n', '            require(_investorAddress != address(0));\n', '            require(tokenAddress != address(0));\n', '            require(msg.value >= MIN_INVESTMENT);\n', '            amount = getTokenAmount(msg.value);\n', '            require(fundTransfer(msg.value));\n', '            require(token.transfer(_investorAddress, amount));\n', '            ethRaised = ethRaised.add(msg.value);\n', '            soldToken = soldToken.add(amount);\n', '            emit TokenBought(_investorAddress,amount,now);\n', '            return true;\n', '        }else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Allow founder to end the crowsale and transfer the remaining\n', '    * tokens of crowdfund to the company address. \n', '    */\n', '    function endCrowdfund(address companyAddress) onlyOwner public returns(bool) {\n', '        require(isPhase3CrowdsaleActive == true);\n', '        require(now >= endCrowdsalePhase3Date); \n', '        uint256 remaining = token.balanceOf(this);\n', '        require(token.transfer(companyAddress, remaining));\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '/**\n', '* @title TuurntToken \n', '* @dev The TuurntToken contract contains the information about \n', '* Tuurnt token.\n', '*/\n', '\n', '\n', '\n', '\n', '\n', 'contract TuurntToken is StandardToken, DetailedERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // distribution variables\n', '    uint256 public tokenAllocToTeam;\n', '    uint256 public tokenAllocToCrowdsale;\n', '    uint256 public tokenAllocToCompany;\n', '\n', '    // addresses\n', '    address public crowdsaleAddress;\n', '    address public teamAddress;\n', '    address public companyAddress;\n', '    \n', '\n', '    /**\n', '    * @dev The TuurntToken constructor set the orginal crowdsaleAddress,teamAddress and companyAddress and allocate the\n', '    * tokens to them.\n', '    * @param _crowdsaleAddress The address of crowsale contract\n', '    * @param _teamAddress The address of team\n', '    * @param _companyAddress The address of company \n', '    */\n', '\n', '    constructor(address _crowdsaleAddress, address _teamAddress, address _companyAddress, string _name, string _symbol, uint8 _decimals) public \n', '        DetailedERC20(_name, _symbol, _decimals)\n', '    {\n', '        require(_crowdsaleAddress != address(0));\n', '        require(_teamAddress != address(0));\n', '        require(_companyAddress != address(0));\n', '        totalSupply_ = 500000000 * 10 ** 18;\n', '        tokenAllocToTeam = (totalSupply_.mul(33)).div(100);     // 33 % Allocation\n', '        tokenAllocToCompany = (totalSupply_.mul(33)).div(100);  // 33 % Allocation \n', '        tokenAllocToCrowdsale = (totalSupply_.mul(34)).div(100);// 34 % Allocation\n', '\n', '        // Address      \n', '        crowdsaleAddress = _crowdsaleAddress;\n', '        teamAddress = _teamAddress;\n', '        companyAddress = _companyAddress;\n', '        \n', '\n', '        // Allocations\n', '        balances[crowdsaleAddress] = tokenAllocToCrowdsale;\n', '        balances[companyAddress] = tokenAllocToCompany;\n', '        balances[teamAddress] = tokenAllocToTeam; \n', '       \n', '        //transfer event\n', '        emit Transfer(address(0), crowdsaleAddress, tokenAllocToCrowdsale);\n', '        emit Transfer(address(0), companyAddress, tokenAllocToCompany);\n', '        emit Transfer(address(0), teamAddress, tokenAllocToTeam);\n', '       \n', '        \n', '    }  \n', '}\n', '\n', 'contract WhitelistInterface {\n', '    function checkWhitelist(address _whiteListAddress) public view returns(bool);\n', '}\n', '\n', '/**\n', '* @title TuurntCrowdsale\n', '* @dev The Crowdsale contract holds the token for the public sale of token and \n', '* contains the function to buy token.  \n', '*/\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TuurntCrowdsale is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    TuurntToken public token;\n', '    WhitelistInterface public whitelist;\n', '\n', '    //variable declaration\n', '    uint256 public MIN_INVESTMENT = 0.2 ether;\n', '    uint256 public ethRaised;\n', '    uint256 public ethRate = 524;\n', '    uint256 public startCrowdsalePhase1Date;\n', '    uint256 public endCrowdsalePhase1Date;\n', '    uint256 public startCrowdsalePhase2Date;\n', '    uint256 public endCrowdsalePhase2Date;\n', '    uint256 public startCrowdsalePhase3Date;\n', '    uint256 public endCrowdsalePhase3Date;\n', '    uint256 public startPresaleDate;\n', '    uint256 public endPresaleDate;\n', '    uint256 public startPrivatesaleDate;\n', '    uint256 public soldToken = 0;                                                           \n', '\n', '    //addresses\n', '    address public beneficiaryAddress;\n', '    address public tokenAddress;\n', '\n', '    bool private isPrivatesaleActive = false;\n', '    bool private isPresaleActive = false;\n', '    bool private isPhase1CrowdsaleActive = false;\n', '    bool private isPhase2CrowdsaleActive = false;\n', '    bool private isPhase3CrowdsaleActive = false;\n', '    bool private isGapActive = false;\n', '\n', '    event TokenBought(address indexed _investor, uint256 _token, uint256 _timestamp);\n', '    event LogTokenSet(address _token, uint256 _timestamp);\n', '\n', '    enum State { PrivateSale, PreSale, Gap, CrowdSalePhase1, CrowdSalePhase2, CrowdSalePhase3 }\n', '\n', '    /**\n', '    * @dev Transfer the ether to the beneficiaryAddress.\n', '    * @param _fund The ether that is transferred to contract to buy tokens.  \n', '    */\n', '    function fundTransfer(uint256 _fund) internal returns(bool) {\n', '        beneficiaryAddress.transfer(_fund);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev fallback function which accepts the ether and call the buy token function.\n', '    */\n', '    function () payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev TuurntCrowdsale constructor sets the original beneficiaryAddress and \n', '    * set the timeslot for the Pre-ICO and ICO.\n', '    * @param _beneficiaryAddress The address to transfer the ether that is raised during crowdsale. \n', '    */\n', '    constructor(address _beneficiaryAddress, address _whitelist, uint256 _startDate) public {\n', '        require(_beneficiaryAddress != address(0));\n', '        beneficiaryAddress = _beneficiaryAddress;\n', '        whitelist = WhitelistInterface(_whitelist);\n', '        startPrivatesaleDate = _startDate;\n', '        isPrivatesaleActive = !isPrivatesaleActive;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow founder to end the Private sale.\n', '    */\n', '    function endPrivatesale() onlyOwner public {\n', '        require(isPrivatesaleActive == true);\n', '        isPrivatesaleActive = !isPrivatesaleActive;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow founder to set the token contract address.\n', '    * @param _tokenAddress The address of token contract.\n', '    */\n', '    function setTokenAddress(address _tokenAddress) onlyOwner public {\n', '        require(tokenAddress == address(0));\n', '        token = TuurntToken(_tokenAddress);\n', '        tokenAddress = _tokenAddress;\n', '        emit LogTokenSet(token, now);\n', '    }\n', '\n', '     /**\n', '    * @dev Allow founder to start the Presale.\n', '    */\n', '    function activePresale(uint256 _presaleDate) onlyOwner public {\n', '        require(isPresaleActive == false);\n', '        require(isPrivatesaleActive == false);\n', '        startPresaleDate = _presaleDate;\n', '        endPresaleDate = startPresaleDate + 2 days;\n', '        isPresaleActive = !isPresaleActive;\n', '    }\n', '   \n', '    /**\n', '    * @dev Allow founder to start the Crowdsale phase1.\n', '    */\n', '    function activeCrowdsalePhase1(uint256 _phase1Date) onlyOwner public {\n', '        require(isPresaleActive == true);\n', '        require(_phase1Date > endPresaleDate);\n', '        require(isPhase1CrowdsaleActive == false);\n', '        startCrowdsalePhase1Date = _phase1Date;\n', '        endCrowdsalePhase1Date = _phase1Date + 1 weeks;\n', '        isPresaleActive = !isPresaleActive;\n', '        isPhase1CrowdsaleActive = !isPhase1CrowdsaleActive;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow founder to start the Crowdsale phase2. \n', '    */\n', '\n', '    function activeCrowdsalePhase2(uint256 _phase2Date) onlyOwner public {\n', '        require(isPhase2CrowdsaleActive == false);\n', '        require(_phase2Date > endCrowdsalePhase1Date);\n', '        require(isPhase1CrowdsaleActive == true);\n', '        startCrowdsalePhase2Date = _phase2Date;\n', '        endCrowdsalePhase2Date = _phase2Date + 2 weeks;\n', '        isPhase2CrowdsaleActive = !isPhase2CrowdsaleActive;\n', '        isPhase1CrowdsaleActive = !isPhase1CrowdsaleActive;\n', '    }\n', '\n', '    /**\n', '    * @dev Allow founder to start the Crowdsale phase3. \n', '    */\n', '    function activeCrowdsalePhase3(uint256 _phase3Date) onlyOwner public {\n', '        require(isPhase3CrowdsaleActive == false);\n', '        require(_phase3Date > endCrowdsalePhase2Date);\n', '        require(isPhase2CrowdsaleActive == true);\n', '        startCrowdsalePhase3Date = _phase3Date;\n', '        endCrowdsalePhase3Date = _phase3Date + 3 weeks;\n', '        isPhase3CrowdsaleActive = !isPhase3CrowdsaleActive;\n', '        isPhase2CrowdsaleActive = !isPhase2CrowdsaleActive;\n', '    }\n', '    /**\n', '    * @dev Allow founder to change the minimum investment of ether.\n', '    * @param _newMinInvestment The value of new minimum ether investment. \n', '    */\n', '    function changeMinInvestment(uint256 _newMinInvestment) onlyOwner public {\n', '        MIN_INVESTMENT = _newMinInvestment;\n', '    }\n', '\n', '     /**\n', '    * @dev Allow founder to change the ether rate.\n', '    * @param _newEthRate current rate of ether. \n', '    */\n', '    function setEtherRate(uint256 _newEthRate) onlyOwner public {\n', '        require(_newEthRate != 0);\n', '        ethRate = _newEthRate;\n', '    }\n', '\n', '    /**\n', '    * @dev Return the state based on the timestamp. \n', '    */\n', '\n', '    function getState() view public returns(State) {\n', '        \n', '        if(now >= startPrivatesaleDate && isPrivatesaleActive == true) {\n', '            return State.PrivateSale;\n', '        }\n', '        if (now >= startPresaleDate && now <= endPresaleDate) {\n', '            require(isPresaleActive == true);\n', '            return State.PreSale;\n', '        }\n', '        if (now >= startCrowdsalePhase1Date && now <= endCrowdsalePhase1Date) {\n', '            require(isPhase1CrowdsaleActive == true);\n', '            return State.CrowdSalePhase1;\n', '        }\n', '        if (now >= startCrowdsalePhase2Date && now <= endCrowdsalePhase2Date) {\n', '            require(isPhase2CrowdsaleActive == true);\n', '            return State.CrowdSalePhase2;\n', '        }\n', '        if (now >= startCrowdsalePhase3Date && now <= endCrowdsalePhase3Date) {\n', '            require(isPhase3CrowdsaleActive == true);\n', '            return State.CrowdSalePhase3;\n', '        }\n', '        return State.Gap;\n', '\n', '    }\n', ' \n', '    /**\n', '    * @dev Return the rate based on the state and timestamp.\n', '    */\n', '\n', '    function getRate() view public returns(uint256) {\n', '        if (getState() == State.PrivateSale) {\n', '            return 5;\n', '        }\n', '        if (getState() == State.PreSale) {\n', '            return 6;\n', '        }\n', '        if (getState() == State.CrowdSalePhase1) {\n', '            return 7;\n', '        }\n', '        if (getState() == State.CrowdSalePhase2) {\n', '            return 8;\n', '        }\n', '        if (getState() == State.CrowdSalePhase3) {\n', '            return 10;\n', '        }\n', '    }\n', '    \n', '    /**\n', '    * @dev Calculate the number of tokens to be transferred to the investor address \n', '    * based on the invested ethers.\n', '    * @param _investedAmount The value of ether that is invested.  \n', '    */\n', '    function getTokenAmount(uint256 _investedAmount) view public returns(uint256) {\n', '        uint256 tokenRate = getRate();\n', '        uint256 tokenAmount = _investedAmount.mul((ethRate.mul(100)).div(tokenRate));\n', '        return tokenAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer the tokens to the investor address.\n', '    * @param _investorAddress The address of investor. \n', '    */\n', '    function buyTokens(address _investorAddress) \n', '    public \n', '    payable\n', '    returns(bool)\n', '    {   \n', '        require(whitelist.checkWhitelist(_investorAddress));\n', '        if ((getState() == State.PreSale) ||\n', '            (getState() == State.CrowdSalePhase1) || \n', '            (getState() == State.CrowdSalePhase2) || \n', '            (getState() == State.CrowdSalePhase3) || \n', '            (getState() == State.PrivateSale)) {\n', '            uint256 amount;\n', '            require(_investorAddress != address(0));\n', '            require(tokenAddress != address(0));\n', '            require(msg.value >= MIN_INVESTMENT);\n', '            amount = getTokenAmount(msg.value);\n', '            require(fundTransfer(msg.value));\n', '            require(token.transfer(_investorAddress, amount));\n', '            ethRaised = ethRaised.add(msg.value);\n', '            soldToken = soldToken.add(amount);\n', '            emit TokenBought(_investorAddress,amount,now);\n', '            return true;\n', '        }else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Allow founder to end the crowsale and transfer the remaining\n', '    * tokens of crowdfund to the company address. \n', '    */\n', '    function endCrowdfund(address companyAddress) onlyOwner public returns(bool) {\n', '        require(isPhase3CrowdsaleActive == true);\n', '        require(now >= endCrowdsalePhase3Date); \n', '        uint256 remaining = token.balanceOf(this);\n', '        require(token.transfer(companyAddress, remaining));\n', '    }\n', '\n', '}']
