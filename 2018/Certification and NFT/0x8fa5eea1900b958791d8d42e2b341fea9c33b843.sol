['pragma solidity ^0.4.11;\n', '\n', '\n', 'contract Better{\n', '    event Bet(address indexed _from, uint team, uint _value);\n', '    event Claim(address indexed _from, uint _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event LogManualWinnerUpdated(uint winner);\n', '\n', '    //only informative states\n', '    uint public constant STATE_BET_ENABLED=0;\n', '    uint public constant STATE_BET_DISABLED=1;\n', '    uint public constant  STATE_CLAIM_ENABLED=2;\n', '    \n', '    uint private constant NO_TEAM=0;\n', '    uint[33] private _pools;  //pools[0] is reserved\n', '    \n', '    uint public DEV_TAX_DIVISOR;    //example 1/4 = 25%\n', '    uint public  _startTime;    //example=1522983600;   //when WC starts and bets close\n', '    uint public  _endTime;  //example=1522985400;  //when WC ends and claims open\n', '\n', '    uint private _totalPrize;\n', '    uint private _winnerTeam;\n', '    uint private _numberBets;\n', '    \n', '    address public creatorAddr;\n', '    \n', '    \n', '    mapping (address => mapping (uint => uint)) private _bets;\n', '    \n', '    function Better(uint passDevTaxDivisor, uint passStartTime, uint passEndTime) public {\n', '        creatorAddr=msg.sender;\n', '        DEV_TAX_DIVISOR=passDevTaxDivisor;\n', '        _startTime=passStartTime;\n', '        _endTime=passEndTime;\n', '        \n', '        _winnerTeam=NO_TEAM;\n', '\n', '        _totalPrize=0;\n', '        _numberBets=0;\n', '        for(uint i =0; i<33; i++)_pools[i]=0; //set all pool to 0\n', '    }\n', '    \n', '    \n', '    modifier onlyCreator {\n', '        require(msg.sender == creatorAddr);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyBeforeWinner {\n', '        require(_winnerTeam == NO_TEAM);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyAfterWinner {\n', '        require(_winnerTeam != NO_TEAM);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyAfterEndTime() {\n', '        require(now >= _endTime);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyBeforeStartTime() {\n', '        require(now <= _startTime);\n', '        _;\n', '    }\n', '\n', '    function setWinnerManually(uint winnerTeam) public onlyCreator onlyBeforeWinner returns (bool){\n', '         _winnerTeam = winnerTeam;\n', '         emit LogManualWinnerUpdated(winnerTeam);\n', '    }\n', '    \n', '    function updateEndTimeManually(uint passEndTime) public onlyCreator onlyBeforeWinner returns (bool){\n', '        _endTime=passEndTime;\n', '    }\n', '    \n', '    function updateStartTimeManually(uint passStartTime) public onlyCreator onlyBeforeWinner returns (bool){\n', '        _startTime=passStartTime;\n', '    }\n', '    \n', '    function bet(uint team) public onlyBeforeWinner onlyBeforeStartTime payable returns (bool)  {\n', '        require(msg.value>0);\n', '        require(team >0);\n', '        \n', '        uint devTax= SafeMath.div(msg.value,DEV_TAX_DIVISOR);\n', '        uint finalValue=SafeMath.sub(msg.value,devTax);\n', '        \n', '        assert(finalValue>0 && devTax>0);\n', '        \n', '        creatorAddr.transfer(devTax);\n', '        \n', '        _pools[team]=SafeMath.add(_pools[team],finalValue);\n', '        _bets[msg.sender][team]=SafeMath.add(_bets[msg.sender][team],finalValue);\n', '        _totalPrize=SafeMath.add(_totalPrize,finalValue);\n', '        \n', '        _numberBets++;\n', '        emit Bet(msg.sender,team,msg.value);\n', '        return true;\n', '    }\n', '    \n', '    function claim() public onlyAfterWinner onlyAfterEndTime returns (bool){\n', '        uint moneyInvested= _bets[msg.sender][_winnerTeam];\n', '        require(moneyInvested>0);\n', '        \n', '        uint moneyTeam= _pools[_winnerTeam];\n', '        \n', '\n', '        uint aux= SafeMath.mul(_totalPrize,moneyInvested);\n', '        uint wonAmmount= SafeMath.div(aux,moneyTeam);\n', '        \n', '        _bets[msg.sender][_winnerTeam]=0;\n', '        msg.sender.transfer(wonAmmount);\n', '        \n', '        emit Claim(msg.sender,wonAmmount);\n', '        return true;\n', '    }\n', '\n', '    function getMyBet(uint teamNumber) public constant returns (uint teamBet) {\n', '       return (_bets[msg.sender][teamNumber]);\n', '    }\n', '    \n', '    function getPools() public constant returns (uint[33] pools) {\n', '        return _pools;\n', '    }\n', '    \n', '    function getTotalPrize() public constant returns (uint prize){\n', '        return _totalPrize;\n', '    }\n', '    \n', '    function getNumberOfBets() public constant returns (uint numberBets){\n', '        return _numberBets;\n', '    }\n', '    \n', '    function getWinnerTeam() public constant returns (uint winnerTeam){\n', '        return _winnerTeam;\n', '    }\n', '    \n', '\n', '    function getState() public constant returns (uint state){\n', '        if(now<_startTime)return STATE_BET_ENABLED;\n', '        if(now<_endTime)return STATE_BET_DISABLED;\n', '        else return STATE_CLAIM_ENABLED;\n', '    }\n', '    \n', '    function getDev() public constant returns (string signature){\n', '        return &#39;chelinho139&#39;;\n', '    }\n', '    function () public payable {\n', '        throw;\n', '    }\n', '    \n', '\n', '// EgyptEgypt 1\n', '// MoroccoMorocco 2\n', '// NigeriaNigeria 3\n', '// SenegalSenegal 4\n', '// TunisiaTunisia 5\n', '// AustraliaAustralia 6\n', '// IR IranIR Iran 7\n', '// JapanJapan 8\n', '// Korea RepublicKorea Republic 9\n', '// Saudi ArabiaSaudi Arabia 10\n', '// BelgiumBelgium 11\n', '// CroatiaCroatia 12 \n', '// DenmarkDenmark 13 \n', '// EnglandEngland 14 \n', '// FranceFrance 15 \n', '// GermanyGermany 16 \n', '// IcelandIceland 17 \n', '// PolandPoland 18 \n', '// PortugalPortugal 19 \n', '// RussiaRussia 20\n', '// SerbiaSerbia 21 \n', '// SpainSpain 22 \n', '// SwedenSweden 23 \n', '// SwitzerlandSwitzerland 24 \n', '// Costa RicaCosta Rica 25 \n', '// MexicoMexico 26 \n', '// PanamaPanama 27 \n', '// ArgentinaArgentina 28 \n', '// BrazilBrazil 29 \n', '// ColombiaColombia 30 \n', '// PeruPeru 31 \n', '// UruguayUruguay 32\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '\n', 'contract Better{\n', '    event Bet(address indexed _from, uint team, uint _value);\n', '    event Claim(address indexed _from, uint _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event LogManualWinnerUpdated(uint winner);\n', '\n', '    //only informative states\n', '    uint public constant STATE_BET_ENABLED=0;\n', '    uint public constant STATE_BET_DISABLED=1;\n', '    uint public constant  STATE_CLAIM_ENABLED=2;\n', '    \n', '    uint private constant NO_TEAM=0;\n', '    uint[33] private _pools;  //pools[0] is reserved\n', '    \n', '    uint public DEV_TAX_DIVISOR;    //example 1/4 = 25%\n', '    uint public  _startTime;    //example=1522983600;   //when WC starts and bets close\n', '    uint public  _endTime;  //example=1522985400;  //when WC ends and claims open\n', '\n', '    uint private _totalPrize;\n', '    uint private _winnerTeam;\n', '    uint private _numberBets;\n', '    \n', '    address public creatorAddr;\n', '    \n', '    \n', '    mapping (address => mapping (uint => uint)) private _bets;\n', '    \n', '    function Better(uint passDevTaxDivisor, uint passStartTime, uint passEndTime) public {\n', '        creatorAddr=msg.sender;\n', '        DEV_TAX_DIVISOR=passDevTaxDivisor;\n', '        _startTime=passStartTime;\n', '        _endTime=passEndTime;\n', '        \n', '        _winnerTeam=NO_TEAM;\n', '\n', '        _totalPrize=0;\n', '        _numberBets=0;\n', '        for(uint i =0; i<33; i++)_pools[i]=0; //set all pool to 0\n', '    }\n', '    \n', '    \n', '    modifier onlyCreator {\n', '        require(msg.sender == creatorAddr);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyBeforeWinner {\n', '        require(_winnerTeam == NO_TEAM);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyAfterWinner {\n', '        require(_winnerTeam != NO_TEAM);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyAfterEndTime() {\n', '        require(now >= _endTime);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyBeforeStartTime() {\n', '        require(now <= _startTime);\n', '        _;\n', '    }\n', '\n', '    function setWinnerManually(uint winnerTeam) public onlyCreator onlyBeforeWinner returns (bool){\n', '         _winnerTeam = winnerTeam;\n', '         emit LogManualWinnerUpdated(winnerTeam);\n', '    }\n', '    \n', '    function updateEndTimeManually(uint passEndTime) public onlyCreator onlyBeforeWinner returns (bool){\n', '        _endTime=passEndTime;\n', '    }\n', '    \n', '    function updateStartTimeManually(uint passStartTime) public onlyCreator onlyBeforeWinner returns (bool){\n', '        _startTime=passStartTime;\n', '    }\n', '    \n', '    function bet(uint team) public onlyBeforeWinner onlyBeforeStartTime payable returns (bool)  {\n', '        require(msg.value>0);\n', '        require(team >0);\n', '        \n', '        uint devTax= SafeMath.div(msg.value,DEV_TAX_DIVISOR);\n', '        uint finalValue=SafeMath.sub(msg.value,devTax);\n', '        \n', '        assert(finalValue>0 && devTax>0);\n', '        \n', '        creatorAddr.transfer(devTax);\n', '        \n', '        _pools[team]=SafeMath.add(_pools[team],finalValue);\n', '        _bets[msg.sender][team]=SafeMath.add(_bets[msg.sender][team],finalValue);\n', '        _totalPrize=SafeMath.add(_totalPrize,finalValue);\n', '        \n', '        _numberBets++;\n', '        emit Bet(msg.sender,team,msg.value);\n', '        return true;\n', '    }\n', '    \n', '    function claim() public onlyAfterWinner onlyAfterEndTime returns (bool){\n', '        uint moneyInvested= _bets[msg.sender][_winnerTeam];\n', '        require(moneyInvested>0);\n', '        \n', '        uint moneyTeam= _pools[_winnerTeam];\n', '        \n', '\n', '        uint aux= SafeMath.mul(_totalPrize,moneyInvested);\n', '        uint wonAmmount= SafeMath.div(aux,moneyTeam);\n', '        \n', '        _bets[msg.sender][_winnerTeam]=0;\n', '        msg.sender.transfer(wonAmmount);\n', '        \n', '        emit Claim(msg.sender,wonAmmount);\n', '        return true;\n', '    }\n', '\n', '    function getMyBet(uint teamNumber) public constant returns (uint teamBet) {\n', '       return (_bets[msg.sender][teamNumber]);\n', '    }\n', '    \n', '    function getPools() public constant returns (uint[33] pools) {\n', '        return _pools;\n', '    }\n', '    \n', '    function getTotalPrize() public constant returns (uint prize){\n', '        return _totalPrize;\n', '    }\n', '    \n', '    function getNumberOfBets() public constant returns (uint numberBets){\n', '        return _numberBets;\n', '    }\n', '    \n', '    function getWinnerTeam() public constant returns (uint winnerTeam){\n', '        return _winnerTeam;\n', '    }\n', '    \n', '\n', '    function getState() public constant returns (uint state){\n', '        if(now<_startTime)return STATE_BET_ENABLED;\n', '        if(now<_endTime)return STATE_BET_DISABLED;\n', '        else return STATE_CLAIM_ENABLED;\n', '    }\n', '    \n', '    function getDev() public constant returns (string signature){\n', "        return 'chelinho139';\n", '    }\n', '    function () public payable {\n', '        throw;\n', '    }\n', '    \n', '\n', '// EgyptEgypt 1\n', '// MoroccoMorocco 2\n', '// NigeriaNigeria 3\n', '// SenegalSenegal 4\n', '// TunisiaTunisia 5\n', '// AustraliaAustralia 6\n', '// IR IranIR Iran 7\n', '// JapanJapan 8\n', '// Korea RepublicKorea Republic 9\n', '// Saudi ArabiaSaudi Arabia 10\n', '// BelgiumBelgium 11\n', '// CroatiaCroatia 12 \n', '// DenmarkDenmark 13 \n', '// EnglandEngland 14 \n', '// FranceFrance 15 \n', '// GermanyGermany 16 \n', '// IcelandIceland 17 \n', '// PolandPoland 18 \n', '// PortugalPortugal 19 \n', '// RussiaRussia 20\n', '// SerbiaSerbia 21 \n', '// SpainSpain 22 \n', '// SwedenSweden 23 \n', '// SwitzerlandSwitzerland 24 \n', '// Costa RicaCosta Rica 25 \n', '// MexicoMexico 26 \n', '// PanamaPanama 27 \n', '// ArgentinaArgentina 28 \n', '// BrazilBrazil 29 \n', '// ColombiaColombia 30 \n', '// PeruPeru 31 \n', '// UruguayUruguay 32\n', '}\n', '\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
