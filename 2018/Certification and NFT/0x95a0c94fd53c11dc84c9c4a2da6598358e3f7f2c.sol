['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BurnableToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract EVOAIToken is StandardToken {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor() public {\n', '    name = "EVOAI";\n', '    symbol = "EVOT";\n', '    decimals = 18;\n', '    totalSupply_ = 10000000000000000000000000;\n', '    balances[msg.sender] = totalSupply_;\n', '  }\n', '}\n', '\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address&#39; access to this role\n', '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  EVOAIToken public token;\n', '\n', '  address public walletForETH;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '  uint256 public weiRaisedRound;\n', '  uint256 public tokensRaisedRound;\n', '  uint256 public unsoldTokens;\n', '\n', '  bool public privateStage;\n', '  bool public preICOStage;\n', '  bool public icoRound1;\n', '  bool public icoRound2;\n', '  bool public icoRound3;\n', '  bool public icoRound4;\n', '  bool public icoRound5;\n', '  bool public icoRound6;\n', '\n', '\n', '\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  constructor(address _wallet, address _walletForETH) public {\n', '    require(_wallet != address(0));\n', '    require(_walletForETH != address(0));\n', '    walletForETH = _walletForETH;\n', '\n', '    token = new EVOAIToken();\n', '\n', '    token.transfer(_wallet, 3200000000000000000000000);\n', '    privateStage = true;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  function changeWalletForETH(address _walletForETH) onlyOwner public {\n', '     require(_walletForETH != address(0));\n', '     walletForETH = _walletForETH;\n', '  }\n', '  \n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    if (privateStage) {\n', '      require(tokensRaisedRound.add(tokens) < 300000000000000000000000);\n', '      require (tokens >= 5000000000000000000000 && tokens <= 25000000000000000000000);\n', '      tokensRaisedRound = tokensRaisedRound.add(tokens);\n', '         } \n', '    \n', '    else if (preICOStage) {\n', '            require(tokensRaisedRound.add(tokens) < 500000000000000000000000);\n', '            tokensRaisedRound = tokensRaisedRound.add(tokens);\n', '         }  \n', '    \n', '    else if (icoRound1) {\n', '            require (tokensRaisedRound.add(tokens) < 1000000000000000000000000);\n', '            tokensRaisedRound = tokensRaisedRound.add(tokens);\n', '         }  \n', '     \n', '    else if (icoRound2) {\n', '            require (tokensRaisedRound.add(tokens) < 1000000000000000000000000);\n', '            tokensRaisedRound = tokensRaisedRound.add(tokens);\n', '         } \n', '    \n', '    else if (icoRound3) {\n', '            require (tokensRaisedRound.add(tokens) < 1000000000000000000000000);\n', '            tokensRaisedRound = tokensRaisedRound.add(tokens);\n', '         } \n', '\n', '    else if (icoRound4) {\n', '            require (tokensRaisedRound.add(tokens) < 1000000000000000000000000);\n', '            tokensRaisedRound = tokensRaisedRound.add(tokens);\n', '         } \n', '    else if (icoRound5) {\n', '            require (tokensRaisedRound.add(tokens) < 1000000000000000000000000);\n', '            tokensRaisedRound = tokensRaisedRound.add(tokens);\n', '         } \n', '    else if (icoRound6) {\n', '            require (tokensRaisedRound.add(tokens) < 1000000000000000000000000);\n', '            tokensRaisedRound = tokensRaisedRound.add(tokens);\n', '         }\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _forwardFunds();\n', '  }\n', '\n', '\n', '  function burnUnsoldTokens() onlyOwner public {\n', '\n', '    require (unsoldTokens > 0);\n', '    \n', '    token.burn(unsoldTokens);\n', '    unsoldTokens = 0;\n', '  }\n', '  \n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '\n', '    if (privateStage && weiRaisedRound.add(_weiAmount) <= 276000000000000000000) {\n', '            rate = 1087;\n', '            weiRaisedRound = weiRaisedRound.add(_weiAmount);\n', '         } \n', '    \n', '    else if (preICOStage && weiRaisedRound.add(_weiAmount) <= 775000000000000000000) {\n', '            rate = 870;\n', '            weiRaisedRound = weiRaisedRound.add(_weiAmount);\n', '         }  \n', '    \n', '    else if (icoRound1 && weiRaisedRound.add(_weiAmount) <= 1380000000000000000000) {\n', '            rate = 725;\n', '            weiRaisedRound = weiRaisedRound.add(_weiAmount);\n', '         }  \n', '     \n', '    else if (icoRound2 && weiRaisedRound.add(_weiAmount) <= 1610000000000000000000) {\n', '            rate = 621;\n', '            weiRaisedRound = weiRaisedRound.add(_weiAmount);\n', '         } \n', '    \n', '    else if (icoRound3 && weiRaisedRound.add(_weiAmount) <= 1840000000000000000000) {\n', '            rate = 544;\n', '            weiRaisedRound = weiRaisedRound.add(_weiAmount);\n', '         } \n', '\n', '    else if (icoRound4 && weiRaisedRound.add(_weiAmount) <= 2070000000000000000000) {\n', '            rate = 484;\n', '            weiRaisedRound = weiRaisedRound.add(_weiAmount);\n', '         } \n', '    else if (icoRound5 && weiRaisedRound.add(_weiAmount) <= 2300000000000000000000) {\n', '            rate = 435;\n', '            weiRaisedRound = weiRaisedRound.add(_weiAmount);\n', '         } \n', '    else if (icoRound6 && weiRaisedRound.add(_weiAmount) <= 2530000000000000000000) {\n', '            rate = 396;\n', '            weiRaisedRound = weiRaisedRound.add(_weiAmount);\n', '         }\n', '  }\n', '\n', '  function nextRound() onlyOwner public {\n', '    if(privateStage){\n', '       privateStage = false;\n', '       preICOStage = true;\n', '       weiRaisedRound = 0;\n', '       unsoldTokens = unsoldTokens.add(276000000000000000000 - tokensRaisedRound);\n', '       tokensRaisedRound = 0;\n', '\n', '    } \n', '    else if(preICOStage){\n', '            preICOStage = false;\n', '            icoRound1 = true;\n', '            weiRaisedRound = 0;\n', '            unsoldTokens = unsoldTokens.add(775000000000000000000 - tokensRaisedRound);\n', '            tokensRaisedRound = 0;\n', '    }\n', '    else if(icoRound1){\n', '            icoRound1 = false;\n', '            icoRound2 = true;\n', '            weiRaisedRound = 0;\n', '            unsoldTokens = unsoldTokens.add(1380000000000000000000 - tokensRaisedRound);\n', '            tokensRaisedRound = 0;\n', '    }\n', '    else if(icoRound2){\n', '            icoRound2 = false;\n', '            icoRound3 = true;\n', '            weiRaisedRound = 0;\n', '            unsoldTokens = unsoldTokens.add(1610000000000000000000 - tokensRaisedRound);\n', '            tokensRaisedRound = 0;\n', '    }\n', '    else if(icoRound3){\n', '            icoRound3 = false;\n', '            icoRound4 = true;\n', '            weiRaisedRound = 0;\n', '            unsoldTokens = unsoldTokens.add(1840000000000000000000 - tokensRaisedRound);\n', '            tokensRaisedRound = 0;\n', '    }\n', '    else if(icoRound4){\n', '            icoRound4 = false;\n', '            icoRound5 = true;\n', '            weiRaisedRound = 0;\n', '            unsoldTokens = unsoldTokens.add(2070000000000000000000 - tokensRaisedRound);\n', '            tokensRaisedRound = 0;\n', '    }\n', '    else if(icoRound5){\n', '            icoRound5 = false;\n', '            icoRound6 = true;\n', '            weiRaisedRound = 0;\n', '            unsoldTokens = unsoldTokens.add(2300000000000000000000 - tokensRaisedRound);\n', '            tokensRaisedRound = 0;\n', '    }\n', '    else if(icoRound6){\n', '            icoRound6 = false;\n', '            unsoldTokens = unsoldTokens.add(2530000000000000000000 - tokensRaisedRound);\n', '    }\n', '  }\n', '  \n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    walletForETH.transfer(msg.value);\n', '  }\n', '\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  constructor(address _wallet, address _walletForETH) public Crowdsale(_wallet, _walletForETH){\n', '    cap = 12781000000000000000000;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached.\n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    require(weiRaised.add(_weiAmount) <= cap);\n', '  }\n', '\n', '}\n', '\n', 'contract AdminCrowdsale is CappedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  bool public open;\n', '\n', '  modifier onlyWhileOpen {\n', '\n', '    require(open);\n', '    _;\n', '  }\n', '\n', '\n', '  constructor(address _wallet, address _walletForETH) public CappedCrowdsale(_wallet, _walletForETH){\n', '    //open will be false by default;\n', '    open = false;\n', '  }\n', '\n', '  function endCrowdsale() onlyOwner public {\n', '    open = false;\n', '  }\n', '\n', '  function startCrowdsale() onlyOwner public {\n', '    // solium-disable-next-line security/no-block-members\n', '    open = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}']