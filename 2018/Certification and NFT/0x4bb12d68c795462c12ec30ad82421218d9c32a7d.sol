['pragma solidity ^0.4.16;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', 'contract Crowdsale {\n', '    address public beneficiary;\n', '    uint public fundingGoal;\n', '    uint public amountRaised;\n', '    uint public deadline;\n', '    uint public price;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    bool crowdsaleClosed = false;\n', '    // Release progress\n', '    uint public percent;\n', '    mapping(address => uint256) public percentOf;\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    event RewardToken(address backer, uint amount, uint percent);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingGoalInEthers,\n', '        uint durationInMinutes,\n', '        uint weiCostOfEachToken,\n', '        address addressOfTokenUsedAsReward,\n', '        uint initPercent\n', '    ) {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        price = weiCostOfEachToken * 1 wei;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '        percent = initPercent;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        if (crowdsaleClosed) {\n', '            uint amount2 = balanceOf[msg.sender];\n', '            uint rewardPercent = percent - percentOf[msg.sender];\n', '            require(amount2 > 0 && rewardPercent > 0);\n', '            percentOf[msg.sender] = percent;\n', '            // Release percent of reward token\n', '            uint rewardAmount2 = amount2 * 10**18 * rewardPercent / price / 100;\n', '            tokenReward.transfer(msg.sender, rewardAmount2);\n', '            RewardToken(msg.sender, rewardAmount2, rewardPercent);\n', '        } else {\n', '            uint amount = msg.value;\n', '            balanceOf[msg.sender] += amount;\n', '            amountRaised += amount;\n', '            percentOf[msg.sender] = percent;\n', '            // Release init percent of reward token\n', '            uint rewardAmount = amount * 10**18 * percent / price / 100;\n', '            tokenReward.transfer(msg.sender, rewardAmount);\n', '            FundTransfer(msg.sender, amount, true);\n', '            RewardToken(msg.sender, rewardAmount, percent);\n', '        }\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    /**\n', '     * Check if goal was reached\n', '     *\n', '     * Checks if the goal or time limit has been reached and ends the campaign\n', '     */\n', '    function checkGoalReached() afterDeadline {\n', '        if (amountRaised >= fundingGoal){\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n', '     * the amount they contributed.\n', '     */\n', '    function safeWithdrawal() afterDeadline {\n', '        require(crowdsaleClosed);\n', '\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                    FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '                FundTransfer(beneficiary, amountRaised, false);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Release 10% of reward token\n', '     *\n', '     * Release 10% of reward token when beneficiary call this function.\n', '     */\n', '    function releaseTenPercent() afterDeadline {\n', '        require(crowdsaleClosed);\n', '\n', '        require(percent <= 90);\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '            percent += 10;\n', '        }\n', '    }\n', '}']