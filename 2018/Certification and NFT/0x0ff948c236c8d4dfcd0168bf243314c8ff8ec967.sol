['/**\n', ' *Submitted for verification at Etherscan.io on 2019-07-11\n', '*/\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', '\n', '/*\n', ' * Hubii Nahmii\n', ' *\n', ' * Compliant with the Hubii Nahmii specification v0.12.\n', ' *\n', ' * Copyright (C) 2017-2018 Hubii AS based on Open-Zeppelin&#39;s SafeMath library\n', ' */\n', '\n', '\n', '\n', '/**\n', ' * @title     SafeMathUintLib\n', ' * @dev       Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMathUintLib {\n', '    function mul(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b)\n', '    internal\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    //\n', '    //Clamping functions.\n', '    //\n', '    function clamp(uint256 a, uint256 min, uint256 max)\n', '    public\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        return (a > max) ? max : ((a < min) ? min : a);\n', '    }\n', '\n', '    function clampMin(uint256 a, uint256 min)\n', '    public\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        return (a < min) ? min : a;\n', '    }\n', '\n', '    function clampMax(uint256 a, uint256 max)\n', '    public\n', '    pure\n', '    returns (uint256)\n', '    {\n', '        return (a > max) ? max : a;\n', '    }\n', '}']