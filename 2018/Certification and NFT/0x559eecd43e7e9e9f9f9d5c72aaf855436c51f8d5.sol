['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface TokenInterface {\n', '     function totalSupply() external constant returns (uint);\n', '     function balanceOf(address tokenOwner) external constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) external returns (bool success);\n', '     function approve(address spender, uint tokens) external returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '     function burn(uint256 _value) external; \n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '     event Burn(address indexed burner, uint256 value);\n', '}\n', '\n', ' contract EthereumTravelCrowdsale is Ownable{\n', '  using SafeMath for uint256;\n', ' \n', '  // The token being sold\n', '  TokenInterface public token;\n', '  \n', '  // Hardcaps & Softcaps\n', '  uint Hardcap = 100000;\n', '  uint Softcap = 10000;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public ratePerWei = 10000;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  uint256 public weiRaisedInPreICO;\n', '  uint256 maxTokensToSale;\n', '  \n', '  uint256 public TOKENS_SOLD;\n', '  \n', '\n', '  uint256 bonusPercInICOPhase1;\n', '  uint256 bonusPercInICOPhase2;\n', '  uint256 bonusPercInICOPhase3;\n', '  \n', '  bool isCrowdsalePaused = false;\n', '  \n', '  uint256 totalDurationInDays = 57 days;\n', '  \n', '  mapping(address=>uint)  EthSentAgainstAddress;\n', '  address[] usersAddressForPreICO;\n', '  \n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function EthereumTravelCrowdsale(uint256 _startTime, address _wallet, address _tokenAddress) public \n', '  {\n', '    //require(_startTime >=now);\n', '    require(_wallet != 0x0);\n', '    \n', '    weiRaised=0;\n', '    weiRaisedInPreICO=0;\n', '    startTime = _startTime;  \n', '    //startTime = now;\n', '    endTime = startTime + totalDurationInDays;\n', '    require(endTime >= startTime);\n', '   \n', '    owner = _wallet;\n', '\n', '    bonusPercInICOPhase1 = 30;\n', '    bonusPercInICOPhase2 = 20;\n', '    bonusPercInICOPhase3 = 10;\n', '    \n', '    token = TokenInterface(_tokenAddress);\n', '    maxTokensToSale=(token.totalSupply().mul(60)).div(100);\n', '    \n', '  }\n', '  \n', '  \n', '   // fallback function can be used to buy tokens\n', '   function () public  payable {\n', '     buyTokens(msg.sender);\n', '    }\n', '    \n', '    function determineBonus(uint tokens) internal view returns (uint256 bonus) \n', '    {\n', '        uint256 timeElapsed = now - startTime;\n', '        uint256 timeElapsedInDays = timeElapsed.div(1 days);\n', '\n', '        //Pre ICO Phase ( June 05 - 15 i.e. 11 days)\n', '       if (timeElapsedInDays <12)\n', '        {\n', '            bonus = 0;\n', '        }\n', '        //Break ( June 16 - July 30 i.e. 10 days)\n', '      else if (timeElapsedInDays >= 12 && timeElapsedInDays <27)\n', '        {\n', '            revert();\n', '        }\n', '        \n', '        //ICO phase 1 ( July 1 - July 10 i.e. 10 days)\n', '        else if (timeElapsedInDays >= 27 && timeElapsedInDays <37)\n', '        {\n', '            bonus = tokens.mul(bonusPercInICOPhase1); \n', '            bonus = bonus.div(100);\n', '            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\n', '        }\n', '        \n', '        //ICO phase 2 ( July 11- July 20 i.e. 10 days)\n', '        else if (timeElapsedInDays >= 37 && timeElapsedInDays<47)\n', '        {\n', '            bonus = tokens.mul(bonusPercInICOPhase2); \n', '            bonus = bonus.div(100);\n', '            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\n', '        }\n', '        \n', '        //ICO phase 3 ( July 21- July 30 i.e. 10 days)\n', '        else if (timeElapsedInDays >= 47 && timeElapsedInDays<57)\n', '        {\n', '            bonus = tokens.mul(bonusPercInICOPhase3); \n', '            bonus = bonus.div(100);\n', '            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\n', '        }\n', '        \n', '        else \n', '        {\n', '            bonus = 0;\n', '        }\n', '    }\n', '\n', '  // low level token purchase function\n', '  \n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(isCrowdsalePaused == false);\n', '    require(validPurchase());\n', '    require(msg.value>=1*10**18);\n', '    \n', '    require(TOKENS_SOLD<maxTokensToSale);\n', '   \n', '    uint256 weiAmount = msg.value;\n', '    uint256 timeElapsed = now - startTime;\n', '    uint256 timeElapsedInDays = timeElapsed.div(1 days);\n', '\n', '        //Pre ICO Phase ( June 05 - 15 i.e. 11 days)\n', '       if (timeElapsedInDays <12)\n', '        {\n', '            require(usersAddressForPreICO.length<=5000);\n', '            // checks if the user is sending eths the firt time\n', '            if(EthSentAgainstAddress[beneficiary]==0)\n', '            {\n', '                usersAddressForPreICO.push(beneficiary);\n', '            }\n', '            EthSentAgainstAddress[beneficiary]+=weiAmount; \n', '            // update state\n', '            weiRaised = weiRaised.add(weiAmount);\n', '            weiRaisedInPreICO = weiRaisedInPreICO.add(weiAmount);\n', '            forwardFunds();\n', '        }\n', '        //Break ( June 16 - July 30 i.e. 15 days)\n', '      else if (timeElapsedInDays >= 12 && timeElapsedInDays <27)\n', '        {\n', '            revert();\n', '        }\n', '      else {\n', '          \n', '           // calculate token amount to be created\n', '            uint256 tokens = weiAmount.mul(ratePerWei);\n', '            uint256 bonus = determineBonus(tokens);\n', '            tokens = tokens.add(bonus);\n', '            require(TOKENS_SOLD.add(tokens)<=maxTokensToSale);\n', '            \n', '            // update state\n', '            weiRaised = weiRaised.add(weiAmount);\n', '            \n', '            token.transfer(beneficiary,tokens);\n', '            emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\n', '            TOKENS_SOLD = TOKENS_SOLD.add(tokens);\n', '            forwardFunds();\n', '        \n', '       }\n', '   \n', '  \n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '  \n', '   /**\n', '    * function to change the end timestamp of the ico\n', '    * can only be called by owner wallet\n', '    **/\n', '    function changeEndDate(uint256 endTimeUnixTimestamp) public onlyOwner{\n', '        endTime = endTimeUnixTimestamp;\n', '    }\n', '    \n', '    /**\n', '    * function to change the start timestamp of the ico\n', '    * can only be called by owner wallet\n', '    **/\n', '    \n', '    function changeStartDate(uint256 startTimeUnixTimestamp) public onlyOwner{\n', '        startTime = startTimeUnixTimestamp;\n', '        changeEndDate(startTime+totalDurationInDays);\n', '    }\n', '    \n', '    /**\n', '    * function to change the rate of tokens\n', '    * can only be called by owner wallet\n', '    **/\n', '    function setPriceRate(uint256 newPrice) public onlyOwner {\n', '        ratePerWei = newPrice;\n', '    }\n', '    \n', '   \n', '     /**\n', '     * function to pause the crowdsale \n', '     * can only be called from owner wallet\n', '     **/\n', '     \n', '    function pauseCrowdsale() public onlyOwner {\n', '        isCrowdsalePaused = true;\n', '    }\n', '\n', '    /**\n', '     * function to resume the crowdsale if it is paused\n', '     * can only be called from owner wallet\n', '     **/ \n', '    function resumeCrowdsale() public onlyOwner {\n', '        isCrowdsalePaused = false;\n', '    }\n', '    \n', '  \n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Remaining tokens for sale\n', '     // ------------------------------------------------------------------------\n', '     function remainingTokensForSale() public constant returns (uint) {\n', '         return maxTokensToSale.sub(TOKENS_SOLD);\n', '     }\n', '    \n', '     \n', '     function burnUnsoldTokens() public onlyOwner \n', '     {\n', '         require(hasEnded());\n', '         uint value = remainingTokensForSale();\n', '         token.burn(value);\n', '         TOKENS_SOLD = maxTokensToSale;\n', '     }\n', '     \n', '    /**\n', '      * function through which owner can take back the tokens from the contract\n', '      **/ \n', '     function takeTokensBack() public onlyOwner\n', '     {\n', '         uint remainingTokensInTheContract = token.balanceOf(address(this));\n', '         token.transfer(owner,remainingTokensInTheContract);\n', '     }\n', '     \n', '     /**\n', '     * send PreICO bonus tokens in bulk to 5000 addresses\n', '     **/ \n', '    function BulkTransfer() public onlyOwner {\n', '        for(uint i = 0; i<usersAddressForPreICO.length; i++)\n', '        {\n', '            uint tks=(EthSentAgainstAddress[usersAddressForPreICO[i]].mul(1000000000*10**18)).div(weiRaisedInPreICO);            \n', '            token.transfer(usersAddressForPreICO[i],tks);\n', '        }\n', '    }\n', ' }']
['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface TokenInterface {\n', '     function totalSupply() external constant returns (uint);\n', '     function balanceOf(address tokenOwner) external constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) external returns (bool success);\n', '     function approve(address spender, uint tokens) external returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '     function burn(uint256 _value) external; \n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '     event Burn(address indexed burner, uint256 value);\n', '}\n', '\n', ' contract EthereumTravelCrowdsale is Ownable{\n', '  using SafeMath for uint256;\n', ' \n', '  // The token being sold\n', '  TokenInterface public token;\n', '  \n', '  // Hardcaps & Softcaps\n', '  uint Hardcap = 100000;\n', '  uint Softcap = 10000;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public ratePerWei = 10000;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  uint256 public weiRaisedInPreICO;\n', '  uint256 maxTokensToSale;\n', '  \n', '  uint256 public TOKENS_SOLD;\n', '  \n', '\n', '  uint256 bonusPercInICOPhase1;\n', '  uint256 bonusPercInICOPhase2;\n', '  uint256 bonusPercInICOPhase3;\n', '  \n', '  bool isCrowdsalePaused = false;\n', '  \n', '  uint256 totalDurationInDays = 57 days;\n', '  \n', '  mapping(address=>uint)  EthSentAgainstAddress;\n', '  address[] usersAddressForPreICO;\n', '  \n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function EthereumTravelCrowdsale(uint256 _startTime, address _wallet, address _tokenAddress) public \n', '  {\n', '    //require(_startTime >=now);\n', '    require(_wallet != 0x0);\n', '    \n', '    weiRaised=0;\n', '    weiRaisedInPreICO=0;\n', '    startTime = _startTime;  \n', '    //startTime = now;\n', '    endTime = startTime + totalDurationInDays;\n', '    require(endTime >= startTime);\n', '   \n', '    owner = _wallet;\n', '\n', '    bonusPercInICOPhase1 = 30;\n', '    bonusPercInICOPhase2 = 20;\n', '    bonusPercInICOPhase3 = 10;\n', '    \n', '    token = TokenInterface(_tokenAddress);\n', '    maxTokensToSale=(token.totalSupply().mul(60)).div(100);\n', '    \n', '  }\n', '  \n', '  \n', '   // fallback function can be used to buy tokens\n', '   function () public  payable {\n', '     buyTokens(msg.sender);\n', '    }\n', '    \n', '    function determineBonus(uint tokens) internal view returns (uint256 bonus) \n', '    {\n', '        uint256 timeElapsed = now - startTime;\n', '        uint256 timeElapsedInDays = timeElapsed.div(1 days);\n', '\n', '        //Pre ICO Phase ( June 05 - 15 i.e. 11 days)\n', '       if (timeElapsedInDays <12)\n', '        {\n', '            bonus = 0;\n', '        }\n', '        //Break ( June 16 - July 30 i.e. 10 days)\n', '      else if (timeElapsedInDays >= 12 && timeElapsedInDays <27)\n', '        {\n', '            revert();\n', '        }\n', '        \n', '        //ICO phase 1 ( July 1 - July 10 i.e. 10 days)\n', '        else if (timeElapsedInDays >= 27 && timeElapsedInDays <37)\n', '        {\n', '            bonus = tokens.mul(bonusPercInICOPhase1); \n', '            bonus = bonus.div(100);\n', '            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\n', '        }\n', '        \n', '        //ICO phase 2 ( July 11- July 20 i.e. 10 days)\n', '        else if (timeElapsedInDays >= 37 && timeElapsedInDays<47)\n', '        {\n', '            bonus = tokens.mul(bonusPercInICOPhase2); \n', '            bonus = bonus.div(100);\n', '            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\n', '        }\n', '        \n', '        //ICO phase 3 ( July 21- July 30 i.e. 10 days)\n', '        else if (timeElapsedInDays >= 47 && timeElapsedInDays<57)\n', '        {\n', '            bonus = tokens.mul(bonusPercInICOPhase3); \n', '            bonus = bonus.div(100);\n', '            require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSale);\n', '        }\n', '        \n', '        else \n', '        {\n', '            bonus = 0;\n', '        }\n', '    }\n', '\n', '  // low level token purchase function\n', '  \n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(isCrowdsalePaused == false);\n', '    require(validPurchase());\n', '    require(msg.value>=1*10**18);\n', '    \n', '    require(TOKENS_SOLD<maxTokensToSale);\n', '   \n', '    uint256 weiAmount = msg.value;\n', '    uint256 timeElapsed = now - startTime;\n', '    uint256 timeElapsedInDays = timeElapsed.div(1 days);\n', '\n', '        //Pre ICO Phase ( June 05 - 15 i.e. 11 days)\n', '       if (timeElapsedInDays <12)\n', '        {\n', '            require(usersAddressForPreICO.length<=5000);\n', '            // checks if the user is sending eths the firt time\n', '            if(EthSentAgainstAddress[beneficiary]==0)\n', '            {\n', '                usersAddressForPreICO.push(beneficiary);\n', '            }\n', '            EthSentAgainstAddress[beneficiary]+=weiAmount; \n', '            // update state\n', '            weiRaised = weiRaised.add(weiAmount);\n', '            weiRaisedInPreICO = weiRaisedInPreICO.add(weiAmount);\n', '            forwardFunds();\n', '        }\n', '        //Break ( June 16 - July 30 i.e. 15 days)\n', '      else if (timeElapsedInDays >= 12 && timeElapsedInDays <27)\n', '        {\n', '            revert();\n', '        }\n', '      else {\n', '          \n', '           // calculate token amount to be created\n', '            uint256 tokens = weiAmount.mul(ratePerWei);\n', '            uint256 bonus = determineBonus(tokens);\n', '            tokens = tokens.add(bonus);\n', '            require(TOKENS_SOLD.add(tokens)<=maxTokensToSale);\n', '            \n', '            // update state\n', '            weiRaised = weiRaised.add(weiAmount);\n', '            \n', '            token.transfer(beneficiary,tokens);\n', '            emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\n', '            TOKENS_SOLD = TOKENS_SOLD.add(tokens);\n', '            forwardFunds();\n', '        \n', '       }\n', '   \n', '  \n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '  \n', '   /**\n', '    * function to change the end timestamp of the ico\n', '    * can only be called by owner wallet\n', '    **/\n', '    function changeEndDate(uint256 endTimeUnixTimestamp) public onlyOwner{\n', '        endTime = endTimeUnixTimestamp;\n', '    }\n', '    \n', '    /**\n', '    * function to change the start timestamp of the ico\n', '    * can only be called by owner wallet\n', '    **/\n', '    \n', '    function changeStartDate(uint256 startTimeUnixTimestamp) public onlyOwner{\n', '        startTime = startTimeUnixTimestamp;\n', '        changeEndDate(startTime+totalDurationInDays);\n', '    }\n', '    \n', '    /**\n', '    * function to change the rate of tokens\n', '    * can only be called by owner wallet\n', '    **/\n', '    function setPriceRate(uint256 newPrice) public onlyOwner {\n', '        ratePerWei = newPrice;\n', '    }\n', '    \n', '   \n', '     /**\n', '     * function to pause the crowdsale \n', '     * can only be called from owner wallet\n', '     **/\n', '     \n', '    function pauseCrowdsale() public onlyOwner {\n', '        isCrowdsalePaused = true;\n', '    }\n', '\n', '    /**\n', '     * function to resume the crowdsale if it is paused\n', '     * can only be called from owner wallet\n', '     **/ \n', '    function resumeCrowdsale() public onlyOwner {\n', '        isCrowdsalePaused = false;\n', '    }\n', '    \n', '  \n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Remaining tokens for sale\n', '     // ------------------------------------------------------------------------\n', '     function remainingTokensForSale() public constant returns (uint) {\n', '         return maxTokensToSale.sub(TOKENS_SOLD);\n', '     }\n', '    \n', '     \n', '     function burnUnsoldTokens() public onlyOwner \n', '     {\n', '         require(hasEnded());\n', '         uint value = remainingTokensForSale();\n', '         token.burn(value);\n', '         TOKENS_SOLD = maxTokensToSale;\n', '     }\n', '     \n', '    /**\n', '      * function through which owner can take back the tokens from the contract\n', '      **/ \n', '     function takeTokensBack() public onlyOwner\n', '     {\n', '         uint remainingTokensInTheContract = token.balanceOf(address(this));\n', '         token.transfer(owner,remainingTokensInTheContract);\n', '     }\n', '     \n', '     /**\n', '     * send PreICO bonus tokens in bulk to 5000 addresses\n', '     **/ \n', '    function BulkTransfer() public onlyOwner {\n', '        for(uint i = 0; i<usersAddressForPreICO.length; i++)\n', '        {\n', '            uint tks=(EthSentAgainstAddress[usersAddressForPreICO[i]].mul(1000000000*10**18)).div(weiRaisedInPreICO);            \n', '            token.transfer(usersAddressForPreICO[i],tks);\n', '        }\n', '    }\n', ' }']
