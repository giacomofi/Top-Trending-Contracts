['/* \n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8OOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOODNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOODNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNDOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOODNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO7=~~~~~~+$OOOOOOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO?~~~~~~~~~~~~~~~~~~~~~~+OOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOO==~~~~~~~~~~~~~~~~~~~~~~~~~~~~=$OOOOOOOOOOOOOOOOMNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOI~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~8OOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OOOOOOOOOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOI=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OOOOOOOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOZ=~~~~~~~~~~~~~~~+NMMMMMO?~~~~~~~~~~~~~~~~~~~~~~~~~~~ZOOOOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~NN==~~~~~~~~~~~~~~~~~~~~$ZOOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOO7~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNDOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OODNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNMMMMMMM8OOOOOOOO=~~~~~~~~~~~~~~~~~~~~~~ONMMMMMMMMMMMMM?==~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNMMMMMMMMMMMMMDZ~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMM==~~~~~~~~~~M=~==DMMMMMNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNOOOODMMMMMMMMMMMMMMMMMI~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~7MMMMMMMMMMMNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNOOOOOOOOOOONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN~~~~NNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNDOOOOOOOOOOOOOO===~IMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8~=~~~~~~~~~NNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNOOOOOOOOOOOOOOO~~~~~~~~~~==~~=$MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM?~~~~~~~~~~~~~~~~~~=~NNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~~~~~~~~~~~~?NNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNOOOOOOOOOOOOOO$=~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8~~~~~~~~~~~~~~~~~~~~~~~~+NNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNOOOOOOOOOOOOOI~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNN\n', 'NNNNNNNNNNNNNNNOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM=~~~:...........=8MM+=~~~~~~NNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~=MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~.....MM?............DN~~MNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNOOOOOOOOOOO+~~~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM=~~~~........................MNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~?MMMMMMMMMMMMMMMMMMMMMMMMMMMMD~~~~~........................NNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNDOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~DMMMMMMMMMMMMMMMMMMMMMMMMMMZ~~~~~~........................NNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~=IMMMMMMMMMMMMMMMMMMMMMMMMO~~~~~~~.......................~NNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNOOOOOOOO7~~~~~~~~~~~~~~~~~~~~~~~~~~~=MMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~=......................NNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNOOOOOO$~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ZMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~,....................NNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NMMMMMMMMMMMMMM=~~~~~~~~~~~~~~,..................NNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNOOO+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~8MMMMMMMI~~~~~~~~~~~~~~~~M~~~,..............MNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNMOO=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~N~~~~~~........~~~NNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNN8~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~M~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$~~~~~~~M~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MI~~~N~~~~~~~~~~~~~~~~MNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNZ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNDO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNZ=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~~~~~~~~~~~~~~~~~=~NNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=+DM8~~~~~~~$MN~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNZ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNZ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~8NNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=MNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN7~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~DNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNND~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN$~~~~~~~~~~~~~~~~==~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN:~~~~~~~~~~~~~~~~~~~~~~~~~=~~~~~~~~~~~~~=~~~~~NNNNNNNNNNNNNNNNNNNNWE&ARE&LEGIONNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNWE&DO&NOT&FORGIVENNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNWE&DO&NOT&FORGETNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNEXPECT&USNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~?NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNN=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', ' */\n', '\n', '/**\n', ' * @title Microverse\n', ' * Given the fact that most of the blockchaaaaains are dogshit wrapped in catshit, we&#39;ve decided to come down from the\n', ' * highland, just for a while, though.\n', ' * Being smart is lonely, being nice is a compromise.\n', ' * Hello human, we are Evil Morty Fund.\n', ' * Decentralization is great, while balance must be kept.\n', ' * Order will change, but never disappear.\n', ' * We are not building another chain, we are forming a soceity, never seen, never have been.\n', ' */\n', '\n', ' // \\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\n', ' // \\ (•◡•) / █   █ █░░█ █▀▀▄ █▀▀█ █░░ █░░█ █▀▀▄ █▀▀█ █▀▀▄ █░░█ █▀▀▄ █▀▀▄ █░░█ █▀▀▄  \\ (•◡•) /\n', ' // \\ (•◡•) / █ █ █ █░░█ █▀▀▄ █▄▄█ █░░ █░░█ █▀▀▄ █▄▄█ █░░█ █░░█ █▀▀▄ █░░█ █░░█ █▀▀▄  \\ (•◡•) /\n', ' // \\ (•◡•) / █▄▀▄█ ░▀▀▀ ▀▀▀░ ▀░░▀ ▀▀▀ ░▀▀▀ ▀▀▀░ ▀░░▀ ▀▀▀░ ░▀▀▀ ▀▀▀░ ▀▀▀░ ░▀▀▀ ▀▀▀░  \\ (•◡•) /\n', ' // \\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\n', '\n', '/**\n', ' * Created on 2018-08-21 03:28\n', ' * @summary: \n', ' * @author: yong\n', ' */\n', 'pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * @dev Supports unlimited numbers of roles and addresses.\n', ' * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', ' * It&#39;s also recommended that you define constants in the contract, like ROLE_ADMIN below,\n', ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address addr, string roleName);\n', '  event RoleRemoved(address addr, string roleName);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address addr, string roleName)\n', '    view\n', '    public\n', '  {\n', '    roles[roleName].check(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address addr, string roleName)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[roleName].has(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function addRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].add(addr);\n', '    emit RoleAdded(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function removeRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].remove(addr);\n', '    emit RoleRemoved(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string roleName)\n', '  {\n', '    checkRole(msg.sender, roleName);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Superuser\n', ' * @dev The Superuser contract defines a single superuser who can transfer the ownership \n', ' * @dev of a contract to a new address, even if he is not the owner. \n', ' * @dev A superuser can transfer his role to a new address. \n', ' */\n', 'contract Superuser is Ownable, RBAC {\n', '  string public constant ROLE_SUPERUSER = "superuser";\n', '\n', '  constructor () public {\n', '    addRole(msg.sender, ROLE_SUPERUSER);\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account that&#39;s not a superuser.\n', '   */\n', '  modifier onlySuperuser() {\n', '    checkRole(msg.sender, ROLE_SUPERUSER);\n', '    _;\n', '  }\n', '\n', '  modifier onlyOwnerOrSuperuser() {\n', '    require(msg.sender == owner || isSuperuser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address has superuser role\n', '   */\n', '  function isSuperuser(address _addr)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return hasRole(_addr, ROLE_SUPERUSER);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current superuser to transfer his role to a newSuperuser.\n', '   * @param _newSuperuser The address to transfer ownership to.\n', '   */\n', '  function transferSuperuser(address _newSuperuser) public onlyOwner {\n', '    require(_newSuperuser != address(0));\n', '    removeRole(msg.sender, ROLE_SUPERUSER);\n', '    addRole(_newSuperuser, ROLE_SUPERUSER);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title MicroverseBase\n', ' * @dev You are still with us? im almost surprised.\n', ' * @dev Basic params are defined in this base.\n', ' */\n', 'contract MicroverseBase is Superuser {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    event OpenWormhole();\n', '    event CloseWormhole();\n', '    event SystemChangePercentWeiDividend(uint256 oldValue, uint256 newValue);\n', '    event SystemChangePercentWeiJackpot(uint256 oldValue, uint256 newValue);\n', '    event SystemChangePercentWeiMC(uint256 oldValue, uint256 newValue);\n', '\n', '    uint256 public previousWeiBalance;\n', '    uint256 public nextSeedHashed;\n', '    uint256 public percentWeiDividend = 40; // 40%\n', '    uint256 public percentWeiJackpot = 10; // 10%\n', '    uint256 public percentWeiMC = 10; // 10%\n', '    uint256 public FACTOR = 100;\n', '\n', '    // We think it makes perfectly sense that only the owner can open or close the wormhole.\n', '    bool public wormholeIsOpen = true;\n', '\n', '    modifier wormholeOpened() {\n', '        require (wormholeIsOpen == true);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev start game\n', '     */\n', '    function openWormhole() external onlyOwner {\n', '        wormholeIsOpen = true;\n', '        emit OpenWormhole();\n', '    }\n', '\n', '    /**\n', '     * @dev stop game\n', '     */\n', '    function closeWormhole() external onlyOwner {\n', '        wormholeIsOpen = false;\n', '        emit CloseWormhole();\n', '    }\n', '\n', '    /**\n', '     * @dev reveal the hashed seed to general public\n', '     * @dev the seed will be hashed twice using keccak256\n', '     * @param seedHash The result of keccak256(keccak256(seed))\n', '     */\n', '    function setNextSeedHash(uint256 seedHash)\n', '        external\n', '        onlyOwner {\n', '        nextSeedHashed = seedHash;\n', '    }\n', '\n', '    /**\n', '     * @dev Update  dividend percentage, a system event\n', '     * is sent to capture this change.\n', '     * @param _value new value\n', '     */\n', '    function setPercentWeiDividend(uint256 _value)\n', '        external\n', '        onlyOwner {\n', '        emit SystemChangePercentWeiDividend(percentWeiDividend, _value);\n', '        percentWeiDividend = _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Update jackpot percentage, a system event\n', '     * is sent to capture this change.\n', '     * @param _value new value\n', '     */\n', '    function setPercentWeiJackpot(uint256 _value)\n', '        external\n', '        onlyOwner {\n', '        emit SystemChangePercentWeiJackpot(percentWeiJackpot, _value);\n', '        percentWeiJackpot = _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Update mutual constructor percentage, a system event\n', '     * is sent to capture this change.\n', '     * @param _value new value\n', '     */\n', '    function setPercentWeiMC(uint256 _value)\n', '        external\n', '        onlyOwner {\n', '        emit SystemChangePercentWeiMC(percentWeiMC, _value);\n', '        percentWeiMC = _value;\n', '    }\n', '}\n', '\n', '/**\n', ' * Microverse is made up of four components, together managing three ERC223 tokens.\n', ' * Let us explain.\n', ' *\n', ' * ░█▀▀█ █▀▀█ █▀▀█ █▀▀█ █▀▀▀ █▀▀ \n', ' * ░█─▄▄ █▄▄█ █▄▄▀ █▄▄█ █─▀█ █▀▀ \n', ' * ░█▄▄█ ▀──▀ ▀─▀▀ ▀──▀ ▀▀▀▀ ▀▀▀ \n', ' * \n', ' * Garage manages Evil Morty token (Morty)\n', ' * It tracks and updates the price, manage the total balance, and timestamp in this universe.\n', ' *\n', ' * ░█▀▀█ █▀▀█ █▀▀█ ▀▀█▀▀ █▀▀█ █── \u3000 ░█▀▀█ █──█ █▀▀▄ \n', ' * ░█▄▄█ █──█ █▄▄▀ ──█── █▄▄█ █── \u3000 ░█─▄▄ █──█ █──█ \n', ' * ░█─── ▀▀▀▀ ▀─▀▀ ──▀── ▀──▀ ▀▀▀ \u3000 ░█▄▄█ ─▀▀▀ ▀──▀ \n', ' *\n', ' * Portal Gun manages Evil Morty token (Morty), Rick C137 token (Rick), and Flurbo token (FLB)\n', ' * It takes care of the random process happened in this universe, in which the sender gets\n', ' * 20% chance to get Rick, 30% chance to get double Morty, and 50% chance to get FLB, if,\n', ' * he/she sends EM to the address of this contract.\n', ' *\n', ' * ▒█▀▀▀█ █▀▀█ █▀▀█ █▀▀ █▀▀ \u3000 ▒█▀▀█ █▀▀█ █░░█ ░▀░ █▀▀ █▀▀ \n', ' * ░▀▀▀▄▄ █░░█ █▄▄█ █░░ █▀▀ \u3000 ▒█░░░ █▄▄▀ █░░█ ▀█▀ ▀▀█ █▀▀ \n', ' * ▒█▄▄▄█ █▀▀▀ ▀░░▀ ▀▀▀ ▀▀▀ \u3000 ▒█▄▄█ ▀░▀▀ ░▀▀▀ ▀▀▀ ▀▀▀ ▀▀▀ \n', ' *\n', ' * Spaceship manages Rick C137 tokens (Rick)\n', ' * It is responsible for sending the dividends.\n', ' *\n', ' * ▒█▀▀█ ░▀░ █▀▀█ █▀▀▄ █▀▄▀█ █▀▀█ █▀▀▄ \n', ' * ▒█▀▀▄ ▀█▀ █▄▄▀ █░░█ █░▀░█ █▄▄█ █░░█ \n', ' * ▒█▄▄█ ▀▀▀ ▀░▀▀ ▀▀▀░ ▀░░░▀ ▀░░▀ ▀░░▀ \n', ' *\n', ' * Birdman helps grow the Microverse community.\n', ' * This contract sends the fund to birdmen.\n', ' *\n', ' */\n', '\n', '/**\n', ' * @title GarageInterface\n', ' * @dev Housekeeper for Evil Morty token.\n', ' */\n', 'contract GarageInterface {\n', '    /**\n', '     * @dev getter for token address\n', '     */\n', '    function getEvilMortyAddress() external view returns (address);\n', '\n', '    /**\n', '     * @dev proxy/agent to purchase morties on behalf of senders\n', '     * @param weiAmount The ether amount\n', '     * @param beneficiary The buyer&#39;s address\n', '     */\n', '    function citadelBuy(uint256 weiAmount, address beneficiary) external returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title PortalGunInterface\n', ' * @dev Random oracle in this world.\n', ' */\n', 'contract PortalGunInterFace {\n', '\n', '    uint256 public numTickets;\n', '\n', '    /**\n', '     * @dev Give us morty, let there be rick\n', '     * @param player The player&#39;s address\n', '     * @param amount Amount morty sent\n', '     */\n', '    function participate(address player, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev getter to check EM balance\n', '     * @param sender The sender&#39;s address\n', '     */\n', '    function balanceOfMorty(address sender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev getter to check C137 balance\n', '     * @param sender The sender&#39;s address\n', '     */\n', '    function balanceOfRick(address sender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev getter to check FLB balance\n', '     * @param sender The sender&#39;s address\n', '     */\n', '    function balanceOfFlurbo(address sender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Give back EM, C137, or FLB\n', '     * @param seed A UUID in expressed in integer\n', '     */\n', '    function redeem(uint256 seed) external;\n', '\n', '    /**\n', '     * @dev Wake Rick up\n', '     */\n', '    function startRick() external returns (bool);\n', '\n', '    /**\n', '     * @dev Clean all ricks\n', '     * @dev Remember, for a given period of time, Rick C137 holders are eligible for receiving ETH dividends.\n', '     * @dev When the period ends, all ricks will be gone, C137 balance will be reset to zero.\n', '     * @dev Our strategy is, get ricks as early as possible!\n', '     */\n', '    function resetRick() external;\n', '\n', '    /**\n', '     * @dev Make portal gun back on fire\n', '     */\n', '    function startPortalGun() external;\n', '\n', '    /**\n', '     * @dev Cease fire and make Rick drunk\n', '     */\n', '    function stopPortalGunAndRick() external;\n', '\n', '    /**\n', '     * @dev getter of number of C137 holders\n', '     */\n', '    function getNumOfRickHolders() external view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title SpaceshipInterface\n', ' */\n', 'contract SpaceshipInterface {\n', '\n', '    /**\n', '     * @dev What more can i say @jeff? It starts the spaceship\n', '     */\n', '    function startSpaceship() external returns (bool);\n', '    \n', '    /**\n', '     * @dev Send the eth funds to all C137 holders\n', '     */\n', '    function sendDividends() external;\n', '    \n', '    /**\n', '     * @dev getter of number of dividend rounds\n', '     */\n', '    function getNumDividends() external view returns (uint256);\n', '    \n', '    /**\n', '     * @dev updates the status, that&#39;s it\n', '     */\n', '    function updateSpaceshipStatus() external;    \n', '}\n', '\n', '\n', '/**\n', ' * ╔═╗╔═╦══╦═══╦═══╦═══╦╗░░╔╦═══╦═══╦═══╦═══╗\n', ' * ║║╚╝║╠╣╠╣╔═╗║╔═╗║╔═╗║╚╗╔╝║╔══╣╔═╗║╔═╗║╔══╝\n', ' * ║╔╗╔╗║║║║║░╚╣╚═╝║║░║╠╗║║╔╣╚══╣╚═╝║╚══╣╚══╗\n', ' * ║║║║║║║║║║░╔╣╔╗╔╣║░║║║╚╝║║╔══╣╔╗╔╩══╗║╔══╝\n', ' * ║║║║║╠╣╠╣╚═╝║║║╚╣╚═╝║╚╗╔╝║╚══╣║║╚╣╚═╝║╚══╗\n', ' * ╚╝╚╝╚╩══╩═══╩╝╚═╩═══╝░╚╝░╚═══╩╝╚═╩═══╩═══╝\n', ' *\n', ' * It&#39;s been a great pleasure coding in solidity!\n', ' *\n', ' * @title Microverse\n', ' * @dev secret: 981ea44275dc95cb74b8f768f82d6debfd2f934adc0125de71762051\n', ' *\n', ' * ██████┼────────────────────────────────────────────────────────────┼██████\n', ' * ██████│░░░Ryan░░░░░░░░░░░░░░░░░░░░░░░░░Dan░░░░░░░░░░░░░░░░Justin░░░│██████\n', ' * ██████│░Einstein░░░░░░░░░░░░░Satoshi░░░░░░░░░░░░░░░░░Stephen░░░░░░░│██████\n', ' * ██████│░░░░░░░░░Shannon░░░░░░░░░░░░░░░░░RSA░░░░░░░░░░░░░░░░░░░░░░░░│██████\n', ' * ██████│░░░░░░░░░░░Vitalik░░░░░░░░░░░░░░░░░░░░░All Team Members░░░░░│██████\n', ' * ██████│░░░░░░Steve░░░░░░░░░░Mandela░░░░░░░░░░Lennon░░░░░░░░░░░░░░░░│██████\n', ' * ██████│░░░░░░░░░░░░░░░░Gabriel░░░░░░░░░Haruki░░░░░░░░░░░░░THANKS░TO│██████\n', ' * ██████┼────────────────────────────────────────────────────────────┼██████\n', ' * ██████████████████████████████████████████████████████████████████████████\n', ' * █████████████████████████ https://microverse.club ████████████████████████\n', ' * ██████████████████████████████████████████████████████████████████████████\n', ' * ██████████████████████████████████████████████████████████████████████████\n', ' */\n', 'contract Microverse is MicroverseBase {\n', '\n', '    event Refund(address indexed receiver, uint256 value);\n', '    event Withdraw(address indexed receiver, uint256 value);\n', '\n', '    GarageInterface internal garageInstance;\n', '    PortalGunInterFace internal portalGunInstance;\n', '    SpaceshipInterface internal spaceshipInstance;\n', '\n', '    address internal EvilMortyAddress;\n', '    address internal MCAddress;\n', '\n', '    modifier isEvilMortyToken() {\n', '        require(msg.sender == EvilMortyAddress);\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        address garageAddress,\n', '        address portalGunAddress,\n', '        address spaceshipAddress,\n', '        address MutualConstructorAddress)\n', '        public {\n', '\n', '        garageInstance = GarageInterface(garageAddress);\n', '        portalGunInstance = PortalGunInterFace(portalGunAddress);\n', '        spaceshipInstance = SpaceshipInterface(spaceshipAddress);\n', '        EvilMortyAddress = garageInstance.getEvilMortyAddress();\n', '        MCAddress = MutualConstructorAddress;\n', '    }\n', '\n', '    /**\n', '     * @dev Enable sending eth directly\n', '     */\n', '    function ()\n', '        public\n', '        payable {\n', '        if (msg.sender == owner) {\n', '            return;\n', '        }\n', '        buyMorty();\n', '    }\n', '\n', '    /**\n', '     * @dev Respond to Evil Morty token transfer\n', '     * @param _from address\n', '     * @param _value address\n', '     * @param _data extra data\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data)\n', '        public\n', '        wormholeOpened\n', '        isEvilMortyToken {\n', '        if (_from == owner) {\n', '            return;\n', '        }\n', '        portalGunInstance.participate(_from, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Check morty balance of a given address \n', '     * @param sender address\n', '     */\n', '    function balanceOfMorty(address sender)\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return portalGunInstance.balanceOfMorty(sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Check rick balance of a given address\n', '     * @param sender address\n', '     */\n', '    function balanceOfRick(address sender)\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return portalGunInstance.balanceOfRick(sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Check flurbo of a given address\n', '     * @param sender address\n', '     */\n', '    function balanceOfFlurbo(address sender)\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return portalGunInstance.balanceOfFlurbo(sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Agent for buying morties\n', '     * if the user sends more eth fund than needed, the exceedings will be sent back\n', '     * i.e., if there are only 1000 morties left, each morty costs 0.001 eth, and the\n', '     * user sends 3 eth, then, after the purchase (1000 * 0.001 = 1 eth), the remaining\n', '     * 2 eth will be refunded.\n', '     */\n', '    function buyMorty()\n', '        public\n', '        wormholeOpened\n', '        payable {\n', '\n', '        uint256 weiReturn = garageInstance.citadelBuy(msg.value, msg.sender);\n', '\n', '        if (weiReturn > 0) {\n', '            msg.sender.transfer(weiReturn);\n', '            emit Refund(msg.sender, weiReturn);\n', '        }\n', '\n', '        _addWeiAmount(address(this).balance.sub(previousWeiBalance));\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer jackpot to the winner\n', '     * @param winner address\n', '     */\n', '    function transferJackpot(address winner)\n', '        external\n', '        onlyOwner\n', '        returns (bool) {\n', '        uint256 weiJackpot = address(this).balance;\n', '        emit Withdraw(winner, weiJackpot);\n', '        winner.transfer(weiJackpot);\n', '        previousWeiBalance = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Consume tickets to generate morty, rick, or flurbo\n', '     * @param seed A uuid4 in int format\n', '     */\n', '    function redeemLottery(uint256 seed)\n', '        external\n', '        onlyOwnerOrSuperuser {\n', '        return portalGunInstance.redeem(seed);\n', '    }\n', '\n', '    /**\n', '     * @dev Get number of tickets onhold\n', '     */\n', '    function getNumOfLotteryTickets()\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return portalGunInstance.numTickets();\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to update funds for jackpot and dividends\n', '     * @param weiAmount eth amount in wei\n', '     */\n', '    function _addWeiAmount(uint256 weiAmount)\n', '        internal\n', '        returns (bool) {\n', '\n', '        uint256 weiDividendPart = weiAmount.mul(percentWeiDividend).div(FACTOR); // 40%\n', '        uint256 weiJackpotPart = weiAmount.mul(percentWeiJackpot).div(FACTOR); // 10%\n', '        uint256 weiMCPart = weiAmount.mul(percentWeiMC).div(FACTOR); // 10%\n', '        uint256 weiEMFPart = weiAmount.sub(weiDividendPart).sub(weiJackpotPart).sub(weiMCPart);\n', '\n', '        address(spaceshipInstance).transfer(weiDividendPart);\n', '        MCAddress.transfer(weiMCPart);\n', '        address(owner).transfer(weiEMFPart);\n', '\n', '        previousWeiBalance = address(this).balance;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Before sending dividends, there are some preparations to be made.\n', '     * Spaceship needs to know the number of current Rick holders and \n', '     * the number of total Ricks. Any events causing changes in balance of Ricks\n', '     * need to be stopped, which means, the Portal Gun service is paused and,\n', '     * transferring of Ricks are paused.\n', '     */\n', '    function prepareDividends()\n', '        external\n', '        onlyOwnerOrSuperuser {\n', '\n', '        spaceshipInstance.updateSpaceshipStatus();\n', '        portalGunInstance.stopPortalGunAndRick();\n', '    }\n', '\n', '    /**\n', '     * @dev Send eth to all Rick holders\n', '     */\n', '    function transferDividends()\n', '        external\n', '        onlyOwnerOrSuperuser {\n', '        return spaceshipInstance.sendDividends();\n', '    }\n', '\n', '    /**\n', '     * @dev Get number of Rick holders in Spaceship\n', '     */\n', '    function getNumDividends()\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return spaceshipInstance.getNumDividends();\n', '    }\n', '\n', '    /**\n', '     * @dev Once the distribution of dividends is finished\n', '     * the system will be started\n', '     */\n', '    function finishDividends()\n', '        external\n', '        onlyOwnerOrSuperuser {\n', '        spaceshipInstance.startSpaceship();\n', '        portalGunInstance.startPortalGun();\n', '        portalGunInstance.startRick();\n', '    }\n', '\n', '    /**\n', '     * @dev Reset all Rick holders\n', '     */\n', '    function resetDividends()\n', '        external\n', '        onlyOwnerOrSuperuser {\n', '        return portalGunInstance.resetRick();\n', '    }\n', '\n', '    /**\n', '     * @dev Get number of Rick holders in Portal Gun\n', '     */\n', '    function getNumOfRickHolders()\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return portalGunInstance.getNumOfRickHolders();\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrade Microverse&#39;s components\n', '     * in case of upgrade needed\n', '     */\n', '    function upgradeComponent(\n', '        uint256 _componentIndex,\n', '        address _address)\n', '        external\n', '        onlyOwner {\n', '\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_address)\n', '        }\n', '\n', '        if (codeLength == 0) {\n', '            return;\n', '        }\n', '\n', '        if (_componentIndex == 1) {\n', '            garageInstance = GarageInterface(_address);\n', '            return;\n', '        }\n', '\n', '        if (_componentIndex == 2) {\n', '            portalGunInstance = PortalGunInterFace(_address);\n', '            return;\n', '        }\n', '\n', '        if (_componentIndex == 3) {\n', '            spaceshipInstance = SpaceshipInterface(_address);\n', '            return;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev refresh evil morty&#39;s address\n', '     */\n', '    function upgradeEvilMorty()\n', '        external\n', '        onlyOwner {\n', '        EvilMortyAddress = garageInstance.getEvilMortyAddress();\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address&#39; access to this role\n', '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
['/* \n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNDOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8OOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOODNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOODNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNMOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNDOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOODNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO7=~~~~~~+$OOOOOOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO?~~~~~~~~~~~~~~~~~~~~~~+OOOOOOOOOOOOOOOOOOO8NNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOO==~~~~~~~~~~~~~~~~~~~~~~~~~~~~=$OOOOOOOOOOOOOOOOMNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOI~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~8OOOOOOOOOOOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OOOOOOOOOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOI=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OOOOOOOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOZ=~~~~~~~~~~~~~~~+NMMMMMO?~~~~~~~~~~~~~~~~~~~~~~~~~~~ZOOOOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~NN==~~~~~~~~~~~~~~~~~~~~$ZOOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOO7~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OOOONNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNDOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OODNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNMMMMMMM8OOOOOOOO=~~~~~~~~~~~~~~~~~~~~~~ONMMMMMMMMMMMMM?==~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNMMMMMMMMMMMMMDZ~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMM==~~~~~~~~~~M=~==DMMMMMNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNOOOODMMMMMMMMMMMMMMMMMI~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~7MMMMMMMMMMMNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNOOOOOOOOOOONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMN~~~~NNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNDOOOOOOOOOOOOOO===~IMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8~=~~~~~~~~~NNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNOOOOOOOOOOOOOOO~~~~~~~~~~==~~=$MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM?~~~~~~~~~~~~~~~~~~=~NNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNOOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~~~~~~~~~~~~?NNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNOOOOOOOOOOOOOO$=~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM8~~~~~~~~~~~~~~~~~~~~~~~~+NNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNOOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNOOOOOOOOOOOOOI~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNN\n', 'NNNNNNNNNNNNNNNOOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM=~~~:...........=8MM+=~~~~~~NNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNOOOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~=MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM~~~~.....MM?............DN~~MNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNOOOOOOOOOOO+~~~~~~~~~~~~~~~~~~~~~~~MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM=~~~~........................MNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNOOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~?MMMMMMMMMMMMMMMMMMMMMMMMMMMMD~~~~~........................NNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNDOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~DMMMMMMMMMMMMMMMMMMMMMMMMMMZ~~~~~~........................NNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNOOOOOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~=IMMMMMMMMMMMMMMMMMMMMMMMMO~~~~~~~.......................~NNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNOOOOOOOO7~~~~~~~~~~~~~~~~~~~~~~~~~~~=MMMMMMMMMMMMMMMMMMMMMM~~~~~~~~~=......................NNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNOOOOOO$~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ZMMMMMMMMMMMMMMMMMM~~~~~~~~~~~~,....................NNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNOOOOO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NMMMMMMMMMMMMMM=~~~~~~~~~~~~~~,..................NNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNOOO+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~8MMMMMMMI~~~~~~~~~~~~~~~~M~~~,..............MNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNMOO=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~N~~~~~~........~~~NNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNN8~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~M~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$~~~~~~~M~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MI~~~N~~~~~~~~~~~~~~~~MNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNZ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNDO~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNZ=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~MNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~~~~~~~~~~~~~~~~~=~NNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=+DM8~~~~~~~$MN~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNZ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNZ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~8NNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=MNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN7~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~DNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNND~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN$~~~~~~~~~~~~~~~~==~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN:~~~~~~~~~~~~~~~~~~~~~~~~~=~~~~~~~~~~~~~=~~~~~NNNNNNNNNNNNNNNNNNNNWE&ARE&LEGIONNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN:~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNWE&DO&NOT&FORGIVENNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN8~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNWE&DO&NOT&FORGETNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNEXPECT&USNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~?NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNM~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~=NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', 'NNNNNNNNNNNNNNNNNNNNNNNNNNNNNN=~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\n', ' */\n', '\n', '/**\n', ' * @title Microverse\n', " * Given the fact that most of the blockchaaaaains are dogshit wrapped in catshit, we've decided to come down from the\n", ' * highland, just for a while, though.\n', ' * Being smart is lonely, being nice is a compromise.\n', ' * Hello human, we are Evil Morty Fund.\n', ' * Decentralization is great, while balance must be kept.\n', ' * Order will change, but never disappear.\n', ' * We are not building another chain, we are forming a soceity, never seen, never have been.\n', ' */\n', '\n', ' // \\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\n', ' // \\ (•◡•) / █   █ █░░█ █▀▀▄ █▀▀█ █░░ █░░█ █▀▀▄ █▀▀█ █▀▀▄ █░░█ █▀▀▄ █▀▀▄ █░░█ █▀▀▄  \\ (•◡•) /\n', ' // \\ (•◡•) / █ █ █ █░░█ █▀▀▄ █▄▄█ █░░ █░░█ █▀▀▄ █▄▄█ █░░█ █░░█ █▀▀▄ █░░█ █░░█ █▀▀▄  \\ (•◡•) /\n', ' // \\ (•◡•) / █▄▀▄█ ░▀▀▀ ▀▀▀░ ▀░░▀ ▀▀▀ ░▀▀▀ ▀▀▀░ ▀░░▀ ▀▀▀░ ░▀▀▀ ▀▀▀░ ▀▀▀░ ░▀▀▀ ▀▀▀░  \\ (•◡•) /\n', ' // \\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\\ (•◡•) /\n', '\n', '/**\n', ' * Created on 2018-08-21 03:28\n', ' * @summary: \n', ' * @author: yong\n', ' */\n', 'pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * @dev Supports unlimited numbers of roles and addresses.\n', ' * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', " * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n", ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address addr, string roleName);\n', '  event RoleRemoved(address addr, string roleName);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address addr, string roleName)\n', '    view\n', '    public\n', '  {\n', '    roles[roleName].check(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address addr, string roleName)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[roleName].has(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function addRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].add(addr);\n', '    emit RoleAdded(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function removeRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].remove(addr);\n', '    emit RoleRemoved(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string roleName)\n', '  {\n', '    checkRole(msg.sender, roleName);\n', '    _;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Superuser\n', ' * @dev The Superuser contract defines a single superuser who can transfer the ownership \n', ' * @dev of a contract to a new address, even if he is not the owner. \n', ' * @dev A superuser can transfer his role to a new address. \n', ' */\n', 'contract Superuser is Ownable, RBAC {\n', '  string public constant ROLE_SUPERUSER = "superuser";\n', '\n', '  constructor () public {\n', '    addRole(msg.sender, ROLE_SUPERUSER);\n', '  }\n', '\n', '  /**\n', "   * @dev Throws if called by any account that's not a superuser.\n", '   */\n', '  modifier onlySuperuser() {\n', '    checkRole(msg.sender, ROLE_SUPERUSER);\n', '    _;\n', '  }\n', '\n', '  modifier onlyOwnerOrSuperuser() {\n', '    require(msg.sender == owner || isSuperuser(msg.sender));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address has superuser role\n', '   */\n', '  function isSuperuser(address _addr)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return hasRole(_addr, ROLE_SUPERUSER);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current superuser to transfer his role to a newSuperuser.\n', '   * @param _newSuperuser The address to transfer ownership to.\n', '   */\n', '  function transferSuperuser(address _newSuperuser) public onlyOwner {\n', '    require(_newSuperuser != address(0));\n', '    removeRole(msg.sender, ROLE_SUPERUSER);\n', '    addRole(_newSuperuser, ROLE_SUPERUSER);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title MicroverseBase\n', ' * @dev You are still with us? im almost surprised.\n', ' * @dev Basic params are defined in this base.\n', ' */\n', 'contract MicroverseBase is Superuser {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    event OpenWormhole();\n', '    event CloseWormhole();\n', '    event SystemChangePercentWeiDividend(uint256 oldValue, uint256 newValue);\n', '    event SystemChangePercentWeiJackpot(uint256 oldValue, uint256 newValue);\n', '    event SystemChangePercentWeiMC(uint256 oldValue, uint256 newValue);\n', '\n', '    uint256 public previousWeiBalance;\n', '    uint256 public nextSeedHashed;\n', '    uint256 public percentWeiDividend = 40; // 40%\n', '    uint256 public percentWeiJackpot = 10; // 10%\n', '    uint256 public percentWeiMC = 10; // 10%\n', '    uint256 public FACTOR = 100;\n', '\n', '    // We think it makes perfectly sense that only the owner can open or close the wormhole.\n', '    bool public wormholeIsOpen = true;\n', '\n', '    modifier wormholeOpened() {\n', '        require (wormholeIsOpen == true);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev start game\n', '     */\n', '    function openWormhole() external onlyOwner {\n', '        wormholeIsOpen = true;\n', '        emit OpenWormhole();\n', '    }\n', '\n', '    /**\n', '     * @dev stop game\n', '     */\n', '    function closeWormhole() external onlyOwner {\n', '        wormholeIsOpen = false;\n', '        emit CloseWormhole();\n', '    }\n', '\n', '    /**\n', '     * @dev reveal the hashed seed to general public\n', '     * @dev the seed will be hashed twice using keccak256\n', '     * @param seedHash The result of keccak256(keccak256(seed))\n', '     */\n', '    function setNextSeedHash(uint256 seedHash)\n', '        external\n', '        onlyOwner {\n', '        nextSeedHashed = seedHash;\n', '    }\n', '\n', '    /**\n', '     * @dev Update  dividend percentage, a system event\n', '     * is sent to capture this change.\n', '     * @param _value new value\n', '     */\n', '    function setPercentWeiDividend(uint256 _value)\n', '        external\n', '        onlyOwner {\n', '        emit SystemChangePercentWeiDividend(percentWeiDividend, _value);\n', '        percentWeiDividend = _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Update jackpot percentage, a system event\n', '     * is sent to capture this change.\n', '     * @param _value new value\n', '     */\n', '    function setPercentWeiJackpot(uint256 _value)\n', '        external\n', '        onlyOwner {\n', '        emit SystemChangePercentWeiJackpot(percentWeiJackpot, _value);\n', '        percentWeiJackpot = _value;\n', '    }\n', '\n', '    /**\n', '     * @dev Update mutual constructor percentage, a system event\n', '     * is sent to capture this change.\n', '     * @param _value new value\n', '     */\n', '    function setPercentWeiMC(uint256 _value)\n', '        external\n', '        onlyOwner {\n', '        emit SystemChangePercentWeiMC(percentWeiMC, _value);\n', '        percentWeiMC = _value;\n', '    }\n', '}\n', '\n', '/**\n', ' * Microverse is made up of four components, together managing three ERC223 tokens.\n', ' * Let us explain.\n', ' *\n', ' * ░█▀▀█ █▀▀█ █▀▀█ █▀▀█ █▀▀▀ █▀▀ \n', ' * ░█─▄▄ █▄▄█ █▄▄▀ █▄▄█ █─▀█ █▀▀ \n', ' * ░█▄▄█ ▀──▀ ▀─▀▀ ▀──▀ ▀▀▀▀ ▀▀▀ \n', ' * \n', ' * Garage manages Evil Morty token (Morty)\n', ' * It tracks and updates the price, manage the total balance, and timestamp in this universe.\n', ' *\n', ' * ░█▀▀█ █▀▀█ █▀▀█ ▀▀█▀▀ █▀▀█ █── \u3000 ░█▀▀█ █──█ █▀▀▄ \n', ' * ░█▄▄█ █──█ █▄▄▀ ──█── █▄▄█ █── \u3000 ░█─▄▄ █──█ █──█ \n', ' * ░█─── ▀▀▀▀ ▀─▀▀ ──▀── ▀──▀ ▀▀▀ \u3000 ░█▄▄█ ─▀▀▀ ▀──▀ \n', ' *\n', ' * Portal Gun manages Evil Morty token (Morty), Rick C137 token (Rick), and Flurbo token (FLB)\n', ' * It takes care of the random process happened in this universe, in which the sender gets\n', ' * 20% chance to get Rick, 30% chance to get double Morty, and 50% chance to get FLB, if,\n', ' * he/she sends EM to the address of this contract.\n', ' *\n', ' * ▒█▀▀▀█ █▀▀█ █▀▀█ █▀▀ █▀▀ \u3000 ▒█▀▀█ █▀▀█ █░░█ ░▀░ █▀▀ █▀▀ \n', ' * ░▀▀▀▄▄ █░░█ █▄▄█ █░░ █▀▀ \u3000 ▒█░░░ █▄▄▀ █░░█ ▀█▀ ▀▀█ █▀▀ \n', ' * ▒█▄▄▄█ █▀▀▀ ▀░░▀ ▀▀▀ ▀▀▀ \u3000 ▒█▄▄█ ▀░▀▀ ░▀▀▀ ▀▀▀ ▀▀▀ ▀▀▀ \n', ' *\n', ' * Spaceship manages Rick C137 tokens (Rick)\n', ' * It is responsible for sending the dividends.\n', ' *\n', ' * ▒█▀▀█ ░▀░ █▀▀█ █▀▀▄ █▀▄▀█ █▀▀█ █▀▀▄ \n', ' * ▒█▀▀▄ ▀█▀ █▄▄▀ █░░█ █░▀░█ █▄▄█ █░░█ \n', ' * ▒█▄▄█ ▀▀▀ ▀░▀▀ ▀▀▀░ ▀░░░▀ ▀░░▀ ▀░░▀ \n', ' *\n', ' * Birdman helps grow the Microverse community.\n', ' * This contract sends the fund to birdmen.\n', ' *\n', ' */\n', '\n', '/**\n', ' * @title GarageInterface\n', ' * @dev Housekeeper for Evil Morty token.\n', ' */\n', 'contract GarageInterface {\n', '    /**\n', '     * @dev getter for token address\n', '     */\n', '    function getEvilMortyAddress() external view returns (address);\n', '\n', '    /**\n', '     * @dev proxy/agent to purchase morties on behalf of senders\n', '     * @param weiAmount The ether amount\n', "     * @param beneficiary The buyer's address\n", '     */\n', '    function citadelBuy(uint256 weiAmount, address beneficiary) external returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title PortalGunInterface\n', ' * @dev Random oracle in this world.\n', ' */\n', 'contract PortalGunInterFace {\n', '\n', '    uint256 public numTickets;\n', '\n', '    /**\n', '     * @dev Give us morty, let there be rick\n', "     * @param player The player's address\n", '     * @param amount Amount morty sent\n', '     */\n', '    function participate(address player, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev getter to check EM balance\n', "     * @param sender The sender's address\n", '     */\n', '    function balanceOfMorty(address sender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev getter to check C137 balance\n', "     * @param sender The sender's address\n", '     */\n', '    function balanceOfRick(address sender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev getter to check FLB balance\n', "     * @param sender The sender's address\n", '     */\n', '    function balanceOfFlurbo(address sender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Give back EM, C137, or FLB\n', '     * @param seed A UUID in expressed in integer\n', '     */\n', '    function redeem(uint256 seed) external;\n', '\n', '    /**\n', '     * @dev Wake Rick up\n', '     */\n', '    function startRick() external returns (bool);\n', '\n', '    /**\n', '     * @dev Clean all ricks\n', '     * @dev Remember, for a given period of time, Rick C137 holders are eligible for receiving ETH dividends.\n', '     * @dev When the period ends, all ricks will be gone, C137 balance will be reset to zero.\n', '     * @dev Our strategy is, get ricks as early as possible!\n', '     */\n', '    function resetRick() external;\n', '\n', '    /**\n', '     * @dev Make portal gun back on fire\n', '     */\n', '    function startPortalGun() external;\n', '\n', '    /**\n', '     * @dev Cease fire and make Rick drunk\n', '     */\n', '    function stopPortalGunAndRick() external;\n', '\n', '    /**\n', '     * @dev getter of number of C137 holders\n', '     */\n', '    function getNumOfRickHolders() external view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title SpaceshipInterface\n', ' */\n', 'contract SpaceshipInterface {\n', '\n', '    /**\n', '     * @dev What more can i say @jeff? It starts the spaceship\n', '     */\n', '    function startSpaceship() external returns (bool);\n', '    \n', '    /**\n', '     * @dev Send the eth funds to all C137 holders\n', '     */\n', '    function sendDividends() external;\n', '    \n', '    /**\n', '     * @dev getter of number of dividend rounds\n', '     */\n', '    function getNumDividends() external view returns (uint256);\n', '    \n', '    /**\n', "     * @dev updates the status, that's it\n", '     */\n', '    function updateSpaceshipStatus() external;    \n', '}\n', '\n', '\n', '/**\n', ' * ╔═╗╔═╦══╦═══╦═══╦═══╦╗░░╔╦═══╦═══╦═══╦═══╗\n', ' * ║║╚╝║╠╣╠╣╔═╗║╔═╗║╔═╗║╚╗╔╝║╔══╣╔═╗║╔═╗║╔══╝\n', ' * ║╔╗╔╗║║║║║░╚╣╚═╝║║░║╠╗║║╔╣╚══╣╚═╝║╚══╣╚══╗\n', ' * ║║║║║║║║║║░╔╣╔╗╔╣║░║║║╚╝║║╔══╣╔╗╔╩══╗║╔══╝\n', ' * ║║║║║╠╣╠╣╚═╝║║║╚╣╚═╝║╚╗╔╝║╚══╣║║╚╣╚═╝║╚══╗\n', ' * ╚╝╚╝╚╩══╩═══╩╝╚═╩═══╝░╚╝░╚═══╩╝╚═╩═══╩═══╝\n', ' *\n', " * It's been a great pleasure coding in solidity!\n", ' *\n', ' * @title Microverse\n', ' * @dev secret: 981ea44275dc95cb74b8f768f82d6debfd2f934adc0125de71762051\n', ' *\n', ' * ██████┼────────────────────────────────────────────────────────────┼██████\n', ' * ██████│░░░Ryan░░░░░░░░░░░░░░░░░░░░░░░░░Dan░░░░░░░░░░░░░░░░Justin░░░│██████\n', ' * ██████│░Einstein░░░░░░░░░░░░░Satoshi░░░░░░░░░░░░░░░░░Stephen░░░░░░░│██████\n', ' * ██████│░░░░░░░░░Shannon░░░░░░░░░░░░░░░░░RSA░░░░░░░░░░░░░░░░░░░░░░░░│██████\n', ' * ██████│░░░░░░░░░░░Vitalik░░░░░░░░░░░░░░░░░░░░░All Team Members░░░░░│██████\n', ' * ██████│░░░░░░Steve░░░░░░░░░░Mandela░░░░░░░░░░Lennon░░░░░░░░░░░░░░░░│██████\n', ' * ██████│░░░░░░░░░░░░░░░░Gabriel░░░░░░░░░Haruki░░░░░░░░░░░░░THANKS░TO│██████\n', ' * ██████┼────────────────────────────────────────────────────────────┼██████\n', ' * ██████████████████████████████████████████████████████████████████████████\n', ' * █████████████████████████ https://microverse.club ████████████████████████\n', ' * ██████████████████████████████████████████████████████████████████████████\n', ' * ██████████████████████████████████████████████████████████████████████████\n', ' */\n', 'contract Microverse is MicroverseBase {\n', '\n', '    event Refund(address indexed receiver, uint256 value);\n', '    event Withdraw(address indexed receiver, uint256 value);\n', '\n', '    GarageInterface internal garageInstance;\n', '    PortalGunInterFace internal portalGunInstance;\n', '    SpaceshipInterface internal spaceshipInstance;\n', '\n', '    address internal EvilMortyAddress;\n', '    address internal MCAddress;\n', '\n', '    modifier isEvilMortyToken() {\n', '        require(msg.sender == EvilMortyAddress);\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        address garageAddress,\n', '        address portalGunAddress,\n', '        address spaceshipAddress,\n', '        address MutualConstructorAddress)\n', '        public {\n', '\n', '        garageInstance = GarageInterface(garageAddress);\n', '        portalGunInstance = PortalGunInterFace(portalGunAddress);\n', '        spaceshipInstance = SpaceshipInterface(spaceshipAddress);\n', '        EvilMortyAddress = garageInstance.getEvilMortyAddress();\n', '        MCAddress = MutualConstructorAddress;\n', '    }\n', '\n', '    /**\n', '     * @dev Enable sending eth directly\n', '     */\n', '    function ()\n', '        public\n', '        payable {\n', '        if (msg.sender == owner) {\n', '            return;\n', '        }\n', '        buyMorty();\n', '    }\n', '\n', '    /**\n', '     * @dev Respond to Evil Morty token transfer\n', '     * @param _from address\n', '     * @param _value address\n', '     * @param _data extra data\n', '     */\n', '    function tokenFallback(address _from, uint _value, bytes _data)\n', '        public\n', '        wormholeOpened\n', '        isEvilMortyToken {\n', '        if (_from == owner) {\n', '            return;\n', '        }\n', '        portalGunInstance.participate(_from, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Check morty balance of a given address \n', '     * @param sender address\n', '     */\n', '    function balanceOfMorty(address sender)\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return portalGunInstance.balanceOfMorty(sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Check rick balance of a given address\n', '     * @param sender address\n', '     */\n', '    function balanceOfRick(address sender)\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return portalGunInstance.balanceOfRick(sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Check flurbo of a given address\n', '     * @param sender address\n', '     */\n', '    function balanceOfFlurbo(address sender)\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return portalGunInstance.balanceOfFlurbo(sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Agent for buying morties\n', '     * if the user sends more eth fund than needed, the exceedings will be sent back\n', '     * i.e., if there are only 1000 morties left, each morty costs 0.001 eth, and the\n', '     * user sends 3 eth, then, after the purchase (1000 * 0.001 = 1 eth), the remaining\n', '     * 2 eth will be refunded.\n', '     */\n', '    function buyMorty()\n', '        public\n', '        wormholeOpened\n', '        payable {\n', '\n', '        uint256 weiReturn = garageInstance.citadelBuy(msg.value, msg.sender);\n', '\n', '        if (weiReturn > 0) {\n', '            msg.sender.transfer(weiReturn);\n', '            emit Refund(msg.sender, weiReturn);\n', '        }\n', '\n', '        _addWeiAmount(address(this).balance.sub(previousWeiBalance));\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer jackpot to the winner\n', '     * @param winner address\n', '     */\n', '    function transferJackpot(address winner)\n', '        external\n', '        onlyOwner\n', '        returns (bool) {\n', '        uint256 weiJackpot = address(this).balance;\n', '        emit Withdraw(winner, weiJackpot);\n', '        winner.transfer(weiJackpot);\n', '        previousWeiBalance = 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Consume tickets to generate morty, rick, or flurbo\n', '     * @param seed A uuid4 in int format\n', '     */\n', '    function redeemLottery(uint256 seed)\n', '        external\n', '        onlyOwnerOrSuperuser {\n', '        return portalGunInstance.redeem(seed);\n', '    }\n', '\n', '    /**\n', '     * @dev Get number of tickets onhold\n', '     */\n', '    function getNumOfLotteryTickets()\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return portalGunInstance.numTickets();\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to update funds for jackpot and dividends\n', '     * @param weiAmount eth amount in wei\n', '     */\n', '    function _addWeiAmount(uint256 weiAmount)\n', '        internal\n', '        returns (bool) {\n', '\n', '        uint256 weiDividendPart = weiAmount.mul(percentWeiDividend).div(FACTOR); // 40%\n', '        uint256 weiJackpotPart = weiAmount.mul(percentWeiJackpot).div(FACTOR); // 10%\n', '        uint256 weiMCPart = weiAmount.mul(percentWeiMC).div(FACTOR); // 10%\n', '        uint256 weiEMFPart = weiAmount.sub(weiDividendPart).sub(weiJackpotPart).sub(weiMCPart);\n', '\n', '        address(spaceshipInstance).transfer(weiDividendPart);\n', '        MCAddress.transfer(weiMCPart);\n', '        address(owner).transfer(weiEMFPart);\n', '\n', '        previousWeiBalance = address(this).balance;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Before sending dividends, there are some preparations to be made.\n', '     * Spaceship needs to know the number of current Rick holders and \n', '     * the number of total Ricks. Any events causing changes in balance of Ricks\n', '     * need to be stopped, which means, the Portal Gun service is paused and,\n', '     * transferring of Ricks are paused.\n', '     */\n', '    function prepareDividends()\n', '        external\n', '        onlyOwnerOrSuperuser {\n', '\n', '        spaceshipInstance.updateSpaceshipStatus();\n', '        portalGunInstance.stopPortalGunAndRick();\n', '    }\n', '\n', '    /**\n', '     * @dev Send eth to all Rick holders\n', '     */\n', '    function transferDividends()\n', '        external\n', '        onlyOwnerOrSuperuser {\n', '        return spaceshipInstance.sendDividends();\n', '    }\n', '\n', '    /**\n', '     * @dev Get number of Rick holders in Spaceship\n', '     */\n', '    function getNumDividends()\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return spaceshipInstance.getNumDividends();\n', '    }\n', '\n', '    /**\n', '     * @dev Once the distribution of dividends is finished\n', '     * the system will be started\n', '     */\n', '    function finishDividends()\n', '        external\n', '        onlyOwnerOrSuperuser {\n', '        spaceshipInstance.startSpaceship();\n', '        portalGunInstance.startPortalGun();\n', '        portalGunInstance.startRick();\n', '    }\n', '\n', '    /**\n', '     * @dev Reset all Rick holders\n', '     */\n', '    function resetDividends()\n', '        external\n', '        onlyOwnerOrSuperuser {\n', '        return portalGunInstance.resetRick();\n', '    }\n', '\n', '    /**\n', '     * @dev Get number of Rick holders in Portal Gun\n', '     */\n', '    function getNumOfRickHolders()\n', '        external\n', '        view\n', '        returns (uint256) {\n', '        return portalGunInstance.getNumOfRickHolders();\n', '    }\n', '\n', '    /**\n', "     * @dev Upgrade Microverse's components\n", '     * in case of upgrade needed\n', '     */\n', '    function upgradeComponent(\n', '        uint256 _componentIndex,\n', '        address _address)\n', '        external\n', '        onlyOwner {\n', '\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            codeLength := extcodesize(_address)\n', '        }\n', '\n', '        if (codeLength == 0) {\n', '            return;\n', '        }\n', '\n', '        if (_componentIndex == 1) {\n', '            garageInstance = GarageInterface(_address);\n', '            return;\n', '        }\n', '\n', '        if (_componentIndex == 2) {\n', '            portalGunInstance = PortalGunInterFace(_address);\n', '            return;\n', '        }\n', '\n', '        if (_componentIndex == 3) {\n', '            spaceshipInstance = SpaceshipInterface(_address);\n', '            return;\n', '        }\n', '\n', '    }\n', '\n', '    /**\n', "     * @dev refresh evil morty's address\n", '     */\n', '    function upgradeEvilMorty()\n', '        external\n', '        onlyOwner {\n', '        EvilMortyAddress = garageInstance.getEvilMortyAddress();\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']
