['pragma solidity ^0.4.19;\n', '\n', 'contract DigixConstants {\n', '  /// general constants\n', '  uint256 constant SECONDS_IN_A_DAY = 24 * 60 * 60;\n', '\n', '  /// asset events\n', '  uint256 constant ASSET_EVENT_CREATED_VENDOR_ORDER = 1;\n', '  uint256 constant ASSET_EVENT_CREATED_TRANSFER_ORDER = 2;\n', '  uint256 constant ASSET_EVENT_CREATED_REPLACEMENT_ORDER = 3;\n', '  uint256 constant ASSET_EVENT_FULFILLED_VENDOR_ORDER = 4;\n', '  uint256 constant ASSET_EVENT_FULFILLED_TRANSFER_ORDER = 5;\n', '  uint256 constant ASSET_EVENT_FULFILLED_REPLACEMENT_ORDER = 6;\n', '  uint256 constant ASSET_EVENT_MINTED = 7;\n', '  uint256 constant ASSET_EVENT_MINTED_REPLACEMENT = 8;\n', '  uint256 constant ASSET_EVENT_RECASTED = 9;\n', '  uint256 constant ASSET_EVENT_REDEEMED = 10;\n', '  uint256 constant ASSET_EVENT_FAILED_AUDIT = 11;\n', '  uint256 constant ASSET_EVENT_ADMIN_FAILED = 12;\n', '  uint256 constant ASSET_EVENT_REMINTED = 13;\n', '\n', '  /// roles\n', '  uint256 constant ROLE_ZERO_ANYONE = 0;\n', '  uint256 constant ROLE_ROOT = 1;\n', '  uint256 constant ROLE_VENDOR = 2;\n', '  uint256 constant ROLE_XFERAUTH = 3;\n', '  uint256 constant ROLE_POPADMIN = 4;\n', '  uint256 constant ROLE_CUSTODIAN = 5;\n', '  uint256 constant ROLE_AUDITOR = 6;\n', '  uint256 constant ROLE_MARKETPLACE_ADMIN = 7;\n', '  uint256 constant ROLE_KYC_ADMIN = 8;\n', '  uint256 constant ROLE_FEES_ADMIN = 9;\n', '  uint256 constant ROLE_DOCS_UPLOADER = 10;\n', '  uint256 constant ROLE_KYC_RECASTER = 11;\n', '  uint256 constant ROLE_FEES_DISTRIBUTION_ADMIN = 12;\n', '\n', '  /// states\n', '  uint256 constant STATE_ZERO_UNDEFINED = 0;\n', '  uint256 constant STATE_CREATED = 1;\n', '  uint256 constant STATE_VENDOR_ORDER = 2;\n', '  uint256 constant STATE_TRANSFER = 3;\n', '  uint256 constant STATE_CUSTODIAN_DELIVERY = 4;\n', '  uint256 constant STATE_MINTED = 5;\n', '  uint256 constant STATE_AUDIT_FAILURE = 6;\n', '  uint256 constant STATE_REPLACEMENT_ORDER = 7;\n', '  uint256 constant STATE_REPLACEMENT_DELIVERY = 8;\n', '  uint256 constant STATE_RECASTED = 9;\n', '  uint256 constant STATE_REDEEMED = 10;\n', '  uint256 constant STATE_ADMIN_FAILURE = 11;\n', '\n', '  /// interactive contracts\n', '  bytes32 constant CONTRACT_INTERACTIVE_ASSETS_EXPLORER = "i:asset:explorer";\n', '  bytes32 constant CONTRACT_INTERACTIVE_DIGIX_DIRECTORY = "i:directory";\n', '  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE = "i:mp";\n', '  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN = "i:mpadmin";\n', '  bytes32 constant CONTRACT_INTERACTIVE_POPADMIN = "i:popadmin";\n', '  bytes32 constant CONTRACT_INTERACTIVE_PRODUCTS_LIST = "i:products";\n', '  bytes32 constant CONTRACT_INTERACTIVE_TOKEN = "i:token";\n', '  bytes32 constant CONTRACT_INTERACTIVE_BULK_WRAPPER = "i:bulk-wrapper";\n', '  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_CONFIG = "i:token:config";\n', '  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_INFORMATION = "i:token:information";\n', '  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_INFORMATION = "i:mp:information";\n', '  bytes32 constant CONTRACT_INTERACTIVE_IDENTITY = "i:identity";\n', '\n', '  /// controller contracts\n', '  bytes32 constant CONTRACT_CONTROLLER_ASSETS = "c:asset";\n', '  bytes32 constant CONTRACT_CONTROLLER_ASSETS_RECAST = "c:asset:recast";\n', '  bytes32 constant CONTRACT_CONTROLLER_ASSETS_EXPLORER = "c:explorer";\n', '  bytes32 constant CONTRACT_CONTROLLER_DIGIX_DIRECTORY = "c:directory";\n', '  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE = "c:mp";\n', '  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN = "c:mpadmin";\n', '  bytes32 constant CONTRACT_CONTROLLER_PRODUCTS_LIST = "c:products";\n', '\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_APPROVAL = "c:token:approval";\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_CONFIG = "c:token:config";\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_INFO = "c:token:info";\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_TRANSFER = "c:token:transfer";\n', '\n', '  bytes32 constant CONTRACT_CONTROLLER_JOB_ID = "c:jobid";\n', '  bytes32 constant CONTRACT_CONTROLLER_IDENTITY = "c:identity";\n', '\n', '  /// storage contracts\n', '  bytes32 constant CONTRACT_STORAGE_ASSETS = "s:asset";\n', '  bytes32 constant CONTRACT_STORAGE_ASSET_EVENTS = "s:asset:events";\n', '  bytes32 constant CONTRACT_STORAGE_DIGIX_DIRECTORY = "s:directory";\n', '  bytes32 constant CONTRACT_STORAGE_MARKETPLACE = "s:mp";\n', '  bytes32 constant CONTRACT_STORAGE_PRODUCTS_LIST = "s:products";\n', '  bytes32 constant CONTRACT_STORAGE_GOLD_TOKEN = "s:goldtoken";\n', '  bytes32 constant CONTRACT_STORAGE_JOB_ID = "s:jobid";\n', '  bytes32 constant CONTRACT_STORAGE_IDENTITY = "s:identity";\n', '\n', '  /// service contracts\n', '  bytes32 constant CONTRACT_SERVICE_TOKEN_DEMURRAGE = "sv:tdemurrage";\n', '  bytes32 constant CONTRACT_SERVICE_MARKETPLACE = "sv:mp";\n', '  bytes32 constant CONTRACT_SERVICE_DIRECTORY = "sv:directory";\n', '\n', '  /// fees distributors\n', '  bytes32 constant CONTRACT_DEMURRAGE_FEES_DISTRIBUTOR = "fees:distributor:demurrage";\n', '  bytes32 constant CONTRACT_RECAST_FEES_DISTRIBUTOR = "fees:distributor:recast";\n', '  bytes32 constant CONTRACT_TRANSFER_FEES_DISTRIBUTOR = "fees:distributor:transfer";\n', '}\n', '\n', 'contract ContractResolver {\n', '  address public owner;\n', '  bool public locked;\n', '  function init_register_contract(bytes32 _key, address _contract_address) public returns (bool _success);\n', '  function unregister_contract(bytes32 _key) public returns (bool _success);\n', '  function get_contract(bytes32 _key) public constant returns (address _contract);\n', '}\n', '\n', 'contract ResolverClient {\n', '\n', '  /// The address of the resolver contract for this project\n', '  address public resolver;\n', '  /// The key to identify this contract\n', '  bytes32 public key;\n', '\n', '  /// Make our own address available to us as a constant\n', '  address public CONTRACT_ADDRESS;\n', '\n', '  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\n', '  /// @param _contract The resolver key\n', '  modifier if_sender_is(bytes32 _contract) {\n', '    require(msg.sender == ContractResolver(resolver).get_contract(_contract));\n', '    _;\n', '  }\n', '\n', '  /// Function modifier to check resolver&#39;s locking status.\n', '  modifier unless_resolver_is_locked() {\n', '    require(is_locked() == false);\n', '    _;\n', '  }\n', '\n', '  /// @dev Initialize new contract\n', '  /// @param _key the resolver key for this contract\n', '  /// @return _success if the initialization is successful\n', '  function init(bytes32 _key, address _resolver)\n', '           internal\n', '           returns (bool _success)\n', '  {\n', '    bool _is_locked = ContractResolver(_resolver).locked();\n', '    if (_is_locked == false) {\n', '      CONTRACT_ADDRESS = address(this);\n', '      resolver = _resolver;\n', '      key = _key;\n', '      require(ContractResolver(resolver).init_register_contract(key, CONTRACT_ADDRESS));\n', '      _success = true;\n', '    }  else {\n', '      _success = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Destroy the contract and unregister self from the ContractResolver\n', '  /// @dev Can only be called by the owner of ContractResolver\n', '  function destroy()\n', '           public\n', '           returns (bool _success)\n', '  {\n', '    bool _is_locked = ContractResolver(resolver).locked();\n', '    require(!_is_locked);\n', '\n', '    address _owner_of_contract_resolver = ContractResolver(resolver).owner();\n', '    require(msg.sender == _owner_of_contract_resolver);\n', '\n', '    _success = ContractResolver(resolver).unregister_contract(key);\n', '    require(_success);\n', '\n', '    selfdestruct(_owner_of_contract_resolver);\n', '  }\n', '\n', '  /// @dev Check if resolver is locked\n', '  /// @return _locked if the resolver is currently locked\n', '  function is_locked()\n', '           private\n', '           constant\n', '           returns (bool _locked)\n', '  {\n', '    _locked = ContractResolver(resolver).locked();\n', '  }\n', '\n', '  /// @dev Get the address of a contract\n', '  /// @param _key the resolver key to look up\n', '  /// @return _contract the address of the contract\n', '  function get_contract(bytes32 _key)\n', '           public\n', '           constant\n', '           returns (address _contract)\n', '  {\n', '    _contract = ContractResolver(resolver).get_contract(_key);\n', '  }\n', '}\n', '\n', 'contract GoldTokenStorage {\n', '  function read_collectors_addresses() constant public returns (address[3] _collectors);\n', '  function read_demurrage_config_underlying() public constant returns (uint256 _base, uint256 _rate, address _collector, bool _no_demurrage_fee);\n', '  function read_recast_config() constant public returns (uint256 _base, uint256 _rate, uint256 _total_supply, uint256 _effective_total_supply, address _collector, uint256 _collector_balance);\n', '  function read_transfer_config() public constant returns (uint256 _collector_balance, uint256 _base, uint256 _rate, address _collector, bool _no_transfer_fee, uint256 _minimum_transfer_amount);\n', '}\n', '\n', 'contract ERCTwenty {\n', '  function balanceOf( address who ) constant public returns (uint value);\n', '}\n', '\n', '/// @title Digix Gold Token&#39;s Information\n', '/// @author Digix Holdings Pte Ltd\n', '/// @notice This contract is used to read configs and information related to the Digix Gold Token\n', 'contract TokenInformation is ResolverClient, DigixConstants {\n', '\n', '  function TokenInformation(address _resolver) public\n', '  {\n', '    require(init(CONTRACT_INTERACTIVE_TOKEN_INFORMATION, _resolver));\n', '  }\n', '\n', '  function gold_token_storage()\n', '           internal\n', '           constant\n', '           returns (GoldTokenStorage _contract)\n', '  {\n', '    _contract = GoldTokenStorage(get_contract(CONTRACT_STORAGE_GOLD_TOKEN));\n', '  }\n', '\n', '  function token()\n', '           internal\n', '           constant\n', '           returns (ERCTwenty _contract)\n', '  {\n', '    _contract = ERCTwenty(get_contract(CONTRACT_INTERACTIVE_TOKEN));\n', '  }\n', '\n', '  /// @dev read the addresses of the fees collectors\n', '  /// @return _collectors the addresses (_collectors[0] = demurrage, _collectors[1] = recast, _collectors[2] = transfer)\n', '  function showCollectorsAddresses()\n', '           public\n', '           constant\n', '           returns (address[3] _collectors)\n', '  {\n', '    // order: demurrage, recast, transfer\n', '    _collectors = gold_token_storage().read_collectors_addresses();\n', '  }\n', '\n', '  /// @dev read the balances of the fees collectors addresses\n', '  /// @return _balances the balances (_balances[0] = demurrage, _balances[1] = recast, _balances[2] = transfer)\n', '  function showCollectorsBalances()\n', '           public\n', '           constant\n', '           returns (uint256[3] _balances)\n', '  {\n', '    // order: demurrage, recast, transfer\n', '    address[3] memory _collectors = showCollectorsAddresses();\n', '    for (uint256 i=0;i<3;i++) {\n', '      _balances[i] = token().balanceOf(_collectors[i]);\n', '    }\n', '  }\n', '\n', '  /// @dev read the demurrage configurations\n', '  /// @return {\n', '  ///   "_base": "denominator for calculating demurrage fees",\n', '  ///   "_rate": "numerator for calculating demurrage fees",\n', '  ///   "_collector": "ethereum address of the demurrage fees collector"\n', '  ///   "_no_demurrage_fee": "true if demurrage fees is turned off globally"\n', '  /// }\n', '  function showDemurrageConfigs()\n', '           public\n', '           constant\n', '           returns (uint256 _base, uint256 _rate, address _collector, bool _no_demurrage_fee)\n', '  {\n', '    (_base, _rate, _collector, _no_demurrage_fee) = gold_token_storage().read_demurrage_config_underlying();\n', '  }\n', '\n', '  /// @dev read the recast configurations\n', '  /// @return {\n', '  ///   "_base": "denominator for calculating recast fees",\n', '  ///   "_rate": "numerator for calculating recast fees",\n', '  ///   "_collector": "ethereum address of the recast fees collector"\n', '  /// }\n', '  function showRecastConfigs()\n', '           public\n', '           constant\n', '           returns (uint256 _base, uint256 _rate, address _collector)\n', '  {\n', '    (_base, _rate,,, _collector,) = gold_token_storage().read_recast_config();\n', '  }\n', '\n', '  /// @dev read transfer configurations\n', '  /// @return {\n', '  ///   "_base": "denominator for calculating transfer fees",\n', '  ///   "_rate": "numerator for calculating transfer fees",\n', '  ///   "_collector": "the ethereum address of the transfer fees collector",\n', '  ///   "_no_transfer_fee": "true if transfer fees is turned off globally",\n', '  ///   "_minimum_transfer_amount": "minimum amount of DGX that can be transferred"\n', '  /// }\n', '  function showTransferConfigs()\n', '           public\n', '           constant\n', '           returns (uint256 _base, uint256 _rate, address _collector, bool _no_transfer_fee, uint256 _minimum_transfer_amount)\n', '  {\n', '    (,_base, _rate, _collector, _no_transfer_fee, _minimum_transfer_amount) = gold_token_storage().read_transfer_config();\n', '  }\n', '\n', '}']