['pragma solidity ^0.4.19;\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint supply);\n', '    function balanceOf( address _owner ) public view returns (uint balance);\n', '    function allowance( address _owner, address _spender ) public view returns (uint allowance_);\n', '\n', '    function transfer( address _to, uint _value)public returns (bool success);\n', '    function transferFrom( address _from, address _to, uint _value)public returns (bool success);\n', '    function approve( address _spender, uint _value )public returns (bool success);\n', '\n', '    event Transfer( address indexed from, address indexed to, uint value);\n', '    event Approval( address indexed _owner, address indexed _spender, uint value);\n', '}\n', '\n', '\n', 'contract UTEMIS is ERC20{            \n', '\n', '        uint8 public constant TOKEN_DECIMAL     = 18;        \n', '        uint256 public constant TOKEN_ESCALE    = 1 * 10 ** uint256(TOKEN_DECIMAL); \n', '                                              \n', '        uint256 public constant TOTAL_SUPPLY    = 1000000000000 * TOKEN_ESCALE; // 1000000000000000000000000 Smart contract UNITS | 1.000.000.000.000,000000000000 Ethereum representation\n', '        uint256 public constant ICO_SUPPLY      = 250000000000 * TOKEN_ESCALE;  // 250000000000000000000000 Smart contract UNITS  | 200.000.000.000,000000000000 Ethereum representation\n', '\n', '        uint public constant MIN_ACCEPTED_VALUE = 50000000000000000 wei;\n', '        uint public constant VALUE_OF_UTS       = 666666599999 wei;\n', '\n', '        uint public constant START_ICO          = 1518714000; // 15 Feb 2018 17:00:00 GMT | 15 Feb 2018 18:00:00 GMT+1\n', '\n', '        string public constant TOKEN_NAME       = "UTEMIS";\n', '        string public constant TOKEN_SYMBOL     = "UTS";\n', '\n', '    /*------------------- Finish public constants -------------------*/\n', '\n', '\n', '    /******************** Start private NO-Constants variables ********************/\n', '    \n', '        uint[4]  private bonusTime             = [14 days , 45 days , 74 days];        \n', '        uint8[4] private bonusBenefit          = [uint8(50)  , uint8(30)   , uint8(10)];\n', '        uint8[4] private bonusPerInvestion_10  = [uint8(25)  , uint8(15)   , uint8(5)];\n', '        uint8[4] private bonusPerInvestion_50  = [uint8(50)  , uint8(30)   , uint8(20)];\n', '    \n', '    /*------------------- Finish private NO-Constants variables -------------------*/\n', '\n', '\n', '    /******************** Start public NO-Constants variables ********************/        \n', '       \n', '        address public owner;\n', '        address public beneficiary;            \n', '        uint public ethersCollecteds;\n', '        uint public tokensSold;\n', '        uint256 public totalSupply = TOTAL_SUPPLY;\n', '        bool public icoStarted;            \n', '        mapping(address => uint256) public balances;    \n', '        mapping(address => Investors) public investorsList;\n', '        mapping(address => mapping (address => uint256)) public allowed;\n', '        address[] public investorsAddress;    \n', '        string public name     = TOKEN_NAME;\n', '        uint8 public decimals  = TOKEN_DECIMAL;\n', '        string public symbol   = TOKEN_SYMBOL;\n', '   \n', '    /*------------------- Finish public NO-Constants variables -------------------*/    \n', '\n', '    struct Investors{\n', '        uint256 amount;\n', '        uint when;\n', '    }\n', '\n', '    event Transfer(address indexed from , address indexed to , uint256 value);\n', '    event Approval(address indexed _owner , address indexed _spender , uint256 _value);\n', '    event Burn(address indexed from, uint256 value);\n', '    event FundTransfer(address backer , uint amount , address investor);\n', '\n', '    //Safe math\n', '    function safeSub(uint a , uint b) internal pure returns (uint){assert(b <= a);return a - b;}  \n', '    function safeAdd(uint a , uint b) internal pure returns (uint){uint c = a + b;assert(c>=a && c>=b);return c;}\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier icoIsStarted(){\n', '        require(icoStarted == true);        \n', '        require(now >= START_ICO);      \n', '        _;\n', '    }\n', '\n', '    modifier icoIsStopped(){\n', '        require(icoStarted == false); \n', '        _;\n', '    }\n', '\n', '    modifier minValue(){\n', '        require(msg.value >= MIN_ACCEPTED_VALUE);\n', '        _;\n', '    }\n', '\n', '    function UTEMIS() public{\n', '        balances[msg.sender] = totalSupply;\n', '        owner               = msg.sender;        \n', '    }\n', '\n', '\n', '    /**\n', '     * ERC20\n', '     */\n', '    function balanceOf(address _owner) public view returns(uint256 balance){\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * ERC20\n', '     */\n', '    function totalSupply() constant public returns(uint256 supply){\n', '        return totalSupply;\n', '    }\n', '\n', '\n', '\n', '    /**\n', '     * For transfer tokens. Internal use, only can executed by this contract ERC20\n', '     * ERC20\n', '     * @param  _from         Source address\n', '     * @param  _to           Destination address\n', '     * @param  _value        Amount of tokens to send\n', '     */\n', '    function _transfer(address _from , address _to , uint _value) internal{        \n', '        require(_to != 0x0);                                                          //Prevent send tokens to 0x0 address        \n', '        require(balances[_from] >= _value);                                           //Check if the sender have enough tokens        \n', '        require(balances[_to] + _value > balances[_to]);                              //Check for overflows        \n', '        balances[_from]         = safeSub(balances[_from] , _value);                  //Subtract from the source ( sender )        \n', '        balances[_to]           = safeAdd(balances[_to]   , _value);                  //Add tokens to destination        \n', '        uint previousBalance    = balances[_from] + balances[_to];                    //To make assert        \n', '        Transfer(_from , _to , _value);                                               //Fire event for clients        \n', '        assert(balances[_from] + balances[_to] == previousBalance);                   //Check the assert\n', '    }\n', '\n', '\n', '    /**\n', '     * Commonly transfer tokens \n', '     * ERC20\n', '     * @param  _to           Destination address\n', '     * @param  _value        Amount of tokens to send\n', '     */\n', '    function transfer(address _to , uint _value) public returns (bool success){        \n', '        _transfer(msg.sender , _to , _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', "     * Transfer token from address to another address that's allowed to. \n", '     * ERC20\n', '     * @param _from          Source address\n', '     * @param _to            Destination address\n', '     * @param _value         Amount of tokens to send\n', '     */   \n', '    function transferFrom(address _from , address _to , uint256 _value) public returns (bool success){\n', '        if(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            _transfer(_from , _to , _value);\n', '            allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender] , _value);\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Approve spender to transfer amount of tokens from your address ERC20\n', '     * ERC20\n', '     * @param _spender       Address that can transfer tokens from your address\n', '     * @param _value         Amount of tokens that can be sended by spender\n', '     */   \n', '    function approve(address _spender , uint256 _value) public returns (bool success){\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender , _spender , _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Returns the amount of tokens allowed by owner to spender ERC20\n', '     * ERC20\n', "     * @param _owner         Source address that allow's spend tokens\n", '     * @param _spender       Address that can transfer tokens form allowed     \n', '     */   \n', '    function allowance(address _owner , address _spender) public view returns(uint256 allowance_){\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    /**\n', '     * Get investors info\n', '     *\n', '     * @return []                Returns an array with address of investors, amount invested and when invested\n', '     */\n', '    function getInvestors() constant public returns(address[] , uint[] , uint[]){\n', '        uint length = investorsAddress.length;                                             //Length of array\n', '        address[] memory addr = new address[](length);\n', '        uint[] memory amount  = new uint[](length);\n', '        uint[] memory when    = new uint[](length);\n', '        for(uint i = 0; i < length; i++){\n', '            address key = investorsAddress[i];\n', '            addr[i]     = key;\n', '            amount[i]   = investorsList[key].amount;\n', '            when[i]     = investorsList[key].when;\n', '        }\n', '        return (addr , amount , when);        \n', '    }\n', '\n', '\n', '    /**\n', '     * Get amount of bonus to apply\n', '     *\n', '     * @param _ethers              Amount of ethers invested, for calculation the bonus     \n', '     * @return uint                Returns a % of bonification to apply\n', '     */\n', '    function getBonus(uint _ethers) public view returns(uint8){        \n', '        uint8 _bonus  = 0;                                                          //Assign bonus to \n', '        uint8 _bonusPerInvestion = 0;\n', '        uint  starter = now - START_ICO;                                            //To control end time of bonus\n', '        for(uint i = 0; i < bonusTime.length; i++){                                 //For loop\n', '            if(starter <= bonusTime[i]){                                            //If the starter are greater than bonusTime, the bonus will be 0                \n', '                if(_ethers > 10 ether && _ethers <= 50 ether){\n', '                    _bonusPerInvestion = bonusPerInvestion_10[i];\n', '                }\n', '                if(_ethers > 50 ether){\n', '                    _bonusPerInvestion = bonusPerInvestion_50[i];\n', '                }\n', '                _bonus = bonusBenefit[i];                                           //Asign amount of bonus to bonus_ variable                                \n', '                break;                                                              //Break the loop\n', '\n', '            }\n', '        }        \n', '        return _bonus + _bonusPerInvestion;\n', '    }\n', '\n', '    /**\n', '     * Calculate the amount of tokens to sends depeding on the amount of ethers received\n', '     *\n', '     * @param  _ethers              Amount of ethers for convert to tokens\n', '     * @return uint                 Returns the amount of tokens to send\n', '     */\n', '    function getTokensToSend(uint _ethers) public view returns (uint){\n', '        uint tokensToSend  = 0;                                                     //Assign tokens to send to 0                                            \n', '        uint8 bonus        = getBonus(_ethers);                                     //Get amount of bonification                                    \n', '        uint ethToTokens   = (_ethers * 10 ** uint256(TOKEN_DECIMAL)) / VALUE_OF_UTS;                                //Make the conversion, divide amount of ethers by value of each UTS                \n', '        uint amountBonus   = ethToTokens / 100 * bonus;\n', '             tokensToSend  = ethToTokens + amountBonus;\n', '        return tokensToSend;\n', '    }\n', '\n', '    /**\n', '     * Fallback when the contract receives ethers\n', '     *\n', '     */\n', '    function () payable public icoIsStarted minValue{                              \n', '        uint amount_actually_invested = investorsList[msg.sender].amount;           //Get the actually amount invested\n', '        \n', '        if(amount_actually_invested == 0){                                          //If amount invested are equal to 0, will add like new investor\n', '            uint index                = investorsAddress.length++;\n', '            investorsAddress[index]   = msg.sender;\n', '            investorsList[msg.sender] = Investors(msg.value , now);                 //Store investors info        \n', '        }\n', '        \n', '        if(amount_actually_invested > 0){                                           //If amount invested are greater than 0\n', '            investorsList[msg.sender].amount += msg.value;                          //Increase the amount invested\n', '            investorsList[msg.sender].when    = now;                                //Change the last time invested\n', '        }\n', '\n', '        \n', '        uint tokensToSend = getTokensToSend(msg.value);                             //Calc the tokens to send depending on ethers received\n', '        tokensSold += tokensToSend;        \n', '        require(balances[owner] >= tokensToSend);\n', '        \n', '        _transfer(owner , msg.sender , tokensToSend);                               //Transfer tokens to investor                                \n', '        ethersCollecteds   += msg.value;\n', '\n', '        if(beneficiary == address(0)){\n', '            beneficiary = owner;\n', '        }\n', '        beneficiary.transfer(msg.value);\n', '        FundTransfer(owner , msg.value , msg.sender);                               //Fire events for clients\n', '    }\n', '\n', '\n', '    /**\n', '     * Start the ico manually\n', '     *     \n', '     */\n', '    function startIco() public onlyOwner{\n', '        icoStarted = true;                                                         //Set the ico started\n', '    }\n', '\n', '    /**\n', '     * Stop the ico manually\n', '     *\n', '     */\n', '    function stopIco() public onlyOwner{\n', '        icoStarted = false;                                                        //Set the ico stopped\n', '    }\n', '\n', '\n', '    function setBeneficiary(address _beneficiary) public onlyOwner{\n', '        beneficiary = _beneficiary;\n', '    }\n', '    \n', '    function destroyContract()external onlyOwner{\n', '        selfdestruct(owner);\n', '    }\n', '    \n', '}']