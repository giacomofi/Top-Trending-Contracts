['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns(uint256);\n', '    function transfer(address to, uint256 value) returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    function allowance(address owner, address spender) constant returns(uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns(bool);\n', '    function approve(address spender, uint256 value) returns(bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '\n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns(bool) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            uint256 _allowance = allowed[_from][msg.sender];\n', '            allowed[_from][msg.sender] = _allowance.sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            balances[_from] = balances[_from].sub(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '\n', '    function balanceOf(address _owner) constant returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns(bool) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', 'contract NOLLYCOIN is BasicToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "Nolly Coin";                        //name of the token\n', '    string public symbol = "NOLLY";                                // symbol of the token\n', '    uint8 public decimals = 18;                                  // decimals\n', '    uint256 public totalSupply = 500000000 * 10 ** 18;             // total supply of NOLLY Tokens  \n', '\n', '    // variables\n', '    uint256 public reservedForFounders;              // fund allocated to key founder \n', '    uint256 public bountiesAllocation;                  // fund allocated for bounty\n', '    uint256 public affiliatesAllocation;                  // fund allocated to affiliates \n', '    uint256 public totalAllocatedTokens;                // variable to keep track of funds allocated\n', '    uint256 public tokensAllocatedToCrowdFund;          // funds allocated to crowdfund\n', '\n', '\n', '\n', '    // addresses\n', '    // multi sign address of founders which hold \n', '    address public founderMultiSigAddress =    0x59b645EB51B1e47e45F14A56F271030182393Efd;\n', '    address public bountiesAllocAddress = 0x6C2625A8b19c7Bfa88d1420120DE45A60dCD6e28;  //CHANGE THIS\n', '    address public affiliatesAllocAddress = 0x0f0345699Afa5EE03d2B089A5aF73C405885B592;  //CHANGE THIS\n', '    address public crowdFundAddress;                    // address of crowdfund contract   \n', '    address public owner;                               // owner of the contract\n', '    \n', '    \n', '\n', '\n', '    //events\n', '    event ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\n', '\n', '    //modifiers\n', '    modifier onlyCrowdFundAddress() {\n', '        require(msg.sender == crowdFundAddress);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders() {\n', '        require(msg.sender == founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '\n', '\n', '    // creation of the token contract \n', '    function NOLLYCOIN(address _crowdFundAddress) {\n', '        owner = msg.sender;\n', '        crowdFundAddress = _crowdFundAddress;\n', '\n', '\n', '        // Token Distribution         \n', '        reservedForFounders        = 97500000 * 10 ** 18;           // 97,500,000 [19.50%]\n', '        tokensAllocatedToCrowdFund = 300000000 * 10 ** 18;      // 300,000,000NOLLY [50%]\n', '        // tokensAllocatedToPreICO    = 50000000 * 10 ** 18;       // 50,000,000 [10%]\n', '        affiliatesAllocation =       25000000 * 10 ** 18;               // 25, 000, 000[5.0 %]\n', '        bountiesAllocation         = 27750000 * 10 ** 18;               // 27,750,000[5.5%] \n', '                                                \n', '\n', '\n', '        // Assigned balances to respective stakeholders\n', '        balances[founderMultiSigAddress] = reservedForFounders;\n', '        balances[affiliatesAllocAddress] = affiliatesAllocation;\n', '        balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\n', '        balances[bountiesAllocAddress] = bountiesAllocation;\n', '        totalAllocatedTokens = balances[founderMultiSigAddress] + balances[affiliatesAllocAddress] + balances[bountiesAllocAddress];\n', '    }\n', '\n', '\n', '    // function to keep track of the total token allocation\n', '    function changeTotalSupply(uint256 _amount) onlyCrowdFundAddress {\n', '        totalAllocatedTokens += _amount;\n', '    }\n', '\n', '    // function to change founder multisig wallet address            \n', '    function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\n', '        founderMultiSigAddress = _newFounderMultiSigAddress;\n', '        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '    }\n', '\n', '\n', '    // fallback function to restrict direct sending of ether\n', '    function () {\n', '        revert();\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'contract NOLLYCOINCrowdFund {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    NOLLYCOIN public token;                                    // Token contract reference\n', '\n', '    //variables\n', '    uint256 public preSaleStartTime = 1514874072; //1519898430;             // 01-MARCH-18 00:10:00 UTC //CHANGE THIS    \n', '    uint256 public preSaleEndTime = 1522490430;               // 31-MARCH-18 00:10:00 UTC           //CHANGE THIS\n', '    uint256 public crowdfundStartDate = 1522576830;           // 1-APRIL-18 00:10:00 UTC      //CHANGE THIS\n', '    uint256 public crowdfundEndDate = 1525155672;             // 31-MARCH-17 00:10:00 UTC      //CHANGE THIS\n', '    uint256 public totalWeiRaised;                            // Counter to track the amount raised //CHANGE THIS\n', '    uint256 public exchangeRateForETH = 32000;                  // No. of NOLLY Tokens in 1 ETH  // CHANGE THIS \n', '    uint256 public exchangeRateForBTC = 60000;                 // No. of NOLLY Tokens in 1 BTC  //CHANGE THIS\n', '    uint256 internal tokenSoldInPresale = 0;\n', '    uint256 internal tokenSoldInCrowdsale = 0;\n', '    uint256 internal minAmount = 1 * 10 ** 17;                // Equivalent to 0.1 ETH\n', '\n', '    bool internal isTokenDeployed = false;                    // Flag to track the token deployment -- only can be set once\n', '\n', '\n', '    // addresses\n', '    // Founders multisig address\n', '    address public founderMultiSigAddress = 0x59b645EB51B1e47e45F14A56F271030182393Efd;   //CHANGE THIS                          \n', '    // Owner of the contract\n', '    address public owner;\n', '\n', '    enum State { PreSale, Crowdfund, Finish }\n', '\n', '    //events\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '    event CrowdFundClosed(uint256 _blockTimeStamp);\n', '    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n', '\n', '    //Modifiers\n', '    modifier tokenIsDeployed() {\n', '        require(isTokenDeployed == true);\n', '        _;\n', '    }\n', '    modifier nonZeroEth() {\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders() {\n', '        require(msg.sender == founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPublic() {\n', '        require(msg.sender != founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier inState(State state) {\n', '        require(getState() == state);\n', '        _;\n', '    }\n', '\n', '    // Constructor to initialize the local variables \n', '    function NOLLYCOINCrowdFund() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // Function to change the founders multisig address \n', '    function setFounderMultiSigAddress(address _newFounderAddress) onlyFounders  nonZeroAddress(_newFounderAddress) {\n', '        founderMultiSigAddress = _newFounderAddress;\n', '        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '    }\n', '\n', '    // Attach the token contract, can only be done once     \n', '    function setTokenAddress(address _tokenAddress) external onlyOwner nonZeroAddress(_tokenAddress) {\n', '        require(isTokenDeployed == false);\n', '        token = NOLLYCOIN(_tokenAddress);\n', '        isTokenDeployed = true;\n', '    }\n', '\n', '    // function call after crowdFundEndTime.\n', '    // It transfers the remaining tokens to remainingTokenHolder address\n', '    function endCrowdfund() onlyFounders inState(State.Finish) returns(bool) {\n', '        require(now > crowdfundEndDate);\n', '        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\n', '\n', '        if (remainingToken != 0)\n', '            token.transfer(founderMultiSigAddress, remainingToken);\n', '        CrowdFundClosed(now);\n', '        return true;\n', '    }\n', '\n', '    // Buy token function call only in duration of crowdfund active \n', '    function buyTokens(address beneficiary) \n', '    nonZeroEth \n', '    tokenIsDeployed \n', '    onlyPublic \n', '    nonZeroAddress(beneficiary) \n', '    payable \n', '    returns(bool) \n', '    {\n', '        require(msg.value >= minAmount);\n', '\n', '        if (getState() == State.PreSale) {\n', '            if (buyPreSaleTokens(beneficiary)) {\n', '                return true;\n', '            }\n', '            return false;\n', '        } else {\n', '            require(now >= crowdfundStartDate && now <= crowdfundEndDate);\n', '            fundTransfer(msg.value);\n', '\n', '            uint256 amount = getNoOfTokens(exchangeRateForETH, msg.value);\n', '\n', '            if (token.transfer(beneficiary, amount)) {\n', '                tokenSoldInCrowdsale = tokenSoldInCrowdsale.add(amount);\n', '                token.changeTotalSupply(amount);\n', '                totalWeiRaised = totalWeiRaised.add(msg.value);\n', '                TokenPurchase(beneficiary, msg.value, amount);\n', '                return true;\n', '            }\n', '            return false;\n', '        }\n', '\n', '    }\n', '\n', '    // function to buy the tokens at presale \n', '    function buyPreSaleTokens(address beneficiary) internal returns(bool) {\n', '\n', '        uint256 amount = getTokensForPreSale(exchangeRateForETH, msg.value);\n', '        fundTransfer(msg.value);\n', '\n', '        if (token.transfer(beneficiary, amount)) {\n', '            tokenSoldInPresale = tokenSoldInPresale.add(amount);\n', '            token.changeTotalSupply(amount);\n', '            totalWeiRaised = totalWeiRaised.add(msg.value);\n', '            TokenPurchase(beneficiary, msg.value, amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // function to calculate the total no of tokens with bonus multiplication\n', '    function getNoOfTokens(uint256 _exchangeRate, uint256 _amount) internal constant returns(uint256) {\n', '        uint256 noOfToken = _amount.mul(_exchangeRate);\n', '        uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\n', '        return noOfTokenWithBonus;\n', '    }\n', '\n', '    function getTokensForPreSale(uint256 _exchangeRate, uint256 _amount) internal constant returns(uint256) {\n', '        uint256 noOfToken = _amount.mul(_exchangeRate);\n', '        uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\n', '        if (noOfTokenWithBonus + tokenSoldInPresale > (50000000 * 10 ** 18)) { //change this to reflect current max\n', '            revert();\n', '        }\n', '        return noOfTokenWithBonus;\n', '    }\n', '\n', '    // function to transfer the funds to founders account\n', '    function fundTransfer(uint256 weiAmount) internal {\n', '        founderMultiSigAddress.transfer(weiAmount);\n', '    }\n', '\n', '\n', '    // Get functions \n', '\n', '    // function to get the current state of the crowdsale\n', '    function getState() public constant returns(State) {\n', '       if (now >= preSaleStartTime && now <= preSaleEndTime) {\n', '            return State.PreSale;\n', '        }\n', '        if (now >= crowdfundStartDate && now <= crowdfundEndDate) {\n', '            return State.Crowdfund;\n', '        } \n', '        return State.Finish;\n', '    }\n', '\n', '\n', '    // function provide the current bonus rate\n', '    function getCurrentBonusRate() internal returns(uint8) {\n', '\n', '        if (getState() == State.PreSale) {\n', '            return 30; //presale bonus rate is 33%\n', '        }\n', '        if (getState() == State.Crowdfund) {\n', '            \n', '\n', '        //  week 1: 8th of April 1523197901\n', '            if (now > crowdfundStartDate && now <= 1523197901) { \n', '                return 25;\n', '            }\n', '\n', '        //  week 2: 15th of April 1523802701\n', '            if (now > 1523197901 && now <= 1523802701) { \n', '                return 20;\n', '            }\n', '\n', '\n', '        // week 3: \n', '            if (now > 1523802701 && now <= 1524565102 ) {\n', '                return 15;\n', '\n', '            } else {\n', '\n', '                return 10;\n', '\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    // provides the bonus % \n', '    function currentBonus() public constant returns(uint8) {\n', '        return getCurrentBonusRate();\n', '    }\n', '\n', '    // GET functions\n', '    function getContractTimestamp() public constant returns(\n', '        uint256 _presaleStartDate,\n', '        uint256 _presaleEndDate,\n', '        uint256 _crowdsaleStartDate,\n', '        uint256 _crowdsaleEndDate)\n', '    {\n', '        return (preSaleStartTime, preSaleEndTime, crowdfundStartDate, crowdfundEndDate);\n', '    }\n', '\n', '    function getExchangeRate() public constant returns(uint256 _exchangeRateForETH, uint256 _exchangeRateForBTC) {\n', '        return (exchangeRateForETH, exchangeRateForBTC);\n', '    }\n', '\n', '    function getNoOfSoldToken() public constant returns(uint256 _tokenSoldInPresale, uint256 _tokenSoldInCrowdsale) {\n', '        return (tokenSoldInPresale, tokenSoldInCrowdsale);\n', '    }\n', '\n', '    function getWeiRaised() public constant returns(uint256 _totalWeiRaised) {\n', '        return totalWeiRaised;\n', '    }\n', '\n', '    // Crowdfund entry\n', '    // send ether to the contract address\n', '    // With at least 200 000 gas\n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}']
['/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal constant returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) constant returns(uint256);\n', '    function transfer(address to, uint256 value) returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    function allowance(address owner, address spender) constant returns(uint256);\n', '    function transferFrom(address from, address to, uint256 value) returns(bool);\n', '    function approve(address spender, uint256 value) returns(bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', '\n', 'contract BasicToken is ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '\n', '\n', '    /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns(bool) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            uint256 _allowance = allowed[_from][msg.sender];\n', '            allowed[_from][msg.sender] = _allowance.sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            balances[_from] = balances[_from].sub(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '\n', '    function balanceOf(address _owner) constant returns(uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns(bool) {\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', 'contract NOLLYCOIN is BasicToken {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "Nolly Coin";                        //name of the token\n', '    string public symbol = "NOLLY";                                // symbol of the token\n', '    uint8 public decimals = 18;                                  // decimals\n', '    uint256 public totalSupply = 500000000 * 10 ** 18;             // total supply of NOLLY Tokens  \n', '\n', '    // variables\n', '    uint256 public reservedForFounders;              // fund allocated to key founder \n', '    uint256 public bountiesAllocation;                  // fund allocated for bounty\n', '    uint256 public affiliatesAllocation;                  // fund allocated to affiliates \n', '    uint256 public totalAllocatedTokens;                // variable to keep track of funds allocated\n', '    uint256 public tokensAllocatedToCrowdFund;          // funds allocated to crowdfund\n', '\n', '\n', '\n', '    // addresses\n', '    // multi sign address of founders which hold \n', '    address public founderMultiSigAddress =    0x59b645EB51B1e47e45F14A56F271030182393Efd;\n', '    address public bountiesAllocAddress = 0x6C2625A8b19c7Bfa88d1420120DE45A60dCD6e28;  //CHANGE THIS\n', '    address public affiliatesAllocAddress = 0x0f0345699Afa5EE03d2B089A5aF73C405885B592;  //CHANGE THIS\n', '    address public crowdFundAddress;                    // address of crowdfund contract   \n', '    address public owner;                               // owner of the contract\n', '    \n', '    \n', '\n', '\n', '    //events\n', '    event ChangeFoundersWalletAddress(uint256  _blockTimeStamp, address indexed _foundersWalletAddress);\n', '\n', '    //modifiers\n', '    modifier onlyCrowdFundAddress() {\n', '        require(msg.sender == crowdFundAddress);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders() {\n', '        require(msg.sender == founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '\n', '\n', '    // creation of the token contract \n', '    function NOLLYCOIN(address _crowdFundAddress) {\n', '        owner = msg.sender;\n', '        crowdFundAddress = _crowdFundAddress;\n', '\n', '\n', '        // Token Distribution         \n', '        reservedForFounders        = 97500000 * 10 ** 18;           // 97,500,000 [19.50%]\n', '        tokensAllocatedToCrowdFund = 300000000 * 10 ** 18;      // 300,000,000NOLLY [50%]\n', '        // tokensAllocatedToPreICO    = 50000000 * 10 ** 18;       // 50,000,000 [10%]\n', '        affiliatesAllocation =       25000000 * 10 ** 18;               // 25, 000, 000[5.0 %]\n', '        bountiesAllocation         = 27750000 * 10 ** 18;               // 27,750,000[5.5%] \n', '                                                \n', '\n', '\n', '        // Assigned balances to respective stakeholders\n', '        balances[founderMultiSigAddress] = reservedForFounders;\n', '        balances[affiliatesAllocAddress] = affiliatesAllocation;\n', '        balances[crowdFundAddress] = tokensAllocatedToCrowdFund;\n', '        balances[bountiesAllocAddress] = bountiesAllocation;\n', '        totalAllocatedTokens = balances[founderMultiSigAddress] + balances[affiliatesAllocAddress] + balances[bountiesAllocAddress];\n', '    }\n', '\n', '\n', '    // function to keep track of the total token allocation\n', '    function changeTotalSupply(uint256 _amount) onlyCrowdFundAddress {\n', '        totalAllocatedTokens += _amount;\n', '    }\n', '\n', '    // function to change founder multisig wallet address            \n', '    function changeFounderMultiSigAddress(address _newFounderMultiSigAddress) onlyFounders nonZeroAddress(_newFounderMultiSigAddress) {\n', '        founderMultiSigAddress = _newFounderMultiSigAddress;\n', '        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '    }\n', '\n', '\n', '    // fallback function to restrict direct sending of ether\n', '    function () {\n', '        revert();\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'contract NOLLYCOINCrowdFund {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    NOLLYCOIN public token;                                    // Token contract reference\n', '\n', '    //variables\n', '    uint256 public preSaleStartTime = 1514874072; //1519898430;             // 01-MARCH-18 00:10:00 UTC //CHANGE THIS    \n', '    uint256 public preSaleEndTime = 1522490430;               // 31-MARCH-18 00:10:00 UTC           //CHANGE THIS\n', '    uint256 public crowdfundStartDate = 1522576830;           // 1-APRIL-18 00:10:00 UTC      //CHANGE THIS\n', '    uint256 public crowdfundEndDate = 1525155672;             // 31-MARCH-17 00:10:00 UTC      //CHANGE THIS\n', '    uint256 public totalWeiRaised;                            // Counter to track the amount raised //CHANGE THIS\n', '    uint256 public exchangeRateForETH = 32000;                  // No. of NOLLY Tokens in 1 ETH  // CHANGE THIS \n', '    uint256 public exchangeRateForBTC = 60000;                 // No. of NOLLY Tokens in 1 BTC  //CHANGE THIS\n', '    uint256 internal tokenSoldInPresale = 0;\n', '    uint256 internal tokenSoldInCrowdsale = 0;\n', '    uint256 internal minAmount = 1 * 10 ** 17;                // Equivalent to 0.1 ETH\n', '\n', '    bool internal isTokenDeployed = false;                    // Flag to track the token deployment -- only can be set once\n', '\n', '\n', '    // addresses\n', '    // Founders multisig address\n', '    address public founderMultiSigAddress = 0x59b645EB51B1e47e45F14A56F271030182393Efd;   //CHANGE THIS                          \n', '    // Owner of the contract\n', '    address public owner;\n', '\n', '    enum State { PreSale, Crowdfund, Finish }\n', '\n', '    //events\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '    event CrowdFundClosed(uint256 _blockTimeStamp);\n', '    event ChangeFoundersWalletAddress(uint256 _blockTimeStamp, address indexed _foundersWalletAddress);\n', '\n', '    //Modifiers\n', '    modifier tokenIsDeployed() {\n', '        require(isTokenDeployed == true);\n', '        _;\n', '    }\n', '    modifier nonZeroEth() {\n', '        require(msg.value > 0);\n', '        _;\n', '    }\n', '\n', '    modifier nonZeroAddress(address _to) {\n', '        require(_to != 0x0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFounders() {\n', '        require(msg.sender == founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyPublic() {\n', '        require(msg.sender != founderMultiSigAddress);\n', '        _;\n', '    }\n', '\n', '    modifier inState(State state) {\n', '        require(getState() == state);\n', '        _;\n', '    }\n', '\n', '    // Constructor to initialize the local variables \n', '    function NOLLYCOINCrowdFund() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // Function to change the founders multisig address \n', '    function setFounderMultiSigAddress(address _newFounderAddress) onlyFounders  nonZeroAddress(_newFounderAddress) {\n', '        founderMultiSigAddress = _newFounderAddress;\n', '        ChangeFoundersWalletAddress(now, founderMultiSigAddress);\n', '    }\n', '\n', '    // Attach the token contract, can only be done once     \n', '    function setTokenAddress(address _tokenAddress) external onlyOwner nonZeroAddress(_tokenAddress) {\n', '        require(isTokenDeployed == false);\n', '        token = NOLLYCOIN(_tokenAddress);\n', '        isTokenDeployed = true;\n', '    }\n', '\n', '    // function call after crowdFundEndTime.\n', '    // It transfers the remaining tokens to remainingTokenHolder address\n', '    function endCrowdfund() onlyFounders inState(State.Finish) returns(bool) {\n', '        require(now > crowdfundEndDate);\n', '        uint256 remainingToken = token.balanceOf(this);  // remaining tokens\n', '\n', '        if (remainingToken != 0)\n', '            token.transfer(founderMultiSigAddress, remainingToken);\n', '        CrowdFundClosed(now);\n', '        return true;\n', '    }\n', '\n', '    // Buy token function call only in duration of crowdfund active \n', '    function buyTokens(address beneficiary) \n', '    nonZeroEth \n', '    tokenIsDeployed \n', '    onlyPublic \n', '    nonZeroAddress(beneficiary) \n', '    payable \n', '    returns(bool) \n', '    {\n', '        require(msg.value >= minAmount);\n', '\n', '        if (getState() == State.PreSale) {\n', '            if (buyPreSaleTokens(beneficiary)) {\n', '                return true;\n', '            }\n', '            return false;\n', '        } else {\n', '            require(now >= crowdfundStartDate && now <= crowdfundEndDate);\n', '            fundTransfer(msg.value);\n', '\n', '            uint256 amount = getNoOfTokens(exchangeRateForETH, msg.value);\n', '\n', '            if (token.transfer(beneficiary, amount)) {\n', '                tokenSoldInCrowdsale = tokenSoldInCrowdsale.add(amount);\n', '                token.changeTotalSupply(amount);\n', '                totalWeiRaised = totalWeiRaised.add(msg.value);\n', '                TokenPurchase(beneficiary, msg.value, amount);\n', '                return true;\n', '            }\n', '            return false;\n', '        }\n', '\n', '    }\n', '\n', '    // function to buy the tokens at presale \n', '    function buyPreSaleTokens(address beneficiary) internal returns(bool) {\n', '\n', '        uint256 amount = getTokensForPreSale(exchangeRateForETH, msg.value);\n', '        fundTransfer(msg.value);\n', '\n', '        if (token.transfer(beneficiary, amount)) {\n', '            tokenSoldInPresale = tokenSoldInPresale.add(amount);\n', '            token.changeTotalSupply(amount);\n', '            totalWeiRaised = totalWeiRaised.add(msg.value);\n', '            TokenPurchase(beneficiary, msg.value, amount);\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // function to calculate the total no of tokens with bonus multiplication\n', '    function getNoOfTokens(uint256 _exchangeRate, uint256 _amount) internal constant returns(uint256) {\n', '        uint256 noOfToken = _amount.mul(_exchangeRate);\n', '        uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\n', '        return noOfTokenWithBonus;\n', '    }\n', '\n', '    function getTokensForPreSale(uint256 _exchangeRate, uint256 _amount) internal constant returns(uint256) {\n', '        uint256 noOfToken = _amount.mul(_exchangeRate);\n', '        uint256 noOfTokenWithBonus = ((100 + getCurrentBonusRate()) * noOfToken).div(100);\n', '        if (noOfTokenWithBonus + tokenSoldInPresale > (50000000 * 10 ** 18)) { //change this to reflect current max\n', '            revert();\n', '        }\n', '        return noOfTokenWithBonus;\n', '    }\n', '\n', '    // function to transfer the funds to founders account\n', '    function fundTransfer(uint256 weiAmount) internal {\n', '        founderMultiSigAddress.transfer(weiAmount);\n', '    }\n', '\n', '\n', '    // Get functions \n', '\n', '    // function to get the current state of the crowdsale\n', '    function getState() public constant returns(State) {\n', '       if (now >= preSaleStartTime && now <= preSaleEndTime) {\n', '            return State.PreSale;\n', '        }\n', '        if (now >= crowdfundStartDate && now <= crowdfundEndDate) {\n', '            return State.Crowdfund;\n', '        } \n', '        return State.Finish;\n', '    }\n', '\n', '\n', '    // function provide the current bonus rate\n', '    function getCurrentBonusRate() internal returns(uint8) {\n', '\n', '        if (getState() == State.PreSale) {\n', '            return 30; //presale bonus rate is 33%\n', '        }\n', '        if (getState() == State.Crowdfund) {\n', '            \n', '\n', '        //  week 1: 8th of April 1523197901\n', '            if (now > crowdfundStartDate && now <= 1523197901) { \n', '                return 25;\n', '            }\n', '\n', '        //  week 2: 15th of April 1523802701\n', '            if (now > 1523197901 && now <= 1523802701) { \n', '                return 20;\n', '            }\n', '\n', '\n', '        // week 3: \n', '            if (now > 1523802701 && now <= 1524565102 ) {\n', '                return 15;\n', '\n', '            } else {\n', '\n', '                return 10;\n', '\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    // provides the bonus % \n', '    function currentBonus() public constant returns(uint8) {\n', '        return getCurrentBonusRate();\n', '    }\n', '\n', '    // GET functions\n', '    function getContractTimestamp() public constant returns(\n', '        uint256 _presaleStartDate,\n', '        uint256 _presaleEndDate,\n', '        uint256 _crowdsaleStartDate,\n', '        uint256 _crowdsaleEndDate)\n', '    {\n', '        return (preSaleStartTime, preSaleEndTime, crowdfundStartDate, crowdfundEndDate);\n', '    }\n', '\n', '    function getExchangeRate() public constant returns(uint256 _exchangeRateForETH, uint256 _exchangeRateForBTC) {\n', '        return (exchangeRateForETH, exchangeRateForBTC);\n', '    }\n', '\n', '    function getNoOfSoldToken() public constant returns(uint256 _tokenSoldInPresale, uint256 _tokenSoldInCrowdsale) {\n', '        return (tokenSoldInPresale, tokenSoldInCrowdsale);\n', '    }\n', '\n', '    function getWeiRaised() public constant returns(uint256 _totalWeiRaised) {\n', '        return totalWeiRaised;\n', '    }\n', '\n', '    // Crowdfund entry\n', '    // send ether to the contract address\n', '    // With at least 200 000 gas\n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}']
