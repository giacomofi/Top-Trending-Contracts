['pragma solidity ^0.4.21;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount)external;\n', '}\n', '\n', 'contract Crowdsale {\n', '    address public beneficiary;\n', '    uint public amountRaised;\n', '\tuint public allAmountRaised;\n', '    uint public deadline;\n', '    uint public price;\n', '\tuint public limitTransfer;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool crowdsaleClosed = false;\n', '\tbool public crowdsalePaused = false;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\t\n', '\t/**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale(\n', '        address ifSuccessfulSendTo,\n', '        uint durationInMinutes,\n', '        uint etherCostOfEachToken,\n', '\t\tuint limitAfterSendToBeneficiary,\n', '        address addressOfTokenUsedAsReward\n', '    )public {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        price = etherCostOfEachToken;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '\t\tlimitTransfer = limitAfterSendToBeneficiary;\n', '    }\n', '\t\n', '\t/**\n', '     * changeDeadline function\n', '     *\n', '     * Setup the new deadline\n', '     */\n', '    function changeDeadline(uint durationInMinutes) public onlyOwner \n', '\t{\n', '\t\tcrowdsaleClosed = false;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '    }\n', '\t\n', '\t/**\n', '     * changePrice function\n', '     *\n', '     * Setup the new price\n', '     */\n', '    function changePrice(uint _price) public onlyOwner \n', '\t{\n', '        price = _price;\n', '    }\n', '\t\n', '\t/**\n', '     * Pause Crowdsale\n', '     *\n', '     */\n', '    function pauseCrowdsale()public onlyOwner \n', '\t{\n', '        crowdsaleClosed = true;\n', '\t\tcrowdsalePaused = true;\n', '    }\n', '\t\n', '\t/**\n', '     * Run Crowdsale\n', '     *\n', '     */\n', '    function runCrowdsale()public onlyOwner \n', '\t{\n', '\t\trequire(now <= deadline);\n', '        crowdsaleClosed = false;\n', '\t\tcrowdsalePaused = false;\n', '    }\n', '\n', '    /**\n', '     * Send To Beneficiary\n', '     *\n', '     * Transfer to Beneficiary\n', '     */\n', '    function sendToBeneficiary()public onlyOwner \n', '\t{\n', '        if (beneficiary.send(amountRaised)) \n', '\t\t{\n', '\t\t\tamountRaised = 0;\n', '\t\t\temit FundTransfer(beneficiary, amountRaised, false);\n', '\t\t}\n', '    }\n', '\t\n', '\t/**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () public payable \n', '\t{\n', '        require(!crowdsaleClosed);\n', '\t\trequire(now <= deadline);\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised    += amount;\n', '\t\tallAmountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount / price);\n', '        emit FundTransfer(msg.sender, amount, true);\n', '\t\t\n', '\t\tif (amountRaised >= limitTransfer)\n', '\t\t{\n', '\t\t\tif (beneficiary.send(amountRaised)) \n', '\t\t\t{\n', '                amountRaised = 0;\n', '\t\t\t\temit FundTransfer(beneficiary, amountRaised, false);\n', '            }\n', '\t\t}\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount)external;\n', '}\n', '\n', 'contract Crowdsale {\n', '    address public beneficiary;\n', '    uint public amountRaised;\n', '\tuint public allAmountRaised;\n', '    uint public deadline;\n', '    uint public price;\n', '\tuint public limitTransfer;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool crowdsaleClosed = false;\n', '\tbool public crowdsalePaused = false;\n', '\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    \n', '    modifier onlyOwner {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\t\n', '\t/**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale(\n', '        address ifSuccessfulSendTo,\n', '        uint durationInMinutes,\n', '        uint etherCostOfEachToken,\n', '\t\tuint limitAfterSendToBeneficiary,\n', '        address addressOfTokenUsedAsReward\n', '    )public {\n', '        beneficiary = ifSuccessfulSendTo;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        price = etherCostOfEachToken;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '\t\tlimitTransfer = limitAfterSendToBeneficiary;\n', '    }\n', '\t\n', '\t/**\n', '     * changeDeadline function\n', '     *\n', '     * Setup the new deadline\n', '     */\n', '    function changeDeadline(uint durationInMinutes) public onlyOwner \n', '\t{\n', '\t\tcrowdsaleClosed = false;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '    }\n', '\t\n', '\t/**\n', '     * changePrice function\n', '     *\n', '     * Setup the new price\n', '     */\n', '    function changePrice(uint _price) public onlyOwner \n', '\t{\n', '        price = _price;\n', '    }\n', '\t\n', '\t/**\n', '     * Pause Crowdsale\n', '     *\n', '     */\n', '    function pauseCrowdsale()public onlyOwner \n', '\t{\n', '        crowdsaleClosed = true;\n', '\t\tcrowdsalePaused = true;\n', '    }\n', '\t\n', '\t/**\n', '     * Run Crowdsale\n', '     *\n', '     */\n', '    function runCrowdsale()public onlyOwner \n', '\t{\n', '\t\trequire(now <= deadline);\n', '        crowdsaleClosed = false;\n', '\t\tcrowdsalePaused = false;\n', '    }\n', '\n', '    /**\n', '     * Send To Beneficiary\n', '     *\n', '     * Transfer to Beneficiary\n', '     */\n', '    function sendToBeneficiary()public onlyOwner \n', '\t{\n', '        if (beneficiary.send(amountRaised)) \n', '\t\t{\n', '\t\t\tamountRaised = 0;\n', '\t\t\temit FundTransfer(beneficiary, amountRaised, false);\n', '\t\t}\n', '    }\n', '\t\n', '\t/**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () public payable \n', '\t{\n', '        require(!crowdsaleClosed);\n', '\t\trequire(now <= deadline);\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised    += amount;\n', '\t\tallAmountRaised += amount;\n', '        tokenReward.transfer(msg.sender, amount / price);\n', '        emit FundTransfer(msg.sender, amount, true);\n', '\t\t\n', '\t\tif (amountRaised >= limitTransfer)\n', '\t\t{\n', '\t\t\tif (beneficiary.send(amountRaised)) \n', '\t\t\t{\n', '                amountRaised = 0;\n', '\t\t\t\temit FundTransfer(beneficiary, amountRaised, false);\n', '            }\n', '\t\t}\n', '    }\n', '}']
