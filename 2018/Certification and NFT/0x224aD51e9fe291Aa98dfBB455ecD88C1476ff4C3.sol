['library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '  \n', '  function getOwner() public returns (address) {\n', '\treturn owner;\n', '  }\n', '\n', '}\n', '\n', 'contract AngelToken {\n', '\tfunction getTotalSupply() public returns (uint256);\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract GiveAnAngelCS is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    AngelToken public token;\n', '    address public wallet;\n', '    uint256 public price;\n', '    uint256 public weiRaised;\n', '\t// integer number - eg. 30 means 30 percent \n', '\tuint256 public currentBonus = 0;\n', '\tuint256 public constant ETH_LIMIT = 1 * (10 ** 17);\n', '\n', '    event AngelTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function GiveAnAngelCS(uint256 _price, address _wallet) {\n', '        require(_price > 0);\n', '        require(_wallet != address(0));\n', '\n', '        token = AngelToken(0x4597cf324eb06ff0c4d1cc97576f11336d8da730);\n', '        price = _price;\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        uint256 weiAmount = msg.value;\n', '\n', '\t\trequire(weiAmount >= ETH_LIMIT);\n', '\t\t\n', '        // calculate token amount to be created\n', '        uint256 tokens = weiAmount.mul(currentBonus.add(100)).mul(10**18).div(price).div(100);\n', '\n', '        require(validPurchase(tokens));\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.transfer(msg.sender, tokens);\n', '\n', '        AngelTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '        forwardFunds();\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase(uint256 tokens) internal constant returns (bool) {\n', '        return token.balanceOf(this) >= tokens;\n', '    }\n', '\t\n', '\tfunction setBonus(uint256 _bonus) onlyOwner public {\n', '\t\tcurrentBonus = _bonus;\n', '\t}\n', '\t\n', '\tfunction setPrice(uint256 _price) onlyOwner public {\n', '\t\tprice = _price;\n', '\t}\n', '\t\n', '\tfunction getBonus() public returns (uint256) {\n', '        return currentBonus;\n', '    }\n', '\t\n', '\tfunction getRaised() public returns (uint256) {\n', '        return weiRaised;\n', '    }\n', '\t\n', '\tfunction returnToOwner() onlyOwner public {\n', '\t\tuint256 currentBalance = token.balanceOf(this);\n', '\t\ttoken.transfer(getOwner(), currentBalance);\n', '\t}\n', '}']