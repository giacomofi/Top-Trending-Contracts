['pragma solidity 0.4.23;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title Oracle Escrow\n', ' * @dev The Oracle Escrow contract has an owner address, acting as the agent, a depositor,\n', ' * and a beneficiary. It allows for funds to be held in escrow until a given real-world\n', ' * external event has occurred. Relies on a unique Oracle contract address to be created\n', ' * using smartcontract.com. Inheriting the Ownable contract allows for the agent to be updated\n', ' * or removed from the contract without altering the execution of the contract or outcome. \n', ' */\n', 'contract OracleEscrow is Ownable {\n', '  uint256 public expiration;\n', '  bool public contractExecuted;\n', '  address public depositor;\n', '  address public beneficiary;\n', '  IOracle internal oracle;\n', '  \n', '\n', '  // Expected value is hard-coded into the contract and can be verified by all parties\n', '  // before any deposit is made.\n', '  bytes32 public constant EXPECTED = "yes";\n', '\n', '  // Expiration date should be a factor of days to prevent timestamp dependence.\n', '  // https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence\n', '  uint256 internal constant TO_EXPIRE = 30 days;\n', '\n', '  /** \n', '   * @dev The OracleEscrow constructor sets the oracle, depositor, and beneficiary addresses.\n', '   * It also sets the `contractExecuted` field to `false` and sets the expiration of the agreement\n', '   * to be 30 days after the OracleEscrow contract has been deployed.\n', '   * @param _oracle address, the address of the deployed Oracle contract.\n', '   * @param _depositor address, the address of the depositor.\n', '   * @param _beneficiary address, the address of the beneficiary.\n', '   */\n', '  constructor(address _oracle, address _depositor, address _beneficiary) public payable Ownable() {\n', '    oracle = IOracle(_oracle);\n', '    depositor = _depositor;\n', '    beneficiary = _beneficiary;\n', '    contractExecuted = false;\n', '    expiration = now + TO_EXPIRE;\n', '  }\n', '\n', '  /**\n', '   * @dev Logs a message indicating where the escrow payment was sent to.\n', '   */\n', '  event ContractExecuted(bytes32 message);\n', '  \n', '  /**\n', '   * @dev payable fallback only allows the depositor to send funds, as long as the contract\n', '   * hasn&#39;t been executed already, and the expiration has not been passed.\n', '   */\n', '  function() external payable onlyDepositor {\n', '    require(contractExecuted == false);\n', '    require(now < expiration);\n', '  }\n', '  \n', '  /**\n', '   * @dev Executes the contract if called by an authorized user and the balance of the escrow\n', '   * is greater than 0. If the Oracle contract&#39;s reported value is the expected value, payment\n', '   * goes to the beneficiary. If the escrow contract has gone passed the expiration and the\n', '   * Oracle contract&#39;s reported value still is not what is expected, payment is returned to\n', '   * the depositor.\n', '   */\n', '  function executeContract() public checkAuthorizedUser() {\n', '    require(address(this).balance > 0);\n', '    if (oracle.current() == EXPECTED) {\n', '      contractExecuted = true;\n', '      emit ContractExecuted("Payment sent to beneficiary.");\n', '      beneficiary.transfer(address(this).balance);\n', '    } else if (now >= expiration) {\n', '      contractExecuted = true;\n', '      emit ContractExecuted("Payment refunded to depositor.");\n', '      depositor.transfer(address(this).balance);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Check the current value stored on the Oracle contract.\n', '   * @return The current value at the Oracle contract.\n', '   */\n', '  function requestOracleValue() public view onlyOwner returns(bytes32) {\n', '    return oracle.current();\n', '  }\n', '\n', '  /**\n', '   * @dev Reverts if called by any account other than the owner, depositor, or beneficiary.\n', '   */\n', '  modifier checkAuthorizedUser() {\n', '    require(msg.sender == owner || msg.sender == depositor || msg.sender == beneficiary, "Only authorized users may call this function.");\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Reverts if called by any account other than the depositor.\n', '   */\n', '  modifier onlyDepositor() {\n', '    require(msg.sender == depositor, "Only the depositor may call this function.");\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Interface for the Oracle contract.\n', ' */\n', 'interface IOracle{\n', '  function current() view external returns(bytes32);\n', '}']
['pragma solidity 0.4.23;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title Oracle Escrow\n', ' * @dev The Oracle Escrow contract has an owner address, acting as the agent, a depositor,\n', ' * and a beneficiary. It allows for funds to be held in escrow until a given real-world\n', ' * external event has occurred. Relies on a unique Oracle contract address to be created\n', ' * using smartcontract.com. Inheriting the Ownable contract allows for the agent to be updated\n', ' * or removed from the contract without altering the execution of the contract or outcome. \n', ' */\n', 'contract OracleEscrow is Ownable {\n', '  uint256 public expiration;\n', '  bool public contractExecuted;\n', '  address public depositor;\n', '  address public beneficiary;\n', '  IOracle internal oracle;\n', '  \n', '\n', '  // Expected value is hard-coded into the contract and can be verified by all parties\n', '  // before any deposit is made.\n', '  bytes32 public constant EXPECTED = "yes";\n', '\n', '  // Expiration date should be a factor of days to prevent timestamp dependence.\n', '  // https://consensys.github.io/smart-contract-best-practices/recommendations/#timestamp-dependence\n', '  uint256 internal constant TO_EXPIRE = 30 days;\n', '\n', '  /** \n', '   * @dev The OracleEscrow constructor sets the oracle, depositor, and beneficiary addresses.\n', '   * It also sets the `contractExecuted` field to `false` and sets the expiration of the agreement\n', '   * to be 30 days after the OracleEscrow contract has been deployed.\n', '   * @param _oracle address, the address of the deployed Oracle contract.\n', '   * @param _depositor address, the address of the depositor.\n', '   * @param _beneficiary address, the address of the beneficiary.\n', '   */\n', '  constructor(address _oracle, address _depositor, address _beneficiary) public payable Ownable() {\n', '    oracle = IOracle(_oracle);\n', '    depositor = _depositor;\n', '    beneficiary = _beneficiary;\n', '    contractExecuted = false;\n', '    expiration = now + TO_EXPIRE;\n', '  }\n', '\n', '  /**\n', '   * @dev Logs a message indicating where the escrow payment was sent to.\n', '   */\n', '  event ContractExecuted(bytes32 message);\n', '  \n', '  /**\n', '   * @dev payable fallback only allows the depositor to send funds, as long as the contract\n', "   * hasn't been executed already, and the expiration has not been passed.\n", '   */\n', '  function() external payable onlyDepositor {\n', '    require(contractExecuted == false);\n', '    require(now < expiration);\n', '  }\n', '  \n', '  /**\n', '   * @dev Executes the contract if called by an authorized user and the balance of the escrow\n', "   * is greater than 0. If the Oracle contract's reported value is the expected value, payment\n", '   * goes to the beneficiary. If the escrow contract has gone passed the expiration and the\n', "   * Oracle contract's reported value still is not what is expected, payment is returned to\n", '   * the depositor.\n', '   */\n', '  function executeContract() public checkAuthorizedUser() {\n', '    require(address(this).balance > 0);\n', '    if (oracle.current() == EXPECTED) {\n', '      contractExecuted = true;\n', '      emit ContractExecuted("Payment sent to beneficiary.");\n', '      beneficiary.transfer(address(this).balance);\n', '    } else if (now >= expiration) {\n', '      contractExecuted = true;\n', '      emit ContractExecuted("Payment refunded to depositor.");\n', '      depositor.transfer(address(this).balance);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Check the current value stored on the Oracle contract.\n', '   * @return The current value at the Oracle contract.\n', '   */\n', '  function requestOracleValue() public view onlyOwner returns(bytes32) {\n', '    return oracle.current();\n', '  }\n', '\n', '  /**\n', '   * @dev Reverts if called by any account other than the owner, depositor, or beneficiary.\n', '   */\n', '  modifier checkAuthorizedUser() {\n', '    require(msg.sender == owner || msg.sender == depositor || msg.sender == beneficiary, "Only authorized users may call this function.");\n', '    _;\n', '  }\n', '  \n', '  /**\n', '   * @dev Reverts if called by any account other than the depositor.\n', '   */\n', '  modifier onlyDepositor() {\n', '    require(msg.sender == depositor, "Only the depositor may call this function.");\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Interface for the Oracle contract.\n', ' */\n', 'interface IOracle{\n', '  function current() view external returns(bytes32);\n', '}']
