['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------------------------\n', '// PublickOffering by Xender Limited.\n', '// An ERC20 standard\n', '//\n', '// author: Xender Team\n', '// Contact: <span class="__cf_email__" data-cfemail="e093859296898385a098858e848592ce838f8d">[email&#160;protected]</span>\n', '// ----------------------------------------------------------------------------------------------\n', '\n', 'contract Authority {\n', '    \n', '    // contract administrator\n', '    address public owner;\n', '    \n', '    // publick offering beneficiary\n', '    address public beneficiary;\n', '    \n', '    // publick offering has closed\n', '    bool public closed = false;\n', '    \n', '    // allowed draw ETH\n', '    bool public allowDraw = true;\n', '    \n', '     modifier onlyOwner() { \n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyBeneficiary(){\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '    \n', '    modifier alloweDrawEth(){\n', '       if(allowDraw){\n', '           _;\n', '       }\n', '    }\n', '    \n', '    function Authority() public {\n', '        owner = msg.sender;\n', '        beneficiary = msg.sender;\n', '    }\n', '    \n', '    function open() public onlyOwner {\n', '        closed = false;\n', '    }\n', '    \n', '    function close() public onlyOwner {\n', '        closed = true;\n', '    }\n', '    \n', '    function setAllowDrawETH(bool _allow) public onlyOwner{\n', '        allowDraw = _allow;\n', '    }\n', '}\n', '\n', 'contract PublickOffering is Authority {\n', '    \n', '    // invest info\n', '    struct investorInfo{\n', '        address investor;\n', '        uint256 amount;\n', '        uint    utime;\n', '        bool    hadback;\n', '    }\n', '    \n', '    // investors bills\n', '    mapping(uint => investorInfo) public bills;\n', '    \n', '    // recive ETH total amount\n', '    uint256 public totalETHSold;\n', '    \n', '    // investor number\n', '    uint public lastAccountNum;\n', '    \n', '    // min ETH\n', '    uint256 public constant minETH = 0.2 * 10 ** 18;\n', '    \n', '    // max ETH\n', '    uint256 public constant maxETH = 20 * 10 ** 18;\n', '    \n', '    event Bill(address indexed sender, uint256 value, uint time);\n', '    event Draw(address indexed _addr, uint256 value, uint time);\n', '    event Back(address indexed _addr, uint256 value, uint time);\n', '    \n', '    function PublickOffering() public {\n', '        totalETHSold = 0;\n', '        lastAccountNum = 0;\n', '    }\n', '    \n', '    function () public payable {\n', '        if(!closed){\n', '            require(msg.value >= minETH);\n', '            require(msg.value <= maxETH);\n', '            bills[lastAccountNum].investor = msg.sender;\n', '            bills[lastAccountNum].amount = msg.value;\n', '            bills[lastAccountNum].utime = now;\n', '            totalETHSold += msg.value;\n', '            lastAccountNum++;\n', '            Bill(msg.sender, msg.value, now);\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '    \n', '    function drawETH(uint256 amount) public onlyBeneficiary alloweDrawEth{\n', '        beneficiary.transfer(amount);\n', '        Draw(msg.sender, amount, now);\n', '    }\n', '    \n', '    function backETH(uint pos) public onlyBeneficiary{\n', '        if(!bills[pos].hadback){\n', '            require(pos < lastAccountNum);\n', '            bills[pos].investor.transfer(bills[pos].amount);\n', '            bills[pos].hadback = true;\n', '            Back(bills[pos].investor, bills[pos].amount, now);\n', '        }\n', '    }\n', '    \n', '}']