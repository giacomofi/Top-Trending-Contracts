['pragma solidity ^0.4.13;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', 'contract TokenContinuousDistribution is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Basic;\n', '\n', '    event Released(ERC20Basic token, uint256 amount);\n', '\n', '    // beneficiary of tokens after they are released\n', '    address public beneficiary;\n', '\n', '    uint256 public cliff;\n', '    uint256 public start;\n', '    uint256 public endTime;\n', '    // 1 day = 86400 seconds\n', '    uint256 public secondsIn1Unit = 86400;\n', '    // 365 days * 5 = 1825 time units\n', '    uint256 public numberOfUnits = 1825;\n', '    // 86400 * 1825\n', '    uint256 public duration = 157680000;\n', '\n', '    //1st interval gets 5/15*total balance allowed, 2nd gets 4/15*TBA, 3rd gets 3*TBA, 4th gets 2*TBA, 5th gets 1*TBA\n', '    uint256 numberOfPhases = 5;\n', '    // 15=5+4+3+2+1\n', '    uint256 slice = 15;\n', '\n', '    mapping(address => uint256) public released;\n', '\n', '    /**\n', '     * @dev Creates a continuous distribution contract that distributes its balance of any ERC20 token to the\n', '     * _beneficiary, gradually in a linear fashion until _start + _duration,\n', '     * where _duration is the result of secondsIn1Unit*numberOfUnits\n', '     * By then all of the balance will have distributed.\n', '     * @param _beneficiary address of the beneficiary to whom distributed tokens are transferred\n', '     * @param _start the time (as Unix time) at which point continuous distribution starts\n', '     * @param _cliff duration in seconds of the cliff in which tokens will begin to continuous-distribute\n', '     */\n', '    constructor(\n', '        address _beneficiary,\n', '        uint256 _start,\n', '        uint256 _cliff\n', '    )\n', '    public\n', '    {\n', '        require(_beneficiary != address(0), "Beneficiary address should NOT be null.");\n', '        require(_cliff <= duration, "Cliff should be less than or equal to duration (i.e. secondsIn1Unit.mul(numberOfUnits)).");\n', '        require((numberOfUnits % 5) == 0, "numberOfUnits should be a multiple of 5");\n', '\n', '\n', '        beneficiary = _beneficiary;\n', '        cliff = _start.add(_cliff);\n', '        start = _start;\n', '        endTime = _start.add(duration);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers distributed tokens to beneficiary.\n', '     * @param token ERC20 token which is being distributed\n', '     */\n', '    function release(ERC20Basic token) public {\n', '        uint256 unreleased = releasableAmount(token);\n', '\n', '        require(unreleased > 0, "Unreleased amount should be larger than 0.");\n', '\n', '        released[token] = released[token].add(unreleased);\n', '\n', '        token.safeTransfer(beneficiary, unreleased);\n', '\n', '        emit Released(token, unreleased);\n', '    }\n', '\n', '    /**\n', "     * @dev Calculates the amount that has already distributed but hasn't been released yet.\n", '     * @param token ERC20 token which is being distributed\n', '     */\n', '    function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '        return distributedAmount(token).sub(released[token]);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount that has already distributed.\n', '     * @param token ERC20 token which is being distributed\n', '     */\n', '    function distributedAmount(ERC20Basic token) public view returns (uint256) {\n', '        uint256 blockTimestamp = block.timestamp;\n', '        return distributedAmountWithBlockTimestamp(token, blockTimestamp);\n', '    }\n', '\n', '\n', '    function distributedAmountWithBlockTimestamp(ERC20Basic token, uint256 blockTimestamp) public view returns (uint256) {\n', '        uint256 currentBalance = token.balanceOf(this);\n', '        uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '        if (blockTimestamp < cliff) {\n', '            return 0;\n', '        } else if (blockTimestamp >= endTime) {\n', '            return totalBalance;\n', '        } else {\n', "            uint256 unitsPassed = blockTimestamp.sub(start).div(secondsIn1Unit); // number of time unit passed, remember unit is usually 'day'\n", "            uint256 unitsIn1Phase = numberOfUnits.div(numberOfPhases); // remember unit is usually 'day'\n", '            uint256 unitsInThisPhase;\n', '            uint256 weight;\n', '\n', '            if (unitsPassed < unitsIn1Phase) {\n', '                weight = 5;\n', '                unitsInThisPhase = unitsPassed;\n', '                // delay division to last step to keep precision\n', '                return unitsInThisPhase.mul(totalBalance).mul(weight).div(slice).div(unitsIn1Phase);\n', '            } else if (unitsPassed < unitsIn1Phase.mul(2)) {\n', '                weight = 4;\n', '                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase);\n', '                // "5" because we have everything in the previous phase \n', '                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))\n', '                return totalBalance.mul(5).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);\n', '            } else if (unitsPassed < unitsIn1Phase.mul(3)) {\n', '                weight = 3;\n', '                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(2));\n', '                // "9" because we have everything in the previous phase = 5+4\n', '                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))\n', '                return totalBalance.mul(9).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);\n', '            } else if (unitsPassed < unitsIn1Phase.mul(4)) {\n', '                weight = 2;\n', '                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(3));\n', '                // "12" because we have everything in the previous phase = 5+4+3\n', '                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))\n', '                return totalBalance.mul(12).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);\n', '            } else if (unitsPassed < unitsIn1Phase.mul(5)) {\n', '                weight = 1;\n', '                unitsInThisPhase = unitsPassed.sub(unitsIn1Phase.mul(4));\n', '                // "14" because we have everything in the previous phase = 5+4+3+2\n', '                // and note div(slice) is moved to the end, (x+y).div(slice) => x.div(slice).add(y.div(slice))\n', '                return totalBalance.mul(14).add(unitsInThisPhase.mul(totalBalance).mul(weight).div(unitsIn1Phase)).div(slice);\n', '            }\n', '            require(blockTimestamp < endTime, "Block timestamp is expected to have not reached distribution endTime if the code even falls in here.");\n', '        }\n', '    }\n', '}']