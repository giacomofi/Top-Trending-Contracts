['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Raffle {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) public balances;\n', '\n', '    address public owner;\n', '    address public winner;\n', '  \n', '    address[] public entrants;\n', '    uint256 public numEntrants;\n', '    uint256 public entryPrice;\n', '    uint256 public deadline;\n', '    uint256 public threshold;\n', '    uint256 public percentageTaken;\n', '    \n', '    event PlayerEntered(address participant,uint256 amount,uint256 totalParticipants);\n', '    event Winner(address winner,uint256 amount);\n', '    \n', '    // @param _entryPrice - entry price for each participant in wei i.e. 10^-18 eth.\n', '    // @param _deadline - block number at which you want the crowdsale to end\n', '    // @param _percentageToken - for example, to take 33% of the total use 3, only use integers\n', '    constructor(uint256 _entryPrice, uint256 _deadline, uint256 _percentageTaken,uint256 _thresold) public {\n', '        entryPrice = _entryPrice;\n', '        deadline = _deadline;\n', '        percentageTaken = _percentageTaken;\n', '        threshold = _thresold;\n', '        owner = msg.sender;\n', '    }    \n', '\n', '    modifier thresholdReached() {\n', '        require(numEntrants >= threshold, "Below Thresold participant");\n', '        _;\n', '    }\n', '\n', '    modifier belowThreshold() {\n', '        require(numEntrants <= threshold, "Above Thresold participant");\n', '        _;\n', '    }\n', '\n', '    modifier deadlinePassed() {\n', '        require(now >= deadline, "Deadline is not Passed");\n', '        _;\n', '    }\n', '\n', '    modifier deadlineNotPassed() {\n', '        require(now <= deadline,"Deadline is Passed");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "You are not Owner");\n', '        _;\n', '    }\n', '    \n', '    modifier pickingWinner() {\n', '        require(winner == 0x0, "Winner is already picked");\n', '        _;\n', '    }\n', '    \n', '    function() public payable {\n', '        enterRaffle();\n', '    }\n', '\n', '    function enterRaffle() public payable deadlineNotPassed {\n', '        require(msg.value == entryPrice);\n', '        balances[msg.sender] = balances[msg.sender].add(msg.value);\n', '        numEntrants = numEntrants.add(1);\n', '        entrants.push(msg.sender);\n', '        emit PlayerEntered(msg.sender, msg.value, numEntrants);\n', '    }\n', '\n', '    function withdrawFunds(uint amount) public deadlinePassed belowThreshold {\n', '        require(balances[msg.sender] >= amount, "You do not have enough balance");\n', '        balances[msg.sender] = balances[msg.sender].sub(amount);\n', '        (msg.sender).transfer(amount);\n', '    }\n', '\n', '    function determineWinner() public onlyOwner deadlinePassed thresholdReached pickingWinner {\n', '        \n', '        uint256 blockSeed = uint256(blockhash(block.number - 1)).div(2);\n', '        uint256 coinbaseSeed = uint256(block.coinbase).div(2);\n', '        uint256 winnerIndex = blockSeed.add(coinbaseSeed).mod(numEntrants);\n', '        winner = entrants[winnerIndex];\n', '        uint256 payout = address(this).balance;\n', '        payout = payout.div(percentageTaken);\n', '        winner.transfer(payout);\n', '        owner.transfer(address(this).balance);\n', '        emit Winner(winner, payout);\n', '    }\n', '}']