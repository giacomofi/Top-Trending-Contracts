['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  constructor() public { owner = msg.sender;  }\n', ' \n', '  modifier onlyOwner() {     \n', '      address sender =  msg.sender;\n', '      address _owner = owner;\n', '      require(msg.sender == _owner);    \n', '      _;  \n', '  }\n', '  \n', '  function transferOwnership(address newOwner) onlyOwner public { \n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  \n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   \n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title BrickToken\n', ' * @dev Brick ERC20 Token that can be minted.\n', ' * It is meant to be used in Brick crowdsale contract.\n', ' */\n', 'contract BrickToken is MintableToken {\n', '\n', '    string public constant name = "Brick"; \n', '    string public constant symbol = "BRK";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function getTotalSupply() view public returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '    \n', '}\n', '\n', '/**\n', ' * @title Brick Crowdsale\n', ' * @dev This is Brick&#39;s crowdsale contract.\n', ' */\n', 'contract BrickCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '    uint256 public limitDateSale; // end date in units\n', '    uint256 public currentTime;\n', '    \n', '    bool public isSoftCapHit = false;\n', '    bool public isStarted = false;\n', '    bool public isFinalized = false;\n', '    // Token rates as per rounds\n', '    uint256 icoPvtRate  = 40; \n', '    uint256 icoPreRate  = 50;\n', '    uint256 ico1Rate    = 65;\n', '    uint256 ico2Rate    = 75;\n', '    uint256 ico3Rate    = 90;\n', '    // Tokens in each round\n', '    uint256 public pvtTokens        = (40000) * (10**18);\n', '    uint256 public preSaleTokens    = (6000000) * (10**18);\n', '    uint256 public ico1Tokens       = (8000000) * (10**18);\n', '    uint256 public ico2Tokens       = (8000000) * (10**18);\n', '    uint256 public ico3Tokens       = (8000000) * (10**18);\n', '    uint256 public totalTokens      = (40000000)* (10**18); // 40 million\n', '    \n', '      // address where funds are collected\n', '    address public advisoryEthWallet        = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be;\n', '    address public infraEthWallet           = 0x536D36a05F6592aa29BB0beE30cda706B1272521;\n', '    address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1;\n', '    address public operationsEthWallet      = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967;\n', '   // address where token will go \n', '     address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; // wallet where remaining tokens will go\n', '     \n', '   struct ContributorData {\n', '        uint256 contributionAmount;\n', '        uint256 tokensIssued;\n', '    }\n', '   \n', '    mapping(address => ContributorData) public contributorList;\n', '    mapping(uint => address) contributorIndexes;\n', '    uint nextContributorIndex;\n', '\n', '    constructor() public {}\n', '    \n', '   function init( uint256 _tokensForCrowdsale, uint256 _etherInUSD, address _tokenAddress, uint256 _softCapInEthers, uint256 _hardCapInEthers, \n', '        uint _saleDurationInDays, uint bonus) onlyOwner public {\n', '        \n', '       // setTotalTokens(_totalTokens);\n', '        currentTime = now;\n', '        setTokensForCrowdSale(_tokensForCrowdsale);\n', '        setRate(_etherInUSD);\n', '        setTokenAddress(_tokenAddress);\n', '        setSoftCap(_softCapInEthers);\n', '        setHardCap(_hardCapInEthers);\n', '        setSaleDuration(_saleDurationInDays);\n', '        setSaleBonus(bonus);\n', '        start();\n', '        // starting the crowdsale\n', '   }\n', '   \n', '    /**\n', '    * @dev Must be called to start the crowdsale\n', '    */\n', '    function start() onlyOwner public {\n', '        require(!isStarted);\n', '        require(!hasStarted());\n', '        require(tokenAddress != address(0));\n', '        require(saleDuration != 0);\n', '        require(totalTokens != 0);\n', '        require(tokensForCrowdSale != 0);\n', '        require(softCap != 0);\n', '        require(hardCap != 0);\n', '        \n', '        starting();\n', '        emit BrickStarted();\n', '        \n', '        isStarted = true;\n', '        // endPvtSale();\n', '    }\n', ' \n', '    function splitTokens() internal {   \n', '        token.mint(techDevelopmentEthWallet, totalTokens.mul(3).div(100));          //wallet for tech development\n', '        tokensIssuedTillNow = tokensIssuedTillNow + totalTokens.mul(3).div(100);\n', '        token.mint(operationsEthWallet, totalTokens.mul(7).div(100));                //wallet for operations wallet\n', '        tokensIssuedTillNow = tokensIssuedTillNow + totalTokens.mul(7).div(100);\n', '        \n', '    }\n', '    \n', '       \n', '   uint256 public tokensForCrowdSale = 0;\n', '   function setTokensForCrowdSale(uint256 _tokensForCrowdsale) onlyOwner public {\n', '       tokensForCrowdSale = _tokensForCrowdsale.mul(10 ** 18);  \n', '   }\n', ' \n', '   \n', '    uint256 public rate=0;\n', '    uint256 public etherInUSD;\n', '    function setRate(uint256 _etherInUSD) internal {\n', '        etherInUSD = _etherInUSD;\n', '        rate = getCurrentRateInCents().mul(10**18).div(100).div(_etherInUSD);\n', '    }\n', '    \n', '    function setRate(uint256 rateInCents, uint256 _etherInUSD) public onlyOwner {\n', '        etherInUSD = _etherInUSD;\n', '        rate = rateInCents.mul(10**18).div(100).div(_etherInUSD);\n', '    }\n', '    \n', '    function updateRateInWei() internal { // this method requires that you must have called etherInUSD earliar, must not be called except when round is ending.\n', '        require(etherInUSD != 0);\n', '        rate = getCurrentRateInCents().mul(10**18).div(100).div(etherInUSD);\n', '    }\n', '    \n', '    function getCurrentRateInCents() public view returns (uint256)\n', '    {\n', '        if(currentRound == 1) {\n', '            return icoPvtRate;\n', '        } else if(currentRound == 2) {\n', '            return icoPreRate;\n', '        } else if(currentRound == 3) {\n', '            return ico1Rate;\n', '        } else if(currentRound == 4) {\n', '            return  ico2Rate;\n', '        } else if(currentRound == 5) {\n', '            return ico3Rate;\n', '        } else {\n', '            return ico3Rate;\n', '        }\n', '    }\n', '    // The token being sold\n', '    BrickToken public token;\n', '    address tokenAddress = 0x0; \n', '    function setTokenAddress(address _tokenAddress) public onlyOwner {\n', '        tokenAddress = _tokenAddress; // to check if token address is provided at start\n', '        token = BrickToken(_tokenAddress);\n', '    }\n', '    \n', ' \n', '    function setPvtTokens (uint256 _pvtTokens)onlyOwner public {\n', '        require(!icoPvtEnded);\n', '        pvtTokens = (_pvtTokens).mul(10 ** 18);\n', '    }\n', '    function setPreSaleTokens (uint256 _preSaleTokens)onlyOwner public {\n', '        require(!icoPreEnded);\n', '        preSaleTokens = (_preSaleTokens).mul(10 ** 18);\n', '    }\n', '    function setIco1Tokens (uint256 _ico1Tokens)onlyOwner public {\n', '        require(!ico1Ended);\n', '        ico1Tokens = (_ico1Tokens).mul(10 ** 18);\n', '    }\n', '    function setIco2Tokens (uint256 _ico2Tokens)onlyOwner public {\n', '        require(!ico2Ended);\n', '        ico2Tokens = (_ico2Tokens).mul(10 ** 18);\n', '    }\n', '    function setIco3Tokens (uint256 _ico3Tokens)onlyOwner public {\n', '        require(!ico3Ended);\n', '        ico3Tokens = (_ico3Tokens).mul(10 ** 18);\n', '    }\n', '    \n', '   uint256 public softCap = 0;\n', '   function setSoftCap(uint256 _softCap) onlyOwner public {\n', '       softCap = _softCap.mul(10 ** 18); \n', '    }\n', '   \n', '   uint256 public hardCap = 0; \n', '   function setHardCap(uint256 _hardCap) onlyOwner public {\n', '       hardCap = _hardCap.mul(10 ** 18); \n', '   }\n', '  \n', '    // sale period (includes holidays)\n', '    uint public saleDuration = 0; // in days ex: 60.\n', '    function setSaleDuration(uint _saleDurationInDays) onlyOwner public {\n', '        saleDuration = _saleDurationInDays;\n', '        limitDateSale = startTime.add(saleDuration * 1 days);\n', '        endTime = limitDateSale;\n', '    }\n', '  \n', '    uint public saleBonus = 0; // ex. 10\n', '    function setSaleBonus(uint bonus) public onlyOwner{\n', '        saleBonus = bonus;\n', '    }\n', '    \n', '    // fallback function can be used to buy tokens\n', '    function () public payable {\n', '        buyPhaseTokens(msg.sender);\n', '    }\n', '   \n', '   function transferTokenOwnership(address _address) onlyOwner public {\n', '       token.transferOwnership(_address);\n', '   }\n', '    \n', '    function releaseTokens(address _contributerAddress, uint256 tokensOfContributor) internal {\n', '       token.mint(_contributerAddress, tokensOfContributor);\n', '    }\n', '    \n', '    function currentTokenSupply() public view returns(uint256){\n', '        return token.getTotalSupply();\n', '    }\n', '    \n', '   function buyPhaseTokens(address beneficiary) public payable \n', '   { \n', '        assert(!ico3Ended);\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '        // calculate token amount to be created\n', '        uint256 tokens = computeTokens(weiAmount); //converts the wei to token amount\n', '        require(isWithinTokenAllocLimit(tokens));\n', '       \n', '        if(int(pvtTokens - tokensIssuedTillNow) > 0) { //phase1 80\n', '            require(int (tokens) < (int(pvtTokens -  tokensIssuedTillNow)));\n', '            buyTokens(tokens,weiAmount,beneficiary);\n', '        } else if (int (preSaleTokens + pvtTokens - tokensIssuedTillNow) > 0) {  //phase 2  80\n', '            require(int(tokens) < (int(preSaleTokens + pvtTokens - tokensIssuedTillNow)));\n', '            buyTokens(tokens,weiAmount,beneficiary);\n', '        } else if(int(ico1Tokens + preSaleTokens + pvtTokens - tokensIssuedTillNow) > 0) {  //phase3\n', '            require(int(tokens) < (int(ico1Tokens + preSaleTokens + pvtTokens -tokensIssuedTillNow)));\n', '            buyTokens(tokens,weiAmount,beneficiary);\n', '        } else if(int(ico2Tokens + ico1Tokens + preSaleTokens + pvtTokens - (tokensIssuedTillNow)) > 0) {  //phase4\n', '            require(int(tokens) < (int(ico2Tokens + ico1Tokens + preSaleTokens + pvtTokens - (tokensIssuedTillNow))));\n', '            buyTokens(tokens,weiAmount,beneficiary);\n', '        }  else if(!ico3Ended && (int(tokensForCrowdSale - (tokensIssuedTillNow)) > 0)) { // 500 -400\n', '            require(int(tokens) < (int(tokensForCrowdSale - (tokensIssuedTillNow))));\n', '            buyTokens(tokens,weiAmount,beneficiary);\n', '        }\n', '   }\n', '   uint256 public tokensIssuedTillNow=0;\n', '   function buyTokens(uint256 tokens, uint256 weiAmount ,address beneficiary) internal {\n', '       \n', '        // update state - Add to eth raised\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        if (contributorList[beneficiary].contributionAmount == 0) { // if its a new contributor, add him and increase index\n', '            contributorIndexes[nextContributorIndex] = beneficiary;\n', '            nextContributorIndex += 1;\n', '        }\n', '        \n', '        contributorList[beneficiary].contributionAmount += weiAmount;\n', '        contributorList[beneficiary].tokensIssued += tokens;\n', '        tokensIssuedTillNow = tokensIssuedTillNow + tokens;\n', '        releaseTokens(beneficiary, tokens); // releaseTokens\n', '        forwardFunds(); // forwardFunds\n', '        emit BrickTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    }\n', '   \n', '  \n', '      /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event BrickTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '    function investorCount() constant public returns(uint) {\n', '        return nextContributorIndex;\n', '    }\n', '    \n', '    function hasStarted() public constant returns (bool) {\n', '        return (startTime != 0 && now > startTime);\n', '    }\n', '\n', '    function isWithinSaleTimeLimit() internal view returns (bool) {\n', '        return now <= limitDateSale;\n', '    }\n', '\n', '    function isWithinSaleLimit(uint256 _tokens) internal view returns (bool) {\n', '        return token.getTotalSupply().add(_tokens) <= tokensForCrowdSale;\n', '    }\n', '    \n', '    function computeTokens(uint256 weiAmount) view internal returns (uint256) {\n', '       return weiAmount.mul(10 ** 18).div(rate);\n', '    }\n', '    \n', '    function isWithinTokenAllocLimit(uint256 _tokens) view internal returns (bool) {\n', '        return (isWithinSaleTimeLimit() && isWithinSaleLimit(_tokens));\n', '    }\n', '\n', '    // overriding BrckBaseCrowdsale#validPurchase to add extra cap logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinCap = weiRaised.add(msg.value) <= hardCap;\n', '        bool withinPeriod = now >= startTime && now <= endTime; \n', '        bool nonZeroPurchase = msg.value != 0; \n', '        return (withinPeriod && nonZeroPurchase) && withinCap && isWithinSaleTimeLimit();\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        bool capReached = weiRaised >= hardCap;\n', '        return (endTime != 0 && now > endTime) || capReached;\n', '    }\n', '\n', '  \n', '\n', '  event BrickStarted();\n', '  event BrickFinalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        // require(hasEnded());\n', '        \n', '        finalization();\n', '        emit BrickFinalized();\n', '        \n', '        isFinalized = true;\n', '    }\n', '\n', '    function starting() internal {\n', '        startTime = now;\n', '        limitDateSale = startTime.add(saleDuration * 1 days);\n', '        endTime = limitDateSale;\n', '    }\n', '\n', '    function finalization() internal {\n', '         splitTokens();\n', '\n', '        token.mint(wallet, totalTokens.sub(tokensIssuedTillNow));\n', '        if(address(this).balance > 0){ // if any funds are left in contract.\n', '            processFundsIfAny();\n', '        }\n', '    }\n', '    \n', '     // send ether to the fund collection wallet\n', '    function forwardFunds() internal {\n', '        \n', '        require(advisoryEthWallet != address(0));\n', '        require(infraEthWallet != address(0));\n', '        require(techDevelopmentEthWallet != address(0));\n', '        require(operationsEthWallet != address(0));\n', '        \n', '        operationsEthWallet.transfer(msg.value.mul(60).div(100));\n', '        advisoryEthWallet.transfer(msg.value.mul(5).div(100));\n', '        infraEthWallet.transfer(msg.value.mul(10).div(100));\n', '        techDevelopmentEthWallet.transfer(msg.value.mul(25).div(100));\n', '    }\n', '    \n', '     // send ether to the fund collection wallet\n', '    function processFundsIfAny() internal {\n', '        \n', '        require(advisoryEthWallet != address(0));\n', '        require(infraEthWallet != address(0));\n', '        require(techDevelopmentEthWallet != address(0));\n', '        require(operationsEthWallet != address(0));\n', '        \n', '        operationsEthWallet.transfer(address(this).balance.mul(60).div(100));\n', '        advisoryEthWallet.transfer(address(this).balance.mul(5).div(100));\n', '        infraEthWallet.transfer(address(this).balance.mul(10).div(100));\n', '        techDevelopmentEthWallet.transfer(address(this).balance.mul(25).div(100));\n', '    }\n', '    \n', '    //functions to manually end round sales\n', '    \n', '    uint256 public currentRound = 1;\n', '    bool public icoPvtEnded = false;\n', '     bool public icoPreEnded = false;\n', '      bool public ico1Ended = false;\n', '       bool public ico2Ended = false;\n', '        bool public ico3Ended = false;\n', '    \n', '    function endPvtSale() onlyOwner public       //ending private sale\n', '    {\n', '        require(!icoPvtEnded);\n', '        pvtTokens = tokensIssuedTillNow;\n', '        currentRound = 2;\n', '        updateRateInWei();\n', '        icoPvtEnded = true;\n', '        \n', '    }\n', '     function endPreSale() onlyOwner public      //ending pre-sale\n', '    {\n', '        require(!icoPreEnded && icoPvtEnded);\n', '        preSaleTokens = tokensIssuedTillNow - pvtTokens; \n', '        currentRound = 3;\n', '        updateRateInWei();\n', '        icoPreEnded = true;\n', '    }\n', '     function endIcoSaleRound1() onlyOwner public   //ending IcoSaleRound1\n', '    {\n', '        require(!ico1Ended && icoPreEnded);\n', '       ico1Tokens = tokensIssuedTillNow - preSaleTokens - pvtTokens; \n', '       currentRound = 4;\n', '       updateRateInWei();\n', '       ico1Ended = true;\n', '    }\n', '     function endIcoSaleRound2() onlyOwner public   //ending IcoSaleRound2\n', '    {\n', '       require(!ico2Ended && ico1Ended);\n', '       ico2Tokens = tokensIssuedTillNow - ico1Tokens - preSaleTokens - pvtTokens;\n', '       currentRound = 5;\n', '       updateRateInWei();\n', '       ico2Ended=true;\n', '    }\n', '     function endIcoSaleRound3() onlyOwner public  //ending IcoSaleRound3\n', '     {\n', '        require(!ico3Ended && ico2Ended);\n', '        ico3Tokens = tokensIssuedTillNow - ico2Tokens - ico1Tokens - preSaleTokens - pvtTokens;\n', '        updateRateInWei();\n', '        ico3Ended = true;\n', '    }\n', '    \n', '    modifier afterDeadline() { if (hasEnded() || isFinalized) _; } // a modifier to tell token sale ended\n', '    \n', '    function selfDestroy(address _address) public onlyOwner { // this method will send all money to the following address after finalize\n', '        assert(isFinalized);\n', '        selfdestruct(_address);\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  constructor() public { owner = msg.sender;  }\n', ' \n', '  modifier onlyOwner() {     \n', '      address sender =  msg.sender;\n', '      address _owner = owner;\n', '      require(msg.sender == _owner);    \n', '      _;  \n', '  }\n', '  \n', '  function transferOwnership(address newOwner) onlyOwner public { \n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '\n', '  \n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '  \n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   \n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title BrickToken\n', ' * @dev Brick ERC20 Token that can be minted.\n', ' * It is meant to be used in Brick crowdsale contract.\n', ' */\n', 'contract BrickToken is MintableToken {\n', '\n', '    string public constant name = "Brick"; \n', '    string public constant symbol = "BRK";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function getTotalSupply() view public returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '    \n', '}\n', '\n', '/**\n', ' * @title Brick Crowdsale\n', " * @dev This is Brick's crowdsale contract.\n", ' */\n', 'contract BrickCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '    uint256 public limitDateSale; // end date in units\n', '    uint256 public currentTime;\n', '    \n', '    bool public isSoftCapHit = false;\n', '    bool public isStarted = false;\n', '    bool public isFinalized = false;\n', '    // Token rates as per rounds\n', '    uint256 icoPvtRate  = 40; \n', '    uint256 icoPreRate  = 50;\n', '    uint256 ico1Rate    = 65;\n', '    uint256 ico2Rate    = 75;\n', '    uint256 ico3Rate    = 90;\n', '    // Tokens in each round\n', '    uint256 public pvtTokens        = (40000) * (10**18);\n', '    uint256 public preSaleTokens    = (6000000) * (10**18);\n', '    uint256 public ico1Tokens       = (8000000) * (10**18);\n', '    uint256 public ico2Tokens       = (8000000) * (10**18);\n', '    uint256 public ico3Tokens       = (8000000) * (10**18);\n', '    uint256 public totalTokens      = (40000000)* (10**18); // 40 million\n', '    \n', '      // address where funds are collected\n', '    address public advisoryEthWallet        = 0x0D7629d32546CD493bc33ADEF115D4489f5599Be;\n', '    address public infraEthWallet           = 0x536D36a05F6592aa29BB0beE30cda706B1272521;\n', '    address public techDevelopmentEthWallet = 0x4d0B70d8E612b5dca3597C64643a8d1efd5965e1;\n', '    address public operationsEthWallet      = 0xbc67B82924eEc8643A4f2ceDa59B5acfd888A967;\n', '   // address where token will go \n', '     address public wallet = 0x44d44CA0f75bdd3AE8806D02515E8268459c554A; // wallet where remaining tokens will go\n', '     \n', '   struct ContributorData {\n', '        uint256 contributionAmount;\n', '        uint256 tokensIssued;\n', '    }\n', '   \n', '    mapping(address => ContributorData) public contributorList;\n', '    mapping(uint => address) contributorIndexes;\n', '    uint nextContributorIndex;\n', '\n', '    constructor() public {}\n', '    \n', '   function init( uint256 _tokensForCrowdsale, uint256 _etherInUSD, address _tokenAddress, uint256 _softCapInEthers, uint256 _hardCapInEthers, \n', '        uint _saleDurationInDays, uint bonus) onlyOwner public {\n', '        \n', '       // setTotalTokens(_totalTokens);\n', '        currentTime = now;\n', '        setTokensForCrowdSale(_tokensForCrowdsale);\n', '        setRate(_etherInUSD);\n', '        setTokenAddress(_tokenAddress);\n', '        setSoftCap(_softCapInEthers);\n', '        setHardCap(_hardCapInEthers);\n', '        setSaleDuration(_saleDurationInDays);\n', '        setSaleBonus(bonus);\n', '        start();\n', '        // starting the crowdsale\n', '   }\n', '   \n', '    /**\n', '    * @dev Must be called to start the crowdsale\n', '    */\n', '    function start() onlyOwner public {\n', '        require(!isStarted);\n', '        require(!hasStarted());\n', '        require(tokenAddress != address(0));\n', '        require(saleDuration != 0);\n', '        require(totalTokens != 0);\n', '        require(tokensForCrowdSale != 0);\n', '        require(softCap != 0);\n', '        require(hardCap != 0);\n', '        \n', '        starting();\n', '        emit BrickStarted();\n', '        \n', '        isStarted = true;\n', '        // endPvtSale();\n', '    }\n', ' \n', '    function splitTokens() internal {   \n', '        token.mint(techDevelopmentEthWallet, totalTokens.mul(3).div(100));          //wallet for tech development\n', '        tokensIssuedTillNow = tokensIssuedTillNow + totalTokens.mul(3).div(100);\n', '        token.mint(operationsEthWallet, totalTokens.mul(7).div(100));                //wallet for operations wallet\n', '        tokensIssuedTillNow = tokensIssuedTillNow + totalTokens.mul(7).div(100);\n', '        \n', '    }\n', '    \n', '       \n', '   uint256 public tokensForCrowdSale = 0;\n', '   function setTokensForCrowdSale(uint256 _tokensForCrowdsale) onlyOwner public {\n', '       tokensForCrowdSale = _tokensForCrowdsale.mul(10 ** 18);  \n', '   }\n', ' \n', '   \n', '    uint256 public rate=0;\n', '    uint256 public etherInUSD;\n', '    function setRate(uint256 _etherInUSD) internal {\n', '        etherInUSD = _etherInUSD;\n', '        rate = getCurrentRateInCents().mul(10**18).div(100).div(_etherInUSD);\n', '    }\n', '    \n', '    function setRate(uint256 rateInCents, uint256 _etherInUSD) public onlyOwner {\n', '        etherInUSD = _etherInUSD;\n', '        rate = rateInCents.mul(10**18).div(100).div(_etherInUSD);\n', '    }\n', '    \n', '    function updateRateInWei() internal { // this method requires that you must have called etherInUSD earliar, must not be called except when round is ending.\n', '        require(etherInUSD != 0);\n', '        rate = getCurrentRateInCents().mul(10**18).div(100).div(etherInUSD);\n', '    }\n', '    \n', '    function getCurrentRateInCents() public view returns (uint256)\n', '    {\n', '        if(currentRound == 1) {\n', '            return icoPvtRate;\n', '        } else if(currentRound == 2) {\n', '            return icoPreRate;\n', '        } else if(currentRound == 3) {\n', '            return ico1Rate;\n', '        } else if(currentRound == 4) {\n', '            return  ico2Rate;\n', '        } else if(currentRound == 5) {\n', '            return ico3Rate;\n', '        } else {\n', '            return ico3Rate;\n', '        }\n', '    }\n', '    // The token being sold\n', '    BrickToken public token;\n', '    address tokenAddress = 0x0; \n', '    function setTokenAddress(address _tokenAddress) public onlyOwner {\n', '        tokenAddress = _tokenAddress; // to check if token address is provided at start\n', '        token = BrickToken(_tokenAddress);\n', '    }\n', '    \n', ' \n', '    function setPvtTokens (uint256 _pvtTokens)onlyOwner public {\n', '        require(!icoPvtEnded);\n', '        pvtTokens = (_pvtTokens).mul(10 ** 18);\n', '    }\n', '    function setPreSaleTokens (uint256 _preSaleTokens)onlyOwner public {\n', '        require(!icoPreEnded);\n', '        preSaleTokens = (_preSaleTokens).mul(10 ** 18);\n', '    }\n', '    function setIco1Tokens (uint256 _ico1Tokens)onlyOwner public {\n', '        require(!ico1Ended);\n', '        ico1Tokens = (_ico1Tokens).mul(10 ** 18);\n', '    }\n', '    function setIco2Tokens (uint256 _ico2Tokens)onlyOwner public {\n', '        require(!ico2Ended);\n', '        ico2Tokens = (_ico2Tokens).mul(10 ** 18);\n', '    }\n', '    function setIco3Tokens (uint256 _ico3Tokens)onlyOwner public {\n', '        require(!ico3Ended);\n', '        ico3Tokens = (_ico3Tokens).mul(10 ** 18);\n', '    }\n', '    \n', '   uint256 public softCap = 0;\n', '   function setSoftCap(uint256 _softCap) onlyOwner public {\n', '       softCap = _softCap.mul(10 ** 18); \n', '    }\n', '   \n', '   uint256 public hardCap = 0; \n', '   function setHardCap(uint256 _hardCap) onlyOwner public {\n', '       hardCap = _hardCap.mul(10 ** 18); \n', '   }\n', '  \n', '    // sale period (includes holidays)\n', '    uint public saleDuration = 0; // in days ex: 60.\n', '    function setSaleDuration(uint _saleDurationInDays) onlyOwner public {\n', '        saleDuration = _saleDurationInDays;\n', '        limitDateSale = startTime.add(saleDuration * 1 days);\n', '        endTime = limitDateSale;\n', '    }\n', '  \n', '    uint public saleBonus = 0; // ex. 10\n', '    function setSaleBonus(uint bonus) public onlyOwner{\n', '        saleBonus = bonus;\n', '    }\n', '    \n', '    // fallback function can be used to buy tokens\n', '    function () public payable {\n', '        buyPhaseTokens(msg.sender);\n', '    }\n', '   \n', '   function transferTokenOwnership(address _address) onlyOwner public {\n', '       token.transferOwnership(_address);\n', '   }\n', '    \n', '    function releaseTokens(address _contributerAddress, uint256 tokensOfContributor) internal {\n', '       token.mint(_contributerAddress, tokensOfContributor);\n', '    }\n', '    \n', '    function currentTokenSupply() public view returns(uint256){\n', '        return token.getTotalSupply();\n', '    }\n', '    \n', '   function buyPhaseTokens(address beneficiary) public payable \n', '   { \n', '        assert(!ico3Ended);\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '        // calculate token amount to be created\n', '        uint256 tokens = computeTokens(weiAmount); //converts the wei to token amount\n', '        require(isWithinTokenAllocLimit(tokens));\n', '       \n', '        if(int(pvtTokens - tokensIssuedTillNow) > 0) { //phase1 80\n', '            require(int (tokens) < (int(pvtTokens -  tokensIssuedTillNow)));\n', '            buyTokens(tokens,weiAmount,beneficiary);\n', '        } else if (int (preSaleTokens + pvtTokens - tokensIssuedTillNow) > 0) {  //phase 2  80\n', '            require(int(tokens) < (int(preSaleTokens + pvtTokens - tokensIssuedTillNow)));\n', '            buyTokens(tokens,weiAmount,beneficiary);\n', '        } else if(int(ico1Tokens + preSaleTokens + pvtTokens - tokensIssuedTillNow) > 0) {  //phase3\n', '            require(int(tokens) < (int(ico1Tokens + preSaleTokens + pvtTokens -tokensIssuedTillNow)));\n', '            buyTokens(tokens,weiAmount,beneficiary);\n', '        } else if(int(ico2Tokens + ico1Tokens + preSaleTokens + pvtTokens - (tokensIssuedTillNow)) > 0) {  //phase4\n', '            require(int(tokens) < (int(ico2Tokens + ico1Tokens + preSaleTokens + pvtTokens - (tokensIssuedTillNow))));\n', '            buyTokens(tokens,weiAmount,beneficiary);\n', '        }  else if(!ico3Ended && (int(tokensForCrowdSale - (tokensIssuedTillNow)) > 0)) { // 500 -400\n', '            require(int(tokens) < (int(tokensForCrowdSale - (tokensIssuedTillNow))));\n', '            buyTokens(tokens,weiAmount,beneficiary);\n', '        }\n', '   }\n', '   uint256 public tokensIssuedTillNow=0;\n', '   function buyTokens(uint256 tokens, uint256 weiAmount ,address beneficiary) internal {\n', '       \n', '        // update state - Add to eth raised\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        if (contributorList[beneficiary].contributionAmount == 0) { // if its a new contributor, add him and increase index\n', '            contributorIndexes[nextContributorIndex] = beneficiary;\n', '            nextContributorIndex += 1;\n', '        }\n', '        \n', '        contributorList[beneficiary].contributionAmount += weiAmount;\n', '        contributorList[beneficiary].tokensIssued += tokens;\n', '        tokensIssuedTillNow = tokensIssuedTillNow + tokens;\n', '        releaseTokens(beneficiary, tokens); // releaseTokens\n', '        forwardFunds(); // forwardFunds\n', '        emit BrickTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    }\n', '   \n', '  \n', '      /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event BrickTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '    function investorCount() constant public returns(uint) {\n', '        return nextContributorIndex;\n', '    }\n', '    \n', '    function hasStarted() public constant returns (bool) {\n', '        return (startTime != 0 && now > startTime);\n', '    }\n', '\n', '    function isWithinSaleTimeLimit() internal view returns (bool) {\n', '        return now <= limitDateSale;\n', '    }\n', '\n', '    function isWithinSaleLimit(uint256 _tokens) internal view returns (bool) {\n', '        return token.getTotalSupply().add(_tokens) <= tokensForCrowdSale;\n', '    }\n', '    \n', '    function computeTokens(uint256 weiAmount) view internal returns (uint256) {\n', '       return weiAmount.mul(10 ** 18).div(rate);\n', '    }\n', '    \n', '    function isWithinTokenAllocLimit(uint256 _tokens) view internal returns (bool) {\n', '        return (isWithinSaleTimeLimit() && isWithinSaleLimit(_tokens));\n', '    }\n', '\n', '    // overriding BrckBaseCrowdsale#validPurchase to add extra cap logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinCap = weiRaised.add(msg.value) <= hardCap;\n', '        bool withinPeriod = now >= startTime && now <= endTime; \n', '        bool nonZeroPurchase = msg.value != 0; \n', '        return (withinPeriod && nonZeroPurchase) && withinCap && isWithinSaleTimeLimit();\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        bool capReached = weiRaised >= hardCap;\n', '        return (endTime != 0 && now > endTime) || capReached;\n', '    }\n', '\n', '  \n', '\n', '  event BrickStarted();\n', '  event BrickFinalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        // require(hasEnded());\n', '        \n', '        finalization();\n', '        emit BrickFinalized();\n', '        \n', '        isFinalized = true;\n', '    }\n', '\n', '    function starting() internal {\n', '        startTime = now;\n', '        limitDateSale = startTime.add(saleDuration * 1 days);\n', '        endTime = limitDateSale;\n', '    }\n', '\n', '    function finalization() internal {\n', '         splitTokens();\n', '\n', '        token.mint(wallet, totalTokens.sub(tokensIssuedTillNow));\n', '        if(address(this).balance > 0){ // if any funds are left in contract.\n', '            processFundsIfAny();\n', '        }\n', '    }\n', '    \n', '     // send ether to the fund collection wallet\n', '    function forwardFunds() internal {\n', '        \n', '        require(advisoryEthWallet != address(0));\n', '        require(infraEthWallet != address(0));\n', '        require(techDevelopmentEthWallet != address(0));\n', '        require(operationsEthWallet != address(0));\n', '        \n', '        operationsEthWallet.transfer(msg.value.mul(60).div(100));\n', '        advisoryEthWallet.transfer(msg.value.mul(5).div(100));\n', '        infraEthWallet.transfer(msg.value.mul(10).div(100));\n', '        techDevelopmentEthWallet.transfer(msg.value.mul(25).div(100));\n', '    }\n', '    \n', '     // send ether to the fund collection wallet\n', '    function processFundsIfAny() internal {\n', '        \n', '        require(advisoryEthWallet != address(0));\n', '        require(infraEthWallet != address(0));\n', '        require(techDevelopmentEthWallet != address(0));\n', '        require(operationsEthWallet != address(0));\n', '        \n', '        operationsEthWallet.transfer(address(this).balance.mul(60).div(100));\n', '        advisoryEthWallet.transfer(address(this).balance.mul(5).div(100));\n', '        infraEthWallet.transfer(address(this).balance.mul(10).div(100));\n', '        techDevelopmentEthWallet.transfer(address(this).balance.mul(25).div(100));\n', '    }\n', '    \n', '    //functions to manually end round sales\n', '    \n', '    uint256 public currentRound = 1;\n', '    bool public icoPvtEnded = false;\n', '     bool public icoPreEnded = false;\n', '      bool public ico1Ended = false;\n', '       bool public ico2Ended = false;\n', '        bool public ico3Ended = false;\n', '    \n', '    function endPvtSale() onlyOwner public       //ending private sale\n', '    {\n', '        require(!icoPvtEnded);\n', '        pvtTokens = tokensIssuedTillNow;\n', '        currentRound = 2;\n', '        updateRateInWei();\n', '        icoPvtEnded = true;\n', '        \n', '    }\n', '     function endPreSale() onlyOwner public      //ending pre-sale\n', '    {\n', '        require(!icoPreEnded && icoPvtEnded);\n', '        preSaleTokens = tokensIssuedTillNow - pvtTokens; \n', '        currentRound = 3;\n', '        updateRateInWei();\n', '        icoPreEnded = true;\n', '    }\n', '     function endIcoSaleRound1() onlyOwner public   //ending IcoSaleRound1\n', '    {\n', '        require(!ico1Ended && icoPreEnded);\n', '       ico1Tokens = tokensIssuedTillNow - preSaleTokens - pvtTokens; \n', '       currentRound = 4;\n', '       updateRateInWei();\n', '       ico1Ended = true;\n', '    }\n', '     function endIcoSaleRound2() onlyOwner public   //ending IcoSaleRound2\n', '    {\n', '       require(!ico2Ended && ico1Ended);\n', '       ico2Tokens = tokensIssuedTillNow - ico1Tokens - preSaleTokens - pvtTokens;\n', '       currentRound = 5;\n', '       updateRateInWei();\n', '       ico2Ended=true;\n', '    }\n', '     function endIcoSaleRound3() onlyOwner public  //ending IcoSaleRound3\n', '     {\n', '        require(!ico3Ended && ico2Ended);\n', '        ico3Tokens = tokensIssuedTillNow - ico2Tokens - ico1Tokens - preSaleTokens - pvtTokens;\n', '        updateRateInWei();\n', '        ico3Ended = true;\n', '    }\n', '    \n', '    modifier afterDeadline() { if (hasEnded() || isFinalized) _; } // a modifier to tell token sale ended\n', '    \n', '    function selfDestroy(address _address) public onlyOwner { // this method will send all money to the following address after finalize\n', '        assert(isFinalized);\n', '        selfdestruct(_address);\n', '    }\n', '    \n', '}']
