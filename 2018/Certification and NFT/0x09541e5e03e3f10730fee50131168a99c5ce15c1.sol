['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  ERC20 public token;\n', '\n', '  // How many wei units a buyer gets per token\n', '  uint256 public price;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @param _token Address of the token being sold\n', '   * @param _price How many wei units a buyer gets per token\n', '   */\n', '  constructor(ERC20 _token, uint256 _price) public {\n', '    require(_token != address(0));\n', '    require(_price > 0);\n', '    token = _token;\n', '    price = _price;\n', '  }\n', '\n', '  /**\n', '   * Crowdsale token purchase logic\n', '   */\n', '  function () external payable {\n', '    require(!isFinalized);\n', '\n', '    address beneficiary = msg.sender;\n', '    uint256 weiAmount = msg.value;\n', '\n', '    require(beneficiary != address(0));\n', '    require(weiAmount != 0);\n', '\n', '    uint256 tokens = weiAmount.div(price);\n', '    uint256 selfBalance = balance();\n', '    require(tokens > 0);\n', '    require(tokens <= selfBalance);\n', '\n', '    // Get tokens to beneficiary\n', '    token.transfer(beneficiary, tokens);\n', '\n', '    emit TokenPurchase(\n', '      beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    // Transfet eth to owner\n', '    owner.transfer(msg.value);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '  }\n', '\n', '\n', '  /**\n', '   * Self tokken ballance\n', '   */\n', '  function balance() public view returns (uint256) {\n', '    address self = address(this);\n', '    uint256 selfBalance = token.balanceOf(self);\n', '    return selfBalance;\n', '  }\n', '\n', '  /**\n', '   * Set new price\n', '   * @param _price How many wei units a buyer gets per token\n', '   */\n', '  function setPrice(uint256 _price) onlyOwner public {\n', '    require(_price > 0);\n', '    price = _price;\n', '  }\n', '\n', '  /**\n', '   * Must be called after crowdsale ends, to do some extra finalization work.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '\n', '    transferBallance();\n', '\n', '    emit Finalized();\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * Send all token ballance to owner\n', '   */\n', '  function transferBallance() onlyOwner public {\n', '    uint256 selfBalance = balance();\n', '    token.transfer(msg.sender, selfBalance);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  ERC20 public token;\n', '\n', '  // How many wei units a buyer gets per token\n', '  uint256 public price;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @param _token Address of the token being sold\n', '   * @param _price How many wei units a buyer gets per token\n', '   */\n', '  constructor(ERC20 _token, uint256 _price) public {\n', '    require(_token != address(0));\n', '    require(_price > 0);\n', '    token = _token;\n', '    price = _price;\n', '  }\n', '\n', '  /**\n', '   * Crowdsale token purchase logic\n', '   */\n', '  function () external payable {\n', '    require(!isFinalized);\n', '\n', '    address beneficiary = msg.sender;\n', '    uint256 weiAmount = msg.value;\n', '\n', '    require(beneficiary != address(0));\n', '    require(weiAmount != 0);\n', '\n', '    uint256 tokens = weiAmount.div(price);\n', '    uint256 selfBalance = balance();\n', '    require(tokens > 0);\n', '    require(tokens <= selfBalance);\n', '\n', '    // Get tokens to beneficiary\n', '    token.transfer(beneficiary, tokens);\n', '\n', '    emit TokenPurchase(\n', '      beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    // Transfet eth to owner\n', '    owner.transfer(msg.value);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '  }\n', '\n', '\n', '  /**\n', '   * Self tokken ballance\n', '   */\n', '  function balance() public view returns (uint256) {\n', '    address self = address(this);\n', '    uint256 selfBalance = token.balanceOf(self);\n', '    return selfBalance;\n', '  }\n', '\n', '  /**\n', '   * Set new price\n', '   * @param _price How many wei units a buyer gets per token\n', '   */\n', '  function setPrice(uint256 _price) onlyOwner public {\n', '    require(_price > 0);\n', '    price = _price;\n', '  }\n', '\n', '  /**\n', '   * Must be called after crowdsale ends, to do some extra finalization work.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '\n', '    transferBallance();\n', '\n', '    emit Finalized();\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * Send all token ballance to owner\n', '   */\n', '  function transferBallance() onlyOwner public {\n', '    uint256 selfBalance = balance();\n', '    token.transfer(msg.sender, selfBalance);\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
