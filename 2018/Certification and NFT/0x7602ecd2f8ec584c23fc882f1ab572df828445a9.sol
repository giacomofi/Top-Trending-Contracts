['pragma solidity ^0.4.19;\n', '\n', 'contract DigixConstants {\n', '  /// general constants\n', '  uint256 constant SECONDS_IN_A_DAY = 24 * 60 * 60;\n', '\n', '  /// asset events\n', '  uint256 constant ASSET_EVENT_CREATED_VENDOR_ORDER = 1;\n', '  uint256 constant ASSET_EVENT_CREATED_TRANSFER_ORDER = 2;\n', '  uint256 constant ASSET_EVENT_CREATED_REPLACEMENT_ORDER = 3;\n', '  uint256 constant ASSET_EVENT_FULFILLED_VENDOR_ORDER = 4;\n', '  uint256 constant ASSET_EVENT_FULFILLED_TRANSFER_ORDER = 5;\n', '  uint256 constant ASSET_EVENT_FULFILLED_REPLACEMENT_ORDER = 6;\n', '  uint256 constant ASSET_EVENT_MINTED = 7;\n', '  uint256 constant ASSET_EVENT_MINTED_REPLACEMENT = 8;\n', '  uint256 constant ASSET_EVENT_RECASTED = 9;\n', '  uint256 constant ASSET_EVENT_REDEEMED = 10;\n', '  uint256 constant ASSET_EVENT_FAILED_AUDIT = 11;\n', '  uint256 constant ASSET_EVENT_ADMIN_FAILED = 12;\n', '  uint256 constant ASSET_EVENT_REMINTED = 13;\n', '\n', '  /// roles\n', '  uint256 constant ROLE_ZERO_ANYONE = 0;\n', '  uint256 constant ROLE_ROOT = 1;\n', '  uint256 constant ROLE_VENDOR = 2;\n', '  uint256 constant ROLE_XFERAUTH = 3;\n', '  uint256 constant ROLE_POPADMIN = 4;\n', '  uint256 constant ROLE_CUSTODIAN = 5;\n', '  uint256 constant ROLE_AUDITOR = 6;\n', '  uint256 constant ROLE_MARKETPLACE_ADMIN = 7;\n', '  uint256 constant ROLE_KYC_ADMIN = 8;\n', '  uint256 constant ROLE_FEES_ADMIN = 9;\n', '  uint256 constant ROLE_DOCS_UPLOADER = 10;\n', '  uint256 constant ROLE_KYC_RECASTER = 11;\n', '  uint256 constant ROLE_FEES_DISTRIBUTION_ADMIN = 12;\n', '\n', '  /// states\n', '  uint256 constant STATE_ZERO_UNDEFINED = 0;\n', '  uint256 constant STATE_CREATED = 1;\n', '  uint256 constant STATE_VENDOR_ORDER = 2;\n', '  uint256 constant STATE_TRANSFER = 3;\n', '  uint256 constant STATE_CUSTODIAN_DELIVERY = 4;\n', '  uint256 constant STATE_MINTED = 5;\n', '  uint256 constant STATE_AUDIT_FAILURE = 6;\n', '  uint256 constant STATE_REPLACEMENT_ORDER = 7;\n', '  uint256 constant STATE_REPLACEMENT_DELIVERY = 8;\n', '  uint256 constant STATE_RECASTED = 9;\n', '  uint256 constant STATE_REDEEMED = 10;\n', '  uint256 constant STATE_ADMIN_FAILURE = 11;\n', '\n', '  /// interactive contracts\n', '  bytes32 constant CONTRACT_INTERACTIVE_ASSETS_EXPLORER = "i:asset:explorer";\n', '  bytes32 constant CONTRACT_INTERACTIVE_DIGIX_DIRECTORY = "i:directory";\n', '  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE = "i:mp";\n', '  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN = "i:mpadmin";\n', '  bytes32 constant CONTRACT_INTERACTIVE_POPADMIN = "i:popadmin";\n', '  bytes32 constant CONTRACT_INTERACTIVE_PRODUCTS_LIST = "i:products";\n', '  bytes32 constant CONTRACT_INTERACTIVE_TOKEN = "i:token";\n', '  bytes32 constant CONTRACT_INTERACTIVE_BULK_WRAPPER = "i:bulk-wrapper";\n', '  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_CONFIG = "i:token:config";\n', '  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_INFORMATION = "i:token:information";\n', '  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_INFORMATION = "i:mp:information";\n', '  bytes32 constant CONTRACT_INTERACTIVE_IDENTITY = "i:identity";\n', '\n', '  /// controller contracts\n', '  bytes32 constant CONTRACT_CONTROLLER_ASSETS = "c:asset";\n', '  bytes32 constant CONTRACT_CONTROLLER_ASSETS_RECAST = "c:asset:recast";\n', '  bytes32 constant CONTRACT_CONTROLLER_ASSETS_EXPLORER = "c:explorer";\n', '  bytes32 constant CONTRACT_CONTROLLER_DIGIX_DIRECTORY = "c:directory";\n', '  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE = "c:mp";\n', '  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN = "c:mpadmin";\n', '  bytes32 constant CONTRACT_CONTROLLER_PRODUCTS_LIST = "c:products";\n', '\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_APPROVAL = "c:token:approval";\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_CONFIG = "c:token:config";\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_INFO = "c:token:info";\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_TRANSFER = "c:token:transfer";\n', '\n', '  bytes32 constant CONTRACT_CONTROLLER_JOB_ID = "c:jobid";\n', '  bytes32 constant CONTRACT_CONTROLLER_IDENTITY = "c:identity";\n', '\n', '  /// storage contracts\n', '  bytes32 constant CONTRACT_STORAGE_ASSETS = "s:asset";\n', '  bytes32 constant CONTRACT_STORAGE_ASSET_EVENTS = "s:asset:events";\n', '  bytes32 constant CONTRACT_STORAGE_DIGIX_DIRECTORY = "s:directory";\n', '  bytes32 constant CONTRACT_STORAGE_MARKETPLACE = "s:mp";\n', '  bytes32 constant CONTRACT_STORAGE_PRODUCTS_LIST = "s:products";\n', '  bytes32 constant CONTRACT_STORAGE_GOLD_TOKEN = "s:goldtoken";\n', '  bytes32 constant CONTRACT_STORAGE_JOB_ID = "s:jobid";\n', '  bytes32 constant CONTRACT_STORAGE_IDENTITY = "s:identity";\n', '\n', '  /// service contracts\n', '  bytes32 constant CONTRACT_SERVICE_TOKEN_DEMURRAGE = "sv:tdemurrage";\n', '  bytes32 constant CONTRACT_SERVICE_MARKETPLACE = "sv:mp";\n', '  bytes32 constant CONTRACT_SERVICE_DIRECTORY = "sv:directory";\n', '\n', '  /// fees distributors\n', '  bytes32 constant CONTRACT_DEMURRAGE_FEES_DISTRIBUTOR = "fees:distributor:demurrage";\n', '  bytes32 constant CONTRACT_RECAST_FEES_DISTRIBUTOR = "fees:distributor:recast";\n', '  bytes32 constant CONTRACT_TRANSFER_FEES_DISTRIBUTOR = "fees:distributor:transfer";\n', '}\n', '\n', 'contract ContractResolver {\n', '  address public owner;\n', '  bool public locked;\n', '  function init_register_contract(bytes32 _key, address _contract_address) public returns (bool _success);\n', '  function unregister_contract(bytes32 _key) public returns (bool _success);\n', '  function get_contract(bytes32 _key) public constant returns (address _contract);\n', '}\n', '\n', 'contract ResolverClient {\n', '\n', '  /// The address of the resolver contract for this project\n', '  address public resolver;\n', '  /// The key to identify this contract\n', '  bytes32 public key;\n', '\n', '  /// Make our own address available to us as a constant\n', '  address public CONTRACT_ADDRESS;\n', '\n', '  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\n', '  /// @param _contract The resolver key\n', '  modifier if_sender_is(bytes32 _contract) {\n', '    require(msg.sender == ContractResolver(resolver).get_contract(_contract));\n', '    _;\n', '  }\n', '\n', '  /// Function modifier to check resolver&#39;s locking status.\n', '  modifier unless_resolver_is_locked() {\n', '    require(is_locked() == false);\n', '    _;\n', '  }\n', '\n', '  /// @dev Initialize new contract\n', '  /// @param _key the resolver key for this contract\n', '  /// @return _success if the initialization is successful\n', '  function init(bytes32 _key, address _resolver)\n', '           internal\n', '           returns (bool _success)\n', '  {\n', '    bool _is_locked = ContractResolver(_resolver).locked();\n', '    if (_is_locked == false) {\n', '      CONTRACT_ADDRESS = address(this);\n', '      resolver = _resolver;\n', '      key = _key;\n', '      require(ContractResolver(resolver).init_register_contract(key, CONTRACT_ADDRESS));\n', '      _success = true;\n', '    }  else {\n', '      _success = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Destroy the contract and unregister self from the ContractResolver\n', '  /// @dev Can only be called by the owner of ContractResolver\n', '  function destroy()\n', '           public\n', '           returns (bool _success)\n', '  {\n', '    bool _is_locked = ContractResolver(resolver).locked();\n', '    require(!_is_locked);\n', '\n', '    address _owner_of_contract_resolver = ContractResolver(resolver).owner();\n', '    require(msg.sender == _owner_of_contract_resolver);\n', '\n', '    _success = ContractResolver(resolver).unregister_contract(key);\n', '    require(_success);\n', '\n', '    selfdestruct(_owner_of_contract_resolver);\n', '  }\n', '\n', '  /// @dev Check if resolver is locked\n', '  /// @return _locked if the resolver is currently locked\n', '  function is_locked()\n', '           private\n', '           constant\n', '           returns (bool _locked)\n', '  {\n', '    _locked = ContractResolver(resolver).locked();\n', '  }\n', '\n', '  /// @dev Get the address of a contract\n', '  /// @param _key the resolver key to look up\n', '  /// @return _contract the address of the contract\n', '  function get_contract(bytes32 _key)\n', '           public\n', '           constant\n', '           returns (address _contract)\n', '  {\n', '    _contract = ContractResolver(resolver).get_contract(_key);\n', '  }\n', '}\n', '\n', 'contract Constants {\n', '  address constant NULL_ADDRESS = address(0x0);\n', '  uint256 constant ZERO = uint256(0);\n', '  bytes32 constant EMPTY = bytes32(0x0);\n', '}\n', '\n', 'contract ACConditions is Constants {\n', '\n', '  modifier not_null_address(address _item) {\n', '    require(_item != NULL_ADDRESS);\n', '    _;\n', '  }\n', '\n', '  modifier if_null_address(address _item) {\n', '    require(_item == NULL_ADDRESS);\n', '    _;\n', '  }\n', '\n', '  modifier not_null_uint(uint256 _item) {\n', '    require(_item != ZERO);\n', '    _;\n', '  }\n', '\n', '  modifier if_null_uint(uint256 _item) {\n', '    require(_item == ZERO);\n', '    _;\n', '  }\n', '\n', '  modifier not_empty_bytes(bytes32 _item) {\n', '    require(_item != EMPTY);\n', '    _;\n', '  }\n', '\n', '  modifier if_empty_bytes(bytes32 _item) {\n', '    require(_item == EMPTY);\n', '    _;\n', '  }\n', '\n', '  modifier not_null_string(string _item) {\n', '    bytes memory _i = bytes(_item);\n', '    require(_i.length > 0);\n', '    _;\n', '  }\n', '\n', '  modifier if_null_string(string _item) {\n', '    bytes memory _i = bytes(_item);\n', '    require(_i.length == 0);\n', '    _;\n', '  }\n', '\n', '  modifier require_gas(uint256 _requiredgas) {\n', '    require(msg.gas  >= (_requiredgas - 22000));\n', '    _;\n', '  }\n', '\n', '  function is_contract(address _contract)\n', '           public\n', '           constant\n', '           returns (bool _is_contract)\n', '  {\n', '    uint32 _code_length;\n', '\n', '    assembly {\n', '      _code_length := extcodesize(_contract)\n', '    }\n', '\n', '    if(_code_length > 1) {\n', '      _is_contract = true;\n', '    } else {\n', '      _is_contract = false;\n', '    }\n', '  }\n', '\n', '  modifier if_contract(address _contract) {\n', '    require(is_contract(_contract) == true);\n', '    _;\n', '  }\n', '\n', '  modifier unless_contract(address _contract) {\n', '    require(is_contract(_contract) == false);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract MarketplaceStorage {\n', '}\n', '\n', 'contract MarketplaceControllerCommon {\n', '}\n', '\n', 'contract MarketplaceController {\n', '}\n', '\n', 'contract MarketplaceAdminController {\n', '}\n', '\n', 'contract MarketplaceCommon is ResolverClient, ACConditions, DigixConstants {\n', '\n', '  function marketplace_admin_controller()\n', '           internal\n', '           constant\n', '           returns (MarketplaceAdminController _contract)\n', '  {\n', '    _contract = MarketplaceAdminController(get_contract(CONTRACT_CONTROLLER_MARKETPLACE_ADMIN));\n', '  }\n', '\n', '  function marketplace_storage()\n', '           internal\n', '           constant\n', '           returns (MarketplaceStorage _contract)\n', '  {\n', '    _contract = MarketplaceStorage(get_contract(CONTRACT_STORAGE_MARKETPLACE));\n', '  }\n', '\n', '  function marketplace_controller()\n', '           internal\n', '           constant\n', '           returns (MarketplaceController _contract)\n', '  {\n', '    _contract = MarketplaceController(get_contract(CONTRACT_CONTROLLER_MARKETPLACE));\n', '  }\n', '}\n', '\n', 'contract DigixConstantsExtras {\n', '    /// storage contracts\n', '    bytes32 constant CONTRACT_STORAGE_MARKETPLACE_EXTRAS = "s:mp:extras";\n', '    bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN_EXTRAS = "c:mpadmin:extras";\n', '    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_V2 = "i:mp:v2";\n', '    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN_EXTRAS = "i:mpadmin:extras";\n', '}\n', '\n', 'contract MarketplaceControllerV2 {\n', '  function purchase_with_eth(\n', '    uint256 _wei_sent,\n', '    address _buyer,\n', '    uint256 _block_number,\n', '    uint256 _nonce,\n', '    uint256 _wei_per_dgx_mg,\n', '    address _signer,\n', '    bytes _signature\n', '  ) payable public returns (bool _success, uint256 _purchased_amount);\n', '\n', '  function purchase_with_dai(\n', '    uint256 _dai_sent,\n', '    address _buyer,\n', '    uint256 _block_number,\n', '    uint256 _nonce,\n', '    uint256 _dai_per_ton,\n', '    address _signer,\n', '    bytes _signature\n', '  ) public returns (bool _success, uint256 _purchased_amount);\n', '}\n', '\n', '/// @title Digix&#39;s Marketplace\n', '/// @author Digix Holdings Pte Ltd\n', '/// @notice This contract is for KYC-approved users to purchase DGX using ETH\n', 'contract MarketplaceV2 is MarketplaceCommon, DigixConstantsExtras {\n', '\n', '  function MarketplaceV2(address _resolver) public\n', '  {\n', '    require(init(CONTRACT_INTERACTIVE_MARKETPLACE_V2, _resolver));\n', '  }\n', '\n', '  function marketplace_controller_v2()\n', '           internal\n', '           constant\n', '           returns (MarketplaceControllerV2 _contract)\n', '  {\n', '    _contract = MarketplaceControllerV2(get_contract(CONTRACT_CONTROLLER_MARKETPLACE));\n', '  }\n', '\n', '  /// @dev purchase DGX gold using ETH\n', '  /// @param _block_number Block number from DTPO (Digix Trusted Price Oracle)\n', '  /// @param _nonce Nonce from DTPO\n', '  /// @param _wei_per_dgx_mg Price in wei for one milligram of DGX\n', '  /// @param _signer Address of the DTPO signer\n', '  /// @param _signature Signature of the payload\n', '  /// @return {\n', '  ///   "_success": "returns true if operation is successful",\n', '  ///   "_purchased_amount": "DGX nanograms received"\n', '  /// }\n', '  function purchaseWithEth(uint256 _block_number, uint256 _nonce, uint256 _wei_per_dgx_mg, address _signer, bytes _signature)\n', '           payable\n', '           public\n', '           returns (bool _success, uint256 _purchased_amount)\n', '  {\n', '    address _sender = msg.sender;\n', '\n', '    (_success, _purchased_amount) =\n', '      marketplace_controller_v2().purchase_with_eth.value(msg.value).gas(600000)(msg.value, _sender, _block_number,\n', '                                                                             _nonce, _wei_per_dgx_mg, _signer, _signature);\n', '    require(_success);\n', '  }\n', '\n', '  /// @dev purchase DGX gold using DAI\n', '  /// @param _dai_sent amount of DAI sent\n', '  /// @param _block_number Block number from DTPO (Digix Trusted Price Oracle)\n', '  /// @param _nonce Nonce from DTPO\n', '  /// @param _dai_per_ton Despite the variable name, this is actually the price in DAI for 1000 tonnes of DGXs\n', '  /// @param _signer Address of the DTPO signer\n', '  /// @param _signature Signature of the payload\n', '  /// @return {\n', '  ///   "_success": "returns true if operation is successful",\n', '  ///   "_purchased_amount": "DGX nanograms received"\n', '  /// }\n', '  function purchaseWithDai(uint256 _dai_sent, uint256 _block_number, uint256 _nonce, uint256 _dai_per_ton, address _signer, bytes _signature)\n', '           public\n', '           returns (bool _success, uint256 _purchased_amount)\n', '  {\n', '    address _sender = msg.sender;\n', '\n', '    (_success, _purchased_amount) =\n', '      marketplace_controller_v2().purchase_with_dai.gas(800000)(_dai_sent, _sender, _block_number,\n', '                                                                             _nonce, _dai_per_ton, _signer, _signature);\n', '    require(_success);\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract DigixConstants {\n', '  /// general constants\n', '  uint256 constant SECONDS_IN_A_DAY = 24 * 60 * 60;\n', '\n', '  /// asset events\n', '  uint256 constant ASSET_EVENT_CREATED_VENDOR_ORDER = 1;\n', '  uint256 constant ASSET_EVENT_CREATED_TRANSFER_ORDER = 2;\n', '  uint256 constant ASSET_EVENT_CREATED_REPLACEMENT_ORDER = 3;\n', '  uint256 constant ASSET_EVENT_FULFILLED_VENDOR_ORDER = 4;\n', '  uint256 constant ASSET_EVENT_FULFILLED_TRANSFER_ORDER = 5;\n', '  uint256 constant ASSET_EVENT_FULFILLED_REPLACEMENT_ORDER = 6;\n', '  uint256 constant ASSET_EVENT_MINTED = 7;\n', '  uint256 constant ASSET_EVENT_MINTED_REPLACEMENT = 8;\n', '  uint256 constant ASSET_EVENT_RECASTED = 9;\n', '  uint256 constant ASSET_EVENT_REDEEMED = 10;\n', '  uint256 constant ASSET_EVENT_FAILED_AUDIT = 11;\n', '  uint256 constant ASSET_EVENT_ADMIN_FAILED = 12;\n', '  uint256 constant ASSET_EVENT_REMINTED = 13;\n', '\n', '  /// roles\n', '  uint256 constant ROLE_ZERO_ANYONE = 0;\n', '  uint256 constant ROLE_ROOT = 1;\n', '  uint256 constant ROLE_VENDOR = 2;\n', '  uint256 constant ROLE_XFERAUTH = 3;\n', '  uint256 constant ROLE_POPADMIN = 4;\n', '  uint256 constant ROLE_CUSTODIAN = 5;\n', '  uint256 constant ROLE_AUDITOR = 6;\n', '  uint256 constant ROLE_MARKETPLACE_ADMIN = 7;\n', '  uint256 constant ROLE_KYC_ADMIN = 8;\n', '  uint256 constant ROLE_FEES_ADMIN = 9;\n', '  uint256 constant ROLE_DOCS_UPLOADER = 10;\n', '  uint256 constant ROLE_KYC_RECASTER = 11;\n', '  uint256 constant ROLE_FEES_DISTRIBUTION_ADMIN = 12;\n', '\n', '  /// states\n', '  uint256 constant STATE_ZERO_UNDEFINED = 0;\n', '  uint256 constant STATE_CREATED = 1;\n', '  uint256 constant STATE_VENDOR_ORDER = 2;\n', '  uint256 constant STATE_TRANSFER = 3;\n', '  uint256 constant STATE_CUSTODIAN_DELIVERY = 4;\n', '  uint256 constant STATE_MINTED = 5;\n', '  uint256 constant STATE_AUDIT_FAILURE = 6;\n', '  uint256 constant STATE_REPLACEMENT_ORDER = 7;\n', '  uint256 constant STATE_REPLACEMENT_DELIVERY = 8;\n', '  uint256 constant STATE_RECASTED = 9;\n', '  uint256 constant STATE_REDEEMED = 10;\n', '  uint256 constant STATE_ADMIN_FAILURE = 11;\n', '\n', '  /// interactive contracts\n', '  bytes32 constant CONTRACT_INTERACTIVE_ASSETS_EXPLORER = "i:asset:explorer";\n', '  bytes32 constant CONTRACT_INTERACTIVE_DIGIX_DIRECTORY = "i:directory";\n', '  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE = "i:mp";\n', '  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN = "i:mpadmin";\n', '  bytes32 constant CONTRACT_INTERACTIVE_POPADMIN = "i:popadmin";\n', '  bytes32 constant CONTRACT_INTERACTIVE_PRODUCTS_LIST = "i:products";\n', '  bytes32 constant CONTRACT_INTERACTIVE_TOKEN = "i:token";\n', '  bytes32 constant CONTRACT_INTERACTIVE_BULK_WRAPPER = "i:bulk-wrapper";\n', '  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_CONFIG = "i:token:config";\n', '  bytes32 constant CONTRACT_INTERACTIVE_TOKEN_INFORMATION = "i:token:information";\n', '  bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_INFORMATION = "i:mp:information";\n', '  bytes32 constant CONTRACT_INTERACTIVE_IDENTITY = "i:identity";\n', '\n', '  /// controller contracts\n', '  bytes32 constant CONTRACT_CONTROLLER_ASSETS = "c:asset";\n', '  bytes32 constant CONTRACT_CONTROLLER_ASSETS_RECAST = "c:asset:recast";\n', '  bytes32 constant CONTRACT_CONTROLLER_ASSETS_EXPLORER = "c:explorer";\n', '  bytes32 constant CONTRACT_CONTROLLER_DIGIX_DIRECTORY = "c:directory";\n', '  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE = "c:mp";\n', '  bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN = "c:mpadmin";\n', '  bytes32 constant CONTRACT_CONTROLLER_PRODUCTS_LIST = "c:products";\n', '\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_APPROVAL = "c:token:approval";\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_CONFIG = "c:token:config";\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_INFO = "c:token:info";\n', '  bytes32 constant CONTRACT_CONTROLLER_TOKEN_TRANSFER = "c:token:transfer";\n', '\n', '  bytes32 constant CONTRACT_CONTROLLER_JOB_ID = "c:jobid";\n', '  bytes32 constant CONTRACT_CONTROLLER_IDENTITY = "c:identity";\n', '\n', '  /// storage contracts\n', '  bytes32 constant CONTRACT_STORAGE_ASSETS = "s:asset";\n', '  bytes32 constant CONTRACT_STORAGE_ASSET_EVENTS = "s:asset:events";\n', '  bytes32 constant CONTRACT_STORAGE_DIGIX_DIRECTORY = "s:directory";\n', '  bytes32 constant CONTRACT_STORAGE_MARKETPLACE = "s:mp";\n', '  bytes32 constant CONTRACT_STORAGE_PRODUCTS_LIST = "s:products";\n', '  bytes32 constant CONTRACT_STORAGE_GOLD_TOKEN = "s:goldtoken";\n', '  bytes32 constant CONTRACT_STORAGE_JOB_ID = "s:jobid";\n', '  bytes32 constant CONTRACT_STORAGE_IDENTITY = "s:identity";\n', '\n', '  /// service contracts\n', '  bytes32 constant CONTRACT_SERVICE_TOKEN_DEMURRAGE = "sv:tdemurrage";\n', '  bytes32 constant CONTRACT_SERVICE_MARKETPLACE = "sv:mp";\n', '  bytes32 constant CONTRACT_SERVICE_DIRECTORY = "sv:directory";\n', '\n', '  /// fees distributors\n', '  bytes32 constant CONTRACT_DEMURRAGE_FEES_DISTRIBUTOR = "fees:distributor:demurrage";\n', '  bytes32 constant CONTRACT_RECAST_FEES_DISTRIBUTOR = "fees:distributor:recast";\n', '  bytes32 constant CONTRACT_TRANSFER_FEES_DISTRIBUTOR = "fees:distributor:transfer";\n', '}\n', '\n', 'contract ContractResolver {\n', '  address public owner;\n', '  bool public locked;\n', '  function init_register_contract(bytes32 _key, address _contract_address) public returns (bool _success);\n', '  function unregister_contract(bytes32 _key) public returns (bool _success);\n', '  function get_contract(bytes32 _key) public constant returns (address _contract);\n', '}\n', '\n', 'contract ResolverClient {\n', '\n', '  /// The address of the resolver contract for this project\n', '  address public resolver;\n', '  /// The key to identify this contract\n', '  bytes32 public key;\n', '\n', '  /// Make our own address available to us as a constant\n', '  address public CONTRACT_ADDRESS;\n', '\n', '  /// Function modifier to check if msg.sender corresponds to the resolved address of a given key\n', '  /// @param _contract The resolver key\n', '  modifier if_sender_is(bytes32 _contract) {\n', '    require(msg.sender == ContractResolver(resolver).get_contract(_contract));\n', '    _;\n', '  }\n', '\n', "  /// Function modifier to check resolver's locking status.\n", '  modifier unless_resolver_is_locked() {\n', '    require(is_locked() == false);\n', '    _;\n', '  }\n', '\n', '  /// @dev Initialize new contract\n', '  /// @param _key the resolver key for this contract\n', '  /// @return _success if the initialization is successful\n', '  function init(bytes32 _key, address _resolver)\n', '           internal\n', '           returns (bool _success)\n', '  {\n', '    bool _is_locked = ContractResolver(_resolver).locked();\n', '    if (_is_locked == false) {\n', '      CONTRACT_ADDRESS = address(this);\n', '      resolver = _resolver;\n', '      key = _key;\n', '      require(ContractResolver(resolver).init_register_contract(key, CONTRACT_ADDRESS));\n', '      _success = true;\n', '    }  else {\n', '      _success = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Destroy the contract and unregister self from the ContractResolver\n', '  /// @dev Can only be called by the owner of ContractResolver\n', '  function destroy()\n', '           public\n', '           returns (bool _success)\n', '  {\n', '    bool _is_locked = ContractResolver(resolver).locked();\n', '    require(!_is_locked);\n', '\n', '    address _owner_of_contract_resolver = ContractResolver(resolver).owner();\n', '    require(msg.sender == _owner_of_contract_resolver);\n', '\n', '    _success = ContractResolver(resolver).unregister_contract(key);\n', '    require(_success);\n', '\n', '    selfdestruct(_owner_of_contract_resolver);\n', '  }\n', '\n', '  /// @dev Check if resolver is locked\n', '  /// @return _locked if the resolver is currently locked\n', '  function is_locked()\n', '           private\n', '           constant\n', '           returns (bool _locked)\n', '  {\n', '    _locked = ContractResolver(resolver).locked();\n', '  }\n', '\n', '  /// @dev Get the address of a contract\n', '  /// @param _key the resolver key to look up\n', '  /// @return _contract the address of the contract\n', '  function get_contract(bytes32 _key)\n', '           public\n', '           constant\n', '           returns (address _contract)\n', '  {\n', '    _contract = ContractResolver(resolver).get_contract(_key);\n', '  }\n', '}\n', '\n', 'contract Constants {\n', '  address constant NULL_ADDRESS = address(0x0);\n', '  uint256 constant ZERO = uint256(0);\n', '  bytes32 constant EMPTY = bytes32(0x0);\n', '}\n', '\n', 'contract ACConditions is Constants {\n', '\n', '  modifier not_null_address(address _item) {\n', '    require(_item != NULL_ADDRESS);\n', '    _;\n', '  }\n', '\n', '  modifier if_null_address(address _item) {\n', '    require(_item == NULL_ADDRESS);\n', '    _;\n', '  }\n', '\n', '  modifier not_null_uint(uint256 _item) {\n', '    require(_item != ZERO);\n', '    _;\n', '  }\n', '\n', '  modifier if_null_uint(uint256 _item) {\n', '    require(_item == ZERO);\n', '    _;\n', '  }\n', '\n', '  modifier not_empty_bytes(bytes32 _item) {\n', '    require(_item != EMPTY);\n', '    _;\n', '  }\n', '\n', '  modifier if_empty_bytes(bytes32 _item) {\n', '    require(_item == EMPTY);\n', '    _;\n', '  }\n', '\n', '  modifier not_null_string(string _item) {\n', '    bytes memory _i = bytes(_item);\n', '    require(_i.length > 0);\n', '    _;\n', '  }\n', '\n', '  modifier if_null_string(string _item) {\n', '    bytes memory _i = bytes(_item);\n', '    require(_i.length == 0);\n', '    _;\n', '  }\n', '\n', '  modifier require_gas(uint256 _requiredgas) {\n', '    require(msg.gas  >= (_requiredgas - 22000));\n', '    _;\n', '  }\n', '\n', '  function is_contract(address _contract)\n', '           public\n', '           constant\n', '           returns (bool _is_contract)\n', '  {\n', '    uint32 _code_length;\n', '\n', '    assembly {\n', '      _code_length := extcodesize(_contract)\n', '    }\n', '\n', '    if(_code_length > 1) {\n', '      _is_contract = true;\n', '    } else {\n', '      _is_contract = false;\n', '    }\n', '  }\n', '\n', '  modifier if_contract(address _contract) {\n', '    require(is_contract(_contract) == true);\n', '    _;\n', '  }\n', '\n', '  modifier unless_contract(address _contract) {\n', '    require(is_contract(_contract) == false);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract MarketplaceStorage {\n', '}\n', '\n', 'contract MarketplaceControllerCommon {\n', '}\n', '\n', 'contract MarketplaceController {\n', '}\n', '\n', 'contract MarketplaceAdminController {\n', '}\n', '\n', 'contract MarketplaceCommon is ResolverClient, ACConditions, DigixConstants {\n', '\n', '  function marketplace_admin_controller()\n', '           internal\n', '           constant\n', '           returns (MarketplaceAdminController _contract)\n', '  {\n', '    _contract = MarketplaceAdminController(get_contract(CONTRACT_CONTROLLER_MARKETPLACE_ADMIN));\n', '  }\n', '\n', '  function marketplace_storage()\n', '           internal\n', '           constant\n', '           returns (MarketplaceStorage _contract)\n', '  {\n', '    _contract = MarketplaceStorage(get_contract(CONTRACT_STORAGE_MARKETPLACE));\n', '  }\n', '\n', '  function marketplace_controller()\n', '           internal\n', '           constant\n', '           returns (MarketplaceController _contract)\n', '  {\n', '    _contract = MarketplaceController(get_contract(CONTRACT_CONTROLLER_MARKETPLACE));\n', '  }\n', '}\n', '\n', 'contract DigixConstantsExtras {\n', '    /// storage contracts\n', '    bytes32 constant CONTRACT_STORAGE_MARKETPLACE_EXTRAS = "s:mp:extras";\n', '    bytes32 constant CONTRACT_CONTROLLER_MARKETPLACE_ADMIN_EXTRAS = "c:mpadmin:extras";\n', '    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_V2 = "i:mp:v2";\n', '    bytes32 constant CONTRACT_INTERACTIVE_MARKETPLACE_ADMIN_EXTRAS = "i:mpadmin:extras";\n', '}\n', '\n', 'contract MarketplaceControllerV2 {\n', '  function purchase_with_eth(\n', '    uint256 _wei_sent,\n', '    address _buyer,\n', '    uint256 _block_number,\n', '    uint256 _nonce,\n', '    uint256 _wei_per_dgx_mg,\n', '    address _signer,\n', '    bytes _signature\n', '  ) payable public returns (bool _success, uint256 _purchased_amount);\n', '\n', '  function purchase_with_dai(\n', '    uint256 _dai_sent,\n', '    address _buyer,\n', '    uint256 _block_number,\n', '    uint256 _nonce,\n', '    uint256 _dai_per_ton,\n', '    address _signer,\n', '    bytes _signature\n', '  ) public returns (bool _success, uint256 _purchased_amount);\n', '}\n', '\n', "/// @title Digix's Marketplace\n", '/// @author Digix Holdings Pte Ltd\n', '/// @notice This contract is for KYC-approved users to purchase DGX using ETH\n', 'contract MarketplaceV2 is MarketplaceCommon, DigixConstantsExtras {\n', '\n', '  function MarketplaceV2(address _resolver) public\n', '  {\n', '    require(init(CONTRACT_INTERACTIVE_MARKETPLACE_V2, _resolver));\n', '  }\n', '\n', '  function marketplace_controller_v2()\n', '           internal\n', '           constant\n', '           returns (MarketplaceControllerV2 _contract)\n', '  {\n', '    _contract = MarketplaceControllerV2(get_contract(CONTRACT_CONTROLLER_MARKETPLACE));\n', '  }\n', '\n', '  /// @dev purchase DGX gold using ETH\n', '  /// @param _block_number Block number from DTPO (Digix Trusted Price Oracle)\n', '  /// @param _nonce Nonce from DTPO\n', '  /// @param _wei_per_dgx_mg Price in wei for one milligram of DGX\n', '  /// @param _signer Address of the DTPO signer\n', '  /// @param _signature Signature of the payload\n', '  /// @return {\n', '  ///   "_success": "returns true if operation is successful",\n', '  ///   "_purchased_amount": "DGX nanograms received"\n', '  /// }\n', '  function purchaseWithEth(uint256 _block_number, uint256 _nonce, uint256 _wei_per_dgx_mg, address _signer, bytes _signature)\n', '           payable\n', '           public\n', '           returns (bool _success, uint256 _purchased_amount)\n', '  {\n', '    address _sender = msg.sender;\n', '\n', '    (_success, _purchased_amount) =\n', '      marketplace_controller_v2().purchase_with_eth.value(msg.value).gas(600000)(msg.value, _sender, _block_number,\n', '                                                                             _nonce, _wei_per_dgx_mg, _signer, _signature);\n', '    require(_success);\n', '  }\n', '\n', '  /// @dev purchase DGX gold using DAI\n', '  /// @param _dai_sent amount of DAI sent\n', '  /// @param _block_number Block number from DTPO (Digix Trusted Price Oracle)\n', '  /// @param _nonce Nonce from DTPO\n', '  /// @param _dai_per_ton Despite the variable name, this is actually the price in DAI for 1000 tonnes of DGXs\n', '  /// @param _signer Address of the DTPO signer\n', '  /// @param _signature Signature of the payload\n', '  /// @return {\n', '  ///   "_success": "returns true if operation is successful",\n', '  ///   "_purchased_amount": "DGX nanograms received"\n', '  /// }\n', '  function purchaseWithDai(uint256 _dai_sent, uint256 _block_number, uint256 _nonce, uint256 _dai_per_ton, address _signer, bytes _signature)\n', '           public\n', '           returns (bool _success, uint256 _purchased_amount)\n', '  {\n', '    address _sender = msg.sender;\n', '\n', '    (_success, _purchased_amount) =\n', '      marketplace_controller_v2().purchase_with_dai.gas(800000)(_dai_sent, _sender, _block_number,\n', '                                                                             _nonce, _dai_per_ton, _signer, _signature);\n', '    require(_success);\n', '  }\n', '}']
