['pragma solidity ^0.4.18;\n', '\n', '\n', 'interface Whitelist {\n', '    function add(address _wlAddress) public;\n', '    function addBulk(address[] _wlAddresses) public;\n', '    function remove(address _wlAddresses) public;\n', '    function removeBulk(address[] _wlAddresses) public;\n', '    function getAll() public constant returns(address[]);\n', '    function isInList(address _checkAddress) public constant returns(bool);\n', '}\n', '\n', 'contract Administrated {\n', '    address public administrator;\n', '\n', '    modifier onlyAdministrator() {\n', '        require(administrator == tx.origin);\n', '        _;\n', '    }\n', '\n', '    modifier notAdministrator() {\n', '        require(administrator != tx.origin);\n', '        _;\n', '    }\n', '\n', '    function setAdministrator(address _administrator)\n', '        internal\n', '    {\n', '        administrator = _administrator;\n', '    }\n', '}\n', '\n', 'contract BasicWhitelist is Whitelist, Administrated {\n', '    address[] public whitelist;\n', '\n', '    //Up to 65536 users in list\n', '    mapping(address => uint16) public wlIndex;\n', '\n', '\n', '    function BasicWhitelist()\n', '        public\n', '    {\n', '        setAdministrator(tx.origin);\n', '    }\n', '\n', '    //Add whitelist\n', '    function add(address _wlAddress)\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        if ( !isInList(_wlAddress) ) {\n', '            wlIndex[_wlAddress] = uint16(whitelist.length);\n', '            whitelist.push(_wlAddress);\n', '        }\n', '    }\n', '\n', '    //Bulk add\n', '    function addBulk(address[] _wlAddresses)\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        require(_wlAddresses.length <= 256);\n', '\n', '        for (uint8 i = 0; i < _wlAddresses.length; i++) {\n', '            add(_wlAddresses[i]);\n', '        }\n', '    }\n', '\n', '    //Remove address from whitelist\n', '    function remove(address _wlAddress)\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        if ( isInList(_wlAddress) ) {\n', '            uint16 index = wlIndex[_wlAddress];\n', '            wlIndex[_wlAddress] = 0;\n', '\n', '            for ( uint16 i = index; i < ( whitelist.length - 1 ); i++) {\n', '                whitelist[i] = whitelist[i + 1];\n', '            }\n', '\n', '            delete whitelist[whitelist.length - 1];\n', '            whitelist.length--;\n', '        }\n', '    }\n', '\n', '    //Bulk remove\n', '    function removeBulk(address[] _wlAddresses)\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        require(_wlAddresses.length <= 256);\n', '\n', '        for (uint8 i = 0; i < _wlAddresses.length; i++) {\n', '            remove(_wlAddresses[i]);\n', '        }\n', '    }\n', '\n', '    //Get list\n', '    function getAll()\n', '        public\n', '        constant\n', '        returns(address[])\n', '    {\n', '        return whitelist;\n', '    }\n', '\n', '    //\n', '    function isInList(address _checkAddress)\n', '        public\n', '        constant\n', '        returns(bool)\n', '    {\n', '        return whitelist.length > 0\n', '                && (\n', '                    wlIndex[_checkAddress] > 0\n', '                    || whitelist[wlIndex[_checkAddress]] == _checkAddress\n', '                   );\n', '    }\n', '}\n', '\n', '\n', 'contract UNITPaymentGatewayList is BasicWhitelist {\n', '    function UNITPaymentGatewayList()\n', '        public\n', '    {\n', '        setAdministrator(tx.origin);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'interface Whitelist {\n', '    function add(address _wlAddress) public;\n', '    function addBulk(address[] _wlAddresses) public;\n', '    function remove(address _wlAddresses) public;\n', '    function removeBulk(address[] _wlAddresses) public;\n', '    function getAll() public constant returns(address[]);\n', '    function isInList(address _checkAddress) public constant returns(bool);\n', '}\n', '\n', 'contract Administrated {\n', '    address public administrator;\n', '\n', '    modifier onlyAdministrator() {\n', '        require(administrator == tx.origin);\n', '        _;\n', '    }\n', '\n', '    modifier notAdministrator() {\n', '        require(administrator != tx.origin);\n', '        _;\n', '    }\n', '\n', '    function setAdministrator(address _administrator)\n', '        internal\n', '    {\n', '        administrator = _administrator;\n', '    }\n', '}\n', '\n', 'contract BasicWhitelist is Whitelist, Administrated {\n', '    address[] public whitelist;\n', '\n', '    //Up to 65536 users in list\n', '    mapping(address => uint16) public wlIndex;\n', '\n', '\n', '    function BasicWhitelist()\n', '        public\n', '    {\n', '        setAdministrator(tx.origin);\n', '    }\n', '\n', '    //Add whitelist\n', '    function add(address _wlAddress)\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        if ( !isInList(_wlAddress) ) {\n', '            wlIndex[_wlAddress] = uint16(whitelist.length);\n', '            whitelist.push(_wlAddress);\n', '        }\n', '    }\n', '\n', '    //Bulk add\n', '    function addBulk(address[] _wlAddresses)\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        require(_wlAddresses.length <= 256);\n', '\n', '        for (uint8 i = 0; i < _wlAddresses.length; i++) {\n', '            add(_wlAddresses[i]);\n', '        }\n', '    }\n', '\n', '    //Remove address from whitelist\n', '    function remove(address _wlAddress)\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        if ( isInList(_wlAddress) ) {\n', '            uint16 index = wlIndex[_wlAddress];\n', '            wlIndex[_wlAddress] = 0;\n', '\n', '            for ( uint16 i = index; i < ( whitelist.length - 1 ); i++) {\n', '                whitelist[i] = whitelist[i + 1];\n', '            }\n', '\n', '            delete whitelist[whitelist.length - 1];\n', '            whitelist.length--;\n', '        }\n', '    }\n', '\n', '    //Bulk remove\n', '    function removeBulk(address[] _wlAddresses)\n', '        public\n', '        onlyAdministrator\n', '    {\n', '        require(_wlAddresses.length <= 256);\n', '\n', '        for (uint8 i = 0; i < _wlAddresses.length; i++) {\n', '            remove(_wlAddresses[i]);\n', '        }\n', '    }\n', '\n', '    //Get list\n', '    function getAll()\n', '        public\n', '        constant\n', '        returns(address[])\n', '    {\n', '        return whitelist;\n', '    }\n', '\n', '    //\n', '    function isInList(address _checkAddress)\n', '        public\n', '        constant\n', '        returns(bool)\n', '    {\n', '        return whitelist.length > 0\n', '                && (\n', '                    wlIndex[_checkAddress] > 0\n', '                    || whitelist[wlIndex[_checkAddress]] == _checkAddress\n', '                   );\n', '    }\n', '}\n', '\n', '\n', 'contract UNITPaymentGatewayList is BasicWhitelist {\n', '    function UNITPaymentGatewayList()\n', '        public\n', '    {\n', '        setAdministrator(tx.origin);\n', '    }\n', '}']
