['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '  using SafeMath for uint256;\n', '\n', ' \n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract MintBurnableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '\n', '}\n', '\n', 'contract DLH is MintBurnableToken {\n', '\n', '  string public constant name = "Depositor-investor L&H";\n', '\n', '  string public constant symbol = "DLH";\n', '\n', '  uint8 public constant decimals = 18;\n', '\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '}\n', '\n', 'contract Stateful {\n', '  enum State {\n', '  Private,\n', '  PreSale,\n', '  sellIsOver\n', '  }\n', '  State public state = State.Private;\n', '\n', '  event StateChanged(State oldState, State newState);\n', '\n', '  function setState(State newState) internal {\n', '    State oldState = state;\n', '    state = newState;\n', '    StateChanged(oldState, newState);\n', '  }\n', '}\n', '\n', 'contract PreICO is ReentrancyGuard, Ownable, Stateful {\n', '  using SafeMath for uint256;\n', '\n', '  DLH public token;\n', '\n', '  address public wallet;\n', '\n', '\n', '  uint256 public startPreICOTime;\n', '  uint256 public endPreICOTime;\n', '\n', '  // how many token units a buyer gets per cent\n', '  uint256 public rate; //\n', '\n', '  uint256 public priceUSD; // wei in one USD\n', '\n', '  // amount of raised money in wei\n', '  uint256 public centRaised;\n', '\n', '  uint256 public minimumInvest;\n', '\n', '  uint256 public softCapPreSale; // IN USD CENT\n', '  uint256 public hardCapPreSale; // IN USD CENT\n', '  uint256 public hardCapPrivate; // IN USD CENT\n', '\n', '  address public oracle;\n', '  address public manager;\n', '\n', '  // investors => amount of money\n', '  mapping(address => uint) public balances;\n', '  mapping(address => uint) public balancesInCent;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function PreICO(\n', '  address _wallet,\n', '  address _token,\n', '  uint256 _priceUSD,\n', '  uint256 _minimumInvest) public\n', '  {\n', '    require(_priceUSD != 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '    priceUSD = _priceUSD;\n', '    rate = 250000000000000000; // 0.25 * 1 ether per one cent\n', '    wallet = _wallet;\n', '    token = DLH(_token);\n', '    hardCapPrivate = 40000000;\n', '    minimumInvest = _minimumInvest; // in cents\n', '  }\n', '\n', '  modifier saleIsOn() {\n', '    bool withinPeriod = now >= startPreICOTime && now <= endPreICOTime;\n', '    require(withinPeriod && state == State.PreSale || state == State.Private);\n', '    _;\n', '  }\n', '\n', '  modifier isUnderHardCap() {\n', '    bool underHardCap;\n', '    if (state == State.Private){\n', '      underHardCap = centRaised < hardCapPrivate;\n', '    }\n', '    else {\n', '      underHardCap = centRaised < hardCapPreSale;\n', '    }\n', '    require(underHardCap);\n', '    _;\n', '  }\n', '\n', '  modifier onlyOracle(){\n', '    require(msg.sender == oracle);\n', '    _;\n', '  }\n', '\n', '  modifier onlyOwnerOrManager(){\n', '    require(msg.sender == manager || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endPreICOTime;\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 centValue) internal view returns(uint256) {\n', '    return centValue.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds(uint256 value) internal {\n', '    wallet.transfer(value);\n', '  }\n', '\n', '  function startPreSale(uint256 _softCapPreSale,\n', '  uint256 _hardCapPreSale,\n', '  uint256 period,\n', '  uint256 _start) public onlyOwner\n', '  {\n', '    startPreICOTime = _start;\n', '    endPreICOTime = startPreICOTime.add(period * 1 days);\n', '    softCapPreSale = _softCapPreSale;\n', '    hardCapPreSale = _hardCapPreSale;\n', '    setState(State.PreSale);\n', '  }\n', '\n', '  function finishPreSale() public onlyOwner {\n', '    require(centRaised > softCapPreSale);\n', '    setState(State.sellIsOver);\n', '    token.transferOwnership(owner);\n', '    forwardFunds(this.balance);\n', '  }\n', '\n', '  function setOracle(address _oracle) public  onlyOwner {\n', '    require(_oracle != address(0));\n', '    oracle = _oracle;\n', '  }\n', '\n', '  // set manager&#39;s address\n', '  function setManager(address _manager) public  onlyOwner {\n', '    require(_manager != address(0));\n', '    manager = _manager;\n', '  }\n', '\n', '  //set new rate\n', '  function changePriceUSD(uint256 _priceUSD) public  onlyOracle {\n', '    require(_priceUSD != 0);\n', '    priceUSD = _priceUSD;\n', '  }\n', '\n', '  modifier refundAllowed()  {\n', '    require(state != State.Private && centRaised < softCapPreSale && now > endPreICOTime);\n', '    _;\n', '  }\n', '\n', '  function refund() public refundAllowed nonReentrant {\n', '    uint valueToReturn = balances[msg.sender];\n', '    balances[msg.sender] = 0;\n', '    msg.sender.transfer(valueToReturn);\n', '  }\n', '\n', '  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {\n', '    uint256 centValue = _valueUSD.mul(100);\n', '    uint256 tokensAmount = getTokenAmount(centValue);\n', '    centRaised = centRaised.add(centValue);\n', '    token.mint(_to, tokensAmount);\n', '    balancesInCent[_to] = balancesInCent[_to].add(centValue);\n', '  }\n', '\n', '  function buyTokens(address beneficiary) saleIsOn isUnderHardCap nonReentrant public payable {\n', '    require(beneficiary != address(0) && msg.value.div(priceUSD) >= minimumInvest);\n', '    uint256 weiAmount = msg.value;\n', '    uint256 centValue = weiAmount.div(priceUSD);\n', '    uint256 tokens = getTokenAmount(centValue);\n', '    centRaised = centRaised.add(centValue);\n', '    token.mint(beneficiary, tokens);\n', '    balances[msg.sender] = balances[msg.sender].add(weiAmount);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    if (centRaised > softCapPreSale || state == State.Private) {\n', '      forwardFunds(weiAmount);\n', '    }\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\n', '  using SafeMath for uint256;\n', '\n', ' \n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract MintBurnableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(burner, _value);\n', '    Transfer(burner, address(0), _value);\n', '  }\n', '\n', '}\n', '\n', 'contract DLH is MintBurnableToken {\n', '\n', '  string public constant name = "Depositor-investor L&H";\n', '\n', '  string public constant symbol = "DLH";\n', '\n', '  uint8 public constant decimals = 18;\n', '\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '}\n', '\n', 'contract Stateful {\n', '  enum State {\n', '  Private,\n', '  PreSale,\n', '  sellIsOver\n', '  }\n', '  State public state = State.Private;\n', '\n', '  event StateChanged(State oldState, State newState);\n', '\n', '  function setState(State newState) internal {\n', '    State oldState = state;\n', '    state = newState;\n', '    StateChanged(oldState, newState);\n', '  }\n', '}\n', '\n', 'contract PreICO is ReentrancyGuard, Ownable, Stateful {\n', '  using SafeMath for uint256;\n', '\n', '  DLH public token;\n', '\n', '  address public wallet;\n', '\n', '\n', '  uint256 public startPreICOTime;\n', '  uint256 public endPreICOTime;\n', '\n', '  // how many token units a buyer gets per cent\n', '  uint256 public rate; //\n', '\n', '  uint256 public priceUSD; // wei in one USD\n', '\n', '  // amount of raised money in wei\n', '  uint256 public centRaised;\n', '\n', '  uint256 public minimumInvest;\n', '\n', '  uint256 public softCapPreSale; // IN USD CENT\n', '  uint256 public hardCapPreSale; // IN USD CENT\n', '  uint256 public hardCapPrivate; // IN USD CENT\n', '\n', '  address public oracle;\n', '  address public manager;\n', '\n', '  // investors => amount of money\n', '  mapping(address => uint) public balances;\n', '  mapping(address => uint) public balancesInCent;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function PreICO(\n', '  address _wallet,\n', '  address _token,\n', '  uint256 _priceUSD,\n', '  uint256 _minimumInvest) public\n', '  {\n', '    require(_priceUSD != 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '    priceUSD = _priceUSD;\n', '    rate = 250000000000000000; // 0.25 * 1 ether per one cent\n', '    wallet = _wallet;\n', '    token = DLH(_token);\n', '    hardCapPrivate = 40000000;\n', '    minimumInvest = _minimumInvest; // in cents\n', '  }\n', '\n', '  modifier saleIsOn() {\n', '    bool withinPeriod = now >= startPreICOTime && now <= endPreICOTime;\n', '    require(withinPeriod && state == State.PreSale || state == State.Private);\n', '    _;\n', '  }\n', '\n', '  modifier isUnderHardCap() {\n', '    bool underHardCap;\n', '    if (state == State.Private){\n', '      underHardCap = centRaised < hardCapPrivate;\n', '    }\n', '    else {\n', '      underHardCap = centRaised < hardCapPreSale;\n', '    }\n', '    require(underHardCap);\n', '    _;\n', '  }\n', '\n', '  modifier onlyOracle(){\n', '    require(msg.sender == oracle);\n', '    _;\n', '  }\n', '\n', '  modifier onlyOwnerOrManager(){\n', '    require(msg.sender == manager || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endPreICOTime;\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 centValue) internal view returns(uint256) {\n', '    return centValue.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds(uint256 value) internal {\n', '    wallet.transfer(value);\n', '  }\n', '\n', '  function startPreSale(uint256 _softCapPreSale,\n', '  uint256 _hardCapPreSale,\n', '  uint256 period,\n', '  uint256 _start) public onlyOwner\n', '  {\n', '    startPreICOTime = _start;\n', '    endPreICOTime = startPreICOTime.add(period * 1 days);\n', '    softCapPreSale = _softCapPreSale;\n', '    hardCapPreSale = _hardCapPreSale;\n', '    setState(State.PreSale);\n', '  }\n', '\n', '  function finishPreSale() public onlyOwner {\n', '    require(centRaised > softCapPreSale);\n', '    setState(State.sellIsOver);\n', '    token.transferOwnership(owner);\n', '    forwardFunds(this.balance);\n', '  }\n', '\n', '  function setOracle(address _oracle) public  onlyOwner {\n', '    require(_oracle != address(0));\n', '    oracle = _oracle;\n', '  }\n', '\n', "  // set manager's address\n", '  function setManager(address _manager) public  onlyOwner {\n', '    require(_manager != address(0));\n', '    manager = _manager;\n', '  }\n', '\n', '  //set new rate\n', '  function changePriceUSD(uint256 _priceUSD) public  onlyOracle {\n', '    require(_priceUSD != 0);\n', '    priceUSD = _priceUSD;\n', '  }\n', '\n', '  modifier refundAllowed()  {\n', '    require(state != State.Private && centRaised < softCapPreSale && now > endPreICOTime);\n', '    _;\n', '  }\n', '\n', '  function refund() public refundAllowed nonReentrant {\n', '    uint valueToReturn = balances[msg.sender];\n', '    balances[msg.sender] = 0;\n', '    msg.sender.transfer(valueToReturn);\n', '  }\n', '\n', '  function manualTransfer(address _to, uint _valueUSD) public saleIsOn isUnderHardCap onlyOwnerOrManager {\n', '    uint256 centValue = _valueUSD.mul(100);\n', '    uint256 tokensAmount = getTokenAmount(centValue);\n', '    centRaised = centRaised.add(centValue);\n', '    token.mint(_to, tokensAmount);\n', '    balancesInCent[_to] = balancesInCent[_to].add(centValue);\n', '  }\n', '\n', '  function buyTokens(address beneficiary) saleIsOn isUnderHardCap nonReentrant public payable {\n', '    require(beneficiary != address(0) && msg.value.div(priceUSD) >= minimumInvest);\n', '    uint256 weiAmount = msg.value;\n', '    uint256 centValue = weiAmount.div(priceUSD);\n', '    uint256 tokens = getTokenAmount(centValue);\n', '    centRaised = centRaised.add(centValue);\n', '    token.mint(beneficiary, tokens);\n', '    balances[msg.sender] = balances[msg.sender].add(weiAmount);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    if (centRaised > softCapPreSale || state == State.Private) {\n', '      forwardFunds(weiAmount);\n', '    }\n', '  }\n', '\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '}']
