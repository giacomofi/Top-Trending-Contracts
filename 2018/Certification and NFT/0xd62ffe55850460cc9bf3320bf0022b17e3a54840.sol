['pragma solidity ^0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract SmartRouletteToken\n', '{\n', '    function balanceOf( address who ) external view returns (uint256);\n', '    function transfer( address to, uint256 value) returns (bool);\n', '    function decimals()  external view returns (uint8);\n', '}\n', '\n', 'contract SaleTokens is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    SmartRouletteToken tokensContract;\n', '    bool isSale;\n', '    uint256 minInvest;\n', '\n', '    function SaleTokens(){\n', '        tokensContract = SmartRouletteToken(0xdca4ea5f5c154c4feaf22a38ecafb8c71dad816d);\n', '        isSale = true;\n', '        minInvest = 0.01 ether;\n', '    }\n', '\n', '    function stopSale() onlyOwner {\n', '        isSale = false;\n', '        if(tokensContract.balanceOf(this) > 0){\n', '            tokensContract.transfer(msg.sender, tokensContract.balanceOf(this));\n', '        }\n', '        if (this.balance > 0){\n', '            msg.sender.transfer(this.balance);\n', '        }\n', '    }\n', '\n', '    function withdraw() onlyOwner {\n', '        assert(this.balance > 0);\n', '        msg.sender.transfer(this.balance);\n', '    }\n', '\n', '    function getPrice(uint256 value) view public returns (uint256 price){\n', '        price = 0.00015 ether;\n', '        if (value >= 0.075 ether && value < 0.135 ether)\n', '        {\n', '            price = 0.000135 ether;\n', '        }\n', '        else if(value >= 0.135 ether && value < 0.25 ether)\n', '        {\n', '            price = 0.00012 ether;\n', '        }\n', '        else if(value >= 0.25 ether && value < 1 ether)\n', '        {\n', '            price = 0.00011 ether;\n', '        }\n', '        else if (value >= 1 ether)\n', '        {\n', '            price = 0.0001 ether;\n', '        }\n', '    }\n', '\n', '    function () payable {\n', '        assert(isSale);\n', '        assert(tokensContract.balanceOf(this) > 0);\n', '        assert(msg.value > minInvest);\n', '\n', '        uint256 countTokens = msg.value.mul(10**uint256(tokensContract.decimals())).div(getPrice(msg.value));\n', '        assert(tokensContract.balanceOf(this) >= countTokens);\n', '        tokensContract.transfer(msg.sender, countTokens);\n', '    }\n', '}']