['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/Affiliate.sol\n', '\n', '// solhint-disable-next-line\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', '\n', '/** @title Affiliate */\n', 'contract Affiliate is Ownable {\n', '    mapping(address => bool) public canSetAffiliate;\n', '    mapping(address => address) public userToAffiliate;\n', '\n', '    /** @dev Allows an address to set the affiliate address for a user\n', '      * @param _setter The address that should be allowed\n', '      */\n', '    function setAffiliateSetter(address _setter) public onlyOwner {\n', '        canSetAffiliate[_setter] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the affiliate of a user\n', '     * @param _user user to set affiliate for\n', '     * @param _affiliate address to set\n', '     */\n', '    function setAffiliate(address _user, address _affiliate) public {\n', '        require(canSetAffiliate[msg.sender]);\n', '        if (userToAffiliate[_user] == address(0)) {\n', '            userToAffiliate[_user] = _affiliate;\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/Affiliate.sol\n', '\n', '// solhint-disable-next-line\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', '\n', '/** @title Affiliate */\n', 'contract Affiliate is Ownable {\n', '    mapping(address => bool) public canSetAffiliate;\n', '    mapping(address => address) public userToAffiliate;\n', '\n', '    /** @dev Allows an address to set the affiliate address for a user\n', '      * @param _setter The address that should be allowed\n', '      */\n', '    function setAffiliateSetter(address _setter) public onlyOwner {\n', '        canSetAffiliate[_setter] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set the affiliate of a user\n', '     * @param _user user to set affiliate for\n', '     * @param _affiliate address to set\n', '     */\n', '    function setAffiliate(address _user, address _affiliate) public {\n', '        require(canSetAffiliate[msg.sender]);\n', '        if (userToAffiliate[_user] == address(0)) {\n', '            userToAffiliate[_user] = _affiliate;\n', '        }\n', '    }\n', '\n', '}']
