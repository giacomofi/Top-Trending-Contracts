['/* Simple token - simple token for PreICO and ICO\n', '   Copyright (C) 2017  Sergey Sherkunov <leinlawun@leinlawun.org>\n', '   Copyright (C) 2017  OOM.AG <info@oom.ag>\n', '\n', '   This file is part of simple token.\n', '\n', '   Token is free software: you can redistribute it and/or modify\n', '   it under the terms of the GNU General Public License as published by\n', '   the Free Software Foundation, either version 3 of the License, or\n', '   (at your option) any later version.\n', '\n', '   This program is distributed in the hope that it will be useful,\n', '   but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '   GNU General Public License for more details.\n', '\n', '   You should have received a copy of the GNU General Public License\n', '   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '\n', '        assert(c >= a);\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        assert(b <= a);\n', '\n', '        c = a - b;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a * b;\n', '\n', '        assert(c / a == b);\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a / b;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a % b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a;\n', '\n', '        if(a > b)\n', '           c = b;\n', '    }\n', '}\n', '\n', 'contract ABXToken {\n', '    using SafeMath for uint256;\n', '\n', '    address public owner;\n', '\n', '    address public minter;\n', '\n', '    string public name;\n', '\n', '    string public symbol;\n', '\n', '    uint8 public decimals;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    mapping(address => mapping(address => uint256)) public allowance;\n', '\n', '    event Transfer(address indexed oldTokensHolder,\n', '                   address indexed newTokensHolder, uint256 tokensNumber);\n', '\n', '    //An Attack Vector on Approve/TransferFrom Methods:\n', '    //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    event Transfer(address indexed tokensSpender,\n', '                   address indexed oldTokensHolder,\n', '                   address indexed newTokensHolder, uint256 tokensNumber);\n', '\n', '    event Approval(address indexed tokensHolder, address indexed tokensSpender,\n', '                   uint256 newTokensNumber);\n', '\n', '    //An Attack Vector on Approve/TransferFrom Methods:\n', '    //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    event Approval(address indexed tokensHolder, address indexed tokensSpender,\n', '                   uint256 oldTokensNumber, uint256 newTokensNumber);\n', '\n', '    modifier onlyOwner {\n', '        require(owner == msg.sender);\n', '\n', '        _;\n', '    }\n', '\n', '    //ERC20 Short Address Attack:\n', '    //https://vessenes.com/the-erc20-short-address-attack-explained\n', '    //https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95\n', '    //https://ericrafaloff.com/analyzing-the-erc20-short-address-attack\n', '    modifier checkPayloadSize(uint256 size) {\n', '        require(msg.data.length == size + 4);\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotNullTokenHolder(address tokenHolder) {\n', '        require(tokenHolder != address(0));\n', '\n', '        _;\n', '    }\n', '\n', '    function ABXToken(string _name, string _symbol, uint8 _decimals,\n', '                      uint256 _totalSupply) public {\n', '        owner = msg.sender;\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '        totalSupply = _totalSupply.mul(10 ** uint256(decimals));\n', '\n', '        require(decimals <= 77);\n', '\n', '        balanceOf[this] = totalSupply;\n', '    }\n', '\n', '    function setOwner(address _owner) public onlyOwner returns(bool) {\n', '        owner = _owner;\n', '\n', '        return true;\n', '    }\n', '\n', '    function setMinter(address _minter) public onlyOwner returns(bool) {\n', '        safeApprove(this, minter, 0);\n', '\n', '        minter = _minter;\n', '\n', '        safeApprove(this, minter, balanceOf[this]);\n', '\n', '        return true;\n', '    }\n', '\n', '    //ERC20 Short Address Attack:\n', '    //https://vessenes.com/the-erc20-short-address-attack-explained\n', '    //https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95\n', '    //https://ericrafaloff.com/analyzing-the-erc20-short-address-attack\n', '    function transfer(address newTokensHolder, uint256 tokensNumber) public\n', '                     checkPayloadSize(2 * 32) returns(bool) {\n', '        transfer(msg.sender, newTokensHolder, tokensNumber);\n', '\n', '        return true;\n', '    }\n', '\n', '    //An Attack Vector on Approve/TransferFrom Methods:\n', '    //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    //\n', '    //ERC20 Short Address Attack:\n', '    //https://vessenes.com/the-erc20-short-address-attack-explained\n', '    //https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95\n', '    //https://ericrafaloff.com/analyzing-the-erc20-short-address-attack\n', '    function transferFrom(address oldTokensHolder, address newTokensHolder,\n', '                          uint256 tokensNumber) public checkPayloadSize(3 * 32)\n', '                         returns(bool) {\n', '        allowance[oldTokensHolder][msg.sender] =\n', '            allowance[oldTokensHolder][msg.sender].sub(tokensNumber);\n', '\n', '        transfer(oldTokensHolder, newTokensHolder, tokensNumber);\n', '\n', '        Transfer(msg.sender, oldTokensHolder, newTokensHolder, tokensNumber);\n', '\n', '        return true;\n', '    }\n', '\n', '    //ERC20 Short Address Attack:\n', '    //https://vessenes.com/the-erc20-short-address-attack-explained\n', '    //https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95\n', '    //https://ericrafaloff.com/analyzing-the-erc20-short-address-attack\n', '    function approve(address tokensSpender, uint256 newTokensNumber) public\n', '                    checkPayloadSize(2 * 32) returns(bool) {\n', '        safeApprove(msg.sender, tokensSpender, newTokensNumber);\n', '\n', '        return true;\n', '    }\n', '\n', '    //An Attack Vector on Approve/TransferFrom Methods:\n', '    //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    //\n', '    //ERC20 Short Address Attack:\n', '    //https://vessenes.com/the-erc20-short-address-attack-explained\n', '    //https://blog.golemproject.net/how-to-find-10m-by-just-reading-blockchain-6ae9d39fcd95\n', '    //https://ericrafaloff.com/analyzing-the-erc20-short-address-attack\n', '    function approve(address tokensSpender, uint256 oldTokensNumber,\n', '                     uint256 newTokensNumber) public checkPayloadSize(3 * 32)\n', '                    returns(bool) {\n', '        require(allowance[msg.sender][tokensSpender] == oldTokensNumber);\n', '\n', '        unsafeApprove(msg.sender, tokensSpender, newTokensNumber);\n', '\n', '        Approval(msg.sender, tokensSpender, oldTokensNumber, newTokensNumber);\n', '\n', '        return true;\n', '    }\n', '\n', '    function transfer(address oldTokensHolder, address newTokensHolder,\n', '                      uint256 tokensNumber) private\n', '                      onlyNotNullTokenHolder(oldTokensHolder) {\n', '        balanceOf[oldTokensHolder] =\n', '            balanceOf[oldTokensHolder].sub(tokensNumber);\n', '\n', '        balanceOf[newTokensHolder] =\n', '            balanceOf[newTokensHolder].add(tokensNumber);\n', '\n', '        Transfer(oldTokensHolder, newTokensHolder, tokensNumber);\n', '    }\n', '\n', '    //An Attack Vector on Approve/TransferFrom Methods:\n', '    //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    function unsafeApprove(address tokensHolder, address tokensSpender,\n', '                           uint256 newTokensNumber) private\n', '                          onlyNotNullTokenHolder(tokensHolder) {\n', '        allowance[tokensHolder][tokensSpender] = newTokensNumber;\n', '\n', '        Approval(msg.sender, tokensSpender, newTokensNumber);\n', '    }\n', '    \n', '    //An Attack Vector on Approve/TransferFrom Methods:\n', '    //https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    function safeApprove(address tokensHolder, address tokensSpender,\n', '                         uint256 newTokensNumber) private {\n', '        require(allowance[tokensHolder][tokensSpender] == 0 ||\n', '                newTokensNumber == 0);\n', '\n', '        unsafeApprove(tokensHolder, tokensSpender, newTokensNumber);\n', '    }\n', '}\n', '\n', 'contract Minter {\n', '    using SafeMath for uint256;\n', '\n', '    enum MinterState {\n', '        tokenSaleWait,\n', '        tokenSaleStarted,\n', '        Over\n', '    }\n', '\n', '    struct Tokensale {\n', '        uint256 startTime;\n', '        uint256 endTime;\n', '        uint256 tokensMinimumNumberForBuy;\n', '        uint256 tokensCost;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    address public manager;\n', '\n', '    bool public paused = false;\n', '\n', '    mapping(address => bool) public whiteList;\n', '\n', '    ABXToken public token;\n', '\n', '    Tokensale public tokenSale;\n', '\n', '    modifier onlyOwner {\n', '        require(owner == msg.sender);\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyNotPaused {\n', '        require(!paused);\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyDuringTokensale {\n', '        require(minterState() == MinterState.tokenSaleStarted);\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterTokensaleOver {\n', '        require(minterState() == MinterState.Over);\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhiteList {\n', '        require(whiteList[msg.sender]);\n', '\n', '        _;\n', '    }\n', '\n', '    modifier checkLimitsToBuyTokens {\n', '        require(tokenSale.tokensMinimumNumberForBuy <=\n', '                tokensNumberForBuy().div(10 ** uint256(token.decimals())));\n', '\n', '        _;\n', '    }\n', '\n', '    function Minter(address _manager, ABXToken _token,\n', '                    uint256 tokenSaleStartTime, uint256 tokenSaleEndTime,\n', '                    uint256 tokenSaleTokensMinimumNumberForBuy) public {\n', '        owner = msg.sender;\n', '        manager = _manager;\n', '        token = _token;\n', '        tokenSale.startTime = tokenSaleStartTime;\n', '        tokenSale.endTime = tokenSaleEndTime;\n', '        tokenSale.tokensMinimumNumberForBuy =\n', '            tokenSaleTokensMinimumNumberForBuy;\n', '    }\n', '\n', '    function setOwner(address _owner) public onlyOwner {\n', '        owner = _owner;\n', '    }\n', '\n', '    function setManager(address _manager) public onlyOwner {\n', '        manager = _manager;\n', '    }\n', '\n', '    function setPaused(bool _paused) public onlyOwner {\n', '        paused = _paused;\n', '    }\n', '\n', '    function addWhiteList(address tokensHolder) public onlyOwner {\n', '        whiteList[tokensHolder] = true;\n', '    }\n', '\n', '    function removeWhiteList(address tokensHolder) public onlyOwner {\n', '        whiteList[tokensHolder] = false;\n', '    }\n', '\n', '    function setTokenSaleStartTime(uint256 timestamp) public onlyOwner {\n', '        tokenSale.startTime = timestamp;\n', '    }\n', '\n', '    function setTokenSaleEndTime(uint256 timestamp) public onlyOwner {\n', '        tokenSale.endTime = timestamp;\n', '    }\n', '\n', '    function setTokenSaleTokensMinimumNumberForBuy(uint256 tokensNumber) public\n', '                                               onlyOwner {\n', '        tokenSale.tokensMinimumNumberForBuy = tokensNumber;\n', '    }\n', '\n', '    function setTokenSaleTokensCost(uint256 tokensCost) public onlyOwner {\n', '        tokenSale.tokensCost = tokensCost;\n', '    }\n', '\n', '    function transferRestTokensToOwner() public onlyOwner\n', '                                      onlyAfterTokensaleOver {\n', '        token.transferFrom(token, msg.sender, token.allowance(token, this));\n', '    }\n', '\n', '    function () public payable onlyDuringTokensale onlyNotPaused onlyWhiteList\n', '                checkLimitsToBuyTokens {\n', '        uint256 tokensNumber = tokensNumberForBuy();\n', '\n', '        uint256 aviableTokensNumber =\n', '            token.balanceOf(token).min(token.allowance(token, this));\n', '\n', '        uint256 restCoins = 0;\n', '\n', '        if(tokensNumber >= aviableTokensNumber) {\n', '            uint256 restTokensNumber = tokensNumber.sub(aviableTokensNumber);\n', '\n', '            restCoins =\n', '                restTokensNumber.mul(tokenSale.tokensCost)\n', '                                .div(10 ** uint256(token.decimals()));\n', '\n', '            tokensNumber = aviableTokensNumber;\n', '        }\n', '\n', '        token.transferFrom(token, msg.sender, tokensNumber);\n', '\n', '        msg.sender.transfer(restCoins);\n', '\n', '        manager.transfer(msg.value.sub(restCoins));\n', '    }\n', '\n', '    function minterState() private constant returns(MinterState) {\n', '        if(tokenSale.startTime > now) {\n', '            return MinterState.tokenSaleWait;\n', '        } else if(tokenSale.endTime > now) {\n', '            return MinterState.tokenSaleStarted;\n', '        } else {\n', '            return MinterState.Over;\n', '        }\n', '    }\n', '\n', '    function tokensNumberForBuy() private constant returns(uint256) {\n', '        return msg.value.mul(10 ** uint256(token.decimals()))\n', '                        .div(tokenSale.tokensCost);\n', '    }\n', '}']