['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable \n', '\n', '{\n', '\n', '  address public owner;\n', '\n', ' \n', '\n', '  constructor(address _owner) public \n', '\n', '  {\n', '\n', '    owner = _owner;\n', '\n', '  }\n', '\n', ' \n', '\n', '  modifier onlyOwner() \n', '\n', '  {\n', '\n', '    require(msg.sender == owner);\n', '\n', '    _;\n', '\n', '  }\n', '\n', ' \n', '\n', '  function transferOwnership(address newOwner) onlyOwner \n', '\n', '  {\n', '\n', '    require(newOwner != address(0));      \n', '\n', '    owner = newOwner;\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract IBalance {\n', '\n', '\tfunction distributeEthProfit(address profitMaker, uint256 amount) public  ;\n', '\n', '\tfunction distributeTokenProfit (address profitMaker, address token, uint256 amount) public  ;\n', '\n', '\tfunction modifyBalance(address _account, address _token, uint256 _amount, bool _addOrSub) public;\n', '\n', '\tfunction getAvailableBalance(address _token, address _account) public constant returns (uint256);\n', '\n', '}\n', '\n', 'contract IToken {\n', '\n', '\n', '\n', '  /// @notice send `_value` token to `_to` from `msg.sender`\n', '\n', '  /// @param _to The address of the recipient\n', '\n', '  /// @param _value The amount of token to be transferred\n', '\n', '  /// @return Whether the transfer was successful or not\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '\n', '\n', '  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '\n', '  /// @param _from The address of the sender\n', '\n', '  /// @param _to The address of the recipient\n', '\n', '  /// @param _value The amount of token to be transferred\n', '\n', '  /// @return Whether the transfer was successful or not\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '\n', '  */\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    if (a == 0) {\n', '\n', '      return 0;\n', '\n', '    }\n', '\n', '    uint256 c = a * b;\n', '\n', '    require(c / a == b);\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '\n', '  */\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    require(b > 0); // Solidity automatically throws when dividing by 0\n', '\n', '    uint256 c = a / b;\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\n', '  */\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    require(b <= a);\n', '\n', '    return a - b;\n', '\n', '  }\n', '\n', '\n', '\n', '  /**\n', '\n', '  * @dev Adds two numbers, throws on overflow.\n', '\n', '  */\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\n', '    uint256 c = a + b;\n', '\n', '    require(c >= a);\n', '\n', '    return c;\n', '\n', '  }\n', '\n', '}\n', '\n', 'contract BiLinkExchange is Ownable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\n', '\n', '\taddress public contractBalance;\n', '\n', '\tuint256 public commissionRatio;//percentage\n', '\n', '\n', '\n', '\tmapping (address => mapping ( bytes32 => uint256)) public account2Order2TradeAmount;\n', '\n', '\n', '\n', '\tbool public isLegacy;//if true, not allow new trade,new deposit\n', '\n', '\n', '\n', '\tevent OnTrade(bytes32 guid, address tokenGive, address tokenGet, address maker, address taker, uint256 amountGive, uint256 amountGet, uint256 amountGetTrade, uint256 timestamp);\n', '\n', '\t\n', '\n', '\n', '\n', '\tconstructor(address _owner, uint256 _commissionRatio) public Ownable(_owner) {\n', '\n', '\t\tisLegacy= false;\n', '\n', '\t\tcommissionRatio= _commissionRatio;\n', '\n', '\t}\n', '\n', '\n', '\n', '\tfunction setThisContractAsLegacy() public onlyOwner {\n', '\n', '\t\tisLegacy= true;\n', '\n', '\t}\n', '\n', '\n', '\n', '\tfunction setBalanceContract(address _contractBalance) public onlyOwner {\n', '\n', '\t\tcontractBalance= _contractBalance;\n', '\n', '\t}\n', '\n', '\n', '\n', '\t//_arr1:tokenGive,tokenGet,maker\n', '\n', '\t//_arr2:amountGive,amountGet,amountGetTrade,expireTime\n', '\n', '\t//_arr3:rMaker,sMaker\n', '\n', "\t//parameters are from taker's perspective\n", '\n', '\tfunction trade(address[] _arr1, uint256[] _arr2, bytes32 _guid, uint8 _vMaker, bytes32[] _arr3) public {\n', '\n', '\t\trequire(isLegacy== false&& now <= _arr2[3]);\n', '\n', '\n', '\n', '\t\tuint256 _amountTokenGiveTrade= _arr2[0].mul(_arr2[2]).div(_arr2[1]);\n', '\n', '\t\trequire(_arr2[2]<= IBalance(contractBalance).getAvailableBalance(_arr1[1], _arr1[2])&&_amountTokenGiveTrade<= IBalance(contractBalance).getAvailableBalance(_arr1[0], msg.sender));\n', '\n', '\n', '\n', '\t\tbytes32 _hash = keccak256(abi.encodePacked(this, _arr1[1], _arr1[0], _arr2[1], _arr2[0], _arr2[3]));\n', '\n', '\t\trequire(ecrecover(_hash, _vMaker, _arr3[0], _arr3[1]) ==  _arr1[2]&& account2Order2TradeAmount[_arr1[2]][_hash].add(_arr2[2])<= _arr2[1]);\n', '\n', '\n', '\n', '\t\tuint256 _commission= _arr2[2].mul(commissionRatio).div(10000);\n', '\n', '\t\t\n', '\n', '\t\tIBalance(contractBalance).modifyBalance(msg.sender, _arr1[1], _arr2[2].sub(_commission), true);\n', '\n', '\t\tIBalance(contractBalance).modifyBalance(_arr1[2], _arr1[1], _arr2[2], false); \n', '\n', '\t\t\n', '\n', '\t\tIBalance(contractBalance).modifyBalance(msg.sender, _arr1[0], _amountTokenGiveTrade, false);\n', '\n', '\t\tIBalance(contractBalance).modifyBalance(_arr1[2], _arr1[0], _amountTokenGiveTrade, true);\n', '\n', '\t\taccount2Order2TradeAmount[_arr1[2]][_hash]= account2Order2TradeAmount[_arr1[2]][_hash].add(_arr2[2]);\n', '\n', '\t\t\t\t\t\t\n', '\n', '\t\tif(_arr1[1]== address(0)) {\n', '\n', '\t\t\tIBalance(contractBalance).distributeEthProfit(msg.sender, _commission);\n', '\n', '\t\t}\n', '\n', '\t\telse {\n', '\n', '\t\t\tIBalance(contractBalance).distributeTokenProfit(msg.sender, _arr1[1], _commission);\n', '\n', '\t\t}\n', '\n', '\n', '\n', '\t\temit OnTrade(_guid, _arr1[0], _arr1[1], _arr1[2], msg.sender, _arr2[0], _arr2[1], _arr2[2], now);\n', '\n', '\t}\n', '\n', '}']