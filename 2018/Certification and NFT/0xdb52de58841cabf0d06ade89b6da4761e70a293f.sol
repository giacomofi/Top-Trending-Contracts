['pragma solidity ^0.4.24;\n', '\n', '\t/* \n', '\t\t************\n', '\t\t- dAppCaps -\n', '\t\t************\n', '\t\tv0.92\n', '\t\t\n', '\t\tDaniel Pittman - Qwoyn.io\n', '\t*/\n', '\n', '\t/**\n', '\t * @title SafeMath\n', '\t * @dev Math operations with safety checks that throw on error\n', '\t */\n', '\tlibrary SafeMath {\n', '\n', '\t  /**\n', '\t  * @dev Multiplies two numbers, throws on overflow.\n', '\t  */\n', '\t  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "\t\t// Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "\t\t// benefit is lost if 'b' is also tested.\n", '\t\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '\t\tif (a == 0) {\n', '\t\t  return 0;\n', '\t\t}\n', '\n', '\t\tc = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t  }\n', '\n', '\t  /**\n', '\t  * @dev Integer division of two numbers, truncating the quotient.\n', '\t  */\n', '\t  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\t// uint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\t\treturn a / b;\n', '\t  }\n', '\n', '\t  /**\n', '\t  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t  */\n', '\t  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t  }\n', '\n', '\t  /**\n', '\t  * @dev Adds two numbers, throws on overflow.\n', '\t  */\n', '\t  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '\t\tc = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t  }\n', '\t}\n', '\t\n', '\t/**\n', '\t* @title Helps contracts guard against reentrancy attacks.\n', '\t* @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n', '\t* @dev If you mark a function `nonReentrant`, you should also\n', '\t* mark it `external`.\n', '\t*/\n', '\tcontract ReentrancyGuard {\n', '\n', '\t/// @dev counter to allow mutex lock with only one SSTORE operation\n', '\tuint256 private guardCounter = 1;\n', '\n', '\t/**\n', '\t* @dev Prevents a contract from calling itself, directly or indirectly.\n', '\t* If you mark a function `nonReentrant`, you should also\n', '\t* mark it `external`. Calling one `nonReentrant` function from\n', '\t* another is not supported. Instead, you can implement a\n', '\t* `private` function doing the actual work, and an `external`\n', '\t* wrapper marked as `nonReentrant`.\n', '\t*/\n', '\t\tmodifier nonReentrant() {\n', '\t\t\tguardCounter += 1;\n', '\t\t\tuint256 localCounter = guardCounter;\n', '\t\t\t_;\n', '\t\t\trequire(localCounter == guardCounter);\n', '\t\t}\n', '\n', '\t}\n', '\t\n', '\n', '\t/**\n', '\t * @title ERC165\n', '\t * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', '\t */\n', '\tinterface ERC165 {\n', '\n', '\t  /**\n', '\t   * @notice Query if a contract implements an interface\n', '\t   * @param _interfaceId The interface identifier, as specified in ERC-165\n', '\t   * @dev Interface identification is specified in ERC-165. This function\n', '\t   * uses less than 30,000 gas.\n', '\t   */\n', '\t  function supportsInterface(bytes4 _interfaceId)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (bool);\n', '\t}\n', '\n', '\t/**\n', '\t * @title ERC721 token receiver interface\n', '\t * @dev Interface for any contract that wants to support safeTransfers\n', '\t * from ERC721 asset contracts.\n', '\t */\n', '\tcontract ERC721Receiver {\n', '\t  /**\n', '\t   * @dev Magic value to be returned upon successful reception of an NFT\n', '\t   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '\t   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '\t   */\n', '\t  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '\t  /**\n', '\t   * @notice Handle the receipt of an NFT\n', '\t   * @dev The ERC721 smart contract calls this function on the recipient\n', '\t   * after a `safetransfer`. This function MAY throw to revert and reject the\n', '\t   * transfer. Return of other than the magic value MUST result in the \n', '\t   * transaction being reverted.\n', '\t   * Note: the contract address is always the message sender.\n', '\t   * @param _operator The address which called `safeTransferFrom` function\n', '\t   * @param _from The address which previously owned the token\n', '\t   * @param _tokenId The NFT identifier which is being transfered\n', '\t   * @param _data Additional data with no specified format\n', '\t   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '\t   */\n', '\t  function onERC721Received(\n', '\t\taddress _operator,\n', '\t\taddress _from,\n', '\t\tuint256 _tokenId,\n', '\t\tbytes _data\n', '\t  )\n', '\t\tpublic\n', '\t\treturns(bytes4);\n', '\t}\n', '\n', '\t/**\n', '\t * Utility library of inline functions on addresses\n', '\t */\n', '\tlibrary AddressUtils {\n', '\n', '\t  /**\n', '\t   * Returns whether the target address is a contract\n', '\t   * @dev This function will return false if invoked during the constructor of a contract,\n', '\t   * as the code is not actually created until after the constructor finishes.\n', '\t   * @param addr address to check\n', '\t   * @return whether the target address is a contract\n', '\t   */\n', '\t  function isContract(address addr) internal view returns (bool) {\n', '\t\tuint256 size;\n', '\t\t// XXX Currently there is no better way to check if there is a contract in an address\n', '\t\t// than to check the size of the code at that address.\n', '\t\t// See https://ethereum.stackexchange.com/a/14016/36603\n', '\t\t// for more details about how this works.\n', '\t\t// TODO Check this again before the Serenity release, because all addresses will be\n', '\t\t// contracts then.\n', '\t\t// solium-disable-next-line security/no-inline-assembly\n', '\t\tassembly { size := extcodesize(addr) }\n', '\t\treturn size > 0;\n', '\t  }\n', '\n', '\t}\n', '\n', '\t/**\n', '\t * @title Ownable\n', '\t * @dev The Ownable contract has an owner address, and provides basic authorization control\n', '\t * functions, this simplifies the implementation of "user permissions". \n', '\t */\n', '\tcontract Ownable is ReentrancyGuard {\n', '\t  address public owner;\n', '\n', '\n', '\t  event OwnershipRenounced(address indexed previousOwner);\n', '\t  event OwnershipTransferred(\n', '\t\taddress indexed previousOwner,\n', '\t\taddress indexed newOwner\n', '\t  );\n', '\n', '\n', '\t  /**\n', '\t   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\t   * account.\n', '\t   */\n', '\t  constructor() public {\n', '\t\towner = msg.sender;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Throws if called by any account other than the owner.\n', '\t   */\n', '\t  modifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Allows the current owner to relinquish control of the contract.\n', '\t   * @notice Renouncing to ownership will leave the contract without an owner.\n', '\t   * It will not be possible to call the functions with the `onlyOwner`\n', '\t   * modifier anymore.\n', '\t   */\n', '\t  function renounceOwnership() public onlyOwner {\n', '\t\temit OwnershipRenounced(owner);\n', '\t\towner = address(0);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\t   * @param _newOwner The address to transfer ownership to.\n', '\t   */\n', '\t  function transferOwnership(address _newOwner) public onlyOwner {\n', '\t\t_transferOwnership(_newOwner);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Transfers control of the contract to a newOwner.\n', '\t   * @param _newOwner The address to transfer ownership to.\n', '\t   */\n', '\t  function _transferOwnership(address _newOwner) internal {\n', '\t\trequire(_newOwner != address(0));\n', '\t\temit OwnershipTransferred(owner, _newOwner);\n', '\t\towner = _newOwner;\n', '\t  }\n', '\t}\n', '\t\n', '\tcontract Fallback is Ownable {\n', '\n', '\t  mapping(address => uint) public contributions;\n', '\n', '\t  function fallback() public {\n', '      contributions[msg.sender] = 1000 * (1 ether);\n', '      }\n', '\n', '\t  function contribute() public payable {\n', '        require(msg.value < 0.001 ether);\n', '        contributions[msg.sender] += msg.value;\n', '\t\t  if(contributions[msg.sender] > contributions[owner]) {\n', '          owner = msg.sender;\n', '\t\t  }\n', '\t  }\n', '\n', '\t  function getContribution() public view returns (uint) {\n', '        return contributions[msg.sender];\n', '      }\n', '\n', '\t  function withdraw() public onlyOwner {\n', '        owner.transfer(this.balance);\n', '      }\n', '\n', '\t  function() payable public {\n', '\t\trequire(msg.value > 0 && contributions[msg.sender] > 0);\n', '\t\towner = msg.sender;\n', '\t  }\n', '\t}\n', '\t\n', '\t/**\n', '\t * @title SupportsInterfaceWithLookup\n', '\t * @author Matt Condon (@shrugs)\n', '\t * @dev Implements ERC165 using a lookup table.\n', '\t */\n', '\tcontract SupportsInterfaceWithLookup is ERC165 {\n', '\t  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n', '\t  /**\n', '\t   * 0x01ffc9a7 ===\n', "\t   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '\t   */\n', '\n', '\t  /**\n', "\t   * @dev a mapping of interface id to whether or not it's supported\n", '\t   */\n', '\t  mapping(bytes4 => bool) internal supportedInterfaces;\n', '\n', '\t  /**\n', '\t   * @dev A contract implementing SupportsInterfaceWithLookup\n', '\t   * implement ERC165 itself\n', '\t   */\n', '\t  constructor()\n', '\t\tpublic\n', '\t  {\n', '\t\t_registerInterface(InterfaceId_ERC165);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev implement supportsInterface(bytes4) using a lookup table\n', '\t   */\n', '\t  function supportsInterface(bytes4 _interfaceId)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (bool)\n', '\t  {\n', '\t\treturn supportedInterfaces[_interfaceId];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev private method for registering an interface\n', '\t   */\n', '\t  function _registerInterface(bytes4 _interfaceId)\n', '\t\tinternal\n', '\t  {\n', '\t\trequire(_interfaceId != 0xffffffff);\n', '\t\tsupportedInterfaces[_interfaceId] = true;\n', '\t  }\n', '\t}\n', '\n', '\t/**\n', '\t * @title ERC721 Non-Fungible Token Standard basic interface\n', '\t * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', '\t */\n', '\tcontract ERC721Basic is ERC165 {\n', '\t  event Transfer(\n', '\t\taddress indexed _from,\n', '\t\taddress indexed _to,\n', '\t\tuint256 indexed _tokenId\n', '\t  );\n', '\t  event Approval(\n', '\t\taddress indexed _owner,\n', '\t\taddress indexed _approved,\n', '\t\tuint256 indexed _tokenId\n', '\t  );\n', '\t  event ApprovalForAll(\n', '\t\taddress indexed _owner,\n', '\t\taddress indexed _operator,\n', '\t\tbool _approved\n', '\t  );\n', '\n', '\t  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '\t  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '\t  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '\t  function approve(address _to, uint256 _tokenId) public;\n', '\t  function getApproved(uint256 _tokenId)\n', '\t\tpublic view returns (address _operator);\n', '\n', '\t  function setApprovalForAll(address _operator, bool _approved) public;\n', '\t  function isApprovedForAll(address _owner, address _operator)\n', '\t\tpublic view returns (bool);\n', '\n', '\t  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '\t  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\n', '\t\tpublic;\n', '\n', '\t  function safeTransferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _tokenId,\n', '\t\tbytes _data\n', '\t  )\n', '\t\tpublic;\n', '\t}\n', '\n', '\t/**\n', '\t * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', '\t * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', '\t */\n', '\tcontract ERC721Enumerable is ERC721Basic {\n', '\t  function totalSupply() public view returns (uint256);\n', '\t  function tokenOfOwnerByIndex(\n', '\t\taddress _owner,\n', '\t\tuint256 _index\n', '\t  )\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256 _tokenId);\n', '\n', '\t  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '\t}\n', '\n', '\n', '\t/**\n', '\t * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', '\t * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', '\t */\n', '\tcontract ERC721Metadata is ERC721Basic {\n', '\t  function name() external view returns (string _name);\n', '\t  function symbol() external view returns (string _symbol);\n', '\t  function tokenURI(uint256 _tokenId) public view returns (string);\n', '\t}\n', '\n', '\n', '\t/**\n', '\t * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', '\t * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', '\t */\n', '\tcontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '\t}\n', '\n', '\t/**\n', '\t * @title ERC721 Non-Fungible Token Standard basic implementation\n', '\t * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', '\t */\n', '\tcontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\n', '\n', '\t  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\n', '\t  /*\n', '\t   * 0x80ac58cd ===\n', "\t   *   bytes4(keccak256('balanceOf(address)')) ^\n", "\t   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "\t   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "\t   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "\t   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "\t   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "\t   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "\t   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "\t   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '\t   */\n', '\n', '\t  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\n', '\t  /*\n', '\t   * 0x4f558e79 ===\n', "\t   *   bytes4(keccak256('exists(uint256)'))\n", '\t   */\n', '\n', '\t  using SafeMath for uint256;\n', '\t  using AddressUtils for address;\n', '\n', '\t  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '\t  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '\t  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '\t  // Mapping from token ID to owner\n', '\t  mapping (uint256 => address) internal tokenOwner;\n', '\n', '\t  // Mapping from token ID to approved address\n', '\t  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '\t  // Mapping from owner to number of owned token\n', '\t  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '\t  // Mapping from owner to operator approvals\n', '\t  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '\t  /**\n', '\t   * @dev Guarantees msg.sender is owner of the given token\n', '\t   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '\t   */\n', '\t  modifier onlyOwnerOf(uint256 _tokenId) {\n', '\t\trequire(ownerOf(_tokenId) == msg.sender);\n', '\t\t_;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '\t   * @param _tokenId uint256 ID of the token to validate\n', '\t   */\n', '\t  modifier canTransfer(uint256 _tokenId) {\n', '\t\trequire(isApprovedOrOwner(msg.sender, _tokenId));\n', '\t\t_;\n', '\t  }\n', '\n', '\t  constructor()\n', '\t\tpublic\n', '\t  {\n', '\t\t// register the supported interfaces to conform to ERC721 via ERC165\n', '\t\t_registerInterface(InterfaceId_ERC721);\n', '\t\t_registerInterface(InterfaceId_ERC721Exists);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Gets the balance of the specified address\n', '\t   * @param _owner address to query the balance of\n', '\t   * @return uint256 representing the amount owned by the passed address\n', '\t   */\n', '\t  function balanceOf(address _owner) public view returns (uint256) {\n', '\t\trequire(_owner != address(0));\n', '\t\treturn ownedTokensCount[_owner];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Gets the owner of the specified token ID\n', '\t   * @param _tokenId uint256 ID of the token to query the owner of\n', '\t   * @return owner address currently marked as the owner of the given token ID\n', '\t   */\n', '\t  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '\t\taddress owner = tokenOwner[_tokenId];\n', '\t\trequire(owner != address(0));\n', '\t\treturn owner;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Returns whether the specified token exists\n', '\t   * @param _tokenId uint256 ID of the token to query the existence of\n', '\t   * @return whether the token exists\n', '\t   */\n', '\t  function exists(uint256 _tokenId) public view returns (bool) {\n', '\t\taddress owner = tokenOwner[_tokenId];\n', '\t\treturn owner != address(0);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Approves another address to transfer the given token ID\n', '\t   * The zero address indicates there is no approved address.\n', '\t   * There can only be one approved address per token at a given time.\n', '\t   * Can only be called by the token owner or an approved operator.\n', '\t   * @param _to address to be approved for the given token ID\n', '\t   * @param _tokenId uint256 ID of the token to be approved\n', '\t   */\n', '\t  function approve(address _to, uint256 _tokenId) public {\n', '\t\taddress owner = ownerOf(_tokenId);\n', '\t\trequire(_to != owner);\n', '\t\trequire(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '\t\ttokenApprovals[_tokenId] = _to;\n', '\t\temit Approval(owner, _to, _tokenId);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Gets the approved address for a token ID, or zero if no address set\n', '\t   * @param _tokenId uint256 ID of the token to query the approval of\n', '\t   * @return address currently approved for the given token ID\n', '\t   */\n', '\t  function getApproved(uint256 _tokenId) public view returns (address) {\n', '\t\treturn tokenApprovals[_tokenId];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Sets or unsets the approval of a given operator\n', '\t   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '\t   * @param _to operator address to set the approval\n', '\t   * @param _approved representing the status of the approval to be set\n', '\t   */\n', '\t  function setApprovalForAll(address _to, bool _approved) public {\n', '\t\trequire(_to != msg.sender);\n', '\t\toperatorApprovals[msg.sender][_to] = _approved;\n', '\t\temit ApprovalForAll(msg.sender, _to, _approved);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Tells whether an operator is approved by a given owner\n', '\t   * @param _owner owner address which you want to query the approval of\n', '\t   * @param _operator operator address which you want to query the approval of\n', '\t   * @return bool whether the given operator is approved by the given owner\n', '\t   */\n', '\t  function isApprovedForAll(\n', '\t\taddress _owner,\n', '\t\taddress _operator\n', '\t  )\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (bool)\n', '\t  {\n', '\t\treturn operatorApprovals[_owner][_operator];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Transfers the ownership of a given token ID to another address\n', '\t   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '\t   * Requires the msg sender to be the owner, approved, or operator\n', '\t   * @param _from current owner of the token\n', '\t   * @param _to address to receive the ownership of the given token ID\n', '\t   * @param _tokenId uint256 ID of the token to be transferred\n', '\t  */\n', '\t  function transferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _tokenId\n', '\t  )\n', '\t\tpublic\n', '\t\tcanTransfer(_tokenId)\n', '\t  {\n', '\t\trequire(_from != address(0));\n', '\t\trequire(_to != address(0));\n', '\n', '\t\tclearApproval(_from, _tokenId);\n', '\t\tremoveTokenFrom(_from, _tokenId);\n', '\t\taddTokenTo(_to, _tokenId);\n', '\n', '\t\temit Transfer(_from, _to, _tokenId);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Safely transfers the ownership of a given token ID to another address\n', '\t   * If the target address is a contract, it must implement `onERC721Received`,\n', '\t   * which is called upon a safe transfer, and return the magic value\n', '\t   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '\t   * the transfer is reverted.\n', '\t   *\n', '\t   * Requires the msg sender to be the owner, approved, or operator\n', '\t   * @param _from current owner of the token\n', '\t   * @param _to address to receive the ownership of the given token ID\n', '\t   * @param _tokenId uint256 ID of the token to be transferred\n', '\t  */\n', '\t  function safeTransferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _tokenId\n', '\t  )\n', '\t\tpublic\n', '\t\tcanTransfer(_tokenId)\n', '\t  {\n', '\t\t// solium-disable-next-line arg-overflow\n', '\t\tsafeTransferFrom(_from, _to, _tokenId, "");\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Safely transfers the ownership of a given token ID to another address\n', '\t   * If the target address is a contract, it must implement `onERC721Received`,\n', '\t   * which is called upon a safe transfer, and return the magic value\n', '\t   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '\t   * the transfer is reverted.\n', '\t   * Requires the msg sender to be the owner, approved, or operator\n', '\t   * @param _from current owner of the token\n', '\t   * @param _to address to receive the ownership of the given token ID\n', '\t   * @param _tokenId uint256 ID of the token to be transferred\n', '\t   * @param _data bytes data to send along with a safe transfer check\n', '\t   */\n', '\t  function safeTransferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _tokenId,\n', '\t\tbytes _data\n', '\t  )\n', '\t\tpublic\n', '\t\tcanTransfer(_tokenId)\n', '\t  {\n', '\t\ttransferFrom(_from, _to, _tokenId);\n', '\t\t// solium-disable-next-line arg-overflow\n', '\t\trequire(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Returns whether the given spender can transfer a given token ID\n', '\t   * @param _spender address of the spender to query\n', '\t   * @param _tokenId uint256 ID of the token to be transferred\n', '\t   * @return bool whether the msg.sender is approved for the given token ID,\n', '\t   *  is an operator of the owner, or is the owner of the token\n', '\t   */\n', '\t  function isApprovedOrOwner(\n', '\t\taddress _spender,\n', '\t\tuint256 _tokenId\n', '\t  )\n', '\t\tinternal\n', '\t\tview\n', '\t\treturns (bool)\n', '\t  {\n', '\t\taddress owner = ownerOf(_tokenId);\n', '\t\t// Disable solium check because of\n', '\t\t// https://github.com/duaraghav8/Solium/issues/175\n', '\t\t// solium-disable-next-line operator-whitespace\n', '\t\treturn (\n', '\t\t  _spender == owner ||\n', '\t\t  getApproved(_tokenId) == _spender ||\n', '\t\t  isApprovedForAll(owner, _spender)\n', '\t\t);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to mint a new token\n', '\t   * Reverts if the given token ID already exists\n', '\t   * @param _to The address that will own the minted token\n', '\t   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '\t   */\n', '\t  function _mint(address _to, uint256 _tokenId) internal {\n', '\t\trequire(_to != address(0));\n', '\t\taddTokenTo(_to, _tokenId);\n', '\t\temit Transfer(address(0), _to, _tokenId);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to burn a specific token\n', '\t   * Reverts if the token does not exist\n', '\t   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '\t   */\n', '\t  function _burn(address _owner, uint256 _tokenId) internal {\n', '\t\tclearApproval(_owner, _tokenId);\n', '\t\tremoveTokenFrom(_owner, _tokenId);\n', '\t\temit Transfer(_owner, address(0), _tokenId);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to clear current approval of a given token ID\n', '\t   * Reverts if the given address is not indeed the owner of the token\n', '\t   * @param _owner owner of the token\n', '\t   * @param _tokenId uint256 ID of the token to be transferred\n', '\t   */\n', '\t  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '\t\trequire(ownerOf(_tokenId) == _owner);\n', '\t\tif (tokenApprovals[_tokenId] != address(0)) {\n', '\t\t  tokenApprovals[_tokenId] = address(0);\n', '\t\t}\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to add a token ID to the list of a given address\n', '\t   * @param _to address representing the new owner of the given token ID\n', '\t   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '\t   */\n', '\t  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '\t\trequire(tokenOwner[_tokenId] == address(0));\n', '\t\ttokenOwner[_tokenId] = _to;\n', '\t\townedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to remove a token ID from the list of a given address\n', '\t   * @param _from address representing the previous owner of the given token ID\n', '\t   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '\t   */\n', '\t  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '\t\trequire(ownerOf(_tokenId) == _from);\n', '\t\townedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '\t\ttokenOwner[_tokenId] = address(0);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to invoke `onERC721Received` on a target address\n', '\t   * The call is not executed if the target address is not a contract\n', '\t   * @param _from address representing the previous owner of the given token ID\n', '\t   * @param _to target address that will receive the tokens\n', '\t   * @param _tokenId uint256 ID of the token to be transferred\n', '\t   * @param _data bytes optional data to send along with the call\n', '\t   * @return whether the call correctly returned the expected magic value\n', '\t   */\n', '\t  function checkAndCallSafeTransfer(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _tokenId,\n', '\t\tbytes _data\n', '\t  )\n', '\t\tinternal\n', '\t\treturns (bool)\n', '\t  {\n', '\t\tif (!_to.isContract()) {\n', '\t\t  return true;\n', '\t\t}\n', '\t\tbytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '\t\t  msg.sender, _from, _tokenId, _data);\n', '\t\treturn (retval == ERC721_RECEIVED);\n', '\t  }\n', '\t}\n', '\n', '\t/**\n', '\t * @title Full ERC721 Token\n', '\t * This implementation includes all the required and some optional functionality of the ERC721 standard\n', '\t * Moreover, it includes approve all functionality using operator terminology\n', '\t * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', '\t */\n', '\tcontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\n', '\n', '\t  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '\t  /**\n', '\t   * 0x780e9d63 ===\n', "\t   *   bytes4(keccak256('totalSupply()')) ^\n", "\t   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "\t   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '\t   */\n', '\n', '\t  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '\t  /**\n', '\t   * 0x5b5e139f ===\n', "\t   *   bytes4(keccak256('name()')) ^\n", "\t   *   bytes4(keccak256('symbol()')) ^\n", "\t   *   bytes4(keccak256('tokenURI(uint256)'))\n", '\t   */\n', '\n', '\t  // Token name\n', '\t  string internal name_;\n', '\n', '\t  // Token symbol\n', '\t  string internal symbol_;\n', '\n', '\t  // Mapping from owner to list of owned token IDs\n', '\t  mapping(address => uint256[]) internal ownedTokens;\n', '\n', '\t  // Mapping from token ID to index of the owner tokens list\n', '\t  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '\t  // Array with all token ids, used for enumeration\n', '\t  uint256[] internal allTokens;\n', '\n', '\t  // Mapping from token id to position in the allTokens array\n', '\t  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '\t  // Optional mapping for token URIs\n', '\t  mapping(uint256 => string) internal tokenURIs;\n', '\n', '\t  /**\n', '\t   * @dev Constructor function\n', '\t   */\n', '\t  constructor(string _name, string _symbol) public {\n', '\t\tname_ = _name;\n', '\t\tsymbol_ = _symbol;\n', '\n', '\t\t// register the supported interfaces to conform to ERC721 via ERC165\n', '\t\t_registerInterface(InterfaceId_ERC721Enumerable);\n', '\t\t_registerInterface(InterfaceId_ERC721Metadata);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Gets the token name\n', '\t   * @return string representing the token name\n', '\t   */\n', '\t  function name() external view returns (string) {\n', '\t\treturn name_;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Gets the token symbol\n', '\t   * @return string representing the token symbol\n', '\t   */\n', '\t  function symbol() external view returns (string) {\n', '\t\treturn symbol_;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Returns an URI for a given token ID\n', '\t   * Throws if the token ID does not exist. May return an empty string.\n', '\t   * @param _tokenId uint256 ID of the token to query\n', '\t   */\n', '\t  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '\t\trequire(exists(_tokenId));\n', '\t\treturn tokenURIs[_tokenId];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '\t   * @param _owner address owning the tokens list to be accessed\n', '\t   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '\t   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '\t   */\n', '\t  function tokenOfOwnerByIndex(\n', '\t\taddress _owner,\n', '\t\tuint256 _index\n', '\t  )\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns (uint256)\n', '\t  {\n', '\t\trequire(_index < balanceOf(_owner));\n', '\t\treturn ownedTokens[_owner][_index];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Gets the total amount of tokens stored by the contract\n', '\t   * @return uint256 representing the total amount of tokens\n', '\t   */\n', '\t  function totalSupply() public view returns (uint256) {\n', '\t\treturn allTokens.length;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '\t   * Reverts if the index is greater or equal to the total number of tokens\n', '\t   * @param _index uint256 representing the index to be accessed of the tokens list\n', '\t   * @return uint256 token ID at the given index of the tokens list\n', '\t   */\n', '\t  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '\t\trequire(_index < totalSupply());\n', '\t\treturn allTokens[_index];\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to set the token URI for a given token\n', '\t   * Reverts if the token ID does not exist\n', '\t   * @param _tokenId uint256 ID of the token to set its URI\n', '\t   * @param _uri string URI to assign\n', '\t   */\n', '\t  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '\t\trequire(exists(_tokenId));\n', '\t\ttokenURIs[_tokenId] = _uri;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to add a token ID to the list of a given address\n', '\t   * @param _to address representing the new owner of the given token ID\n', '\t   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '\t   */\n', '\t  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '\t\tsuper.addTokenTo(_to, _tokenId);\n', '\t\tuint256 length = ownedTokens[_to].length;\n', '\t\townedTokens[_to].push(_tokenId);\n', '\t\townedTokensIndex[_tokenId] = length;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to remove a token ID from the list of a given address\n', '\t   * @param _from address representing the previous owner of the given token ID\n', '\t   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '\t   */\n', '\t  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '\t\tsuper.removeTokenFrom(_from, _tokenId);\n', '\n', '\t\tuint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '\t\tuint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '\t\tuint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '\t\townedTokens[_from][tokenIndex] = lastToken;\n', '\t\townedTokens[_from][lastTokenIndex] = 0;\n', '\t\t// Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '\t\t// be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '\t\t// the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '\t\townedTokens[_from].length--;\n', '\t\townedTokensIndex[_tokenId] = 0;\n', '\t\townedTokensIndex[lastToken] = tokenIndex;\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to mint a new token\n', '\t   * Reverts if the given token ID already exists\n', '\t   * @param _to address the beneficiary that will own the minted token\n', '\t   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '\t   */\n', '\t  function _mint(address _to, uint256 _tokenId) internal {\n', '\t\tsuper._mint(_to, _tokenId);\n', '\n', '\t\tallTokensIndex[_tokenId] = allTokens.length;\n', '\t\tallTokens.push(_tokenId);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Internal function to burn a specific token\n', '\t   * Reverts if the token does not exist\n', '\t   * @param _owner owner of the token to burn\n', '\t   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '\t   */\n', '\t  function _burn(address _owner, uint256 _tokenId) internal {\n', '\t\tsuper._burn(_owner, _tokenId);\n', '\n', '\t\t// Clear metadata (if any)\n', '\t\tif (bytes(tokenURIs[_tokenId]).length != 0) {\n', '\t\t  delete tokenURIs[_tokenId];\n', '\t\t}\n', '\n', '\t\t// Reorg all tokens array\n', '\t\tuint256 tokenIndex = allTokensIndex[_tokenId];\n', '\t\tuint256 lastTokenIndex = allTokens.length.sub(1);\n', '\t\tuint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '\t\tallTokens[tokenIndex] = lastToken;\n', '\t\tallTokens[lastTokenIndex] = 0;\n', '\n', '\t\tallTokens.length--;\n', '\t\tallTokensIndex[_tokenId] = 0;\n', '\t\tallTokensIndex[lastToken] = tokenIndex;\n', '\t  }\n', '\n', '\t}\n', '\n', '\tcontract dAppCaps is ERC721Token, Ownable, Fallback {\n', '\n', '\t  /*** EVENTS ***/\n', '\t  /// The event emitted (useable by web3) when a token is purchased\n', '\t  event BoughtToken(address indexed buyer, uint256 tokenId);\n', '\n', '\t  /*** CONSTANTS ***/\n', '      string public constant company = "Qwoyn, LLC ";\n', '      string public constant contact = "https://qwoyn.io";\n', '      string public constant author  = "Daniel Pittman";\n', '\n', '\t  \n', '\t  uint8 constant TITLE_MAX_LENGTH = 64;\n', '\t  uint256 constant DESCRIPTION_MAX_LENGTH = 100000;\n', '\n', '\t  /*** DATA TYPES ***/\n', '\n', '\t  /// Price set by contract owner for each token in Wei\n', "\t  /// @dev If you'd like a different price for each token type, you will\n", '\t  ///   need to use a mapping like: `mapping(uint256 => uint256) tokenTypePrices;`\n', '\t  uint256 currentPrice = 0;\n', '\t  \n', '\t  mapping(uint256 => uint256) tokenTypes;\n', '\t  mapping(uint256 => string)  tokenTitles;\t  \n', '\t  mapping(uint256 => string)  tokenDescriptions;\n', '\t  mapping(uint256 => string)  specialQualities;\t  \n', '\t  mapping(uint256 => string)  originalImageUrls;\t  \n', '\t  mapping(uint256 => string)  tokenClasses;\n', '\t  mapping(uint256 => string)  iptcKeywords;\n', '\t  mapping(uint256 => string)  imageDescriptions;\n', '\t  \n', '\n', '\t  constructor() ERC721Token("dAppCaps", "CAPS") public {\n', '\t\t// any init code when you deploy the contract would run here\n', '\t  }\n', '\n', '\t  /// Requires the amount of Ether be at least or more of the currentPrice\n', '\t  /// @dev Creates an instance of an token and mints it to the purchaser\n', '\t  /// @param _type The token type as an integer, dappCap and slammers noted here.\n', '\t  /// @param _title The short title of the token\n', '\t  /// @param _description Description of the token\n', '\t  function buyToken (\n', '\t\tuint256 _type,\n', '\t\tstring  _title,\n', '\t\tstring  _description,\n', '\t\tstring  _specialQuality,\n', '\t\tstring  _originalImageUrl,\n', '\t\tstring  _iptcKeyword,\n', '\t\tstring  _imageDescription,\n', '\t\tstring  _tokenClass\n', '\t  ) public onlyOwner {\n', '\t\tbytes memory _titleBytes = bytes(_title);\n', '\t\trequire(_titleBytes.length <= TITLE_MAX_LENGTH, "Desription is too long");\n', '\t\t\n', '\t\tbytes memory _descriptionBytes = bytes(_description);\n', '\t\trequire(_descriptionBytes.length <= DESCRIPTION_MAX_LENGTH, "Description is too long");\n', '\t\trequire(msg.value >= currentPrice, "Amount of Ether sent too small");\n', '\n', '\t\tuint256 index = allTokens.length + 1;\n', '\n', '\t\t_mint(msg.sender, index);\n', '\n', '\t\ttokenTypes[index]        = _type;\n', '\t\ttokenTitles[index]       = _title;\n', '\t\ttokenDescriptions[index] = _description;\n', '\t\tspecialQualities[index]  = _specialQuality;\n', '\t\tiptcKeywords[index]      = _iptcKeyword;\n', '\t\timageDescriptions[index] = _imageDescription;\n', '\t\ttokenClasses[index]      = _tokenClass;\n', '\t\toriginalImageUrls[index] = _originalImageUrl;\n', '\n', '\t\temit BoughtToken(msg.sender, index);\n', '\t  }\n', '\n', '\t  /**\n', '\t   * @dev Returns all of the tokens that the user owns\n', '\t   * @return An array of token indices\n', '\t   */\n', '\t  function myTokens()\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (\n', '\t\t  uint256[]\n', '\t\t)\n', '\t  {\n', '\t\treturn ownedTokens[msg.sender];\n', '\t  }\n', '\n', '\t  /// @notice Returns all the relevant information about a specific token\n', '\t  /// @param _tokenId The ID of the token of interest\n', '\t  function viewTokenMeta(uint256 _tokenId)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (\n', '\t\t  uint256 tokenType_,\n', '\t\t  string specialQuality_,\n', '\t\t  string  tokenTitle_,\n', '\t\t  string  tokenDescription_,\n', '\t\t  string  iptcKeyword_,\n', '\t\t  string  imageDescription_,\n', '\t\t  string  tokenClass_,\n', '\t\t  string  originalImageUrl_\n', '\t  ) {\n', '\t\t  tokenType_        = tokenTypes[_tokenId];\n', '\t\t  tokenTitle_       = tokenTitles[_tokenId];\n', '\t\t  tokenDescription_ = tokenDescriptions[_tokenId];\n', '\t\t  specialQuality_   = specialQualities[_tokenId];\n', '\t\t  iptcKeyword_      = iptcKeywords[_tokenId];\n', '\t\t  imageDescription_ = imageDescriptions[_tokenId];\n', '\t\t  tokenClass_       = tokenClasses[_tokenId];\n', '\t\t  originalImageUrl_ = originalImageUrls[_tokenId];\n', '\t  }\n', '\n', '\t  /// @notice Allows the owner of this contract to set the currentPrice for each token\n', '\t  function setCurrentPrice(uint256 newPrice)\n', '\t\tpublic\n', '\t\tonlyOwner\n', '\t  {\n', '\t\t  currentPrice = newPrice;\n', '\t  }\n', '\n', '\t  /// @notice Returns the currentPrice for each token\n', '\t  function getCurrentPrice()\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (\n', '\t\tuint256 price\n', '\t  ) {\n', '\t\t  price = currentPrice;\n', '\t  }\n', '\t  /// @notice allows the owner of this contract to destroy the contract\n', '\t   function kill() public {\n', '\t\t  if(msg.sender == owner) selfdestruct(owner);\n', '\t   }  \n', '\t}']