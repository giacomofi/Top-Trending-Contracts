['pragma solidity 0.4.18;\n', '\n', '/// @title Math library - Allows calculation of logarithmic and exponential functions\n', '/// @author Alan Lu - <<span class="__cf_email__" data-cfemail="fc9d909d92d29089bc9b92938f958fd28c91">[email&#160;protected]</span>>\n', '/// @author Stefan George - <<span class="__cf_email__" data-cfemail="4132352427202f01262f2e3228326f312c">[email&#160;protected]</span>>\n', 'library Math {\n', '\n', '    /*\n', '     *  Constants\n', '     */\n', '    // This is equal to 1 in our calculations\n', '    uint public constant ONE =  0x10000000000000000;\n', '    uint public constant LN2 = 0xb17217f7d1cf79ac;\n', '    uint public constant LOG2_E = 0x171547652b82fe177;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Returns natural exponential function value of given x\n', '    /// @param x x\n', '    /// @return e**x\n', '    function exp(int x)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        // revert if x is > MAX_POWER, where\n', '        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))\n', '        require(x <= 2454971259878909886679);\n', '        // return 0 if exp(x) is tiny, using\n', '        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))\n', '        if (x < -818323753292969962227)\n', '            return 0;\n', '        // Transform so that e^x -> 2^x\n', '        x = x * int(ONE) / int(LN2);\n', '        // 2^x = 2^whole(x) * 2^frac(x)\n', '        //       ^^^^^^^^^^ is a bit shift\n', '        // so Taylor expand on z = frac(x)\n', '        int shift;\n', '        uint z;\n', '        if (x >= 0) {\n', '            shift = x / int(ONE);\n', '            z = uint(x % int(ONE));\n', '        }\n', '        else {\n', '            shift = x / int(ONE) - 1;\n', '            z = ONE - uint(-x % int(ONE));\n', '        }\n', '        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...\n', '        //\n', '        // Can generate the z coefficients using mpmath and the following lines\n', '        // >>> from mpmath import mp\n', '        // >>> mp.dps = 100\n', '        // >>> ONE =  0x10000000000000000\n', '        // >>> print(&#39;\\n&#39;.join(hex(int(mp.log(2)**i / mp.factorial(i) * ONE)) for i in range(1, 7)))\n', '        // 0xb17217f7d1cf79ab\n', '        // 0x3d7f7bff058b1d50\n', '        // 0xe35846b82505fc5\n', '        // 0x276556df749cee5\n', '        // 0x5761ff9e299cc4\n', '        // 0xa184897c363c3\n', '        uint zpow = z;\n', '        uint result = ONE;\n', '        result += 0xb17217f7d1cf79ab * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x3d7f7bff058b1d50 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xe35846b82505fc5 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x276556df749cee5 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x5761ff9e299cc4 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xa184897c363c3 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xffe5fe2c4586 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x162c0223a5c8 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1b5253d395e * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1e4cf5158b * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1e8cac735 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1c3bd650 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1816193 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x131496 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xe1b7 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x9c7 * zpow / ONE;\n', '        if (shift >= 0) {\n', '            if (result >> (256-shift) > 0)\n', '                return (2**256-1);\n', '            return result << shift;\n', '        }\n', '        else\n', '            return result >> (-shift);\n', '    }\n', '\n', '    /// @dev Returns natural logarithm value of given x\n', '    /// @param x x\n', '    /// @return ln(x)\n', '    function ln(uint x)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(x > 0);\n', '        // binary search for floor(log2(x))\n', '        int ilog2 = floorLog2(x);\n', '        int z;\n', '        if (ilog2 < 0)\n', '            z = int(x << uint(-ilog2));\n', '        else\n', '            z = int(x >> uint(ilog2));\n', '        // z = x * 2^-⌊log₂x⌋\n', '        // so 1 <= z < 2\n', '        // and ln z = ln x - ⌊log₂x⌋/log₂e\n', '        // so just compute ln z using artanh series\n', '        // and calculate ln x from that\n', '        int term = (z - int(ONE)) * int(ONE) / (z + int(ONE));\n', '        int halflnz = term;\n', '        int termpow = term * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 3;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 5;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 7;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 9;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 11;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 13;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 15;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 17;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 19;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 21;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 23;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 25;\n', '        return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;\n', '    }\n', '\n', '    /// @dev Returns base 2 logarithm value of given x\n', '    /// @param x x\n', '    /// @return logarithmic value\n', '    function floorLog2(uint x)\n', '        public\n', '        constant\n', '        returns (int lo)\n', '    {\n', '        lo = -64;\n', '        int hi = 193;\n', '        // I use a shift here instead of / 2 because it floors instead of rounding towards 0\n', '        int mid = (hi + lo) >> 1;\n', '        while((lo + 1) < hi) {\n', '            if (mid < 0 && x << uint(-mid) < ONE || mid >= 0 && x >> uint(mid) < ONE)\n', '                hi = mid;\n', '            else\n', '                lo = mid;\n', '            mid = (hi + lo) >> 1;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns maximum of an array\n', '    /// @param nums Numbers to look through\n', '    /// @return Maximum number\n', '    function max(int[] nums)\n', '        public\n', '        constant\n', '        returns (int max)\n', '    {\n', '        require(nums.length > 0);\n', '        max = -2**255;\n', '        for (uint i = 0; i < nums.length; i++)\n', '            if (nums[i] > max)\n', '                max = nums[i];\n', '    }\n', '\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a + b >= a;\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a >= b;\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return b == 0 || a * b / b == a;\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(int a, int b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return (b >= 0 && a + b >= a) || (b < 0 && a + b < a);\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(int a, int b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return (b >= 0 && a - b <= a) || (b < 0 && a - b > a);\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(int a, int b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return (b == 0) || (a * b / b == a);\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(int a, int b)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(int a, int b)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(int a, int b)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '}\n', '\n', '/// @title Abstract token contract - Functions to be implemented by token contracts\n', 'contract Token {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    function transfer(address to, uint value) public returns (bool);\n', '    function transferFrom(address from, address to, uint value) public returns (bool);\n', '    function approve(address spender, uint value) public returns (bool);\n', '    function balanceOf(address owner) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function totalSupply() public constant returns (uint);\n', '}\n', '\n', '\n', '/// @title Standard token contract with overflow protection\n', 'contract StandardToken is Token {\n', '    using Math for *;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowances;\n', '    uint totalTokens;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success\n', '    /// @param to Address of token receiver\n', '    /// @param value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '    function transfer(address to, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (   !balances[msg.sender].safeToSub(value)\n', '            || !balances[to].safeToAdd(value))\n', '            return false;\n', '        balances[msg.sender] -= value;\n', '        balances[to] += value;\n', '        Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n', '    /// @param from Address from where tokens are withdrawn\n', '    /// @param to Address to where tokens are sent\n', '    /// @param value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '    function transferFrom(address from, address to, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (   !balances[from].safeToSub(value)\n', '            || !allowances[from][msg.sender].safeToSub(value)\n', '            || !balances[to].safeToAdd(value))\n', '            return false;\n', '        balances[from] -= value;\n', '        allowances[from][msg.sender] -= value;\n', '        balances[to] += value;\n', '        Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success\n', '    /// @param spender Address of allowed account\n', '    /// @param value Number of approved tokens\n', '    /// @return Was approval successful?\n', '    function approve(address spender, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowances[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns number of allowed tokens for given address\n', '    /// @param owner Address of token owner\n', '    /// @param spender Address of token spender\n', '    /// @return Remaining allowance for spender\n', '    function allowance(address owner, address spender)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address\n', '    /// @param owner Address of token owner\n', '    /// @return Balance of owner\n', '    function balanceOf(address owner)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return balances[owner];\n', '    }\n', '\n', '    /// @dev Returns total supply of tokens\n', '    /// @return Total supply\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return totalTokens;\n', '    }\n', '}\n', '\n', 'contract PlayToken is StandardToken {\n', '    /*\n', '     *  Events\n', '     */\n', '    event Issuance(address indexed owner, uint amount);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    /*\n', '     *  Storage\n', '     */\n', '    address public creator;\n', '    mapping (address => bool) public whitelist;\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier isCreator { require(msg.sender == creator); _; }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Constructor sets events contract address\n', '    function PlayToken()\n', '        public\n', '    {\n', '        creator = msg.sender;\n', '    }\n', '\n', '    /// @dev Allows creator to issue tokens. Will reject if msg.sender isn&#39;t the creator.\n', '    /// @param recipients Addresses of recipients\n', '    /// @param amount Number of tokens to issue each recipient\n', '    function issue(address[] recipients, uint amount)\n', '        public\n', '        isCreator\n', '    {\n', '        for(uint i = 0; i < recipients.length; i++) {\n', '            address recipient = recipients[i];\n', '            balances[recipient] = balances[recipient].add(amount);\n', '            Issuance(recipient, amount);\n', '            Transfer(address(0), recipient, amount);\n', '        }\n', '        totalTokens = totalTokens.add(amount.mul(recipients.length));\n', '    }\n', '\n', '    /// @dev Allows creator to mark addresses as whitelisted for transfers to and from those addresses.\n', '    /// @param allowed Addresses to be added to the whitelist\n', '    function allowTransfers(address[] allowed)\n', '        public\n', '        isCreator\n', '    {\n', '        for(uint i = 0; i < allowed.length; i++) {\n', '            whitelist[allowed[i]] = true;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows creator to remove addresses from being whitelisted for transfers to and from those addresses.\n', '    /// @param disallowed Addresses to be removed from the whitelist\n', '    function disallowTransfers(address[] disallowed)\n', '        public\n', '        isCreator\n', '    {\n', '        for(uint i = 0; i < disallowed.length; i++) {\n', '            whitelist[disallowed[i]] = false;\n', '        }\n', '    }\n', '    \n', '    function transferOwnership(address newOwner)\n', '        public\n', '        isCreator\n', '    {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(creator, newOwner);\n', '        creator = newOwner;\n', '    }\n', '\n', '    function transfer(address to, uint value) public returns (bool) {\n', '        require(whitelist[msg.sender] || whitelist[to]);\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) public returns (bool) {\n', '        require(whitelist[from] || whitelist[to]);\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function emergencyERC20Drain( ERC20Interface token, uint amount ){\n', '      // callable by anyone\n', '      address noah = 0xb9E29984Fe50602E7A619662EBED4F90D93824C7;\n', '      token.transfer( noah, amount );\n', '    }\n', '    \n', '    function burn(uint256 _value) public {\n', '      require(_value <= balances[msg.sender]);\n', '\n', '      address burner = msg.sender;\n', '      balances[burner] = balances[burner].sub(_value);\n', '      totalTokens = totalTokens.sub(_value);\n', '      Burn(burner, _value);\n', '      Transfer(burner, address(0), _value);\n', '    }\n', '\n', '}\n', '\n', 'contract TokenFansToken is PlayToken {\n', '    /*\n', '     *  Constants\n', '     */\n', '    string public constant name = "TokenFans Token";\n', '    string public constant symbol = "TFT";\n', '    uint8 public constant decimals = 0;\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool){}\n', '  function transfer(address _to, uint _value) returns (bool){}\n', '  function ERC20Interface(){}\n', '}']
['pragma solidity 0.4.18;\n', '\n', '/// @title Math library - Allows calculation of logarithmic and exponential functions\n', '/// @author Alan Lu - <alan.lu@gnosis.pm>\n', '/// @author Stefan George - <stefan@gnosis.pm>\n', 'library Math {\n', '\n', '    /*\n', '     *  Constants\n', '     */\n', '    // This is equal to 1 in our calculations\n', '    uint public constant ONE =  0x10000000000000000;\n', '    uint public constant LN2 = 0xb17217f7d1cf79ac;\n', '    uint public constant LOG2_E = 0x171547652b82fe177;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Returns natural exponential function value of given x\n', '    /// @param x x\n', '    /// @return e**x\n', '    function exp(int x)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        // revert if x is > MAX_POWER, where\n', '        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))\n', '        require(x <= 2454971259878909886679);\n', '        // return 0 if exp(x) is tiny, using\n', '        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))\n', '        if (x < -818323753292969962227)\n', '            return 0;\n', '        // Transform so that e^x -> 2^x\n', '        x = x * int(ONE) / int(LN2);\n', '        // 2^x = 2^whole(x) * 2^frac(x)\n', '        //       ^^^^^^^^^^ is a bit shift\n', '        // so Taylor expand on z = frac(x)\n', '        int shift;\n', '        uint z;\n', '        if (x >= 0) {\n', '            shift = x / int(ONE);\n', '            z = uint(x % int(ONE));\n', '        }\n', '        else {\n', '            shift = x / int(ONE) - 1;\n', '            z = ONE - uint(-x % int(ONE));\n', '        }\n', '        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...\n', '        //\n', '        // Can generate the z coefficients using mpmath and the following lines\n', '        // >>> from mpmath import mp\n', '        // >>> mp.dps = 100\n', '        // >>> ONE =  0x10000000000000000\n', "        // >>> print('\\n'.join(hex(int(mp.log(2)**i / mp.factorial(i) * ONE)) for i in range(1, 7)))\n", '        // 0xb17217f7d1cf79ab\n', '        // 0x3d7f7bff058b1d50\n', '        // 0xe35846b82505fc5\n', '        // 0x276556df749cee5\n', '        // 0x5761ff9e299cc4\n', '        // 0xa184897c363c3\n', '        uint zpow = z;\n', '        uint result = ONE;\n', '        result += 0xb17217f7d1cf79ab * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x3d7f7bff058b1d50 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xe35846b82505fc5 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x276556df749cee5 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x5761ff9e299cc4 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xa184897c363c3 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xffe5fe2c4586 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x162c0223a5c8 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1b5253d395e * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1e4cf5158b * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1e8cac735 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1c3bd650 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1816193 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x131496 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xe1b7 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x9c7 * zpow / ONE;\n', '        if (shift >= 0) {\n', '            if (result >> (256-shift) > 0)\n', '                return (2**256-1);\n', '            return result << shift;\n', '        }\n', '        else\n', '            return result >> (-shift);\n', '    }\n', '\n', '    /// @dev Returns natural logarithm value of given x\n', '    /// @param x x\n', '    /// @return ln(x)\n', '    function ln(uint x)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(x > 0);\n', '        // binary search for floor(log2(x))\n', '        int ilog2 = floorLog2(x);\n', '        int z;\n', '        if (ilog2 < 0)\n', '            z = int(x << uint(-ilog2));\n', '        else\n', '            z = int(x >> uint(ilog2));\n', '        // z = x * 2^-⌊log₂x⌋\n', '        // so 1 <= z < 2\n', '        // and ln z = ln x - ⌊log₂x⌋/log₂e\n', '        // so just compute ln z using artanh series\n', '        // and calculate ln x from that\n', '        int term = (z - int(ONE)) * int(ONE) / (z + int(ONE));\n', '        int halflnz = term;\n', '        int termpow = term * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 3;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 5;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 7;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 9;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 11;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 13;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 15;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 17;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 19;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 21;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 23;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 25;\n', '        return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;\n', '    }\n', '\n', '    /// @dev Returns base 2 logarithm value of given x\n', '    /// @param x x\n', '    /// @return logarithmic value\n', '    function floorLog2(uint x)\n', '        public\n', '        constant\n', '        returns (int lo)\n', '    {\n', '        lo = -64;\n', '        int hi = 193;\n', '        // I use a shift here instead of / 2 because it floors instead of rounding towards 0\n', '        int mid = (hi + lo) >> 1;\n', '        while((lo + 1) < hi) {\n', '            if (mid < 0 && x << uint(-mid) < ONE || mid >= 0 && x >> uint(mid) < ONE)\n', '                hi = mid;\n', '            else\n', '                lo = mid;\n', '            mid = (hi + lo) >> 1;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns maximum of an array\n', '    /// @param nums Numbers to look through\n', '    /// @return Maximum number\n', '    function max(int[] nums)\n', '        public\n', '        constant\n', '        returns (int max)\n', '    {\n', '        require(nums.length > 0);\n', '        max = -2**255;\n', '        for (uint i = 0; i < nums.length; i++)\n', '            if (nums[i] > max)\n', '                max = nums[i];\n', '    }\n', '\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a + b >= a;\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a >= b;\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return b == 0 || a * b / b == a;\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(int a, int b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return (b >= 0 && a + b >= a) || (b < 0 && a + b < a);\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(int a, int b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return (b >= 0 && a - b <= a) || (b < 0 && a - b > a);\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(int a, int b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return (b == 0) || (a * b / b == a);\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(int a, int b)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(int a, int b)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(int a, int b)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '}\n', '\n', '/// @title Abstract token contract - Functions to be implemented by token contracts\n', 'contract Token {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    function transfer(address to, uint value) public returns (bool);\n', '    function transferFrom(address from, address to, uint value) public returns (bool);\n', '    function approve(address spender, uint value) public returns (bool);\n', '    function balanceOf(address owner) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function totalSupply() public constant returns (uint);\n', '}\n', '\n', '\n', '/// @title Standard token contract with overflow protection\n', 'contract StandardToken is Token {\n', '    using Math for *;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowances;\n', '    uint totalTokens;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', "    /// @dev Transfers sender's tokens to a given address. Returns success\n", '    /// @param to Address of token receiver\n', '    /// @param value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '    function transfer(address to, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (   !balances[msg.sender].safeToSub(value)\n', '            || !balances[to].safeToAdd(value))\n', '            return false;\n', '        balances[msg.sender] -= value;\n', '        balances[to] += value;\n', '        Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n', '    /// @param from Address from where tokens are withdrawn\n', '    /// @param to Address to where tokens are sent\n', '    /// @param value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '    function transferFrom(address from, address to, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (   !balances[from].safeToSub(value)\n', '            || !allowances[from][msg.sender].safeToSub(value)\n', '            || !balances[to].safeToAdd(value))\n', '            return false;\n', '        balances[from] -= value;\n', '        allowances[from][msg.sender] -= value;\n', '        balances[to] += value;\n', '        Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success\n', '    /// @param spender Address of allowed account\n', '    /// @param value Number of approved tokens\n', '    /// @return Was approval successful?\n', '    function approve(address spender, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowances[msg.sender][spender] = value;\n', '        Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns number of allowed tokens for given address\n', '    /// @param owner Address of token owner\n', '    /// @param spender Address of token spender\n', '    /// @return Remaining allowance for spender\n', '    function allowance(address owner, address spender)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address\n', '    /// @param owner Address of token owner\n', '    /// @return Balance of owner\n', '    function balanceOf(address owner)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return balances[owner];\n', '    }\n', '\n', '    /// @dev Returns total supply of tokens\n', '    /// @return Total supply\n', '    function totalSupply()\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        return totalTokens;\n', '    }\n', '}\n', '\n', 'contract PlayToken is StandardToken {\n', '    /*\n', '     *  Events\n', '     */\n', '    event Issuance(address indexed owner, uint amount);\n', '    event Burn(address indexed burner, uint256 value);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    \n', '    /*\n', '     *  Storage\n', '     */\n', '    address public creator;\n', '    mapping (address => bool) public whitelist;\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier isCreator { require(msg.sender == creator); _; }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Constructor sets events contract address\n', '    function PlayToken()\n', '        public\n', '    {\n', '        creator = msg.sender;\n', '    }\n', '\n', "    /// @dev Allows creator to issue tokens. Will reject if msg.sender isn't the creator.\n", '    /// @param recipients Addresses of recipients\n', '    /// @param amount Number of tokens to issue each recipient\n', '    function issue(address[] recipients, uint amount)\n', '        public\n', '        isCreator\n', '    {\n', '        for(uint i = 0; i < recipients.length; i++) {\n', '            address recipient = recipients[i];\n', '            balances[recipient] = balances[recipient].add(amount);\n', '            Issuance(recipient, amount);\n', '            Transfer(address(0), recipient, amount);\n', '        }\n', '        totalTokens = totalTokens.add(amount.mul(recipients.length));\n', '    }\n', '\n', '    /// @dev Allows creator to mark addresses as whitelisted for transfers to and from those addresses.\n', '    /// @param allowed Addresses to be added to the whitelist\n', '    function allowTransfers(address[] allowed)\n', '        public\n', '        isCreator\n', '    {\n', '        for(uint i = 0; i < allowed.length; i++) {\n', '            whitelist[allowed[i]] = true;\n', '        }\n', '    }\n', '\n', '    /// @dev Allows creator to remove addresses from being whitelisted for transfers to and from those addresses.\n', '    /// @param disallowed Addresses to be removed from the whitelist\n', '    function disallowTransfers(address[] disallowed)\n', '        public\n', '        isCreator\n', '    {\n', '        for(uint i = 0; i < disallowed.length; i++) {\n', '            whitelist[disallowed[i]] = false;\n', '        }\n', '    }\n', '    \n', '    function transferOwnership(address newOwner)\n', '        public\n', '        isCreator\n', '    {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(creator, newOwner);\n', '        creator = newOwner;\n', '    }\n', '\n', '    function transfer(address to, uint value) public returns (bool) {\n', '        require(whitelist[msg.sender] || whitelist[to]);\n', '        return super.transfer(to, value);\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint value) public returns (bool) {\n', '        require(whitelist[from] || whitelist[to]);\n', '        return super.transferFrom(from, to, value);\n', '    }\n', '\n', '    function emergencyERC20Drain( ERC20Interface token, uint amount ){\n', '      // callable by anyone\n', '      address noah = 0xb9E29984Fe50602E7A619662EBED4F90D93824C7;\n', '      token.transfer( noah, amount );\n', '    }\n', '    \n', '    function burn(uint256 _value) public {\n', '      require(_value <= balances[msg.sender]);\n', '\n', '      address burner = msg.sender;\n', '      balances[burner] = balances[burner].sub(_value);\n', '      totalTokens = totalTokens.sub(_value);\n', '      Burn(burner, _value);\n', '      Transfer(burner, address(0), _value);\n', '    }\n', '\n', '}\n', '\n', 'contract TokenFansToken is PlayToken {\n', '    /*\n', '     *  Constants\n', '     */\n', '    string public constant name = "TokenFans Token";\n', '    string public constant symbol = "TFT";\n', '    uint8 public constant decimals = 0;\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function transferFrom(address _from, address _to, uint _value) returns (bool){}\n', '  function transfer(address _to, uint _value) returns (bool){}\n', '  function ERC20Interface(){}\n', '}']
