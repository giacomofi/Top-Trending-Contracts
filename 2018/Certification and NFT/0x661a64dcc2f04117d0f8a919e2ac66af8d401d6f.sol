['pragma solidity 0.4.25;\n', '\n', '/*===========================================================================================*\n', '*************************************** https://p4d.io ***************************************\n', '*============================================================================================*\n', '*                                                             \n', '*     ,-.----.           ,--,              \n', "*     \\    /  \\        ,--.'|    ,---,     \n", "*     |   :    \\    ,--,  | :  .'  .' `\\          ____                            __      \n", "*     |   |  .\\ :,---.'|  : ',---.'     \\        / __ \\________  ________  ____  / /______\n", '*     .   :  |: |;   : |  | ;|   |  .`\\  |      / /_/ / ___/ _ \\/ ___/ _ \\/ __ \\/ __/ ___/\n', "*     |   |   \\ :|   | : _' |:   : |  '  |     / ____/ /  /  __(__  )  __/ / / / /_(__  ) \n", "*     |   : .   /:   : |.'  ||   ' '  ;  :    /_/   /_/___\\\\\\_/____/\\_\\\\/_\\_/_/\\__/____/  \n", "*     ;   | |`-' |   ' '  ; :'   | ;  .  |            /_  __/___      \\ \\/ /___  __  __   \n", "*     |   | ;    \\   \\  .'. ||   | :  |  '             / / / __ \\      \\  / __ \\/ / / /   \n", "*     :   ' |     `---`:  | ''   : | /  ;             / / / /_/ /      / / /_/ / /_/ /    \n", "*     :   : :          '  ; ||   | '` ,/             /_/  \\____/      /_/\\____/\\__,_/     \n", "*     |   | :          |  : ;;   :  .'     \n", "*     `---'.|          '  ,/ |   ,.'       \n", "*       `---`          '--'  '---'         \n", '*                 _______                             _                      \n', '*                (_______)                   _       | |                 _   \n', '*                 _        ____ _   _ ____ _| |_ ___ | |__  _   _ ____ _| |_ \n', '*                | |      / ___) | | |  _ (_   _) _ \\|  _ \\| | | |  _ (_   _)\n', '*                | |_____| |   | |_| | |_| || || |_| | | | | |_| | | | || |_ \n', '*                 \\______)_|    \\__  |  __/  \\__)___/|_| |_|____/|_| |_| \\__)\n', '*                              (____/|_|                                     \n', '*                                            _.--.\n', "*                                        _.-'_:-'||\n", "*                                    _.-'_.-::::'||\n", "*                               _.-:'_.-::::::'  ||\n", "*                             .'`-.-:::::::'     ||\n", "*                            /.'`;|:::::::'      ||_\n", "*                           ||   ||::::::'     _.;._'-._\n", "*                           ||   ||:::::'  _.-!oo @.!-._'-.\n", "*                           \\'.  ||:::::.-!()oo @!()@.-'_.|\n", "*                            '.'-;|:.-'.&$@.& ()$%-'o.'\\U||\n", "*                              `>'-.!@%()@'@_%-'_.-o _.|'||\n", "*                               ||-._'-.@.-'_.-' _.-o  |'||\n", "*                               ||=[ '-._.-\\U/.-'    o |'||\n", "*                               || '-.]=|| |'|      o  |'||\n", "*                               ||      || |'|        _| ';\n", "*                               ||      || |'|    _.-'_.-'\n", "*                               |'-._   || |'|_.-'_.-'\n", "*                                '-._'-.|| |' `_.-'\n", "*                                    '-.||_/.-'\n", '*                        _       __ _     _     _ _          ___       \n', '*                       /_\\     /__(_) __| | __| | | ___    / __\\_   _ \n', '*                      //_\\\\   / \\// |/ _` |/ _` | |/ _ \\  /__\\// | | |\n', '*                     /  _  \\ / _  \\ | (_| | (_| | |  __/ / \\/  \\ |_| |\n', '*                     \\_/ \\_/ \\/ \\_/_|\\__,_|\\__,_|_|\\___| \\_____/\\__, |\n', '*                                   ╔═╗╔═╗╦      ╔╦╗╔═╗╦  ╦      |___/ \n', '*                                   ╚═╗║ ║║       ║║║╣ ╚╗╔╝\n', '*                                   ╚═╝╚═╝╩═╝────═╩╝╚═╝ ╚╝ \n', '*                                      0x736f6c5f646576\n', '*                                      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\n', '*                                                \n', '*/\n', '\n', '/*=============================================================================*\n', '************************************ What? *************************************\n', '*==============================================================================*\n', '\n', 'Right now you are wondering what is this token,\n', "and why you can't transfer it, so it must be broken!\n", '\n', 'To remove this token, one must be wise,\n', 'and solve all the riddles to unlock the prize!\n', '\n', 'From simple to complex as they progress,\n', 'leading you to a solution that you cannot just guess!\n', '\n', 'Once solved you will notice the token goes away,\n', 'as well as receiving some ether for your delay!\n', '\n', 'If you liked this riddle, then the future is bright,\n', 'so get some more P4D while the timing is right!\n', '\n', '*/\n', '\n', '/*=============================================================================*\n', '*********************************** Clue #1 ************************************\n', '*==============================================================================*\n', '\n', "Whenever you're stuck, just ask yourself; what's the meaning of life?\n", '\n', '*/\n', '\n', '/*=============================================================================*\n', '*********************************** Clue #2 ************************************\n', '*==============================================================================*\n', '\n', '1pdt7g3cg7z5mh8rzj3wuBd31CtF7Bd6zy71721gChEhbo8e4Cs1i1gAhev76rEb2i3js1nAmglsp0Bb\n', 'y4aad7tuyks8qDnkpcdA906biicn31chEpxvl4Amnp6gqDl6vr3jn4lz4eiC9tB69j797b3jhragxw9q\n', 'F6bqx81f29fkEwvhmD1svFpd2Az5z2vuzicBA3qqChDxiqoceoxD0n179z1ie7x19r94zo18e1ADeels\n', 'F8tDC22Bqkqiq0rdae5dz3rlfclBcjuu9ksBy9yx6pyqpyd7gCtB731wEcsk90sfbziB0Arz3bey75np\n', 'mod7\n', '\n', '*/\n', '\n', '/*=============================================================================*\n', '*********************************** Clue #3 ************************************\n', '*==============================================================================*\n', '\n', '10101011000101011001111000101100011111011000001100111000000001010000001111110111\n', '00011100101001101111111100001111101100000011011000011001100110010010011001111101\n', '0000001100110101000110000111011110110100001100000000110001110110\n', '\n', '*/\n', '\n', '/*=============================================================================*\n', '*********************************** Clue #4 ************************************\n', '*==============================================================================*\n', '\n', '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\n', 'tVRF51A8tQh6saGW4TcTw8ow1NmisIwEmS\n', '\n', '*/\n', '\n', '/*=============================================================================*\n', '*********************************** Clue #5 ************************************\n', '*==============================================================================*\n', '\n', 'SmEwIS05nqwVgR8OCws+o2dWSGxCe5/f+7kA28iytFDXnhdPqGVyex/+hRyiE7XYR80SJgUemXWyAYdD\n', '8FjvErauf8Qh6ru/QYQBhWoNLHW6R2rF955M5fW+jdjgxlRToGJ9zR8qPL9M6VGt4mFhReHRnIZBKs9o\n', 'OeUwyF+IzVfYkt7dL59vTBCKRlyBS2XJCP7wWX6DJ0/dntnPG0PkUAy3MA9TDxz/yPaAIyted6h82QID\n', 'dzXUaCmFg3919gujGt3bAE5nXTidSVpc5wcsuX1XEN32lwKkS/xlCpcIdnEgtrXDH1B3x4083992ebb0\n', 'd615d8357b18267dac841981097c14083992ebb0d615d8357b1822tCnE\n', '\n', '*/\n', '\n', '/*=============================================================================*\n', '*********************************** Clue #6 ************************************\n', '*==============================================================================*\n', '\n', 'EnCt2f7b689397445493a1945b3c064246eb23420eecaf7b689397445493a1945b3c0NibxGOxzdgH\n', 'yBkP8Clwnxzz8iI90NAeKnQeqDTwl9Vn00VsPD+j2evfnms7GBKe4d/yqKqmaXjzRuMutBqcQ7qjOTne\n', 'PWGD4hFRMFyDtHvhg+/N4nk5NqqzgI5HyvRGfGyh4r84+3SVNZt2zuq+ufM9mBaWECgHieQhax9NR6zD\n', 'VeVirdQhcqjjgLdsqwRunxviwSr5h0ikvhdV3A07/cjAFW2XEg4ncisLg9Vj+kfqfGI4k/RG+j4vhbMF\n', 'zBrUPYUiJp0t0YDFpX1cM0VYYAra87z5g1/SXui3X9WcRhIW6pACoydxStL7XSzaRZ/Vw4W6ssx8Ph9N\n', 'HoNajrUr4i6JOGTTzqnC08d3iBd1/0uvGOce2Urnun9BDnkv6JevmzlpOS9jUUaip8layBaUQmfx9DUC\n', '43RoLLRLcJ6P1TvTeU6m2xH0otMlv4FbOgREUdLUVi/PmH8JiMHWyq1Jkqti5Gdnu93XDSywi/8NmmqJ\n', 'F+APjRcponDF/BsenRIy69oV9AUE4t9n+6cF2cNYmZd/NXlCRdRUrth4qULa7fc3jkMA7N4w1buYS16n\n', '+eZNUrH/vTgv9IJ4dg5VbE8kUCi51JN5Y8c+1lrh4DMRHFzn/PT6d2/Mh6HA8XiSauOqR2tny9uYSUvV\n', '6MKNzJORtyPTWXhgVyOBjzGJInDIi1IGDGMmQAFasoaG5zq1xPIHOxPGmQsFbcX1Ye6JJ4rP6eKPjglp\n', 'xR/JT5rEJkGolhrb69v1v5OUytO8F2dSngEZF5yhLBYb9g7PuR915jwLDIsZAHGmvLaNCadtkw6/1yrf\n', '8gTTGAIx8NQ02MiD+hQGIWVTJ44UsVI5CUJZ9ddOFWtc0v2b6xESUgBFlnUHc4YXaCrVFGk/mKamS8PS\n', '7Lvp7ncIYSGjieQvFYpXNpeVw92eD/OkP6o6WO483adcGzxbP3Fscy0T3+BMx12sHYpYcF/E2GVnUOtY\n', 'cT5rwMQ==IwEmS\n', '\n', '*/\n', '\n', '/* Hashing contract used to generate all keccak based solutions;\n', '\n', 'pragma solidity 0.4.25;\n', '\n', 'contract Hasher {\n', '    function hash_uint256(uint256 n) public pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(n));\n', '    }\n', '    function hash_string(string s) public pure returns (bytes32) {\n', '        return keccak256(abi.encodePacked(s));\n', '    }\n', '}\n', '\n', '*/\n', '\n', 'contract ERC20_Basic {\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address) public view returns (uint256);\n', '    function transfer(address, uint256) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '}\n', '\n', 'contract Cryptohunt is ERC20_Basic {\n', '\n', '\tbool public _hasBeenSolved = false;\n', '\tuint256 public _launchedTime;\n', '\tuint256 public _solvedTime;\n', '\n', '\tstring public constant name = "Cryptohunt";\n', '\tstring public constant symbol = "P4D Riddle";\n', '\tuint8 public constant decimals = 18;\n', '\n', '\taddress constant private src = 0x058a144951e062FC14f310057D2Fd9ef0Cf5095b;\n', '\tuint256 constant private amt = 1e18;\n', '\n', '\tevent Log(string msg);\n', '\n', '\tconstructor() public {\n', '\t\temit Transfer(address(this), src, amt);\n', '\t\t_launchedTime = now;\n', '\t}\n', '\n', '\tfunction attemptToSolve(string answer) public {\n', '\t\tbytes32 hash = keccak256(abi.encodePacked(answer));\n', '\t\tif (hash == 0x6fd689cdf2f367aa9bd63f9306de49f00479b474f606daed7c015f3d85ff4e40) {\n', '\t\t\tif (!_hasBeenSolved) {\n', '\t\t\t\temit Transfer(src, address(0x0), amt);\n', '\t\t\t\temit Log("Well done! You\'ve deserved this!");\n', '\t\t\t\temit Log(answer);\n', '\t\t\t\t_hasBeenSolved = true;\n', '\t\t\t\t_solvedTime = now;\n', '\t\t\t}\n', '\t\t\tmsg.sender.transfer(address(this).balance);\n', '\t\t} else {\n', '\t\t\temit Log("Sorry, but that\'s not the correct answer!");\n', '\t\t}\n', '\t}\n', '\n', '\tfunction() public payable {\n', '\t\t// allow donations\n', '\t}\n', '\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn (_hasBeenSolved ? 0 : amt);\n', '\t}\n', '\n', '\tfunction balanceOf(address owner) public view returns (uint256) {\n', '\t\treturn (_hasBeenSolved || owner != src ? 0 : amt);\n', '\t}\n', '\n', '\tfunction transfer(address, uint256) public returns (bool) {\n', '\t\treturn false;\n', '\t}\n', '\n', "\t// ...and that's all you really need for a 'broken' token\n", '}\n', '\n', '/*===========================================================================================*\n', '*************************************** https://p4d.io ***************************************\n', '*===========================================================================================*/']