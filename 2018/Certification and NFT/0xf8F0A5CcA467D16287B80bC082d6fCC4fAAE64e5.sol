['pragma solidity ^0.4.24;\n', '\n', '// ---------------------------------------------------------------------------- \n', '// Symbol      : UBTR\n', '// Name        : OBETR.COM\n', '// Total supply: 12,000,000,000\n', '// Decimals    : 18 \n', '// ----------------------------------------------------------------------------\n', '//https://remix.ethereum.org/#optimize=true&version=soljson-v0.4.24+commit.e67f0147.js\n', '//\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '//\n', '// Borrowed from MiniMeToken\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '} \n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and a\n', '// fixed supply\n', '// ----------------------------------------------------------------------------\n', 'contract FixedSupplyToken is ERC20Interface, Owned {\n', '    using SafeMath for uint;\n', '\n', '    string public symbol;\n', '    string public  name;\n', '    uint8 public decimals;\n', '    uint _totalSupply; \n', '    \n', '    bool public crowdsaleEnabled;\n', '    uint public ethPerToken;\n', '    uint public bonusMinEth;\n', '    uint public bonusPct; \n', '\n', '    mapping(address => uint) balances;\n', '    mapping(address => mapping(address => uint)) allowed;\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Custom Events\n', '    // ------------------------------------------------------------------------\n', '    event Burn(address indexed from, uint256 value);\n', '    event Bonus(address indexed from, uint256 value); \n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() public {\n', '        symbol = "UBTR";\n', '        name = "UBETR";\n', '        decimals = 18;\n', '        _totalSupply = 12000000000000000000000000000;\n', '\n', '\n', '        crowdsaleEnabled = false;\n', '        ethPerToken = 20000;\n', '        bonusMinEth = 0;\n', '        bonusPct = 0; \n', '\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() public view returns (uint) {\n', '        return _totalSupply.sub(balances[address(0)]);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public view returns (uint balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer the balance from token owner&#39;s account to `to` account\n', '    // - Owner&#39;s account must have sufficient balance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint tokens) public returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(msg.sender, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account\n', '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint tokens) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '        balances[to] = balances[to].add(tokens);\n', '        emit Transfer(from, to, tokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', '    // transferred to the spender&#39;s account\n', '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n', '        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Crowdsale \n', '    // ------------------------------------------------------------------------\n', '    function () public payable {\n', '        //crowd sale is open/allowed\n', '        require(crowdsaleEnabled); \n', '        \n', '        uint ethValue = msg.value;\n', '        \n', '        //get token equivalent\n', '        uint tokens = ethValue.mul(ethPerToken);\n', '\n', '        \n', '        //append bonus if we have active bonus promo\n', '        //and if ETH sent is more than then minimum required to avail bonus\n', '        if(bonusPct > 0 && ethValue >= bonusMinEth){\n', '            //compute bonus value based on percentage\n', '            uint bonus = tokens.div(100).mul(bonusPct);\n', '            \n', '            //emit bonus event\n', '            emit Bonus(msg.sender, bonus);\n', '            \n', '            //add bonus to final amount of token to be \n', '            //transferred to sender/purchaser\n', '            tokens = tokens.add(bonus);\n', '        }\n', '        \n', '        \n', '        //validate token amount \n', '        //assert(tokens > 0);\n', '        //assert(tokens <= balances[owner]);  \n', '        \n', '\n', '        //transfer from owner to sender/purchaser\n', '        balances[owner] = balances[owner].sub(tokens);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens);\n', '        \n', '        //emit transfer event\n', '        emit Transfer(owner, msg.sender, tokens);\n', '    } \n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Open the token for Crowdsale \n', '    // ------------------------------------------------------------------------\n', '    function enableCrowdsale() public onlyOwner{\n', '        crowdsaleEnabled = true; \n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Close the token for Crowdsale \n', '    // ------------------------------------------------------------------------\n', '    function disableCrowdsale() public onlyOwner{\n', '        crowdsaleEnabled = false; \n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Set the token price.  \n', '    // ------------------------------------------------------------------------\n', '    function setTokenPrice(uint _ethPerToken) public onlyOwner{ \n', '        ethPerToken = _ethPerToken;\n', '    } \n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Set crowdsale bonus percentage and its minimum\n', '    // ------------------------------------------------------------------------\n', '    function setBonus(uint _bonusPct, uint _minEth) public onlyOwner {\n', '        bonusMinEth = _minEth;\n', '        bonusPct = _bonusPct;\n', '    }\n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Burn token\n', '    // ------------------------------------------------------------------------\n', '    function burn(uint256 _value) public onlyOwner {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]); \n', '\n', '        address burner = msg.sender;\n', '        \n', '        //deduct from initiator&#39;s balance\n', '        balances[burner] = balances[burner].sub(_value);\n', '        \n', '        //deduct from total supply\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        \n', '        emit Burn(burner, _value); \n', '    } \n', '\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Withdraw\n', '    // ------------------------------------------------------------------------ \n', '    function withdraw(uint _amount) onlyOwner public {\n', '        require(_amount > 0);\n', '        \n', '        // Amount withdraw should be less or equal to balance\n', '        require(_amount <= address(this).balance);     \n', '        \n', '        owner.transfer(_amount);\n', '    }\n', '\n', '\n', '}']