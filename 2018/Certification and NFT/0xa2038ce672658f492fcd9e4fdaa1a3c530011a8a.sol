['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title HolderBase\n', ' * @notice HolderBase handles data & funcitons for token or ether holders.\n', ' * HolderBase contract can distribute only one of ether or token.\n', ' */\n', 'contract HolderBase is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint8 public constant MAX_HOLDERS = 64; // TODO: tokyo-input should verify # of holders\n', '  uint256 public coeff;\n', '  bool public distributed;\n', '  bool public initialized;\n', '\n', '  struct Holder {\n', '    address addr;\n', '    uint96 ratio;\n', '  }\n', '\n', '  Holder[] public holders;\n', '\n', '  event Distributed();\n', '\n', '  function HolderBase(uint256 _coeff) public {\n', '    require(_coeff != 0);\n', '    coeff = _coeff;\n', '  }\n', '\n', '  function getHolderCount() public view returns (uint256) {\n', '    return holders.length;\n', '  }\n', '\n', '  function initHolders(address[] _addrs, uint96[] _ratios) public onlyOwner {\n', '    require(!initialized);\n', '    require(holders.length == 0);\n', '    require(_addrs.length != 0);\n', '    require(_addrs.length <= MAX_HOLDERS);\n', '    require(_addrs.length == _ratios.length);\n', '\n', '    uint256 accRatio;\n', '\n', '    for(uint8 i = 0; i < _addrs.length; i++) {\n', '      if (_addrs[i] != address(0)) {\n', '        // address will be 0x00 in case of "crowdsale".\n', '        holders.push(Holder(_addrs[i], _ratios[i]));\n', '      }\n', '\n', '      accRatio = accRatio.add(uint256(_ratios[i]));\n', '    }\n', '\n', '    require(accRatio <= coeff);\n', '\n', '    initialized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Distribute ether to `holder`s according to ratio.\n', '   * Remaining ether is transfered to `wallet` from the close\n', '   * function of RefundVault contract.\n', '   */\n', '  function distribute() internal {\n', '    require(!distributed, "Already distributed");\n', '    uint256 balance = this.balance;\n', '\n', '    require(balance > 0, "No ether to distribute");\n', '    distributed = true;\n', '\n', '    for (uint8 i = 0; i < holders.length; i++) {\n', '      uint256 holderAmount = balance.mul(uint256(holders[i].ratio)).div(coeff);\n', '\n', '      holders[i].addr.transfer(holderAmount);\n', '    }\n', '\n', '    emit Distributed(); // A single log to reduce gas\n', '  }\n', '\n', '  /**\n', '   * @dev Distribute ERC20 token to `holder`s according to ratio.\n', '   */\n', '  function distributeToken(ERC20Basic _token, uint256 _targetTotalSupply) internal {\n', '    require(!distributed, "Already distributed");\n', '    distributed = true;\n', '\n', '    for (uint8 i = 0; i < holders.length; i++) {\n', '      uint256 holderAmount = _targetTotalSupply.mul(uint256(holders[i].ratio)).div(coeff);\n', '      deliverTokens(_token, holders[i].addr, holderAmount);\n', '    }\n', '\n', '    emit Distributed(); // A single log to reduce gas\n', '  }\n', '\n', '  // Override to distribute tokens\n', '  function deliverTokens(ERC20Basic _token, address _beneficiary, uint256 _tokens) internal {}\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MultiHolderVault\n', ' * @dev This contract distribute ether to multiple address.\n', ' */\n', 'contract MultiHolderVault is HolderBase, RefundVault {\n', '  using SafeMath for uint256;\n', '\n', '  function MultiHolderVault(address _wallet, uint256 _ratioCoeff)\n', '    public\n', '    HolderBase(_ratioCoeff)\n', '    RefundVault(_wallet)\n', '  {}\n', '\n', '  function close() public onlyOwner {\n', '    require(state == State.Active);\n', '    require(initialized);\n', '\n', '    super.distribute(); // distribute ether to holders\n', '    super.close(); // transfer remaining ether to wallet\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title HolderBase\n', ' * @notice HolderBase handles data & funcitons for token or ether holders.\n', ' * HolderBase contract can distribute only one of ether or token.\n', ' */\n', 'contract HolderBase is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint8 public constant MAX_HOLDERS = 64; // TODO: tokyo-input should verify # of holders\n', '  uint256 public coeff;\n', '  bool public distributed;\n', '  bool public initialized;\n', '\n', '  struct Holder {\n', '    address addr;\n', '    uint96 ratio;\n', '  }\n', '\n', '  Holder[] public holders;\n', '\n', '  event Distributed();\n', '\n', '  function HolderBase(uint256 _coeff) public {\n', '    require(_coeff != 0);\n', '    coeff = _coeff;\n', '  }\n', '\n', '  function getHolderCount() public view returns (uint256) {\n', '    return holders.length;\n', '  }\n', '\n', '  function initHolders(address[] _addrs, uint96[] _ratios) public onlyOwner {\n', '    require(!initialized);\n', '    require(holders.length == 0);\n', '    require(_addrs.length != 0);\n', '    require(_addrs.length <= MAX_HOLDERS);\n', '    require(_addrs.length == _ratios.length);\n', '\n', '    uint256 accRatio;\n', '\n', '    for(uint8 i = 0; i < _addrs.length; i++) {\n', '      if (_addrs[i] != address(0)) {\n', '        // address will be 0x00 in case of "crowdsale".\n', '        holders.push(Holder(_addrs[i], _ratios[i]));\n', '      }\n', '\n', '      accRatio = accRatio.add(uint256(_ratios[i]));\n', '    }\n', '\n', '    require(accRatio <= coeff);\n', '\n', '    initialized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Distribute ether to `holder`s according to ratio.\n', '   * Remaining ether is transfered to `wallet` from the close\n', '   * function of RefundVault contract.\n', '   */\n', '  function distribute() internal {\n', '    require(!distributed, "Already distributed");\n', '    uint256 balance = this.balance;\n', '\n', '    require(balance > 0, "No ether to distribute");\n', '    distributed = true;\n', '\n', '    for (uint8 i = 0; i < holders.length; i++) {\n', '      uint256 holderAmount = balance.mul(uint256(holders[i].ratio)).div(coeff);\n', '\n', '      holders[i].addr.transfer(holderAmount);\n', '    }\n', '\n', '    emit Distributed(); // A single log to reduce gas\n', '  }\n', '\n', '  /**\n', '   * @dev Distribute ERC20 token to `holder`s according to ratio.\n', '   */\n', '  function distributeToken(ERC20Basic _token, uint256 _targetTotalSupply) internal {\n', '    require(!distributed, "Already distributed");\n', '    distributed = true;\n', '\n', '    for (uint8 i = 0; i < holders.length; i++) {\n', '      uint256 holderAmount = _targetTotalSupply.mul(uint256(holders[i].ratio)).div(coeff);\n', '      deliverTokens(_token, holders[i].addr, holderAmount);\n', '    }\n', '\n', '    emit Distributed(); // A single log to reduce gas\n', '  }\n', '\n', '  // Override to distribute tokens\n', '  function deliverTokens(ERC20Basic _token, address _beneficiary, uint256 _tokens) internal {}\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MultiHolderVault\n', ' * @dev This contract distribute ether to multiple address.\n', ' */\n', 'contract MultiHolderVault is HolderBase, RefundVault {\n', '  using SafeMath for uint256;\n', '\n', '  function MultiHolderVault(address _wallet, uint256 _ratioCoeff)\n', '    public\n', '    HolderBase(_ratioCoeff)\n', '    RefundVault(_wallet)\n', '  {}\n', '\n', '  function close() public onlyOwner {\n', '    require(state == State.Active);\n', '    require(initialized);\n', '\n', '    super.distribute(); // distribute ether to holders\n', '    super.close(); // transfer remaining ether to wallet\n', '  }\n', '}']
