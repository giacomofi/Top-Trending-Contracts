['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param _addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address _addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(_addr) }\n', '    return size > 0;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable {\n', '\n', '  string public contactInformation;\n', '\n', '  /**\n', '    * @dev Allows the owner to set a string with their contact information.\n', '    * @param _info The contact information to attach to the contract.\n', '    */\n', '  function setContactInformation(string _info) public onlyOwner {\n', '    contactInformation = _info;\n', '  }\n', '}\n', '\n', '\n', 'contract IERC223Basic {\n', '  function balanceOf(address _owner) public constant returns (uint);\n', '  function transfer(address _to, uint _value) public;\n', '  function transfer(address _to, uint _value, bytes _data) public;\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint value,\n', '    bytes data\n', '  );\n', '}\n', '\n', '\n', 'contract IERC223 is IERC223Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint);\n', '\n', '  function transferFrom(address _from, address _to, uint _value, bytes _data)\n', '    public;\n', '\n', '  function approve(address _spender, uint _value) public;\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract IERC223BasicReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '\n', 'contract IERC223Receiver is IERC223BasicReceiver {\n', '  function receiveApproval(address _owner, uint _value) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic contract that will hold ERC223 tokens\n', ' */\n', 'contract ERC223BasicReceiver is IERC223BasicReceiver {\n', '  event TokensReceived(address sender, address origin, uint value, bytes data);\n', '\n', '  /**\n', '   * @dev Standard ERC223 function that will handle incoming token transfers\n', '   * @param _from address the tokens owner\n', '   * @param _value uint the sent tokens amount\n', '   * @param _data bytes metadata\n', '   */\n', '  function tokenFallback(address _from, uint _value, bytes _data) public {\n', '    require(_from != address(0));\n', '    emit TokensReceived(msg.sender, _from, _value, _data);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contract that will hold ERC223 tokens\n', ' */\n', 'contract ERC223Receiver is ERC223BasicReceiver, IERC223Receiver {\n', '  event ApprovalReceived(address sender, address owner, uint value);\n', '\n', '  /**\n', '   * @dev Function that will handle incoming token approvals\n', '   * @param _owner address the tokens owner\n', '   * @param _value uint the approved tokens amount\n', '   */\n', '  function receiveApproval(address _owner, uint _value) public {\n', '    require(_owner != address(0));\n', '    emit ApprovalReceived(msg.sender, _owner, _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contract that can hold and transfer ERC-223 tokens\n', ' */\n', 'contract Fund is ERC223Receiver, Contactable {\n', '  IERC223 public token;\n', '  string public fundName;\n', '\n', '  /**\n', '   * @dev Constructor that sets the initial contract parameters\n', '   * @param _token ERC223 address of the ERC-223 token\n', '   * @param _fundName string the fund name\n', '   */\n', '  constructor(IERC223 _token, string _fundName) public {\n', '    require(address(_token) != address(0));\n', '    token = _token;\n', '    fundName = _fundName;\n', '  }\n', '\n', '  /**\n', '   * @dev ERC-20 compatible function to transfer tokens\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   */\n', '  function transfer(address _to, uint _value) public onlyOwner {\n', '    token.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to transfer tokens\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   * @param _data bytes metadata\n', '   */\n', '  function transfer(address _to, uint _value, bytes _data) public onlyOwner {\n', '    token.transfer(_to, _value, _data);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to transfer tokens from the approved `msg.sender` account\n', '   * @param _from address the tokens owner\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   * @param _data bytes metadata\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    onlyOwner\n', '  {\n', '    token.transferFrom(_from, _to, _value, _data);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to approve account to spend owned tokens\n', '   * @param _spender address the tokens spender\n', '   * @param _value uint amount of the tokens to be approved\n', '   */\n', '  function approve(address _spender, uint _value) public onlyOwner {\n', '    token.approve(_spender, _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title HEdpAY\n', ' */\n', 'contract Hedpay is IERC223, Contactable {\n', '  using AddressUtils for address;\n', '  using SafeMath for uint;\n', '\n', '  string public constant name = "HEdpAY";\n', '  string public constant symbol = "Hdp.ф";\n', '  uint8 public constant decimals = 4;\n', '  uint8 public constant secondPhaseBonus = 33;\n', '  uint8[3] public thirdPhaseBonus = [10, 15, 20];\n', '  uint public constant totalSupply = 10000000000000;\n', '  uint public constant secondPhaseStartTime = 1537401600; //20.09.2018\n', '  uint public constant secondPhaseEndTime = 1540943999; //30.10.2018\n', '  uint public constant thirdPhaseStartTime = 1540944000;//31.10.2018\n', '  uint public constant thirdPhaseEndTime = 1543622399;//30.11.2018\n', '  uint public constant cap = 200000 ether;\n', '  uint public constant goal = 25000 ether;\n', '  uint public constant rate = 100;\n', '  uint public constant minimumWeiAmount = 100 finney;\n', '  uint public constant salePercent = 14;\n', '  uint public constant bonusPercent = 1;\n', '  uint public constant teamPercent = 2;\n', '  uint public constant preSalePercent = 3;\n', '\n', '  uint public creationTime;\n', '  uint public weiRaised;\n', '  uint public tokensSold;\n', '  uint public buyersCount;\n', '  uint public saleAmount;\n', '  uint public bonusAmount;\n', '  uint public teamAmount;\n', '  uint public preSaleAmount;\n', '  uint public unsoldTokens;\n', '\n', '  address public teamAddress = 0x7d4E738477B6e8BaF03c4CB4944446dA690f76B5;\n', '  \n', '  Fund public reservedFund;\n', '\n', '  mapping (address => uint) internal balances;\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '  mapping (address => uint) internal bonuses;\n', '\n', '  /**\n', '   * @dev Constructor that sets initial contract parameters\n', '   */\n', '  constructor() public {\n', '    balances[owner] = totalSupply;\n', '    creationTime = block.timestamp;\n', '    saleAmount = totalSupply.div(100).mul(salePercent).mul(\n', '      10 ** uint(decimals)\n', '    );\n', '    bonusAmount = totalSupply.div(100).mul(bonusPercent).mul(\n', '      10 ** uint(decimals)\n', '    );\n', '    teamAmount = totalSupply.div(100).mul(teamPercent).mul(\n', '      10 ** uint(decimals)\n', '    );\n', '    preSaleAmount = totalSupply.div(100).mul(preSalePercent).mul(\n', '      10 ** uint(decimals)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Gets an account tokens balance\n', '   * @param _owner address the tokens owner\n', '   * @return uint the specified address owned tokens amount\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint) {\n', '    require(_owner != address(0));\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the specified accounts approval value\n', '   * @param _owner address the tokens owner\n', '   * @param _spender address the tokens spender\n', '   * @return uint the specified accounts spending tokens amount\n', '   */\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint)\n', '  {\n', '    require(_owner != address(0));\n', '    require(_spender != address(0));\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the ICO has started\n', '   * @return bool true if the crowdsale began\n', '   */\n', '  function hasStarted() public view returns (bool) {\n', '    return block.timestamp >= secondPhaseStartTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the ICO has ended\n', '   * @return bool `true` if the crowdsale is over\n', '   */\n', '  function hasEnded() public view returns (bool) {\n', '    return block.timestamp > thirdPhaseEndTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has reached\n', '   * @return bool `true` if the cap has reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the current tokens amount can be purchased for the specified\n', '   * @dev wei amount\n', '   * @param _weiAmount uint wei amount\n', '   * @return uint tokens amount\n', '   */\n', '  function getTokenAmount(uint _weiAmount) public pure returns (uint) {\n', '    return _weiAmount.mul(rate).div((18 - uint(decimals)) ** 10);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the current tokens amount can be purchased for the specified\n', '   * @dev wei amount (including bonuses)\n', '   * @param _weiAmount uint wei amount\n', '   * @return uint tokens amount\n', '   */\n', '  function getTokenAmountBonus(uint _weiAmount)\n', '    public view returns (uint)\n', '  {\n', '    if (hasStarted() && secondPhaseEndTime >= block.timestamp) {\n', '      return(\n', '        getTokenAmount(_weiAmount).\n', '        add(\n', '          getTokenAmount(_weiAmount).\n', '          div(100).\n', '          mul(uint(secondPhaseBonus))\n', '        )\n', '      );\n', '    } else if (thirdPhaseStartTime <= block.timestamp && !hasEnded()) {\n', '      if (_weiAmount > 0 && _weiAmount < 2500 finney) {\n', '        return(\n', '          getTokenAmount(_weiAmount).\n', '          add(\n', '            getTokenAmount(_weiAmount).\n', '            div(100).\n', '            mul(uint(thirdPhaseBonus[0]))\n', '          )\n', '        );\n', '      } else if (_weiAmount >= 2510 finney && _weiAmount < 10000 finney) {\n', '        return(\n', '          getTokenAmount(_weiAmount).\n', '          add(\n', '            getTokenAmount(_weiAmount).\n', '            div(100).\n', '            mul(uint(thirdPhaseBonus[1]))\n', '          )\n', '        );\n', '      } else if (_weiAmount >= 10000 finney) {\n', '        return(\n', '          getTokenAmount(_weiAmount).\n', '          add(\n', '            getTokenAmount(_weiAmount).\n', '            div(100).\n', '            mul(uint(thirdPhaseBonus[2]))\n', '          )\n', '        );\n', '      }\n', '    } else {\n', '      return getTokenAmount(_weiAmount);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets an account tokens bonus\n', '   * @param _owner address the tokens owner\n', '   * @return uint owned tokens bonus\n', '   */\n', '  function bonusOf(address _owner) public view returns (uint) {\n', '    require(_owner != address(0));\n', '    return bonuses[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets an account tokens balance without freezed part of the bonuses\n', '   * @param _owner address the tokens owner\n', '   * @return uint owned tokens amount without freezed bonuses\n', '   */\n', '  function balanceWithoutFreezedBonus(address _owner)\n', '    public view returns (uint)\n', '  {\n', '    require(_owner != address(0));\n', '    if (block.timestamp >= thirdPhaseEndTime.add(90 days)) {\n', '      if (bonusOf(_owner) < 10000) {\n', '        return balanceOf(_owner);\n', '      } else {\n', '        return balanceOf(_owner).sub(bonuses[_owner].div(2));\n', '      }\n', '    } else if (block.timestamp >= thirdPhaseEndTime.add(180 days)) {\n', '      return balanceOf(_owner);\n', '    } else {\n', '      return balanceOf(_owner).sub(bonuses[_owner]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev ERC-20 compatible function to transfer tokens\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   */\n', '  function transfer(address _to, uint _value) public {\n', '    transfer(_to, _value, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Function to transfer tokens\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   * @param _data bytes metadata\n', '   */\n', '  function transfer(address _to, uint _value, bytes _data) public {\n', '    require(_value <= balanceWithoutFreezedBonus(msg.sender));\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    _safeTransfer(msg.sender, _to, _value, _data);\n', '\n', '    emit Transfer(msg.sender, _to, _value, _data);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to transfer tokens from the approved `msg.sender` account\n', '   * @param _from address the tokens owner\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   * @param _data bytes metadata\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint _value,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '    require(_value <= allowance(_from, msg.sender));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _safeTransfer(_from, _to, _value, _data);\n', '\n', '    emit Transfer(_from, _to, _value, _data);\n', '    emit Approval(_from, msg.sender, allowance(_from, msg.sender));\n', '  }\n', '\n', '  /**\n', '   * @dev Function to approve account to spend owned tokens\n', '   * @param _spender address the tokens spender\n', '   * @param _value uint amount of the tokens to be approved\n', '   */\n', '  function approve(address _spender, uint _value) public {\n', '    require(_spender != address(0));\n', '    require(_value <= balanceWithoutFreezedBonus(msg.sender));\n', '    allowed[msg.sender][_spender] = _value;\n', '    _safeApprove(_spender, _value);\n', '    emit Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to increase spending tokens amount\n', '   * @param _spender address the tokens spender\n', '   * @param _value uint increase tokens amount\n', '   */\n', '  function increaseApproval(address _spender, uint _value) public {\n', '    require(_spender != address(0));\n', '    require(\n', '      allowance(msg.sender, _spender).add(_value) <=\n', '      balanceWithoutFreezedBonus(msg.sender)\n', '    );\n', '\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\n', '    _safeApprove(_spender, allowance(msg.sender, _spender));\n', '    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\n', '  }\n', '\n', '  /**\n', '   * @dev Function to decrease spending tokens amount\n', '   * @param _spender address the tokens spender\n', '   * @param _value uint decrease tokens amount\n', '   */\n', '  function decreaseApproval(address _spender, uint _value) public {\n', '    require(_spender != address(0));\n', '    require(_value <= allowance(msg.sender, _spender));\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_value);\n', '    _safeApprove(_spender, allowance(msg.sender, _spender));\n', '    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\n', '  }\n', '\n', '  /**\n', '   * @dev Function to set an account bonus\n', '   * @param _owner address the tokens owner\n', '   * @param _value uint bonus tokens amount\n', '   */\n', '  function setBonus(address _owner, uint _value, bool preSale)\n', '    public onlyOwner\n', '  {\n', '    require(_owner != address(0));\n', '    require(_value <= balanceOf(_owner));\n', '    require(bonusAmount > 0);\n', '    require(_value <= bonusAmount);\n', '\n', '    bonuses[_owner] = _value;\n', '    if (preSale) {\n', '      preSaleAmount = preSaleAmount.sub(_value);\n', '      transfer(_owner, _value, abi.encode("transfer the bonus"));\n', '    } else {\n', '      if (_value <= bonusAmount) {\n', '        bonusAmount = bonusAmount.sub(_value);\n', '        transfer(_owner, _value, abi.encode("transfer the bonus"));\n', '      }\n', '    }\n', '\n', '  }\n', '\n', '  /**\n', '   * @dev Function to refill balance of the specified account\n', '   * @param _to address the tokens recepient\n', '   * @param _weiAmount uint amount of the tokens to be transferred\n', '   */\n', '  function refill(address _to, uint _weiAmount) public onlyOwner {\n', '    require(_preValidateRefill(_to, _weiAmount));\n', '    setBonus(\n', '      _to,\n', '      getTokenAmountBonus(_weiAmount).sub(\n', '        getTokenAmount(_weiAmount)\n', '      ),\n', '      false\n', '    );\n', '    buyersCount = buyersCount.add(1);\n', '    saleAmount = saleAmount.sub(getTokenAmount(_weiAmount));\n', '    transfer(_to, getTokenAmount(_weiAmount), abi.encode("refill"));\n', '  }\n', '\n', '  /**\n', '   * @dev Function to refill balances of the specified accounts\n', '   * @param _to address[] the tokens recepients\n', '   * @param _weiAmount uint[] amounts of the tokens to be transferred\n', '   */\n', '  function refillArray(address[] _to, uint[] _weiAmount) public onlyOwner {\n', '    require(_to.length == _weiAmount.length);\n', '    for (uint i = 0; i < _to.length; i++) {\n', '      refill(_to[i], _weiAmount[i]);\n', '    }\n', '  }\n', '  \n', '  /**\n', '   * @dev Function that transfers tokens to team address\n', '   */\n', '  function setTeamFund() public onlyOwner{\n', '    transfer(\n', '      teamAddress,\n', '      teamAmount,\n', '      abi.encode("transfer reserved for team tokens to the team fund")\n', '      );\n', '    teamAmount = 0;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to finalize the sale and define reservedFund\n', '   * @param _reservedFund fund that holds unsold tokens \n', '   */\n', '  function finalize(Fund _reservedFund) public onlyOwner {\n', '    require(saleAmount > 0);\n', '    transfer(\n', '      address(_reservedFund),\n', '      saleAmount,\n', '      abi.encode("transfer reserved for team tokens to the team fund")\n', '    );\n', '    saleAmount = 0;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to call the `tokenFallback` if the tokens\n', '   * @dev recepient is the smart-contract. If the contract doesn&#39;t implement\n', '   * @dev this function transaction fails\n', '   * @param _from address the tokens owner\n', '   * @param _to address the tokens recepient (perhaps the contract)\n', '   * @param _value uint amount of the tokens to be transferred\n', '   * @param _data bytes metadata\n', '   */\n', '  function _safeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint _value,\n', '    bytes _data\n', '  )\n', '    internal\n', '  {\n', '    if (_to.isContract()) {\n', '      IERC223BasicReceiver receiver = IERC223BasicReceiver(_to);\n', '      receiver.tokenFallback(_from, _value, _data);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to call the `receiveApproval` if the tokens\n', '   * @dev recepient is the smart-contract. If the contract doesn&#39;t implement\n', '   * @dev this function transaction fails\n', '   * @param _spender address the tokens recepient (perhaps the contract)\n', '   * @param _value uint amount of the tokens to be approved\n', '   */\n', '  function _safeApprove(address _spender, uint _value) internal {\n', '    if (_spender.isContract()) {\n', '      IERC223Receiver receiver = IERC223Receiver(_spender);\n', '      receiver.receiveApproval(msg.sender, _value);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to prevalidate refill before execution\n', '   * @param _to address the tokens recepient\n', '   * @param _weiAmount uint amount of the tokens to be transferred\n', '   * @return bool `true` if the refill can be executed\n', '   */\n', '  function _preValidateRefill(address _to, uint _weiAmount)\n', '    internal view returns (bool)\n', '  {\n', '    return(\n', '      hasStarted() && _weiAmount > 0 &&  weiRaised.add(_weiAmount) <= cap\n', '      && _to != address(0) && _weiAmount >= minimumWeiAmount &&\n', '      getTokenAmount(_weiAmount) <= saleAmount\n', '    );\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param _addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address _addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(_addr) }\n', '    return size > 0;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contactable token\n', ' * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n', ' * contact information.\n', ' */\n', 'contract Contactable is Ownable {\n', '\n', '  string public contactInformation;\n', '\n', '  /**\n', '    * @dev Allows the owner to set a string with their contact information.\n', '    * @param _info The contact information to attach to the contract.\n', '    */\n', '  function setContactInformation(string _info) public onlyOwner {\n', '    contactInformation = _info;\n', '  }\n', '}\n', '\n', '\n', 'contract IERC223Basic {\n', '  function balanceOf(address _owner) public constant returns (uint);\n', '  function transfer(address _to, uint _value) public;\n', '  function transfer(address _to, uint _value, bytes _data) public;\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint value,\n', '    bytes data\n', '  );\n', '}\n', '\n', '\n', 'contract IERC223 is IERC223Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint);\n', '\n', '  function transferFrom(address _from, address _to, uint _value, bytes _data)\n', '    public;\n', '\n', '  function approve(address _spender, uint _value) public;\n', '  event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', 'contract IERC223BasicReceiver {\n', '  function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '\n', 'contract IERC223Receiver is IERC223BasicReceiver {\n', '  function receiveApproval(address _owner, uint _value) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic contract that will hold ERC223 tokens\n', ' */\n', 'contract ERC223BasicReceiver is IERC223BasicReceiver {\n', '  event TokensReceived(address sender, address origin, uint value, bytes data);\n', '\n', '  /**\n', '   * @dev Standard ERC223 function that will handle incoming token transfers\n', '   * @param _from address the tokens owner\n', '   * @param _value uint the sent tokens amount\n', '   * @param _data bytes metadata\n', '   */\n', '  function tokenFallback(address _from, uint _value, bytes _data) public {\n', '    require(_from != address(0));\n', '    emit TokensReceived(msg.sender, _from, _value, _data);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contract that will hold ERC223 tokens\n', ' */\n', 'contract ERC223Receiver is ERC223BasicReceiver, IERC223Receiver {\n', '  event ApprovalReceived(address sender, address owner, uint value);\n', '\n', '  /**\n', '   * @dev Function that will handle incoming token approvals\n', '   * @param _owner address the tokens owner\n', '   * @param _value uint the approved tokens amount\n', '   */\n', '  function receiveApproval(address _owner, uint _value) public {\n', '    require(_owner != address(0));\n', '    emit ApprovalReceived(msg.sender, _owner, _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contract that can hold and transfer ERC-223 tokens\n', ' */\n', 'contract Fund is ERC223Receiver, Contactable {\n', '  IERC223 public token;\n', '  string public fundName;\n', '\n', '  /**\n', '   * @dev Constructor that sets the initial contract parameters\n', '   * @param _token ERC223 address of the ERC-223 token\n', '   * @param _fundName string the fund name\n', '   */\n', '  constructor(IERC223 _token, string _fundName) public {\n', '    require(address(_token) != address(0));\n', '    token = _token;\n', '    fundName = _fundName;\n', '  }\n', '\n', '  /**\n', '   * @dev ERC-20 compatible function to transfer tokens\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   */\n', '  function transfer(address _to, uint _value) public onlyOwner {\n', '    token.transfer(_to, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to transfer tokens\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   * @param _data bytes metadata\n', '   */\n', '  function transfer(address _to, uint _value, bytes _data) public onlyOwner {\n', '    token.transfer(_to, _value, _data);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to transfer tokens from the approved `msg.sender` account\n', '   * @param _from address the tokens owner\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   * @param _data bytes metadata\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint _value,\n', '    bytes _data\n', '  )\n', '    public\n', '    onlyOwner\n', '  {\n', '    token.transferFrom(_from, _to, _value, _data);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to approve account to spend owned tokens\n', '   * @param _spender address the tokens spender\n', '   * @param _value uint amount of the tokens to be approved\n', '   */\n', '  function approve(address _spender, uint _value) public onlyOwner {\n', '    token.approve(_spender, _value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title HEdpAY\n', ' */\n', 'contract Hedpay is IERC223, Contactable {\n', '  using AddressUtils for address;\n', '  using SafeMath for uint;\n', '\n', '  string public constant name = "HEdpAY";\n', '  string public constant symbol = "Hdp.ф";\n', '  uint8 public constant decimals = 4;\n', '  uint8 public constant secondPhaseBonus = 33;\n', '  uint8[3] public thirdPhaseBonus = [10, 15, 20];\n', '  uint public constant totalSupply = 10000000000000;\n', '  uint public constant secondPhaseStartTime = 1537401600; //20.09.2018\n', '  uint public constant secondPhaseEndTime = 1540943999; //30.10.2018\n', '  uint public constant thirdPhaseStartTime = 1540944000;//31.10.2018\n', '  uint public constant thirdPhaseEndTime = 1543622399;//30.11.2018\n', '  uint public constant cap = 200000 ether;\n', '  uint public constant goal = 25000 ether;\n', '  uint public constant rate = 100;\n', '  uint public constant minimumWeiAmount = 100 finney;\n', '  uint public constant salePercent = 14;\n', '  uint public constant bonusPercent = 1;\n', '  uint public constant teamPercent = 2;\n', '  uint public constant preSalePercent = 3;\n', '\n', '  uint public creationTime;\n', '  uint public weiRaised;\n', '  uint public tokensSold;\n', '  uint public buyersCount;\n', '  uint public saleAmount;\n', '  uint public bonusAmount;\n', '  uint public teamAmount;\n', '  uint public preSaleAmount;\n', '  uint public unsoldTokens;\n', '\n', '  address public teamAddress = 0x7d4E738477B6e8BaF03c4CB4944446dA690f76B5;\n', '  \n', '  Fund public reservedFund;\n', '\n', '  mapping (address => uint) internal balances;\n', '  mapping (address => mapping (address => uint)) internal allowed;\n', '  mapping (address => uint) internal bonuses;\n', '\n', '  /**\n', '   * @dev Constructor that sets initial contract parameters\n', '   */\n', '  constructor() public {\n', '    balances[owner] = totalSupply;\n', '    creationTime = block.timestamp;\n', '    saleAmount = totalSupply.div(100).mul(salePercent).mul(\n', '      10 ** uint(decimals)\n', '    );\n', '    bonusAmount = totalSupply.div(100).mul(bonusPercent).mul(\n', '      10 ** uint(decimals)\n', '    );\n', '    teamAmount = totalSupply.div(100).mul(teamPercent).mul(\n', '      10 ** uint(decimals)\n', '    );\n', '    preSaleAmount = totalSupply.div(100).mul(preSalePercent).mul(\n', '      10 ** uint(decimals)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Gets an account tokens balance\n', '   * @param _owner address the tokens owner\n', '   * @return uint the specified address owned tokens amount\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint) {\n', '    require(_owner != address(0));\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the specified accounts approval value\n', '   * @param _owner address the tokens owner\n', '   * @param _spender address the tokens spender\n', '   * @return uint the specified accounts spending tokens amount\n', '   */\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint)\n', '  {\n', '    require(_owner != address(0));\n', '    require(_spender != address(0));\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the ICO has started\n', '   * @return bool true if the crowdsale began\n', '   */\n', '  function hasStarted() public view returns (bool) {\n', '    return block.timestamp >= secondPhaseStartTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the ICO has ended\n', '   * @return bool `true` if the crowdsale is over\n', '   */\n', '  function hasEnded() public view returns (bool) {\n', '    return block.timestamp > thirdPhaseEndTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has reached\n', '   * @return bool `true` if the cap has reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the current tokens amount can be purchased for the specified\n', '   * @dev wei amount\n', '   * @param _weiAmount uint wei amount\n', '   * @return uint tokens amount\n', '   */\n', '  function getTokenAmount(uint _weiAmount) public pure returns (uint) {\n', '    return _weiAmount.mul(rate).div((18 - uint(decimals)) ** 10);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the current tokens amount can be purchased for the specified\n', '   * @dev wei amount (including bonuses)\n', '   * @param _weiAmount uint wei amount\n', '   * @return uint tokens amount\n', '   */\n', '  function getTokenAmountBonus(uint _weiAmount)\n', '    public view returns (uint)\n', '  {\n', '    if (hasStarted() && secondPhaseEndTime >= block.timestamp) {\n', '      return(\n', '        getTokenAmount(_weiAmount).\n', '        add(\n', '          getTokenAmount(_weiAmount).\n', '          div(100).\n', '          mul(uint(secondPhaseBonus))\n', '        )\n', '      );\n', '    } else if (thirdPhaseStartTime <= block.timestamp && !hasEnded()) {\n', '      if (_weiAmount > 0 && _weiAmount < 2500 finney) {\n', '        return(\n', '          getTokenAmount(_weiAmount).\n', '          add(\n', '            getTokenAmount(_weiAmount).\n', '            div(100).\n', '            mul(uint(thirdPhaseBonus[0]))\n', '          )\n', '        );\n', '      } else if (_weiAmount >= 2510 finney && _weiAmount < 10000 finney) {\n', '        return(\n', '          getTokenAmount(_weiAmount).\n', '          add(\n', '            getTokenAmount(_weiAmount).\n', '            div(100).\n', '            mul(uint(thirdPhaseBonus[1]))\n', '          )\n', '        );\n', '      } else if (_weiAmount >= 10000 finney) {\n', '        return(\n', '          getTokenAmount(_weiAmount).\n', '          add(\n', '            getTokenAmount(_weiAmount).\n', '            div(100).\n', '            mul(uint(thirdPhaseBonus[2]))\n', '          )\n', '        );\n', '      }\n', '    } else {\n', '      return getTokenAmount(_weiAmount);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets an account tokens bonus\n', '   * @param _owner address the tokens owner\n', '   * @return uint owned tokens bonus\n', '   */\n', '  function bonusOf(address _owner) public view returns (uint) {\n', '    require(_owner != address(0));\n', '    return bonuses[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets an account tokens balance without freezed part of the bonuses\n', '   * @param _owner address the tokens owner\n', '   * @return uint owned tokens amount without freezed bonuses\n', '   */\n', '  function balanceWithoutFreezedBonus(address _owner)\n', '    public view returns (uint)\n', '  {\n', '    require(_owner != address(0));\n', '    if (block.timestamp >= thirdPhaseEndTime.add(90 days)) {\n', '      if (bonusOf(_owner) < 10000) {\n', '        return balanceOf(_owner);\n', '      } else {\n', '        return balanceOf(_owner).sub(bonuses[_owner].div(2));\n', '      }\n', '    } else if (block.timestamp >= thirdPhaseEndTime.add(180 days)) {\n', '      return balanceOf(_owner);\n', '    } else {\n', '      return balanceOf(_owner).sub(bonuses[_owner]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev ERC-20 compatible function to transfer tokens\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   */\n', '  function transfer(address _to, uint _value) public {\n', '    transfer(_to, _value, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Function to transfer tokens\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   * @param _data bytes metadata\n', '   */\n', '  function transfer(address _to, uint _value, bytes _data) public {\n', '    require(_value <= balanceWithoutFreezedBonus(msg.sender));\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    _safeTransfer(msg.sender, _to, _value, _data);\n', '\n', '    emit Transfer(msg.sender, _to, _value, _data);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to transfer tokens from the approved `msg.sender` account\n', '   * @param _from address the tokens owner\n', '   * @param _to address the tokens recepient\n', '   * @param _value uint amount of the tokens to be transferred\n', '   * @param _data bytes metadata\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint _value,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '    require(_value <= allowance(_from, msg.sender));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _safeTransfer(_from, _to, _value, _data);\n', '\n', '    emit Transfer(_from, _to, _value, _data);\n', '    emit Approval(_from, msg.sender, allowance(_from, msg.sender));\n', '  }\n', '\n', '  /**\n', '   * @dev Function to approve account to spend owned tokens\n', '   * @param _spender address the tokens spender\n', '   * @param _value uint amount of the tokens to be approved\n', '   */\n', '  function approve(address _spender, uint _value) public {\n', '    require(_spender != address(0));\n', '    require(_value <= balanceWithoutFreezedBonus(msg.sender));\n', '    allowed[msg.sender][_spender] = _value;\n', '    _safeApprove(_spender, _value);\n', '    emit Approval(msg.sender, _spender, _value);\n', '  }\n', '\n', '  /**\n', '   * @dev Function to increase spending tokens amount\n', '   * @param _spender address the tokens spender\n', '   * @param _value uint increase tokens amount\n', '   */\n', '  function increaseApproval(address _spender, uint _value) public {\n', '    require(_spender != address(0));\n', '    require(\n', '      allowance(msg.sender, _spender).add(_value) <=\n', '      balanceWithoutFreezedBonus(msg.sender)\n', '    );\n', '\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_value);\n', '    _safeApprove(_spender, allowance(msg.sender, _spender));\n', '    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\n', '  }\n', '\n', '  /**\n', '   * @dev Function to decrease spending tokens amount\n', '   * @param _spender address the tokens spender\n', '   * @param _value uint decrease tokens amount\n', '   */\n', '  function decreaseApproval(address _spender, uint _value) public {\n', '    require(_spender != address(0));\n', '    require(_value <= allowance(msg.sender, _spender));\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].sub(_value);\n', '    _safeApprove(_spender, allowance(msg.sender, _spender));\n', '    emit Approval(msg.sender, _spender, allowance(msg.sender, _spender));\n', '  }\n', '\n', '  /**\n', '   * @dev Function to set an account bonus\n', '   * @param _owner address the tokens owner\n', '   * @param _value uint bonus tokens amount\n', '   */\n', '  function setBonus(address _owner, uint _value, bool preSale)\n', '    public onlyOwner\n', '  {\n', '    require(_owner != address(0));\n', '    require(_value <= balanceOf(_owner));\n', '    require(bonusAmount > 0);\n', '    require(_value <= bonusAmount);\n', '\n', '    bonuses[_owner] = _value;\n', '    if (preSale) {\n', '      preSaleAmount = preSaleAmount.sub(_value);\n', '      transfer(_owner, _value, abi.encode("transfer the bonus"));\n', '    } else {\n', '      if (_value <= bonusAmount) {\n', '        bonusAmount = bonusAmount.sub(_value);\n', '        transfer(_owner, _value, abi.encode("transfer the bonus"));\n', '      }\n', '    }\n', '\n', '  }\n', '\n', '  /**\n', '   * @dev Function to refill balance of the specified account\n', '   * @param _to address the tokens recepient\n', '   * @param _weiAmount uint amount of the tokens to be transferred\n', '   */\n', '  function refill(address _to, uint _weiAmount) public onlyOwner {\n', '    require(_preValidateRefill(_to, _weiAmount));\n', '    setBonus(\n', '      _to,\n', '      getTokenAmountBonus(_weiAmount).sub(\n', '        getTokenAmount(_weiAmount)\n', '      ),\n', '      false\n', '    );\n', '    buyersCount = buyersCount.add(1);\n', '    saleAmount = saleAmount.sub(getTokenAmount(_weiAmount));\n', '    transfer(_to, getTokenAmount(_weiAmount), abi.encode("refill"));\n', '  }\n', '\n', '  /**\n', '   * @dev Function to refill balances of the specified accounts\n', '   * @param _to address[] the tokens recepients\n', '   * @param _weiAmount uint[] amounts of the tokens to be transferred\n', '   */\n', '  function refillArray(address[] _to, uint[] _weiAmount) public onlyOwner {\n', '    require(_to.length == _weiAmount.length);\n', '    for (uint i = 0; i < _to.length; i++) {\n', '      refill(_to[i], _weiAmount[i]);\n', '    }\n', '  }\n', '  \n', '  /**\n', '   * @dev Function that transfers tokens to team address\n', '   */\n', '  function setTeamFund() public onlyOwner{\n', '    transfer(\n', '      teamAddress,\n', '      teamAmount,\n', '      abi.encode("transfer reserved for team tokens to the team fund")\n', '      );\n', '    teamAmount = 0;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to finalize the sale and define reservedFund\n', '   * @param _reservedFund fund that holds unsold tokens \n', '   */\n', '  function finalize(Fund _reservedFund) public onlyOwner {\n', '    require(saleAmount > 0);\n', '    transfer(\n', '      address(_reservedFund),\n', '      saleAmount,\n', '      abi.encode("transfer reserved for team tokens to the team fund")\n', '    );\n', '    saleAmount = 0;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to call the `tokenFallback` if the tokens\n', "   * @dev recepient is the smart-contract. If the contract doesn't implement\n", '   * @dev this function transaction fails\n', '   * @param _from address the tokens owner\n', '   * @param _to address the tokens recepient (perhaps the contract)\n', '   * @param _value uint amount of the tokens to be transferred\n', '   * @param _data bytes metadata\n', '   */\n', '  function _safeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint _value,\n', '    bytes _data\n', '  )\n', '    internal\n', '  {\n', '    if (_to.isContract()) {\n', '      IERC223BasicReceiver receiver = IERC223BasicReceiver(_to);\n', '      receiver.tokenFallback(_from, _value, _data);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to call the `receiveApproval` if the tokens\n', "   * @dev recepient is the smart-contract. If the contract doesn't implement\n", '   * @dev this function transaction fails\n', '   * @param _spender address the tokens recepient (perhaps the contract)\n', '   * @param _value uint amount of the tokens to be approved\n', '   */\n', '  function _safeApprove(address _spender, uint _value) internal {\n', '    if (_spender.isContract()) {\n', '      IERC223Receiver receiver = IERC223Receiver(_spender);\n', '      receiver.receiveApproval(msg.sender, _value);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to prevalidate refill before execution\n', '   * @param _to address the tokens recepient\n', '   * @param _weiAmount uint amount of the tokens to be transferred\n', '   * @return bool `true` if the refill can be executed\n', '   */\n', '  function _preValidateRefill(address _to, uint _weiAmount)\n', '    internal view returns (bool)\n', '  {\n', '    return(\n', '      hasStarted() && _weiAmount > 0 &&  weiRaised.add(_weiAmount) <= cap\n', '      && _to != address(0) && _weiAmount >= minimumWeiAmount &&\n', '      getTokenAmount(_weiAmount) <= saleAmount\n', '    );\n', '  }\n', '}']
