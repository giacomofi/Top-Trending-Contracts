['pragma solidity 0.4.21;\n', '\n', '// File: contracts/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/HVT.sol\n', '\n', 'contract HVT is MintableToken, BurnableToken {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "HiVe Token";\n', '  string public symbol = "HVT";\n', '  uint8 public decimals = 18;\n', '\n', '  enum State {Blocked,Burnable,Transferable}\n', '  State public state = State.Blocked;\n', '\n', '  // functions overrides in order to maintain the token locked during the ICO\n', '  function transfer(address _to, uint256 _value) public returns(bool) {\n', '    require(state == State.Transferable);\n', '    return super.transfer(_to,_value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '      require(state == State.Transferable);\n', '      return super.transferFrom(_from,_to,_value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(state == State.Transferable);\n', '    return super.approve(_spender,_value);\n', '  }\n', '\n', '  function burn(uint256 _value) public {\n', '    require(state == State.Transferable || state == State.Burnable);\n', '    super.burn(_value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    require(state == State.Transferable);\n', '    super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    require(state == State.Transferable);\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '  // enable token transfers\n', '  function enableTokenTransfers() public onlyOwner {\n', '    state = State.Transferable;\n', '  }\n', '\n', '  // enable token burn\n', '  function enableTokenBurn() public onlyOwner {\n', '    state = State.Burnable;\n', '  }\n', '\n', '  // batch transfer with different amounts for each address\n', '  function batchTransferDiff(address[] _to, uint256[] _amount) public {\n', '    require(state == State.Transferable);\n', '    require(_to.length == _amount.length);\n', '    uint256 totalAmount = arraySum(_amount);\n', '    require(totalAmount <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '    for(uint i;i < _to.length;i++){\n', '      balances[_to[i]] = balances[_to[i]].add(_amount[i]);\n', '      Transfer(msg.sender,_to[i],_amount[i]);\n', '    }\n', '  }\n', '\n', '  // batch transfer with same amount for each address\n', '  function batchTransferSame(address[] _to, uint256 _amount) public {\n', '    require(state == State.Transferable);\n', '    uint256 totalAmount = _amount.mul(_to.length);\n', '    require(totalAmount <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '    for(uint i;i < _to.length;i++){\n', '      balances[_to[i]] = balances[_to[i]].add(_amount);\n', '      Transfer(msg.sender,_to[i],_amount);\n', '    }\n', '  }\n', '\n', '  // get sum of array values\n', '  function arraySum(uint256[] _amount) internal pure returns(uint256){\n', '    uint256 totalAmount;\n', '    for(uint i;i < _amount.length;i++){\n', '      totalAmount = totalAmount.add(_amount[i]);\n', '    }\n', '    return totalAmount;\n', '  }\n', '}\n', '\n', '// File: contracts/ICOEngineInterface.sol\n', '\n', 'contract ICOEngineInterface {\n', '\n', '    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n', '    function started() public view returns(bool);\n', '\n', '    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n', '    function ended() public view returns(bool);\n', '\n', '    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\n', '    function startTime() public view returns(uint);\n', '\n', '    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\n', '    function endTime() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of startTime\n', '    // Returns the starting block number of the ico, must return 0 if it depends on the time stamp\n', '    // function startBlock() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of endTime\n', '    // Returns theending block number of the ico, must retrun 0 if it depends on the time stamp\n', '    // function endBlock() public view returns(uint);\n', '\n', '    // returns the total number of the tokens available for the sale, must not change when the ico is started\n', '    function totalTokens() public view returns(uint);\n', '\n', '    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be equal to totalTokens(),\n', '    // then it will decrease. It is used to calculate the percentage of sold tokens as remainingTokens() / totalTokens()\n', '    function remainingTokens() public view returns(uint);\n', '\n', '    // return the price as number of tokens released for each ether\n', '    function price() public view returns(uint);\n', '}\n', '\n', '// File: contracts/KYCBase.sol\n', '\n', '//import "./SafeMath.sol";\n', '\n', '\n', '// Abstract base contract\n', 'contract KYCBase {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => bool) public isKycSigner;\n', '    mapping (uint64 => uint256) public alreadyPayed;\n', '\n', '    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\n', '\n', '    function KYCBase(address [] kycSigners) internal {\n', '        for (uint i = 0; i < kycSigners.length; i++) {\n', '            isKycSigner[kycSigners[i]] = true;\n', '        }\n', '    }\n', '\n', '    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\n', '    function releaseTokensTo(address buyer) internal returns(bool);\n', '\n', '    // This method can be overridden to enable some sender to buy token for a different address\n', '    function senderAllowedFor(address buyer)\n', '        internal view returns(bool)\n', '    {\n', '        return buyer == msg.sender;\n', '    }\n', '\n', '    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        public payable returns (bool)\n', '    {\n', '        require(senderAllowedFor(buyerAddress));\n', '        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        public payable returns (bool)\n', '    {\n', '        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        private returns (bool)\n', '    {\n', '        // check the signature\n', '        bytes32 hash = sha256("Eidoo icoengine authorization", this, buyerAddress, buyerId, maxAmount);\n', '        address signer = ecrecover(hash, v, r, s);\n', '        if (!isKycSigner[signer]) {\n', '            revert();\n', '        } else {\n', '            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\n', '            require(totalPayed <= maxAmount);\n', '            alreadyPayed[buyerId] = totalPayed;\n', '            KycVerified(signer, buyerAddress, buyerId, maxAmount);\n', '            return releaseTokensTo(buyerAddress);\n', '        }\n', '    }\n', '\n', '    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n', '    function () public {\n', '        revert();\n', '    }\n', '}\n', '\n', '// File: contracts/RefundVault.sol\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/TokenTimelock.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/HivePowerCrowdsale.sol\n', '\n', '// The Hive Power crowdsale contract\n', 'contract HivePowerCrowdsale is Ownable, ICOEngineInterface, KYCBase {\n', '    using SafeMath for uint;\n', '    enum State {Running,Success,Failure}\n', '\n', '    State public state;\n', '\n', '    HVT public token;\n', '\n', '    address public wallet;\n', '\n', '    // from ICOEngineInterface\n', '    uint [] public prices;\n', '\n', '    // from ICOEngineInterface\n', '    uint public startTime;\n', '\n', '    // from ICOEngineInterface\n', '    uint public endTime;\n', '\n', '    // from ICOEngineInterface\n', '    uint [] public caps;\n', '\n', '    // from ICOEngineInterface\n', '    uint public remainingTokens;\n', '\n', '    // from ICOEngineInterface\n', '    uint public totalTokens;\n', '\n', '    // amount of wei raised\n', '    uint public weiRaised;\n', '\n', '    // soft goal in wei\n', '    uint public goal;\n', '\n', '    // boolean to make sure preallocate is called only once\n', '    bool public isPreallocated;\n', '\n', '    // preallocated company token\n', '    uint public companyTokens;\n', '\n', '    // preallocated token for founders\n', '    uint public foundersTokens;\n', '\n', '    // vault for refunding\n', '    RefundVault public vault;\n', '\n', '    // addresses of time-locked founder vaults\n', '    address [4] public timeLockAddresses;\n', '\n', '    // step in seconds for token release\n', '    uint public stepLockedToken;\n', '\n', '    // allowed overshoot when crossing the bonus barrier (in wei)\n', '    uint public overshoot;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * event for when weis are sent back to buyer\n', '    * @param purchaser who paid for the tokens and is getting back some ether\n', '    * @param amount of weis sent back\n', '    */\n', '    event SentBack(address indexed purchaser, uint256 amount);\n', '\n', '    /* event for ICO successfully finalized */\n', '    event FinalizedOK();\n', '\n', '    /* event for ICO not successfully finalized */\n', '    event FinalizedNOK();\n', '\n', '    /**\n', '     * event for additional token minting\n', '     * @param timelock address of the time-lock contract\n', '     * @param amount amount of tokens minted\n', '     * @param releaseTime release time of tokens\n', '     * @param wallet address of the wallet that can get the token released\n', '     */\n', '    event TimeLocked(address indexed timelock, uint256 amount, uint256 releaseTime, address indexed wallet);\n', '\n', '    /**\n', '     * event for additional token minting\n', '     * @param to who got the tokens\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event Preallocated(address indexed to, uint256 amount);\n', '\n', '    /**\n', '     *  Constructor\n', '     */\n', '    function HivePowerCrowdsale(address [] kycSigner, address _token, address _wallet, uint _startTime, uint _endTime, uint [] _prices, uint [] _caps, uint _goal, uint _companyTokens, uint _foundersTokens, uint _stepLockedToken, uint _overshoot)\n', '        public\n', '        KYCBase(kycSigner)\n', '    {\n', '        require(_token != address(0));\n', '        require(_wallet != address(0));\n', '        require(_startTime > now);\n', '        require(_endTime > _startTime);\n', '        require(_prices.length == _caps.length);\n', '\n', '        for (uint256 i=0; i < _caps.length -1; i++)\n', '        {\n', '          require(_caps[i+1].sub(_caps[i]) > _overshoot.mul(_prices[i]));\n', '        }\n', '\n', '        token = HVT(_token);\n', '        wallet = _wallet;\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        prices = _prices;\n', '        caps = _caps;\n', '        totalTokens = _caps[_caps.length-1];\n', '        remainingTokens = _caps[_caps.length-1];\n', '        vault = new RefundVault(_wallet);\n', '        goal = _goal;\n', '        companyTokens = _companyTokens;\n', '        foundersTokens = _foundersTokens;\n', '        stepLockedToken = _stepLockedToken;\n', '        overshoot = _overshoot;\n', '        state = State.Running;\n', '        isPreallocated = false;\n', '    }\n', '\n', '    function preallocate() onlyOwner public {\n', '      // can be called only once\n', '      require(!isPreallocated);\n', '\n', '      // mint tokens for team founders in timelocked vaults\n', '      uint numTimelocks = 4;\n', '      uint amount = foundersTokens / numTimelocks; //amount of token per vault\n', '      uint256 releaseTime = endTime;\n', '      for(uint256 i=0; i < numTimelocks; i++)\n', '      {\n', '        // update releaseTime according to the step\n', '        releaseTime = releaseTime.add(stepLockedToken);\n', '        // create tokentimelock\n', '        TokenTimelock timeLock = new TokenTimelock(token, wallet, releaseTime);\n', '        // keep address in memory\n', '        timeLockAddresses[i] = address(timeLock);\n', '        // mint tokens in tokentimelock\n', '        token.mint(address(timeLock), amount);\n', '        // generate event\n', '        TimeLocked(address(timeLock), amount, releaseTime, wallet);\n', '      }\n', '\n', '      //teamTimeLocks.mintTokens(teamTokens);\n', '      // Mint additional tokens (referral, airdrops, etc.)\n', '      token.mint(wallet, companyTokens);\n', '      Preallocated(wallet, companyTokens);\n', '      // cannot be called anymore\n', '      isPreallocated = true;\n', '    }\n', '\n', '    // function that is called from KYCBase\n', '    function releaseTokensTo(address buyer) internal returns(bool) {\n', '        // needs to be started\n', '        require(started());\n', '        // and not ended\n', '        require(!ended());\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 weiBack = 0;\n', '        uint currentPrice = price();\n', '        uint currentCap = getCap();\n', '        uint tokens = weiAmount.mul(currentPrice);\n', '        uint tokenRaised = totalTokens - remainingTokens;\n', '\n', '        //check if tokens exceed the amount of tokens that can be minted\n', '        if (tokenRaised.add(tokens) > currentCap)\n', '        {\n', '          tokens = currentCap.sub(tokenRaised);\n', '          weiAmount = tokens.div(currentPrice);\n', '          weiBack = msg.value - weiAmount;\n', '        }\n', '        //require(tokenRaised.add(tokens) <= currentCap);\n', '\n', '        weiRaised = weiRaised + weiAmount;\n', '        remainingTokens = remainingTokens.sub(tokens);\n', '\n', '        // mint tokens and transfer funds\n', '        token.mint(buyer, tokens);\n', '        forwardFunds(weiAmount);\n', '\n', '        if (weiBack>0)\n', '        {\n', '          msg.sender.transfer(weiBack);\n', '          SentBack(msg.sender, weiBack);\n', '        }\n', '\n', '        TokenPurchase(msg.sender, buyer, weiAmount, tokens);\n', '        return true;\n', '    }\n', '\n', '    function forwardFunds(uint256 weiAmount) internal {\n', '      vault.deposit.value(weiAmount)(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev finalize an ICO in dependency on the goal reaching:\n', '     * 1) reached goal (successful ICO):\n', '     * -> release sold token for the transfers\n', '     * -> close the vault\n', '     * -> close the ICO successfully\n', '     * 2) not reached goal (not successful ICO):\n', '     * -> call finalizeNOK()\n', '     */\n', '    function finalize() onlyOwner public {\n', '      require(state == State.Running);\n', '      require(ended());\n', '\n', '      // Check the soft goal reaching\n', '      if(weiRaised >= goal) {\n', '        // if goal reached\n', '\n', '        // stop the minting\n', '        token.finishMinting();\n', '        // enable token transfers\n', '        token.enableTokenTransfers();\n', '        // close the vault and transfer funds to wallet\n', '        vault.close();\n', '\n', '        // ICO successfully finalized\n', '        // set state to Success\n', '        state = State.Success;\n', '        FinalizedOK();\n', '      }\n', '      else {\n', '        // if goal NOT reached\n', '        // ICO not successfully finalized\n', '        finalizeNOK();\n', '      }\n', '    }\n', '\n', '    /**\n', '     * @dev finalize an unsuccessful ICO:\n', '     * -> enable the refund\n', '     * -> close the ICO not successfully\n', '     */\n', '     function finalizeNOK() onlyOwner public {\n', '       // run checks again because this is a public function\n', '       require(state == State.Running);\n', '       require(ended());\n', '       // stop the minting\n', '       token.finishMinting();\n', '       // allow to burn tokens\n', '       token.enableTokenBurn();\n', '       // enable the refunds\n', '       vault.enableRefunds();\n', '       // ICO not successfully finalised\n', '       // set state to Failure\n', '       state = State.Failure;\n', '       FinalizedNOK();\n', '     }\n', '\n', '     // if crowdsale is unsuccessful, investors can claim refunds here\n', '     function claimRefund() public {\n', '       require(state == State.Failure);\n', '       vault.refund(msg.sender);\n', '    }\n', '\n', '    // get the next cap as a function of the amount of sold token\n', '    function getCap() public view returns(uint){\n', '      uint tokenRaised=totalTokens-remainingTokens;\n', '      for (uint i=0;i<caps.length-1;i++){\n', '        if (tokenRaised < caps[i])\n', '        {\n', '          // allow for a an overshoot (only when bonus is applied)\n', '          uint tokenPerOvershoot = overshoot * prices[i];\n', '          return(caps[i].add(tokenPerOvershoot));\n', '        }\n', '      }\n', '      // but not on the total amount of tokens\n', '      return(totalTokens);\n', '    }\n', '\n', '    // from ICOEngineInterface\n', '    function started() public view returns(bool) {\n', '        return now >= startTime;\n', '    }\n', '\n', '    // from ICOEngineInterface\n', '    function ended() public view returns(bool) {\n', '        return now >= endTime || remainingTokens == 0;\n', '    }\n', '\n', '    function startTime() public view returns(uint) {\n', '      return(startTime);\n', '    }\n', '\n', '    function endTime() public view returns(uint){\n', '      return(endTime);\n', '    }\n', '\n', '    function totalTokens() public view returns(uint){\n', '      return(totalTokens);\n', '    }\n', '\n', '    function remainingTokens() public view returns(uint){\n', '      return(remainingTokens);\n', '    }\n', '\n', '    // return the price as number of tokens released for each ether\n', '    function price() public view returns(uint){\n', '      uint tokenRaised=totalTokens-remainingTokens;\n', '      for (uint i=0;i<caps.length-1;i++){\n', '        if (tokenRaised < caps[i])\n', '        {\n', '          return(prices[i]);\n', '        }\n', '      }\n', '      return(prices[prices.length-1]);\n', '    }\n', '\n', '    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ERC20Interface.sol\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']
['pragma solidity 0.4.21;\n', '\n', '// File: contracts/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '// File: contracts/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/HVT.sol\n', '\n', 'contract HVT is MintableToken, BurnableToken {\n', '  using SafeMath for uint256;\n', '\n', '  string public name = "HiVe Token";\n', '  string public symbol = "HVT";\n', '  uint8 public decimals = 18;\n', '\n', '  enum State {Blocked,Burnable,Transferable}\n', '  State public state = State.Blocked;\n', '\n', '  // functions overrides in order to maintain the token locked during the ICO\n', '  function transfer(address _to, uint256 _value) public returns(bool) {\n', '    require(state == State.Transferable);\n', '    return super.transfer(_to,_value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n', '      require(state == State.Transferable);\n', '      return super.transferFrom(_from,_to,_value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    require(state == State.Transferable);\n', '    return super.approve(_spender,_value);\n', '  }\n', '\n', '  function burn(uint256 _value) public {\n', '    require(state == State.Transferable || state == State.Burnable);\n', '    super.burn(_value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    require(state == State.Transferable);\n', '    super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    require(state == State.Transferable);\n', '    super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '\n', '  // enable token transfers\n', '  function enableTokenTransfers() public onlyOwner {\n', '    state = State.Transferable;\n', '  }\n', '\n', '  // enable token burn\n', '  function enableTokenBurn() public onlyOwner {\n', '    state = State.Burnable;\n', '  }\n', '\n', '  // batch transfer with different amounts for each address\n', '  function batchTransferDiff(address[] _to, uint256[] _amount) public {\n', '    require(state == State.Transferable);\n', '    require(_to.length == _amount.length);\n', '    uint256 totalAmount = arraySum(_amount);\n', '    require(totalAmount <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '    for(uint i;i < _to.length;i++){\n', '      balances[_to[i]] = balances[_to[i]].add(_amount[i]);\n', '      Transfer(msg.sender,_to[i],_amount[i]);\n', '    }\n', '  }\n', '\n', '  // batch transfer with same amount for each address\n', '  function batchTransferSame(address[] _to, uint256 _amount) public {\n', '    require(state == State.Transferable);\n', '    uint256 totalAmount = _amount.mul(_to.length);\n', '    require(totalAmount <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(totalAmount);\n', '    for(uint i;i < _to.length;i++){\n', '      balances[_to[i]] = balances[_to[i]].add(_amount);\n', '      Transfer(msg.sender,_to[i],_amount);\n', '    }\n', '  }\n', '\n', '  // get sum of array values\n', '  function arraySum(uint256[] _amount) internal pure returns(uint256){\n', '    uint256 totalAmount;\n', '    for(uint i;i < _amount.length;i++){\n', '      totalAmount = totalAmount.add(_amount[i]);\n', '    }\n', '    return totalAmount;\n', '  }\n', '}\n', '\n', '// File: contracts/ICOEngineInterface.sol\n', '\n', 'contract ICOEngineInterface {\n', '\n', '    // false if the ico is not started, true if the ico is started and running, true if the ico is completed\n', '    function started() public view returns(bool);\n', '\n', '    // false if the ico is not started, false if the ico is started and running, true if the ico is completed\n', '    function ended() public view returns(bool);\n', '\n', '    // time stamp of the starting time of the ico, must return 0 if it depends on the block number\n', '    function startTime() public view returns(uint);\n', '\n', '    // time stamp of the ending time of the ico, must retrun 0 if it depends on the block number\n', '    function endTime() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of startTime\n', '    // Returns the starting block number of the ico, must return 0 if it depends on the time stamp\n', '    // function startBlock() public view returns(uint);\n', '\n', '    // Optional function, can be implemented in place of endTime\n', '    // Returns theending block number of the ico, must retrun 0 if it depends on the time stamp\n', '    // function endBlock() public view returns(uint);\n', '\n', '    // returns the total number of the tokens available for the sale, must not change when the ico is started\n', '    function totalTokens() public view returns(uint);\n', '\n', '    // returns the number of the tokens available for the ico. At the moment that the ico starts it must be equal to totalTokens(),\n', '    // then it will decrease. It is used to calculate the percentage of sold tokens as remainingTokens() / totalTokens()\n', '    function remainingTokens() public view returns(uint);\n', '\n', '    // return the price as number of tokens released for each ether\n', '    function price() public view returns(uint);\n', '}\n', '\n', '// File: contracts/KYCBase.sol\n', '\n', '//import "./SafeMath.sol";\n', '\n', '\n', '// Abstract base contract\n', 'contract KYCBase {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => bool) public isKycSigner;\n', '    mapping (uint64 => uint256) public alreadyPayed;\n', '\n', '    event KycVerified(address indexed signer, address buyerAddress, uint64 buyerId, uint maxAmount);\n', '\n', '    function KYCBase(address [] kycSigners) internal {\n', '        for (uint i = 0; i < kycSigners.length; i++) {\n', '            isKycSigner[kycSigners[i]] = true;\n', '        }\n', '    }\n', '\n', '    // Must be implemented in descending contract to assign tokens to the buyers. Called after the KYC verification is passed\n', '    function releaseTokensTo(address buyer) internal returns(bool);\n', '\n', '    // This method can be overridden to enable some sender to buy token for a different address\n', '    function senderAllowedFor(address buyer)\n', '        internal view returns(bool)\n', '    {\n', '        return buyer == msg.sender;\n', '    }\n', '\n', '    function buyTokensFor(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        public payable returns (bool)\n', '    {\n', '        require(senderAllowedFor(buyerAddress));\n', '        return buyImplementation(buyerAddress, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyTokens(uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        public payable returns (bool)\n', '    {\n', '        return buyImplementation(msg.sender, buyerId, maxAmount, v, r, s);\n', '    }\n', '\n', '    function buyImplementation(address buyerAddress, uint64 buyerId, uint maxAmount, uint8 v, bytes32 r, bytes32 s)\n', '        private returns (bool)\n', '    {\n', '        // check the signature\n', '        bytes32 hash = sha256("Eidoo icoengine authorization", this, buyerAddress, buyerId, maxAmount);\n', '        address signer = ecrecover(hash, v, r, s);\n', '        if (!isKycSigner[signer]) {\n', '            revert();\n', '        } else {\n', '            uint256 totalPayed = alreadyPayed[buyerId].add(msg.value);\n', '            require(totalPayed <= maxAmount);\n', '            alreadyPayed[buyerId] = totalPayed;\n', '            KycVerified(signer, buyerAddress, buyerId, maxAmount);\n', '            return releaseTokensTo(buyerAddress);\n', '        }\n', '    }\n', '\n', '    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n', '    function () public {\n', '        revert();\n', '    }\n', '}\n', '\n', '// File: contracts/RefundVault.sol\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: contracts/TokenTimelock.sol\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '// File: contracts/HivePowerCrowdsale.sol\n', '\n', '// The Hive Power crowdsale contract\n', 'contract HivePowerCrowdsale is Ownable, ICOEngineInterface, KYCBase {\n', '    using SafeMath for uint;\n', '    enum State {Running,Success,Failure}\n', '\n', '    State public state;\n', '\n', '    HVT public token;\n', '\n', '    address public wallet;\n', '\n', '    // from ICOEngineInterface\n', '    uint [] public prices;\n', '\n', '    // from ICOEngineInterface\n', '    uint public startTime;\n', '\n', '    // from ICOEngineInterface\n', '    uint public endTime;\n', '\n', '    // from ICOEngineInterface\n', '    uint [] public caps;\n', '\n', '    // from ICOEngineInterface\n', '    uint public remainingTokens;\n', '\n', '    // from ICOEngineInterface\n', '    uint public totalTokens;\n', '\n', '    // amount of wei raised\n', '    uint public weiRaised;\n', '\n', '    // soft goal in wei\n', '    uint public goal;\n', '\n', '    // boolean to make sure preallocate is called only once\n', '    bool public isPreallocated;\n', '\n', '    // preallocated company token\n', '    uint public companyTokens;\n', '\n', '    // preallocated token for founders\n', '    uint public foundersTokens;\n', '\n', '    // vault for refunding\n', '    RefundVault public vault;\n', '\n', '    // addresses of time-locked founder vaults\n', '    address [4] public timeLockAddresses;\n', '\n', '    // step in seconds for token release\n', '    uint public stepLockedToken;\n', '\n', '    // allowed overshoot when crossing the bonus barrier (in wei)\n', '    uint public overshoot;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * event for when weis are sent back to buyer\n', '    * @param purchaser who paid for the tokens and is getting back some ether\n', '    * @param amount of weis sent back\n', '    */\n', '    event SentBack(address indexed purchaser, uint256 amount);\n', '\n', '    /* event for ICO successfully finalized */\n', '    event FinalizedOK();\n', '\n', '    /* event for ICO not successfully finalized */\n', '    event FinalizedNOK();\n', '\n', '    /**\n', '     * event for additional token minting\n', '     * @param timelock address of the time-lock contract\n', '     * @param amount amount of tokens minted\n', '     * @param releaseTime release time of tokens\n', '     * @param wallet address of the wallet that can get the token released\n', '     */\n', '    event TimeLocked(address indexed timelock, uint256 amount, uint256 releaseTime, address indexed wallet);\n', '\n', '    /**\n', '     * event for additional token minting\n', '     * @param to who got the tokens\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event Preallocated(address indexed to, uint256 amount);\n', '\n', '    /**\n', '     *  Constructor\n', '     */\n', '    function HivePowerCrowdsale(address [] kycSigner, address _token, address _wallet, uint _startTime, uint _endTime, uint [] _prices, uint [] _caps, uint _goal, uint _companyTokens, uint _foundersTokens, uint _stepLockedToken, uint _overshoot)\n', '        public\n', '        KYCBase(kycSigner)\n', '    {\n', '        require(_token != address(0));\n', '        require(_wallet != address(0));\n', '        require(_startTime > now);\n', '        require(_endTime > _startTime);\n', '        require(_prices.length == _caps.length);\n', '\n', '        for (uint256 i=0; i < _caps.length -1; i++)\n', '        {\n', '          require(_caps[i+1].sub(_caps[i]) > _overshoot.mul(_prices[i]));\n', '        }\n', '\n', '        token = HVT(_token);\n', '        wallet = _wallet;\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        prices = _prices;\n', '        caps = _caps;\n', '        totalTokens = _caps[_caps.length-1];\n', '        remainingTokens = _caps[_caps.length-1];\n', '        vault = new RefundVault(_wallet);\n', '        goal = _goal;\n', '        companyTokens = _companyTokens;\n', '        foundersTokens = _foundersTokens;\n', '        stepLockedToken = _stepLockedToken;\n', '        overshoot = _overshoot;\n', '        state = State.Running;\n', '        isPreallocated = false;\n', '    }\n', '\n', '    function preallocate() onlyOwner public {\n', '      // can be called only once\n', '      require(!isPreallocated);\n', '\n', '      // mint tokens for team founders in timelocked vaults\n', '      uint numTimelocks = 4;\n', '      uint amount = foundersTokens / numTimelocks; //amount of token per vault\n', '      uint256 releaseTime = endTime;\n', '      for(uint256 i=0; i < numTimelocks; i++)\n', '      {\n', '        // update releaseTime according to the step\n', '        releaseTime = releaseTime.add(stepLockedToken);\n', '        // create tokentimelock\n', '        TokenTimelock timeLock = new TokenTimelock(token, wallet, releaseTime);\n', '        // keep address in memory\n', '        timeLockAddresses[i] = address(timeLock);\n', '        // mint tokens in tokentimelock\n', '        token.mint(address(timeLock), amount);\n', '        // generate event\n', '        TimeLocked(address(timeLock), amount, releaseTime, wallet);\n', '      }\n', '\n', '      //teamTimeLocks.mintTokens(teamTokens);\n', '      // Mint additional tokens (referral, airdrops, etc.)\n', '      token.mint(wallet, companyTokens);\n', '      Preallocated(wallet, companyTokens);\n', '      // cannot be called anymore\n', '      isPreallocated = true;\n', '    }\n', '\n', '    // function that is called from KYCBase\n', '    function releaseTokensTo(address buyer) internal returns(bool) {\n', '        // needs to be started\n', '        require(started());\n', '        // and not ended\n', '        require(!ended());\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 weiBack = 0;\n', '        uint currentPrice = price();\n', '        uint currentCap = getCap();\n', '        uint tokens = weiAmount.mul(currentPrice);\n', '        uint tokenRaised = totalTokens - remainingTokens;\n', '\n', '        //check if tokens exceed the amount of tokens that can be minted\n', '        if (tokenRaised.add(tokens) > currentCap)\n', '        {\n', '          tokens = currentCap.sub(tokenRaised);\n', '          weiAmount = tokens.div(currentPrice);\n', '          weiBack = msg.value - weiAmount;\n', '        }\n', '        //require(tokenRaised.add(tokens) <= currentCap);\n', '\n', '        weiRaised = weiRaised + weiAmount;\n', '        remainingTokens = remainingTokens.sub(tokens);\n', '\n', '        // mint tokens and transfer funds\n', '        token.mint(buyer, tokens);\n', '        forwardFunds(weiAmount);\n', '\n', '        if (weiBack>0)\n', '        {\n', '          msg.sender.transfer(weiBack);\n', '          SentBack(msg.sender, weiBack);\n', '        }\n', '\n', '        TokenPurchase(msg.sender, buyer, weiAmount, tokens);\n', '        return true;\n', '    }\n', '\n', '    function forwardFunds(uint256 weiAmount) internal {\n', '      vault.deposit.value(weiAmount)(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev finalize an ICO in dependency on the goal reaching:\n', '     * 1) reached goal (successful ICO):\n', '     * -> release sold token for the transfers\n', '     * -> close the vault\n', '     * -> close the ICO successfully\n', '     * 2) not reached goal (not successful ICO):\n', '     * -> call finalizeNOK()\n', '     */\n', '    function finalize() onlyOwner public {\n', '      require(state == State.Running);\n', '      require(ended());\n', '\n', '      // Check the soft goal reaching\n', '      if(weiRaised >= goal) {\n', '        // if goal reached\n', '\n', '        // stop the minting\n', '        token.finishMinting();\n', '        // enable token transfers\n', '        token.enableTokenTransfers();\n', '        // close the vault and transfer funds to wallet\n', '        vault.close();\n', '\n', '        // ICO successfully finalized\n', '        // set state to Success\n', '        state = State.Success;\n', '        FinalizedOK();\n', '      }\n', '      else {\n', '        // if goal NOT reached\n', '        // ICO not successfully finalized\n', '        finalizeNOK();\n', '      }\n', '    }\n', '\n', '    /**\n', '     * @dev finalize an unsuccessful ICO:\n', '     * -> enable the refund\n', '     * -> close the ICO not successfully\n', '     */\n', '     function finalizeNOK() onlyOwner public {\n', '       // run checks again because this is a public function\n', '       require(state == State.Running);\n', '       require(ended());\n', '       // stop the minting\n', '       token.finishMinting();\n', '       // allow to burn tokens\n', '       token.enableTokenBurn();\n', '       // enable the refunds\n', '       vault.enableRefunds();\n', '       // ICO not successfully finalised\n', '       // set state to Failure\n', '       state = State.Failure;\n', '       FinalizedNOK();\n', '     }\n', '\n', '     // if crowdsale is unsuccessful, investors can claim refunds here\n', '     function claimRefund() public {\n', '       require(state == State.Failure);\n', '       vault.refund(msg.sender);\n', '    }\n', '\n', '    // get the next cap as a function of the amount of sold token\n', '    function getCap() public view returns(uint){\n', '      uint tokenRaised=totalTokens-remainingTokens;\n', '      for (uint i=0;i<caps.length-1;i++){\n', '        if (tokenRaised < caps[i])\n', '        {\n', '          // allow for a an overshoot (only when bonus is applied)\n', '          uint tokenPerOvershoot = overshoot * prices[i];\n', '          return(caps[i].add(tokenPerOvershoot));\n', '        }\n', '      }\n', '      // but not on the total amount of tokens\n', '      return(totalTokens);\n', '    }\n', '\n', '    // from ICOEngineInterface\n', '    function started() public view returns(bool) {\n', '        return now >= startTime;\n', '    }\n', '\n', '    // from ICOEngineInterface\n', '    function ended() public view returns(bool) {\n', '        return now >= endTime || remainingTokens == 0;\n', '    }\n', '\n', '    function startTime() public view returns(uint) {\n', '      return(startTime);\n', '    }\n', '\n', '    function endTime() public view returns(uint){\n', '      return(endTime);\n', '    }\n', '\n', '    function totalTokens() public view returns(uint){\n', '      return(totalTokens);\n', '    }\n', '\n', '    function remainingTokens() public view returns(uint){\n', '      return(remainingTokens);\n', '    }\n', '\n', '    // return the price as number of tokens released for each ether\n', '    function price() public view returns(uint){\n', '      uint tokenRaised=totalTokens-remainingTokens;\n', '      for (uint i=0;i<caps.length-1;i++){\n', '        if (tokenRaised < caps[i])\n', '        {\n', '          return(prices[i]);\n', '        }\n', '      }\n', '      return(prices[prices.length-1]);\n', '    }\n', '\n', '    // No payable fallback function, the tokens must be buyed using the functions buyTokens and buyTokensFor\n', '    function () public {\n', '        revert();\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/ERC20Interface.sol\n', '\n', 'contract ERC20Interface {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']
