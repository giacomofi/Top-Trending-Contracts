['pragma solidity ^0.4.24;\n', '\n', '/*\n', '\n', '    ____  _______   ________   __________  _   ____________  ____  __ \n', '   / __ \\/ ____/ | / /_  __/  / ____/ __ \\/ | / /_  __/ __ \\/ __ \\/ / \n', '  / /_/ / __/ /  |/ / / /    / /   / / / /  |/ / / / / /_/ / / / / /  \n', ' / _, _/ /___/ /|  / / /    / /___/ /_/ / /|  / / / / _, _/ /_/ / /___\n', '/_/ |_/_____/_/ |_/ /_/     \\____/\\____/_/ |_/ /_/ /_/ |_|\\____/_____/\n', '                                                                      \n', 'website:    https://rentcontrol.tk\n', '\n', 'discord:    https://discord.gg/X78kgWp\n', '\n', 'Buy Property.   Collect Rent.\n', '\n', 'Rent Control is a strategy game where you buy property levels and collect rent from other owners.\n', '\n', 'Game begins with 20 property levels.    Level 1 is the best and most valuable.    When you own a property level, you collect rent from the purchases of every other level.\n', 'Different levels have different rates of rent.    Level 1 collects 10% of all rent distributions from each purchase.\n', 'Once you buy a property level it is then available for purchase at a price 10% higher than what you paid.    So you will earn rent while you won the property AND you will have a capital gain\n', 'when someone buys the level from you.\n', '\n', 'Property owner receives 50% of the gain from a sale.\n', '\n', '30% of gains are distributed to other property owners based on their rates of rent.\n', '\n', '20% of gains are distributed to dev.\n', '\n', 'Masternodes recieve 5% of any distributions from buyers using the link.\n', '\n', '*/\n', '\n', 'contract RENTCONTROL {\n', '    /*=================================\n', '    =        MODIFIERS        =\n', '    =================================*/\n', '   \n', '\n', '\n', '    modifier onlyOwner(){\n', '        \n', '        require(msg.sender == dev);\n', '        _;\n', '    }\n', '    \n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '    event onLevelPurchase(\n', '        address customerAddress,\n', '        uint256 incomingEthereum,\n', '        uint256 level,\n', '        uint256 newPrice\n', '    );\n', '    \n', '    event onWithdraw(\n', '        address customerAddress,\n', '        uint256 ethereumWithdrawn\n', '    );\n', '    \n', '    // ERC20\n', '    event Transfer(\n', '        address from,\n', '        address to,\n', '        uint256 level\n', '    );\n', '\n', '    \n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '    string public name = "RENT CONTROL";\n', '    string public symbol = "LEVEL";\n', '\n', '    uint8 constant public devDivRate = 20;\n', '    uint8 constant public ownerDivRate = 50;\n', '    uint8 constant public distDivRate = 30;\n', '\n', '    uint8 constant public referralRate = 5; \n', '\n', '    uint8 constant public decimals = 18;\n', '  \n', '    uint public totalLevelValue = 2465e16;\n', '\n', '    \n', '   /*================================\n', '    =            DATASETS            =\n', '    ================================*/\n', '    \n', '    mapping(uint => address) internal levelOwner;\n', '    mapping(uint => uint) public levelPrice;\n', '    mapping(uint => uint) internal levelPreviousPrice;\n', '    mapping(address => uint) internal ownerAccounts;\n', '    mapping(uint => uint) internal totalLevelDivs;\n', '    mapping(uint => string) internal levelName;\n', '\n', '    uint levelPriceIncrement = 110;\n', '    uint totalDivsProduced = 0;\n', '\n', '    uint public maxLevels = 200;\n', '    \n', '    uint public initialPrice = 5e16;   //0.05 ETH\n', '\n', '    uint public nextAvailableLevel;\n', '\n', '    bool allowReferral = false;\n', '\n', '    bool allowAutoNewLevel = false;\n', '   \n', '    address dev;\n', '\n', '    \n', '    \n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '    /*\n', '    * -- APPLICATION ENTRY POINTS --  \n', '    */\n', '    function RENTCONTROL()\n', '        public\n', '    {\n', '        dev = msg.sender;\n', '        nextAvailableLevel = 21;\n', '\n', '        levelOwner[1] = dev;\n', '        levelPrice[1] = 5e18;\n', '        levelPreviousPrice[1] = levelPrice[1];\n', '\n', '        levelOwner[2] = dev;\n', '        levelPrice[2] = 4e18;\n', '        levelPreviousPrice[2] = levelPrice[2];\n', '\n', '        levelOwner[3] = dev;\n', '        levelPrice[3] = 3e18;\n', '        levelPreviousPrice[3] = levelPrice[3];\n', '\n', '        levelOwner[4] = dev;\n', '        levelPrice[4] = 25e17;\n', '        levelPreviousPrice[4] = levelPrice[4];\n', '\n', '        levelOwner[5] = dev;\n', '        levelPrice[5] = 20e17;\n', '        levelPreviousPrice[5] = levelPrice[5];\n', '\n', '        levelOwner[6] = dev;\n', '        levelPrice[6] = 15e17;\n', '        levelPreviousPrice[6] = levelPrice[6];\n', '\n', '        levelOwner[7] = dev;\n', '        levelPrice[7] = 125e16;\n', '        levelPreviousPrice[7] = levelPrice[7];\n', '\n', '        levelOwner[8] = dev;\n', '        levelPrice[8] = 100e16;\n', '        levelPreviousPrice[8] = levelPrice[8];\n', '\n', '        levelOwner[9] = dev;\n', '        levelPrice[9] = 80e16;\n', '        levelPreviousPrice[9] = levelPrice[9];\n', '\n', '        levelOwner[10] = dev;\n', '        levelPrice[10] = 70e16;\n', '        levelPreviousPrice[10] = levelPrice[10];\n', '\n', '        levelOwner[11] = dev;\n', '        levelPrice[11] = 60e16;\n', '        levelPreviousPrice[11] = levelPrice[11];\n', '\n', '        levelOwner[12] = dev;\n', '        levelPrice[12] = 50e16;\n', '        levelPreviousPrice[12] = levelPrice[12];\n', '\n', '        levelOwner[13] = dev;\n', '        levelPrice[13] = 40e16;\n', '        levelPreviousPrice[13] = levelPrice[13];\n', '\n', '        levelOwner[14] = dev;\n', '        levelPrice[14] = 35e16;\n', '        levelPreviousPrice[14] = levelPrice[14];\n', '\n', '        levelOwner[15] = dev;\n', '        levelPrice[15] = 30e16;\n', '        levelPreviousPrice[15] = levelPrice[15];\n', '\n', '        levelOwner[16] = dev;\n', '        levelPrice[16] = 25e16;\n', '        levelPreviousPrice[16] = levelPrice[16];\n', '\n', '        levelOwner[17] = dev;\n', '        levelPrice[17] = 20e16;\n', '        levelPreviousPrice[17] = levelPrice[17];\n', '\n', '        levelOwner[18] = dev;\n', '        levelPrice[18] = 15e16;\n', '        levelPreviousPrice[18] = levelPrice[18];\n', '\n', '        levelOwner[19] = dev;\n', '        levelPrice[19] = 10e16;\n', '        levelPreviousPrice[19] = levelPrice[19];\n', '\n', '        levelOwner[20] = dev;\n', '        levelPrice[20] = 5e16;\n', '        levelPreviousPrice[20] = levelPrice[20];\n', '\n', '\n', '    }\n', '\n', '    function addTotalLevelValue(uint _new, uint _old)\n', '    internal\n', '    {\n', '        uint newPrice = SafeMath.div(SafeMath.mul(_new,levelPriceIncrement),100);\n', '        totalLevelValue = SafeMath.add(totalLevelValue, SafeMath.sub(newPrice,_old));\n', '    }\n', '    \n', '    function buy(uint _level, address _referrer)\n', '        public\n', '        payable\n', '\n', '    {\n', '        require(_level <= nextAvailableLevel);\n', '        require(msg.value >= levelPrice[_level]);\n', '        addTotalLevelValue(msg.value, levelPreviousPrice[_level]);\n', '\n', '        if (levelOwner[_level] == dev){   \n', '\n', '            require(msg.value >= levelPrice[_level]);\n', '           // uint _price = msg.value;\n', '\n', '            if ((allowAutoNewLevel) && (_level == nextAvailableLevel - 1) && nextAvailableLevel < maxLevels) {\n', '                levelOwner[nextAvailableLevel] = dev;\n', '                levelPrice[nextAvailableLevel] = initialPrice;\n', '                nextAvailableLevel = nextAvailableLevel + 1;\n', '                \n', '            }\n', '\n', '            \n', '\n', '            ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev],msg.value);\n', '\n', '            levelOwner[_level] = msg.sender;\n', '\n', '            //Increment the Level Price\n', '            levelPreviousPrice[_level] = msg.value;\n', '            levelPrice[_level] = SafeMath.div(SafeMath.mul(msg.value,levelPriceIncrement),100);\n', '            //levelName[_level] = _name;     //Give your level an optional name\n', '\n', '\n', '        } else {      \n', '\n', '            require(msg.sender != levelOwner[_level]);\n', '\n', '           // uint _price = msg.value;\n', '\n', '            uint _newPrice = SafeMath.div(SafeMath.mul(msg.value,levelPriceIncrement),100);\n', '\n', '             //Determine the total dividends\n', '            uint _baseDividends = msg.value - levelPreviousPrice[_level];\n', '            totalDivsProduced = SafeMath.add(totalDivsProduced, _baseDividends);\n', '\n', '            uint _devDividends = SafeMath.div(SafeMath.mul(_baseDividends,devDivRate),100);\n', '            uint _ownerDividends = SafeMath.div(SafeMath.mul(_baseDividends,ownerDivRate),100);\n', '\n', '            totalLevelDivs[_level] = SafeMath.add(totalLevelDivs[_level],_ownerDividends);\n', '            _ownerDividends = SafeMath.add(_ownerDividends,levelPreviousPrice[_level]);\n', '            \n', '            uint _distDividends = SafeMath.div(SafeMath.mul(_baseDividends,distDivRate),100);\n', '\n', '            if (allowReferral && (_referrer != msg.sender) && (_referrer != 0x0000000000000000000000000000000000000000)) {\n', '                \n', '                uint _referralDividends = SafeMath.div(SafeMath.mul(_baseDividends,referralRate),100);\n', '                _distDividends = SafeMath.sub(_distDividends,_referralDividends);\n', '                ownerAccounts[_referrer] = SafeMath.add(ownerAccounts[_referrer],_referralDividends);\n', '            }\n', '            \n', '\n', '\n', '            //distribute dividends to accounts\n', '            address _previousOwner = levelOwner[_level];\n', '            address _newOwner = msg.sender;\n', '\n', '            ownerAccounts[_previousOwner] = SafeMath.add(ownerAccounts[_previousOwner],_ownerDividends);\n', '            ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev],_devDividends);\n', '\n', '            distributeRent(nextAvailableLevel, _distDividends);\n', '\n', '            //Increment the Level Price\n', '            levelPreviousPrice[_level] = msg.value;\n', '            levelPrice[_level] = _newPrice;\n', '            levelOwner[_level] = _newOwner;\n', '            //levelName[_level] = _name;   //Give your level an optional name\n', '\n', '        }\n', '\n', '        emit onLevelPurchase(msg.sender, msg.value, _level, SafeMath.div(SafeMath.mul(msg.value,levelPriceIncrement),100));\n', '     \n', '    }\n', '\n', '    function distributeRent(uint _levels, uint _distDividends) {\n', '\n', '        uint _distFactor = 10;\n', '        uint counter = 1;\n', '\n', '        ownerAccounts[dev] = SafeMath.add(ownerAccounts[dev], _distDividends);\n', '\n', '        while (counter < nextAvailableLevel) { \n', '                \n', '            uint _distAmountLocal = SafeMath.div(_distDividends,_distFactor);\n', '            ownerAccounts[levelOwner[counter]] = SafeMath.add(ownerAccounts[levelOwner[counter]],_distAmountLocal);\n', '            totalLevelDivs[counter] = SafeMath.add(totalLevelDivs[counter],_distAmountLocal);\n', '            counter = counter + 1;\n', '            ownerAccounts[dev] = SafeMath.sub(ownerAccounts[dev], _distAmountLocal);\n', '            _distFactor = SafeMath.div(SafeMath.mul(_distFactor, 112),100);\n', '        } \n', '\n', '    }\n', '\n', '\n', '    function withdraw()\n', '    \n', '        public\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        require(ownerAccounts[_customerAddress] > 0);\n', '        uint _dividends = ownerAccounts[_customerAddress];\n', '        ownerAccounts[_customerAddress] = 0;\n', '        _customerAddress.transfer(_dividends);\n', '        // fire event\n', '        onWithdraw(_customerAddress, _dividends);\n', '    }\n', '\n', '    function withdrawPart(uint _amount)\n', '    \n', '        public\n', '        onlyOwner()\n', '    {\n', '        address _customerAddress = msg.sender;\n', '        require(ownerAccounts[_customerAddress] > 0);\n', '        require(_amount <= ownerAccounts[_customerAddress]);\n', '        ownerAccounts[_customerAddress] = SafeMath.sub(ownerAccounts[_customerAddress],_amount);\n', '        _customerAddress.transfer(_amount);\n', '        // fire event\n', '        onWithdraw(_customerAddress, _amount);\n', '    }\n', '\n', '\n', '    \n', '\n', '     // Fallback function: just send funds back\n', '\n', '    function()\n', '        payable\n', '        public\n', '    {\n', '        revert();\n', '    }\n', '    \n', '    /**\n', '     * Transfer Level to another address\n', '     */\n', '    function transfer(address _to, uint _level )\n', '       \n', '        public\n', '    {\n', '        require(levelOwner[nextAvailableLevel] == msg.sender);\n', '\n', '        levelOwner[nextAvailableLevel] = _to;\n', '\n', '        emit Transfer(msg.sender, _to, _level);\n', '\n', '    }\n', '    \n', '    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n', '    /**\n', '\n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setName(string _name)\n', '        onlyOwner()\n', '        public\n', '    {\n', '        name = _name;\n', '    }\n', '    \n', '    /**\n', '     * If we want to rebrand, we can.\n', '     */\n', '    function setSymbol(string _symbol)\n', '        onlyOwner()\n', '        public\n', '    {\n', '        symbol = _symbol;\n', '    }\n', '\n', '    function setInitialPrice(uint _price)\n', '        onlyOwner()\n', '        public\n', '    {\n', '        initialPrice = _price;\n', '    }\n', '\n', '    function setMaxLevels(uint _level)  \n', '        onlyOwner()\n', '        public\n', '    {\n', '        maxLevels = _level;\n', '    }\n', '\n', '    function setLevelPrice(uint _level, uint _price)   //Allow the changing of a level price owner if the dev owns it\n', '        onlyOwner()\n', '        public\n', '    {\n', '        require(levelOwner[_level] == dev);\n', '        levelPrice[_level] = _price;\n', '    }\n', '    \n', '    function addNewLevel(uint _price) \n', '        onlyOwner()\n', '        public\n', '    {\n', '        require(nextAvailableLevel < maxLevels);\n', '        levelPrice[nextAvailableLevel] = _price;\n', '        levelOwner[nextAvailableLevel] = dev;\n', '        totalLevelDivs[nextAvailableLevel] = 0;\n', '        nextAvailableLevel = nextAvailableLevel + 1;\n', '    }\n', '\n', '    function setAllowReferral(bool _allowReferral)   \n', '        onlyOwner()\n', '        public\n', '    {\n', '        allowReferral = _allowReferral;\n', '    }\n', '\n', '    function setAutoNewlevel(bool _autoNewLevel)   \n', '        onlyOwner()\n', '        public\n', '    {\n', '        allowAutoNewLevel = _autoNewLevel;\n', '    }\n', '\n', '    \n', '    /*----------  HELPERS AND CALCULATORS  ----------*/\n', '    /**\n', '     * Method to view the current Ethereum stored in the contract\n', '     * Example: totalEthereumBalance()\n', '     */\n', '\n', '\n', '    function getMyBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return ownerAccounts[msg.sender];\n', '    }\n', '\n', '    function getOwnerBalance(address _levelOwner)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(msg.sender == dev);\n', '        return ownerAccounts[_levelOwner];\n', '    }\n', '    \n', '    function getlevelPrice(uint _level)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_level <= nextAvailableLevel);\n', '        return levelPrice[_level];\n', '    }\n', '\n', '    function getlevelOwner(uint _level)\n', '        public\n', '        view\n', '        returns(address)\n', '    {\n', '        require(_level <= nextAvailableLevel);\n', '        return levelOwner[_level];\n', '    }\n', '\n', '    function gettotalLevelDivs(uint _level)\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        require(_level <= nextAvailableLevel);\n', '        return totalLevelDivs[_level];\n', '    }\n', '\n', '    function getTotalDivsProduced()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '     \n', '        return totalDivsProduced;\n', '    }\n', '\n', '    function getTotalLevelValue()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '      \n', '        return totalLevelValue;\n', '    }\n', '\n', '    function totalEthereumBalance()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return address (this).balance;\n', '    }\n', '\n', '    function getNextAvailableLevel()\n', '        public\n', '        view\n', '        returns(uint)\n', '    {\n', '        return nextAvailableLevel;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}']