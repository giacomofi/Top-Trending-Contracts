['pragma solidity ^0.4.16;\n', '\n', '/**\n', ' * PornTokenV2 Crowd Sale\n', ' */\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', 'contract PornTokenV2Crowdsale {\n', '    address public beneficiary;\n', '    uint public fundingGoal;\n', '    uint public amountRaised;\n', '    uint private currentBalance;\n', '    uint public deadline;\n', '    uint public price;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    bool crowdsaleClosed = false;\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function PornTokenV2Crowdsale(\n', '        address sendTo,\n', '        uint fundingGoalInEthers,\n', '        uint durationInMinutes,\n', '        address addressOfTokenUsedAsReward\n', '    ) {\n', '        beneficiary = sendTo;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        /* 0.00001337 x 1 ether in wei */\n', '        price = 13370000000000;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        require(!crowdsaleClosed);\n', '        uint amount = msg.value;\n', '        if (beneficiary == msg.sender && currentBalance > 0) {\n', '            currentBalance = 0;\n', '            beneficiary.send(currentBalance);\n', '        } else if (amount > 0) {\n', '            balanceOf[msg.sender] += amount;\n', '            amountRaised += amount;\n', '            currentBalance += amount;\n', '            tokenReward.transfer(msg.sender, (amount / price) * 1 ether);\n', '        }\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    /**\n', '     * Check if goal was reached\n', '     *\n', '     * Checks if the goal or time limit has been reached and ends the campaign\n', '     */\n', '    function checkGoalReached() afterDeadline {\n', '        if (amountRaised >= fundingGoal){\n', '            fundingGoalReached = true;\n', '            GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Not Used\n', '     */\n', '    function safeWithdrawal() afterDeadline {\n', '        /* no implementation needed */\n', '    }\n', '}']