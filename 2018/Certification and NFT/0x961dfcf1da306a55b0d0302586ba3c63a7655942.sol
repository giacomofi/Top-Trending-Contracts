['pragma solidity ^0.4.24;\n', '\n', 'contract Articolo\n', '{\n', '    bytes   public codice_articolo;\n', '    bytes10 public data_produzione;\n', '    bytes10 public data_scadenza;\n', '    bytes   public id_stabilimento;\n', '\n', '    constructor(bytes   _codice_articolo,\n', '                bytes10 _data_produzione,\n', '                bytes10 _data_scadenza,\n', '                bytes   _id_stabilimento) public\n', '    {\n', '        require(_codice_articolo.length > 0, "Codice Art. vuoto");\n', '        require(_data_produzione.length > 0, "Data produzione vuota");\n', '        require(_data_scadenza.length   > 0, "Data scadenza vuota");\n', '        require(_id_stabilimento.length > 0, "ID stabilimento vuoto");\n', '\n', '        codice_articolo = _codice_articolo;\n', '        data_produzione = _data_produzione;\n', '        data_scadenza   = _data_scadenza;\n', '        id_stabilimento = _id_stabilimento;\n', '    }\n', '}\n', '\n', 'contract Lotto\n', '{\n', '    bytes   public id_owner_informazione;\n', '    bytes   public codice_tracciabilita;\n', '    bytes   public id_allevatore;\n', '    bytes10 public data_nascita_pulcino;\n', '    bytes10 public data_trasferimento_allevamento;\n', '\n', '    mapping(bytes => mapping(bytes10 => address)) private articoli;\n', '\n', '    address private owner;\n', '\n', '    modifier onlymanager()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor(bytes _codice_tracciabilita,\n', '                bytes _id_allevatore,\n', '                bytes10 _data_nascita_pulcino,\n', '                bytes10 _data_trasferimento_allevamento,\n', '                bytes _id_owner_informazione) public\n', '    {\n', '        require(_codice_tracciabilita.length > 0, "cod. tra. non valido");\n', '        require(_id_allevatore.length > 0, "id all. non valido");\n', '        require(_data_nascita_pulcino.length > 0, "data nas. pul. non valida");\n', '        require(_data_trasferimento_allevamento.length > 0, "data trasf. non valida");\n', '        require(_id_owner_informazione.length > 0, "ID owner informazione non valido");\n', '\n', '        // This will only be managed by the "father" contract ("CarrefourFactory"):\n', '        owner = msg.sender;\n', '\n', '        codice_tracciabilita = _codice_tracciabilita;\n', '        id_allevatore = _id_allevatore;\n', '        data_nascita_pulcino = _data_nascita_pulcino;\n', '        data_trasferimento_allevamento = _data_trasferimento_allevamento;\n', '        id_owner_informazione = _id_owner_informazione;\n', '    }\n', '\n', '\n', '    function addArticolo(bytes   _codice_articolo,\n', '                         bytes10 _data_produzione,\n', '                         bytes10 _data_scadenza,\n', '                         bytes   _id_stabilimento) public onlymanager\n', '    {\n', '        require(_codice_articolo.length > 0, "Codice Art. vuoto");\n', '        require(_data_produzione.length > 0, "Data produzione vuota");\n', '        require(_data_scadenza.length   > 0, "Data scadenza vuota");\n', '        require(_id_stabilimento.length > 0, "ID stabilimento vuoto");\n', '\n', '        address articolo = new Articolo(_codice_articolo, _data_produzione, _data_scadenza, _id_stabilimento);\n', '\n', '        articoli[_codice_articolo][_data_scadenza] = articolo;\n', '    }\n', '\n', '    function get_articolo(bytes codice_articolo, bytes10 data_scadenza) public view returns(bytes10, bytes)\n', '    {\n', '        address articolo_addr = articoli[codice_articolo][data_scadenza];\n', '\n', '        Articolo articolo = Articolo(articolo_addr);\n', '\n', '        return (\n', '            articolo.data_produzione(),\n', '            articolo.id_stabilimento()\n', '        );\n', '    }\n', '}\n', '\n', 'contract CarrefourFactory\n', '{\n', '    address private owner;\n', '\n', '    mapping(bytes => address) private lotti;\n', '\n', '    event lottoAdded(bytes codice_tracciabilita);\n', '    event articoloAdded(bytes lotto, bytes codice_articolo, bytes10 data_scadenza);\n', '\n', '    constructor() public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlymanager()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function createLotto(bytes codice_tracciabilita,\n', '                         bytes id_allevatore,\n', '                         bytes10 data_nascita_pulcino,\n', '                         bytes10 data_trasferimento_allevamento,\n', '                         bytes id_owner_informazione) public onlymanager\n', '    {\n', '        require(codice_tracciabilita.length > 0, "Codice tracciabilit&#224; non valido");\n', '        require(id_allevatore.length > 0, "Codice allevatore non valido");\n', '        require(data_nascita_pulcino.length > 0, "Data di nascita non valida");\n', '        require(data_trasferimento_allevamento.length > 0, "Data trasferimento allevamento non valida");\n', '\n', '        address lotto = new Lotto(codice_tracciabilita, id_allevatore, data_nascita_pulcino, data_trasferimento_allevamento, id_owner_informazione);\n', '\n', '        lotti[codice_tracciabilita] = lotto;\n', '\n', '        emit lottoAdded(codice_tracciabilita);\n', '    }\n', '\n', '    function get_dati_lotto(bytes codice_tracciabilita) public view\n', '             returns(bytes, bytes10, bytes10, bytes)\n', '    {\n', '        address lotto_addr = lotti[codice_tracciabilita];\n', '\n', '        require(lotto_addr != 0x0, "Lotto non trovato");\n', '\n', '        Lotto lotto = Lotto(lotto_addr);\n', '\n', '        return (\n', '            lotto.id_allevatore(),\n', '            lotto.data_nascita_pulcino(),\n', '            lotto.data_trasferimento_allevamento(),\n', '            lotto.id_owner_informazione()\n', '        );\n', '    }\n', '\n', '    function createArticolo(bytes   _lotto, // Here a synonym of "codice_tracciabilita"\n', '                            bytes   _codice_articolo,\n', '                            bytes10 _data_produzione,\n', '                            bytes10 _data_scadenza,\n', '                            bytes   _id_stabilimento) public onlymanager\n', '    {\n', '        require(_lotto.length > 0, "Codice tracciabilit&#224; vuoto");\n', '        require(_codice_articolo.length > 0, "Codice Art. vuoto");\n', '        require(_data_produzione.length > 0, "Data produzione vuota");\n', '        require(_data_scadenza.length > 0, "Data scadenza vuota");\n', '        require(_id_stabilimento.length > 0, "ID stabilimento vuoto");\n', '\n', '        address lotto_addr = lotti[_lotto];\n', '\n', '        require(lotto_addr != 0x0, "Lotto non trovato");\n', '\n', '        Lotto lotto = Lotto(lotto_addr);\n', '\n', '        lotto.addArticolo(_codice_articolo, _data_produzione, _data_scadenza, _id_stabilimento);\n', '\n', '        emit articoloAdded(_lotto, _codice_articolo, _data_scadenza);\n', '    }\n', '\n', '    function get_dati_articolo(bytes codice_tracciabilita, bytes codice_articolo, bytes10 data_scadenza) public view\n', '             returns(bytes10, bytes, bytes, bytes10, bytes10)\n', '    {\n', '        address lotto_addr = lotti[codice_tracciabilita];\n', '\n', '        require(lotto_addr != 0x0, "Lotto non trovato");\n', '\n', '        Lotto lotto = Lotto(lotto_addr);\n', '\n', '        (bytes10 produzione, bytes memory stabilimento) = lotto.get_articolo(codice_articolo, data_scadenza);\n', '\n', '        bytes memory allevatore = lotto.id_allevatore();\n', '        bytes10 nascita = lotto.data_nascita_pulcino();\n', '        bytes10 trasferimento = lotto.data_trasferimento_allevamento();\n', '\n', '        return (\n', '            produzione,\n', '            stabilimento,\n', '            allevatore,\n', '            nascita,\n', '            trasferimento\n', '        );\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Articolo\n', '{\n', '    bytes   public codice_articolo;\n', '    bytes10 public data_produzione;\n', '    bytes10 public data_scadenza;\n', '    bytes   public id_stabilimento;\n', '\n', '    constructor(bytes   _codice_articolo,\n', '                bytes10 _data_produzione,\n', '                bytes10 _data_scadenza,\n', '                bytes   _id_stabilimento) public\n', '    {\n', '        require(_codice_articolo.length > 0, "Codice Art. vuoto");\n', '        require(_data_produzione.length > 0, "Data produzione vuota");\n', '        require(_data_scadenza.length   > 0, "Data scadenza vuota");\n', '        require(_id_stabilimento.length > 0, "ID stabilimento vuoto");\n', '\n', '        codice_articolo = _codice_articolo;\n', '        data_produzione = _data_produzione;\n', '        data_scadenza   = _data_scadenza;\n', '        id_stabilimento = _id_stabilimento;\n', '    }\n', '}\n', '\n', 'contract Lotto\n', '{\n', '    bytes   public id_owner_informazione;\n', '    bytes   public codice_tracciabilita;\n', '    bytes   public id_allevatore;\n', '    bytes10 public data_nascita_pulcino;\n', '    bytes10 public data_trasferimento_allevamento;\n', '\n', '    mapping(bytes => mapping(bytes10 => address)) private articoli;\n', '\n', '    address private owner;\n', '\n', '    modifier onlymanager()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor(bytes _codice_tracciabilita,\n', '                bytes _id_allevatore,\n', '                bytes10 _data_nascita_pulcino,\n', '                bytes10 _data_trasferimento_allevamento,\n', '                bytes _id_owner_informazione) public\n', '    {\n', '        require(_codice_tracciabilita.length > 0, "cod. tra. non valido");\n', '        require(_id_allevatore.length > 0, "id all. non valido");\n', '        require(_data_nascita_pulcino.length > 0, "data nas. pul. non valida");\n', '        require(_data_trasferimento_allevamento.length > 0, "data trasf. non valida");\n', '        require(_id_owner_informazione.length > 0, "ID owner informazione non valido");\n', '\n', '        // This will only be managed by the "father" contract ("CarrefourFactory"):\n', '        owner = msg.sender;\n', '\n', '        codice_tracciabilita = _codice_tracciabilita;\n', '        id_allevatore = _id_allevatore;\n', '        data_nascita_pulcino = _data_nascita_pulcino;\n', '        data_trasferimento_allevamento = _data_trasferimento_allevamento;\n', '        id_owner_informazione = _id_owner_informazione;\n', '    }\n', '\n', '\n', '    function addArticolo(bytes   _codice_articolo,\n', '                         bytes10 _data_produzione,\n', '                         bytes10 _data_scadenza,\n', '                         bytes   _id_stabilimento) public onlymanager\n', '    {\n', '        require(_codice_articolo.length > 0, "Codice Art. vuoto");\n', '        require(_data_produzione.length > 0, "Data produzione vuota");\n', '        require(_data_scadenza.length   > 0, "Data scadenza vuota");\n', '        require(_id_stabilimento.length > 0, "ID stabilimento vuoto");\n', '\n', '        address articolo = new Articolo(_codice_articolo, _data_produzione, _data_scadenza, _id_stabilimento);\n', '\n', '        articoli[_codice_articolo][_data_scadenza] = articolo;\n', '    }\n', '\n', '    function get_articolo(bytes codice_articolo, bytes10 data_scadenza) public view returns(bytes10, bytes)\n', '    {\n', '        address articolo_addr = articoli[codice_articolo][data_scadenza];\n', '\n', '        Articolo articolo = Articolo(articolo_addr);\n', '\n', '        return (\n', '            articolo.data_produzione(),\n', '            articolo.id_stabilimento()\n', '        );\n', '    }\n', '}\n', '\n', 'contract CarrefourFactory\n', '{\n', '    address private owner;\n', '\n', '    mapping(bytes => address) private lotti;\n', '\n', '    event lottoAdded(bytes codice_tracciabilita);\n', '    event articoloAdded(bytes lotto, bytes codice_articolo, bytes10 data_scadenza);\n', '\n', '    constructor() public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlymanager()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function createLotto(bytes codice_tracciabilita,\n', '                         bytes id_allevatore,\n', '                         bytes10 data_nascita_pulcino,\n', '                         bytes10 data_trasferimento_allevamento,\n', '                         bytes id_owner_informazione) public onlymanager\n', '    {\n', '        require(codice_tracciabilita.length > 0, "Codice tracciabilità non valido");\n', '        require(id_allevatore.length > 0, "Codice allevatore non valido");\n', '        require(data_nascita_pulcino.length > 0, "Data di nascita non valida");\n', '        require(data_trasferimento_allevamento.length > 0, "Data trasferimento allevamento non valida");\n', '\n', '        address lotto = new Lotto(codice_tracciabilita, id_allevatore, data_nascita_pulcino, data_trasferimento_allevamento, id_owner_informazione);\n', '\n', '        lotti[codice_tracciabilita] = lotto;\n', '\n', '        emit lottoAdded(codice_tracciabilita);\n', '    }\n', '\n', '    function get_dati_lotto(bytes codice_tracciabilita) public view\n', '             returns(bytes, bytes10, bytes10, bytes)\n', '    {\n', '        address lotto_addr = lotti[codice_tracciabilita];\n', '\n', '        require(lotto_addr != 0x0, "Lotto non trovato");\n', '\n', '        Lotto lotto = Lotto(lotto_addr);\n', '\n', '        return (\n', '            lotto.id_allevatore(),\n', '            lotto.data_nascita_pulcino(),\n', '            lotto.data_trasferimento_allevamento(),\n', '            lotto.id_owner_informazione()\n', '        );\n', '    }\n', '\n', '    function createArticolo(bytes   _lotto, // Here a synonym of "codice_tracciabilita"\n', '                            bytes   _codice_articolo,\n', '                            bytes10 _data_produzione,\n', '                            bytes10 _data_scadenza,\n', '                            bytes   _id_stabilimento) public onlymanager\n', '    {\n', '        require(_lotto.length > 0, "Codice tracciabilità vuoto");\n', '        require(_codice_articolo.length > 0, "Codice Art. vuoto");\n', '        require(_data_produzione.length > 0, "Data produzione vuota");\n', '        require(_data_scadenza.length > 0, "Data scadenza vuota");\n', '        require(_id_stabilimento.length > 0, "ID stabilimento vuoto");\n', '\n', '        address lotto_addr = lotti[_lotto];\n', '\n', '        require(lotto_addr != 0x0, "Lotto non trovato");\n', '\n', '        Lotto lotto = Lotto(lotto_addr);\n', '\n', '        lotto.addArticolo(_codice_articolo, _data_produzione, _data_scadenza, _id_stabilimento);\n', '\n', '        emit articoloAdded(_lotto, _codice_articolo, _data_scadenza);\n', '    }\n', '\n', '    function get_dati_articolo(bytes codice_tracciabilita, bytes codice_articolo, bytes10 data_scadenza) public view\n', '             returns(bytes10, bytes, bytes, bytes10, bytes10)\n', '    {\n', '        address lotto_addr = lotti[codice_tracciabilita];\n', '\n', '        require(lotto_addr != 0x0, "Lotto non trovato");\n', '\n', '        Lotto lotto = Lotto(lotto_addr);\n', '\n', '        (bytes10 produzione, bytes memory stabilimento) = lotto.get_articolo(codice_articolo, data_scadenza);\n', '\n', '        bytes memory allevatore = lotto.id_allevatore();\n', '        bytes10 nascita = lotto.data_nascita_pulcino();\n', '        bytes10 trasferimento = lotto.data_trasferimento_allevamento();\n', '\n', '        return (\n', '            produzione,\n', '            stabilimento,\n', '            allevatore,\n', '            nascita,\n', '            trasferimento\n', '        );\n', '    }\n', '}']
