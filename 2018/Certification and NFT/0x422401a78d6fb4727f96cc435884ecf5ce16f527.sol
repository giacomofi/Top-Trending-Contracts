['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', 'contract ERC721 {\n', '  // Required methods\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '  function implementsERC721() public pure returns (bool);\n', '  function ownerOf(uint256 _tokenId) public view returns (address addr);\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  // Optional\n', '  // function name() public view returns (string name);\n', '  // function symbol() public view returns (string symbol);\n', '  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\n', '  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract FollowersToken is ERC721 {\n', '\n', '\tstring public constant NAME \t\t= "FollowersToken";\n', '\tstring public constant SYMBOL \t\t= "FWTK";\n', '\n', '\tuint256 private startingPrice\t= 0.05 ether;\n', '\tuint256 private firstStepLimit \t= 6.4 ether;\n', '\tuint256 private secondStepLimit = 120.9324 ether;\n', '\tuint256 private thirdStepLimit \t= 792.5423 ether;\n', '\n', '\tbool \tprivate isPresale;\n', '\n', '\tmapping (uint256 => address) public personIndexToOwner;\n', '\tmapping (address => uint256) private ownershipTokenCount;\n', '\tmapping (uint256 => address) public personIndexToApproved;\n', '\tmapping (uint256 => uint256) private personIndexToPrice;\n', '\tmapping (uint256 => uint256) private personIndexToPriceLevel;\n', '\n', '\taddress public ceoAddress;\n', '\taddress public cooAddress;\n', '\n', '\tstruct Person {\n', '\t\tstring name;\n', '\t}\n', '\n', '\tPerson[] private persons;\n', '\n', '\tmodifier onlyCEO() {\n', '\t\trequire(msg.sender == ceoAddress);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyCOO() {\n', '\t\trequire(msg.sender == cooAddress);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyCLevel() {\n', '\t\trequire( msg.sender == ceoAddress || msg.sender == cooAddress );\n', '\t\t_;\n', '\t}\n', '\n', '\tconstructor() public {\n', '\t\tceoAddress = msg.sender;\n', '\t\tcooAddress = msg.sender;\n', '\t\tisPresale  = true;\n', '\t}\n', '\n', '\tfunction startPresale() public onlyCLevel {\n', '\t\tisPresale = true;\n', '\t}\n', '\n', '\tfunction stopPresale() public onlyCLevel {\n', '\t\tisPresale = false;\n', '\t}\n', '\n', '\tfunction presale() public view returns ( bool presaleStatus ) {\n', '\t\treturn isPresale;\n', '\t}\n', '\n', '\tfunction approve( address _to, uint256 _tokenId ) public {\n', '\t\t// Caller must own token.\n', '\t\trequire( _owns( msg.sender , _tokenId ) );\n', '\t\tpersonIndexToApproved[_tokenId] = _to;\n', '\t\temit Approval( msg.sender , _to , _tokenId );\n', '\t}\n', '\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn ownershipTokenCount[_owner];\n', '\t}\n', '\n', '\tfunction createContractPerson( string _name , uint256 _price , address _owner ) public onlyCOO {\n', '\t\tif ( _price <= 0 ) {\n', '\t\t\t_price = startingPrice;\n', '\t\t}\n', '\t\t_createPerson( _name , _owner , _price );\n', '\t}\n', '\n', '\tfunction getPerson(uint256 _tokenId) public view returns ( string personName, uint256 sellingPrice, address owner , uint256 sellingPriceNext , uint256 priceLevel ) {\n', '\t\tPerson storage person = persons[_tokenId];\n', '\t\tpersonName \t\t\t= person.name;\n', '\t\tsellingPrice \t\t= personIndexToPrice[_tokenId];\n', '\t\towner \t\t\t\t= personIndexToOwner[_tokenId];\n', '\t\tpriceLevel \t\t\t= personIndexToPriceLevel[ _tokenId ];\n', '\t\tsellingPriceNext \t= _calcNextPrice( _tokenId );\n', '\t}\n', '\n', '\tfunction _calcNextPrice( uint256 _tokenId ) private view returns ( uint256 nextSellingPrice ) {\n', '\t\tuint256 sellingPrice \t= priceOf( _tokenId );\n', '\t\tif( isPresale == true ){\n', '\t\t\tnextSellingPrice =  uint256( SafeMath.div( SafeMath.mul( sellingPrice, 400 ) , 100 ) );\n', '\t\t}else{\n', '\t\t\tif ( sellingPrice < firstStepLimit ) {\n', '\t\t\t\tnextSellingPrice =  uint256( SafeMath.div( SafeMath.mul( sellingPrice, 200 ) , 100 ) );\n', '\t\t\t} else if ( sellingPrice < secondStepLimit ) {\n', '\t\t\t\tnextSellingPrice =  uint256( SafeMath.div( SafeMath.mul( sellingPrice, 180 ) , 100 ) );\n', '\t\t\t} else if ( sellingPrice < thirdStepLimit ) {\n', '\t\t\t\tnextSellingPrice =  uint256( SafeMath.div( SafeMath.mul( sellingPrice, 160 ) , 100 ) );\n', '\t\t\t} else {\n', '\t\t\t\tnextSellingPrice  =  uint256( SafeMath.div( SafeMath.mul( sellingPrice, 140 ) , 100 ) );\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn nextSellingPrice;\n', '\t}\n', '\n', '\tfunction implementsERC721() public pure returns (bool) {\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction name() public pure returns (string) {\n', '\t\treturn NAME;\n', '\t}\n', '\n', '\tfunction ownerOf( uint256 _tokenId ) public view returns ( address owner ){\n', '\t\towner = personIndexToOwner[_tokenId];\n', '\t\trequire( owner != address(0) );\n', '\t}\n', '\n', '\tfunction payout( address _to ) public onlyCLevel {\n', '\t\t_payout( _to );\n', '\t}\n', '\n', '\tfunction purchase(uint256 _tokenId) public payable {\n', '\t\taddress oldOwner \t\t= personIndexToOwner[_tokenId];\n', '\t\taddress newOwner \t\t= msg.sender;\n', '\t\tuint256 sellingPrice \t= personIndexToPrice[_tokenId];\n', '\n', '\t\trequire( oldOwner != newOwner );\n', '\t\trequire( _addressNotNull( newOwner ) );\n', '\t\trequire( msg.value >= sellingPrice );\n', '\n', '\t\tuint256 payment \t\t= uint256( SafeMath.div( SafeMath.mul( sellingPrice , 94 ) , 100 ) );\n', '\t\tuint256 purchaseExcess \t= SafeMath.sub( msg.value , sellingPrice );\n', '\n', '\t\tif( isPresale == true ){\n', '\t\t\trequire( personIndexToPriceLevel[ _tokenId ] == 0 );\n', '\t\t}\n', '\t\tpersonIndexToPrice[ _tokenId ] \t\t= _calcNextPrice( _tokenId );\n', '\t\tpersonIndexToPriceLevel[ _tokenId ] = SafeMath.add( personIndexToPriceLevel[ _tokenId ] , 1 );\n', '\n', '\t\t_transfer( oldOwner , newOwner , _tokenId );\n', '\n', '\t\tif ( oldOwner != address(this) ) {\n', '\t\t\toldOwner.transfer( payment );\n', '\t\t}\n', '\n', '\t\tmsg.sender.transfer( purchaseExcess );\n', '\t}\n', '\n', '\tfunction priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '\t\treturn personIndexToPrice[_tokenId];\n', '\t}\n', '\n', '\tfunction setCEO(address _newCEO) public onlyCEO {\n', '\t\trequire(_newCEO != address(0));\n', '\t\tceoAddress = _newCEO;\n', '\t}\n', '\n', '\tfunction setCOO(address _newCOO) public onlyCEO {\n', '\t\trequire(_newCOO != address(0));\n', '\t\tcooAddress = _newCOO;\n', '\t}\n', '\n', '\tfunction symbol() public pure returns (string) {\n', '\t\treturn SYMBOL;\n', '\t}\n', '\n', '\tfunction takeOwnership(uint256 _tokenId) public {\n', '\t\taddress newOwner = msg.sender;\n', '\t\taddress oldOwner = personIndexToOwner[_tokenId];\n', '\t\trequire(_addressNotNull(newOwner));\n', '\t\trequire(_approved(newOwner, _tokenId));\n', '\t\t_transfer(oldOwner, newOwner, _tokenId);\n', '\t}\n', '\n', '\tfunction tokensOfOwner(address _owner) public view returns( uint256[] ownerTokens ) {\n', '\t\tuint256 tokenCount = balanceOf(_owner);\n', '\t\tif (tokenCount == 0) {\n', '\t\t\treturn new uint256[](0);\n', '\t\t} else {\n', '\t\t\tuint256[] memory result = new uint256[](tokenCount);\n', '\t\t\tuint256 totalPersons = totalSupply();\n', '\t\t\tuint256 resultIndex = 0;\n', '\t\t\tuint256 personId;\n', '\t\t\tfor (personId = 0; personId <= totalPersons; personId++) {\n', '\t\t\t\tif (personIndexToOwner[personId] == _owner) {\n', '\t\t\t\t\tresult[resultIndex] = personId;\n', '\t\t\t\t\tresultIndex++;\n', '\t\t\t\t}\n', '\t\t\t}\n', '\t\t\treturn result;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction totalSupply() public view returns (uint256 total) {\n', '\t\treturn persons.length;\n', '\t}\n', '\n', '\tfunction transfer( address _to, uint256 _tokenId ) public {\n', '\t\trequire( _owns(msg.sender, _tokenId ) );\n', '\t\trequire( _addressNotNull( _to ) );\n', '\t\t_transfer( msg.sender, _to, _tokenId );\n', '\t}\n', '\n', '\tfunction transferFrom( address _from, address _to, uint256 _tokenId ) public {\n', '\t\trequire(_owns(_from, _tokenId));\n', '\t\trequire(_approved(_to, _tokenId));\n', '\t\trequire(_addressNotNull(_to));\n', '\t\t_transfer(_from, _to, _tokenId);\n', '\t}\n', '\n', '\tfunction _addressNotNull(address _to) private pure returns (bool) {\n', '\t\treturn _to != address(0);\n', '\t}\n', '\n', '\tfunction _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '\t\treturn personIndexToApproved[_tokenId] == _to;\n', '\t}\n', '\n', '\tfunction _createPerson( string _name, address _owner, uint256 _price ) private {\n', '\t\tPerson memory _person = Person({\n', '\t\t\tname: _name\n', '\t\t});\n', '\n', '\t\tuint256 newPersonId = persons.push(_person) - 1;\n', '\t\trequire(newPersonId == uint256(uint32(newPersonId)));\n', '\t\tpersonIndexToPrice[newPersonId] = _price;\n', '\t\tpersonIndexToPriceLevel[ newPersonId ] = 0;\n', '\t\t_transfer( address(0) , _owner, newPersonId);\n', '\t}\n', '\n', '\tfunction _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '\t\treturn claimant == personIndexToOwner[_tokenId];\n', '\t}\n', '\n', '\tfunction _payout(address _to) private {\n', '\t\tif (_to == address(0)) {\n', '\t\t\tceoAddress.transfer( address( this ).balance );\n', '\t\t} else {\n', '\t\t\t_to.transfer( address( this ).balance );\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _transfer(address _from, address _to, uint256 _tokenId) private {\n', '\t\townershipTokenCount[_to] = SafeMath.add( ownershipTokenCount[_to] , 1 );\n', '\t\tpersonIndexToOwner[_tokenId] = _to;\n', '\t\tif (_from != address(0)) {\n', '\t\t\townershipTokenCount[_from] = SafeMath.sub( ownershipTokenCount[_from] , 1 );\n', '\t\t\tdelete personIndexToApproved[_tokenId];\n', '\t\t}\n', '\t\temit Transfer(_from, _to, _tokenId);\n', '\t}\n', '\n', '}']