['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract InvestorsList is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    /* Investor */\n', '\n', '    enum WhiteListStatus  {Usual, WhiteList, PreWhiteList}\n', '\n', '    struct Investor {\n', '        bytes32 id;\n', '        uint tokensCount;\n', '        address walletForTokens;\n', '        WhiteListStatus whiteListStatus;\n', '        bool isVerified;\n', '    }\n', '\n', '    /*Investor&#39;s end*/\n', '\n', '    mapping (address => bool) manipulators;\n', '    mapping (address => bytes32) public nativeInvestorsIds;\n', '    mapping (bytes32 => Investor) public investorsList;\n', '\n', '    /*Manipulators*/\n', '\n', '    modifier allowedToManipulate(){\n', '        require(manipulators[msg.sender] || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeManipulatorAddress(address saleAddress, bool isAllowedToManipulate) external onlyOwner{\n', '        require(saleAddress != 0x0);\n', '        manipulators[saleAddress] = isAllowedToManipulate;\n', '    }\n', '\n', '    /*Manipulators&#39; end*/\n', '\n', '    function setInvestorId(address investorAddress, bytes32 id) external onlyOwner{\n', '        require(investorAddress != 0x0 && id != 0);\n', '        nativeInvestorsIds[investorAddress] = id;\n', '    }\n', '\n', '    function addInvestor(\n', '        bytes32 id,\n', '        WhiteListStatus status,\n', '        bool isVerified\n', '    ) external onlyOwner {\n', '        require(id != 0);\n', '        require(investorsList[id].id == 0);\n', '\n', '        investorsList[id].id = id;\n', '        investorsList[id].tokensCount = 0;\n', '        investorsList[id].whiteListStatus = status;\n', '        investorsList[id].isVerified = isVerified;\n', '    }\n', '\n', '    function removeInvestor(bytes32 id) external onlyOwner {\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].id = 0;\n', '    }\n', '\n', '    function isAllowedToBuyByAddress(address investor) external view returns(bool){\n', '        require(investor != 0x0);\n', '        bytes32 id = nativeInvestorsIds[investor];\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        return investorsList[id].isVerified;\n', '    }\n', '\n', '    function isAllowedToBuyByAddressWithoutVerification(address investor) external view returns(bool){\n', '        require(investor != 0x0);\n', '        bytes32 id = nativeInvestorsIds[investor];\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        return true;\n', '    }\n', '\n', '    function isAllowedToBuy(bytes32 id) external view returns(bool){\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        return investorsList[id].isVerified;\n', '    }\n', '\n', '    function isPreWhiteListed(bytes32 id) external constant returns(bool){\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        return investorsList[id].whiteListStatus == WhiteListStatus.PreWhiteList;\n', '    }\n', '\n', '    function isWhiteListed(bytes32 id) external view returns(bool){\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        return investorsList[id].whiteListStatus == WhiteListStatus.WhiteList;\n', '    }\n', '\n', '    function setVerificationStatus(bytes32 id, bool status) external onlyOwner{\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].isVerified = status;\n', '    }\n', '\n', '    function setWhiteListStatus(bytes32 id, WhiteListStatus status) external onlyOwner{\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].whiteListStatus = status;\n', '    }\n', '\n', '    function addTokens(bytes32 id, uint tokens) external allowedToManipulate{\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].tokensCount = investorsList[id].tokensCount.add(tokens);\n', '    }\n', '\n', '    function subTokens(bytes32 id, uint tokens) external allowedToManipulate{\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].tokensCount = investorsList[id].tokensCount.sub(tokens);\n', '    }\n', '\n', '    function setWalletForTokens(bytes32 id, address wallet) external onlyOwner{\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].walletForTokens = wallet;\n', '    }\n', '}\n', '\n', 'contract BonumPreSale is Pausable{\n', '    using SafeMath for uint;\n', '\n', '    string public constant name = "Bonum PreSale";\n', '\n', '    uint public startDate;\n', '    uint public endDate;\n', '    uint public whiteListPreSaleDuration = 1 days;\n', '\n', '    function setWhiteListDuration(uint duration) external onlyOwner{\n', '        require(duration > 0);\n', '        whiteListPreSaleDuration = duration * 1 days;\n', '    }\n', '\n', '    uint public fiatValueMultiplier = 10**6;\n', '    uint public tokenDecimals = 10**18;\n', '\n', '    InvestorsList public investors;\n', '\n', '    address beneficiary;\n', '\n', '    uint public ethUsdRate;\n', '    uint public collected = 0;\n', '    uint public tokensSold = 0;\n', '    uint public tokensSoldWithBonus = 0;\n', '\n', '    uint[] firstColumn;\n', '    uint[] secondColumn;\n', '\n', '    event NewContribution(address indexed holder, uint tokenAmount, uint etherAmount);\n', '\n', '    function BonumPreSale(\n', '        uint _startDate,\n', '        uint _endDate,\n', '        address _investors,\n', '        address _beneficiary,\n', '        uint _baseEthUsdRate\n', '    ) public {\n', '        startDate = _startDate;\n', '        endDate = _endDate;\n', '\n', '        investors = InvestorsList(_investors);\n', '        beneficiary = _beneficiary;\n', '\n', '        ethUsdRate = _baseEthUsdRate;\n', '\n', '        initBonusSystem();\n', '    }\n', '\n', '\n', '    function initBonusSystem() private{\n', '        firstColumn.push(1750000);\n', '        firstColumn.push(10360000);\n', '        firstColumn.push(18980000);\n', '        firstColumn.push(25000000);\n', '\n', '        secondColumn.push(1560000);\n', '        secondColumn.push(9220000);\n', '        secondColumn.push(16880000);\n', '        secondColumn.push(22230000);\n', '    }\n', '\n', '    function setNewBeneficiary(address newBeneficiary) external onlyOwner {\n', '        require(newBeneficiary != 0x0);\n', '        beneficiary = newBeneficiary;\n', '    }\n', '\n', '    function setEthUsdRate(uint rate) external onlyOwner {\n', '        require(rate > 0);\n', '        ethUsdRate = rate;\n', '    }\n', '\n', '    function setNewStartDate(uint newStartDate) external onlyOwner{\n', '        require(newStartDate > 0);\n', '        startDate = newStartDate;\n', '    }\n', '\n', '    function setNewEndDate(uint newEndDate) external onlyOwner{\n', '        require(newEndDate > 0);\n', '        endDate = newEndDate;\n', '    }\n', '\n', '    function setNewInvestorsList(address investorsList) external onlyOwner {\n', '        require(investorsList != 0x0);\n', '        investors = InvestorsList(investorsList);\n', '    }\n', '\n', '    modifier activePreSale(){\n', '        require(now >= startDate && now < endDate);\n', '        _;\n', '    }\n', '\n', '    modifier underCap(){\n', '        require(tokensSold < uint(750000).mul(tokenDecimals));\n', '        _;\n', '    }\n', '\n', '    modifier isAllowedToBuy(){\n', '        require(investors.isAllowedToBuyByAddressWithoutVerification(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier minimumAmount(){\n', '        require(msg.value.mul(ethUsdRate).div(fiatValueMultiplier.mul(1 ether)) >= 100);\n', '        _;\n', '    }\n', '\n', '    mapping (address => uint) public nativeInvestors;\n', '\n', '    function() payable public whenNotPaused activePreSale minimumAmount underCap{\n', '        uint tokens = msg.value.mul(ethUsdRate).div(fiatValueMultiplier);\n', '        tokensSold = tokensSold.add(tokens);\n', '        \n', '        tokens = tokens.add(calculateBonus(tokens));\n', '        nativeInvestors[msg.sender] = tokens;\n', '        tokensSoldWithBonus =  tokensSoldWithBonus.add(tokens);\n', '        \n', '        nativeInvestors[msg.sender] = tokens;\n', '        NewContribution(msg.sender, tokens, msg.value);\n', '\n', '        collected = collected.add(msg.value);\n', '\n', '        beneficiary.transfer(msg.value);\n', '    }\n', '\n', '\n', '    //usd * 10^6\n', '    function otherCoinsPurchase(bytes32 id, uint amountInUsd) external whenNotPaused underCap activePreSale onlyOwner {\n', '        require(id.length > 0 && amountInUsd >= (uint(100).mul(fiatValueMultiplier)) && investors.isAllowedToBuy(id));\n', '\n', '        uint tokens = amountInUsd.mul(tokenDecimals).div(fiatValueMultiplier);\n', '\n', '        tokensSold = tokensSold.add(tokens);\n', '        tokens = tokens.add(calculateBonus(tokens));\n', '        tokensSoldWithBonus =  tokensSoldWithBonus.add(tokens);\n', '\n', '        investors.addTokens(id, tokens);\n', '    }\n', '\n', '\n', '    function calculateBonus(uint tokensCount) public constant returns (uint){\n', '        //+1 because needs whole days\n', '        uint day = ((now.sub(startDate.add(whiteListPreSaleDuration))).div(1 days)).add(1);\n', '        uint B1;\n', '        uint B2;\n', '\n', '        if (tokensCount < uint(1000).mul(tokenDecimals)) {\n', '            B1 = (((tokensCount - 100 * tokenDecimals) * (firstColumn[1] - firstColumn[0])) /  ((1000-100) * tokenDecimals)) + firstColumn[0];\n', '            B2 = (((tokensCount - 100 * tokenDecimals) * (secondColumn[1] - secondColumn[0])) /  ((1000-100) * tokenDecimals)) + secondColumn[0];\n', '        }\n', '\n', '        if (tokensCount >= uint(1000).mul(tokenDecimals) && tokensCount < uint(10000).mul(tokenDecimals)) {\n', '            B1 = (((tokensCount - 1000 * tokenDecimals) * (firstColumn[2] - firstColumn[1])) / ((10000-1000) * tokenDecimals)) + firstColumn[1];\n', '            B2 = (((tokensCount - 1000 * tokenDecimals) * (secondColumn[2] - secondColumn[1])) / ((10000-1000) * tokenDecimals)) + secondColumn[1];\n', '        }\n', '\n', '        if (tokensCount >= uint(10000).mul(tokenDecimals) && tokensCount < uint(50000).mul(tokenDecimals)) {\n', '            B1 = (((tokensCount - 10000 * tokenDecimals) * (firstColumn[3] - firstColumn[2])) / ((50000-10000) * tokenDecimals)) + firstColumn[2];\n', '            B2 = (((tokensCount - 10000 * tokenDecimals) * (secondColumn[3] - secondColumn[2])) / ((50000-10000) * tokenDecimals)) + secondColumn[2];\n', '        }\n', '\n', '        if (tokensCount >=  uint(50000).mul(tokenDecimals)) {\n', '            B1 = firstColumn[3];\n', '            B2 = secondColumn[3];\n', '        }\n', '\n', '        uint bonusPercent = B1.sub(((day - 1).mul(B1 - B2)).div(12));\n', '\n', '        return calculateBonusTokensAmount(tokensCount, bonusPercent);\n', '    }\n', '\n', '    function calculateBonusTokensAmount(uint tokensCount, uint bonusPercent) private constant returns(uint){\n', '        uint bonus = tokensCount.mul(bonusPercent);\n', '        bonus = bonus.div(100);\n', '        bonus = bonus.div(fiatValueMultiplier);\n', '        return bonus;\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract InvestorsList is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    /* Investor */\n', '\n', '    enum WhiteListStatus  {Usual, WhiteList, PreWhiteList}\n', '\n', '    struct Investor {\n', '        bytes32 id;\n', '        uint tokensCount;\n', '        address walletForTokens;\n', '        WhiteListStatus whiteListStatus;\n', '        bool isVerified;\n', '    }\n', '\n', "    /*Investor's end*/\n", '\n', '    mapping (address => bool) manipulators;\n', '    mapping (address => bytes32) public nativeInvestorsIds;\n', '    mapping (bytes32 => Investor) public investorsList;\n', '\n', '    /*Manipulators*/\n', '\n', '    modifier allowedToManipulate(){\n', '        require(manipulators[msg.sender] || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeManipulatorAddress(address saleAddress, bool isAllowedToManipulate) external onlyOwner{\n', '        require(saleAddress != 0x0);\n', '        manipulators[saleAddress] = isAllowedToManipulate;\n', '    }\n', '\n', "    /*Manipulators' end*/\n", '\n', '    function setInvestorId(address investorAddress, bytes32 id) external onlyOwner{\n', '        require(investorAddress != 0x0 && id != 0);\n', '        nativeInvestorsIds[investorAddress] = id;\n', '    }\n', '\n', '    function addInvestor(\n', '        bytes32 id,\n', '        WhiteListStatus status,\n', '        bool isVerified\n', '    ) external onlyOwner {\n', '        require(id != 0);\n', '        require(investorsList[id].id == 0);\n', '\n', '        investorsList[id].id = id;\n', '        investorsList[id].tokensCount = 0;\n', '        investorsList[id].whiteListStatus = status;\n', '        investorsList[id].isVerified = isVerified;\n', '    }\n', '\n', '    function removeInvestor(bytes32 id) external onlyOwner {\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].id = 0;\n', '    }\n', '\n', '    function isAllowedToBuyByAddress(address investor) external view returns(bool){\n', '        require(investor != 0x0);\n', '        bytes32 id = nativeInvestorsIds[investor];\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        return investorsList[id].isVerified;\n', '    }\n', '\n', '    function isAllowedToBuyByAddressWithoutVerification(address investor) external view returns(bool){\n', '        require(investor != 0x0);\n', '        bytes32 id = nativeInvestorsIds[investor];\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        return true;\n', '    }\n', '\n', '    function isAllowedToBuy(bytes32 id) external view returns(bool){\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        return investorsList[id].isVerified;\n', '    }\n', '\n', '    function isPreWhiteListed(bytes32 id) external constant returns(bool){\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        return investorsList[id].whiteListStatus == WhiteListStatus.PreWhiteList;\n', '    }\n', '\n', '    function isWhiteListed(bytes32 id) external view returns(bool){\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        return investorsList[id].whiteListStatus == WhiteListStatus.WhiteList;\n', '    }\n', '\n', '    function setVerificationStatus(bytes32 id, bool status) external onlyOwner{\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].isVerified = status;\n', '    }\n', '\n', '    function setWhiteListStatus(bytes32 id, WhiteListStatus status) external onlyOwner{\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].whiteListStatus = status;\n', '    }\n', '\n', '    function addTokens(bytes32 id, uint tokens) external allowedToManipulate{\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].tokensCount = investorsList[id].tokensCount.add(tokens);\n', '    }\n', '\n', '    function subTokens(bytes32 id, uint tokens) external allowedToManipulate{\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].tokensCount = investorsList[id].tokensCount.sub(tokens);\n', '    }\n', '\n', '    function setWalletForTokens(bytes32 id, address wallet) external onlyOwner{\n', '        require(id != 0 && investorsList[id].id != 0);\n', '        investorsList[id].walletForTokens = wallet;\n', '    }\n', '}\n', '\n', 'contract BonumPreSale is Pausable{\n', '    using SafeMath for uint;\n', '\n', '    string public constant name = "Bonum PreSale";\n', '\n', '    uint public startDate;\n', '    uint public endDate;\n', '    uint public whiteListPreSaleDuration = 1 days;\n', '\n', '    function setWhiteListDuration(uint duration) external onlyOwner{\n', '        require(duration > 0);\n', '        whiteListPreSaleDuration = duration * 1 days;\n', '    }\n', '\n', '    uint public fiatValueMultiplier = 10**6;\n', '    uint public tokenDecimals = 10**18;\n', '\n', '    InvestorsList public investors;\n', '\n', '    address beneficiary;\n', '\n', '    uint public ethUsdRate;\n', '    uint public collected = 0;\n', '    uint public tokensSold = 0;\n', '    uint public tokensSoldWithBonus = 0;\n', '\n', '    uint[] firstColumn;\n', '    uint[] secondColumn;\n', '\n', '    event NewContribution(address indexed holder, uint tokenAmount, uint etherAmount);\n', '\n', '    function BonumPreSale(\n', '        uint _startDate,\n', '        uint _endDate,\n', '        address _investors,\n', '        address _beneficiary,\n', '        uint _baseEthUsdRate\n', '    ) public {\n', '        startDate = _startDate;\n', '        endDate = _endDate;\n', '\n', '        investors = InvestorsList(_investors);\n', '        beneficiary = _beneficiary;\n', '\n', '        ethUsdRate = _baseEthUsdRate;\n', '\n', '        initBonusSystem();\n', '    }\n', '\n', '\n', '    function initBonusSystem() private{\n', '        firstColumn.push(1750000);\n', '        firstColumn.push(10360000);\n', '        firstColumn.push(18980000);\n', '        firstColumn.push(25000000);\n', '\n', '        secondColumn.push(1560000);\n', '        secondColumn.push(9220000);\n', '        secondColumn.push(16880000);\n', '        secondColumn.push(22230000);\n', '    }\n', '\n', '    function setNewBeneficiary(address newBeneficiary) external onlyOwner {\n', '        require(newBeneficiary != 0x0);\n', '        beneficiary = newBeneficiary;\n', '    }\n', '\n', '    function setEthUsdRate(uint rate) external onlyOwner {\n', '        require(rate > 0);\n', '        ethUsdRate = rate;\n', '    }\n', '\n', '    function setNewStartDate(uint newStartDate) external onlyOwner{\n', '        require(newStartDate > 0);\n', '        startDate = newStartDate;\n', '    }\n', '\n', '    function setNewEndDate(uint newEndDate) external onlyOwner{\n', '        require(newEndDate > 0);\n', '        endDate = newEndDate;\n', '    }\n', '\n', '    function setNewInvestorsList(address investorsList) external onlyOwner {\n', '        require(investorsList != 0x0);\n', '        investors = InvestorsList(investorsList);\n', '    }\n', '\n', '    modifier activePreSale(){\n', '        require(now >= startDate && now < endDate);\n', '        _;\n', '    }\n', '\n', '    modifier underCap(){\n', '        require(tokensSold < uint(750000).mul(tokenDecimals));\n', '        _;\n', '    }\n', '\n', '    modifier isAllowedToBuy(){\n', '        require(investors.isAllowedToBuyByAddressWithoutVerification(msg.sender));\n', '        _;\n', '    }\n', '\n', '    modifier minimumAmount(){\n', '        require(msg.value.mul(ethUsdRate).div(fiatValueMultiplier.mul(1 ether)) >= 100);\n', '        _;\n', '    }\n', '\n', '    mapping (address => uint) public nativeInvestors;\n', '\n', '    function() payable public whenNotPaused activePreSale minimumAmount underCap{\n', '        uint tokens = msg.value.mul(ethUsdRate).div(fiatValueMultiplier);\n', '        tokensSold = tokensSold.add(tokens);\n', '        \n', '        tokens = tokens.add(calculateBonus(tokens));\n', '        nativeInvestors[msg.sender] = tokens;\n', '        tokensSoldWithBonus =  tokensSoldWithBonus.add(tokens);\n', '        \n', '        nativeInvestors[msg.sender] = tokens;\n', '        NewContribution(msg.sender, tokens, msg.value);\n', '\n', '        collected = collected.add(msg.value);\n', '\n', '        beneficiary.transfer(msg.value);\n', '    }\n', '\n', '\n', '    //usd * 10^6\n', '    function otherCoinsPurchase(bytes32 id, uint amountInUsd) external whenNotPaused underCap activePreSale onlyOwner {\n', '        require(id.length > 0 && amountInUsd >= (uint(100).mul(fiatValueMultiplier)) && investors.isAllowedToBuy(id));\n', '\n', '        uint tokens = amountInUsd.mul(tokenDecimals).div(fiatValueMultiplier);\n', '\n', '        tokensSold = tokensSold.add(tokens);\n', '        tokens = tokens.add(calculateBonus(tokens));\n', '        tokensSoldWithBonus =  tokensSoldWithBonus.add(tokens);\n', '\n', '        investors.addTokens(id, tokens);\n', '    }\n', '\n', '\n', '    function calculateBonus(uint tokensCount) public constant returns (uint){\n', '        //+1 because needs whole days\n', '        uint day = ((now.sub(startDate.add(whiteListPreSaleDuration))).div(1 days)).add(1);\n', '        uint B1;\n', '        uint B2;\n', '\n', '        if (tokensCount < uint(1000).mul(tokenDecimals)) {\n', '            B1 = (((tokensCount - 100 * tokenDecimals) * (firstColumn[1] - firstColumn[0])) /  ((1000-100) * tokenDecimals)) + firstColumn[0];\n', '            B2 = (((tokensCount - 100 * tokenDecimals) * (secondColumn[1] - secondColumn[0])) /  ((1000-100) * tokenDecimals)) + secondColumn[0];\n', '        }\n', '\n', '        if (tokensCount >= uint(1000).mul(tokenDecimals) && tokensCount < uint(10000).mul(tokenDecimals)) {\n', '            B1 = (((tokensCount - 1000 * tokenDecimals) * (firstColumn[2] - firstColumn[1])) / ((10000-1000) * tokenDecimals)) + firstColumn[1];\n', '            B2 = (((tokensCount - 1000 * tokenDecimals) * (secondColumn[2] - secondColumn[1])) / ((10000-1000) * tokenDecimals)) + secondColumn[1];\n', '        }\n', '\n', '        if (tokensCount >= uint(10000).mul(tokenDecimals) && tokensCount < uint(50000).mul(tokenDecimals)) {\n', '            B1 = (((tokensCount - 10000 * tokenDecimals) * (firstColumn[3] - firstColumn[2])) / ((50000-10000) * tokenDecimals)) + firstColumn[2];\n', '            B2 = (((tokensCount - 10000 * tokenDecimals) * (secondColumn[3] - secondColumn[2])) / ((50000-10000) * tokenDecimals)) + secondColumn[2];\n', '        }\n', '\n', '        if (tokensCount >=  uint(50000).mul(tokenDecimals)) {\n', '            B1 = firstColumn[3];\n', '            B2 = secondColumn[3];\n', '        }\n', '\n', '        uint bonusPercent = B1.sub(((day - 1).mul(B1 - B2)).div(12));\n', '\n', '        return calculateBonusTokensAmount(tokensCount, bonusPercent);\n', '    }\n', '\n', '    function calculateBonusTokensAmount(uint tokensCount, uint bonusPercent) private constant returns(uint){\n', '        uint bonus = tokensCount.mul(bonusPercent);\n', '        bonus = bonus.div(100);\n', '        bonus = bonus.div(fiatValueMultiplier);\n', '        return bonus;\n', '    }\n', '}']
