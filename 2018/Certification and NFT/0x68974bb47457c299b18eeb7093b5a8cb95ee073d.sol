['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface itoken {\n', '    function transferMultiAddressFrom(address _from, address[] _toMulti, uint256[] _values) public returns (bool);\n', '}\n', '\n', 'contract AirsendGifts is Ownable {\n', '    // uint256 private m_rate = 1e18;\n', '\n', '    // function initialize(address _tokenAddr, address _tokenOwner, uint256 _amount) onlyOwner public {\n', '    //     require(_tokenAddr != address(0));\n', '    //     require(_tokenOwner != address(0));\n', '    //     require(_amount > 0);\n', '    //     m_token = DRCTestToken(_tokenAddr);\n', '    //     m_token.approve(this, _amount.mul(m_rate));\n', '    //     m_tokenOwner = _tokenOwner;\n', '    // }\n', '    \n', '    function multiSend(address _tokenAddr, address _tokenOwner, address[] _destAddrs, uint256[] _values) onlyOwner public returns (bool) {\n', '        assert(_destAddrs.length == _values.length);\n', '\n', '        return itoken(_tokenAddr).transferMultiAddressFrom(_tokenOwner, _destAddrs, _values);\n', '    }\n', '}']