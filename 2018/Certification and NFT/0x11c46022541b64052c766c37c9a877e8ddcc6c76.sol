['// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '// import &#39;ds-auth/auth.sol&#39;;\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) public view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        public\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        emit LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '}\n', '\n', '// import &#39;ds-math/math.sol&#39;;\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', '    // It&#39;s O(log n), instead of O(n) for naive repeated multiplication.\n', '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// import &#39;./IkuraStorage.sol&#39;;\n', '/**\n', ' *\n', ' * ロジックの更新に影響されない永続化データを保持するクラス\n', ' *\n', ' */\n', 'contract IkuraStorage is DSMath, DSAuth {\n', '  // オーナー（中央銀行）のアドレス\n', '  address[] ownerAddresses;\n', '\n', '  // 各アドレスのdJPYの口座残高\n', '  mapping(address => uint) coinBalances;\n', '\n', '  // 各アドレスのSHINJI tokenの口座残高\n', '  mapping(address => uint) tokenBalances;\n', '\n', '  // 各アドレスが指定したアドレスに対して許可する最大送金額\n', '  mapping(address => mapping (address => uint)) coinAllowances;\n', '\n', '  // dJPYの発行高\n', '  uint _totalSupply = 0;\n', '\n', '  // 手数料率\n', '  // 0.01pips = 1\n', '  // 例). 手数料を 0.05% とする場合は 500\n', '  uint _transferFeeRate = 500;\n', '\n', '  // 最低手数料額\n', '  // 1 = 1dJPY\n', '  // amount * 手数料率で算出した金額がここで設定した最低手数料を下回る場合は、最低手数料額を手数料とする\n', '  uint8 _transferMinimumFee = 5;\n', '\n', '  address tokenAddress;\n', '  address multiSigAddress;\n', '  address authorityAddress;\n', '\n', '  // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\n', '  //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\n', '  // 勿論テストは通らなくなるので、テストが通ったら試してね\n', '  constructor() public DSAuth() {\n', '    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\n', '    owner = controllerAddress;\n', '    LogSetOwner(controllerAddress);*/\n', '  }\n', '\n', '  function changeToken(address tokenAddress_) public auth {\n', '    tokenAddress = tokenAddress_;\n', '  }\n', '\n', '  function changeAssociation(address multiSigAddress_) public auth {\n', '    multiSigAddress = multiSigAddress_;\n', '  }\n', '\n', '  function changeAuthority(address authorityAddress_) public auth {\n', '    authorityAddress = authorityAddress_;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _totalSupply\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 総発行額を返す\n', '   *\n', '   * @return 総発行額\n', '   */\n', '  function totalSupply() public view auth returns (uint) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '   * 総発行数を増やす（mintと並行して呼ばれることを想定）\n', '   *\n', '   * @param amount 鋳造数\n', '   */\n', '  function addTotalSupply(uint amount) public auth {\n', '    _totalSupply = add(_totalSupply, amount);\n', '  }\n', '\n', '  /**\n', '   * 総発行数を減らす（burnと並行して呼ばれることを想定）\n', '   *\n', '   * @param amount 鋳造数\n', '   */\n', '  function subTotalSupply(uint amount) public auth {\n', '    _totalSupply = sub(_totalSupply, amount);\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _transferFeeRate\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 手数料率を返す\n', '   *\n', '   * @return 現在の手数料率\n', '   */\n', '  function transferFeeRate() public view auth returns (uint) {\n', '    return _transferFeeRate;\n', '  }\n', '\n', '  /**\n', '   * 手数料率を変更する\n', '   *\n', '   * @param newTransferFeeRate 新しい手数料率\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\n', '   */\n', '  function setTransferFeeRate(uint newTransferFeeRate) public auth returns (bool) {\n', '    _transferFeeRate = newTransferFeeRate;\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _transferMinimumFee\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 最低手数料返す\n', '   *\n', '   * @return 現在の最低手数料\n', '   */\n', '  function transferMinimumFee() public view auth returns (uint8) {\n', '    return _transferMinimumFee;\n', '  }\n', '\n', '  /**\n', '   * 最低手数料を変更する\n', '   *\n', '   * @param newTransferMinimumFee 新しい最低手数料\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\n', '   */\n', '  function setTransferMinimumFee(uint8 newTransferMinimumFee) public auth {\n', '    _transferMinimumFee = newTransferMinimumFee;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for ownerAddresses\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーアドレスをオーナーの一覧に追加する\n', '   *\n', '   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\n', '   * トークンの所有者 = オーナーという扱いになったので、この配列に含まれるアドレスの一覧は\n', '   * 手数料からの収益の分配をする時に利用するだけで、オーナーかどうかの判定には利用しない\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addOwnerAddress(address addr) internal returns (bool) {\n', '    ownerAddresses.push(addr);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーアドレスをオーナーの一覧から削除する\n', '   *\n', '   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\n', '   *\n', '   * @param addr オーナーに属するユーザーのアドレス\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function removeOwnerAddress(address addr) internal returns (bool) {\n', '    uint i = 0;\n', '\n', '    while (ownerAddresses[i] != addr) { i++; }\n', '\n', '    while (i < ownerAddresses.length - 1) {\n', '      ownerAddresses[i] = ownerAddresses[i + 1];\n', '      i++;\n', '    }\n', '\n', '    ownerAddresses.length--;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 最初のオーナー（contractをdeployしたユーザー）のアドレスを返す\n', '   *\n', '   * @return 最初のオーナーのアドレス\n', '   */\n', '  function primaryOwner() public view auth returns (address) {\n', '    return ownerAddresses[0];\n', '  }\n', '\n', '  /**\n', '   * 指定したアドレスがオーナーアドレスに登録されているか返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return オーナーに含まれている場合はtrue、含まれていない場合はfalse\n', '   */\n', '  function isOwnerAddress(address addr) public view auth returns (bool) {\n', '    for (uint i = 0; i < ownerAddresses.length; i++) {\n', '      if (ownerAddresses[i] == addr) return true;\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * オーナー数を返す\n', '   *\n', '   * @return オーナー数\n', '   */\n', '  function numOwnerAddress() public view auth returns (uint) {\n', '    return ownerAddresses.length;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for coinBalances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーのdJPY残高を返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return dJPY残高\n', '   */\n', '  function coinBalance(address addr) public view auth returns (uint) {\n', '    return coinBalances[addr];\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのdJPYの残高を増やす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addCoinBalance(address addr, uint amount) public auth returns (bool) {\n', '    coinBalances[addr] = add(coinBalances[addr], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのdJPYの残高を減らす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subCoinBalance(address addr, uint amount) public auth returns (bool) {\n', '    coinBalances[addr] = sub(coinBalances[addr], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for tokenBalances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return SHINJIトークン残高\n', '   */\n', '  function tokenBalance(address addr) public view auth returns (uint) {\n', '    return tokenBalances[addr];\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を増やす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addTokenBalance(address addr, uint amount) public auth returns (bool) {\n', '    tokenBalances[addr] = add(tokenBalances[addr], amount);\n', '\n', '    if (tokenBalances[addr] > 0 && !isOwnerAddress(addr)) {\n', '      addOwnerAddress(addr);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を減らす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subTokenBalance(address addr, uint amount) public auth returns (bool) {\n', '    tokenBalances[addr] = sub(tokenBalances[addr], amount);\n', '\n', '    if (tokenBalances[addr] <= 0) {\n', '      removeOwnerAddress(addr);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for coinAllowances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 送金許可金額を返す\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   *\n', '   * @return 送金許可金額\n', '   */\n', '  function coinAllowance(address owner_, address spender) public view auth returns (uint) {\n', '    return coinAllowances[owner_][spender];\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した金額だけ増やす\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 金額\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = add(coinAllowances[owner_][spender], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した金額だけ減らす\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 金額\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = sub(coinAllowances[owner_][spender], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した値に更新する\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 送金許可金額\n', '   *\n', '   * @return 指定に成功したらtrue、失敗したらfalse\n', '   */\n', '  function setCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = amount;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 権限チェック用関数のoverride\n', '   *\n', '   * @param src 実行者アドレス\n', '   * @param sig 実行関数の識別子\n', '   *\n', '   * @return 実行が許可されていればtrue、そうでなければfalse\n', '   */\n', '  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '    sig; // #HACK\n', '\n', '    return  src == address(this) ||\n', '            src == owner ||\n', '            src == tokenAddress ||\n', '            src == authorityAddress ||\n', '            src == multiSigAddress;\n', '  }\n', '}\n', '\n', '\n', '// import &#39;./IkuraTokenEvent.sol&#39;;\n', '/**\n', ' * Tokenでの処理に関するイベント定義\n', ' *\n', ' * - ERC20に準拠したイベント（Transfer / Approval）\n', ' * - IkuraTokenの独自イベント（TransferToken / TransferFee）\n', ' */\n', 'contract IkuraTokenEvent {\n', '  /** オーナーがdJPYを鋳造した際に発火するイベント */\n', '  event IkuraMint(address indexed owner, uint);\n', '\n', '  /** オーナーがdJPYを消却した際に発火するイベント */\n', '  event IkuraBurn(address indexed owner, uint);\n', '\n', '  /** トークンの移動時に発火するイベント */\n', '  event IkuraTransferToken(address indexed from, address indexed to, uint value);\n', '\n', '  /** 手数料が発生したときに発火するイベント */\n', '  event IkuraTransferFee(address indexed from, address indexed to, address indexed owner, uint value);\n', '\n', '  /**\n', '   * テスト時にこのイベントも流れてくるはずなので追加で定義\n', '   * controllerでもイベントを発火させているが、ゆくゆくはここでIkuraTokenのバージョンとか追加の情報を投げる可能性もあるので残留。\n', '   */\n', '  event IkuraTransfer(address indexed from, address indexed to, uint value);\n', '\n', '  /** 送金許可イベント */\n', '  event IkuraApproval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '// import &#39;./IkuraToken.sol&#39;;\n', '/**\n', ' *\n', ' * トークンロジック\n', ' *\n', ' */\n', 'contract IkuraToken is IkuraTokenEvent, DSMath, DSAuth {\n', '  //\n', '  // constants\n', '  //\n', '\n', '  // 手数料率\n', '  // 0.01pips = 1\n', '  // 例). 手数料を 0.05% とする場合は 500\n', '  uint _transferFeeRate = 0;\n', '\n', '  // 最低手数料額\n', '  // 1 = 1dJPY\n', '  // amount * 手数料率で算出した金額がここで設定した最低手数料を下回る場合は、最低手数料額を手数料とする\n', '  uint8 _transferMinimumFee = 0;\n', '\n', '  // ロジックバージョン\n', '  uint _logicVersion = 2;\n', '\n', '  //\n', '  // libraries\n', '  //\n', '\n', '  /*using ProposalLibrary for ProposalLibrary.Entity;\n', '  ProposalLibrary.Entity proposalEntity;*/\n', '\n', '  //\n', '  // private\n', '  //\n', '\n', '  // データの永続化ストレージ\n', '  IkuraStorage _storage;\n', '  IkuraAssociation _association;\n', '\n', '  constructor() DSAuth() public {\n', '    // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\n', '    //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\n', '    // 勿論テストは通らなくなるので、テストが通ったら試してね\n', '    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\n', '    owner = controllerAddress;\n', '    LogSetOwner(controllerAddress);*/\n', '  }\n', '\n', '  // ----------------------------------------------------------------------------------------------------\n', '  // 以降はERC20に準拠した関数\n', '  // ----------------------------------------------------------------------------------------------------\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * dJPYの発行高を返す\n', '   *\n', '   * @return 発行高\n', '   */\n', '  function totalSupply(address sender) public view returns (uint) {\n', '    sender; // #HACK\n', '\n', '    return _storage.totalSupply();\n', '  }\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * 特定のアドレスのdJPY残高を返す\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param addr アドレス\n', '   *\n', '   * @return 指定したアドレスのdJPY残高\n', '   */\n', '  function balanceOf(address sender, address addr) public view returns (uint) {\n', '    sender; // #HACK\n', '\n', '    return _storage.coinBalance(addr);\n', '  }\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * 指定したアドレスに対してdJPYを送金する\n', '   * 以下の条件を満たす必要がある\n', '   *\n', '   * - メッセージの送信者の残高 >= 送金額\n', '   * - 送金額 > 0\n', '   * - 送金先のアドレスの残高 + 送金額 > 送金元のアドレスの残高（overflowのチェックらしい）\n', '   *\n', '   * @param sender 送金元アドレス\n', '   * @param to 送金対象アドレス\n', '   * @param amount 送金額\n', '   *\n', '   * @return 条件を満たして処理に成功した場合はtrue、失敗した場合はfalse\n', '   */\n', '  function transfer(address sender, address to, uint amount) public auth returns (bool success) {\n', '    uint fee = transferFee(sender, sender, to, amount);\n', '    uint totalAmount = add(amount, fee);\n', '\n', '    require(_storage.coinBalance(sender) >= totalAmount);\n', '    require(amount > 0);\n', '\n', '    // 実行者の口座からamount + feeの金額が控除される\n', '    _storage.subCoinBalance(sender, totalAmount);\n', '\n', '    // toの口座にamountが振り込まれる\n', '    _storage.addCoinBalance(to, amount);\n', '\n', '    if (fee > 0) {\n', '      // 手数料を受け取るオーナーのアドレスを選定\n', '      address owner = selectOwnerAddressForTransactionFee(sender);\n', '\n', '      // オーナーの口座にfeeが振り込まれる\n', '      _storage.addCoinBalance(owner, fee);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * from（送信元のアドレス）からto（送信先のアドレス）へamount分だけ送金する。\n', '   * 主に口座からの引き出しに利用され、契約によってサブ通貨の送金手数料を徴収することができるようになる。\n', '   * この操作はfrom（送信元のアドレス）が何らかの方法で意図的に送信者を許可する場合を除いて失敗すべき。\n', '   * この許可する処理はapproveコマンドで実装しましょう。\n', '   *\n', '   * 以下の条件を満たす場合だけ送金を認める\n', '   *\n', '   * - 送信元の残高 >= 金額\n', '   * - 送金する金額 > 0\n', '   * - 送信者に対して送信元が許可している金額 >= 送金する金額\n', '   * - 送信先の残高 + 金額 > 送信元の残高（overflowのチェックらしい）\n', '   # - 送金処理を行うユーザーの口座残高 >= 送金処理の手数料\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param from 送金元アドレス\n', '   * @param to 送金先アドレス\n', '   * @param amount 送金額\n', '   *\n', '   * @return 条件を満たして処理に成功した場合はtrue、失敗した場合はfalse\n', '   */\n', '  function transferFrom(address sender, address from, address to, uint amount) public auth returns (bool success) {\n', '    uint fee = transferFee(sender, from, to, amount);\n', '\n', '    require(_storage.coinBalance(from) >= amount);\n', '    require(_storage.coinAllowance(from, sender) >= amount);\n', '    require(amount > 0);\n', '    require(add(_storage.coinBalance(to), amount) > _storage.coinBalance(to));\n', '\n', '    if (fee > 0) {\n', '      require(_storage.coinBalance(sender) >= fee);\n', '\n', '      // 手数料を受け取るオーナーのアドレスを選定\n', '      address owner = selectOwnerAddressForTransactionFee(sender);\n', '\n', '      // 手数料はこの関数を実行したユーザー（主に取引所とか）から徴収する\n', '      _storage.subCoinBalance(sender, fee);\n', '\n', '      _storage.addCoinBalance(owner, fee);\n', '    }\n', '\n', '    // 送金元から送金額を引く\n', '    _storage.subCoinBalance(from, amount);\n', '\n', '    // 送金許可している金額を減らす\n', '    _storage.subCoinAllowance(from, sender, amount);\n', '\n', '    // 送金口座に送金額を足す\n', '    _storage.addCoinBalance(to, amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * spender（支払い元のアドレス）にsender（送信者）がamount分だけ支払うのを許可する\n', '   * この関数が呼ばれる度に送金可能な金額を更新する。\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param spender 送金元アドレス\n', '   * @param amount 送金額\n', '   *\n', '   * @return 基本的にtrueを返す\n', '   */\n', '  function approve(address sender, address spender, uint amount) public auth returns (bool success) {\n', '    _storage.setCoinAllowance(sender, spender, amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * 受取側に対して支払い側がどれだけ送金可能かを返す\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param owner 受け取り側のアドレス\n', '   * @param spender 支払い元のアドレス\n', '   *\n', '   * @return 許可されている送金料\n', '   */\n', '  function allowance(address sender, address owner, address spender) public view returns (uint remaining) {\n', '    sender; // #HACK\n', '\n', '    return _storage.coinAllowance(owner, spender);\n', '  }\n', '\n', '  // ----------------------------------------------------------------------------------------------------\n', '  // 以降はERC20以外の独自実装\n', '  // ----------------------------------------------------------------------------------------------------\n', '\n', '  /**\n', '   * 特定のアドレスのSHINJI残高を返す\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param owner アドレス\n', '   *\n', '   * @return 指定したアドレスのSHINJIトークン量\n', '   */\n', '  function tokenBalanceOf(address sender, address owner) public view returns (uint balance) {\n', '    sender; // #HACK\n', '\n', '    return _storage.tokenBalance(owner);\n', '  }\n', '\n', '  /**\n', '   * 指定したアドレスに対してSHINJIトークンを送金する\n', '   *\n', '   * - 送信元の残トークン量 >= トークン量\n', '   * - 送信するトークン量 > 0\n', '   * - 送信先の残高 + 金額 > 送信元の残高（overflowのチェック）\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param to 送金対象アドレス\n', '   * @param amount 送金額\n', '   *\n', '   * @return 条件を満たして処理に成功した場合はtrue、失敗した場合はfalse\n', '   */\n', '  function transferToken(address sender, address to, uint amount) public auth returns (bool success) {\n', '    require(_storage.tokenBalance(sender) >= amount);\n', '    require(amount > 0);\n', '    require(add(_storage.tokenBalance(to), amount) > _storage.tokenBalance(to));\n', '\n', '    _storage.subTokenBalance(sender, amount);\n', '    _storage.addTokenBalance(to, amount);\n', '\n', '    emit IkuraTransferToken(sender, to, amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 送金元、送金先、送金金額によって対象のトランザクションの手数料を決定する\n', '   * 送金金額に対して手数料率をかけたものを計算し、最低手数料金額とのmax値を取る。\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param from 送金元\n', '   * @param to 送金先\n', '   * @param amount 送金金額\n', '   *\n', '   * @return 手数料金額\n', '   */\n', '  function transferFee(address sender, address from, address to, uint amount) public view returns (uint) {\n', '    sender; from; to; // #avoid warning\n', '    if (_transferFeeRate > 0) {\n', '      uint denominator = 1000000; // 0.01 pips だから 100 * 100 * 100 で 100万\n', '      uint numerator = mul(amount, _transferFeeRate);\n', '\n', '      uint fee = numerator / denominator;\n', '      uint remainder = sub(numerator, mul(denominator, fee));\n', '\n', '      // 余りがある場合はfeeに1を足す\n', '      if (remainder > 0) {\n', '        fee++;\n', '      }\n', '\n', '      if (fee < _transferMinimumFee) {\n', '        fee = _transferMinimumFee;\n', '      }\n', '\n', '      return fee;\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * 手数料率を返す\n', '   *\n', '   * @param sender 実行アドレス\n', '   *\n', '   * @return 手数料率\n', '   */\n', '  function transferFeeRate(address sender) public view returns (uint) {\n', '    sender; // #HACK\n', '\n', '    return _transferFeeRate;\n', '  }\n', '\n', '  /**\n', '   * 最低手数料額を返す\n', '   *\n', '   * @param sender 実行アドレス\n', '   *\n', '   * @return 最低手数料額\n', '   */\n', '  function transferMinimumFee(address sender) public view returns (uint8) {\n', '    sender; // #HACK\n', '\n', '    return _transferMinimumFee;\n', '  }\n', '\n', '  /**\n', '   * 手数料を振り込む口座を選択する\n', '   * #TODO とりあえず一個目のオーナーに固定。後で選定ロジックを変える\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @return 特定のオーナー口座\n', '   */\n', '  function selectOwnerAddressForTransactionFee(address sender) public view returns (address) {\n', '    sender; // #HACK\n', '\n', '    return _storage.primaryOwner();\n', '  }\n', '\n', '  /**\n', '   * dJPYを鋳造する\n', '   *\n', '   * - コマンドを実行したユーザがオーナーである\n', '   * - 鋳造する量が0より大きい\n', '   *\n', '   * 場合は成功する\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param amount 鋳造する金額\n', '   */\n', '  function mint(address sender, uint amount) public auth returns (bool) {\n', '    require(amount > 0);\n', '\n', '    _association.newProposal(keccak256(&#39;mint&#39;), sender, amount, &#39;&#39;);\n', '\n', '    return true;\n', '    /*return proposalEntity.mint(sender, amount);*/\n', '  }\n', '\n', '  /**\n', '   * dJPYを消却する\n', '   *\n', '   * - コマンドを実行したユーザがオーナーである\n', '   * - 鋳造する量が0より大きい\n', '   * - dJPYの残高がamountよりも大きい\n', '   * - SHINJIをamountよりも大きい\n', '   *\n', '   * 場合は成功する\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param amount 消却する金額\n', '   */\n', '  function burn(address sender, uint amount) public auth returns (bool) {\n', '    require(amount > 0);\n', '    require(_storage.coinBalance(sender) >= amount);\n', '    require(_storage.tokenBalance(sender) >= amount);\n', '\n', '    _association.newProposal(keccak256(&#39;burn&#39;), sender, amount, &#39;&#39;);\n', '\n', '    return true;\n', '    /*return proposalEntity.burn(sender, amount);*/\n', '  }\n', '\n', '  /**\n', '   * 提案を承認する。\n', '   * #TODO proposalIdは分からないので、別のものからproposalを特定しないといかんよ\n', '   */\n', '  function confirmProposal(address sender, bytes32 type_, uint proposalId) public auth {\n', '    _association.confirmProposal(type_, sender, proposalId);\n', '    /*proposalEntity.confirmProposal(sender, type_, proposalId);*/\n', '  }\n', '\n', '  /**\n', '   * 指定した種類の提案数を取得する\n', '   *\n', '   * @param type_ 提案の種類（&#39;mint&#39; | &#39;burn&#39; | &#39;transferMinimumFee&#39; | &#39;transferFeeRate&#39;）\n', '   *\n', '   * @return 提案数（承認されていないものも含む）\n', '   */\n', '  function numberOfProposals(bytes32 type_) public view returns (uint) {\n', '    return _association.numberOfProposals(type_);\n', '    /*return proposalEntity.numberOfProposals(type_);*/\n', '  }\n', '\n', '  /**\n', '   * 関連づける承認プロセスを変更する\n', '   *\n', '   * @param association_ 新しい承認プロセス\n', '   */\n', '  function changeAssociation(address association_) public auth returns (bool) {\n', '    _association = IkuraAssociation(association_);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 永続化ストレージを設定する\n', '   *\n', '   * @param storage_ 永続化ストレージのインスタンス（アドレス）\n', '   */\n', '  function changeStorage(address storage_) public auth returns (bool) {\n', '    _storage = IkuraStorage(storage_);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ロジックのバージョンを返す\n', '   *\n', '   * @param sender 実行ユーザーのアドレス\n', '   *\n', '   * @return バージョン情報\n', '   */\n', '  function logicVersion(address sender) public view returns (uint) {\n', '    sender; // #HACK\n', '\n', '    return _logicVersion;\n', '  }\n', '}\n', '\n', '/**\n', ' * 経過時間とSHINJI Tokenの所有比率によって特定のアクションの承認を行うクラス\n', ' */\n', 'contract IkuraAssociation is DSMath, DSAuth {\n', '  //\n', '  // public\n', '  //\n', '\n', '  // 提案が承認されるために必要な賛成票の割合\n', '  uint public confirmTotalTokenThreshold = 50;\n', '\n', '  //\n', '  // private\n', '  //\n', '\n', '  // データの永続化ストレージ\n', '  IkuraStorage _storage;\n', '  IkuraToken _token;\n', '\n', '  // 提案一覧\n', '  Proposal[] mintProposals;\n', '  Proposal[] burnProposals;\n', '\n', '  mapping (bytes32 => Proposal[]) proposals;\n', '\n', '  struct Proposal {\n', '    address proposer;                     // 提案者\n', '    bytes32 digest;                       // チェックサム\n', '    bool executed;                        // 実行の有無\n', '    uint createdAt;                       // 提案作成日時\n', '    uint expireAt;                        // 提案の締め切り\n', '    address[] confirmers;                 // 承認者\n', '    uint amount;                          // 鋳造量\n', '  }\n', '\n', '  //\n', '  // Events\n', '  //\n', '\n', '  event MintProposalAdded(uint proposalId, address proposer, uint amount);\n', '  event MintConfirmed(uint proposalId, address confirmer, uint amount);\n', '  event MintExecuted(uint proposalId, address proposer, uint amount);\n', '\n', '  event BurnProposalAdded(uint proposalId, address proposer, uint amount);\n', '  event BurnConfirmed(uint proposalId, address confirmer, uint amount);\n', '  event BurnExecuted(uint proposalId, address proposer, uint amount);\n', '\n', '  constructor() public {\n', '    proposals[keccak256(&#39;mint&#39;)] = mintProposals;\n', '    proposals[keccak256(&#39;burn&#39;)] = burnProposals;\n', '\n', '    // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\n', '    //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\n', '    // 勿論テストは通らなくなるので、テストが通ったら試してね\n', '    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\n', '    owner = controllerAddress;\n', '    LogSetOwner(controllerAddress);*/\n', '  }\n', '\n', '  /**\n', '   * 永続化ストレージを設定する\n', '   *\n', '   * @param newStorage 永続化ストレージのインスタンス（アドレス）\n', '   */\n', '  function changeStorage(IkuraStorage newStorage) public auth returns (bool) {\n', '    _storage = newStorage;\n', '    return true;\n', '  }\n', '\n', '  function changeToken(IkuraToken token_) public auth returns (bool) {\n', '    _token = token_;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 提案を作成する\n', '   *\n', '   * @param proposer 提案者のアドレス\n', '   * @param amount 鋳造量\n', '   */\n', '  function newProposal(bytes32 type_, address proposer, uint amount, bytes transationBytecode) public returns (uint) {\n', '    uint proposalId = proposals[type_].length++;\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '    proposal.proposer = proposer;\n', '    proposal.amount = amount;\n', '    proposal.digest = keccak256(proposer, amount, transationBytecode);\n', '    proposal.executed = false;\n', '    proposal.createdAt = now;\n', '    proposal.expireAt = proposal.createdAt + 86400;\n', '\n', '    // 提案の種類毎に実行すべき内容を実行する\n', '    // @NOTE literal_stringとbytesは単純に比較できないのでkeccak256のハッシュ値で比較している\n', '    if (type_ == keccak256(&#39;mint&#39;)) emit MintProposalAdded(proposalId, proposer, amount);\n', '    if (type_ == keccak256(&#39;burn&#39;)) emit BurnProposalAdded(proposalId, proposer, amount);\n', '\n', '    // 本人は当然承認\n', '    confirmProposal(type_, proposer, proposalId);\n', '\n', '    return proposalId;\n', '  }\n', '\n', '  /**\n', '   * トークン所有者が提案に対して賛成する\n', '   *\n', '   * @param type_ 提案の種類\n', '   * @param confirmer 承認者のアドレス\n', '   * @param proposalId 提案ID\n', '   */\n', '  function confirmProposal(bytes32 type_, address confirmer, uint proposalId) public {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '\n', '    // 既に承認済みの場合はエラーを返す\n', '    require(!hasConfirmed(type_, confirmer, proposalId));\n', '\n', '    // 承認行為を行ったフラグを立てる\n', '    proposal.confirmers.push(confirmer);\n', '\n', '    // 提案の種類毎に実行すべき内容を実行する\n', '    // @NOTE literal_stringとbytesは単純に比較できないのでkeccak256のハッシュ値で比較している\n', '    if (type_ == keccak256(&#39;mint&#39;)) emit MintConfirmed(proposalId, confirmer, proposal.amount);\n', '    if (type_ == keccak256(&#39;burn&#39;)) emit BurnConfirmed(proposalId, confirmer, proposal.amount);\n', '\n', '    if (isProposalExecutable(type_, proposalId, proposal.proposer, &#39;&#39;)) {\n', '      proposal.executed = true;\n', '\n', '      // 提案の種類毎に実行すべき内容を実行する\n', '      // @NOTE literal_stringとbytesは単純に比較できないのでkeccak256のハッシュ値で比較している\n', '      if (type_ == keccak256(&#39;mint&#39;)) executeMintProposal(proposalId);\n', '      if (type_ == keccak256(&#39;burn&#39;)) executeBurnProposal(proposalId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * 既に承認済みの提案かどうかを返す\n', '   *\n', '   * @param type_ 提案の種類\n', '   * @param addr 承認者のアドレス\n', '   * @param proposalId 提案ID\n', '   *\n', '   * @return 承認済みであればtrue、そうでなければfalse\n', '   */\n', '  function hasConfirmed(bytes32 type_, address addr, uint proposalId) internal view returns (bool) {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '    uint length = proposal.confirmers.length;\n', '\n', '    for (uint i = 0; i < length; i++) {\n', '      if (proposal.confirmers[i] == addr) return true;\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * 指定した提案を承認したトークンの総量を返す\n', '   *\n', '   * @param type_ 提案の種類\n', '   * @param proposalId 提案ID\n', '   *\n', '   * @return 承認に投票されたトークン数\n', '   */\n', '  function confirmedTotalToken(bytes32 type_, uint proposalId) internal view returns (uint) {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '    uint length = proposal.confirmers.length;\n', '    uint total = 0;\n', '\n', '    for (uint i = 0; i < length; i++) {\n', '      total = add(total, _storage.tokenBalance(proposal.confirmers[i]));\n', '    }\n', '\n', '    return total;\n', '  }\n', '\n', '  /**\n', '   * 指定した提案の締め切りを返す\n', '   *\n', '   * @param type_ 提案の種類\n', '   * @param proposalId 提案ID\n', '   *\n', '   * @return 提案の締め切り\n', '   */\n', '  function proposalExpireAt(bytes32 type_, uint proposalId) public view returns (uint) {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '    return proposal.expireAt;\n', '  }\n', '\n', '  /**\n', '   * 提案が実行条件を満たしているかを返す\n', '   *\n', '   * 【承認条件】\n', '   * - まだ実行していない\n', '   * - 提案の有効期限内である\n', '   * - 指定した割合以上の賛成トークンを得ている\n', '   *\n', '   * @param proposalId 提案ID\n', '   *\n', '   * @return 実行条件を満たしている場合はtrue、そうでない場合はfalse\n', '   */\n', '  function isProposalExecutable(bytes32 type_, uint proposalId, address proposer, bytes transactionBytecode) internal view returns (bool) {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '\n', '    // オーナーがcontrollerを登録したユーザーしか存在しない場合は\n', '    if (_storage.numOwnerAddress() < 2) {\n', '      return true;\n', '    }\n', '\n', '    return  proposal.digest == keccak256(proposer, proposal.amount, transactionBytecode) &&\n', '            isProposalNotExpired(type_, proposalId) &&\n', '            mul(100, confirmedTotalToken(type_, proposalId)) / _storage.totalSupply() > confirmTotalTokenThreshold;\n', '  }\n', '\n', '  /**\n', '   * 指定した種類の提案数を取得する\n', '   *\n', '   * @param type_ 提案の種類（&#39;mint&#39; | &#39;burn&#39; | &#39;transferMinimumFee&#39; | &#39;transferFeeRate&#39;）\n', '   *\n', '   * @return 提案数（承認されていないものも含む）\n', '   */\n', '  function numberOfProposals(bytes32 type_) public constant returns (uint) {\n', '    return proposals[type_].length;\n', '  }\n', '\n', '  /**\n', '   * 未承認で有効期限の切れていない提案の数を返す\n', '   *\n', '   * @param type_ 提案の種類（&#39;mint&#39; | &#39;burn&#39; | &#39;transferMinimumFee&#39; | &#39;transferFeeRate&#39;）\n', '   *\n', '   * @return 提案数\n', '   */\n', '  function numberOfActiveProposals(bytes32 type_) public view returns (uint) {\n', '    uint numActiveProposal = 0;\n', '\n', '    for(uint i = 0; i < proposals[type_].length; i++) {\n', '      if (isProposalNotExpired(type_, i)) {\n', '        numActiveProposal++;\n', '      }\n', '    }\n', '\n', '    return numActiveProposal;\n', '  }\n', '\n', '  /**\n', '   * 提案の有効期限が切れていないかチェックする\n', '   *\n', '   * - 実行されていない\n', '   * - 有効期限が切れていない\n', '   *\n', '   * 場合のみtrueを返す\n', '   */\n', '  function isProposalNotExpired(bytes32 type_, uint proposalId) internal view returns (bool) {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '\n', '    return  !proposal.executed &&\n', '            now < proposal.expireAt;\n', '  }\n', '\n', '  /**\n', '   * dJPYを鋳造する\n', '   *\n', '   * - 鋳造する量が0より大きい\n', '   *\n', '   * 場合は成功する\n', '   *\n', '   * @param proposalId 提案ID\n', '   */\n', '  function executeMintProposal(uint proposalId) internal returns (bool) {\n', '    Proposal storage proposal = proposals[keccak256(&#39;mint&#39;)][proposalId];\n', '\n', '    // ここでも念のためチェックを入れる\n', '    require(proposal.amount > 0);\n', '\n', '    emit MintExecuted(proposalId, proposal.proposer, proposal.amount);\n', '\n', '    // 総供給量 / 実行者のdJPY / 実行者のSHINJI tokenを増やす\n', '    _storage.addTotalSupply(proposal.amount);\n', '    _storage.addCoinBalance(proposal.proposer, proposal.amount);\n', '    _storage.addTokenBalance(proposal.proposer, proposal.amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * dJPYを消却する\n', '   *\n', '   * - 消却する量が0より大きい\n', '   * - 提案者の所有するdJPYの残高がamount以上\n', '   * - 提案者の所有するSHINJIがamountよりも大きい\n', '   *\n', '   * 場合は成功する\n', '   *\n', '   * @param proposalId 提案ID\n', '   */\n', '  function executeBurnProposal(uint proposalId) internal returns (bool) {\n', '    Proposal storage proposal = proposals[keccak256(&#39;burn&#39;)][proposalId];\n', '\n', '    // ここでも念のためチェックを入れる\n', '    require(proposal.amount > 0);\n', '    require(_storage.coinBalance(proposal.proposer) >= proposal.amount);\n', '    require(_storage.tokenBalance(proposal.proposer) >= proposal.amount);\n', '\n', '    emit BurnExecuted(proposalId, proposal.proposer, proposal.amount);\n', '\n', '    // 総供給量 / 実行者のdJPY / 実行者のSHINJI tokenを減らす\n', '    _storage.subTotalSupply(proposal.amount);\n', '    _storage.subCoinBalance(proposal.proposer, proposal.amount);\n', '    _storage.subTokenBalance(proposal.proposer, proposal.amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '    sig; // #HACK\n', '\n', '    return  src == address(this) ||\n', '            src == owner ||\n', '            src == address(_token);\n', '  }\n', '}']
['// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', "// import 'ds-auth/auth.sol';\n", 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) public view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        public\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        emit LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '}\n', '\n', "// import 'ds-math/math.sol';\n", 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', "// import './IkuraStorage.sol';\n", '/**\n', ' *\n', ' * ロジックの更新に影響されない永続化データを保持するクラス\n', ' *\n', ' */\n', 'contract IkuraStorage is DSMath, DSAuth {\n', '  // オーナー（中央銀行）のアドレス\n', '  address[] ownerAddresses;\n', '\n', '  // 各アドレスのdJPYの口座残高\n', '  mapping(address => uint) coinBalances;\n', '\n', '  // 各アドレスのSHINJI tokenの口座残高\n', '  mapping(address => uint) tokenBalances;\n', '\n', '  // 各アドレスが指定したアドレスに対して許可する最大送金額\n', '  mapping(address => mapping (address => uint)) coinAllowances;\n', '\n', '  // dJPYの発行高\n', '  uint _totalSupply = 0;\n', '\n', '  // 手数料率\n', '  // 0.01pips = 1\n', '  // 例). 手数料を 0.05% とする場合は 500\n', '  uint _transferFeeRate = 500;\n', '\n', '  // 最低手数料額\n', '  // 1 = 1dJPY\n', '  // amount * 手数料率で算出した金額がここで設定した最低手数料を下回る場合は、最低手数料額を手数料とする\n', '  uint8 _transferMinimumFee = 5;\n', '\n', '  address tokenAddress;\n', '  address multiSigAddress;\n', '  address authorityAddress;\n', '\n', '  // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\n', '  //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\n', '  // 勿論テストは通らなくなるので、テストが通ったら試してね\n', '  constructor() public DSAuth() {\n', '    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\n', '    owner = controllerAddress;\n', '    LogSetOwner(controllerAddress);*/\n', '  }\n', '\n', '  function changeToken(address tokenAddress_) public auth {\n', '    tokenAddress = tokenAddress_;\n', '  }\n', '\n', '  function changeAssociation(address multiSigAddress_) public auth {\n', '    multiSigAddress = multiSigAddress_;\n', '  }\n', '\n', '  function changeAuthority(address authorityAddress_) public auth {\n', '    authorityAddress = authorityAddress_;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _totalSupply\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 総発行額を返す\n', '   *\n', '   * @return 総発行額\n', '   */\n', '  function totalSupply() public view auth returns (uint) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '   * 総発行数を増やす（mintと並行して呼ばれることを想定）\n', '   *\n', '   * @param amount 鋳造数\n', '   */\n', '  function addTotalSupply(uint amount) public auth {\n', '    _totalSupply = add(_totalSupply, amount);\n', '  }\n', '\n', '  /**\n', '   * 総発行数を減らす（burnと並行して呼ばれることを想定）\n', '   *\n', '   * @param amount 鋳造数\n', '   */\n', '  function subTotalSupply(uint amount) public auth {\n', '    _totalSupply = sub(_totalSupply, amount);\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _transferFeeRate\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 手数料率を返す\n', '   *\n', '   * @return 現在の手数料率\n', '   */\n', '  function transferFeeRate() public view auth returns (uint) {\n', '    return _transferFeeRate;\n', '  }\n', '\n', '  /**\n', '   * 手数料率を変更する\n', '   *\n', '   * @param newTransferFeeRate 新しい手数料率\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\n', '   */\n', '  function setTransferFeeRate(uint newTransferFeeRate) public auth returns (bool) {\n', '    _transferFeeRate = newTransferFeeRate;\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for _transferMinimumFee\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 最低手数料返す\n', '   *\n', '   * @return 現在の最低手数料\n', '   */\n', '  function transferMinimumFee() public view auth returns (uint8) {\n', '    return _transferMinimumFee;\n', '  }\n', '\n', '  /**\n', '   * 最低手数料を変更する\n', '   *\n', '   * @param newTransferMinimumFee 新しい最低手数料\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse（今のところ失敗するケースはない）\n', '   */\n', '  function setTransferMinimumFee(uint8 newTransferMinimumFee) public auth {\n', '    _transferMinimumFee = newTransferMinimumFee;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for ownerAddresses\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーアドレスをオーナーの一覧に追加する\n', '   *\n', '   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\n', '   * トークンの所有者 = オーナーという扱いになったので、この配列に含まれるアドレスの一覧は\n', '   * 手数料からの収益の分配をする時に利用するだけで、オーナーかどうかの判定には利用しない\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addOwnerAddress(address addr) internal returns (bool) {\n', '    ownerAddresses.push(addr);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーアドレスをオーナーの一覧から削除する\n', '   *\n', '   * トークンの移動時に内部的にオーナーのアドレスを管理するための関数。\n', '   *\n', '   * @param addr オーナーに属するユーザーのアドレス\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function removeOwnerAddress(address addr) internal returns (bool) {\n', '    uint i = 0;\n', '\n', '    while (ownerAddresses[i] != addr) { i++; }\n', '\n', '    while (i < ownerAddresses.length - 1) {\n', '      ownerAddresses[i] = ownerAddresses[i + 1];\n', '      i++;\n', '    }\n', '\n', '    ownerAddresses.length--;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 最初のオーナー（contractをdeployしたユーザー）のアドレスを返す\n', '   *\n', '   * @return 最初のオーナーのアドレス\n', '   */\n', '  function primaryOwner() public view auth returns (address) {\n', '    return ownerAddresses[0];\n', '  }\n', '\n', '  /**\n', '   * 指定したアドレスがオーナーアドレスに登録されているか返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return オーナーに含まれている場合はtrue、含まれていない場合はfalse\n', '   */\n', '  function isOwnerAddress(address addr) public view auth returns (bool) {\n', '    for (uint i = 0; i < ownerAddresses.length; i++) {\n', '      if (ownerAddresses[i] == addr) return true;\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * オーナー数を返す\n', '   *\n', '   * @return オーナー数\n', '   */\n', '  function numOwnerAddress() public view auth returns (uint) {\n', '    return ownerAddresses.length;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for coinBalances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーのdJPY残高を返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return dJPY残高\n', '   */\n', '  function coinBalance(address addr) public view auth returns (uint) {\n', '    return coinBalances[addr];\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのdJPYの残高を増やす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addCoinBalance(address addr, uint amount) public auth returns (bool) {\n', '    coinBalances[addr] = add(coinBalances[addr], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのdJPYの残高を減らす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subCoinBalance(address addr, uint amount) public auth returns (bool) {\n', '    coinBalances[addr] = sub(coinBalances[addr], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for tokenBalances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を返す\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   *\n', '   * @return SHINJIトークン残高\n', '   */\n', '  function tokenBalance(address addr) public view auth returns (uint) {\n', '    return tokenBalances[addr];\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を増やす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addTokenBalance(address addr, uint amount) public auth returns (bool) {\n', '    tokenBalances[addr] = add(tokenBalances[addr], amount);\n', '\n', '    if (tokenBalances[addr] > 0 && !isOwnerAddress(addr)) {\n', '      addOwnerAddress(addr);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 指定したユーザーのSHINJIトークンの残高を減らす\n', '   *\n', '   * @param addr ユーザーのアドレス\n', '   * @param amount 差分\n', '   *\n', '   * @return 処理に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subTokenBalance(address addr, uint amount) public auth returns (bool) {\n', '    tokenBalances[addr] = sub(tokenBalances[addr], amount);\n', '\n', '    if (tokenBalances[addr] <= 0) {\n', '      removeOwnerAddress(addr);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  // --------------------------------------------------\n', '  // functions for coinAllowances\n', '  // --------------------------------------------------\n', '\n', '  /**\n', '   * 送金許可金額を返す\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   *\n', '   * @return 送金許可金額\n', '   */\n', '  function coinAllowance(address owner_, address spender) public view auth returns (uint) {\n', '    return coinAllowances[owner_][spender];\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した金額だけ増やす\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 金額\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse\n', '   */\n', '  function addCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = add(coinAllowances[owner_][spender], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した金額だけ減らす\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 金額\n', '   *\n', '   * @return 更新に成功したらtrue、失敗したらfalse\n', '   */\n', '  function subCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = sub(coinAllowances[owner_][spender], amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 送金許可金額を指定した値に更新する\n', '   *\n', '   * @param owner_ 送金者\n', '   * @param spender 送金代行者\n', '   * @param amount 送金許可金額\n', '   *\n', '   * @return 指定に成功したらtrue、失敗したらfalse\n', '   */\n', '  function setCoinAllowance(address owner_, address spender, uint amount) public auth returns (bool) {\n', '    coinAllowances[owner_][spender] = amount;\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 権限チェック用関数のoverride\n', '   *\n', '   * @param src 実行者アドレス\n', '   * @param sig 実行関数の識別子\n', '   *\n', '   * @return 実行が許可されていればtrue、そうでなければfalse\n', '   */\n', '  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '    sig; // #HACK\n', '\n', '    return  src == address(this) ||\n', '            src == owner ||\n', '            src == tokenAddress ||\n', '            src == authorityAddress ||\n', '            src == multiSigAddress;\n', '  }\n', '}\n', '\n', '\n', "// import './IkuraTokenEvent.sol';\n", '/**\n', ' * Tokenでの処理に関するイベント定義\n', ' *\n', ' * - ERC20に準拠したイベント（Transfer / Approval）\n', ' * - IkuraTokenの独自イベント（TransferToken / TransferFee）\n', ' */\n', 'contract IkuraTokenEvent {\n', '  /** オーナーがdJPYを鋳造した際に発火するイベント */\n', '  event IkuraMint(address indexed owner, uint);\n', '\n', '  /** オーナーがdJPYを消却した際に発火するイベント */\n', '  event IkuraBurn(address indexed owner, uint);\n', '\n', '  /** トークンの移動時に発火するイベント */\n', '  event IkuraTransferToken(address indexed from, address indexed to, uint value);\n', '\n', '  /** 手数料が発生したときに発火するイベント */\n', '  event IkuraTransferFee(address indexed from, address indexed to, address indexed owner, uint value);\n', '\n', '  /**\n', '   * テスト時にこのイベントも流れてくるはずなので追加で定義\n', '   * controllerでもイベントを発火させているが、ゆくゆくはここでIkuraTokenのバージョンとか追加の情報を投げる可能性もあるので残留。\n', '   */\n', '  event IkuraTransfer(address indexed from, address indexed to, uint value);\n', '\n', '  /** 送金許可イベント */\n', '  event IkuraApproval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', "// import './IkuraToken.sol';\n", '/**\n', ' *\n', ' * トークンロジック\n', ' *\n', ' */\n', 'contract IkuraToken is IkuraTokenEvent, DSMath, DSAuth {\n', '  //\n', '  // constants\n', '  //\n', '\n', '  // 手数料率\n', '  // 0.01pips = 1\n', '  // 例). 手数料を 0.05% とする場合は 500\n', '  uint _transferFeeRate = 0;\n', '\n', '  // 最低手数料額\n', '  // 1 = 1dJPY\n', '  // amount * 手数料率で算出した金額がここで設定した最低手数料を下回る場合は、最低手数料額を手数料とする\n', '  uint8 _transferMinimumFee = 0;\n', '\n', '  // ロジックバージョン\n', '  uint _logicVersion = 2;\n', '\n', '  //\n', '  // libraries\n', '  //\n', '\n', '  /*using ProposalLibrary for ProposalLibrary.Entity;\n', '  ProposalLibrary.Entity proposalEntity;*/\n', '\n', '  //\n', '  // private\n', '  //\n', '\n', '  // データの永続化ストレージ\n', '  IkuraStorage _storage;\n', '  IkuraAssociation _association;\n', '\n', '  constructor() DSAuth() public {\n', '    // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\n', '    //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\n', '    // 勿論テストは通らなくなるので、テストが通ったら試してね\n', '    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\n', '    owner = controllerAddress;\n', '    LogSetOwner(controllerAddress);*/\n', '  }\n', '\n', '  // ----------------------------------------------------------------------------------------------------\n', '  // 以降はERC20に準拠した関数\n', '  // ----------------------------------------------------------------------------------------------------\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * dJPYの発行高を返す\n', '   *\n', '   * @return 発行高\n', '   */\n', '  function totalSupply(address sender) public view returns (uint) {\n', '    sender; // #HACK\n', '\n', '    return _storage.totalSupply();\n', '  }\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * 特定のアドレスのdJPY残高を返す\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param addr アドレス\n', '   *\n', '   * @return 指定したアドレスのdJPY残高\n', '   */\n', '  function balanceOf(address sender, address addr) public view returns (uint) {\n', '    sender; // #HACK\n', '\n', '    return _storage.coinBalance(addr);\n', '  }\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * 指定したアドレスに対してdJPYを送金する\n', '   * 以下の条件を満たす必要がある\n', '   *\n', '   * - メッセージの送信者の残高 >= 送金額\n', '   * - 送金額 > 0\n', '   * - 送金先のアドレスの残高 + 送金額 > 送金元のアドレスの残高（overflowのチェックらしい）\n', '   *\n', '   * @param sender 送金元アドレス\n', '   * @param to 送金対象アドレス\n', '   * @param amount 送金額\n', '   *\n', '   * @return 条件を満たして処理に成功した場合はtrue、失敗した場合はfalse\n', '   */\n', '  function transfer(address sender, address to, uint amount) public auth returns (bool success) {\n', '    uint fee = transferFee(sender, sender, to, amount);\n', '    uint totalAmount = add(amount, fee);\n', '\n', '    require(_storage.coinBalance(sender) >= totalAmount);\n', '    require(amount > 0);\n', '\n', '    // 実行者の口座からamount + feeの金額が控除される\n', '    _storage.subCoinBalance(sender, totalAmount);\n', '\n', '    // toの口座にamountが振り込まれる\n', '    _storage.addCoinBalance(to, amount);\n', '\n', '    if (fee > 0) {\n', '      // 手数料を受け取るオーナーのアドレスを選定\n', '      address owner = selectOwnerAddressForTransactionFee(sender);\n', '\n', '      // オーナーの口座にfeeが振り込まれる\n', '      _storage.addCoinBalance(owner, fee);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * from（送信元のアドレス）からto（送信先のアドレス）へamount分だけ送金する。\n', '   * 主に口座からの引き出しに利用され、契約によってサブ通貨の送金手数料を徴収することができるようになる。\n', '   * この操作はfrom（送信元のアドレス）が何らかの方法で意図的に送信者を許可する場合を除いて失敗すべき。\n', '   * この許可する処理はapproveコマンドで実装しましょう。\n', '   *\n', '   * 以下の条件を満たす場合だけ送金を認める\n', '   *\n', '   * - 送信元の残高 >= 金額\n', '   * - 送金する金額 > 0\n', '   * - 送信者に対して送信元が許可している金額 >= 送金する金額\n', '   * - 送信先の残高 + 金額 > 送信元の残高（overflowのチェックらしい）\n', '   # - 送金処理を行うユーザーの口座残高 >= 送金処理の手数料\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param from 送金元アドレス\n', '   * @param to 送金先アドレス\n', '   * @param amount 送金額\n', '   *\n', '   * @return 条件を満たして処理に成功した場合はtrue、失敗した場合はfalse\n', '   */\n', '  function transferFrom(address sender, address from, address to, uint amount) public auth returns (bool success) {\n', '    uint fee = transferFee(sender, from, to, amount);\n', '\n', '    require(_storage.coinBalance(from) >= amount);\n', '    require(_storage.coinAllowance(from, sender) >= amount);\n', '    require(amount > 0);\n', '    require(add(_storage.coinBalance(to), amount) > _storage.coinBalance(to));\n', '\n', '    if (fee > 0) {\n', '      require(_storage.coinBalance(sender) >= fee);\n', '\n', '      // 手数料を受け取るオーナーのアドレスを選定\n', '      address owner = selectOwnerAddressForTransactionFee(sender);\n', '\n', '      // 手数料はこの関数を実行したユーザー（主に取引所とか）から徴収する\n', '      _storage.subCoinBalance(sender, fee);\n', '\n', '      _storage.addCoinBalance(owner, fee);\n', '    }\n', '\n', '    // 送金元から送金額を引く\n', '    _storage.subCoinBalance(from, amount);\n', '\n', '    // 送金許可している金額を減らす\n', '    _storage.subCoinAllowance(from, sender, amount);\n', '\n', '    // 送金口座に送金額を足す\n', '    _storage.addCoinBalance(to, amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * spender（支払い元のアドレス）にsender（送信者）がamount分だけ支払うのを許可する\n', '   * この関数が呼ばれる度に送金可能な金額を更新する。\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param spender 送金元アドレス\n', '   * @param amount 送金額\n', '   *\n', '   * @return 基本的にtrueを返す\n', '   */\n', '  function approve(address sender, address spender, uint amount) public auth returns (bool success) {\n', '    _storage.setCoinAllowance(sender, spender, amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ERC20 Token Standardに準拠した関数\n', '   *\n', '   * 受取側に対して支払い側がどれだけ送金可能かを返す\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param owner 受け取り側のアドレス\n', '   * @param spender 支払い元のアドレス\n', '   *\n', '   * @return 許可されている送金料\n', '   */\n', '  function allowance(address sender, address owner, address spender) public view returns (uint remaining) {\n', '    sender; // #HACK\n', '\n', '    return _storage.coinAllowance(owner, spender);\n', '  }\n', '\n', '  // ----------------------------------------------------------------------------------------------------\n', '  // 以降はERC20以外の独自実装\n', '  // ----------------------------------------------------------------------------------------------------\n', '\n', '  /**\n', '   * 特定のアドレスのSHINJI残高を返す\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param owner アドレス\n', '   *\n', '   * @return 指定したアドレスのSHINJIトークン量\n', '   */\n', '  function tokenBalanceOf(address sender, address owner) public view returns (uint balance) {\n', '    sender; // #HACK\n', '\n', '    return _storage.tokenBalance(owner);\n', '  }\n', '\n', '  /**\n', '   * 指定したアドレスに対してSHINJIトークンを送金する\n', '   *\n', '   * - 送信元の残トークン量 >= トークン量\n', '   * - 送信するトークン量 > 0\n', '   * - 送信先の残高 + 金額 > 送信元の残高（overflowのチェック）\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param to 送金対象アドレス\n', '   * @param amount 送金額\n', '   *\n', '   * @return 条件を満たして処理に成功した場合はtrue、失敗した場合はfalse\n', '   */\n', '  function transferToken(address sender, address to, uint amount) public auth returns (bool success) {\n', '    require(_storage.tokenBalance(sender) >= amount);\n', '    require(amount > 0);\n', '    require(add(_storage.tokenBalance(to), amount) > _storage.tokenBalance(to));\n', '\n', '    _storage.subTokenBalance(sender, amount);\n', '    _storage.addTokenBalance(to, amount);\n', '\n', '    emit IkuraTransferToken(sender, to, amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 送金元、送金先、送金金額によって対象のトランザクションの手数料を決定する\n', '   * 送金金額に対して手数料率をかけたものを計算し、最低手数料金額とのmax値を取る。\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param from 送金元\n', '   * @param to 送金先\n', '   * @param amount 送金金額\n', '   *\n', '   * @return 手数料金額\n', '   */\n', '  function transferFee(address sender, address from, address to, uint amount) public view returns (uint) {\n', '    sender; from; to; // #avoid warning\n', '    if (_transferFeeRate > 0) {\n', '      uint denominator = 1000000; // 0.01 pips だから 100 * 100 * 100 で 100万\n', '      uint numerator = mul(amount, _transferFeeRate);\n', '\n', '      uint fee = numerator / denominator;\n', '      uint remainder = sub(numerator, mul(denominator, fee));\n', '\n', '      // 余りがある場合はfeeに1を足す\n', '      if (remainder > 0) {\n', '        fee++;\n', '      }\n', '\n', '      if (fee < _transferMinimumFee) {\n', '        fee = _transferMinimumFee;\n', '      }\n', '\n', '      return fee;\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * 手数料率を返す\n', '   *\n', '   * @param sender 実行アドレス\n', '   *\n', '   * @return 手数料率\n', '   */\n', '  function transferFeeRate(address sender) public view returns (uint) {\n', '    sender; // #HACK\n', '\n', '    return _transferFeeRate;\n', '  }\n', '\n', '  /**\n', '   * 最低手数料額を返す\n', '   *\n', '   * @param sender 実行アドレス\n', '   *\n', '   * @return 最低手数料額\n', '   */\n', '  function transferMinimumFee(address sender) public view returns (uint8) {\n', '    sender; // #HACK\n', '\n', '    return _transferMinimumFee;\n', '  }\n', '\n', '  /**\n', '   * 手数料を振り込む口座を選択する\n', '   * #TODO とりあえず一個目のオーナーに固定。後で選定ロジックを変える\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @return 特定のオーナー口座\n', '   */\n', '  function selectOwnerAddressForTransactionFee(address sender) public view returns (address) {\n', '    sender; // #HACK\n', '\n', '    return _storage.primaryOwner();\n', '  }\n', '\n', '  /**\n', '   * dJPYを鋳造する\n', '   *\n', '   * - コマンドを実行したユーザがオーナーである\n', '   * - 鋳造する量が0より大きい\n', '   *\n', '   * 場合は成功する\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param amount 鋳造する金額\n', '   */\n', '  function mint(address sender, uint amount) public auth returns (bool) {\n', '    require(amount > 0);\n', '\n', "    _association.newProposal(keccak256('mint'), sender, amount, '');\n", '\n', '    return true;\n', '    /*return proposalEntity.mint(sender, amount);*/\n', '  }\n', '\n', '  /**\n', '   * dJPYを消却する\n', '   *\n', '   * - コマンドを実行したユーザがオーナーである\n', '   * - 鋳造する量が0より大きい\n', '   * - dJPYの残高がamountよりも大きい\n', '   * - SHINJIをamountよりも大きい\n', '   *\n', '   * 場合は成功する\n', '   *\n', '   * @param sender 実行アドレス\n', '   * @param amount 消却する金額\n', '   */\n', '  function burn(address sender, uint amount) public auth returns (bool) {\n', '    require(amount > 0);\n', '    require(_storage.coinBalance(sender) >= amount);\n', '    require(_storage.tokenBalance(sender) >= amount);\n', '\n', "    _association.newProposal(keccak256('burn'), sender, amount, '');\n", '\n', '    return true;\n', '    /*return proposalEntity.burn(sender, amount);*/\n', '  }\n', '\n', '  /**\n', '   * 提案を承認する。\n', '   * #TODO proposalIdは分からないので、別のものからproposalを特定しないといかんよ\n', '   */\n', '  function confirmProposal(address sender, bytes32 type_, uint proposalId) public auth {\n', '    _association.confirmProposal(type_, sender, proposalId);\n', '    /*proposalEntity.confirmProposal(sender, type_, proposalId);*/\n', '  }\n', '\n', '  /**\n', '   * 指定した種類の提案数を取得する\n', '   *\n', "   * @param type_ 提案の種類（'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'）\n", '   *\n', '   * @return 提案数（承認されていないものも含む）\n', '   */\n', '  function numberOfProposals(bytes32 type_) public view returns (uint) {\n', '    return _association.numberOfProposals(type_);\n', '    /*return proposalEntity.numberOfProposals(type_);*/\n', '  }\n', '\n', '  /**\n', '   * 関連づける承認プロセスを変更する\n', '   *\n', '   * @param association_ 新しい承認プロセス\n', '   */\n', '  function changeAssociation(address association_) public auth returns (bool) {\n', '    _association = IkuraAssociation(association_);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 永続化ストレージを設定する\n', '   *\n', '   * @param storage_ 永続化ストレージのインスタンス（アドレス）\n', '   */\n', '  function changeStorage(address storage_) public auth returns (bool) {\n', '    _storage = IkuraStorage(storage_);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * ロジックのバージョンを返す\n', '   *\n', '   * @param sender 実行ユーザーのアドレス\n', '   *\n', '   * @return バージョン情報\n', '   */\n', '  function logicVersion(address sender) public view returns (uint) {\n', '    sender; // #HACK\n', '\n', '    return _logicVersion;\n', '  }\n', '}\n', '\n', '/**\n', ' * 経過時間とSHINJI Tokenの所有比率によって特定のアクションの承認を行うクラス\n', ' */\n', 'contract IkuraAssociation is DSMath, DSAuth {\n', '  //\n', '  // public\n', '  //\n', '\n', '  // 提案が承認されるために必要な賛成票の割合\n', '  uint public confirmTotalTokenThreshold = 50;\n', '\n', '  //\n', '  // private\n', '  //\n', '\n', '  // データの永続化ストレージ\n', '  IkuraStorage _storage;\n', '  IkuraToken _token;\n', '\n', '  // 提案一覧\n', '  Proposal[] mintProposals;\n', '  Proposal[] burnProposals;\n', '\n', '  mapping (bytes32 => Proposal[]) proposals;\n', '\n', '  struct Proposal {\n', '    address proposer;                     // 提案者\n', '    bytes32 digest;                       // チェックサム\n', '    bool executed;                        // 実行の有無\n', '    uint createdAt;                       // 提案作成日時\n', '    uint expireAt;                        // 提案の締め切り\n', '    address[] confirmers;                 // 承認者\n', '    uint amount;                          // 鋳造量\n', '  }\n', '\n', '  //\n', '  // Events\n', '  //\n', '\n', '  event MintProposalAdded(uint proposalId, address proposer, uint amount);\n', '  event MintConfirmed(uint proposalId, address confirmer, uint amount);\n', '  event MintExecuted(uint proposalId, address proposer, uint amount);\n', '\n', '  event BurnProposalAdded(uint proposalId, address proposer, uint amount);\n', '  event BurnConfirmed(uint proposalId, address confirmer, uint amount);\n', '  event BurnExecuted(uint proposalId, address proposer, uint amount);\n', '\n', '  constructor() public {\n', "    proposals[keccak256('mint')] = mintProposals;\n", "    proposals[keccak256('burn')] = burnProposals;\n", '\n', '    // @NOTE リリース時にcontractのdeploy -> watch contract -> setOwnerの流れを\n', '    //省略したい場合は、ここで直接controllerのアドレスを指定するとショートカットできます\n', '    // 勿論テストは通らなくなるので、テストが通ったら試してね\n', '    /*address controllerAddress = 0x34c5605A4Ef1C98575DB6542179E55eE1f77A188;\n', '    owner = controllerAddress;\n', '    LogSetOwner(controllerAddress);*/\n', '  }\n', '\n', '  /**\n', '   * 永続化ストレージを設定する\n', '   *\n', '   * @param newStorage 永続化ストレージのインスタンス（アドレス）\n', '   */\n', '  function changeStorage(IkuraStorage newStorage) public auth returns (bool) {\n', '    _storage = newStorage;\n', '    return true;\n', '  }\n', '\n', '  function changeToken(IkuraToken token_) public auth returns (bool) {\n', '    _token = token_;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * 提案を作成する\n', '   *\n', '   * @param proposer 提案者のアドレス\n', '   * @param amount 鋳造量\n', '   */\n', '  function newProposal(bytes32 type_, address proposer, uint amount, bytes transationBytecode) public returns (uint) {\n', '    uint proposalId = proposals[type_].length++;\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '    proposal.proposer = proposer;\n', '    proposal.amount = amount;\n', '    proposal.digest = keccak256(proposer, amount, transationBytecode);\n', '    proposal.executed = false;\n', '    proposal.createdAt = now;\n', '    proposal.expireAt = proposal.createdAt + 86400;\n', '\n', '    // 提案の種類毎に実行すべき内容を実行する\n', '    // @NOTE literal_stringとbytesは単純に比較できないのでkeccak256のハッシュ値で比較している\n', "    if (type_ == keccak256('mint')) emit MintProposalAdded(proposalId, proposer, amount);\n", "    if (type_ == keccak256('burn')) emit BurnProposalAdded(proposalId, proposer, amount);\n", '\n', '    // 本人は当然承認\n', '    confirmProposal(type_, proposer, proposalId);\n', '\n', '    return proposalId;\n', '  }\n', '\n', '  /**\n', '   * トークン所有者が提案に対して賛成する\n', '   *\n', '   * @param type_ 提案の種類\n', '   * @param confirmer 承認者のアドレス\n', '   * @param proposalId 提案ID\n', '   */\n', '  function confirmProposal(bytes32 type_, address confirmer, uint proposalId) public {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '\n', '    // 既に承認済みの場合はエラーを返す\n', '    require(!hasConfirmed(type_, confirmer, proposalId));\n', '\n', '    // 承認行為を行ったフラグを立てる\n', '    proposal.confirmers.push(confirmer);\n', '\n', '    // 提案の種類毎に実行すべき内容を実行する\n', '    // @NOTE literal_stringとbytesは単純に比較できないのでkeccak256のハッシュ値で比較している\n', "    if (type_ == keccak256('mint')) emit MintConfirmed(proposalId, confirmer, proposal.amount);\n", "    if (type_ == keccak256('burn')) emit BurnConfirmed(proposalId, confirmer, proposal.amount);\n", '\n', "    if (isProposalExecutable(type_, proposalId, proposal.proposer, '')) {\n", '      proposal.executed = true;\n', '\n', '      // 提案の種類毎に実行すべき内容を実行する\n', '      // @NOTE literal_stringとbytesは単純に比較できないのでkeccak256のハッシュ値で比較している\n', "      if (type_ == keccak256('mint')) executeMintProposal(proposalId);\n", "      if (type_ == keccak256('burn')) executeBurnProposal(proposalId);\n", '    }\n', '  }\n', '\n', '  /**\n', '   * 既に承認済みの提案かどうかを返す\n', '   *\n', '   * @param type_ 提案の種類\n', '   * @param addr 承認者のアドレス\n', '   * @param proposalId 提案ID\n', '   *\n', '   * @return 承認済みであればtrue、そうでなければfalse\n', '   */\n', '  function hasConfirmed(bytes32 type_, address addr, uint proposalId) internal view returns (bool) {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '    uint length = proposal.confirmers.length;\n', '\n', '    for (uint i = 0; i < length; i++) {\n', '      if (proposal.confirmers[i] == addr) return true;\n', '    }\n', '\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * 指定した提案を承認したトークンの総量を返す\n', '   *\n', '   * @param type_ 提案の種類\n', '   * @param proposalId 提案ID\n', '   *\n', '   * @return 承認に投票されたトークン数\n', '   */\n', '  function confirmedTotalToken(bytes32 type_, uint proposalId) internal view returns (uint) {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '    uint length = proposal.confirmers.length;\n', '    uint total = 0;\n', '\n', '    for (uint i = 0; i < length; i++) {\n', '      total = add(total, _storage.tokenBalance(proposal.confirmers[i]));\n', '    }\n', '\n', '    return total;\n', '  }\n', '\n', '  /**\n', '   * 指定した提案の締め切りを返す\n', '   *\n', '   * @param type_ 提案の種類\n', '   * @param proposalId 提案ID\n', '   *\n', '   * @return 提案の締め切り\n', '   */\n', '  function proposalExpireAt(bytes32 type_, uint proposalId) public view returns (uint) {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '    return proposal.expireAt;\n', '  }\n', '\n', '  /**\n', '   * 提案が実行条件を満たしているかを返す\n', '   *\n', '   * 【承認条件】\n', '   * - まだ実行していない\n', '   * - 提案の有効期限内である\n', '   * - 指定した割合以上の賛成トークンを得ている\n', '   *\n', '   * @param proposalId 提案ID\n', '   *\n', '   * @return 実行条件を満たしている場合はtrue、そうでない場合はfalse\n', '   */\n', '  function isProposalExecutable(bytes32 type_, uint proposalId, address proposer, bytes transactionBytecode) internal view returns (bool) {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '\n', '    // オーナーがcontrollerを登録したユーザーしか存在しない場合は\n', '    if (_storage.numOwnerAddress() < 2) {\n', '      return true;\n', '    }\n', '\n', '    return  proposal.digest == keccak256(proposer, proposal.amount, transactionBytecode) &&\n', '            isProposalNotExpired(type_, proposalId) &&\n', '            mul(100, confirmedTotalToken(type_, proposalId)) / _storage.totalSupply() > confirmTotalTokenThreshold;\n', '  }\n', '\n', '  /**\n', '   * 指定した種類の提案数を取得する\n', '   *\n', "   * @param type_ 提案の種類（'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'）\n", '   *\n', '   * @return 提案数（承認されていないものも含む）\n', '   */\n', '  function numberOfProposals(bytes32 type_) public constant returns (uint) {\n', '    return proposals[type_].length;\n', '  }\n', '\n', '  /**\n', '   * 未承認で有効期限の切れていない提案の数を返す\n', '   *\n', "   * @param type_ 提案の種類（'mint' | 'burn' | 'transferMinimumFee' | 'transferFeeRate'）\n", '   *\n', '   * @return 提案数\n', '   */\n', '  function numberOfActiveProposals(bytes32 type_) public view returns (uint) {\n', '    uint numActiveProposal = 0;\n', '\n', '    for(uint i = 0; i < proposals[type_].length; i++) {\n', '      if (isProposalNotExpired(type_, i)) {\n', '        numActiveProposal++;\n', '      }\n', '    }\n', '\n', '    return numActiveProposal;\n', '  }\n', '\n', '  /**\n', '   * 提案の有効期限が切れていないかチェックする\n', '   *\n', '   * - 実行されていない\n', '   * - 有効期限が切れていない\n', '   *\n', '   * 場合のみtrueを返す\n', '   */\n', '  function isProposalNotExpired(bytes32 type_, uint proposalId) internal view returns (bool) {\n', '    Proposal storage proposal = proposals[type_][proposalId];\n', '\n', '    return  !proposal.executed &&\n', '            now < proposal.expireAt;\n', '  }\n', '\n', '  /**\n', '   * dJPYを鋳造する\n', '   *\n', '   * - 鋳造する量が0より大きい\n', '   *\n', '   * 場合は成功する\n', '   *\n', '   * @param proposalId 提案ID\n', '   */\n', '  function executeMintProposal(uint proposalId) internal returns (bool) {\n', "    Proposal storage proposal = proposals[keccak256('mint')][proposalId];\n", '\n', '    // ここでも念のためチェックを入れる\n', '    require(proposal.amount > 0);\n', '\n', '    emit MintExecuted(proposalId, proposal.proposer, proposal.amount);\n', '\n', '    // 総供給量 / 実行者のdJPY / 実行者のSHINJI tokenを増やす\n', '    _storage.addTotalSupply(proposal.amount);\n', '    _storage.addCoinBalance(proposal.proposer, proposal.amount);\n', '    _storage.addTokenBalance(proposal.proposer, proposal.amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * dJPYを消却する\n', '   *\n', '   * - 消却する量が0より大きい\n', '   * - 提案者の所有するdJPYの残高がamount以上\n', '   * - 提案者の所有するSHINJIがamountよりも大きい\n', '   *\n', '   * 場合は成功する\n', '   *\n', '   * @param proposalId 提案ID\n', '   */\n', '  function executeBurnProposal(uint proposalId) internal returns (bool) {\n', "    Proposal storage proposal = proposals[keccak256('burn')][proposalId];\n", '\n', '    // ここでも念のためチェックを入れる\n', '    require(proposal.amount > 0);\n', '    require(_storage.coinBalance(proposal.proposer) >= proposal.amount);\n', '    require(_storage.tokenBalance(proposal.proposer) >= proposal.amount);\n', '\n', '    emit BurnExecuted(proposalId, proposal.proposer, proposal.amount);\n', '\n', '    // 総供給量 / 実行者のdJPY / 実行者のSHINJI tokenを減らす\n', '    _storage.subTotalSupply(proposal.amount);\n', '    _storage.subCoinBalance(proposal.proposer, proposal.amount);\n', '    _storage.subTokenBalance(proposal.proposer, proposal.amount);\n', '\n', '    return true;\n', '  }\n', '\n', '  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '    sig; // #HACK\n', '\n', '    return  src == address(this) ||\n', '            src == owner ||\n', '            src == address(_token);\n', '  }\n', '}']
