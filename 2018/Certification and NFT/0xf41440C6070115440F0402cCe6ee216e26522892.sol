['pragma solidity ^0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/controller/Reputation.sol\n', '\n', '/**\n', ' * @title Reputation system\n', ' * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\n', ' * A reputation is use to assign influence measure to a DAO&#39;S peers.\n', ' * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\n', ' * The Reputation contract maintain a map of address to reputation value.\n', ' * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\n', ' */\n', '\n', 'contract Reputation is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    mapping (address => uint256) public balances;\n', '    uint256 public totalSupply;\n', '    uint public decimals = 18;\n', '\n', '    // Event indicating minting of reputation to an address.\n', '    event Mint(address indexed _to, uint256 _amount);\n', '    // Event indicating burning of reputation for an address.\n', '    event Burn(address indexed _from, uint256 _amount);\n', '\n', '    /**\n', '    * @dev return the reputation amount of a given owner\n', '    * @param _owner an address of the owner which we want to get his reputation\n', '    */\n', '    function reputationOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Generates `_amount` of reputation that are assigned to `_to`\n', '    * @param _to The address that will be assigned the new reputation\n', '    * @param _amount The quantity of reputation to be generated\n', '    * @return True if the reputation are generated correctly\n', '    */\n', '    function mint(address _to, uint _amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Burns `_amount` of reputation from `_from`\n', '    * if _amount tokens to burn > balances[_from] the balance of _from will turn to zero.\n', '    * @param _from The address that will lose the reputation\n', '    * @param _amount The quantity of reputation to burn\n', '    * @return True if the reputation are burned correctly\n', '    */\n', '    function burn(address _from, uint _amount)\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        uint amountMinted = _amount;\n', '        if (balances[_from] < _amount) {\n', '            amountMinted = balances[_from];\n', '        }\n', '        totalSupply = totalSupply.sub(amountMinted);\n', '        balances[_from] = balances[_from].sub(amountMinted);\n', '        emit Burn(_from, amountMinted);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC827/ERC827.sol\n', '\n', '/**\n', ' * @title ERC827 interface, an extension of ERC20 token standard\n', ' *\n', ' * @dev Interface of a ERC827 token, following the ERC20 standard with extra\n', ' * methods to transfer value and data and execute calls in transfers and\n', ' * approvals.\n', ' */\n', 'contract ERC827 is ERC20 {\n', '\n', '    function approveAndCall(address _spender,uint256 _value,bytes _data) public payable returns(bool);\n', '\n', '    function transferAndCall(address _to,uint256 _value,bytes _data) public payable returns(bool);\n', '\n', '    function transferFromAndCall(address _from,address _to,uint256 _value,bytes _data) public payable returns(bool);\n', '\n', '}\n', '\n', '// File: contracts/token/ERC827/ERC827Token.sol\n', '\n', '/* solium-disable security/no-low-level-calls */\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC827, an extension of ERC20 token standard\n', ' *\n', ' * @dev Implementation the ERC827, following the ERC20 standard with extra\n', ' * methods to transfer value and data and execute calls in transfers and\n', ' * approvals. Uses OpenZeppelin StandardToken.\n', ' */\n', 'contract ERC827Token is ERC827, StandardToken {\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. It allows to\n', '   * approve the transfer of value and execute a call with the sent data.\n', '   * Beware that changing an allowance with this method brings the risk that\n', '   * someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race condition\n', '   * is to first reduce the spender&#39;s allowance to 0 and set the desired value\n', '   * afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address that will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   * @return true if the call function was executed successfully\n', '   */\n', '    function approveAndCall(\n', '        address _spender,\n', '        uint256 _value,\n', '        bytes _data\n', '    )\n', '    public\n', '    payable\n', '    returns (bool)\n', '    {\n', '        require(_spender != address(this));\n', '\n', '        super.approve(_spender, _value);\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        require(_spender.call.value(msg.value)(_data));\n', '\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens to a specified\n', '   * address and execute a call with the sent data on the same transaction\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   * @return true if the call function was executed successfully\n', '   */\n', '    function transferAndCall(\n', '        address _to,\n', '        uint256 _value,\n', '        bytes _data\n', '    )\n', '    public\n', '    payable\n', '    returns (bool)\n', '    {\n', '        require(_to != address(this));\n', '\n', '        super.transfer(_to, _value);\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        require(_to.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Addition to ERC20 token methods. Transfer tokens from one address to\n', '   * another and make a contract call on the same transaction\n', '   * @param _from The address which you want to send tokens from\n', '   * @param _to The address which you want to transfer to\n', '   * @param _value The amout of tokens to be transferred\n', '   * @param _data ABI-encoded contract call to call `_to` address.\n', '   * @return true if the call function was executed successfully\n', '   */\n', '    function transferFromAndCall(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        bytes _data\n', '    )\n', '    public payable returns (bool)\n', '    {\n', '        require(_to != address(this));\n', '\n', '        super.transferFrom(_from, _to, _value);\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        require(_to.call.value(msg.value)(_data));\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n', '   * an owner allowed to a spender and execute a call with the sent data.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '    function increaseApprovalAndCall(\n', '        address _spender,\n', '        uint _addedValue,\n', '        bytes _data\n', '    )\n', '    public\n', '    payable\n', '    returns (bool)\n', '    {\n', '        require(_spender != address(this));\n', '\n', '        super.increaseApproval(_spender, _addedValue);\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        require(_spender.call.value(msg.value)(_data));\n', '\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n', '   * an owner allowed to a spender and execute a call with the sent data.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   * @param _data ABI-encoded contract call to call `_spender` address.\n', '   */\n', '    function decreaseApprovalAndCall(\n', '        address _spender,\n', '        uint _subtractedValue,\n', '        bytes _data\n', '    )\n', '    public\n', '    payable\n', '    returns (bool)\n', '    {\n', '        require(_spender != address(this));\n', '\n', '        super.decreaseApproval(_spender, _subtractedValue);\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        require(_spender.call.value(msg.value)(_data));\n', '\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/controller/DAOToken.sol\n', '\n', '/**\n', ' * @title DAOToken, base on zeppelin contract.\n', ' * @dev ERC20 compatible token. It is a mintable, destructible, burnable token.\n', ' */\n', '\n', 'contract DAOToken is ERC827Token,MintableToken,BurnableToken {\n', '\n', '    string public name;\n', '    string public symbol;\n', '    // solium-disable-next-line uppercase\n', '    uint8 public constant decimals = 18;\n', '    uint public cap;\n', '\n', '    /**\n', '    * @dev Constructor\n', '    * @param _name - token name\n', '    * @param _symbol - token symbol\n', '    * @param _cap - token cap - 0 value means no cap\n', '    */\n', '    constructor(string _name, string _symbol,uint _cap) public {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        if (cap > 0)\n', '            require(totalSupply_.add(_amount) <= cap);\n', '        return super.mint(_to, _amount);\n', '    }\n', '}\n', '\n', '// File: contracts/controller/Avatar.sol\n', '\n', '/**\n', ' * @title An Avatar holds tokens, reputation and ether for a controller\n', ' */\n', 'contract Avatar is Ownable {\n', '    bytes32 public orgName;\n', '    DAOToken public nativeToken;\n', '    Reputation public nativeReputation;\n', '\n', '    event GenericAction(address indexed _action, bytes32[] _params);\n', '    event SendEther(uint _amountInWei, address indexed _to);\n', '    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint _value);\n', '    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint _value);\n', '    event ExternalTokenIncreaseApproval(StandardToken indexed _externalToken, address _spender, uint _addedValue);\n', '    event ExternalTokenDecreaseApproval(StandardToken indexed _externalToken, address _spender, uint _subtractedValue);\n', '    event ReceiveEther(address indexed _sender, uint _value);\n', '\n', '    /**\n', '    * @dev the constructor takes organization name, native token and reputation system\n', '    and creates an avatar for a controller\n', '    */\n', '    constructor(bytes32 _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\n', '        orgName = _orgName;\n', '        nativeToken = _nativeToken;\n', '        nativeReputation = _nativeReputation;\n', '    }\n', '\n', '    /**\n', '    * @dev enables an avatar to receive ethers\n', '    */\n', '    function() public payable {\n', '        emit ReceiveEther(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '    * @dev perform a generic call to an arbitrary contract\n', '    * @param _contract  the contract&#39;s address to call\n', '    * @param _data ABI-encoded contract call to call `_contract` address.\n', '    * @return the return bytes of the called contract&#39;s function.\n', '    */\n', '    function genericCall(address _contract,bytes _data) public onlyOwner {\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        bool result = _contract.call(_data);\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '        // Copy the returned data.\n', '        returndatacopy(0, 0, returndatasize)\n', '\n', '        switch result\n', '        // call returns 0 on error.\n', '        case 0 { revert(0, returndatasize) }\n', '        default { return(0, returndatasize) }\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev send ethers from the avatar&#39;s wallet\n', '    * @param _amountInWei amount to send in Wei units\n', '    * @param _to send the ethers to this address\n', '    * @return bool which represents success\n', '    */\n', '    function sendEther(uint _amountInWei, address _to) public onlyOwner returns(bool) {\n', '        _to.transfer(_amountInWei);\n', '        emit SendEther(_amountInWei, _to);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev external token transfer\n', '    * @param _externalToken the token contract\n', '    * @param _to the destination address\n', '    * @param _value the amount of tokens to transfer\n', '    * @return bool which represents success\n', '    */\n', '    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value)\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.transfer(_to, _value);\n', '        emit ExternalTokenTransfer(_externalToken, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev external token transfer from a specific account\n', '    * @param _externalToken the token contract\n', '    * @param _from the account to spend token from\n', '    * @param _to the destination address\n', '    * @param _value the amount of tokens to transfer\n', '    * @return bool which represents success\n', '    */\n', '    function externalTokenTransferFrom(\n', '        StandardToken _externalToken,\n', '        address _from,\n', '        address _to,\n', '        uint _value\n', '    )\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.transferFrom(_from, _to, _value);\n', '        emit ExternalTokenTransferFrom(_externalToken, _from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev increase approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue)\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.increaseApproval(_spender, _addedValue);\n', '        emit ExternalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev decrease approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue )\n', '    public onlyOwner returns(bool)\n', '    {\n', '        _externalToken.decreaseApproval(_spender, _subtractedValue);\n', '        emit ExternalTokenDecreaseApproval(_externalToken,_spender, _subtractedValue);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/globalConstraints/GlobalConstraintInterface.sol\n', '\n', 'contract GlobalConstraintInterface {\n', '\n', '    enum CallPhase { Pre, Post,PreAndPost }\n', '\n', '    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n', '    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n', '    /**\n', '     * @dev when return if this globalConstraints is pre, post or both.\n', '     * @return CallPhase enum indication  Pre, Post or PreAndPost.\n', '     */\n', '    function when() public returns(CallPhase);\n', '}\n', '\n', '// File: contracts/controller/ControllerInterface.sol\n', '\n', '/**\n', ' * @title Controller contract\n', ' * @dev A controller controls the organizations tokens ,reputation and avatar.\n', ' * It is subject to a set of schemes and constraints that determine its behavior.\n', ' * Each scheme has it own parameters and operation permissions.\n', ' */\n', 'interface ControllerInterface {\n', '\n', '    /**\n', '     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n', '     * @param  _amount amount of reputation to mint\n', '     * @param _to beneficiary address\n', '     * @return bool which represents a success\n', '    */\n', '    function mintReputation(uint256 _amount, address _to,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev Burns `_amount` of reputation from `_from`\n', '     * @param _amount amount of reputation to burn\n', '     * @param _from The address that will lose the reputation\n', '     * @return bool which represents a success\n', '     */\n', '    function burnReputation(uint256 _amount, address _from,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev mint tokens .\n', '     * @param  _amount amount of token to mint\n', '     * @param _beneficiary beneficiary address\n', '     * @param _avatar address\n', '     * @return bool which represents a success\n', '     */\n', '    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '  /**\n', '   * @dev register or update a scheme\n', '   * @param _scheme the address of the scheme\n', '   * @param _paramsHash a hashed configuration of the usage of the scheme\n', '   * @param _permissions the permissions the new scheme will have\n', '   * @param _avatar address\n', '   * @return bool which represents a success\n', '   */\n', '    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev unregister a scheme\n', '     * @param _avatar address\n', '     * @param _scheme the address of the scheme\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterScheme(address _scheme,address _avatar)\n', '    external\n', '    returns(bool);\n', '    /**\n', '     * @dev unregister the caller&#39;s scheme\n', '     * @param _avatar address\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterSelf(address _avatar) external returns(bool);\n', '\n', '    function isSchemeRegistered( address _scheme,address _avatar) external view returns(bool);\n', '\n', '    function getSchemeParameters(address _scheme,address _avatar) external view returns(bytes32);\n', '\n', '    function getGlobalConstraintParameters(address _globalConstraint,address _avatar) external view returns(bytes32);\n', '\n', '    function getSchemePermissions(address _scheme,address _avatar) external view returns(bytes4);\n', '\n', '    /**\n', '     * @dev globalConstraintsCount return the global constraint pre and post count\n', '     * @return uint globalConstraintsPre count.\n', '     * @return uint globalConstraintsPost count.\n', '     */\n', '    function globalConstraintsCount(address _avatar) external view returns(uint,uint);\n', '\n', '    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar) external view returns(bool);\n', '\n', '    /**\n', '     * @dev add or update Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be added.\n', '     * @param _params the constraint parameters hash.\n', '     * @param _avatar the avatar of the organization\n', '     * @return bool which represents a success\n', '     */\n', '    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\n', '    external returns(bool);\n', '\n', '    /**\n', '     * @dev remove Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be remove.\n', '     * @param _avatar the organization avatar.\n', '     * @return bool which represents a success\n', '     */\n', '    function removeGlobalConstraint (address _globalConstraint,address _avatar)\n', '    external  returns(bool);\n', '\n', '  /**\n', '    * @dev upgrade the Controller\n', '    *      The function will trigger an event &#39;UpgradeController&#39;.\n', '    * @param  _newController the address of the new controller.\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function upgradeController(address _newController,address _avatar)\n', '    external returns(bool);\n', '\n', '    /**\n', '    * @dev perform a generic call to an arbitrary contract\n', '    * @param _contract  the contract&#39;s address to call\n', '    * @param _data ABI-encoded contract call to call `_contract` address.\n', '    * @param _avatar the controller&#39;s avatar address\n', '    * @return bytes32  - the return value of the called _contract&#39;s function.\n', '    */\n', '    function genericCall(address _contract,bytes _data,address _avatar)\n', '    external\n', '    returns(bytes32);\n', '\n', '  /**\n', '   * @dev send some ether\n', '   * @param _amountInWei the amount of ether (in Wei) to send\n', '   * @param _to address of the beneficiary\n', '   * @param _avatar address\n', '   * @return bool which represents a success\n', '   */\n', '    function sendEther(uint _amountInWei, address _to,address _avatar)\n', '    external returns(bool);\n', '\n', '    /**\n', '    * @dev send some amount of arbitrary ERC20 Tokens\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '    * @dev transfer token "from" address "to" address\n', '    *      One must to approve the amount of tokens which can be spend from the\n', '    *      "from" account.This can be done using externalTokenApprove.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _from address of the account to send from\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '    * @dev increase approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '    * @dev decrease approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @param _avatar address\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\n', '    external\n', '    returns(bool);\n', '\n', '    /**\n', '     * @dev getNativeReputation\n', '     * @param _avatar the organization avatar.\n', '     * @return organization native reputation\n', '     */\n', '    function getNativeReputation(address _avatar)\n', '    external\n', '    view\n', '    returns(address);\n', '}\n', '\n', '// File: contracts/controller/Controller.sol\n', '\n', '/**\n', ' * @title Controller contract\n', ' * @dev A controller controls the organizations tokens,reputation and avatar.\n', ' * It is subject to a set of schemes and constraints that determine its behavior.\n', ' * Each scheme has it own parameters and operation permissions.\n', ' */\n', 'contract Controller is ControllerInterface {\n', '\n', '    struct Scheme {\n', '        bytes32 paramsHash;  // a hash "configuration" of the scheme\n', '        bytes4  permissions; // A bitwise flags of permissions,\n', '                             // All 0: Not registered,\n', '                             // 1st bit: Flag if the scheme is registered,\n', '                             // 2nd bit: Scheme can register other schemes\n', '                             // 3rd bit: Scheme can add/remove global constraints\n', '                             // 4th bit: Scheme can upgrade the controller\n', '                             // 5th bit: Scheme can call genericCall on behalf of\n', '                             //          the organization avatar\n', '    }\n', '\n', '    struct GlobalConstraint {\n', '        address gcAddress;\n', '        bytes32 params;\n', '    }\n', '\n', '    struct GlobalConstraintRegister {\n', '        bool isRegistered; //is registered\n', '        uint index;    //index at globalConstraints\n', '    }\n', '\n', '    mapping(address=>Scheme) public schemes;\n', '\n', '    Avatar public avatar;\n', '    DAOToken public nativeToken;\n', '    Reputation public nativeReputation;\n', '  // newController will point to the new controller after the present controller is upgraded\n', '    address public newController;\n', '  // globalConstraintsPre that determine pre conditions for all actions on the controller\n', '\n', '    GlobalConstraint[] public globalConstraintsPre;\n', '  // globalConstraintsPost that determine post conditions for all actions on the controller\n', '    GlobalConstraint[] public globalConstraintsPost;\n', '  // globalConstraintsRegisterPre indicate if a globalConstraints is registered as a pre global constraint\n', '    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPre;\n', '  // globalConstraintsRegisterPost indicate if a globalConstraints is registered as a post global constraint\n', '    mapping(address=>GlobalConstraintRegister) public globalConstraintsRegisterPost;\n', '\n', '    event MintReputation (address indexed _sender, address indexed _to, uint256 _amount);\n', '    event BurnReputation (address indexed _sender, address indexed _from, uint256 _amount);\n', '    event MintTokens (address indexed _sender, address indexed _beneficiary, uint256 _amount);\n', '    event RegisterScheme (address indexed _sender, address indexed _scheme);\n', '    event UnregisterScheme (address indexed _sender, address indexed _scheme);\n', '    event GenericAction (address indexed _sender, bytes32[] _params);\n', '    event SendEther (address indexed _sender, uint _amountInWei, address indexed _to);\n', '    event ExternalTokenTransfer (address indexed _sender, address indexed _externalToken, address indexed _to, uint _value);\n', '    event ExternalTokenTransferFrom (address indexed _sender, address indexed _externalToken, address _from, address _to, uint _value);\n', '    event ExternalTokenIncreaseApproval (address indexed _sender, StandardToken indexed _externalToken, address _spender, uint _value);\n', '    event ExternalTokenDecreaseApproval (address indexed _sender, StandardToken indexed _externalToken, address _spender, uint _value);\n', '    event UpgradeController(address indexed _oldController,address _newController);\n', '    event AddGlobalConstraint(address indexed _globalConstraint, bytes32 _params,GlobalConstraintInterface.CallPhase _when);\n', '    event RemoveGlobalConstraint(address indexed _globalConstraint ,uint256 _index,bool _isPre);\n', '    event GenericCall(address indexed _contract,bytes _data);\n', '\n', '    constructor( Avatar _avatar) public\n', '    {\n', '        avatar = _avatar;\n', '        nativeToken = avatar.nativeToken();\n', '        nativeReputation = avatar.nativeReputation();\n', '        schemes[msg.sender] = Scheme({paramsHash: bytes32(0),permissions: bytes4(0x1F)});\n', '    }\n', '\n', '  // Do not allow mistaken calls:\n', '    function() external {\n', '        revert();\n', '    }\n', '\n', '  // Modifiers:\n', '    modifier onlyRegisteredScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(1) == bytes4(1));\n', '        _;\n', '    }\n', '\n', '    modifier onlyRegisteringSchemes() {\n', '        require(schemes[msg.sender].permissions&bytes4(2) == bytes4(2));\n', '        _;\n', '    }\n', '\n', '    modifier onlyGlobalConstraintsScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(4) == bytes4(4));\n', '        _;\n', '    }\n', '\n', '    modifier onlyUpgradingScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(8) == bytes4(8));\n', '        _;\n', '    }\n', '\n', '    modifier onlyGenericCallScheme() {\n', '        require(schemes[msg.sender].permissions&bytes4(16) == bytes4(16));\n', '        _;\n', '    }\n', '\n', '    modifier onlySubjectToConstraint(bytes32 func) {\n', '        uint idx;\n', '        for (idx = 0;idx<globalConstraintsPre.length;idx++) {\n', '            require((GlobalConstraintInterface(globalConstraintsPre[idx].gcAddress)).pre(msg.sender,globalConstraintsPre[idx].params,func));\n', '        }\n', '        _;\n', '        for (idx = 0;idx<globalConstraintsPost.length;idx++) {\n', '            require((GlobalConstraintInterface(globalConstraintsPost[idx].gcAddress)).post(msg.sender,globalConstraintsPost[idx].params,func));\n', '        }\n', '    }\n', '\n', '    modifier isAvatarValid(address _avatar) {\n', '        require(_avatar == address(avatar));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n', '     * @param  _amount amount of reputation to mint\n', '     * @param _to beneficiary address\n', '     * @return bool which represents a success\n', '     */\n', '    function mintReputation(uint256 _amount, address _to,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("mintReputation")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit MintReputation(msg.sender, _to, _amount);\n', '        return nativeReputation.mint(_to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns `_amount` of reputation from `_from`\n', '     * @param _amount amount of reputation to burn\n', '     * @param _from The address that will lose the reputation\n', '     * @return bool which represents a success\n', '     */\n', '    function burnReputation(uint256 _amount, address _from,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("burnReputation")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit BurnReputation(msg.sender, _from, _amount);\n', '        return nativeReputation.burn(_from, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev mint tokens .\n', '     * @param  _amount amount of token to mint\n', '     * @param _beneficiary beneficiary address\n', '     * @return bool which represents a success\n', '     */\n', '    function mintTokens(uint256 _amount, address _beneficiary,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("mintTokens")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit MintTokens(msg.sender, _beneficiary, _amount);\n', '        return nativeToken.mint(_beneficiary, _amount);\n', '    }\n', '\n', '  /**\n', '   * @dev register a scheme\n', '   * @param _scheme the address of the scheme\n', '   * @param _paramsHash a hashed configuration of the usage of the scheme\n', '   * @param _permissions the permissions the new scheme will have\n', '   * @return bool which represents a success\n', '   */\n', '    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions,address _avatar)\n', '    external\n', '    onlyRegisteringSchemes\n', '    onlySubjectToConstraint("registerScheme")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '\n', '        Scheme memory scheme = schemes[_scheme];\n', '\n', '    // Check scheme has at least the permissions it is changing, and at least the current permissions:\n', '    // Implementation is a bit messy. One must recall logic-circuits ^^\n', '\n', '    // produces non-zero if sender does not have all of the perms that are changing between old and new\n', '        require(bytes4(0x1F)&(_permissions^scheme.permissions)&(~schemes[msg.sender].permissions) == bytes4(0));\n', '\n', '    // produces non-zero if sender does not have all of the perms in the old scheme\n', '        require(bytes4(0x1F)&(scheme.permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\n', '\n', '    // Add or change the scheme:\n', '        schemes[_scheme].paramsHash = _paramsHash;\n', '        schemes[_scheme].permissions = _permissions|bytes4(1);\n', '        emit RegisterScheme(msg.sender, _scheme);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev unregister a scheme\n', '     * @param _scheme the address of the scheme\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterScheme( address _scheme,address _avatar)\n', '    external\n', '    onlyRegisteringSchemes\n', '    onlySubjectToConstraint("unregisterScheme")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '    //check if the scheme is registered\n', '        if (schemes[_scheme].permissions&bytes4(1) == bytes4(0)) {\n', '            return false;\n', '          }\n', '    // Check the unregistering scheme has enough permissions:\n', '        require(bytes4(0x1F)&(schemes[_scheme].permissions&(~schemes[msg.sender].permissions)) == bytes4(0));\n', '\n', '    // Unregister:\n', '        emit UnregisterScheme(msg.sender, _scheme);\n', '        delete schemes[_scheme];\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev unregister the caller&#39;s scheme\n', '     * @return bool which represents a success\n', '     */\n', '    function unregisterSelf(address _avatar) external isAvatarValid(_avatar) returns(bool) {\n', '        if (_isSchemeRegistered(msg.sender,_avatar) == false) {\n', '            return false;\n', '        }\n', '        delete schemes[msg.sender];\n', '        emit UnregisterScheme(msg.sender, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function isSchemeRegistered(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bool) {\n', '        return _isSchemeRegistered(_scheme,_avatar);\n', '    }\n', '\n', '    function getSchemeParameters(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bytes32) {\n', '        return schemes[_scheme].paramsHash;\n', '    }\n', '\n', '    function getSchemePermissions(address _scheme,address _avatar) external isAvatarValid(_avatar) view returns(bytes4) {\n', '        return schemes[_scheme].permissions;\n', '    }\n', '\n', '    function getGlobalConstraintParameters(address _globalConstraint,address) external view returns(bytes32) {\n', '\n', '        GlobalConstraintRegister memory register = globalConstraintsRegisterPre[_globalConstraint];\n', '\n', '        if (register.isRegistered) {\n', '            return globalConstraintsPre[register.index].params;\n', '        }\n', '\n', '        register = globalConstraintsRegisterPost[_globalConstraint];\n', '\n', '        if (register.isRegistered) {\n', '            return globalConstraintsPost[register.index].params;\n', '        }\n', '    }\n', '\n', '   /**\n', '    * @dev globalConstraintsCount return the global constraint pre and post count\n', '    * @return uint globalConstraintsPre count.\n', '    * @return uint globalConstraintsPost count.\n', '    */\n', '    function globalConstraintsCount(address _avatar)\n', '        external\n', '        isAvatarValid(_avatar)\n', '        view\n', '        returns(uint,uint)\n', '        {\n', '        return (globalConstraintsPre.length,globalConstraintsPost.length);\n', '    }\n', '\n', '    function isGlobalConstraintRegistered(address _globalConstraint,address _avatar)\n', '        external\n', '        isAvatarValid(_avatar)\n', '        view\n', '        returns(bool)\n', '        {\n', '        return (globalConstraintsRegisterPre[_globalConstraint].isRegistered || globalConstraintsRegisterPost[_globalConstraint].isRegistered);\n', '    }\n', '\n', '    /**\n', '     * @dev add or update Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be added.\n', '     * @param _params the constraint parameters hash.\n', '     * @return bool which represents a success\n', '     */\n', '    function addGlobalConstraint(address _globalConstraint, bytes32 _params,address _avatar)\n', '    external\n', '    onlyGlobalConstraintsScheme\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\n', '        if ((when == GlobalConstraintInterface.CallPhase.Pre)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            if (!globalConstraintsRegisterPre[_globalConstraint].isRegistered) {\n', '                globalConstraintsPre.push(GlobalConstraint(_globalConstraint,_params));\n', '                globalConstraintsRegisterPre[_globalConstraint] = GlobalConstraintRegister(true,globalConstraintsPre.length-1);\n', '            }else {\n', '                globalConstraintsPre[globalConstraintsRegisterPre[_globalConstraint].index].params = _params;\n', '            }\n', '        }\n', '        if ((when == GlobalConstraintInterface.CallPhase.Post)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            if (!globalConstraintsRegisterPost[_globalConstraint].isRegistered) {\n', '                globalConstraintsPost.push(GlobalConstraint(_globalConstraint,_params));\n', '                globalConstraintsRegisterPost[_globalConstraint] = GlobalConstraintRegister(true,globalConstraintsPost.length-1);\n', '            }else {\n', '                globalConstraintsPost[globalConstraintsRegisterPost[_globalConstraint].index].params = _params;\n', '            }\n', '        }\n', '        emit AddGlobalConstraint(_globalConstraint, _params,when);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev remove Global Constraint\n', '     * @param _globalConstraint the address of the global constraint to be remove.\n', '     * @return bool which represents a success\n', '     */\n', '    function removeGlobalConstraint (address _globalConstraint,address _avatar)\n', '    external\n', '    onlyGlobalConstraintsScheme\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        GlobalConstraintRegister memory globalConstraintRegister;\n', '        GlobalConstraint memory globalConstraint;\n', '        GlobalConstraintInterface.CallPhase when = GlobalConstraintInterface(_globalConstraint).when();\n', '        bool retVal = false;\n', '\n', '        if ((when == GlobalConstraintInterface.CallPhase.Pre)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            globalConstraintRegister = globalConstraintsRegisterPre[_globalConstraint];\n', '            if (globalConstraintRegister.isRegistered) {\n', '                if (globalConstraintRegister.index < globalConstraintsPre.length-1) {\n', '                    globalConstraint = globalConstraintsPre[globalConstraintsPre.length-1];\n', '                    globalConstraintsPre[globalConstraintRegister.index] = globalConstraint;\n', '                    globalConstraintsRegisterPre[globalConstraint.gcAddress].index = globalConstraintRegister.index;\n', '                }\n', '                globalConstraintsPre.length--;\n', '                delete globalConstraintsRegisterPre[_globalConstraint];\n', '                retVal = true;\n', '            }\n', '        }\n', '        if ((when == GlobalConstraintInterface.CallPhase.Post)||(when == GlobalConstraintInterface.CallPhase.PreAndPost)) {\n', '            globalConstraintRegister = globalConstraintsRegisterPost[_globalConstraint];\n', '            if (globalConstraintRegister.isRegistered) {\n', '                if (globalConstraintRegister.index < globalConstraintsPost.length-1) {\n', '                    globalConstraint = globalConstraintsPost[globalConstraintsPost.length-1];\n', '                    globalConstraintsPost[globalConstraintRegister.index] = globalConstraint;\n', '                    globalConstraintsRegisterPost[globalConstraint.gcAddress].index = globalConstraintRegister.index;\n', '                }\n', '                globalConstraintsPost.length--;\n', '                delete globalConstraintsRegisterPost[_globalConstraint];\n', '                retVal = true;\n', '            }\n', '        }\n', '        if (retVal) {\n', '            emit RemoveGlobalConstraint(_globalConstraint,globalConstraintRegister.index,when == GlobalConstraintInterface.CallPhase.Pre);\n', '        }\n', '        return retVal;\n', '    }\n', '\n', '  /**\n', '    * @dev upgrade the Controller\n', '    *      The function will trigger an event &#39;UpgradeController&#39;.\n', '    * @param  _newController the address of the new controller.\n', '    * @return bool which represents a success\n', '    */\n', '    function upgradeController(address _newController,address _avatar)\n', '    external\n', '    onlyUpgradingScheme\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        require(newController == address(0));   // so the upgrade could be done once for a contract.\n', '        require(_newController != address(0));\n', '        newController = _newController;\n', '        avatar.transferOwnership(_newController);\n', '        require(avatar.owner()==_newController);\n', '        if (nativeToken.owner() == address(this)) {\n', '            nativeToken.transferOwnership(_newController);\n', '            require(nativeToken.owner()==_newController);\n', '        }\n', '        if (nativeReputation.owner() == address(this)) {\n', '            nativeReputation.transferOwnership(_newController);\n', '            require(nativeReputation.owner()==_newController);\n', '        }\n', '        emit UpgradeController(this,newController);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev perform a generic call to an arbitrary contract\n', '    * @param _contract  the contract&#39;s address to call\n', '    * @param _data ABI-encoded contract call to call `_contract` address.\n', '    * @param _avatar the controller&#39;s avatar address\n', '    * @return bytes32  - the return value of the called _contract&#39;s function.\n', '    */\n', '    function genericCall(address _contract,bytes _data,address _avatar)\n', '    external\n', '    onlyGenericCallScheme\n', '    onlySubjectToConstraint("genericCall")\n', '    isAvatarValid(_avatar)\n', '    returns (bytes32)\n', '    {\n', '        emit GenericCall(_contract, _data);\n', '        avatar.genericCall(_contract, _data);\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '        // Copy the returned data.\n', '        returndatacopy(0, 0, returndatasize)\n', '        return(0, returndatasize)\n', '        }\n', '    }\n', '\n', '  /**\n', '   * @dev send some ether\n', '   * @param _amountInWei the amount of ether (in Wei) to send\n', '   * @param _to address of the beneficiary\n', '   * @return bool which represents a success\n', '   */\n', '    function sendEther(uint _amountInWei, address _to,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("sendEther")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit SendEther(msg.sender, _amountInWei, _to);\n', '        return avatar.sendEther(_amountInWei, _to);\n', '    }\n', '\n', '    /**\n', '    * @dev send some amount of arbitrary ERC20 Tokens\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransfer(StandardToken _externalToken, address _to, uint _value,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenTransfer")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenTransfer(msg.sender, _externalToken, _to, _value);\n', '        return avatar.externalTokenTransfer(_externalToken, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token "from" address "to" address\n', '    *      One must to approve the amount of tokens which can be spend from the\n', '    *      "from" account.This can be done using externalTokenApprove.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _from address of the account to send from\n', '    * @param _to address of the beneficiary\n', '    * @param _value the amount of ether (in Wei) to send\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenTransferFrom(StandardToken _externalToken, address _from, address _to, uint _value,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenTransferFrom")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenTransferFrom(msg.sender, _externalToken, _from, _to, _value);\n', '        return avatar.externalTokenTransferFrom(_externalToken, _from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev increase approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _addedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenIncreaseApproval(StandardToken _externalToken, address _spender, uint _addedValue,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenIncreaseApproval")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenIncreaseApproval(msg.sender,_externalToken,_spender,_addedValue);\n', '        return avatar.externalTokenIncreaseApproval(_externalToken, _spender, _addedValue);\n', '    }\n', '\n', '    /**\n', '    * @dev decrease approval for the spender address to spend a specified amount of tokens\n', '    *      on behalf of msg.sender.\n', '    * @param _externalToken the address of the Token Contract\n', '    * @param _spender address\n', '    * @param _subtractedValue the amount of ether (in Wei) which the approval is referring to.\n', '    * @return bool which represents a success\n', '    */\n', '    function externalTokenDecreaseApproval(StandardToken _externalToken, address _spender, uint _subtractedValue,address _avatar)\n', '    external\n', '    onlyRegisteredScheme\n', '    onlySubjectToConstraint("externalTokenDecreaseApproval")\n', '    isAvatarValid(_avatar)\n', '    returns(bool)\n', '    {\n', '        emit ExternalTokenDecreaseApproval(msg.sender,_externalToken,_spender,_subtractedValue);\n', '        return avatar.externalTokenDecreaseApproval(_externalToken, _spender, _subtractedValue);\n', '    }\n', '\n', '    /**\n', '     * @dev getNativeReputation\n', '     * @param _avatar the organization avatar.\n', '     * @return organization native reputation\n', '     */\n', '    function getNativeReputation(address _avatar) external isAvatarValid(_avatar) view returns(address) {\n', '        return address(nativeReputation);\n', '    }\n', '\n', '    function _isSchemeRegistered(address _scheme,address _avatar) private isAvatarValid(_avatar) view returns(bool) {\n', '        return (schemes[_scheme].permissions&bytes4(1) != bytes4(0));\n', '    }\n', '}\n', '\n', '// File: contracts/universalSchemes/ExecutableInterface.sol\n', '\n', 'contract ExecutableInterface {\n', '    function execute(bytes32 _proposalId, address _avatar, int _param) public returns(bool);\n', '}\n', '\n', '// File: contracts/VotingMachines/IntVoteInterface.sol\n', '\n', 'interface IntVoteInterface {\n', '    //When implementing this interface please do not only override function and modifier,\n', '    //but also to keep the modifiers on the overridden functions.\n', '    modifier onlyProposalOwner(bytes32 _proposalId) {revert(); _;}\n', '    modifier votable(bytes32 _proposalId) {revert(); _;}\n', '\n', '    event NewProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _numOfChoices, address _proposer, bytes32 _paramsHash);\n', '    event ExecuteProposal(bytes32 indexed _proposalId, address indexed _avatar, uint _decision, uint _totalReputation);\n', '    event VoteProposal(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter, uint _vote, uint _reputation);\n', '    event CancelProposal(bytes32 indexed _proposalId, address indexed _avatar );\n', '    event CancelVoting(bytes32 indexed _proposalId, address indexed _avatar, address indexed _voter);\n', '\n', '    /**\n', '     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n', '     * generated by calculating keccak256 of a incremented counter.\n', '     * @param _numOfChoices number of voting choices\n', '     * @param _proposalParameters defines the parameters of the voting machine used for this proposal\n', '     * @param _avatar an address to be sent as the payload to the _executable contract.\n', '     * @param _executable This contract will be executed when vote is over.\n', '     * @param _proposer address\n', '     * @return proposal&#39;s id.\n', '     */\n', '    function propose(\n', '        uint _numOfChoices,\n', '        bytes32 _proposalParameters,\n', '        address _avatar,\n', '        ExecutableInterface _executable,\n', '        address _proposer\n', '        ) external returns(bytes32);\n', '\n', '    // Only owned proposals and only the owner:\n', '    function cancelProposal(bytes32 _proposalId) external returns(bool);\n', '\n', '    // Only owned proposals and only the owner:\n', '    function ownerVote(bytes32 _proposalId, uint _vote, address _voter) external returns(bool);\n', '\n', '    function vote(bytes32 _proposalId, uint _vote) external returns(bool);\n', '\n', '    function voteWithSpecifiedAmounts(\n', '        bytes32 _proposalId,\n', '        uint _vote,\n', '        uint _rep,\n', '        uint _token) external returns(bool);\n', '\n', '    function cancelVote(bytes32 _proposalId) external;\n', '\n', '    //@dev execute check if the proposal has been decided, and if so, execute the proposal\n', '    //@param _proposalId the id of the proposal\n', '    //@return bool true - the proposal has been executed\n', '    //             false - otherwise.\n', '    function execute(bytes32 _proposalId) external returns(bool);\n', '\n', '    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint);\n', '\n', '    function isVotable(bytes32 _proposalId) external view returns(bool);\n', '\n', '    /**\n', '     * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n', '     * @param _proposalId the ID of the proposal\n', '     * @param _choice the index in the\n', '     * @return voted reputation for the given choice\n', '     */\n', '    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint);\n', '\n', '    /**\n', '     * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n', '     * @return bool true or false\n', '     */\n', '    function isAbstainAllow() external pure returns(bool);\n', '\n', '    /**\n', '     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n', '     * @return min - minimum number of choices\n', '               max - maximum number of choices\n', '     */\n', '    function getAllowedRangeOfChoices() external pure returns(uint min,uint max);\n', '}\n', '\n', '// File: contracts/universalSchemes/UniversalSchemeInterface.sol\n', '\n', 'contract UniversalSchemeInterface {\n', '\n', '    function updateParameters(bytes32 _hashedParameters) public;\n', '\n', '    function getParametersFromController(Avatar _avatar) internal view returns(bytes32);\n', '}\n', '\n', '// File: contracts/universalSchemes/UniversalScheme.sol\n', '\n', 'contract UniversalScheme is Ownable, UniversalSchemeInterface {\n', '    bytes32 public hashedParameters; // For other parameters.\n', '\n', '    function updateParameters(\n', '        bytes32 _hashedParameters\n', '    )\n', '        public\n', '        onlyOwner\n', '    {\n', '        hashedParameters = _hashedParameters;\n', '    }\n', '\n', '    /**\n', '    *  @dev get the parameters for the current scheme from the controller\n', '    */\n', '    function getParametersFromController(Avatar _avatar) internal view returns(bytes32) {\n', '        return ControllerInterface(_avatar.owner()).getSchemeParameters(this,address(_avatar));\n', '    }\n', '}\n', '\n', '// File: contracts/libs/RealMath.sol\n', '\n', '/**\n', ' * RealMath: fixed-point math library, based on fractional and integer parts.\n', ' * Using int256 as real216x40, which isn&#39;t in Solidity yet.\n', ' * 40 fractional bits gets us down to 1E-12 precision, while still letting us\n', ' * go up to galaxy scale counting in meters.\n', ' * Internally uses the wider int256 for some math.\n', ' *\n', ' * Note that for addition, subtraction, and mod (%), you should just use the\n', ' * built-in Solidity operators. Functions for these operations are not provided.\n', ' *\n', ' * Note that the fancy functions like sqrt, atan2, etc. aren&#39;t as accurate as\n', ' * they should be. They are (hopefully) Good Enough for doing orbital mechanics\n', ' * on block timescales in a game context, but they may not be good enough for\n', ' * other applications.\n', ' */\n', '\n', '\n', 'library RealMath {\n', '\n', '    /**\n', '     * How many total bits are there?\n', '     */\n', '    int256 constant REAL_BITS = 256;\n', '\n', '    /**\n', '     * How many fractional bits are there?\n', '     */\n', '    int256 constant REAL_FBITS = 40;\n', '\n', '    /**\n', '     * How many integer bits are there?\n', '     */\n', '    int256 constant REAL_IBITS = REAL_BITS - REAL_FBITS;\n', '\n', '    /**\n', '     * What&#39;s the first non-fractional bit\n', '     */\n', '    int256 constant REAL_ONE = int256(1) << REAL_FBITS;\n', '\n', '    /**\n', '     * What&#39;s the last fractional bit?\n', '     */\n', '    int256 constant REAL_HALF = REAL_ONE >> 1;\n', '\n', '    /**\n', '     * What&#39;s two? Two is pretty useful.\n', '     */\n', '    int256 constant REAL_TWO = REAL_ONE << 1;\n', '\n', '    /**\n', '     * And our logarithms are based on ln(2).\n', '     */\n', '    int256 constant REAL_LN_TWO = 762123384786;\n', '\n', '    /**\n', '     * It is also useful to have Pi around.\n', '     */\n', '    int256 constant REAL_PI = 3454217652358;\n', '\n', '    /**\n', '     * And half Pi, to save on divides.\n', '     * TODO: That might not be how the compiler handles constants.\n', '     */\n', '    int256 constant REAL_HALF_PI = 1727108826179;\n', '\n', '    /**\n', '     * And two pi, which happens to be odd in its most accurate representation.\n', '     */\n', '    int256 constant REAL_TWO_PI = 6908435304715;\n', '\n', '    /**\n', '     * What&#39;s the sign bit?\n', '     */\n', '    int256 constant SIGN_MASK = int256(1) << 255;\n', '\n', '\n', '    /**\n', '     * Convert an integer to a real. Preserves sign.\n', '     */\n', '    function toReal(int216 ipart) internal pure returns (int256) {\n', '        return int256(ipart) * REAL_ONE;\n', '    }\n', '\n', '    /**\n', '     * Convert a real to an integer. Preserves sign.\n', '     */\n', '    function fromReal(int256 realValue) internal pure returns (int216) {\n', '        return int216(realValue / REAL_ONE);\n', '    }\n', '\n', '    /**\n', '     * Round a real to the nearest integral real value.\n', '     */\n', '    function round(int256 realValue) internal pure returns (int256) {\n', '        // First, truncate.\n', '        int216 ipart = fromReal(realValue);\n', '        if ((fractionalBits(realValue) & (uint40(1) << (REAL_FBITS - 1))) > 0) {\n', '            // High fractional bit is set. Round up.\n', '            if (realValue < int256(0)) {\n', '                // Rounding up for a negative number is rounding down.\n', '                ipart -= 1;\n', '            } else {\n', '                ipart += 1;\n', '            }\n', '        }\n', '        return toReal(ipart);\n', '    }\n', '\n', '    /**\n', '     * Get the absolute value of a real. Just the same as abs on a normal int256.\n', '     */\n', '    function abs(int256 realValue) internal pure returns (int256) {\n', '        if (realValue > 0) {\n', '            return realValue;\n', '        } else {\n', '            return -realValue;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Returns the fractional bits of a real. Ignores the sign of the real.\n', '     */\n', '    function fractionalBits(int256 realValue) internal pure returns (uint40) {\n', '        return uint40(abs(realValue) % REAL_ONE);\n', '    }\n', '\n', '    /**\n', '     * Get the fractional part of a real, as a real. Ignores sign (so fpart(-0.5) is 0.5).\n', '     */\n', '    function fpart(int256 realValue) internal pure returns (int256) {\n', '        // This gets the fractional part but strips the sign\n', '        return abs(realValue) % REAL_ONE;\n', '    }\n', '\n', '    /**\n', '     * Get the fractional part of a real, as a real. Respects sign (so fpartSigned(-0.5) is -0.5).\n', '     */\n', '    function fpartSigned(int256 realValue) internal pure returns (int256) {\n', '        // This gets the fractional part but strips the sign\n', '        int256 fractional = fpart(realValue);\n', '        if (realValue < 0) {\n', '            // Add the negative sign back in.\n', '            return -fractional;\n', '        } else {\n', '            return fractional;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Get the integer part of a fixed point value.\n', '     */\n', '    function ipart(int256 realValue) internal pure returns (int256) {\n', '        // Subtract out the fractional part to get the real part.\n', '        return realValue - fpartSigned(realValue);\n', '    }\n', '\n', '    /**\n', '     * Multiply one real by another. Truncates overflows.\n', '     */\n', '    function mul(int256 realA, int256 realB) internal pure returns (int256) {\n', '        // When multiplying fixed point in x.y and z.w formats we get (x+z).(y+w) format.\n', '        // So we just have to clip off the extra REAL_FBITS fractional bits.\n', '        return int256((int256(realA) * int256(realB)) >> REAL_FBITS);\n', '    }\n', '\n', '    /**\n', '     * Divide one real by another real. Truncates overflows.\n', '     */\n', '    function div(int256 realNumerator, int256 realDenominator) internal pure returns (int256) {\n', '        // We use the reverse of the multiplication trick: convert numerator from\n', '        // x.y to (x+z).(y+w) fixed point, then divide by denom in z.w fixed point.\n', '        return int256((int256(realNumerator) * REAL_ONE) / int256(realDenominator));\n', '    }\n', '\n', '    /**\n', '     * Create a real from a rational fraction.\n', '     */\n', '    function fraction(int216 numerator, int216 denominator) internal pure returns (int256) {\n', '        return div(toReal(numerator), toReal(denominator));\n', '    }\n', '\n', '    // Now we have some fancy math things (like pow and trig stuff). This isn&#39;t\n', '    // in the RealMath that was deployed with the original Macroverse\n', '    // deployment, so it needs to be linked into your contract statically.\n', '\n', '    /**\n', '     * Raise a number to a positive integer power in O(log power) time.\n', '     * See <https://stackoverflow.com/a/101613>\n', '     */\n', '    function ipow(int256 realBase, int216 exponent) internal pure returns (int256) {\n', '        if (exponent < 0) {\n', '            // Negative powers are not allowed here.\n', '            revert();\n', '        }\n', '\n', '        int256 tempRealBase = realBase;\n', '        int256 tempExponent = exponent;\n', '\n', '        // Start with the 0th power\n', '        int256 realResult = REAL_ONE;\n', '        while (tempExponent != 0) {\n', '            // While there are still bits set\n', '            if ((tempExponent & 0x1) == 0x1) {\n', '                // If the low bit is set, multiply in the (many-times-squared) base\n', '                realResult = mul(realResult, tempRealBase);\n', '            }\n', '            // Shift off the low bit\n', '            tempExponent = tempExponent >> 1;\n', '            // Do the squaring\n', '            tempRealBase = mul(tempRealBase, tempRealBase);\n', '        }\n', '\n', '        // Return the final result.\n', '        return realResult;\n', '    }\n', '\n', '    /**\n', '     * Zero all but the highest set bit of a number.\n', '     * See <https://stackoverflow.com/a/53184>\n', '     */\n', '    function hibit(uint256 _val) internal pure returns (uint256) {\n', '        // Set all the bits below the highest set bit\n', '        uint256 val = _val;\n', '        val |= (val >> 1);\n', '        val |= (val >> 2);\n', '        val |= (val >> 4);\n', '        val |= (val >> 8);\n', '        val |= (val >> 16);\n', '        val |= (val >> 32);\n', '        val |= (val >> 64);\n', '        val |= (val >> 128);\n', '        return val ^ (val >> 1);\n', '    }\n', '\n', '    /**\n', '     * Given a number with one bit set, finds the index of that bit.\n', '     */\n', '    function findbit(uint256 val) internal pure returns (uint8 index) {\n', '        index = 0;\n', '        // We and the value with alternating bit patters of various pitches to find it.\n', '        if (val & 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA != 0) {\n', '            // Picth 1\n', '            index |= 1;\n', '        }\n', '        if (val & 0xCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC != 0) {\n', '            // Pitch 2\n', '            index |= 2;\n', '        }\n', '        if (val & 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0 != 0) {\n', '            // Pitch 4\n', '            index |= 4;\n', '        }\n', '        if (val & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00 != 0) {\n', '            // Pitch 8\n', '            index |= 8;\n', '        }\n', '        if (val & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000 != 0) {\n', '            // Pitch 16\n', '            index |= 16;\n', '        }\n', '        if (val & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000 != 0) {\n', '            // Pitch 32\n', '            index |= 32;\n', '        }\n', '        if (val & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000 != 0) {\n', '            // Pitch 64\n', '            index |= 64;\n', '        }\n', '        if (val & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000000000000000000000000000 != 0) {\n', '            // Pitch 128\n', '            index |= 128;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Shift realArg left or right until it is between 1 and 2. Return the\n', '     * rescaled value, and the number of bits of right shift applied. Shift may be negative.\n', '     *\n', '     * Expresses realArg as realScaled * 2^shift, setting shift to put realArg between [1 and 2).\n', '     *\n', '     * Rejects 0 or negative arguments.\n', '     */\n', '    function rescale(int256 realArg) internal pure returns (int256 realScaled, int216 shift) {\n', '        if (realArg <= 0) {\n', '            // Not in domain!\n', '            revert();\n', '        }\n', '\n', '        // Find the high bit\n', '        int216 highBit = findbit(hibit(uint256(realArg)));\n', '\n', '        // We&#39;ll shift so the high bit is the lowest non-fractional bit.\n', '        shift = highBit - int216(REAL_FBITS);\n', '\n', '        if (shift < 0) {\n', '            // Shift left\n', '            realScaled = realArg << -shift;\n', '        } else if (shift >= 0) {\n', '            // Shift right\n', '            realScaled = realArg >> shift;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Calculate the natural log of a number. Rescales the input value and uses\n', '     * the algorithm outlined at <https://math.stackexchange.com/a/977836> and\n', '     * the ipow implementation.\n', '     *\n', '     * Lets you artificially limit the number of iterations.\n', '     *\n', '     * Note that it is potentially possible to get an un-converged value; lack\n', '     * of convergence does not throw.\n', '     */\n', '    function lnLimited(int256 realArg, int maxIterations) internal pure returns (int256) {\n', '        if (realArg <= 0) {\n', '            // Outside of acceptable domain\n', '            revert();\n', '        }\n', '\n', '        if (realArg == REAL_ONE) {\n', '            // Handle this case specially because people will want exactly 0 and\n', '            // not ~2^-39 ish.\n', '            return 0;\n', '        }\n', '\n', '        // We know it&#39;s positive, so rescale it to be between [1 and 2)\n', '        int256 realRescaled;\n', '        int216 shift;\n', '        (realRescaled, shift) = rescale(realArg);\n', '\n', '        // Compute the argument to iterate on\n', '        int256 realSeriesArg = div(realRescaled - REAL_ONE, realRescaled + REAL_ONE);\n', '\n', '        // We will accumulate the result here\n', '        int256 realSeriesResult = 0;\n', '\n', '        for (int216 n = 0; n < maxIterations; n++) {\n', '            // Compute term n of the series\n', '            int256 realTerm = div(ipow(realSeriesArg, 2 * n + 1), toReal(2 * n + 1));\n', '            // And add it in\n', '            realSeriesResult += realTerm;\n', '            if (realTerm == 0) {\n', '                // We must have converged. Next term is too small to represent.\n', '                break;\n', '            }\n', '            // If we somehow never converge I guess we will run out of gas\n', '        }\n', '\n', '        // Double it to account for the factor of 2 outside the sum\n', '        realSeriesResult = mul(realSeriesResult, REAL_TWO);\n', '\n', '        // Now compute and return the overall result\n', '        return mul(toReal(shift), REAL_LN_TWO) + realSeriesResult;\n', '\n', '    }\n', '\n', '    /**\n', '     * Calculate a natural logarithm with a sensible maximum iteration count to\n', '     * wait until convergence. Note that it is potentially possible to get an\n', '     * un-converged value; lack of convergence does not throw.\n', '     */\n', '    function ln(int256 realArg) internal pure returns (int256) {\n', '        return lnLimited(realArg, 100);\n', '    }\n', '\n', '    /**\n', '     * Calculate e^x. Uses the series given at\n', '     * <http://pages.mtu.edu/~shene/COURSES/cs201/NOTES/chap04/exp.html>.\n', '     *\n', '     * Lets you artificially limit the number of iterations.\n', '     *\n', '     * Note that it is potentially possible to get an un-converged value; lack\n', '     * of convergence does not throw.\n', '     */\n', '    function expLimited(int256 realArg, int maxIterations) internal pure returns (int256) {\n', '        // We will accumulate the result here\n', '        int256 realResult = 0;\n', '\n', '        // We use this to save work computing terms\n', '        int256 realTerm = REAL_ONE;\n', '\n', '        for (int216 n = 0; n < maxIterations; n++) {\n', '            // Add in the term\n', '            realResult += realTerm;\n', '\n', '            // Compute the next term\n', '            realTerm = mul(realTerm, div(realArg, toReal(n + 1)));\n', '\n', '            if (realTerm == 0) {\n', '                // We must have converged. Next term is too small to represent.\n', '                break;\n', '            }\n', '            // If we somehow never converge I guess we will run out of gas\n', '        }\n', '\n', '        // Return the result\n', '        return realResult;\n', '\n', '    }\n', '\n', '    /**\n', '     * Calculate e^x with a sensible maximum iteration count to wait until\n', '     * convergence. Note that it is potentially possible to get an un-converged\n', '     * value; lack of convergence does not throw.\n', '     */\n', '    function exp(int256 realArg) internal pure returns (int256) {\n', '        return expLimited(realArg, 100);\n', '    }\n', '\n', '    /**\n', '     * Raise any number to any power, except for negative bases to fractional powers.\n', '     */\n', '    function pow(int256 realBase, int256 realExponent) internal pure returns (int256) {\n', '        if (realExponent == 0) {\n', '            // Anything to the 0 is 1\n', '            return REAL_ONE;\n', '        }\n', '\n', '        if (realBase == 0) {\n', '            if (realExponent < 0) {\n', '                // Outside of domain!\n', '                revert();\n', '            }\n', '            // Otherwise it&#39;s 0\n', '            return 0;\n', '        }\n', '\n', '        if (fpart(realExponent) == 0) {\n', '            // Anything (even a negative base) is super easy to do to an integer power.\n', '\n', '            if (realExponent > 0) {\n', '                // Positive integer power is easy\n', '                return ipow(realBase, fromReal(realExponent));\n', '            } else {\n', '                // Negative integer power is harder\n', '                return div(REAL_ONE, ipow(realBase, fromReal(-realExponent)));\n', '            }\n', '        }\n', '\n', '        if (realBase < 0) {\n', '            // It&#39;s a negative base to a non-integer power.\n', '            // In general pow(-x^y) is undefined, unless y is an int or some\n', '            // weird rational-number-based relationship holds.\n', '            revert();\n', '        }\n', '\n', '        // If it&#39;s not a special case, actually do it.\n', '        return exp(mul(realExponent, ln(realBase)));\n', '    }\n', '\n', '    /**\n', '     * Compute the square root of a number.\n', '     */\n', '    function sqrt(int256 realArg) internal pure returns (int256) {\n', '        return pow(realArg, REAL_HALF);\n', '    }\n', '\n', '    /**\n', '     * Compute the sin of a number to a certain number of Taylor series terms.\n', '     */\n', '    function sinLimited(int256 _realArg, int216 maxIterations) internal pure returns (int256) {\n', '        // First bring the number into 0 to 2 pi\n', '        // TODO: This will introduce an error for very large numbers, because the error in our Pi will compound.\n', '        // But for actual reasonable angle values we should be fine.\n', '        int256 realArg = _realArg;\n', '        realArg = realArg % REAL_TWO_PI;\n', '\n', '        int256 accumulator = REAL_ONE;\n', '\n', '        // We sum from large to small iteration so that we can have higher powers in later terms\n', '        for (int216 iteration = maxIterations - 1; iteration >= 0; iteration--) {\n', '            accumulator = REAL_ONE - mul(div(mul(realArg, realArg), toReal((2 * iteration + 2) * (2 * iteration + 3))), accumulator);\n', '            // We can&#39;t stop early; we need to make it to the first term.\n', '        }\n', '\n', '        return mul(realArg, accumulator);\n', '    }\n', '\n', '    /**\n', '     * Calculate sin(x) with a sensible maximum iteration count to wait until\n', '     * convergence.\n', '     */\n', '    function sin(int256 realArg) internal pure returns (int256) {\n', '        return sinLimited(realArg, 15);\n', '    }\n', '\n', '    /**\n', '     * Calculate cos(x).\n', '     */\n', '    function cos(int256 realArg) internal pure returns (int256) {\n', '        return sin(realArg + REAL_HALF_PI);\n', '    }\n', '\n', '    /**\n', '     * Calculate tan(x). May overflow for large results. May throw if tan(x)\n', '     * would be infinite, or return an approximation, or overflow.\n', '     */\n', '    function tan(int256 realArg) internal pure returns (int256) {\n', '        return div(sin(realArg), cos(realArg));\n', '    }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ECRecovery.sol\n', '\n', '/**\n', ' * @title Eliptic curve signature operations\n', ' *\n', ' * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n', ' *\n', ' * TODO Remove this library once solidity supports passing a signature to ecrecover.\n', ' * See https://github.com/ethereum/solidity/issues/864\n', ' *\n', ' */\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using their signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig)\n', '    internal\n', '    pure\n', '    returns (address)\n', '  {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * toEthSignedMessageHash\n', '   * @dev prefix a bytes32 value with "\\x19Ethereum Signed Message:"\n', '   * @dev and hash the result\n', '   */\n', '  function toEthSignedMessageHash(bytes32 hash)\n', '    internal\n', '    pure\n', '    returns (bytes32)\n', '  {\n', '    // 32 is the length in bytes of hash,\n', '    // enforced by the type signature above\n', '    return keccak256(\n', '      "\\x19Ethereum Signed Message:\\n32",\n', '      hash\n', '    );\n', '  }\n', '}\n', '\n', '// File: contracts/libs/OrderStatisticTree.sol\n', '\n', 'library OrderStatisticTree {\n', '\n', '    struct Node {\n', '        mapping (bool => uint) children; // a mapping of left(false) child and right(true) child nodes\n', '        uint parent; // parent node\n', '        bool side;   // side of the node on the tree (left or right)\n', '        uint height; //Height of this node\n', '        uint count; //Number of tree nodes below this node (including this one)\n', '        uint dupes; //Number of duplicates values for this node\n', '    }\n', '\n', '    struct Tree {\n', '        // a mapping between node value(uint) to Node\n', '        // the tree&#39;s root is always at node 0 ,which points to the "real" tree\n', '        // as its right child.this is done to eliminate the need to update the tree\n', '        // root in the case of rotation.(saving gas).\n', '        mapping(uint => Node) nodes;\n', '    }\n', '    /**\n', '     * @dev rank - find the rank of a value in the tree,\n', '     *      i.e. its index in the sorted list of elements of the tree\n', '     * @param _tree the tree\n', '     * @param _value the input value to find its rank.\n', '     * @return smaller - the number of elements in the tree which their value is\n', '     * less than the input value.\n', '     */\n', '    function rank(Tree storage _tree,uint _value) internal view returns (uint smaller) {\n', '        if (_value != 0) {\n', '            smaller = _tree.nodes[0].dupes;\n', '\n', '            uint cur = _tree.nodes[0].children[true];\n', '            Node storage currentNode = _tree.nodes[cur];\n', '\n', '            while (true) {\n', '                if (cur <= _value) {\n', '                    if (cur<_value) {\n', '                        smaller = smaller + 1+currentNode.dupes;\n', '                    }\n', '                    uint leftChild = currentNode.children[false];\n', '                    if (leftChild!=0) {\n', '                        smaller = smaller + _tree.nodes[leftChild].count;\n', '                    }\n', '                }\n', '                if (cur == _value) {\n', '                    break;\n', '                }\n', '                cur = currentNode.children[cur<_value];\n', '                if (cur == 0) {\n', '                    break;\n', '                }\n', '                currentNode = _tree.nodes[cur];\n', '            }\n', '        }\n', '    }\n', '\n', '    function count(Tree storage _tree) internal view returns (uint) {\n', '        Node storage root = _tree.nodes[0];\n', '        Node memory child = _tree.nodes[root.children[true]];\n', '        return root.dupes+child.count;\n', '    }\n', '\n', '    function updateCount(Tree storage _tree,uint _value) private {\n', '        Node storage n = _tree.nodes[_value];\n', '        n.count = 1+_tree.nodes[n.children[false]].count+_tree.nodes[n.children[true]].count+n.dupes;\n', '    }\n', '\n', '    function updateCounts(Tree storage _tree,uint _value) private {\n', '        uint parent = _tree.nodes[_value].parent;\n', '        while (parent!=0) {\n', '            updateCount(_tree,parent);\n', '            parent = _tree.nodes[parent].parent;\n', '        }\n', '    }\n', '\n', '    function updateHeight(Tree storage _tree,uint _value) private {\n', '        Node storage n = _tree.nodes[_value];\n', '        uint heightLeft = _tree.nodes[n.children[false]].height;\n', '        uint heightRight = _tree.nodes[n.children[true]].height;\n', '        if (heightLeft > heightRight)\n', '            n.height = heightLeft+1;\n', '        else\n', '            n.height = heightRight+1;\n', '    }\n', '\n', '    function balanceFactor(Tree storage _tree,uint _value) private view returns (int bf) {\n', '        Node storage n = _tree.nodes[_value];\n', '        return int(_tree.nodes[n.children[false]].height)-int(_tree.nodes[n.children[true]].height);\n', '    }\n', '\n', '    function rotate(Tree storage _tree,uint _value,bool dir) private {\n', '        bool otherDir = !dir;\n', '        Node storage n = _tree.nodes[_value];\n', '        bool side = n.side;\n', '        uint parent = n.parent;\n', '        uint valueNew = n.children[otherDir];\n', '        Node storage nNew = _tree.nodes[valueNew];\n', '        uint orphan = nNew.children[dir];\n', '        Node storage p = _tree.nodes[parent];\n', '        Node storage o = _tree.nodes[orphan];\n', '        p.children[side] = valueNew;\n', '        nNew.side = side;\n', '        nNew.parent = parent;\n', '        nNew.children[dir] = _value;\n', '        n.parent = valueNew;\n', '        n.side = dir;\n', '        n.children[otherDir] = orphan;\n', '        o.parent = _value;\n', '        o.side = otherDir;\n', '        updateHeight(_tree,_value);\n', '        updateHeight(_tree,valueNew);\n', '        updateCount(_tree,_value);\n', '        updateCount(_tree,valueNew);\n', '    }\n', '\n', '    function rebalanceInsert(Tree storage _tree,uint _nValue) private {\n', '        updateHeight(_tree,_nValue);\n', '        Node storage n = _tree.nodes[_nValue];\n', '        uint pValue = n.parent;\n', '        if (pValue!=0) {\n', '            int pBf = balanceFactor(_tree,pValue);\n', '            bool side = n.side;\n', '            int sign;\n', '            if (side)\n', '                sign = -1;\n', '            else\n', '                sign = 1;\n', '            if (pBf == sign*2) {\n', '                if (balanceFactor(_tree,_nValue) == (-1 * sign)) {\n', '                    rotate(_tree,_nValue,side);\n', '                }\n', '                rotate(_tree,pValue,!side);\n', '            } else if (pBf != 0) {\n', '                rebalanceInsert(_tree,pValue);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rebalanceDelete(Tree storage _tree,uint _pValue,bool side) private {\n', '        if (_pValue!=0) {\n', '            updateHeight(_tree,_pValue);\n', '            int pBf = balanceFactor(_tree,_pValue);\n', '            int sign;\n', '            if (side)\n', '                sign = 1;\n', '            else\n', '                sign = -1;\n', '            int bf = balanceFactor(_tree,_pValue);\n', '            if (bf==(2*sign)) {\n', '                Node storage p = _tree.nodes[_pValue];\n', '                uint sValue = p.children[!side];\n', '                int sBf = balanceFactor(_tree,sValue);\n', '                if (sBf == (-1 * sign)) {\n', '                    rotate(_tree,sValue,!side);\n', '                }\n', '                rotate(_tree,_pValue,side);\n', '                if (sBf!=0) {\n', '                    p = _tree.nodes[_pValue];\n', '                    rebalanceDelete(_tree,p.parent,p.side);\n', '                }\n', '            } else if (pBf != sign) {\n', '                p = _tree.nodes[_pValue];\n', '                rebalanceDelete(_tree,p.parent,p.side);\n', '            }\n', '        }\n', '    }\n', '\n', '    function fixParents(Tree storage _tree,uint parent,bool side) private {\n', '        if (parent!=0) {\n', '            updateCount(_tree,parent);\n', '            updateCounts(_tree,parent);\n', '            rebalanceDelete(_tree,parent,side);\n', '        }\n', '    }\n', '\n', '    function insertHelper(Tree storage _tree,uint _pValue,bool _side,uint _value) private {\n', '        Node storage root = _tree.nodes[_pValue];\n', '        uint cValue = root.children[_side];\n', '        if (cValue==0) {\n', '            root.children[_side] = _value;\n', '            Node storage child = _tree.nodes[_value];\n', '            child.parent = _pValue;\n', '            child.side = _side;\n', '            child.height = 1;\n', '            child.count = 1;\n', '            updateCounts(_tree,_value);\n', '            rebalanceInsert(_tree,_value);\n', '        } else if (cValue==_value) {\n', '            _tree.nodes[cValue].dupes++;\n', '            updateCount(_tree,_value);\n', '            updateCounts(_tree,_value);\n', '        } else {\n', '            insertHelper(_tree,cValue,(_value >= cValue),_value);\n', '        }\n', '    }\n', '\n', '    function insert(Tree storage _tree,uint _value) internal {\n', '        if (_value==0) {\n', '            _tree.nodes[_value].dupes++;\n', '        } else {\n', '            insertHelper(_tree,0,true,_value);\n', '        }\n', '    }\n', '\n', '    function rightmostLeaf(Tree storage _tree,uint _value) private view returns (uint leaf) {\n', '        uint child = _tree.nodes[_value].children[true];\n', '        if (child!=0) {\n', '            return rightmostLeaf(_tree,child);\n', '        } else {\n', '            return _value;\n', '        }\n', '    }\n', '\n', '    function zeroOut(Tree storage _tree,uint _value) private {\n', '        Node storage n = _tree.nodes[_value];\n', '        n.parent = 0;\n', '        n.side = false;\n', '        n.children[false] = 0;\n', '        n.children[true] = 0;\n', '        n.count = 0;\n', '        n.height = 0;\n', '        n.dupes = 0;\n', '    }\n', '\n', '    function removeBranch(Tree storage _tree,uint _value,uint _left) private {\n', '        uint ipn = rightmostLeaf(_tree,_left);\n', '        Node storage i = _tree.nodes[ipn];\n', '        uint dupes = i.dupes;\n', '        removeHelper(_tree,ipn);\n', '        Node storage n = _tree.nodes[_value];\n', '        uint parent = n.parent;\n', '        Node storage p = _tree.nodes[parent];\n', '        uint height = n.height;\n', '        bool side = n.side;\n', '        uint ncount = n.count;\n', '        uint right = n.children[true];\n', '        uint left = n.children[false];\n', '        p.children[side] = ipn;\n', '        i.parent = parent;\n', '        i.side = side;\n', '        i.count = ncount+dupes-n.dupes;\n', '        i.height = height;\n', '        i.dupes = dupes;\n', '        if (left!=0) {\n', '            i.children[false] = left;\n', '            _tree.nodes[left].parent = ipn;\n', '        }\n', '        if (right!=0) {\n', '            i.children[true] = right;\n', '            _tree.nodes[right].parent = ipn;\n', '        }\n', '        zeroOut(_tree,_value);\n', '        updateCounts(_tree,ipn);\n', '    }\n', '\n', '    function removeHelper(Tree storage _tree,uint _value) private {\n', '        Node storage n = _tree.nodes[_value];\n', '        uint parent = n.parent;\n', '        bool side = n.side;\n', '        Node storage p = _tree.nodes[parent];\n', '        uint left = n.children[false];\n', '        uint right = n.children[true];\n', '        if ((left == 0) && (right == 0)) {\n', '            p.children[side] = 0;\n', '            zeroOut(_tree,_value);\n', '            fixParents(_tree,parent,side);\n', '        } else if ((left != 0) && (right != 0)) {\n', '            removeBranch(_tree,_value,left);\n', '        } else {\n', '            uint child = left+right;\n', '            Node storage c = _tree.nodes[child];\n', '            p.children[side] = child;\n', '            c.parent = parent;\n', '            c.side = side;\n', '            zeroOut(_tree,_value);\n', '            fixParents(_tree,parent,side);\n', '        }\n', '    }\n', '\n', '    function remove(Tree storage _tree,uint _value) internal {\n', '        Node storage n = _tree.nodes[_value];\n', '        if (_value==0) {\n', '            if (n.dupes==0) {\n', '                return;\n', '            }\n', '        } else {\n', '            if (n.count==0) {\n', '                return;\n', '            }\n', '        }\n', '        if (n.dupes>0) {\n', '            n.dupes--;\n', '            if (_value!=0) {\n', '                n.count--;\n', '            }\n', '            fixParents(_tree,n.parent,n.side);\n', '        } else {\n', '            removeHelper(_tree,_value);\n', '        }\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/VotingMachines/GenesisProtocol.sol\n', '\n', '/**\n', ' * @title GenesisProtocol implementation -an organization&#39;s voting machine scheme.\n', ' */\n', '\n', '\n', 'contract GenesisProtocol is IntVoteInterface,UniversalScheme {\n', '    using SafeMath for uint;\n', '    using RealMath for int216;\n', '    using RealMath for int256;\n', '    using ECRecovery for bytes32;\n', '    using OrderStatisticTree for OrderStatisticTree.Tree;\n', '\n', '    enum ProposalState { None ,Closed, Executed, PreBoosted,Boosted,QuietEndingPeriod }\n', '    enum ExecutionState { None, PreBoostedTimeOut, PreBoostedBarCrossed, BoostedTimeOut,BoostedBarCrossed }\n', '\n', '    //Organization&#39;s parameters\n', '    struct Parameters {\n', '        uint preBoostedVoteRequiredPercentage; // the absolute vote percentages bar.\n', '        uint preBoostedVotePeriodLimit; //the time limit for a proposal to be in an absolute voting mode.\n', '        uint boostedVotePeriodLimit; //the time limit for a proposal to be in an relative voting mode.\n', '        uint thresholdConstA;//constant A for threshold calculation . threshold =A * (e ** (numberOfBoostedProposals/B))\n', '        uint thresholdConstB;//constant B for threshold calculation . threshold =A * (e ** (numberOfBoostedProposals/B))\n', '        uint minimumStakingFee; //minimum staking fee allowed.\n', '        uint quietEndingPeriod; //quite ending period\n', '        uint proposingRepRewardConstA;//constant A for calculate proposer reward. proposerReward =(A*(RTotal) +B*(R+ - R-))/1000\n', '        uint proposingRepRewardConstB;//constant B for calculate proposing reward.proposerReward =(A*(RTotal) +B*(R+ - R-))/1000\n', '        uint stakerFeeRatioForVoters; // The “ratio of stake” to be paid to voters.\n', '                                      // All stakers pay a portion of their stake to all voters, stakerFeeRatioForVoters * (s+ + s-).\n', '                                      //All voters (pre and during boosting period) divide this portion in proportion to their reputation.\n', '        uint votersReputationLossRatio;//Unsuccessful pre booster voters lose votersReputationLossRatio% of their reputation.\n', '        uint votersGainRepRatioFromLostRep; //the percentages of the lost reputation which is divided by the successful pre boosted voters,\n', '                                            //in proportion to their reputation.\n', '                                            //The rest (100-votersGainRepRatioFromLostRep)% of lost reputation is divided between the successful wagers,\n', '                                            //in proportion to their stake.\n', '        uint daoBountyConst;//The DAO adds up a bounty for successful staker.\n', '                            //The bounty formula is: s * daoBountyConst, where s+ is the wager staked for the proposal,\n', '                            //and  daoBountyConst is a constant factor that is configurable and changeable by the DAO given.\n', '                            //  daoBountyConst should be greater than stakerFeeRatioForVoters and less than 2 * stakerFeeRatioForVoters.\n', '        uint daoBountyLimit;//The daoBounty cannot be greater than daoBountyLimit.\n', '\n', '\n', '\n', '    }\n', '    struct Voter {\n', '        uint vote; // YES(1) ,NO(2)\n', '        uint reputation; // amount of voter&#39;s reputation\n', '        bool preBoosted;\n', '    }\n', '\n', '    struct Staker {\n', '        uint vote; // YES(1) ,NO(2)\n', '        uint amount; // amount of staker&#39;s stake\n', '        uint amountForBounty; // amount of staker&#39;s stake which will be use for bounty calculation\n', '    }\n', '\n', '    struct Proposal {\n', '        address avatar; // the organization&#39;s avatar the proposal is target to.\n', '        uint numOfChoices;\n', '        ExecutableInterface executable; // will be executed if the proposal will pass\n', '        uint votersStakes;\n', '        uint submittedTime;\n', '        uint boostedPhaseTime; //the time the proposal shift to relative mode.\n', '        ProposalState state;\n', '        uint winningVote; //the winning vote.\n', '        address proposer;\n', '        uint currentBoostedVotePeriodLimit;\n', '        bytes32 paramsHash;\n', '        uint daoBountyRemain;\n', '        uint[2] totalStakes;// totalStakes[0] - (amount staked minus fee) - Total number of tokens staked which can be redeemable by stakers.\n', '                            // totalStakes[1] - (amount staked) - Total number of redeemable tokens.\n', '        //      vote      reputation\n', '        mapping(uint    =>  uint     ) votes;\n', '        //      vote      reputation\n', '        mapping(uint    =>  uint     ) preBoostedVotes;\n', '        //      address     voter\n', '        mapping(address =>  Voter    ) voters;\n', '        //      vote        stakes\n', '        mapping(uint    =>  uint     ) stakes;\n', '        //      address  staker\n', '        mapping(address  => Staker   ) stakers;\n', '    }\n', '\n', '    event GPExecuteProposal(bytes32 indexed _proposalId, ExecutionState _executionState);\n', '    event Stake(bytes32 indexed _proposalId, address indexed _avatar, address indexed _staker,uint _vote,uint _amount);\n', '    event Redeem(bytes32 indexed _proposalId, address indexed _avatar, address indexed _beneficiary,uint _amount);\n', '    event RedeemDaoBounty(bytes32 indexed _proposalId, address indexed _avatar, address indexed _beneficiary,uint _amount);\n', '    event RedeemReputation(bytes32 indexed _proposalId, address indexed _avatar, address indexed _beneficiary,uint _amount);\n', '\n', '    mapping(bytes32=>Parameters) public parameters;  // A mapping from hashes to parameters\n', '    mapping(bytes32=>Proposal) public proposals; // Mapping from the ID of the proposal to the proposal itself.\n', '\n', '    mapping(bytes=>bool) stakeSignatures; //stake signatures\n', '\n', '    uint constant public NUM_OF_CHOICES = 2;\n', '    uint constant public NO = 2;\n', '    uint constant public YES = 1;\n', '    uint public proposalsCnt; // Total number of proposals\n', '    mapping(address=>uint) orgBoostedProposalsCnt;\n', '    StandardToken public stakingToken;\n', '    mapping(address=>OrderStatisticTree.Tree) proposalsExpiredTimes; //proposals expired times\n', '\n', '    /**\n', '     * @dev Constructor\n', '     */\n', '    constructor(StandardToken _stakingToken) public\n', '    {\n', '        stakingToken = _stakingToken;\n', '    }\n', '\n', '  /**\n', '   * @dev Check that the proposal is votable (open and not executed yet)\n', '   */\n', '    modifier votable(bytes32 _proposalId) {\n', '        require(_isVotable(_proposalId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev register a new proposal with the given parameters. Every proposal has a unique ID which is being\n', '     * generated by calculating keccak256 of a incremented counter.\n', '     * @param _numOfChoices number of voting choices\n', '     * @param _avatar an address to be sent as the payload to the _executable contract.\n', '     * @param _executable This contract will be executed when vote is over.\n', '     * @param _proposer address\n', '     * @return proposal&#39;s id.\n', '     */\n', '    function propose(uint _numOfChoices, bytes32 , address _avatar, ExecutableInterface _executable,address _proposer)\n', '        external\n', '        returns(bytes32)\n', '    {\n', '          // Check valid params and number of choices:\n', '        require(_numOfChoices == NUM_OF_CHOICES);\n', '        require(ExecutableInterface(_executable) != address(0));\n', '        //Check parameters existence.\n', '        bytes32 paramsHash = getParametersFromController(Avatar(_avatar));\n', '\n', '        require(parameters[paramsHash].preBoostedVoteRequiredPercentage > 0);\n', '        // Generate a unique ID:\n', '        bytes32 proposalId = keccak256(abi.encodePacked(this, proposalsCnt));\n', '        proposalsCnt++;\n', '        // Open proposal:\n', '        Proposal memory proposal;\n', '        proposal.numOfChoices = _numOfChoices;\n', '        proposal.avatar = _avatar;\n', '        proposal.executable = _executable;\n', '        proposal.state = ProposalState.PreBoosted;\n', '        // solium-disable-next-line security/no-block-members\n', '        proposal.submittedTime = now;\n', '        proposal.currentBoostedVotePeriodLimit = parameters[paramsHash].boostedVotePeriodLimit;\n', '        proposal.proposer = _proposer;\n', '        proposal.winningVote = NO;\n', '        proposal.paramsHash = paramsHash;\n', '        proposals[proposalId] = proposal;\n', '        emit NewProposal(proposalId, _avatar, _numOfChoices, _proposer, paramsHash);\n', '        return proposalId;\n', '    }\n', '\n', '  /**\n', '   * @dev Cancel a proposal, only the owner can call this function and only if allowOwner flag is true.\n', '   */\n', '    function cancelProposal(bytes32 ) external returns(bool) {\n', '        //This is not allowed.\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev staking function\n', '     * @param _proposalId id of the proposal\n', '     * @param _vote  NO(2) or YES(1).\n', '     * @param _amount the betting amount\n', '     * @return bool true - the proposal has been executed\n', '     *              false - otherwise.\n', '     */\n', '    function stake(bytes32 _proposalId, uint _vote, uint _amount) external returns(bool) {\n', '        return _stake(_proposalId,_vote,_amount,msg.sender);\n', '    }\n', '\n', '    // Digest describing the data the user signs according EIP 712.\n', '    // Needs to match what is passed to Metamask.\n', '    bytes32 public constant DELEGATION_HASH_EIP712 =\n', '    keccak256(abi.encodePacked("address GenesisProtocolAddress","bytes32 ProposalId", "uint Vote","uint AmountToStake","uint Nonce"));\n', '    // web3.eth.sign prefix\n', '    string public constant ETH_SIGN_PREFIX= "\\x19Ethereum Signed Message:\\n32";\n', '\n', '    /**\n', '     * @dev stakeWithSignature function\n', '     * @param _proposalId id of the proposal\n', '     * @param _vote  NO(2) or YES(1).\n', '     * @param _amount the betting amount\n', '     * @param _nonce nonce value ,it is part of the signature to ensure that\n', '              a signature can be received only once.\n', '     * @param _signatureType signature type\n', '              1 - for web3.eth.sign\n', '              2 - for eth_signTypedData according to EIP #712.\n', '     * @param _signature  - signed data by the staker\n', '     * @return bool true - the proposal has been executed\n', '     *              false - otherwise.\n', '     */\n', '    function stakeWithSignature(\n', '        bytes32 _proposalId,\n', '        uint _vote,\n', '        uint _amount,\n', '        uint _nonce,\n', '        uint _signatureType,\n', '        bytes _signature\n', '        )\n', '        external\n', '        returns(bool)\n', '        {\n', '        require(stakeSignatures[_signature] == false);\n', '        // Recreate the digest the user signed\n', '        bytes32 delegationDigest;\n', '        if (_signatureType == 2) {\n', '            delegationDigest = keccak256(\n', '                abi.encodePacked(\n', '                    DELEGATION_HASH_EIP712, keccak256(\n', '                        abi.encodePacked(\n', '                           address(this),\n', '                          _proposalId,\n', '                          _vote,\n', '                          _amount,\n', '                          _nonce)))\n', '            );\n', '        } else {\n', '            delegationDigest = keccak256(\n', '                abi.encodePacked(\n', '                    ETH_SIGN_PREFIX, keccak256(\n', '                        abi.encodePacked(\n', '                            address(this),\n', '                           _proposalId,\n', '                           _vote,\n', '                           _amount,\n', '                           _nonce)))\n', '            );\n', '        }\n', '        address staker = delegationDigest.recover(_signature);\n', '        //a garbage staker address due to wrong signature will revert due to lack of approval and funds.\n', '        require(staker!=address(0));\n', '        stakeSignatures[_signature] = true;\n', '        return _stake(_proposalId,_vote,_amount,staker);\n', '    }\n', '\n', '  /**\n', '   * @dev voting function\n', '   * @param _proposalId id of the proposal\n', '   * @param _vote NO(2) or YES(1).\n', '   * @return bool true - the proposal has been executed\n', '   *              false - otherwise.\n', '   */\n', '    function vote(bytes32 _proposalId, uint _vote) external votable(_proposalId) returns(bool) {\n', '        return internalVote(_proposalId, msg.sender, _vote, 0);\n', '    }\n', '\n', '  /**\n', '   * @dev voting function with owner functionality (can vote on behalf of someone else)\n', '   * @return bool true - the proposal has been executed\n', '   *              false - otherwise.\n', '   */\n', '    function ownerVote(bytes32 , uint , address ) external returns(bool) {\n', '      //This is not allowed.\n', '        return false;\n', '    }\n', '\n', '    function voteWithSpecifiedAmounts(bytes32 _proposalId,uint _vote,uint _rep,uint) external votable(_proposalId) returns(bool) {\n', '        return internalVote(_proposalId,msg.sender,_vote,_rep);\n', '    }\n', '\n', '  /**\n', '   * @dev Cancel the vote of the msg.sender.\n', '   * cancel vote is not allow in genesisProtocol so this function doing nothing.\n', '   * This function is here in order to comply to the IntVoteInterface .\n', '   */\n', '    function cancelVote(bytes32 _proposalId) external votable(_proposalId) {\n', '       //this is not allowed\n', '        return;\n', '    }\n', '\n', '  /**\n', '    * @dev getNumberOfChoices returns the number of choices possible in this proposal\n', '    * @param _proposalId the ID of the proposals\n', '    * @return uint that contains number of choices\n', '    */\n', '    function getNumberOfChoices(bytes32 _proposalId) external view returns(uint) {\n', '        return proposals[_proposalId].numOfChoices;\n', '    }\n', '\n', '    /**\n', '     * @dev voteInfo returns the vote and the amount of reputation of the user committed to this proposal\n', '     * @param _proposalId the ID of the proposal\n', '     * @param _voter the address of the voter\n', '     * @return uint vote - the voters vote\n', '     *        uint reputation - amount of reputation committed by _voter to _proposalId\n', '     */\n', '    function voteInfo(bytes32 _proposalId, address _voter) external view returns(uint, uint) {\n', '        Voter memory voter = proposals[_proposalId].voters[_voter];\n', '        return (voter.vote, voter.reputation);\n', '    }\n', '\n', '    /**\n', '    * @dev voteStatus returns the reputation voted for a proposal for a specific voting choice.\n', '    * @param _proposalId the ID of the proposal\n', '    * @param _choice the index in the\n', '    * @return voted reputation for the given choice\n', '    */\n', '    function voteStatus(bytes32 _proposalId,uint _choice) external view returns(uint) {\n', '        return proposals[_proposalId].votes[_choice];\n', '    }\n', '\n', '    /**\n', '    * @dev isVotable check if the proposal is votable\n', '    * @param _proposalId the ID of the proposal\n', '    * @return bool true or false\n', '    */\n', '    function isVotable(bytes32 _proposalId) external view returns(bool) {\n', '        return _isVotable(_proposalId);\n', '    }\n', '\n', '    /**\n', '    * @dev proposalStatus return the total votes and stakes for a given proposal\n', '    * @param _proposalId the ID of the proposal\n', '    * @return uint preBoostedVotes YES\n', '    * @return uint preBoostedVotes NO\n', '    * @return uint stakersStakes\n', '    * @return uint totalRedeemableStakes\n', '    * @return uint total stakes YES\n', '    * @return uint total stakes NO\n', '    */\n', '    function proposalStatus(bytes32 _proposalId) external view returns(uint, uint, uint ,uint, uint ,uint) {\n', '        return (\n', '                proposals[_proposalId].preBoostedVotes[YES],\n', '                proposals[_proposalId].preBoostedVotes[NO],\n', '                proposals[_proposalId].totalStakes[0],\n', '                proposals[_proposalId].totalStakes[1],\n', '                proposals[_proposalId].stakes[YES],\n', '                proposals[_proposalId].stakes[NO]\n', '        );\n', '    }\n', '\n', '  /**\n', '    * @dev proposalAvatar return the avatar for a given proposal\n', '    * @param _proposalId the ID of the proposal\n', '    * @return uint total reputation supply\n', '    */\n', '    function proposalAvatar(bytes32 _proposalId) external view returns(address) {\n', '        return (proposals[_proposalId].avatar);\n', '    }\n', '\n', '  /**\n', '    * @dev scoreThresholdParams return the score threshold params for a given\n', '    * organization.\n', '    * @param _avatar the organization&#39;s avatar\n', '    * @return uint thresholdConstA\n', '    * @return uint thresholdConstB\n', '    */\n', '    function scoreThresholdParams(address _avatar) external view returns(uint,uint) {\n', '        bytes32 paramsHash = getParametersFromController(Avatar(_avatar));\n', '        Parameters memory params = parameters[paramsHash];\n', '        return (params.thresholdConstA,params.thresholdConstB);\n', '    }\n', '\n', '    /**\n', '      * @dev getStaker return the vote and stake amount for a given proposal and staker\n', '      * @param _proposalId the ID of the proposal\n', '      * @param _staker staker address\n', '      * @return uint vote\n', '      * @return uint amount\n', '    */\n', '    function getStaker(bytes32 _proposalId,address _staker) external view returns(uint,uint) {\n', '        return (proposals[_proposalId].stakers[_staker].vote,proposals[_proposalId].stakers[_staker].amount);\n', '    }\n', '\n', '    /**\n', '      * @dev state return the state for a given proposal\n', '      * @param _proposalId the ID of the proposal\n', '      * @return ProposalState proposal state\n', '    */\n', '    function state(bytes32 _proposalId) external view returns(ProposalState) {\n', '        return proposals[_proposalId].state;\n', '    }\n', '\n', '    /**\n', '    * @dev winningVote return the winningVote for a given proposal\n', '    * @param _proposalId the ID of the proposal\n', '    * @return uint winningVote\n', '    */\n', '    function winningVote(bytes32 _proposalId) external view returns(uint) {\n', '        return proposals[_proposalId].winningVote;\n', '    }\n', '\n', '   /**\n', '    * @dev isAbstainAllow returns if the voting machine allow abstain (0)\n', '    * @return bool true or false\n', '    */\n', '    function isAbstainAllow() external pure returns(bool) {\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev getAllowedRangeOfChoices returns the allowed range of choices for a voting machine.\n', '     * @return min - minimum number of choices\n', '               max - maximum number of choices\n', '     */\n', '    function getAllowedRangeOfChoices() external pure returns(uint min,uint max) {\n', '        return (NUM_OF_CHOICES,NUM_OF_CHOICES);\n', '    }\n', '\n', '    /**\n', '    * @dev execute check if the proposal has been decided, and if so, execute the proposal\n', '    * @param _proposalId the id of the proposal\n', '    * @return bool true - the proposal has been executed\n', '    *              false - otherwise.\n', '   */\n', '    function execute(bytes32 _proposalId) external votable(_proposalId) returns(bool) {\n', '        return _execute(_proposalId);\n', '    }\n', '\n', '    /**\n', '     * @dev redeem a reward for a successful stake, vote or proposing.\n', '     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\n', '     * users to redeem on behalf of someone else.\n', '     * @param _proposalId the ID of the proposal\n', '     * @param _beneficiary - the beneficiary address\n', '     * @return rewards -\n', '     *         rewards[0] - stakerTokenAmount\n', '     *         rewards[1] - stakerReputationAmount\n', '     *         rewards[2] - voterTokenAmount\n', '     *         rewards[3] - voterReputationAmount\n', '     *         rewards[4] - proposerReputationAmount\n', '     * @return reputation - redeem reputation\n', '     */\n', '    function redeem(bytes32 _proposalId,address _beneficiary) public returns (uint[5] rewards) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        require((proposal.state == ProposalState.Executed) || (proposal.state == ProposalState.Closed),"wrong proposal state");\n', '        Parameters memory params = parameters[proposal.paramsHash];\n', '        uint amount;\n', '        uint reputation;\n', '        uint lostReputation;\n', '        if (proposal.winningVote == YES) {\n', '            lostReputation = proposal.preBoostedVotes[NO];\n', '        } else {\n', '            lostReputation = proposal.preBoostedVotes[YES];\n', '        }\n', '        lostReputation = (lostReputation * params.votersReputationLossRatio)/100;\n', '        //as staker\n', '        Staker storage staker = proposal.stakers[_beneficiary];\n', '        if ((staker.amount>0) &&\n', '             (staker.vote == proposal.winningVote)) {\n', '            uint totalWinningStakes = proposal.stakes[proposal.winningVote];\n', '            if (totalWinningStakes != 0) {\n', '                rewards[0] = (staker.amount * proposal.totalStakes[0]) / totalWinningStakes;\n', '            }\n', '            if (proposal.state != ProposalState.Closed) {\n', '                rewards[1] = (staker.amount * ( lostReputation - ((lostReputation * params.votersGainRepRatioFromLostRep)/100)))/proposal.stakes[proposal.winningVote];\n', '            }\n', '            staker.amount = 0;\n', '        }\n', '        //as voter\n', '        Voter storage voter = proposal.voters[_beneficiary];\n', '        if ((voter.reputation != 0 ) && (voter.preBoosted)) {\n', '            uint preBoostedVotes = proposal.preBoostedVotes[YES] + proposal.preBoostedVotes[NO];\n', '            if (preBoostedVotes>0) {\n', '                rewards[2] = ((proposal.votersStakes * voter.reputation) / preBoostedVotes);\n', '            }\n', '            if (proposal.state == ProposalState.Closed) {\n', '              //give back reputation for the voter\n', '                rewards[3] = ((voter.reputation * params.votersReputationLossRatio)/100);\n', '            } else if (proposal.winningVote == voter.vote ) {\n', '                rewards[3] = (((voter.reputation * params.votersReputationLossRatio)/100) +\n', '                (((voter.reputation * lostReputation * params.votersGainRepRatioFromLostRep)/100)/preBoostedVotes));\n', '            }\n', '            voter.reputation = 0;\n', '        }\n', '        //as proposer\n', '        if ((proposal.proposer == _beneficiary)&&(proposal.winningVote == YES)&&(proposal.proposer != address(0))) {\n', '            rewards[4] = (params.proposingRepRewardConstA.mul(proposal.votes[YES]+proposal.votes[NO]) + params.proposingRepRewardConstB.mul(proposal.votes[YES]-proposal.votes[NO]))/1000;\n', '            proposal.proposer = 0;\n', '        }\n', '        amount = rewards[0] + rewards[2];\n', '        reputation = rewards[1] + rewards[3] + rewards[4];\n', '        if (amount != 0) {\n', '            proposal.totalStakes[1] = proposal.totalStakes[1].sub(amount);\n', '            require(stakingToken.transfer(_beneficiary, amount));\n', '            emit Redeem(_proposalId,proposal.avatar,_beneficiary,amount);\n', '        }\n', '        if (reputation != 0 ) {\n', '            ControllerInterface(Avatar(proposal.avatar).owner()).mintReputation(reputation,_beneficiary,proposal.avatar);\n', '            emit RedeemReputation(_proposalId,proposal.avatar,_beneficiary,reputation);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev redeemDaoBounty a reward for a successful stake, vote or proposing.\n', '     * The function use a beneficiary address as a parameter (and not msg.sender) to enable\n', '     * users to redeem on behalf of someone else.\n', '     * @param _proposalId the ID of the proposal\n', '     * @param _beneficiary - the beneficiary address\n', '     * @return redeemedAmount - redeem token amount\n', '     * @return potentialAmount - potential redeem token amount(if there is enough tokens bounty at the avatar )\n', '     */\n', '    function redeemDaoBounty(bytes32 _proposalId,address _beneficiary) public returns(uint redeemedAmount,uint potentialAmount) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        require((proposal.state == ProposalState.Executed) || (proposal.state == ProposalState.Closed));\n', '        uint totalWinningStakes = proposal.stakes[proposal.winningVote];\n', '        if (\n', '          // solium-disable-next-line operator-whitespace\n', '            (proposal.stakers[_beneficiary].amountForBounty>0)&&\n', '            (proposal.stakers[_beneficiary].vote == proposal.winningVote)&&\n', '            (proposal.winningVote == YES)&&\n', '            (totalWinningStakes != 0))\n', '        {\n', '            //as staker\n', '            Parameters memory params = parameters[proposal.paramsHash];\n', '            uint beneficiaryLimit = (proposal.stakers[_beneficiary].amountForBounty.mul(params.daoBountyLimit)) / totalWinningStakes;\n', '            potentialAmount = (params.daoBountyConst.mul(proposal.stakers[_beneficiary].amountForBounty))/100;\n', '            if (potentialAmount > beneficiaryLimit) {\n', '                potentialAmount = beneficiaryLimit;\n', '            }\n', '        }\n', '        if ((potentialAmount != 0)&&(stakingToken.balanceOf(proposal.avatar) >= potentialAmount)) {\n', '            proposal.daoBountyRemain = proposal.daoBountyRemain.sub(potentialAmount);\n', '            require(ControllerInterface(Avatar(proposal.avatar).owner()).externalTokenTransfer(stakingToken,_beneficiary,potentialAmount,proposal.avatar));\n', '            proposal.stakers[_beneficiary].amountForBounty = 0;\n', '            redeemedAmount = potentialAmount;\n', '            emit RedeemDaoBounty(_proposalId,proposal.avatar,_beneficiary,redeemedAmount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev shouldBoost check if a proposal should be shifted to boosted phase.\n', '     * @param _proposalId the ID of the proposal\n', '     * @return bool true or false.\n', '     */\n', '    function shouldBoost(bytes32 _proposalId) public view returns(bool) {\n', '        Proposal memory proposal = proposals[_proposalId];\n', '        return (_score(_proposalId) >= threshold(proposal.paramsHash,proposal.avatar));\n', '    }\n', '\n', '    /**\n', '     * @dev score return the proposal score\n', '     * @param _proposalId the ID of the proposal\n', '     * @return uint proposal score.\n', '     */\n', '    function score(bytes32 _proposalId) public view returns(int) {\n', '        return _score(_proposalId);\n', '    }\n', '\n', '    /**\n', '     * @dev getBoostedProposalsCount return the number of boosted proposal for an organization\n', '     * @param _avatar the organization avatar\n', '     * @return uint number of boosted proposals\n', '     */\n', '    function getBoostedProposalsCount(address _avatar) public view returns(uint) {\n', '        uint expiredProposals;\n', '        if (proposalsExpiredTimes[_avatar].count() != 0) {\n', '          // solium-disable-next-line security/no-block-members\n', '            expiredProposals = proposalsExpiredTimes[_avatar].rank(now);\n', '        }\n', '        return orgBoostedProposalsCnt[_avatar].sub(expiredProposals);\n', '    }\n', '\n', '    /**\n', '     * @dev threshold return the organization&#39;s score threshold which required by\n', '     * a proposal to shift to boosted state.\n', '     * This threshold is dynamically set and it depend on the number of boosted proposal.\n', '     * @param _avatar the organization avatar\n', '     * @param _paramsHash the organization parameters hash\n', '     * @return int organization&#39;s score threshold.\n', '     */\n', '    function threshold(bytes32 _paramsHash,address _avatar) public view returns(int) {\n', '        uint boostedProposals = getBoostedProposalsCount(_avatar);\n', '        int216 e = 2;\n', '\n', '        Parameters memory params = parameters[_paramsHash];\n', '        require(params.thresholdConstB > 0,"should be a valid parameter hash");\n', '        int256 power = int216(boostedProposals).toReal().div(int216(params.thresholdConstB).toReal());\n', '\n', '        if (power.fromReal() > 100 ) {\n', '            power = int216(100).toReal();\n', '        }\n', '        int256 res = int216(params.thresholdConstA).toReal().mul(e.toReal().pow(power));\n', '        return res.fromReal();\n', '    }\n', '\n', '    /**\n', '     * @dev hash the parameters, save them if necessary, and return the hash value\n', '     * @param _params a parameters array\n', '     *    _params[0] - _preBoostedVoteRequiredPercentage,\n', '     *    _params[1] - _preBoostedVotePeriodLimit, //the time limit for a proposal to be in an absolute voting mode.\n', '     *    _params[2] -_boostedVotePeriodLimit, //the time limit for a proposal to be in an relative voting mode.\n', '     *    _params[3] -_thresholdConstA\n', '     *    _params[4] -_thresholdConstB\n', '     *    _params[5] -_minimumStakingFee\n', '     *    _params[6] -_quietEndingPeriod\n', '     *    _params[7] -_proposingRepRewardConstA\n', '     *    _params[8] -_proposingRepRewardConstB\n', '     *    _params[9] -_stakerFeeRatioForVoters\n', '     *    _params[10] -_votersReputationLossRatio\n', '     *    _params[11] -_votersGainRepRatioFromLostRep\n', '     *    _params[12] - _daoBountyConst\n', '     *    _params[13] - _daoBountyLimit\n', '    */\n', '    function setParameters(\n', '        uint[14] _params //use array here due to stack too deep issue.\n', '    )\n', '    public\n', '    returns(bytes32)\n', '    {\n', '        require(_params[0] <= 100 && _params[0] > 0,"0 < preBoostedVoteRequiredPercentage <= 100");\n', '        require(_params[4] > 0 && _params[4] <= 100000000,"0 < thresholdConstB < 100000000 ");\n', '        require(_params[3] <= 100000000 ether,"thresholdConstA <= 100000000 wei");\n', '        require(_params[9] <= 100,"stakerFeeRatioForVoters <= 100");\n', '        require(_params[10] <= 100,"votersReputationLossRatio <= 100");\n', '        require(_params[11] <= 100,"votersGainRepRatioFromLostRep <= 100");\n', '        require(_params[2] >= _params[6],"boostedVotePeriodLimit >= quietEndingPeriod");\n', '        require(_params[7] <= 100000000,"proposingRepRewardConstA <= 100000000");\n', '        require(_params[8] <= 100000000,"proposingRepRewardConstB <= 100000000");\n', '        require(_params[12] <= (2 * _params[9]),"daoBountyConst <= 2 * stakerFeeRatioForVoters");\n', '        require(_params[12] >= _params[9],"daoBountyConst >= stakerFeeRatioForVoters");\n', '\n', '\n', '        bytes32 paramsHash = getParametersHash(_params);\n', '        parameters[paramsHash] = Parameters({\n', '            preBoostedVoteRequiredPercentage: _params[0],\n', '            preBoostedVotePeriodLimit: _params[1],\n', '            boostedVotePeriodLimit: _params[2],\n', '            thresholdConstA:_params[3],\n', '            thresholdConstB:_params[4],\n', '            minimumStakingFee: _params[5],\n', '            quietEndingPeriod: _params[6],\n', '            proposingRepRewardConstA: _params[7],\n', '            proposingRepRewardConstB:_params[8],\n', '            stakerFeeRatioForVoters:_params[9],\n', '            votersReputationLossRatio:_params[10],\n', '            votersGainRepRatioFromLostRep:_params[11],\n', '            daoBountyConst:_params[12],\n', '            daoBountyLimit:_params[13]\n', '        });\n', '        return paramsHash;\n', '    }\n', '\n', '  /**\n', '   * @dev hashParameters returns a hash of the given parameters\n', '   */\n', '    function getParametersHash(\n', '        uint[14] _params) //use array here due to stack too deep issue.\n', '        public\n', '        pure\n', '        returns(bytes32)\n', '        {\n', '        return keccak256(\n', '            abi.encodePacked(\n', '            _params[0],\n', '            _params[1],\n', '            _params[2],\n', '            _params[3],\n', '            _params[4],\n', '            _params[5],\n', '            _params[6],\n', '            _params[7],\n', '            _params[8],\n', '            _params[9],\n', '            _params[10],\n', '            _params[11],\n', '            _params[12],\n', '            _params[13]));\n', '    }\n', '\n', '    /**\n', '    * @dev execute check if the proposal has been decided, and if so, execute the proposal\n', '    * @param _proposalId the id of the proposal\n', '    * @return bool true - the proposal has been executed\n', '    *              false - otherwise.\n', '   */\n', '    function _execute(bytes32 _proposalId) internal votable(_proposalId) returns(bool) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        Parameters memory params = parameters[proposal.paramsHash];\n', '        Proposal memory tmpProposal = proposal;\n', '        uint totalReputation = Avatar(proposal.avatar).nativeReputation().totalSupply();\n', '        uint executionBar = totalReputation * params.preBoostedVoteRequiredPercentage/100;\n', '        ExecutionState executionState = ExecutionState.None;\n', '\n', '        if (proposal.state == ProposalState.PreBoosted) {\n', '            // solium-disable-next-line security/no-block-members\n', '            if ((now - proposal.submittedTime) >= params.preBoostedVotePeriodLimit) {\n', '                proposal.state = ProposalState.Closed;\n', '                proposal.winningVote = NO;\n', '                executionState = ExecutionState.PreBoostedTimeOut;\n', '             } else if (proposal.votes[proposal.winningVote] > executionBar) {\n', '              // someone crossed the absolute vote execution bar.\n', '                proposal.state = ProposalState.Executed;\n', '                executionState = ExecutionState.PreBoostedBarCrossed;\n', '               } else if ( shouldBoost(_proposalId)) {\n', '                //change proposal mode to boosted mode.\n', '                proposal.state = ProposalState.Boosted;\n', '                // solium-disable-next-line security/no-block-members\n', '                proposal.boostedPhaseTime = now;\n', '                proposalsExpiredTimes[proposal.avatar].insert(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\n', '                orgBoostedProposalsCnt[proposal.avatar]++;\n', '              }\n', '           }\n', '\n', '        if ((proposal.state == ProposalState.Boosted) ||\n', '            (proposal.state == ProposalState.QuietEndingPeriod)) {\n', '            // solium-disable-next-line security/no-block-members\n', '            if ((now - proposal.boostedPhaseTime) >= proposal.currentBoostedVotePeriodLimit) {\n', '                proposalsExpiredTimes[proposal.avatar].remove(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\n', '                orgBoostedProposalsCnt[tmpProposal.avatar] = orgBoostedProposalsCnt[tmpProposal.avatar].sub(1);\n', '                proposal.state = ProposalState.Executed;\n', '                executionState = ExecutionState.BoostedTimeOut;\n', '             } else if (proposal.votes[proposal.winningVote] > executionBar) {\n', '               // someone crossed the absolute vote execution bar.\n', '                orgBoostedProposalsCnt[tmpProposal.avatar] = orgBoostedProposalsCnt[tmpProposal.avatar].sub(1);\n', '                proposalsExpiredTimes[proposal.avatar].remove(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\n', '                proposal.state = ProposalState.Executed;\n', '                executionState = ExecutionState.BoostedBarCrossed;\n', '            }\n', '       }\n', '        if (executionState != ExecutionState.None) {\n', '            if (proposal.winningVote == YES) {\n', '                uint daoBountyRemain = (params.daoBountyConst.mul(proposal.stakes[proposal.winningVote]))/100;\n', '                if (daoBountyRemain > params.daoBountyLimit) {\n', '                    daoBountyRemain = params.daoBountyLimit;\n', '                }\n', '                proposal.daoBountyRemain = daoBountyRemain;\n', '            }\n', '            emit ExecuteProposal(_proposalId, proposal.avatar, proposal.winningVote, totalReputation);\n', '            emit GPExecuteProposal(_proposalId, executionState);\n', '            (tmpProposal.executable).execute(_proposalId, tmpProposal.avatar, int(proposal.winningVote));\n', '        }\n', '        return (executionState != ExecutionState.None);\n', '    }\n', '\n', '    /**\n', '     * @dev staking function\n', '     * @param _proposalId id of the proposal\n', '     * @param _vote  NO(2) or YES(1).\n', '     * @param _amount the betting amount\n', '     * @param _staker the staker address\n', '     * @return bool true - the proposal has been executed\n', '     *              false - otherwise.\n', '     */\n', '    function _stake(bytes32 _proposalId, uint _vote, uint _amount,address _staker) internal returns(bool) {\n', '        // 0 is not a valid vote.\n', '\n', '        require(_vote <= NUM_OF_CHOICES && _vote > 0);\n', '        require(_amount > 0);\n', '        if (_execute(_proposalId)) {\n', '            return true;\n', '        }\n', '\n', '        Proposal storage proposal = proposals[_proposalId];\n', '\n', '        if (proposal.state != ProposalState.PreBoosted) {\n', '            return false;\n', '        }\n', '\n', '        // enable to increase stake only on the previous stake vote\n', '        Staker storage staker = proposal.stakers[_staker];\n', '        if ((staker.amount > 0) && (staker.vote != _vote)) {\n', '            return false;\n', '        }\n', '\n', '        uint amount = _amount;\n', '        Parameters memory params = parameters[proposal.paramsHash];\n', '        require(amount >= params.minimumStakingFee);\n', '        require(stakingToken.transferFrom(_staker, address(this), amount));\n', '        proposal.totalStakes[1] = proposal.totalStakes[1].add(amount); //update totalRedeemableStakes\n', '        staker.amount += amount;\n', '        staker.amountForBounty = staker.amount;\n', '        staker.vote = _vote;\n', '\n', '        proposal.votersStakes += (params.stakerFeeRatioForVoters * amount)/100;\n', '        proposal.stakes[_vote] = amount.add(proposal.stakes[_vote]);\n', '        amount = amount - ((params.stakerFeeRatioForVoters*amount)/100);\n', '\n', '        proposal.totalStakes[0] = amount.add(proposal.totalStakes[0]);\n', '      // Event:\n', '        emit Stake(_proposalId, proposal.avatar, _staker, _vote, _amount);\n', '      // execute the proposal if this vote was decisive:\n', '        return _execute(_proposalId);\n', '    }\n', '\n', '    /**\n', '     * @dev Vote for a proposal, if the voter already voted, cancel the last vote and set a new one instead\n', '     * @param _proposalId id of the proposal\n', '     * @param _voter used in case the vote is cast for someone else\n', '     * @param _vote a value between 0 to and the proposal&#39;s number of choices.\n', '     * @param _rep how many reputation the voter would like to stake for this vote.\n', '     *         if  _rep==0 so the voter full reputation will be use.\n', '     * @return true in case of proposal execution otherwise false\n', '     * throws if proposal is not open or if it has been executed\n', '     * NB: executes the proposal if a decision has been reached\n', '     */\n', '    function internalVote(bytes32 _proposalId, address _voter, uint _vote, uint _rep) internal returns(bool) {\n', '        // 0 is not a valid vote.\n', '        require(_vote <= NUM_OF_CHOICES && _vote > 0,"0 < _vote <= 2");\n', '        if (_execute(_proposalId)) {\n', '            return true;\n', '        }\n', '\n', '        Parameters memory params = parameters[proposals[_proposalId].paramsHash];\n', '        Proposal storage proposal = proposals[_proposalId];\n', '\n', '        // Check voter has enough reputation:\n', '        uint reputation = Avatar(proposal.avatar).nativeReputation().reputationOf(_voter);\n', '        require(reputation >= _rep);\n', '        uint rep = _rep;\n', '        if (rep == 0) {\n', '            rep = reputation;\n', '        }\n', '        // If this voter has already voted, return false.\n', '        if (proposal.voters[_voter].reputation != 0) {\n', '            return false;\n', '        }\n', '        // The voting itself:\n', '        proposal.votes[_vote] = rep.add(proposal.votes[_vote]);\n', '        //check if the current winningVote changed or there is a tie.\n', '        //for the case there is a tie the current winningVote set to NO.\n', '        if ((proposal.votes[_vote] > proposal.votes[proposal.winningVote]) ||\n', '           ((proposal.votes[NO] == proposal.votes[proposal.winningVote]) &&\n', '             proposal.winningVote == YES))\n', '        {\n', '           // solium-disable-next-line security/no-block-members\n', '            uint _now = now;\n', '            if ((proposal.state == ProposalState.QuietEndingPeriod) ||\n', '               ((proposal.state == ProposalState.Boosted) && ((_now - proposal.boostedPhaseTime) >= (params.boostedVotePeriodLimit - params.quietEndingPeriod)))) {\n', '                //quietEndingPeriod\n', '                proposalsExpiredTimes[proposal.avatar].remove(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\n', '                if (proposal.state != ProposalState.QuietEndingPeriod) {\n', '                    proposal.currentBoostedVotePeriodLimit = params.quietEndingPeriod;\n', '                    proposal.state = ProposalState.QuietEndingPeriod;\n', '                }\n', '                proposal.boostedPhaseTime = _now;\n', '                proposalsExpiredTimes[proposal.avatar].insert(proposal.boostedPhaseTime + proposal.currentBoostedVotePeriodLimit);\n', '            }\n', '            proposal.winningVote = _vote;\n', '        }\n', '        proposal.voters[_voter] = Voter({\n', '            reputation: rep,\n', '            vote: _vote,\n', '            preBoosted:(proposal.state == ProposalState.PreBoosted)\n', '        });\n', '        if (proposal.state == ProposalState.PreBoosted) {\n', '            proposal.preBoostedVotes[_vote] = rep.add(proposal.preBoostedVotes[_vote]);\n', '            uint reputationDeposit = (params.votersReputationLossRatio * rep)/100;\n', '            ControllerInterface(Avatar(proposal.avatar).owner()).burnReputation(reputationDeposit,_voter,proposal.avatar);\n', '        }\n', '        // Event:\n', '        emit VoteProposal(_proposalId, proposal.avatar, _voter, _vote, rep);\n', '        // execute the proposal if this vote was decisive:\n', '        return _execute(_proposalId);\n', '    }\n', '\n', '    /**\n', '     * @dev _score return the proposal score\n', '     * For dual choice proposal S = (S+) - (S-)\n', '     * @param _proposalId the ID of the proposal\n', '     * @return int proposal score.\n', '     */\n', '    function _score(bytes32 _proposalId) private view returns(int) {\n', '        Proposal storage proposal = proposals[_proposalId];\n', '        return int(proposal.stakes[YES]) - int(proposal.stakes[NO]);\n', '    }\n', '\n', '    /**\n', '      * @dev _isVotable check if the proposal is votable\n', '      * @param _proposalId the ID of the proposal\n', '      * @return bool true or false\n', '    */\n', '    function _isVotable(bytes32 _proposalId) private view returns(bool) {\n', '        ProposalState pState = proposals[_proposalId].state;\n', '        return ((pState == ProposalState.PreBoosted)||(pState == ProposalState.Boosted)||(pState == ProposalState.QuietEndingPeriod));\n', '    }\n', '}']