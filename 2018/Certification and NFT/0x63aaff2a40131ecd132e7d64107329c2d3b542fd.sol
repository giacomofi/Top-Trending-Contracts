['pragma solidity ^0.4.21;\n', '\n', 'contract SFTPRECOE {\n', '\n', '    string public name = "Smart First Time PRECOE 28 Way Distributor";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "SFTPRECOE";\n', '\n', '    address gp = 0xe118291aa3aee8ab850846d18c8a97d2430015cc;\n', '    address mp = 0x448468d5591C724f5310027B859135d5F6434286;\n', '    address sp1 = 0x6c5Cd0e2f4f5958216ef187505b617b3Cf1ed348;\n', '    address sp2 = 0x6ca28CFa0B254c8Ba7FcC31fa6BA2Cc65e290392;\n', '    address ap1 = 0xF5F9Bb6bd914a88768b1ACF100A195C76A0f5Ae4;\n', '    address dp1 = 0xc9b4f7aba9ed24481e01d1960dd28d468329a164;\n', '    address jp1 = 0x810c4de015a463E8b6AFAFf166f57A2B2F761032;\n', '    address jp2 = 0x540f691252A01b0Ab4F39c69cB99e79ec3457018;\n', '    address lp1 = 0xEC044D0424c6d1Df79439Af8b5b89dfEDA9C6c18;\n', '    address lp2 = 0x5639F3421262a4E3A6feC7023E2c01732B64D77d;\n', '    address lp3 = 0x590311Bbc53820cc79547Beb2c499c99677E43b3;\n', '    address lp4 = 0xdEA2fCcc02BccAc532f387A24bd2fF03003fB989;\n', '    address lp5 = 0x778591c4942E95BE60133D6Eb17b73929232cf84;\n', '    address lp6 = 0x997834315bBdc3D958bB9689D1C34f03c68e6C90;\n', '    address lp7 = 0x08f4a6d09ac1dfbc219a5d8f8d5cc6b03a0268e4;\n', '    address lp8 = 0x00761c2FAf58d887FD17a4f47A4dF714360c51b0;\n', '    address lp9 = 0x78440ef3ac7618fcce994b46503a6380eba67bd1;\n', '    address lp10 = 0xCa737026C2FA428ea606427Ae01E091B0A840CE4;\n', '    address lp11 = 0x752607dC81e0336ea6DDcccED509D8FD28610B54;\n', '    address lp12 = 0xb69a63279319197adca53b9853469d3aac586a4c;\n', '    address lp13 = 0xCCabc8A758bf68885808eCd08AC703AD70932118;\n', '    address lp14 = 0xab78275600E01Da6Ab7b5a4db7917d987FdB1b6d;\n', '    address lp15 = 0x3fe61aab16f32644f43db47e4e1e7d09b9cc17d7;\n', '    address lp16 = 0xf7db87fec560101442cbeddcb1956ac649e54954;\n', '    address lp17 = 0x005dcbcea40ed1526026e85507bb3201906073e5;\n', '    address lp18 = 0xfc7280ef8305bff2cbc6be1f44306f7cbc6f2f33;\n', '    address lp19 = 0x5dc1e57cf63a842b35c8ae3fe90698810a4494d7;\n', '    address lp20 = 0x5daba694e153c09b8dba4f83feccd0731144398c;\n', '\n', '    function SFTPRECOE() {\n', '\n', '    }\n', '\n', '    // distribute incoming funds to the 7 addresses based on agreed %\n', '    function withDrawFees() public\n', '    {\n', '        //GP\t20.00%\n', '        gp.transfer(div(mul(msg.value,2000),10000));\n', '        //MP\t10.00%\n', '        mp.transfer(div(mul(msg.value,1000),10000));\n', '        //SP1\t10.00%\n', '        sp1.transfer(div(mul(msg.value,1000),10000));\n', '        //SP2\t10.00%\n', '        sp2.transfer(div(mul(msg.value,1000),10000));\n', '        //AP1\t10.00%\n', '        ap1.transfer(div(mul(msg.value,1000),10000));\n', '        //DP1\t10.00%\n', '        dp1.transfer(div(mul(msg.value,1000),10000));\n', '        //JP1\t5.00%\n', '        jp1.transfer(div(mul(msg.value,500),10000));\n', '        //JP2\t5.00%\n', '        jp2.transfer(div(mul(msg.value,500),10000));\n', '        //LP1-19\t1.00%\n', '        lp1.transfer(div(mul(msg.value,100),10000));\n', '        lp2.transfer(div(mul(msg.value,100),10000));\n', '        lp3.transfer(div(mul(msg.value,100),10000));\n', '        lp4.transfer(div(mul(msg.value,100),10000));\n', '        lp5.transfer(div(mul(msg.value,100),10000));\n', '        lp6.transfer(div(mul(msg.value,100),10000));\n', '        lp7.transfer(div(mul(msg.value,100),10000));\n', '        lp8.transfer(div(mul(msg.value,100),10000));\n', '        lp9.transfer(div(mul(msg.value,100),10000));\n', '        lp10.transfer(div(mul(msg.value,100),10000));\n', '        lp11.transfer(div(mul(msg.value,100),10000));\n', '        lp12.transfer(div(mul(msg.value,100),10000));\n', '        lp13.transfer(div(mul(msg.value,100),10000));\n', '        lp14.transfer(div(mul(msg.value,100),10000));\n', '        lp15.transfer(div(mul(msg.value,100),10000));\n', '        lp16.transfer(div(mul(msg.value,100),10000));\n', '        lp17.transfer(div(mul(msg.value,100),10000));\n', '        lp18.transfer(div(mul(msg.value,100),10000));\n', '        lp19.transfer(div(mul(msg.value,100),10000));\n', '    }\n', '\n', '    function changegp (address _receiver) public\n', '    {\n', '        require(msg.sender == gp);\n', '        gp = _receiver;\n', '    }\n', '    function changemp (address _receiver) public\n', '    {\n', '        require(msg.sender == mp);\n', '        mp = _receiver;\n', '    }\n', '    function changesp1 (address _receiver) public\n', '    {\n', '        require(msg.sender == sp1);\n', '        sp1 = _receiver;\n', '    }\n', '    function changesp2 (address _receiver) public\n', '    {\n', '        require(msg.sender == sp2);\n', '        sp2 = _receiver;\n', '    }\n', '    function changedp1 (address _receiver) public\n', '    {\n', '        require(msg.sender == dp1);\n', '        dp1 = _receiver;\n', '    }\n', '    function changejp1 (address _receiver) public\n', '    {\n', '        require(msg.sender == jp1);\n', '        jp1 = _receiver;\n', '    }\n', '    function changejp2 (address _receiver) public\n', '    {\n', '        require(msg.sender == jp2);\n', '        jp2 = _receiver;\n', '    }\n', '    function changelp1 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp1);\n', '        lp1 = _receiver;\n', '    }\n', '    function changelp2 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp2);\n', '        lp2 = _receiver;\n', '    }\n', '    function changelp3 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp3);\n', '        lp3 = _receiver;\n', '    }\n', '    function changelp4 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp4);\n', '        lp4 = _receiver;\n', '    }\n', '    function changelp5 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp5);\n', '        lp5 = _receiver;\n', '    }\n', '    function changelp6 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp6);\n', '        lp6 = _receiver;\n', '    }\n', '    function changelp7 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp7);\n', '        lp7 = _receiver;\n', '    }\n', '    function changelp8 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp8);\n', '        lp8 = _receiver;\n', '    }\n', '    function changelp9 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp9);\n', '        lp9 = _receiver;\n', '    }\n', '    function changelp10 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp10);\n', '        lp10 = _receiver;\n', '    }\n', '    function changelp11 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp11);\n', '        lp11 = _receiver;\n', '    }\n', '    function changelp12 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp12);\n', '        lp12 = _receiver;\n', '    }\n', '    function changelp13 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp13);\n', '        lp13 = _receiver;\n', '    }\n', '    function changelp14 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp14);\n', '        lp14 = _receiver;\n', '    }\n', '    function changelp15 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp15);\n', '        lp15 = _receiver;\n', '    }\n', '    function changelp16 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp16);\n', '        lp16 = _receiver;\n', '    }\n', '    function changelp17 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp17);\n', '        lp17 = _receiver;\n', '    }\n', '    function changelp18 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp18);\n', '        lp18 = _receiver;\n', '    }\n', '    function changelp19 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp19);\n', '        lp19 = _receiver;\n', '    }\n', '    function changelp20 (address _receiver) public\n', '    {\n', '        require(msg.sender == lp20);\n', '        lp20 = _receiver;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '}']