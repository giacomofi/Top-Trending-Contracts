['pragma solidity ^0.4.24;\n', '\n', ' \n', '\n', 'contract Lottery{\n', '\n', '     /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '\n', '   // Only owner allowed.\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '   // The tokens can never be stolen.\n', '    modifier notPooh(address aContract)\n', '    {\n', '        require(aContract != address(poohContract));\n', '        _;\n', '    } \n', '\n', '    modifier isOpenToPublic()\n', '    {\n', '        require(openToPublic);\n', '        _;\n', '    }\n', '\n', '    modifier onlyHuman()\n', '    {\n', '       require (msg.sender == tx.origin);\n', '        _;\n', '    }\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '\n', '    event Deposit(\n', '        uint256 amount,\n', '        address depositer\n', '    );\n', '\n', '   event WinnerPaid(\n', '        uint256 amount,\n', '        address winner\n', '    );\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '\n', '    POOH poohContract;  //a reference to the POOH contract\n', '    address owner;\n', '    bool openToPublic = false; //Is this lottery open for public use\n', '    uint256 ticketNumber = 0; //Starting ticket number\n', '    uint256 winningNumber; //The randomly generated winning ticket\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '\n', '    constructor() public\n', '    {\n', '        poohContract = POOH(0x4C29d75cc423E8Adaa3839892feb66977e295829);\n', '        openToPublic = false;\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '  /* Fallback function allows anyone to send money for the cost of gas which\n', '     goes into the pool. Used by withdraw/dividend payouts.*/\n', '    function() payable public { }\n', '\n', '\n', '     function deposit()\n', '       isOpenToPublic()\n', '       onlyHuman()\n', '     payable public\n', '     {\n', '        //You have to send more than 0.001 ETH\n', '        require(msg.value >= 1000000000000000);\n', '        address customerAddress = msg.sender;\n', '\n', '        //Use deposit to purchase POOH tokens\n', '        poohContract.buy.value(msg.value)(customerAddress);\n', '        emit Deposit(msg.value, msg.sender);\n', '\n', '        //if entry more than 0.001 ETH\n', '        if(msg.value > 1000000000000000)\n', '        {\n', '            uint extraTickets = SafeMath.div(msg.value, 1000000000000000); //each additional entry is 0.001 ETH\n', '            \n', '            //Compute how many positions they get by how many POOH they transferred in.\n', '            ticketNumber += extraTickets;\n', '        }\n', '\n', '         //if when we have a winner...\n', '        if(ticketNumber >= winningNumber)\n', '        {\n', '            //sell all tokens and cash out earned dividends\n', '            poohContract.exit();\n', '\n', '            //lotteryFee\n', '            payDev(owner);\n', '\n', '            //payout winner\n', '            payWinner(customerAddress);\n', '            \n', '            //buy more POOH tokens with the remaining balance\n', '            poohContract.buy.value(address(this).balance)(customerAddress);\n', '\n', '           //rinse and repeat\n', '           resetLottery();\n', '        }\n', '        else\n', '        {\n', '           ticketNumber++;\n', '        }\n', '    }\n', '\n', '    //Number of POOH tokens currently in the Lottery pool\n', '    function myTokens() public view returns(uint256)\n', '    {\n', '        return poohContract.myTokens();\n', '    }\n', '\n', '     //Lottery&#39;s divs\n', '    function myDividends() public view returns(uint256)\n', '    {\n', '        return poohContract.myDividends(true);\n', '    }\n', '\n', '   //Lottery&#39;s ETH balance\n', '   function ethBalance() public view returns (uint256)\n', '   {\n', '       return address(this).balance;\n', '   }\n', '\n', '\n', '     /*======================================\n', '     =          OWNER ONLY FUNCTIONS        =\n', '     ======================================*/\n', '\n', '   //give the people access to play\n', '    function openToThePublic()\n', '       onlyOwner()\n', '        public\n', '    {\n', '        openToPublic = true;\n', '        resetLottery();\n', '    }\n', '\n', '\n', '     /* A trap door for when someone sends tokens other than the intended ones so the overseers\n', '      can decide where to send them. (credit: Doublr Contract) */\n', '    function returnAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens)\n', '    public\n', '    onlyOwner()\n', '    notPooh(tokenAddress)\n', '    returns (bool success)\n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n', '    }\n', '\n', '\n', '     /*======================================\n', '     =          INTERNAL FUNCTIONS          =\n', '     ======================================*/\n', '\n', '\n', '     //pay winner\n', '    function payWinner(address winner) internal\n', '    {\n', '        //need to have 0.05 ETH balance left over for the next round.\n', '        uint balance = SafeMath.sub(address(this).balance, 50000000000000000);\n', '        winner.transfer(balance);\n', '\n', '        emit WinnerPaid(balance, winner);\n', '    }\n', '\n', '    //donate to dev\n', '    function payDev(address dev) internal\n', '    {\n', '        uint balance = SafeMath.div(address(this).balance, 10);\n', '        dev.transfer(balance);\n', '    }\n', '\n', '   function resetLottery() internal\n', '   isOpenToPublic()\n', '   {\n', '       ticketNumber = 1;\n', '       winningNumber = uint256(keccak256(block.timestamp, block.difficulty))%300;\n', '   }\n', '}\n', '\n', '\n', '//Need to ensure this contract can send tokens to people\n', 'contract ERC20Interface\n', '{\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '}\n', '\n', '//Need to ensure the Lottery contract knows what a POOH token is\n', 'contract POOH\n', '{\n', '    function buy(address) public payable returns(uint256);\n', '    function exit() public;\n', '    function myTokens() public view returns(uint256);\n', '    function myDividends(bool) public view returns(uint256);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    \n', '     /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', ' \n', '\n', 'contract Lottery{\n', '\n', '     /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '\n', '   // Only owner allowed.\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '   // The tokens can never be stolen.\n', '    modifier notPooh(address aContract)\n', '    {\n', '        require(aContract != address(poohContract));\n', '        _;\n', '    } \n', '\n', '    modifier isOpenToPublic()\n', '    {\n', '        require(openToPublic);\n', '        _;\n', '    }\n', '\n', '    modifier onlyHuman()\n', '    {\n', '       require (msg.sender == tx.origin);\n', '        _;\n', '    }\n', '\n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '\n', '    event Deposit(\n', '        uint256 amount,\n', '        address depositer\n', '    );\n', '\n', '   event WinnerPaid(\n', '        uint256 amount,\n', '        address winner\n', '    );\n', '\n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '\n', '    POOH poohContract;  //a reference to the POOH contract\n', '    address owner;\n', '    bool openToPublic = false; //Is this lottery open for public use\n', '    uint256 ticketNumber = 0; //Starting ticket number\n', '    uint256 winningNumber; //The randomly generated winning ticket\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '\n', '    constructor() public\n', '    {\n', '        poohContract = POOH(0x4C29d75cc423E8Adaa3839892feb66977e295829);\n', '        openToPublic = false;\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '  /* Fallback function allows anyone to send money for the cost of gas which\n', '     goes into the pool. Used by withdraw/dividend payouts.*/\n', '    function() payable public { }\n', '\n', '\n', '     function deposit()\n', '       isOpenToPublic()\n', '       onlyHuman()\n', '     payable public\n', '     {\n', '        //You have to send more than 0.001 ETH\n', '        require(msg.value >= 1000000000000000);\n', '        address customerAddress = msg.sender;\n', '\n', '        //Use deposit to purchase POOH tokens\n', '        poohContract.buy.value(msg.value)(customerAddress);\n', '        emit Deposit(msg.value, msg.sender);\n', '\n', '        //if entry more than 0.001 ETH\n', '        if(msg.value > 1000000000000000)\n', '        {\n', '            uint extraTickets = SafeMath.div(msg.value, 1000000000000000); //each additional entry is 0.001 ETH\n', '            \n', '            //Compute how many positions they get by how many POOH they transferred in.\n', '            ticketNumber += extraTickets;\n', '        }\n', '\n', '         //if when we have a winner...\n', '        if(ticketNumber >= winningNumber)\n', '        {\n', '            //sell all tokens and cash out earned dividends\n', '            poohContract.exit();\n', '\n', '            //lotteryFee\n', '            payDev(owner);\n', '\n', '            //payout winner\n', '            payWinner(customerAddress);\n', '            \n', '            //buy more POOH tokens with the remaining balance\n', '            poohContract.buy.value(address(this).balance)(customerAddress);\n', '\n', '           //rinse and repeat\n', '           resetLottery();\n', '        }\n', '        else\n', '        {\n', '           ticketNumber++;\n', '        }\n', '    }\n', '\n', '    //Number of POOH tokens currently in the Lottery pool\n', '    function myTokens() public view returns(uint256)\n', '    {\n', '        return poohContract.myTokens();\n', '    }\n', '\n', "     //Lottery's divs\n", '    function myDividends() public view returns(uint256)\n', '    {\n', '        return poohContract.myDividends(true);\n', '    }\n', '\n', "   //Lottery's ETH balance\n", '   function ethBalance() public view returns (uint256)\n', '   {\n', '       return address(this).balance;\n', '   }\n', '\n', '\n', '     /*======================================\n', '     =          OWNER ONLY FUNCTIONS        =\n', '     ======================================*/\n', '\n', '   //give the people access to play\n', '    function openToThePublic()\n', '       onlyOwner()\n', '        public\n', '    {\n', '        openToPublic = true;\n', '        resetLottery();\n', '    }\n', '\n', '\n', '     /* A trap door for when someone sends tokens other than the intended ones so the overseers\n', '      can decide where to send them. (credit: Doublr Contract) */\n', '    function returnAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens)\n', '    public\n', '    onlyOwner()\n', '    notPooh(tokenAddress)\n', '    returns (bool success)\n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n', '    }\n', '\n', '\n', '     /*======================================\n', '     =          INTERNAL FUNCTIONS          =\n', '     ======================================*/\n', '\n', '\n', '     //pay winner\n', '    function payWinner(address winner) internal\n', '    {\n', '        //need to have 0.05 ETH balance left over for the next round.\n', '        uint balance = SafeMath.sub(address(this).balance, 50000000000000000);\n', '        winner.transfer(balance);\n', '\n', '        emit WinnerPaid(balance, winner);\n', '    }\n', '\n', '    //donate to dev\n', '    function payDev(address dev) internal\n', '    {\n', '        uint balance = SafeMath.div(address(this).balance, 10);\n', '        dev.transfer(balance);\n', '    }\n', '\n', '   function resetLottery() internal\n', '   isOpenToPublic()\n', '   {\n', '       ticketNumber = 1;\n', '       winningNumber = uint256(keccak256(block.timestamp, block.difficulty))%300;\n', '   }\n', '}\n', '\n', '\n', '//Need to ensure this contract can send tokens to people\n', 'contract ERC20Interface\n', '{\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '}\n', '\n', '//Need to ensure the Lottery contract knows what a POOH token is\n', 'contract POOH\n', '{\n', '    function buy(address) public payable returns(uint256);\n', '    function exit() public;\n', '    function myTokens() public view returns(uint256);\n', '    function myDividends(bool) public view returns(uint256);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) \n', '    {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    \n', '     /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}']
