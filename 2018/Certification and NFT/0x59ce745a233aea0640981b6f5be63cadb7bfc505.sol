['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * EthercraftFarm Front-end:\n', ' * https://mryellow.github.io/ethercraft_farm_ui/\n', ' */\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ShopInterface\n', '{\n', '    ObjectInterface public object;\n', '    function buyObject(address _beneficiary) public payable;\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancy_lock);\n', '    reentrancy_lock = true;\n', '    _;\n', '    reentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', 'contract EthercraftFarm is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // TODO: Could be private with getter only allowing senders balance lookup.\n', '    mapping (address => mapping (address => uint256)) public tokenBalanceOf;\n', '\n', '    function() payable public {\n', '        //owner.transfer(msg.value);\n', '    }\n', '\n', '    function prep(address _shop, uint8 _iterations) nonReentrant external {\n', '        require(_shop != address(0));\n', '\n', '        uint8 _len = 1;\n', '        if (_iterations > 1)\n', '            _len = _iterations;\n', '\n', '        ShopInterface shop = ShopInterface(_shop);\n', '        for (uint8 i = 0; i < _len * 100; i++) {\n', '            shop.buyObject(this);\n', '        }\n', '\n', '        ObjectInterface object = ObjectInterface(shop.object());\n', '        tokenBalanceOf[msg.sender][object] = tokenBalanceOf[msg.sender][object].add(uint256(_len * 99 ether));\n', '        tokenBalanceOf[owner][object] = tokenBalanceOf[owner][object].add(uint256(_len * 1 ether));\n', '    }\n', '\n', '    function reap(address _object) nonReentrant external {\n', '        require(_object != address(0));\n', '        require(tokenBalanceOf[msg.sender][_object] > 0);\n', '\n', '        // Retrieve any accumulated ETH.\n', '        if (msg.sender == owner)\n', '            owner.transfer(this.balance);\n', '\n', '        ObjectInterface(_object).transfer(msg.sender, tokenBalanceOf[msg.sender][_object]);\n', '        tokenBalanceOf[msg.sender][_object] = 0;\n', '    }\n', '\n', '}\n', '\n', 'contract ObjectInterface\n', '{\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}']
['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * EthercraftFarm Front-end:\n', ' * https://mryellow.github.io/ethercraft_farm_ui/\n', ' */\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ShopInterface\n', '{\n', '    ObjectInterface public object;\n', '    function buyObject(address _beneficiary) public payable;\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancy_lock);\n', '    reentrancy_lock = true;\n', '    _;\n', '    reentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', 'contract EthercraftFarm is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // TODO: Could be private with getter only allowing senders balance lookup.\n', '    mapping (address => mapping (address => uint256)) public tokenBalanceOf;\n', '\n', '    function() payable public {\n', '        //owner.transfer(msg.value);\n', '    }\n', '\n', '    function prep(address _shop, uint8 _iterations) nonReentrant external {\n', '        require(_shop != address(0));\n', '\n', '        uint8 _len = 1;\n', '        if (_iterations > 1)\n', '            _len = _iterations;\n', '\n', '        ShopInterface shop = ShopInterface(_shop);\n', '        for (uint8 i = 0; i < _len * 100; i++) {\n', '            shop.buyObject(this);\n', '        }\n', '\n', '        ObjectInterface object = ObjectInterface(shop.object());\n', '        tokenBalanceOf[msg.sender][object] = tokenBalanceOf[msg.sender][object].add(uint256(_len * 99 ether));\n', '        tokenBalanceOf[owner][object] = tokenBalanceOf[owner][object].add(uint256(_len * 1 ether));\n', '    }\n', '\n', '    function reap(address _object) nonReentrant external {\n', '        require(_object != address(0));\n', '        require(tokenBalanceOf[msg.sender][_object] > 0);\n', '\n', '        // Retrieve any accumulated ETH.\n', '        if (msg.sender == owner)\n', '            owner.transfer(this.balance);\n', '\n', '        ObjectInterface(_object).transfer(msg.sender, tokenBalanceOf[msg.sender][_object]);\n', '        tokenBalanceOf[msg.sender][_object] = 0;\n', '    }\n', '\n', '}\n', '\n', 'contract ObjectInterface\n', '{\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}']
