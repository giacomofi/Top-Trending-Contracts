['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  mapping (address => bool) public admins;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '    admins[owner] = true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  modifier onlyAdmin() {\n', '    require(admins[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function changeAdmin(address _newAdmin, bool _approved) onlyOwner public {\n', '    admins[_newAdmin] = _approved;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract ArkToken is ERC721, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '  uint256 public developerCut;\n', '\n', '  // Animal Data\n', '  mapping (uint256 => Animal) public arkData;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // mom ID => baby ID\n', '  mapping (uint256 => uint256) public babies;\n', '  \n', '  // baby ID => parents\n', '  mapping (uint256 => uint256[2]) public babyMommas;\n', '  \n', '  // token ID => their baby-makin&#39; partner\n', '  mapping (uint256 => uint256) public mates;\n', '\n', '  // baby ID => sum price of mom and dad needed to make this babby\n', '  mapping (uint256 => uint256) public babyMakinPrice;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  // Balances from % payouts.\n', '  mapping (address => uint256) public birtherBalances; \n', '\n', '  // Events\n', '  event Purchase(uint256 indexed _tokenId, address indexed _buyer, address indexed _seller, uint256 _purchasePrice);\n', '  event Birth(address indexed _birther, uint256 indexed _mom, uint256 _dad, uint256 indexed _baby);\n', '\n', '  // Purchasing Caps for Determining Next Pool Cut\n', '  uint256 private firstCap  = 0.5 ether;\n', '  uint256 private secondCap = 1.0 ether;\n', '  uint256 private thirdCap  = 1.5 ether;\n', '  uint256 private finalCap  = 3.0 ether;\n', '\n', '  // Struct to store Animal Data\n', '  struct Animal {\n', '    uint256 price;         // Current price of the item.\n', '    uint256 lastPrice;     // Last price needed to calculate whether baby-makin&#39; limit has made it\n', '    address owner;         // Current owner of the item.\n', '    address birther;       // Address that birthed the animal.\n', '    uint256 birtherPct;    // Percent that birther will get for sales. The actual percent is this / 10.\n', '    uint8 gender;          // Gender of this animal: 0 for male, 1 for female.\n', '  }\n', '\n', '  function createToken(uint256 _tokenId, uint256 _startingPrice, uint256 _cut, address _owner, uint8 _gender) onlyAdmin() public {\n', '    // make sure price > 0\n', '    require(_startingPrice > 0);\n', '    // make sure token hasn&#39;t been used yet\n', '    require(arkData[_tokenId].price == 0);\n', '    \n', '    // create new token\n', '    Animal storage curAnimal = arkData[_tokenId];\n', '\n', '    curAnimal.owner = _owner;\n', '    curAnimal.price = _startingPrice;\n', '    curAnimal.lastPrice = _startingPrice;\n', '    curAnimal.gender = _gender;\n', '    curAnimal.birther = _owner;\n', '    curAnimal.birtherPct = _cut;\n', '\n', '    // mint new token\n', '    _mint(_owner, _tokenId);\n', '  }\n', '\n', '  function createMultiple (uint256[] _itemIds, uint256[] _prices, uint256[] _cuts, address[] _owners, uint8[] _genders) onlyAdmin() external {\n', '    for (uint256 i = 0; i < _itemIds.length; i++) {\n', '      createToken(_itemIds[i], _prices[i], _cuts[i], _owners[i], _genders[i]);\n', '    }\n', '  }\n', '\n', '  function createBaby(uint256 _dad, uint256 _mom, uint256 _baby, uint256 _price) public onlyAdmin() \n', '  {\n', '      mates[_mom] = _dad;\n', '      mates[_dad] = _mom;\n', '      babies[_mom] = _baby;\n', '      babyMommas[_baby] = [_mom, _dad];\n', '      babyMakinPrice[_baby] = _price;\n', '  }\n', '  \n', '  function createBabies(uint256[] _dads, uint256[] _moms, uint256[] _babies, uint256[] _prices) external onlyAdmin() {\n', '      require(_moms.length == _babies.length && _babies.length == _dads.length);\n', '      for (uint256 i = 0; i < _moms.length; i++) {\n', '          createBaby(_dads[i], _moms[i], _babies[i], _prices[i]);\n', '      }\n', '  }\n', '\n', '  /**\n', '  * @dev Determines next price of token\n', '  * @param _price uint256 ID of current price\n', '  */\n', '  function getNextPrice (uint256 _price) private view returns (uint256 _nextPrice) {\n', '    if (_price < firstCap) {\n', '      return _price.mul(150).div(95);\n', '    } else if (_price < secondCap) {\n', '      return _price.mul(135).div(96);\n', '    } else if (_price < thirdCap) {\n', '      return _price.mul(125).div(97);\n', '    } else if (_price < finalCap) {\n', '      return _price.mul(117).div(97);\n', '    } else {\n', '      return _price.mul(115).div(98);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Purchase animal from previous owner\n', '  * @param _tokenId uint256 of token\n', '  */\n', '  function buyToken(uint256 _tokenId) public \n', '    payable\n', '    isNotContract(msg.sender)\n', '  {\n', '\n', '    // get data from storage\n', '    Animal storage animal = arkData[_tokenId];\n', '    uint256 price = animal.price;\n', '    address oldOwner = animal.owner;\n', '    address newOwner = msg.sender;\n', '    uint256 excess = msg.value.sub(price);\n', '\n', '    // revert checks\n', '    require(price > 0);\n', '    require(msg.value >= price);\n', '    require(oldOwner != msg.sender);\n', '    require(oldOwner != address(0) && oldOwner != address(1)); // We&#39;re gonna put unbirthed babbies at 0x1\n', '    \n', '    uint256 totalCut = price.mul(4).div(100);\n', '    \n', '    uint256 birtherCut = price.mul(animal.birtherPct).div(1000); // birtherPct is % * 10 so we / 1000\n', '    birtherBalances[animal.birther] = birtherBalances[animal.birther].add(birtherCut);\n', '    \n', '    uint256 devCut = totalCut.sub(birtherCut);\n', '    developerCut = developerCut.add(devCut);\n', '\n', '    transferToken(oldOwner, newOwner, _tokenId);\n', '\n', '    // raise event\n', '    Purchase(_tokenId, newOwner, oldOwner, price);\n', '\n', '    // set new prices\n', '    animal.price = getNextPrice(price);\n', '    animal.lastPrice = price;\n', '\n', '    // Transfer payment to old owner minus the developer&#39;s and birther&#39;s cut.\n', '    oldOwner.transfer(price.sub(totalCut));\n', '    // Send refund to owner if needed\n', '    if (excess > 0) {\n', '      newOwner.transfer(excess);\n', '    }\n', '    \n', '    checkBirth(_tokenId);\n', '  }\n', '  \n', '  /**\n', '   * @dev Check to see whether a newly purchased animal should give birth.\n', '   * @param _tokenId Unique ID of the newly transferred animal.\n', '  */\n', '  function checkBirth(uint256 _tokenId)\n', '    internal\n', '  {\n', '    uint256 mom = 0;\n', '    \n', '    // gender 0 = male, 1 = female\n', '    if (arkData[_tokenId].gender == 0) {\n', '      mom = mates[_tokenId];\n', '    } else {\n', '      mom = _tokenId;\n', '    }\n', '    \n', '    if (babies[mom] > 0) {\n', '      if (tokenOwner[mates[_tokenId]] == msg.sender) {\n', '        // Check if the sum price to make a baby for these mates has been passed.\n', '        uint256 sumPrice = arkData[_tokenId].lastPrice + arkData[mates[_tokenId]].lastPrice;\n', '        if (sumPrice >= babyMakinPrice[babies[mom]]) {\n', '          autoBirth(babies[mom]);\n', '          \n', '          Birth(msg.sender, mom, mates[mom], babies[mom]);\n', '          babyMakinPrice[babies[mom]] = 0;\n', '          babies[mom] = 0;\n', '          mates[mates[mom]] = 0;\n', '          mates[mom] = 0;\n', '        }\n', '      }\n', '    }\n', '  }\n', '  \n', '  /**\n', '   * @dev Internal function to birth a baby if an owner has both mom and dad.\n', '   * @param _baby Token ID of the baby to birth.\n', '  */\n', '  function autoBirth(uint256 _baby)\n', '    internal\n', '  {\n', '    Animal storage animal = arkData[_baby];\n', '    animal.birther = msg.sender;\n', '    transferToken(animal.owner, msg.sender, _baby);\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer Token from Previous Owner to New Owner\n', '  * @param _from previous owner address\n', '  * @param _to new owner address\n', '  * @param _tokenId uint256 ID of token\n', '  */\n', '  function transferToken(address _from, address _to, uint256 _tokenId) internal {\n', '    // check token exists\n', '    require(tokenExists(_tokenId));\n', '\n', '    // make sure previous owner is correct\n', '    require(arkData[_tokenId].owner == _from);\n', '\n', '    require(_to != address(0));\n', '    require(_to != address(this));\n', '\n', '    // clear approvals linked to this token\n', '    clearApproval(_from, _tokenId);\n', '\n', '    // remove token from previous owner\n', '    removeToken(_from, _tokenId);\n', '\n', '    // update owner and add token to new owner\n', '    addToken(_to, _tokenId);\n', '\n', '   //raise event\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Withdraw dev&#39;s cut\n', '  */\n', '  function withdraw(uint256 _amount) public onlyAdmin() {\n', '    if (_amount == 0) { \n', '      _amount = developerCut; \n', '    }\n', '    developerCut = developerCut.sub(_amount);\n', '    owner.transfer(_amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraw anyone&#39;s birther balance.\n', '   * @param _beneficiary The person whose balance shall be sent to them.\n', '  */\n', '  function withdrawBalance(address _beneficiary) external {\n', '    uint256 payout = birtherBalances[_beneficiary];\n', '    birtherBalances[_beneficiary] = 0;\n', '    _beneficiary.transfer(payout);\n', '  }\n', '\n', '  /**\n', '   * @dev Return all relevant data for an animal.\n', '   * @param _tokenId Unique animal ID.\n', '  */\n', '  function getArkData (uint256 _tokenId) external view \n', '  returns (address _owner, uint256 _price, uint256 _nextPrice, uint256 _mate, \n', '           address _birther, uint8 _gender, uint256 _baby, uint256 _babyPrice) \n', '  {\n', '    Animal memory animal = arkData[_tokenId];\n', '    uint256 baby;\n', '    if (animal.gender == 1) baby = babies[_tokenId];\n', '    else baby = babies[mates[_tokenId]];\n', '    \n', '    return (animal.owner, animal.price, getNextPrice(animal.price), mates[_tokenId], \n', '            animal.birther, animal.gender, baby, babyMakinPrice[baby]);\n', '  }\n', '  \n', '  /**\n', '   * @dev Get sum price required to birth baby.\n', '   * @param _babyId Unique baby Id.\n', '  */\n', '  function getBabyMakinPrice(uint256 _babyId) external view\n', '  returns (uint256 price)\n', '  {\n', '    price = babyMakinPrice[_babyId];\n', '  }\n', '\n', '  /**\n', '   * @dev Get the parents of a certain baby.\n', '   * @param _babyId Unique baby Id.\n', '  */\n', '  function getBabyMommas(uint256 _babyId) external view\n', '  returns (uint256[2] parents)\n', '  {\n', '    parents = babyMommas[_babyId];\n', '  }\n', '  \n', '  /**\n', '   * @dev Frontend can use this to find the birther percent for animal.\n', '   * @param _tokenId The unique id for the animal.\n', '  */\n', '  function getBirthCut(uint256 _tokenId) external view\n', '  returns (uint256 birthCut)\n', '  {\n', '    birthCut = arkData[_tokenId].birtherPct;\n', '  }\n', '\n', '  /**\n', '   * @dev Check the birther balance of a certain address.\n', '   * @param _owner The address to check the balance of.\n', '  */\n', '  function checkBalance(address _owner) external view returns (uint256) {\n', '    return birtherBalances[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Determines if token exists by checking it&#39;s price\n', '  * @param _tokenId uint256 ID of token\n', '  */\n', '  function tokenExists (uint256 _tokenId) public view returns (bool _exists) {\n', '    return arkData[_tokenId].price > 0;\n', '  }\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is not a contract\n', '  * @param _buyer address of person buying animal\n', '  */\n', '  modifier isNotContract(address _buyer) {\n', '    uint size;\n', '    assembly { size := extcodesize(_buyer) }\n', '    require(size == 0);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '  \n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal isNotContract(_to) {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '\n', '    /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    addToken(_to, _tokenId);\n', '    Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    arkData[_tokenId].owner = _to;\n', '    \n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '\n', '  function name() public pure returns (string _name) {\n', '    return "EthersArk Token";\n', '  }\n', '\n', '  function symbol() public pure returns (string _symbol) {\n', '    return "EARK";\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  mapping (address => bool) public admins;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '    admins[owner] = true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  modifier onlyAdmin() {\n', '    require(admins[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function changeAdmin(address _newAdmin, bool _approved) onlyOwner public {\n', '    admins[_newAdmin] = _approved;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract ArkToken is ERC721, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '  uint256 public developerCut;\n', '\n', '  // Animal Data\n', '  mapping (uint256 => Animal) public arkData;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // mom ID => baby ID\n', '  mapping (uint256 => uint256) public babies;\n', '  \n', '  // baby ID => parents\n', '  mapping (uint256 => uint256[2]) public babyMommas;\n', '  \n', "  // token ID => their baby-makin' partner\n", '  mapping (uint256 => uint256) public mates;\n', '\n', '  // baby ID => sum price of mom and dad needed to make this babby\n', '  mapping (uint256 => uint256) public babyMakinPrice;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  // Balances from % payouts.\n', '  mapping (address => uint256) public birtherBalances; \n', '\n', '  // Events\n', '  event Purchase(uint256 indexed _tokenId, address indexed _buyer, address indexed _seller, uint256 _purchasePrice);\n', '  event Birth(address indexed _birther, uint256 indexed _mom, uint256 _dad, uint256 indexed _baby);\n', '\n', '  // Purchasing Caps for Determining Next Pool Cut\n', '  uint256 private firstCap  = 0.5 ether;\n', '  uint256 private secondCap = 1.0 ether;\n', '  uint256 private thirdCap  = 1.5 ether;\n', '  uint256 private finalCap  = 3.0 ether;\n', '\n', '  // Struct to store Animal Data\n', '  struct Animal {\n', '    uint256 price;         // Current price of the item.\n', "    uint256 lastPrice;     // Last price needed to calculate whether baby-makin' limit has made it\n", '    address owner;         // Current owner of the item.\n', '    address birther;       // Address that birthed the animal.\n', '    uint256 birtherPct;    // Percent that birther will get for sales. The actual percent is this / 10.\n', '    uint8 gender;          // Gender of this animal: 0 for male, 1 for female.\n', '  }\n', '\n', '  function createToken(uint256 _tokenId, uint256 _startingPrice, uint256 _cut, address _owner, uint8 _gender) onlyAdmin() public {\n', '    // make sure price > 0\n', '    require(_startingPrice > 0);\n', "    // make sure token hasn't been used yet\n", '    require(arkData[_tokenId].price == 0);\n', '    \n', '    // create new token\n', '    Animal storage curAnimal = arkData[_tokenId];\n', '\n', '    curAnimal.owner = _owner;\n', '    curAnimal.price = _startingPrice;\n', '    curAnimal.lastPrice = _startingPrice;\n', '    curAnimal.gender = _gender;\n', '    curAnimal.birther = _owner;\n', '    curAnimal.birtherPct = _cut;\n', '\n', '    // mint new token\n', '    _mint(_owner, _tokenId);\n', '  }\n', '\n', '  function createMultiple (uint256[] _itemIds, uint256[] _prices, uint256[] _cuts, address[] _owners, uint8[] _genders) onlyAdmin() external {\n', '    for (uint256 i = 0; i < _itemIds.length; i++) {\n', '      createToken(_itemIds[i], _prices[i], _cuts[i], _owners[i], _genders[i]);\n', '    }\n', '  }\n', '\n', '  function createBaby(uint256 _dad, uint256 _mom, uint256 _baby, uint256 _price) public onlyAdmin() \n', '  {\n', '      mates[_mom] = _dad;\n', '      mates[_dad] = _mom;\n', '      babies[_mom] = _baby;\n', '      babyMommas[_baby] = [_mom, _dad];\n', '      babyMakinPrice[_baby] = _price;\n', '  }\n', '  \n', '  function createBabies(uint256[] _dads, uint256[] _moms, uint256[] _babies, uint256[] _prices) external onlyAdmin() {\n', '      require(_moms.length == _babies.length && _babies.length == _dads.length);\n', '      for (uint256 i = 0; i < _moms.length; i++) {\n', '          createBaby(_dads[i], _moms[i], _babies[i], _prices[i]);\n', '      }\n', '  }\n', '\n', '  /**\n', '  * @dev Determines next price of token\n', '  * @param _price uint256 ID of current price\n', '  */\n', '  function getNextPrice (uint256 _price) private view returns (uint256 _nextPrice) {\n', '    if (_price < firstCap) {\n', '      return _price.mul(150).div(95);\n', '    } else if (_price < secondCap) {\n', '      return _price.mul(135).div(96);\n', '    } else if (_price < thirdCap) {\n', '      return _price.mul(125).div(97);\n', '    } else if (_price < finalCap) {\n', '      return _price.mul(117).div(97);\n', '    } else {\n', '      return _price.mul(115).div(98);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Purchase animal from previous owner\n', '  * @param _tokenId uint256 of token\n', '  */\n', '  function buyToken(uint256 _tokenId) public \n', '    payable\n', '    isNotContract(msg.sender)\n', '  {\n', '\n', '    // get data from storage\n', '    Animal storage animal = arkData[_tokenId];\n', '    uint256 price = animal.price;\n', '    address oldOwner = animal.owner;\n', '    address newOwner = msg.sender;\n', '    uint256 excess = msg.value.sub(price);\n', '\n', '    // revert checks\n', '    require(price > 0);\n', '    require(msg.value >= price);\n', '    require(oldOwner != msg.sender);\n', "    require(oldOwner != address(0) && oldOwner != address(1)); // We're gonna put unbirthed babbies at 0x1\n", '    \n', '    uint256 totalCut = price.mul(4).div(100);\n', '    \n', '    uint256 birtherCut = price.mul(animal.birtherPct).div(1000); // birtherPct is % * 10 so we / 1000\n', '    birtherBalances[animal.birther] = birtherBalances[animal.birther].add(birtherCut);\n', '    \n', '    uint256 devCut = totalCut.sub(birtherCut);\n', '    developerCut = developerCut.add(devCut);\n', '\n', '    transferToken(oldOwner, newOwner, _tokenId);\n', '\n', '    // raise event\n', '    Purchase(_tokenId, newOwner, oldOwner, price);\n', '\n', '    // set new prices\n', '    animal.price = getNextPrice(price);\n', '    animal.lastPrice = price;\n', '\n', "    // Transfer payment to old owner minus the developer's and birther's cut.\n", '    oldOwner.transfer(price.sub(totalCut));\n', '    // Send refund to owner if needed\n', '    if (excess > 0) {\n', '      newOwner.transfer(excess);\n', '    }\n', '    \n', '    checkBirth(_tokenId);\n', '  }\n', '  \n', '  /**\n', '   * @dev Check to see whether a newly purchased animal should give birth.\n', '   * @param _tokenId Unique ID of the newly transferred animal.\n', '  */\n', '  function checkBirth(uint256 _tokenId)\n', '    internal\n', '  {\n', '    uint256 mom = 0;\n', '    \n', '    // gender 0 = male, 1 = female\n', '    if (arkData[_tokenId].gender == 0) {\n', '      mom = mates[_tokenId];\n', '    } else {\n', '      mom = _tokenId;\n', '    }\n', '    \n', '    if (babies[mom] > 0) {\n', '      if (tokenOwner[mates[_tokenId]] == msg.sender) {\n', '        // Check if the sum price to make a baby for these mates has been passed.\n', '        uint256 sumPrice = arkData[_tokenId].lastPrice + arkData[mates[_tokenId]].lastPrice;\n', '        if (sumPrice >= babyMakinPrice[babies[mom]]) {\n', '          autoBirth(babies[mom]);\n', '          \n', '          Birth(msg.sender, mom, mates[mom], babies[mom]);\n', '          babyMakinPrice[babies[mom]] = 0;\n', '          babies[mom] = 0;\n', '          mates[mates[mom]] = 0;\n', '          mates[mom] = 0;\n', '        }\n', '      }\n', '    }\n', '  }\n', '  \n', '  /**\n', '   * @dev Internal function to birth a baby if an owner has both mom and dad.\n', '   * @param _baby Token ID of the baby to birth.\n', '  */\n', '  function autoBirth(uint256 _baby)\n', '    internal\n', '  {\n', '    Animal storage animal = arkData[_baby];\n', '    animal.birther = msg.sender;\n', '    transferToken(animal.owner, msg.sender, _baby);\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer Token from Previous Owner to New Owner\n', '  * @param _from previous owner address\n', '  * @param _to new owner address\n', '  * @param _tokenId uint256 ID of token\n', '  */\n', '  function transferToken(address _from, address _to, uint256 _tokenId) internal {\n', '    // check token exists\n', '    require(tokenExists(_tokenId));\n', '\n', '    // make sure previous owner is correct\n', '    require(arkData[_tokenId].owner == _from);\n', '\n', '    require(_to != address(0));\n', '    require(_to != address(this));\n', '\n', '    // clear approvals linked to this token\n', '    clearApproval(_from, _tokenId);\n', '\n', '    // remove token from previous owner\n', '    removeToken(_from, _tokenId);\n', '\n', '    // update owner and add token to new owner\n', '    addToken(_to, _tokenId);\n', '\n', '   //raise event\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', "  * @dev Withdraw dev's cut\n", '  */\n', '  function withdraw(uint256 _amount) public onlyAdmin() {\n', '    if (_amount == 0) { \n', '      _amount = developerCut; \n', '    }\n', '    developerCut = developerCut.sub(_amount);\n', '    owner.transfer(_amount);\n', '  }\n', '\n', '  /**\n', "   * @dev Withdraw anyone's birther balance.\n", '   * @param _beneficiary The person whose balance shall be sent to them.\n', '  */\n', '  function withdrawBalance(address _beneficiary) external {\n', '    uint256 payout = birtherBalances[_beneficiary];\n', '    birtherBalances[_beneficiary] = 0;\n', '    _beneficiary.transfer(payout);\n', '  }\n', '\n', '  /**\n', '   * @dev Return all relevant data for an animal.\n', '   * @param _tokenId Unique animal ID.\n', '  */\n', '  function getArkData (uint256 _tokenId) external view \n', '  returns (address _owner, uint256 _price, uint256 _nextPrice, uint256 _mate, \n', '           address _birther, uint8 _gender, uint256 _baby, uint256 _babyPrice) \n', '  {\n', '    Animal memory animal = arkData[_tokenId];\n', '    uint256 baby;\n', '    if (animal.gender == 1) baby = babies[_tokenId];\n', '    else baby = babies[mates[_tokenId]];\n', '    \n', '    return (animal.owner, animal.price, getNextPrice(animal.price), mates[_tokenId], \n', '            animal.birther, animal.gender, baby, babyMakinPrice[baby]);\n', '  }\n', '  \n', '  /**\n', '   * @dev Get sum price required to birth baby.\n', '   * @param _babyId Unique baby Id.\n', '  */\n', '  function getBabyMakinPrice(uint256 _babyId) external view\n', '  returns (uint256 price)\n', '  {\n', '    price = babyMakinPrice[_babyId];\n', '  }\n', '\n', '  /**\n', '   * @dev Get the parents of a certain baby.\n', '   * @param _babyId Unique baby Id.\n', '  */\n', '  function getBabyMommas(uint256 _babyId) external view\n', '  returns (uint256[2] parents)\n', '  {\n', '    parents = babyMommas[_babyId];\n', '  }\n', '  \n', '  /**\n', '   * @dev Frontend can use this to find the birther percent for animal.\n', '   * @param _tokenId The unique id for the animal.\n', '  */\n', '  function getBirthCut(uint256 _tokenId) external view\n', '  returns (uint256 birthCut)\n', '  {\n', '    birthCut = arkData[_tokenId].birtherPct;\n', '  }\n', '\n', '  /**\n', '   * @dev Check the birther balance of a certain address.\n', '   * @param _owner The address to check the balance of.\n', '  */\n', '  function checkBalance(address _owner) external view returns (uint256) {\n', '    return birtherBalances[_owner];\n', '  }\n', '\n', '  /**\n', "  * @dev Determines if token exists by checking it's price\n", '  * @param _tokenId uint256 ID of token\n', '  */\n', '  function tokenExists (uint256 _tokenId) public view returns (bool _exists) {\n', '    return arkData[_tokenId].price > 0;\n', '  }\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is not a contract\n', '  * @param _buyer address of person buying animal\n', '  */\n', '  modifier isNotContract(address _buyer) {\n', '    uint size;\n', '    assembly { size := extcodesize(_buyer) }\n', '    require(size == 0);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '  \n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal isNotContract(_to) {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '\n', '    /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    addToken(_to, _tokenId);\n', '    Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    arkData[_tokenId].owner = _to;\n', '    \n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '\n', '  function name() public pure returns (string _name) {\n', '    return "EthersArk Token";\n', '  }\n', '\n', '  function symbol() public pure returns (string _symbol) {\n', '    return "EARK";\n', '  }\n', '\n', '}']
