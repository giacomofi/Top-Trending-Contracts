['pragma solidity ^0.4.18; \n', '\n', '// similar as other games, with two changes:\n', '// A. half of your kebabs expiry date is over when you sell them so they are thrown away\n', '// B. the "free" 150 initial cost 0.001 eth (in line with the mining fee)\n', '\n', '// bots should have a harder time\n', '\n', 'contract EtherKebab{\n', '    uint256 public KEBABER_TO_MAKE_1KEBAB=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_KEBAB=150;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=false;\n', '    address public ceoAddress = 0xdf4703369ecE603a01e049e34e438ff74Cd96D66;\n', '    uint public ceoEtherBalance;\n', '    mapping (address => uint256) public workingKebaber;\n', '    mapping (address => uint256) public claimedKebabs;\n', '    mapping (address => uint256) public lastKebab;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketKebabs;\n', '   \n', '    function makeKebabs(address ref) public\n', '    {\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender)\n', '        {\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 kebabUsed=getMyKebabs();\n', '        uint256 newKebaber=SafeMath.div(kebabUsed,KEBABER_TO_MAKE_1KEBAB);\n', '        workingKebaber[msg.sender]=SafeMath.add(workingKebaber[msg.sender],newKebaber);\n', '        claimedKebabs[msg.sender]=0;\n', '        lastKebab[msg.sender]=now;\n', '        \n', '        //send referral kebab\n', '        claimedKebabs[referrals[msg.sender]]=SafeMath.add(claimedKebabs[referrals[msg.sender]],SafeMath.div(kebabUsed,5));\n', '        \n', '        //boost market to nerf shrimp hoarding\n', '        marketKebabs=SafeMath.add(marketKebabs,SafeMath.div(kebabUsed,10));\n', '    }\n', '\n', '    function sellKebabs() public{\n', '        require(initialized);\n', '        uint256 hasKebabs=getMyKebabs();\n', '        uint256 kebabValue=calculateKebabSell(hasKebabs);\n', '        uint256 fee=calculatePercentage(kebabValue,10);\n', '        // kill one half of the owner&#39;s snails on egg sale\n', '        workingKebaber[msg.sender] = SafeMath.div(workingKebaber[msg.sender],2);\n', '        claimedKebabs[msg.sender]=0;\n', '        lastKebab[msg.sender]=now;\n', '        marketKebabs=SafeMath.add(marketKebabs,hasKebabs);\n', '        ceoEtherBalance+=fee;\n', '        msg.sender.transfer(SafeMath.sub(kebabValue,fee));\n', '    }\n', '\n', '    function buyKebabs() public payable\n', '    {\n', '        require(initialized);\n', '        uint256 kebabBought=calculateKebabBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\n', '        kebabBought=SafeMath.sub(kebabBought,calculatePercentage(kebabBought,10));\n', '        ceoEtherBalance+=calculatePercentage(msg.value, 10);\n', '        claimedKebabs[msg.sender]=SafeMath.add(claimedKebabs[msg.sender],kebabBought);\n', '    }\n', '\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256)\n', '    {\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '\n', '    function calculateKebabSell(uint256 kebab) public view returns(uint256)\n', '    {\n', '        return calculateTrade(kebab,marketKebabs,address(this).balance);\n', '    }\n', '\n', '    function calculateKebabBuy(uint256 eth,uint256 contractBalance) public view returns(uint256)\n', '    {\n', '        return calculateTrade(eth,contractBalance,marketKebabs);\n', '    }\n', '\n', '    function calculateKebabBuySimple(uint256 eth) public view returns(uint256)\n', '    {\n', '        return calculateKebabBuy(eth, address(this).balance);\n', '    }\n', '\n', '    function calculatePercentage(uint256 amount, uint percentage) public pure returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,percentage),100);\n', '    }\n', '\n', '    function seedMarket(uint256 kebab) public payable\n', '    {\n', '        require(marketKebabs==0);\n', '        initialized=true;\n', '        marketKebabs=kebab;\n', '    }\n', '\n', '    function getFreeKebaber() public payable\n', '    {\n', '        require(initialized);\n', '        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n', '        ceoEtherBalance+=msg.value; //ceo gets this entrance fee\n', '        require(workingKebaber[msg.sender]==0);\n', '        lastKebab[msg.sender]=now;\n', '        workingKebaber[msg.sender]=STARTING_KEBAB;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function getMyKebabers() public view returns(uint256)\n', '    {\n', '        return workingKebaber[msg.sender];\n', '    }\n', '\n', '    function withDrawMoney() public { //to prevent fee to get fee\n', '        require(msg.sender == ceoAddress);\n', '        uint256 myBalance = ceoEtherBalance;\n', '        ceoEtherBalance = ceoEtherBalance - myBalance;\n', '        ceoAddress.transfer(myBalance);\n', '    }\n', '\n', '    function getMyKebabs() public view returns(uint256)\n', '    {\n', '        return SafeMath.add(claimedKebabs[msg.sender],getKebabsSincelastKebab(msg.sender));\n', '    }\n', '\n', '    function getKebabsSincelastKebab(address adr) public view returns(uint256)\n', '    {\n', '        uint256 secondsPassed=min(KEBABER_TO_MAKE_1KEBAB,SafeMath.sub(now,lastKebab[adr]));\n', '        return SafeMath.mul(secondsPassed,workingKebaber[adr]);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) \n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    if (a == 0) \n', '    {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; \n', '\n', '// similar as other games, with two changes:\n', '// A. half of your kebabs expiry date is over when you sell them so they are thrown away\n', '// B. the "free" 150 initial cost 0.001 eth (in line with the mining fee)\n', '\n', '// bots should have a harder time\n', '\n', 'contract EtherKebab{\n', '    uint256 public KEBABER_TO_MAKE_1KEBAB=86400;//for final version should be seconds in a day\n', '    uint256 public STARTING_KEBAB=150;\n', '    uint256 PSN=10000;\n', '    uint256 PSNH=5000;\n', '    bool public initialized=false;\n', '    address public ceoAddress = 0xdf4703369ecE603a01e049e34e438ff74Cd96D66;\n', '    uint public ceoEtherBalance;\n', '    mapping (address => uint256) public workingKebaber;\n', '    mapping (address => uint256) public claimedKebabs;\n', '    mapping (address => uint256) public lastKebab;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketKebabs;\n', '   \n', '    function makeKebabs(address ref) public\n', '    {\n', '        require(initialized);\n', '        if(referrals[msg.sender]==0 && referrals[msg.sender]!=msg.sender)\n', '        {\n', '            referrals[msg.sender]=ref;\n', '        }\n', '        uint256 kebabUsed=getMyKebabs();\n', '        uint256 newKebaber=SafeMath.div(kebabUsed,KEBABER_TO_MAKE_1KEBAB);\n', '        workingKebaber[msg.sender]=SafeMath.add(workingKebaber[msg.sender],newKebaber);\n', '        claimedKebabs[msg.sender]=0;\n', '        lastKebab[msg.sender]=now;\n', '        \n', '        //send referral kebab\n', '        claimedKebabs[referrals[msg.sender]]=SafeMath.add(claimedKebabs[referrals[msg.sender]],SafeMath.div(kebabUsed,5));\n', '        \n', '        //boost market to nerf shrimp hoarding\n', '        marketKebabs=SafeMath.add(marketKebabs,SafeMath.div(kebabUsed,10));\n', '    }\n', '\n', '    function sellKebabs() public{\n', '        require(initialized);\n', '        uint256 hasKebabs=getMyKebabs();\n', '        uint256 kebabValue=calculateKebabSell(hasKebabs);\n', '        uint256 fee=calculatePercentage(kebabValue,10);\n', "        // kill one half of the owner's snails on egg sale\n", '        workingKebaber[msg.sender] = SafeMath.div(workingKebaber[msg.sender],2);\n', '        claimedKebabs[msg.sender]=0;\n', '        lastKebab[msg.sender]=now;\n', '        marketKebabs=SafeMath.add(marketKebabs,hasKebabs);\n', '        ceoEtherBalance+=fee;\n', '        msg.sender.transfer(SafeMath.sub(kebabValue,fee));\n', '    }\n', '\n', '    function buyKebabs() public payable\n', '    {\n', '        require(initialized);\n', '        uint256 kebabBought=calculateKebabBuy(msg.value,SafeMath.sub(address(this).balance,msg.value));\n', '        kebabBought=SafeMath.sub(kebabBought,calculatePercentage(kebabBought,10));\n', '        ceoEtherBalance+=calculatePercentage(msg.value, 10);\n', '        claimedKebabs[msg.sender]=SafeMath.add(claimedKebabs[msg.sender],kebabBought);\n', '    }\n', '\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256)\n', '    {\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '\n', '    function calculateKebabSell(uint256 kebab) public view returns(uint256)\n', '    {\n', '        return calculateTrade(kebab,marketKebabs,address(this).balance);\n', '    }\n', '\n', '    function calculateKebabBuy(uint256 eth,uint256 contractBalance) public view returns(uint256)\n', '    {\n', '        return calculateTrade(eth,contractBalance,marketKebabs);\n', '    }\n', '\n', '    function calculateKebabBuySimple(uint256 eth) public view returns(uint256)\n', '    {\n', '        return calculateKebabBuy(eth, address(this).balance);\n', '    }\n', '\n', '    function calculatePercentage(uint256 amount, uint percentage) public pure returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount,percentage),100);\n', '    }\n', '\n', '    function seedMarket(uint256 kebab) public payable\n', '    {\n', '        require(marketKebabs==0);\n', '        initialized=true;\n', '        marketKebabs=kebab;\n', '    }\n', '\n', '    function getFreeKebaber() public payable\n', '    {\n', '        require(initialized);\n', '        require(msg.value==0.001 ether); //similar to mining fee, prevents bots\n', '        ceoEtherBalance+=msg.value; //ceo gets this entrance fee\n', '        require(workingKebaber[msg.sender]==0);\n', '        lastKebab[msg.sender]=now;\n', '        workingKebaber[msg.sender]=STARTING_KEBAB;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256)\n', '    {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function getMyKebabers() public view returns(uint256)\n', '    {\n', '        return workingKebaber[msg.sender];\n', '    }\n', '\n', '    function withDrawMoney() public { //to prevent fee to get fee\n', '        require(msg.sender == ceoAddress);\n', '        uint256 myBalance = ceoEtherBalance;\n', '        ceoEtherBalance = ceoEtherBalance - myBalance;\n', '        ceoAddress.transfer(myBalance);\n', '    }\n', '\n', '    function getMyKebabs() public view returns(uint256)\n', '    {\n', '        return SafeMath.add(claimedKebabs[msg.sender],getKebabsSincelastKebab(msg.sender));\n', '    }\n', '\n', '    function getKebabsSincelastKebab(address adr) public view returns(uint256)\n', '    {\n', '        uint256 secondsPassed=min(KEBABER_TO_MAKE_1KEBAB,SafeMath.sub(now,lastKebab[adr]));\n', '        return SafeMath.mul(secondsPassed,workingKebaber[adr]);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) \n', '    {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) \n', '  {\n', '    if (a == 0) \n', '    {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
