['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract AirDrop {\n', '\n', '    using SafeMath for uint;\n', '\n', '    function () payable public {}\n', '\n', '    /**\n', '     * batch transfer for ERC20 token.(the same amount)\n', '     *\n', '     * @param _contractAddress ERC20 token address\n', '     * @param _addresses array of address to sent\n', '     * @param _value transfer amount\n', '     */\n', '    function batchTransferToken(address _contractAddress, address[] _addresses, uint _value) public {\n', '        // data validate & _addresses length limit\n', '        require(_addresses.length > 0);\n', '\n', '        StandardToken token = StandardToken(_contractAddress);\n', '        // transfer circularly\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            token.transferFrom(msg.sender, _addresses[i], _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * batch transfer for ERC20 token.\n', '     *\n', '     * @param _contractAddress ERC20 token address\n', '     * @param _addresses array of address to sent\n', '     * @param _value array of transfer amount\n', '     */\n', '    function batchTransferTokenS(address _contractAddress, address[] _addresses, uint[] _value) public {\n', '        // data validate & _addresses length limit\n', '        require(_addresses.length > 0);\n', '        require(_addresses.length == _value.length);\n', '\n', '        StandardToken token = StandardToken(_contractAddress);\n', '        // transfer circularly\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            token.transferFrom(msg.sender, _addresses[i], _value[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * batch transfer for ETH.(the same amount)\n', '     *\n', '     * @param _addresses array of address to sent\n', '     */\n', '    function batchTransferETH(address[] _addresses) payable public {\n', '        // data validate & _addresses length limit\n', '        require(_addresses.length > 0);\n', '\n', '        // transfer circularly\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            _addresses[i].transfer(msg.value.div(_addresses.length));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * batch transfer for ETH.\n', '     *\n', '     * @param _addresses array of address to sent\n', '     * @param _value array of transfer amount\n', '     */\n', '    function batchTransferETHS(address[] _addresses, uint[] _value) payable public {\n', '        // data validate & _addresses length limit\n', '        require(_addresses.length > 0);\n', '        require(_addresses.length == _value.length);\n', '\n', '        // transfer circularly\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            _addresses[i].transfer(_value[i]);\n', '        }\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract StandardToken {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '}\n', '\n', 'contract AirDrop {\n', '\n', '    using SafeMath for uint;\n', '\n', '    function () payable public {}\n', '\n', '    /**\n', '     * batch transfer for ERC20 token.(the same amount)\n', '     *\n', '     * @param _contractAddress ERC20 token address\n', '     * @param _addresses array of address to sent\n', '     * @param _value transfer amount\n', '     */\n', '    function batchTransferToken(address _contractAddress, address[] _addresses, uint _value) public {\n', '        // data validate & _addresses length limit\n', '        require(_addresses.length > 0);\n', '\n', '        StandardToken token = StandardToken(_contractAddress);\n', '        // transfer circularly\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            token.transferFrom(msg.sender, _addresses[i], _value);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * batch transfer for ERC20 token.\n', '     *\n', '     * @param _contractAddress ERC20 token address\n', '     * @param _addresses array of address to sent\n', '     * @param _value array of transfer amount\n', '     */\n', '    function batchTransferTokenS(address _contractAddress, address[] _addresses, uint[] _value) public {\n', '        // data validate & _addresses length limit\n', '        require(_addresses.length > 0);\n', '        require(_addresses.length == _value.length);\n', '\n', '        StandardToken token = StandardToken(_contractAddress);\n', '        // transfer circularly\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            token.transferFrom(msg.sender, _addresses[i], _value[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * batch transfer for ETH.(the same amount)\n', '     *\n', '     * @param _addresses array of address to sent\n', '     */\n', '    function batchTransferETH(address[] _addresses) payable public {\n', '        // data validate & _addresses length limit\n', '        require(_addresses.length > 0);\n', '\n', '        // transfer circularly\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            _addresses[i].transfer(msg.value.div(_addresses.length));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * batch transfer for ETH.\n', '     *\n', '     * @param _addresses array of address to sent\n', '     * @param _value array of transfer amount\n', '     */\n', '    function batchTransferETHS(address[] _addresses, uint[] _value) payable public {\n', '        // data validate & _addresses length limit\n', '        require(_addresses.length > 0);\n', '        require(_addresses.length == _value.length);\n', '\n', '        // transfer circularly\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            _addresses[i].transfer(_value[i]);\n', '        }\n', '    }\n', '}']
