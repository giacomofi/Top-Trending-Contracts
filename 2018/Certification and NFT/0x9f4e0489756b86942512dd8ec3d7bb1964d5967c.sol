['pragma solidity ^0.4.20;\n', '\n', 'contract olty_6 {\n', '\n', 'event test_value(uint256 indexed value1);\n', '\n', 'address public owner;\n', '\n', '// variables to store who needs to get what %\n', 'address public charity;\n', 'address public dividend;\n', 'address public maintain;\n', 'address public fuel;\n', 'address public winner;\n', '\n', '// each ticket is 0.002 ether\n', 'uint constant uprice = 0.002 ether;\n', '\n', 'mapping (address => uint) public ownershipDistribute;\n', 'mapping (address => uint) public tickets;\n', '\n', '\n', '// constructor function\n', 'function olty_6() {\n', '    owner = msg.sender;\n', '    \n', '    charity = 0x889cbf08666fa94B2E74Dc6645059A60E25f9079;\n', '    dividend = 0xD942E1F5f0fACD4540896843087E1e937A399828;\n', '    maintain = 0x0e0146235236FC9E3f700991193E189f63eC4c32;\n', '    fuel = 0x7aC1BC1E05Fc374e287Df5537fd03e5ef40b7333;\n', '    winner = 0x6b730f4D92e236D0eC22b2baFf26873F297d7e67;\n', '    \n', '    ownershipDistribute[charity] = 5;\n', '    ownershipDistribute[dividend] =10;\n', '    ownershipDistribute[maintain] = 15;\n', '    ownershipDistribute[fuel] = 5;\n', '    ownershipDistribute[winner] = 65;    \n', '}\n', '\n', '\n', 'function() payable {\n', '    buyTickets(1);\n', '}\n', '\n', 'function buyTickets(uint no_tickets) payable {\n', '    tickets[msg.sender] += no_tickets;\n', '}\n', '\n', 'function distribute(uint winner_select, uint winning_no, address win, uint promo)\n', '     returns(bool success) {\n', '         \n', '    uint bal = this.balance;\n', '    \n', '    if (promo != 1) {\n', '    if (msg.sender == owner) {\n', '    charity.transfer(bal * ownershipDistribute[charity] / 100);\n', '    fuel.transfer(bal * ownershipDistribute[fuel] / 100);    \n', '    dividend.transfer(bal * ownershipDistribute[dividend] / 100);\n', '    maintain.transfer(bal * ownershipDistribute[maintain] / 100);\n', '    if (winner_select == 1) {\n', '        winner.transfer(bal * ownershipDistribute[winner] / 100);\n', '    } else if (winner_select == 2) {\n', '        winner.transfer(bal * ownershipDistribute[winner] / 100);\n', '    } else {\n', '        // do nothing\n', '        test_value(999);\n', '    }\n', '        } else {\n', '    throw;\n', '    } // else statement\n', '    return true;\n', '    }   \n', '    \n', '    if (promo == 1) {\n', '    if (msg.sender == owner) {\n', '    charity.transfer(bal * ownershipDistribute[charity] / 100);\n', '    fuel.transfer(bal * ownershipDistribute[fuel] / 100);    \n', '    dividend.transfer(bal * ownershipDistribute[dividend] / 100);\n', '\n', '    if (winner_select == 1) {\n', '        winner.transfer(bal * 80 / 100);\n', '    } else if (winner_select == 2) {\n', '        winner.transfer(bal * 80 / 100);\n', '    } else {\n', '        // do nothing\n', '        test_value(999);\n', '    }\n', '        } else {\n', '    throw;\n', '    } // else statement\n', '    return true;\n', '    }       \n', '    \n', '}  // function distribute\n', '\n', '}  // contract olty_6']
['pragma solidity ^0.4.20;\n', '\n', 'contract olty_6 {\n', '\n', 'event test_value(uint256 indexed value1);\n', '\n', 'address public owner;\n', '\n', '// variables to store who needs to get what %\n', 'address public charity;\n', 'address public dividend;\n', 'address public maintain;\n', 'address public fuel;\n', 'address public winner;\n', '\n', '// each ticket is 0.002 ether\n', 'uint constant uprice = 0.002 ether;\n', '\n', 'mapping (address => uint) public ownershipDistribute;\n', 'mapping (address => uint) public tickets;\n', '\n', '\n', '// constructor function\n', 'function olty_6() {\n', '    owner = msg.sender;\n', '    \n', '    charity = 0x889cbf08666fa94B2E74Dc6645059A60E25f9079;\n', '    dividend = 0xD942E1F5f0fACD4540896843087E1e937A399828;\n', '    maintain = 0x0e0146235236FC9E3f700991193E189f63eC4c32;\n', '    fuel = 0x7aC1BC1E05Fc374e287Df5537fd03e5ef40b7333;\n', '    winner = 0x6b730f4D92e236D0eC22b2baFf26873F297d7e67;\n', '    \n', '    ownershipDistribute[charity] = 5;\n', '    ownershipDistribute[dividend] =10;\n', '    ownershipDistribute[maintain] = 15;\n', '    ownershipDistribute[fuel] = 5;\n', '    ownershipDistribute[winner] = 65;    \n', '}\n', '\n', '\n', 'function() payable {\n', '    buyTickets(1);\n', '}\n', '\n', 'function buyTickets(uint no_tickets) payable {\n', '    tickets[msg.sender] += no_tickets;\n', '}\n', '\n', 'function distribute(uint winner_select, uint winning_no, address win, uint promo)\n', '     returns(bool success) {\n', '         \n', '    uint bal = this.balance;\n', '    \n', '    if (promo != 1) {\n', '    if (msg.sender == owner) {\n', '    charity.transfer(bal * ownershipDistribute[charity] / 100);\n', '    fuel.transfer(bal * ownershipDistribute[fuel] / 100);    \n', '    dividend.transfer(bal * ownershipDistribute[dividend] / 100);\n', '    maintain.transfer(bal * ownershipDistribute[maintain] / 100);\n', '    if (winner_select == 1) {\n', '        winner.transfer(bal * ownershipDistribute[winner] / 100);\n', '    } else if (winner_select == 2) {\n', '        winner.transfer(bal * ownershipDistribute[winner] / 100);\n', '    } else {\n', '        // do nothing\n', '        test_value(999);\n', '    }\n', '        } else {\n', '    throw;\n', '    } // else statement\n', '    return true;\n', '    }   \n', '    \n', '    if (promo == 1) {\n', '    if (msg.sender == owner) {\n', '    charity.transfer(bal * ownershipDistribute[charity] / 100);\n', '    fuel.transfer(bal * ownershipDistribute[fuel] / 100);    \n', '    dividend.transfer(bal * ownershipDistribute[dividend] / 100);\n', '\n', '    if (winner_select == 1) {\n', '        winner.transfer(bal * 80 / 100);\n', '    } else if (winner_select == 2) {\n', '        winner.transfer(bal * 80 / 100);\n', '    } else {\n', '        // do nothing\n', '        test_value(999);\n', '    }\n', '        } else {\n', '    throw;\n', '    } // else statement\n', '    return true;\n', '    }       \n', '    \n', '}  // function distribute\n', '\n', '}  // contract olty_6']
