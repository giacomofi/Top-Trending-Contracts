['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BuildingStatus is Ownable {\n', '  /* Observer contract  */\n', '  address public observer;\n', '\n', '  /* Crowdsale contract */\n', '  address public crowdsale;\n', '\n', '  enum statusEnum {\n', '      crowdsale,\n', '      refund,\n', '      preparation_works,\n', '      building_permit,\n', '      design_technical_documentation,\n', '      utilities_outsite,\n', '      construction_residential,\n', '      frame20,\n', '      frame40,\n', '      frame60,\n', '      frame80,\n', '      frame100,\n', '      stage1,\n', '      stage2,\n', '      stage3,\n', '      stage4,\n', '      stage5,\n', '      facades20,\n', '      facades40,\n', '      facades60,\n', '      facades80,\n', '      facades100,\n', '      engineering,\n', '      finishing,\n', '      construction_parking,\n', '      civil_works,\n', '      engineering_further,\n', '      commisioning_project,\n', '      completed\n', '  }\n', '\n', '  modifier notCompleted() {\n', '      require(status != statusEnum.completed);\n', '      _;\n', '  }\n', '\n', '  modifier onlyObserver() {\n', '    require(msg.sender == observer || msg.sender == owner || msg.sender == address(this));\n', '    _;\n', '  }\n', '\n', '  modifier onlyCrowdsale() {\n', '    require(msg.sender == crowdsale || msg.sender == owner || msg.sender == address(this));\n', '    _;\n', '  }\n', '\n', '  statusEnum public status;\n', '\n', '  event StatusChanged(statusEnum newStatus);\n', '\n', '  function setStatus(statusEnum newStatus) onlyCrowdsale  public {\n', '      status = newStatus;\n', '      StatusChanged(newStatus);\n', '  }\n', '\n', '  function changeStage(uint8 stage) public onlyObserver {\n', '      if (stage==1) status = statusEnum.stage1;\n', '      if (stage==2) status = statusEnum.stage2;\n', '      if (stage==3) status = statusEnum.stage3;\n', '      if (stage==4) status = statusEnum.stage4;\n', '      if (stage==5) status = statusEnum.stage5;\n', '  }\n', ' \n', '}\n', '\n', '/*\n', ' * Manager that stores permitted addresses \n', ' */\n', 'contract PermissionManager is Ownable {\n', '    mapping (address => bool) permittedAddresses;\n', '\n', '    function addAddress(address newAddress) public onlyOwner {\n', '        permittedAddresses[newAddress] = true;\n', '    }\n', '\n', '    function removeAddress(address remAddress) public onlyOwner {\n', '        permittedAddresses[remAddress] = false;\n', '    }\n', '\n', '    function isPermitted(address pAddress) public view returns(bool) {\n', '        if (permittedAddresses[pAddress]) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract ERC223Interface {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public view returns (uint);\n', '  function allowedAddressesOf(address who) public view returns (bool);\n', '  function getTotalSupply() public view returns (uint);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '  event TransferContract(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '/**\n', ' * @title Building Object contract.\n', ' * @author Vladimir Kovalchuk\n', ' */\n', 'contract Object is BuildingStatus {\n', '\n', '  /* Name of an object */\n', '  string public name;\n', '\n', '  /* Gross building area */\n', '  uint32 public gba;\n', '\n', '  /* Gress sale area */\n', '  uint32 public gla;\n', '\n', '  /* Parking space */\n', '  uint32 public parking;\n', '\n', '  /* Type of the building */\n', '  enum unitEnum {appartment, residential}\n', '\n', '  unitEnum public unit;\n', '\n', '  /* Developer of an object */\n', '  string public developer;\n', '\n', '  /* Leed */\n', '  string public leed;\n', '\n', '  /* Location of an object */\n', '  string public location;\n', '\n', '  /* start date of a project */\n', '  uint public constructionStart;\n', '\n', '  /* end of construction of an object */\n', '  uint public constructionEnd;\n', '  // unt sqm\n', '  uint public untsqm;\n', '\n', '  /* report of completion */\n', '  string public report;\n', '\n', '  event ConstructionDateChanged(uint constructStart, uint constructEnd);\n', '  event PropertyChanged(uint32 gba, uint32 gla, uint32 parking, unitEnum unit, string developer,\n', '    string leed, string location, uint constructionStart, uint constructionEnd);\n', '\n', '  event HoldChanged(address newHold);\n', '  event ObserverChanged(address newObserver);\n', '  event CrowdsaleChanged(address newCrowdsale);\n', '  event TokenChanged(address newCrowdsale);\n', '\n', '  /* ERC223 Unity token */\n', '  ERC223Interface public token;\n', '\n', '  /* Hold contract */\n', '  address public hold;\n', '\n', '  /* Permission manager contract */\n', '  PermissionManager public permissionManager;\n', '\n', '  modifier onlyPermitted() {\n', '    require(permissionManager.isPermitted(msg.sender) || msg.sender == owner || msg.sender == address(this));\n', '    _;\n', '  }\n', '\n', '  event Completed(string report);\n', '\n', '  /* Constructor of an object */\n', '  function Object(string iName, uint32 iGBA, uint32 iGSA, uint32 iParking, unitEnum iUnit,\n', '    string iDeveloper, string iLeed, string iLocation, uint iStartDate, uint iEndDate, uint UNTSQM,\n', '    address iToken, address iCrowdsale, address iObserver, address iHold, address pManager) public {\n', '      name = iName;\n', '      gba = iGBA;\n', '      gla = iGSA;\n', '      parking = iParking;\n', '      unit = iUnit;\n', '      developer = iDeveloper;\n', '      leed = iLeed;\n', '      location = iLocation;\n', '      untsqm = UNTSQM;\n', '      constructionStart = iStartDate;\n', '      constructionEnd = iEndDate;\n', '\n', '      token = ERC223Interface(iToken);\n', '      crowdsale = iCrowdsale;\n', '      observer = iObserver;\n', '      hold = iHold;\n', '      permissionManager = PermissionManager(pManager);\n', '  }\n', '\n', '  function setPermissionManager(address _permadr) public onlyOwner {\n', '    require(_permadr != 0x0);\n', '    permissionManager = PermissionManager(_permadr);\n', '  }\n', '\n', '  /*\n', '   * Public setters area\n', '   */\n', '  function setGBA(uint32 newGBA) public onlyPermitted notCompleted {\n', '    gba = newGBA;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setGLA(uint32 newGLA) public onlyPermitted notCompleted {\n', '    gla = newGLA;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setParking(uint32 newParking) public onlyPermitted notCompleted {\n', '    parking = newParking;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setUnit(unitEnum newUnit) public onlyPermitted notCompleted {\n', '    unit = newUnit;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setDeveloper(string newDeveloper) public onlyPermitted notCompleted {\n', '    developer = newDeveloper;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setLeed(string newLeed) public onlyPermitted notCompleted {\n', '    leed = newLeed;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setLocation(string newLocation) public onlyPermitted notCompleted {\n', '    location = newLocation;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setStartDate(uint newStartDate) public onlyPermitted notCompleted {\n', '    constructionStart = newStartDate;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setEndDate(uint newEndDate) public onlyPermitted notCompleted {\n', '    constructionEnd = newEndDate;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '\n', '  function setName(string _name) public onlyPermitted notCompleted {\n', '    name = _name;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '  \n', '  function setUntsqm(uint _untsqm) public onlyPermitted notCompleted {\n', '    untsqm = _untsqm;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setObserver(address _observer) public onlyOwner {\n', '    require(_observer != 0x0);\n', '    observer = _observer;\n', '    ObserverChanged(_observer);\n', '  }\n', '\n', '  function setToken(address _token) public onlyOwner {\n', '    require(_token != 0x0);\n', '    token = ERC223Interface(_token);\n', '    TokenChanged(_token);\n', '  }\n', '\n', '  function setHold(address _hold) public onlyOwner {\n', '    require(_hold != 0x0);\n', '    hold = _hold;\n', '    HoldChanged(_hold);\n', '  }\n', '\n', '  function setCrowdsale(address _crowdsale) public onlyOwner {\n', '    require(_crowdsale != 0x0);\n', '    crowdsale = _crowdsale;\n', '    CrowdsaleChanged(_crowdsale);\n', '  }\n', '\n', '  function getTotalSupply() public view returns (uint) {\n', '    return token.getTotalSupply();\n', '  }\n', '\n', '  function getUNTSQM() public view returns (uint) {\n', '    return untsqm;\n', '  }\n', '\n', '  function setProperty(string property, string typeArg, uint intVal, string strVal) public onlyObserver {\n', '    string memory set = "set";\n', '    string memory s = "(";\n', '    string memory s2 = ")";\n', '    bytes memory _ba = bytes(set);\n', '    bytes memory _bb = bytes(property);\n', '    bytes memory _t = bytes(typeArg);\n', '    bytes memory _s = bytes(s);\n', '    bytes memory _s2 = bytes(s2);\n', '    string memory ab = new string(_ba.length + _bb.length + 1 + _t.length + 1);\n', '    bytes memory babcde = bytes(ab);\n', '    uint k = 0;\n', '\n', '    for (uint i = 0; i < _ba.length; i++) {\n', '      babcde[k++] = _ba[i];\n', '    }\n', '    for (i = 0; i < _bb.length; i++) {\n', '      babcde[k++] = _bb[i];\n', '    }\n', '    babcde[k++] = _s[0];\n', '\n', '    for (i = 0; i < _t.length; i++) {\n', '      babcde[k++] = _t[i];\n', '    }\n', '\n', '    babcde[k++] = _s2[0];\n', '    if (intVal == 0) {\n', '      assert(this.call(bytes4(keccak256(string(babcde))), strVal));\n', '    } else {\n', '      assert(this.call(bytes4(keccak256(string(babcde))), intVal));\n', '    }\n', '  }\n', '\n', '  function completeStatus(string newReport) public onlyOwner notCompleted {\n', '    status = statusEnum.completed;\n', '    report = newReport;\n', '    Completed(report);\n', '  }\n', '\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract BuildingStatus is Ownable {\n', '  /* Observer contract  */\n', '  address public observer;\n', '\n', '  /* Crowdsale contract */\n', '  address public crowdsale;\n', '\n', '  enum statusEnum {\n', '      crowdsale,\n', '      refund,\n', '      preparation_works,\n', '      building_permit,\n', '      design_technical_documentation,\n', '      utilities_outsite,\n', '      construction_residential,\n', '      frame20,\n', '      frame40,\n', '      frame60,\n', '      frame80,\n', '      frame100,\n', '      stage1,\n', '      stage2,\n', '      stage3,\n', '      stage4,\n', '      stage5,\n', '      facades20,\n', '      facades40,\n', '      facades60,\n', '      facades80,\n', '      facades100,\n', '      engineering,\n', '      finishing,\n', '      construction_parking,\n', '      civil_works,\n', '      engineering_further,\n', '      commisioning_project,\n', '      completed\n', '  }\n', '\n', '  modifier notCompleted() {\n', '      require(status != statusEnum.completed);\n', '      _;\n', '  }\n', '\n', '  modifier onlyObserver() {\n', '    require(msg.sender == observer || msg.sender == owner || msg.sender == address(this));\n', '    _;\n', '  }\n', '\n', '  modifier onlyCrowdsale() {\n', '    require(msg.sender == crowdsale || msg.sender == owner || msg.sender == address(this));\n', '    _;\n', '  }\n', '\n', '  statusEnum public status;\n', '\n', '  event StatusChanged(statusEnum newStatus);\n', '\n', '  function setStatus(statusEnum newStatus) onlyCrowdsale  public {\n', '      status = newStatus;\n', '      StatusChanged(newStatus);\n', '  }\n', '\n', '  function changeStage(uint8 stage) public onlyObserver {\n', '      if (stage==1) status = statusEnum.stage1;\n', '      if (stage==2) status = statusEnum.stage2;\n', '      if (stage==3) status = statusEnum.stage3;\n', '      if (stage==4) status = statusEnum.stage4;\n', '      if (stage==5) status = statusEnum.stage5;\n', '  }\n', ' \n', '}\n', '\n', '/*\n', ' * Manager that stores permitted addresses \n', ' */\n', 'contract PermissionManager is Ownable {\n', '    mapping (address => bool) permittedAddresses;\n', '\n', '    function addAddress(address newAddress) public onlyOwner {\n', '        permittedAddresses[newAddress] = true;\n', '    }\n', '\n', '    function removeAddress(address remAddress) public onlyOwner {\n', '        permittedAddresses[remAddress] = false;\n', '    }\n', '\n', '    function isPermitted(address pAddress) public view returns(bool) {\n', '        if (permittedAddresses[pAddress]) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}\n', '\n', 'contract ERC223Interface {\n', '  uint public totalSupply;\n', '  function balanceOf(address who) public view returns (uint);\n', '  function allowedAddressesOf(address who) public view returns (bool);\n', '  function getTotalSupply() public view returns (uint);\n', '\n', '  function transfer(address to, uint value) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) public returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '  event TransferContract(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '/**\n', ' * @title Building Object contract.\n', ' * @author Vladimir Kovalchuk\n', ' */\n', 'contract Object is BuildingStatus {\n', '\n', '  /* Name of an object */\n', '  string public name;\n', '\n', '  /* Gross building area */\n', '  uint32 public gba;\n', '\n', '  /* Gress sale area */\n', '  uint32 public gla;\n', '\n', '  /* Parking space */\n', '  uint32 public parking;\n', '\n', '  /* Type of the building */\n', '  enum unitEnum {appartment, residential}\n', '\n', '  unitEnum public unit;\n', '\n', '  /* Developer of an object */\n', '  string public developer;\n', '\n', '  /* Leed */\n', '  string public leed;\n', '\n', '  /* Location of an object */\n', '  string public location;\n', '\n', '  /* start date of a project */\n', '  uint public constructionStart;\n', '\n', '  /* end of construction of an object */\n', '  uint public constructionEnd;\n', '  // unt sqm\n', '  uint public untsqm;\n', '\n', '  /* report of completion */\n', '  string public report;\n', '\n', '  event ConstructionDateChanged(uint constructStart, uint constructEnd);\n', '  event PropertyChanged(uint32 gba, uint32 gla, uint32 parking, unitEnum unit, string developer,\n', '    string leed, string location, uint constructionStart, uint constructionEnd);\n', '\n', '  event HoldChanged(address newHold);\n', '  event ObserverChanged(address newObserver);\n', '  event CrowdsaleChanged(address newCrowdsale);\n', '  event TokenChanged(address newCrowdsale);\n', '\n', '  /* ERC223 Unity token */\n', '  ERC223Interface public token;\n', '\n', '  /* Hold contract */\n', '  address public hold;\n', '\n', '  /* Permission manager contract */\n', '  PermissionManager public permissionManager;\n', '\n', '  modifier onlyPermitted() {\n', '    require(permissionManager.isPermitted(msg.sender) || msg.sender == owner || msg.sender == address(this));\n', '    _;\n', '  }\n', '\n', '  event Completed(string report);\n', '\n', '  /* Constructor of an object */\n', '  function Object(string iName, uint32 iGBA, uint32 iGSA, uint32 iParking, unitEnum iUnit,\n', '    string iDeveloper, string iLeed, string iLocation, uint iStartDate, uint iEndDate, uint UNTSQM,\n', '    address iToken, address iCrowdsale, address iObserver, address iHold, address pManager) public {\n', '      name = iName;\n', '      gba = iGBA;\n', '      gla = iGSA;\n', '      parking = iParking;\n', '      unit = iUnit;\n', '      developer = iDeveloper;\n', '      leed = iLeed;\n', '      location = iLocation;\n', '      untsqm = UNTSQM;\n', '      constructionStart = iStartDate;\n', '      constructionEnd = iEndDate;\n', '\n', '      token = ERC223Interface(iToken);\n', '      crowdsale = iCrowdsale;\n', '      observer = iObserver;\n', '      hold = iHold;\n', '      permissionManager = PermissionManager(pManager);\n', '  }\n', '\n', '  function setPermissionManager(address _permadr) public onlyOwner {\n', '    require(_permadr != 0x0);\n', '    permissionManager = PermissionManager(_permadr);\n', '  }\n', '\n', '  /*\n', '   * Public setters area\n', '   */\n', '  function setGBA(uint32 newGBA) public onlyPermitted notCompleted {\n', '    gba = newGBA;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setGLA(uint32 newGLA) public onlyPermitted notCompleted {\n', '    gla = newGLA;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setParking(uint32 newParking) public onlyPermitted notCompleted {\n', '    parking = newParking;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setUnit(unitEnum newUnit) public onlyPermitted notCompleted {\n', '    unit = newUnit;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setDeveloper(string newDeveloper) public onlyPermitted notCompleted {\n', '    developer = newDeveloper;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setLeed(string newLeed) public onlyPermitted notCompleted {\n', '    leed = newLeed;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setLocation(string newLocation) public onlyPermitted notCompleted {\n', '    location = newLocation;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setStartDate(uint newStartDate) public onlyPermitted notCompleted {\n', '    constructionStart = newStartDate;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setEndDate(uint newEndDate) public onlyPermitted notCompleted {\n', '    constructionEnd = newEndDate;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '\n', '  function setName(string _name) public onlyPermitted notCompleted {\n', '    name = _name;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '  \n', '  function setUntsqm(uint _untsqm) public onlyPermitted notCompleted {\n', '    untsqm = _untsqm;\n', '    PropertyChanged(gba, gla, parking, unit, developer, leed, location, constructionStart, constructionEnd);\n', '  }\n', '\n', '  function setObserver(address _observer) public onlyOwner {\n', '    require(_observer != 0x0);\n', '    observer = _observer;\n', '    ObserverChanged(_observer);\n', '  }\n', '\n', '  function setToken(address _token) public onlyOwner {\n', '    require(_token != 0x0);\n', '    token = ERC223Interface(_token);\n', '    TokenChanged(_token);\n', '  }\n', '\n', '  function setHold(address _hold) public onlyOwner {\n', '    require(_hold != 0x0);\n', '    hold = _hold;\n', '    HoldChanged(_hold);\n', '  }\n', '\n', '  function setCrowdsale(address _crowdsale) public onlyOwner {\n', '    require(_crowdsale != 0x0);\n', '    crowdsale = _crowdsale;\n', '    CrowdsaleChanged(_crowdsale);\n', '  }\n', '\n', '  function getTotalSupply() public view returns (uint) {\n', '    return token.getTotalSupply();\n', '  }\n', '\n', '  function getUNTSQM() public view returns (uint) {\n', '    return untsqm;\n', '  }\n', '\n', '  function setProperty(string property, string typeArg, uint intVal, string strVal) public onlyObserver {\n', '    string memory set = "set";\n', '    string memory s = "(";\n', '    string memory s2 = ")";\n', '    bytes memory _ba = bytes(set);\n', '    bytes memory _bb = bytes(property);\n', '    bytes memory _t = bytes(typeArg);\n', '    bytes memory _s = bytes(s);\n', '    bytes memory _s2 = bytes(s2);\n', '    string memory ab = new string(_ba.length + _bb.length + 1 + _t.length + 1);\n', '    bytes memory babcde = bytes(ab);\n', '    uint k = 0;\n', '\n', '    for (uint i = 0; i < _ba.length; i++) {\n', '      babcde[k++] = _ba[i];\n', '    }\n', '    for (i = 0; i < _bb.length; i++) {\n', '      babcde[k++] = _bb[i];\n', '    }\n', '    babcde[k++] = _s[0];\n', '\n', '    for (i = 0; i < _t.length; i++) {\n', '      babcde[k++] = _t[i];\n', '    }\n', '\n', '    babcde[k++] = _s2[0];\n', '    if (intVal == 0) {\n', '      assert(this.call(bytes4(keccak256(string(babcde))), strVal));\n', '    } else {\n', '      assert(this.call(bytes4(keccak256(string(babcde))), intVal));\n', '    }\n', '  }\n', '\n', '  function completeStatus(string newReport) public onlyOwner notCompleted {\n', '    status = statusEnum.completed;\n', '    report = newReport;\n', '    Completed(report);\n', '  }\n', '\n', '\n', '}']
