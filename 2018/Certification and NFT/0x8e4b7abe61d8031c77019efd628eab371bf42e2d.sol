['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(_owner);\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract GAMA1Token is Ownable, ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name     = "Gamayun round 1 token";\n', '  string public constant symbol   = "GAMA1";\n', '  uint8  public constant decimals = 18;\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  mapping(address => uint256) public balances;\n', '  address[] public holders;\n', '\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  /**\n', '  * @dev Function to mint tokens\n', '  * @param _to The address that will receive the minted tokens.\n', '  * @param _amount The amount of tokens to mint.\n', '  * @return A boolean that indicates if the operation was successful.\n', '  */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    if (balances[_to] == 0) { \n', '      holders.push(_to);\n', '    }\n', '    balances[_to] = balances[_to].add(_amount);\n', '\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Function to stop minting new tokens.\n', '  * @return True if the operation was successful.\n', '  */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Current token is not transferred.\n', '  * After start official token sale GAMA, you can exchange your tokens\n', '  */\n', '  function transfer(address, uint256) public returns (bool) {\n', '    revert();\n', '    return false;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale GAMA token\n', ' */\n', '\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256   public constant rate = 10000;                  // How many token units a buyer gets per wei\n', '  uint256   public constant cap = 350000000 ether;          // Maximum amount of funds\n', '\n', '  bool      public isFinalized = false;\n', '\n', '  uint256   public endTime = 1543622399;                   // End timestamps where investments are allowed\n', '                                                           // Thu Nov 15 23:59:59 2018\n', '\n', '  GAMA1Token     public token;                              // GAMA1 token itself\n', '  address       public wallet;                              // Wallet of funds\n', '  uint256       public weiRaised;                           // Amount of raised money in wei\n', '\n', '  uint256   public firstBonus = 10;\n', '  uint256   public secondBonus = 20;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  event Finalized();\n', '\n', '  function Crowdsale (GAMA1Token _GAMA1, address _wallet) public {\n', '    assert(address(_GAMA1) != address(0));\n', '    assert(_wallet != address(0));\n', '    assert(endTime > now);\n', '    assert(rate > 0);\n', '    assert(cap > 0);\n', '\n', '    token = _GAMA1;\n', '\n', '    wallet = _wallet;\n', '  }\n', '\n', '  function () public payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '    uint256 tokens = tokensForWei(weiAmount);\n', '    \n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  function getBonus(uint256 _tokens, uint256 _weiAmount) public view returns (uint256) {\n', '    if (_weiAmount >= 2 ether) {\n', '      return _tokens.mul(secondBonus).div(100);\n', '    }\n', '    return _tokens.mul(firstBonus).div(100);\n', '  }\n', '\n', '  function setFirstBonus(uint256 _newBonus) onlyOwner public {\n', '    firstBonus = _newBonus;\n', '  }\n', '\n', '  function setSecondBonus(uint256 _newBonus) onlyOwner public {\n', '    secondBonus = _newBonus;\n', '  }\n', '\n', '  function changeEndTime(uint256 _endTime) onlyOwner public {\n', '    require(_endTime >= now);\n', '    endTime = _endTime;\n', '  }\n', '  \n', '  /**\n', '   * @dev Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool tokenMintingFinished = token.mintingFinished();\n', '    bool withinCap = token.totalSupply().add(tokensForWei(msg.value)) <= cap;\n', '    bool withinPeriod = now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool moreThanMinimumPayment = msg.value >= 0.01 ether;\n', '\n', '    return !tokenMintingFinished && withinCap && withinPeriod && nonZeroPurchase && moreThanMinimumPayment;\n', '  }\n', '\n', '  function tokensForWei(uint weiAmount) public view returns (uint tokens) {\n', '    tokens = weiAmount.mul(rate);\n', '    tokens = tokens.add(getBonus(tokens, weiAmount));\n', '  }\n', '\n', '  function finalization() internal {\n', '    token.finishMinting();\n', '    endTime = now;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '}']