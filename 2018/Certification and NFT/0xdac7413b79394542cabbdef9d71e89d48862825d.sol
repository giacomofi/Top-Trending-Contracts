['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/Dividends.sol\n', '\n', 'contract DividendContract {\n', '  using SafeMath for uint256;\n', '  event Dividends(uint256 round, uint256 value);\n', '  event ClaimDividends(address investor, uint256 value);\n', '\n', '  uint256 totalDividendsAmount = 0;\n', '  uint256 totalDividendsRounds = 0;\n', '  uint256 totalUnPayedDividendsAmount = 0;\n', '  mapping(address => uint256) payedDividends;\n', '\n', '\n', '  function getTotalDividendsAmount() public constant returns (uint256) {\n', '    return totalDividendsAmount;\n', '  }\n', '\n', '  function getTotalDividendsRounds() public constant returns (uint256) {\n', '    return totalDividendsRounds;\n', '  }\n', '\n', '  function getTotalUnPayedDividendsAmount() public constant returns (uint256) {\n', '    return totalUnPayedDividendsAmount;\n', '  }\n', '\n', '  function dividendsAmount(address investor) public constant returns (uint256);\n', '  function claimDividends() payable public;\n', '\n', '  function payDividends() payable public {\n', '    require(msg.value > 0);\n', '    totalDividendsAmount = totalDividendsAmount.add(msg.value);\n', '    totalUnPayedDividendsAmount = totalUnPayedDividendsAmount.add(msg.value);\n', '    totalDividendsRounds += 1;\n', '    Dividends(totalDividendsRounds, msg.value);\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/ESlotsICOToken.sol\n', '\n', 'contract ESlotsICOToken is ERC20, DividendContract {\n', '\n', '    string public constant name = "Ethereum Slot Machine Token";\n', '    string public constant symbol = "EST";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function maxTokensToSale() public view returns (uint256);\n', '    function availableTokens() public view returns (uint256);\n', '    function completeICO() public;\n', '    function connectCrowdsaleContract(address crowdsaleContract) public;\n', '}\n', '\n', '// File: contracts/ESlotsICOTokenDeployed.sol\n', '\n', 'contract ESlotsICOTokenDeployed {\n', '\n', '    // address of token contract (for dividend payments)\n', '    address internal tokenContractAddress;\n', '    ESlotsICOToken icoContract;\n', '\n', '    function ESlotsICOTokenDeployed(address tokenContract) public {\n', '        require(tokenContract != address(0));\n', '        tokenContractAddress = tokenContract;\n', '        icoContract = ESlotsICOToken(tokenContractAddress);\n', '    }\n', '}\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ESlotsCrowdsale.sol\n', '\n', 'contract ESlotsCrowdsale is Ownable, ESlotsICOTokenDeployed {\n', '    using SafeMath for uint256;\n', '\n', '    enum State { PrivatePreSale, PreSale, ActiveICO, ICOComplete }\n', '    State public state;\n', '\n', '    // start and end timestamps for dates when investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address for funds collecting\n', '    address public wallet = 0x7b97B31E12f7d029769c53cB91c83d29611A4F7A;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate = 1000; //base price: 1 EST token costs 0.001 Ether\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    mapping (address => uint256) public privateInvestors;\n', '\n', '    /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function ESlotsCrowdsale(address tokenContract) public\n', '    ESlotsICOTokenDeployed(tokenContract)\n', '    {\n', '        state = State.PrivatePreSale;\n', '        startTime = 0;\n', '        endTime = 0;\n', '        weiRaised = 0;\n', '        //do not forget to call\n', '        //icoContract.connectCrowdsaleContract(this);\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '\n', '\n', '        uint256 weiAmount = msg.value;\n', '        // calculate amount of tokens to be created\n', '        uint256 tokens = getTokenAmount(weiAmount);\n', '        uint256 av_tokens = icoContract.availableTokens();\n', '        require(av_tokens >= tokens);\n', '        if(state == State.PrivatePreSale) {\n', '            require(privateInvestors[beneficiary] > 0);\n', '            //restrict sales in private period\n', '            if(privateInvestors[beneficiary] < tokens) {\n', '                tokens = privateInvestors[beneficiary];\n', '            }\n', '        }\n', '            // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        //we can get only 75% to development, 25% will be unlocked after 2 months to fill out casino contract bankroll\n', '        wallet.transfer(percents(weiAmount, 75));\n', '        icoContract.transferFrom(owner, beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    }\n', '\n', '    function addPrivateInvestor(address beneficiary, uint256 value) public onlyOwner {\n', '        require(state == State.PrivatePreSale);\n', '        privateInvestors[beneficiary] = privateInvestors[beneficiary].add(value);\n', '    }\n', '\n', '    function startPreSale() public onlyOwner {\n', '        require(state == State.PrivatePreSale);\n', '        state = State.PreSale;\n', '    }\n', '\n', '    function startICO() public onlyOwner {\n', '        require(state == State.PreSale);\n', '        state = State.ActiveICO;\n', '        startTime = now;\n', '        endTime = startTime + 7 weeks;\n', '    }\n', '\n', '    function stopICO() public onlyOwner {\n', '        require(state == State.ActiveICO);\n', '        require(icoContract.availableTokens() == 0 || (endTime > 0 && now >= endTime));\n', '        require(weiRaised > 0);\n', '        state = State.ICOComplete;\n', '        endTime = now;\n', '    }\n', '\n', '    // Allow getting slots bankroll after 60 days only\n', '    function cleanup() public onlyOwner {\n', '        require(state == State.ICOComplete);\n', '        require(now >= (endTime + 60 days));\n', '        wallet.transfer(this.balance);\n', '    }\n', '\n', '    // @return true if crowdsale ended\n', '    function hasEnded() public view returns (bool) {\n', '        return state == State.ICOComplete || icoContract.availableTokens() == 0 || (endTime > 0 && now >= endTime);\n', '    }\n', '\n', '    // Calculate amount of tokens depending on crowdsale phase and time\n', '    function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\n', '        uint256 totalTokens = weiAmount.mul(rate);\n', '        uint256 bonus = getLargeAmountBonus(weiAmount);\n', '        if(state == State.PrivatePreSale ||  state == State.PreSale) {\n', '            //PreSale has 50% bonus!\n', '            bonus = bonus.add(50);\n', '        } else if(state == State.ActiveICO) {\n', '            if((now - startTime) < 1 weeks) {\n', '                //30% first week\n', '                bonus = bonus.add(30);\n', '            } else if((now - startTime) < 3 weeks) {\n', '                //15% second and third weeks\n', '                bonus = bonus.add(15);\n', '            }\n', '        }\n', '        return addPercents(totalTokens, bonus);\n', '    }\n', '\n', '    function addPercents(uint256 amount, uint256 percent) internal pure returns(uint256) {\n', '        if(percent == 0) return amount;\n', '        return amount.add(percents(amount, percent));\n', '    }\n', '\n', '    function percents(uint256 amount, uint256 percent) internal pure returns(uint256) {\n', '        if(percent == 0) return 0;\n', '        return amount.mul(percent).div(100);\n', '    }\n', '\n', '    function getLargeAmountBonus(uint256 weiAmount) internal pure returns(uint256) {\n', '        if(weiAmount >= 1000 ether) {\n', '            return 50;\n', '        }\n', '        if(weiAmount >= 500 ether) {\n', '            return 30;\n', '        }\n', '        if(weiAmount >= 100 ether) {\n', '            return 15;\n', '        }\n', '        if(weiAmount >= 50 ether) {\n', '            return 10;\n', '        }\n', '        if(weiAmount >= 10 ether) {\n', '            return 5;\n', '        }\n', '       return 0;\n', '    }\n', '\n', '    // return true if the transaction is suitable for buying tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return hasEnded() == false && nonZeroPurchase;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/Dividends.sol\n', '\n', 'contract DividendContract {\n', '  using SafeMath for uint256;\n', '  event Dividends(uint256 round, uint256 value);\n', '  event ClaimDividends(address investor, uint256 value);\n', '\n', '  uint256 totalDividendsAmount = 0;\n', '  uint256 totalDividendsRounds = 0;\n', '  uint256 totalUnPayedDividendsAmount = 0;\n', '  mapping(address => uint256) payedDividends;\n', '\n', '\n', '  function getTotalDividendsAmount() public constant returns (uint256) {\n', '    return totalDividendsAmount;\n', '  }\n', '\n', '  function getTotalDividendsRounds() public constant returns (uint256) {\n', '    return totalDividendsRounds;\n', '  }\n', '\n', '  function getTotalUnPayedDividendsAmount() public constant returns (uint256) {\n', '    return totalUnPayedDividendsAmount;\n', '  }\n', '\n', '  function dividendsAmount(address investor) public constant returns (uint256);\n', '  function claimDividends() payable public;\n', '\n', '  function payDividends() payable public {\n', '    require(msg.value > 0);\n', '    totalDividendsAmount = totalDividendsAmount.add(msg.value);\n', '    totalUnPayedDividendsAmount = totalUnPayedDividendsAmount.add(msg.value);\n', '    totalDividendsRounds += 1;\n', '    Dividends(totalDividendsRounds, msg.value);\n', '  }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/ESlotsICOToken.sol\n', '\n', 'contract ESlotsICOToken is ERC20, DividendContract {\n', '\n', '    string public constant name = "Ethereum Slot Machine Token";\n', '    string public constant symbol = "EST";\n', '    uint8 public constant decimals = 18;\n', '\n', '    function maxTokensToSale() public view returns (uint256);\n', '    function availableTokens() public view returns (uint256);\n', '    function completeICO() public;\n', '    function connectCrowdsaleContract(address crowdsaleContract) public;\n', '}\n', '\n', '// File: contracts/ESlotsICOTokenDeployed.sol\n', '\n', 'contract ESlotsICOTokenDeployed {\n', '\n', '    // address of token contract (for dividend payments)\n', '    address internal tokenContractAddress;\n', '    ESlotsICOToken icoContract;\n', '\n', '    function ESlotsICOTokenDeployed(address tokenContract) public {\n', '        require(tokenContract != address(0));\n', '        tokenContractAddress = tokenContract;\n', '        icoContract = ESlotsICOToken(tokenContractAddress);\n', '    }\n', '}\n', '\n', '// File: contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ESlotsCrowdsale.sol\n', '\n', 'contract ESlotsCrowdsale is Ownable, ESlotsICOTokenDeployed {\n', '    using SafeMath for uint256;\n', '\n', '    enum State { PrivatePreSale, PreSale, ActiveICO, ICOComplete }\n', '    State public state;\n', '\n', '    // start and end timestamps for dates when investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address for funds collecting\n', '    address public wallet = 0x7b97B31E12f7d029769c53cB91c83d29611A4F7A;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate = 1000; //base price: 1 EST token costs 0.001 Ether\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    mapping (address => uint256) public privateInvestors;\n', '\n', '    /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    function ESlotsCrowdsale(address tokenContract) public\n', '    ESlotsICOTokenDeployed(tokenContract)\n', '    {\n', '        state = State.PrivatePreSale;\n', '        startTime = 0;\n', '        endTime = 0;\n', '        weiRaised = 0;\n', '        //do not forget to call\n', '        //icoContract.connectCrowdsaleContract(this);\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '\n', '\n', '        uint256 weiAmount = msg.value;\n', '        // calculate amount of tokens to be created\n', '        uint256 tokens = getTokenAmount(weiAmount);\n', '        uint256 av_tokens = icoContract.availableTokens();\n', '        require(av_tokens >= tokens);\n', '        if(state == State.PrivatePreSale) {\n', '            require(privateInvestors[beneficiary] > 0);\n', '            //restrict sales in private period\n', '            if(privateInvestors[beneficiary] < tokens) {\n', '                tokens = privateInvestors[beneficiary];\n', '            }\n', '        }\n', '            // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        //we can get only 75% to development, 25% will be unlocked after 2 months to fill out casino contract bankroll\n', '        wallet.transfer(percents(weiAmount, 75));\n', '        icoContract.transferFrom(owner, beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    }\n', '\n', '    function addPrivateInvestor(address beneficiary, uint256 value) public onlyOwner {\n', '        require(state == State.PrivatePreSale);\n', '        privateInvestors[beneficiary] = privateInvestors[beneficiary].add(value);\n', '    }\n', '\n', '    function startPreSale() public onlyOwner {\n', '        require(state == State.PrivatePreSale);\n', '        state = State.PreSale;\n', '    }\n', '\n', '    function startICO() public onlyOwner {\n', '        require(state == State.PreSale);\n', '        state = State.ActiveICO;\n', '        startTime = now;\n', '        endTime = startTime + 7 weeks;\n', '    }\n', '\n', '    function stopICO() public onlyOwner {\n', '        require(state == State.ActiveICO);\n', '        require(icoContract.availableTokens() == 0 || (endTime > 0 && now >= endTime));\n', '        require(weiRaised > 0);\n', '        state = State.ICOComplete;\n', '        endTime = now;\n', '    }\n', '\n', '    // Allow getting slots bankroll after 60 days only\n', '    function cleanup() public onlyOwner {\n', '        require(state == State.ICOComplete);\n', '        require(now >= (endTime + 60 days));\n', '        wallet.transfer(this.balance);\n', '    }\n', '\n', '    // @return true if crowdsale ended\n', '    function hasEnded() public view returns (bool) {\n', '        return state == State.ICOComplete || icoContract.availableTokens() == 0 || (endTime > 0 && now >= endTime);\n', '    }\n', '\n', '    // Calculate amount of tokens depending on crowdsale phase and time\n', '    function getTokenAmount(uint256 weiAmount) public view returns(uint256) {\n', '        uint256 totalTokens = weiAmount.mul(rate);\n', '        uint256 bonus = getLargeAmountBonus(weiAmount);\n', '        if(state == State.PrivatePreSale ||  state == State.PreSale) {\n', '            //PreSale has 50% bonus!\n', '            bonus = bonus.add(50);\n', '        } else if(state == State.ActiveICO) {\n', '            if((now - startTime) < 1 weeks) {\n', '                //30% first week\n', '                bonus = bonus.add(30);\n', '            } else if((now - startTime) < 3 weeks) {\n', '                //15% second and third weeks\n', '                bonus = bonus.add(15);\n', '            }\n', '        }\n', '        return addPercents(totalTokens, bonus);\n', '    }\n', '\n', '    function addPercents(uint256 amount, uint256 percent) internal pure returns(uint256) {\n', '        if(percent == 0) return amount;\n', '        return amount.add(percents(amount, percent));\n', '    }\n', '\n', '    function percents(uint256 amount, uint256 percent) internal pure returns(uint256) {\n', '        if(percent == 0) return 0;\n', '        return amount.mul(percent).div(100);\n', '    }\n', '\n', '    function getLargeAmountBonus(uint256 weiAmount) internal pure returns(uint256) {\n', '        if(weiAmount >= 1000 ether) {\n', '            return 50;\n', '        }\n', '        if(weiAmount >= 500 ether) {\n', '            return 30;\n', '        }\n', '        if(weiAmount >= 100 ether) {\n', '            return 15;\n', '        }\n', '        if(weiAmount >= 50 ether) {\n', '            return 10;\n', '        }\n', '        if(weiAmount >= 10 ether) {\n', '            return 5;\n', '        }\n', '       return 0;\n', '    }\n', '\n', '    // return true if the transaction is suitable for buying tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        return hasEnded() == false && nonZeroPurchase;\n', '    }\n', '\n', '}']
