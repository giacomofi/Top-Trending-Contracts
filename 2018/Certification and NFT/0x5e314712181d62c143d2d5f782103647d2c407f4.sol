['pragma solidity ^0.4.24;\n', '\n', 'interface itoken {\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) external returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', 'contract FlyDropToken is Claimable {\n', '    using SafeMath for uint256;\n', '\n', '    ERC20 internal erc20tk;\n', '    bytes[] internal approveRecords;\n', '\n', '    event ReceiveApproval(address _from, uint256 _value, address _token, bytes _extraData);\n', '\n', '    /**\n', '     * @dev receive approval from an ERC20 token contract, take a record\n', '     *\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _value uint256 the amounts of tokens to be sent\n', '     * @param _token address the ERC20 token address\n', '     * @param _extraData bytes the extra data for the record\n', '     */\n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public {\n', '        erc20tk = ERC20(_token);\n', '        require(erc20tk.transferFrom(_from, this, _value)); // transfer tokens to this contract\n', '        approveRecords.push(_extraData);\n', '        emit ReceiveApproval(_from, _value, _token, _extraData);\n', '    }\n', '\n', '    /**\n', '     * @dev Send tokens to other multi addresses in one function\n', '     *\n', '     * @param _destAddrs address The addresses which you want to send tokens to\n', '     * @param _values uint256 the amounts of tokens to be sent\n', '     */\n', '    function multiSend(address[] _destAddrs, uint256[] _values) onlyOwner public returns (uint256) {\n', '        require(_destAddrs.length == _values.length);\n', '\n', '        uint256 i = 0;\n', '        for (; i < _destAddrs.length; i = i.add(1)) {\n', '            if (!erc20tk.transfer(_destAddrs[i], _values[i])) {\n', '                break;\n', '            }\n', '        }\n', '\n', '        return (i);\n', '    }\n', '\n', '    /**\n', '     * @dev Send tokens to other multi addresses in one function\n', '     *\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _destAddrs address The addresses which you want to send tokens to\n', '     * @param _values uint256 the amounts of tokens to be sent\n', '     */\n', '    function multiSendFrom(address _from, address[] _destAddrs, uint256[] _values) onlyOwner public returns (uint256) {\n', '        require(_destAddrs.length == _values.length);\n', '\n', '        uint256 i = 0;\n', '        for (; i < _destAddrs.length; i = i.add(1)) {\n', '            if (!erc20tk.transferFrom(_from, _destAddrs[i], _values[i])) {\n', '                break;\n', '            }\n', '        }\n', '\n', '        return (i);\n', '    }\n', '\n', '    /**\n', '     * @dev get records about approval\n', '     *\n', '     * @param _ind uint the index of record\n', '     */\n', '    function getApproveRecord(uint _ind) onlyOwner public view returns (bytes) {\n', '        require(_ind < approveRecords.length);\n', '\n', '        return approveRecords[_ind];\n', '    }\n', '}\n', '\n', 'contract DelayedClaimable is Claimable {\n', '\n', '  uint256 public end;\n', '  uint256 public start;\n', '\n', '  /**\n', '   * @dev Used to specify the time period during which a pending\n', '   * owner can claim ownership.\n', '   * @param _start The earliest time ownership can be claimed.\n', '   * @param _end The latest time ownership can be claimed.\n', '   */\n', '  function setLimits(uint256 _start, uint256 _end) onlyOwner public {\n', '    require(_start <= _end);\n', '    end = _end;\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer, as long as it is called within\n', '   * the specified start and end time.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    require((block.number <= end) && (block.number >= start));\n', '    emit OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '    end = 0;\n', '  }\n', '\n', '}\n', '\n', 'contract FlyDropTokenMgr is DelayedClaimable {\n', '    using SafeMath for uint256;\n', '\n', '    address[] dropTokenAddrs;\n', '    FlyDropToken currentDropTokenContract;\n', '    // mapping(address => mapping (address => uint256)) budgets;\n', '\n', '    /**\n', '     * @dev Send tokens to other multi addresses in one function\n', '     *\n', '     * @param _rand a random index for choosing a FlyDropToken contract address\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _value uint256 the amounts of tokens to be sent\n', '     * @param _token address the ERC20 token address\n', '     * @param _extraData bytes the extra data for the record\n', '     */\n', '    function prepare(uint256 _rand,\n', '                     address _from,\n', '                     address _token,\n', '                     uint256 _value,\n', '                     bytes _extraData) onlyOwner public returns (bool) {\n', '        require(_token != address(0));\n', '        require(_from != address(0));\n', '        require(_rand > 0);\n', '\n', '        if (ERC20(_token).allowance(_from, this) < _value) {\n', '            return false;\n', '        }\n', '\n', '        if (_rand > dropTokenAddrs.length) {\n', '            FlyDropToken dropTokenContract = new FlyDropToken();\n', '            dropTokenAddrs.push(address(dropTokenContract));\n', '            currentDropTokenContract = dropTokenContract;\n', '        } else {\n', '            currentDropTokenContract = FlyDropToken(dropTokenAddrs[_rand.sub(1)]);\n', '        }\n', '\n', '        ERC20(_token).transferFrom(_from, this, _value);\n', '        // budgets[_token][_from] = budgets[_token][_from].sub(_value);\n', '        return itoken(_token).approveAndCall(currentDropTokenContract, _value, _extraData);\n', '        // return true;\n', '    }\n', '\n', '    // function setBudget(address _token, address _from, uint256 _value) onlyOwner public {\n', '    //     require(_token != address(0));\n', '    //     require(_from != address(0));\n', '\n', '    //     budgets[_token][_from] = _value;\n', '    // }\n', '\n', '    /**\n', '     * @dev Send tokens to other multi addresses in one function\n', '     *\n', '     * @param _destAddrs address The addresses which you want to send tokens to\n', '     * @param _values uint256 the amounts of tokens to be sent\n', '     */\n', '    function flyDrop(address[] _destAddrs, uint256[] _values) onlyOwner public returns (uint256) {\n', '        require(address(currentDropTokenContract) != address(0));\n', '        return currentDropTokenContract.multiSend(_destAddrs, _values);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}']