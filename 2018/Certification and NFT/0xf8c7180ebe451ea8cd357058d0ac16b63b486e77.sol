['pragma solidity 0.4.24;\n', '/*\n', 'Capital Technologies & Research - Capital (CALL) & CapitalGAS (CALLG) - Crowdsale Smart Contract\n', 'https://www.mycapitalco.in\n', '*/\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CAPITAL GAS (CALLG) Token\n', ' * @dev Token representing CALLG.\n', ' */\n', 'contract CALLGToken is MintableToken {\n', '\tstring public name = "CAPITAL GAS";\n', '\tstring public symbol = "CALLG";\n', '\tuint8 public decimals = 18;\n', '}\n', '\n', '/**\n', ' * @title CAPITAL (CALL) Token\n', ' * @dev Token representing CALL.\n', ' */\n', 'contract CALLToken is MintableToken {\n', '\tstring public name = "CAPITAL";\n', '\tstring public symbol = "CALL";\n', '\tuint8 public decimals = 18;\n', '}\n', '\n', 'contract TeamVault is Ownable {\n', '    using SafeMath for uint256;\n', '    ERC20 public token_call;\n', '    ERC20 public token_callg;\n', '    event TeamWithdrawn(address indexed teamWallet, uint256 token_call, uint256 token_callg);\n', '    constructor (ERC20 _token_call, ERC20 _token_callg) public {\n', '        require(_token_call != address(0));\n', '        require(_token_callg != address(0));\n', '        token_call = _token_call;\n', '        token_callg = _token_callg;\n', '    }\n', '    function () public payable {\n', '    }\n', '    function withdrawTeam(address teamWallet) public onlyOwner {\n', '        require(teamWallet != address(0));\n', '        uint call_balance = token_call.balanceOf(this);\n', '        uint callg_balance = token_callg.balanceOf(this);\n', '        token_call.transfer(teamWallet, call_balance);\n', '        token_callg.transfer(teamWallet, callg_balance);\n', '        emit TeamWithdrawn(teamWallet, call_balance, callg_balance);\n', '    }\n', '}\n', '\n', 'contract BountyVault is Ownable {\n', '    using SafeMath for uint256;\n', '    ERC20 public token_call;\n', '    ERC20 public token_callg;\n', '    event BountyWithdrawn(address indexed bountyWallet, uint256 token_call, uint256 token_callg);\n', '    constructor (ERC20 _token_call, ERC20 _token_callg) public {\n', '        require(_token_call != address(0));\n', '        require(_token_callg != address(0));\n', '        token_call = _token_call;\n', '        token_callg = _token_callg;\n', '    }\n', '    function () public payable {\n', '    }\n', '    function withdrawBounty(address bountyWallet) public onlyOwner {\n', '        require(bountyWallet != address(0));\n', '        uint call_balance = token_call.balanceOf(this);\n', '        uint callg_balance = token_callg.balanceOf(this);\n', '        token_call.transfer(bountyWallet, call_balance);\n', '        token_callg.transfer(bountyWallet, callg_balance);\n', '        emit BountyWithdrawn(bountyWallet, call_balance, callg_balance);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  constructor(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', 'contract FiatContract {\n', '  function USD(uint _id) public view returns (uint256);\n', '}\n', 'contract CapitalTechCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  ERC20 public token_call;\n', '  ERC20 public token_callg;\n', '  FiatContract public fiat_contract;\n', '  RefundVault public vault;\n', '  TeamVault public teamVault;\n', '  BountyVault public bountyVault;\n', '  enum stages { PRIVATE_SALE, PRE_SALE, MAIN_SALE_1, MAIN_SALE_2, MAIN_SALE_3, MAIN_SALE_4, FINALIZED }\n', '  address public wallet;\n', '  uint256 public maxContributionPerAddress;\n', '  uint256 public stageStartTime;\n', '  uint256 public weiRaised;\n', '  uint256 public minInvestment;\n', '  stages public stage;\n', '  bool public is_finalized;\n', '  bool public powered_up;\n', '  bool public distributed_team;\n', '  bool public distributed_bounty;\n', '  mapping(address => uint256) public contributions;\n', '  mapping(address => uint256) public userHistory;\n', '  mapping(uint256 => uint256) public stages_duration;\n', '  uint256 public callSoftCap;\n', '  uint256 public callgSoftCap;\n', '  uint256 public callDistributed;\n', '  uint256 public callgDistributed;\n', '  uint256 public constant decimals = 18;\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount_call, uint256 amount_callg);\n', '  event TokenTransfer(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount_call, uint256 amount_callg);\n', '  event StageChanged(stages stage, stages next_stage, uint256 stageStartTime);\n', '  event GoalReached(uint256 callSoftCap, uint256 callgSoftCap);\n', '  event Finalized(uint256 callDistributed, uint256 callgDistributed);\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  constructor(address _wallet, address _fiatcontract, ERC20 _token_call, ERC20 _token_callg) public {\n', '    require(_token_call != address(0));\n', '    require(_token_callg != address(0));\n', '    require(_wallet != address(0));\n', '    require(_fiatcontract != address(0));\n', '    token_call = _token_call;\n', '    token_callg = _token_callg;\n', '    wallet = _wallet;\n', '    fiat_contract = FiatContract(_fiatcontract);\n', '    vault = new RefundVault(_wallet);\n', '    bountyVault = new BountyVault(_token_call, _token_callg);\n', '    teamVault = new TeamVault(_token_call, _token_callg);\n', '  }\n', '  function powerUpContract() public onlyOwner {\n', '    require(!powered_up);\n', '    require(!is_finalized);\n', '    stageStartTime = 1498867200;\n', '    stage = stages.PRIVATE_SALE;\n', '    weiRaised = 0;\n', '  \tdistributeTeam();\n', '  \tdistributeBounty();\n', '\t  callDistributed = 7875000 * 10 ** decimals;\n', '    callgDistributed = 1575000000 * 10 ** decimals;\n', '    callSoftCap = 18049500 * 10 ** decimals;\n', '    callgSoftCap = 3609900000 * 10 ** decimals;\n', '    maxContributionPerAddress = 1500 ether;\n', '    minInvestment = 0.01 ether;\n', '    is_finalized = false;\n', '    powered_up = true;\n', '    stages_duration[uint256(stages.PRIVATE_SALE)] = 30 days;\n', '    stages_duration[uint256(stages.PRE_SALE)] = 30 days;\n', '    stages_duration[uint256(stages.MAIN_SALE_1)] = 7 days;\n', '    stages_duration[uint256(stages.MAIN_SALE_2)] = 7 days;\n', '    stages_duration[uint256(stages.MAIN_SALE_3)] = 7 days;\n', '    stages_duration[uint256(stages.MAIN_SALE_4)] = 7 days;\n', '  }\n', '  function distributeTeam() public onlyOwner {\n', '    require(!distributed_team);\n', '    uint256 _amount = 5250000 * 10 ** decimals;\n', '    distributed_team = true;\n', '    MintableToken(token_call).mint(teamVault, _amount);\n', '    MintableToken(token_callg).mint(teamVault, _amount.mul(200));\n', '    emit TokenTransfer(msg.sender, teamVault, _amount, _amount, _amount.mul(200));\n', '  }\n', '  function distributeBounty() public onlyOwner {\n', '    require(!distributed_bounty);\n', '    uint256 _amount = 2625000 * 10 ** decimals;\n', '    distributed_bounty = true;\n', '    MintableToken(token_call).mint(bountyVault, _amount);\n', '    MintableToken(token_callg).mint(bountyVault, _amount.mul(200));\n', '    emit TokenTransfer(msg.sender, bountyVault, _amount, _amount, _amount.mul(200));\n', '  }\n', '  function withdrawBounty(address _beneficiary) public onlyOwner {\n', '    require(distributed_bounty);\n', '    bountyVault.withdrawBounty(_beneficiary);\n', '  }\n', '  function withdrawTeam(address _beneficiary) public onlyOwner {\n', '    require(distributed_team);\n', '    teamVault.withdrawTeam(_beneficiary);\n', '  }\n', '  function getUserContribution(address _beneficiary) public view returns (uint256) {\n', '    return contributions[_beneficiary];\n', '  }\n', '  function getUserHistory(address _beneficiary) public view returns (uint256) {\n', '    return userHistory[_beneficiary];\n', '  }\n', '  function getReferrals(address[] _beneficiaries) public view returns (address[], uint256[]) {\n', '  \taddress[] memory addrs = new address[](_beneficiaries.length);\n', '  \tuint256[] memory funds = new uint256[](_beneficiaries.length);\n', '  \tfor (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '  \t\taddrs[i] = _beneficiaries[i];\n', '  \t\tfunds[i] = getUserHistory(_beneficiaries[i]);\n', '  \t}\n', '    return (addrs, funds);\n', '  }\n', '  function getAmountForCurrentStage(uint256 _amount) public view returns(uint256) {\n', '    uint256 tokenPrice = fiat_contract.USD(0);\n', '    if(stage == stages.PRIVATE_SALE) {\n', '      tokenPrice = tokenPrice.mul(35).div(10 ** 8);\n', '    } else if(stage == stages.PRE_SALE) {\n', '      tokenPrice = tokenPrice.mul(50).div(10 ** 8);\n', '    } else if(stage == stages.MAIN_SALE_1) {\n', '      tokenPrice = tokenPrice.mul(70).div(10 ** 8);\n', '    } else if(stage == stages.MAIN_SALE_2) {\n', '      tokenPrice = tokenPrice.mul(80).div(10 ** 8);\n', '    } else if(stage == stages.MAIN_SALE_3) {\n', '      tokenPrice = tokenPrice.mul(90).div(10 ** 8);\n', '    } else if(stage == stages.MAIN_SALE_4) {\n', '      tokenPrice = tokenPrice.mul(100).div(10 ** 8);\n', '    }\n', '    return _amount.div(tokenPrice).mul(10 ** 10);\n', '  }\n', '  function _getNextStage() internal view returns (stages) {\n', '    stages next_stage;\n', '    if (stage == stages.PRIVATE_SALE) {\n', '      next_stage = stages.PRE_SALE;\n', '    } else if (stage == stages.PRE_SALE) {\n', '      next_stage = stages.MAIN_SALE_1;\n', '    } else if (stage == stages.MAIN_SALE_1) {\n', '      next_stage = stages.MAIN_SALE_2;\n', '    } else if (stage == stages.MAIN_SALE_2) {\n', '      next_stage = stages.MAIN_SALE_3;\n', '    } else if (stage == stages.MAIN_SALE_3) {\n', '      next_stage = stages.MAIN_SALE_4;\n', '    } else {\n', '      next_stage = stages.FINALIZED;\n', '    }\n', '    return next_stage;\n', '  }\n', '  function getHardCap() public view returns (uint256, uint256) {\n', '    uint256 hardcap_call;\n', '    uint256 hardcap_callg;\n', '    if (stage == stages.PRIVATE_SALE) {\n', '      hardcap_call = 10842563;\n', '      hardcap_callg = 2168512500;\n', '    } else if (stage == stages.PRE_SALE) {\n', '      hardcap_call = 18049500;\n', '      hardcap_callg = 3609900000;\n', '    } else if (stage == stages.MAIN_SALE_1) {\n', '      hardcap_call = 30937200;\n', '      hardcap_callg = 6187440000;\n', '    } else if (stage == stages.MAIN_SALE_2) {\n', '      hardcap_call = 40602975;\n', '      hardcap_callg = 8120595000;\n', '    } else if (stage == stages.MAIN_SALE_3) {\n', '      hardcap_call = 47046825;\n', '      hardcap_callg = 9409365000;\n', '    } else {\n', '      hardcap_call = 52500000;\n', '      hardcap_callg = 10500000000;\n', '    }\n', '    return (hardcap_call.mul(10 ** decimals), hardcap_callg.mul(10 ** decimals));\n', '  }\n', '  function updateStage() public {\n', '    _updateStage(0, 0);\n', '  }\n', '  function _updateStage(uint256 weiAmount, uint256 callAmount) internal {\n', '    uint256 _duration = stages_duration[uint256(stage)];\n', '    uint256 call_tokens = 0;\n', '    if (weiAmount != 0) {\n', '      call_tokens = getAmountForCurrentStage(weiAmount);\n', '    } else {\n', '      call_tokens = callAmount;\n', '    }\n', '    uint256 callg_tokens = call_tokens.mul(200);\n', '    (uint256 _hardcapCall, uint256 _hardcapCallg) = getHardCap();\n', '    if(stageStartTime.add(_duration) <= block.timestamp || callDistributed.add(call_tokens) >= _hardcapCall || callgDistributed.add(callg_tokens) >= _hardcapCallg) {\n', '      stages next_stage = _getNextStage();\n', '      emit StageChanged(stage, next_stage, stageStartTime);\n', '      stage = next_stage;\n', '      if (next_stage != stages.FINALIZED) {\n', '        stageStartTime = block.timestamp;\n', '      } else {\n', '        finalization();\n', '      }\n', '    }\n', '  }\n', '  function buyTokens(address _beneficiary) public payable {\n', '    require(!is_finalized);\n', '    if (_beneficiary == address(0)) {\n', '      _beneficiary = msg.sender;\n', '    }\n', '    uint256 weiAmount = msg.value;\n', '    require(weiAmount > 0);\n', '    require(_beneficiary != address(0));\n', '    require(weiAmount >= minInvestment);\n', '    require(contributions[_beneficiary].add(weiAmount) <= maxContributionPerAddress);\n', '    _updateStage(weiAmount, 0);\n', '    uint256 call_tokens = getAmountForCurrentStage(weiAmount);\n', '    uint256 callg_tokens = call_tokens.mul(200);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    callDistributed = callDistributed.add(call_tokens);\n', '    callgDistributed = callgDistributed.add(callg_tokens);\n', '    MintableToken(token_call).mint(_beneficiary, call_tokens);\n', '    MintableToken(token_callg).mint(_beneficiary, callg_tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, call_tokens, callg_tokens);\n', '    contributions[_beneficiary] = contributions[_beneficiary].add(weiAmount);\n', '    userHistory[_beneficiary] = userHistory[_beneficiary].add(call_tokens);\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '  function finalize() onlyOwner public {\n', '    stage = stages.FINALIZED;\n', '    finalization();\n', '  }\n', '  function extendPeriod(uint256 date) public onlyOwner {\n', '    stages_duration[uint256(stage)] = stages_duration[uint256(stage)].add(date);\n', '  }\n', '  function transferTokens(address _to, uint256 _amount) public onlyOwner {\n', '    require(!is_finalized);\n', '    require(_to != address(0));\n', '    require(_amount > 0);\n', '    _updateStage(0, _amount);\n', '    callDistributed = callDistributed.add(_amount);\n', '    callgDistributed = callgDistributed.add(_amount.mul(200));\n', '    if (stage == stages.FINALIZED) {\n', '      (uint256 _hardcapCall, uint256 _hardcapCallg) = getHardCap();\n', '      require(callDistributed.add(callDistributed) <= _hardcapCall);\n', '      require(callgDistributed.add(callgDistributed) <= _hardcapCallg);\n', '    }\n', '    MintableToken(token_call).mint(_to, _amount);\n', '    MintableToken(token_callg).mint(_to, _amount.mul(200));\n', '    userHistory[_to] = userHistory[_to].add(_amount);\n', '    emit TokenTransfer(msg.sender, _to, _amount, _amount, _amount.mul(200));\n', '  }\n', '  function claimRefund() public {\n', '\t  address _beneficiary = msg.sender;\n', '    require(is_finalized);\n', '    require(!goalReached());\n', '    userHistory[_beneficiary] = 0;\n', '    vault.refund(_beneficiary);\n', '  }\n', '  function goalReached() public view returns (bool) {\n', '    if (callDistributed >= callSoftCap && callgDistributed >= callgSoftCap) {\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '  function finishMinting() public onlyOwner {\n', '    MintableToken(token_call).finishMinting();\n', '    MintableToken(token_callg).finishMinting();\n', '  }\n', '  function finalization() internal {\n', '    require(!is_finalized);\n', '    is_finalized = true;\n', '    finishMinting();\n', '    emit Finalized(callDistributed, callgDistributed);\n', '    if (goalReached()) {\n', '      emit GoalReached(callSoftCap, callgSoftCap);\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '  }\n', '}']
['pragma solidity 0.4.24;\n', '/*\n', 'Capital Technologies & Research - Capital (CALL) & CapitalGAS (CALLG) - Crowdsale Smart Contract\n', 'https://www.mycapitalco.in\n', '*/\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CAPITAL GAS (CALLG) Token\n', ' * @dev Token representing CALLG.\n', ' */\n', 'contract CALLGToken is MintableToken {\n', '\tstring public name = "CAPITAL GAS";\n', '\tstring public symbol = "CALLG";\n', '\tuint8 public decimals = 18;\n', '}\n', '\n', '/**\n', ' * @title CAPITAL (CALL) Token\n', ' * @dev Token representing CALL.\n', ' */\n', 'contract CALLToken is MintableToken {\n', '\tstring public name = "CAPITAL";\n', '\tstring public symbol = "CALL";\n', '\tuint8 public decimals = 18;\n', '}\n', '\n', 'contract TeamVault is Ownable {\n', '    using SafeMath for uint256;\n', '    ERC20 public token_call;\n', '    ERC20 public token_callg;\n', '    event TeamWithdrawn(address indexed teamWallet, uint256 token_call, uint256 token_callg);\n', '    constructor (ERC20 _token_call, ERC20 _token_callg) public {\n', '        require(_token_call != address(0));\n', '        require(_token_callg != address(0));\n', '        token_call = _token_call;\n', '        token_callg = _token_callg;\n', '    }\n', '    function () public payable {\n', '    }\n', '    function withdrawTeam(address teamWallet) public onlyOwner {\n', '        require(teamWallet != address(0));\n', '        uint call_balance = token_call.balanceOf(this);\n', '        uint callg_balance = token_callg.balanceOf(this);\n', '        token_call.transfer(teamWallet, call_balance);\n', '        token_callg.transfer(teamWallet, callg_balance);\n', '        emit TeamWithdrawn(teamWallet, call_balance, callg_balance);\n', '    }\n', '}\n', '\n', 'contract BountyVault is Ownable {\n', '    using SafeMath for uint256;\n', '    ERC20 public token_call;\n', '    ERC20 public token_callg;\n', '    event BountyWithdrawn(address indexed bountyWallet, uint256 token_call, uint256 token_callg);\n', '    constructor (ERC20 _token_call, ERC20 _token_callg) public {\n', '        require(_token_call != address(0));\n', '        require(_token_callg != address(0));\n', '        token_call = _token_call;\n', '        token_callg = _token_callg;\n', '    }\n', '    function () public payable {\n', '    }\n', '    function withdrawBounty(address bountyWallet) public onlyOwner {\n', '        require(bountyWallet != address(0));\n', '        uint call_balance = token_call.balanceOf(this);\n', '        uint callg_balance = token_callg.balanceOf(this);\n', '        token_call.transfer(bountyWallet, call_balance);\n', '        token_callg.transfer(bountyWallet, callg_balance);\n', '        emit BountyWithdrawn(bountyWallet, call_balance, callg_balance);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  constructor(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', 'contract FiatContract {\n', '  function USD(uint _id) public view returns (uint256);\n', '}\n', 'contract CapitalTechCrowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  ERC20 public token_call;\n', '  ERC20 public token_callg;\n', '  FiatContract public fiat_contract;\n', '  RefundVault public vault;\n', '  TeamVault public teamVault;\n', '  BountyVault public bountyVault;\n', '  enum stages { PRIVATE_SALE, PRE_SALE, MAIN_SALE_1, MAIN_SALE_2, MAIN_SALE_3, MAIN_SALE_4, FINALIZED }\n', '  address public wallet;\n', '  uint256 public maxContributionPerAddress;\n', '  uint256 public stageStartTime;\n', '  uint256 public weiRaised;\n', '  uint256 public minInvestment;\n', '  stages public stage;\n', '  bool public is_finalized;\n', '  bool public powered_up;\n', '  bool public distributed_team;\n', '  bool public distributed_bounty;\n', '  mapping(address => uint256) public contributions;\n', '  mapping(address => uint256) public userHistory;\n', '  mapping(uint256 => uint256) public stages_duration;\n', '  uint256 public callSoftCap;\n', '  uint256 public callgSoftCap;\n', '  uint256 public callDistributed;\n', '  uint256 public callgDistributed;\n', '  uint256 public constant decimals = 18;\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount_call, uint256 amount_callg);\n', '  event TokenTransfer(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount_call, uint256 amount_callg);\n', '  event StageChanged(stages stage, stages next_stage, uint256 stageStartTime);\n', '  event GoalReached(uint256 callSoftCap, uint256 callgSoftCap);\n', '  event Finalized(uint256 callDistributed, uint256 callgDistributed);\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  constructor(address _wallet, address _fiatcontract, ERC20 _token_call, ERC20 _token_callg) public {\n', '    require(_token_call != address(0));\n', '    require(_token_callg != address(0));\n', '    require(_wallet != address(0));\n', '    require(_fiatcontract != address(0));\n', '    token_call = _token_call;\n', '    token_callg = _token_callg;\n', '    wallet = _wallet;\n', '    fiat_contract = FiatContract(_fiatcontract);\n', '    vault = new RefundVault(_wallet);\n', '    bountyVault = new BountyVault(_token_call, _token_callg);\n', '    teamVault = new TeamVault(_token_call, _token_callg);\n', '  }\n', '  function powerUpContract() public onlyOwner {\n', '    require(!powered_up);\n', '    require(!is_finalized);\n', '    stageStartTime = 1498867200;\n', '    stage = stages.PRIVATE_SALE;\n', '    weiRaised = 0;\n', '  \tdistributeTeam();\n', '  \tdistributeBounty();\n', '\t  callDistributed = 7875000 * 10 ** decimals;\n', '    callgDistributed = 1575000000 * 10 ** decimals;\n', '    callSoftCap = 18049500 * 10 ** decimals;\n', '    callgSoftCap = 3609900000 * 10 ** decimals;\n', '    maxContributionPerAddress = 1500 ether;\n', '    minInvestment = 0.01 ether;\n', '    is_finalized = false;\n', '    powered_up = true;\n', '    stages_duration[uint256(stages.PRIVATE_SALE)] = 30 days;\n', '    stages_duration[uint256(stages.PRE_SALE)] = 30 days;\n', '    stages_duration[uint256(stages.MAIN_SALE_1)] = 7 days;\n', '    stages_duration[uint256(stages.MAIN_SALE_2)] = 7 days;\n', '    stages_duration[uint256(stages.MAIN_SALE_3)] = 7 days;\n', '    stages_duration[uint256(stages.MAIN_SALE_4)] = 7 days;\n', '  }\n', '  function distributeTeam() public onlyOwner {\n', '    require(!distributed_team);\n', '    uint256 _amount = 5250000 * 10 ** decimals;\n', '    distributed_team = true;\n', '    MintableToken(token_call).mint(teamVault, _amount);\n', '    MintableToken(token_callg).mint(teamVault, _amount.mul(200));\n', '    emit TokenTransfer(msg.sender, teamVault, _amount, _amount, _amount.mul(200));\n', '  }\n', '  function distributeBounty() public onlyOwner {\n', '    require(!distributed_bounty);\n', '    uint256 _amount = 2625000 * 10 ** decimals;\n', '    distributed_bounty = true;\n', '    MintableToken(token_call).mint(bountyVault, _amount);\n', '    MintableToken(token_callg).mint(bountyVault, _amount.mul(200));\n', '    emit TokenTransfer(msg.sender, bountyVault, _amount, _amount, _amount.mul(200));\n', '  }\n', '  function withdrawBounty(address _beneficiary) public onlyOwner {\n', '    require(distributed_bounty);\n', '    bountyVault.withdrawBounty(_beneficiary);\n', '  }\n', '  function withdrawTeam(address _beneficiary) public onlyOwner {\n', '    require(distributed_team);\n', '    teamVault.withdrawTeam(_beneficiary);\n', '  }\n', '  function getUserContribution(address _beneficiary) public view returns (uint256) {\n', '    return contributions[_beneficiary];\n', '  }\n', '  function getUserHistory(address _beneficiary) public view returns (uint256) {\n', '    return userHistory[_beneficiary];\n', '  }\n', '  function getReferrals(address[] _beneficiaries) public view returns (address[], uint256[]) {\n', '  \taddress[] memory addrs = new address[](_beneficiaries.length);\n', '  \tuint256[] memory funds = new uint256[](_beneficiaries.length);\n', '  \tfor (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '  \t\taddrs[i] = _beneficiaries[i];\n', '  \t\tfunds[i] = getUserHistory(_beneficiaries[i]);\n', '  \t}\n', '    return (addrs, funds);\n', '  }\n', '  function getAmountForCurrentStage(uint256 _amount) public view returns(uint256) {\n', '    uint256 tokenPrice = fiat_contract.USD(0);\n', '    if(stage == stages.PRIVATE_SALE) {\n', '      tokenPrice = tokenPrice.mul(35).div(10 ** 8);\n', '    } else if(stage == stages.PRE_SALE) {\n', '      tokenPrice = tokenPrice.mul(50).div(10 ** 8);\n', '    } else if(stage == stages.MAIN_SALE_1) {\n', '      tokenPrice = tokenPrice.mul(70).div(10 ** 8);\n', '    } else if(stage == stages.MAIN_SALE_2) {\n', '      tokenPrice = tokenPrice.mul(80).div(10 ** 8);\n', '    } else if(stage == stages.MAIN_SALE_3) {\n', '      tokenPrice = tokenPrice.mul(90).div(10 ** 8);\n', '    } else if(stage == stages.MAIN_SALE_4) {\n', '      tokenPrice = tokenPrice.mul(100).div(10 ** 8);\n', '    }\n', '    return _amount.div(tokenPrice).mul(10 ** 10);\n', '  }\n', '  function _getNextStage() internal view returns (stages) {\n', '    stages next_stage;\n', '    if (stage == stages.PRIVATE_SALE) {\n', '      next_stage = stages.PRE_SALE;\n', '    } else if (stage == stages.PRE_SALE) {\n', '      next_stage = stages.MAIN_SALE_1;\n', '    } else if (stage == stages.MAIN_SALE_1) {\n', '      next_stage = stages.MAIN_SALE_2;\n', '    } else if (stage == stages.MAIN_SALE_2) {\n', '      next_stage = stages.MAIN_SALE_3;\n', '    } else if (stage == stages.MAIN_SALE_3) {\n', '      next_stage = stages.MAIN_SALE_4;\n', '    } else {\n', '      next_stage = stages.FINALIZED;\n', '    }\n', '    return next_stage;\n', '  }\n', '  function getHardCap() public view returns (uint256, uint256) {\n', '    uint256 hardcap_call;\n', '    uint256 hardcap_callg;\n', '    if (stage == stages.PRIVATE_SALE) {\n', '      hardcap_call = 10842563;\n', '      hardcap_callg = 2168512500;\n', '    } else if (stage == stages.PRE_SALE) {\n', '      hardcap_call = 18049500;\n', '      hardcap_callg = 3609900000;\n', '    } else if (stage == stages.MAIN_SALE_1) {\n', '      hardcap_call = 30937200;\n', '      hardcap_callg = 6187440000;\n', '    } else if (stage == stages.MAIN_SALE_2) {\n', '      hardcap_call = 40602975;\n', '      hardcap_callg = 8120595000;\n', '    } else if (stage == stages.MAIN_SALE_3) {\n', '      hardcap_call = 47046825;\n', '      hardcap_callg = 9409365000;\n', '    } else {\n', '      hardcap_call = 52500000;\n', '      hardcap_callg = 10500000000;\n', '    }\n', '    return (hardcap_call.mul(10 ** decimals), hardcap_callg.mul(10 ** decimals));\n', '  }\n', '  function updateStage() public {\n', '    _updateStage(0, 0);\n', '  }\n', '  function _updateStage(uint256 weiAmount, uint256 callAmount) internal {\n', '    uint256 _duration = stages_duration[uint256(stage)];\n', '    uint256 call_tokens = 0;\n', '    if (weiAmount != 0) {\n', '      call_tokens = getAmountForCurrentStage(weiAmount);\n', '    } else {\n', '      call_tokens = callAmount;\n', '    }\n', '    uint256 callg_tokens = call_tokens.mul(200);\n', '    (uint256 _hardcapCall, uint256 _hardcapCallg) = getHardCap();\n', '    if(stageStartTime.add(_duration) <= block.timestamp || callDistributed.add(call_tokens) >= _hardcapCall || callgDistributed.add(callg_tokens) >= _hardcapCallg) {\n', '      stages next_stage = _getNextStage();\n', '      emit StageChanged(stage, next_stage, stageStartTime);\n', '      stage = next_stage;\n', '      if (next_stage != stages.FINALIZED) {\n', '        stageStartTime = block.timestamp;\n', '      } else {\n', '        finalization();\n', '      }\n', '    }\n', '  }\n', '  function buyTokens(address _beneficiary) public payable {\n', '    require(!is_finalized);\n', '    if (_beneficiary == address(0)) {\n', '      _beneficiary = msg.sender;\n', '    }\n', '    uint256 weiAmount = msg.value;\n', '    require(weiAmount > 0);\n', '    require(_beneficiary != address(0));\n', '    require(weiAmount >= minInvestment);\n', '    require(contributions[_beneficiary].add(weiAmount) <= maxContributionPerAddress);\n', '    _updateStage(weiAmount, 0);\n', '    uint256 call_tokens = getAmountForCurrentStage(weiAmount);\n', '    uint256 callg_tokens = call_tokens.mul(200);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    callDistributed = callDistributed.add(call_tokens);\n', '    callgDistributed = callgDistributed.add(callg_tokens);\n', '    MintableToken(token_call).mint(_beneficiary, call_tokens);\n', '    MintableToken(token_callg).mint(_beneficiary, callg_tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, call_tokens, callg_tokens);\n', '    contributions[_beneficiary] = contributions[_beneficiary].add(weiAmount);\n', '    userHistory[_beneficiary] = userHistory[_beneficiary].add(call_tokens);\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '  function finalize() onlyOwner public {\n', '    stage = stages.FINALIZED;\n', '    finalization();\n', '  }\n', '  function extendPeriod(uint256 date) public onlyOwner {\n', '    stages_duration[uint256(stage)] = stages_duration[uint256(stage)].add(date);\n', '  }\n', '  function transferTokens(address _to, uint256 _amount) public onlyOwner {\n', '    require(!is_finalized);\n', '    require(_to != address(0));\n', '    require(_amount > 0);\n', '    _updateStage(0, _amount);\n', '    callDistributed = callDistributed.add(_amount);\n', '    callgDistributed = callgDistributed.add(_amount.mul(200));\n', '    if (stage == stages.FINALIZED) {\n', '      (uint256 _hardcapCall, uint256 _hardcapCallg) = getHardCap();\n', '      require(callDistributed.add(callDistributed) <= _hardcapCall);\n', '      require(callgDistributed.add(callgDistributed) <= _hardcapCallg);\n', '    }\n', '    MintableToken(token_call).mint(_to, _amount);\n', '    MintableToken(token_callg).mint(_to, _amount.mul(200));\n', '    userHistory[_to] = userHistory[_to].add(_amount);\n', '    emit TokenTransfer(msg.sender, _to, _amount, _amount, _amount.mul(200));\n', '  }\n', '  function claimRefund() public {\n', '\t  address _beneficiary = msg.sender;\n', '    require(is_finalized);\n', '    require(!goalReached());\n', '    userHistory[_beneficiary] = 0;\n', '    vault.refund(_beneficiary);\n', '  }\n', '  function goalReached() public view returns (bool) {\n', '    if (callDistributed >= callSoftCap && callgDistributed >= callgSoftCap) {\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '  function finishMinting() public onlyOwner {\n', '    MintableToken(token_call).finishMinting();\n', '    MintableToken(token_callg).finishMinting();\n', '  }\n', '  function finalization() internal {\n', '    require(!is_finalized);\n', '    is_finalized = true;\n', '    finishMinting();\n', '    emit Finalized(callDistributed, callgDistributed);\n', '    if (goalReached()) {\n', '      emit GoalReached(callSoftCap, callgSoftCap);\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '  }\n', '}']
