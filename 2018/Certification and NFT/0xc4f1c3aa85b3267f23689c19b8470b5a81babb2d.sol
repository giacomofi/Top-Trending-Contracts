['pragma solidity ^0.4.10;\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  modifier stopInEmergency {\n', '    if (paused) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.8;\n', '\n', '\n', 'contract Sales{\n', '\n', '\tenum ICOSaleState{\n', '\t\tPrivateSale,\n', '\t    PreSale,\n', '\t    PublicSale,\n', '\t    Success,\n', '\t    Failed\n', '\t }\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract GACToken is Token,Ownable,Sales {\n', '    string public constant name = "Gladage Care Token";\n', '    string public constant symbol = "GAC";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '    uint public valueToBeSent = 1;\n', '\n', '    bool public finalizedICO = false;\n', '\n', '    uint256 public ethraised;\n', '    uint256 public btcraised;\n', '    uint256 public usdraised;\n', '\n', '    bool public istransferAllowed;\n', '\n', '    uint256 public constant GACFund = 5 * (10**8) * 10**decimals; \n', '    uint256 public fundingStartBlock; // crowdsale start unix //now\n', '    uint256 public fundingEndBlock; // crowdsale end unix //1530403200 //07/01/2018 @ 12:00am (UTC)\n', '    uint256 public tokenCreationMax= 275 * (10**6) * 10**decimals;//TODO\n', '    mapping (address => bool) ownership;\n', '    uint256 public minCapUSD = 2000000;\n', '    uint256 public maxCapUSD = 20000000;\n', '\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '      if(!istransferAllowed) throw;\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function burnTokens(uint256 _value) public{\n', '        require(balances[msg.sender]>=_value);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender],_value);\n', '        totalSupply =SafeMath.sub(totalSupply,_value);\n', '    }\n', '\n', '\n', '    //this is the default constructor\n', '    function GACToken(uint256 _fundingStartBlock, uint256 _fundingEndBlock){\n', '        totalSupply = GACFund;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingEndBlock = _fundingEndBlock;\n', '    }\n', '\n', '    ///change the funding end block\n', '    function changeEndBlock(uint256 _newFundingEndBlock) onlyOwner{\n', '        fundingEndBlock = _newFundingEndBlock;\n', '    }\n', '\n', '    ///change the funding start block\n', '    function changeStartBlock(uint256 _newFundingStartBlock) onlyOwner{\n', '        fundingStartBlock = _newFundingStartBlock;\n', '    }\n', '\n', '    ///the Min Cap USD \n', '    ///function too chage the miin cap usd\n', '    function changeMinCapUSD(uint256 _newMinCap) onlyOwner{\n', '        minCapUSD = _newMinCap;\n', '    }\n', '\n', '    ///fucntion to change the max cap usd\n', '    function changeMaxCapUSD(uint256 _newMaxCap) onlyOwner{\n', '        maxCapUSD = _newMaxCap;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {\n', '      if(!istransferAllowed) throw;\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '\n', '    function addToBalances(address _person,uint256 value) {\n', '        if(!ownership[msg.sender]) throw;\n', '        balances[_person] = SafeMath.add(balances[_person],value);\n', '        Transfer(address(this), _person, value);\n', '    }\n', '\n', '    function addToOwnership(address owners) onlyOwner{\n', '        ownership[owners] = true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseEthRaised(uint256 value){\n', '        if(!ownership[msg.sender]) throw;\n', '        ethraised+=value;\n', '    }\n', '\n', '    function increaseBTCRaised(uint256 value){\n', '        if(!ownership[msg.sender]) throw;\n', '        btcraised+=value;\n', '    }\n', '\n', '    function increaseUSDRaised(uint256 value){\n', '        if(!ownership[msg.sender]) throw;\n', '        usdraised+=value;\n', '    }\n', '\n', '    function finalizeICO(){\n', '        if(!ownership[msg.sender]) throw;\n', '\n', '        if(usdraised<minCapUSD) throw;\n', '        finalizedICO = true;\n', '        istransferAllowed = true;\n', '    }\n', '\n', '    function enableTransfers() public onlyOwner{\n', '        istransferAllowed = true;\n', '    }\n', '\n', '    function disableTransfers() public onlyOwner{\n', '        istransferAllowed = false;\n', '    }\n', '\n', '    //functiion to force finalize the ICO by the owner no checks called here\n', '    function finalizeICOOwner() onlyOwner{\n', '        finalizedICO = true;\n', '        istransferAllowed = true;\n', '    }\n', '\n', '    function isValid() returns(bool){\n', '        if(now>=fundingStartBlock && now<fundingEndBlock ){\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '        if(usdraised>maxCapUSD) throw;\n', '    }\n', '\n', '    ///do not allow payments on this address\n', '\n', '    function() payable{\n', '        throw;\n', '    }\n', '}']
['pragma solidity ^0.4.10;\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  modifier stopInEmergency {\n', '    if (paused) {\n', '      throw;\n', '    }\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.8;\n', '\n', '\n', 'contract Sales{\n', '\n', '\tenum ICOSaleState{\n', '\t\tPrivateSale,\n', '\t    PreSale,\n', '\t    PublicSale,\n', '\t    Success,\n', '\t    Failed\n', '\t }\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '    function approve(address _spender, uint256 _value) returns (bool success);\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract GACToken is Token,Ownable,Sales {\n', '    string public constant name = "Gladage Care Token";\n', '    string public constant symbol = "GAC";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '    uint public valueToBeSent = 1;\n', '\n', '    bool public finalizedICO = false;\n', '\n', '    uint256 public ethraised;\n', '    uint256 public btcraised;\n', '    uint256 public usdraised;\n', '\n', '    bool public istransferAllowed;\n', '\n', '    uint256 public constant GACFund = 5 * (10**8) * 10**decimals; \n', '    uint256 public fundingStartBlock; // crowdsale start unix //now\n', '    uint256 public fundingEndBlock; // crowdsale end unix //1530403200 //07/01/2018 @ 12:00am (UTC)\n', '    uint256 public tokenCreationMax= 275 * (10**6) * 10**decimals;//TODO\n', '    mapping (address => bool) ownership;\n', '    uint256 public minCapUSD = 2000000;\n', '    uint256 public maxCapUSD = 20000000;\n', '\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4);\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '      if(!istransferAllowed) throw;\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function burnTokens(uint256 _value) public{\n', '        require(balances[msg.sender]>=_value);\n', '        balances[msg.sender] = SafeMath.sub(balances[msg.sender],_value);\n', '        totalSupply =SafeMath.sub(totalSupply,_value);\n', '    }\n', '\n', '\n', '    //this is the default constructor\n', '    function GACToken(uint256 _fundingStartBlock, uint256 _fundingEndBlock){\n', '        totalSupply = GACFund;\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingEndBlock = _fundingEndBlock;\n', '    }\n', '\n', '    ///change the funding end block\n', '    function changeEndBlock(uint256 _newFundingEndBlock) onlyOwner{\n', '        fundingEndBlock = _newFundingEndBlock;\n', '    }\n', '\n', '    ///change the funding start block\n', '    function changeStartBlock(uint256 _newFundingStartBlock) onlyOwner{\n', '        fundingStartBlock = _newFundingStartBlock;\n', '    }\n', '\n', '    ///the Min Cap USD \n', '    ///function too chage the miin cap usd\n', '    function changeMinCapUSD(uint256 _newMinCap) onlyOwner{\n', '        minCapUSD = _newMinCap;\n', '    }\n', '\n', '    ///fucntion to change the max cap usd\n', '    function changeMaxCapUSD(uint256 _newMaxCap) onlyOwner{\n', '        maxCapUSD = _newMaxCap;\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool success) {\n', '      if(!istransferAllowed) throw;\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '\n', '    function addToBalances(address _person,uint256 value) {\n', '        if(!ownership[msg.sender]) throw;\n', '        balances[_person] = SafeMath.add(balances[_person],value);\n', '        Transfer(address(this), _person, value);\n', '    }\n', '\n', '    function addToOwnership(address owners) onlyOwner{\n', '        ownership[owners] = true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) onlyPayloadSize(2 * 32) returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    function increaseEthRaised(uint256 value){\n', '        if(!ownership[msg.sender]) throw;\n', '        ethraised+=value;\n', '    }\n', '\n', '    function increaseBTCRaised(uint256 value){\n', '        if(!ownership[msg.sender]) throw;\n', '        btcraised+=value;\n', '    }\n', '\n', '    function increaseUSDRaised(uint256 value){\n', '        if(!ownership[msg.sender]) throw;\n', '        usdraised+=value;\n', '    }\n', '\n', '    function finalizeICO(){\n', '        if(!ownership[msg.sender]) throw;\n', '\n', '        if(usdraised<minCapUSD) throw;\n', '        finalizedICO = true;\n', '        istransferAllowed = true;\n', '    }\n', '\n', '    function enableTransfers() public onlyOwner{\n', '        istransferAllowed = true;\n', '    }\n', '\n', '    function disableTransfers() public onlyOwner{\n', '        istransferAllowed = false;\n', '    }\n', '\n', '    //functiion to force finalize the ICO by the owner no checks called here\n', '    function finalizeICOOwner() onlyOwner{\n', '        finalizedICO = true;\n', '        istransferAllowed = true;\n', '    }\n', '\n', '    function isValid() returns(bool){\n', '        if(now>=fundingStartBlock && now<fundingEndBlock ){\n', '            return true;\n', '        }else{\n', '            return false;\n', '        }\n', '        if(usdraised>maxCapUSD) throw;\n', '    }\n', '\n', '    ///do not allow payments on this address\n', '\n', '    function() payable{\n', '        throw;\n', '    }\n', '}']
