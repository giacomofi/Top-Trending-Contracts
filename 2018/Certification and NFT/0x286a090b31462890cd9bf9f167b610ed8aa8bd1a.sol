['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// This is an automated token exchange. It lets you buy and sell a specific token for Ethereum.\n', '// The more eth in the contract the higher the token price, the more tokens in the contract\n', '// the lower the token price. The formula is the same as for Ether Shrimp Farm.\n', '// There are no fees except gas cost.\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract AutomatedExchange is ApproveAndCallFallBack{\n', '\n', '    uint256 PSN=100000000000000;\n', '    uint256 PSNH=50000000000000;\n', '    address tokenAddress=0x841D34aF2018D9487199678eDd47Dd46B140690B;\n', '    ERC20Interface tokenContract=ERC20Interface(tokenAddress);\n', '    function AutomatedExchange() public{\n', '    }\n', '    //Tokens are sold by sending them to this contract with ApproveAndCall\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public{\n', '        //only allow this to be called from the token contract\n', '        require(msg.sender==tokenAddress);\n', '        uint256 tokenValue=calculateTokenSell(tokens);\n', '        tokenContract.transferFrom(from,this,tokens);\n', '        from.transfer(tokenValue);\n', '    }\n', '    function buyTokens() public payable{\n', '        uint256 tokensBought=calculateTokenBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        tokenContract.transfer(msg.sender,tokensBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculateTokenSell(uint256 tokens) public view returns(uint256){\n', '        return calculateTrade(tokens,tokenContract.balanceOf(this),this.balance);\n', '    }\n', '    function calculateTokenBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,tokenContract.balanceOf(this));\n', '    }\n', '    function calculateTokenBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateTokenBuy(eth,this.balance);\n', '    }\n', '\n', '    //allow sending eth to the contract\n', '    function () public payable {}\n', '\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getTokenBalance() public view returns(uint256){\n', '        return tokenContract.balanceOf(this);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18; // solhint-disable-line\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', '// ----------------------------------------------------------------------------\n', 'contract ERC20Interface {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// This is an automated token exchange. It lets you buy and sell a specific token for Ethereum.\n', '// The more eth in the contract the higher the token price, the more tokens in the contract\n', '// the lower the token price. The formula is the same as for Ether Shrimp Farm.\n', '// There are no fees except gas cost.\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract AutomatedExchange is ApproveAndCallFallBack{\n', '\n', '    uint256 PSN=100000000000000;\n', '    uint256 PSNH=50000000000000;\n', '    address tokenAddress=0x841D34aF2018D9487199678eDd47Dd46B140690B;\n', '    ERC20Interface tokenContract=ERC20Interface(tokenAddress);\n', '    function AutomatedExchange() public{\n', '    }\n', '    //Tokens are sold by sending them to this contract with ApproveAndCall\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public{\n', '        //only allow this to be called from the token contract\n', '        require(msg.sender==tokenAddress);\n', '        uint256 tokenValue=calculateTokenSell(tokens);\n', '        tokenContract.transferFrom(from,this,tokens);\n', '        from.transfer(tokenValue);\n', '    }\n', '    function buyTokens() public payable{\n', '        uint256 tokensBought=calculateTokenBuy(msg.value,SafeMath.sub(this.balance,msg.value));\n', '        tokenContract.transfer(msg.sender,tokensBought);\n', '    }\n', '    //magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '    function calculateTokenSell(uint256 tokens) public view returns(uint256){\n', '        return calculateTrade(tokens,tokenContract.balanceOf(this),this.balance);\n', '    }\n', '    function calculateTokenBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){\n', '        return calculateTrade(eth,contractBalance,tokenContract.balanceOf(this));\n', '    }\n', '    function calculateTokenBuySimple(uint256 eth) public view returns(uint256){\n', '        return calculateTokenBuy(eth,this.balance);\n', '    }\n', '\n', '    //allow sending eth to the contract\n', '    function () public payable {}\n', '\n', '    function getBalance() public view returns(uint256){\n', '        return this.balance;\n', '    }\n', '    function getTokenBalance() public view returns(uint256){\n', '        return tokenContract.balanceOf(this);\n', '    }\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
