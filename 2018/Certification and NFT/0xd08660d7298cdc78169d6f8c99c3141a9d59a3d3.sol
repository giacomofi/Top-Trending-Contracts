['pragma solidity 0.4.21;\n', '\n', '/**\n', ' * @title Basic Math Library\n', ' * @author Modular, Inc\n', ' *\n', ' * version 1.2.5\n', ' * Copyright (c) 2017 Modular, Inc\n', ' * The MIT License (MIT)\n', ' * https://github.com/Modular-Network/ethereum-libraries/blob/master/LICENSE\n', ' *\n', ' * The Basic Math Library is inspired by the Safe Math library written by\n', ' * OpenZeppelin at https://github.com/OpenZeppelin/zeppelin-solidity/ .\n', ' * Modular provides smart contract services and security reviews for contract\n', ' * deployments in addition to working on open source projects in the Ethereum\n', ' * community. Our purpose is to test, document, and deploy reusable code onto the\n', ' * blockchain and improve both security and usability. We also educate non-profits,\n', ' * schools, and other community members about the application of blockchain\n', ' * technology.\n', ' * For further information: modular.network, openzeppelin.org\n', ' *\n', ' * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n', ' * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n', ' * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n', ' * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n', ' * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n', ' * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n', ' * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', ' */\n', '\n', 'library BasicMathLib {\n', '  /// @dev Multiplies two numbers and checks for overflow before returning.\n', '  /// Does not throw.\n', '  /// @param a First number\n', '  /// @param b Second number\n', '  /// @return err False normally, or true if there is overflow\n', '  /// @return res The product of a and b, or 0 if there is overflow\n', '  function times(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n', '    assembly{\n', '      res := mul(a,b)\n', '      switch or(iszero(b), eq(div(res,b), a))\n', '      case 0 {\n', '        err := 1\n', '        res := 0\n', '      }\n', '    }\n', '  }\n', '\n', '  /// @dev Divides two numbers but checks for 0 in the divisor first.\n', '  /// Does not throw.\n', '  /// @param a First number\n', '  /// @param b Second number\n', '  /// @return err False normally, or true if `b` is 0\n', '  /// @return res The quotient of a and b, or 0 if `b` is 0\n', '  function dividedBy(uint256 a, uint256 b) public pure returns (bool err,uint256 i) {\n', '    uint256 res;\n', '    assembly{\n', '      switch iszero(b)\n', '      case 0 {\n', '        res := div(a,b)\n', '        let loc := mload(0x40)\n', '        mstore(add(loc,0x20),res)\n', '        i := mload(add(loc,0x20))\n', '      }\n', '      default {\n', '        err := 1\n', '        i := 0\n', '      }\n', '    }\n', '  }\n', '\n', '  /// @dev Adds two numbers and checks for overflow before returning.\n', '  /// Does not throw.\n', '  /// @param a First number\n', '  /// @param b Second number\n', '  /// @return err False normally, or true if there is overflow\n', '  /// @return res The sum of a and b, or 0 if there is overflow\n', '  function plus(uint256 a, uint256 b) public pure returns (bool err, uint256 res) {\n', '    assembly{\n', '      res := add(a,b)\n', '      switch and(eq(sub(res,b), a), or(gt(res,b),eq(res,b)))\n', '      case 0 {\n', '        err := 1\n', '        res := 0\n', '      }\n', '    }\n', '  }\n', '\n', '  /// @dev Subtracts two numbers and checks for underflow before returning.\n', '  /// Does not throw but rather logs an Err event if there is underflow.\n', '  /// @param a First number\n', '  /// @param b Second number\n', '  /// @return err False normally, or true if there is underflow\n', '  /// @return res The difference between a and b, or 0 if there is underflow\n', '  function minus(uint256 a, uint256 b) public pure returns (bool err,uint256 res) {\n', '    assembly{\n', '      res := sub(a,b)\n', '      switch eq(and(eq(add(res,b), a), or(lt(res,a), eq(res,a))), 1)\n', '      case 0 {\n', '        err := 1\n', '        res := 0\n', '      }\n', '    }\n', '  }\n', '}']