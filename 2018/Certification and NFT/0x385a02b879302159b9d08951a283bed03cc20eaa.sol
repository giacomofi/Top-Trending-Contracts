['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an address access to this role\n', '     */\n', '    function add(Role storage role, address addr)\n', '    internal\n', '    {\n', '        role.bearer[addr] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev remove an address&#39; access to this role\n', '     */\n', '    function remove(Role storage role, address addr)\n', '    internal\n', '    {\n', '        role.bearer[addr] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an address has this role\n', '     * // reverts\n', '     */\n', '    function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '    {\n', '        require(has(role, addr));\n', '    }\n', '\n', '    /**\n', '     * @dev check if an address has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '    {\n', '        return role.bearer[addr];\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * @dev Supports unlimited numbers of roles and addresses.\n', ' * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', ' * It&#39;s also recommended that you define constants in the contract, like ROLE_ADMIN below,\n', ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '    using Roles for Roles.Role;\n', '\n', '    mapping (string => Roles.Role) private roles;\n', '\n', '    event RoleAdded(address addr, string roleName);\n', '    event RoleRemoved(address addr, string roleName);\n', '\n', '    /**\n', '     * @dev reverts if addr does not have role\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     * // reverts\n', '     */\n', '    function checkRole(address addr, string roleName)\n', '    view\n', '    public\n', '    {\n', '        roles[roleName].check(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev determine if addr has role\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     * @return bool\n', '     */\n', '    function hasRole(address addr, string roleName)\n', '    view\n', '    public\n', '    returns (bool)\n', '    {\n', '        return roles[roleName].has(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev add a role to an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function addRole(address addr, string roleName)\n', '    internal\n', '    {\n', '        roles[roleName].add(addr);\n', '        emit RoleAdded(addr, roleName);\n', '    }\n', '\n', '    /**\n', '     * @dev remove a role from an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function removeRole(address addr, string roleName)\n', '    internal\n', '    {\n', '        roles[roleName].remove(addr);\n', '        emit RoleRemoved(addr, roleName);\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '     * @param roleName the name of the role\n', '     * // reverts\n', '     */\n', '    modifier onlyRole(string roleName)\n', '    {\n', '        checkRole(msg.sender, roleName);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '     * @param roleNames the names of the roles to scope access to\n', '     * // reverts\n', '     *\n', '     * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '     *  see: https://github.com/ethereum/solidity/issues/2467\n', '     */\n', '    // modifier onlyRoles(string[] roleNames) {\n', '    //     bool hasAnyRole = false;\n', '    //     for (uint8 i = 0; i < roleNames.length; i++) {\n', '    //         if (hasRole(msg.sender, roleNames[i])) {\n', '    //             hasAnyRole = true;\n', '    //             break;\n', '    //         }\n', '    //     }\n', '\n', '    //     require(hasAnyRole);\n', '\n', '    //     _;\n', '    // }\n', '}\n', '\n', '\n', '/**\n', ' * @title RBACWithAdmin\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev It&#39;s recommended that you define constants in the contract,\n', ' * @dev like ROLE_ADMIN below, to avoid typos.\n', ' */\n', 'contract RBACWithAdmin is RBAC {\n', '    /**\n', '     * A constant role name for indicating admins.\n', '     */\n', '    string public constant ROLE_ADMIN = "admin";\n', '\n', '    /**\n', '     * @dev modifier to scope access to admins\n', '     * // reverts\n', '     */\n', '    modifier onlyAdmin()\n', '    {\n', '        checkRole(msg.sender, ROLE_ADMIN);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev constructor. Sets msg.sender as admin by default\n', '     */\n', '    function RBACWithAdmin()\n', '    public\n', '    {\n', '        addRole(msg.sender, ROLE_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev add a role to an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function adminAddRole(address addr, string roleName)\n', '    onlyAdmin\n', '    public\n', '    {\n', '        addRole(addr, roleName);\n', '    }\n', '\n', '    /**\n', '     * @dev remove a role from an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function adminRemoveRole(address addr, string roleName)\n', '    onlyAdmin\n', '    public\n', '    {\n', '        removeRole(addr, roleName);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @param _rate Number of token units a buyer gets per wei\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     * @param _token Address of the token being sold\n', '     */\n', '    function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', '     * @param _beneficiary Address performing the token purchase\n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(\n', '        msg.sender,\n', '        _beneficiary,\n', '        weiAmount,\n', '        tokens\n', '        );\n', '\n', '        _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, weiAmount);\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '\n', '\n', '// NbtToken crowdsale-valuable interface\n', 'contract NbtToken  {\n', '    uint256 public saleableTokens;\n', '    uint256 public MAX_SALE_VOLUME;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function moveTokensFromSaleToCirculating(address _to, uint256 _amount) public returns (bool);\n', '}\n', '\n', '/// @title Nbt Token Crowdsale Contract\n', '// Main crowdsale contract\n', 'contract NbtCrowdsale is Crowdsale, Pausable, RBACWithAdmin {\n', '\n', '    /*** EVENTS ***/\n', '\n', '    event NewStart(uint256 start);\n', '    event NewDeadline(uint256 deadline);\n', '    event NewRate(uint256 rate);\n', '    event NewWallet(address new_address);\n', '    event Sale(address indexed buyer, uint256 tokens_with_bonuses);\n', '\n', '    /*** CONSTANTS ***/\n', '\n', '    uint256 public DECIMALS = 8;\n', '    uint256 public BONUS1 = 100; // %\n', '    uint256 public BONUS1_LIMIT = 150000000 * 10**DECIMALS;\n', '    uint256 public BONUS2 = 60; // %\n', '    uint256 public BONUS2_LIMIT = 250000000 * 10**DECIMALS;\n', '    uint256 public MIN_TOKENS = 1000 * 10**DECIMALS;\n', '\n', '    NbtToken public token;\n', '\n', '    /*** STORAGE ***/\n', '\n', '    uint256 public start;\n', '    uint256 public deadline;\n', '    bool crowdsaleClosed = false;\n', '\n', '    /*** MODIFIERS ***/\n', '\n', '    modifier afterDeadline() { if (now > deadline) _; }\n', '    modifier beforeDeadline() { if (now <= deadline) _; }\n', '    modifier afterStart() { if (now >= start) _; }\n', '    modifier beforeStart() { if (now < start) _; }\n', '\n', '    /*** CONSTRUCTOR ***/\n', '\n', '    /**\n', '      * @param _rate Number of token units a buyer gets per wei\n', '      * @param _wallet Address where collected funds will be forwarded to\n', '      * @param _token Address of the token being sold\n', '      * @param _start Start date of the crowdsale\n', '      * @param _deadline Deadline of the crowdsale\n', '      */\n', '    function NbtCrowdsale(uint256 _rate, address _wallet, NbtToken _token, uint256 _start, uint256 _deadline) Crowdsale(_rate, _wallet, ERC20(_token)) public {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '        require(_start < _deadline);\n', '\n', '        start = _start;\n', '        deadline = _deadline;\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    /*** PUBLIC AND EXTERNAL FUNCTIONS ***/\n', '\n', '    /**\n', '     * @dev set new start date for crowdsale.\n', '     * @param _start The new start timestamp\n', '     */\n', '    function setStart(uint256 _start) onlyAdmin whenPaused public returns (bool) {\n', '        require(_start < deadline);\n', '        start = _start;\n', '        emit NewStart(start);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev set new start date for crowdsale.\n', '     * @param _deadline The new deadline timestamp\n', '     */\n', '    function setDeadline(uint256 _deadline) onlyAdmin whenPaused public returns (bool) {\n', '        require(start < _deadline);\n', '        deadline = _deadline;\n', '        emit NewDeadline(_deadline);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev set new wallet address\n', '     * @param _addr The new wallet address\n', '     */\n', '    function setWallet(address _addr) onlyAdmin public returns (bool) {\n', '        require(_addr != address(0) && _addr != address(this));\n', '        wallet = _addr;\n', '        emit NewWallet(wallet);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev set new rate for crowdsale.\n', '     * @param _rate Number of token units a buyer gets per wei\n', '     */\n', '    function setRate(uint256 _rate) onlyAdmin public returns (bool) {\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '        emit NewRate(rate);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * @dev called by the admin to pause, triggers stopped state\n', '      */\n', '    function pause() onlyAdmin whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the admin to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyAdmin whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    function getCurrentBonus() public view returns (uint256) {\n', '        if (token.MAX_SALE_VOLUME().sub(token.saleableTokens()) < BONUS1_LIMIT) {\n', '            return BONUS1;\n', '        } else if (token.MAX_SALE_VOLUME().sub(token.saleableTokens()) < BONUS2_LIMIT) {\n', '            return BONUS2;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\n', '        return _getTokenAmount(_weiAmount);\n', '    }\n', '\n', '    /**\n', '     * Close the crowdsale\n', '     */\n', '    function closeCrowdsale() onlyAdmin afterDeadline public {\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '    /*** INTERNAL FUNCTIONS ***/\n', '\n', '    /**\n', '       * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '       * @param _beneficiary Address performing the token purchase\n', '       * @param _weiAmount Value in wei involved in the purchase\n', '       */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) whenNotPaused afterStart beforeDeadline internal {\n', '        require(!crowdsaleClosed);\n', '        require(_weiAmount >= 1000000000000);\n', '        require(_getTokenAmount(_weiAmount) <= token.balanceOf(this));\n', '        require(_getTokenAmount(_weiAmount) >= MIN_TOKENS);\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '      * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '      * @param _beneficiary Address performing the token purchase\n', '      * @param _tokenAmount Number of tokens to be emitted\n', '      */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.moveTokensFromSaleToCirculating(_beneficiary, _tokenAmount);\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '        emit Sale(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 _current_bonus =  getCurrentBonus();\n', '        if (_current_bonus == 0) {\n', '            return _weiAmount.mul(rate).div(1000000000000); // token amount for 1 szabo\n', '        } else {\n', '            return _weiAmount.mul(rate).mul(_current_bonus.add(100)).div(100).div(1000000000000); // token amount for 1 szabo\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an address access to this role\n', '     */\n', '    function add(Role storage role, address addr)\n', '    internal\n', '    {\n', '        role.bearer[addr] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an address' access to this role\n", '     */\n', '    function remove(Role storage role, address addr)\n', '    internal\n', '    {\n', '        role.bearer[addr] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an address has this role\n', '     * // reverts\n', '     */\n', '    function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '    {\n', '        require(has(role, addr));\n', '    }\n', '\n', '    /**\n', '     * @dev check if an address has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '    {\n', '        return role.bearer[addr];\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * @dev Supports unlimited numbers of roles and addresses.\n', ' * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', " * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n", ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '    using Roles for Roles.Role;\n', '\n', '    mapping (string => Roles.Role) private roles;\n', '\n', '    event RoleAdded(address addr, string roleName);\n', '    event RoleRemoved(address addr, string roleName);\n', '\n', '    /**\n', '     * @dev reverts if addr does not have role\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     * // reverts\n', '     */\n', '    function checkRole(address addr, string roleName)\n', '    view\n', '    public\n', '    {\n', '        roles[roleName].check(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev determine if addr has role\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     * @return bool\n', '     */\n', '    function hasRole(address addr, string roleName)\n', '    view\n', '    public\n', '    returns (bool)\n', '    {\n', '        return roles[roleName].has(addr);\n', '    }\n', '\n', '    /**\n', '     * @dev add a role to an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function addRole(address addr, string roleName)\n', '    internal\n', '    {\n', '        roles[roleName].add(addr);\n', '        emit RoleAdded(addr, roleName);\n', '    }\n', '\n', '    /**\n', '     * @dev remove a role from an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function removeRole(address addr, string roleName)\n', '    internal\n', '    {\n', '        roles[roleName].remove(addr);\n', '        emit RoleRemoved(addr, roleName);\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '     * @param roleName the name of the role\n', '     * // reverts\n', '     */\n', '    modifier onlyRole(string roleName)\n', '    {\n', '        checkRole(msg.sender, roleName);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '     * @param roleNames the names of the roles to scope access to\n', '     * // reverts\n', '     *\n', '     * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '     *  see: https://github.com/ethereum/solidity/issues/2467\n', '     */\n', '    // modifier onlyRoles(string[] roleNames) {\n', '    //     bool hasAnyRole = false;\n', '    //     for (uint8 i = 0; i < roleNames.length; i++) {\n', '    //         if (hasRole(msg.sender, roleNames[i])) {\n', '    //             hasAnyRole = true;\n', '    //             break;\n', '    //         }\n', '    //     }\n', '\n', '    //     require(hasAnyRole);\n', '\n', '    //     _;\n', '    // }\n', '}\n', '\n', '\n', '/**\n', ' * @title RBACWithAdmin\n', ' * @author Matt Condon (@Shrugs)\n', " * @dev It's recommended that you define constants in the contract,\n", ' * @dev like ROLE_ADMIN below, to avoid typos.\n', ' */\n', 'contract RBACWithAdmin is RBAC {\n', '    /**\n', '     * A constant role name for indicating admins.\n', '     */\n', '    string public constant ROLE_ADMIN = "admin";\n', '\n', '    /**\n', '     * @dev modifier to scope access to admins\n', '     * // reverts\n', '     */\n', '    modifier onlyAdmin()\n', '    {\n', '        checkRole(msg.sender, ROLE_ADMIN);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev constructor. Sets msg.sender as admin by default\n', '     */\n', '    function RBACWithAdmin()\n', '    public\n', '    {\n', '        addRole(msg.sender, ROLE_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev add a role to an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function adminAddRole(address addr, string roleName)\n', '    onlyAdmin\n', '    public\n', '    {\n', '        addRole(addr, roleName);\n', '    }\n', '\n', '    /**\n', '     * @dev remove a role from an address\n', '     * @param addr address\n', '     * @param roleName the name of the role\n', '     */\n', '    function adminRemoveRole(address addr, string roleName)\n', '    onlyAdmin\n', '    public\n', '    {\n', '        removeRole(addr, roleName);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Address where funds are collected\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @param _rate Number of token units a buyer gets per wei\n', '     * @param _wallet Address where collected funds will be forwarded to\n', '     * @param _token Address of the token being sold\n', '     */\n', '    function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', '     * @param _beneficiary Address performing the token purchase\n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(\n', '        msg.sender,\n', '        _beneficiary,\n', '        weiAmount,\n', '        tokens\n', '        );\n', '\n', '        _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, weiAmount);\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '\n', '\n', '// NbtToken crowdsale-valuable interface\n', 'contract NbtToken  {\n', '    uint256 public saleableTokens;\n', '    uint256 public MAX_SALE_VOLUME;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function moveTokensFromSaleToCirculating(address _to, uint256 _amount) public returns (bool);\n', '}\n', '\n', '/// @title Nbt Token Crowdsale Contract\n', '// Main crowdsale contract\n', 'contract NbtCrowdsale is Crowdsale, Pausable, RBACWithAdmin {\n', '\n', '    /*** EVENTS ***/\n', '\n', '    event NewStart(uint256 start);\n', '    event NewDeadline(uint256 deadline);\n', '    event NewRate(uint256 rate);\n', '    event NewWallet(address new_address);\n', '    event Sale(address indexed buyer, uint256 tokens_with_bonuses);\n', '\n', '    /*** CONSTANTS ***/\n', '\n', '    uint256 public DECIMALS = 8;\n', '    uint256 public BONUS1 = 100; // %\n', '    uint256 public BONUS1_LIMIT = 150000000 * 10**DECIMALS;\n', '    uint256 public BONUS2 = 60; // %\n', '    uint256 public BONUS2_LIMIT = 250000000 * 10**DECIMALS;\n', '    uint256 public MIN_TOKENS = 1000 * 10**DECIMALS;\n', '\n', '    NbtToken public token;\n', '\n', '    /*** STORAGE ***/\n', '\n', '    uint256 public start;\n', '    uint256 public deadline;\n', '    bool crowdsaleClosed = false;\n', '\n', '    /*** MODIFIERS ***/\n', '\n', '    modifier afterDeadline() { if (now > deadline) _; }\n', '    modifier beforeDeadline() { if (now <= deadline) _; }\n', '    modifier afterStart() { if (now >= start) _; }\n', '    modifier beforeStart() { if (now < start) _; }\n', '\n', '    /*** CONSTRUCTOR ***/\n', '\n', '    /**\n', '      * @param _rate Number of token units a buyer gets per wei\n', '      * @param _wallet Address where collected funds will be forwarded to\n', '      * @param _token Address of the token being sold\n', '      * @param _start Start date of the crowdsale\n', '      * @param _deadline Deadline of the crowdsale\n', '      */\n', '    function NbtCrowdsale(uint256 _rate, address _wallet, NbtToken _token, uint256 _start, uint256 _deadline) Crowdsale(_rate, _wallet, ERC20(_token)) public {\n', '        require(_rate > 0);\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '        require(_start < _deadline);\n', '\n', '        start = _start;\n', '        deadline = _deadline;\n', '\n', '        rate = _rate;\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '\n', '    /*** PUBLIC AND EXTERNAL FUNCTIONS ***/\n', '\n', '    /**\n', '     * @dev set new start date for crowdsale.\n', '     * @param _start The new start timestamp\n', '     */\n', '    function setStart(uint256 _start) onlyAdmin whenPaused public returns (bool) {\n', '        require(_start < deadline);\n', '        start = _start;\n', '        emit NewStart(start);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev set new start date for crowdsale.\n', '     * @param _deadline The new deadline timestamp\n', '     */\n', '    function setDeadline(uint256 _deadline) onlyAdmin whenPaused public returns (bool) {\n', '        require(start < _deadline);\n', '        deadline = _deadline;\n', '        emit NewDeadline(_deadline);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev set new wallet address\n', '     * @param _addr The new wallet address\n', '     */\n', '    function setWallet(address _addr) onlyAdmin public returns (bool) {\n', '        require(_addr != address(0) && _addr != address(this));\n', '        wallet = _addr;\n', '        emit NewWallet(wallet);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev set new rate for crowdsale.\n', '     * @param _rate Number of token units a buyer gets per wei\n', '     */\n', '    function setRate(uint256 _rate) onlyAdmin public returns (bool) {\n', '        require(_rate > 0);\n', '        rate = _rate;\n', '        emit NewRate(rate);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      * @dev called by the admin to pause, triggers stopped state\n', '      */\n', '    function pause() onlyAdmin whenNotPaused public {\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the admin to unpause, returns to normal state\n', '     */\n', '    function unpause() onlyAdmin whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '\n', '    function getCurrentBonus() public view returns (uint256) {\n', '        if (token.MAX_SALE_VOLUME().sub(token.saleableTokens()) < BONUS1_LIMIT) {\n', '            return BONUS1;\n', '        } else if (token.MAX_SALE_VOLUME().sub(token.saleableTokens()) < BONUS2_LIMIT) {\n', '            return BONUS2;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function getTokenAmount(uint256 _weiAmount) public view returns (uint256) {\n', '        return _getTokenAmount(_weiAmount);\n', '    }\n', '\n', '    /**\n', '     * Close the crowdsale\n', '     */\n', '    function closeCrowdsale() onlyAdmin afterDeadline public {\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '    /*** INTERNAL FUNCTIONS ***/\n', '\n', '    /**\n', '       * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '       * @param _beneficiary Address performing the token purchase\n', '       * @param _weiAmount Value in wei involved in the purchase\n', '       */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) whenNotPaused afterStart beforeDeadline internal {\n', '        require(!crowdsaleClosed);\n', '        require(_weiAmount >= 1000000000000);\n', '        require(_getTokenAmount(_weiAmount) <= token.balanceOf(this));\n', '        require(_getTokenAmount(_weiAmount) >= MIN_TOKENS);\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '      * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '      * @param _beneficiary Address performing the token purchase\n', '      * @param _tokenAmount Number of tokens to be emitted\n', '      */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.moveTokensFromSaleToCirculating(_beneficiary, _tokenAmount);\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '        emit Sale(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 _current_bonus =  getCurrentBonus();\n', '        if (_current_bonus == 0) {\n', '            return _weiAmount.mul(rate).div(1000000000000); // token amount for 1 szabo\n', '        } else {\n', '            return _weiAmount.mul(rate).mul(_current_bonus.add(100)).div(100).div(1000000000000); // token amount for 1 szabo\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}']
