['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract Distributable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  bool public distributed;\n', '  //Not all actual addresses\n', '  address[] public partners = [\n', '  0xb68342f2f4dd35d93b88081b03a245f64331c95c,\n', '  0x16CCc1e68D2165fb411cE5dae3556f823249233e,\n', '  0x8E176EDA10b41FA072464C29Eb10CfbbF4adCd05, //Auditors Traning\n', '  0x7c387c57f055993c857067A0feF6E81884656Cb0, //Reserve\n', '  0x4F21c073A9B8C067818113829053b60A6f45a817, //Airdrop\n', '  0xcB4b6B7c4a72754dEb99bB72F1274129D9C0A109, //Alex\n', '  0x7BF84E0244c05A11c57984e8dF7CC6481b8f4258, //Adam\n', '  0x20D2F4Be237F4320386AaaefD42f68495C6A3E81, //JG\n', '  0x12BEA633B83aA15EfF99F68C2E7e14f2709802A9, //Rob S\n', '  0xC1a29a165faD532520204B480D519686B8CB845B, //Nick\n', '  0xf5f5Eb6Ab1411935b321042Fa02a433FcbD029AC, //Rob H\n', '  0xaBff978f03d5ca81B089C5A2Fc321fB8152DC8f1]; //Ed\n', '\n', '  address[] public partnerFixedAmount = [\n', '  0xA482D998DA4d361A6511c6847562234077F09748,\n', '  0xFa92F80f8B9148aDFBacC66aA7bbE6e9F0a0CD0e\n', '  ];\n', '\n', '  mapping(address => uint256) public percentages;\n', '  mapping(address => uint256) public fixedAmounts;\n', '\n', '  constructor() public{\n', '    percentages[0xb68342f2f4dd35d93b88081b03a245f64331c95c] = 40;\n', '    percentages[0x16CCc1e68D2165fb411cE5dae3556f823249233e] = 5;\n', '    percentages[0x8E176EDA10b41FA072464C29Eb10CfbbF4adCd05] = 100; //Auditors Training\n', '    percentages[0x7c387c57f055993c857067A0feF6E81884656Cb0] = 50; //Reserve\n', '    percentages[0x4F21c073A9B8C067818113829053b60A6f45a817] = 10; //Airdrop\n', '\n', '    percentages[0xcB4b6B7c4a72754dEb99bB72F1274129D9C0A109] = 20; //Alex\n', '    percentages[0x7BF84E0244c05A11c57984e8dF7CC6481b8f4258] = 20; //Adam\n', '    percentages[0x20D2F4Be237F4320386AaaefD42f68495C6A3E81] = 20; //JG\n', '    percentages[0x12BEA633B83aA15EfF99F68C2E7e14f2709802A9] = 20; //Rob S\n', '\n', '    percentages[0xC1a29a165faD532520204B480D519686B8CB845B] = 30; //Nick\n', '    percentages[0xf5f5Eb6Ab1411935b321042Fa02a433FcbD029AC] = 30; //Rob H\n', '\n', '    percentages[0xaBff978f03d5ca81B089C5A2Fc321fB8152DC8f1] = 52; //Ed\n', '\n', '    fixedAmounts[0xA482D998DA4d361A6511c6847562234077F09748] = 886228 * 10**16;\n', '    fixedAmounts[0xFa92F80f8B9148aDFBacC66aA7bbE6e9F0a0CD0e] = 697 ether;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting.\n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    isWhitelisted(_beneficiary)\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract SolidToken is MintableToken {\n', '\n', '  string public constant name = "SolidToken";\n', '  string public constant symbol = "SOLID";\n', '  uint8  public constant decimals = 18;\n', '\n', '  uint256 constant private DECIMAL_PLACES = 10 ** 18;\n', '  uint256 constant SUPPLY_CAP = 4000000 * DECIMAL_PLACES;\n', '\n', '  bool public transfersEnabled = false;\n', '  uint256 public transferEnablingDate;\n', '\n', '\n', '  /**\n', '   * @dev Sets the date that the tokens becomes transferable\n', '   * @param date The timestamp of the date\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function setTransferEnablingDate(uint256 date) public onlyOwner returns(bool success) {\n', '    transferEnablingDate = date;\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Enables the token transfer\n', '   */\n', '  function enableTransfer() public {\n', '    require(transferEnablingDate != 0 && now >= transferEnablingDate);\n', '    transfersEnabled = true;\n', '  }\n', '\n', '\n', '\n', '  // OVERRIDES\n', '  /**\n', '   * @dev Function to mint tokens. Overriden to check for supply cap.\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= SUPPLY_CAP);\n', '    require(super.mint(_to, _amount));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(transfersEnabled, "Tranfers are disabled");\n', '    require(super.transfer(_to, _value));\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(transfersEnabled, "Tranfers are disabled");\n', '    require(super.transferFrom(_from, _to, _value));\n', '    return true;\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract TokenSale is MintedCrowdsale, WhitelistedCrowdsale, Pausable, Distributable {\n', '\n', '  //Global Variables\n', '  mapping(address => uint256) public contributions;\n', '  Stages public currentStage;\n', '\n', '  //CONSTANTS\n', '  uint256 constant MINIMUM_CONTRIBUTION = 0.5 ether;  //the minimum conbtribution on Wei\n', '  uint256 constant MAXIMUM_CONTRIBUTION = 100 ether;  //the maximum contribution on Wei\n', '  uint256 constant BONUS_PERCENT = 250;                // The percentage of bonus in the fisrt stage, in;\n', '  uint256 constant TOKENS_ON_SALE_PERCENT = 600;       //The percentage of avaiable tokens for sale;\n', '  uint256 constant BONUSSALE_MAX_DURATION = 30 days ;\n', '  uint256 constant MAINSALE_MAX_DURATION = 62 days;\n', '  uint256 constant TOKEN_RELEASE_DELAY = 182 days;\n', '  uint256 constant HUNDRED_PERCENT = 1000;            //100% considering one extra decimal\n', '\n', '  //BONUSSALE VARIABLES\n', '  uint256 public bonussale_Cap = 14400 ether;\n', '  uint256 public bonussale_TokenCap = 1200000 ether;\n', '\n', '  uint256 public bonussale_StartDate;\n', '  uint256 public bonussale_EndDate;\n', '  uint256 public bonussale_TokesSold;\n', '  uint256 public bonussale_WeiRaised;\n', '\n', '  //MAINSALE VARIABLES\n', '  uint256 public mainSale_Cap = 18000 ether;\n', '  uint256 public mainSale_TokenCap = 1200000 ether;\n', '\n', '  uint256 public mainSale_StartDate;\n', '  uint256 public mainSale_EndDate;\n', '  uint256 public mainSale_TokesSold;\n', '  uint256 public mainSale_WeiRaised;\n', '\n', '\n', '  //TEMPORARY VARIABLES - USED TO AVOID OVERRIDING MORE OPEN ZEPPELING FUNCTIONS\n', '  uint256 private changeDue;\n', '  bool private capReached;\n', '\n', '  enum Stages{\n', '    SETUP,\n', '    READY,\n', '    BONUSSALE,\n', '    MAINSALE,\n', '    FINALIZED\n', '  }\n', '\n', '  /**\n', '      MODIFIERS\n', '  **/\n', '\n', '  /**\n', '    @dev Garantee that contract has the desired satge\n', '  **/\n', '  modifier atStage(Stages _currentStage){\n', '      require(currentStage == _currentStage);\n', '      _;\n', '  }\n', '\n', '  /**\n', '    @dev Execute automatically transitions between different Stages\n', '    based on time only\n', '  **/\n', '  modifier timedTransition(){\n', '    if(currentStage == Stages.READY && now >= bonussale_StartDate){\n', '      currentStage = Stages.BONUSSALE;\n', '    }\n', '    if(currentStage == Stages.BONUSSALE && now > bonussale_EndDate){\n', '      finalizePresale();\n', '    }\n', '    if(currentStage == Stages.MAINSALE && now > mainSale_EndDate){\n', '      finalizeSale();\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '      CONSTRUCTOR\n', '  **/\n', '\n', '  /**\n', '    @param _rate The exchange rate(multiplied by 1000) of tokens to eth(1 token = rate * ETH)\n', '    @param _wallet The address that recieves _forwardFunds\n', '    @param _token A token contract. Will be overriden later(needed fot OZ constructor)\n', '  **/\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public Crowdsale(_rate,_wallet,_token) {\n', '    require(_rate == 15);\n', '    currentStage = Stages.SETUP;\n', '  }\n', '\n', '\n', '  /**\n', '      SETUP RELATED FUNCTIONS\n', '  **/\n', '\n', '  /**\n', '   * @dev Sets the initial date and token.\n', '   * @param initialDate A timestamp representing the start of the bonussale\n', '    @param tokenAddress  The address of the deployed SolidToken\n', '   */\n', '  function setupSale(uint256 initialDate, address tokenAddress) onlyOwner atStage(Stages.SETUP) public {\n', '    bonussale_StartDate = initialDate;\n', '    bonussale_EndDate = bonussale_StartDate + BONUSSALE_MAX_DURATION;\n', '    token = ERC20(tokenAddress);\n', '\n', '    require(SolidToken(tokenAddress).totalSupply() == 0, "Tokens have already been distributed");\n', '    require(SolidToken(tokenAddress).owner() == address(this), "Token has the wrong ownership");\n', '\n', '    currentStage = Stages.READY;\n', '  }\n', '\n', '\n', '  /**\n', '      STAGE RELATED FUNCTIONS\n', '  **/\n', '\n', '  /**\n', '   * @dev Returns de ETH cap of the current currentStage\n', '   * @return uint256 representing the cap\n', '   */\n', '  function getCurrentCap() public view returns(uint256 cap){\n', '    cap = bonussale_Cap;\n', '    if(currentStage == Stages.MAINSALE){\n', '      cap = mainSale_Cap;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Returns de ETH cap of the current currentStage\n', '   * @return uint256 representing the raised amount in the stage\n', '   */\n', '  function getRaisedForCurrentStage() public view returns(uint256 raised){\n', '    raised = bonussale_WeiRaised;\n', '    if(currentStage == Stages.MAINSALE)\n', '      raised = mainSale_WeiRaised;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the sale status.\n', '   * @return True if open, false if closed\n', '   */\n', '  function saleOpen() public timedTransition whenNotPaused returns(bool open) {\n', '    open = ((now >= bonussale_StartDate && now < bonussale_EndDate) ||\n', '           (now >= mainSale_StartDate && now <   mainSale_EndDate)) &&\n', '           (currentStage == Stages.BONUSSALE || currentStage == Stages.MAINSALE);\n', '  }\n', '\n', '\n', '\n', '  /**\n', '    FINALIZATION RELATES FUNCTIONS\n', '  **/\n', '\n', '  /**\n', '   * @dev Checks and distribute the remaining tokens. Finish minting afterwards\n', '   * @return uint256 representing the cap\n', '   */\n', '  function distributeTokens() public onlyOwner atStage(Stages.FINALIZED) {\n', '    require(!distributed);\n', '    distributed = true;\n', '\n', '    uint256 totalTokens = (bonussale_TokesSold.add(mainSale_TokesSold)).mul(HUNDRED_PERCENT).div(TOKENS_ON_SALE_PERCENT); //sold token will represent 60% of all tokens\n', '    for(uint i = 0; i < partners.length; i++){\n', '      uint256 amount = percentages[partners[i]].mul(totalTokens).div(HUNDRED_PERCENT);\n', '      _deliverTokens(partners[i], amount);\n', '    }\n', '    for(uint j = 0; j < partnerFixedAmount.length; j++){\n', '      _deliverTokens(partnerFixedAmount[j], fixedAmounts[partnerFixedAmount[j]]);\n', '    }\n', '    require(SolidToken(token).finishMinting());\n', '  }\n', '\n', '  /**\n', '   * @dev Finalizes the bonussale and sets up the break and public sales\n', '   *\n', '   */\n', '  function finalizePresale() atStage(Stages.BONUSSALE) internal{\n', '    bonussale_EndDate = now;\n', '    mainSale_StartDate = now;\n', '    mainSale_EndDate = mainSale_StartDate + MAINSALE_MAX_DURATION;\n', '    mainSale_TokenCap = mainSale_TokenCap.add(bonussale_TokenCap.sub(bonussale_TokesSold));\n', '    mainSale_Cap = mainSale_Cap.add(bonussale_Cap.sub(weiRaised.sub(changeDue)));\n', '    currentStage = Stages.MAINSALE;\n', '  }\n', '\n', '  /**\n', '   * @dev Finalizes the public sale\n', '   *\n', '   */\n', '  function finalizeSale() atStage(Stages.MAINSALE) internal {\n', '    mainSale_EndDate = now;\n', '    require(SolidToken(token).setTransferEnablingDate(now + TOKEN_RELEASE_DELAY));\n', '    currentStage = Stages.FINALIZED;\n', '  }\n', '\n', '  /**\n', '      OPEN ZEPPELIN OVERRIDES\n', '  **/\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) isWhitelisted(_beneficiary) internal {\n', '    require(_beneficiary == msg.sender);\n', '    require(saleOpen(), "Sale is Closed");\n', '\n', '    // Check for edge cases\n', '    uint256 acceptedValue = _weiAmount;\n', '    uint256 currentCap = getCurrentCap();\n', '    uint256 raised = getRaisedForCurrentStage();\n', '\n', '    if(contributions[_beneficiary].add(acceptedValue) > MAXIMUM_CONTRIBUTION){\n', '      changeDue = (contributions[_beneficiary].add(acceptedValue)).sub(MAXIMUM_CONTRIBUTION);\n', '      acceptedValue = acceptedValue.sub(changeDue);\n', '    }\n', '\n', '    if(raised.add(acceptedValue) >= currentCap){\n', '      changeDue = changeDue.add(raised.add(acceptedValue).sub(currentCap));\n', '      acceptedValue = _weiAmount.sub(changeDue);\n', '      capReached = true;\n', '    }\n', '    require(capReached || contributions[_beneficiary].add(acceptedValue) >= MINIMUM_CONTRIBUTION ,"Contribution below minimum");\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256 amount) {\n', '    amount = (_weiAmount.sub(changeDue)).mul(HUNDRED_PERCENT).div(rate); // Multiplication to account for the decimal cases in the rate\n', '    if(currentStage == Stages.BONUSSALE){\n', '      amount = amount.add(amount.mul(BONUS_PERCENT).div(HUNDRED_PERCENT)); //Add bonus\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    if(currentStage == Stages.MAINSALE && capReached) finalizeSale();\n', '    if(currentStage == Stages.BONUSSALE && capReached) finalizePresale();\n', '\n', '\n', '    //Cleanup temp\n', '    changeDue = 0;\n', '    capReached = false;\n', '\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    uint256 tokenAmount = _getTokenAmount(_weiAmount);\n', '\n', '    if(currentStage == Stages.BONUSSALE){\n', '      bonussale_TokesSold = bonussale_TokesSold.add(tokenAmount);\n', '      bonussale_WeiRaised = bonussale_WeiRaised.add(_weiAmount.sub(changeDue));\n', '    } else {\n', '      mainSale_TokesSold = mainSale_TokesSold.add(tokenAmount);\n', '      mainSale_WeiRaised = mainSale_WeiRaised.add(_weiAmount.sub(changeDue));\n', '    }\n', '\n', '    contributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount).sub(changeDue);\n', '    weiRaised = weiRaised.sub(changeDue);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value.sub(changeDue));\n', '    msg.sender.transfer(changeDue); //Transfer change to _beneficiary\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract Distributable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  bool public distributed;\n', '  //Not all actual addresses\n', '  address[] public partners = [\n', '  0xb68342f2f4dd35d93b88081b03a245f64331c95c,\n', '  0x16CCc1e68D2165fb411cE5dae3556f823249233e,\n', '  0x8E176EDA10b41FA072464C29Eb10CfbbF4adCd05, //Auditors Traning\n', '  0x7c387c57f055993c857067A0feF6E81884656Cb0, //Reserve\n', '  0x4F21c073A9B8C067818113829053b60A6f45a817, //Airdrop\n', '  0xcB4b6B7c4a72754dEb99bB72F1274129D9C0A109, //Alex\n', '  0x7BF84E0244c05A11c57984e8dF7CC6481b8f4258, //Adam\n', '  0x20D2F4Be237F4320386AaaefD42f68495C6A3E81, //JG\n', '  0x12BEA633B83aA15EfF99F68C2E7e14f2709802A9, //Rob S\n', '  0xC1a29a165faD532520204B480D519686B8CB845B, //Nick\n', '  0xf5f5Eb6Ab1411935b321042Fa02a433FcbD029AC, //Rob H\n', '  0xaBff978f03d5ca81B089C5A2Fc321fB8152DC8f1]; //Ed\n', '\n', '  address[] public partnerFixedAmount = [\n', '  0xA482D998DA4d361A6511c6847562234077F09748,\n', '  0xFa92F80f8B9148aDFBacC66aA7bbE6e9F0a0CD0e\n', '  ];\n', '\n', '  mapping(address => uint256) public percentages;\n', '  mapping(address => uint256) public fixedAmounts;\n', '\n', '  constructor() public{\n', '    percentages[0xb68342f2f4dd35d93b88081b03a245f64331c95c] = 40;\n', '    percentages[0x16CCc1e68D2165fb411cE5dae3556f823249233e] = 5;\n', '    percentages[0x8E176EDA10b41FA072464C29Eb10CfbbF4adCd05] = 100; //Auditors Training\n', '    percentages[0x7c387c57f055993c857067A0feF6E81884656Cb0] = 50; //Reserve\n', '    percentages[0x4F21c073A9B8C067818113829053b60A6f45a817] = 10; //Airdrop\n', '\n', '    percentages[0xcB4b6B7c4a72754dEb99bB72F1274129D9C0A109] = 20; //Alex\n', '    percentages[0x7BF84E0244c05A11c57984e8dF7CC6481b8f4258] = 20; //Adam\n', '    percentages[0x20D2F4Be237F4320386AaaefD42f68495C6A3E81] = 20; //JG\n', '    percentages[0x12BEA633B83aA15EfF99F68C2E7e14f2709802A9] = 20; //Rob S\n', '\n', '    percentages[0xC1a29a165faD532520204B480D519686B8CB845B] = 30; //Nick\n', '    percentages[0xf5f5Eb6Ab1411935b321042Fa02a433FcbD029AC] = 30; //Rob H\n', '\n', '    percentages[0xaBff978f03d5ca81B089C5A2Fc321fB8152DC8f1] = 52; //Ed\n', '\n', '    fixedAmounts[0xA482D998DA4d361A6511c6847562234077F09748] = 886228 * 10**16;\n', '    fixedAmounts[0xFa92F80f8B9148aDFBacC66aA7bbE6e9F0a0CD0e] = 697 ether;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting.\n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistedCrowdsale\n', ' * @dev Crowdsale in which only whitelisted users can contribute.\n', ' */\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    isWhitelisted(_beneficiary)\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract SolidToken is MintableToken {\n', '\n', '  string public constant name = "SolidToken";\n', '  string public constant symbol = "SOLID";\n', '  uint8  public constant decimals = 18;\n', '\n', '  uint256 constant private DECIMAL_PLACES = 10 ** 18;\n', '  uint256 constant SUPPLY_CAP = 4000000 * DECIMAL_PLACES;\n', '\n', '  bool public transfersEnabled = false;\n', '  uint256 public transferEnablingDate;\n', '\n', '\n', '  /**\n', '   * @dev Sets the date that the tokens becomes transferable\n', '   * @param date The timestamp of the date\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function setTransferEnablingDate(uint256 date) public onlyOwner returns(bool success) {\n', '    transferEnablingDate = date;\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Enables the token transfer\n', '   */\n', '  function enableTransfer() public {\n', '    require(transferEnablingDate != 0 && now >= transferEnablingDate);\n', '    transfersEnabled = true;\n', '  }\n', '\n', '\n', '\n', '  // OVERRIDES\n', '  /**\n', '   * @dev Function to mint tokens. Overriden to check for supply cap.\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= SUPPLY_CAP);\n', '    require(super.mint(_to, _amount));\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(transfersEnabled, "Tranfers are disabled");\n', '    require(super.transfer(_to, _value));\n', '    return true;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(transfersEnabled, "Tranfers are disabled");\n', '    require(super.transferFrom(_from, _to, _value));\n', '    return true;\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract TokenSale is MintedCrowdsale, WhitelistedCrowdsale, Pausable, Distributable {\n', '\n', '  //Global Variables\n', '  mapping(address => uint256) public contributions;\n', '  Stages public currentStage;\n', '\n', '  //CONSTANTS\n', '  uint256 constant MINIMUM_CONTRIBUTION = 0.5 ether;  //the minimum conbtribution on Wei\n', '  uint256 constant MAXIMUM_CONTRIBUTION = 100 ether;  //the maximum contribution on Wei\n', '  uint256 constant BONUS_PERCENT = 250;                // The percentage of bonus in the fisrt stage, in;\n', '  uint256 constant TOKENS_ON_SALE_PERCENT = 600;       //The percentage of avaiable tokens for sale;\n', '  uint256 constant BONUSSALE_MAX_DURATION = 30 days ;\n', '  uint256 constant MAINSALE_MAX_DURATION = 62 days;\n', '  uint256 constant TOKEN_RELEASE_DELAY = 182 days;\n', '  uint256 constant HUNDRED_PERCENT = 1000;            //100% considering one extra decimal\n', '\n', '  //BONUSSALE VARIABLES\n', '  uint256 public bonussale_Cap = 14400 ether;\n', '  uint256 public bonussale_TokenCap = 1200000 ether;\n', '\n', '  uint256 public bonussale_StartDate;\n', '  uint256 public bonussale_EndDate;\n', '  uint256 public bonussale_TokesSold;\n', '  uint256 public bonussale_WeiRaised;\n', '\n', '  //MAINSALE VARIABLES\n', '  uint256 public mainSale_Cap = 18000 ether;\n', '  uint256 public mainSale_TokenCap = 1200000 ether;\n', '\n', '  uint256 public mainSale_StartDate;\n', '  uint256 public mainSale_EndDate;\n', '  uint256 public mainSale_TokesSold;\n', '  uint256 public mainSale_WeiRaised;\n', '\n', '\n', '  //TEMPORARY VARIABLES - USED TO AVOID OVERRIDING MORE OPEN ZEPPELING FUNCTIONS\n', '  uint256 private changeDue;\n', '  bool private capReached;\n', '\n', '  enum Stages{\n', '    SETUP,\n', '    READY,\n', '    BONUSSALE,\n', '    MAINSALE,\n', '    FINALIZED\n', '  }\n', '\n', '  /**\n', '      MODIFIERS\n', '  **/\n', '\n', '  /**\n', '    @dev Garantee that contract has the desired satge\n', '  **/\n', '  modifier atStage(Stages _currentStage){\n', '      require(currentStage == _currentStage);\n', '      _;\n', '  }\n', '\n', '  /**\n', '    @dev Execute automatically transitions between different Stages\n', '    based on time only\n', '  **/\n', '  modifier timedTransition(){\n', '    if(currentStage == Stages.READY && now >= bonussale_StartDate){\n', '      currentStage = Stages.BONUSSALE;\n', '    }\n', '    if(currentStage == Stages.BONUSSALE && now > bonussale_EndDate){\n', '      finalizePresale();\n', '    }\n', '    if(currentStage == Stages.MAINSALE && now > mainSale_EndDate){\n', '      finalizeSale();\n', '    }\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '      CONSTRUCTOR\n', '  **/\n', '\n', '  /**\n', '    @param _rate The exchange rate(multiplied by 1000) of tokens to eth(1 token = rate * ETH)\n', '    @param _wallet The address that recieves _forwardFunds\n', '    @param _token A token contract. Will be overriden later(needed fot OZ constructor)\n', '  **/\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public Crowdsale(_rate,_wallet,_token) {\n', '    require(_rate == 15);\n', '    currentStage = Stages.SETUP;\n', '  }\n', '\n', '\n', '  /**\n', '      SETUP RELATED FUNCTIONS\n', '  **/\n', '\n', '  /**\n', '   * @dev Sets the initial date and token.\n', '   * @param initialDate A timestamp representing the start of the bonussale\n', '    @param tokenAddress  The address of the deployed SolidToken\n', '   */\n', '  function setupSale(uint256 initialDate, address tokenAddress) onlyOwner atStage(Stages.SETUP) public {\n', '    bonussale_StartDate = initialDate;\n', '    bonussale_EndDate = bonussale_StartDate + BONUSSALE_MAX_DURATION;\n', '    token = ERC20(tokenAddress);\n', '\n', '    require(SolidToken(tokenAddress).totalSupply() == 0, "Tokens have already been distributed");\n', '    require(SolidToken(tokenAddress).owner() == address(this), "Token has the wrong ownership");\n', '\n', '    currentStage = Stages.READY;\n', '  }\n', '\n', '\n', '  /**\n', '      STAGE RELATED FUNCTIONS\n', '  **/\n', '\n', '  /**\n', '   * @dev Returns de ETH cap of the current currentStage\n', '   * @return uint256 representing the cap\n', '   */\n', '  function getCurrentCap() public view returns(uint256 cap){\n', '    cap = bonussale_Cap;\n', '    if(currentStage == Stages.MAINSALE){\n', '      cap = mainSale_Cap;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Returns de ETH cap of the current currentStage\n', '   * @return uint256 representing the raised amount in the stage\n', '   */\n', '  function getRaisedForCurrentStage() public view returns(uint256 raised){\n', '    raised = bonussale_WeiRaised;\n', '    if(currentStage == Stages.MAINSALE)\n', '      raised = mainSale_WeiRaised;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the sale status.\n', '   * @return True if open, false if closed\n', '   */\n', '  function saleOpen() public timedTransition whenNotPaused returns(bool open) {\n', '    open = ((now >= bonussale_StartDate && now < bonussale_EndDate) ||\n', '           (now >= mainSale_StartDate && now <   mainSale_EndDate)) &&\n', '           (currentStage == Stages.BONUSSALE || currentStage == Stages.MAINSALE);\n', '  }\n', '\n', '\n', '\n', '  /**\n', '    FINALIZATION RELATES FUNCTIONS\n', '  **/\n', '\n', '  /**\n', '   * @dev Checks and distribute the remaining tokens. Finish minting afterwards\n', '   * @return uint256 representing the cap\n', '   */\n', '  function distributeTokens() public onlyOwner atStage(Stages.FINALIZED) {\n', '    require(!distributed);\n', '    distributed = true;\n', '\n', '    uint256 totalTokens = (bonussale_TokesSold.add(mainSale_TokesSold)).mul(HUNDRED_PERCENT).div(TOKENS_ON_SALE_PERCENT); //sold token will represent 60% of all tokens\n', '    for(uint i = 0; i < partners.length; i++){\n', '      uint256 amount = percentages[partners[i]].mul(totalTokens).div(HUNDRED_PERCENT);\n', '      _deliverTokens(partners[i], amount);\n', '    }\n', '    for(uint j = 0; j < partnerFixedAmount.length; j++){\n', '      _deliverTokens(partnerFixedAmount[j], fixedAmounts[partnerFixedAmount[j]]);\n', '    }\n', '    require(SolidToken(token).finishMinting());\n', '  }\n', '\n', '  /**\n', '   * @dev Finalizes the bonussale and sets up the break and public sales\n', '   *\n', '   */\n', '  function finalizePresale() atStage(Stages.BONUSSALE) internal{\n', '    bonussale_EndDate = now;\n', '    mainSale_StartDate = now;\n', '    mainSale_EndDate = mainSale_StartDate + MAINSALE_MAX_DURATION;\n', '    mainSale_TokenCap = mainSale_TokenCap.add(bonussale_TokenCap.sub(bonussale_TokesSold));\n', '    mainSale_Cap = mainSale_Cap.add(bonussale_Cap.sub(weiRaised.sub(changeDue)));\n', '    currentStage = Stages.MAINSALE;\n', '  }\n', '\n', '  /**\n', '   * @dev Finalizes the public sale\n', '   *\n', '   */\n', '  function finalizeSale() atStage(Stages.MAINSALE) internal {\n', '    mainSale_EndDate = now;\n', '    require(SolidToken(token).setTransferEnablingDate(now + TOKEN_RELEASE_DELAY));\n', '    currentStage = Stages.FINALIZED;\n', '  }\n', '\n', '  /**\n', '      OPEN ZEPPELIN OVERRIDES\n', '  **/\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) isWhitelisted(_beneficiary) internal {\n', '    require(_beneficiary == msg.sender);\n', '    require(saleOpen(), "Sale is Closed");\n', '\n', '    // Check for edge cases\n', '    uint256 acceptedValue = _weiAmount;\n', '    uint256 currentCap = getCurrentCap();\n', '    uint256 raised = getRaisedForCurrentStage();\n', '\n', '    if(contributions[_beneficiary].add(acceptedValue) > MAXIMUM_CONTRIBUTION){\n', '      changeDue = (contributions[_beneficiary].add(acceptedValue)).sub(MAXIMUM_CONTRIBUTION);\n', '      acceptedValue = acceptedValue.sub(changeDue);\n', '    }\n', '\n', '    if(raised.add(acceptedValue) >= currentCap){\n', '      changeDue = changeDue.add(raised.add(acceptedValue).sub(currentCap));\n', '      acceptedValue = _weiAmount.sub(changeDue);\n', '      capReached = true;\n', '    }\n', '    require(capReached || contributions[_beneficiary].add(acceptedValue) >= MINIMUM_CONTRIBUTION ,"Contribution below minimum");\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256 amount) {\n', '    amount = (_weiAmount.sub(changeDue)).mul(HUNDRED_PERCENT).div(rate); // Multiplication to account for the decimal cases in the rate\n', '    if(currentStage == Stages.BONUSSALE){\n', '      amount = amount.add(amount.mul(BONUS_PERCENT).div(HUNDRED_PERCENT)); //Add bonus\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    if(currentStage == Stages.MAINSALE && capReached) finalizeSale();\n', '    if(currentStage == Stages.BONUSSALE && capReached) finalizePresale();\n', '\n', '\n', '    //Cleanup temp\n', '    changeDue = 0;\n', '    capReached = false;\n', '\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    uint256 tokenAmount = _getTokenAmount(_weiAmount);\n', '\n', '    if(currentStage == Stages.BONUSSALE){\n', '      bonussale_TokesSold = bonussale_TokesSold.add(tokenAmount);\n', '      bonussale_WeiRaised = bonussale_WeiRaised.add(_weiAmount.sub(changeDue));\n', '    } else {\n', '      mainSale_TokesSold = mainSale_TokesSold.add(tokenAmount);\n', '      mainSale_WeiRaised = mainSale_WeiRaised.add(_weiAmount.sub(changeDue));\n', '    }\n', '\n', '    contributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount).sub(changeDue);\n', '    weiRaised = weiRaised.sub(changeDue);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value.sub(changeDue));\n', '    msg.sender.transfer(changeDue); //Transfer change to _beneficiary\n', '  }\n', '\n', '}']
