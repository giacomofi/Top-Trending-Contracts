['pragma solidity ^0.4.24;\n', '\n', '// --> http://lucky9.io <-- Ethereum Lottery.\n', '//\n', '// - 1 of 3 chance to win a portion of the JACKPOT! Winners are selected and payouts made every day @ 18:00 GMT.\n', '//\n', '// - The winnings are calculated on FIFO basis - first purchased winning tickets receive the biggest stake, while\n', '//   the last - smallest. Therefore, be quick to buy the tickets for the day.\n', '//\n', '// - 85% of the ticket price goes to current JACKPOT of the day.\n', '// - The house edge is 15% of the ticket price. This includes the transactions and pay-out costs.\n', '//\n', '// - Smart Contract address: 0x06779e2a75cc5b7ad2c14cf98d88cf2cfcfcc6f1\n', '// - More details at: https://etherscan.io/address/0x06779e2a75cc5b7ad2c14cf98d88cf2cfcfcc6f1\n', '//\n', '// - NOTE: Ensure sufficient gas limit for transaction to succeed. Gas limit 200,000 should be sufficient.\n', '//\n', '// --- GOOD LUCK! ---\n', '//\n', '\n', 'contract lucky9io {\n', '    // Public variables\n', '    uint public house_edge = 0;\n', '    uint public jackpot = 0;\n', '    uint public total_wins_wei = 0;\n', '    uint public total_wins_count = 0;\n', '    uint public total_tickets = 0;\n', '\n', '    // Internal variables\n', '    bool private game_alive = true;\n', '    address private owner = 0x5Bf066c70C2B5e02F1C6723E72e82478Fec41201;\n', '    address[] private entries_addresses;\n', '    bytes32[] private entries_blockhash;\n', '    uint private entries_count = 0;\n', '\n', '    modifier onlyOwner() {\n', '     require(msg.sender == owner, "Sender not authorized.");\n', '     _;\n', '    }\n', '\n', '    function () public payable {\n', '        // Only accept ticket purchases if the game is ON\n', '        require(game_alive == true);\n', '\n', '        // Price of the ticket is 0.009 ETH\n', '        require(msg.value / 1000000000000000 == 9);\n', '\n', '        // House edge (15%) + Jackpot (85%)\n', '        jackpot = jackpot + (msg.value * 85 / 100);\n', '        house_edge = house_edge + (msg.value * 15 / 100);\n', '\n', '        // Owner does not participate in the play, only adds up to the JACKPOT\n', '        if(msg.sender == owner) return;\n', '\n', '        // Add the ticket entry to the daily game\n', '        if(entries_count >= entries_addresses.length) {\n', '            entries_addresses.push(msg.sender);\n', '            entries_blockhash.push(blockhash(block.number));\n', '        } else {\n', '            entries_addresses[entries_count] = msg.sender;\n', '            entries_blockhash[entries_count] = blockhash(block.number);\n', '        }\n', '        entries_count++;\n', '        total_tickets++;\n', '\n', '        return;\n', '    }\n', '\n', '    function pickWinners(uint random_seed) payable public onlyOwner {\n', '        require(entries_count > 0);\n', '\n', '        for (uint i=0; i<entries_count; i++) {\n', '            uint lucky_number = uint(keccak256(abi.encodePacked(abi.encodePacked(i+random_seed+uint(entries_addresses[i]), blockhash(block.number)), entries_blockhash[i])));\n', '\n', '            if(((lucky_number % 99) % 9) % 3 == 1) {\n', '                // We have a WINNER !!!\n', '\n', '                // Calculate the prize money\n', '                uint win_amount = jackpot * 30 / 100;\n', '                if(address(this).balance - house_edge < win_amount) {\n', '                    win_amount = (address(this).balance-house_edge) * 30 / 100;\n', '                }\n', '\n', '                jackpot = jackpot - win_amount;\n', '\n', '                // Set the statistics\n', '                total_wins_count = total_wins_count + 1;\n', '                total_wins_wei = total_wins_wei + win_amount;\n', '\n', '                // Pay the winning\n', '                entries_addresses[i].transfer(win_amount);\n', '            }\n', '        }\n', '\n', '        entries_count = 0;\n', '        return;\n', '    }\n', '\n', '    function getBalance() constant public returns (uint256) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    // Owner functions\n', '    function getEntriesCount() view public onlyOwner returns (uint) {\n', '        return entries_count;\n', '    }\n', '\n', '    function stopGame() public onlyOwner {\n', '        game_alive = false;\n', '        return;\n', '    }\n', '\n', '    function startGame() public onlyOwner {\n', '        game_alive = true;\n', '        return;\n', '    }\n', '\n', '    function transferHouseEdge(uint amount) public onlyOwner payable {\n', '        require(amount <= house_edge);\n', '        require((address(this).balance - amount) > 0);\n', '\n', '        owner.transfer(amount);\n', '        house_edge = house_edge - amount;\n', '    }\n', '}']