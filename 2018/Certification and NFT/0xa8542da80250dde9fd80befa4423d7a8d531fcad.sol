['pragma solidity ^0.4.21;\n', '\n', '\n', 'contract RealEstateCryptoFund {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function balanceOf(address who) public constant returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract Airdrop is Ownable {\n', '  uint256 public airdropAmount;\n', '\n', '  RealEstateCryptoFund public token;\n', '\n', '  mapping(address=>bool) public participated;\n', '\n', '  event TokenAirdrop(address indexed beneficiary, uint256 amount);\n', '\n', '  event AirdropAmountUpdate(uint256 airdropAmount);\n', '  \n', '  function Airdrop(address _tokenAddress) public {\n', '    token = RealEstateCryptoFund (_tokenAddress);\n', '  }\n', '\n', '  function () external payable {\n', '    getTokens(msg.sender);\n', '  }\n', '\n', '  function setAirdropAmount(uint256 _airdropAmount) public onlyOwner {\n', '    require(_airdropAmount > 0);\n', '    airdropAmount = _airdropAmount;\n', '    emit AirdropAmountUpdate(airdropAmount);\n', '  }\n', '\n', '  function getTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase(beneficiary));\n', '    \n', '    token.transfer(beneficiary, airdropAmount);\n', '\n', '    emit TokenAirdrop(beneficiary, airdropAmount);\n', '\n', '    participated[beneficiary] = true;\n', '  }\n', '\n', '  \n', '  function validPurchase(address beneficiary) internal view returns (bool) {\n', '    bool hasParticipated = participated[beneficiary];\n', '    return !hasParticipated;\n', '  }\n', '}\n', '\n', '\n', 'contract RealEstateCryptoFundAirdrop is Airdrop {\n', '  function RealEstateCryptoFundAirdrop (address _tokenAddress) public\n', '    Airdrop(_tokenAddress)\n', '  {\n', '\n', '  }\n', '\n', '  function drainRemainingTokens () public onlyOwner {\n', '    token.transfer(owner, token.balanceOf(this));\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', 'contract RealEstateCryptoFund {\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  function balanceOf(address who) public constant returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract Airdrop is Ownable {\n', '  uint256 public airdropAmount;\n', '\n', '  RealEstateCryptoFund public token;\n', '\n', '  mapping(address=>bool) public participated;\n', '\n', '  event TokenAirdrop(address indexed beneficiary, uint256 amount);\n', '\n', '  event AirdropAmountUpdate(uint256 airdropAmount);\n', '  \n', '  function Airdrop(address _tokenAddress) public {\n', '    token = RealEstateCryptoFund (_tokenAddress);\n', '  }\n', '\n', '  function () external payable {\n', '    getTokens(msg.sender);\n', '  }\n', '\n', '  function setAirdropAmount(uint256 _airdropAmount) public onlyOwner {\n', '    require(_airdropAmount > 0);\n', '    airdropAmount = _airdropAmount;\n', '    emit AirdropAmountUpdate(airdropAmount);\n', '  }\n', '\n', '  function getTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase(beneficiary));\n', '    \n', '    token.transfer(beneficiary, airdropAmount);\n', '\n', '    emit TokenAirdrop(beneficiary, airdropAmount);\n', '\n', '    participated[beneficiary] = true;\n', '  }\n', '\n', '  \n', '  function validPurchase(address beneficiary) internal view returns (bool) {\n', '    bool hasParticipated = participated[beneficiary];\n', '    return !hasParticipated;\n', '  }\n', '}\n', '\n', '\n', 'contract RealEstateCryptoFundAirdrop is Airdrop {\n', '  function RealEstateCryptoFundAirdrop (address _tokenAddress) public\n', '    Airdrop(_tokenAddress)\n', '  {\n', '\n', '  }\n', '\n', '  function drainRemainingTokens () public onlyOwner {\n', '    token.transfer(owner, token.balanceOf(this));\n', '  }\n', '}']
