['pragma solidity ^0.4.18;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        OwnerChanged(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '}\n', '\n', 'interface Token {\n', '    function transfer(address _to, uint256 _value) public;\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    //function transfer(address _to, uint256 _value) public returns (bool success);\n', '    //event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', 'contract BatchTransfer is Ownable {\n', '    using SafeMath for uint256;\n', '    event TransferToken(address indexed from, address indexed to, uint256 value);\n', '    Token public standardToken;\n', '    // List of admins\n', '    mapping (address => bool) public contractAdmins;\n', '    mapping (address => bool) public userTransfered;\n', '    uint256 public totalUserTransfered;\n', '\n', '    function BatchTransfer(address _owner) public {\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '        owner = msg.sender; //for test\n', '    }\n', '\n', '    function setContractToken (address _addressContract) public onlyOwner {\n', '        require(_addressContract != address(0));\n', '        standardToken = Token(_addressContract);\n', '        totalUserTransfered = 0;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return standardToken.balanceOf(_owner);\n', '    }\n', '\n', '    modifier onlyOwnerOrAdmin() {\n', '        require(msg.sender == owner || contractAdmins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Add an contract admin\n', '    */\n', '    function setContractAdmin(address _admin, bool _isAdmin) public onlyOwner {\n', '        contractAdmins[_admin] = _isAdmin;\n', '    }\n', '\n', '    /* Batch token transfer. Used by contract creator to distribute initial tokens to holders */\n', '    function batchTransfer(address[] _recipients, uint256[] _values) external onlyOwnerOrAdmin returns (bool) {\n', '        require( _recipients.length > 0 && _recipients.length == _values.length);\n', '        uint256 total = 0;\n', '        for(uint i = 0; i < _values.length; i++){\n', '            total = total.add(_values[i]);\n', '        }\n', '        require(total <= standardToken.balanceOf(msg.sender));\n', '        for(uint j = 0; j < _recipients.length; j++){\n', '            standardToken.transfer(_recipients[j], _values[j]);\n', '            totalUserTransfered = totalUserTransfered.add(1);\n', '            userTransfered[_recipients[j]] = true;\n', '            TransferToken(msg.sender, _recipients[j], _values[j]);\n', '        }\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        OwnerChanged(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '}\n', '\n', 'interface Token {\n', '    function transfer(address _to, uint256 _value) public;\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    //function transfer(address _to, uint256 _value) public returns (bool success);\n', '    //event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', 'contract BatchTransfer is Ownable {\n', '    using SafeMath for uint256;\n', '    event TransferToken(address indexed from, address indexed to, uint256 value);\n', '    Token public standardToken;\n', '    // List of admins\n', '    mapping (address => bool) public contractAdmins;\n', '    mapping (address => bool) public userTransfered;\n', '    uint256 public totalUserTransfered;\n', '\n', '    function BatchTransfer(address _owner) public {\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '        owner = msg.sender; //for test\n', '    }\n', '\n', '    function setContractToken (address _addressContract) public onlyOwner {\n', '        require(_addressContract != address(0));\n', '        standardToken = Token(_addressContract);\n', '        totalUserTransfered = 0;\n', '    }\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return standardToken.balanceOf(_owner);\n', '    }\n', '\n', '    modifier onlyOwnerOrAdmin() {\n', '        require(msg.sender == owner || contractAdmins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Add an contract admin\n', '    */\n', '    function setContractAdmin(address _admin, bool _isAdmin) public onlyOwner {\n', '        contractAdmins[_admin] = _isAdmin;\n', '    }\n', '\n', '    /* Batch token transfer. Used by contract creator to distribute initial tokens to holders */\n', '    function batchTransfer(address[] _recipients, uint256[] _values) external onlyOwnerOrAdmin returns (bool) {\n', '        require( _recipients.length > 0 && _recipients.length == _values.length);\n', '        uint256 total = 0;\n', '        for(uint i = 0; i < _values.length; i++){\n', '            total = total.add(_values[i]);\n', '        }\n', '        require(total <= standardToken.balanceOf(msg.sender));\n', '        for(uint j = 0; j < _recipients.length; j++){\n', '            standardToken.transfer(_recipients[j], _values[j]);\n', '            totalUserTransfered = totalUserTransfered.add(1);\n', '            userTransfered[_recipients[j]] = true;\n', '            TransferToken(msg.sender, _recipients[j], _values[j]);\n', '        }\n', '        return true;\n', '    }\n', '}']
