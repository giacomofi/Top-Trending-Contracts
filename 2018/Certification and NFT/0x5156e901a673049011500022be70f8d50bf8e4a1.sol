['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'interface TokenInterface {\n', '     function totalSupply() external constant returns (uint);\n', '     function balanceOf(address tokenOwner) external constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) external constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) external returns (bool success);\n', '     function approve(address spender, uint tokens) external returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '     function burn(uint256 _value) external; \n', '     function lockTokensForFs (address F1, address F2) external;\n', '     function lockTokensForAs( address A1, address A2, address A3, address A4, address A5, address A6, address A7, address A8, address A9) external;\n', '     function lockTokensForCs(address C1,address C2, address C3) external;\n', '     function lockTokensForTeamAndReserve(address team) external;\n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '     event Burn(address indexed burner, uint256 value);\n', '}\n', '\n', ' contract DayDayCrowdsale is Ownable{\n', '  using SafeMath for uint256;\n', ' \n', '  // The token being sold\n', '  TokenInterface public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public ratePerWei = 50000;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  uint256 TOKENS_SOLD;\n', '  \n', '  uint256 minimumContributionPrivate = 10 * 10 ** 18; //10 eth is the minimum contribution in private investment phase\n', '  uint256 maximumContributionPrivate = 200 * 10 ** 18; //200 eth is the maximum contribution in private investment phase\n', '  \n', '  uint256 minimumContributionPublic = 1 * 10 ** 18; //1 eth is the minimum contribution in public investment phase\n', '  uint256 maximumContributionPublic = 10 * 10 ** 18; //10 eth is the maximum contribution in public investment phase\n', '  \n', '  uint256 maxTokensToSaleInPrivateSeedPhase1;\n', '  uint256 maxTokensToSaleInPrivateSeedPhase2;\n', '  uint256 maxTokensToSaleInSyndicagteSeed; \n', '  uint256 maxTokensToSaleInPreITOPublic;\n', '  uint256 maxTokensToSaleInITOPublicPhase1;\n', '  uint256 maxTokensToSaleInITOPublicPhase2;\n', '  uint256 maxTokensToSaleInITOPublicPhase3;\n', '  uint256 maxTokensToSale;\n', '  \n', '  uint256 bonusInPrivateSeedPhase1;\n', '  uint256 bonusInPrivateSeedPhase2;\n', '  uint256 bonusInSyndicagteSeed; \n', '  uint256 bonusInPreITOPublic;\n', '  uint256 bonusInITOPublicPhase1;\n', '  uint256 bonusInITOPublicPhase2;\n', '  uint256 bonusInITOPublicPhase3;\n', '  \n', '  bool isCrowdsalePaused = false;\n', '  \n', '  uint256 softCap;\n', '  uint256 hardCap;\n', '  \n', '  mapping(address=>uint256) amountSentByBuyers; \n', '  bool refundToBuyers = false;\n', '  uint256 totalDurationInDays = 166 days;\n', '  uint256 decimals = 2;\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function DayDayCrowdsale(uint256 _startTime, address _wallet, address _tokenAddress) public \n', '  {\n', '    require(_startTime >=now);\n', '    require(_wallet != 0x0);\n', '\n', '    startTime = _startTime;  \n', '    endTime = startTime + totalDurationInDays;\n', '    require(endTime >= startTime);\n', '   \n', '    owner = _wallet;\n', '    \n', '    softCap = 3860*10**18;\n', '    hardCap = 23000*10**18;\n', '    \n', '    maxTokensToSaleInPrivateSeedPhase1 = 199500000 * 10 ** uint256(decimals);\n', '    maxTokensToSaleInPrivateSeedPhase2 = 388500000 * 10 ** uint256(decimals);\n', '    maxTokensToSaleInSyndicagteSeed = 924000000 * 10 ** uint256(decimals); \n', '    maxTokensToSaleInPreITOPublic = 1396500000 * 10 ** uint256(decimals);\n', '    maxTokensToSaleInITOPublicPhase1 = 1790250000 * 10 ** uint256(decimals);\n', '    maxTokensToSaleInITOPublicPhase2 = 2294250000 * 10 ** uint256(decimals);\n', '    maxTokensToSaleInITOPublicPhase3 = 2898000000 * 10 ** uint256(decimals);\n', '    maxTokensToSale = 3000000000 * 10 ** uint256(decimals);\n', '\n', '    bonusInPrivateSeedPhase1 = 90;\n', '    bonusInPrivateSeedPhase2 = 80;\n', '    bonusInSyndicagteSeed = 70; \n', '    bonusInPreITOPublic = 50;\n', '    bonusInITOPublicPhase1 = 25;\n', '    bonusInITOPublicPhase2 = 20;\n', '    bonusInITOPublicPhase3 = 15;\n', '    \n', '    token = TokenInterface(_tokenAddress);\n', '  }\n', '  \n', '  \n', '   // fallback function can be used to buy tokens\n', '   function () public  payable {\n', '     buyTokens(msg.sender);\n', '    }\n', '    \n', '    function determineBonus(uint tokens) internal view returns (uint256 bonus) \n', '    {\n', '        uint256 timeElapsed = now - startTime;\n', '        uint256 timeElapsedInDays = timeElapsed.div(1 days);\n', '        \n', '        //private seed phase 1 (5 days)\n', '        if (timeElapsedInDays <5)\n', '        {\n', '            //bonus application of private seed phase 1\n', '            if (TOKENS_SOLD <maxTokensToSaleInPrivateSeedPhase1)\n', '            {\n', '                bonus = tokens.mul(bonusInPrivateSeedPhase1); \n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPrivateSeedPhase1);\n', '            }\n', '            \n', '            //bonus application of private seed phase 2\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInPrivateSeedPhase1 && TOKENS_SOLD < maxTokensToSaleInPrivateSeedPhase2)\n', '            {\n', '                bonus = tokens.mul(bonusInPrivateSeedPhase2);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPrivateSeedPhase2);\n', '            } \n', '            \n', '            //bonus application of SyndicagteSeed\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInPrivateSeedPhase2 && TOKENS_SOLD < maxTokensToSaleInSyndicagteSeed)\n', '            {\n', '                bonus = tokens.mul(bonusInSyndicagteSeed);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInSyndicagteSeed);\n', '            }\n', '            \n', '            //bonus application of PreITOPublic phase\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInSyndicagteSeed && TOKENS_SOLD < maxTokensToSaleInPreITOPublic)\n', '            {\n', '                bonus = tokens.mul(bonusInPreITOPublic);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreITOPublic);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 1\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInPreITOPublic && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase1)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase1);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase1);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 2\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase2);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 3\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase3);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\n', '            }\n', '            else \n', '            {\n', '                bonus = 0;\n', '            }\n', '        }\n', '        \n', '        //private seed phase 2 (10 days)\n', '        else if (timeElapsedInDays >= 5 && timeElapsedInDays <16)\n', '        {\n', '            //bonus application of private seed phase 2\n', '            if (TOKENS_SOLD >= maxTokensToSaleInPrivateSeedPhase1 && TOKENS_SOLD < maxTokensToSaleInPrivateSeedPhase2)\n', '            {\n', '                bonus = tokens.mul(bonusInPrivateSeedPhase2);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPrivateSeedPhase2);\n', '            } \n', '            \n', '            //bonus application of SyndicagteSeed\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInPrivateSeedPhase2 && TOKENS_SOLD < maxTokensToSaleInSyndicagteSeed)\n', '            {\n', '                bonus = tokens.mul(bonusInSyndicagteSeed);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInSyndicagteSeed);\n', '            }\n', '            \n', '            //bonus application of PreITOPublic phase\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInSyndicagteSeed && TOKENS_SOLD < maxTokensToSaleInPreITOPublic)\n', '            {\n', '                bonus = tokens.mul(bonusInPreITOPublic);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreITOPublic);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 1\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInPreITOPublic && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase1)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase1);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase1);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 2\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase2);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 3\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase3);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\n', '            }\n', '            else \n', '            {\n', '                bonus = 0;\n', '            }\n', '        }\n', '        \n', '        //Syndicagte phase (19 days) \n', '        else if (timeElapsedInDays >= 16 && timeElapsedInDays<36)\n', '        {\n', '            //bonus application of SyndicagteSeed\n', '            if (TOKENS_SOLD >= maxTokensToSaleInPrivateSeedPhase2 && TOKENS_SOLD < maxTokensToSaleInSyndicagteSeed)\n', '            {\n', '                bonus = tokens.mul(bonusInSyndicagteSeed);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInSyndicagteSeed);\n', '            }\n', '            \n', '            //bonus application of PreITOPublic phase\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInSyndicagteSeed && TOKENS_SOLD < maxTokensToSaleInPreITOPublic)\n', '            {\n', '                bonus = tokens.mul(bonusInPreITOPublic);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreITOPublic);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 1\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInPreITOPublic && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase1)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase1);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase1);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 2\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase2);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 3\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase3);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\n', '            }\n', '            else \n', '            {\n', '                bonus = 0;\n', '            }\n', '        }\n', '        \n', '        // Pause before the public phases\n', '        else if (timeElapsedInDays >= 36 && timeElapsedInDays<103)\n', '        {\n', '            //67 days break\n', '            revert();  //no sale during this time, so revert this transaction\n', '        }\n', '        \n', '        // Pre-ITO public phase (5 days)\n', '        else if (timeElapsedInDays >= 103 && timeElapsedInDays<109)\n', '        {\n', '            //bonus application of PreITOPublic phase\n', '            if (TOKENS_SOLD >= maxTokensToSaleInSyndicagteSeed && TOKENS_SOLD < maxTokensToSaleInPreITOPublic)\n', '            {\n', '                bonus = tokens.mul(bonusInPreITOPublic);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInPreITOPublic);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 1\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInPreITOPublic && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase1)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase1);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase1);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 2\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase2);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 3\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase3);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\n', '            }\n', '            else \n', '            {\n', '                bonus = 0;\n', '            }\n', '        }\n', '        \n', '        // Public ITO phase 1 (15 days)\n', '        else if (timeElapsedInDays >= 109 && timeElapsedInDays<125)\n', '        {\n', '            //bonus application of ITOPublic phase 1\n', '            if (TOKENS_SOLD >= maxTokensToSaleInPreITOPublic && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase1)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase1);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase1);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 2\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase2);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 3\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase3);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\n', '            }\n', '            else \n', '            {\n', '                bonus = 0;\n', '            }\n', '        }\n', '        \n', '        // Public ITO phase 2 (20 days)\n', '        else if (timeElapsedInDays >= 125 && timeElapsedInDays<146)\n', '        {\n', '            //bonus application of ITOPublic phase 2\n', '            if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase1 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase2)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase2);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase2);\n', '            }\n', '            \n', '            //bonus application of ITOPublic phase 3\n', '            else if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase3);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\n', '            }\n', '            else \n', '            {\n', '                bonus = 0;\n', '            }\n', '        }\n', '        \n', '        // Public ITO phase 3 (20 days)\n', '        else if (timeElapsedInDays >= 146 && timeElapsedInDays<167)\n', '        {\n', '            //bonus application of ITOPublic phase 3\n', '            if (TOKENS_SOLD >= maxTokensToSaleInITOPublicPhase2 && TOKENS_SOLD < maxTokensToSaleInITOPublicPhase3)\n', '            {\n', '                bonus = tokens.mul(bonusInITOPublicPhase3);\n', '                bonus = bonus.div(100);\n', '                require (TOKENS_SOLD.add(tokens.add(bonus)) <= maxTokensToSaleInITOPublicPhase3);\n', '            }\n', '            else \n', '            {\n', '                bonus = 0;\n', '            }\n', '        }\n', '        \n', '        else \n', '        {\n', '            bonus = 0;\n', '        }\n', '    }\n', '\n', '  // low level token purchase function\n', '  \n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(isCrowdsalePaused == false);\n', '    require(validPurchase());\n', '    \n', '    if (isPrivateInvestmentPhase())\n', '        require(msg.value>= minimumContributionPrivate && msg.value<=maximumContributionPrivate);\n', '    else\n', '        require(msg.value>= minimumContributionPublic && msg.value<=maximumContributionPublic);\n', '    \n', '    require(TOKENS_SOLD<maxTokensToSale);\n', '   \n', '    uint256 weiAmount = msg.value;\n', '    \n', '    // calculate token amount to be created\n', '    uint weiAmountForTokens = weiAmount.div(10**16);\n', '    uint256 tokens = weiAmountForTokens.mul(ratePerWei);\n', '    uint256 bonus = determineBonus(tokens);\n', '    tokens = tokens.add(bonus);\n', '    require(TOKENS_SOLD.add(tokens)<=maxTokensToSale);\n', '    \n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    \n', '    token.transfer(beneficiary,tokens);\n', '    amountSentByBuyers[beneficiary] = weiAmount;\n', '    emit TokenPurchase(owner, beneficiary, weiAmount, tokens);\n', '    TOKENS_SOLD = TOKENS_SOLD.add(tokens);\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '  \n', '   /**\n', '    * function to change the end timestamp of the ico\n', '    * can only be called by owner wallet\n', '    **/\n', '    function changeEndDate(uint256 endTimeUnixTimestamp) public onlyOwner{\n', '        endTime = endTimeUnixTimestamp;\n', '    }\n', '    \n', '    /**\n', '    * function to change the start timestamp of the ico\n', '    * can only be called by owner wallet\n', '    **/\n', '    \n', '    function changeStartDate(uint256 startTimeUnixTimestamp) public onlyOwner{\n', '        startTime = startTimeUnixTimestamp;\n', '    }\n', '    \n', '    /**\n', '    * function to change the rate of tokens\n', '    * can only be called by owner wallet\n', '    **/\n', '    function setPriceRate(uint256 newPrice) public onlyOwner {\n', '        ratePerWei = newPrice;\n', '    }\n', '    \n', '    function changeMinimumContributionForPrivatePhase(uint256 minContribution) public onlyOwner{\n', '        minimumContributionPrivate = minContribution.mul(10 ** 15);\n', '    }\n', '    \n', '    function changeMinimumContributionForPublicPhase(uint256 minContribution) public onlyOwner{\n', '        minimumContributionPublic = minContribution.mul(10 ** 15);\n', '    }\n', '    \n', '     function changeMaximumContributionForPrivatePhase(uint256 minContribution) public onlyOwner{\n', '        maximumContributionPrivate = minContribution.mul(10 ** 15);\n', '    }\n', '    \n', '     function changeMaximumContributionForPublicPhase(uint256 minContribution) public onlyOwner{\n', '        maximumContributionPublic = minContribution.mul(10 ** 15);\n', '    }\n', '     /**\n', '     * function to pause the crowdsale \n', '     * can only be called from owner wallet\n', '     **/\n', '     \n', '    function pauseCrowdsale() public onlyOwner {\n', '        isCrowdsalePaused = true;\n', '    }\n', '\n', '    /**\n', '     * function to resume the crowdsale if it is paused\n', '     * can only be called from owner wallet\n', '     **/ \n', '    function resumeCrowdsale() public onlyOwner {\n', '        isCrowdsalePaused = false;\n', '    }\n', '    \n', '    /**\n', '     * function to change the soft cap of the contract \n', '     **/\n', '    function changeSoftCap(uint256 softCapEthers) public onlyOwner\n', '    {\n', '        softCap = softCapEthers.mul(10**18);\n', '    }\n', '    \n', '    /**\n', '     * function to change the hard cap of the contract \n', '     **/\n', '    function changeHardCap(uint256 hardCapEthers) public onlyOwner\n', '    {\n', '        hardCap = hardCapEthers.mul(10**18);\n', '    }\n', '     \n', '     // ------------------------------------------------------------------------\n', '     // Remaining tokens for sale\n', '     // ------------------------------------------------------------------------\n', '     function remainingTokensForSale() public constant returns (uint) {\n', '         return maxTokensToSale.sub(TOKENS_SOLD);\n', '     }\n', '    \n', '     function isPrivateInvestmentPhase() internal constant returns (bool)\n', '     {\n', '         uint timePassed = now.sub(startTime);\n', '         if (timePassed<=30 days)\n', '            return true;\n', '        return false;\n', '     }\n', '     \n', '     function burnUnsoldTokens() public onlyOwner \n', '     {\n', '         require(hasEnded());\n', '         uint value = remainingTokensForSale();\n', '         token.burn(value);\n', '         TOKENS_SOLD = maxTokensToSale;\n', '     }\n', '    \n', '     function tokensAllocatedForFs(address F1, address F2) public onlyOwner\n', '     {\n', '         token.transfer(F1,90000000 * 10 ** uint256(decimals));\n', '         token.transfer(F2,60000000 * 10 ** uint256(decimals));\n', '         token.lockTokensForFs(F1,F2);\n', '         \n', '     }\n', '     function tokensAllocatedForAs( address A1, address A2, \n', '                                    address A3, address A4,\n', '                                    address A5, address A6,\n', '                                    address A7, address A8,\n', '                                    address A9) public onlyOwner\n', '     {\n', '         token.transfer(A1,90000000 * 10 ** uint256(decimals));\n', '         token.transfer(A2,60000000 * 10 ** uint256(decimals));\n', '         token.transfer(A3,30000000 * 10 ** uint256(decimals));\n', '         token.transfer(A4,60000000 * 10 ** uint256(decimals));\n', '         token.transfer(A5,60000000 * 10 ** uint256(decimals));\n', '         token.transfer(A6,15000000 * 10 ** uint256(decimals));\n', '         token.transfer(A7,15000000 * 10 ** uint256(decimals));\n', '         token.transfer(A8,15000000 * 10 ** uint256(decimals));\n', '         token.transfer(A9,15000000 * 10 ** uint256(decimals));\n', '         token.lockTokensForAs(A1,A2,A3,A4,A5,A6,A7,A8,A9);\n', '     }\n', '     function tokensAllocatedForCs(address C1, address C2, address C3) public onlyOwner\n', '     {\n', '         token.transfer(C1,2500000 * 10 ** uint256(decimals));\n', '         token.transfer(C2,1000000 * 10 ** uint256(decimals));\n', '         token.transfer(C3,1500000 * 10 ** uint256(decimals));\n', '         token.lockTokensForCs(C1,C2,C3);\n', '     }\n', '      function tokensAllocatedForTeamAndReserve(address team) public onlyOwner\n', '     {\n', '         token.transfer(team,63000000 * 10 ** uint256(decimals));\n', '         token.lockTokensForTeamAndReserve(team);\n', '     }\n', '     \n', '     function refundToBuyersIfSoftCapNotReached() public payable onlyOwner\n', '     {\n', '         require(hasEnded());\n', '         require(weiRaised<softCap);\n', '         require(msg.value>=weiRaised);\n', '         refundToBuyers = true;\n', '     }\n', '     \n', '     function getRefund() public \n', '     {\n', '         require(refundToBuyers == true);\n', '         if (amountSentByBuyers[msg.sender] > 0)\n', '            msg.sender.transfer(amountSentByBuyers[msg.sender]);\n', '     }\n', '}']