['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/ParsecReferralTracking.sol\n', '\n', 'contract ParsecReferralTracking {\n', '  mapping (address => address) public referrer;\n', '\n', '  event ReferrerUpdated(address indexed _referee, address indexed _referrer);\n', '\n', '  function _updateReferrerFor(address _referee, address _referrer) internal {\n', '    if (_referrer != address(0) && _referrer != _referee) {\n', '      referrer[_referee] = _referrer;\n', '      emit ReferrerUpdated(_referee, _referrer);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/ParsecShipInfo.sol\n', '\n', 'contract ParsecShipInfo {\n', '  uint256 public constant TOTAL_SHIP = 900;\n', '  uint256 public constant TOTAL_ARK = 100;\n', '  uint256 public constant TOTAL_HAWKING = 400;\n', '  uint256 public constant TOTAL_SATOSHI = 400;\n', '\n', '  uint256 public constant NAME_NOT_AVAILABLE = 0;\n', '  uint256 public constant NAME_ARK = 1;\n', '  uint256 public constant NAME_HAWKING = 2;\n', '  uint256 public constant NAME_SATOSHI = 3;\n', '\n', '  uint256 public constant TYPE_NOT_AVAILABLE = 0;\n', '  uint256 public constant TYPE_EXPLORER_FREIGHTER = 1;\n', '  uint256 public constant TYPE_EXPLORER = 2;\n', '  uint256 public constant TYPE_FREIGHTER = 3;\n', '\n', '  uint256 public constant COLOR_NOT_AVAILABLE = 0;\n', '  uint256 public constant COLOR_CUSTOM = 1;\n', '  uint256 public constant COLOR_BLACK = 2;\n', '  uint256 public constant COLOR_BLUE = 3;\n', '  uint256 public constant COLOR_BROWN = 4;\n', '  uint256 public constant COLOR_GOLD = 5;\n', '  uint256 public constant COLOR_GREEN = 6;\n', '  uint256 public constant COLOR_GREY = 7;\n', '  uint256 public constant COLOR_PINK = 8;\n', '  uint256 public constant COLOR_RED = 9;\n', '  uint256 public constant COLOR_SILVER = 10;\n', '  uint256 public constant COLOR_WHITE = 11;\n', '  uint256 public constant COLOR_YELLOW = 12;\n', '\n', '  function getShip(uint256 _shipId)\n', '    external\n', '    pure\n', '    returns (\n', '      uint256 /* _name */,\n', '      uint256 /* _type */,\n', '      uint256 /* _color */\n', '    )\n', '  {\n', '    return (\n', '      _getShipName(_shipId),\n', '      _getShipType(_shipId),\n', '      _getShipColor(_shipId)\n', '    );\n', '  }\n', '\n', '  function _getShipName(uint256 _shipId) internal pure returns (uint256 /* _name */) {\n', '    if (_shipId < 1) {\n', '      return NAME_NOT_AVAILABLE;\n', '    } else if (_shipId <= TOTAL_ARK) {\n', '      return NAME_ARK;\n', '    } else if (_shipId <= TOTAL_ARK + TOTAL_HAWKING) {\n', '      return NAME_HAWKING;\n', '    } else if (_shipId <= TOTAL_SHIP) {\n', '      return NAME_SATOSHI;\n', '    } else {\n', '      return NAME_NOT_AVAILABLE;\n', '    }\n', '  }\n', '\n', '  function _getShipType(uint256 _shipId) internal pure returns (uint256 /* _type */) {\n', '    if (_shipId < 1) {\n', '      return TYPE_NOT_AVAILABLE;\n', '    } else if (_shipId <= TOTAL_ARK) {\n', '      return TYPE_EXPLORER_FREIGHTER;\n', '    } else if (_shipId <= TOTAL_ARK + TOTAL_HAWKING) {\n', '      return TYPE_EXPLORER;\n', '    } else if (_shipId <= TOTAL_SHIP) {\n', '      return TYPE_FREIGHTER;\n', '    } else {\n', '      return TYPE_NOT_AVAILABLE;\n', '    }\n', '  }\n', '\n', '  function _getShipColor(uint256 _shipId) internal pure returns (uint256 /* _color */) {\n', '    if (_shipId < 1) {\n', '      return COLOR_NOT_AVAILABLE;\n', '    } else if (_shipId == 1) {\n', '      return COLOR_CUSTOM;\n', '    } else if (_shipId <= 23) {\n', '      return COLOR_BLACK;\n', '    } else if (_shipId <= 37) {\n', '      return COLOR_BLUE;\n', '    } else if (_shipId <= 42) {\n', '      return COLOR_BROWN;\n', '    } else if (_shipId <= 45) {\n', '      return COLOR_GOLD;\n', '    } else if (_shipId <= 49) {\n', '      return COLOR_GREEN;\n', '    } else if (_shipId <= 64) {\n', '      return COLOR_GREY;\n', '    } else if (_shipId <= 67) {\n', '      return COLOR_PINK;\n', '    } else if (_shipId <= 77) {\n', '      return COLOR_RED;\n', '    } else if (_shipId <= 83) {\n', '      return COLOR_SILVER;\n', '    } else if (_shipId <= 93) {\n', '      return COLOR_WHITE;\n', '    } else if (_shipId <= 100) {\n', '      return COLOR_YELLOW;\n', '    } else if (_shipId <= 140) {\n', '      return COLOR_BLACK;\n', '    } else if (_shipId <= 200) {\n', '      return COLOR_BLUE;\n', '    } else if (_shipId <= 237) {\n', '      return COLOR_BROWN;\n', '    } else if (_shipId <= 247) {\n', '      return COLOR_GOLD;\n', '    } else if (_shipId <= 330) {\n', '      return COLOR_GREEN;\n', '    } else if (_shipId <= 370) {\n', '      return COLOR_GREY;\n', '    } else if (_shipId <= 380) {\n', '      return COLOR_PINK;\n', '    } else if (_shipId <= 440) {\n', '      return COLOR_RED;\n', '    } else if (_shipId <= 460) {\n', '      return COLOR_SILVER;\n', '    } else if (_shipId <= 500) {\n', '      return COLOR_WHITE;\n', '    } else if (_shipId <= 540) {\n', '      return COLOR_BLACK;\n', '    } else if (_shipId <= 600) {\n', '      return COLOR_BLUE;\n', '    } else if (_shipId <= 637) {\n', '      return COLOR_BROWN;\n', '    } else if (_shipId <= 647) {\n', '      return COLOR_GOLD;\n', '    } else if (_shipId <= 730) {\n', '      return COLOR_GREEN;\n', '    } else if (_shipId <= 770) {\n', '      return COLOR_GREY;\n', '    } else if (_shipId <= 780) {\n', '      return COLOR_PINK;\n', '    } else if (_shipId <= 840) {\n', '      return COLOR_RED;\n', '    } else if (_shipId <= 860) {\n', '      return COLOR_SILVER;\n', '    } else if (_shipId <= TOTAL_SHIP) {\n', '      return COLOR_WHITE;\n', '    } else {\n', '      return COLOR_NOT_AVAILABLE;\n', '    }\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/ParsecShipPricing.sol\n', '\n', 'contract ParsecShipPricing {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public constant TOTAL_PARSEC_CREDIT_SUPPLY = 30856775800000000;\n', '\n', '  // Starting with 30,856,775,800,000,000 (total supply of Parsec Credit, including 6 decimals),\n', '  // each time we multiply the number we have with 0.9995. These are results:\n', '  // 1: 30841347412100000\n', '  // 2: 30825926738393950\n', '  // 4: 30795108518137240.6484875\n', '  // 8: 30733564478368113.80826526098454678\n', '  // 16: 30610845140405444.1555510982248498\n', '  // 32: 30366874565355062.01905741115048326\n', '  // 64: 29884751305352135.55319509943479229\n', '  // 128: 28943346718121670.05118183115407839\n', '  // 256: 27148569399315026.57115329246779589\n', '  // 512: 23885995905943752.64119680273916152\n', '  // 1024: 18489968106737895.55394216521160879\n', '  // 2048: 11079541258752787.70222144092290365\n', '  // 4096: 3978258626243293.616409580784511455\n', '  // 8192: 512903285808596.2996925781077178762\n', '  // 16384: 8525510970373.470528186667481043039\n', '  // 32768: 2355538951.219861249087266462563245\n', '  // 65536: 179.8167049816644768546906209889074\n', '  // 75918: 0.9996399085102312393019871402909541\n', '\n', '  uint256[18] private _multipliers = [\n', '    30841347412100000,\n', '    30825926738393950,\n', '    307951085181372406484875,\n', '    3073356447836811380826526098454678,\n', '    306108451404054441555510982248498,\n', '    3036687456535506201905741115048326,\n', '    2988475130535213555319509943479229,\n', '    2894334671812167005118183115407839,\n', '    2714856939931502657115329246779589,\n', '    2388599590594375264119680273916152,\n', '    1848996810673789555394216521160879,\n', '    1107954125875278770222144092290365,\n', '    3978258626243293616409580784511455,\n', '    5129032858085962996925781077178762,\n', '    8525510970373470528186667481043039,\n', '    2355538951219861249087266462563245,\n', '    1798167049816644768546906209889074\n', '  ];\n', '\n', '  uint256[18] private _decimals = [\n', '    0, 0, 7, 17, 16,\n', '    17, 17, 17, 17, 17,\n', '    17, 17, 18, 19, 21,\n', '    24, 31\n', '  ];\n', '\n', '  function _getShipPrice(\n', '    uint256 _initialPrice,\n', '    uint256 _minutesPassed\n', '  )\n', '    internal\n', '    view\n', '    returns (uint256 /* _price */)\n', '  {\n', '    require(\n', '      _initialPrice <= TOTAL_PARSEC_CREDIT_SUPPLY,\n', '      "Initial ship price must not be greater than total Parsec Credit."\n', '    );\n', '\n', '    if (_minutesPassed >> _multipliers.length > 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 _price = _initialPrice;\n', '\n', '    for (uint256 _powerOfTwo = 0; _powerOfTwo < _multipliers.length; _powerOfTwo++) {\n', '      if (_minutesPassed >> _powerOfTwo & 1 > 0) {\n', '        _price = _price\n', '          .mul(_multipliers[_powerOfTwo])\n', '          .div(TOTAL_PARSEC_CREDIT_SUPPLY)\n', '          .div(10 ** _decimals[_powerOfTwo]);\n', '      }\n', '    }\n', '\n', '    return _price;\n', '  }\n', '}\n', '\n', '// File: contracts/TokenRecipient.sol\n', '\n', 'interface TokenRecipient {\n', '  function receiveApproval(\n', '    address _from,\n', '    uint256 _value,\n', '    address _token,\n', '    bytes _extraData\n', '  )\n', '    external;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '   *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '   *  than the magic value MUST result in the transaction being reverted.\n', '   *  Note: the contract address is always the message sender.\n', '   * @param _from The sending address\n', '   * @param _tokenId The NFT identifier which is being transfered\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  /**\n', '   * @dev Guarantees msg.sender is owner of the given token\n', '   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '   */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '   * @param _tokenId uint256 ID of the token to validate\n', '   */\n', '  modifier canTransfer(uint256 _tokenId) {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existance of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * @dev The zero address indicates there is no approved address.\n', '   * @dev There can only be one approved address per token at a given time.\n', '   * @dev Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      emit Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for a the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    canTransfer(_tokenId)\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    canTransfer(_tokenId)\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n', '    address owner = ownerOf(_tokenId);\n', '    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * @dev Reverts if the token does not exist\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    emit Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * @dev Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '      emit Approval(_owner, address(0), _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * @dev The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  function ERC721Token(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() public view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() public view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * @dev Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * @dev Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * @dev Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to address the beneficiary that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '\n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * @dev Reverts if the token does not exist\n', '   * @param _owner owner of the token to burn\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.sub(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ParsecShipAuction.sol\n', '\n', '// solium-disable-next-line lbrace\n', 'contract ParsecShipAuction is\n', '  ERC721Token("Parsec Initial Ship", "PIS"),\n', '  ParsecShipInfo,\n', '  ParsecShipPricing,\n', '  ParsecReferralTracking,\n', '  Ownable,\n', '  Pausable\n', '{\n', '  uint256 public constant PARSEC_CREDIT_DECIMALS = 6;\n', '\n', '  uint256 public constant FIRST_AUCTIONS_MINIMUM_RAISE = 2 * uint256(10) ** (5 + PARSEC_CREDIT_DECIMALS);\n', '\n', '  uint256 public constant SECOND_AUCTIONS_INITIAL_PERCENTAGE = 50;\n', '  uint256 public constant LATER_AUCTIONS_INITIAL_PERCENTAGE = 125;\n', '\n', '  uint256 public constant REFERRAL_REWARD_PERCENTAGE = 20;\n', '\n', '  ERC20 public parsecCreditContract = ERC20(0x4373D59176891dA98CA6faaa86bd387fc9e12b6E);\n', '\n', '  // May 15th, 2018 – 16:00 UTC\n', '  uint256 public firstAuctionsStartDate = 1526400000;\n', '\n', '  uint256 public firstAuctionsInitialDuration = 48 hours;\n', '  uint256 public firstAuctionsExtendableDuration = 12 hours;\n', '\n', '  uint256 public firstAuctionsExtendedChunkDuration = 1 hours;\n', '  uint256 public firstAuctionsExtendedDuration = 0;\n', '\n', '  uint256 public firstAuctionsHighestBid = uint256(10) ** (6 + PARSEC_CREDIT_DECIMALS);\n', '  address public firstAuctionsHighestBidder = address(0);\n', '  address public firstAuctionsReferrer;\n', '  bool public firstAuctionConcluded = false;\n', '\n', '  uint256 private _lastAuctionedShipId = 0;\n', '  uint256 private _lastAuctionsWinningBid;\n', '  uint256 private _lastAuctionWinsDate;\n', '\n', '  event FirstShipBidded(\n', '    address indexed _bidder,\n', '    uint256 _value,\n', '    address indexed _referrer\n', '  );\n', '\n', '  event LaterShipBidded(\n', '    uint256 indexed _shipId,\n', '    address indexed _winner,\n', '    uint256 _value,\n', '    address indexed _referrer\n', '  );\n', '\n', '  function receiveApproval(\n', '    address _from,\n', '    uint256 _value,\n', '    address _token,\n', '    bytes _extraData\n', '  )\n', '    external\n', '    whenNotPaused\n', '  {\n', '    require(_token == address(parsecCreditContract));\n', '    require(_extraData.length == 64);\n', '\n', '    uint256 _shipId;\n', '    address _referrer;\n', '\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      _shipId := calldataload(164)\n', '      _referrer := calldataload(196)\n', '    }\n', '\n', '    if (_shipId == 1) {\n', '      _bidFirstShip(_value, _from, _referrer);\n', '    } else {\n', '      _bidLaterShip(_shipId, _value, _from, _referrer);\n', '    }\n', '  }\n', '\n', '  function getFirstAuctionsRemainingDuration() external view returns (uint256 /* _duration */) {\n', '    uint256 _currentDate = now;\n', '    uint256 _endDate = getFirstAuctionsEndDate();\n', '\n', '    if (_endDate >= _currentDate) {\n', '      return _endDate - _currentDate;\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function concludeFirstAuction() external {\n', '    require(getLastAuctionedShipId() >= 1, "The first auction must have ended.");\n', '    require(!firstAuctionConcluded, "The first auction must not have been concluded.");\n', '\n', '    firstAuctionConcluded = true;\n', '\n', '    if (firstAuctionsHighestBidder != address(0)) {\n', '      _mint(firstAuctionsHighestBidder, 1);\n', '\n', '      if (firstAuctionsReferrer != address(0)) {\n', '        _sendTo(\n', '          firstAuctionsReferrer,\n', '          firstAuctionsHighestBid.mul(REFERRAL_REWARD_PERCENTAGE).div(100)\n', '        );\n', '      }\n', '    } else {\n', '      _mint(owner, 1);\n', '    }\n', '  }\n', '\n', '  function getFirstAuctionsExtendableStartDate() public view returns (uint256 /* _extendableStartDate */) {\n', '    return firstAuctionsStartDate\n', '      // solium-disable indentation\n', '      .add(firstAuctionsInitialDuration)\n', '      .sub(firstAuctionsExtendableDuration);\n', '      // solium-enable indentation\n', '  }\n', '\n', '  function getFirstAuctionsEndDate() public view returns (uint256 /* _endDate */) {\n', '    return firstAuctionsStartDate\n', '      .add(firstAuctionsInitialDuration)\n', '      .add(firstAuctionsExtendedDuration);\n', '  }\n', '\n', '  function getLastAuctionedShipId() public view returns (uint256 /* _shipId */) {\n', '    if (_lastAuctionedShipId == 0 && now >= getFirstAuctionsEndDate()) {\n', '      return 1;\n', '    } else {\n', '      return _lastAuctionedShipId;\n', '    }\n', '  }\n', '\n', '  function getLastAuctionsWinningBid() public view returns (uint256 /* _value */) {\n', '    if (_lastAuctionedShipId == 0 && now >= getFirstAuctionsEndDate()) {\n', '      return firstAuctionsHighestBid;\n', '    } else {\n', '      return _lastAuctionsWinningBid;\n', '    }\n', '  }\n', '\n', '  function getLastAuctionWinsDate() public view returns (uint256 /* _date */) {\n', '    if (_lastAuctionedShipId == 0) {\n', '      uint256 _firstAuctionsEndDate = getFirstAuctionsEndDate();\n', '\n', '      if (now >= _firstAuctionsEndDate) {\n', '        return _firstAuctionsEndDate;\n', '      }\n', '    }\n', '\n', '    return _lastAuctionWinsDate;\n', '  }\n', '\n', '  function getShipPrice(uint256 _shipId) public view returns (uint256 /* _price */) {\n', '    uint256 _minutesPassed = now\n', '      .sub(getLastAuctionWinsDate())\n', '      .div(1 minutes);\n', '\n', '    return getShipPrice(_shipId, _minutesPassed);\n', '  }\n', '\n', '  function getShipPrice(uint256 _shipId, uint256 _minutesPassed) public view returns (uint256 /* _price */) {\n', '    require(_shipId >= 2, "Ship ID must be greater than or equal to 2.");\n', '    require(_shipId <= TOTAL_SHIP, "Ship ID must be smaller than or equal to total number of ship.");\n', '    require(_shipId == getLastAuctionedShipId().add(1), "Can only get price of the ship which is being auctioned.");\n', '\n', '    uint256 _initialPrice = getLastAuctionsWinningBid();\n', '\n', '    if (_shipId == 2) {\n', '      _initialPrice = _initialPrice\n', '        .mul(SECOND_AUCTIONS_INITIAL_PERCENTAGE)\n', '        .div(100);\n', '    } else {\n', '      _initialPrice = _initialPrice\n', '        .mul(LATER_AUCTIONS_INITIAL_PERCENTAGE)\n', '        .div(100);\n', '    }\n', '\n', '    return _getShipPrice(_initialPrice, _minutesPassed);\n', '  }\n', '\n', '  function _bidFirstShip(uint256 _value, address _bidder, address _referrer) internal {\n', '    require(now >= firstAuctionsStartDate, "Auction of the first ship is not started yet.");\n', '    require(now < getFirstAuctionsEndDate(), "Auction of the first ship has ended.");\n', '\n', '    require(_value >= firstAuctionsHighestBid.add(FIRST_AUCTIONS_MINIMUM_RAISE), "Not enough Parsec Credit.");\n', '\n', '    _updateReferrerFor(_bidder, _referrer);\n', '    _receiveFrom(_bidder, _value);\n', '\n', '    if (firstAuctionsHighestBidder != address(0)) {\n', '      _sendTo(firstAuctionsHighestBidder, firstAuctionsHighestBid);\n', '    }\n', '\n', '    firstAuctionsHighestBid = _value;\n', '    firstAuctionsHighestBidder = _bidder;\n', '\n', '    // To prevent the first auction&#39;s referrer being overriden,\n', '    // since later auction&#39;s bidders could be the same as the first auction&#39;s bidder\n', '    // but their referrers could be different.\n', '    firstAuctionsReferrer = referrer[_bidder];\n', '\n', '    if (now >= getFirstAuctionsExtendableStartDate()) {\n', '      firstAuctionsExtendedDuration = firstAuctionsExtendedDuration\n', '        .add(firstAuctionsExtendedChunkDuration);\n', '    }\n', '\n', '    emit FirstShipBidded(_bidder, _value, referrer[_bidder]);\n', '  }\n', '\n', '  function _bidLaterShip(\n', '    uint256 _shipId,\n', '    uint256 _value,\n', '    address _bidder,\n', '    address _referrer\n', '  )\n', '    internal\n', '  {\n', '    uint256 _price = getShipPrice(_shipId);\n', '    require(_value >= _price, "Not enough Parsec Credit.");\n', '\n', '    _updateReferrerFor(_bidder, _referrer);\n', '\n', '    if (_price > 0) {\n', '      _receiveFrom(_bidder, _price);\n', '    }\n', '\n', '    _mint(_bidder, _shipId);\n', '\n', '    _lastAuctionedShipId = _shipId;\n', '    _lastAuctionsWinningBid = _price;\n', '    _lastAuctionWinsDate = now;\n', '\n', '    if (referrer[_bidder] != address(0) && _price > 0) {\n', '      _sendTo(referrer[_bidder], _price.mul(REFERRAL_REWARD_PERCENTAGE).div(100));\n', '    }\n', '\n', '    emit LaterShipBidded(\n', '      _shipId,\n', '      _bidder,\n', '      _value,\n', '      referrer[_bidder]\n', '    );\n', '  }\n', '\n', '  function _receiveFrom(address _from, uint256 _value) internal {\n', '    parsecCreditContract.transferFrom(_from, this, _value);\n', '  }\n', '\n', '  function _sendTo(address _to, uint256 _value) internal {\n', '    // Not like when transferring ETH, we are not afraid of a DoS attack here\n', '    // because Parsec Credit contract is trustable and there are no callbacks involved.\n', '    // solium-disable-next-line security/no-low-level-calls\n', '    require(address(parsecCreditContract).call(\n', '      bytes4(keccak256("transfer(address,uint256)")),\n', '      _to,\n', '      _value\n', '    ), "Parsec Credit transfer failed.");\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/HasNoContracts.sol\n', '\n', '/**\n', ' * @title Contracts that should not own Contracts\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="e391868e808ca3d1">[email&#160;protected]</span>π.com>\n', ' * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n', ' * of this contract to reclaim ownership of the contracts.\n', ' */\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimContract(address contractAddr) external onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="2153444c424e6113">[email&#160;protected]</span>π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be sent to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', ' */\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    // solium-disable-next-line security/no-send\n', '    assert(owner.send(address(this).balance));\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/HasNoTokens.sol\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="4735222a24280775">[email&#160;protected]</span>π.com>\n', ' * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC223 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/NoOwner.sol\n', '\n', '/**\n', ' * @title Base contract for contracts that should not own things.\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="b8caddd5dbd7f88a">[email&#160;protected]</span>π.com>\n', ' * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\n', ' * Owned contracts. See respective base contracts for details.\n', ' */\n', 'contract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n', '}\n', '\n', '// File: contracts/ParsecInitialShip.sol\n', '\n', '// solium-disable-next-line lbrace\n', 'contract ParsecInitialShip is\n', '  ParsecShipAuction,\n', '  NoOwner\n', '{\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    require(token != parsecCreditContract); // Use `reclaimParsecCredit()` instead!\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '  function reclaimParsecCredit() external onlyOwner {\n', '    require(firstAuctionConcluded, "The first auction must have been concluded.");\n', '    _sendTo(owner, parsecCreditContract.balanceOf(this));\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/ParsecReferralTracking.sol\n', '\n', 'contract ParsecReferralTracking {\n', '  mapping (address => address) public referrer;\n', '\n', '  event ReferrerUpdated(address indexed _referee, address indexed _referrer);\n', '\n', '  function _updateReferrerFor(address _referee, address _referrer) internal {\n', '    if (_referrer != address(0) && _referrer != _referee) {\n', '      referrer[_referee] = _referrer;\n', '      emit ReferrerUpdated(_referee, _referrer);\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/ParsecShipInfo.sol\n', '\n', 'contract ParsecShipInfo {\n', '  uint256 public constant TOTAL_SHIP = 900;\n', '  uint256 public constant TOTAL_ARK = 100;\n', '  uint256 public constant TOTAL_HAWKING = 400;\n', '  uint256 public constant TOTAL_SATOSHI = 400;\n', '\n', '  uint256 public constant NAME_NOT_AVAILABLE = 0;\n', '  uint256 public constant NAME_ARK = 1;\n', '  uint256 public constant NAME_HAWKING = 2;\n', '  uint256 public constant NAME_SATOSHI = 3;\n', '\n', '  uint256 public constant TYPE_NOT_AVAILABLE = 0;\n', '  uint256 public constant TYPE_EXPLORER_FREIGHTER = 1;\n', '  uint256 public constant TYPE_EXPLORER = 2;\n', '  uint256 public constant TYPE_FREIGHTER = 3;\n', '\n', '  uint256 public constant COLOR_NOT_AVAILABLE = 0;\n', '  uint256 public constant COLOR_CUSTOM = 1;\n', '  uint256 public constant COLOR_BLACK = 2;\n', '  uint256 public constant COLOR_BLUE = 3;\n', '  uint256 public constant COLOR_BROWN = 4;\n', '  uint256 public constant COLOR_GOLD = 5;\n', '  uint256 public constant COLOR_GREEN = 6;\n', '  uint256 public constant COLOR_GREY = 7;\n', '  uint256 public constant COLOR_PINK = 8;\n', '  uint256 public constant COLOR_RED = 9;\n', '  uint256 public constant COLOR_SILVER = 10;\n', '  uint256 public constant COLOR_WHITE = 11;\n', '  uint256 public constant COLOR_YELLOW = 12;\n', '\n', '  function getShip(uint256 _shipId)\n', '    external\n', '    pure\n', '    returns (\n', '      uint256 /* _name */,\n', '      uint256 /* _type */,\n', '      uint256 /* _color */\n', '    )\n', '  {\n', '    return (\n', '      _getShipName(_shipId),\n', '      _getShipType(_shipId),\n', '      _getShipColor(_shipId)\n', '    );\n', '  }\n', '\n', '  function _getShipName(uint256 _shipId) internal pure returns (uint256 /* _name */) {\n', '    if (_shipId < 1) {\n', '      return NAME_NOT_AVAILABLE;\n', '    } else if (_shipId <= TOTAL_ARK) {\n', '      return NAME_ARK;\n', '    } else if (_shipId <= TOTAL_ARK + TOTAL_HAWKING) {\n', '      return NAME_HAWKING;\n', '    } else if (_shipId <= TOTAL_SHIP) {\n', '      return NAME_SATOSHI;\n', '    } else {\n', '      return NAME_NOT_AVAILABLE;\n', '    }\n', '  }\n', '\n', '  function _getShipType(uint256 _shipId) internal pure returns (uint256 /* _type */) {\n', '    if (_shipId < 1) {\n', '      return TYPE_NOT_AVAILABLE;\n', '    } else if (_shipId <= TOTAL_ARK) {\n', '      return TYPE_EXPLORER_FREIGHTER;\n', '    } else if (_shipId <= TOTAL_ARK + TOTAL_HAWKING) {\n', '      return TYPE_EXPLORER;\n', '    } else if (_shipId <= TOTAL_SHIP) {\n', '      return TYPE_FREIGHTER;\n', '    } else {\n', '      return TYPE_NOT_AVAILABLE;\n', '    }\n', '  }\n', '\n', '  function _getShipColor(uint256 _shipId) internal pure returns (uint256 /* _color */) {\n', '    if (_shipId < 1) {\n', '      return COLOR_NOT_AVAILABLE;\n', '    } else if (_shipId == 1) {\n', '      return COLOR_CUSTOM;\n', '    } else if (_shipId <= 23) {\n', '      return COLOR_BLACK;\n', '    } else if (_shipId <= 37) {\n', '      return COLOR_BLUE;\n', '    } else if (_shipId <= 42) {\n', '      return COLOR_BROWN;\n', '    } else if (_shipId <= 45) {\n', '      return COLOR_GOLD;\n', '    } else if (_shipId <= 49) {\n', '      return COLOR_GREEN;\n', '    } else if (_shipId <= 64) {\n', '      return COLOR_GREY;\n', '    } else if (_shipId <= 67) {\n', '      return COLOR_PINK;\n', '    } else if (_shipId <= 77) {\n', '      return COLOR_RED;\n', '    } else if (_shipId <= 83) {\n', '      return COLOR_SILVER;\n', '    } else if (_shipId <= 93) {\n', '      return COLOR_WHITE;\n', '    } else if (_shipId <= 100) {\n', '      return COLOR_YELLOW;\n', '    } else if (_shipId <= 140) {\n', '      return COLOR_BLACK;\n', '    } else if (_shipId <= 200) {\n', '      return COLOR_BLUE;\n', '    } else if (_shipId <= 237) {\n', '      return COLOR_BROWN;\n', '    } else if (_shipId <= 247) {\n', '      return COLOR_GOLD;\n', '    } else if (_shipId <= 330) {\n', '      return COLOR_GREEN;\n', '    } else if (_shipId <= 370) {\n', '      return COLOR_GREY;\n', '    } else if (_shipId <= 380) {\n', '      return COLOR_PINK;\n', '    } else if (_shipId <= 440) {\n', '      return COLOR_RED;\n', '    } else if (_shipId <= 460) {\n', '      return COLOR_SILVER;\n', '    } else if (_shipId <= 500) {\n', '      return COLOR_WHITE;\n', '    } else if (_shipId <= 540) {\n', '      return COLOR_BLACK;\n', '    } else if (_shipId <= 600) {\n', '      return COLOR_BLUE;\n', '    } else if (_shipId <= 637) {\n', '      return COLOR_BROWN;\n', '    } else if (_shipId <= 647) {\n', '      return COLOR_GOLD;\n', '    } else if (_shipId <= 730) {\n', '      return COLOR_GREEN;\n', '    } else if (_shipId <= 770) {\n', '      return COLOR_GREY;\n', '    } else if (_shipId <= 780) {\n', '      return COLOR_PINK;\n', '    } else if (_shipId <= 840) {\n', '      return COLOR_RED;\n', '    } else if (_shipId <= 860) {\n', '      return COLOR_SILVER;\n', '    } else if (_shipId <= TOTAL_SHIP) {\n', '      return COLOR_WHITE;\n', '    } else {\n', '      return COLOR_NOT_AVAILABLE;\n', '    }\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/ParsecShipPricing.sol\n', '\n', 'contract ParsecShipPricing {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public constant TOTAL_PARSEC_CREDIT_SUPPLY = 30856775800000000;\n', '\n', '  // Starting with 30,856,775,800,000,000 (total supply of Parsec Credit, including 6 decimals),\n', '  // each time we multiply the number we have with 0.9995. These are results:\n', '  // 1: 30841347412100000\n', '  // 2: 30825926738393950\n', '  // 4: 30795108518137240.6484875\n', '  // 8: 30733564478368113.80826526098454678\n', '  // 16: 30610845140405444.1555510982248498\n', '  // 32: 30366874565355062.01905741115048326\n', '  // 64: 29884751305352135.55319509943479229\n', '  // 128: 28943346718121670.05118183115407839\n', '  // 256: 27148569399315026.57115329246779589\n', '  // 512: 23885995905943752.64119680273916152\n', '  // 1024: 18489968106737895.55394216521160879\n', '  // 2048: 11079541258752787.70222144092290365\n', '  // 4096: 3978258626243293.616409580784511455\n', '  // 8192: 512903285808596.2996925781077178762\n', '  // 16384: 8525510970373.470528186667481043039\n', '  // 32768: 2355538951.219861249087266462563245\n', '  // 65536: 179.8167049816644768546906209889074\n', '  // 75918: 0.9996399085102312393019871402909541\n', '\n', '  uint256[18] private _multipliers = [\n', '    30841347412100000,\n', '    30825926738393950,\n', '    307951085181372406484875,\n', '    3073356447836811380826526098454678,\n', '    306108451404054441555510982248498,\n', '    3036687456535506201905741115048326,\n', '    2988475130535213555319509943479229,\n', '    2894334671812167005118183115407839,\n', '    2714856939931502657115329246779589,\n', '    2388599590594375264119680273916152,\n', '    1848996810673789555394216521160879,\n', '    1107954125875278770222144092290365,\n', '    3978258626243293616409580784511455,\n', '    5129032858085962996925781077178762,\n', '    8525510970373470528186667481043039,\n', '    2355538951219861249087266462563245,\n', '    1798167049816644768546906209889074\n', '  ];\n', '\n', '  uint256[18] private _decimals = [\n', '    0, 0, 7, 17, 16,\n', '    17, 17, 17, 17, 17,\n', '    17, 17, 18, 19, 21,\n', '    24, 31\n', '  ];\n', '\n', '  function _getShipPrice(\n', '    uint256 _initialPrice,\n', '    uint256 _minutesPassed\n', '  )\n', '    internal\n', '    view\n', '    returns (uint256 /* _price */)\n', '  {\n', '    require(\n', '      _initialPrice <= TOTAL_PARSEC_CREDIT_SUPPLY,\n', '      "Initial ship price must not be greater than total Parsec Credit."\n', '    );\n', '\n', '    if (_minutesPassed >> _multipliers.length > 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 _price = _initialPrice;\n', '\n', '    for (uint256 _powerOfTwo = 0; _powerOfTwo < _multipliers.length; _powerOfTwo++) {\n', '      if (_minutesPassed >> _powerOfTwo & 1 > 0) {\n', '        _price = _price\n', '          .mul(_multipliers[_powerOfTwo])\n', '          .div(TOTAL_PARSEC_CREDIT_SUPPLY)\n', '          .div(10 ** _decimals[_powerOfTwo]);\n', '      }\n', '    }\n', '\n', '    return _price;\n', '  }\n', '}\n', '\n', '// File: contracts/TokenRecipient.sol\n', '\n', 'interface TokenRecipient {\n', '  function receiveApproval(\n', '    address _from,\n', '    uint256 _value,\n', '    address _token,\n', '    bytes _extraData\n', '  )\n', '    external;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '   *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '   *  than the magic value MUST result in the transaction being reverted.\n', '   *  Note: the contract address is always the message sender.\n', '   * @param _from The sending address\n', '   * @param _tokenId The NFT identifier which is being transfered\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  /**\n', '   * @dev Guarantees msg.sender is owner of the given token\n', '   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '   */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '   * @param _tokenId uint256 ID of the token to validate\n', '   */\n', '  modifier canTransfer(uint256 _tokenId) {\n', '    require(isApprovedOrOwner(msg.sender, _tokenId));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param _owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existance of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * @dev The zero address indicates there is no approved address.\n', '   * @dev There can only be one approved address per token at a given time.\n', '   * @dev Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      emit Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for a the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\n', '    require(_from != address(0));\n', '    require(_to != address(0));\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeTokenFrom(_from, _tokenId);\n', '    addTokenTo(_to, _tokenId);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    canTransfer(_tokenId)\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(_from, _to, _tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    canTransfer(_tokenId)\n', '  {\n', '    transferFrom(_from, _to, _tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param _spender address of the spender to query\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\n', '    address owner = ownerOf(_tokenId);\n', '    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to The address that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addTokenTo(_to, _tokenId);\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * @dev Reverts if the token does not exist\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    clearApproval(_owner, _tokenId);\n', '    removeTokenFrom(_owner, _tokenId);\n', '    emit Transfer(_owner, address(0), _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to clear current approval of a given token ID\n', '   * @dev Reverts if the given address is not indeed the owner of the token\n', '   * @param _owner owner of the token\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function clearApproval(address _owner, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '      emit Approval(_owner, address(0), _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    require(ownerOf(_tokenId) == _from);\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    tokenOwner[_tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * @dev The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  function ERC721Token(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() public view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() public view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * @dev Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * @dev Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * @dev Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * @param _to address representing the new owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function addTokenTo(address _to, uint256 _tokenId) internal {\n', '    super.addTokenTo(_to, _tokenId);\n', '    uint256 length = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '    super.removeTokenFrom(_from, _tokenId);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * @dev Reverts if the given token ID already exists\n', '   * @param _to address the beneficiary that will own the minted token\n', '   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    super._mint(_to, _tokenId);\n', '\n', '    allTokensIndex[_tokenId] = allTokens.length;\n', '    allTokens.push(_tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * @dev Reverts if the token does not exist\n', '   * @param _owner owner of the token to burn\n', '   * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address _owner, uint256 _tokenId) internal {\n', '    super._burn(_owner, _tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(tokenURIs[_tokenId]).length != 0) {\n', '      delete tokenURIs[_tokenId];\n', '    }\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = allTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = allTokens.length.sub(1);\n', '    uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '    allTokens[tokenIndex] = lastToken;\n', '    allTokens[lastTokenIndex] = 0;\n', '\n', '    allTokens.length--;\n', '    allTokensIndex[_tokenId] = 0;\n', '    allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ParsecShipAuction.sol\n', '\n', '// solium-disable-next-line lbrace\n', 'contract ParsecShipAuction is\n', '  ERC721Token("Parsec Initial Ship", "PIS"),\n', '  ParsecShipInfo,\n', '  ParsecShipPricing,\n', '  ParsecReferralTracking,\n', '  Ownable,\n', '  Pausable\n', '{\n', '  uint256 public constant PARSEC_CREDIT_DECIMALS = 6;\n', '\n', '  uint256 public constant FIRST_AUCTIONS_MINIMUM_RAISE = 2 * uint256(10) ** (5 + PARSEC_CREDIT_DECIMALS);\n', '\n', '  uint256 public constant SECOND_AUCTIONS_INITIAL_PERCENTAGE = 50;\n', '  uint256 public constant LATER_AUCTIONS_INITIAL_PERCENTAGE = 125;\n', '\n', '  uint256 public constant REFERRAL_REWARD_PERCENTAGE = 20;\n', '\n', '  ERC20 public parsecCreditContract = ERC20(0x4373D59176891dA98CA6faaa86bd387fc9e12b6E);\n', '\n', '  // May 15th, 2018 – 16:00 UTC\n', '  uint256 public firstAuctionsStartDate = 1526400000;\n', '\n', '  uint256 public firstAuctionsInitialDuration = 48 hours;\n', '  uint256 public firstAuctionsExtendableDuration = 12 hours;\n', '\n', '  uint256 public firstAuctionsExtendedChunkDuration = 1 hours;\n', '  uint256 public firstAuctionsExtendedDuration = 0;\n', '\n', '  uint256 public firstAuctionsHighestBid = uint256(10) ** (6 + PARSEC_CREDIT_DECIMALS);\n', '  address public firstAuctionsHighestBidder = address(0);\n', '  address public firstAuctionsReferrer;\n', '  bool public firstAuctionConcluded = false;\n', '\n', '  uint256 private _lastAuctionedShipId = 0;\n', '  uint256 private _lastAuctionsWinningBid;\n', '  uint256 private _lastAuctionWinsDate;\n', '\n', '  event FirstShipBidded(\n', '    address indexed _bidder,\n', '    uint256 _value,\n', '    address indexed _referrer\n', '  );\n', '\n', '  event LaterShipBidded(\n', '    uint256 indexed _shipId,\n', '    address indexed _winner,\n', '    uint256 _value,\n', '    address indexed _referrer\n', '  );\n', '\n', '  function receiveApproval(\n', '    address _from,\n', '    uint256 _value,\n', '    address _token,\n', '    bytes _extraData\n', '  )\n', '    external\n', '    whenNotPaused\n', '  {\n', '    require(_token == address(parsecCreditContract));\n', '    require(_extraData.length == 64);\n', '\n', '    uint256 _shipId;\n', '    address _referrer;\n', '\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      _shipId := calldataload(164)\n', '      _referrer := calldataload(196)\n', '    }\n', '\n', '    if (_shipId == 1) {\n', '      _bidFirstShip(_value, _from, _referrer);\n', '    } else {\n', '      _bidLaterShip(_shipId, _value, _from, _referrer);\n', '    }\n', '  }\n', '\n', '  function getFirstAuctionsRemainingDuration() external view returns (uint256 /* _duration */) {\n', '    uint256 _currentDate = now;\n', '    uint256 _endDate = getFirstAuctionsEndDate();\n', '\n', '    if (_endDate >= _currentDate) {\n', '      return _endDate - _currentDate;\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function concludeFirstAuction() external {\n', '    require(getLastAuctionedShipId() >= 1, "The first auction must have ended.");\n', '    require(!firstAuctionConcluded, "The first auction must not have been concluded.");\n', '\n', '    firstAuctionConcluded = true;\n', '\n', '    if (firstAuctionsHighestBidder != address(0)) {\n', '      _mint(firstAuctionsHighestBidder, 1);\n', '\n', '      if (firstAuctionsReferrer != address(0)) {\n', '        _sendTo(\n', '          firstAuctionsReferrer,\n', '          firstAuctionsHighestBid.mul(REFERRAL_REWARD_PERCENTAGE).div(100)\n', '        );\n', '      }\n', '    } else {\n', '      _mint(owner, 1);\n', '    }\n', '  }\n', '\n', '  function getFirstAuctionsExtendableStartDate() public view returns (uint256 /* _extendableStartDate */) {\n', '    return firstAuctionsStartDate\n', '      // solium-disable indentation\n', '      .add(firstAuctionsInitialDuration)\n', '      .sub(firstAuctionsExtendableDuration);\n', '      // solium-enable indentation\n', '  }\n', '\n', '  function getFirstAuctionsEndDate() public view returns (uint256 /* _endDate */) {\n', '    return firstAuctionsStartDate\n', '      .add(firstAuctionsInitialDuration)\n', '      .add(firstAuctionsExtendedDuration);\n', '  }\n', '\n', '  function getLastAuctionedShipId() public view returns (uint256 /* _shipId */) {\n', '    if (_lastAuctionedShipId == 0 && now >= getFirstAuctionsEndDate()) {\n', '      return 1;\n', '    } else {\n', '      return _lastAuctionedShipId;\n', '    }\n', '  }\n', '\n', '  function getLastAuctionsWinningBid() public view returns (uint256 /* _value */) {\n', '    if (_lastAuctionedShipId == 0 && now >= getFirstAuctionsEndDate()) {\n', '      return firstAuctionsHighestBid;\n', '    } else {\n', '      return _lastAuctionsWinningBid;\n', '    }\n', '  }\n', '\n', '  function getLastAuctionWinsDate() public view returns (uint256 /* _date */) {\n', '    if (_lastAuctionedShipId == 0) {\n', '      uint256 _firstAuctionsEndDate = getFirstAuctionsEndDate();\n', '\n', '      if (now >= _firstAuctionsEndDate) {\n', '        return _firstAuctionsEndDate;\n', '      }\n', '    }\n', '\n', '    return _lastAuctionWinsDate;\n', '  }\n', '\n', '  function getShipPrice(uint256 _shipId) public view returns (uint256 /* _price */) {\n', '    uint256 _minutesPassed = now\n', '      .sub(getLastAuctionWinsDate())\n', '      .div(1 minutes);\n', '\n', '    return getShipPrice(_shipId, _minutesPassed);\n', '  }\n', '\n', '  function getShipPrice(uint256 _shipId, uint256 _minutesPassed) public view returns (uint256 /* _price */) {\n', '    require(_shipId >= 2, "Ship ID must be greater than or equal to 2.");\n', '    require(_shipId <= TOTAL_SHIP, "Ship ID must be smaller than or equal to total number of ship.");\n', '    require(_shipId == getLastAuctionedShipId().add(1), "Can only get price of the ship which is being auctioned.");\n', '\n', '    uint256 _initialPrice = getLastAuctionsWinningBid();\n', '\n', '    if (_shipId == 2) {\n', '      _initialPrice = _initialPrice\n', '        .mul(SECOND_AUCTIONS_INITIAL_PERCENTAGE)\n', '        .div(100);\n', '    } else {\n', '      _initialPrice = _initialPrice\n', '        .mul(LATER_AUCTIONS_INITIAL_PERCENTAGE)\n', '        .div(100);\n', '    }\n', '\n', '    return _getShipPrice(_initialPrice, _minutesPassed);\n', '  }\n', '\n', '  function _bidFirstShip(uint256 _value, address _bidder, address _referrer) internal {\n', '    require(now >= firstAuctionsStartDate, "Auction of the first ship is not started yet.");\n', '    require(now < getFirstAuctionsEndDate(), "Auction of the first ship has ended.");\n', '\n', '    require(_value >= firstAuctionsHighestBid.add(FIRST_AUCTIONS_MINIMUM_RAISE), "Not enough Parsec Credit.");\n', '\n', '    _updateReferrerFor(_bidder, _referrer);\n', '    _receiveFrom(_bidder, _value);\n', '\n', '    if (firstAuctionsHighestBidder != address(0)) {\n', '      _sendTo(firstAuctionsHighestBidder, firstAuctionsHighestBid);\n', '    }\n', '\n', '    firstAuctionsHighestBid = _value;\n', '    firstAuctionsHighestBidder = _bidder;\n', '\n', "    // To prevent the first auction's referrer being overriden,\n", "    // since later auction's bidders could be the same as the first auction's bidder\n", '    // but their referrers could be different.\n', '    firstAuctionsReferrer = referrer[_bidder];\n', '\n', '    if (now >= getFirstAuctionsExtendableStartDate()) {\n', '      firstAuctionsExtendedDuration = firstAuctionsExtendedDuration\n', '        .add(firstAuctionsExtendedChunkDuration);\n', '    }\n', '\n', '    emit FirstShipBidded(_bidder, _value, referrer[_bidder]);\n', '  }\n', '\n', '  function _bidLaterShip(\n', '    uint256 _shipId,\n', '    uint256 _value,\n', '    address _bidder,\n', '    address _referrer\n', '  )\n', '    internal\n', '  {\n', '    uint256 _price = getShipPrice(_shipId);\n', '    require(_value >= _price, "Not enough Parsec Credit.");\n', '\n', '    _updateReferrerFor(_bidder, _referrer);\n', '\n', '    if (_price > 0) {\n', '      _receiveFrom(_bidder, _price);\n', '    }\n', '\n', '    _mint(_bidder, _shipId);\n', '\n', '    _lastAuctionedShipId = _shipId;\n', '    _lastAuctionsWinningBid = _price;\n', '    _lastAuctionWinsDate = now;\n', '\n', '    if (referrer[_bidder] != address(0) && _price > 0) {\n', '      _sendTo(referrer[_bidder], _price.mul(REFERRAL_REWARD_PERCENTAGE).div(100));\n', '    }\n', '\n', '    emit LaterShipBidded(\n', '      _shipId,\n', '      _bidder,\n', '      _value,\n', '      referrer[_bidder]\n', '    );\n', '  }\n', '\n', '  function _receiveFrom(address _from, uint256 _value) internal {\n', '    parsecCreditContract.transferFrom(_from, this, _value);\n', '  }\n', '\n', '  function _sendTo(address _to, uint256 _value) internal {\n', '    // Not like when transferring ETH, we are not afraid of a DoS attack here\n', '    // because Parsec Credit contract is trustable and there are no callbacks involved.\n', '    // solium-disable-next-line security/no-low-level-calls\n', '    require(address(parsecCreditContract).call(\n', '      bytes4(keccak256("transfer(address,uint256)")),\n', '      _to,\n', '      _value\n', '    ), "Parsec Credit transfer failed.");\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/HasNoContracts.sol\n', '\n', '/**\n', ' * @title Contracts that should not own Contracts\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n', ' * of this contract to reclaim ownership of the contracts.\n', ' */\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimContract(address contractAddr) external onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol\n', '\n', '/**\n', ' * @title Contracts that should not own Ether\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up\n', ' * in the contract, it will allow the owner to reclaim this ether.\n', ' * @notice Ether can still be sent to this contract by:\n', ' * calling functions labeled `payable`\n', ' * `selfdestruct(contract_address)`\n', ' * mining directly to the contract address\n', ' */\n', 'contract HasNoEther is Ownable {\n', '\n', '  /**\n', '  * @dev Constructor that rejects incoming Ether\n', '  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we\n', '  * leave out payable, then Solidity will allow inheriting contracts to implement a payable\n', '  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively\n', '  * we could use assembly to access msg.value.\n', '  */\n', '  function HasNoEther() public payable {\n', '    require(msg.value == 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Disallows direct send by settings a default function without the `payable` flag.\n', '   */\n', '  function() external {\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer all Ether held by the contract to the owner.\n', '   */\n', '  function reclaimEther() external onlyOwner {\n', '    // solium-disable-next-line security/no-send\n', '    assert(owner.send(address(this).balance));\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/HasNoTokens.sol\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC223 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/NoOwner.sol\n', '\n', '/**\n', ' * @title Base contract for contracts that should not own things.\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or\n', ' * Owned contracts. See respective base contracts for details.\n', ' */\n', 'contract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {\n', '}\n', '\n', '// File: contracts/ParsecInitialShip.sol\n', '\n', '// solium-disable-next-line lbrace\n', 'contract ParsecInitialShip is\n', '  ParsecShipAuction,\n', '  NoOwner\n', '{\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    require(token != parsecCreditContract); // Use `reclaimParsecCredit()` instead!\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '  function reclaimParsecCredit() external onlyOwner {\n', '    require(firstAuctionConcluded, "The first auction must have been concluded.");\n', '    _sendTo(owner, parsecCreditContract.balanceOf(this));\n', '  }\n', '}']
