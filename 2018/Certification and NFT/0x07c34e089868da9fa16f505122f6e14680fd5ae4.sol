['pragma solidity ^0.4.18;\n', '\n', 'contract Utils {\n', '    modifier validAddress(address _address) {\n', '        require(_address != address(0));\n', '        _;\n', '    }\n', '\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 _z = _x + _y;\n', '        assert(_z >= _x);\n', '        return _z;\n', '    }\n', '\n', '    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 _z = _x * _y;\n', '        assert(_x == 0 || _z / _x == _y);\n', '        return _z;\n', '    }\n', '    \n', '    function safeDiv(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_y != 0); \n', '        uint256 _z = _x / _y;\n', '        assert(_x == _y * _z + _x % _y); \n', '        return _z;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is ERC20Token, Utils, Ownable {\n', ' \n', '    bool public transfersEnabled = true;  \n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    modifier transfersAllowed {\n', '        assert(transfersEnabled);\n', '        _;\n', '    }\n', '\n', '    function disableTransfers(bool _disable) public onlyOwner {\n', '        transfersEnabled = !_disable;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public validAddress(_to) transfersAllowed returns (bool success){\n', '        require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value > balanceOf[_to]); \n', '        \n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public validAddress(_owner) constant returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract ONECToken is StandardToken {\n', '\n', '    string public constant name = "One Coin";\n', '    string public constant symbol = "ONEC"; \n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant totalSupply = 5.2 * 10**26;\n', '    \n', '    function ONECToken(){\n', '        balanceOf[owner] = totalSupply;\n', '        \n', '        Transfer(0x0, owner, balanceOf[owner]);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract Utils {\n', '    modifier validAddress(address _address) {\n', '        require(_address != address(0));\n', '        _;\n', '    }\n', '\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 _z = _x + _y;\n', '        assert(_z >= _x);\n', '        return _z;\n', '    }\n', '\n', '    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 _z = _x * _y;\n', '        assert(_x == 0 || _z / _x == _y);\n', '        return _z;\n', '    }\n', '    \n', '    function safeDiv(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_y != 0); \n', '        uint256 _z = _x / _y;\n', '        assert(_x == _y * _z + _x % _y); \n', '        return _z;\n', '    }\n', '\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ERC20Token {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is ERC20Token, Utils, Ownable {\n', ' \n', '    bool public transfersEnabled = true;  \n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '\n', '    modifier transfersAllowed {\n', '        assert(transfersEnabled);\n', '        _;\n', '    }\n', '\n', '    function disableTransfers(bool _disable) public onlyOwner {\n', '        transfersEnabled = !_disable;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public validAddress(_to) transfersAllowed returns (bool success){\n', '        require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value > balanceOf[_to]); \n', '        \n', '        balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value);\n', '        balanceOf[_to] = safeAdd(balanceOf[_to], _value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public validAddress(_owner) constant returns (uint256 balance) {\n', '        return balanceOf[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract ONECToken is StandardToken {\n', '\n', '    string public constant name = "One Coin";\n', '    string public constant symbol = "ONEC"; \n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant totalSupply = 5.2 * 10**26;\n', '    \n', '    function ONECToken(){\n', '        balanceOf[owner] = totalSupply;\n', '        \n', '        Transfer(0x0, owner, balanceOf[owner]);\n', '    }\n', '\n', '}']
