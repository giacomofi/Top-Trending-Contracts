['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library Utils {\n', '\n', '    uint  constant PRECISION = (10**18);\n', '    uint  constant MAX_DECIMALS = 18;\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        if( dstDecimals >= srcDecimals ) {\n', '            require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals-srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals-dstDecimals)));\n', '        }\n', '    }\n', '\n', '    // function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '    //     if( srcDecimals >= dstDecimals ) {\n', '    //         require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\n', '    //         return (PRECISION * dstQty * (10**(srcDecimals - dstDecimals))) / rate;\n', '    //     } else {\n', '    //         require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\n', '    //         return (PRECISION * dstQty) / (rate * (10**(dstDecimals - srcDecimals)));\n', '    //     }\n', '    // }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract ERC20Extended is ERC20 {\n', '    uint256 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '\n', '}\n', '\n', 'contract ComponentInterface {\n', '    string public name;\n', '    string public description;\n', '    string public category;\n', '    string public version;\n', '}\n', '\n', 'contract ExchangeInterface is ComponentInterface {\n', '    /*\n', '     * @dev Checks if a trading pair is available\n', '     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n', '     * @param address _sourceAddress The token to sell for the destAddress.\n', '     * @param address _destAddress The token to buy with the source token.\n', '     * @param bytes32 _exchangeId The exchangeId to choose. If it&#39;s an empty string, then the exchange will be chosen automatically.\n', '     * @return boolean whether or not the trading pair is supported by this exchange provider\n', '     */\n', '    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId)\n', '        external view returns(bool supported);\n', '\n', '    /*\n', '     * @dev Buy a single token with ETH.\n', '     * @param ERC20Extended _token The token to buy, should be an ERC20Extended address.\n', '     * @param uint _amount Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the _amount.\n', '     * @param uint _minimumRate The minimum amount of tokens to receive for 1 ETH.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', '     * @param bytes32 _exchangeId The exchangeId to choose. If it&#39;s an empty string, then the exchange will be chosen automatically.\n', '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here.\n', '     * @return boolean whether or not the trade succeeded.\n', '     */\n', '    function buyToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external payable returns(bool success);\n', '\n', '    /*\n', '     * @dev Sell a single token for ETH. Make sure the token is approved beforehand.\n', '     * @param ERC20Extended _token The token to sell, should be an ERC20Extended address.\n', '     * @param uint _amount Amount of tokens to sell.\n', '     * @param uint _minimumRate The minimum amount of ETH to receive for 1 ERC20Extended token.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', '     * @param bytes32 _exchangeId The exchangeId to choose. If it&#39;s an empty string, then the exchange will be chosen automatically.\n', '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\n', '     * @return boolean boolean whether or not the trade succeeded.\n', '     */\n', '    function sellToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external returns(bool success);\n', '}\n', '\n', 'contract KyberNetworkInterface {\n', '\n', '    function getExpectedRate(ERC20Extended src, ERC20Extended dest, uint srcQty)\n', '        external view returns (uint expectedRate, uint slippageRate);\n', '\n', '    function trade(\n', '        ERC20Extended source,\n', '        uint srcAmount,\n', '        ERC20Extended dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId)\n', '        external payable returns(uint);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract OlympusExchangeAdapterInterface is Ownable {\n', '\n', '    function supportsTradingPair(address _srcAddress, address _destAddress)\n', '        external view returns(bool supported);\n', '\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount)\n', '        external view returns(uint expectedRate, uint slippageRate);\n', '\n', '    function sellToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '        ) external returns(bool success);\n', '\n', '    function buyToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '        ) external payable returns(bool success);\n', '\n', '    function enable() external returns(bool);\n', '    function disable() external returns(bool);\n', '    function isEnabled() external view returns (bool success);\n', '\n', '    function setExchangeDetails(bytes32 _id, bytes32 _name) external returns(bool success);\n', '    function getExchangeDetails() external view returns(bytes32 _name, bool _enabled);\n', '\n', '}\n', '\n', 'contract BancorConverterInterface {\n', '    string public converterType;\n', '    ERC20Extended[] public quickBuyPath;\n', '    /**\n', '        @dev returns the length of the quick buy path array\n', '        @return quick buy path length\n', '    */\n', '    function getQuickBuyPathLength() public view returns (uint256);\n', '    /**\n', '        @dev returns the expected return for converting a specific amount of _fromToken to _toToken\n', '\n', '        @param _fromToken  ERC20 token to convert from\n', '        @param _toToken    ERC20 token to convert to\n', '        @param _amount     amount to convert, in fromToken\n', '\n', '        @return expected conversion return amount\n', '    */\n', '    function getReturn(ERC20Extended _fromToken, ERC20Extended _toToken, uint256 _amount) public view returns (uint256);\n', '    /**\n', '        @dev converts the token to any other token in the bancor network by following a predefined conversion path\n', '        note that when converting from an ERC20 token (as opposed to a smart token), allowance must be set beforehand\n', '\n', '        @param _path        conversion path, see conversion path format in the BancorNetwork contract\n', '        @param _amount      amount to convert from (in the initial source token)\n', '        @param _minReturn   if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\n', '\n', '        @return tokens issued in return\n', '    */\n', '    function quickConvert(ERC20Extended[] _path, uint256 _amount, uint256 _minReturn)\n', '        public\n', '        payable\n', '        returns (uint256);\n', '\n', '}\n', '\n', 'contract ERC20NoReturn {\n', '    uint256 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public;\n', '    function approve(address spender, uint tokens) public;\n', '    function transferFrom(address from, address to, uint tokens) public;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract BancorNetworkAdapter is OlympusExchangeAdapterInterface {\n', '    using SafeMath for uint256;\n', '\n', '    address public exchangeAdapterManager;\n', '    bytes32 public exchangeId;\n', '    bytes32 public name;\n', '    ERC20Extended public constant ETH_TOKEN_ADDRESS = ERC20Extended(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '    ERC20Extended public constant bancorToken = ERC20Extended(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\n', '    ERC20Extended public constant bancorETHToken = ERC20Extended(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\n', '    mapping(address => BancorConverterInterface) public tokenToConverter;\n', '    mapping(address => address) public tokenToRelay;\n', '\n', '    bool public adapterEnabled;\n', '\n', '    modifier checkArrayLengths(address[] tokenAddresses, BancorConverterInterface[] converterAddresses, address[] relayAddresses) {\n', '        require(tokenAddresses.length == converterAddresses.length && relayAddresses.length == converterAddresses.length);\n', '        _;\n', '    }\n', '\n', '    modifier checkTokenSupported(address _token) {\n', '        BancorConverterInterface bancorConverter = tokenToConverter[_token];\n', '        require(address(bancorConverter) != 0x0, "Token not supported");\n', '        _;\n', '    }\n', '\n', '    constructor (address _exchangeAdapterManager, address[] _tokenAddresses,\n', '    BancorConverterInterface[] _converterAddresses, address[] _relayAddresses)\n', '    checkArrayLengths(_tokenAddresses, _converterAddresses, _relayAddresses) public {\n', '        updateSupportedTokenList(_tokenAddresses, _converterAddresses, _relayAddresses);\n', '        exchangeAdapterManager = _exchangeAdapterManager;\n', '        adapterEnabled = true;\n', '    }\n', '\n', '    modifier onlyExchangeAdapterManager() {\n', '        require(msg.sender == address(exchangeAdapterManager));\n', '        _;\n', '    }\n', '\n', '    function updateSupportedTokenList(address[] _tokenAddresses, BancorConverterInterface[] _converterAddresses, address[] _relayAddresses)\n', '    checkArrayLengths(_tokenAddresses, _converterAddresses, _relayAddresses)\n', '    public onlyOwner returns (bool success) {\n', '        for(uint i = 0; i < _tokenAddresses.length; i++){\n', '            tokenToConverter[_tokenAddresses[i]] = _converterAddresses[i];\n', '            tokenToRelay[_tokenAddresses[i]] = _relayAddresses[i];\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function supportsTradingPair(address _srcAddress, address _destAddress) external view returns(bool supported){\n', '        address _tokenAddress = ETH_TOKEN_ADDRESS == _srcAddress ? _destAddress : _srcAddress;\n', '        BancorConverterInterface bancorConverter = tokenToConverter[_tokenAddress];\n', '        return address(bancorConverter) != 0x0;\n', '    }\n', '\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount)\n', '    external view returns(uint expectedRate, uint slippageRate) {\n', '        require(_amount > 0);\n', '        bool isBuying = _sourceAddress == ETH_TOKEN_ADDRESS;\n', '        ERC20Extended targetToken = isBuying ? _destAddress : _sourceAddress;\n', '        BancorConverterInterface BNTConverter = tokenToConverter[address(bancorToken)];\n', '\n', '        uint rate;\n', '        BancorConverterInterface targetTokenConverter = tokenToConverter[address(targetToken)];\n', '\n', '        uint ETHToBNTRate = BNTConverter.getReturn(bancorETHToken, bancorToken, _amount);\n', '\n', '\n', '        // Bancor is a special case, it&#39;s their token\n', '        if (targetToken == bancorToken){\n', '            if(isBuying) {\n', '                rate = ((ETHToBNTRate * 10**18) / _amount);\n', '            } else {\n', '                rate = BNTConverter.getReturn(bancorToken, bancorETHToken, _amount);\n', '                rate = ((rate * 10**_sourceAddress.decimals()) / _amount);\n', '            }\n', '        } else {\n', '            if(isBuying){\n', '                // Get amount of tokens for the amount of BNT for amount ETH\n', '                rate = targetTokenConverter.getReturn(bancorToken, targetToken, ETHToBNTRate);\n', '                // Convert rate to 1ETH to token or token to 1 ETH\n', '                rate = ((rate * 10**18) / _amount);\n', '            } else {\n', '                uint targetTokenToBNTRate = targetTokenConverter.getReturn(targetToken, bancorToken, 10**targetToken.decimals());\n', '                rate = BNTConverter.getReturn(bancorToken, bancorETHToken, targetTokenToBNTRate);\n', '                // Convert rate to 1ETH to token or token to 1 ETH\n', '                rate = ((rate * 10**_sourceAddress.decimals()) / _amount);\n', '            }\n', '        }\n', '\n', '        // TODO slippage?\n', '        return (rate,0);\n', '    }\n', '\n', '    // https://support.bancor.network/hc/en-us/articles/360000878832-How-to-use-the-quickConvert-function\n', '    function getPath(ERC20Extended _token, bool isBuying) public view returns(ERC20Extended[] tokenPath, uint resultPathLength) {\n', '        BancorConverterInterface bancorConverter = tokenToConverter[_token];\n', '        uint pathLength;\n', '        ERC20Extended[] memory path;\n', '\n', '        // When buying, we can get the path from Bancor easily, by getting the quickBuyPath from the converter address\n', '        if(isBuying){\n', '            pathLength = bancorConverter.getQuickBuyPathLength();\n', '            require(pathLength > 0, "Error with pathLength");\n', '            path = new ERC20Extended[](pathLength);\n', '\n', '            for (uint i = 0; i < pathLength; i++) {\n', '                path[i] = bancorConverter.quickBuyPath(i);\n', '            }\n', '            return (path, pathLength);\n', '        }\n', '\n', '        // When selling, we need to make the path ourselves\n', '\n', '        address relayAddress = tokenToRelay[_token];\n', '\n', '        if(relayAddress == 0x0){\n', '            // Bancor is a special case, it&#39;s their token\n', '            if(_token == bancorToken){\n', '                path = new ERC20Extended[](3);\n', '                path[0] = _token;\n', '                path[1] = _token;\n', '                path[2] = bancorETHToken;\n', '                return (path, 3);\n', '            }\n', '            // It&#39;s a Bancor smart token, handle it accordingly\n', '            path = new ERC20Extended[](5);\n', '            path[0] = _token;\n', '            path[1] = _token;\n', '            path[2] = bancorToken;\n', '            path[3] = bancorToken;\n', '            path[4] = bancorETHToken;\n', '            return (path, 5);\n', '        }\n', '\n', '        // It&#39;s a relay token, handle it accordingly\n', '        path = new ERC20Extended[](5);\n', '        path[0] = _token;                              // ERC20 Token to sell\n', '        path[1] = ERC20Extended(relayAddress);         // Relay address (automatically converted to converter address)\n', '        path[2] = bancorToken;                         // BNT Smart token address, as converter\n', '        path[3] = bancorToken;                         // BNT Smart token address, as "to" and "from" token\n', '        path[4] = bancorETHToken;                      // The Bancor ETH token, this will signal we want our return in ETH\n', '\n', '        return (path, 5);\n', '    }\n', '\n', '    // In contrast to Kyber, Bancor uses a minimum return for the complete trade, instead of a minimum rate for 1 ETH (for buying) or token (when selling)\n', '    function convertMinimumRateToMinimumReturn(ERC20Extended _token, uint _minimumRate, uint _amount, bool isBuying)\n', '    private view returns(uint minimumReturn) {\n', '        if(_minimumRate == 0){\n', '            return 1;\n', '        }\n', '\n', '        if(isBuying){\n', '            return (_amount * 10**18) / _minimumRate;\n', '        }\n', '\n', '        return (_amount * 10**_token.decimals()) / _minimumRate;\n', '    }\n', '\n', '    function sellToken\n', '    (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '    ) checkTokenSupported(_token) external returns(bool success) {\n', '        require(_token.balanceOf(address(this)) >= _amount, "Balance of token is not sufficient in adapter");\n', '        ERC20Extended[] memory internalPath;\n', '        ERC20Extended[] memory path;\n', '        uint pathLength;\n', '        (internalPath,pathLength) = getPath(_token, false);\n', '\n', '        path = new ERC20Extended[](pathLength);\n', '        for(uint i = 0; i < pathLength; i++) {\n', '            path[i] = internalPath[i];\n', '        }\n', '\n', '        BancorConverterInterface bancorConverter = tokenToConverter[_token];\n', '\n', '        ERC20NoReturn(_token).approve(address(bancorConverter), 0);\n', '        ERC20NoReturn(_token).approve(address(bancorConverter), _amount);\n', '        uint minimumReturn = convertMinimumRateToMinimumReturn(_token,_amount,_minimumRate, false);\n', '        uint returnedAmountOfETH = bancorConverter.quickConvert(path,_amount,minimumReturn);\n', '        require(returnedAmountOfETH > 0, "BancorConverter did not return any ETH");\n', '        _depositAddress.transfer(returnedAmountOfETH);\n', '        return true;\n', '    }\n', '\n', '    function buyToken (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '    ) checkTokenSupported(_token) external payable returns(bool success){\n', '        require(msg.value == _amount, "Amount of Ether sent is not the same as the amount parameter");\n', '        ERC20Extended[] memory internalPath;\n', '        ERC20Extended[] memory path;\n', '        uint pathLength;\n', '        (internalPath,pathLength) = getPath(_token, true);\n', '        path = new ERC20Extended[](pathLength);\n', '        for(uint i = 0; i < pathLength; i++) {\n', '            path[i] = internalPath[i];\n', '        }\n', '\n', '        uint minimumReturn = convertMinimumRateToMinimumReturn(_token,_amount,_minimumRate, true);\n', '        uint returnedAmountOfTokens = tokenToConverter[address(bancorToken)].quickConvert.value(_amount)(path,_amount,minimumReturn);\n', '        require(returnedAmountOfTokens > 0, "BancorConverter did not return any tokens");\n', '        ERC20NoReturn(_token).transfer(_depositAddress, returnedAmountOfTokens);\n', '        return true;\n', '    }\n', '\n', '    function enable() external onlyOwner returns(bool){\n', '        adapterEnabled = true;\n', '        return true;\n', '    }\n', '\n', '    function disable() external onlyOwner returns(bool){\n', '        adapterEnabled = false;\n', '        return true;\n', '    }\n', '\n', '    function isEnabled() external view returns (bool success) {\n', '        return adapterEnabled;\n', '    }\n', '\n', '    function setExchangeAdapterManager(address _exchangeAdapterManager) external onlyOwner {\n', '        exchangeAdapterManager = _exchangeAdapterManager;\n', '    }\n', '\n', '    function setExchangeDetails(bytes32 _id, bytes32 _name)\n', '    external onlyExchangeAdapterManager returns(bool)\n', '    {\n', '        exchangeId = _id;\n', '        name = _name;\n', '        return true;\n', '    }\n', '\n', '    function getExchangeDetails()\n', '    external view returns(bytes32 _name, bool _enabled)\n', '    {\n', '        return (name, adapterEnabled);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'library Utils {\n', '\n', '    uint  constant PRECISION = (10**18);\n', '    uint  constant MAX_DECIMALS = 18;\n', '\n', '    function calcDstQty(uint srcQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '        if( dstDecimals >= srcDecimals ) {\n', '            require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate * (10**(dstDecimals-srcDecimals))) / PRECISION;\n', '        } else {\n', '            require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\n', '            return (srcQty * rate) / (PRECISION * (10**(srcDecimals-dstDecimals)));\n', '        }\n', '    }\n', '\n', '    // function calcSrcQty(uint dstQty, uint srcDecimals, uint dstDecimals, uint rate) internal pure returns(uint) {\n', '    //     if( srcDecimals >= dstDecimals ) {\n', '    //         require((srcDecimals-dstDecimals) <= MAX_DECIMALS);\n', '    //         return (PRECISION * dstQty * (10**(srcDecimals - dstDecimals))) / rate;\n', '    //     } else {\n', '    //         require((dstDecimals-srcDecimals) <= MAX_DECIMALS);\n', '    //         return (PRECISION * dstQty) / (rate * (10**(dstDecimals - srcDecimals)));\n', '    //     }\n', '    // }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract ERC20Extended is ERC20 {\n', '    uint256 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '\n', '}\n', '\n', 'contract ComponentInterface {\n', '    string public name;\n', '    string public description;\n', '    string public category;\n', '    string public version;\n', '}\n', '\n', 'contract ExchangeInterface is ComponentInterface {\n', '    /*\n', '     * @dev Checks if a trading pair is available\n', '     * For ETH, use 0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\n', '     * @param address _sourceAddress The token to sell for the destAddress.\n', '     * @param address _destAddress The token to buy with the source token.\n', "     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\n", '     * @return boolean whether or not the trading pair is supported by this exchange provider\n', '     */\n', '    function supportsTradingPair(address _srcAddress, address _destAddress, bytes32 _exchangeId)\n', '        external view returns(bool supported);\n', '\n', '    /*\n', '     * @dev Buy a single token with ETH.\n', '     * @param ERC20Extended _token The token to buy, should be an ERC20Extended address.\n', '     * @param uint _amount Amount of ETH used to buy this token. Make sure the value sent to this function is the same as the _amount.\n', '     * @param uint _minimumRate The minimum amount of tokens to receive for 1 ETH.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', "     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\n", '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here.\n', '     * @return boolean whether or not the trade succeeded.\n', '     */\n', '    function buyToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external payable returns(bool success);\n', '\n', '    /*\n', '     * @dev Sell a single token for ETH. Make sure the token is approved beforehand.\n', '     * @param ERC20Extended _token The token to sell, should be an ERC20Extended address.\n', '     * @param uint _amount Amount of tokens to sell.\n', '     * @param uint _minimumRate The minimum amount of ETH to receive for 1 ERC20Extended token.\n', '     * @param address _depositAddress The address to send the bought tokens to.\n', "     * @param bytes32 _exchangeId The exchangeId to choose. If it's an empty string, then the exchange will be chosen automatically.\n", '     * @param address _partnerId If the exchange supports a partnerId, you can supply your partnerId here\n', '     * @return boolean boolean whether or not the trade succeeded.\n', '     */\n', '    function sellToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress, bytes32 _exchangeId, address _partnerId\n', '        ) external returns(bool success);\n', '}\n', '\n', 'contract KyberNetworkInterface {\n', '\n', '    function getExpectedRate(ERC20Extended src, ERC20Extended dest, uint srcQty)\n', '        external view returns (uint expectedRate, uint slippageRate);\n', '\n', '    function trade(\n', '        ERC20Extended source,\n', '        uint srcAmount,\n', '        ERC20Extended dest,\n', '        address destAddress,\n', '        uint maxDestAmount,\n', '        uint minConversionRate,\n', '        address walletId)\n', '        external payable returns(uint);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract OlympusExchangeAdapterInterface is Ownable {\n', '\n', '    function supportsTradingPair(address _srcAddress, address _destAddress)\n', '        external view returns(bool supported);\n', '\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount)\n', '        external view returns(uint expectedRate, uint slippageRate);\n', '\n', '    function sellToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '        ) external returns(bool success);\n', '\n', '    function buyToken\n', '        (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '        ) external payable returns(bool success);\n', '\n', '    function enable() external returns(bool);\n', '    function disable() external returns(bool);\n', '    function isEnabled() external view returns (bool success);\n', '\n', '    function setExchangeDetails(bytes32 _id, bytes32 _name) external returns(bool success);\n', '    function getExchangeDetails() external view returns(bytes32 _name, bool _enabled);\n', '\n', '}\n', '\n', 'contract BancorConverterInterface {\n', '    string public converterType;\n', '    ERC20Extended[] public quickBuyPath;\n', '    /**\n', '        @dev returns the length of the quick buy path array\n', '        @return quick buy path length\n', '    */\n', '    function getQuickBuyPathLength() public view returns (uint256);\n', '    /**\n', '        @dev returns the expected return for converting a specific amount of _fromToken to _toToken\n', '\n', '        @param _fromToken  ERC20 token to convert from\n', '        @param _toToken    ERC20 token to convert to\n', '        @param _amount     amount to convert, in fromToken\n', '\n', '        @return expected conversion return amount\n', '    */\n', '    function getReturn(ERC20Extended _fromToken, ERC20Extended _toToken, uint256 _amount) public view returns (uint256);\n', '    /**\n', '        @dev converts the token to any other token in the bancor network by following a predefined conversion path\n', '        note that when converting from an ERC20 token (as opposed to a smart token), allowance must be set beforehand\n', '\n', '        @param _path        conversion path, see conversion path format in the BancorNetwork contract\n', '        @param _amount      amount to convert from (in the initial source token)\n', '        @param _minReturn   if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\n', '\n', '        @return tokens issued in return\n', '    */\n', '    function quickConvert(ERC20Extended[] _path, uint256 _amount, uint256 _minReturn)\n', '        public\n', '        payable\n', '        returns (uint256);\n', '\n', '}\n', '\n', 'contract ERC20NoReturn {\n', '    uint256 public decimals;\n', '    string public name;\n', '    string public symbol;\n', '    function totalSupply() public view returns (uint);\n', '    function balanceOf(address tokenOwner) public view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n', '    function transfer(address to, uint tokens) public;\n', '    function approve(address spender, uint tokens) public;\n', '    function transferFrom(address from, address to, uint tokens) public;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract BancorNetworkAdapter is OlympusExchangeAdapterInterface {\n', '    using SafeMath for uint256;\n', '\n', '    address public exchangeAdapterManager;\n', '    bytes32 public exchangeId;\n', '    bytes32 public name;\n', '    ERC20Extended public constant ETH_TOKEN_ADDRESS = ERC20Extended(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '    ERC20Extended public constant bancorToken = ERC20Extended(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\n', '    ERC20Extended public constant bancorETHToken = ERC20Extended(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\n', '    mapping(address => BancorConverterInterface) public tokenToConverter;\n', '    mapping(address => address) public tokenToRelay;\n', '\n', '    bool public adapterEnabled;\n', '\n', '    modifier checkArrayLengths(address[] tokenAddresses, BancorConverterInterface[] converterAddresses, address[] relayAddresses) {\n', '        require(tokenAddresses.length == converterAddresses.length && relayAddresses.length == converterAddresses.length);\n', '        _;\n', '    }\n', '\n', '    modifier checkTokenSupported(address _token) {\n', '        BancorConverterInterface bancorConverter = tokenToConverter[_token];\n', '        require(address(bancorConverter) != 0x0, "Token not supported");\n', '        _;\n', '    }\n', '\n', '    constructor (address _exchangeAdapterManager, address[] _tokenAddresses,\n', '    BancorConverterInterface[] _converterAddresses, address[] _relayAddresses)\n', '    checkArrayLengths(_tokenAddresses, _converterAddresses, _relayAddresses) public {\n', '        updateSupportedTokenList(_tokenAddresses, _converterAddresses, _relayAddresses);\n', '        exchangeAdapterManager = _exchangeAdapterManager;\n', '        adapterEnabled = true;\n', '    }\n', '\n', '    modifier onlyExchangeAdapterManager() {\n', '        require(msg.sender == address(exchangeAdapterManager));\n', '        _;\n', '    }\n', '\n', '    function updateSupportedTokenList(address[] _tokenAddresses, BancorConverterInterface[] _converterAddresses, address[] _relayAddresses)\n', '    checkArrayLengths(_tokenAddresses, _converterAddresses, _relayAddresses)\n', '    public onlyOwner returns (bool success) {\n', '        for(uint i = 0; i < _tokenAddresses.length; i++){\n', '            tokenToConverter[_tokenAddresses[i]] = _converterAddresses[i];\n', '            tokenToRelay[_tokenAddresses[i]] = _relayAddresses[i];\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function supportsTradingPair(address _srcAddress, address _destAddress) external view returns(bool supported){\n', '        address _tokenAddress = ETH_TOKEN_ADDRESS == _srcAddress ? _destAddress : _srcAddress;\n', '        BancorConverterInterface bancorConverter = tokenToConverter[_tokenAddress];\n', '        return address(bancorConverter) != 0x0;\n', '    }\n', '\n', '    function getPrice(ERC20Extended _sourceAddress, ERC20Extended _destAddress, uint _amount)\n', '    external view returns(uint expectedRate, uint slippageRate) {\n', '        require(_amount > 0);\n', '        bool isBuying = _sourceAddress == ETH_TOKEN_ADDRESS;\n', '        ERC20Extended targetToken = isBuying ? _destAddress : _sourceAddress;\n', '        BancorConverterInterface BNTConverter = tokenToConverter[address(bancorToken)];\n', '\n', '        uint rate;\n', '        BancorConverterInterface targetTokenConverter = tokenToConverter[address(targetToken)];\n', '\n', '        uint ETHToBNTRate = BNTConverter.getReturn(bancorETHToken, bancorToken, _amount);\n', '\n', '\n', "        // Bancor is a special case, it's their token\n", '        if (targetToken == bancorToken){\n', '            if(isBuying) {\n', '                rate = ((ETHToBNTRate * 10**18) / _amount);\n', '            } else {\n', '                rate = BNTConverter.getReturn(bancorToken, bancorETHToken, _amount);\n', '                rate = ((rate * 10**_sourceAddress.decimals()) / _amount);\n', '            }\n', '        } else {\n', '            if(isBuying){\n', '                // Get amount of tokens for the amount of BNT for amount ETH\n', '                rate = targetTokenConverter.getReturn(bancorToken, targetToken, ETHToBNTRate);\n', '                // Convert rate to 1ETH to token or token to 1 ETH\n', '                rate = ((rate * 10**18) / _amount);\n', '            } else {\n', '                uint targetTokenToBNTRate = targetTokenConverter.getReturn(targetToken, bancorToken, 10**targetToken.decimals());\n', '                rate = BNTConverter.getReturn(bancorToken, bancorETHToken, targetTokenToBNTRate);\n', '                // Convert rate to 1ETH to token or token to 1 ETH\n', '                rate = ((rate * 10**_sourceAddress.decimals()) / _amount);\n', '            }\n', '        }\n', '\n', '        // TODO slippage?\n', '        return (rate,0);\n', '    }\n', '\n', '    // https://support.bancor.network/hc/en-us/articles/360000878832-How-to-use-the-quickConvert-function\n', '    function getPath(ERC20Extended _token, bool isBuying) public view returns(ERC20Extended[] tokenPath, uint resultPathLength) {\n', '        BancorConverterInterface bancorConverter = tokenToConverter[_token];\n', '        uint pathLength;\n', '        ERC20Extended[] memory path;\n', '\n', '        // When buying, we can get the path from Bancor easily, by getting the quickBuyPath from the converter address\n', '        if(isBuying){\n', '            pathLength = bancorConverter.getQuickBuyPathLength();\n', '            require(pathLength > 0, "Error with pathLength");\n', '            path = new ERC20Extended[](pathLength);\n', '\n', '            for (uint i = 0; i < pathLength; i++) {\n', '                path[i] = bancorConverter.quickBuyPath(i);\n', '            }\n', '            return (path, pathLength);\n', '        }\n', '\n', '        // When selling, we need to make the path ourselves\n', '\n', '        address relayAddress = tokenToRelay[_token];\n', '\n', '        if(relayAddress == 0x0){\n', "            // Bancor is a special case, it's their token\n", '            if(_token == bancorToken){\n', '                path = new ERC20Extended[](3);\n', '                path[0] = _token;\n', '                path[1] = _token;\n', '                path[2] = bancorETHToken;\n', '                return (path, 3);\n', '            }\n', "            // It's a Bancor smart token, handle it accordingly\n", '            path = new ERC20Extended[](5);\n', '            path[0] = _token;\n', '            path[1] = _token;\n', '            path[2] = bancorToken;\n', '            path[3] = bancorToken;\n', '            path[4] = bancorETHToken;\n', '            return (path, 5);\n', '        }\n', '\n', "        // It's a relay token, handle it accordingly\n", '        path = new ERC20Extended[](5);\n', '        path[0] = _token;                              // ERC20 Token to sell\n', '        path[1] = ERC20Extended(relayAddress);         // Relay address (automatically converted to converter address)\n', '        path[2] = bancorToken;                         // BNT Smart token address, as converter\n', '        path[3] = bancorToken;                         // BNT Smart token address, as "to" and "from" token\n', '        path[4] = bancorETHToken;                      // The Bancor ETH token, this will signal we want our return in ETH\n', '\n', '        return (path, 5);\n', '    }\n', '\n', '    // In contrast to Kyber, Bancor uses a minimum return for the complete trade, instead of a minimum rate for 1 ETH (for buying) or token (when selling)\n', '    function convertMinimumRateToMinimumReturn(ERC20Extended _token, uint _minimumRate, uint _amount, bool isBuying)\n', '    private view returns(uint minimumReturn) {\n', '        if(_minimumRate == 0){\n', '            return 1;\n', '        }\n', '\n', '        if(isBuying){\n', '            return (_amount * 10**18) / _minimumRate;\n', '        }\n', '\n', '        return (_amount * 10**_token.decimals()) / _minimumRate;\n', '    }\n', '\n', '    function sellToken\n', '    (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '    ) checkTokenSupported(_token) external returns(bool success) {\n', '        require(_token.balanceOf(address(this)) >= _amount, "Balance of token is not sufficient in adapter");\n', '        ERC20Extended[] memory internalPath;\n', '        ERC20Extended[] memory path;\n', '        uint pathLength;\n', '        (internalPath,pathLength) = getPath(_token, false);\n', '\n', '        path = new ERC20Extended[](pathLength);\n', '        for(uint i = 0; i < pathLength; i++) {\n', '            path[i] = internalPath[i];\n', '        }\n', '\n', '        BancorConverterInterface bancorConverter = tokenToConverter[_token];\n', '\n', '        ERC20NoReturn(_token).approve(address(bancorConverter), 0);\n', '        ERC20NoReturn(_token).approve(address(bancorConverter), _amount);\n', '        uint minimumReturn = convertMinimumRateToMinimumReturn(_token,_amount,_minimumRate, false);\n', '        uint returnedAmountOfETH = bancorConverter.quickConvert(path,_amount,minimumReturn);\n', '        require(returnedAmountOfETH > 0, "BancorConverter did not return any ETH");\n', '        _depositAddress.transfer(returnedAmountOfETH);\n', '        return true;\n', '    }\n', '\n', '    function buyToken (\n', '        ERC20Extended _token, uint _amount, uint _minimumRate,\n', '        address _depositAddress\n', '    ) checkTokenSupported(_token) external payable returns(bool success){\n', '        require(msg.value == _amount, "Amount of Ether sent is not the same as the amount parameter");\n', '        ERC20Extended[] memory internalPath;\n', '        ERC20Extended[] memory path;\n', '        uint pathLength;\n', '        (internalPath,pathLength) = getPath(_token, true);\n', '        path = new ERC20Extended[](pathLength);\n', '        for(uint i = 0; i < pathLength; i++) {\n', '            path[i] = internalPath[i];\n', '        }\n', '\n', '        uint minimumReturn = convertMinimumRateToMinimumReturn(_token,_amount,_minimumRate, true);\n', '        uint returnedAmountOfTokens = tokenToConverter[address(bancorToken)].quickConvert.value(_amount)(path,_amount,minimumReturn);\n', '        require(returnedAmountOfTokens > 0, "BancorConverter did not return any tokens");\n', '        ERC20NoReturn(_token).transfer(_depositAddress, returnedAmountOfTokens);\n', '        return true;\n', '    }\n', '\n', '    function enable() external onlyOwner returns(bool){\n', '        adapterEnabled = true;\n', '        return true;\n', '    }\n', '\n', '    function disable() external onlyOwner returns(bool){\n', '        adapterEnabled = false;\n', '        return true;\n', '    }\n', '\n', '    function isEnabled() external view returns (bool success) {\n', '        return adapterEnabled;\n', '    }\n', '\n', '    function setExchangeAdapterManager(address _exchangeAdapterManager) external onlyOwner {\n', '        exchangeAdapterManager = _exchangeAdapterManager;\n', '    }\n', '\n', '    function setExchangeDetails(bytes32 _id, bytes32 _name)\n', '    external onlyExchangeAdapterManager returns(bool)\n', '    {\n', '        exchangeId = _id;\n', '        name = _name;\n', '        return true;\n', '    }\n', '\n', '    function getExchangeDetails()\n', '    external view returns(bytes32 _name, bool _enabled)\n', '    {\n', '        return (name, adapterEnabled);\n', '    }\n', '}']
