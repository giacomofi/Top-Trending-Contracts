['pragma solidity ^0.4.8;\n', '\n', '// an interface to ERC20 contracts\n', '// only adds the signatures for the methods we need for withdrawals\n', 'contract ERC20 {\n', '  function balanceOf(address _owner) public constant returns (uint balance);\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract Capsule {\n', '    // store the eventual recipient of the capsule\n', '    // who will be allowed to withdraw when the time comes\n', '    address public recipient;\n', '    // the date of the eventual excavation store in seconds from epoch\n', '    uint public excavation;\n', '    // your friends at ETHCapsule, thanks for your support!\n', '    address public company = 0x0828be80e6A821D6bf6300bEa7f61d1c4e39496F;\n', '    // percentage of funds shared at withdrawal\n', '    uint public percent = 2;\n', '\n', '    // event for capsule creation with pertinent details\n', '    event CapsuleCreated(\n', '        uint _excavation,\n', '        address _recipient\n', '    );\n', '\n', '    // constructor for the capsule\n', '    // must put in an eventual excavation date and the recipient address\n', '    // also allows sending ETH as well as listing new tokens\n', '    function Capsule(uint _excavation, address _recipient) payable public {\n', '      require(_excavation < (block.timestamp + 100 years));\n', '      recipient = _recipient;\n', '      excavation = _excavation;\n', '      CapsuleCreated(_excavation, _recipient);\n', '    }\n', '\n', '    // event for a fallback payable deposit\n', '    event Deposit(\n', '        uint _amount,\n', '        address _sender\n', '    );\n', '\n', '    // this method accepts ether at any point as a way\n', '    // of facilitating groups pooling their resources\n', '    function () payable public {\n', '      Deposit(msg.value, msg.sender);\n', '    }\n', '\n', '    // The event any ether is withdrawn\n', '    event EtherWithdrawal(\n', '      uint _amount\n', '    );\n', '\n', '    // The event any time an ERC20 token is withdrawn\n', '    event TokenWithdrawal(\n', '      address _tokenAddress,\n', '      uint _amount\n', '    );\n', '\n', '    // allows for the withdrawal of ECR20 tokens and Ether!\n', '    // must be the intended recipient after the excavation date\n', '    function withdraw(address[] _tokens) public {\n', '      require(msg.sender == recipient);\n', '      require(block.timestamp > excavation);\n', '\n', '      // withdraw ether\n', '      if(this.balance > 0) {\n', '        uint ethShare = this.balance / (100 / percent);\n', '        company.transfer(ethShare);\n', '        uint ethWithdrawal = this.balance;\n', '        msg.sender.transfer(ethWithdrawal);\n', '        EtherWithdrawal(ethWithdrawal);\n', '      }\n', '\n', '      // withdraw listed ERC20 tokens\n', '      for(uint i = 0; i < _tokens.length; i++) {\n', '        ERC20 token = ERC20(_tokens[i]);\n', '        uint tokenBalance = token.balanceOf(this);\n', '        if(tokenBalance > 0) {\n', '          uint tokenShare = tokenBalance / (100 / percent);\n', '          token.transfer(company, tokenShare);\n', '          uint tokenWithdrawal = token.balanceOf(this);\n', '          token.transfer(recipient, tokenWithdrawal);\n', '          TokenWithdrawal(_tokens[i], tokenWithdrawal);\n', '        }\n', '      }\n', '    }\n', '}']