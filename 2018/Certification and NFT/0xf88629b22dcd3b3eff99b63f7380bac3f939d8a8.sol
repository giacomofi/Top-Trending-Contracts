['pragma solidity ^0.4.20;\n', '\n', '// v.1.0.0  2018.04.02\n', 'contract soccerGo {\n', '    address private owner;\n', '    mapping (address => bool) private admins;\n', '    \n', '    uint256 gameId = 0;\n', '    address callAddr = 0x0;\n', '    \n', '    event showPlayerAddress(address);\n', '    event showPlayerBet(uint256);\n', '    event showBetLeft(uint256);\n', '    event showBetRight(uint256);\n', '    event showResult(uint256);\n', '    event showCount(uint256);\n', '    event showTimeStamp(uint256);\n', '    event showWinValue(uint256);\n', '    \n', '    // Win limit\n', '    uint[] private slot_limit;\n', '    \n', '    // Dev fee\n', '    uint256 fee = 99;\n', '    \n', '    // Slot 1~10 win limit settings\n', '    function SetLimit(uint _slot, uint win_limit) onlyAdmins() public {\n', '        require(_slot > 0 && _slot < 12);\n', '        slot_limit[_slot - 1] = win_limit;\n', '    }\n', '    \n', '    function soccerGo() public {\n', '        owner = msg.sender;\n', '        admins[owner] = true;\n', '        \n', '        // RTP 97% ~ 98%\n', '        slot_limit.length = 11;\n', '        slot_limit[0] = 1170;\n', '        slot_limit[1] = 611;\n', '        slot_limit[2] = 416;\n', '        slot_limit[3] = 315;\n', '        slot_limit[4] = 253;\n', '        slot_limit[5] = 212;\n', '        slot_limit[6] = 182;\n', '        slot_limit[7] = 159;\n', '        slot_limit[8] = 141;\n', '        slot_limit[9] = 127;\n', '        slot_limit[10] = 115;\n', '    }\n', '    \n', '    function contractBalance() public view returns (uint256) {\n', '        return this.balance;\n', '    }\n', '    \n', '    // Bet limit\n', '    uint256 private min_value = 0.1 ether;\n', '    uint256 private max_value = 0.3 ether;\n', '    \n', '    // SetBetLimit\n', '    function setBetLimit(uint256 min, uint256 max) public onlyAdmins() {\n', '        uint256 base_bet = 0.1 ether;\n', '        min_value = base_bet * min;\n', '        max_value = base_bet * max;\n', '    }\n', '    \n', '    function setCalleeContract(address _caller) public onlyAdmins() {\n', '        callAddr = _caller;\n', '    }\n', '    \n', '    function playTypes(uint _slot_count) internal returns (uint) {\n', '        return (slot_limit[_slot_count - 1]);\n', '    }\n', '    \n', '    function getRandom(address _call) internal returns(uint) {\n', '        Callee c = Callee(_call);\n', '        return c.random(contractBalance(), msg.value, msg.sender);\n', '    }\n', '    \n', '    function setDevfee(uint256 _value) internal onlyAdmins() {\n', '        fee = _value;\n', '    }\n', '    \n', '    function buy(uint256 _left, uint256 _right)\n', '    public\n', '    payable\n', '    {\n', '        require(_left >= 1 && _left <= 13);\n', '        require(_right >= 1 && _right <= 13);\n', '        require(_right - _left >= 1);\n', '        require(msg.value >= min_value);\n', '        require(msg.value <= max_value);\n', '        \n', '        uint256 betValue = msg.value;\n', '        uint256 result = getRandom(callAddr);\n', '        uint256 types = playTypes(_right - _left - 1);\n', '        uint256 winValue = 0;\n', '        gameId++;\n', '        \n', '        if (result > _left && result < _right) {\n', '            winValue = betValue * types / 100;\n', '            msg.sender.transfer((winValue * fee) / 100);\n', '        }\n', '\n', '        showPlayerAddress(msg.sender);\n', '        showPlayerBet(betValue);\n', '        showBetLeft(_left);\n', '        showBetRight(_right);\n', '        showResult(result);\n', '        showCount(gameId);\n', '        showTimeStamp(now);\n', '        showWinValue(winValue);\n', '    }\n', '    \n', '    /* Depoit */\n', '    function() payable public { }\n', '    \n', '    /* Withdraw */\n', '    function withdrawAll() onlyOwner() \n', '    public \n', '    {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function withdrawAmount(uint256 _amount) onlyOwner() \n', '    public \n', '    {\n', '        uint256 value = 1.0 ether;\n', '        owner.transfer(_amount * value);\n', '    }\n', '    \n', '    /* Modifiers */\n', '    modifier onlyOwner() \n', '    {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmins() \n', '    {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '  \n', '    /* Owner */\n', '    function setOwner (address _owner) onlyOwner() \n', '    public \n', '    {\n', '        owner = _owner;\n', '    }\n', '    \n', '    function addAdmin (address _admin) onlyOwner() \n', '    public \n', '    {\n', '        admins[_admin] = true;\n', '    }\n', '\n', '    function removeAdmin (address _admin) onlyOwner() \n', '    public \n', '    {\n', '        delete admins[_admin];\n', '    }\n', '}\n', '\n', '\n', 'contract Callee {\n', '    function random(uint256 _balance, uint256 _value, address _player) returns(uint);\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '// v.1.0.0  2018.04.02\n', 'contract soccerGo {\n', '    address private owner;\n', '    mapping (address => bool) private admins;\n', '    \n', '    uint256 gameId = 0;\n', '    address callAddr = 0x0;\n', '    \n', '    event showPlayerAddress(address);\n', '    event showPlayerBet(uint256);\n', '    event showBetLeft(uint256);\n', '    event showBetRight(uint256);\n', '    event showResult(uint256);\n', '    event showCount(uint256);\n', '    event showTimeStamp(uint256);\n', '    event showWinValue(uint256);\n', '    \n', '    // Win limit\n', '    uint[] private slot_limit;\n', '    \n', '    // Dev fee\n', '    uint256 fee = 99;\n', '    \n', '    // Slot 1~10 win limit settings\n', '    function SetLimit(uint _slot, uint win_limit) onlyAdmins() public {\n', '        require(_slot > 0 && _slot < 12);\n', '        slot_limit[_slot - 1] = win_limit;\n', '    }\n', '    \n', '    function soccerGo() public {\n', '        owner = msg.sender;\n', '        admins[owner] = true;\n', '        \n', '        // RTP 97% ~ 98%\n', '        slot_limit.length = 11;\n', '        slot_limit[0] = 1170;\n', '        slot_limit[1] = 611;\n', '        slot_limit[2] = 416;\n', '        slot_limit[3] = 315;\n', '        slot_limit[4] = 253;\n', '        slot_limit[5] = 212;\n', '        slot_limit[6] = 182;\n', '        slot_limit[7] = 159;\n', '        slot_limit[8] = 141;\n', '        slot_limit[9] = 127;\n', '        slot_limit[10] = 115;\n', '    }\n', '    \n', '    function contractBalance() public view returns (uint256) {\n', '        return this.balance;\n', '    }\n', '    \n', '    // Bet limit\n', '    uint256 private min_value = 0.1 ether;\n', '    uint256 private max_value = 0.3 ether;\n', '    \n', '    // SetBetLimit\n', '    function setBetLimit(uint256 min, uint256 max) public onlyAdmins() {\n', '        uint256 base_bet = 0.1 ether;\n', '        min_value = base_bet * min;\n', '        max_value = base_bet * max;\n', '    }\n', '    \n', '    function setCalleeContract(address _caller) public onlyAdmins() {\n', '        callAddr = _caller;\n', '    }\n', '    \n', '    function playTypes(uint _slot_count) internal returns (uint) {\n', '        return (slot_limit[_slot_count - 1]);\n', '    }\n', '    \n', '    function getRandom(address _call) internal returns(uint) {\n', '        Callee c = Callee(_call);\n', '        return c.random(contractBalance(), msg.value, msg.sender);\n', '    }\n', '    \n', '    function setDevfee(uint256 _value) internal onlyAdmins() {\n', '        fee = _value;\n', '    }\n', '    \n', '    function buy(uint256 _left, uint256 _right)\n', '    public\n', '    payable\n', '    {\n', '        require(_left >= 1 && _left <= 13);\n', '        require(_right >= 1 && _right <= 13);\n', '        require(_right - _left >= 1);\n', '        require(msg.value >= min_value);\n', '        require(msg.value <= max_value);\n', '        \n', '        uint256 betValue = msg.value;\n', '        uint256 result = getRandom(callAddr);\n', '        uint256 types = playTypes(_right - _left - 1);\n', '        uint256 winValue = 0;\n', '        gameId++;\n', '        \n', '        if (result > _left && result < _right) {\n', '            winValue = betValue * types / 100;\n', '            msg.sender.transfer((winValue * fee) / 100);\n', '        }\n', '\n', '        showPlayerAddress(msg.sender);\n', '        showPlayerBet(betValue);\n', '        showBetLeft(_left);\n', '        showBetRight(_right);\n', '        showResult(result);\n', '        showCount(gameId);\n', '        showTimeStamp(now);\n', '        showWinValue(winValue);\n', '    }\n', '    \n', '    /* Depoit */\n', '    function() payable public { }\n', '    \n', '    /* Withdraw */\n', '    function withdrawAll() onlyOwner() \n', '    public \n', '    {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function withdrawAmount(uint256 _amount) onlyOwner() \n', '    public \n', '    {\n', '        uint256 value = 1.0 ether;\n', '        owner.transfer(_amount * value);\n', '    }\n', '    \n', '    /* Modifiers */\n', '    modifier onlyOwner() \n', '    {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmins() \n', '    {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '  \n', '    /* Owner */\n', '    function setOwner (address _owner) onlyOwner() \n', '    public \n', '    {\n', '        owner = _owner;\n', '    }\n', '    \n', '    function addAdmin (address _admin) onlyOwner() \n', '    public \n', '    {\n', '        admins[_admin] = true;\n', '    }\n', '\n', '    function removeAdmin (address _admin) onlyOwner() \n', '    public \n', '    {\n', '        delete admins[_admin];\n', '    }\n', '}\n', '\n', '\n', 'contract Callee {\n', '    function random(uint256 _balance, uint256 _value, address _player) returns(uint);\n', '}']
