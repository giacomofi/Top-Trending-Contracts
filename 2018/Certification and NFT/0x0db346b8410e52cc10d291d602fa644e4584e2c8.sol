['pragma solidity ^0.4.17;\n', '\n', 'contract Election{\n', '    \n', '    address public manager; // contract manager\n', '    \n', '    bool public isActive;\n', '    mapping(uint256 => address[]) public users; // all votes\n', '    mapping(address => uint256[]) public votes; // to fetch one user&#39;s votes\n', '    uint256 public totalUsers; // total users participated (not unique user count)\n', '    uint256 public totalVotes; // for calculating avg vote guess on client side. (stats only)\n', '    address[] public winners; // winner list. will be set after manager calls finalizeContract function\n', '    uint256 public winnerPrice; // reward per user for successfull guess.\n', '    uint256 public voteResult; // candidate&#39;s vote result will be set after election.\n', '    \n', '    \n', '    // minimum reqired ether to enter competition.\n', '    modifier mRequiredValue(){\n', '        require(msg.value == .01 ether);\n', '        _;\n', '    }\n', '    \n', '    // manager only functions: pause, finalizeContract\n', '    modifier mManagerOnly(){\n', '        require(msg.sender == manager);\n', '        _;\n', '    }\n', '    \n', '    // contract will be manually paused before on election day by manager.\n', '    modifier mIsActive(){\n', '        require(isActive);\n', '        _;\n', '    }\n', '    \n', '    // constructor\n', '    function Election() public{\n', '        manager = msg.sender;\n', '        isActive = true;\n', '    }\n', '    \n', '    /**\n', '    * user can join competition with this function.\n', '    * user&#39;s guess multiplied with 10 before calling this function for not using decimal numbers.\n', '    * ex: user guess: 40.2 -> 402\n', '    **/\n', '    function voteRequest(uint256 guess) public payable mIsActive mRequiredValue {\n', '        require(guess > 0);\n', '        require(guess <= 1000);\n', '        address[] storage list = users[guess];\n', '        list.push(msg.sender);\n', '        votes[msg.sender].push(guess);\n', '        totalUsers++;\n', '        totalVotes += guess;\n', '    }\n', '    \n', '    // get user&#39;s vote history.\n', '    function getUserVotes() public view returns(uint256[]){\n', '        return votes[msg.sender];\n', '    }\n', '\n', '    // stats only function\n', '    function getSummary() public returns(uint256, uint256, uint256) {\n', '        return(\n', '            totalVotes,\n', '            totalUsers,\n', '            this.balance\n', '        );\n', '    }\n', '    \n', '    // for pausing contract. contract will be paused on election day. new users can&#39;t join competition after contract paused.\n', '    function pause() public mManagerOnly {\n', '        isActive = !isActive;\n', '    }\n', '    \n', '    /** send ether to winners.(5% manager fee.)\n', '     * if there is no winner choose closest estimates will get rewards.\n', '     * manager will call this function after official results announced by YSK.\n', '     * winners will receive rewards instantly.\n', '     * election results will be rounded to one decimal only.\n', '     * if result is 40.52 then winner is who guessed 40.5\n', '     * if result is 40.56 then winner is who guessed 40.6\n', '     **/\n', '    function finalizeContract(uint256 winningNumber) public mManagerOnly {\n', '        voteResult = winningNumber;\n', '        address[] memory list = users[winningNumber];\n', '        address[] memory secondaryList;\n', '        uint256 winnersCount = list.length;\n', '\n', '        if(winnersCount == 0){\n', '            // if there is no winner choose closest estimates.\n', '            bool loop = true;\n', '            uint256 index = 1;\n', '            while(loop == true){\n', '                list = users[winningNumber-index];\n', '                secondaryList = users[winningNumber+index];\n', '                winnersCount = list.length + secondaryList.length;\n', '\n', '                if(winnersCount > 0){\n', '                    loop = false;\n', '                }\n', '                else{\n', '                    index++;\n', '                }\n', '            }\n', '        }\n', '        \n', '        uint256 managerFee = (this.balance/100)*5; // manager fee %5\n', '        uint256 reward = (this.balance - managerFee) / winnersCount; // reward for per winner.\n', '        winnerPrice = reward;\n', '        \n', '        // set winner list\n', '        winners = list;\n', '        // transfer eth to winners.\n', '        for (uint256 i = 0; i < list.length; i++) {\n', '            list[i].transfer(reward);\n', '        }\n', '                \n', '        // if anyone guessed the correct percent secondaryList will be empty array.\n', '        for (uint256 j = 0; j < secondaryList.length; j++) {\n', '            // transfer eth to winners.\n', '            secondaryList[j].transfer(reward);\n', '            winners.push(secondaryList[j]); // add to winners\n', '        }\n', '        \n', '        // transfer fee to manager\n', '        manager.transfer(this.balance);\n', '        \n', '        \n', '    }\n', '    \n', '}']