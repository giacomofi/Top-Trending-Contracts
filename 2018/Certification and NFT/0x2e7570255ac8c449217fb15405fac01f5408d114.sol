['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  address public ceoWallet;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    ceoWallet = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '// Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '}\n', '\n', '\n', 'contract CryptoRomeControl is Ownable {\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function transferWalletOwnership(address newWalletAddress) onlyOwner public {\n', '      require(newWalletAddress != address(0));\n', '      ceoWallet = newWalletAddress;\n', '    }\n', '\n', '    function pause() external onlyOwner whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '    }\n', '}\n', '\n', 'contract Centurions is ERC721, CryptoRomeControl {\n', '\n', '    // Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant name = "CryptoRomeCenturion";\n', '    string public constant symbol = "CROMEC";\n', '\n', '    struct Centurion {\n', '        uint256 level;\n', '        uint256 experience;\n', '        uint256 askingPrice;\n', '    }\n', '\n', '    uint256[50] public expForLevels = [\n', '        0,   // 0\n', '        20,\n', '        50,\n', '        100,\n', '        200,\n', '        400,  // 5\n', '        800,\n', '        1400,\n', '        2100,\n', '        3150,\n', '        4410,  // 10\n', '        5740,\n', '        7460,\n', '        8950,\n', '        10740,\n', '        12880,\n', '        15460,\n', '        18550,\n', '        22260,\n', '        26710,\n', '        32050, // 20\n', '        38500,\n', '        46200,\n', '        55400,\n', '        66500,\n', '        79800,\n', '        95700,\n', '        115000,\n', '        138000,\n', '        166000,\n', '        200000, // 30\n', '        240000,\n', '        290000,\n', '        350000,\n', '        450000,\n', '        580000,\n', '        820000,\n', '        1150000,\n', '        1700000,\n', '        2600000,\n', '        3850000, // 40\n', '        5800000,\n', '        8750000,\n', '        13000000,\n', '        26000000,\n', '        52000000,\n', '        104000000,\n', '        208000000,\n', '        416000000,\n', '        850000000 // 49\n', '    ];\n', '\n', '    Centurion[] internal allCenturionTokens;\n', '\n', '    string internal tokenURIs;\n', '\n', '    // Map of Centurion to the owner\n', '    mapping (uint256 => address) public centurionIndexToOwner;\n', '    mapping (address => uint256) ownershipTokenCount;\n', '    mapping (uint256 => address) centurionIndexToApproved;\n', '\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require(centurionIndexToOwner[_tokenId] == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function getCenturion(uint256 _tokenId) external view\n', '        returns (\n', '            uint256 level,\n', '            uint256 experience,\n', '            uint256 askingPrice\n', '        ) {\n', '        Centurion storage centurion = allCenturionTokens[_tokenId];\n', '\n', '        level = centurion.level;\n', '        experience = centurion.experience;\n', '        askingPrice = centurion.askingPrice;\n', '    }\n', '\n', '    function updateTokenUri(uint256 _tokenId, string _tokenURI) public whenNotPaused onlyOwner {\n', '        _setTokenURI(_tokenId, _tokenURI);\n', '    }\n', '\n', '    function createCenturion() public whenNotPaused onlyOwner returns (uint256) {\n', '        uint256 finalId = _createCenturion(msg.sender);\n', '        return finalId;\n', '    }\n', '\n', '    function issueCenturion(address _to) public whenNotPaused onlyOwner returns (uint256) {\n', '        uint256 finalId = _createCenturion(msg.sender);\n', '        _transfer(msg.sender, _to, finalId);\n', '        return finalId;\n', '    }\n', '\n', '    function listCenturion(uint256 _askingPrice) public whenNotPaused onlyOwner returns (uint256) {\n', '        uint256 finalId = _createCenturion(msg.sender);\n', '        allCenturionTokens[finalId].askingPrice = _askingPrice;\n', '        return finalId;\n', '    }\n', '\n', '    function sellCenturion(uint256 _tokenId, uint256 _askingPrice) onlyOwnerOf(_tokenId) whenNotPaused public {\n', '        allCenturionTokens[_tokenId].askingPrice = _askingPrice;\n', '    }\n', '\n', '    function cancelCenturionSale(uint256 _tokenId) onlyOwnerOf(_tokenId) whenNotPaused public {\n', '        allCenturionTokens[_tokenId].askingPrice = 0;\n', '    }\n', '\n', '    function purchaseCenturion(uint256 _tokenId) whenNotPaused public payable {\n', '        require(allCenturionTokens[_tokenId].askingPrice > 0);\n', '        require(msg.value >= allCenturionTokens[_tokenId].askingPrice);\n', '        allCenturionTokens[_tokenId].askingPrice = 0;\n', '        uint256 fee = devFee(msg.value);\n', '        ceoWallet.transfer(fee);\n', '        centurionIndexToOwner[_tokenId].transfer(SafeMath.sub(address(this).balance, fee));\n', '        _transfer(centurionIndexToOwner[_tokenId], msg.sender, _tokenId);\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        ownershipTokenCount[_to] = SafeMath.add(ownershipTokenCount[_to], 1);\n', '        centurionIndexToOwner[_tokenId] = _to;\n', '        if (_from != address(0)) {\n', '            // clear any previously approved ownership exchange\n', '            ownershipTokenCount[_from] = SafeMath.sub(ownershipTokenCount[_from], 1);\n', '            delete centurionIndexToApproved[_tokenId];\n', '        }\n', '    }\n', '\n', '    function _createCenturion(address _owner) internal returns (uint) {\n', '        Centurion memory _centurion = Centurion({\n', '            level: 1,\n', '            experience: 0,\n', '            askingPrice: 0\n', '        });\n', '        uint256 newCenturionId = allCenturionTokens.push(_centurion) - 1;\n', '\n', '        // Only 1000 centurions should ever exist (0-999)\n', '        require(newCenturionId < 1000);\n', '        _transfer(0, _owner, newCenturionId);\n', '        return newCenturionId;\n', '    }\n', '\n', '    function devFee(uint256 amount) internal pure returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount, 3), 100);\n', '    }\n', '\n', '    // Functions for ERC721 Below:\n', '\n', '    // Check is address has approval to transfer centurion.\n', '    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return centurionIndexToApproved[_tokenId] == _claimant;\n', '    }\n', '\n', '    function exists(uint256 _tokenId) public view returns (bool) {\n', '        address owner = centurionIndexToOwner[_tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    function addExperience(uint256 _tokenId, uint256 _exp) public whenNotPaused onlyOwner returns (uint256) {\n', '        require(exists(_tokenId));\n', '        allCenturionTokens[_tokenId].experience = SafeMath.add(allCenturionTokens[_tokenId].experience, _exp);\n', '        for (uint256 i = allCenturionTokens[_tokenId].level; i < 50; i++) {\n', '            if (allCenturionTokens[_tokenId].experience >= expForLevels[i]) {\n', '               allCenturionTokens[_tokenId].level = allCenturionTokens[_tokenId].level + 1;\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '        return allCenturionTokens[_tokenId].level;\n', '    }\n', '\n', '    function tokenURI(uint256 _tokenId) public view returns (string) {\n', '        require(exists(_tokenId));\n', '        return tokenURIs;\n', '    }\n', '\n', '    function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '        require(exists(_tokenId));\n', '        tokenURIs = _uri;\n', '    }\n', '\n', '    // Sets a centurion as approved for transfer to another address.\n', '    function _approve(uint256 _tokenId, address _approved) internal {\n', '        centurionIndexToApproved[_tokenId] = _approved;\n', '    }\n', '\n', '    // Returns the number of Centurions owned by a specific address.\n', '    function balanceOf(address _owner) public view returns (uint256 count) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    // Transfers a Centurion to another address. If transferring to a smart\n', '    // contract ensure that it is aware of ERC-721.\n', '    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '\n', '        _transfer(msg.sender, _to, _tokenId);\n', '        emit Transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    //  Permit another address the right to transfer a specific Centurion via\n', '    //  transferFrom().\n', '    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\n', '        _approve(_tokenId, _to);\n', '\n', '        emit Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    // Transfer a Centurion owned by another address, for which the calling address\n', '    // has previously been granted transfer approval by the owner.\n', '    function takeOwnership(uint256 _tokenId) public {\n', '        require(centurionIndexToApproved[_tokenId] == msg.sender);\n', '        address owner = ownerOf(_tokenId);\n', '        _transfer(owner, msg.sender, _tokenId);\n', '        emit Transfer(owner, msg.sender, _tokenId);\n', '  }\n', '\n', '    // 1000 Centurions will ever exist\n', '    function totalSupply() public view returns (uint) {\n', '        return allCenturionTokens.length;\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner)\n', '    {\n', '        owner = centurionIndexToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '\n', '    // List of all Centurion IDs assigned to an address.\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalCenturions = totalSupply();\n', '            uint256 resultIndex = 0;\n', '            uint256 centurionId;\n', '\n', '            for (centurionId = 0; centurionId < totalCenturions; centurionId++) {\n', '                if (centurionIndexToOwner[centurionId] == _owner) {\n', '                    result[resultIndex] = centurionId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '            return result;\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '  address public ceoWallet;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = msg.sender;\n', '    ceoWallet = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '// Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '  function totalSupply() public view returns (uint256 total);\n', '}\n', '\n', '\n', 'contract CryptoRomeControl is Ownable {\n', '\n', '    bool public paused = false;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    function transferWalletOwnership(address newWalletAddress) onlyOwner public {\n', '      require(newWalletAddress != address(0));\n', '      ceoWallet = newWalletAddress;\n', '    }\n', '\n', '    function pause() external onlyOwner whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    function unpause() public onlyOwner whenPaused {\n', '        paused = false;\n', '    }\n', '}\n', '\n', 'contract Centurions is ERC721, CryptoRomeControl {\n', '\n', '    // Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant name = "CryptoRomeCenturion";\n', '    string public constant symbol = "CROMEC";\n', '\n', '    struct Centurion {\n', '        uint256 level;\n', '        uint256 experience;\n', '        uint256 askingPrice;\n', '    }\n', '\n', '    uint256[50] public expForLevels = [\n', '        0,   // 0\n', '        20,\n', '        50,\n', '        100,\n', '        200,\n', '        400,  // 5\n', '        800,\n', '        1400,\n', '        2100,\n', '        3150,\n', '        4410,  // 10\n', '        5740,\n', '        7460,\n', '        8950,\n', '        10740,\n', '        12880,\n', '        15460,\n', '        18550,\n', '        22260,\n', '        26710,\n', '        32050, // 20\n', '        38500,\n', '        46200,\n', '        55400,\n', '        66500,\n', '        79800,\n', '        95700,\n', '        115000,\n', '        138000,\n', '        166000,\n', '        200000, // 30\n', '        240000,\n', '        290000,\n', '        350000,\n', '        450000,\n', '        580000,\n', '        820000,\n', '        1150000,\n', '        1700000,\n', '        2600000,\n', '        3850000, // 40\n', '        5800000,\n', '        8750000,\n', '        13000000,\n', '        26000000,\n', '        52000000,\n', '        104000000,\n', '        208000000,\n', '        416000000,\n', '        850000000 // 49\n', '    ];\n', '\n', '    Centurion[] internal allCenturionTokens;\n', '\n', '    string internal tokenURIs;\n', '\n', '    // Map of Centurion to the owner\n', '    mapping (uint256 => address) public centurionIndexToOwner;\n', '    mapping (address => uint256) ownershipTokenCount;\n', '    mapping (uint256 => address) centurionIndexToApproved;\n', '\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require(centurionIndexToOwner[_tokenId] == msg.sender);\n', '        _;\n', '    }\n', '\n', '    function getCenturion(uint256 _tokenId) external view\n', '        returns (\n', '            uint256 level,\n', '            uint256 experience,\n', '            uint256 askingPrice\n', '        ) {\n', '        Centurion storage centurion = allCenturionTokens[_tokenId];\n', '\n', '        level = centurion.level;\n', '        experience = centurion.experience;\n', '        askingPrice = centurion.askingPrice;\n', '    }\n', '\n', '    function updateTokenUri(uint256 _tokenId, string _tokenURI) public whenNotPaused onlyOwner {\n', '        _setTokenURI(_tokenId, _tokenURI);\n', '    }\n', '\n', '    function createCenturion() public whenNotPaused onlyOwner returns (uint256) {\n', '        uint256 finalId = _createCenturion(msg.sender);\n', '        return finalId;\n', '    }\n', '\n', '    function issueCenturion(address _to) public whenNotPaused onlyOwner returns (uint256) {\n', '        uint256 finalId = _createCenturion(msg.sender);\n', '        _transfer(msg.sender, _to, finalId);\n', '        return finalId;\n', '    }\n', '\n', '    function listCenturion(uint256 _askingPrice) public whenNotPaused onlyOwner returns (uint256) {\n', '        uint256 finalId = _createCenturion(msg.sender);\n', '        allCenturionTokens[finalId].askingPrice = _askingPrice;\n', '        return finalId;\n', '    }\n', '\n', '    function sellCenturion(uint256 _tokenId, uint256 _askingPrice) onlyOwnerOf(_tokenId) whenNotPaused public {\n', '        allCenturionTokens[_tokenId].askingPrice = _askingPrice;\n', '    }\n', '\n', '    function cancelCenturionSale(uint256 _tokenId) onlyOwnerOf(_tokenId) whenNotPaused public {\n', '        allCenturionTokens[_tokenId].askingPrice = 0;\n', '    }\n', '\n', '    function purchaseCenturion(uint256 _tokenId) whenNotPaused public payable {\n', '        require(allCenturionTokens[_tokenId].askingPrice > 0);\n', '        require(msg.value >= allCenturionTokens[_tokenId].askingPrice);\n', '        allCenturionTokens[_tokenId].askingPrice = 0;\n', '        uint256 fee = devFee(msg.value);\n', '        ceoWallet.transfer(fee);\n', '        centurionIndexToOwner[_tokenId].transfer(SafeMath.sub(address(this).balance, fee));\n', '        _transfer(centurionIndexToOwner[_tokenId], msg.sender, _tokenId);\n', '    }\n', '\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        ownershipTokenCount[_to] = SafeMath.add(ownershipTokenCount[_to], 1);\n', '        centurionIndexToOwner[_tokenId] = _to;\n', '        if (_from != address(0)) {\n', '            // clear any previously approved ownership exchange\n', '            ownershipTokenCount[_from] = SafeMath.sub(ownershipTokenCount[_from], 1);\n', '            delete centurionIndexToApproved[_tokenId];\n', '        }\n', '    }\n', '\n', '    function _createCenturion(address _owner) internal returns (uint) {\n', '        Centurion memory _centurion = Centurion({\n', '            level: 1,\n', '            experience: 0,\n', '            askingPrice: 0\n', '        });\n', '        uint256 newCenturionId = allCenturionTokens.push(_centurion) - 1;\n', '\n', '        // Only 1000 centurions should ever exist (0-999)\n', '        require(newCenturionId < 1000);\n', '        _transfer(0, _owner, newCenturionId);\n', '        return newCenturionId;\n', '    }\n', '\n', '    function devFee(uint256 amount) internal pure returns(uint256){\n', '        return SafeMath.div(SafeMath.mul(amount, 3), 100);\n', '    }\n', '\n', '    // Functions for ERC721 Below:\n', '\n', '    // Check is address has approval to transfer centurion.\n', '    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\n', '        return centurionIndexToApproved[_tokenId] == _claimant;\n', '    }\n', '\n', '    function exists(uint256 _tokenId) public view returns (bool) {\n', '        address owner = centurionIndexToOwner[_tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    function addExperience(uint256 _tokenId, uint256 _exp) public whenNotPaused onlyOwner returns (uint256) {\n', '        require(exists(_tokenId));\n', '        allCenturionTokens[_tokenId].experience = SafeMath.add(allCenturionTokens[_tokenId].experience, _exp);\n', '        for (uint256 i = allCenturionTokens[_tokenId].level; i < 50; i++) {\n', '            if (allCenturionTokens[_tokenId].experience >= expForLevels[i]) {\n', '               allCenturionTokens[_tokenId].level = allCenturionTokens[_tokenId].level + 1;\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '        return allCenturionTokens[_tokenId].level;\n', '    }\n', '\n', '    function tokenURI(uint256 _tokenId) public view returns (string) {\n', '        require(exists(_tokenId));\n', '        return tokenURIs;\n', '    }\n', '\n', '    function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '        require(exists(_tokenId));\n', '        tokenURIs = _uri;\n', '    }\n', '\n', '    // Sets a centurion as approved for transfer to another address.\n', '    function _approve(uint256 _tokenId, address _approved) internal {\n', '        centurionIndexToApproved[_tokenId] = _approved;\n', '    }\n', '\n', '    // Returns the number of Centurions owned by a specific address.\n', '    function balanceOf(address _owner) public view returns (uint256 count) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '\n', '    // Transfers a Centurion to another address. If transferring to a smart\n', '    // contract ensure that it is aware of ERC-721.\n', '    function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\n', '        require(_to != address(0));\n', '        require(_to != address(this));\n', '\n', '        _transfer(msg.sender, _to, _tokenId);\n', '        emit Transfer(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    //  Permit another address the right to transfer a specific Centurion via\n', '    //  transferFrom().\n', '    function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) whenNotPaused {\n', '        _approve(_tokenId, _to);\n', '\n', '        emit Approval(msg.sender, _to, _tokenId);\n', '    }\n', '\n', '    // Transfer a Centurion owned by another address, for which the calling address\n', '    // has previously been granted transfer approval by the owner.\n', '    function takeOwnership(uint256 _tokenId) public {\n', '        require(centurionIndexToApproved[_tokenId] == msg.sender);\n', '        address owner = ownerOf(_tokenId);\n', '        _transfer(owner, msg.sender, _tokenId);\n', '        emit Transfer(owner, msg.sender, _tokenId);\n', '  }\n', '\n', '    // 1000 Centurions will ever exist\n', '    function totalSupply() public view returns (uint) {\n', '        return allCenturionTokens.length;\n', '    }\n', '\n', '    function ownerOf(uint256 _tokenId) public view returns (address owner)\n', '    {\n', '        owner = centurionIndexToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '\n', '    // List of all Centurion IDs assigned to an address.\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 totalCenturions = totalSupply();\n', '            uint256 resultIndex = 0;\n', '            uint256 centurionId;\n', '\n', '            for (centurionId = 0; centurionId < totalCenturions; centurionId++) {\n', '                if (centurionIndexToOwner[centurionId] == _owner) {\n', '                    result[resultIndex] = centurionId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '            return result;\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
