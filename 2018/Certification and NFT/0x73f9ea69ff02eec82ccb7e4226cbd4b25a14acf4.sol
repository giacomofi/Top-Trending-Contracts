['//File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '//File: contracts\\ARTIDDigitalSign.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', 'contract ARTIDDigitalSign is Ownable{\n', '    \n', '    //archive of digital certificates, every certificate combine signer \n', '    //address and arts guid \n', '    mapping(bytes32 => Version[]) digitalCertificateArchive;\n', '    \n', '    \n', '    struct Version {\n', '        uint8 version;\n', '        bytes32 sign;\n', '        uint256 timestamp;\n', '    }\n', '\n', '    function Sign(string guid, string hash) public onlyWhitelisted {\n', '        address _signer = msg.sender;\n', '        string memory addressString = toString(_signer);\n', '        //combine signer with guid of arts to create an archive managed by the signer\n', '        string memory concatenatedData = strConcat(addressString,guid);\n', '        bytes32 hashed = keccak256(concatenatedData);\n', '        \n', '        uint8 version = 1;\n', '        Version[] memory versions = digitalCertificateArchive[hashed];\n', '        uint length =  versions.length;\n', '        for(uint8 i = 0; i < length; i++)\n', '        {\n', '            version = i+2;\n', '        }\n', '\n', '        bytes32 hashedSign = keccak256(hash); \n', '        Version memory v = Version(version,hashedSign,now);\n', '        digitalCertificateArchive[hashed].push(v);\n', '        \n', '    }\n', '\n', '    function GetSign(string guid, address signer) public view returns(bytes32 sign, uint8 signedVersion,uint256 timestamp){\n', '        address _signer = signer;\n', '        string memory addressString = toString(_signer);\n', '        //combine signer with guid of arts to create an archive managed by the signer\n', '        string memory concatenatedData = strConcat(addressString,guid);\n', '        bytes32 hashed = keccak256(concatenatedData);\n', '        uint length =  digitalCertificateArchive[hashed].length;\n', '        Version memory v = digitalCertificateArchive[hashed][length-1];\n', '        return (v.sign, v.version, v.timestamp);\n', '    }\n', '\n', '    function GetSignVersion(string guid, address signer, uint version) public view returns(bytes32 sign, uint8 signedVersion,uint256 timestamp){\n', '        address _signer = signer;\n', '        string memory addressString = toString(_signer);\n', '        //combine signer with guid of arts to create an archive managed by the signer\n', '        string memory concatenatedData = strConcat(addressString,guid);\n', '        bytes32 hashed = keccak256(concatenatedData);\n', '        Version memory v = digitalCertificateArchive[hashed][version-1];\n', '        return (v.sign, v.version, v.timestamp);\n', '    }\n', '\n', '    \n', '    \n', '    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        bytes memory _bc = bytes(_c);\n', '        bytes memory _bd = bytes(_d);\n', '        bytes memory _be = bytes(_e);\n', '        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '        bytes memory babcde = bytes(abcde);\n', '        uint k = 0;\n', '        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '        return string(babcde);\n', '    }\n', '\n', '    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n', '        return strConcat(_a, _b, _c, _d, "");\n', '    }\n', '    \n', '    function strConcat(string _a, string _b, string _c) internal returns (string) {\n', '        return strConcat(_a, _b, _c, "", "");\n', '    }\n', '    \n', '    function strConcat(string _a, string _b) internal returns (string) {\n', '        return strConcat(_a, _b, "", "", "");\n', '    }\n', '    \n', '    function toString(address x) returns (string) {\n', '        bytes memory b = new bytes(20);\n', '        for (uint i = 0; i < 20; i++)\n', '            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n', '        return string(b);\n', '    }\n', '    \n', '    function bytes32ToString(bytes32 x) constant returns (string) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '    return string(bytesStringTrimmed);\n', '}\n', '\n', '    mapping (address => bool) whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', '   * @dev Throws if called by any account that&#39;s not whitelisted.\n', '   */\n', '  modifier onlyWhitelisted() {\n', '    whitelist[msg.sender] == true;\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address addr)\n', '    onlyOwner\n', '    public\n', '  {\n', '    whitelist[addr] = true;\n', '    emit WhitelistedAddressAdded(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function isInWhitelist(address addr)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return whitelist[addr] == true;\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] addrs)\n', '    onlyOwner\n', '    public\n', '  {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      addAddressToWhitelist(addrs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', '   * false if the address wasn&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressFromWhitelist(address addr)\n', '    onlyOwner\n', '    public\n', '  {\n', '    whitelist[addr] = false;\n', '    emit WhitelistedAddressRemoved(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', '   * false if all addresses weren&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressesFromWhitelist(address[] addrs)\n', '    onlyOwner\n', '    public\n', '  {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      removeAddressFromWhitelist(addrs[i]);\n', '    }\n', '  }\n', '    \n', '}']
['//File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '//File: contracts\\ARTIDDigitalSign.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', 'contract ARTIDDigitalSign is Ownable{\n', '    \n', '    //archive of digital certificates, every certificate combine signer \n', '    //address and arts guid \n', '    mapping(bytes32 => Version[]) digitalCertificateArchive;\n', '    \n', '    \n', '    struct Version {\n', '        uint8 version;\n', '        bytes32 sign;\n', '        uint256 timestamp;\n', '    }\n', '\n', '    function Sign(string guid, string hash) public onlyWhitelisted {\n', '        address _signer = msg.sender;\n', '        string memory addressString = toString(_signer);\n', '        //combine signer with guid of arts to create an archive managed by the signer\n', '        string memory concatenatedData = strConcat(addressString,guid);\n', '        bytes32 hashed = keccak256(concatenatedData);\n', '        \n', '        uint8 version = 1;\n', '        Version[] memory versions = digitalCertificateArchive[hashed];\n', '        uint length =  versions.length;\n', '        for(uint8 i = 0; i < length; i++)\n', '        {\n', '            version = i+2;\n', '        }\n', '\n', '        bytes32 hashedSign = keccak256(hash); \n', '        Version memory v = Version(version,hashedSign,now);\n', '        digitalCertificateArchive[hashed].push(v);\n', '        \n', '    }\n', '\n', '    function GetSign(string guid, address signer) public view returns(bytes32 sign, uint8 signedVersion,uint256 timestamp){\n', '        address _signer = signer;\n', '        string memory addressString = toString(_signer);\n', '        //combine signer with guid of arts to create an archive managed by the signer\n', '        string memory concatenatedData = strConcat(addressString,guid);\n', '        bytes32 hashed = keccak256(concatenatedData);\n', '        uint length =  digitalCertificateArchive[hashed].length;\n', '        Version memory v = digitalCertificateArchive[hashed][length-1];\n', '        return (v.sign, v.version, v.timestamp);\n', '    }\n', '\n', '    function GetSignVersion(string guid, address signer, uint version) public view returns(bytes32 sign, uint8 signedVersion,uint256 timestamp){\n', '        address _signer = signer;\n', '        string memory addressString = toString(_signer);\n', '        //combine signer with guid of arts to create an archive managed by the signer\n', '        string memory concatenatedData = strConcat(addressString,guid);\n', '        bytes32 hashed = keccak256(concatenatedData);\n', '        Version memory v = digitalCertificateArchive[hashed][version-1];\n', '        return (v.sign, v.version, v.timestamp);\n', '    }\n', '\n', '    \n', '    \n', '    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string){\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        bytes memory _bc = bytes(_c);\n', '        bytes memory _bd = bytes(_d);\n', '        bytes memory _be = bytes(_e);\n', '        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '        bytes memory babcde = bytes(abcde);\n', '        uint k = 0;\n', '        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '        return string(babcde);\n', '    }\n', '\n', '    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n', '        return strConcat(_a, _b, _c, _d, "");\n', '    }\n', '    \n', '    function strConcat(string _a, string _b, string _c) internal returns (string) {\n', '        return strConcat(_a, _b, _c, "", "");\n', '    }\n', '    \n', '    function strConcat(string _a, string _b) internal returns (string) {\n', '        return strConcat(_a, _b, "", "", "");\n', '    }\n', '    \n', '    function toString(address x) returns (string) {\n', '        bytes memory b = new bytes(20);\n', '        for (uint i = 0; i < 20; i++)\n', '            b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));\n', '        return string(b);\n', '    }\n', '    \n', '    function bytes32ToString(bytes32 x) constant returns (string) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '    return string(bytesStringTrimmed);\n', '}\n', '\n', '    mapping (address => bool) whitelist;\n', '\n', '  event WhitelistedAddressAdded(address addr);\n', '  event WhitelistedAddressRemoved(address addr);\n', '\n', '  /**\n', "   * @dev Throws if called by any account that's not whitelisted.\n", '   */\n', '  modifier onlyWhitelisted() {\n', '    whitelist[msg.sender] == true;\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address addr)\n', '    onlyOwner\n', '    public\n', '  {\n', '    whitelist[addr] = true;\n', '    emit WhitelistedAddressAdded(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function isInWhitelist(address addr)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return whitelist[addr] == true;\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] addrs)\n', '    onlyOwner\n', '    public\n', '  {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      addAddressToWhitelist(addrs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address addr)\n', '    onlyOwner\n', '    public\n', '  {\n', '    whitelist[addr] = false;\n', '    emit WhitelistedAddressRemoved(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] addrs)\n', '    onlyOwner\n', '    public\n', '  {\n', '    for (uint256 i = 0; i < addrs.length; i++) {\n', '      removeAddressFromWhitelist(addrs[i]);\n', '    }\n', '  }\n', '    \n', '}']
