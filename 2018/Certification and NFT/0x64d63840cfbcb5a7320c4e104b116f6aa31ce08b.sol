['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    \n', '     function percent(uint256 a,uint256 b) internal  pure returns (uint256){\n', '      return mul(div(a,uint256(100)),b);\n', '    }\n', '  \n', '    function power(uint256 a,uint256 b) internal pure returns (uint256){\n', '      return mul(a,10**b);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract RDOToken is StandardToken {\n', '    string public name = "RDO";\n', '    string public symbol = "RDO";\n', '    uint256 public decimals = 8;\n', '    address owner;\n', '    address crowdsale;\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function RDOToken() public {\n', '        owner=msg.sender;\n', '        uint256 initialTotalSupply=1000000000;\n', '        totalSupply=initialTotalSupply.power(decimals);\n', '        balances[msg.sender]=totalSupply;\n', '        \n', '        crowdsale=new RDOCrowdsale(this,msg.sender);\n', '        allocate(crowdsale,75); \n', '        allocate(0x523f6034c79915cE9AacD06867721D444c45a6a5,12); \n', '        allocate(0x50d0a8eDe1548E87E5f8103b89626bC9C76fe2f8,7); \n', '        allocate(0xD8889ff86b9454559979Aa20bb3b41527AE4b74b,3); \n', '        allocate(0x5F900841910baaC70e8b736632600c409Af05bf8,3); \n', '        \n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '\n', '    function allocate(address _address,uint256 percent) private{\n', '        uint256 bal=totalSupply.percent(percent);\n', '        transfer(_address,bal);\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender==owner);\n', '        _;\n', '    }\n', '    \n', '    function stopCrowdfunding() onlyOwner public {\n', '        if(crowdsale!=0x0){\n', '            RDOCrowdsale(crowdsale).stopCrowdsale();\n', '            crowdsale=0x0;\n', '        }\n', '    }\n', '    \n', '    function getCrowdsaleAddress() constant public returns(address){\n', '        return crowdsale;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title RPOCrowdsale\n', ' * @dev RPOCrowdsale is a contract for managing a token crowdsale for RPO project.\n', ' * Crowdsale have 9 phases with start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate and bonuses. Collected funds are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract RDOCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    RDOToken public token;\n', '\n', '    // External wallet where funds get forwarded\n', '    address public wallet;\n', '\n', '    // Crowdsale administrator\n', '    address public owners;\n', '\n', '    \n', '    // price per 1 RDO\n', '    uint256 public price=0.55 finney;\n', '\n', '    // Phases list, see schedule in constructor\n', '    mapping (uint => Phase) phases;\n', '\n', '    // The total number of phases (0...9)\n', '    uint public totalPhases = 9;\n', '\n', '    // Description for each phase\n', '    struct Phase {\n', '        uint256 startTime;\n', '        uint256 endTime;\n', '        uint256 bonusPercent;\n', '    }\n', '\n', '    // Bonus based on value\n', '    BonusValue[] bonusValue;\n', '\n', '    struct BonusValue{\n', '        uint256 minimum;\n', '        uint256 maximum;\n', '        uint256 bonus;\n', '    }\n', '    \n', '    // Minimum Deposit in eth\n', '    uint256 public constant minContribution = 100 finney;\n', '\n', '\n', '    // Amount of raised Ethers (in wei).\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param bonusPercent free tokens percantage for the phase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 bonusPercent, uint256 amount);\n', '\n', '    // event for wallet update\n', '    event WalletSet(address indexed wallet);\n', '\n', '    function RDOCrowdsale(address _tokenAddress, address _wallet) public {\n', '        require(_tokenAddress != address(0));\n', '        token = RDOToken(_tokenAddress);\n', '        wallet = _wallet;\n', '        owners=msg.sender;\n', '        \n', '        /*\n', '        ICO SCHEDULE\n', '        Bonus        \n', '        40%     1 round\n', '        30%     2 round\n', '        25%     3 round\n', '        20%     4 round\n', '        15%     5 round\n', '        10%     6 round\n', '        7%      7 round\n', '        5%      8 round\n', '        3%      9 round\n', '        */\n', '        \n', '        fillPhase(0,40,25 days);\n', '        fillPhase(1,30,15 days);\n', '        fillPhase(2,25,15 days);\n', '        fillPhase(3,20,15 days);\n', '        fillPhase(4,15,15 days);\n', '        fillPhase(5,10,15 days);\n', '        fillPhase(6,7,15 days);\n', '        fillPhase(7,5,15 days);\n', '        fillPhase(8,3,15 days);\n', '        \n', '        // Fill bonus based on value\n', '        bonusValue.push(BonusValue({\n', '            minimum:5 ether,\n', '            maximum:25 ether,\n', '            bonus:5\n', '        }));\n', '        bonusValue.push(BonusValue({\n', '            minimum:26 ether,\n', '            maximum:100 ether,\n', '            bonus:8\n', '        }));\n', '        bonusValue.push(BonusValue({\n', '            minimum:101 ether,\n', '            maximum:100000 ether,\n', '            bonus:10\n', '        }));\n', '    }\n', '    \n', '    function fillPhase(uint8 index,uint256 bonus,uint256 delay) private{\n', '        phases[index].bonusPercent=bonus;\n', '        if(index==0){\n', '            phases[index].startTime = now;\n', '        }\n', '        else{\n', '            phases[index].startTime = phases[index-1].endTime;\n', '        }\n', '        phases[index].endTime = phases[index].startTime+delay;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(msg.value != 0);\n', '\n', '        uint256 currentBonusPercent = getBonusPercent(now);\n', '        uint256 weiAmount = msg.value;\n', '        uint256 volumeBonus=getVolumeBonus(weiAmount);\n', '        \n', '        require(weiAmount>=minContribution);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = calculateTokenAmount(weiAmount, currentBonusPercent,volumeBonus);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.transfer(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, currentBonusPercent, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    function getVolumeBonus(uint256 _wei) private view returns(uint256){\n', '        for(uint256 i=0;i<bonusValue.length;++i){\n', '            if(_wei>bonusValue[i].minimum && _wei<bonusValue[i].maximum){\n', '                return bonusValue[i].bonus;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '    \n', '    // If phase exists return corresponding bonus for the given date\n', '    // else return 0 (percent)\n', '    function getBonusPercent(uint256 datetime) private view returns (uint256) {\n', '        for (uint i = 0; i < totalPhases; i++) {\n', '            if (datetime >= phases[i].startTime && datetime <= phases[i].endTime) {\n', '                return phases[i].bonusPercent;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owners==msg.sender);\n', '        _;\n', '    }\n', '\n', '    // calculates how much tokens will beneficiary get\n', '    // for given amount of wei\n', '    function calculateTokenAmount(uint256 _weiDeposit, uint256 _bonusTokensPercent,uint256 _volumeBonus) private view returns (uint256) {\n', '        uint256 mainTokens = _weiDeposit.div(price);\n', '        uint256 bonusTokens = mainTokens.percent(_bonusTokensPercent);\n', '        uint256 volumeBonus=mainTokens.percent(_volumeBonus);\n', '        return mainTokens.add(bonusTokens).add(volumeBonus);\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function stopCrowdsale() public {\n', '        token.burn(token.balanceOf(this));\n', '        selfdestruct(wallet);\n', '    }\n', '    \n', '    function getCurrentBonus() public constant returns(uint256){\n', '        return getBonusPercent(now);\n', '    }\n', '    \n', '    function calculateEstimateToken(uint256 _wei) public constant returns(uint256){\n', '        uint256 timeBonus=getCurrentBonus();\n', '        uint256 volumeBonus=getVolumeBonus(_wei);\n', '        return calculateTokenAmount(_wei,timeBonus,volumeBonus);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    \n', '     function percent(uint256 a,uint256 b) internal  pure returns (uint256){\n', '      return mul(div(a,uint256(100)),b);\n', '    }\n', '  \n', '    function power(uint256 a,uint256 b) internal pure returns (uint256){\n', '      return mul(a,10**b);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract RDOToken is StandardToken {\n', '    string public name = "RDO";\n', '    string public symbol = "RDO";\n', '    uint256 public decimals = 8;\n', '    address owner;\n', '    address crowdsale;\n', '    \n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    function RDOToken() public {\n', '        owner=msg.sender;\n', '        uint256 initialTotalSupply=1000000000;\n', '        totalSupply=initialTotalSupply.power(decimals);\n', '        balances[msg.sender]=totalSupply;\n', '        \n', '        crowdsale=new RDOCrowdsale(this,msg.sender);\n', '        allocate(crowdsale,75); \n', '        allocate(0x523f6034c79915cE9AacD06867721D444c45a6a5,12); \n', '        allocate(0x50d0a8eDe1548E87E5f8103b89626bC9C76fe2f8,7); \n', '        allocate(0xD8889ff86b9454559979Aa20bb3b41527AE4b74b,3); \n', '        allocate(0x5F900841910baaC70e8b736632600c409Af05bf8,3); \n', '        \n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '\n', '\n', '    function allocate(address _address,uint256 percent) private{\n', '        uint256 bal=totalSupply.percent(percent);\n', '        transfer(_address,bal);\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender==owner);\n', '        _;\n', '    }\n', '    \n', '    function stopCrowdfunding() onlyOwner public {\n', '        if(crowdsale!=0x0){\n', '            RDOCrowdsale(crowdsale).stopCrowdsale();\n', '            crowdsale=0x0;\n', '        }\n', '    }\n', '    \n', '    function getCrowdsaleAddress() constant public returns(address){\n', '        return crowdsale;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title RPOCrowdsale\n', ' * @dev RPOCrowdsale is a contract for managing a token crowdsale for RPO project.\n', ' * Crowdsale have 9 phases with start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate and bonuses. Collected funds are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract RDOCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    RDOToken public token;\n', '\n', '    // External wallet where funds get forwarded\n', '    address public wallet;\n', '\n', '    // Crowdsale administrator\n', '    address public owners;\n', '\n', '    \n', '    // price per 1 RDO\n', '    uint256 public price=0.55 finney;\n', '\n', '    // Phases list, see schedule in constructor\n', '    mapping (uint => Phase) phases;\n', '\n', '    // The total number of phases (0...9)\n', '    uint public totalPhases = 9;\n', '\n', '    // Description for each phase\n', '    struct Phase {\n', '        uint256 startTime;\n', '        uint256 endTime;\n', '        uint256 bonusPercent;\n', '    }\n', '\n', '    // Bonus based on value\n', '    BonusValue[] bonusValue;\n', '\n', '    struct BonusValue{\n', '        uint256 minimum;\n', '        uint256 maximum;\n', '        uint256 bonus;\n', '    }\n', '    \n', '    // Minimum Deposit in eth\n', '    uint256 public constant minContribution = 100 finney;\n', '\n', '\n', '    // Amount of raised Ethers (in wei).\n', '    uint256 public weiRaised;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param bonusPercent free tokens percantage for the phase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 bonusPercent, uint256 amount);\n', '\n', '    // event for wallet update\n', '    event WalletSet(address indexed wallet);\n', '\n', '    function RDOCrowdsale(address _tokenAddress, address _wallet) public {\n', '        require(_tokenAddress != address(0));\n', '        token = RDOToken(_tokenAddress);\n', '        wallet = _wallet;\n', '        owners=msg.sender;\n', '        \n', '        /*\n', '        ICO SCHEDULE\n', '        Bonus        \n', '        40%     1 round\n', '        30%     2 round\n', '        25%     3 round\n', '        20%     4 round\n', '        15%     5 round\n', '        10%     6 round\n', '        7%      7 round\n', '        5%      8 round\n', '        3%      9 round\n', '        */\n', '        \n', '        fillPhase(0,40,25 days);\n', '        fillPhase(1,30,15 days);\n', '        fillPhase(2,25,15 days);\n', '        fillPhase(3,20,15 days);\n', '        fillPhase(4,15,15 days);\n', '        fillPhase(5,10,15 days);\n', '        fillPhase(6,7,15 days);\n', '        fillPhase(7,5,15 days);\n', '        fillPhase(8,3,15 days);\n', '        \n', '        // Fill bonus based on value\n', '        bonusValue.push(BonusValue({\n', '            minimum:5 ether,\n', '            maximum:25 ether,\n', '            bonus:5\n', '        }));\n', '        bonusValue.push(BonusValue({\n', '            minimum:26 ether,\n', '            maximum:100 ether,\n', '            bonus:8\n', '        }));\n', '        bonusValue.push(BonusValue({\n', '            minimum:101 ether,\n', '            maximum:100000 ether,\n', '            bonus:10\n', '        }));\n', '    }\n', '    \n', '    function fillPhase(uint8 index,uint256 bonus,uint256 delay) private{\n', '        phases[index].bonusPercent=bonus;\n', '        if(index==0){\n', '            phases[index].startTime = now;\n', '        }\n', '        else{\n', '            phases[index].startTime = phases[index-1].endTime;\n', '        }\n', '        phases[index].endTime = phases[index].startTime+delay;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(msg.value != 0);\n', '\n', '        uint256 currentBonusPercent = getBonusPercent(now);\n', '        uint256 weiAmount = msg.value;\n', '        uint256 volumeBonus=getVolumeBonus(weiAmount);\n', '        \n', '        require(weiAmount>=minContribution);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = calculateTokenAmount(weiAmount, currentBonusPercent,volumeBonus);\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        token.transfer(beneficiary, tokens);\n', '        TokenPurchase(msg.sender, beneficiary, weiAmount, currentBonusPercent, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    function getVolumeBonus(uint256 _wei) private view returns(uint256){\n', '        for(uint256 i=0;i<bonusValue.length;++i){\n', '            if(_wei>bonusValue[i].minimum && _wei<bonusValue[i].maximum){\n', '                return bonusValue[i].bonus;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '    \n', '    // If phase exists return corresponding bonus for the given date\n', '    // else return 0 (percent)\n', '    function getBonusPercent(uint256 datetime) private view returns (uint256) {\n', '        for (uint i = 0; i < totalPhases; i++) {\n', '            if (datetime >= phases[i].startTime && datetime <= phases[i].endTime) {\n', '                return phases[i].bonusPercent;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owners==msg.sender);\n', '        _;\n', '    }\n', '\n', '    // calculates how much tokens will beneficiary get\n', '    // for given amount of wei\n', '    function calculateTokenAmount(uint256 _weiDeposit, uint256 _bonusTokensPercent,uint256 _volumeBonus) private view returns (uint256) {\n', '        uint256 mainTokens = _weiDeposit.div(price);\n', '        uint256 bonusTokens = mainTokens.percent(_bonusTokensPercent);\n', '        uint256 volumeBonus=mainTokens.percent(_volumeBonus);\n', '        return mainTokens.add(bonusTokens).add(volumeBonus);\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    function stopCrowdsale() public {\n', '        token.burn(token.balanceOf(this));\n', '        selfdestruct(wallet);\n', '    }\n', '    \n', '    function getCurrentBonus() public constant returns(uint256){\n', '        return getBonusPercent(now);\n', '    }\n', '    \n', '    function calculateEstimateToken(uint256 _wei) public constant returns(uint256){\n', '        uint256 timeBonus=getCurrentBonus();\n', '        uint256 volumeBonus=getVolumeBonus(_wei);\n', '        return calculateTokenAmount(_wei,timeBonus,volumeBonus);\n', '    }\n', '}']
