['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/*\n', '  BASIC ERC20 Sale Contract\n', '  @author Hunter Long\n', '  @repo https://github.com/hunterlong/ethereum-ico-contract\n', '  (c) SCU GmbH 2018. The MIT Licence.\n', '*/\n', 'contract SCUTokenCrowdsale is Ownable {\n', '\n', '    uint256 public totalSold; //eurocents\n', '\n', '    FiatContract public fiat;\n', '    ERC20 public Token;\n', '    address public ETHWallet;\n', '    Whitelist public white;\n', '\n', '    uint256 public tokenSold;\n', '    uint256 public tokenPrice;\n', '\n', '    uint256 public deadline;\n', '    uint256 public start;\n', '\n', '    bool public crowdsaleClosed;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '\n', '    constructor() public {\n', '        ETHWallet = 0x78D97495f7CA56aC3956E847BB75F825834575A4;\n', '        Token = ERC20(0xBD82A3C93B825c1F93202F9Dd0a120793E029BAD);\n', '        crowdsaleClosed = false;\n', '        white = Whitelist(0xc0b11003708F9d8896c7676fD129188041B7F60B);\n', '        tokenSold = 0; // per contract\n', '        tokenPrice = 20; // eurocents\n', '        fiat = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591);\n', '        //https://ethereum.stackexchange.com/questions/34110/compare-dates-in-solidity\n', '        start = now;\n', '        deadline = now + 80 * 1 days;\n', '    }\n', '\n', '    function () public payable {\n', '        require(msg.value>0);\n', '        require(white.isWhitelisted(msg.sender) == true);\n', '        require(!crowdsaleClosed);\n', '        require(now <= deadline && now >= start);\n', '        //https://ethereum.stackexchange.com/questions/9256/float-not-allowed-in-solidity-vs-decimal-places-asked-for-token-contract\n', '        //fee falls away\n', '\n', '        uint256 amount = (msg.value / getTokenPrice()) * 1 ether;\n', '        totalSold += (amount / tokenPrice) * 100;\n', '\n', '        //afterwards calculate  pre sale bonusprogramm\n', '        if(tokenSold < 6000000)\n', '        {\n', '        amount = amount + ((amount * 25) / 100);\n', '        }\n', '        else if(tokenSold < 12000000)\n', '        {\n', '        amount = amount + ((amount * 15) / 100);\n', '        }\n', '        else\n', '        {\n', '        amount = amount + ((amount * 10) / 100);\n', '        }\n', '\n', '        ETHWallet.transfer(msg.value);\n', '        Token.transferFrom(owner, msg.sender, amount);\n', '        emit Contribution(msg.sender, amount);\n', '    }\n', '\n', '    function getTokenPrice() internal view returns (uint256) {\n', '        return getEtherInEuroCents() * tokenPrice / 100;\n', '    }\n', '\n', '    function getEtherInEuroCents() internal view returns (uint256) {\n', '        return fiat.EUR(0) * 100;\n', '    }\n', '\n', '    function closeCrowdsale() public onlyOwner returns (bool) {\n', '        crowdsaleClosed = true;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Whitelist {\n', '    function isWhitelisted(address _account) public constant returns (bool);\n', '\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '    function approve(address spender, uint value) public returns (bool ok);\n', '    function mint(address to, uint256 value) public returns (uint256);\n', '}\n', '\n', 'contract FiatContract {\n', '    function ETH(uint _id) public view returns (uint256);\n', '    function USD(uint _id) public view returns (uint256);\n', '    function EUR(uint _id) public view returns (uint256);\n', '    function GBP(uint _id) public view returns (uint256);\n', '    function updatedAt(uint _id) public view returns (uint);\n', '}']
['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/*\n', '  BASIC ERC20 Sale Contract\n', '  @author Hunter Long\n', '  @repo https://github.com/hunterlong/ethereum-ico-contract\n', '  (c) SCU GmbH 2018. The MIT Licence.\n', '*/\n', 'contract SCUTokenCrowdsale is Ownable {\n', '\n', '    uint256 public totalSold; //eurocents\n', '\n', '    FiatContract public fiat;\n', '    ERC20 public Token;\n', '    address public ETHWallet;\n', '    Whitelist public white;\n', '\n', '    uint256 public tokenSold;\n', '    uint256 public tokenPrice;\n', '\n', '    uint256 public deadline;\n', '    uint256 public start;\n', '\n', '    bool public crowdsaleClosed;\n', '\n', '    event Contribution(address from, uint256 amount);\n', '\n', '    constructor() public {\n', '        ETHWallet = 0x78D97495f7CA56aC3956E847BB75F825834575A4;\n', '        Token = ERC20(0xBD82A3C93B825c1F93202F9Dd0a120793E029BAD);\n', '        crowdsaleClosed = false;\n', '        white = Whitelist(0xc0b11003708F9d8896c7676fD129188041B7F60B);\n', '        tokenSold = 0; // per contract\n', '        tokenPrice = 20; // eurocents\n', '        fiat = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591);\n', '        //https://ethereum.stackexchange.com/questions/34110/compare-dates-in-solidity\n', '        start = now;\n', '        deadline = now + 80 * 1 days;\n', '    }\n', '\n', '    function () public payable {\n', '        require(msg.value>0);\n', '        require(white.isWhitelisted(msg.sender) == true);\n', '        require(!crowdsaleClosed);\n', '        require(now <= deadline && now >= start);\n', '        //https://ethereum.stackexchange.com/questions/9256/float-not-allowed-in-solidity-vs-decimal-places-asked-for-token-contract\n', '        //fee falls away\n', '\n', '        uint256 amount = (msg.value / getTokenPrice()) * 1 ether;\n', '        totalSold += (amount / tokenPrice) * 100;\n', '\n', '        //afterwards calculate  pre sale bonusprogramm\n', '        if(tokenSold < 6000000)\n', '        {\n', '        amount = amount + ((amount * 25) / 100);\n', '        }\n', '        else if(tokenSold < 12000000)\n', '        {\n', '        amount = amount + ((amount * 15) / 100);\n', '        }\n', '        else\n', '        {\n', '        amount = amount + ((amount * 10) / 100);\n', '        }\n', '\n', '        ETHWallet.transfer(msg.value);\n', '        Token.transferFrom(owner, msg.sender, amount);\n', '        emit Contribution(msg.sender, amount);\n', '    }\n', '\n', '    function getTokenPrice() internal view returns (uint256) {\n', '        return getEtherInEuroCents() * tokenPrice / 100;\n', '    }\n', '\n', '    function getEtherInEuroCents() internal view returns (uint256) {\n', '        return fiat.EUR(0) * 100;\n', '    }\n', '\n', '    function closeCrowdsale() public onlyOwner returns (bool) {\n', '        crowdsaleClosed = true;\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Whitelist {\n', '    function isWhitelisted(address _account) public constant returns (bool);\n', '\n', '}\n', '\n', 'contract ERC20 {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function allowance(address owner, address spender) public constant returns (uint);\n', '    function transfer(address to, uint value) public returns (bool ok);\n', '    function transferFrom(address from, address to, uint value) public returns (bool ok);\n', '    function approve(address spender, uint value) public returns (bool ok);\n', '    function mint(address to, uint256 value) public returns (uint256);\n', '}\n', '\n', 'contract FiatContract {\n', '    function ETH(uint _id) public view returns (uint256);\n', '    function USD(uint _id) public view returns (uint256);\n', '    function EUR(uint _id) public view returns (uint256);\n', '    function GBP(uint _id) public view returns (uint256);\n', '    function updatedAt(uint _id) public view returns (uint);\n', '}']
