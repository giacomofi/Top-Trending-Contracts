['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract Dogs {\n', '  using SafeMath for uint256;\n', '  /*** EVENTS ***/\n', '  /// @dev The Birth event is fired whenever a new collectible comes into existence.\n', '  event Birth(uint256 tokenId, uint256 startPrice);\n', '  /// @dev The TokenSold event is fired whenever a token is sold.\n', '  event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner);\n', '  // ERC721 Transfer\n', '  event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '  // ERC721 Approval\n', '  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\n', '\n', '  /*** CONSTANTS ***/\n', '\n', '  string public constant NAME = "dogs-youCollect";\n', '  string public constant SYMBOL = "DYC";\n', '  uint256[] private tokens;\n', '\n', '  /*** STORAGE ***/\n', '\n', '  /// @dev A mapping from collectible IDs to the address that owns them. All collectibles have\n', '  ///  some valid owner address.\n', '  mapping (uint256 => address) public collectibleIndexToOwner;\n', '\n', '  /// @dev A mapping from CollectibleIDs to an address that has been approved to call\n', '  ///  transferFrom(). Each Collectible can only have one approved address for transfer\n', '  ///  at any time. A zero value means no approval is outstanding.\n', '  mapping (uint256 => address) public collectibleIndexToApproved;\n', '\n', '  // @dev A mapping from CollectibleIDs to the price of the token.\n', '  mapping (uint256 => uint256) public collectibleIndexToPrice;\n', '\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '\n', '  mapping (uint => address) private subTokenCreator;\n', '  mapping (uint => address) private lastSubTokenBuyer;\n', '\n', '  uint8 constant BASE_TOKEN_ID = 0;\n', '  uint16 constant MAX_SETS_INDEX = 10000;\n', '  uint64 constant FIFTY_TOKENS_INDEX = 1000000000000000;\n', '  uint128 constant TRIBLE_TOKENS_INDEX = 100000000000000000000000;\n', '  uint128 constant DOUBLE_TOKENS_INDEX = 100000000000000000000000000000000;\n', '  uint256 private constant PROMO_CREATION_LIMIT = 50000;\n', '  uint256 public promoCreatedCount;\n', '  uint256 constant START_PRICE_DOG = 1 finney;\n', '  uint256 constant START_PRICE_SETS = 100 finney;\n', '  uint256 constant START_PRICE_BASE_DOG = 10 ether;\n', '\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function Dogs() public {\n', '    ceoAddress = msg.sender;\n', '    cooAddress = msg.sender;\n', '  }\n', '  function getTotalSupply() public view returns (uint) {\n', '    return tokens.length;\n', '  }\n', '  function getInitialPriceOfToken(uint _tokenId) public pure returns (uint) {\n', '    if (_tokenId > MAX_SETS_INDEX)\n', '      return START_PRICE_DOG;\n', '    if (_tokenId > 0)\n', '      return START_PRICE_SETS;\n', '    return START_PRICE_BASE_DOG;\n', '  }\n', '\n', '  function getNextPrice(uint price, uint _tokenId) public pure returns (uint) {\n', '    if (_tokenId>DOUBLE_TOKENS_INDEX)\n', '      return price.mul(2);\n', '    if (_tokenId>TRIBLE_TOKENS_INDEX)\n', '      return price.mul(3);\n', '    if (_tokenId>FIFTY_TOKENS_INDEX)\n', '      return price.mul(3).div(2);\n', '    if (price < 1.2 ether)\n', '      return price.mul(200).div(92);\n', '    if (price < 5 ether)\n', '      return price.mul(150).div(92);\n', '    return price.mul(120).div(92);\n', '  }\n', '\n', '  function buyToken(uint _tokenId) public payable {\n', '    address oldOwner = collectibleIndexToOwner[_tokenId];\n', '    require(oldOwner!=msg.sender);\n', '    uint256 sellingPrice = collectibleIndexToPrice[_tokenId];\n', '    if (sellingPrice==0) {\n', '      sellingPrice = getInitialPriceOfToken(_tokenId);\n', '      if (_tokenId>MAX_SETS_INDEX)\n', '        subTokenCreator[_tokenId] = msg.sender;\n', '    }\n', '\n', '    require(msg.value >= sellingPrice);\n', '    uint256 purchaseExcess = msg.value.sub(sellingPrice);\n', '\n', '    uint256 payment = sellingPrice.mul(92).div(100);\n', '    uint256 feeOnce = sellingPrice.sub(payment).div(8);\n', '\n', '    // transfer taxes\n', '    if (_tokenId > 0) {\n', '      if (collectibleIndexToOwner[BASE_TOKEN_ID]!=address(0))\n', '        collectibleIndexToOwner[BASE_TOKEN_ID].transfer(feeOnce);\n', '      if (_tokenId > MAX_SETS_INDEX) {\n', '        if (collectibleIndexToOwner[_tokenId % MAX_SETS_INDEX]!=address(0))\n', '          collectibleIndexToOwner[_tokenId % MAX_SETS_INDEX].transfer(feeOnce);\n', '        if (subTokenCreator[_tokenId]!=address(0))\n', '          subTokenCreator[_tokenId].transfer(feeOnce);\n', '\n', '        lastSubTokenBuyer[BASE_TOKEN_ID] = msg.sender;\n', '        lastSubTokenBuyer[_tokenId % MAX_SETS_INDEX] = msg.sender;\n', '      } else {\n', '        lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\n', '      }\n', '    } else {\n', '      lastSubTokenBuyer[_tokenId].transfer(feeOnce*2);\n', '    }\n', '    // Transfers the Token\n', '    collectibleIndexToOwner[_tokenId] = msg.sender;\n', '    if (oldOwner != address(0)) {\n', '      // Payment for old owner\n', '      oldOwner.transfer(payment);\n', '      // clear any previously approved ownership exchange\n', '      delete collectibleIndexToApproved[_tokenId];\n', '    } else {\n', '      Birth(_tokenId, sellingPrice);\n', '      tokens.push(_tokenId);\n', '    }\n', '    // Update prices\n', '    collectibleIndexToPrice[_tokenId] = getNextPrice(sellingPrice, _tokenId);\n', '\n', '    TokenSold(_tokenId, sellingPrice, oldOwner, msg.sender);\n', '    Transfer(oldOwner, msg.sender, _tokenId);\n', '    // refund when paid too much\n', '    if (purchaseExcess>0)\n', '      msg.sender.transfer(purchaseExcess);\n', '  }\n', '\n', '\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '  /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '  ///  clear all approvals.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function approve(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    // Caller must own token.\n', '    require(_owns(msg.sender, _tokenId));\n', '\n', '    collectibleIndexToApproved[_tokenId] = _to;\n', '\n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// @dev Creates a new promo collectible with the given name, with given _price and assignes it to an address.\n', '  function createPromoCollectible(uint256 tokenId, address _owner, uint256 _price) public onlyCOO {\n', '    require(collectibleIndexToOwner[tokenId]==address(0));\n', '    require(promoCreatedCount < PROMO_CREATION_LIMIT);\n', '\n', '    address collectibleOwner = _owner;\n', '    if (collectibleOwner == address(0)) {\n', '      collectibleOwner = cooAddress;\n', '    }\n', '\n', '    if (_price <= 0) {\n', '      _price = getInitialPriceOfToken(tokenId);\n', '    }\n', '\n', '    promoCreatedCount++;\n', '    _createCollectible(tokenId, _price);\n', '    subTokenCreator[tokenId] = collectibleOwner;\n', '    // This will assign ownership, and also emit the Transfer event as\n', '    // per ERC721 draft\n', '    _transfer(address(0), collectibleOwner, tokenId);\n', '\n', '  }\n', '\n', '  bool isChangePriceLocked = true;\n', '  // allows owners of tokens to decrease the price of them or if there is no owner the coo can do it\n', '  function changePrice(uint256 newPrice, uint256 _tokenId) public {\n', '    require((_owns(msg.sender, _tokenId) && !isChangePriceLocked) || (_owns(address(0), _tokenId) && msg.sender == cooAddress));\n', '    require(newPrice<collectibleIndexToPrice[_tokenId]);\n', '    collectibleIndexToPrice[_tokenId] = newPrice;\n', '  }\n', '  function unlockPriceChange() public onlyCOO {\n', '    isChangePriceLocked = false;\n', '  }\n', '\n', '  /// @notice Returns all the relevant information about a specific collectible.\n', '  /// @param _tokenId The tokenId of the collectible of interest.\n', '  function getToken(uint256 _tokenId) public view returns (uint256 tokenId, uint256 sellingPrice, address owner, uint256 nextSellingPrice) {\n', '    tokenId = _tokenId;\n', '    sellingPrice = collectibleIndexToPrice[_tokenId];\n', '    if (sellingPrice == 0)\n', '      sellingPrice = getInitialPriceOfToken(_tokenId);\n', '    owner = collectibleIndexToOwner[_tokenId];\n', '    nextSellingPrice = getNextPrice(sellingPrice, _tokenId);\n', '  }\n', '\n', '  function implementsERC721() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function name() public pure returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  /// For querying owner of token\n', '  /// @param _tokenId The tokenID for owner inquiry\n', '  /// @dev Required for ERC-721 compliance.\n', '  function ownerOf(uint256 _tokenId)\n', '    public\n', '    view\n', '    returns (address owner)\n', '  {\n', '    owner = collectibleIndexToOwner[_tokenId];\n', '    require(owner != address(0));\n', '  }\n', '\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to);\n', '  }\n', '\n', '\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\n', '    price = collectibleIndexToPrice[_tokenId];\n', '    if (price == 0)\n', '      price = getInitialPriceOfToken(_tokenId);\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '\n', '    ceoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '\n', '    cooAddress = _newCOO;\n', '  }\n', '\n', '  /// @dev Required for ERC-721 compliance.\n', '  function symbol() public pure returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  /// @notice Allow pre-approved user to take ownership of a token\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    address newOwner = msg.sender;\n', '    address oldOwner = collectibleIndexToOwner[_tokenId];\n', '\n', '    // Safety check to prevent against an unexpected 0x0 default.\n', '    require(_addressNotNull(newOwner));\n', '\n', '    // Making sure transfer is approved\n', '    require(_approved(newOwner, _tokenId));\n', '\n', '    _transfer(oldOwner, newOwner, _tokenId);\n', '  }\n', '\n', '  /// Owner initates the transfer of the token to another account\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transfer(\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(msg.sender, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /// Third-party initiates transfer of token from address _from to address _to\n', '  /// @param _from The address for the token to be transferred from.\n', '  /// @param _to The address for the token to be transferred to.\n', '  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '  /// @dev Required for ERC-721 compliance.\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  ) public {\n', '    require(_owns(_from, _tokenId));\n', '    require(_approved(_to, _tokenId));\n', '    require(_addressNotNull(_to));\n', '\n', '    _transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '  function _addressNotNull(address _to) private pure returns (bool) {\n', '    return _to != address(0);\n', '  }\n', '\n', '  /// For checking approval of transfer for address _to\n', '  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\n', '    return collectibleIndexToApproved[_tokenId] == _to;\n', '  }\n', '\n', '  /// For creating Collectible\n', '  function _createCollectible(uint256 tokenId, uint256 _price) private {\n', '    collectibleIndexToPrice[tokenId] = _price;\n', '    Birth(tokenId, _price);\n', '    tokens.push(tokenId);\n', '  }\n', '\n', '  /// Check for token ownership\n', '  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\n', '    return claimant == collectibleIndexToOwner[_tokenId];\n', '  }\n', '\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(this.balance);\n', '    } else {\n', '      _to.transfer(this.balance);\n', '    }\n', '  }\n', '\n', '  /// For querying balance of a particular account\n', '  /// @param _owner The address for balance query\n', '  /// @dev Required for ERC-721 compliance.\n', '  function balanceOf(address _owner) public view returns (uint256 result) {\n', '      uint256 totalTokens = tokens.length;\n', '      uint256 tokenIndex;\n', '      uint256 tokenId;\n', '      result = 0;\n', '      for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\n', '        tokenId = tokens[tokenIndex];\n', '        if (collectibleIndexToOwner[tokenId] == _owner) {\n', '          result = result.add(1);\n', '        }\n', '      }\n', '      return result;\n', '  }\n', '\n', '  /// @dev Assigns ownership of a specific Collectible to an address.\n', '  function _transfer(address _from, address _to, uint256 _tokenId) private {\n', '    //transfer ownership\n', '    collectibleIndexToOwner[_tokenId] = _to;\n', '\n', "    // When creating new collectibles _from is 0x0, but we can't account that address.\n", '    if (_from != address(0)) {\n', '      // clear any previously approved ownership exchange\n', '      delete collectibleIndexToApproved[_tokenId];\n', '    }\n', '\n', '    // Emit the transfer event.\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '\n', '   /// @param _owner The owner whose celebrity tokens we are interested in.\n', "  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '  ///  expensive (it walks the entire tokens array looking for tokens belonging to owner),\n', '  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '  ///  not contract-to-contract calls.\n', '  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\n', '    uint256 tokenCount = balanceOf(_owner);\n', '    if (tokenCount == 0) {\n', '        // Return an empty array\n', '      return new uint256[](0);\n', '    } else {\n', '      uint256[] memory result = new uint256[](tokenCount);\n', '      uint256 totalTokens = getTotalSupply();\n', '      uint256 resultIndex = 0;\n', '\n', '      uint256 tokenIndex;\n', '      uint256 tokenId;\n', '      for (tokenIndex = 0; tokenIndex < totalTokens; tokenIndex++) {\n', '        tokenId = tokens[tokenIndex];\n', '        if (collectibleIndexToOwner[tokenId] == _owner) {\n', '          result[resultIndex] = tokenId;\n', '          resultIndex = resultIndex.add(1);\n', '        }\n', '      }\n', '      return result;\n', '    }\n', '  }\n', '}']