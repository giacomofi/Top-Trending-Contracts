['pragma solidity 0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Airdropper\n', ' * @dev An "airdropper" or "bounty" contract for distributing an ERC20 token\n', ' *   en masse.\n', ' * @dev This contract does not hold any tokens. Instead, it transfers directly\n', ' *   from a given source address to the recipients. Ensure that the source\n', ' *   address has set a sufficient allowance for the address of this contract.\n', ' */\n', 'contract FlogmallAirdropper is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    ERC20 public token;\n', '    uint public multiplier;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param tokenAddress Address of the token contract.\n', '     * @param decimals Decimals as specified by the token.\n', '     */\n', '    function FlogmallAirdropper(address tokenAddress, uint decimals) public {\n', '        require(decimals <= 77);  // 10**77 < 2**256-1 < 10**78\n', '\n', '        token = ERC20(tokenAddress);\n', '        multiplier = 10**decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Airdrops some tokens to some accounts.\n', '     * @param source The address of the current token holder.\n', '     * @param dests List of account addresses.\n', '     * @param values List of token amounts. Note that these are in whole\n', '     *   tokens. Fractions of tokens are not supported.\n', '     */\n', '    function airdrop(address source, address[] dests, uint[] values) public onlyOwner {\n', '        // This simple validation will catch most mistakes without consuming\n', '        // too much gas.\n', '        require(dests.length == values.length);\n', '\n', '        for (uint256 i = 0; i < dests.length; i++) {\n', '            require(token.transferFrom(source, dests[i], values[i].mul(multiplier)));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Return all tokens back to owner, in case any were accidentally\n', '     *   transferred to this contract.\n', '     */\n', '    function returnTokens() public onlyOwner {\n', '        token.transfer(owner, token.balanceOf(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Destroy this contract and recover any ether to the owner.\n', '     */\n', '    function destroy() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}']
['pragma solidity 0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Airdropper\n', ' * @dev An "airdropper" or "bounty" contract for distributing an ERC20 token\n', ' *   en masse.\n', ' * @dev This contract does not hold any tokens. Instead, it transfers directly\n', ' *   from a given source address to the recipients. Ensure that the source\n', ' *   address has set a sufficient allowance for the address of this contract.\n', ' */\n', 'contract FlogmallAirdropper is Ownable {\n', '    using SafeMath for uint;\n', '\n', '    ERC20 public token;\n', '    uint public multiplier;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param tokenAddress Address of the token contract.\n', '     * @param decimals Decimals as specified by the token.\n', '     */\n', '    function FlogmallAirdropper(address tokenAddress, uint decimals) public {\n', '        require(decimals <= 77);  // 10**77 < 2**256-1 < 10**78\n', '\n', '        token = ERC20(tokenAddress);\n', '        multiplier = 10**decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Airdrops some tokens to some accounts.\n', '     * @param source The address of the current token holder.\n', '     * @param dests List of account addresses.\n', '     * @param values List of token amounts. Note that these are in whole\n', '     *   tokens. Fractions of tokens are not supported.\n', '     */\n', '    function airdrop(address source, address[] dests, uint[] values) public onlyOwner {\n', '        // This simple validation will catch most mistakes without consuming\n', '        // too much gas.\n', '        require(dests.length == values.length);\n', '\n', '        for (uint256 i = 0; i < dests.length; i++) {\n', '            require(token.transferFrom(source, dests[i], values[i].mul(multiplier)));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Return all tokens back to owner, in case any were accidentally\n', '     *   transferred to this contract.\n', '     */\n', '    function returnTokens() public onlyOwner {\n', '        token.transfer(owner, token.balanceOf(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Destroy this contract and recover any ether to the owner.\n', '     */\n', '    function destroy() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '}']
