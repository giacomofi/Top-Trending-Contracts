['pragma solidity 0.4.24;\n', '\n', 'contract IMigrationContract {\n', '    function migrate(address addr, uint256 nas) public returns (bool success);\n', '}\n', '\n', '/* taking ideas from FirstBlood token */\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining); \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) { \n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract BugXToken is StandardToken, SafeMath {\n', '\n', '    // metadata\n', '    string  public constant name = "BUGX Token";\n', '    string  public constant symbol = "BUGX";\n', '    uint256 public constant decimals = 18;\n', '    string  public version = "1.0";\n', '\n', '    // contracts\n', '    address public ethFundDeposit;          // deposit address for ETH for BUGX Team.\n', '    address public newContractAddr;         // the new contract for BUGX token updates;\n', '\n', '    // crowdsale parameters\n', '    bool    public isFunding;                // switched to true in operational state\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingStopBlock;\n', '\n', '    uint256 public currentSupply;           // current supply tokens for sell\n', '    uint256 public tokenRaised = 0;         // the number of total sold token\n', '    uint256 public tokenIssued = 0;         // the number of total issued token\n', '    uint256 public tokenMigrated = 0;     // the number of total transferted token\n', '    uint256 public tokenExchangeRate = 6000;             // 6000 BXT tokens per 1 ETH\n', '\n', '    // events\n', '    event AllocateToken(address indexed _to, uint256 _value);   // issue token to buyer;\n', '    event IssueToken(address indexed _to, uint256 _value);      // record token issue info;\n', '    event IncreaseSupply(uint256 _value);\n', '    event DecreaseSupply(uint256 _value);\n', '    event Migrate(address indexed _to, uint256 _value);\n', '\n', '    // format decimals.\n', '    function formatDecimals(uint256 _value) internal pure returns (uint256 ) {\n', '        return _value * 10 ** decimals;\n', '    }\n', '\n', '    // constructor\n', '    constructor(\n', '        address _ethFundDeposit,\n', '        uint256 _currentSupply) public\n', '    {\n', '        ethFundDeposit = _ethFundDeposit;\n', '\n', '        isFunding = false;                           //controls pre through crowdsale state\n', '        fundingStartBlock = 0;\n', '        fundingStopBlock = 0;\n', '\n', '        currentSupply = formatDecimals(_currentSupply);\n', '        totalSupply = formatDecimals(1500000000);    //1,500,000,000 total supply\n', '        require(currentSupply <= totalSupply);\n', '    }\n', '\n', '    modifier isOwner()  {require(msg.sender == ethFundDeposit); _;}\n', '\n', '    /// @dev set the token&#39;s tokenExchangeRate,\n', '    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\n', '        require (_tokenExchangeRate != 0);\n', '        require (_tokenExchangeRate != tokenExchangeRate);\n', '\n', '        tokenExchangeRate = _tokenExchangeRate;\n', '    }\n', '\n', '    /// @dev increase the token&#39;s supply\n', '    function increaseSupply (uint256 _value) isOwner external {\n', '        uint256 value = formatDecimals(_value);\n', '        require (value + currentSupply <= totalSupply);\n', '        currentSupply = safeAdd(currentSupply, value);\n', '        emit IncreaseSupply(value);\n', '    }\n', '\n', '    /// @dev decrease the token&#39;s supply\n', '    function decreaseSupply (uint256 _value) isOwner external {\n', '        uint256 value = formatDecimals(_value);\n', '        require (value + tokenRaised <= currentSupply);\n', '\n', '        currentSupply = safeSubtract(currentSupply, value);\n', '        emit DecreaseSupply(value);\n', '    }\n', '\n', '    /// @dev turn on the funding state\n', '    function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\n', '        require (!isFunding);\n', '        require (_fundingStartBlock < _fundingStopBlock);\n', '        require (block.number < _fundingStartBlock);\n', '\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingStopBlock = _fundingStopBlock;\n', '        isFunding = true;\n', '    }\n', '\n', '    /// @dev turn off the funding state\n', '    function stopFunding() isOwner external {\n', '        require (isFunding);\n', '        isFunding = false;\n', '    }\n', '\n', '    /// @dev set a new contract for recieve the tokens (for update contract)\n', '    function setMigrateContract(address _newContractAddr) isOwner external {\n', '        require (_newContractAddr != newContractAddr);\n', '        newContractAddr = _newContractAddr;\n', '    }\n', '\n', '    /// @dev set a new owner.\n', '    function changeOwner(address _newFundDeposit) isOwner() external {\n', '        require (_newFundDeposit != address(0x0));\n', '        ethFundDeposit = _newFundDeposit;\n', '    }\n', '\n', '    /// sends the tokens to new contract\n', '    function migrate() external {\n', '        require(!isFunding);\n', '        require(newContractAddr != address(0x0));\n', '\n', '        uint256 tokens = balances[msg.sender];\n', '        require (tokens != 0);\n', '\n', '        balances[msg.sender] = 0;\n', '        tokenMigrated = safeAdd(tokenMigrated, tokens);\n', '\n', '        IMigrationContract newContract = IMigrationContract(newContractAddr);\n', '        require (newContract.migrate(msg.sender, tokens));\n', '\n', '        emit Migrate(msg.sender, tokens);               // log it\n', '    }\n', '\n', '    /// @dev sends ETH to BUGX team\n', '    function transferETH() isOwner external {\n', '        require (address(this).balance != 0);\n', '        require (ethFundDeposit.send(address(this).balance));\n', '    }\n', '\n', '    /// @dev allocates BXT tokens to buyers. 25% per 3 months.\n', '    function allocateToken (address _addr, uint256 _eth) isOwner external {\n', '        require (_eth != 0);\n', '        require (_addr != address(0x0));\n', '\n', '        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\n', '\n', '        tokenIssued = safeAdd(tokenIssued, tokens);\n', '        balances[_addr] += tokens;\n', '\n', '        emit AllocateToken(_addr, tokens);  // logs token issued\n', '    }\n', '\n', '    function () public payable {\n', '        require (isFunding);\n', '        require (msg.value != 0);\n', '\n', '        require (block.number >= fundingStartBlock);\n', '        require (block.number <= fundingStopBlock);\n', '\n', '        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\n', '        require (tokens + tokenRaised <= currentSupply);\n', '\n', '        tokenRaised = safeAdd(tokenRaised, tokens);\n', '        balances[msg.sender] += tokens;\n', '\n', '        emit IssueToken(msg.sender, msg.value);  // logs token issued\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', 'contract IMigrationContract {\n', '    function migrate(address addr, uint256 nas) public returns (bool success);\n', '}\n', '\n', '/* taking ideas from FirstBlood token */\n', 'contract SafeMath {\n', '\n', '    function safeAdd(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x + y;\n', '        assert((z >= x) && (z >= y));\n', '        return z;\n', '    }\n', '\n', '    function safeSubtract(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        assert(x >= y);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    function safeMult(uint256 x, uint256 y) internal pure returns(uint256) {\n', '        uint256 z = x * y;\n', '        assert((x == 0)||(z/x == y));\n', '        return z;\n', '    }\n', '\n', '}\n', '\n', 'contract Token {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining); \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '/*  ERC 20 token */\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[msg.sender] -= _value;\n', '            balances[_to] += _value;\n', '            emit Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            emit Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) { \n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'contract BugXToken is StandardToken, SafeMath {\n', '\n', '    // metadata\n', '    string  public constant name = "BUGX Token";\n', '    string  public constant symbol = "BUGX";\n', '    uint256 public constant decimals = 18;\n', '    string  public version = "1.0";\n', '\n', '    // contracts\n', '    address public ethFundDeposit;          // deposit address for ETH for BUGX Team.\n', '    address public newContractAddr;         // the new contract for BUGX token updates;\n', '\n', '    // crowdsale parameters\n', '    bool    public isFunding;                // switched to true in operational state\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingStopBlock;\n', '\n', '    uint256 public currentSupply;           // current supply tokens for sell\n', '    uint256 public tokenRaised = 0;         // the number of total sold token\n', '    uint256 public tokenIssued = 0;         // the number of total issued token\n', '    uint256 public tokenMigrated = 0;     // the number of total transferted token\n', '    uint256 public tokenExchangeRate = 6000;             // 6000 BXT tokens per 1 ETH\n', '\n', '    // events\n', '    event AllocateToken(address indexed _to, uint256 _value);   // issue token to buyer;\n', '    event IssueToken(address indexed _to, uint256 _value);      // record token issue info;\n', '    event IncreaseSupply(uint256 _value);\n', '    event DecreaseSupply(uint256 _value);\n', '    event Migrate(address indexed _to, uint256 _value);\n', '\n', '    // format decimals.\n', '    function formatDecimals(uint256 _value) internal pure returns (uint256 ) {\n', '        return _value * 10 ** decimals;\n', '    }\n', '\n', '    // constructor\n', '    constructor(\n', '        address _ethFundDeposit,\n', '        uint256 _currentSupply) public\n', '    {\n', '        ethFundDeposit = _ethFundDeposit;\n', '\n', '        isFunding = false;                           //controls pre through crowdsale state\n', '        fundingStartBlock = 0;\n', '        fundingStopBlock = 0;\n', '\n', '        currentSupply = formatDecimals(_currentSupply);\n', '        totalSupply = formatDecimals(1500000000);    //1,500,000,000 total supply\n', '        require(currentSupply <= totalSupply);\n', '    }\n', '\n', '    modifier isOwner()  {require(msg.sender == ethFundDeposit); _;}\n', '\n', "    /// @dev set the token's tokenExchangeRate,\n", '    function setTokenExchangeRate(uint256 _tokenExchangeRate) isOwner external {\n', '        require (_tokenExchangeRate != 0);\n', '        require (_tokenExchangeRate != tokenExchangeRate);\n', '\n', '        tokenExchangeRate = _tokenExchangeRate;\n', '    }\n', '\n', "    /// @dev increase the token's supply\n", '    function increaseSupply (uint256 _value) isOwner external {\n', '        uint256 value = formatDecimals(_value);\n', '        require (value + currentSupply <= totalSupply);\n', '        currentSupply = safeAdd(currentSupply, value);\n', '        emit IncreaseSupply(value);\n', '    }\n', '\n', "    /// @dev decrease the token's supply\n", '    function decreaseSupply (uint256 _value) isOwner external {\n', '        uint256 value = formatDecimals(_value);\n', '        require (value + tokenRaised <= currentSupply);\n', '\n', '        currentSupply = safeSubtract(currentSupply, value);\n', '        emit DecreaseSupply(value);\n', '    }\n', '\n', '    /// @dev turn on the funding state\n', '    function startFunding (uint256 _fundingStartBlock, uint256 _fundingStopBlock) isOwner external {\n', '        require (!isFunding);\n', '        require (_fundingStartBlock < _fundingStopBlock);\n', '        require (block.number < _fundingStartBlock);\n', '\n', '        fundingStartBlock = _fundingStartBlock;\n', '        fundingStopBlock = _fundingStopBlock;\n', '        isFunding = true;\n', '    }\n', '\n', '    /// @dev turn off the funding state\n', '    function stopFunding() isOwner external {\n', '        require (isFunding);\n', '        isFunding = false;\n', '    }\n', '\n', '    /// @dev set a new contract for recieve the tokens (for update contract)\n', '    function setMigrateContract(address _newContractAddr) isOwner external {\n', '        require (_newContractAddr != newContractAddr);\n', '        newContractAddr = _newContractAddr;\n', '    }\n', '\n', '    /// @dev set a new owner.\n', '    function changeOwner(address _newFundDeposit) isOwner() external {\n', '        require (_newFundDeposit != address(0x0));\n', '        ethFundDeposit = _newFundDeposit;\n', '    }\n', '\n', '    /// sends the tokens to new contract\n', '    function migrate() external {\n', '        require(!isFunding);\n', '        require(newContractAddr != address(0x0));\n', '\n', '        uint256 tokens = balances[msg.sender];\n', '        require (tokens != 0);\n', '\n', '        balances[msg.sender] = 0;\n', '        tokenMigrated = safeAdd(tokenMigrated, tokens);\n', '\n', '        IMigrationContract newContract = IMigrationContract(newContractAddr);\n', '        require (newContract.migrate(msg.sender, tokens));\n', '\n', '        emit Migrate(msg.sender, tokens);               // log it\n', '    }\n', '\n', '    /// @dev sends ETH to BUGX team\n', '    function transferETH() isOwner external {\n', '        require (address(this).balance != 0);\n', '        require (ethFundDeposit.send(address(this).balance));\n', '    }\n', '\n', '    /// @dev allocates BXT tokens to buyers. 25% per 3 months.\n', '    function allocateToken (address _addr, uint256 _eth) isOwner external {\n', '        require (_eth != 0);\n', '        require (_addr != address(0x0));\n', '\n', '        uint256 tokens = safeMult(formatDecimals(_eth), tokenExchangeRate);\n', '\n', '        tokenIssued = safeAdd(tokenIssued, tokens);\n', '        balances[_addr] += tokens;\n', '\n', '        emit AllocateToken(_addr, tokens);  // logs token issued\n', '    }\n', '\n', '    function () public payable {\n', '        require (isFunding);\n', '        require (msg.value != 0);\n', '\n', '        require (block.number >= fundingStartBlock);\n', '        require (block.number <= fundingStopBlock);\n', '\n', '        uint256 tokens = safeMult(msg.value, tokenExchangeRate);\n', '        require (tokens + tokenRaised <= currentSupply);\n', '\n', '        tokenRaised = safeAdd(tokenRaised, tokens);\n', '        balances[msg.sender] += tokens;\n', '\n', '        emit IssueToken(msg.sender, msg.value);  // logs token issued\n', '    }\n', '}']
