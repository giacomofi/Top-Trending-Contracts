['pragma solidity ^0.4.19;\n', '\n', '/*\n', 'Game: CryptoPokemon\n', 'Domain: CryptoPokemon.com\n', 'Dev: CryptoPokemon Team\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '/**\n', '* @dev Multiplies two numbers, throws on overflow.\n', '*/\n', 'function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', 'if (a == 0) {\n', 'return 0;\n', '}\n', 'uint256 c = a * b;\n', 'assert(c / a == b);\n', 'return c;\n', '}\n', '\n', '/**\n', '* @dev Integer division of two numbers, truncating the quotient.\n', '*/\n', 'function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '// assert(b > 0); // Solidity automatically throws when dividing by 0\n', 'uint256 c = a / b;\n', '// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', 'return c;\n', '}\n', '\n', '/**\n', '* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '*/\n', 'function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', 'assert(b <= a);\n', 'return a - b;\n', '}\n', '\n', '/**\n', '* @dev Adds two numbers, throws on overflow.\n', '*/\n', 'function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', 'uint256 c = a + b;\n', 'assert(c >= a);\n', 'return c;\n', '}\n', '}\n', '\n', 'contract CryptoPokemon {\n', 'using SafeMath for uint256;\n', 'mapping (address => bool) private admins;\n', 'mapping (uint => uint256) public levels;\n', 'mapping (uint => bool) private lock;\n', 'address contractCreator;\n', 'address devFeeAddress;\n', 'address tournamentPrizeAddress;\n', '\n', 'function CryptoPokemon () public {\n', '\n', 'contractCreator = msg.sender;\n', 'devFeeAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4;\n', 'tournamentPrizeAddress = 0xC6784e712229087fC91E0c77fcCb6b2F1fDE2Dc2;\n', 'admins[contractCreator] = true;\n', '}\n', '\n', 'struct Pokemon {\n', 'string pokemonName;\n', 'address ownerAddress;\n', 'uint256 currentPrice;\n', '}\n', 'Pokemon[] pokemons;\n', '\n', '//modifiers\n', 'modifier onlyContractCreator() {\n', 'require (msg.sender == contractCreator);\n', '_;\n', '}\n', 'modifier onlyAdmins() {\n', 'require(admins[msg.sender]);\n', '_;\n', '}\n', '\n', '//Owners and admins\n', '\n', '/* Owner */\n', 'function setOwner (address _owner) onlyContractCreator() public {\n', 'contractCreator = _owner;\n', '}\n', '\n', 'function addAdmin (address _admin) onlyContractCreator() public {\n', 'admins[_admin] = true;\n', '}\n', '\n', 'function removeAdmin (address _admin) onlyContractCreator() public {\n', 'delete admins[_admin];\n', '}\n', '\n', '// Adresses\n', 'function setdevFeeAddress (address _devFeeAddress) onlyContractCreator() public {\n', 'devFeeAddress = _devFeeAddress;\n', '}\n', '\n', 'function settournamentPrizeAddress (address _tournamentPrizeAddress) onlyContractCreator() public {\n', 'tournamentPrizeAddress = _tournamentPrizeAddress;\n', '}\n', '\n', '\n', 'bool isPaused;\n', '/*\n', 'When countdowns and events happening, use the checker.\n', '*/\n', 'function pauseGame() public onlyContractCreator {\n', 'isPaused = true;\n', '}\n', 'function unPauseGame() public onlyContractCreator {\n', 'isPaused = false;\n', '}\n', 'function GetGamestatus() public view returns(bool) {\n', 'return(isPaused);\n', '}\n', '\n', 'function addLock (uint _pokemonId) onlyContractCreator() public {\n', 'lock[_pokemonId] = true;\n', '}\n', '\n', 'function removeLock (uint _pokemonId) onlyContractCreator() public {\n', 'lock[_pokemonId] = false;\n', '}\n', '\n', 'function getPokemonLock(uint _pokemonId) public view returns(bool) {\n', 'return(lock[_pokemonId]);\n', '}\n', '\n', '/*\n', 'This function allows users to purchase PokeMon.\n', 'The price is automatically multiplied by 1.5 after each purchase.\n', 'Users can purchase multiple PokeMon.\n', '*/\n', 'function purchasePokemon(uint _pokemonId) public payable {\n', '\n', '// Check new price >= currentPrice & gameStatus\n', 'require(msg.value >= pokemons[_pokemonId].currentPrice);\n', 'require(pokemons[_pokemonId].ownerAddress != address(0));\n', 'require(pokemons[_pokemonId].ownerAddress != msg.sender);\n', 'require(lock[_pokemonId] == false);\n', 'require(msg.sender != address(0));\n', 'require(isPaused == false);\n', '\n', '// Calculate the excess\n', 'address newOwner = msg.sender;\n', 'uint256 price = pokemons[_pokemonId].currentPrice;\n', 'uint256 excess = msg.value.sub(price);\n', 'uint256 realValue = pokemons[_pokemonId].currentPrice;\n', '\n', '// If excess>0 send back the amount\n', 'if (excess > 0) {\n', 'newOwner.transfer(excess);\n', '}\n', '\n', '// Calculate the 10% value as tournment prize and dev fee\n', 'uint256 cutFee = realValue.div(10);\n', '\n', '\n', '// Calculate the pokemon owner commission on this sale & transfer the commission to the owner.\n', 'uint256 commissionOwner = realValue - cutFee; // => 90%\n', 'pokemons[_pokemonId].ownerAddress.transfer(commissionOwner);\n', '\n', '// Transfer the 5% commission to the developer & %5 to tournamentPrizeAddress\n', 'devFeeAddress.transfer(cutFee.div(2)); // => 10%\n', 'tournamentPrizeAddress.transfer(cutFee.div(2));\n', '\n', '// Update the hero owner and set the new price\n', 'pokemons[_pokemonId].ownerAddress = msg.sender;\n', 'pokemons[_pokemonId].currentPrice = pokemons[_pokemonId].currentPrice.mul(3).div(2);\n', 'levels[_pokemonId] = levels[_pokemonId] + 1;\n', '}\n', '\n', '// This function will return all of the details of the pokemons\n', 'function getPokemonDetails(uint _pokemonId) public view returns (\n', 'string pokemonName,\n', 'address ownerAddress,\n', 'uint256 currentPrice\n', ') {\n', 'Pokemon storage _pokemon = pokemons[_pokemonId];\n', '\n', 'pokemonName = _pokemon.pokemonName;\n', 'ownerAddress = _pokemon.ownerAddress;\n', 'currentPrice = _pokemon.currentPrice;\n', '}\n', '\n', '// This function will return only the price of a specific pokemon\n', 'function getPokemonCurrentPrice(uint _pokemonId) public view returns(uint256) {\n', 'return(pokemons[_pokemonId].currentPrice);\n', '}\n', '\n', '// This function will return only the owner address of a specific pokemon\n', 'function getPokemonOwner(uint _pokemonId) public view returns(address) {\n', 'return(pokemons[_pokemonId].ownerAddress);\n', '}\n', '\n', '// This function will return only the levels of pokemons\n', 'function getPokemonLevel(uint _pokemonId) public view returns(uint256) {\n', 'return(levels[_pokemonId]);\n', '}\n', '\n', '// delete function, used when bugs comeout\n', 'function deletePokemon(uint _pokemonId) public onlyContractCreator() {\n', 'delete pokemons[_pokemonId];\n', 'delete pokemons[_pokemonId];\n', 'delete lock[_pokemonId];\n', '}\n', '\n', '// Set function, used when bugs comeout\n', 'function setPokemon(uint _pokemonId, string _pokemonName, address _ownerAddress, uint256 _currentPrice, uint256 _levels) public onlyContractCreator() {\n', 'pokemons[_pokemonId].ownerAddress = _ownerAddress;\n', 'pokemons[_pokemonId].pokemonName = _pokemonName;\n', 'pokemons[_pokemonId].currentPrice = _currentPrice;\n', '\n', 'levels[_pokemonId] = _levels;\n', 'lock[_pokemonId] = false;\n', '}\n', '\n', '// This function will be used to add a new hero by the contract creator\n', 'function addPokemon(string pokemonName, address ownerAddress, uint256 currentPrice) public onlyAdmins {\n', 'pokemons.push(Pokemon(pokemonName,ownerAddress,currentPrice));\n', 'levels[pokemons.length - 1] = 0;\n', 'lock[pokemons.length - 1] = false;\n', '}\n', '\n', 'function totalSupply() public view returns (uint256 _totalSupply) {\n', 'return pokemons.length;\n', '}\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/*\n', 'Game: CryptoPokemon\n', 'Domain: CryptoPokemon.com\n', 'Dev: CryptoPokemon Team\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '/**\n', '* @dev Multiplies two numbers, throws on overflow.\n', '*/\n', 'function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', 'if (a == 0) {\n', 'return 0;\n', '}\n', 'uint256 c = a * b;\n', 'assert(c / a == b);\n', 'return c;\n', '}\n', '\n', '/**\n', '* @dev Integer division of two numbers, truncating the quotient.\n', '*/\n', 'function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '// assert(b > 0); // Solidity automatically throws when dividing by 0\n', 'uint256 c = a / b;\n', "// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", 'return c;\n', '}\n', '\n', '/**\n', '* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '*/\n', 'function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', 'assert(b <= a);\n', 'return a - b;\n', '}\n', '\n', '/**\n', '* @dev Adds two numbers, throws on overflow.\n', '*/\n', 'function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', 'uint256 c = a + b;\n', 'assert(c >= a);\n', 'return c;\n', '}\n', '}\n', '\n', 'contract CryptoPokemon {\n', 'using SafeMath for uint256;\n', 'mapping (address => bool) private admins;\n', 'mapping (uint => uint256) public levels;\n', 'mapping (uint => bool) private lock;\n', 'address contractCreator;\n', 'address devFeeAddress;\n', 'address tournamentPrizeAddress;\n', '\n', 'function CryptoPokemon () public {\n', '\n', 'contractCreator = msg.sender;\n', 'devFeeAddress = 0xFb2D26b0caa4C331bd0e101460ec9dbE0A4783A4;\n', 'tournamentPrizeAddress = 0xC6784e712229087fC91E0c77fcCb6b2F1fDE2Dc2;\n', 'admins[contractCreator] = true;\n', '}\n', '\n', 'struct Pokemon {\n', 'string pokemonName;\n', 'address ownerAddress;\n', 'uint256 currentPrice;\n', '}\n', 'Pokemon[] pokemons;\n', '\n', '//modifiers\n', 'modifier onlyContractCreator() {\n', 'require (msg.sender == contractCreator);\n', '_;\n', '}\n', 'modifier onlyAdmins() {\n', 'require(admins[msg.sender]);\n', '_;\n', '}\n', '\n', '//Owners and admins\n', '\n', '/* Owner */\n', 'function setOwner (address _owner) onlyContractCreator() public {\n', 'contractCreator = _owner;\n', '}\n', '\n', 'function addAdmin (address _admin) onlyContractCreator() public {\n', 'admins[_admin] = true;\n', '}\n', '\n', 'function removeAdmin (address _admin) onlyContractCreator() public {\n', 'delete admins[_admin];\n', '}\n', '\n', '// Adresses\n', 'function setdevFeeAddress (address _devFeeAddress) onlyContractCreator() public {\n', 'devFeeAddress = _devFeeAddress;\n', '}\n', '\n', 'function settournamentPrizeAddress (address _tournamentPrizeAddress) onlyContractCreator() public {\n', 'tournamentPrizeAddress = _tournamentPrizeAddress;\n', '}\n', '\n', '\n', 'bool isPaused;\n', '/*\n', 'When countdowns and events happening, use the checker.\n', '*/\n', 'function pauseGame() public onlyContractCreator {\n', 'isPaused = true;\n', '}\n', 'function unPauseGame() public onlyContractCreator {\n', 'isPaused = false;\n', '}\n', 'function GetGamestatus() public view returns(bool) {\n', 'return(isPaused);\n', '}\n', '\n', 'function addLock (uint _pokemonId) onlyContractCreator() public {\n', 'lock[_pokemonId] = true;\n', '}\n', '\n', 'function removeLock (uint _pokemonId) onlyContractCreator() public {\n', 'lock[_pokemonId] = false;\n', '}\n', '\n', 'function getPokemonLock(uint _pokemonId) public view returns(bool) {\n', 'return(lock[_pokemonId]);\n', '}\n', '\n', '/*\n', 'This function allows users to purchase PokeMon.\n', 'The price is automatically multiplied by 1.5 after each purchase.\n', 'Users can purchase multiple PokeMon.\n', '*/\n', 'function purchasePokemon(uint _pokemonId) public payable {\n', '\n', '// Check new price >= currentPrice & gameStatus\n', 'require(msg.value >= pokemons[_pokemonId].currentPrice);\n', 'require(pokemons[_pokemonId].ownerAddress != address(0));\n', 'require(pokemons[_pokemonId].ownerAddress != msg.sender);\n', 'require(lock[_pokemonId] == false);\n', 'require(msg.sender != address(0));\n', 'require(isPaused == false);\n', '\n', '// Calculate the excess\n', 'address newOwner = msg.sender;\n', 'uint256 price = pokemons[_pokemonId].currentPrice;\n', 'uint256 excess = msg.value.sub(price);\n', 'uint256 realValue = pokemons[_pokemonId].currentPrice;\n', '\n', '// If excess>0 send back the amount\n', 'if (excess > 0) {\n', 'newOwner.transfer(excess);\n', '}\n', '\n', '// Calculate the 10% value as tournment prize and dev fee\n', 'uint256 cutFee = realValue.div(10);\n', '\n', '\n', '// Calculate the pokemon owner commission on this sale & transfer the commission to the owner.\n', 'uint256 commissionOwner = realValue - cutFee; // => 90%\n', 'pokemons[_pokemonId].ownerAddress.transfer(commissionOwner);\n', '\n', '// Transfer the 5% commission to the developer & %5 to tournamentPrizeAddress\n', 'devFeeAddress.transfer(cutFee.div(2)); // => 10%\n', 'tournamentPrizeAddress.transfer(cutFee.div(2));\n', '\n', '// Update the hero owner and set the new price\n', 'pokemons[_pokemonId].ownerAddress = msg.sender;\n', 'pokemons[_pokemonId].currentPrice = pokemons[_pokemonId].currentPrice.mul(3).div(2);\n', 'levels[_pokemonId] = levels[_pokemonId] + 1;\n', '}\n', '\n', '// This function will return all of the details of the pokemons\n', 'function getPokemonDetails(uint _pokemonId) public view returns (\n', 'string pokemonName,\n', 'address ownerAddress,\n', 'uint256 currentPrice\n', ') {\n', 'Pokemon storage _pokemon = pokemons[_pokemonId];\n', '\n', 'pokemonName = _pokemon.pokemonName;\n', 'ownerAddress = _pokemon.ownerAddress;\n', 'currentPrice = _pokemon.currentPrice;\n', '}\n', '\n', '// This function will return only the price of a specific pokemon\n', 'function getPokemonCurrentPrice(uint _pokemonId) public view returns(uint256) {\n', 'return(pokemons[_pokemonId].currentPrice);\n', '}\n', '\n', '// This function will return only the owner address of a specific pokemon\n', 'function getPokemonOwner(uint _pokemonId) public view returns(address) {\n', 'return(pokemons[_pokemonId].ownerAddress);\n', '}\n', '\n', '// This function will return only the levels of pokemons\n', 'function getPokemonLevel(uint _pokemonId) public view returns(uint256) {\n', 'return(levels[_pokemonId]);\n', '}\n', '\n', '// delete function, used when bugs comeout\n', 'function deletePokemon(uint _pokemonId) public onlyContractCreator() {\n', 'delete pokemons[_pokemonId];\n', 'delete pokemons[_pokemonId];\n', 'delete lock[_pokemonId];\n', '}\n', '\n', '// Set function, used when bugs comeout\n', 'function setPokemon(uint _pokemonId, string _pokemonName, address _ownerAddress, uint256 _currentPrice, uint256 _levels) public onlyContractCreator() {\n', 'pokemons[_pokemonId].ownerAddress = _ownerAddress;\n', 'pokemons[_pokemonId].pokemonName = _pokemonName;\n', 'pokemons[_pokemonId].currentPrice = _currentPrice;\n', '\n', 'levels[_pokemonId] = _levels;\n', 'lock[_pokemonId] = false;\n', '}\n', '\n', '// This function will be used to add a new hero by the contract creator\n', 'function addPokemon(string pokemonName, address ownerAddress, uint256 currentPrice) public onlyAdmins {\n', 'pokemons.push(Pokemon(pokemonName,ownerAddress,currentPrice));\n', 'levels[pokemons.length - 1] = 0;\n', 'lock[pokemons.length - 1] = false;\n', '}\n', '\n', 'function totalSupply() public view returns (uint256 _totalSupply) {\n', 'return pokemons.length;\n', '}\n', '\n', '}']
