['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/RefundVault.sol\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/MyRefundVault.sol\n', '\n', 'contract MyRefundVault is RefundVault, Pausable {\n', '\n', '  function MyRefundVault(address _wallet) RefundVault(_wallet) \n', '  {\n', '  }\n', '\n', '  function getDeposit(address contributor) public view returns(uint256 depositedValue)\n', '  {\n', '    return deposited[contributor];    \n', '  }\n', '\n', '  function refundWhenNotClosed(address contributor) public onlyOwner whenNotPaused returns(uint256 weiRefunded) {\n', '    require(state != State.Closed);\n', '    uint256 depositedValue = deposited[contributor];\n', '    deposited[contributor] = 0;\n', '    uint256 refundFees = depositedValue.div(100);\n', '    uint256 refundValue = depositedValue.sub(refundFees);\n', '    if(refundFees > 0)\n', '      wallet.transfer(refundFees);\n', '    if(refundValue > 0)\n', '      contributor.transfer(refundValue);\n', '    Refunded(contributor, depositedValue);\n', '    return depositedValue;\n', '  }\n', '\n', '  function isRefundPaused() public view returns(bool) {\n', '    return paused;\n', '  }\n', '\n', '  function myRefund(address investor) public onlyOwner whenNotPaused returns(uint256 refunedValue) {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '    return depositedValue;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    //require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts/MyRefundableCrowdsale.sol\n', '\n', 'contract MyRefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  MyRefundVault public vault;\n', '\n', '  function MyRefundableCrowdsale(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    vault = new MyRefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', '  // We&#39;re overriding the fund forwarding from Crowdsale.\n', '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefundOnUnsuccessfulEvent() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '    uint256 refundedValue = vault.myRefund(msg.sender);\n', '    weiRaised = weiRaised.sub(refundedValue);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  function getDeposit(address contributor) public view returns(uint256 depositedValue) {\n', '    return vault.getDeposit(contributor);\n', '  }\n', '\n', '  function pauseRefund() public onlyOwner {\n', '  \tvault.pause();\n', '  }\n', '\n', '  function unpauseRefund() public onlyOwner {\n', '    vault.unpause();\n', '  }\n', '\n', '  function isRefundPaused() public view returns(bool) {\n', '    return vault.isRefundPaused();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', '        // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/SilcToken.sol\n', '\n', 'contract SilcToken is MintableToken, BurnableToken {\n', '\tstring public name = "SILC";\n', '\tstring public symbol = "SILC";\n', '\tuint8 public decimals = 18;\n', '\n', '\tfunction burn(address burner, uint256 _value) public onlyOwner {\n', '\t    require(_value <= balances[burner]);\n', '\t    // no need to require value <= totalSupply, since that would imply the\n', '\t    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '\t    balances[burner] = balances[burner].sub(_value);\n', '\t    totalSupply = totalSupply.sub(_value);\n', '\t    Burn(burner, _value);\n', '\t}\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/CappedCrowdsale.sol\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SilcCrowdsale.sol\n', '\n', 'contract SilcCrowdsale is CappedCrowdsale, MyRefundableCrowdsale {\n', '\n', '  // Sale Stage\n', '  // ============\n', '  enum CrowdsaleStage { phase1, phase2, phase3 }\n', '  CrowdsaleStage public stage = CrowdsaleStage.phase1; // By default it&#39;s Pre Sale\n', '  // =============\n', '\n', '  // Token Distribution\n', '  // =============================\n', '  uint256 public maxTokens = 20000000000000000000000000000;          // 20,000,000,000\n', '  uint256 public tokensForEcosystem = 3500000000000000000000000000;  //  3,500,000,000\n', '  uint256 public tokensForTeam = 2500000000000000000000000000;       //  2,500,000,000\n', '  uint256 public tokensForAdvisory = 1000000000000000000000000000;   //  1,000,000,000\n', '\n', '  uint256 public totalTokensForSale = 3000000000000000000000000000;  // 3,000,000,000 SILC = 30,000 ETH\n', '  // ==============================\n', '\n', '  // Rate\n', '  uint256 public rateForPhase1 = 110000;\n', '  uint256 public rateForPhase2 = 105000;\n', '  uint256 public rateForPhase3 = 100000;\n', '\n', '  // can be negative, because of refund.\n', '  // ==================\n', '  int256 public totalWeiRaisedDuringPhase1;\n', '  int256 public totalWeiRaisedDuringPhase2;\n', '  int256 public totalWeiRaisedDuringPhase3;\n', '  // ===================\n', '\n', '  uint256 public totalTokenSupply;\n', '\n', '  // Events\n', '  event EthTransferred(string text);\n', '  event EthRefunded(string text);\n', '\n', '\n', '  // Constructor\n', '  // ============\n', '  function SilcCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _goal, uint256 _cap) \n', '    CappedCrowdsale(_cap) \n', '    FinalizableCrowdsale() \n', '    MyRefundableCrowdsale(_goal) \n', '    Crowdsale(_startTime, _endTime, _rate, _wallet) public {\n', '      require(_goal <= _cap);\n', '  }\n', '  // =============\n', '\n', '  // Token Deployment\n', '  // =================\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new SilcToken(); // Deploys the ERC20 token. Automatically called when crowdsale contract is deployed\n', '  }\n', '  // ==================\n', '\n', '  // Crowdsale Stage Management\n', '  // =========================================================\n', '\n', '  // Change Crowdsale Stage. Available Options: phase1, phase2\n', '  function setCrowdsaleStage(uint value) public onlyOwner {\n', '\n', '      CrowdsaleStage _stage;\n', '\n', '      if (uint(CrowdsaleStage.phase1) == value) {\n', '        _stage = CrowdsaleStage.phase1;\n', '      } else if (uint(CrowdsaleStage.phase2) == value) {\n', '        _stage = CrowdsaleStage.phase2;\n', '      } else if (uint(CrowdsaleStage.phase3) == value) {\n', '        _stage = CrowdsaleStage.phase3;\n', '      }\n', '\n', '\n', '      stage = _stage;\n', '\n', '      if (stage == CrowdsaleStage.phase1) {\n', '        setCurrentRate(rateForPhase1);\n', '      } else if (stage == CrowdsaleStage.phase2) {\n', '        setCurrentRate(rateForPhase2);\n', '      } else if (stage == CrowdsaleStage.phase3) {\n', '        setCurrentRate(rateForPhase3);\n', '      }\n', '  }\n', '\n', '  // Change the current rate\n', '  function setCurrentRate(uint256 _rate) private {\n', '      rate = _rate;\n', '  }\n', '\n', '  function calculateWeiForStage(int256 value) {\n', '      if (stage == CrowdsaleStage.phase1) {\n', '        totalWeiRaisedDuringPhase1 = totalWeiRaisedDuringPhase1 + value;\n', '      } else if (stage == CrowdsaleStage.phase2) {\n', '        totalWeiRaisedDuringPhase2 = totalWeiRaisedDuringPhase2 + value;\n', '      } else if (stage == CrowdsaleStage.phase3) {\n', '        totalWeiRaisedDuringPhase3 = totalWeiRaisedDuringPhase3 + value;\n', '      }\n', '  }\n', '\n', '  // ================ Stage Management Over =====================\n', '\n', '  // Token Purchase\n', '  // =========================\n', '  function () external payable {\n', '      //uint256 tokensThatWillBeMintedAfterPurchase = msg.value.mul(rate);\n', '      //if ((stage == CrowdsaleStage.phase1) && (token.totalSupply() + tokensThatWillBeMintedAfterPurchase > totalTokensForSaleDuringpreSale)) {\n', '      //  msg.sender.transfer(msg.value); // Refund them\n', '      //  EthRefunded("phase1 Limit Hit");\n', '      //  return;\n', '      //}\n', '      require(msg.value >= 0.1 ether); // 0.1 ETH\n', '      buyTokens(msg.sender);\n', '      totalTokenSupply = token.totalSupply();\n', '      calculateWeiForStage(int256(msg.value));\n', '  }\n', '\n', '  mapping (address => uint256) tokenIssued;\n', '\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    tokenIssued[beneficiary] = tokenIssued[beneficiary].add(tokens);\n', '\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  function getTokenIssued(address contributor) public view returns (uint256 token) {\n', '    return tokenIssued[contributor];\n', '  }\n', '\n', '  function forwardFunds() internal {\n', '      if (stage == CrowdsaleStage.phase1) {\n', '          //wallet.transfer(msg.value);\n', '          //EthTransferred("forwarding funds to wallet");\n', '          EthTransferred("forwarding funds to refundable vault");\n', '          super.forwardFunds();\n', '      } else if (stage == CrowdsaleStage.phase2) {\n', '          EthTransferred("forwarding funds to refundable vault");\n', '          super.forwardFunds();\n', '      } else if (stage == CrowdsaleStage.phase3) {\n', '          EthTransferred("forwarding funds to refundable vault");\n', '          super.forwardFunds();\n', '      }\n', '  }\n', '  // ===========================\n', '\n', '  // Finish: Mint Extra Tokens as needed before finalizing the Crowdsale.\n', '  // ====================================================================\n', '\n', '  function finish(address _teamFund, address _ecosystemFund, address _advisoryFund) public onlyOwner {\n', '\n', '    require(!isFinalized);\n', '    uint256 alreadyMinted = token.totalSupply();\n', '    require(alreadyMinted < maxTokens);\n', '\n', '    uint256 unsoldTokens = totalTokensForSale - alreadyMinted;\n', '    if (unsoldTokens > 0) {\n', '      tokensForEcosystem = tokensForEcosystem + unsoldTokens;\n', '    }\n', '\n', '    token.mint(_teamFund,tokensForTeam);\n', '    token.mint(_ecosystemFund,tokensForEcosystem);\n', '    token.mint(_advisoryFund,tokensForAdvisory);\n', '    finalize();\n', '  }\n', '  // ===============================\n', '\n', '  // token functions\n', '  function mintSilcToken(address _to, uint256 _amount) public onlyOwner {\n', '    token.mint(_to, _amount);\n', '  }\n', '\n', '  function transferTokenOwnership(address newOwner) public onlyOwner {\n', '    token.transferOwnership(newOwner);\n', '  }\n', '\n', '  function transferVaultOwnership(address newOwner) public onlyOwner {\n', '    vault.transferOwnership(newOwner);\n', '  }\n', '  // ===============================\n', '\n', '  event LogEvent(bytes32 message, uint256 value);\n', '  event RefundRequestCompleted(address contributor, uint256 weiRefunded, uint256 burnedToken);\n', '  function refundRequest() public {\n', '    address contributor = msg.sender;\n', '    SilcToken silcToken = SilcToken(address(token));\n', '    uint256 tokenValance = token.balanceOf(contributor);\n', '    require(tokenValance != 0);\n', '    require(tokenValance >= tokenIssued[contributor]);\n', '    //LogEvent("StartBurn", tokenValance);\n', '    silcToken.burn(contributor, tokenIssued[contributor]);  // burn issued tokens\n', '    tokenIssued[contributor] = 0;\n', '    //LogEvent("StartRefund", token.balanceOf(contributor));\n', '    uint256 weiRefunded = vault.refundWhenNotClosed(contributor);\n', '    weiRaised = weiRaised.sub(weiRefunded);\n', '\n', '    calculateWeiForStage(int256(weiRefunded) * -1);\n', '\n', '    RefundRequestCompleted(contributor, weiRefunded, tokenValance);\n', '  }\n', '\n', '  // for testing `finish()` FUNCTION\n', '  function hasEnded() public view returns (bool) {\n', '    return true;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/RefundVault.sol\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/MyRefundVault.sol\n', '\n', 'contract MyRefundVault is RefundVault, Pausable {\n', '\n', '  function MyRefundVault(address _wallet) RefundVault(_wallet) \n', '  {\n', '  }\n', '\n', '  function getDeposit(address contributor) public view returns(uint256 depositedValue)\n', '  {\n', '    return deposited[contributor];    \n', '  }\n', '\n', '  function refundWhenNotClosed(address contributor) public onlyOwner whenNotPaused returns(uint256 weiRefunded) {\n', '    require(state != State.Closed);\n', '    uint256 depositedValue = deposited[contributor];\n', '    deposited[contributor] = 0;\n', '    uint256 refundFees = depositedValue.div(100);\n', '    uint256 refundValue = depositedValue.sub(refundFees);\n', '    if(refundFees > 0)\n', '      wallet.transfer(refundFees);\n', '    if(refundValue > 0)\n', '      contributor.transfer(refundValue);\n', '    Refunded(contributor, depositedValue);\n', '    return depositedValue;\n', '  }\n', '\n', '  function isRefundPaused() public view returns(bool) {\n', '    return paused;\n', '  }\n', '\n', '  function myRefund(address investor) public onlyOwner whenNotPaused returns(uint256 refunedValue) {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '    return depositedValue;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    //require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '// File: contracts/MyRefundableCrowdsale.sol\n', '\n', 'contract MyRefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  MyRefundVault public vault;\n', '\n', '  function MyRefundableCrowdsale(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    vault = new MyRefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', "  // We're overriding the fund forwarding from Crowdsale.\n", '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefundOnUnsuccessfulEvent() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '    uint256 refundedValue = vault.myRefund(msg.sender);\n', '    weiRaised = weiRaised.sub(refundedValue);\n', '  }\n', '\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  function getDeposit(address contributor) public view returns(uint256 depositedValue) {\n', '    return vault.getDeposit(contributor);\n', '  }\n', '\n', '  function pauseRefund() public onlyOwner {\n', '  \tvault.pause();\n', '  }\n', '\n', '  function unpauseRefund() public onlyOwner {\n', '    vault.unpause();\n', '  }\n', '\n', '  function isRefundPaused() public view returns(bool) {\n', '    return vault.isRefundPaused();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/SilcToken.sol\n', '\n', 'contract SilcToken is MintableToken, BurnableToken {\n', '\tstring public name = "SILC";\n', '\tstring public symbol = "SILC";\n', '\tuint8 public decimals = 18;\n', '\n', '\tfunction burn(address burner, uint256 _value) public onlyOwner {\n', '\t    require(_value <= balances[burner]);\n', '\t    // no need to require value <= totalSupply, since that would imply the\n', "\t    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '\t    balances[burner] = balances[burner].sub(_value);\n', '\t    totalSupply = totalSupply.sub(_value);\n', '\t    Burn(burner, _value);\n', '\t}\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/crowdsale/CappedCrowdsale.sol\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/SilcCrowdsale.sol\n', '\n', 'contract SilcCrowdsale is CappedCrowdsale, MyRefundableCrowdsale {\n', '\n', '  // Sale Stage\n', '  // ============\n', '  enum CrowdsaleStage { phase1, phase2, phase3 }\n', "  CrowdsaleStage public stage = CrowdsaleStage.phase1; // By default it's Pre Sale\n", '  // =============\n', '\n', '  // Token Distribution\n', '  // =============================\n', '  uint256 public maxTokens = 20000000000000000000000000000;          // 20,000,000,000\n', '  uint256 public tokensForEcosystem = 3500000000000000000000000000;  //  3,500,000,000\n', '  uint256 public tokensForTeam = 2500000000000000000000000000;       //  2,500,000,000\n', '  uint256 public tokensForAdvisory = 1000000000000000000000000000;   //  1,000,000,000\n', '\n', '  uint256 public totalTokensForSale = 3000000000000000000000000000;  // 3,000,000,000 SILC = 30,000 ETH\n', '  // ==============================\n', '\n', '  // Rate\n', '  uint256 public rateForPhase1 = 110000;\n', '  uint256 public rateForPhase2 = 105000;\n', '  uint256 public rateForPhase3 = 100000;\n', '\n', '  // can be negative, because of refund.\n', '  // ==================\n', '  int256 public totalWeiRaisedDuringPhase1;\n', '  int256 public totalWeiRaisedDuringPhase2;\n', '  int256 public totalWeiRaisedDuringPhase3;\n', '  // ===================\n', '\n', '  uint256 public totalTokenSupply;\n', '\n', '  // Events\n', '  event EthTransferred(string text);\n', '  event EthRefunded(string text);\n', '\n', '\n', '  // Constructor\n', '  // ============\n', '  function SilcCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet, uint256 _goal, uint256 _cap) \n', '    CappedCrowdsale(_cap) \n', '    FinalizableCrowdsale() \n', '    MyRefundableCrowdsale(_goal) \n', '    Crowdsale(_startTime, _endTime, _rate, _wallet) public {\n', '      require(_goal <= _cap);\n', '  }\n', '  // =============\n', '\n', '  // Token Deployment\n', '  // =================\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new SilcToken(); // Deploys the ERC20 token. Automatically called when crowdsale contract is deployed\n', '  }\n', '  // ==================\n', '\n', '  // Crowdsale Stage Management\n', '  // =========================================================\n', '\n', '  // Change Crowdsale Stage. Available Options: phase1, phase2\n', '  function setCrowdsaleStage(uint value) public onlyOwner {\n', '\n', '      CrowdsaleStage _stage;\n', '\n', '      if (uint(CrowdsaleStage.phase1) == value) {\n', '        _stage = CrowdsaleStage.phase1;\n', '      } else if (uint(CrowdsaleStage.phase2) == value) {\n', '        _stage = CrowdsaleStage.phase2;\n', '      } else if (uint(CrowdsaleStage.phase3) == value) {\n', '        _stage = CrowdsaleStage.phase3;\n', '      }\n', '\n', '\n', '      stage = _stage;\n', '\n', '      if (stage == CrowdsaleStage.phase1) {\n', '        setCurrentRate(rateForPhase1);\n', '      } else if (stage == CrowdsaleStage.phase2) {\n', '        setCurrentRate(rateForPhase2);\n', '      } else if (stage == CrowdsaleStage.phase3) {\n', '        setCurrentRate(rateForPhase3);\n', '      }\n', '  }\n', '\n', '  // Change the current rate\n', '  function setCurrentRate(uint256 _rate) private {\n', '      rate = _rate;\n', '  }\n', '\n', '  function calculateWeiForStage(int256 value) {\n', '      if (stage == CrowdsaleStage.phase1) {\n', '        totalWeiRaisedDuringPhase1 = totalWeiRaisedDuringPhase1 + value;\n', '      } else if (stage == CrowdsaleStage.phase2) {\n', '        totalWeiRaisedDuringPhase2 = totalWeiRaisedDuringPhase2 + value;\n', '      } else if (stage == CrowdsaleStage.phase3) {\n', '        totalWeiRaisedDuringPhase3 = totalWeiRaisedDuringPhase3 + value;\n', '      }\n', '  }\n', '\n', '  // ================ Stage Management Over =====================\n', '\n', '  // Token Purchase\n', '  // =========================\n', '  function () external payable {\n', '      //uint256 tokensThatWillBeMintedAfterPurchase = msg.value.mul(rate);\n', '      //if ((stage == CrowdsaleStage.phase1) && (token.totalSupply() + tokensThatWillBeMintedAfterPurchase > totalTokensForSaleDuringpreSale)) {\n', '      //  msg.sender.transfer(msg.value); // Refund them\n', '      //  EthRefunded("phase1 Limit Hit");\n', '      //  return;\n', '      //}\n', '      require(msg.value >= 0.1 ether); // 0.1 ETH\n', '      buyTokens(msg.sender);\n', '      totalTokenSupply = token.totalSupply();\n', '      calculateWeiForStage(int256(msg.value));\n', '  }\n', '\n', '  mapping (address => uint256) tokenIssued;\n', '\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    tokenIssued[beneficiary] = tokenIssued[beneficiary].add(tokens);\n', '\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  function getTokenIssued(address contributor) public view returns (uint256 token) {\n', '    return tokenIssued[contributor];\n', '  }\n', '\n', '  function forwardFunds() internal {\n', '      if (stage == CrowdsaleStage.phase1) {\n', '          //wallet.transfer(msg.value);\n', '          //EthTransferred("forwarding funds to wallet");\n', '          EthTransferred("forwarding funds to refundable vault");\n', '          super.forwardFunds();\n', '      } else if (stage == CrowdsaleStage.phase2) {\n', '          EthTransferred("forwarding funds to refundable vault");\n', '          super.forwardFunds();\n', '      } else if (stage == CrowdsaleStage.phase3) {\n', '          EthTransferred("forwarding funds to refundable vault");\n', '          super.forwardFunds();\n', '      }\n', '  }\n', '  // ===========================\n', '\n', '  // Finish: Mint Extra Tokens as needed before finalizing the Crowdsale.\n', '  // ====================================================================\n', '\n', '  function finish(address _teamFund, address _ecosystemFund, address _advisoryFund) public onlyOwner {\n', '\n', '    require(!isFinalized);\n', '    uint256 alreadyMinted = token.totalSupply();\n', '    require(alreadyMinted < maxTokens);\n', '\n', '    uint256 unsoldTokens = totalTokensForSale - alreadyMinted;\n', '    if (unsoldTokens > 0) {\n', '      tokensForEcosystem = tokensForEcosystem + unsoldTokens;\n', '    }\n', '\n', '    token.mint(_teamFund,tokensForTeam);\n', '    token.mint(_ecosystemFund,tokensForEcosystem);\n', '    token.mint(_advisoryFund,tokensForAdvisory);\n', '    finalize();\n', '  }\n', '  // ===============================\n', '\n', '  // token functions\n', '  function mintSilcToken(address _to, uint256 _amount) public onlyOwner {\n', '    token.mint(_to, _amount);\n', '  }\n', '\n', '  function transferTokenOwnership(address newOwner) public onlyOwner {\n', '    token.transferOwnership(newOwner);\n', '  }\n', '\n', '  function transferVaultOwnership(address newOwner) public onlyOwner {\n', '    vault.transferOwnership(newOwner);\n', '  }\n', '  // ===============================\n', '\n', '  event LogEvent(bytes32 message, uint256 value);\n', '  event RefundRequestCompleted(address contributor, uint256 weiRefunded, uint256 burnedToken);\n', '  function refundRequest() public {\n', '    address contributor = msg.sender;\n', '    SilcToken silcToken = SilcToken(address(token));\n', '    uint256 tokenValance = token.balanceOf(contributor);\n', '    require(tokenValance != 0);\n', '    require(tokenValance >= tokenIssued[contributor]);\n', '    //LogEvent("StartBurn", tokenValance);\n', '    silcToken.burn(contributor, tokenIssued[contributor]);  // burn issued tokens\n', '    tokenIssued[contributor] = 0;\n', '    //LogEvent("StartRefund", token.balanceOf(contributor));\n', '    uint256 weiRefunded = vault.refundWhenNotClosed(contributor);\n', '    weiRaised = weiRaised.sub(weiRefunded);\n', '\n', '    calculateWeiForStage(int256(weiRefunded) * -1);\n', '\n', '    RefundRequestCompleted(contributor, weiRefunded, tokenValance);\n', '  }\n', '\n', '  // for testing `finish()` FUNCTION\n', '  function hasEnded() public view returns (bool) {\n', '    return true;\n', '  }\n', '}']
