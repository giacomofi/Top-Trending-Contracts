['pragma solidity ^0.4.19;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount);\n', '}\n', '\n', 'contract Crowdsale {\n', '    address public beneficiary;\n', '    uint public amountRaised;\n', '    token public tokenReward;\n', '    uint256 public soldTokensCounter;\n', '    uint public price = 0.000142857 ether;\n', '    bool public crowdsaleClosed = false;\n', '    bool public adminVer = false;\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, uint price, bool isContribution);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function Crowdsale() {\n', '        beneficiary = 0xA4047af02a2Fd8e6BB43Cfe8Ab25292aC52c73f4;\n', '        tokenReward = token(0x12AC8d8F0F48b7954bcdA736AF0576a12Dc8C387);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Check ownership\n', '     */\n', '    function checkAdmin() onlyOwner {\n', '        adminVer = true;\n', '    }\n', '\n', '    /**\n', '     * Return unsold tokens to beneficiary address\n', '     */\n', '    function getUnsoldTokens(uint val_) onlyOwner {\n', '        tokenReward.transfer(beneficiary, val_);\n', '    }\n', '\n', '    /**\n', '     * Return unsold tokens to beneficiary address with decimals\n', '     */\n', '    function getUnsoldTokensWithDecimals(uint val_, uint dec_) onlyOwner {\n', '        val_ = val_ * 10 ** dec_;\n', '        tokenReward.transfer(beneficiary, val_);\n', '    }\n', '\n', '    /**\n', '     * Close/Open crowdsale\n', '     */\n', '    function closeCrowdsale(bool closeType) onlyOwner {\n', '        crowdsaleClosed = closeType;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable {\n', '        require(!crowdsaleClosed && msg.value <= 2 ether);                                  //1 ether is minimum to contribute                                                                \n', '        uint amount = msg.value;                                                           //save users eth value\n', '        balanceOf[msg.sender] += amount;                                                   //save users eth value in balance list \n', '        amountRaised += amount;                                                            //update total amount of crowdsale\n', "        uint sendTokens = (amount / price) * 10 ** uint256(18);                            //calculate user's tokens\n", '        tokenReward.transfer(msg.sender, sendTokens);                                      //send tokens to user\n', '        soldTokensCounter += sendTokens;                                                   //update total sold tokens counter\n', '        FundTransfer(msg.sender, amount, price, true);                                     //pin transaction data in blockchain\n', '        if (beneficiary.send(amount)) { FundTransfer(beneficiary, amount, price, false); } //send users amount to beneficiary\n', '    }\n', '}']