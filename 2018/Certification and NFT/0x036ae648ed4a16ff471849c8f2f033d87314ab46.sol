['pragma solidity 0.4.19;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title HardCap\n', ' * @dev Allows updating and retrieveing of Conversion HardCap for ABLE tokens\n', ' *\n', ' * ABI\n', ' * [{"constant": true,"inputs": [{"name": "_symbol","type": "string"}],"name": "getCap","outputs": [{"name": "","type": "uint256"}],"payable": false,"stateMutability": "view","type": "function"},{"constant": true,"inputs": [],"name": "owner","outputs": [{"name": "","type": "address"}],"payable": false,"stateMutability": "view","type": "function"},{"constant": false,"inputs": [{"name": "_symbol","type": "string"},{"name": "_cap","type": "uint256"}],"name": "updateCap","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},{"constant": false,"inputs": [{"name": "data","type": "uint256[]"}],"name": "updateCaps","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},{"constant": true,"inputs": [],"name": "getHardCap","outputs": [{"name": "","type": "uint256"}],"payable": false,"stateMutability": "view","type": "function"},{"constant": true,"inputs": [{"name": "","type": "bytes32"}],"name": "caps","outputs": [{"name": "","type": "uint256"}],"payable": false,"stateMutability": "view","type": "function"},{"constant": false,"inputs": [{"name": "newOwner","type": "address"}],"name": "transferOwnership","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},{"anonymous": false,"inputs": [{"indexed": false,"name": "timestamp","type": "uint256"},{"indexed": false,"name": "symbol","type": "bytes32"},{"indexed": false,"name": "rate","type": "uint256"}],"name": "CapUpdated","type": "event"}]\n', ' */\n', 'contract HardCap is Ownable {\n', '  using SafeMath for uint;\n', '  event CapUpdated(uint timestamp, bytes32 symbol, uint rate);\n', '  \n', '  mapping(bytes32 => uint) public caps;\n', '  uint hardcap = 0;\n', '\n', '  /**\n', '   * @dev Allows the current owner to update a single cap.\n', '   * @param _symbol The symbol to be updated. \n', '   * @param _cap the cap for the symbol. \n', '   */\n', '  function updateCap(string _symbol, uint _cap) public onlyOwner {\n', '    caps[sha3(_symbol)] = _cap;\n', '    hardcap = hardcap.add(_cap) ;\n', '    CapUpdated(now, sha3(_symbol), _cap);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to update multiple caps.\n', '   * @param data an array that alternates sha3 hashes of the symbol and the corresponding cap . \n', '   */\n', '  function updateCaps(uint[] data) public onlyOwner {\n', '    require(data.length % 2 == 0);\n', '    uint i = 0;\n', '    while (i < data.length / 2) {\n', '      bytes32 symbol = bytes32(data[i * 2]);\n', '      uint cap = data[i * 2 + 1];\n', '      caps[symbol] = cap;\n', '      hardcap = hardcap.add(cap);\n', '      CapUpdated(now, symbol, cap);\n', '      i++;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the anyone to read the current cap.\n', '   * @param _symbol the symbol to be retrieved. \n', '   */\n', '  function getCap(string _symbol) public constant returns(uint) {\n', '    return caps[sha3(_symbol)];\n', '  }\n', '  \n', '  /**\n', '   * @dev Allows the anyone to read the current hardcap.\n', '   */\n', '  function getHardCap() public constant returns(uint) {\n', '    return hardcap;\n', '  }\n', '\n', '}']