['contract WeeMath {\n', '\n', '    function subtractWee(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function multWee(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Token {\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is ERC20Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\tuint256 public totalSupply;\n', '}\n', '\n', '\n', 'contract WEECoin is StandardToken, WeeMath {\n', '\n', '    string public constant name = "WEE Token";\n', '    string public constant symbol = "WEE";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\t\n', '    address public WEEFundWallet;      \n', '    address public account1Address;      \n', '    address public account2Address;\n', '    address public account3Address;\n', '    \n', '    bool public isFinalized;\n', '    bool public isPreSale;    \n', '    bool public isMainSale;\n', '    uint public preSalePeriod;    \n', '    uint256 public weeOneEthCanBuy = 0; \t\n', '    uint256 public constant tokenSaleCap =  500 * (10**6) * 10**decimals;\n', '    uint256 public constant tokenPreSaleCap = 150 * (10**6) * 10**decimals; \n', '\tuint256 public constant tokensForFinalize =  150 * (10**6) * 10**decimals;\n', '\tuint256 public totalEthInWei;  \n', '\t\n', '    event LogWEE(address indexed _to, uint256 _value);\n', '\n', '    function WEECoin()\n', '    {                      \n', '      WEEFundWallet =  msg.sender;\n', '      account1Address = 0xe98FF512B5886Ef34730b0C84624f63bAD0A5212;\t                    \n', '      account2Address = 0xDaB2365752B3Fe5E630d68F357293e26873288ff;\t                    \n', '      account3Address = 0xfF5706dcCbA47E12d8107Dcd3CA5EF62e355b31E;\t                    \n', '      isPreSale = false;\n', '      isMainSale = false;\n', '\t  isFinalized = false;   \n', '      totalSupply = ( (10**9) * 10**decimals ) + ( 100 * (10**6) * 10**decimals );\n', '\t  balances[WEEFundWallet] = totalSupply;         \n', '    }\n', '\n', '    function () payable \n', '\t{      \n', '      if ( (isFinalized) || (!isPreSale && !isMainSale) || (msg.value == 0) ) throw;\n', '      \n', '      uint256 tokens = multWee(msg.value, weeOneEthCanBuy); \n', '      uint256 verifiedLeftTokens = subtractWee(balances[WEEFundWallet], tokens);\n', '\n', '\t  if( (isMainSale) && (verifiedLeftTokens < (totalSupply - tokenSaleCap)) ) throw;\n', '\t  if (balances[WEEFundWallet] < tokens) throw;\n', '\t  \n', '      if( (isPreSale) && (verifiedLeftTokens < (totalSupply - tokenPreSaleCap) ) )\n', '\t  {\t\t\t\n', '\t\tisMainSale = true;\n', '\t\tweeOneEthCanBuy = 10000; \t\n', '\t\tisPreSale = false;\t\t\n', '\t  }     \t  \n', '     \n', '      balances[msg.sender] += tokens;  \n', '\t  balances[WEEFundWallet] -= tokens;\n', '      LogWEE(msg.sender, tokens);  \n', '\t  \n', '      WEEFundWallet.transfer(msg.value);   \t \n', '\t  totalEthInWei = totalEthInWei + msg.value;\t  \n', '    }\n', '\n', '    function finalize() external {\n', '      if( (isFinalized) || (msg.sender != WEEFundWallet) ) throw;\n', '              \n', '      balances[account1Address] += tokensForFinalize;\n', '\t  LogWEE(account1Address, tokensForFinalize);\n', '\t  \n', '      balances[account2Address] += tokensForFinalize;\n', '      LogWEE(account2Address, tokensForFinalize);\n', '     \n', '\t  balances[account3Address] += tokensForFinalize;\n', '\t  LogWEE(account3Address, tokensForFinalize);\n', '\t  \n', '\t  balances[WEEFundWallet] -= (tokensForFinalize * 3);\n', '\t  \n', '      isFinalized = true;  \n', '    }\n', '\t\n', '    function switchStage() external {\n', '      if ( (isMainSale) || (msg.sender != WEEFundWallet) ) throw;\n', '      \t  \n', '      if (!isPreSale){\n', '        isPreSale = true;\n', '        weeOneEthCanBuy = 20000;\n', '      }\n', '      else if (!isMainSale){\n', '        isMainSale = true;\n', '\t\tisPreSale = false;\n', '        weeOneEthCanBuy = 10000;       \n', '      }\n', '    }\n', '}']
['contract WeeMath {\n', '\n', '    function subtractWee(uint256 x, uint256 y) internal returns(uint256) {\n', '      assert(x >= y);\n', '      uint256 z = x - y;\n', '      return z;\n', '    }\n', '\n', '    function multWee(uint256 x, uint256 y) internal returns(uint256) {\n', '      uint256 z = x * y;\n', '      assert((x == 0)||(z/x == y));\n', '      return z;\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Token {\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is ERC20Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '      if (balances[msg.sender] >= _value && _value > 0) {\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '      if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '      } else {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\tuint256 public totalSupply;\n', '}\n', '\n', '\n', 'contract WEECoin is StandardToken, WeeMath {\n', '\n', '    string public constant name = "WEE Token";\n', '    string public constant symbol = "WEE";\n', '    uint256 public constant decimals = 18;\n', '    string public version = "1.0";\n', '\t\n', '    address public WEEFundWallet;      \n', '    address public account1Address;      \n', '    address public account2Address;\n', '    address public account3Address;\n', '    \n', '    bool public isFinalized;\n', '    bool public isPreSale;    \n', '    bool public isMainSale;\n', '    uint public preSalePeriod;    \n', '    uint256 public weeOneEthCanBuy = 0; \t\n', '    uint256 public constant tokenSaleCap =  500 * (10**6) * 10**decimals;\n', '    uint256 public constant tokenPreSaleCap = 150 * (10**6) * 10**decimals; \n', '\tuint256 public constant tokensForFinalize =  150 * (10**6) * 10**decimals;\n', '\tuint256 public totalEthInWei;  \n', '\t\n', '    event LogWEE(address indexed _to, uint256 _value);\n', '\n', '    function WEECoin()\n', '    {                      \n', '      WEEFundWallet =  msg.sender;\n', '      account1Address = 0xe98FF512B5886Ef34730b0C84624f63bAD0A5212;\t                    \n', '      account2Address = 0xDaB2365752B3Fe5E630d68F357293e26873288ff;\t                    \n', '      account3Address = 0xfF5706dcCbA47E12d8107Dcd3CA5EF62e355b31E;\t                    \n', '      isPreSale = false;\n', '      isMainSale = false;\n', '\t  isFinalized = false;   \n', '      totalSupply = ( (10**9) * 10**decimals ) + ( 100 * (10**6) * 10**decimals );\n', '\t  balances[WEEFundWallet] = totalSupply;         \n', '    }\n', '\n', '    function () payable \n', '\t{      \n', '      if ( (isFinalized) || (!isPreSale && !isMainSale) || (msg.value == 0) ) throw;\n', '      \n', '      uint256 tokens = multWee(msg.value, weeOneEthCanBuy); \n', '      uint256 verifiedLeftTokens = subtractWee(balances[WEEFundWallet], tokens);\n', '\n', '\t  if( (isMainSale) && (verifiedLeftTokens < (totalSupply - tokenSaleCap)) ) throw;\n', '\t  if (balances[WEEFundWallet] < tokens) throw;\n', '\t  \n', '      if( (isPreSale) && (verifiedLeftTokens < (totalSupply - tokenPreSaleCap) ) )\n', '\t  {\t\t\t\n', '\t\tisMainSale = true;\n', '\t\tweeOneEthCanBuy = 10000; \t\n', '\t\tisPreSale = false;\t\t\n', '\t  }     \t  \n', '     \n', '      balances[msg.sender] += tokens;  \n', '\t  balances[WEEFundWallet] -= tokens;\n', '      LogWEE(msg.sender, tokens);  \n', '\t  \n', '      WEEFundWallet.transfer(msg.value);   \t \n', '\t  totalEthInWei = totalEthInWei + msg.value;\t  \n', '    }\n', '\n', '    function finalize() external {\n', '      if( (isFinalized) || (msg.sender != WEEFundWallet) ) throw;\n', '              \n', '      balances[account1Address] += tokensForFinalize;\n', '\t  LogWEE(account1Address, tokensForFinalize);\n', '\t  \n', '      balances[account2Address] += tokensForFinalize;\n', '      LogWEE(account2Address, tokensForFinalize);\n', '     \n', '\t  balances[account3Address] += tokensForFinalize;\n', '\t  LogWEE(account3Address, tokensForFinalize);\n', '\t  \n', '\t  balances[WEEFundWallet] -= (tokensForFinalize * 3);\n', '\t  \n', '      isFinalized = true;  \n', '    }\n', '\t\n', '    function switchStage() external {\n', '      if ( (isMainSale) || (msg.sender != WEEFundWallet) ) throw;\n', '      \t  \n', '      if (!isPreSale){\n', '        isPreSale = true;\n', '        weeOneEthCanBuy = 20000;\n', '      }\n', '      else if (!isMainSale){\n', '        isMainSale = true;\n', '\t\tisPreSale = false;\n', '        weeOneEthCanBuy = 10000;       \n', '      }\n', '    }\n', '}']
