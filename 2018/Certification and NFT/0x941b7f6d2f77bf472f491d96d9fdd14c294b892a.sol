['/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '\n', '  modifier stopInEmergency {\n', '    if (halted) throw;\n', '    _;\n', '  }\n', '\n', '  modifier stopNonOwnersInEmergency {\n', '    if (halted && msg.sender != owner) throw;\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    if (!halted) throw;\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * Safe unsigned safe math.\n', ' *\n', ' * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\n', ' *\n', ' * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\n', ' *\n', ' * Maintained here until merged to mainline zeppelin-solidity.\n', ' *\n', ' */\n', 'library SafeMathLib {\n', '\n', '  function times(uint a, uint b) returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function minus(uint a, uint b) returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function plus(uint a, uint b) returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * A token that defines fractional units as decimals.\n', ' */\n', 'contract FractionalERC20 is ERC20 {\n', '\n', '  uint public decimals;\n', '\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * Interface for defining crowdsale pricing.\n', ' */\n', 'contract PricingStrategy {\n', '\n', '  /** Interface declaration. */\n', '  function isPricingStrategy() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /** Self check if all references are correctly set.\n', '   *\n', '   * Checks that pricing strategy matches crowdsale parameters.\n', '   */\n', '  function isSane(address crowdsale) public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Pricing tells if this is a presale purchase or not.\n', '     @param purchaser Address of the purchaser\n', '     @return False by default, true if a presale purchaser\n', '   */\n', '  function isPresalePurchase(address purchaser) public constant returns (bool) {\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\n', '   *\n', '   *\n', '   * @param value - What is the value of the transaction send in as wei\n', '   * @param tokensSold - how much tokens have been sold this far\n', '   * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale\n', '   * @param msgSender - who is the investor of this transaction\n', '   * @param decimals - how many decimal units the token has\n', '   * @return Amount of tokens the investor receives\n', '   */\n', '  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * Finalize agent defines what happens at the end of succeseful crowdsale.\n', ' *\n', ' * - Allocate tokens for founders, bounties and community\n', ' * - Make tokens transferable\n', ' * - etc.\n', ' */\n', 'contract FinalizeAgent {\n', '\n', '  function isFinalizeAgent() public constant returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  /** Return true if we can run finalizeCrowdsale() properly.\n', '   *\n', '   * This is a safety check function that doesn&#39;t allow crowdsale to begin\n', '   * unless the finalizer has been set up properly.\n', '   */\n', '  function isSane() public constant returns (bool);\n', '\n', '  /** Called once by crowdsale finalize() if the sale was success. */\n', '  function finalizeCrowdsale();\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Crowdsale state machine without buy functionality.\n', ' *\n', ' * Implements basic state machine logic, but leaves out all buy functions,\n', ' * so that subclasses can implement their own buying logic.\n', ' *\n', ' *\n', ' * For the default buy() implementation see Crowdsale.sol.\n', ' */\n', 'contract CrowdsaleBase is Haltable {\n', '\n', '  /* Max investment count when we are still allowed to change the multisig address */\n', '  uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\n', '\n', '  using SafeMathLib for uint;\n', '\n', '  /* The token we are selling */\n', '  FractionalERC20 public token;\n', '\n', '  /* How we are going to price our offering */\n', '  PricingStrategy public pricingStrategy;\n', '\n', '  /* Post-success callback */\n', '  FinalizeAgent public finalizeAgent;\n', '\n', '  /* tokens will be transfered from this address */\n', '  address public multisigWallet;\n', '\n', '  /* if the funding goal is not reached, investors may withdraw their funds */\n', '  uint public minimumFundingGoal;\n', '\n', '  /* the UNIX timestamp start date of the crowdsale */\n', '  uint public startsAt;\n', '\n', '  /* the UNIX timestamp end date of the crowdsale */\n', '  uint public endsAt;\n', '\n', '  /* the number of tokens already sold through this contract*/\n', '  uint public tokensSold = 0;\n', '\n', '  /* How many wei of funding we have raised */\n', '  uint public weiRaised = 0;\n', '\n', '  /* Calculate incoming funds from presale contracts and addresses */\n', '  uint public presaleWeiRaised = 0;\n', '\n', '  /* How many distinct addresses have invested */\n', '  uint public investorCount = 0;\n', '\n', '  /* How much wei we have returned back to the contract after a failed crowdfund. */\n', '  uint public loadedRefund = 0;\n', '\n', '  /* How much wei we have given back to investors.*/\n', '  uint public weiRefunded = 0;\n', '\n', '  /* Has this crowdsale been finalized */\n', '  bool public finalized;\n', '\n', '  /** How much ETH each address has invested to this crowdsale */\n', '  mapping (address => uint256) public investedAmountOf;\n', '\n', '  /** How much tokens this crowdsale has credited for each investor address */\n', '  mapping (address => uint256) public tokenAmountOf;\n', '\n', '  /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\n', '  mapping (address => bool) public earlyParticipantWhitelist;\n', '\n', '  /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\n', '  uint public ownerTestValue;\n', '\n', '  /** State machine\n', '   *\n', '   * - Preparing: All contract initialization calls and variables have not been set yet\n', '   * - Prefunding: We have not passed start time yet\n', '   * - Funding: Active crowdsale\n', '   * - Success: Minimum funding goal reached\n', '   * - Failure: Minimum funding goal not reached before ending time\n', '   * - Finalized: The finalized has been called and succesfully executed\n', '   * - Refunding: Refunds are loaded on the contract for reclaim.\n', '   */\n', '  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\n', '\n', '  // A new investment was made\n', '  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\n', '\n', '  // Refund was processed for a contributor\n', '  event Refund(address investor, uint weiAmount);\n', '\n', '  // The rules were changed what kind of investments we accept\n', '  event InvestmentPolicyChanged(bool newRequireCustomerId, bool newRequiredSignedAddress, address newSignerAddress);\n', '\n', '  // Address early participation whitelist status changed\n', '  event Whitelisted(address addr, bool status);\n', '\n', '  // Crowdsale end time has been changed\n', '  event EndsAtChanged(uint newEndsAt);\n', '\n', '  function CrowdsaleBase(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {\n', '\n', '    owner = msg.sender;\n', '\n', '    token = FractionalERC20(_token);\n', '    setPricingStrategy(_pricingStrategy);\n', '\n', '    multisigWallet = _multisigWallet;\n', '    if(multisigWallet == 0) {\n', '        throw;\n', '    }\n', '\n', '    if(_start == 0) {\n', '        throw;\n', '    }\n', '\n', '    startsAt = _start;\n', '\n', '    if(_end == 0) {\n', '        throw;\n', '    }\n', '\n', '    endsAt = _end;\n', '\n', '    // Don&#39;t mess the dates\n', '    if(startsAt >= endsAt) {\n', '        throw;\n', '    }\n', '\n', '    // Minimum funding goal can be zero\n', '    minimumFundingGoal = _minimumFundingGoal;\n', '  }\n', '\n', '  /**\n', '   * Don&#39;t expect to just send in money and get tokens.\n', '   */\n', '  function() payable {\n', '    throw;\n', '  }\n', '\n', '  /**\n', '   * @dev Make an investment.\n', '   *\n', '   * Crowdsale must be running for one to invest.\n', '   * We must have not pressed the emergency brake.\n', '   *\n', '   * @param receiver The Ethereum address who receives the tokens\n', '   * @param customerId (optional) UUID v4 to track the successful payments on the server side&#39;\n', '   * @param tokenAmount Amount of tokens which be credited to receiver\n', '   *\n', '   * @return tokensBought How mony tokens were bought\n', '   */\n', '  function buyTokens(address receiver, uint128 customerId, uint256 tokenAmount) stopInEmergency internal returns(uint tokensBought) {\n', '\n', '    // Determine if it&#39;s a good time to accept investment from this participant\n', '    if(getState() == State.PreFunding) {\n', '      // Are we whitelisted for early deposit\n', '      if(!earlyParticipantWhitelist[receiver]) {\n', '        throw;\n', '      }\n', '    } else if(getState() == State.Funding) {\n', '      // Retail participants can only come in when the crowdsale is running\n', '      // pass\n', '    } else {\n', '      // Unwanted state\n', '      throw;\n', '    }\n', '\n', '    uint weiAmount = msg.value;\n', '\n', '    // Dust transaction\n', '    require(tokenAmount != 0);\n', '\n', '    if(investedAmountOf[receiver] == 0) {\n', '       // A new investor\n', '       investorCount++;\n', '    }\n', '\n', '    // Update investor\n', '    investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount);\n', '    tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount);\n', '\n', '    // Update totals\n', '    weiRaised = weiRaised.plus(weiAmount);\n', '    tokensSold = tokensSold.plus(tokenAmount);\n', '\n', '    if(pricingStrategy.isPresalePurchase(receiver)) {\n', '        presaleWeiRaised = presaleWeiRaised.plus(weiAmount);\n', '    }\n', '\n', '    // Check that we did not bust the cap\n', '    require(!isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold));\n', '\n', '    assignTokens(receiver, tokenAmount);\n', '\n', '    // Pocket the money, or fail the crowdsale if we for some reason cannot send the money to our multisig\n', '    if(!multisigWallet.send(weiAmount)) throw;\n', '\n', '    // Tell us invest was success\n', '    Invested(receiver, weiAmount, tokenAmount, customerId);\n', '\n', '    return tokenAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Make an investment based on pricing strategy\n', '   *\n', '   * This is a wrapper for buyTokens(), but the amount of tokens receiver will\n', '   * have depends on the pricing strategy used.\n', '   *\n', '   * @param receiver The Ethereum address who receives the tokens\n', '   * @param customerId (optional) UUID v4 to track the successful payments on the server side&#39;\n', '   *\n', '   * @return tokensBought How mony tokens were bought\n', '   */\n', '  function investInternal(address receiver, uint128 customerId) stopInEmergency internal returns(uint tokensBought) {\n', '    return buyTokens(receiver, customerId, pricingStrategy.calculatePrice(msg.value, weiRaised - presaleWeiRaised, tokensSold, msg.sender, token.decimals()));\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate tokens user will have for their purchase\n', '   *\n', '   * @param weisTotal How much ethers (in wei) the user putssssss in\n', '   * @param pricePerToken What is the price for one token\n', '   *\n', '   * @return tokensTotal which is received tokens, token decimals included\n', '   */\n', '  function calculateTokens(uint256 weisTotal, uint256 pricePerToken) public constant returns(uint tokensTotal) {\n', '    // pricePerToken is how many full tokens, token decimal place included, you get for wei amount.\n', '    // Because, in theory, decimal amount can vary, we do the exponent calculation here,\n', '    // though gas wise using 10**18 constant would be much simpler.\n', '    // Furthermore we could use rough amounts and take in raw wei per tokens amount,\n', '    // but we lose too much accuracy for generic calculations, thus all these are\n', '    // practically implemented as 10**18 fixed points.\n', '    uint multiplier = 10 ** token.decimals();\n', '    return weisTotal.times(multiplier)/pricePerToken;\n', '  }\n', '\n', '  /**\n', '   * Finalize a succcesful crowdsale.\n', '   *\n', '   * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\n', '   */\n', '  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '\n', '    // Already finalized\n', '    if(finalized) {\n', '      throw;\n', '    }\n', '\n', '    // Finalizing is optional. We only call it if we are given a finalizing agent.\n', '    if(address(finalizeAgent) != 0) {\n', '      finalizeAgent.finalizeCrowdsale();\n', '    }\n', '\n', '    finalized = true;\n', '  }\n', '\n', '  /**\n', '   * Allow to (re)set finalize agent.\n', '   *\n', '   * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\n', '   */\n', '  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {\n', '    finalizeAgent = addr;\n', '\n', '    // Don&#39;t allow setting bad agent\n', '    if(!finalizeAgent.isFinalizeAgent()) {\n', '      throw;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Allow crowdsale owner to close early or extend the crowdsale.\n', '   *\n', '   * This is useful e.g. for a manual soft cap implementation:\n', '   * - after X amount is reached determine manual closing\n', '   *\n', '   * This may put the crowdsale to an invalid state,\n', '   * but we trust owners know what they are doing.\n', '   *\n', '   */\n', '  function setEndsAt(uint time) onlyOwner {\n', '\n', '    if(now > time) {\n', '      throw; // Don&#39;t change past\n', '    }\n', '\n', '    if(startsAt > time) {\n', '      throw; // Prevent human mistakes\n', '    }\n', '\n', '    endsAt = time;\n', '    EndsAtChanged(endsAt);\n', '  }\n', '\n', '  /**\n', '   * Allow to (re)set pricing strategy.\n', '   *\n', '   * Design choice: no state restrictions on the set, so that we can fix fat finger mistakes.\n', '   */\n', '  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {\n', '    pricingStrategy = _pricingStrategy;\n', '\n', '    // Don&#39;t allow setting bad agent\n', '    if(!pricingStrategy.isPricingStrategy()) {\n', '      throw;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Allow to change the team multisig address in the case of emergency.\n', '   *\n', '   * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\n', '   * (we have done only few test transactions). After the crowdsale is going\n', '   * then multisig address stays locked for the safety reasons.\n', '   */\n', '  function setMultisig(address addr) public onlyOwner {\n', '\n', '    // Change\n', '    if(investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE) {\n', '      throw;\n', '    }\n', '\n', '    multisigWallet = addr;\n', '  }\n', '\n', '  /**\n', '   * Allow load refunds back on the contract for the refunding.\n', '   *\n', '   * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\n', '   */\n', '  function loadRefund() public payable inState(State.Failure) {\n', '    if(msg.value == 0) throw;\n', '    loadedRefund = loadedRefund.plus(msg.value);\n', '  }\n', '\n', '  /**\n', '   * Investors can claim refund.\n', '   *\n', '   * Note that any refunds from proxy buyers should be handled separately,\n', '   * and not through this contract.\n', '   */\n', '  function refund() public inState(State.Refunding) {\n', '    uint256 weiValue = investedAmountOf[msg.sender];\n', '    if (weiValue == 0) throw;\n', '    investedAmountOf[msg.sender] = 0;\n', '    weiRefunded = weiRefunded.plus(weiValue);\n', '    Refund(msg.sender, weiValue);\n', '    if (!msg.sender.send(weiValue)) throw;\n', '  }\n', '\n', '  /**\n', '   * @return true if the crowdsale has raised enough money to be a successful.\n', '   */\n', '  function isMinimumGoalReached() public constant returns (bool reached) {\n', '    return weiRaised >= minimumFundingGoal;\n', '  }\n', '\n', '  /**\n', '   * Check if the contract relationship looks good.\n', '   */\n', '  function isFinalizerSane() public constant returns (bool sane) {\n', '    return finalizeAgent.isSane();\n', '  }\n', '\n', '  /**\n', '   * Check if the contract relationship looks good.\n', '   */\n', '  function isPricingSane() public constant returns (bool sane) {\n', '    return pricingStrategy.isSane(address(this));\n', '  }\n', '\n', '  /**\n', '   * Crowdfund state machine management.\n', '   *\n', '   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\n', '   */\n', '  function getState() public constant returns (State) {\n', '    if(finalized) return State.Finalized;\n', '    else if (address(finalizeAgent) == 0) return State.Preparing;\n', '    else if (!finalizeAgent.isSane()) return State.Preparing;\n', '    else if (!pricingStrategy.isSane(address(this))) return State.Preparing;\n', '    else if (block.timestamp < startsAt) return State.PreFunding;\n', '    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n', '    else if (isMinimumGoalReached()) return State.Success;\n', '    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\n', '    else return State.Failure;\n', '  }\n', '\n', '  /** This is for manual testing of multisig wallet interaction */\n', '  function setOwnerTestValue(uint val) onlyOwner {\n', '    ownerTestValue = val;\n', '  }\n', '\n', '  /**\n', '   * Allow addresses to do early participation.\n', '   *\n', '   * TODO: Fix spelling error in the name\n', '   */\n', '  function setEarlyParicipantWhitelist(address addr, bool status) onlyOwner {\n', '    earlyParticipantWhitelist[addr] = status;\n', '    Whitelisted(addr, status);\n', '  }\n', '\n', '\n', '  /** Interface marker. */\n', '  function isCrowdsale() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  //\n', '  // Modifiers\n', '  //\n', '\n', '  /** Modified allowing execution only if the crowdsale is currently running.  */\n', '  modifier inState(State state) {\n', '    if(getState() != state) throw;\n', '    _;\n', '  }\n', '\n', '\n', '  //\n', '  // Abstract functions\n', '  //\n', '\n', '  /**\n', '   * Check if the current invested breaks our cap rules.\n', '   *\n', '   *\n', '   * The child contract must define their own cap setting rules.\n', '   * We allow a lot of flexibility through different capping strategies (ETH, token count)\n', '   * Called from invest().\n', '   *\n', '   * @param weiAmount The amount of wei the investor tries to invest in the current transaction\n', '   * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\n', '   * @param weiRaisedTotal What would be our total raised balance after this transaction\n', '   * @param tokensSoldTotal What would be our total sold tokens count after this transaction\n', '   *\n', '   * @return true if taking this investment would break our cap rules\n', '   */\n', '  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);\n', '\n', '  /**\n', '   * Check if the current crowdsale is full and we can no longer sell any tokens.\n', '   */\n', '  function isCrowdsaleFull() public constant returns (bool);\n', '\n', '  /**\n', '   * Create new tokens or transfer issued tokens to the investor depending on the cap model.\n', '   */\n', '  function assignTokens(address receiver, uint tokenAmount) internal;\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '\n', '/**\n', ' * A mixin that is selling tokens from a preallocated pool\n', ' *\n', ' * - Tokens have precreated supply "premined"\n', ' *\n', ' * - Token owner must transfer sellable tokens to the crowdsale contract using ERC20.approve()\n', ' *\n', ' * - The mixin does not implement buy entry point.\n', ' *\n', ' */\n', 'contract AllocatedCrowdsaleMixin is CrowdsaleBase {\n', '\n', '  /* The party who holds the full token pool and has approve()&#39;ed tokens for this crowdsale */\n', '  address public beneficiary;\n', '\n', '  /**\n', '   * @param _beneficiary The account who has performed approve() to allocate tokens for the token sale.\n', '   *\n', '   */\n', '  function AllocatedCrowdsaleMixin(address _beneficiary) {\n', '    beneficiary = _beneficiary;\n', '  }\n', '\n', '  /**\n', '   * Called from invest() to confirm if the curret investment does not break our cap rule.\n', '   */\n', '  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {\n', '    if(tokenAmount > getTokensLeft()) {\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * We are sold out when our approve pool becomes empty.\n', '   */\n', '  function isCrowdsaleFull() public constant returns (bool) {\n', '    return getTokensLeft() == 0;\n', '  }\n', '\n', '  /**\n', '   * Get the amount of unsold tokens allocated to this contract;\n', '   */\n', '  function getTokensLeft() public constant returns (uint) {\n', '    return token.allowance(owner, this);\n', '  }\n', '\n', '  /**\n', '   * Transfer tokens from approve() pool to the buyer.\n', '   *\n', '   * Use approve() given to this crowdsale to distribute the tokens.\n', '   */\n', '  function assignTokens(address receiver, uint tokenAmount) internal {\n', '    if(!token.transferFrom(beneficiary, receiver, tokenAmount)) throw;\n', '  }\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '/**\n', ' * Deserialize bytes payloads.\n', ' *\n', ' * Values are in big-endian byte order.\n', ' *\n', ' */\n', 'library BytesDeserializer {\n', '\n', '  /**\n', '   * Extract 256-bit worth of data from the bytes stream.\n', '   */\n', '  function slice32(bytes b, uint offset) constant returns (bytes32) {\n', '    bytes32 out;\n', '\n', '    for (uint i = 0; i < 32; i++) {\n', '      out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '  /**\n', '   * Extract Ethereum address worth of data from the bytes stream.\n', '   */\n', '  function sliceAddress(bytes b, uint offset) constant returns (address) {\n', '    bytes32 out;\n', '\n', '    for (uint i = 0; i < 20; i++) {\n', '      out |= bytes32(b[offset + i] & 0xFF) >> ((i+12) * 8);\n', '    }\n', '    return address(uint(out));\n', '  }\n', '\n', '  /**\n', '   * Extract 128-bit worth of data from the bytes stream.\n', '   */\n', '  function slice16(bytes b, uint offset) constant returns (bytes16) {\n', '    bytes16 out;\n', '\n', '    for (uint i = 0; i < 16; i++) {\n', '      out |= bytes16(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '  /**\n', '   * Extract 32-bit worth of data from the bytes stream.\n', '   */\n', '  function slice4(bytes b, uint offset) constant returns (bytes4) {\n', '    bytes4 out;\n', '\n', '    for (uint i = 0; i < 4; i++) {\n', '      out |= bytes4(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '  /**\n', '   * Extract 16-bit worth of data from the bytes stream.\n', '   */\n', '  function slice2(bytes b, uint offset) constant returns (bytes2) {\n', '    bytes2 out;\n', '\n', '    for (uint i = 0; i < 2; i++) {\n', '      out |= bytes2(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A mix-in contract to decode different signed KYC payloads.\n', ' *\n', ' * @notice This should be a library, but for the complexity and toolchain fragility risks involving of linking library inside library, we currently use this as a helper method mix-in.\n', ' */\n', 'contract KYCPayloadDeserializer {\n', '\n', '  using BytesDeserializer for bytes;\n', '\n', '  // @notice this struct describes what kind of data we include in the payload, we do not use this directly\n', '  // The bytes payload set on the server side\n', '  // total 56 bytes\n', '  struct KYCPayload {\n', '\n', '    /** Customer whitelisted address where the deposit can come from */\n', '    address whitelistedAddress; // 20 bytes\n', '\n', '    /** Customer id, UUID v4 */\n', '    uint128 customerId; // 16 bytes\n', '\n', '    /**\n', '     * Min amount this customer needs to invest in ETH. Set zero if no minimum. Expressed as parts of 10000. 1 ETH = 10000.\n', '     * @notice Decided to use 32-bit words to make the copy-pasted Data field for the ICO transaction less lenghty.\n', '     */\n', '    uint32 minETH; // 4 bytes\n', '\n', '    /** Max amount this customer can to invest in ETH. Set zero if no maximum. Expressed as parts of 10000. 1 ETH = 10000. */\n', '    uint32 maxETH; // 4 bytes\n', '\n', '    /**\n', '     * Information about the price promised for this participant. It can be pricing tier id or directly one token price in weis.\n', '     * @notice This is a later addition and not supported in all scenarios yet.\n', '     */\n', '    uint256 pricingInfo;\n', '  }\n', '\n', '\n', '  /**\n', '   * Same as above, but with pricing information included in the payload as the last integer.\n', '   *\n', '   * @notice In a long run, deprecate the legacy methods above and only use this payload.\n', '   */\n', '  function getKYCPayload(bytes dataframe) public constant returns(address whitelistedAddress, uint128 customerId, uint32 minEth, uint32 maxEth, uint256 pricingInfo) {\n', '    address _whitelistedAddress = dataframe.sliceAddress(0);\n', '    uint128 _customerId = uint128(dataframe.slice16(20));\n', '    uint32 _minETH = uint32(dataframe.slice4(36));\n', '    uint32 _maxETH = uint32(dataframe.slice4(40));\n', '    uint256 _pricingInfo = uint256(dataframe.slice32(44));\n', '    return (_whitelistedAddress, _customerId, _minETH, _maxETH, _pricingInfo);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A crowdsale that allows buys only from signed payload with server-side specified limits and price.\n', ' *\n', ' * The token distribution happens as in the allocated crowdsale.\n', ' *\n', ' */\n', 'contract KYCCrowdsale is AllocatedCrowdsaleMixin, KYCPayloadDeserializer {\n', '\n', '  /* Server holds the private key to this address to sign incoming buy payloads to signal we have KYC records in the books for these users. */\n', '  address public signerAddress;\n', '\n', '  /* A new server-side signer key was set to be effective */\n', '  event SignerChanged(address signer);\n', '\n', '  /**\n', '   * Constructor.\n', '   */\n', '  function KYCCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) AllocatedCrowdsaleMixin(_beneficiary) {\n', '\n', '  }\n', '\n', '  /**\n', '   * A token purchase with anti-money laundering\n', '   *\n', '   * &#169;return tokenAmount How many tokens where bought\n', '   */\n', '  function buyWithKYCData(bytes dataframe, uint8 v, bytes32 r, bytes32 s) public payable returns(uint tokenAmount) {\n', '\n', '    uint _tokenAmount;\n', '    uint multiplier = 10 ** 18;\n', '\n', '    // Perform signature check for normal addresses\n', '    // (not deployment accounts, etc.)\n', '    if(earlyParticipantWhitelist[msg.sender]) {\n', '      // Deployment provided early participant list is for deployment and diagnostics\n', '      // For test purchases use this faux customer id 0x1000\n', '      _tokenAmount = investInternal(msg.sender, 0x1000);\n', '\n', '    } else {\n', '      // User comes through the server, check that the signature to ensure ther server\n', '      // side KYC has passed for this customer id and whitelisted Ethereum address\n', '\n', '      bytes32 hash = sha256(dataframe);\n', '\n', '      var (whitelistedAddress, customerId, minETH, maxETH, pricingInfo) = getKYCPayload(dataframe);\n', '\n', '      // Check that the KYC data is signed by our server\n', '      require(ecrecover(hash, v, r, s) == signerAddress);\n', '\n', '      // Only whitelisted address can participate the transaction\n', '      require(whitelistedAddress == msg.sender);\n', '\n', '      // Server gives us information what is the buy price for this user\n', '      uint256 tokensTotal = calculateTokens(msg.value, pricingInfo);\n', '\n', '      _tokenAmount = buyTokens(msg.sender, customerId, tokensTotal);\n', '    }\n', '\n', '    if(!earlyParticipantWhitelist[msg.sender]) {\n', '      // We assume there is no serious min and max fluctuations for the customer, unless\n', '      // especially set in the server side per customer manual override.\n', '      // Otherwise the customer can reuse old data payload with different min or max value\n', '      // to work around the per customer cap.\n', '      require(investedAmountOf[msg.sender] >= minETH * multiplier / 10000);\n', '      require(investedAmountOf[msg.sender] <= maxETH * multiplier / 10000);\n', '    }\n', '\n', '    return _tokenAmount;\n', '  }\n', '\n', '  /// @dev This function can set the server side address\n', '  /// @param _signerAddress The address derived from server&#39;s private key\n', '  function setSignerAddress(address _signerAddress) onlyOwner {\n', '    signerAddress = _signerAddress;\n', '    SignerChanged(signerAddress);\n', '  }\n', '\n', '}']
['/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '\n', '  modifier stopInEmergency {\n', '    if (halted) throw;\n', '    _;\n', '  }\n', '\n', '  modifier stopNonOwnersInEmergency {\n', '    if (halted && msg.sender != owner) throw;\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    if (!halted) throw;\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * Safe unsigned safe math.\n', ' *\n', ' * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\n', ' *\n', ' * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\n', ' *\n', ' * Maintained here until merged to mainline zeppelin-solidity.\n', ' *\n', ' */\n', 'library SafeMathLib {\n', '\n', '  function times(uint a, uint b) returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function minus(uint a, uint b) returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function plus(uint a, uint b) returns (uint) {\n', '    uint c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * A token that defines fractional units as decimals.\n', ' */\n', 'contract FractionalERC20 is ERC20 {\n', '\n', '  uint public decimals;\n', '\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * Interface for defining crowdsale pricing.\n', ' */\n', 'contract PricingStrategy {\n', '\n', '  /** Interface declaration. */\n', '  function isPricingStrategy() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /** Self check if all references are correctly set.\n', '   *\n', '   * Checks that pricing strategy matches crowdsale parameters.\n', '   */\n', '  function isSane(address crowdsale) public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Pricing tells if this is a presale purchase or not.\n', '     @param purchaser Address of the purchaser\n', '     @return False by default, true if a presale purchaser\n', '   */\n', '  function isPresalePurchase(address purchaser) public constant returns (bool) {\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\n', '   *\n', '   *\n', '   * @param value - What is the value of the transaction send in as wei\n', '   * @param tokensSold - how much tokens have been sold this far\n', '   * @param weiRaised - how much money has been raised this far in the main token sale - this number excludes presale\n', '   * @param msgSender - who is the investor of this transaction\n', '   * @param decimals - how many decimal units the token has\n', '   * @return Amount of tokens the investor receives\n', '   */\n', '  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * Finalize agent defines what happens at the end of succeseful crowdsale.\n', ' *\n', ' * - Allocate tokens for founders, bounties and community\n', ' * - Make tokens transferable\n', ' * - etc.\n', ' */\n', 'contract FinalizeAgent {\n', '\n', '  function isFinalizeAgent() public constant returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  /** Return true if we can run finalizeCrowdsale() properly.\n', '   *\n', "   * This is a safety check function that doesn't allow crowdsale to begin\n", '   * unless the finalizer has been set up properly.\n', '   */\n', '  function isSane() public constant returns (bool);\n', '\n', '  /** Called once by crowdsale finalize() if the sale was success. */\n', '  function finalizeCrowdsale();\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Crowdsale state machine without buy functionality.\n', ' *\n', ' * Implements basic state machine logic, but leaves out all buy functions,\n', ' * so that subclasses can implement their own buying logic.\n', ' *\n', ' *\n', ' * For the default buy() implementation see Crowdsale.sol.\n', ' */\n', 'contract CrowdsaleBase is Haltable {\n', '\n', '  /* Max investment count when we are still allowed to change the multisig address */\n', '  uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\n', '\n', '  using SafeMathLib for uint;\n', '\n', '  /* The token we are selling */\n', '  FractionalERC20 public token;\n', '\n', '  /* How we are going to price our offering */\n', '  PricingStrategy public pricingStrategy;\n', '\n', '  /* Post-success callback */\n', '  FinalizeAgent public finalizeAgent;\n', '\n', '  /* tokens will be transfered from this address */\n', '  address public multisigWallet;\n', '\n', '  /* if the funding goal is not reached, investors may withdraw their funds */\n', '  uint public minimumFundingGoal;\n', '\n', '  /* the UNIX timestamp start date of the crowdsale */\n', '  uint public startsAt;\n', '\n', '  /* the UNIX timestamp end date of the crowdsale */\n', '  uint public endsAt;\n', '\n', '  /* the number of tokens already sold through this contract*/\n', '  uint public tokensSold = 0;\n', '\n', '  /* How many wei of funding we have raised */\n', '  uint public weiRaised = 0;\n', '\n', '  /* Calculate incoming funds from presale contracts and addresses */\n', '  uint public presaleWeiRaised = 0;\n', '\n', '  /* How many distinct addresses have invested */\n', '  uint public investorCount = 0;\n', '\n', '  /* How much wei we have returned back to the contract after a failed crowdfund. */\n', '  uint public loadedRefund = 0;\n', '\n', '  /* How much wei we have given back to investors.*/\n', '  uint public weiRefunded = 0;\n', '\n', '  /* Has this crowdsale been finalized */\n', '  bool public finalized;\n', '\n', '  /** How much ETH each address has invested to this crowdsale */\n', '  mapping (address => uint256) public investedAmountOf;\n', '\n', '  /** How much tokens this crowdsale has credited for each investor address */\n', '  mapping (address => uint256) public tokenAmountOf;\n', '\n', '  /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\n', '  mapping (address => bool) public earlyParticipantWhitelist;\n', '\n', '  /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\n', '  uint public ownerTestValue;\n', '\n', '  /** State machine\n', '   *\n', '   * - Preparing: All contract initialization calls and variables have not been set yet\n', '   * - Prefunding: We have not passed start time yet\n', '   * - Funding: Active crowdsale\n', '   * - Success: Minimum funding goal reached\n', '   * - Failure: Minimum funding goal not reached before ending time\n', '   * - Finalized: The finalized has been called and succesfully executed\n', '   * - Refunding: Refunds are loaded on the contract for reclaim.\n', '   */\n', '  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\n', '\n', '  // A new investment was made\n', '  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\n', '\n', '  // Refund was processed for a contributor\n', '  event Refund(address investor, uint weiAmount);\n', '\n', '  // The rules were changed what kind of investments we accept\n', '  event InvestmentPolicyChanged(bool newRequireCustomerId, bool newRequiredSignedAddress, address newSignerAddress);\n', '\n', '  // Address early participation whitelist status changed\n', '  event Whitelisted(address addr, bool status);\n', '\n', '  // Crowdsale end time has been changed\n', '  event EndsAtChanged(uint newEndsAt);\n', '\n', '  function CrowdsaleBase(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {\n', '\n', '    owner = msg.sender;\n', '\n', '    token = FractionalERC20(_token);\n', '    setPricingStrategy(_pricingStrategy);\n', '\n', '    multisigWallet = _multisigWallet;\n', '    if(multisigWallet == 0) {\n', '        throw;\n', '    }\n', '\n', '    if(_start == 0) {\n', '        throw;\n', '    }\n', '\n', '    startsAt = _start;\n', '\n', '    if(_end == 0) {\n', '        throw;\n', '    }\n', '\n', '    endsAt = _end;\n', '\n', "    // Don't mess the dates\n", '    if(startsAt >= endsAt) {\n', '        throw;\n', '    }\n', '\n', '    // Minimum funding goal can be zero\n', '    minimumFundingGoal = _minimumFundingGoal;\n', '  }\n', '\n', '  /**\n', "   * Don't expect to just send in money and get tokens.\n", '   */\n', '  function() payable {\n', '    throw;\n', '  }\n', '\n', '  /**\n', '   * @dev Make an investment.\n', '   *\n', '   * Crowdsale must be running for one to invest.\n', '   * We must have not pressed the emergency brake.\n', '   *\n', '   * @param receiver The Ethereum address who receives the tokens\n', "   * @param customerId (optional) UUID v4 to track the successful payments on the server side'\n", '   * @param tokenAmount Amount of tokens which be credited to receiver\n', '   *\n', '   * @return tokensBought How mony tokens were bought\n', '   */\n', '  function buyTokens(address receiver, uint128 customerId, uint256 tokenAmount) stopInEmergency internal returns(uint tokensBought) {\n', '\n', "    // Determine if it's a good time to accept investment from this participant\n", '    if(getState() == State.PreFunding) {\n', '      // Are we whitelisted for early deposit\n', '      if(!earlyParticipantWhitelist[receiver]) {\n', '        throw;\n', '      }\n', '    } else if(getState() == State.Funding) {\n', '      // Retail participants can only come in when the crowdsale is running\n', '      // pass\n', '    } else {\n', '      // Unwanted state\n', '      throw;\n', '    }\n', '\n', '    uint weiAmount = msg.value;\n', '\n', '    // Dust transaction\n', '    require(tokenAmount != 0);\n', '\n', '    if(investedAmountOf[receiver] == 0) {\n', '       // A new investor\n', '       investorCount++;\n', '    }\n', '\n', '    // Update investor\n', '    investedAmountOf[receiver] = investedAmountOf[receiver].plus(weiAmount);\n', '    tokenAmountOf[receiver] = tokenAmountOf[receiver].plus(tokenAmount);\n', '\n', '    // Update totals\n', '    weiRaised = weiRaised.plus(weiAmount);\n', '    tokensSold = tokensSold.plus(tokenAmount);\n', '\n', '    if(pricingStrategy.isPresalePurchase(receiver)) {\n', '        presaleWeiRaised = presaleWeiRaised.plus(weiAmount);\n', '    }\n', '\n', '    // Check that we did not bust the cap\n', '    require(!isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold));\n', '\n', '    assignTokens(receiver, tokenAmount);\n', '\n', '    // Pocket the money, or fail the crowdsale if we for some reason cannot send the money to our multisig\n', '    if(!multisigWallet.send(weiAmount)) throw;\n', '\n', '    // Tell us invest was success\n', '    Invested(receiver, weiAmount, tokenAmount, customerId);\n', '\n', '    return tokenAmount;\n', '  }\n', '\n', '  /**\n', '   * @dev Make an investment based on pricing strategy\n', '   *\n', '   * This is a wrapper for buyTokens(), but the amount of tokens receiver will\n', '   * have depends on the pricing strategy used.\n', '   *\n', '   * @param receiver The Ethereum address who receives the tokens\n', "   * @param customerId (optional) UUID v4 to track the successful payments on the server side'\n", '   *\n', '   * @return tokensBought How mony tokens were bought\n', '   */\n', '  function investInternal(address receiver, uint128 customerId) stopInEmergency internal returns(uint tokensBought) {\n', '    return buyTokens(receiver, customerId, pricingStrategy.calculatePrice(msg.value, weiRaised - presaleWeiRaised, tokensSold, msg.sender, token.decimals()));\n', '  }\n', '\n', '  /**\n', '   * @dev Calculate tokens user will have for their purchase\n', '   *\n', '   * @param weisTotal How much ethers (in wei) the user putssssss in\n', '   * @param pricePerToken What is the price for one token\n', '   *\n', '   * @return tokensTotal which is received tokens, token decimals included\n', '   */\n', '  function calculateTokens(uint256 weisTotal, uint256 pricePerToken) public constant returns(uint tokensTotal) {\n', '    // pricePerToken is how many full tokens, token decimal place included, you get for wei amount.\n', '    // Because, in theory, decimal amount can vary, we do the exponent calculation here,\n', '    // though gas wise using 10**18 constant would be much simpler.\n', '    // Furthermore we could use rough amounts and take in raw wei per tokens amount,\n', '    // but we lose too much accuracy for generic calculations, thus all these are\n', '    // practically implemented as 10**18 fixed points.\n', '    uint multiplier = 10 ** token.decimals();\n', '    return weisTotal.times(multiplier)/pricePerToken;\n', '  }\n', '\n', '  /**\n', '   * Finalize a succcesful crowdsale.\n', '   *\n', '   * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\n', '   */\n', '  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '\n', '    // Already finalized\n', '    if(finalized) {\n', '      throw;\n', '    }\n', '\n', '    // Finalizing is optional. We only call it if we are given a finalizing agent.\n', '    if(address(finalizeAgent) != 0) {\n', '      finalizeAgent.finalizeCrowdsale();\n', '    }\n', '\n', '    finalized = true;\n', '  }\n', '\n', '  /**\n', '   * Allow to (re)set finalize agent.\n', '   *\n', '   * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\n', '   */\n', '  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {\n', '    finalizeAgent = addr;\n', '\n', "    // Don't allow setting bad agent\n", '    if(!finalizeAgent.isFinalizeAgent()) {\n', '      throw;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Allow crowdsale owner to close early or extend the crowdsale.\n', '   *\n', '   * This is useful e.g. for a manual soft cap implementation:\n', '   * - after X amount is reached determine manual closing\n', '   *\n', '   * This may put the crowdsale to an invalid state,\n', '   * but we trust owners know what they are doing.\n', '   *\n', '   */\n', '  function setEndsAt(uint time) onlyOwner {\n', '\n', '    if(now > time) {\n', "      throw; // Don't change past\n", '    }\n', '\n', '    if(startsAt > time) {\n', '      throw; // Prevent human mistakes\n', '    }\n', '\n', '    endsAt = time;\n', '    EndsAtChanged(endsAt);\n', '  }\n', '\n', '  /**\n', '   * Allow to (re)set pricing strategy.\n', '   *\n', '   * Design choice: no state restrictions on the set, so that we can fix fat finger mistakes.\n', '   */\n', '  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {\n', '    pricingStrategy = _pricingStrategy;\n', '\n', "    // Don't allow setting bad agent\n", '    if(!pricingStrategy.isPricingStrategy()) {\n', '      throw;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Allow to change the team multisig address in the case of emergency.\n', '   *\n', '   * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\n', '   * (we have done only few test transactions). After the crowdsale is going\n', '   * then multisig address stays locked for the safety reasons.\n', '   */\n', '  function setMultisig(address addr) public onlyOwner {\n', '\n', '    // Change\n', '    if(investorCount > MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE) {\n', '      throw;\n', '    }\n', '\n', '    multisigWallet = addr;\n', '  }\n', '\n', '  /**\n', '   * Allow load refunds back on the contract for the refunding.\n', '   *\n', '   * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\n', '   */\n', '  function loadRefund() public payable inState(State.Failure) {\n', '    if(msg.value == 0) throw;\n', '    loadedRefund = loadedRefund.plus(msg.value);\n', '  }\n', '\n', '  /**\n', '   * Investors can claim refund.\n', '   *\n', '   * Note that any refunds from proxy buyers should be handled separately,\n', '   * and not through this contract.\n', '   */\n', '  function refund() public inState(State.Refunding) {\n', '    uint256 weiValue = investedAmountOf[msg.sender];\n', '    if (weiValue == 0) throw;\n', '    investedAmountOf[msg.sender] = 0;\n', '    weiRefunded = weiRefunded.plus(weiValue);\n', '    Refund(msg.sender, weiValue);\n', '    if (!msg.sender.send(weiValue)) throw;\n', '  }\n', '\n', '  /**\n', '   * @return true if the crowdsale has raised enough money to be a successful.\n', '   */\n', '  function isMinimumGoalReached() public constant returns (bool reached) {\n', '    return weiRaised >= minimumFundingGoal;\n', '  }\n', '\n', '  /**\n', '   * Check if the contract relationship looks good.\n', '   */\n', '  function isFinalizerSane() public constant returns (bool sane) {\n', '    return finalizeAgent.isSane();\n', '  }\n', '\n', '  /**\n', '   * Check if the contract relationship looks good.\n', '   */\n', '  function isPricingSane() public constant returns (bool sane) {\n', '    return pricingStrategy.isSane(address(this));\n', '  }\n', '\n', '  /**\n', '   * Crowdfund state machine management.\n', '   *\n', '   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\n', '   */\n', '  function getState() public constant returns (State) {\n', '    if(finalized) return State.Finalized;\n', '    else if (address(finalizeAgent) == 0) return State.Preparing;\n', '    else if (!finalizeAgent.isSane()) return State.Preparing;\n', '    else if (!pricingStrategy.isSane(address(this))) return State.Preparing;\n', '    else if (block.timestamp < startsAt) return State.PreFunding;\n', '    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n', '    else if (isMinimumGoalReached()) return State.Success;\n', '    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\n', '    else return State.Failure;\n', '  }\n', '\n', '  /** This is for manual testing of multisig wallet interaction */\n', '  function setOwnerTestValue(uint val) onlyOwner {\n', '    ownerTestValue = val;\n', '  }\n', '\n', '  /**\n', '   * Allow addresses to do early participation.\n', '   *\n', '   * TODO: Fix spelling error in the name\n', '   */\n', '  function setEarlyParicipantWhitelist(address addr, bool status) onlyOwner {\n', '    earlyParticipantWhitelist[addr] = status;\n', '    Whitelisted(addr, status);\n', '  }\n', '\n', '\n', '  /** Interface marker. */\n', '  function isCrowdsale() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  //\n', '  // Modifiers\n', '  //\n', '\n', '  /** Modified allowing execution only if the crowdsale is currently running.  */\n', '  modifier inState(State state) {\n', '    if(getState() != state) throw;\n', '    _;\n', '  }\n', '\n', '\n', '  //\n', '  // Abstract functions\n', '  //\n', '\n', '  /**\n', '   * Check if the current invested breaks our cap rules.\n', '   *\n', '   *\n', '   * The child contract must define their own cap setting rules.\n', '   * We allow a lot of flexibility through different capping strategies (ETH, token count)\n', '   * Called from invest().\n', '   *\n', '   * @param weiAmount The amount of wei the investor tries to invest in the current transaction\n', '   * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\n', '   * @param weiRaisedTotal What would be our total raised balance after this transaction\n', '   * @param tokensSoldTotal What would be our total sold tokens count after this transaction\n', '   *\n', '   * @return true if taking this investment would break our cap rules\n', '   */\n', '  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);\n', '\n', '  /**\n', '   * Check if the current crowdsale is full and we can no longer sell any tokens.\n', '   */\n', '  function isCrowdsaleFull() public constant returns (bool);\n', '\n', '  /**\n', '   * Create new tokens or transfer issued tokens to the investor depending on the cap model.\n', '   */\n', '  function assignTokens(address receiver, uint tokenAmount) internal;\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '\n', '\n', '/**\n', ' * A mixin that is selling tokens from a preallocated pool\n', ' *\n', ' * - Tokens have precreated supply "premined"\n', ' *\n', ' * - Token owner must transfer sellable tokens to the crowdsale contract using ERC20.approve()\n', ' *\n', ' * - The mixin does not implement buy entry point.\n', ' *\n', ' */\n', 'contract AllocatedCrowdsaleMixin is CrowdsaleBase {\n', '\n', "  /* The party who holds the full token pool and has approve()'ed tokens for this crowdsale */\n", '  address public beneficiary;\n', '\n', '  /**\n', '   * @param _beneficiary The account who has performed approve() to allocate tokens for the token sale.\n', '   *\n', '   */\n', '  function AllocatedCrowdsaleMixin(address _beneficiary) {\n', '    beneficiary = _beneficiary;\n', '  }\n', '\n', '  /**\n', '   * Called from invest() to confirm if the curret investment does not break our cap rule.\n', '   */\n', '  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {\n', '    if(tokenAmount > getTokensLeft()) {\n', '      return true;\n', '    } else {\n', '      return false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * We are sold out when our approve pool becomes empty.\n', '   */\n', '  function isCrowdsaleFull() public constant returns (bool) {\n', '    return getTokensLeft() == 0;\n', '  }\n', '\n', '  /**\n', '   * Get the amount of unsold tokens allocated to this contract;\n', '   */\n', '  function getTokensLeft() public constant returns (uint) {\n', '    return token.allowance(owner, this);\n', '  }\n', '\n', '  /**\n', '   * Transfer tokens from approve() pool to the buyer.\n', '   *\n', '   * Use approve() given to this crowdsale to distribute the tokens.\n', '   */\n', '  function assignTokens(address receiver, uint tokenAmount) internal {\n', '    if(!token.transferFrom(beneficiary, receiver, tokenAmount)) throw;\n', '  }\n', '}\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '\n', '/**\n', ' * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n', ' *\n', ' * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n', ' */\n', '\n', '/**\n', ' * Deserialize bytes payloads.\n', ' *\n', ' * Values are in big-endian byte order.\n', ' *\n', ' */\n', 'library BytesDeserializer {\n', '\n', '  /**\n', '   * Extract 256-bit worth of data from the bytes stream.\n', '   */\n', '  function slice32(bytes b, uint offset) constant returns (bytes32) {\n', '    bytes32 out;\n', '\n', '    for (uint i = 0; i < 32; i++) {\n', '      out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '  /**\n', '   * Extract Ethereum address worth of data from the bytes stream.\n', '   */\n', '  function sliceAddress(bytes b, uint offset) constant returns (address) {\n', '    bytes32 out;\n', '\n', '    for (uint i = 0; i < 20; i++) {\n', '      out |= bytes32(b[offset + i] & 0xFF) >> ((i+12) * 8);\n', '    }\n', '    return address(uint(out));\n', '  }\n', '\n', '  /**\n', '   * Extract 128-bit worth of data from the bytes stream.\n', '   */\n', '  function slice16(bytes b, uint offset) constant returns (bytes16) {\n', '    bytes16 out;\n', '\n', '    for (uint i = 0; i < 16; i++) {\n', '      out |= bytes16(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '  /**\n', '   * Extract 32-bit worth of data from the bytes stream.\n', '   */\n', '  function slice4(bytes b, uint offset) constant returns (bytes4) {\n', '    bytes4 out;\n', '\n', '    for (uint i = 0; i < 4; i++) {\n', '      out |= bytes4(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '  /**\n', '   * Extract 16-bit worth of data from the bytes stream.\n', '   */\n', '  function slice2(bytes b, uint offset) constant returns (bytes2) {\n', '    bytes2 out;\n', '\n', '    for (uint i = 0; i < 2; i++) {\n', '      out |= bytes2(b[offset + i] & 0xFF) >> (i * 8);\n', '    }\n', '    return out;\n', '  }\n', '\n', '\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A mix-in contract to decode different signed KYC payloads.\n', ' *\n', ' * @notice This should be a library, but for the complexity and toolchain fragility risks involving of linking library inside library, we currently use this as a helper method mix-in.\n', ' */\n', 'contract KYCPayloadDeserializer {\n', '\n', '  using BytesDeserializer for bytes;\n', '\n', '  // @notice this struct describes what kind of data we include in the payload, we do not use this directly\n', '  // The bytes payload set on the server side\n', '  // total 56 bytes\n', '  struct KYCPayload {\n', '\n', '    /** Customer whitelisted address where the deposit can come from */\n', '    address whitelistedAddress; // 20 bytes\n', '\n', '    /** Customer id, UUID v4 */\n', '    uint128 customerId; // 16 bytes\n', '\n', '    /**\n', '     * Min amount this customer needs to invest in ETH. Set zero if no minimum. Expressed as parts of 10000. 1 ETH = 10000.\n', '     * @notice Decided to use 32-bit words to make the copy-pasted Data field for the ICO transaction less lenghty.\n', '     */\n', '    uint32 minETH; // 4 bytes\n', '\n', '    /** Max amount this customer can to invest in ETH. Set zero if no maximum. Expressed as parts of 10000. 1 ETH = 10000. */\n', '    uint32 maxETH; // 4 bytes\n', '\n', '    /**\n', '     * Information about the price promised for this participant. It can be pricing tier id or directly one token price in weis.\n', '     * @notice This is a later addition and not supported in all scenarios yet.\n', '     */\n', '    uint256 pricingInfo;\n', '  }\n', '\n', '\n', '  /**\n', '   * Same as above, but with pricing information included in the payload as the last integer.\n', '   *\n', '   * @notice In a long run, deprecate the legacy methods above and only use this payload.\n', '   */\n', '  function getKYCPayload(bytes dataframe) public constant returns(address whitelistedAddress, uint128 customerId, uint32 minEth, uint32 maxEth, uint256 pricingInfo) {\n', '    address _whitelistedAddress = dataframe.sliceAddress(0);\n', '    uint128 _customerId = uint128(dataframe.slice16(20));\n', '    uint32 _minETH = uint32(dataframe.slice4(36));\n', '    uint32 _maxETH = uint32(dataframe.slice4(40));\n', '    uint256 _pricingInfo = uint256(dataframe.slice32(44));\n', '    return (_whitelistedAddress, _customerId, _minETH, _maxETH, _pricingInfo);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A crowdsale that allows buys only from signed payload with server-side specified limits and price.\n', ' *\n', ' * The token distribution happens as in the allocated crowdsale.\n', ' *\n', ' */\n', 'contract KYCCrowdsale is AllocatedCrowdsaleMixin, KYCPayloadDeserializer {\n', '\n', '  /* Server holds the private key to this address to sign incoming buy payloads to signal we have KYC records in the books for these users. */\n', '  address public signerAddress;\n', '\n', '  /* A new server-side signer key was set to be effective */\n', '  event SignerChanged(address signer);\n', '\n', '  /**\n', '   * Constructor.\n', '   */\n', '  function KYCCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, address _beneficiary) CrowdsaleBase(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) AllocatedCrowdsaleMixin(_beneficiary) {\n', '\n', '  }\n', '\n', '  /**\n', '   * A token purchase with anti-money laundering\n', '   *\n', '   * ©return tokenAmount How many tokens where bought\n', '   */\n', '  function buyWithKYCData(bytes dataframe, uint8 v, bytes32 r, bytes32 s) public payable returns(uint tokenAmount) {\n', '\n', '    uint _tokenAmount;\n', '    uint multiplier = 10 ** 18;\n', '\n', '    // Perform signature check for normal addresses\n', '    // (not deployment accounts, etc.)\n', '    if(earlyParticipantWhitelist[msg.sender]) {\n', '      // Deployment provided early participant list is for deployment and diagnostics\n', '      // For test purchases use this faux customer id 0x1000\n', '      _tokenAmount = investInternal(msg.sender, 0x1000);\n', '\n', '    } else {\n', '      // User comes through the server, check that the signature to ensure ther server\n', '      // side KYC has passed for this customer id and whitelisted Ethereum address\n', '\n', '      bytes32 hash = sha256(dataframe);\n', '\n', '      var (whitelistedAddress, customerId, minETH, maxETH, pricingInfo) = getKYCPayload(dataframe);\n', '\n', '      // Check that the KYC data is signed by our server\n', '      require(ecrecover(hash, v, r, s) == signerAddress);\n', '\n', '      // Only whitelisted address can participate the transaction\n', '      require(whitelistedAddress == msg.sender);\n', '\n', '      // Server gives us information what is the buy price for this user\n', '      uint256 tokensTotal = calculateTokens(msg.value, pricingInfo);\n', '\n', '      _tokenAmount = buyTokens(msg.sender, customerId, tokensTotal);\n', '    }\n', '\n', '    if(!earlyParticipantWhitelist[msg.sender]) {\n', '      // We assume there is no serious min and max fluctuations for the customer, unless\n', '      // especially set in the server side per customer manual override.\n', '      // Otherwise the customer can reuse old data payload with different min or max value\n', '      // to work around the per customer cap.\n', '      require(investedAmountOf[msg.sender] >= minETH * multiplier / 10000);\n', '      require(investedAmountOf[msg.sender] <= maxETH * multiplier / 10000);\n', '    }\n', '\n', '    return _tokenAmount;\n', '  }\n', '\n', '  /// @dev This function can set the server side address\n', "  /// @param _signerAddress The address derived from server's private key\n", '  function setSignerAddress(address _signerAddress) onlyOwner {\n', '    signerAddress = _signerAddress;\n', '    SignerChanged(signerAddress);\n', '  }\n', '\n', '}']
