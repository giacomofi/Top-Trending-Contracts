['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/// @notice RenExTokens is a registry of tokens that can be traded on RenEx.\n', 'contract RenExTokens is Ownable {\n', '    string public VERSION; // Passed in as a constructor parameter.\n', '\n', '    struct TokenDetails {\n', '        address addr;\n', '        uint8 decimals;\n', '        bool registered;\n', '    }\n', '\n', '    // Storage\n', '    mapping(uint32 => TokenDetails) public tokens;\n', '    mapping(uint32 => bool) private detailsSubmitted;\n', '\n', '    // Events\n', '    event LogTokenRegistered(uint32 tokenCode, address tokenAddress, uint8 tokenDecimals);\n', '    event LogTokenDeregistered(uint32 tokenCode);\n', '\n', '    /// @notice The contract constructor.\n', '    ///\n', '    /// @param _VERSION A string defining the contract version.\n', '    constructor(string _VERSION) public {\n', '        VERSION = _VERSION;\n', '    }\n', '\n', '    /// @notice Allows the owner to register and the details for a token.\n', '    /// Once details have been submitted, they cannot be overwritten.\n', '    /// To re-register the same token with different details (e.g. if the address\n', '    /// has changed), a different token identifier should be used and the\n', '    /// previous token identifier should be deregistered.\n', '    /// If a token is not Ethereum-based, the address will be set to 0x0.\n', '    ///\n', '    /// @param _tokenCode A unique 32-bit token identifier.\n', '    /// @param _tokenAddress The address of the token.\n', '    /// @param _tokenDecimals The decimals to use for the token.\n', '    function registerToken(uint32 _tokenCode, address _tokenAddress, uint8 _tokenDecimals) public onlyOwner {\n', '        require(!tokens[_tokenCode].registered, "already registered");\n', '\n', '        // If a token is being re-registered, the same details must be provided.\n', '        if (detailsSubmitted[_tokenCode]) {\n', '            require(tokens[_tokenCode].addr == _tokenAddress, "different address");\n', '            require(tokens[_tokenCode].decimals == _tokenDecimals, "different decimals");\n', '        } else {\n', '            detailsSubmitted[_tokenCode] = true;\n', '        }\n', '\n', '        tokens[_tokenCode] = TokenDetails({\n', '            addr: _tokenAddress,\n', '            decimals: _tokenDecimals,\n', '            registered: true\n', '        });\n', '\n', '        emit LogTokenRegistered(_tokenCode, _tokenAddress, _tokenDecimals);\n', '    }\n', '\n', '    /// @notice Sets a token as being deregistered. The details are still stored\n', '    /// to prevent the token from being re-registered with different details.\n', '    ///\n', '    /// @param _tokenCode The unique 32-bit token identifier.\n', '    function deregisterToken(uint32 _tokenCode) external onlyOwner {\n', '        require(tokens[_tokenCode].registered, "not registered");\n', '\n', '        tokens[_tokenCode].registered = false;\n', '\n', '        emit LogTokenDeregistered(_tokenCode);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/// @notice RenExTokens is a registry of tokens that can be traded on RenEx.\n', 'contract RenExTokens is Ownable {\n', '    string public VERSION; // Passed in as a constructor parameter.\n', '\n', '    struct TokenDetails {\n', '        address addr;\n', '        uint8 decimals;\n', '        bool registered;\n', '    }\n', '\n', '    // Storage\n', '    mapping(uint32 => TokenDetails) public tokens;\n', '    mapping(uint32 => bool) private detailsSubmitted;\n', '\n', '    // Events\n', '    event LogTokenRegistered(uint32 tokenCode, address tokenAddress, uint8 tokenDecimals);\n', '    event LogTokenDeregistered(uint32 tokenCode);\n', '\n', '    /// @notice The contract constructor.\n', '    ///\n', '    /// @param _VERSION A string defining the contract version.\n', '    constructor(string _VERSION) public {\n', '        VERSION = _VERSION;\n', '    }\n', '\n', '    /// @notice Allows the owner to register and the details for a token.\n', '    /// Once details have been submitted, they cannot be overwritten.\n', '    /// To re-register the same token with different details (e.g. if the address\n', '    /// has changed), a different token identifier should be used and the\n', '    /// previous token identifier should be deregistered.\n', '    /// If a token is not Ethereum-based, the address will be set to 0x0.\n', '    ///\n', '    /// @param _tokenCode A unique 32-bit token identifier.\n', '    /// @param _tokenAddress The address of the token.\n', '    /// @param _tokenDecimals The decimals to use for the token.\n', '    function registerToken(uint32 _tokenCode, address _tokenAddress, uint8 _tokenDecimals) public onlyOwner {\n', '        require(!tokens[_tokenCode].registered, "already registered");\n', '\n', '        // If a token is being re-registered, the same details must be provided.\n', '        if (detailsSubmitted[_tokenCode]) {\n', '            require(tokens[_tokenCode].addr == _tokenAddress, "different address");\n', '            require(tokens[_tokenCode].decimals == _tokenDecimals, "different decimals");\n', '        } else {\n', '            detailsSubmitted[_tokenCode] = true;\n', '        }\n', '\n', '        tokens[_tokenCode] = TokenDetails({\n', '            addr: _tokenAddress,\n', '            decimals: _tokenDecimals,\n', '            registered: true\n', '        });\n', '\n', '        emit LogTokenRegistered(_tokenCode, _tokenAddress, _tokenDecimals);\n', '    }\n', '\n', '    /// @notice Sets a token as being deregistered. The details are still stored\n', '    /// to prevent the token from being re-registered with different details.\n', '    ///\n', '    /// @param _tokenCode The unique 32-bit token identifier.\n', '    function deregisterToken(uint32 _tokenCode) external onlyOwner {\n', '        require(tokens[_tokenCode].registered, "not registered");\n', '\n', '        tokens[_tokenCode].registered = false;\n', '\n', '        emit LogTokenDeregistered(_tokenCode);\n', '    }\n', '}']
