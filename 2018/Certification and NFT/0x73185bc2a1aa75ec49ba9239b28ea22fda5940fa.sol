['pragma solidity ^0.4.13;\n', '\n', 'contract DSExec {\n', '    function tryExec( address target, bytes calldata, uint value)\n', '             internal\n', '             returns (bool call_ret)\n', '    {\n', '        return target.call.value(value)(calldata);\n', '    }\n', '    function exec( address target, bytes calldata, uint value)\n', '             internal\n', '    {\n', '        if(!tryExec(target, calldata, value)) {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    // Convenience aliases\n', '    function exec( address t, bytes c )\n', '        internal\n', '    {\n', '        exec(t, c, 0);\n', '    }\n', '    function exec( address t, uint256 v )\n', '        internal\n', '    {\n', '        bytes memory c; exec(t, c, v);\n', '    }\n', '    function tryExec( address t, bytes c )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return tryExec(t, c, 0);\n', '    }\n', '    function tryExec( address t, uint256 v )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bytes memory c; return tryExec(t, c, v);\n', '    }\n', '}\n', '\n', 'contract DSNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  guy,\n', '        bytes32  indexed  foo,\n', '        bytes32  indexed  bar,\n', '        uint              wad,\n', '        bytes             fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', 'contract DSGroup is DSExec, DSNote {\n', '    address[]  public  members;\n', '    uint       public  quorum;\n', '    uint       public  window;\n', '    uint       public  actionCount;\n', '\n', '    mapping (uint => Action)                     public  actions;\n', '    mapping (uint => mapping (address => bool))  public  confirmedBy;\n', '    mapping (address => bool)                    public  isMember;\n', '\n', '    // Legacy events\n', '    event Proposed   (uint id, bytes calldata);\n', '    event Confirmed  (uint id, address member);\n', '    event Triggered  (uint id);\n', '\n', '    struct Action {\n', '        address  target;\n', '        bytes    calldata;\n', '        uint     value;\n', '\n', '        uint     confirmations;\n', '        uint     deadline;\n', '        bool     triggered;\n', '    }\n', '\n', '    function DSGroup(\n', '        address[]  members_,\n', '        uint       quorum_,\n', '        uint       window_\n', '    ) {\n', '        members  = members_;\n', '        quorum   = quorum_;\n', '        window   = window_;\n', '\n', '        for (uint i = 0; i < members.length; i++) {\n', '            isMember[members[i]] = true;\n', '        }\n', '    }\n', '\n', '    function memberCount() constant returns (uint) {\n', '        return members.length;\n', '    }\n', '\n', '    function target(uint id) constant returns (address) {\n', '        return actions[id].target;\n', '    }\n', '    function calldata(uint id) constant returns (bytes) {\n', '        return actions[id].calldata;\n', '    }\n', '    function value(uint id) constant returns (uint) {\n', '        return actions[id].value;\n', '    }\n', '\n', '    function confirmations(uint id) constant returns (uint) {\n', '        return actions[id].confirmations;\n', '    }\n', '    function deadline(uint id) constant returns (uint) {\n', '        return actions[id].deadline;\n', '    }\n', '    function triggered(uint id) constant returns (bool) {\n', '        return actions[id].triggered;\n', '    }\n', '\n', '    function confirmed(uint id) constant returns (bool) {\n', '        return confirmations(id) >= quorum;\n', '    }\n', '    function expired(uint id) constant returns (bool) {\n', '        return now > deadline(id);\n', '    }\n', '\n', '    function deposit() note payable {\n', '    }\n', '\n', '    function propose(\n', '        address  target,\n', '        bytes    calldata,\n', '        uint     value\n', '    ) onlyMembers note returns (uint id) {\n', '        id = ++actionCount;\n', '\n', '        actions[id].target    = target;\n', '        actions[id].calldata  = calldata;\n', '        actions[id].value     = value;\n', '        actions[id].deadline  = now + window;\n', '\n', '        Proposed(id, calldata);\n', '    }\n', '\n', '    function confirm(uint id) onlyMembers onlyActive(id) note {\n', '        assert(!confirmedBy[id][msg.sender]);\n', '\n', '        confirmedBy[id][msg.sender] = true;\n', '        actions[id].confirmations++;\n', '\n', '        Confirmed(id, msg.sender);\n', '    }\n', '\n', '    function trigger(uint id) onlyMembers onlyActive(id) note {\n', '        assert(confirmed(id));\n', '\n', '        actions[id].triggered = true;\n', '        exec(actions[id].target, actions[id].calldata, actions[id].value);\n', '\n', '        Triggered(id);\n', '    }\n', '\n', '    modifier onlyMembers {\n', '        assert(isMember[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyActive(uint id) {\n', '        assert(!expired(id));\n', '        assert(!triggered(id));\n', '        _;\n', '    }\n', '\n', '    //------------------------------------------------------------------\n', '    // Legacy functions\n', '    //------------------------------------------------------------------\n', '\n', '    function getInfo() constant returns (\n', '        uint  quorum_,\n', '        uint  memberCount,\n', '        uint  window_,\n', '        uint  actionCount_\n', '    ) {\n', '        return (quorum, members.length, window, actionCount);\n', '    }\n', '\n', '    function getActionStatus(uint id) constant returns (\n', '        uint     confirmations,\n', '        uint     deadline,\n', '        bool     triggered,\n', '        address  target,\n', '        uint     value\n', '    ) {\n', '        return (\n', '            actions[id].confirmations,\n', '            actions[id].deadline,\n', '            actions[id].triggered,\n', '            actions[id].target,\n', '            actions[id].value\n', '        );\n', '    }\n', '}\n', '\n', 'contract DSGroupFactory is DSNote {\n', '    mapping (address => bool)  public  isGroup;\n', '\n', '    function newGroup(\n', '        address[]  members,\n', '        uint       quorum,\n', '        uint       window\n', '    ) note returns (DSGroup group) {\n', '        group = new DSGroup(members, quorum, window);\n', '        isGroup[group] = true;\n', '    }\n', '}\n', '\n', 'contract DBC {\n', '\n', '    // MODIFIERS\n', '\n', '    modifier pre_cond(bool condition) {\n', '        require(condition);\n', '        _;\n', '    }\n', '\n', '    modifier post_cond(bool condition) {\n', '        _;\n', '        assert(condition);\n', '    }\n', '\n', '    modifier invariant(bool condition) {\n', '        require(condition);\n', '        _;\n', '        assert(condition);\n', '    }\n', '}\n', '\n', 'contract Owned is DBC {\n', '\n', '    // FIELDS\n', '\n', '    address public owner;\n', '\n', '    // NON-CONSTANT METHODS\n', '\n', '    function Owned() { owner = msg.sender; }\n', '\n', '    function changeOwner(address ofNewOwner) pre_cond(isOwner()) { owner = ofNewOwner; }\n', '\n', '    // PRE, POST, INVARIANT CONDITIONS\n', '\n', '    function isOwner() internal returns (bool) { return msg.sender == owner; }\n', '\n', '}\n', '\n', 'contract Governance is DBC, Owned, DSGroup {\n', '\n', '    // TYPES\n', '\n', '    struct Version {\n', '        address version;\n', '        bool active;\n', '        uint timestamp;\n', '    }\n', '\n', '    // FIELDS\n', '\n', '    // Constructor fields\n', '    address public MELON_ASSET; // Adresss of Melon asset contract\n', '    address[] public authorities; // Addresses of all authorities\n', '    // Methods fields\n', '    Version[] public versions;\n', '    mapping (address => uint) public versionToProposalIds; // Links version addresses to proposal ids created through DSGroup\n', '    mapping (uint => uint) public versionIdToShutdownIds; // Links version ids to shutdown proposal ids created through DSGroup\n', '\n', '    // EVENTS\n', '\n', '    event VersionUpdated(uint id);\n', '\n', '    // METHODS\n', '\n', '    // CONSTRUCTOR\n', '\n', '    /// @param ofAuthorities Addresses of authorities\n', '    /// @param ofQuorum Minimum number of signatures required for proposal to pass by\n', '    /// @param ofWindow Time limit for proposal validity\n', '    function Governance(\n', '        address[] ofAuthorities,\n', '        uint ofQuorum,\n', '        uint ofWindow\n', '    )\n', '        DSGroup(ofAuthorities, ofQuorum, ofWindow)\n', '    {}\n', '\n', '    // FALLBACK\n', '\n', '    function() payable { }\n', '\n', '    // PUBLIC METHODS\n', '\n', '    /// @notice Propose new versions of Melon\n', '    /// @param ofVersion Address of version contract to be proposed\n', '    function proposeVersion(address ofVersion) {\n', '        versionToProposalIds[ofVersion] = propose(address(this), new bytes(0), 0);\n', '    }\n', '\n', '    /// @notice Approve new versions of Melon\n', '    /// @param ofVersion Address of version contract to be approved\n', '    function approveVersion(address ofVersion) {\n', '        confirm(versionToProposalIds[ofVersion]);\n', '    }\n', '\n', '    /// @notice Trigger new versions of Melon\n', '    /// @param ofVersion Address of version contract to be triggered\n', '    function triggerVersion(address ofVersion) {\n', '        trigger(versionToProposalIds[ofVersion]);\n', '        addVersion(ofVersion);\n', '    }\n', '\n', '    /// @notice Propose shutdown of Melon version\n', '    /// @param ofVersionId Version id to be proposed for shutdown\n', '    function proposeShutdown(uint ofVersionId) {\n', '        versionIdToShutdownIds[ofVersionId] = propose(address(this), new bytes(0), 0);\n', '    }\n', '\n', '    /// @notice Approve shutdown of Melon version\n', '    /// @param ofVersionId Version id to be approved for shutdown\n', '    function approveShutdown(uint ofVersionId) {\n', '        confirm(versionIdToShutdownIds[ofVersionId]);\n', '    }\n', '\n', '    /// @notice Trigger shutdown of Melon version\n', '    /// @param ofVersionId Version id to be triggered for shutdown\n', '    function triggerShutdown(uint ofVersionId) {\n', '        trigger(versionIdToShutdownIds[ofVersionId]);\n', '        shutDownVersion(ofVersionId);\n', '    }\n', '\n', '    // PUBLIC VIEW METHODS\n', '\n', '    /**\n', '    @return {\n', '        "ofVersion": "Address of the Version",\n', '        "active": "Whether the Version in question is active",\n', '        "timestamp": "When the Version in question was added to the list"\n', '    }\n', '    */\n', '    function getVersionById(uint id) view returns (address ofVersion, bool active, uint timestamp) {\n', '        return (\n', '            versions[id].version,\n', '            versions[id].active,\n', '            versions[id].timestamp\n', '        );\n', '    }\n', '\n', '    // INTERNAL METHODS\n', '\n', '    /// @notice Add an approved version of Melon\n', '    /// @param ofVersion Address of the version to add\n', '    /// @return id integer ID of the version (list index)\n', '    function addVersion(\n', '        address ofVersion\n', '    )\n', '        // In later version\n', '        //  require Authorities consensus\n', '        internal returns (uint id)\n', '    {\n', '        Version memory info;\n', '        info.version = ofVersion;\n', '        info.active = true;\n', '        info.timestamp = now;\n', '        versions.push(info);\n', '        VersionUpdated(versions.length - 1);\n', '    }\n', '\n', '    /// @notice Remove and shut down version of Melon\n', '    /// @param id Id of the version to shutdown\n', '    function shutDownVersion(uint id)\n', '        pre_cond(isActive(id)) internal\n', '    {\n', '        VersionInterface Version = VersionInterface(versions[id].version);\n', '        Version.shutDown();\n', '        delete versions[id];\n', '        VersionUpdated(id);\n', '    }\n', '\n', '    function isActive(uint id) internal returns (bool active) {\n', '        (, active, ) = getVersionById(id);\n', '    }\n', '\n', '\n', '}\n', '\n', 'interface VersionInterface {\n', '\n', '    // EVENTS\n', '\n', '    event FundUpdated(uint id);\n', '\n', '    // PUBLIC METHODS\n', '\n', '    function shutDown() external;\n', '\n', '    function setupFund(\n', '        string ofFundName,\n', '        address ofQuoteAsset,\n', '        uint ofManagementFee,\n', '        uint ofPerformanceFee,\n', '        address ofCompliance,\n', '        address ofRiskMgmt,\n', '        address ofPriceFeed,\n', '        address[] ofExchanges,\n', '        address[] ofExchangeAdapters,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    );\n', '    function shutDownFund(address ofFund);\n', '\n', '    // PUBLIC VIEW METHODS\n', '\n', '    function getNativeAsset() view returns (address);\n', '    function getFundById(uint withId) view returns (address);\n', '    function getLastFundId() view returns (uint);\n', '    function getFundByManager(address ofManager) view returns (address);\n', '    function termsAndConditionsAreSigned(uint8 v, bytes32 r, bytes32 s) view returns (bool signed);\n', '\n', '}']