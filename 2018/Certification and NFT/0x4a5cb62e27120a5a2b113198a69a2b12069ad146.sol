['pragma solidity ^0.4.18;\n', '\n', '/*\n', '    Utilities & Common Modifiers\n', '*/\n', 'contract Utils {\n', '    /**\n', '        constructor\n', '    */\n', '    function Utils() public {\n', '    }\n', '\n', '    // verifies that an amount is greater than zero\n', '    modifier greaterThanZero(uint256 _amount) {\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '    // validates an address - currently only checks that it isn&#39;t null\n', '    modifier validAddress(address _address) {\n', '        require(_address != address(0));\n', '        _;\n', '    }\n', '\n', '    // verifies that the address is different than this contract address\n', '    modifier notThis(address _address) {\n', '        require(_address != address(this));\n', '        _;\n', '    }\n', '\n', '    // Overflow protected math functions\n', '\n', '    /**\n', '        @dev returns the sum of _x and _y, asserts if the calculation overflows\n', '\n', '        @param _x   value 1\n', '        @param _y   value 2\n', '\n', '        @return sum\n', '    */\n', '    function safeAdd(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x + _y;\n', '        assert(z >= _x);\n', '        return z;\n', '    }\n', '\n', '    /**\n', '        @dev returns the difference of _x minus _y, asserts if the subtraction results in a negative number\n', '\n', '        @param _x   minuend\n', '        @param _y   subtrahend\n', '\n', '        @return difference\n', '    */\n', '    function safeSub(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        assert(_x >= _y);\n', '        return _x - _y;\n', '    }\n', '\n', '    /**\n', '        @dev returns the product of multiplying _x by _y, asserts if the calculation overflows\n', '\n', '        @param _x   factor 1\n', '        @param _y   factor 2\n', '\n', '        @return product\n', '    */\n', '    function safeMul(uint256 _x, uint256 _y) internal pure returns (uint256) {\n', '        uint256 z = _x * _y;\n', '        assert(_x == 0 || z / _x == _y);\n', '        return z;\n', '    }\n', '}\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', '    // this function isn&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function owner() public view returns (address) {}\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '/*\n', '    Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '/*\n', '    Provides support and utilities for contract management\n', '*/\n', 'contract Managed {\n', '    address public manager;\n', '    address public newManager;\n', '\n', '    event ManagerUpdate(address indexed _prevManager, address indexed _newManager);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function Managed() public {\n', '        manager = msg.sender;\n', '    }\n', '\n', '    // allows execution by the manager only\n', '    modifier managerOnly {\n', '        assert(msg.sender == manager);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract management\n', '        the new manager still needs to accept the transfer\n', '        can only be called by the contract manager\n', '\n', '        @param _newManager    new contract manager\n', '    */\n', '    function transferManagement(address _newManager) public managerOnly {\n', '        require(_newManager != manager);\n', '        newManager = _newManager;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new manager to accept a management transfer\n', '    */\n', '    function acceptManagement() public {\n', '        require(msg.sender == newManager);\n', '        ManagerUpdate(manager, newManager);\n', '        manager = newManager;\n', '        newManager = address(0);\n', '    }\n', '}\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', '    // these functions aren&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function name() public view returns (string) {}\n', '    function symbol() public view returns (string) {}\n', '    function decimals() public view returns (uint8) {}\n', '    function totalSupply() public view returns (uint256) {}\n', '    function balanceOf(address _owner) public view returns (uint256) { _owner; }\n', '    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '/*\n', '    Token Holder interface\n', '*/\n', 'contract ITokenHolder is IOwned {\n', '    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;\n', '}\n', '\n', '/*\n', '    We consider every contract to be a &#39;token holder&#39; since it&#39;s currently not possible\n', '    for a contract to deny receiving tokens.\n', '\n', '    The TokenHolder&#39;s contract sole purpose is to provide a safety mechanism that allows\n', '    the owner to send tokens that were sent to the contract by mistake back to their sender.\n', '*/\n', 'contract TokenHolder is ITokenHolder, Owned, Utils {\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function TokenHolder() public {\n', '    }\n', '\n', '    /**\n', '        @dev withdraws tokens held by the contract and sends them to an account\n', '        can only be called by the owner\n', '\n', '        @param _token   ERC20 token contract address\n', '        @param _to      account to receive the new amount\n', '        @param _amount  amount to withdraw\n', '    */\n', '    function withdrawTokens(IERC20Token _token, address _to, uint256 _amount)\n', '        public\n', '        ownerOnly\n', '        validAddress(_token)\n', '        validAddress(_to)\n', '        notThis(_to)\n', '    {\n', '        assert(_token.transfer(_to, _amount));\n', '    }\n', '}\n', '\n', '/*\n', '    Smart Token interface\n', '*/\n', 'contract ISmartToken is IOwned, IERC20Token {\n', '    function disableTransfers(bool _disable) public;\n', '    function issue(address _to, uint256 _amount) public;\n', '    function destroy(address _from, uint256 _amount) public;\n', '}\n', '\n', '/*\n', '    The smart token controller is an upgradable part of the smart token that allows\n', '    more functionality as well as fixes for bugs/exploits.\n', '    Once it accepts ownership of the token, it becomes the token&#39;s sole controller\n', '    that can execute any of its functions.\n', '\n', '    To upgrade the controller, ownership must be transferred to a new controller, along with\n', '    any relevant data.\n', '\n', '    The smart token must be set on construction and cannot be changed afterwards.\n', '    Wrappers are provided (as opposed to a single &#39;execute&#39; function) for each of the token&#39;s functions, for easier access.\n', '\n', '    Note that the controller can transfer token ownership to a new controller that\n', '    doesn&#39;t allow executing any function on the token, for a trustless solution.\n', '    Doing that will also remove the owner&#39;s ability to upgrade the controller.\n', '*/\n', 'contract SmartTokenController is TokenHolder {\n', '    ISmartToken public token;   // smart token\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function SmartTokenController(ISmartToken _token)\n', '        public\n', '        validAddress(_token)\n', '    {\n', '        token = _token;\n', '    }\n', '\n', '    // ensures that the controller is the token&#39;s owner\n', '    modifier active() {\n', '        assert(token.owner() == address(this));\n', '        _;\n', '    }\n', '\n', '    // ensures that the controller is not the token&#39;s owner\n', '    modifier inactive() {\n', '        assert(token.owner() != address(this));\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the token ownership\n', '        the new owner still need to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new token owner\n', '    */\n', '    function transferTokenOwnership(address _newOwner) public ownerOnly {\n', '        token.transferOwnership(_newOwner);\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept a token ownership transfer\n', '        can only be called by the contract owner\n', '    */\n', '    function acceptTokenOwnership() public ownerOnly {\n', '        token.acceptOwnership();\n', '    }\n', '\n', '    /**\n', '        @dev disables/enables token transfers\n', '        can only be called by the contract owner\n', '\n', '        @param _disable    true to disable transfers, false to enable them\n', '    */\n', '    function disableTokenTransfers(bool _disable) public ownerOnly {\n', '        token.disableTransfers(_disable);\n', '    }\n', '\n', '    /**\n', '        @dev withdraws tokens held by the controller and sends them to an account\n', '        can only be called by the owner\n', '\n', '        @param _token   ERC20 token contract address\n', '        @param _to      account to receive the new amount\n', '        @param _amount  amount to withdraw\n', '    */\n', '    function withdrawFromToken(\n', '        IERC20Token _token, \n', '        address _to, \n', '        uint256 _amount\n', '    ) \n', '        public\n', '        ownerOnly\n', '    {\n', '        ITokenHolder(token).withdrawTokens(_token, _to, _amount);\n', '    }\n', '}\n', '\n', '/*\n', '    Bancor Formula interface\n', '*/\n', 'contract IBancorFormula {\n', '    function calculatePurchaseReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _depositAmount) public view returns (uint256);\n', '    function calculateSaleReturn(uint256 _supply, uint256 _connectorBalance, uint32 _connectorWeight, uint256 _sellAmount) public view returns (uint256);\n', '    function calculateCrossConnectorReturn(uint256 _connector1Balance, uint32 _connector1Weight, uint256 _connector2Balance, uint32 _connector2Weight, uint256 _amount) public view returns (uint256);\n', '}\n', '\n', '/*\n', '    Bancor Gas Price Limit interface\n', '*/\n', 'contract IBancorGasPriceLimit {\n', '    function gasPrice() public view returns (uint256) {}\n', '    function validateGasPrice(uint256) public view;\n', '}\n', '\n', '/*\n', '    Bancor Quick Converter interface\n', '*/\n', 'contract IBancorQuickConverter {\n', '    function convert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n', '    function convertFor(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for) public payable returns (uint256);\n', '    function convertForPrioritized(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for, uint256 _block, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) public payable returns (uint256);\n', '}\n', '\n', '/*\n', '    Bancor Converter Extensions interface\n', '*/\n', 'contract IBancorConverterExtensions {\n', '    function formula() public view returns (IBancorFormula) {}\n', '    function gasPriceLimit() public view returns (IBancorGasPriceLimit) {}\n', '    function quickConverter() public view returns (IBancorQuickConverter) {}\n', '}\n', '\n', '/*\n', '    EIP228 Token Converter interface\n', '*/\n', 'contract ITokenConverter {\n', '    function convertibleTokenCount() public view returns (uint16);\n', '    function convertibleToken(uint16 _tokenIndex) public view returns (address);\n', '    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256);\n', '    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n', '    // deprecated, backward compatibility\n', '    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n', '}\n', '\n', '/*\n', '    Bancor Converter v0.8\n', '\n', '    The Bancor version of the token converter, allows conversion between a smart token and other ERC20 tokens and between different ERC20 tokens and themselves.\n', '\n', '    ERC20 connector balance can be virtual, meaning that the calculations are based on the virtual balance instead of relying on\n', '    the actual connector balance. This is a security mechanism that prevents the need to keep a very large (and valuable) balance in a single contract.\n', '\n', '    The converter is upgradable (just like any SmartTokenController).\n', '\n', '    WARNING: It is NOT RECOMMENDED to use the converter with Smart Tokens that have less than 8 decimal digits\n', '             or with very small numbers because of precision loss\n', '\n', '\n', '    Open issues:\n', '    - Front-running attacks are currently mitigated by the following mechanisms:\n', '        - minimum return argument for each conversion provides a way to define a minimum/maximum price for the transaction\n', '        - gas price limit prevents users from having control over the order of execution\n', '      Other potential solutions might include a commit/reveal based schemes\n', '    - Possibly add getters for the connector fields so that the client won&#39;t need to rely on the order in the struct\n', '*/\n', 'contract BancorConverter is ITokenConverter, SmartTokenController, Managed {\n', '    uint32 private constant MAX_WEIGHT = 1000000;\n', '    uint32 private constant MAX_CONVERSION_FEE = 1000000;\n', '\n', '    struct Connector {\n', '        uint256 virtualBalance;         // connector virtual balance\n', '        uint32 weight;                  // connector weight, represented in ppm, 1-1000000\n', '        bool isVirtualBalanceEnabled;   // true if virtual balance is enabled, false if not\n', '        bool isPurchaseEnabled;         // is purchase of the smart token enabled with the connector, can be set by the owner\n', '        bool isSet;                     // used to tell if the mapping element is defined\n', '    }\n', '\n', '    string public version = &#39;0.8&#39;;\n', '    string public converterType = &#39;bancor&#39;;\n', '\n', '    IBancorConverterExtensions public extensions;       // bancor converter extensions contract\n', '    IERC20Token[] public connectorTokens;               // ERC20 standard token addresses\n', '    IERC20Token[] public quickBuyPath;                  // conversion path that&#39;s used in order to buy the token with ETH\n', '    mapping (address => Connector) public connectors;   // connector token addresses -> connector data\n', '    uint32 private totalConnectorWeight = 0;            // used to efficiently prevent increasing the total connector weight above 100%\n', '    uint32 public maxConversionFee = 0;                 // maximum conversion fee for the lifetime of the contract, represented in ppm, 0...1000000 (0 = no fee, 100 = 0.01%, 1000000 = 100%)\n', '    uint32 public conversionFee = 0;                    // current conversion fee, represented in ppm, 0...maxConversionFee\n', '    bool public conversionsEnabled = true;              // true if token conversions is enabled, false if not\n', '    IERC20Token[] private convertPath;\n', '\n', '    // triggered when a conversion between two tokens occurs (TokenConverter event)\n', '    event Conversion(address indexed _fromToken, address indexed _toToken, address indexed _trader, uint256 _amount, uint256 _return,\n', '                     int256 _conversionFee, uint256 _currentPriceN, uint256 _currentPriceD);\n', '    // triggered when the conversion fee is updated\n', '    event ConversionFeeUpdate(uint32 _prevFee, uint32 _newFee);\n', '\n', '    /**\n', '        @dev constructor\n', '\n', '        @param  _token              smart token governed by the converter\n', '        @param  _extensions         address of a bancor converter extensions contract\n', '        @param  _maxConversionFee   maximum conversion fee, represented in ppm\n', '        @param  _connectorToken     optional, initial connector, allows defining the first connector at deployment time\n', '        @param  _connectorWeight    optional, weight for the initial connector\n', '    */\n', '    function BancorConverter(ISmartToken _token, IBancorConverterExtensions _extensions, uint32 _maxConversionFee, IERC20Token _connectorToken, uint32 _connectorWeight)\n', '        public\n', '        SmartTokenController(_token)\n', '        validAddress(_extensions)\n', '        validMaxConversionFee(_maxConversionFee)\n', '    {\n', '        extensions = _extensions;\n', '        maxConversionFee = _maxConversionFee;\n', '\n', '        if (_connectorToken != address(0))\n', '            addConnector(_connectorToken, _connectorWeight, false);\n', '    }\n', '\n', '    // validates a connector token address - verifies that the address belongs to one of the connector tokens\n', '    modifier validConnector(IERC20Token _address) {\n', '        require(connectors[_address].isSet);\n', '        _;\n', '    }\n', '\n', '    // validates a token address - verifies that the address belongs to one of the convertible tokens\n', '    modifier validToken(IERC20Token _address) {\n', '        require(_address == token || connectors[_address].isSet);\n', '        _;\n', '    }\n', '\n', '    // validates maximum conversion fee\n', '    modifier validMaxConversionFee(uint32 _conversionFee) {\n', '        require(_conversionFee >= 0 && _conversionFee <= MAX_CONVERSION_FEE);\n', '        _;\n', '    }\n', '\n', '    // validates conversion fee\n', '    modifier validConversionFee(uint32 _conversionFee) {\n', '        require(_conversionFee >= 0 && _conversionFee <= maxConversionFee);\n', '        _;\n', '    }\n', '\n', '    // validates connector weight range\n', '    modifier validConnectorWeight(uint32 _weight) {\n', '        require(_weight > 0 && _weight <= MAX_WEIGHT);\n', '        _;\n', '    }\n', '\n', '    // validates a conversion path - verifies that the number of elements is odd and that maximum number of &#39;hops&#39; is 10\n', '    modifier validConversionPath(IERC20Token[] _path) {\n', '        require(_path.length > 2 && _path.length <= (1 + 2 * 10) && _path.length % 2 == 1);\n', '        _;\n', '    }\n', '\n', '    // allows execution only when conversions aren&#39;t disabled\n', '    modifier conversionsAllowed {\n', '        assert(conversionsEnabled);\n', '        _;\n', '    }\n', '\n', '    // allows execution only for owner or manager\n', '    modifier ownerOrManagerOnly {\n', '        require(msg.sender == owner || msg.sender == manager);\n', '        _;\n', '    }\n', '\n', '    // allows execution only for quick convreter\n', '    modifier quickConverterOnly {\n', '        require(msg.sender == address(extensions.quickConverter()));\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev returns the number of connector tokens defined\n', '\n', '        @return number of connector tokens\n', '    */\n', '    function connectorTokenCount() public view returns (uint16) {\n', '        return uint16(connectorTokens.length);\n', '    }\n', '\n', '    /**\n', '        @dev returns the number of convertible tokens supported by the contract\n', '        note that the number of convertible tokens is the number of connector token, plus 1 (that represents the smart token)\n', '\n', '        @return number of convertible tokens\n', '    */\n', '    function convertibleTokenCount() public view returns (uint16) {\n', '        return connectorTokenCount() + 1;\n', '    }\n', '\n', '    /**\n', '        @dev given a convertible token index, returns its contract address\n', '\n', '        @param _tokenIndex  convertible token index\n', '\n', '        @return convertible token address\n', '    */\n', '    function convertibleToken(uint16 _tokenIndex) public view returns (address) {\n', '        if (_tokenIndex == 0)\n', '            return token;\n', '        return connectorTokens[_tokenIndex - 1];\n', '    }\n', '\n', '    /*\n', '        @dev allows the owner to update the extensions contract address\n', '\n', '        @param _extensions    address of a bancor converter extensions contract\n', '    */\n', '    function setExtensions(IBancorConverterExtensions _extensions)\n', '        public\n', '        ownerOnly\n', '        validAddress(_extensions)\n', '        notThis(_extensions)\n', '    {\n', '        extensions = _extensions;\n', '    }\n', '\n', '    /*\n', '        @dev allows the manager to update the quick buy path\n', '\n', '        @param _path    new quick buy path, see conversion path format in the BancorQuickConverter contract\n', '    */\n', '    function setQuickBuyPath(IERC20Token[] _path)\n', '        public\n', '        ownerOnly\n', '        validConversionPath(_path)\n', '    {\n', '        quickBuyPath = _path;\n', '    }\n', '\n', '    /*\n', '        @dev allows the manager to clear the quick buy path\n', '    */\n', '    function clearQuickBuyPath() public ownerOnly {\n', '        quickBuyPath.length = 0;\n', '    }\n', '\n', '    /**\n', '        @dev returns the length of the quick buy path array\n', '\n', '        @return quick buy path length\n', '    */\n', '    function getQuickBuyPathLength() public view returns (uint256) {\n', '        return quickBuyPath.length;\n', '    }\n', '\n', '    /**\n', '        @dev disables the entire conversion functionality\n', '        this is a safety mechanism in case of a emergency\n', '        can only be called by the manager\n', '\n', '        @param _disable true to disable conversions, false to re-enable them\n', '    */\n', '    function disableConversions(bool _disable) public ownerOrManagerOnly {\n', '        conversionsEnabled = !_disable;\n', '    }\n', '\n', '    /**\n', '        @dev updates the current conversion fee\n', '        can only be called by the manager\n', '\n', '        @param _conversionFee new conversion fee, represented in ppm\n', '    */\n', '    function setConversionFee(uint32 _conversionFee)\n', '        public\n', '        ownerOrManagerOnly\n', '        validConversionFee(_conversionFee)\n', '    {\n', '        ConversionFeeUpdate(conversionFee, _conversionFee);\n', '        conversionFee = _conversionFee;\n', '    }\n', '\n', '    /*\n', '        @dev returns the conversion fee amount for a given return amount\n', '\n', '        @return conversion fee amount\n', '    */\n', '    function getConversionFeeAmount(uint256 _amount) public view returns (uint256) {\n', '        return safeMul(_amount, conversionFee) / MAX_CONVERSION_FEE;\n', '    }\n', '\n', '    /**\n', '        @dev defines a new connector for the token\n', '        can only be called by the owner while the converter is inactive\n', '\n', '        @param _token                  address of the connector token\n', '        @param _weight                 constant connector weight, represented in ppm, 1-1000000\n', '        @param _enableVirtualBalance   true to enable virtual balance for the connector, false to disable it\n', '    */\n', '    function addConnector(IERC20Token _token, uint32 _weight, bool _enableVirtualBalance)\n', '        public\n', '        ownerOnly\n', '        inactive\n', '        validAddress(_token)\n', '        notThis(_token)\n', '        validConnectorWeight(_weight)\n', '    {\n', '        require(_token != token && !connectors[_token].isSet && totalConnectorWeight + _weight <= MAX_WEIGHT); // validate input\n', '\n', '        connectors[_token].virtualBalance = 0;\n', '        connectors[_token].weight = _weight;\n', '        connectors[_token].isVirtualBalanceEnabled = _enableVirtualBalance;\n', '        connectors[_token].isPurchaseEnabled = true;\n', '        connectors[_token].isSet = true;\n', '        connectorTokens.push(_token);\n', '        totalConnectorWeight += _weight;\n', '    }\n', '\n', '    /**\n', '        @dev updates one of the token connectors\n', '        can only be called by the owner\n', '\n', '        @param _connectorToken         address of the connector token\n', '        @param _weight                 constant connector weight, represented in ppm, 1-1000000\n', '        @param _enableVirtualBalance   true to enable virtual balance for the connector, false to disable it\n', '        @param _virtualBalance         new connector&#39;s virtual balance\n', '    */\n', '    function updateConnector(IERC20Token _connectorToken, uint32 _weight, bool _enableVirtualBalance, uint256 _virtualBalance)\n', '        public\n', '        ownerOnly\n', '        validConnector(_connectorToken)\n', '        validConnectorWeight(_weight)\n', '    {\n', '        Connector storage connector = connectors[_connectorToken];\n', '        require(totalConnectorWeight - connector.weight + _weight <= MAX_WEIGHT); // validate input\n', '\n', '        totalConnectorWeight = totalConnectorWeight - connector.weight + _weight;\n', '        connector.weight = _weight;\n', '        connector.isVirtualBalanceEnabled = _enableVirtualBalance;\n', '        connector.virtualBalance = _virtualBalance;\n', '    }\n', '\n', '    /**\n', '        @dev disables purchasing with the given connector token in case the connector token got compromised\n', '        can only be called by the owner\n', '        note that selling is still enabled regardless of this flag and it cannot be disabled by the owner\n', '\n', '        @param _connectorToken  connector token contract address\n', '        @param _disable         true to disable the token, false to re-enable it\n', '    */\n', '    function disableConnectorPurchases(IERC20Token _connectorToken, bool _disable)\n', '        public\n', '        ownerOnly\n', '        validConnector(_connectorToken)\n', '    {\n', '        connectors[_connectorToken].isPurchaseEnabled = !_disable;\n', '    }\n', '\n', '    /**\n', '        @dev returns the connector&#39;s virtual balance if one is defined, otherwise returns the actual balance\n', '\n', '        @param _connectorToken  connector token contract address\n', '\n', '        @return connector balance\n', '    */\n', '    function getConnectorBalance(IERC20Token _connectorToken)\n', '        public\n', '        view\n', '        validConnector(_connectorToken)\n', '        returns (uint256)\n', '    {\n', '        Connector storage connector = connectors[_connectorToken];\n', '        return connector.isVirtualBalanceEnabled ? connector.virtualBalance : _connectorToken.balanceOf(this);\n', '    }\n', '\n', '    /**\n', '        @dev returns the expected return for converting a specific amount of _fromToken to _toToken\n', '\n', '        @param _fromToken  ERC20 token to convert from\n', '        @param _toToken    ERC20 token to convert to\n', '        @param _amount     amount to convert, in fromToken\n', '\n', '        @return expected conversion return amount\n', '    */\n', '    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256) {\n', '        require(_fromToken != _toToken); // validate input\n', '\n', '        // conversion between the token and one of its connectors\n', '        if (_toToken == token)\n', '            return getPurchaseReturn(_fromToken, _amount);\n', '        else if (_fromToken == token)\n', '            return getSaleReturn(_toToken, _amount);\n', '\n', '        // conversion between 2 connectors\n', '        uint256 purchaseReturnAmount = getPurchaseReturn(_fromToken, _amount);\n', '        return getSaleReturn(_toToken, purchaseReturnAmount, safeAdd(token.totalSupply(), purchaseReturnAmount));\n', '    }\n', '\n', '    /**\n', '        @dev returns the expected return for buying the token for a connector token\n', '\n', '        @param _connectorToken  connector token contract address\n', '        @param _depositAmount   amount to deposit (in the connector token)\n', '\n', '        @return expected purchase return amount\n', '    */\n', '    function getPurchaseReturn(IERC20Token _connectorToken, uint256 _depositAmount)\n', '        public\n', '        view\n', '        active\n', '        validConnector(_connectorToken)\n', '        returns (uint256)\n', '    {\n', '        Connector storage connector = connectors[_connectorToken];\n', '        require(connector.isPurchaseEnabled); // validate input\n', '\n', '        uint256 tokenSupply = token.totalSupply();\n', '        uint256 connectorBalance = getConnectorBalance(_connectorToken);\n', '        uint256 amount = extensions.formula().calculatePurchaseReturn(tokenSupply, connectorBalance, connector.weight, _depositAmount);\n', '\n', '        // deduct the fee from the return amount\n', '        uint256 feeAmount = getConversionFeeAmount(amount);\n', '        return safeSub(amount, feeAmount);\n', '    }\n', '\n', '    /**\n', '        @dev returns the expected return for selling the token for one of its connector tokens\n', '\n', '        @param _connectorToken  connector token contract address\n', '        @param _sellAmount      amount to sell (in the smart token)\n', '\n', '        @return expected sale return amount\n', '    */\n', '    function getSaleReturn(IERC20Token _connectorToken, uint256 _sellAmount) public view returns (uint256) {\n', '        return getSaleReturn(_connectorToken, _sellAmount, token.totalSupply());\n', '    }\n', '\n', '    /**\n', '        @dev converts a specific amount of _fromToken to _toToken\n', '\n', '        @param _fromToken  ERC20 token to convert from\n', '        @param _toToken    ERC20 token to convert to\n', '        @param _amount     amount to convert, in fromToken\n', '        @param _minReturn  if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\n', '\n', '        @return conversion return amount\n', '    */\n', '    function convertInternal(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public quickConverterOnly returns (uint256) {\n', '        require(_fromToken != _toToken); // validate input\n', '\n', '        // conversion between the token and one of its connectors\n', '        if (_toToken == token)\n', '            return buy(_fromToken, _amount, _minReturn);\n', '        else if (_fromToken == token)\n', '            return sell(_toToken, _amount, _minReturn);\n', '\n', '        // conversion between 2 connectors\n', '        uint256 purchaseAmount = buy(_fromToken, _amount, 1);\n', '        return sell(_toToken, purchaseAmount, _minReturn);\n', '    }\n', '\n', '    /**\n', '        @dev converts a specific amount of _fromToken to _toToken\n', '\n', '        @param _fromToken  ERC20 token to convert from\n', '        @param _toToken    ERC20 token to convert to\n', '        @param _amount     amount to convert, in fromToken\n', '        @param _minReturn  if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\n', '\n', '        @return conversion return amount\n', '    */\n', '    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256) {\n', '            convertPath = [_fromToken, token, _toToken];\n', '            return quickConvert(convertPath, _amount, _minReturn);\n', '    }\n', '\n', '    /**\n', '        @dev buys the token by depositing one of its connector tokens\n', '\n', '        @param _connectorToken  connector token contract address\n', '        @param _depositAmount   amount to deposit (in the connector token)\n', '        @param _minReturn       if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\n', '\n', '        @return buy return amount\n', '    */\n', '    function buy(IERC20Token _connectorToken, uint256 _depositAmount, uint256 _minReturn)\n', '        internal\n', '        conversionsAllowed\n', '        greaterThanZero(_minReturn)\n', '        returns (uint256)\n', '    {\n', '        uint256 amount = getPurchaseReturn(_connectorToken, _depositAmount);\n', '        require(amount != 0 && amount >= _minReturn); // ensure the trade gives something in return and meets the minimum requested amount\n', '\n', '        // update virtual balance if relevant\n', '        Connector storage connector = connectors[_connectorToken];\n', '        if (connector.isVirtualBalanceEnabled)\n', '            connector.virtualBalance = safeAdd(connector.virtualBalance, _depositAmount);\n', '\n', '        // transfer _depositAmount funds from the caller in the connector token\n', '        assert(_connectorToken.transferFrom(msg.sender, this, _depositAmount));\n', '        // issue new funds to the caller in the smart token\n', '        token.issue(msg.sender, amount);\n', '\n', '        dispatchConversionEvent(_connectorToken, _depositAmount, amount, true);\n', '        return amount;\n', '    }\n', '\n', '    /**\n', '        @dev sells the token by withdrawing from one of its connector tokens\n', '\n', '        @param _connectorToken  connector token contract address\n', '        @param _sellAmount      amount to sell (in the smart token)\n', '        @param _minReturn       if the conversion results in an amount smaller the minimum return - it is cancelled, must be nonzero\n', '\n', '        @return sell return amount\n', '    */\n', '    function sell(IERC20Token _connectorToken, uint256 _sellAmount, uint256 _minReturn)\n', '        internal\n', '        conversionsAllowed\n', '        greaterThanZero(_minReturn)\n', '        returns (uint256)\n', '    {\n', '        require(_sellAmount <= token.balanceOf(msg.sender)); // validate input\n', '\n', '        uint256 amount = getSaleReturn(_connectorToken, _sellAmount);\n', '        require(amount != 0 && amount >= _minReturn); // ensure the trade gives something in return and meets the minimum requested amount\n', '\n', '        uint256 tokenSupply = token.totalSupply();\n', '        uint256 connectorBalance = getConnectorBalance(_connectorToken);\n', '        // ensure that the trade will only deplete the connector if the total supply is depleted as well\n', '        assert(amount < connectorBalance || (amount == connectorBalance && _sellAmount == tokenSupply));\n', '\n', '        // update virtual balance if relevant\n', '        Connector storage connector = connectors[_connectorToken];\n', '        if (connector.isVirtualBalanceEnabled)\n', '            connector.virtualBalance = safeSub(connector.virtualBalance, amount);\n', '\n', '        // destroy _sellAmount from the caller&#39;s balance in the smart token\n', '        token.destroy(msg.sender, _sellAmount);\n', '        // transfer funds to the caller in the connector token\n', '        // the transfer might fail if the actual connector balance is smaller than the virtual balance\n', '        assert(_connectorToken.transfer(msg.sender, amount));\n', '\n', '        dispatchConversionEvent(_connectorToken, _sellAmount, amount, false);\n', '        return amount;\n', '    }\n', '\n', '    /**\n', '        @dev converts the token to any other token in the bancor network by following a predefined conversion path\n', '        note that when converting from an ERC20 token (as opposed to a smart token), allowance must be set beforehand\n', '\n', '        @param _path        conversion path, see conversion path format in the BancorQuickConverter contract\n', '        @param _amount      amount to convert from (in the initial source token)\n', '        @param _minReturn   if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\n', '\n', '        @return tokens issued in return\n', '    */\n', '    function quickConvert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn)\n', '        public\n', '        payable\n', '        validConversionPath(_path)\n', '        returns (uint256)\n', '    {\n', '        return quickConvertPrioritized(_path, _amount, _minReturn, 0x0, 0x0, 0x0, 0x0, 0x0);\n', '    }\n', '\n', '    /**\n', '        @dev converts the token to any other token in the bancor network by following a predefined conversion path\n', '        note that when converting from an ERC20 token (as opposed to a smart token), allowance must be set beforehand\n', '\n', '        @param _path        conversion path, see conversion path format in the BancorQuickConverter contract\n', '        @param _amount      amount to convert from (in the initial source token)\n', '        @param _minReturn   if the conversion results in an amount smaller than the minimum return - it is cancelled, must be nonzero\n', '        @param _block       if the current block exceeded the given parameter - it is cancelled\n', '        @param _nonce       the nonce of the sender address\n', '        @param _v           parameter that can be parsed from the transaction signature\n', '        @param _r           parameter that can be parsed from the transaction signature\n', '        @param _s           parameter that can be parsed from the transaction signature\n', '\n', '        @return tokens issued in return\n', '    */\n', '    function quickConvertPrioritized(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, uint256 _block, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s)\n', '        public\n', '        payable\n', '        validConversionPath(_path)\n', '        returns (uint256)\n', '    {\n', '        IERC20Token fromToken = _path[0];\n', '        IBancorQuickConverter quickConverter = extensions.quickConverter();\n', '\n', '        // we need to transfer the source tokens from the caller to the quick converter,\n', '        // so it can execute the conversion on behalf of the caller\n', '        if (msg.value == 0) {\n', '            // not ETH, send the source tokens to the quick converter\n', '            // if the token is the smart token, no allowance is required - destroy the tokens from the caller and issue them to the quick converter\n', '            if (fromToken == token) {\n', '                token.destroy(msg.sender, _amount); // destroy _amount tokens from the caller&#39;s balance in the smart token\n', '                token.issue(quickConverter, _amount); // issue _amount new tokens to the quick converter\n', '            } else {\n', '                // otherwise, we assume we already have allowance, transfer the tokens directly to the quick converter\n', '                assert(fromToken.transferFrom(msg.sender, quickConverter, _amount));\n', '            }\n', '        }\n', '\n', '        // execute the conversion and pass on the ETH with the call\n', '        return quickConverter.convertForPrioritized.value(msg.value)(_path, _amount, _minReturn, msg.sender, _block, _nonce, _v, _r, _s);\n', '    }\n', '\n', '    // deprecated, backward compatibility\n', '    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256) {\n', '        return convertInternal(_fromToken, _toToken, _amount, _minReturn);\n', '    }\n', '\n', '    /**\n', '        @dev utility, returns the expected return for selling the token for one of its connector tokens, given a total supply override\n', '\n', '        @param _connectorToken  connector token contract address\n', '        @param _sellAmount      amount to sell (in the smart token)\n', '        @param _totalSupply     total token supply, overrides the actual token total supply when calculating the return\n', '\n', '        @return sale return amount\n', '    */\n', '    function getSaleReturn(IERC20Token _connectorToken, uint256 _sellAmount, uint256 _totalSupply)\n', '        private\n', '        view\n', '        active\n', '        validConnector(_connectorToken)\n', '        greaterThanZero(_totalSupply)\n', '        returns (uint256)\n', '    {\n', '        Connector storage connector = connectors[_connectorToken];\n', '        uint256 connectorBalance = getConnectorBalance(_connectorToken);\n', '        uint256 amount = extensions.formula().calculateSaleReturn(_totalSupply, connectorBalance, connector.weight, _sellAmount);\n', '\n', '        // deduct the fee from the return amount\n', '        uint256 feeAmount = getConversionFeeAmount(amount);\n', '        return safeSub(amount, feeAmount);\n', '    }\n', '\n', '    /**\n', '        @dev helper, dispatches the Conversion event\n', '        The function also takes the tokens&#39; decimals into account when calculating the current price\n', '\n', '        @param _connectorToken  connector token contract address\n', '        @param _amount          amount purchased/sold (in the source token)\n', '        @param _returnAmount    amount returned (in the target token)\n', '        @param isPurchase       true if it&#39;s a purchase, false if it&#39;s a sale\n', '    */\n', '    function dispatchConversionEvent(IERC20Token _connectorToken, uint256 _amount, uint256 _returnAmount, bool isPurchase) private {\n', '        Connector storage connector = connectors[_connectorToken];\n', '\n', '        // calculate the new price using the simple price formula\n', '        // price = connector balance / (supply * weight)\n', '        // weight is represented in ppm, so multiplying by 1000000\n', '        uint256 connectorAmount = safeMul(getConnectorBalance(_connectorToken), MAX_WEIGHT);\n', '        uint256 tokenAmount = safeMul(token.totalSupply(), connector.weight);\n', '\n', '        // normalize values\n', '        uint8 tokenDecimals = token.decimals();\n', '        uint8 connectorTokenDecimals = _connectorToken.decimals();\n', '        if (tokenDecimals != connectorTokenDecimals) {\n', '            if (tokenDecimals > connectorTokenDecimals)\n', '                connectorAmount = safeMul(connectorAmount, 10 ** uint256(tokenDecimals - connectorTokenDecimals));\n', '            else\n', '                tokenAmount = safeMul(tokenAmount, 10 ** uint256(connectorTokenDecimals - tokenDecimals));\n', '        }\n', '\n', '        uint256 feeAmount = getConversionFeeAmount(_returnAmount);\n', '        // ensure that the fee is capped at 255 bits to prevent overflow when converting it to a signed int\n', '        assert(feeAmount <= 2 ** 255);\n', '\n', '        if (isPurchase)\n', '            Conversion(_connectorToken, token, msg.sender, _amount, _returnAmount, int256(feeAmount), connectorAmount, tokenAmount);\n', '        else\n', '            Conversion(token, _connectorToken, msg.sender, _amount, _returnAmount, int256(feeAmount), tokenAmount, connectorAmount);\n', '    }\n', '\n', '    /**\n', '        @dev fallback, buys the smart token with ETH\n', '        note that the purchase will use the price at the time of the purchase\n', '    */\n', '    function() payable public {\n', '        quickConvert(quickBuyPath, msg.value, 1);\n', '    }\n', '}']