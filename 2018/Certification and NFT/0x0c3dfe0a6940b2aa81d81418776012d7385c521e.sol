['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract BallotSB52 {\n', '  using SafeMath for uint;\n', '  uint public phiWon;\n', '  uint public neWon;\n', '  Superbowl52 bettingContract;\n', '  mapping (address => bool) voted;\n', '  mapping (address => uint) votes;\n', '  uint public constant votingPeriod = 7 days;\n', '  uint public votingStart;\n', '  uint public votingEnd;\n', '  uint public validResult;\n', '  bool public closed;\n', '  uint public totalVoters;\n', '  // XX.XXX%\n', '  uint public threshold;\n', '  uint public votingReward;\n', '  mapping (address => uint) stake;\n', '  uint public majorityReward;\n', '  bool public tie;\n', '  mapping (address => bool) claimed;\n', '\n', '  function BallotSB52(uint th) public payable {\n', '    validResult = 0;\n', '    closed = false;\n', '    votingStart = now;\n', '    votingEnd = now + 7 days;\n', '    bettingContract = Superbowl52(msg.sender);\n', '    totalVoters = 0;\n', '    threshold = th;\n', '    tie = false;\n', '    votingReward = 0;\n', '  }\n', '\n', '  // you can only vote once\n', '  function voteResult(uint team) public payable {\n', '    require(votingStart <= now && votingEnd >= now);\n', '    require(voted[msg.sender] == false);\n', '    require(msg.value == 50 finney);\n', '    require(!closed);\n', '    if(team == 1) {\n', '      phiWon += 1;\n', '    }\n', '    else if (team == 2) {\n', '      neWon += 1;\n', '    } else revert();\n', '    voted[msg.sender] = true;\n', '    votes[msg.sender] = team;\n', '    totalVoters += 1;\n', '    stake[msg.sender] = msg.value;\n', '  }\n', '\n', '  function closeBallot() public returns (uint) {\n', '    require(!closed);\n', '    require(now > votingEnd);\n', '    if(phiWon.mul(100000).div(totalVoters) >= threshold) {\n', '      validResult = 1;\n', '      votingReward = bettingContract.getLosersOnePercent(2);\n', '      majorityReward = (neWon * 50 finney).add(votingReward).div(phiWon);\n', '    } else if (neWon.mul(100000).div(totalVoters) >= threshold) {\n', '      validResult = 2;\n', '      votingReward = bettingContract.getLosersOnePercent(3);\n', '      majorityReward = (phiWon * 50 finney).add(votingReward).div(neWon);\n', '    } else {\n', '      if (neWon.mul(100000).div(totalVoters) > 50000) majorityReward = (phiWon * 50 finney).div(neWon);\n', '      else if (phiWon.mul(100000).div(totalVoters) > 50000) majorityReward = (neWon * 50 finney).div(phiWon);\n', '      else {\n', '        tie = true;\n', '        majorityReward = 0;\n', '      }\n', '      validResult = 0;\n', '    }\n', '    closed = true;\n', '    return validResult;\n', '  }\n', '\n', '  // anyone can claim reward for a voter\n', '  function getReward(address voter) public {\n', '    require(closed);\n', '    require(voted[voter]);\n', '    require(claimed[voter] == false);\n', '    if(tie) {\n', '      voter.transfer(stake[voter]);\n', '    }\n', '    // majority gets rewarded\n', '    if(votes[voter] == validResult) {\n', '      voter.transfer(stake[voter] + majorityReward);\n', '    } // minority loses all\n', '    claimed[voter] = true;\n', '  }\n', '\n', '  function hasClaimed(address voter) public constant returns (bool) {\n', '    return claimed[voter];\n', '  }\n', '\n', '  function () public payable {}\n', '}\n', '\n', 'contract Superbowl52 {\n', '  using SafeMath for uint;\n', '  uint public constant GAME_START_TIME = 1517787000;\n', '  bool public resultConfirmed = false;\n', '  address public owner;\n', '\n', '  mapping(address => betting) public bets;\n', '  uint public totalBets;\n', '  uint public philadelphiaBets;\n', '  uint public newEnglandBets;\n', '  uint public result;\n', '  uint public betters;\n', '  bool public votingOpen;\n', '  bool public withdrawalOpen;\n', '  uint public threshold;\n', '  uint public winningPot;\n', '  mapping(address => uint) public wins;\n', '\n', '  BallotSB52 public ballot;\n', '\n', '  struct betting {\n', '    uint philadelphiaBets;\n', '    uint newEnglandBets;\n', '    bool claimed;\n', '  }\n', '\n', '  function Superbowl52() public {\n', '    require(now<GAME_START_TIME);\n', '    owner = msg.sender;\n', '    result = 0;\n', '    votingOpen = false;\n', '    withdrawalOpen = false;\n', '    // 90%\n', '    threshold = 90000;\n', '    winningPot = 0;\n', '  }\n', '\n', '  // team 1 is Philadelphia\n', '  // team 2 is New England\n', '  // a bet is final and you cannot change it\n', '  function bet(uint team) public payable {\n', '    require(team == 1 || team == 2);\n', '    require(now <= GAME_START_TIME);\n', '    require(msg.value > 0);\n', '    if(!hasBet(msg.sender)) betters += 1;\n', '    if(team == 1) {\n', '      bets[msg.sender].philadelphiaBets += msg.value;\n', '      philadelphiaBets += msg.value;\n', '    } else if (team == 2) {\n', '      bets[msg.sender].newEnglandBets += msg.value;\n', '      newEnglandBets += msg.value;\n', '    }\n', '    totalBets += msg.value;\n', '  }\n', '\n', '  function () public payable {\n', '    revert();\n', '  }\n', '\n', '  function getPhiladelphiaBets(address better) public constant returns (uint) {\n', '    return bets[better].philadelphiaBets;\n', '  }\n', '\n', '  function getNewEnglandBets(address better) public constant returns (uint) {\n', '    return bets[better].newEnglandBets;\n', '  }\n', '\n', '  function hasClaimed(address better) public constant returns (bool) {\n', '    return bets[better].claimed;\n', '  }\n', '\n', '  function startVoting() public {\n', '    require(msg.sender == owner);\n', '    require(votingOpen == false);\n', '    require(withdrawalOpen == false);\n', '    require(now >= GAME_START_TIME + 8 hours);\n', '    votingOpen = true;\n', '    ballot = new BallotSB52(threshold);\n', '  }\n', '\n', '  function hasBet(address better) public constant returns (bool) {\n', '    return (bets[better].philadelphiaBets + bets[better].newEnglandBets) > 0;\n', '  }\n', '\n', '  function endVoting() public {\n', '    require(votingOpen);\n', '    result = ballot.closeBallot();\n', '    // ballot ends with success\n', '    if (result == 1 || result == 2) {\n', '        withdrawalOpen = true;\n', '        votingOpen = false;\n', '    } else {\n', '      threshold = threshold - 5000;\n', '      ballot = new BallotSB52(threshold);\n', '    }\n', '    if(result == 1) winningPot = totalBets.sub(newEnglandBets.div(100));\n', '    if(result == 2) winningPot = totalBets.sub(philadelphiaBets.div(100));\n', '  }\n', '\n', '  function getLosersOnePercent(uint loser) public returns (uint) {\n', '    require(votingOpen);\n', '    require(msg.sender == address(ballot));\n', '    if(loser==1) {\n', '      ballot.transfer(philadelphiaBets.div(100));\n', '      return philadelphiaBets.div(100);\n', '    }\n', '    else if (loser==2) {\n', '      ballot.transfer(newEnglandBets.div(100));\n', '      return newEnglandBets.div(100);\n', '    }\n', '    else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function getWinnings(address winner, uint donation) public {\n', '    require(donation<=100);\n', '    require(withdrawalOpen);\n', '    require(bets[winner].claimed == false);\n', '    uint winnings = 0;\n', '    if (result == 1) winnings = (getPhiladelphiaBets(winner).mul(winningPot)).div(philadelphiaBets);\n', '    else if (result == 2) winnings = (getNewEnglandBets(winner).mul(winningPot)).div(newEnglandBets);\n', '    else revert();\n', '    wins[winner] = winnings;\n', '    uint donated = winnings.mul(donation).div(100);\n', '    bets[winner].claimed = true;\n', '    winner.transfer(winnings-donated);\n', '  }\n', '\n', '}']