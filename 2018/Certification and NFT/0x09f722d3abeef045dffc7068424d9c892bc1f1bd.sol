['/*\n', '  8888888 .d8888b.   .d88888b.   .d8888b.  888                     888                 888      \n', '    888  d88P  Y88b d88P" "Y88b d88P  Y88b 888                     888                 888      \n', '    888  888    888 888     888 Y88b.      888                     888                 888      \n', '    888  888        888     888  "Y888b.   888888  8888b.  888d888 888888      .d8888b 88888b.  \n', '    888  888        888     888     "Y88b. 888        "88b 888P"   888        d88P"    888 "88b \n', '    888  888    888 888     888       "888 888    .d888888 888     888        888      888  888 \n', '    888  Y88b  d88P Y88b. .d88P Y88b  d88P Y88b.  888  888 888     Y88b.  d8b Y88b.    888  888 \n', '  8888888 "Y8888P"   "Y88888P"   "Y8888P"   "Y888 "Y888888 888      "Y888 Y8P  "Y8888P 888  888 \n', '\n', '  Rocket startup for your ICO\n', '\n', '  The innovative platform to create your initial coin offering (ICO) simply, safely and professionally.\n', '  All the services your project needs: KYC, AI Audit, Smart contract wizard, Legal template,\n', '  Master Nodes management, on a single SaaS platform!\n', '*/\n', 'pragma solidity ^0.4.21;\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\ICOStartSale.sol\n', '\n', 'contract ICOStartSale is Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  struct Period {\n', '    uint256 startTimestamp;\n', '    uint256 endTimestamp;\n', '    uint256 rate;\n', '  }\n', '\n', '  Period[] private periods;\n', '  mapping(address => bool) public whitelistedAddresses;\n', '  mapping(address => uint256) public whitelistedRates;\n', '\n', '  ERC20 public token;\n', '  address public wallet;\n', '  address public tokenWallet;\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * @dev A purchase was made.\n', '   * @param _purchaser Who paid for the tokens.\n', '   * @param _value Total purchase price in weis.\n', '   * @param _amount Amount of tokens purchased.\n', '   */\n', '  event TokensPurchased(address indexed _purchaser, uint256 _value, uint256 _amount);\n', '\n', '  uint256 constant public MINIMUM_AMOUNT = 0.05 ether;\n', '  uint256 constant public MAXIMUM_NON_WHITELIST_AMOUNT = 5 ether;\n', '\n', '  /**\n', '   * @dev Constructor, takes initial parameters.\n', '   * @param _wallet Address where collected funds will be forwarded to.\n', '   * @param _token Address of the token being sold.\n', '   * @param _tokenWallet Address holding the tokens, which has approved allowance to this contract.\n', '   */\n', '  function ICOStartSale(address _wallet, ERC20 _token, address _tokenWallet) public {\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '    require(_tokenWallet != address(0));\n', '\n', '    wallet = _wallet;\n', '    token = _token;\n', '    tokenWallet = _tokenWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Send weis, get tokens.\n', '   */\n', '  function () external payable {\n', '    // Preconditions.\n', '    require(msg.sender != address(0));\n', '    require(msg.value >= MINIMUM_AMOUNT);\n', '    require(isOpen());\n', '    if (msg.value > MAXIMUM_NON_WHITELIST_AMOUNT) {\n', '      require(isAddressInWhitelist(msg.sender));\n', '    }\n', '\n', '    uint256 tokenAmount = getTokenAmount(msg.sender, msg.value);\n', '    weiRaised = weiRaised.add(msg.value);\n', '\n', '    token.transferFrom(tokenWallet, msg.sender, tokenAmount);\n', '    emit TokensPurchased(msg.sender, msg.value, tokenAmount);\n', '\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev Add a sale period with its default rate.\n', '   * @param _startTimestamp Beginning of this sale period.\n', '   * @param _endTimestamp End of this sale period.\n', '   * @param _rate Rate at which tokens are sold during this sale period.\n', '   */\n', '  function addPeriod(uint256 _startTimestamp, uint256 _endTimestamp, uint256 _rate) onlyOwner public {\n', '    require(_startTimestamp != 0);\n', '    require(_endTimestamp > _startTimestamp);\n', '    require(_rate != 0);\n', '    Period memory period = Period(_startTimestamp, _endTimestamp, _rate);\n', '    periods.push(period);\n', '  }\n', '\n', '  /**\n', '   * @dev Emergency function to clear all sale periods (for example in case the sale is delayed).\n', '   */\n', '  function clearPeriods() onlyOwner public {\n', '    delete periods;\n', '  }\n', '\n', '  /**\n', '   * @dev Add an address to the whitelist or update the rate of an already added address.\n', '   * This function cannot be used to reset a previously set custom rate. Remove the address and add it\n', '   * again if you need to do that.\n', '   * @param _address Address to whitelist\n', '   * @param _rate Optional custom rate reserved for that address (0 = use default rate)\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address _address, uint256 _rate) onlyOwner public returns (bool success) {\n', '    require(_address != address(0));\n', '    success = false;\n', '    if (!whitelistedAddresses[_address]) {\n', '      whitelistedAddresses[_address] = true;\n', '      success = true;\n', '    }\n', '    if (_rate != 0) {\n', '      whitelistedRates[_address] = _rate;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Adds an array of addresses to the whitelist, all with the same optional custom rate.\n', '   * @param _addresses Addresses to add.\n', '   * @param _rate Optional custom rate reserved for all added addresses (0 = use default rate).\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist  \n', '   */\n', '  function addAddressesToWhitelist(address[] _addresses, uint256 _rate) onlyOwner public returns (bool success) {\n', '    success = false;\n', '    for (uint256 i = 0; i <_addresses.length; i++) {\n', '      if (addAddressToWhitelist(_addresses[i], _rate)) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Remove an address from the whitelist.\n', '   * @param _address Address to remove.\n', '   * @return true if the address was removed from the whitelist, \n', '   * false if the address wasn&#39;t in the whitelist in the first place.\n', '   */\n', '  function removeAddressFromWhitelist(address _address) onlyOwner public returns (bool success) {\n', '    require(_address != address(0));\n', '    success = false;\n', '    if (whitelistedAddresses[_address]) {\n', '      whitelistedAddresses[_address] = false;\n', '      success = true;\n', '    }\n', '    if (whitelistedRates[_address] != 0) {\n', '      whitelistedRates[_address] = 0;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Remove addresses from the whitelist.\n', '   * @param _addresses addresses\n', '   * @return true if at least one address was removed from the whitelist, \n', '   * false if all addresses weren&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressesFromWhitelist(address[] _addresses) onlyOwner public returns (bool success) {\n', '    success = false;\n', '    for (uint256 i = 0; i < _addresses.length; i++) {\n', '      if (removeAddressFromWhitelist(_addresses[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev True if the specified address is whitelisted.\n', '   */\n', '  function isAddressInWhitelist(address _address) view public returns (bool) {\n', '    return whitelistedAddresses[_address];\n', '  }\n', '\n', '  /**\n', '   * @dev True while the sale is open (i.e. accepting contributions). False otherwise.\n', '   */\n', '  function isOpen() view public returns (bool) {\n', '    return ((!paused) && (_getCurrentPeriod().rate != 0));\n', '  }\n', '\n', '  /**\n', '   * @dev Current rate for the specified purchaser.\n', '   * @param _purchaser Purchaser address (may or may not be whitelisted).\n', '   * @return Custom rate for the purchaser, or current standard rate if no custom rate was whitelisted.\n', '   */\n', '  function getCurrentRate(address _purchaser) public view returns (uint256 rate) {\n', '    Period memory currentPeriod = _getCurrentPeriod();\n', '    require(currentPeriod.rate != 0);\n', '    rate = whitelistedRates[_purchaser];\n', '    if (rate == 0) {\n', '      rate = currentPeriod.rate;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Number of tokens that a specified address would get by sending right now\n', '   * the specified amount.\n', '   * @param _purchaser Purchaser address (may or may not be whitelisted).\n', '   * @param _weiAmount Value in wei to be converted into tokens.\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount.\n', '   */\n', '  function getTokenAmount(address _purchaser, uint256 _weiAmount) public view returns (uint256) {\n', '    return _weiAmount.mul(getCurrentRate(_purchaser));\n', '  }\n', '\n', '  /**\n', '   * @dev Checks the amount of tokens left in the allowance.\n', '   * @return Amount of tokens remaining for sale.\n', '   */\n', '  function remainingTokens() public view returns (uint256) {\n', '    return token.allowance(tokenWallet, this);\n', '  }\n', '\n', '  /*\n', '   * Internal functions\n', '   */\n', '\n', '  /**\n', '   * @dev Returns the current period, or null.\n', '   */\n', '  function _getCurrentPeriod() view internal returns (Period memory _period) {\n', '    _period = Period(0, 0, 0);\n', '    uint256 len = periods.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      if ((periods[i].startTimestamp <= block.timestamp) && (periods[i].endTimestamp >= block.timestamp)) {\n', '        _period = periods[i];\n', '        break;\n', '      }\n', '    }\n', '  }\n', '\n', '}']
['/*\n', '  8888888 .d8888b.   .d88888b.   .d8888b.  888                     888                 888      \n', '    888  d88P  Y88b d88P" "Y88b d88P  Y88b 888                     888                 888      \n', '    888  888    888 888     888 Y88b.      888                     888                 888      \n', '    888  888        888     888  "Y888b.   888888  8888b.  888d888 888888      .d8888b 88888b.  \n', '    888  888        888     888     "Y88b. 888        "88b 888P"   888        d88P"    888 "88b \n', '    888  888    888 888     888       "888 888    .d888888 888     888        888      888  888 \n', '    888  Y88b  d88P Y88b. .d88P Y88b  d88P Y88b.  888  888 888     Y88b.  d8b Y88b.    888  888 \n', '  8888888 "Y8888P"   "Y88888P"   "Y8888P"   "Y888 "Y888888 888      "Y888 Y8P  "Y8888P 888  888 \n', '\n', '  Rocket startup for your ICO\n', '\n', '  The innovative platform to create your initial coin offering (ICO) simply, safely and professionally.\n', '  All the services your project needs: KYC, AI Audit, Smart contract wizard, Legal template,\n', '  Master Nodes management, on a single SaaS platform!\n', '*/\n', 'pragma solidity ^0.4.21;\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\ownership\\Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\lifecycle\\Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts\\zeppelin-solidity\\contracts\\token\\ERC20\\ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\ICOStartSale.sol\n', '\n', 'contract ICOStartSale is Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  struct Period {\n', '    uint256 startTimestamp;\n', '    uint256 endTimestamp;\n', '    uint256 rate;\n', '  }\n', '\n', '  Period[] private periods;\n', '  mapping(address => bool) public whitelistedAddresses;\n', '  mapping(address => uint256) public whitelistedRates;\n', '\n', '  ERC20 public token;\n', '  address public wallet;\n', '  address public tokenWallet;\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * @dev A purchase was made.\n', '   * @param _purchaser Who paid for the tokens.\n', '   * @param _value Total purchase price in weis.\n', '   * @param _amount Amount of tokens purchased.\n', '   */\n', '  event TokensPurchased(address indexed _purchaser, uint256 _value, uint256 _amount);\n', '\n', '  uint256 constant public MINIMUM_AMOUNT = 0.05 ether;\n', '  uint256 constant public MAXIMUM_NON_WHITELIST_AMOUNT = 5 ether;\n', '\n', '  /**\n', '   * @dev Constructor, takes initial parameters.\n', '   * @param _wallet Address where collected funds will be forwarded to.\n', '   * @param _token Address of the token being sold.\n', '   * @param _tokenWallet Address holding the tokens, which has approved allowance to this contract.\n', '   */\n', '  function ICOStartSale(address _wallet, ERC20 _token, address _tokenWallet) public {\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '    require(_tokenWallet != address(0));\n', '\n', '    wallet = _wallet;\n', '    token = _token;\n', '    tokenWallet = _tokenWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Send weis, get tokens.\n', '   */\n', '  function () external payable {\n', '    // Preconditions.\n', '    require(msg.sender != address(0));\n', '    require(msg.value >= MINIMUM_AMOUNT);\n', '    require(isOpen());\n', '    if (msg.value > MAXIMUM_NON_WHITELIST_AMOUNT) {\n', '      require(isAddressInWhitelist(msg.sender));\n', '    }\n', '\n', '    uint256 tokenAmount = getTokenAmount(msg.sender, msg.value);\n', '    weiRaised = weiRaised.add(msg.value);\n', '\n', '    token.transferFrom(tokenWallet, msg.sender, tokenAmount);\n', '    emit TokensPurchased(msg.sender, msg.value, tokenAmount);\n', '\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  /**\n', '   * @dev Add a sale period with its default rate.\n', '   * @param _startTimestamp Beginning of this sale period.\n', '   * @param _endTimestamp End of this sale period.\n', '   * @param _rate Rate at which tokens are sold during this sale period.\n', '   */\n', '  function addPeriod(uint256 _startTimestamp, uint256 _endTimestamp, uint256 _rate) onlyOwner public {\n', '    require(_startTimestamp != 0);\n', '    require(_endTimestamp > _startTimestamp);\n', '    require(_rate != 0);\n', '    Period memory period = Period(_startTimestamp, _endTimestamp, _rate);\n', '    periods.push(period);\n', '  }\n', '\n', '  /**\n', '   * @dev Emergency function to clear all sale periods (for example in case the sale is delayed).\n', '   */\n', '  function clearPeriods() onlyOwner public {\n', '    delete periods;\n', '  }\n', '\n', '  /**\n', '   * @dev Add an address to the whitelist or update the rate of an already added address.\n', '   * This function cannot be used to reset a previously set custom rate. Remove the address and add it\n', '   * again if you need to do that.\n', '   * @param _address Address to whitelist\n', '   * @param _rate Optional custom rate reserved for that address (0 = use default rate)\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address _address, uint256 _rate) onlyOwner public returns (bool success) {\n', '    require(_address != address(0));\n', '    success = false;\n', '    if (!whitelistedAddresses[_address]) {\n', '      whitelistedAddresses[_address] = true;\n', '      success = true;\n', '    }\n', '    if (_rate != 0) {\n', '      whitelistedRates[_address] = _rate;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Adds an array of addresses to the whitelist, all with the same optional custom rate.\n', '   * @param _addresses Addresses to add.\n', '   * @param _rate Optional custom rate reserved for all added addresses (0 = use default rate).\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist  \n', '   */\n', '  function addAddressesToWhitelist(address[] _addresses, uint256 _rate) onlyOwner public returns (bool success) {\n', '    success = false;\n', '    for (uint256 i = 0; i <_addresses.length; i++) {\n', '      if (addAddressToWhitelist(_addresses[i], _rate)) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Remove an address from the whitelist.\n', '   * @param _address Address to remove.\n', '   * @return true if the address was removed from the whitelist, \n', "   * false if the address wasn't in the whitelist in the first place.\n", '   */\n', '  function removeAddressFromWhitelist(address _address) onlyOwner public returns (bool success) {\n', '    require(_address != address(0));\n', '    success = false;\n', '    if (whitelistedAddresses[_address]) {\n', '      whitelistedAddresses[_address] = false;\n', '      success = true;\n', '    }\n', '    if (whitelistedRates[_address] != 0) {\n', '      whitelistedRates[_address] = 0;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Remove addresses from the whitelist.\n', '   * @param _addresses addresses\n', '   * @return true if at least one address was removed from the whitelist, \n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] _addresses) onlyOwner public returns (bool success) {\n', '    success = false;\n', '    for (uint256 i = 0; i < _addresses.length; i++) {\n', '      if (removeAddressFromWhitelist(_addresses[i])) {\n', '        success = true;\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev True if the specified address is whitelisted.\n', '   */\n', '  function isAddressInWhitelist(address _address) view public returns (bool) {\n', '    return whitelistedAddresses[_address];\n', '  }\n', '\n', '  /**\n', '   * @dev True while the sale is open (i.e. accepting contributions). False otherwise.\n', '   */\n', '  function isOpen() view public returns (bool) {\n', '    return ((!paused) && (_getCurrentPeriod().rate != 0));\n', '  }\n', '\n', '  /**\n', '   * @dev Current rate for the specified purchaser.\n', '   * @param _purchaser Purchaser address (may or may not be whitelisted).\n', '   * @return Custom rate for the purchaser, or current standard rate if no custom rate was whitelisted.\n', '   */\n', '  function getCurrentRate(address _purchaser) public view returns (uint256 rate) {\n', '    Period memory currentPeriod = _getCurrentPeriod();\n', '    require(currentPeriod.rate != 0);\n', '    rate = whitelistedRates[_purchaser];\n', '    if (rate == 0) {\n', '      rate = currentPeriod.rate;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Number of tokens that a specified address would get by sending right now\n', '   * the specified amount.\n', '   * @param _purchaser Purchaser address (may or may not be whitelisted).\n', '   * @param _weiAmount Value in wei to be converted into tokens.\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount.\n', '   */\n', '  function getTokenAmount(address _purchaser, uint256 _weiAmount) public view returns (uint256) {\n', '    return _weiAmount.mul(getCurrentRate(_purchaser));\n', '  }\n', '\n', '  /**\n', '   * @dev Checks the amount of tokens left in the allowance.\n', '   * @return Amount of tokens remaining for sale.\n', '   */\n', '  function remainingTokens() public view returns (uint256) {\n', '    return token.allowance(tokenWallet, this);\n', '  }\n', '\n', '  /*\n', '   * Internal functions\n', '   */\n', '\n', '  /**\n', '   * @dev Returns the current period, or null.\n', '   */\n', '  function _getCurrentPeriod() view internal returns (Period memory _period) {\n', '    _period = Period(0, 0, 0);\n', '    uint256 len = periods.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      if ((periods[i].startTimestamp <= block.timestamp) && (periods[i].endTimestamp >= block.timestamp)) {\n', '        _period = periods[i];\n', '        break;\n', '      }\n', '    }\n', '  }\n', '\n', '}']
