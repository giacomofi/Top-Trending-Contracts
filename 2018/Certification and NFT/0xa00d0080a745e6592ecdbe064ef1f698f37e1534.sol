['pragma solidity 0.4.24;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances; \n', '\n', ' \n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', ' function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is ERC20, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting. \n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title EscrowAccountCrowdsale.\n', ' */\n', 'contract EscrowAccountCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '  EscrowVault public vault;\n', '  /**\n', '   * @dev Constructor, creates EscrowAccountCrowdsale.\n', '   */\n', '   function EscrowAccountCrowdsale() public {\n', '    vault = new EscrowVault(wallet);\n', '  }\n', '  /**\n', '   * @dev Investors can claim refunds here if whitelisted is unsuccessful\n', '   */\n', '  function returnInvestoramount(address _beneficiary, uint256 _percentage) internal onlyOwner {\n', '    vault.refund(_beneficiary,_percentage);\n', '  }\n', '\n', '  function afterWhtelisted(address _beneficiary) internal onlyOwner{\n', '      vault.closeAfterWhitelisted(_beneficiary);\n', '  }\n', '  /**\n', '   * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n', '   */\n', '  function _forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title EscrowVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if whitelist fails,\n', ' * and forwarding it if whitelist is successful.\n', ' */\n', 'contract EscrowVault is Ownable {\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  event Closed();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  function EscrowVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '   \n', '  }\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner  payable {\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '   function closeAfterWhitelisted(address _beneficiary) onlyOwner public {\n', '   \n', '    uint256 depositedValue = deposited[_beneficiary];\n', '    deposited[_beneficiary] = 0;\n', '    wallet.transfer(depositedValue);\n', '  }\n', '   \n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor, uint256 _percentage)onlyOwner  {\n', '    uint256 depositedValue = deposited[investor];\n', '    depositedValue=depositedValue.sub(_percentage);\n', '   \n', '    investor.transfer(depositedValue);\n', '    wallet.transfer(_percentage);\n', '    emit Refunded(investor, depositedValue);\n', '     deposited[investor] = 0;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PostDeliveryCrowdsale\n', ' * @dev Crowdsale that locks tokens from withdrawal until it whitelisted and crowdsale ends.\n', ' */\n', 'contract PostDeliveryCrowdsale is TimedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public balances;\n', '\n', '  /**\n', '   * @dev Withdraw tokens only after whitelisted ends and after crowdsale ends.\n', '   */\n', '   \n', '  \n', '  function withdrawTokens() public {\n', '   require(hasClosed());\n', '    uint256 amount = balances[msg.sender];\n', '    require(amount > 0);\n', '    balances[msg.sender] = 0;\n', '    _deliverTokens(msg.sender, amount);\n', '  }\n', '  \n', '  \n', '   function failedWhitelist(address _beneficiary) internal  {\n', '    require(_beneficiary != address(0));\n', '    uint256 amount = balances[_beneficiary];\n', '    balances[_beneficiary] = 0;\n', '  }\n', '  function getInvestorDepositAmount(address _investor) public constant returns(uint256 paid){\n', '     \n', '     return balances[_investor];\n', ' }\n', '\n', '  /**\n', '   * @dev Overrides parent by storing balances instead of issuing tokens right away.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Amount of tokens purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract CryptoAssetCrowdsale is TimedCrowdsale, MintedCrowdsale,EscrowAccountCrowdsale,PostDeliveryCrowdsale {\n', '\n', ' enum Stage {PROCESS1_FAILED, PROCESS1_SUCCESS,PROCESS2_FAILED, PROCESS2_SUCCESS,PROCESS3_FAILED, PROCESS3_SUCCESS} \t\n', ' \t//stage Phase1 or Phase2 or Phase\n', '\tenum Phase {PHASE1, PHASE2,PHASE3}\n', '\t//stage ICO\n', '\tPhase public phase;\n', ' \n', '  struct whitelisted{\n', '       Stage  stage;\n', ' }\n', '  uint256 public adminCharge_p1=0.010 ether;\n', '  uint256 public adminCharge_p2=0.13 ether;\n', '  uint256 public adminCharge_p3=0.14 ether;\n', '  uint256 public cap=750 ether;// softcap is 750 ether\n', '  uint256 public goal=4500 ether;// hardcap is 4500 ether\n', '  uint256 public minContribAmount = 0.1 ether; // min invesment\n', '  mapping(address => whitelisted) public whitelist;\n', '  // How much ETH each address has invested to this crowdsale\n', '  mapping (address => uint256) public investedAmountOf;\n', '    // How many distinct addresses have invested\n', '  uint256 public investorCount;\n', '    // decimalFactor\n', '  uint256 public constant DECIMALFACTOR = 10**uint256(18);\n', '  event updateRate(uint256 tokenRate, uint256 time);\n', '  \n', '   /**\n', ' \t* @dev CryptoAssetCrowdsale is a base contract for managing a token crowdsale.\n', ' \t* CryptoAssetCrowdsale have a start and end timestamps, where investors can make\n', ' \t* token purchases and the crowdsale will assign them tokens based\n', ' \t* on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' \t* as they arrive.\n', ' \t*/\n', '  \n', ' function CryptoAssetCrowdsale(uint256 _starttime, uint256 _endTime, uint256 _rate, address _wallet,ERC20 _token)\n', '  TimedCrowdsale(_starttime,_endTime)Crowdsale(_rate, _wallet,_token)\n', '  {\n', '      phase = Phase.PHASE1;\n', '  }\n', '    \n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  \n', '  function buyTokens(address _beneficiary) public payable onlyWhileOpen{\n', '    require(_beneficiary != address(0));\n', '    require(validPurchase());\n', '  \n', '    uint256 weiAmount = msg.value;\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '    uint256 volumebasedBonus=0;\n', '    if(phase == Phase.PHASE1){\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase1(tokens)).div(100);\n', '\n', '    }else if(phase == Phase.PHASE2){\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase2(tokens)).div(100);\n', '\n', '    }else{\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase3(tokens)).div(100);\n', '\n', '    }\n', '\n', '    tokens=tokens.add(volumebasedBonus);\n', '    _preValidatePurchase( _beneficiary,  weiAmount);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '    _forwardFunds();\n', '    if(investedAmountOf[msg.sender] == 0) {\n', '           // A new investor\n', '           investorCount++;\n', '        }\n', '        // Update investor\n', '        investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(weiAmount);\n', '  }\n', '    function tokensaleToOtherCoinUser(address beneficiary, uint256 weiAmount) public onlyOwner onlyWhileOpen {\n', '    require(beneficiary != address(0) && weiAmount > 0);\n', '    uint256 tokens = weiAmount.mul(rate);\n', '    uint256 volumebasedBonus=0;\n', '    if(phase == Phase.PHASE1){\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase1(tokens)).div(100);\n', '\n', '    }else if(phase == Phase.PHASE2){\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase2(tokens)).div(100);\n', '\n', '    }else{\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase3(tokens)).div(100);\n', '\n', '    }\n', '\n', '    tokens=tokens.add(volumebasedBonus);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    _processPurchase(beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    }\n', '    \n', '    function validPurchase() internal constant returns (bool) {\n', '    bool minContribution = minContribAmount <= msg.value;\n', '    return  minContribution;\n', '  }\n', '  \n', '  \n', '  function getTokenVolumebasedBonusRateForPhase1(uint256 value) internal constant returns (uint256) {\n', '        uint256 bonusRate = 0;\n', '        uint256 valume = value.div(DECIMALFACTOR);\n', '\n', '        if (valume <= 50000 && valume >= 149999) {\n', '            bonusRate = 30;\n', '        } else if (valume <= 150000 && valume >= 299999) {\n', '            bonusRate = 35;\n', '        } else if (valume <= 300000 && valume >= 500000) {\n', '            bonusRate = 40;\n', '        } else{\n', '            bonusRate = 25;\n', '        }\n', '\n', '        return bonusRate;\n', '    }\n', '  \n', '   function getTokenVolumebasedBonusRateForPhase2(uint256 value) internal constant returns (uint256) {\n', '        uint256 bonusRate = 0;\n', '        uint valume = value.div(DECIMALFACTOR);\n', '\n', '        if (valume <= 50000 && valume >= 149999) {\n', '            bonusRate = 25;\n', '        } else if (valume <= 150000 && valume >= 299999) {\n', '            bonusRate = 30;\n', '        } else if (valume <= 300000 && valume >= 500000) {\n', '            bonusRate = 35;\n', '        } else{\n', '            bonusRate = 20;\n', '        }\n', '\n', '        return bonusRate;\n', '    }\n', '    \n', '     function getTokenVolumebasedBonusRateForPhase3(uint256 value) internal constant returns (uint256) {\n', '        uint256 bonusRate = 0;\n', '        uint valume = value.div(DECIMALFACTOR);\n', '\n', '        if (valume <= 50000 && valume >= 149999) {\n', '            bonusRate = 20;\n', '        } else if (valume <= 150000 && valume >= 299999) {\n', '            bonusRate = 25;\n', '        } else if (valume <= 300000 && valume >= 500000) {\n', '            bonusRate = 30;\n', '        } else{\n', '            bonusRate = 15;\n', '        }\n', '\n', '        return bonusRate;\n', '    }\n', '  \n', '  /**\n', ' \t* @dev change the Phase from phase1 to phase2 \n', ' \t*/\n', '  \tfunction startPhase2(uint256 _startTime) public onlyOwner {\n', '      \trequire(_startTime>0);\n', '      \tphase = Phase.PHASE2;\n', '      \topeningTime=_startTime;\n', '      \n', '   }\n', '   \n', '     /**\n', ' \t* @dev change the Phase from phase2 to phase3 sale\n', ' \t*/\n', '  \tfunction startPhase3(uint256 _startTime) public onlyOwner {\n', '      \trequire(0> _startTime);\n', '      \tphase = Phase.PHASE3;\n', '        openingTime=_startTime;\n', '\n', '   }\n', '\n', ' /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary].stage==Stage.PROCESS3_SUCCESS);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary,uint256 _stage) external onlyOwner {\n', '      require(_beneficiary != address(0));\n', '      require(_stage>0);  \n', ' if(_stage==1){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS1_FAILED;\n', '     returnInvestoramount(_beneficiary,adminCharge_p1);\n', '     failedWhitelist(_beneficiary);\n', '     investedAmountOf[_beneficiary]=0;\n', ' }else if(_stage==2){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS1_SUCCESS;\n', ' }else if(_stage==3){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS2_FAILED;\n', '     returnInvestoramount(_beneficiary,adminCharge_p2);\n', '     failedWhitelist(_beneficiary);\n', '          investedAmountOf[_beneficiary]=0;\n', ' }else if(_stage==4){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS2_SUCCESS;\n', ' }else if(_stage==5){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS3_FAILED;\n', '     returnInvestoramount(_beneficiary,adminCharge_p3);\n', '     failedWhitelist(_beneficiary);\n', '          investedAmountOf[_beneficiary]=0;\n', '     }else if(_stage==6){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS3_SUCCESS;\n', '     afterWhtelisted( _beneficiary);\n', ' }\n', ' \n', ' }\n', ' \n', '  /**\n', '   * @dev Withdraw tokens only after Investors added into whitelist .\n', '   */\n', '  function withdrawTokens() public isWhitelisted(msg.sender)  {\n', '    require(hasClosed());\n', '    uint256 amount = balances[msg.sender];\n', '    require(amount > 0);\n', '    balances[msg.sender] = 0;\n', '    _deliverTokens(msg.sender, amount);\n', '   \n', '  }\n', '  \n', ' /**\n', ' * @dev Change crowdsale ClosingTime\n', ' * @param  _endTime is End time in Seconds\n', ' */\n', '  function changeEndtime(uint256 _endTime) public onlyOwner {\n', '    require(_endTime > 0); \n', '    closingTime = _endTime;\n', '    }\n', '\n', ' /**\n', ' * @dev Change Token rate per ETH\n', ' * @param  _rate is set the current rate of AND Token\n', ' */\n', '  function changeRate(uint256 _rate) public onlyOwner {\n', '    require(_rate > 0); \n', '    rate = _rate;\n', '    emit updateRate(_rate,block.timestamp);\n', '    }\n', '  /**\n', ' * @dev Change admin chargers\n', ' * @param  _p1 for first Kyc Failed-$5\n', ' * @param  _p2 for second AML Failed-$7\n', ' * @param  _p3 for third AI Failed-$57\n', ' */\n', '  function changeAdminCharges(uint256 _p1,uint256 _p2,uint256 _p3) public onlyOwner {\n', '    require(_p1 > 0);\n', '    require(_p2 > 0); \n', '    require(_p3 > 0); \n', '    adminCharge_p1=_p1;\n', '    adminCharge_p2=_p2;\n', '    adminCharge_p3=_p3;\n', '    \n', '    }\n', '    \n', ' /**\n', '   * @dev Change minContribution amountAmount.\n', '   * @param _minInvestment for minimum contribution ETH amount\n', '   */\n', '  function changeMinInvestment(uint256 _minInvestment) public onlyOwner {\n', '     require(_minInvestment > 0);\n', '     minContribAmount=_minInvestment;\n', '  }\n', '  /**\n', '   * @dev Checks whether the cap has been reached.\n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '  /**\n', '   * @dev Checks whether the goal has been reached.\n', '   * @return Whether the goal was reached\n', '   */\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '  \n', '  \t/**\n', ' \t* @param _to is beneficiary address\n', ' \t* @param _value  Amount if tokens\n', ' \t* @dev  tokens distribution\n', ' \t*/\n', '\tfunction tokenDistribution(address _to, uint256 _value)public onlyOwner {\n', '        require (\n', '           _to != 0x0 && _value > 0);\n', '        _processPurchase(_to, _value);\n', '        whitelist[_to].stage=Stage.PROCESS3_SUCCESS;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances; \n', '\n', ' \n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', ' function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is ERC20, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting. \n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title EscrowAccountCrowdsale.\n', ' */\n', 'contract EscrowAccountCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '  EscrowVault public vault;\n', '  /**\n', '   * @dev Constructor, creates EscrowAccountCrowdsale.\n', '   */\n', '   function EscrowAccountCrowdsale() public {\n', '    vault = new EscrowVault(wallet);\n', '  }\n', '  /**\n', '   * @dev Investors can claim refunds here if whitelisted is unsuccessful\n', '   */\n', '  function returnInvestoramount(address _beneficiary, uint256 _percentage) internal onlyOwner {\n', '    vault.refund(_beneficiary,_percentage);\n', '  }\n', '\n', '  function afterWhtelisted(address _beneficiary) internal onlyOwner{\n', '      vault.closeAfterWhitelisted(_beneficiary);\n', '  }\n', '  /**\n', '   * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n', '   */\n', '  function _forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title EscrowVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if whitelist fails,\n', ' * and forwarding it if whitelist is successful.\n', ' */\n', 'contract EscrowVault is Ownable {\n', '  using SafeMath for uint256;\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  event Closed();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  function EscrowVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '   \n', '  }\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner  payable {\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '   function closeAfterWhitelisted(address _beneficiary) onlyOwner public {\n', '   \n', '    uint256 depositedValue = deposited[_beneficiary];\n', '    deposited[_beneficiary] = 0;\n', '    wallet.transfer(depositedValue);\n', '  }\n', '   \n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor, uint256 _percentage)onlyOwner  {\n', '    uint256 depositedValue = deposited[investor];\n', '    depositedValue=depositedValue.sub(_percentage);\n', '   \n', '    investor.transfer(depositedValue);\n', '    wallet.transfer(_percentage);\n', '    emit Refunded(investor, depositedValue);\n', '     deposited[investor] = 0;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title PostDeliveryCrowdsale\n', ' * @dev Crowdsale that locks tokens from withdrawal until it whitelisted and crowdsale ends.\n', ' */\n', 'contract PostDeliveryCrowdsale is TimedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public balances;\n', '\n', '  /**\n', '   * @dev Withdraw tokens only after whitelisted ends and after crowdsale ends.\n', '   */\n', '   \n', '  \n', '  function withdrawTokens() public {\n', '   require(hasClosed());\n', '    uint256 amount = balances[msg.sender];\n', '    require(amount > 0);\n', '    balances[msg.sender] = 0;\n', '    _deliverTokens(msg.sender, amount);\n', '  }\n', '  \n', '  \n', '   function failedWhitelist(address _beneficiary) internal  {\n', '    require(_beneficiary != address(0));\n', '    uint256 amount = balances[_beneficiary];\n', '    balances[_beneficiary] = 0;\n', '  }\n', '  function getInvestorDepositAmount(address _investor) public constant returns(uint256 paid){\n', '     \n', '     return balances[_investor];\n', ' }\n', '\n', '  /**\n', '   * @dev Overrides parent by storing balances instead of issuing tokens right away.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Amount of tokens purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract CryptoAssetCrowdsale is TimedCrowdsale, MintedCrowdsale,EscrowAccountCrowdsale,PostDeliveryCrowdsale {\n', '\n', ' enum Stage {PROCESS1_FAILED, PROCESS1_SUCCESS,PROCESS2_FAILED, PROCESS2_SUCCESS,PROCESS3_FAILED, PROCESS3_SUCCESS} \t\n', ' \t//stage Phase1 or Phase2 or Phase\n', '\tenum Phase {PHASE1, PHASE2,PHASE3}\n', '\t//stage ICO\n', '\tPhase public phase;\n', ' \n', '  struct whitelisted{\n', '       Stage  stage;\n', ' }\n', '  uint256 public adminCharge_p1=0.010 ether;\n', '  uint256 public adminCharge_p2=0.13 ether;\n', '  uint256 public adminCharge_p3=0.14 ether;\n', '  uint256 public cap=750 ether;// softcap is 750 ether\n', '  uint256 public goal=4500 ether;// hardcap is 4500 ether\n', '  uint256 public minContribAmount = 0.1 ether; // min invesment\n', '  mapping(address => whitelisted) public whitelist;\n', '  // How much ETH each address has invested to this crowdsale\n', '  mapping (address => uint256) public investedAmountOf;\n', '    // How many distinct addresses have invested\n', '  uint256 public investorCount;\n', '    // decimalFactor\n', '  uint256 public constant DECIMALFACTOR = 10**uint256(18);\n', '  event updateRate(uint256 tokenRate, uint256 time);\n', '  \n', '   /**\n', ' \t* @dev CryptoAssetCrowdsale is a base contract for managing a token crowdsale.\n', ' \t* CryptoAssetCrowdsale have a start and end timestamps, where investors can make\n', ' \t* token purchases and the crowdsale will assign them tokens based\n', ' \t* on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' \t* as they arrive.\n', ' \t*/\n', '  \n', ' function CryptoAssetCrowdsale(uint256 _starttime, uint256 _endTime, uint256 _rate, address _wallet,ERC20 _token)\n', '  TimedCrowdsale(_starttime,_endTime)Crowdsale(_rate, _wallet,_token)\n', '  {\n', '      phase = Phase.PHASE1;\n', '  }\n', '    \n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  \n', '  function buyTokens(address _beneficiary) public payable onlyWhileOpen{\n', '    require(_beneficiary != address(0));\n', '    require(validPurchase());\n', '  \n', '    uint256 weiAmount = msg.value;\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '    uint256 volumebasedBonus=0;\n', '    if(phase == Phase.PHASE1){\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase1(tokens)).div(100);\n', '\n', '    }else if(phase == Phase.PHASE2){\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase2(tokens)).div(100);\n', '\n', '    }else{\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase3(tokens)).div(100);\n', '\n', '    }\n', '\n', '    tokens=tokens.add(volumebasedBonus);\n', '    _preValidatePurchase( _beneficiary,  weiAmount);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '    _forwardFunds();\n', '    if(investedAmountOf[msg.sender] == 0) {\n', '           // A new investor\n', '           investorCount++;\n', '        }\n', '        // Update investor\n', '        investedAmountOf[msg.sender] = investedAmountOf[msg.sender].add(weiAmount);\n', '  }\n', '    function tokensaleToOtherCoinUser(address beneficiary, uint256 weiAmount) public onlyOwner onlyWhileOpen {\n', '    require(beneficiary != address(0) && weiAmount > 0);\n', '    uint256 tokens = weiAmount.mul(rate);\n', '    uint256 volumebasedBonus=0;\n', '    if(phase == Phase.PHASE1){\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase1(tokens)).div(100);\n', '\n', '    }else if(phase == Phase.PHASE2){\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase2(tokens)).div(100);\n', '\n', '    }else{\n', '    volumebasedBonus = tokens.mul(getTokenVolumebasedBonusRateForPhase3(tokens)).div(100);\n', '\n', '    }\n', '\n', '    tokens=tokens.add(volumebasedBonus);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    _processPurchase(beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    }\n', '    \n', '    function validPurchase() internal constant returns (bool) {\n', '    bool minContribution = minContribAmount <= msg.value;\n', '    return  minContribution;\n', '  }\n', '  \n', '  \n', '  function getTokenVolumebasedBonusRateForPhase1(uint256 value) internal constant returns (uint256) {\n', '        uint256 bonusRate = 0;\n', '        uint256 valume = value.div(DECIMALFACTOR);\n', '\n', '        if (valume <= 50000 && valume >= 149999) {\n', '            bonusRate = 30;\n', '        } else if (valume <= 150000 && valume >= 299999) {\n', '            bonusRate = 35;\n', '        } else if (valume <= 300000 && valume >= 500000) {\n', '            bonusRate = 40;\n', '        } else{\n', '            bonusRate = 25;\n', '        }\n', '\n', '        return bonusRate;\n', '    }\n', '  \n', '   function getTokenVolumebasedBonusRateForPhase2(uint256 value) internal constant returns (uint256) {\n', '        uint256 bonusRate = 0;\n', '        uint valume = value.div(DECIMALFACTOR);\n', '\n', '        if (valume <= 50000 && valume >= 149999) {\n', '            bonusRate = 25;\n', '        } else if (valume <= 150000 && valume >= 299999) {\n', '            bonusRate = 30;\n', '        } else if (valume <= 300000 && valume >= 500000) {\n', '            bonusRate = 35;\n', '        } else{\n', '            bonusRate = 20;\n', '        }\n', '\n', '        return bonusRate;\n', '    }\n', '    \n', '     function getTokenVolumebasedBonusRateForPhase3(uint256 value) internal constant returns (uint256) {\n', '        uint256 bonusRate = 0;\n', '        uint valume = value.div(DECIMALFACTOR);\n', '\n', '        if (valume <= 50000 && valume >= 149999) {\n', '            bonusRate = 20;\n', '        } else if (valume <= 150000 && valume >= 299999) {\n', '            bonusRate = 25;\n', '        } else if (valume <= 300000 && valume >= 500000) {\n', '            bonusRate = 30;\n', '        } else{\n', '            bonusRate = 15;\n', '        }\n', '\n', '        return bonusRate;\n', '    }\n', '  \n', '  /**\n', ' \t* @dev change the Phase from phase1 to phase2 \n', ' \t*/\n', '  \tfunction startPhase2(uint256 _startTime) public onlyOwner {\n', '      \trequire(_startTime>0);\n', '      \tphase = Phase.PHASE2;\n', '      \topeningTime=_startTime;\n', '      \n', '   }\n', '   \n', '     /**\n', ' \t* @dev change the Phase from phase2 to phase3 sale\n', ' \t*/\n', '  \tfunction startPhase3(uint256 _startTime) public onlyOwner {\n', '      \trequire(0> _startTime);\n', '      \tphase = Phase.PHASE3;\n', '        openingTime=_startTime;\n', '\n', '   }\n', '\n', ' /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary].stage==Stage.PROCESS3_SUCCESS);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary,uint256 _stage) external onlyOwner {\n', '      require(_beneficiary != address(0));\n', '      require(_stage>0);  \n', ' if(_stage==1){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS1_FAILED;\n', '     returnInvestoramount(_beneficiary,adminCharge_p1);\n', '     failedWhitelist(_beneficiary);\n', '     investedAmountOf[_beneficiary]=0;\n', ' }else if(_stage==2){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS1_SUCCESS;\n', ' }else if(_stage==3){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS2_FAILED;\n', '     returnInvestoramount(_beneficiary,adminCharge_p2);\n', '     failedWhitelist(_beneficiary);\n', '          investedAmountOf[_beneficiary]=0;\n', ' }else if(_stage==4){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS2_SUCCESS;\n', ' }else if(_stage==5){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS3_FAILED;\n', '     returnInvestoramount(_beneficiary,adminCharge_p3);\n', '     failedWhitelist(_beneficiary);\n', '          investedAmountOf[_beneficiary]=0;\n', '     }else if(_stage==6){\n', '     whitelist[_beneficiary].stage=Stage.PROCESS3_SUCCESS;\n', '     afterWhtelisted( _beneficiary);\n', ' }\n', ' \n', ' }\n', ' \n', '  /**\n', '   * @dev Withdraw tokens only after Investors added into whitelist .\n', '   */\n', '  function withdrawTokens() public isWhitelisted(msg.sender)  {\n', '    require(hasClosed());\n', '    uint256 amount = balances[msg.sender];\n', '    require(amount > 0);\n', '    balances[msg.sender] = 0;\n', '    _deliverTokens(msg.sender, amount);\n', '   \n', '  }\n', '  \n', ' /**\n', ' * @dev Change crowdsale ClosingTime\n', ' * @param  _endTime is End time in Seconds\n', ' */\n', '  function changeEndtime(uint256 _endTime) public onlyOwner {\n', '    require(_endTime > 0); \n', '    closingTime = _endTime;\n', '    }\n', '\n', ' /**\n', ' * @dev Change Token rate per ETH\n', ' * @param  _rate is set the current rate of AND Token\n', ' */\n', '  function changeRate(uint256 _rate) public onlyOwner {\n', '    require(_rate > 0); \n', '    rate = _rate;\n', '    emit updateRate(_rate,block.timestamp);\n', '    }\n', '  /**\n', ' * @dev Change admin chargers\n', ' * @param  _p1 for first Kyc Failed-$5\n', ' * @param  _p2 for second AML Failed-$7\n', ' * @param  _p3 for third AI Failed-$57\n', ' */\n', '  function changeAdminCharges(uint256 _p1,uint256 _p2,uint256 _p3) public onlyOwner {\n', '    require(_p1 > 0);\n', '    require(_p2 > 0); \n', '    require(_p3 > 0); \n', '    adminCharge_p1=_p1;\n', '    adminCharge_p2=_p2;\n', '    adminCharge_p3=_p3;\n', '    \n', '    }\n', '    \n', ' /**\n', '   * @dev Change minContribution amountAmount.\n', '   * @param _minInvestment for minimum contribution ETH amount\n', '   */\n', '  function changeMinInvestment(uint256 _minInvestment) public onlyOwner {\n', '     require(_minInvestment > 0);\n', '     minContribAmount=_minInvestment;\n', '  }\n', '  /**\n', '   * @dev Checks whether the cap has been reached.\n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '  /**\n', '   * @dev Checks whether the goal has been reached.\n', '   * @return Whether the goal was reached\n', '   */\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '  \n', '  \t/**\n', ' \t* @param _to is beneficiary address\n', ' \t* @param _value  Amount if tokens\n', ' \t* @dev  tokens distribution\n', ' \t*/\n', '\tfunction tokenDistribution(address _to, uint256 _value)public onlyOwner {\n', '        require (\n', '           _to != 0x0 && _value > 0);\n', '        _processPurchase(_to, _value);\n', '        whitelist[_to].stage=Stage.PROCESS3_SUCCESS;\n', '    }\n', '}']
