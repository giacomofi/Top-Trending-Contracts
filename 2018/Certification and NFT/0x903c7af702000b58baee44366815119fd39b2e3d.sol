['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '   // require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '\n', '/**\n', '* @dev Parent crowdsale contract is extended with support for cap in tokens\n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '* \n', '*/\n', 'contract TokensCappedCrowdsale is Crowdsale {\n', '\n', '    uint256 public tokensCap;\n', '\n', '    function TokensCappedCrowdsale(uint256 _tokensCap) public {\n', '        tokensCap = _tokensCap;\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add extra tokens cap logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal constant returns(bool) {\n', '        uint256 tokens = token.totalSupply().add(msg.value.mul(rate));\n', '        bool withinCap = tokens <= tokensCap;\n', '        return super.validPurchase() && withinCap;\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add tokens cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns(bool) {\n', '        bool capReached = token.totalSupply() >= tokensCap;\n', '        return super.hasEnded() || capReached;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', '* @dev Parent crowdsale contract extended with support for pausable crowdsale, meaning crowdsale can be paused by owner at any time\n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '* \n', '* While the contract is in paused state, the contributions will be rejected\n', '* \n', '*/\n', 'contract PausableCrowdsale is Crowdsale, Pausable {\n', '\n', '    function PausableCrowdsale(bool _paused) public {\n', '        if (_paused) {\n', '            pause();\n', '        }\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add extra paused logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal constant returns(bool) {\n', '        return super.validPurchase() && !paused;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', '* @dev Parent crowdsale contract with support for time-based and amount based bonuses \n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '* \n', '*/\n', 'contract BonusCrowdsale is Crowdsale, Ownable {\n', '\n', '    // Constants\n', '    // The following will be populated by main crowdsale contract\n', '    uint32[] public BONUS_TIMES;\n', '    uint32[] public BONUS_TIMES_VALUES;\n', '    uint32[] public BONUS_AMOUNTS;\n', '    uint32[] public BONUS_AMOUNTS_VALUES;\n', '    uint public constant BONUS_COEFF = 1000; // Values should be 10x percents, value 1000 = 100%\n', '    \n', '    // Members\n', '    uint public tokenPriceInCents;\n', '\n', '    /**\n', '    * @dev Contructor\n', '    * @param _tokenPriceInCents token price in USD cents. The price is fixed\n', '    */\n', '    function BonusCrowdsale(uint256 _tokenPriceInCents) public {\n', '        tokenPriceInCents = _tokenPriceInCents;\n', '    }\n', '\n', '    /**\n', '    * @dev Retrieve length of bonuses by time array\n', '    * @return Bonuses by time array length\n', '    */\n', '    function bonusesForTimesCount() public constant returns(uint) {\n', '        return BONUS_TIMES.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets bonuses for time\n', '    */\n', '    function setBonusesForTimes(uint32[] times, uint32[] values) public onlyOwner {\n', '        require(times.length == values.length);\n', '        for (uint i = 0; i + 1 < times.length; i++) {\n', '            require(times[i] < times[i+1]);\n', '        }\n', '\n', '        BONUS_TIMES = times;\n', '        BONUS_TIMES_VALUES = values;\n', '    }\n', '\n', '    /**\n', '    * @dev Retrieve length of bonuses by amounts array\n', '    * @return Bonuses by amounts array length\n', '    */\n', '    function bonusesForAmountsCount() public constant returns(uint) {\n', '        return BONUS_AMOUNTS.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets bonuses for USD amounts\n', '    */\n', '    function setBonusesForAmounts(uint32[] amounts, uint32[] values) public onlyOwner {\n', '        require(amounts.length == values.length);\n', '        for (uint i = 0; i + 1 < amounts.length; i++) {\n', '            require(amounts[i] > amounts[i+1]);\n', '        }\n', '\n', '        BONUS_AMOUNTS = amounts;\n', '        BONUS_AMOUNTS_VALUES = values;\n', '    }\n', '\n', '    /**\n', '    * @dev Overrided buyTokens method of parent Crowdsale contract  to provide bonus by changing and restoring rate variable\n', '    * @param beneficiary walelt of investor to receive tokens\n', '    */\n', '    function buyTokens(address beneficiary) public payable {\n', '        // Compute usd amount = wei * catsInEth * usdcentsInCat / usdcentsPerUsd / weisPerEth\n', '        uint256 usdValue = msg.value.mul(rate).mul(tokenPriceInCents).div(100).div(1 ether); \n', '        \n', '        // Compute time and amount bonus\n', '        uint256 bonus = computeBonus(usdValue);\n', '\n', '        // Apply bonus by adjusting and restoring rate member\n', '        uint256 oldRate = rate;\n', '        rate = rate.mul(BONUS_COEFF.add(bonus)).div(BONUS_COEFF);\n', '        super.buyTokens(beneficiary);\n', '        rate = oldRate;\n', '    }\n', '\n', '    /**\n', '    * @dev Computes overall bonus based on time of contribution and amount of contribution. \n', '    * The total bonus is the sum of bonus by time and bonus by amount\n', '    * @return bonus percentage scaled by 10\n', '    */\n', '    function computeBonus(uint256 usdValue) public constant returns(uint256) {\n', '        return computeAmountBonus(usdValue).add(computeTimeBonus());\n', '    }\n', '\n', '    /**\n', '    * @dev Computes bonus based on time of contribution relative to the beginning of crowdsale\n', '    * @return bonus percentage scaled by 10\n', '    */\n', '    function computeTimeBonus() public constant returns(uint256) {\n', '        require(now >= startTime);\n', '\n', '        for (uint i = 0; i < BONUS_TIMES.length; i++) {\n', '            if (now.sub(startTime) <= BONUS_TIMES[i]) {\n', '                return BONUS_TIMES_VALUES[i];\n', '            }\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Computes bonus based on amount of contribution\n', '    * @return bonus percentage scaled by 10\n', '    */\n', '    function computeAmountBonus(uint256 usdValue) public constant returns(uint256) {\n', '        for (uint i = 0; i < BONUS_AMOUNTS.length; i++) {\n', '            if (usdValue >= BONUS_AMOUNTS[i]) {\n', '                return BONUS_AMOUNTS_VALUES[i];\n', '            }\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MintableMasterToken token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableMasterToken is MintableToken {\n', '    event MintMasterTransferred(address indexed previousMaster, address indexed newMaster);\n', '    address public mintMaster;\n', '\n', '    modifier onlyMintMasterOrOwner() {\n', '        require(msg.sender == mintMaster || msg.sender == owner);\n', '        _;\n', '    }\n', '    function MintableMasterToken() {\n', '        mintMaster = msg.sender;\n', '    }\n', '\n', '    function transferMintMaster(address newMaster) onlyOwner public {\n', '        require(newMaster != address(0));\n', '        MintMasterTransferred(mintMaster, newMaster);\n', '        mintMaster = newMaster;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyMintMasterOrOwner canMint public returns (bool) {\n', '        address oldOwner = owner;\n', '        owner = msg.sender;\n', '\n', '        bool result = super.mint(_to, _amount);\n', '\n', '        owner = oldOwner;\n', '\n', '        return result;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', '* @dev Pre main BoutsPro token ERC20 contract\n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '*/\n', 'contract BTSPToken is MintableMasterToken, PausableToken {\n', '    \n', '    // Metadata\n', '    string public constant symbol = "BOUTS";\n', '    string public constant name = "BoutsPro";\n', '    uint8 public constant decimals = 18;\n', '    string public constant version = "1.0";\n', '\n', '    function mintToAddresses(address[] addresses, uint256 amount) public onlyMintMasterOrOwner canMint {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(mint(addresses[i], amount));\n', '        }\n', '    }\n', '\n', '    function mintToAddressesAndAmounts(address[] addresses, uint256[] amounts) public onlyMintMasterOrOwner canMint {\n', '        require(addresses.length == amounts.length);\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(mint(addresses[i], amounts[i]));\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Override MintableTokenn.finishMinting() to add canMint modifier\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns(bool) {\n', '        return super.finishMinting();\n', '    }\n', '\n', '}\n', '/**\n', '* @dev Main BoutsPro PreBOU token ERC20 contract\n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '*/\n', 'contract PreBOUToken is BTSPToken, Destructible {\n', '\n', '    // Metadata\n', '    string public constant symbol = "BOUTS";\n', '    string public constant name = "BoutsPro";\n', '    uint8 public constant decimals = 18;\n', '    string public constant version = "1.0";\n', '\n', '    // Overrided destructor\n', '    function destroy() public onlyOwner {\n', '        require(mintingFinished);\n', '        super.destroy();\n', '    }\n', '\n', '    // Overrided destructor companion\n', '    function destroyAndSend(address _recipient) public onlyOwner {\n', '        require(mintingFinished);\n', '        super.destroyAndSend(_recipient);\n', '    }\n', '\n', '}\n', '\n', '  /**\n', '   * @dev Main BoutsPro Crowdsale contract. \n', '   * Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '   * \n', '   */\n', 'contract BoutsCrowdsale is MintableToken,FinalizableCrowdsale, TokensCappedCrowdsale(BoutsCrowdsale.CAP), PausableCrowdsale(true), BonusCrowdsale(BoutsCrowdsale.TOKEN_USDCENT_PRICE) {\n', '\n', '    // Constants\n', '    uint256 public constant DECIMALS = 18;\n', '    uint256 public constant CAP = 2 * (10**9) * (10**DECIMALS);              // 2B BOUT\n', '    uint256 public constant BOUTSPRO_AMOUNT = 1 * (10**9) * (10**DECIMALS);  // 1B BOUT\n', '    uint256 public constant TOKEN_USDCENT_PRICE = 10;                        // $0.10\n', '\n', '    // Variables\n', '    address public remainingTokensWallet;\n', '    address public presaleWallet;\n', '\n', '    /**\n', '    * @dev Sets BOUT to Ether rate. Will be called multiple times durign the crowdsale to adjsut the rate\n', '    * since BOUT cost is fixed in USD, but USD/ETH rate is changing\n', '    * @param _rate defines BOUT/ETH rate: 1 ETH = _rate BOUTs\n', '    */\n', '    function setRate(uint256 _rate) external onlyOwner {\n', '        require(_rate != 0x0);\n', '        rate = _rate;\n', '        RateChange(_rate);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows to adjust the crowdsale end time\n', '    */\n', '    function setEndTime(uint256 _endTime) external onlyOwner {\n', '        require(!isFinalized);\n', '        require(_endTime >= startTime);\n', '        require(_endTime >= now);\n', '        endTime = _endTime;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the wallet to forward ETH collected funds\n', '    */\n', '    function setWallet(address _wallet) external onlyOwner {\n', '        require(_wallet != 0x0);\n', '        wallet = _wallet;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the wallet to hold unsold tokens at the end of ICO\n', '    */\n', '    function setRemainingTokensWallet(address _remainingTokensWallet) external onlyOwner {\n', '        require(_remainingTokensWallet != 0x0);\n', '        remainingTokensWallet = _remainingTokensWallet;\n', '    }\n', '\n', '    // Events\n', '    event RateChange(uint256 rate);\n', '\n', '    /**\n', '    * @dev Contructor\n', '    * @param _startTime startTime of crowdsale\n', '    * @param _endTime endTime of crowdsale\n', '    * @param _rate BOUT / ETH rate\n', '    * @param _wallet wallet to forward the collected funds\n', '    * @param _remainingTokensWallet wallet to hold the unsold tokens\n', '    * @param _boutsProWallet wallet to hold the initial 1B tokens of BoutsPro\n', '    */\n', '    function BoutsCrowdsale(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        address _remainingTokensWallet,\n', '        address _boutsProWallet\n', '    ) public\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '        remainingTokensWallet = _remainingTokensWallet;\n', '        presaleWallet = this;\n', '\n', '        // allocate tokens to BoutsPro\n', '        mintTokens(_boutsProWallet, BOUTSPRO_AMOUNT);\n', '    }\n', '\n', '    // Overrided methods\n', '\n', '    /**\n', '    * @dev Creates token contract for ICO\n', '    * @return ERC20 contract associated with the crowdsale\n', '    */\n', '    function createTokenContract() internal returns(MintableToken) {\n', '        PreBOUToken token = new PreBOUToken();\n', '        token.pause();\n', '        return token;\n', '    }\n', '\n', '    /**\n', '    * @dev Finalizes the crowdsale\n', '    */\n', '    function finalization() internal {\n', '        super.finalization();\n', '\n', '        // Mint tokens up to CAP\n', '        if (token.totalSupply() < tokensCap) {\n', '            uint tokens = tokensCap.sub(token.totalSupply());\n', '            token.mint(remainingTokensWallet, tokens);\n', '        }\n', '\n', '        // disable minting of BOUTs\n', '        token.finishMinting();\n', '\n', '        // take onwership over BOUToken contract\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    // Owner methods\n', '\n', '    /**\n', '    * @dev Helper to Pause BOUToken\n', '    */\n', '    function pauseTokens() public onlyOwner {\n', '        PreBOUToken(token).pause();\n', '    }\n', '\n', '    /**\n', '    * @dev Helper to UnPause BOUToken\n', '    */\n', '    function unpauseTokens() public onlyOwner {\n', '        PreBOUToken(token).unpause();\n', '    }\n', '\n', '    /**\n', '    * @dev Allocates tokens from preSale to a special wallet. Called once as part of crowdsale setup\n', '    */\n', '    function mintPresaleTokens(uint256 tokens) public onlyOwner {\n', '        mintTokens(presaleWallet, tokens);\n', '        presaleWallet = 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer presaled tokens even on paused token contract\n', '    */\n', '    function transferPresaleTokens(address destination, uint256 amount) public onlyOwner {\n', '        unpauseTokens();\n', '        token.transfer(destination, amount);\n', '        pauseTokens();\n', '    }\n', '\n', '    // \n', '    /**\n', '    * @dev Allocates tokens for investors that contributed from website. These include\n', '    * white listed investors and investors paying with BTC/QTUM/LTC\n', '    */\n', '    function mintTokens(address beneficiary, uint256 tokens) public onlyOwner {\n', '        require(beneficiary != 0x0);\n', '        require(tokens > 0);\n', '        require(now <= endTime);                               // Crowdsale (without startTime check)\n', '        require(!isFinalized);                                 // FinalizableCrowdsale\n', '        require(token.totalSupply().add(tokens) <= tokensCap); // TokensCappedCrowdsale\n', '        \n', '        token.mint(beneficiary, tokens);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '   // require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '\n', '    finalization();\n', '    Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '\n', '\n', '/**\n', '* @dev Parent crowdsale contract is extended with support for cap in tokens\n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '* \n', '*/\n', 'contract TokensCappedCrowdsale is Crowdsale {\n', '\n', '    uint256 public tokensCap;\n', '\n', '    function TokensCappedCrowdsale(uint256 _tokensCap) public {\n', '        tokensCap = _tokensCap;\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add extra tokens cap logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal constant returns(bool) {\n', '        uint256 tokens = token.totalSupply().add(msg.value.mul(rate));\n', '        bool withinCap = tokens <= tokensCap;\n', '        return super.validPurchase() && withinCap;\n', '    }\n', '\n', '    // overriding Crowdsale#hasEnded to add tokens cap logic\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns(bool) {\n', '        bool capReached = token.totalSupply() >= tokensCap;\n', '        return super.hasEnded() || capReached;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', '* @dev Parent crowdsale contract extended with support for pausable crowdsale, meaning crowdsale can be paused by owner at any time\n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '* \n', '* While the contract is in paused state, the contributions will be rejected\n', '* \n', '*/\n', 'contract PausableCrowdsale is Crowdsale, Pausable {\n', '\n', '    function PausableCrowdsale(bool _paused) public {\n', '        if (_paused) {\n', '            pause();\n', '        }\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add extra paused logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal constant returns(bool) {\n', '        return super.validPurchase() && !paused;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', '* @dev Parent crowdsale contract with support for time-based and amount based bonuses \n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '* \n', '*/\n', 'contract BonusCrowdsale is Crowdsale, Ownable {\n', '\n', '    // Constants\n', '    // The following will be populated by main crowdsale contract\n', '    uint32[] public BONUS_TIMES;\n', '    uint32[] public BONUS_TIMES_VALUES;\n', '    uint32[] public BONUS_AMOUNTS;\n', '    uint32[] public BONUS_AMOUNTS_VALUES;\n', '    uint public constant BONUS_COEFF = 1000; // Values should be 10x percents, value 1000 = 100%\n', '    \n', '    // Members\n', '    uint public tokenPriceInCents;\n', '\n', '    /**\n', '    * @dev Contructor\n', '    * @param _tokenPriceInCents token price in USD cents. The price is fixed\n', '    */\n', '    function BonusCrowdsale(uint256 _tokenPriceInCents) public {\n', '        tokenPriceInCents = _tokenPriceInCents;\n', '    }\n', '\n', '    /**\n', '    * @dev Retrieve length of bonuses by time array\n', '    * @return Bonuses by time array length\n', '    */\n', '    function bonusesForTimesCount() public constant returns(uint) {\n', '        return BONUS_TIMES.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets bonuses for time\n', '    */\n', '    function setBonusesForTimes(uint32[] times, uint32[] values) public onlyOwner {\n', '        require(times.length == values.length);\n', '        for (uint i = 0; i + 1 < times.length; i++) {\n', '            require(times[i] < times[i+1]);\n', '        }\n', '\n', '        BONUS_TIMES = times;\n', '        BONUS_TIMES_VALUES = values;\n', '    }\n', '\n', '    /**\n', '    * @dev Retrieve length of bonuses by amounts array\n', '    * @return Bonuses by amounts array length\n', '    */\n', '    function bonusesForAmountsCount() public constant returns(uint) {\n', '        return BONUS_AMOUNTS.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets bonuses for USD amounts\n', '    */\n', '    function setBonusesForAmounts(uint32[] amounts, uint32[] values) public onlyOwner {\n', '        require(amounts.length == values.length);\n', '        for (uint i = 0; i + 1 < amounts.length; i++) {\n', '            require(amounts[i] > amounts[i+1]);\n', '        }\n', '\n', '        BONUS_AMOUNTS = amounts;\n', '        BONUS_AMOUNTS_VALUES = values;\n', '    }\n', '\n', '    /**\n', '    * @dev Overrided buyTokens method of parent Crowdsale contract  to provide bonus by changing and restoring rate variable\n', '    * @param beneficiary walelt of investor to receive tokens\n', '    */\n', '    function buyTokens(address beneficiary) public payable {\n', '        // Compute usd amount = wei * catsInEth * usdcentsInCat / usdcentsPerUsd / weisPerEth\n', '        uint256 usdValue = msg.value.mul(rate).mul(tokenPriceInCents).div(100).div(1 ether); \n', '        \n', '        // Compute time and amount bonus\n', '        uint256 bonus = computeBonus(usdValue);\n', '\n', '        // Apply bonus by adjusting and restoring rate member\n', '        uint256 oldRate = rate;\n', '        rate = rate.mul(BONUS_COEFF.add(bonus)).div(BONUS_COEFF);\n', '        super.buyTokens(beneficiary);\n', '        rate = oldRate;\n', '    }\n', '\n', '    /**\n', '    * @dev Computes overall bonus based on time of contribution and amount of contribution. \n', '    * The total bonus is the sum of bonus by time and bonus by amount\n', '    * @return bonus percentage scaled by 10\n', '    */\n', '    function computeBonus(uint256 usdValue) public constant returns(uint256) {\n', '        return computeAmountBonus(usdValue).add(computeTimeBonus());\n', '    }\n', '\n', '    /**\n', '    * @dev Computes bonus based on time of contribution relative to the beginning of crowdsale\n', '    * @return bonus percentage scaled by 10\n', '    */\n', '    function computeTimeBonus() public constant returns(uint256) {\n', '        require(now >= startTime);\n', '\n', '        for (uint i = 0; i < BONUS_TIMES.length; i++) {\n', '            if (now.sub(startTime) <= BONUS_TIMES[i]) {\n', '                return BONUS_TIMES_VALUES[i];\n', '            }\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Computes bonus based on amount of contribution\n', '    * @return bonus percentage scaled by 10\n', '    */\n', '    function computeAmountBonus(uint256 usdValue) public constant returns(uint256) {\n', '        for (uint i = 0; i < BONUS_AMOUNTS.length; i++) {\n', '            if (usdValue >= BONUS_AMOUNTS[i]) {\n', '                return BONUS_AMOUNTS_VALUES[i];\n', '            }\n', '        }\n', '\n', '        return 0;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Destructible\n', ' * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n', ' */\n', 'contract Destructible is Ownable {\n', '\n', '  function Destructible() public payable { }\n', '\n', '  /**\n', '   * @dev Transfers the current balance to the owner and terminates the contract.\n', '   */\n', '  function destroy() onlyOwner public {\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function destroyAndSend(address _recipient) onlyOwner public {\n', '    selfdestruct(_recipient);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MintableMasterToken token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableMasterToken is MintableToken {\n', '    event MintMasterTransferred(address indexed previousMaster, address indexed newMaster);\n', '    address public mintMaster;\n', '\n', '    modifier onlyMintMasterOrOwner() {\n', '        require(msg.sender == mintMaster || msg.sender == owner);\n', '        _;\n', '    }\n', '    function MintableMasterToken() {\n', '        mintMaster = msg.sender;\n', '    }\n', '\n', '    function transferMintMaster(address newMaster) onlyOwner public {\n', '        require(newMaster != address(0));\n', '        MintMasterTransferred(mintMaster, newMaster);\n', '        mintMaster = newMaster;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyMintMasterOrOwner canMint public returns (bool) {\n', '        address oldOwner = owner;\n', '        owner = msg.sender;\n', '\n', '        bool result = super.mint(_to, _amount);\n', '\n', '        owner = oldOwner;\n', '\n', '        return result;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', '* @dev Pre main BoutsPro token ERC20 contract\n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '*/\n', 'contract BTSPToken is MintableMasterToken, PausableToken {\n', '    \n', '    // Metadata\n', '    string public constant symbol = "BOUTS";\n', '    string public constant name = "BoutsPro";\n', '    uint8 public constant decimals = 18;\n', '    string public constant version = "1.0";\n', '\n', '    function mintToAddresses(address[] addresses, uint256 amount) public onlyMintMasterOrOwner canMint {\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(mint(addresses[i], amount));\n', '        }\n', '    }\n', '\n', '    function mintToAddressesAndAmounts(address[] addresses, uint256[] amounts) public onlyMintMasterOrOwner canMint {\n', '        require(addresses.length == amounts.length);\n', '        for (uint i = 0; i < addresses.length; i++) {\n', '            require(mint(addresses[i], amounts[i]));\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Override MintableTokenn.finishMinting() to add canMint modifier\n', '    */\n', '    function finishMinting() onlyOwner canMint public returns(bool) {\n', '        return super.finishMinting();\n', '    }\n', '\n', '}\n', '/**\n', '* @dev Main BoutsPro PreBOU token ERC20 contract\n', '* Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '*/\n', 'contract PreBOUToken is BTSPToken, Destructible {\n', '\n', '    // Metadata\n', '    string public constant symbol = "BOUTS";\n', '    string public constant name = "BoutsPro";\n', '    uint8 public constant decimals = 18;\n', '    string public constant version = "1.0";\n', '\n', '    // Overrided destructor\n', '    function destroy() public onlyOwner {\n', '        require(mintingFinished);\n', '        super.destroy();\n', '    }\n', '\n', '    // Overrided destructor companion\n', '    function destroyAndSend(address _recipient) public onlyOwner {\n', '        require(mintingFinished);\n', '        super.destroyAndSend(_recipient);\n', '    }\n', '\n', '}\n', '\n', '  /**\n', '   * @dev Main BoutsPro Crowdsale contract. \n', '   * Based on references from OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity\n', '   * \n', '   */\n', 'contract BoutsCrowdsale is MintableToken,FinalizableCrowdsale, TokensCappedCrowdsale(BoutsCrowdsale.CAP), PausableCrowdsale(true), BonusCrowdsale(BoutsCrowdsale.TOKEN_USDCENT_PRICE) {\n', '\n', '    // Constants\n', '    uint256 public constant DECIMALS = 18;\n', '    uint256 public constant CAP = 2 * (10**9) * (10**DECIMALS);              // 2B BOUT\n', '    uint256 public constant BOUTSPRO_AMOUNT = 1 * (10**9) * (10**DECIMALS);  // 1B BOUT\n', '    uint256 public constant TOKEN_USDCENT_PRICE = 10;                        // $0.10\n', '\n', '    // Variables\n', '    address public remainingTokensWallet;\n', '    address public presaleWallet;\n', '\n', '    /**\n', '    * @dev Sets BOUT to Ether rate. Will be called multiple times durign the crowdsale to adjsut the rate\n', '    * since BOUT cost is fixed in USD, but USD/ETH rate is changing\n', '    * @param _rate defines BOUT/ETH rate: 1 ETH = _rate BOUTs\n', '    */\n', '    function setRate(uint256 _rate) external onlyOwner {\n', '        require(_rate != 0x0);\n', '        rate = _rate;\n', '        RateChange(_rate);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows to adjust the crowdsale end time\n', '    */\n', '    function setEndTime(uint256 _endTime) external onlyOwner {\n', '        require(!isFinalized);\n', '        require(_endTime >= startTime);\n', '        require(_endTime >= now);\n', '        endTime = _endTime;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the wallet to forward ETH collected funds\n', '    */\n', '    function setWallet(address _wallet) external onlyOwner {\n', '        require(_wallet != 0x0);\n', '        wallet = _wallet;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the wallet to hold unsold tokens at the end of ICO\n', '    */\n', '    function setRemainingTokensWallet(address _remainingTokensWallet) external onlyOwner {\n', '        require(_remainingTokensWallet != 0x0);\n', '        remainingTokensWallet = _remainingTokensWallet;\n', '    }\n', '\n', '    // Events\n', '    event RateChange(uint256 rate);\n', '\n', '    /**\n', '    * @dev Contructor\n', '    * @param _startTime startTime of crowdsale\n', '    * @param _endTime endTime of crowdsale\n', '    * @param _rate BOUT / ETH rate\n', '    * @param _wallet wallet to forward the collected funds\n', '    * @param _remainingTokensWallet wallet to hold the unsold tokens\n', '    * @param _boutsProWallet wallet to hold the initial 1B tokens of BoutsPro\n', '    */\n', '    function BoutsCrowdsale(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        address _wallet,\n', '        address _remainingTokensWallet,\n', '        address _boutsProWallet\n', '    ) public\n', '        Crowdsale(_startTime, _endTime, _rate, _wallet)\n', '    {\n', '        remainingTokensWallet = _remainingTokensWallet;\n', '        presaleWallet = this;\n', '\n', '        // allocate tokens to BoutsPro\n', '        mintTokens(_boutsProWallet, BOUTSPRO_AMOUNT);\n', '    }\n', '\n', '    // Overrided methods\n', '\n', '    /**\n', '    * @dev Creates token contract for ICO\n', '    * @return ERC20 contract associated with the crowdsale\n', '    */\n', '    function createTokenContract() internal returns(MintableToken) {\n', '        PreBOUToken token = new PreBOUToken();\n', '        token.pause();\n', '        return token;\n', '    }\n', '\n', '    /**\n', '    * @dev Finalizes the crowdsale\n', '    */\n', '    function finalization() internal {\n', '        super.finalization();\n', '\n', '        // Mint tokens up to CAP\n', '        if (token.totalSupply() < tokensCap) {\n', '            uint tokens = tokensCap.sub(token.totalSupply());\n', '            token.mint(remainingTokensWallet, tokens);\n', '        }\n', '\n', '        // disable minting of BOUTs\n', '        token.finishMinting();\n', '\n', '        // take onwership over BOUToken contract\n', '        token.transferOwnership(owner);\n', '    }\n', '\n', '    // Owner methods\n', '\n', '    /**\n', '    * @dev Helper to Pause BOUToken\n', '    */\n', '    function pauseTokens() public onlyOwner {\n', '        PreBOUToken(token).pause();\n', '    }\n', '\n', '    /**\n', '    * @dev Helper to UnPause BOUToken\n', '    */\n', '    function unpauseTokens() public onlyOwner {\n', '        PreBOUToken(token).unpause();\n', '    }\n', '\n', '    /**\n', '    * @dev Allocates tokens from preSale to a special wallet. Called once as part of crowdsale setup\n', '    */\n', '    function mintPresaleTokens(uint256 tokens) public onlyOwner {\n', '        mintTokens(presaleWallet, tokens);\n', '        presaleWallet = 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer presaled tokens even on paused token contract\n', '    */\n', '    function transferPresaleTokens(address destination, uint256 amount) public onlyOwner {\n', '        unpauseTokens();\n', '        token.transfer(destination, amount);\n', '        pauseTokens();\n', '    }\n', '\n', '    // \n', '    /**\n', '    * @dev Allocates tokens for investors that contributed from website. These include\n', '    * white listed investors and investors paying with BTC/QTUM/LTC\n', '    */\n', '    function mintTokens(address beneficiary, uint256 tokens) public onlyOwner {\n', '        require(beneficiary != 0x0);\n', '        require(tokens > 0);\n', '        require(now <= endTime);                               // Crowdsale (without startTime check)\n', '        require(!isFinalized);                                 // FinalizableCrowdsale\n', '        require(token.totalSupply().add(tokens) <= tokensCap); // TokensCappedCrowdsale\n', '        \n', '        token.mint(beneficiary, tokens);\n', '    }\n', '\n', '}']
