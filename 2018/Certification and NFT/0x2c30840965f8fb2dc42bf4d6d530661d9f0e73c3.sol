['pragma solidity 0.4.18;\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/SvdMainSale.sol\n', '\n', '/**\n', ' * @title SvdMainSale\n', ' * @dev This crowdsale contract filters investments made according to\n', ' *         - time\n', ' *         - amount invested (in Wei)\n', ' *      and forwards them to a predefined wallet in case all the filtering conditions are met.\n', ' */\n', 'contract SvdMainSale is Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // address where funds are collected\n', '    address public wallet;\n', '\n', '    // track the investments made from each address\n', '    mapping(address => uint256) public investments;\n', '\n', '    // total amount of funds raised (in wei)\n', '    uint256 public weiRaised;\n', '\n', '    uint256 public minWeiInvestment;\n', '    uint256 public maxWeiInvestment;\n', '\n', '    /**\n', '     * @dev Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     */\n', '    event Investment(address indexed purchaser,\n', '        address indexed beneficiary,\n', '        uint256 value);\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param _startTime the time to begin the crowdsale in seconds since the epoch\n', '     * @param _endTime the time to begin the crowdsale in seconds since the epoch. Must be later than _startTime.\n', '     * @param _minWeiInvestment the minimum amount for one single investment (in Wei)\n', '     * @param _maxWeiInvestment the maximum amount for one single investment (in Wei)\n', '     * @param _wallet the address to which funds will be directed to\n', '     */\n', '    function SvdMainSale(uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _minWeiInvestment,\n', '        uint256 _maxWeiInvestment,\n', '        address _wallet) public {\n', '        require(_endTime > _startTime);\n', '        require(_minWeiInvestment > 0);\n', '        require(_maxWeiInvestment > _minWeiInvestment);\n', '        require(_wallet != address(0));\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '\n', '        minWeiInvestment = _minWeiInvestment;\n', '        maxWeiInvestment = _maxWeiInvestment;\n', '\n', '        wallet = _wallet;\n', '    }\n', '\n', '    /**\n', '     * @dev External payable function to receive funds and buy tokens.\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Adapted Crowdsale#hasStarted\n', '     * @return true if SvdMainSale event has started\n', '     */\n', '    function hasStarted() external view returns (bool) {\n', '        return now >= startTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Adapted Crowdsale#hasEnded\n', '     * @return true if SvdMainSale event has ended\n', '     */\n', '    function hasEnded() external view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Low level token purchase function\n', '     */\n', '    function buyTokens(address beneficiary) public whenNotPaused payable {\n', '        require(beneficiary != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // track how much wei is raised in total\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        // track how much was transfered by the specific investor\n', '        investments[beneficiary] = investments[beneficiary].add(weiAmount);\n', '\n', '        Investment(msg.sender, beneficiary, weiAmount);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    // send ether (wei) to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // overriding Crowdsale#validPurchase to add extra cap logic\n', '    // @return true if investors can buy at the moment\n', '    function validPurchase() internal view returns (bool) {\n', '        if (msg.value < minWeiInvestment || msg.value > maxWeiInvestment) {\n', '            return false;\n', '        }\n', '        bool withinPeriod = (now >= startTime) && (now <= endTime); \n', '        return withinPeriod;\n', '    }\n', '}']