['pragma solidity ^0.4.20;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract ufoodoToken is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // Token where will be stored and managed\n', '    address public vault = this;\n', '\n', '    string public name = "ufoodo Token";\n', '    string public symbol = "UFT";\n', '    uint8 public decimals = 18;\n', '\n', '    // Total Supply DAICO: 500,000,000 UFT\n', '    uint256 public INITIAL_SUPPLY = 500000000 * (10**uint256(decimals));\n', '    // 400,000,000 UFT for DAICO at Q4 2018\n', '    uint256 public supplyDAICO = INITIAL_SUPPLY.mul(80).div(100);\n', '\n', '    address public salesAgent;\n', '    mapping (address => bool) public owners;\n', '\n', '    event SalesAgentPermissionsTransferred(address indexed previousSalesAgent, address indexed newSalesAgent);\n', '    event SalesAgentRemoved(address indexed currentSalesAgent);\n', '\n', '    // 100,000,000 Seed UFT\n', '    function supplySeed() public view returns (uint256) {\n', '        uint256 _supplySeed = INITIAL_SUPPLY.mul(20).div(100);\n', '        return _supplySeed;\n', '    }\n', '    // Constructor\n', '    function ufoodoToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '    // Transfer sales agent permissions to another account\n', '    function transferSalesAgentPermissions(address _salesAgent) onlyOwner public {\n', '        emit SalesAgentPermissionsTransferred(salesAgent, _salesAgent);\n', '        salesAgent = _salesAgent;\n', '    }\n', '\n', '    // Remove sales agent from token\n', '    function removeSalesAgent() onlyOwner public {\n', '        emit SalesAgentRemoved(salesAgent);\n', '        salesAgent = address(0);\n', '    }\n', '\n', '    function transferFromVault(address _from, address _to, uint256 _amount) public {\n', '        require(salesAgent == msg.sender);\n', '        balances[vault] = balances[vault].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '    }\n', '\n', '    // Lock the DAICO supply until 2018-09-01 14:00:00\n', '    // Which can then transferred to the created DAICO contract\n', '    function transferDaico(address _to) public onlyOwner returns(bool) {\n', '        require(now >= 1535810400);\n', '\n', '        balances[vault] = balances[vault].sub(supplyDAICO);\n', '        balances[_to] = balances[_to].add(supplyDAICO);\n', '        emit Transfer(vault, _to, supplyDAICO);\n', '        return(true);\n', '    }\n', '\n', '}\n', '\n', 'contract SeedSale is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    // Tokens that will be sold\n', '    ufoodoToken public token;\n', '\n', '    // Time in Unix timestamp\n', '    // Start: 01-Apr-18 14:00:00 UTC\n', '    uint256 public constant seedStartTime = 1522591200;\n', '    // End: 31-May-18 14:00:00 UTC\n', '    uint256 public constant seedEndTime = 1527775200;\n', '\n', '    uint256 public seedSupply_ = 0;\n', '\n', '    // Update all funds raised that are not validated yet, 140 ether from private sale already added\n', '    uint256 public fundsRaised = 140 ether;\n', '\n', '    // Update only funds validated, 140 ether from private sale already added\n', '    uint256 public fundsRaisedFinalized = 140 ether; //\n', '\n', '    // Lock tokens for team\n', '    uint256 public releasedLockedAmount = 0;\n', '\n', '    // All pending UFT which needs to validated before transfered to contributors\n', '    uint256 public pendingUFT = 0;\n', '    // Conclude UFT which are transferred to contributer if soft cap reached and contributor is validated\n', '    uint256 public concludeUFT = 0;\n', '\n', '    uint256 public constant softCap = 200 ether;\n', '    uint256 public constant hardCap = 3550 ether;\n', '    uint256 public constant minContrib = 0.1 ether;\n', '\n', '    uint256 public lockedTeamUFT = 0;\n', '    uint256 public privateReservedUFT = 0;\n', '\n', '    // Will updated in condition with funds raised finalized\n', '    bool public SoftCapReached = false;\n', '    bool public hardCapReached = false;\n', '    bool public seedSaleFinished = false;\n', '\n', '    //Refund will enabled if seed sale End and min cap not reached\n', '    bool public refundAllowed = false;\n', '\n', '    // Address where only validated funds will be transfered\n', '    address public fundWallet = 0xf7d4C80DE0e2978A1C5ef3267F488B28499cD22E;\n', '\n', '    // Amount of ether in wei, needs to be validated first\n', '    mapping(address => uint256) public weiContributedPending;\n', '    // Amount of ether in wei validated\n', '    mapping(address => uint256) public weiContributedConclude;\n', '    // Amount of UFT which will reserved first until the contributor is validated\n', '    mapping(address => uint256) public pendingAmountUFT;\n', '\n', '    event OpenTier(uint256 activeTier);\n', '    event LogContributionPending(address contributor, uint256 amountWei, uint256 tokenAmount, uint256 activeTier, uint256 timestamp);\n', '    event LogContributionConclude(address contributor, uint256 amountWei, uint256 tokenAmount, uint256 timeStamp);\n', '    event ValidationFailed(address contributor, uint256 amountWeiRefunded, uint timestamp);\n', '\n', '    // Initialized Tier\n', '    uint public activeTier = 0;\n', '\n', '    // Max ether per tier to collect\n', '    uint256[8] public tierCap = [\n', '        400 ether,\n', '        420 ether,\n', '        380 ether,\n', '        400 ether,\n', '        410 ether,\n', '        440 ether,\n', '        460 ether,\n', '        500 ether\n', '    ];\n', '\n', '    // Based on 1 Ether = 12500\n', '    // Tokenrate + tokenBonus = totalAmount the contributor received\n', '    uint256[8] public tierTokens = [\n', '        17500, //40%\n', '        16875, //35%\n', '        16250, //30%\n', '        15625, //25%\n', '        15000, //20%\n', '        13750, //10%\n', '        13125, //5%\n', '        12500  //0%\n', '    ];\n', '\n', '    // Will be updated due wei contribution\n', '    uint256[8] public activeFundRaisedTier = [\n', '        0,\n', '        0,\n', '        0,\n', '        0,\n', '        0,\n', '        0,\n', '        0,\n', '        0\n', '    ];\n', '\n', '    // Constructor\n', '    function SeedSale(address _vault) public {\n', '        token = ufoodoToken(_vault);\n', '        privateReservedUFT = token.supplySeed().mul(4).div(100);\n', '        lockedTeamUFT = token.supplySeed().mul(20).div(100);\n', '        seedSupply_ = token.supplySeed();\n', '    }\n', '\n', '    function seedStarted() public view returns (bool) {\n', '        return now >= seedStartTime;\n', '    }\n', '\n', '    function seedEnded() public view returns (bool) {\n', '        return now >= seedEndTime || fundsRaised >= hardCap;\n', '    }\n', '\n', '    modifier checkContribution() {\n', '        require(canContribute());\n', '        _;\n', '    }\n', '\n', '    function canContribute() internal view returns(bool) {\n', '        if(!seedStarted() || seedEnded()) {\n', '            return false;\n', '        }\n', '        if(msg.value < minContrib) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // Fallback function\n', '    function() payable public whenNotPaused {\n', '        buyUFT(msg.sender);\n', '    }\n', '\n', '    // Process UFT contribution\n', '    function buyUFT(address contributor) public whenNotPaused checkContribution payable {\n', '        uint256 weiAmount = msg.value;\n', '        uint256 refund = 0;\n', '        uint256 _tierIndex = activeTier;\n', '        uint256 _activeTierCap = tierCap[_tierIndex];\n', '        uint256 _activeFundRaisedTier = activeFundRaisedTier[_tierIndex];\n', '\n', '        require(_activeFundRaisedTier < _activeTierCap);\n', '\n', '        // Checks Amoount of eth still can contributed to the active Tier\n', '        uint256 tierCapOverSold = _activeTierCap.sub(_activeFundRaisedTier);\n', '\n', '        // if contributer amount will oversold the active tier cap, partial\n', '        // purchase will proceed, rest contributer amount will refunded to contributor\n', '        if(tierCapOverSold < weiAmount) {\n', '            weiAmount = tierCapOverSold;\n', '            refund = msg.value.sub(weiAmount);\n', '\n', '        }\n', '        // Calculate the amount of tokens the Contributor will receive\n', '        uint256 amountUFT = weiAmount.mul(tierTokens[_tierIndex]);\n', '\n', '        // Update status\n', '        fundsRaised = fundsRaised.add(weiAmount);\n', '        activeFundRaisedTier[_tierIndex] = activeFundRaisedTier[_tierIndex].add(weiAmount);\n', '        weiContributedPending[contributor] = weiContributedPending[contributor].add(weiAmount);\n', '        pendingAmountUFT[contributor] = pendingAmountUFT[contributor].add(amountUFT);\n', '        pendingUFT = pendingUFT.add(amountUFT);\n', '\n', '        // partial process, refund rest value\n', '        if(refund > 0) {\n', '            msg.sender.transfer(refund);\n', '        }\n', '\n', '        emit LogContributionPending(contributor, weiAmount, amountUFT, _tierIndex, now);\n', '    }\n', '\n', '    function softCapReached() public returns (bool) {\n', '        if (fundsRaisedFinalized >= softCap) {\n', '            SoftCapReached = true;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // Next Tier will increment manually and Paused by the team to guarantee safe transition\n', '    // Initialized next tier if previous tier sold out\n', '    // For contributor safety we pause the seedSale process\n', '    function nextTier() onlyOwner public {\n', '        require(paused == true);\n', '        require(activeTier < 7);\n', '        uint256 _tierIndex = activeTier;\n', '        activeTier = _tierIndex +1;\n', '        emit OpenTier(activeTier);\n', '    }\n', '\n', '    // Validation Update Process\n', '    // After we finished the kyc process, we update each validated contributor and transfer if softCapReached the tokens\n', '    // If the contributor is not validated due failed validation, the contributed wei amount will refundet back to the contributor\n', '    function validationPassed(address contributor) onlyOwner public returns (bool) {\n', '        require(contributor != 0x0);\n', '\n', '        uint256 amountFinalized = pendingAmountUFT[contributor];\n', '        pendingAmountUFT[contributor] = 0;\n', '        token.transferFromVault(token, contributor, amountFinalized);\n', '\n', '        // Update status\n', '        uint256 _fundsRaisedFinalized = fundsRaisedFinalized.add(weiContributedPending[contributor]);\n', '        fundsRaisedFinalized = _fundsRaisedFinalized;\n', '        concludeUFT = concludeUFT.add(amountFinalized);\n', '\n', '        weiContributedConclude[contributor] = weiContributedConclude[contributor].add(weiContributedPending[contributor]);\n', '\n', '        emit LogContributionConclude(contributor, weiContributedPending[contributor], amountFinalized, now);\n', '        softCapReached();\n', '        // Amount finalized tokes update status\n', '\n', '        return true;\n', '    }\n', '\n', '    // Update which address is not validated\n', '    // By updating the address, the contributor will receive his contribution back\n', '    function validationFailed(address contributor) onlyOwner public returns (bool) {\n', '        require(contributor != 0x0);\n', '        require(weiContributedPending[contributor] > 0);\n', '\n', '        uint256 currentBalance = weiContributedPending[contributor];\n', '\n', '        weiContributedPending[contributor] = 0;\n', '        contributor.transfer(currentBalance);\n', '        emit ValidationFailed(contributor, currentBalance, now);\n', '        return true;\n', '    }\n', '\n', '    // If seed sale ends and soft cap is not reached, Contributer can claim their funds\n', '    function refund() public {\n', '        require(refundAllowed);\n', '        require(!SoftCapReached);\n', '        require(weiContributedPending[msg.sender] > 0);\n', '\n', '        uint256 currentBalance = weiContributedPending[msg.sender];\n', '\n', '        weiContributedPending[msg.sender] = 0;\n', '        msg.sender.transfer(currentBalance);\n', '    }\n', '\n', '\n', '   // Allows only to refund the contributed amount that passed the validation and reached the softcap\n', '    function withdrawFunds(uint256 _weiAmount) public onlyOwner {\n', '        require(SoftCapReached);\n', '        fundWallet.transfer(_weiAmount);\n', '    }\n', '\n', '    /*\n', '     * If tokens left make a priveledge token sale for contributor that are already validated\n', '     * make a new date time for left tokens only for priveledge whitelisted\n', '     * If not enouhgt tokens left for a sale send directly to locked contract/ vault\n', '     */\n', '    function seedSaleTokenLeft(address _tokenContract) public onlyOwner {\n', '        require(seedEnded());\n', '        uint256 amountLeft = pendingUFT.sub(concludeUFT);\n', '        token.transferFromVault(token, _tokenContract, amountLeft );\n', '    }\n', '\n', '\n', '    function vestingToken(address _beneficiary) public onlyOwner returns (bool) {\n', '      require(SoftCapReached);\n', '      uint256 release_1 = seedStartTime.add(180 days);\n', '      uint256 release_2 = release_1.add(180 days);\n', '      uint256 release_3 = release_2.add(180 days);\n', '      uint256 release_4 = release_3.add(180 days);\n', '\n', '      //20,000,000 UFT total splitted in 4 time periods\n', '      uint256 lockedAmount_1 = lockedTeamUFT.mul(25).div(100);\n', '      uint256 lockedAmount_2 = lockedTeamUFT.mul(25).div(100);\n', '      uint256 lockedAmount_3 = lockedTeamUFT.mul(25).div(100);\n', '      uint256 lockedAmount_4 = lockedTeamUFT.mul(25).div(100);\n', '\n', '      if(seedStartTime >= release_1 && releasedLockedAmount < lockedAmount_1) {\n', '        token.transferFromVault(token, _beneficiary, lockedAmount_1 );\n', '        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_1);\n', '        return true;\n', '\n', '      } else if(seedStartTime >= release_2 && releasedLockedAmount < lockedAmount_2.mul(2)) {\n', '        token.transferFromVault(token, _beneficiary, lockedAmount_2 );\n', '        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_2);\n', '        return true;\n', '\n', '      } else if(seedStartTime >= release_3 && releasedLockedAmount < lockedAmount_3.mul(3)) {\n', '        token.transferFromVault(token, _beneficiary, lockedAmount_3 );\n', '        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_3);\n', '        return true;\n', '\n', '      } else if(seedStartTime >= release_4 && releasedLockedAmount < lockedAmount_4.mul(4)) {\n', '        token.transferFromVault(token, _beneficiary, lockedAmount_4 );\n', '        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_4);\n', '        return true;\n', '      }\n', '\n', '    }\n', '\n', '    // Total Reserved from Private Sale Contributor 4,000,000 UFT\n', '    function transferPrivateReservedUFT(address _beneficiary, uint256 _amount) public onlyOwner {\n', '        require(SoftCapReached);\n', '        require(_amount > 0);\n', '        require(privateReservedUFT >= _amount);\n', '\n', '        token.transferFromVault(token, _beneficiary, _amount);\n', '        privateReservedUFT = privateReservedUFT.sub(_amount);\n', '\n', '    }\n', '\n', '     function finalizeSeedSale() public onlyOwner {\n', '        if(seedStartTime >= seedEndTime && SoftCapReached) {\n', '\n', '        // Bounty Campaign: 5,000,000 UFT\n', '        uint256 bountyAmountUFT = token.supplySeed().mul(5).div(100);\n', '        token.transferFromVault(token, fundWallet, bountyAmountUFT);\n', '\n', '        // Reserved Company: 20,000,000 UFT\n', '        uint256 reservedCompanyUFT = token.supplySeed().mul(20).div(100);\n', '        token.transferFromVault(token, fundWallet, reservedCompanyUFT);\n', '\n', '        } else if(seedStartTime >= seedEndTime && !SoftCapReached) {\n', '\n', '            // Enable fund`s crowdsale refund if soft cap is not reached\n', '            refundAllowed = true;\n', '\n', '            token.transferFromVault(token, owner, seedSupply_);\n', '            seedSupply_ = 0;\n', '\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', 'contract ufoodoToken is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // Token where will be stored and managed\n', '    address public vault = this;\n', '\n', '    string public name = "ufoodo Token";\n', '    string public symbol = "UFT";\n', '    uint8 public decimals = 18;\n', '\n', '    // Total Supply DAICO: 500,000,000 UFT\n', '    uint256 public INITIAL_SUPPLY = 500000000 * (10**uint256(decimals));\n', '    // 400,000,000 UFT for DAICO at Q4 2018\n', '    uint256 public supplyDAICO = INITIAL_SUPPLY.mul(80).div(100);\n', '\n', '    address public salesAgent;\n', '    mapping (address => bool) public owners;\n', '\n', '    event SalesAgentPermissionsTransferred(address indexed previousSalesAgent, address indexed newSalesAgent);\n', '    event SalesAgentRemoved(address indexed currentSalesAgent);\n', '\n', '    // 100,000,000 Seed UFT\n', '    function supplySeed() public view returns (uint256) {\n', '        uint256 _supplySeed = INITIAL_SUPPLY.mul(20).div(100);\n', '        return _supplySeed;\n', '    }\n', '    // Constructor\n', '    function ufoodoToken() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '    // Transfer sales agent permissions to another account\n', '    function transferSalesAgentPermissions(address _salesAgent) onlyOwner public {\n', '        emit SalesAgentPermissionsTransferred(salesAgent, _salesAgent);\n', '        salesAgent = _salesAgent;\n', '    }\n', '\n', '    // Remove sales agent from token\n', '    function removeSalesAgent() onlyOwner public {\n', '        emit SalesAgentRemoved(salesAgent);\n', '        salesAgent = address(0);\n', '    }\n', '\n', '    function transferFromVault(address _from, address _to, uint256 _amount) public {\n', '        require(salesAgent == msg.sender);\n', '        balances[vault] = balances[vault].sub(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Transfer(_from, _to, _amount);\n', '    }\n', '\n', '    // Lock the DAICO supply until 2018-09-01 14:00:00\n', '    // Which can then transferred to the created DAICO contract\n', '    function transferDaico(address _to) public onlyOwner returns(bool) {\n', '        require(now >= 1535810400);\n', '\n', '        balances[vault] = balances[vault].sub(supplyDAICO);\n', '        balances[_to] = balances[_to].add(supplyDAICO);\n', '        emit Transfer(vault, _to, supplyDAICO);\n', '        return(true);\n', '    }\n', '\n', '}\n', '\n', 'contract SeedSale is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    // Tokens that will be sold\n', '    ufoodoToken public token;\n', '\n', '    // Time in Unix timestamp\n', '    // Start: 01-Apr-18 14:00:00 UTC\n', '    uint256 public constant seedStartTime = 1522591200;\n', '    // End: 31-May-18 14:00:00 UTC\n', '    uint256 public constant seedEndTime = 1527775200;\n', '\n', '    uint256 public seedSupply_ = 0;\n', '\n', '    // Update all funds raised that are not validated yet, 140 ether from private sale already added\n', '    uint256 public fundsRaised = 140 ether;\n', '\n', '    // Update only funds validated, 140 ether from private sale already added\n', '    uint256 public fundsRaisedFinalized = 140 ether; //\n', '\n', '    // Lock tokens for team\n', '    uint256 public releasedLockedAmount = 0;\n', '\n', '    // All pending UFT which needs to validated before transfered to contributors\n', '    uint256 public pendingUFT = 0;\n', '    // Conclude UFT which are transferred to contributer if soft cap reached and contributor is validated\n', '    uint256 public concludeUFT = 0;\n', '\n', '    uint256 public constant softCap = 200 ether;\n', '    uint256 public constant hardCap = 3550 ether;\n', '    uint256 public constant minContrib = 0.1 ether;\n', '\n', '    uint256 public lockedTeamUFT = 0;\n', '    uint256 public privateReservedUFT = 0;\n', '\n', '    // Will updated in condition with funds raised finalized\n', '    bool public SoftCapReached = false;\n', '    bool public hardCapReached = false;\n', '    bool public seedSaleFinished = false;\n', '\n', '    //Refund will enabled if seed sale End and min cap not reached\n', '    bool public refundAllowed = false;\n', '\n', '    // Address where only validated funds will be transfered\n', '    address public fundWallet = 0xf7d4C80DE0e2978A1C5ef3267F488B28499cD22E;\n', '\n', '    // Amount of ether in wei, needs to be validated first\n', '    mapping(address => uint256) public weiContributedPending;\n', '    // Amount of ether in wei validated\n', '    mapping(address => uint256) public weiContributedConclude;\n', '    // Amount of UFT which will reserved first until the contributor is validated\n', '    mapping(address => uint256) public pendingAmountUFT;\n', '\n', '    event OpenTier(uint256 activeTier);\n', '    event LogContributionPending(address contributor, uint256 amountWei, uint256 tokenAmount, uint256 activeTier, uint256 timestamp);\n', '    event LogContributionConclude(address contributor, uint256 amountWei, uint256 tokenAmount, uint256 timeStamp);\n', '    event ValidationFailed(address contributor, uint256 amountWeiRefunded, uint timestamp);\n', '\n', '    // Initialized Tier\n', '    uint public activeTier = 0;\n', '\n', '    // Max ether per tier to collect\n', '    uint256[8] public tierCap = [\n', '        400 ether,\n', '        420 ether,\n', '        380 ether,\n', '        400 ether,\n', '        410 ether,\n', '        440 ether,\n', '        460 ether,\n', '        500 ether\n', '    ];\n', '\n', '    // Based on 1 Ether = 12500\n', '    // Tokenrate + tokenBonus = totalAmount the contributor received\n', '    uint256[8] public tierTokens = [\n', '        17500, //40%\n', '        16875, //35%\n', '        16250, //30%\n', '        15625, //25%\n', '        15000, //20%\n', '        13750, //10%\n', '        13125, //5%\n', '        12500  //0%\n', '    ];\n', '\n', '    // Will be updated due wei contribution\n', '    uint256[8] public activeFundRaisedTier = [\n', '        0,\n', '        0,\n', '        0,\n', '        0,\n', '        0,\n', '        0,\n', '        0,\n', '        0\n', '    ];\n', '\n', '    // Constructor\n', '    function SeedSale(address _vault) public {\n', '        token = ufoodoToken(_vault);\n', '        privateReservedUFT = token.supplySeed().mul(4).div(100);\n', '        lockedTeamUFT = token.supplySeed().mul(20).div(100);\n', '        seedSupply_ = token.supplySeed();\n', '    }\n', '\n', '    function seedStarted() public view returns (bool) {\n', '        return now >= seedStartTime;\n', '    }\n', '\n', '    function seedEnded() public view returns (bool) {\n', '        return now >= seedEndTime || fundsRaised >= hardCap;\n', '    }\n', '\n', '    modifier checkContribution() {\n', '        require(canContribute());\n', '        _;\n', '    }\n', '\n', '    function canContribute() internal view returns(bool) {\n', '        if(!seedStarted() || seedEnded()) {\n', '            return false;\n', '        }\n', '        if(msg.value < minContrib) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    // Fallback function\n', '    function() payable public whenNotPaused {\n', '        buyUFT(msg.sender);\n', '    }\n', '\n', '    // Process UFT contribution\n', '    function buyUFT(address contributor) public whenNotPaused checkContribution payable {\n', '        uint256 weiAmount = msg.value;\n', '        uint256 refund = 0;\n', '        uint256 _tierIndex = activeTier;\n', '        uint256 _activeTierCap = tierCap[_tierIndex];\n', '        uint256 _activeFundRaisedTier = activeFundRaisedTier[_tierIndex];\n', '\n', '        require(_activeFundRaisedTier < _activeTierCap);\n', '\n', '        // Checks Amoount of eth still can contributed to the active Tier\n', '        uint256 tierCapOverSold = _activeTierCap.sub(_activeFundRaisedTier);\n', '\n', '        // if contributer amount will oversold the active tier cap, partial\n', '        // purchase will proceed, rest contributer amount will refunded to contributor\n', '        if(tierCapOverSold < weiAmount) {\n', '            weiAmount = tierCapOverSold;\n', '            refund = msg.value.sub(weiAmount);\n', '\n', '        }\n', '        // Calculate the amount of tokens the Contributor will receive\n', '        uint256 amountUFT = weiAmount.mul(tierTokens[_tierIndex]);\n', '\n', '        // Update status\n', '        fundsRaised = fundsRaised.add(weiAmount);\n', '        activeFundRaisedTier[_tierIndex] = activeFundRaisedTier[_tierIndex].add(weiAmount);\n', '        weiContributedPending[contributor] = weiContributedPending[contributor].add(weiAmount);\n', '        pendingAmountUFT[contributor] = pendingAmountUFT[contributor].add(amountUFT);\n', '        pendingUFT = pendingUFT.add(amountUFT);\n', '\n', '        // partial process, refund rest value\n', '        if(refund > 0) {\n', '            msg.sender.transfer(refund);\n', '        }\n', '\n', '        emit LogContributionPending(contributor, weiAmount, amountUFT, _tierIndex, now);\n', '    }\n', '\n', '    function softCapReached() public returns (bool) {\n', '        if (fundsRaisedFinalized >= softCap) {\n', '            SoftCapReached = true;\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // Next Tier will increment manually and Paused by the team to guarantee safe transition\n', '    // Initialized next tier if previous tier sold out\n', '    // For contributor safety we pause the seedSale process\n', '    function nextTier() onlyOwner public {\n', '        require(paused == true);\n', '        require(activeTier < 7);\n', '        uint256 _tierIndex = activeTier;\n', '        activeTier = _tierIndex +1;\n', '        emit OpenTier(activeTier);\n', '    }\n', '\n', '    // Validation Update Process\n', '    // After we finished the kyc process, we update each validated contributor and transfer if softCapReached the tokens\n', '    // If the contributor is not validated due failed validation, the contributed wei amount will refundet back to the contributor\n', '    function validationPassed(address contributor) onlyOwner public returns (bool) {\n', '        require(contributor != 0x0);\n', '\n', '        uint256 amountFinalized = pendingAmountUFT[contributor];\n', '        pendingAmountUFT[contributor] = 0;\n', '        token.transferFromVault(token, contributor, amountFinalized);\n', '\n', '        // Update status\n', '        uint256 _fundsRaisedFinalized = fundsRaisedFinalized.add(weiContributedPending[contributor]);\n', '        fundsRaisedFinalized = _fundsRaisedFinalized;\n', '        concludeUFT = concludeUFT.add(amountFinalized);\n', '\n', '        weiContributedConclude[contributor] = weiContributedConclude[contributor].add(weiContributedPending[contributor]);\n', '\n', '        emit LogContributionConclude(contributor, weiContributedPending[contributor], amountFinalized, now);\n', '        softCapReached();\n', '        // Amount finalized tokes update status\n', '\n', '        return true;\n', '    }\n', '\n', '    // Update which address is not validated\n', '    // By updating the address, the contributor will receive his contribution back\n', '    function validationFailed(address contributor) onlyOwner public returns (bool) {\n', '        require(contributor != 0x0);\n', '        require(weiContributedPending[contributor] > 0);\n', '\n', '        uint256 currentBalance = weiContributedPending[contributor];\n', '\n', '        weiContributedPending[contributor] = 0;\n', '        contributor.transfer(currentBalance);\n', '        emit ValidationFailed(contributor, currentBalance, now);\n', '        return true;\n', '    }\n', '\n', '    // If seed sale ends and soft cap is not reached, Contributer can claim their funds\n', '    function refund() public {\n', '        require(refundAllowed);\n', '        require(!SoftCapReached);\n', '        require(weiContributedPending[msg.sender] > 0);\n', '\n', '        uint256 currentBalance = weiContributedPending[msg.sender];\n', '\n', '        weiContributedPending[msg.sender] = 0;\n', '        msg.sender.transfer(currentBalance);\n', '    }\n', '\n', '\n', '   // Allows only to refund the contributed amount that passed the validation and reached the softcap\n', '    function withdrawFunds(uint256 _weiAmount) public onlyOwner {\n', '        require(SoftCapReached);\n', '        fundWallet.transfer(_weiAmount);\n', '    }\n', '\n', '    /*\n', '     * If tokens left make a priveledge token sale for contributor that are already validated\n', '     * make a new date time for left tokens only for priveledge whitelisted\n', '     * If not enouhgt tokens left for a sale send directly to locked contract/ vault\n', '     */\n', '    function seedSaleTokenLeft(address _tokenContract) public onlyOwner {\n', '        require(seedEnded());\n', '        uint256 amountLeft = pendingUFT.sub(concludeUFT);\n', '        token.transferFromVault(token, _tokenContract, amountLeft );\n', '    }\n', '\n', '\n', '    function vestingToken(address _beneficiary) public onlyOwner returns (bool) {\n', '      require(SoftCapReached);\n', '      uint256 release_1 = seedStartTime.add(180 days);\n', '      uint256 release_2 = release_1.add(180 days);\n', '      uint256 release_3 = release_2.add(180 days);\n', '      uint256 release_4 = release_3.add(180 days);\n', '\n', '      //20,000,000 UFT total splitted in 4 time periods\n', '      uint256 lockedAmount_1 = lockedTeamUFT.mul(25).div(100);\n', '      uint256 lockedAmount_2 = lockedTeamUFT.mul(25).div(100);\n', '      uint256 lockedAmount_3 = lockedTeamUFT.mul(25).div(100);\n', '      uint256 lockedAmount_4 = lockedTeamUFT.mul(25).div(100);\n', '\n', '      if(seedStartTime >= release_1 && releasedLockedAmount < lockedAmount_1) {\n', '        token.transferFromVault(token, _beneficiary, lockedAmount_1 );\n', '        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_1);\n', '        return true;\n', '\n', '      } else if(seedStartTime >= release_2 && releasedLockedAmount < lockedAmount_2.mul(2)) {\n', '        token.transferFromVault(token, _beneficiary, lockedAmount_2 );\n', '        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_2);\n', '        return true;\n', '\n', '      } else if(seedStartTime >= release_3 && releasedLockedAmount < lockedAmount_3.mul(3)) {\n', '        token.transferFromVault(token, _beneficiary, lockedAmount_3 );\n', '        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_3);\n', '        return true;\n', '\n', '      } else if(seedStartTime >= release_4 && releasedLockedAmount < lockedAmount_4.mul(4)) {\n', '        token.transferFromVault(token, _beneficiary, lockedAmount_4 );\n', '        releasedLockedAmount = releasedLockedAmount.add(lockedAmount_4);\n', '        return true;\n', '      }\n', '\n', '    }\n', '\n', '    // Total Reserved from Private Sale Contributor 4,000,000 UFT\n', '    function transferPrivateReservedUFT(address _beneficiary, uint256 _amount) public onlyOwner {\n', '        require(SoftCapReached);\n', '        require(_amount > 0);\n', '        require(privateReservedUFT >= _amount);\n', '\n', '        token.transferFromVault(token, _beneficiary, _amount);\n', '        privateReservedUFT = privateReservedUFT.sub(_amount);\n', '\n', '    }\n', '\n', '     function finalizeSeedSale() public onlyOwner {\n', '        if(seedStartTime >= seedEndTime && SoftCapReached) {\n', '\n', '        // Bounty Campaign: 5,000,000 UFT\n', '        uint256 bountyAmountUFT = token.supplySeed().mul(5).div(100);\n', '        token.transferFromVault(token, fundWallet, bountyAmountUFT);\n', '\n', '        // Reserved Company: 20,000,000 UFT\n', '        uint256 reservedCompanyUFT = token.supplySeed().mul(20).div(100);\n', '        token.transferFromVault(token, fundWallet, reservedCompanyUFT);\n', '\n', '        } else if(seedStartTime >= seedEndTime && !SoftCapReached) {\n', '\n', '            // Enable fund`s crowdsale refund if soft cap is not reached\n', '            refundAllowed = true;\n', '\n', '            token.transferFromVault(token, owner, seedSupply_);\n', '            seedSupply_ = 0;\n', '\n', '        }\n', '    }\n', '\n', '}']
