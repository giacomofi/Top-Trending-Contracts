['pragma solidity ^0.4.23;\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '    );\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract IGTToken is StandardToken {\n', '    string public constant name = "IGT Token";\n', '    string public constant symbol = "IGTT";\n', '    uint32 public constant decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 21000000 * 1 ether;\n', '    address public CrowdsaleAddress;\n', '    uint256 public soldTokens;\n', '    bool public lockTransfers = true;\n', '\n', '    function getSoldTokens() public view returns (uint256) {\n', '        return soldTokens;\n', '    }\n', '\n', '\n', '  \n', '  \n', '    constructor(address _CrowdsaleAddress) public {\n', '    \n', '        CrowdsaleAddress = _CrowdsaleAddress;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;      \n', '    }\n', '  \n', '    modifier onlyOwner() {\n', '        require(msg.sender == CrowdsaleAddress);\n', '        _;\n', '    }\n', '\n', '    function setSoldTokens(uint256 _value) public onlyOwner {\n', '        soldTokens = _value;\n', '    }\n', '\n', '    function acceptTokens(address _from, uint256 _value) public onlyOwner returns (bool){\n', '        require (balances[_from] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_value);\n', '        emit Transfer(_from, CrowdsaleAddress, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '     // Override\n', '    function transfer(address _to, uint256 _value) public returns(bool){\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(!lockTransfers, "Transfers are prohibited");\n', '        }\n', '        return super.transfer(_to,_value);\n', '    }\n', '\n', '     // Override\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(!lockTransfers, "Transfers are prohibited");\n', '        }\n', '        return super.transferFrom(_from,_to,_value);\n', '    }\n', '\n', '    function lockTransfer(bool _lock) public onlyOwner {\n', '        lockTransfers = _lock;\n', '    }\n', '\n', '    function() external payable {\n', '        // The token contract don`t receive ether\n', '        revert();\n', '    }  \n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public manager;\n', '    address candidate;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        manager = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier restricted() {\n', '        require(msg.sender == owner || msg.sender == manager);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        candidate = _newOwner;\n', '    }\n', '\n', '    function setManager(address _newManager) public onlyOwner {\n', '        manager = _newManager;\n', '    }\n', '\n', '\n', '    function confirmOwnership() public {\n', '        require(candidate == msg.sender);\n', '        owner = candidate;\n', '        delete candidate;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract TeamAddress {\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    } \n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint; \n', '    address myAddress = this;\n', '    uint256 public startICODate;\n', '    IGTToken public token = new IGTToken(myAddress);\n', '    uint public additionalBonus = 0;\n', '    uint public endTimeAddBonus = 0;\n', '    event LogStateSwitch(State newState);\n', '    event ChangeToCoin(address indexed from, uint256 value);\n', '\n', '    enum State { \n', '        PreTune, \n', '        CrowdSale, \n', '        Migrate \n', '    }\n', '    State public currentState = State.PreTune;\n', '\n', '    TeamAddress public teamAddress = new TeamAddress();\n', '\n', '    constructor() public {\n', '        startICODate = uint256(now);\n', '        //uint sendTokens = 5250000;\n', '        giveTokens(address(teamAddress), 5250000);\n', '        // Stage CrowdSale is enable\n', '        nextState();    \n', '    }\n', '\n', '    function nextState() internal {\n', '        currentState = State(uint(currentState) + 1);\n', '    }\n', '\n', '    function returnTokensFromTeamAddress(uint256 _value) public onlyOwner {\n', '        // the function take tokens from teamAddress to contract\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        token.acceptTokens(address(teamAddress), value);    \n', '    } \n', '    \n', '    function lockExternalTransfer() public onlyOwner {\n', '        token.lockTransfer(true);\n', '    }\n', '\n', '    function unlockExternalTransfer() public onlyOwner {\n', '        token.lockTransfer(false);\n', '    }\n', '\n', '    function setMigrateStage() public onlyOwner {\n', '        require(currentState == State.CrowdSale);\n', '        require(token.balanceOf(address(teamAddress)) == 0);\n', '        nextState();\n', '    }\n', '\n', '    function changeToCoin(address _address, uint256 _value) public restricted {\n', '        require(currentState == State.Migrate);\n', '        token.acceptTokens(_address, _value);\n', '        emit ChangeToCoin(_address, _value);\n', '    }\n', '\n', '    function setAddBonus (uint _value, uint _endTimeBonus) public onlyOwner {\n', '        additionalBonus = _value;\n', '        endTimeAddBonus = _endTimeBonus;\n', '    }\n', '\n', '    function calcBonus () public view returns(uint256) {\n', '        // 2m - 12%\n', '        // 4m - 8%\n', '        // 6m - 6%\n', '        // 8m - 4%\n', '        // 10m - 2%\n', '        // 12.6m - 0%\n', '        uint256 amountToken = token.getSoldTokens();\n', '        uint256 actualBonus = 0;\n', '        \n', '        if (amountToken < 2240000 * (1 ether)){ \n', '            actualBonus = 12;    \n', '        }\n', '        if (amountToken >= 2240000 * (1 ether) && amountToken < 4400000 * (1 ether)){\n', '            actualBonus = 8;\n', '        }\n', '        if (amountToken >= 4400000 * (1 ether) && amountToken < 6520000 * (1 ether)){\n', '            actualBonus = 6;\n', '        }\n', '        if (amountToken >= 6520000 * (1 ether) && amountToken < 8600000 * (1 ether)){\n', '            actualBonus = 4;\n', '        }\n', '        if (amountToken >= 8600000 * (1 ether) && amountToken < 10640000 * (1 ether)){\n', '            actualBonus = 2;\n', '        }\n', '        if (now < endTimeAddBonus){\n', '            actualBonus = actualBonus.add(additionalBonus);\n', '        }\n', '        return actualBonus;\n', '    }\n', '\n', '    function giveTokens(address _newInvestor, uint256 _value) public restricted {\n', '        // the function give tokens to new investors\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        require(currentState != State.Migrate);\n', '        require (_newInvestor != address(0));\n', '        require (_value >= 1);\n', '\n', '        uint256 mySoldTokens = token.getSoldTokens();\n', '        uint256 value = _value;\n', '        value = value.mul(1 ether);\n', '\n', '        if (currentState != State.PreTune){\n', '            uint256 myBonus = calcBonus();\n', '            // Add Bonus\n', '            if (myBonus > 0){\n', '                value = value + value.mul(myBonus).div(100);            \n', '            }\n', '            mySoldTokens = mySoldTokens.add(value);\n', '            token.setSoldTokens(mySoldTokens);\n', '        }\n', '        token.transfer(_newInvestor, value);\n', '        \n', '    }  \n', '    \n', '\n', '\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    }    \n', ' \n', '}']
['pragma solidity ^0.4.23;\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '    );\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract IGTToken is StandardToken {\n', '    string public constant name = "IGT Token";\n', '    string public constant symbol = "IGTT";\n', '    uint32 public constant decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 21000000 * 1 ether;\n', '    address public CrowdsaleAddress;\n', '    uint256 public soldTokens;\n', '    bool public lockTransfers = true;\n', '\n', '    function getSoldTokens() public view returns (uint256) {\n', '        return soldTokens;\n', '    }\n', '\n', '\n', '  \n', '  \n', '    constructor(address _CrowdsaleAddress) public {\n', '    \n', '        CrowdsaleAddress = _CrowdsaleAddress;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;      \n', '    }\n', '  \n', '    modifier onlyOwner() {\n', '        require(msg.sender == CrowdsaleAddress);\n', '        _;\n', '    }\n', '\n', '    function setSoldTokens(uint256 _value) public onlyOwner {\n', '        soldTokens = _value;\n', '    }\n', '\n', '    function acceptTokens(address _from, uint256 _value) public onlyOwner returns (bool){\n', '        require (balances[_from] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_value);\n', '        emit Transfer(_from, CrowdsaleAddress, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '     // Override\n', '    function transfer(address _to, uint256 _value) public returns(bool){\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(!lockTransfers, "Transfers are prohibited");\n', '        }\n', '        return super.transfer(_to,_value);\n', '    }\n', '\n', '     // Override\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(!lockTransfers, "Transfers are prohibited");\n', '        }\n', '        return super.transferFrom(_from,_to,_value);\n', '    }\n', '\n', '    function lockTransfer(bool _lock) public onlyOwner {\n', '        lockTransfers = _lock;\n', '    }\n', '\n', '    function() external payable {\n', '        // The token contract don`t receive ether\n', '        revert();\n', '    }  \n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address public manager;\n', '    address candidate;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        manager = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier restricted() {\n', '        require(msg.sender == owner || msg.sender == manager);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        candidate = _newOwner;\n', '    }\n', '\n', '    function setManager(address _newManager) public onlyOwner {\n', '        manager = _newManager;\n', '    }\n', '\n', '\n', '    function confirmOwnership() public {\n', '        require(candidate == msg.sender);\n', '        owner = candidate;\n', '        delete candidate;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract TeamAddress {\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    } \n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint; \n', '    address myAddress = this;\n', '    uint256 public startICODate;\n', '    IGTToken public token = new IGTToken(myAddress);\n', '    uint public additionalBonus = 0;\n', '    uint public endTimeAddBonus = 0;\n', '    event LogStateSwitch(State newState);\n', '    event ChangeToCoin(address indexed from, uint256 value);\n', '\n', '    enum State { \n', '        PreTune, \n', '        CrowdSale, \n', '        Migrate \n', '    }\n', '    State public currentState = State.PreTune;\n', '\n', '    TeamAddress public teamAddress = new TeamAddress();\n', '\n', '    constructor() public {\n', '        startICODate = uint256(now);\n', '        //uint sendTokens = 5250000;\n', '        giveTokens(address(teamAddress), 5250000);\n', '        // Stage CrowdSale is enable\n', '        nextState();    \n', '    }\n', '\n', '    function nextState() internal {\n', '        currentState = State(uint(currentState) + 1);\n', '    }\n', '\n', '    function returnTokensFromTeamAddress(uint256 _value) public onlyOwner {\n', '        // the function take tokens from teamAddress to contract\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        token.acceptTokens(address(teamAddress), value);    \n', '    } \n', '    \n', '    function lockExternalTransfer() public onlyOwner {\n', '        token.lockTransfer(true);\n', '    }\n', '\n', '    function unlockExternalTransfer() public onlyOwner {\n', '        token.lockTransfer(false);\n', '    }\n', '\n', '    function setMigrateStage() public onlyOwner {\n', '        require(currentState == State.CrowdSale);\n', '        require(token.balanceOf(address(teamAddress)) == 0);\n', '        nextState();\n', '    }\n', '\n', '    function changeToCoin(address _address, uint256 _value) public restricted {\n', '        require(currentState == State.Migrate);\n', '        token.acceptTokens(_address, _value);\n', '        emit ChangeToCoin(_address, _value);\n', '    }\n', '\n', '    function setAddBonus (uint _value, uint _endTimeBonus) public onlyOwner {\n', '        additionalBonus = _value;\n', '        endTimeAddBonus = _endTimeBonus;\n', '    }\n', '\n', '    function calcBonus () public view returns(uint256) {\n', '        // 2m - 12%\n', '        // 4m - 8%\n', '        // 6m - 6%\n', '        // 8m - 4%\n', '        // 10m - 2%\n', '        // 12.6m - 0%\n', '        uint256 amountToken = token.getSoldTokens();\n', '        uint256 actualBonus = 0;\n', '        \n', '        if (amountToken < 2240000 * (1 ether)){ \n', '            actualBonus = 12;    \n', '        }\n', '        if (amountToken >= 2240000 * (1 ether) && amountToken < 4400000 * (1 ether)){\n', '            actualBonus = 8;\n', '        }\n', '        if (amountToken >= 4400000 * (1 ether) && amountToken < 6520000 * (1 ether)){\n', '            actualBonus = 6;\n', '        }\n', '        if (amountToken >= 6520000 * (1 ether) && amountToken < 8600000 * (1 ether)){\n', '            actualBonus = 4;\n', '        }\n', '        if (amountToken >= 8600000 * (1 ether) && amountToken < 10640000 * (1 ether)){\n', '            actualBonus = 2;\n', '        }\n', '        if (now < endTimeAddBonus){\n', '            actualBonus = actualBonus.add(additionalBonus);\n', '        }\n', '        return actualBonus;\n', '    }\n', '\n', '    function giveTokens(address _newInvestor, uint256 _value) public restricted {\n', '        // the function give tokens to new investors\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        require(currentState != State.Migrate);\n', '        require (_newInvestor != address(0));\n', '        require (_value >= 1);\n', '\n', '        uint256 mySoldTokens = token.getSoldTokens();\n', '        uint256 value = _value;\n', '        value = value.mul(1 ether);\n', '\n', '        if (currentState != State.PreTune){\n', '            uint256 myBonus = calcBonus();\n', '            // Add Bonus\n', '            if (myBonus > 0){\n', '                value = value + value.mul(myBonus).div(100);            \n', '            }\n', '            mySoldTokens = mySoldTokens.add(value);\n', '            token.setSoldTokens(mySoldTokens);\n', '        }\n', '        token.transfer(_newInvestor, value);\n', '        \n', '    }  \n', '    \n', '\n', '\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    }    \n', ' \n', '}']
