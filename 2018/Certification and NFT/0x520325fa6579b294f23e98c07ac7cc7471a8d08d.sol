['pragma solidity ^0.4.17;\n', '\n', '// ----------------------------------------------------------------------------\n', '// CSE ICO contract\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Ownership contract\n', '// _newOwner is address of new owner\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = 0x3fCD36fcE4097245AB0f2bA50486BC01D2a3ee44;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // transfer Ownership to other address\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0x0));\n', '        emit OwnershipTransferred(owner,_newOwner);\n', '        owner = _newOwner;\n', '    }\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// CesiraeToken interface\n', '// ----------------------------------------------------------------------------\n', 'contract CesiraeToken {\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// CesiraeICO smart contract\n', '// ----------------------------------------------------------------------------\n', 'contract CesiraeICO is Owned {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    enum State {\n', '        PrivatePreSale,\n', '        PreICO,\n', '        ICORound1,\n', '        ICORound2,\n', '        ICORound3,\n', '        ICORound4,\n', '        ICORound5,\n', '        Successful\n', '    }\n', '    \n', '    //public variables\n', '    State public state; //Set initial stage\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    CesiraeToken public CSE; // CSE token address\n', '    \n', '    mapping(address => bool) whitelist; // whitelisting for KYC verified users\n', '\n', '    // events for log\n', '    event LogWhiteListed(address _addr);\n', '    event LogBlackListed(address _addr);\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(address _creator);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    \n', '    // To determine whether the ICO is running or stopped\n', '    modifier onlyIfNotFinished {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    \n', '    // To determine whether the user is whitelisted \n', '    modifier onlyIfWhiteListedOnPreSale {\n', '        if(state == State.PrivatePreSale) {\n', '          require(whitelist[msg.sender]);\n', '        } \n', '        _;\n', '    }\n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // CesiraeICO constructor\n', '    // _addressOfToken is the token totalDistributed\n', '    // ----------------------------------------------------------------------------\n', '    function CesiraeICO (CesiraeToken _addressOfToken) public {\n', '        require(_addressOfToken != address(0)); // should have valid address\n', '        CSE = CesiraeToken(_addressOfToken);\n', '        state = State.PrivatePreSale;\n', '        emit LogFunderInitialized(owner);\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // Function to handle eth transfers\n', '    // It invokes when someone sends ETH to this contract address.\n', '    // Requires enough gas for the execution otherwise it&#39;ll throw out of gas error.\n', '    // tokens are transferred to user\n', '    // ETH are transferred to current owner\n', '    // minimum 1 ETH investment\n', '    // maxiumum 10 ETH investment\n', '    // ----------------------------------------------------------------------------\n', '    function() public payable {\n', '        contribute();\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Acceptes ETH and send equivalent CSE with bonus if any.\n', '    // NOTE: Add user to whitelist by invoking addToWhiteList() function.\n', '    // Only whitelisted users can buy tokens.\n', '    // For Non-whitelisted/Blacklisted users transaction will be reverted. \n', '    // ----------------------------------------------------------------------------\n', '    function contribute() onlyIfNotFinished onlyIfWhiteListedOnPreSale public payable {\n', '        \n', '        uint256 tokenBought; // Variable to store amount of tokens bought\n', '        uint256 bonus; // Variable to store bonus if any\n', '        uint256 tokenPrice;\n', '        \n', '        //Token allocation calculation\n', '        if (state == State.PrivatePreSale){\n', '            require(msg.value >= 2 ether); // min 2 ETH investment\n', '            tokenPrice = 160000;\n', '            tokenBought = msg.value.mul(tokenPrice);\n', '            bonus = tokenBought; // 100 % bonus\n', '        } \n', '        else if (state == State.PreICO){\n', '            require(msg.value >= 1 ether); // min 1 ETH investment\n', '            tokenPrice = 160000;\n', '            tokenBought = msg.value.mul(tokenPrice);\n', '            bonus = tokenBought.mul(50).div(100); // 50 % bonus\n', '        } \n', '        else if (state == State.ICORound1){\n', '            require(msg.value >= 0.7 ether); // min 0.7 ETH investment\n', '            tokenPrice = 140000;\n', '            tokenBought = msg.value.mul(tokenPrice);\n', '            bonus = tokenBought.mul(40).div(100); // 40 % bonus\n', '        } \n', '        else if (state == State.ICORound2){\n', '            require(msg.value >= 0.5 ether); // min 0.5 ETH investment\n', '            tokenPrice = 120000;\n', '            tokenBought = msg.value.mul(tokenPrice);\n', '            bonus = tokenBought.mul(30).div(100); // 30 % bonus\n', '        } \n', '        else if (state == State.ICORound3){\n', '            require(msg.value >= 0.3 ether); // min 0.3 ETH investment\n', '            tokenPrice = 100000;\n', '            tokenBought = msg.value.mul(tokenPrice);\n', '            bonus = tokenBought.mul(20).div(100); // 20 % bonus\n', '        } \n', '        else if (state == State.ICORound4){\n', '            require(msg.value >= 0.2 ether); // min 0.2 ETH investment\n', '            tokenPrice = 80000;\n', '            tokenBought = msg.value.mul(tokenPrice);\n', '            bonus = tokenBought.mul(10).div(100); // 10 % bonus\n', '        } \n', '        else if (state == State.ICORound5){\n', '            require(msg.value >= 0.1 ether); // min 0.1 ETH investment\n', '            tokenPrice = 60000;\n', '            tokenBought = msg.value.mul(tokenPrice);\n', '            bonus = 0; // 0 % bonus\n', '        } \n', '\n', '        tokenBought = tokenBought.add(bonus); // add bonus to the tokenBought\n', '        \n', '        // this smart contract should have enough tokens to distribute\n', '        require(CSE.balanceOf(this) >= tokenBought);\n', '        \n', '        totalRaised = totalRaised.add(msg.value); // Save the total eth totalRaised (in wei)\n', '        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\n', '        \n', '        CSE.transfer(msg.sender,tokenBought); //Send Tokens to user\n', '        owner.transfer(msg.value); // Send ETH to owner\n', '        \n', '        //LOGS\n', '        emit LogContributorsPayout(msg.sender,tokenBought); // Log investor paid event\n', '        emit LogBeneficiaryPaid(owner); // Log owner paid event\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised); // Log funding event\n', '    }\n', '    \n', '    \n', '    function finished() onlyOwner public { \n', '        \n', '        uint256 remainder = CSE.balanceOf(this); //Remaining tokens on contract\n', '        \n', '        //Funds send to creator if any\n', '        if(address(this).balance > 0) {\n', '            owner.transfer(address(this).balance);\n', '            emit LogBeneficiaryPaid(owner);\n', '        }\n', ' \n', '        CSE.transfer(owner,remainder); //remainder tokens send to creator\n', '        emit LogContributorsPayout(owner, remainder);\n', '        \n', '        state = State.Successful; // updating the state\n', '    }\n', '    \n', '    \n', '    function nextState() onlyOwner public {\n', '        require(state != State.ICORound5);\n', '        state = State(uint(state) + 1);\n', '    }\n', '    \n', '    \n', '    function previousState() onlyOwner public {\n', '        require(state != State.PrivatePreSale);\n', '        state = State(uint(state) - 1);\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // function to whitelist user if KYC verified\n', '    // returns true if whitelisting is successful else returns false\n', '    // ----------------------------------------------------------------------------\n', '    function addToWhiteList(address _userAddress) onlyOwner public returns(bool) {\n', '        require(_userAddress != address(0)); // user address must be valid\n', '        // if not already in the whitelist\n', '        if (!whitelist[_userAddress]) {\n', '            whitelist[_userAddress] = true;\n', '            emit LogWhiteListed(_userAddress); // Log whitelist event\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // function to remove user from whitelist\n', '    // ----------------------------------------------------------------------------\n', '    function removeFromWhiteList(address _userAddress) onlyOwner public returns(bool) {\n', '        require(_userAddress != address(0)); // user address must be valid\n', '        // if in the whitelist\n', '        if(whitelist[_userAddress]) {\n', '           whitelist[_userAddress] = false; \n', '           emit LogBlackListed(_userAddress); // Log blacklist event\n', '           return true;\n', '        } else {\n', '            return false;\n', '        }\n', '        \n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // function to check if user is whitelisted\n', '    // ----------------------------------------------------------------------------\n', '    function checkIfWhiteListed(address _userAddress) view public returns(bool) {\n', '        return whitelist[_userAddress];\n', '    }\n', '    \n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Function to claim any token stuck on contract\n', '    // ----------------------------------------------------------------------------\n', '    function claimTokens() onlyOwner public {\n', '        uint256 remainder = CSE.balanceOf(this); //Check remainder tokens\n', '        CSE.transfer(owner,remainder); //Transfer tokens to owner\n', '    }\n', '    \n', '}']