['pragma solidity ^0.4.13;\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract PoolAndSaleInterface {\n', '    address public tokenSaleAddr;\n', '    address public votingAddr;\n', '    address public votingTokenAddr;\n', '    uint256 public tap;\n', '    uint256 public initialTap;\n', '    uint256 public initialRelease;\n', '\n', '    function setTokenSaleContract(address _tokenSaleAddr) external;\n', '    function startProject() external;\n', '}\n', '\n', 'contract DaicoPool is PoolAndSaleInterface, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    address public tokenSaleAddr;\n', '    address public votingAddr;\n', '    address public votingTokenAddr;\n', '    uint256 public tap;\n', '    uint256 public initialTap;\n', '    uint256 public initialRelease;\n', '    uint256 public releasedBalance;\n', '    uint256 public withdrawnBalance;\n', '    uint256 public lastUpdatedTime;\n', '    uint256 public fundRaised;\n', '    uint256 public closingRelease = 30 days;\n', '\n', '    /* The unit of this variable is [10^-9 wei / token], intending to minimize rouding errors */\n', '    uint256 public refundRateNano = 0;\n', '  \n', '    enum Status {\n', '        Initializing,\n', '        ProjectInProgress,\n', '        Destructed\n', '    }\n', '  \n', '    Status public status;\n', '\n', '    event TapHistory(uint256 new_tap);\n', '    event WithdrawalHistory(string token, uint256 amount);\n', '    event Refund(address receiver, uint256 amount);\n', '\n', '    modifier onlyTokenSaleContract {\n', '        require(msg.sender == tokenSaleAddr);\n', '        _;\n', '    }\n', '\n', '    modifier onlyVoting {\n', '        require(msg.sender == votingAddr);\n', '        _;\n', '    }\n', '\n', '    modifier poolInitializing {\n', '        require(status == Status.Initializing);\n', '        _;\n', '    }\n', '\n', '    modifier poolDestructed {\n', '        require(status == Status.Destructed);\n', '        _;\n', '    }\n', '\n', '    constructor(address _votingTokenAddr, uint256 tap_amount, uint256 _initialRelease) public {\n', '        require(_votingTokenAddr != 0x0);\n', '        require(tap_amount > 0);\n', '\n', '        initialTap = tap_amount;\n', '        votingTokenAddr = _votingTokenAddr;\n', '        status = Status.Initializing;\n', '        initialRelease = _initialRelease;\n', ' \n', '        votingAddr = new Voting(ERC20Interface(_votingTokenAddr), address(this));\n', '    }\n', '\n', '    function () external payable {}\n', '\n', '    function setTokenSaleContract(address _tokenSaleAddr) external {\n', '        /* Can be set only once */\n', '        require(tokenSaleAddr == address(0x0));\n', '        require(_tokenSaleAddr != address(0x0));\n', '        tokenSaleAddr = _tokenSaleAddr;\n', '    }\n', '\n', '    function startProject() external onlyTokenSaleContract {\n', '        require(status == Status.Initializing);\n', '        status = Status.ProjectInProgress;\n', '        lastUpdatedTime = block.timestamp;\n', '        releasedBalance = initialRelease;\n', '        updateTap(initialTap);\n', '        fundRaised = address(this).balance;\n', '    }\n', '\n', '    function withdraw(uint256 _amount) public onlyOwner {\n', '        require(_amount > 0);\n', '        uint256 amount = _amount;\n', '\n', '        updateReleasedBalance();\n', '        uint256 available_balance = getAvailableBalance();\n', '        if (amount > available_balance) {\n', '            amount = available_balance;\n', '        }\n', '\n', '        withdrawnBalance = withdrawnBalance.add(amount);\n', '        owner.transfer(amount);\n', '\n', '        emit WithdrawalHistory("ETH", amount);\n', '    }\n', '\n', '    function raiseTap(uint256 tapMultiplierRate) external onlyVoting {\n', '        updateReleasedBalance();\n', '        updateTap(tap.mul(tapMultiplierRate).div(100));\n', '    }\n', '\n', '    function selfDestruction() external onlyVoting {\n', '        status = Status.Destructed;\n', '        updateReleasedBalance();\n', '        releasedBalance = releasedBalance.add(closingRelease.mul(tap));\n', '        updateTap(0);\n', '\n', '        uint256 _totalSupply = ERC20Interface(votingTokenAddr).totalSupply(); \n', '        refundRateNano = address(this).balance.sub(getAvailableBalance()).mul(10**9).div(_totalSupply);\n', '    }\n', '\n', '    function refund(uint256 tokenAmount) external poolDestructed {\n', '        require(ERC20Interface(votingTokenAddr).transferFrom(msg.sender, this, tokenAmount));\n', '\n', '        uint256 refundingEther = tokenAmount.mul(refundRateNano).div(10**9);\n', '        emit Refund(msg.sender, tokenAmount);\n', '        msg.sender.transfer(refundingEther);\n', '    }\n', '\n', '    function getReleasedBalance() public view returns(uint256) {\n', '        uint256 time_elapsed = block.timestamp.sub(lastUpdatedTime);\n', '        return releasedBalance.add(time_elapsed.mul(tap));\n', '    }\n', ' \n', '    function getAvailableBalance() public view returns(uint256) {\n', '        uint256 available_balance = getReleasedBalance().sub(withdrawnBalance);\n', '\n', '        if (available_balance > address(this).balance) {\n', '            available_balance = address(this).balance;\n', '        }\n', '\n', '        return available_balance;\n', '    }\n', '\n', '    function isStateInitializing() public view returns(bool) {\n', '        return (status == Status.Initializing); \n', '    }\n', '\n', '    function isStateProjectInProgress() public view returns(bool) {\n', '        return (status == Status.ProjectInProgress); \n', '    }\n', '\n', '    function isStateDestructed() public view returns(bool) {\n', '        return (status == Status.Destructed); \n', '    }\n', '\n', '    function updateReleasedBalance() internal {\n', '        releasedBalance = getReleasedBalance();\n', '        lastUpdatedTime = block.timestamp;\n', '    }\n', '\n', '    function updateTap(uint256 new_tap) private {\n', '        tap = new_tap;\n', '        emit TapHistory(new_tap);\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Voting{\n', '    using SafeMath for uint256;\n', '\n', '    address public votingTokenAddr;\n', '    address public poolAddr;\n', '    mapping (uint256 => mapping(address => uint256)) public deposits;\n', '    mapping (uint => bool) public queued;\n', '\n', '    uint256 proposalCostWei = 1 * 10**18;\n', '\n', '    uint256 public constant VOTING_PERIOD = 14 days;\n', '\n', '    struct Proposal {\n', '        uint256 start_time;\n', '        uint256 end_time;\n', '        Subject subject;\n', '        string reason;\n', '        mapping (bool => uint256) votes; \n', '        uint256 voter_count;\n', '        bool isFinalized;\n', '        uint256 tapMultiplierRate;\n', '    }\n', '\n', '    Proposal[] public proposals;\n', '    uint public constant PROPOSAL_EMPTY = 0;\n', '\n', '    enum Subject {\n', '        RaiseTap,\n', '        Destruction\n', '    }\n', '\n', '    event Vote(\n', '        address indexed voter,\n', '        uint256 amount\n', '    );\n', '\n', '    event ReturnDeposit(\n', '        address indexed voter,\n', '        uint256 amount\n', '    );\n', '\n', '    event ProposalRaised(\n', '        address indexed proposer,\n', '        string subject \n', '    );\n', '\n', '    /// @dev Constructor.\n', '    /// @param _votingTokenAddr The contract address of ERC20 \n', '    /// @param _poolAddr The contract address of DaicoPool\n', '    /// @return \n', '    constructor (\n', '        address _votingTokenAddr,\n', '        address _poolAddr\n', '    ) public {\n', '        require(_votingTokenAddr != address(0x0));\n', '        require(_poolAddr != address(0x0));\n', '        votingTokenAddr = _votingTokenAddr;\n', '        poolAddr = _poolAddr;\n', '\n', '        // Insert an empty proposal as the header in order to make index 0 to be missing number.\n', '        Proposal memory proposal;\n', '        proposal.subject = Subject.RaiseTap;\n', '        proposal.reason = "PROPOSAL_HEADER";\n', '        proposal.start_time = block.timestamp -1;\n', '        proposal.end_time = block.timestamp -1;\n', '        proposal.voter_count = 0;\n', '        proposal.isFinalized = true;\n', '\n', '        proposals.push(proposal);\n', '        assert(proposals.length == 1);\n', '    }\n', '\n', '    /// @dev Make a TAP raising proposal. It costs certain amount of ETH.\n', '    /// @param _reason The reason to raise the TAP. This field can be an URL of a WEB site.\n', '    /// @param _tapMultiplierRate TAP increase rate. From 101 to 200. i.e. 150 = 150% .\n', '    /// @return \n', '    function addRaiseTapProposal (\n', '        string _reason,\n', '        uint256 _tapMultiplierRate\n', '    ) external payable returns(uint256) {\n', '        require(!queued[uint(Subject.RaiseTap)]);\n', '        require(100 < _tapMultiplierRate && _tapMultiplierRate <= 200);\n', '\n', '        uint256 newID = addProposal(Subject.RaiseTap, _reason);\n', '        proposals[newID].tapMultiplierRate = _tapMultiplierRate;\n', '\n', '        queued[uint(Subject.RaiseTap)] = true;\n', '        emit ProposalRaised(msg.sender, "RaiseTap");\n', '    }\n', '\n', '    /// @dev Make a self destruction proposal. It costs certain amount of ETH.\n', '    /// @param _reason The reason to destruct the pool. This field can be an URL of a WEB site.\n', '    /// @return \n', '    function addDestructionProposal (string _reason) external payable returns(uint256) {\n', '        require(!queued[uint(Subject.Destruction)]);\n', '\n', '        addProposal(Subject.Destruction, _reason);\n', '\n', '        queued[uint(Subject.Destruction)] = true;\n', '        emit ProposalRaised(msg.sender, "SelfDestruction");\n', '    }\n', '\n', '    /// @dev Vote yes or no to current proposal.\n', '    /// @param amount Token amount to be voted.\n', '    /// @return \n', '    function vote (bool agree, uint256 amount) external {\n', '        require(ERC20Interface(votingTokenAddr).transferFrom(msg.sender, this, amount));\n', '        uint256 pid = this.getCurrentVoting();\n', '        require(pid != PROPOSAL_EMPTY);\n', '\n', '        require(proposals[pid].start_time <= block.timestamp);\n', '        require(proposals[pid].end_time >= block.timestamp);\n', '\n', '        if (deposits[pid][msg.sender] == 0) {\n', '            proposals[pid].voter_count = proposals[pid].voter_count.add(1);\n', '        }\n', '\n', '        deposits[pid][msg.sender] = deposits[pid][msg.sender].add(amount);\n', '        proposals[pid].votes[agree] = proposals[pid].votes[agree].add(amount);\n', '        emit Vote(msg.sender, amount);\n', '    }\n', '\n', '    /// @dev Finalize the current voting. It can be invoked when the end time past.\n', '    /// @dev Anyone can invoke this function.\n', '    /// @return \n', '    function finalizeVoting () external {\n', '        uint256 pid = this.getCurrentVoting();\n', '        require(pid != PROPOSAL_EMPTY);\n', '        require(proposals[pid].end_time <= block.timestamp);\n', '        require(!proposals[pid].isFinalized);\n', '\n', '        proposals[pid].isFinalized = true;\n', '\n', '        if (isSubjectRaiseTap(pid)) {\n', '            queued[uint(Subject.RaiseTap)] = false;\n', '            if (isPassed(pid)) {\n', '                DaicoPool(poolAddr).raiseTap(proposals[pid].tapMultiplierRate);\n', '            }\n', '\n', '        } else if (isSubjectDestruction(pid)) {\n', '            queued[uint(Subject.Destruction)] = false;\n', '            if (isPassed(pid)) {\n', '                DaicoPool(poolAddr).selfDestruction();\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Return all tokens which specific account used to vote so far.\n', '    /// @param account An address that deposited tokens. It also be the receiver.\n', '    /// @return \n', '    function returnToken (address account) external returns(bool) {\n', '        uint256 amount = 0;\n', '    \n', '        for (uint256 pid = 0; pid < proposals.length; pid++) {\n', '            if(!proposals[pid].isFinalized){\n', '              break;\n', '            }\n', '            amount = amount.add(deposits[pid][account]);\n', '            deposits[pid][account] = 0;\n', '        }\n', '\n', '        if(amount <= 0){\n', '           return false;\n', '        }\n', '\n', '        require(ERC20Interface(votingTokenAddr).transfer(account, amount));\n', '        emit ReturnDeposit(account, amount);\n', ' \n', '        return true;\n', '    }\n', '\n', '    /// @dev Return tokens to multiple addresses.\n', '    /// @param accounts Addresses that deposited tokens. They also be the receivers.\n', '    /// @return \n', '    function returnTokenMulti (address[] accounts) external {\n', '        for(uint256 i = 0; i < accounts.length; i++){\n', '            this.returnToken(accounts[i]);\n', '        }\n', '    }\n', '\n', '    /// @dev Return the index of on going voting.\n', '    /// @return The index of voting. \n', '    function getCurrentVoting () public view returns(uint256) {\n', '        for (uint256 i = 0; i < proposals.length; i++) {\n', '            if (!proposals[i].isFinalized) {\n', '                return i;\n', '            }\n', '        }\n', '        return PROPOSAL_EMPTY;\n', '    }\n', '\n', '    /// @dev Check if a proposal has been agreed or not.\n', '    /// @param pid Index of a proposal.\n', '    /// @return True if the proposal passed. False otherwise. \n', '    function isPassed (uint256 pid) public view returns(bool) {\n', '        require(proposals[pid].isFinalized);\n', '        uint256 ayes = getAyes(pid);\n', '        uint256 nays = getNays(pid);\n', '        uint256 absent = ERC20Interface(votingTokenAddr).totalSupply().sub(ayes).sub(nays);\n', '        return (ayes > nays.add(absent.div(6)));\n', '    }\n', '\n', '    /// @dev Check if a voting has started or not.\n', '    /// @param pid Index of a proposal.\n', '    /// @return True if the voting already started. False otherwise. \n', '    function isStarted (uint256 pid) public view returns(bool) {\n', '        if (pid > proposals.length) {\n', '            return false;\n', '        } else if (block.timestamp >= proposals[pid].start_time) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Check if a voting has ended or not.\n', '    /// @param pid Index of a proposal.\n', '    /// @return True if the voting already ended. False otherwise. \n', '    function isEnded (uint256 pid) public view returns(bool) {\n', '        if (pid > proposals.length) {\n', '            return false;\n', '        } else if (block.timestamp >= proposals[pid].end_time) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /// @dev Return the reason of a proposal.\n', '    /// @param pid Index of a proposal.\n', '    /// @return Text of the reason that is set when the proposal made. \n', '    function getReason (uint256 pid) external view returns(string) {\n', '        require(pid < proposals.length);\n', '        return proposals[pid].reason;\n', '    }\n', '\n', '    /// @dev Check if a proposal is about TAP raising or not.\n', '    /// @param pid Index of a proposal.\n', '    /// @return True if it&#39;s TAP raising. False otherwise.\n', '    function isSubjectRaiseTap (uint256 pid) public view returns(bool) {\n', '        require(pid < proposals.length);\n', '        return proposals[pid].subject == Subject.RaiseTap;\n', '    }\n', '\n', '    /// @dev Check if a proposal is about self destruction or not.\n', '    /// @param pid Index of a proposal.\n', '    /// @return True if it&#39;s self destruction. False otherwise.\n', '    function isSubjectDestruction (uint256 pid) public view returns(bool) {\n', '        require(pid < proposals.length);\n', '        return proposals[pid].subject == Subject.Destruction;\n', '    }\n', '\n', '    /// @dev Return the number of voters take part in a specific voting.\n', '    /// @param pid Index of a proposal.\n', '    /// @return The number of voters.\n', '    function getVoterCount (uint256 pid) external view returns(uint256) {\n', '        require(pid < proposals.length);\n', '        return proposals[pid].voter_count;\n', '    }\n', '\n', '    /// @dev Return the number of votes that agrees the proposal.\n', '    /// @param pid Index of a proposal.\n', '    /// @return The number of votes that agrees the proposal.\n', '    function getAyes (uint256 pid) public view returns(uint256) {\n', '        require(pid < proposals.length);\n', '        require(proposals[pid].isFinalized);\n', '        return proposals[pid].votes[true];\n', '    }\n', '\n', '    /// @dev Return the number of votes that disagrees the proposal.\n', '    /// @param pid Index of a proposal.\n', '    /// @return The number of votes that disagrees the proposal.\n', '    function getNays (uint256 pid) public view returns(uint256) {\n', '        require(pid < proposals.length);\n', '        require(proposals[pid].isFinalized);\n', '        return proposals[pid].votes[false];\n', '    }\n', '\n', '    /// @dev Internal function to add a proposal into the voting queue.\n', '    /// @param _subject Subject of the proposal. Can be TAP raising or self destruction.\n', '    /// @param _reason Reason of the proposal. This field can be an URL of a WEB site.\n', '    /// @return Index of the proposal.\n', '    function addProposal (Subject _subject, string _reason) internal returns(uint256) {\n', '        require(msg.value == proposalCostWei);\n', '        require(DaicoPool(poolAddr).isStateProjectInProgress());\n', '        poolAddr.transfer(msg.value);\n', '\n', '        Proposal memory proposal;\n', '        proposal.subject = _subject;\n', '        proposal.reason = _reason;\n', '        proposal.start_time = block.timestamp;\n', '        proposal.end_time = block.timestamp + VOTING_PERIOD;\n', '        proposal.voter_count = 0;\n', '        proposal.isFinalized = false;\n', '\n', '        proposals.push(proposal);\n', '        uint256 newID = proposals.length - 1;\n', '        return newID;\n', '    }\n', '}']