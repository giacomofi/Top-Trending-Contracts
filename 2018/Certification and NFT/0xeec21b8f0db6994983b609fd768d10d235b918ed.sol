['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20Cutted {\n', '    \n', '  function balanceOf(address who) public constant returns (uint256);\n', '  \n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  \n', '}\n', '\n', '\n', 'contract SimpleDistributor {\n', '    \n', '  address public owner;\n', '    \n', '  ERC20Cutted public token = ERC20Cutted(0x2D3E7D4870a51b918919E7B851FE19983E4c38d5);\n', '    \n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '   \n', '  function addReceivers(address[] receivers, uint[] balances) public {\n', '    require(msg.sender == owner);\n', '    for(uint i = 0; i < receivers.length; i++) {\n', '      token.transfer(receivers[i], balances[i]);\n', '    }\n', '  } \n', '  \n', '  function retrieveCurrentTokensToOwner() public {\n', '    retrieveTokens(owner, address(token));\n', '  }\n', '\n', '  function retrieveTokens(address to, address anotherToken) public {\n', '    require(msg.sender == owner);\n', '    ERC20Cutted alienToken = ERC20Cutted(anotherToken);\n', '    alienToken.transfer(to, alienToken.balanceOf(this));\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract ERC20Cutted {\n', '    \n', '  function balanceOf(address who) public constant returns (uint256);\n', '  \n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  \n', '}\n', '\n', '\n', 'contract SimpleDistributor {\n', '    \n', '  address public owner;\n', '    \n', '  ERC20Cutted public token = ERC20Cutted(0x2D3E7D4870a51b918919E7B851FE19983E4c38d5);\n', '    \n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '   \n', '  function addReceivers(address[] receivers, uint[] balances) public {\n', '    require(msg.sender == owner);\n', '    for(uint i = 0; i < receivers.length; i++) {\n', '      token.transfer(receivers[i], balances[i]);\n', '    }\n', '  } \n', '  \n', '  function retrieveCurrentTokensToOwner() public {\n', '    retrieveTokens(owner, address(token));\n', '  }\n', '\n', '  function retrieveTokens(address to, address anotherToken) public {\n', '    require(msg.sender == owner);\n', '    ERC20Cutted alienToken = ERC20Cutted(anotherToken);\n', '    alienToken.transfer(to, alienToken.balanceOf(this));\n', '  }\n', '\n', '}']
