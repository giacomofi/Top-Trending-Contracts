['pragma solidity ^0.4.11;\n', '\n', '// File: contracts/CAVAssetInterface.sol\n', '\n', 'contract CAVAssetInterface {\n', '    function __transferWithReference(address _to, uint _value, string _reference, address _sender) returns(bool);\n', '    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\n', '    function __approve(address _spender, uint _value, address _sender) returns(bool);\n', '    function __process(bytes _data, address _sender) payable {\n', '        revert();\n', '    }\n', '}\n', '\n', '// File: contracts/CAVAssetProxyInterface.sol\n', '\n', 'contract CAVAssetProxy {\n', '    address public platform;\n', '    bytes32 public smbl;\n', '    function __transferWithReference(address _to, uint _value, string _reference, address _sender) returns(bool);\n', '    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\n', '    function __approve(address _spender, uint _value, address _sender) returns(bool);\n', '    function getLatestVersion() returns(address);\n', '    function init(address _CAVPlatform, string _symbol, string _name);\n', '    function proposeUpgrade(address _newVersion) returns (bool);\n', '}\n', '\n', '// File: contracts/CAVPlatformInterface.sol\n', '\n', 'contract CAVPlatform {\n', '    mapping(bytes32 => address) public proxies;\n', '    function symbols(uint _idx) public constant returns (bytes32);\n', '    function symbolsCount() public constant returns (uint);\n', '\n', '    function name(bytes32 _symbol) returns(string);\n', '    function setProxy(address _address, bytes32 _symbol) returns(uint errorCode);\n', '    function isCreated(bytes32 _symbol) constant returns(bool);\n', '    function isOwner(address _owner, bytes32 _symbol) returns(bool);\n', '    function owner(bytes32 _symbol) constant returns(address);\n', '    function totalSupply(bytes32 _symbol) returns(uint);\n', '    function balanceOf(address _holder, bytes32 _symbol) returns(uint);\n', '    function allowance(address _from, address _spender, bytes32 _symbol) returns(uint);\n', '    function baseUnit(bytes32 _symbol) returns(uint8);\n', '    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) returns(uint errorCode);\n', '    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) returns(uint errorCode);\n', '    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) returns(uint errorCode);\n', '    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) returns(uint errorCode);\n', '    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, address _account) returns(uint errorCode);\n', '    function reissueAsset(bytes32 _symbol, uint _value) returns(uint errorCode);\n', '    function revokeAsset(bytes32 _symbol, uint _value) returns(uint errorCode);\n', '    function isReissuable(bytes32 _symbol) returns(bool);\n', '    function changeOwnership(bytes32 _symbol, address _newOwner) returns(uint errorCode);\n', '    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool);\n', '}\n', '\n', '// File: contracts/CAVAsset.sol\n', '\n', '/**\n', ' * @title CAV Asset implementation contract.\n', ' *\n', ' * Basic asset implementation contract, without any additional logic.\n', ' * Every other asset implementation contracts should derive from this one.\n', ' * Receives calls from the proxy, and calls back immediatly without arguments modification.\n', ' *\n', ' * Note: all the non constant functions return false instead of throwing in case if state change\n', ' * didn&#39;t happen yet.\n', ' */\n', 'contract CAVAsset is CAVAssetInterface {\n', '\n', '    // Assigned asset proxy contract, immutable.\n', '    CAVAssetProxy public proxy;\n', '\n', '    // banned addresses\n', '    mapping (address => bool) public blacklist;\n', '\n', '    // stops asset transfers\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * Only assigned proxy is allowed to call.\n', '     */\n', '    modifier onlyProxy() {\n', '        if (proxy == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '    \n', '    modifier onlyNotPaused(address sender) {\n', '        if (!paused || isAuthorized(sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    modifier onlyAcceptable(address _address) {\n', '        if (!blacklist[_address]) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '    *  Only assets&#39;s admins are allowed to execute\n', '    */\n', '    modifier onlyAuthorized() {\n', '        if (isAuthorized(msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Sets asset proxy address.\n', '     *\n', '     * Can be set only once.\n', '     *\n', '     * @param _proxy asset proxy contract address.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function init(CAVAssetProxy _proxy) returns(bool) {\n', '        if (address(proxy) != 0x0) {\n', '            return false;\n', '        }\n', '        proxy = _proxy;\n', '        return true;\n', '    }\n', '\n', '    function isAuthorized(address sender) public view returns (bool) {\n', '        CAVPlatform platform = CAVPlatform(proxy.platform());\n', '        return platform.hasAssetRights(sender, proxy.smbl());\n', '    }\n', '\n', '    /**\n', '    *  @dev Lifts the ban on transfers for given addresses\n', '    */\n', '    function restrict(address [] _restricted) external onlyAuthorized returns (bool) {\n', '        for (uint i = 0; i < _restricted.length; i++) {\n', '            blacklist[_restricted[i]] = true;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *  @dev Revokes the ban on transfers for given addresses\n', '    */\n', '    function unrestrict(address [] _unrestricted) external onlyAuthorized returns (bool) {\n', '        for (uint i = 0; i < _unrestricted.length; i++) {\n', '            delete blacklist[_unrestricted[i]];\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    * Only admin is allowed to execute this method.\n', '    */\n', '    function pause() external onlyAuthorized returns (bool) {\n', '        paused = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    * Only admin is allowed to execute this method.\n', '    */\n', '    function unpause() external onlyAuthorized returns (bool) {\n', '        paused = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function __transferWithReference(address _to, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\n', '        return _transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications if an asset is not stopped.\n', '     * Checks whether _from/_sender are not in blacklist.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferWithReference(address _to, uint _value, string _reference, address _sender)\n', '    internal\n', '    onlyNotPaused(_sender)\n', '    onlyAcceptable(_to)\n', '    onlyAcceptable(_sender)\n', '    returns(bool)\n', '    {\n', '        return proxy.__transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\n', '        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications if an asset is not stopped.\n', '     * Checks whether _from/_sender are not in blacklist.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender)\n', '    internal\n', '    onlyNotPaused(_sender)\n', '    onlyAcceptable(_from)\n', '    onlyAcceptable(_to)\n', '    onlyAcceptable(_sender)\n', '    returns(bool)\n', '    {\n', '        return proxy.__transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function __approve(address _spender, uint _value, address _sender) onlyProxy() returns(bool) {\n', '        return _approve(_spender, _value, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _approve(address _spender, uint _value, address _sender)\n', '    internal\n', '    onlyAcceptable(_spender)\n', '    onlyAcceptable(_sender)\n', '    returns(bool)\n', '    {\n', '        return proxy.__approve(_spender, _value, _sender);\n', '    }\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '// File: contracts/CAVAssetInterface.sol\n', '\n', 'contract CAVAssetInterface {\n', '    function __transferWithReference(address _to, uint _value, string _reference, address _sender) returns(bool);\n', '    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\n', '    function __approve(address _spender, uint _value, address _sender) returns(bool);\n', '    function __process(bytes _data, address _sender) payable {\n', '        revert();\n', '    }\n', '}\n', '\n', '// File: contracts/CAVAssetProxyInterface.sol\n', '\n', 'contract CAVAssetProxy {\n', '    address public platform;\n', '    bytes32 public smbl;\n', '    function __transferWithReference(address _to, uint _value, string _reference, address _sender) returns(bool);\n', '    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) returns(bool);\n', '    function __approve(address _spender, uint _value, address _sender) returns(bool);\n', '    function getLatestVersion() returns(address);\n', '    function init(address _CAVPlatform, string _symbol, string _name);\n', '    function proposeUpgrade(address _newVersion) returns (bool);\n', '}\n', '\n', '// File: contracts/CAVPlatformInterface.sol\n', '\n', 'contract CAVPlatform {\n', '    mapping(bytes32 => address) public proxies;\n', '    function symbols(uint _idx) public constant returns (bytes32);\n', '    function symbolsCount() public constant returns (uint);\n', '\n', '    function name(bytes32 _symbol) returns(string);\n', '    function setProxy(address _address, bytes32 _symbol) returns(uint errorCode);\n', '    function isCreated(bytes32 _symbol) constant returns(bool);\n', '    function isOwner(address _owner, bytes32 _symbol) returns(bool);\n', '    function owner(bytes32 _symbol) constant returns(address);\n', '    function totalSupply(bytes32 _symbol) returns(uint);\n', '    function balanceOf(address _holder, bytes32 _symbol) returns(uint);\n', '    function allowance(address _from, address _spender, bytes32 _symbol) returns(uint);\n', '    function baseUnit(bytes32 _symbol) returns(uint8);\n', '    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) returns(uint errorCode);\n', '    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) returns(uint errorCode);\n', '    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) returns(uint errorCode);\n', '    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) returns(uint errorCode);\n', '    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, address _account) returns(uint errorCode);\n', '    function reissueAsset(bytes32 _symbol, uint _value) returns(uint errorCode);\n', '    function revokeAsset(bytes32 _symbol, uint _value) returns(uint errorCode);\n', '    function isReissuable(bytes32 _symbol) returns(bool);\n', '    function changeOwnership(bytes32 _symbol, address _newOwner) returns(uint errorCode);\n', '    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool);\n', '}\n', '\n', '// File: contracts/CAVAsset.sol\n', '\n', '/**\n', ' * @title CAV Asset implementation contract.\n', ' *\n', ' * Basic asset implementation contract, without any additional logic.\n', ' * Every other asset implementation contracts should derive from this one.\n', ' * Receives calls from the proxy, and calls back immediatly without arguments modification.\n', ' *\n', ' * Note: all the non constant functions return false instead of throwing in case if state change\n', " * didn't happen yet.\n", ' */\n', 'contract CAVAsset is CAVAssetInterface {\n', '\n', '    // Assigned asset proxy contract, immutable.\n', '    CAVAssetProxy public proxy;\n', '\n', '    // banned addresses\n', '    mapping (address => bool) public blacklist;\n', '\n', '    // stops asset transfers\n', '    bool public paused = false;\n', '\n', '    /**\n', '     * Only assigned proxy is allowed to call.\n', '     */\n', '    modifier onlyProxy() {\n', '        if (proxy == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '    \n', '    modifier onlyNotPaused(address sender) {\n', '        if (!paused || isAuthorized(sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    modifier onlyAcceptable(address _address) {\n', '        if (!blacklist[_address]) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', "    *  Only assets's admins are allowed to execute\n", '    */\n', '    modifier onlyAuthorized() {\n', '        if (isAuthorized(msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Sets asset proxy address.\n', '     *\n', '     * Can be set only once.\n', '     *\n', '     * @param _proxy asset proxy contract address.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function init(CAVAssetProxy _proxy) returns(bool) {\n', '        if (address(proxy) != 0x0) {\n', '            return false;\n', '        }\n', '        proxy = _proxy;\n', '        return true;\n', '    }\n', '\n', '    function isAuthorized(address sender) public view returns (bool) {\n', '        CAVPlatform platform = CAVPlatform(proxy.platform());\n', '        return platform.hasAssetRights(sender, proxy.smbl());\n', '    }\n', '\n', '    /**\n', '    *  @dev Lifts the ban on transfers for given addresses\n', '    */\n', '    function restrict(address [] _restricted) external onlyAuthorized returns (bool) {\n', '        for (uint i = 0; i < _restricted.length; i++) {\n', '            blacklist[_restricted[i]] = true;\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    *  @dev Revokes the ban on transfers for given addresses\n', '    */\n', '    function unrestrict(address [] _unrestricted) external onlyAuthorized returns (bool) {\n', '        for (uint i = 0; i < _unrestricted.length; i++) {\n', '            delete blacklist[_unrestricted[i]];\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    * Only admin is allowed to execute this method.\n', '    */\n', '    function pause() external onlyAuthorized returns (bool) {\n', '        paused = true;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    * Only admin is allowed to execute this method.\n', '    */\n', '    function unpause() external onlyAuthorized returns (bool) {\n', '        paused = false;\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function __transferWithReference(address _to, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\n', '        return _transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications if an asset is not stopped.\n', '     * Checks whether _from/_sender are not in blacklist.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferWithReference(address _to, uint _value, string _reference, address _sender)\n', '    internal\n', '    onlyNotPaused(_sender)\n', '    onlyAcceptable(_to)\n', '    onlyAcceptable(_sender)\n', '    returns(bool)\n', '    {\n', '        return proxy.__transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\n', '        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications if an asset is not stopped.\n', '     * Checks whether _from/_sender are not in blacklist.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender)\n', '    internal\n', '    onlyNotPaused(_sender)\n', '    onlyAcceptable(_from)\n', '    onlyAcceptable(_to)\n', '    onlyAcceptable(_sender)\n', '    returns(bool)\n', '    {\n', '        return proxy.__transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /**\n', '     * Passes execution into virtual function.\n', '     *\n', '     * Can only be called by assigned asset proxy.\n', '     *\n', '     * @return success.\n', '     * @dev function is final, and must not be overridden.\n', '     */\n', '    function __approve(address _spender, uint _value, address _sender) onlyProxy() returns(bool) {\n', '        return _approve(_spender, _value, _sender);\n', '    }\n', '\n', '    /**\n', '     * Calls back without modifications.\n', '     *\n', '     * @return success.\n', '     * @dev function is virtual, and meant to be overridden.\n', '     */\n', '    function _approve(address _spender, uint _value, address _sender)\n', '    internal\n', '    onlyAcceptable(_spender)\n', '    onlyAcceptable(_sender)\n', '    returns(bool)\n', '    {\n', '        return proxy.__approve(_spender, _value, _sender);\n', '    }\n', '}']
