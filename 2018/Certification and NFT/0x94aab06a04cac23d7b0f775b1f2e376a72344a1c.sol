['pragma solidity 0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    function transfer(address to, uint value) external returns (bool ok);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '}\n', '\n', '\n', 'contract Airdrop is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    IERC20 public token;\n', '    uint256 public cap;\n', '    uint256 public individualCap;\n', '    uint256 public totalAlloctedToken;\n', '    mapping (address => uint256) airdropContribution;\n', '\n', '    function Airdrop(\n', '        IERC20 _tokenAddr,\n', '        uint256 _cap,\n', '        uint256 _individualCap\n', '    )\n', '        public\n', '    {\n', '        token = _tokenAddr;\n', '        cap = _cap;\n', '        individualCap = _individualCap;\n', '    }\n', '\n', '    function drop(address[] _recipients, uint256[] _amount) \n', '        external \n', '        onlyOwner returns (bool) \n', '    {\n', '        require(_recipients.length == _amount.length);\n', '        \n', '        for (uint i = 0; i < _recipients.length; i++) {\n', '            require(_recipients[i] != address(0));\n', '            require(individualCap >= airdropContribution[_recipients[i]].add(_amount[i]));\n', '            require(cap >= totalAlloctedToken.add(_amount[i]));\n', '            airdropContribution[_recipients[i]] = airdropContribution[_recipients[i]].add(_amount[i]);\n', '            totalAlloctedToken = totalAlloctedToken.add(_amount[i]);\n', '            token.transfer(_recipients[i], _amount[i]);\n', '        }\n', '        return true;\n', '    }\n', '}']