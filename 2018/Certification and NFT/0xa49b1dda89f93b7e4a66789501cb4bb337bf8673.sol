['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract WelCoinICO is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // start and end timestamps where main-investments are allowed (both inclusive)\n', '  uint256 public mainSaleStartTime;\n', '  uint256 public mainSaleEndTime;\n', '\n', '  // maximum amout of wei for  main sale\n', '  //uint256 public mainSaleWeiCap;\n', '\n', '  // maximum amout of wei to allow for investors\n', '  uint256 public mainSaleMinimumWei;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // address of erc20 token contract\n', '  address public token;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // bonus percent to apply\n', '  uint256 public percent;\n', '\n', '  // amount of raised money in wei\n', '  //uint256 public weiRaised;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function WelCoinICO(uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, address _wallet, address _token) public {\n', '\n', '    // the end of main sale can&#39;t happen before it&#39;s start\n', '    require(_mainSaleStartTime < _mainSaleEndTime);\n', '    require(_wallet != 0x0);\n', '\n', '    mainSaleStartTime = _mainSaleStartTime;\n', '    mainSaleEndTime = _mainSaleEndTime;\n', '    wallet = _wallet;\n', '    token = _token;\n', '    rate = 2500;\n', '    percent = 0;\n', '    mainSaleMinimumWei = 100000000000000000; // 0.1\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '\n', '    require(beneficiary != 0x0);\n', '    require(msg.value != 0x0);\n', '    require(msg.value >= mainSaleMinimumWei);\n', '    require(now >= mainSaleStartTime && now <= mainSaleEndTime);\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // add bonus to tokens depends on the period\n', '    uint256 bonusedTokens = applyBonus(tokens, percent);\n', '\n', '    require(token.call(bytes4(keccak256("transfer(address,uint256)")), beneficiary, bonusedTokens));\n', '\n', '    // token.mint(beneficiary, bonusedTokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // set new dates for main-sale (emergency case)\n', '  function setMainSaleParameters(uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, uint256 _mainSaleMinimumWei) public onlyOwner {\n', '    require(_mainSaleStartTime < _mainSaleEndTime);\n', '    mainSaleStartTime = _mainSaleStartTime;\n', '    mainSaleEndTime = _mainSaleEndTime;\n', '    mainSaleMinimumWei = _mainSaleMinimumWei;\n', '  }\n', '\n', '  // set new wallets (emergency case)\n', '  function setWallet(address _wallet) public onlyOwner {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '  }\n', '\n', '    // set new rate (emergency case)\n', '  function setRate(uint256 _rate) public onlyOwner {\n', '    require(_rate > 0);\n', '    rate = _rate;\n', '  }\n', '\n', '  // send tokens to specified wallet wallet\n', '  function transferTokens(address _wallet, uint256 _amount) public onlyOwner {\n', '    require(_wallet != 0x0);\n', '    require(_amount != 0);\n', '    require(token.call(bytes4(keccak256("transfer(address,uint256)")), _wallet, _amount));\n', '  }\n', '\n', '\n', '  // @return true if main sale event has ended\n', '  function mainSaleHasEnded() external constant returns (bool) {\n', '    return now > mainSaleEndTime;\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '\n', '  function applyBonus(uint256 tokens, uint256 percentToApply) internal pure returns (uint256 bonusedTokens) {\n', '    uint256 tokensToAdd = tokens.mul(percentToApply).div(100);\n', '    return tokens.add(tokensToAdd);\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract WelCoinICO is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // start and end timestamps where main-investments are allowed (both inclusive)\n', '  uint256 public mainSaleStartTime;\n', '  uint256 public mainSaleEndTime;\n', '\n', '  // maximum amout of wei for  main sale\n', '  //uint256 public mainSaleWeiCap;\n', '\n', '  // maximum amout of wei to allow for investors\n', '  uint256 public mainSaleMinimumWei;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // address of erc20 token contract\n', '  address public token;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // bonus percent to apply\n', '  uint256 public percent;\n', '\n', '  // amount of raised money in wei\n', '  //uint256 public weiRaised;\n', '\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function WelCoinICO(uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, address _wallet, address _token) public {\n', '\n', "    // the end of main sale can't happen before it's start\n", '    require(_mainSaleStartTime < _mainSaleEndTime);\n', '    require(_wallet != 0x0);\n', '\n', '    mainSaleStartTime = _mainSaleStartTime;\n', '    mainSaleEndTime = _mainSaleEndTime;\n', '    wallet = _wallet;\n', '    token = _token;\n', '    rate = 2500;\n', '    percent = 0;\n', '    mainSaleMinimumWei = 100000000000000000; // 0.1\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '\n', '    require(beneficiary != 0x0);\n', '    require(msg.value != 0x0);\n', '    require(msg.value >= mainSaleMinimumWei);\n', '    require(now >= mainSaleStartTime && now <= mainSaleEndTime);\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // add bonus to tokens depends on the period\n', '    uint256 bonusedTokens = applyBonus(tokens, percent);\n', '\n', '    require(token.call(bytes4(keccak256("transfer(address,uint256)")), beneficiary, bonusedTokens));\n', '\n', '    // token.mint(beneficiary, bonusedTokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, bonusedTokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // set new dates for main-sale (emergency case)\n', '  function setMainSaleParameters(uint256 _mainSaleStartTime, uint256 _mainSaleEndTime, uint256 _mainSaleMinimumWei) public onlyOwner {\n', '    require(_mainSaleStartTime < _mainSaleEndTime);\n', '    mainSaleStartTime = _mainSaleStartTime;\n', '    mainSaleEndTime = _mainSaleEndTime;\n', '    mainSaleMinimumWei = _mainSaleMinimumWei;\n', '  }\n', '\n', '  // set new wallets (emergency case)\n', '  function setWallet(address _wallet) public onlyOwner {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '  }\n', '\n', '    // set new rate (emergency case)\n', '  function setRate(uint256 _rate) public onlyOwner {\n', '    require(_rate > 0);\n', '    rate = _rate;\n', '  }\n', '\n', '  // send tokens to specified wallet wallet\n', '  function transferTokens(address _wallet, uint256 _amount) public onlyOwner {\n', '    require(_wallet != 0x0);\n', '    require(_amount != 0);\n', '    require(token.call(bytes4(keccak256("transfer(address,uint256)")), _wallet, _amount));\n', '  }\n', '\n', '\n', '  // @return true if main sale event has ended\n', '  function mainSaleHasEnded() external constant returns (bool) {\n', '    return now > mainSaleEndTime;\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '\n', '  function applyBonus(uint256 tokens, uint256 percentToApply) internal pure returns (uint256 bonusedTokens) {\n', '    uint256 tokensToAdd = tokens.mul(percentToApply).div(100);\n', '    return tokens.add(tokensToAdd);\n', '  }\n', '\n', '}']
