['contract Mortal {\n', '    /* Define variable owner of the type address */\n', '    address owner;\n', '\n', '    /* This function is executed at initialization and sets the owner of the contract */\n', '    constructor() public { owner = msg.sender; }\n', '\n', '    /* Function to recover the funds on the contract */\n', '    function kill() public { if (msg.sender == owner) selfdestruct(owner); }\n', '}\n', '\n', 'contract Greeter is Mortal {\n', '    /* Define variable greeting of the type string */\n', '    string greeting;\n', '\n', '    /* This runs when the contract is executed */\n', '    constructor() public {\n', '        greeting = "Well, hello there! I am Gruvin&#39;s first Ethereum contract!";\n', '    }\n', '\n', '    /* Main function */\n', '    function greet() public constant returns (string) {\n', '        return greeting;\n', '    }\n', '}']
['contract Mortal {\n', '    /* Define variable owner of the type address */\n', '    address owner;\n', '\n', '    /* This function is executed at initialization and sets the owner of the contract */\n', '    constructor() public { owner = msg.sender; }\n', '\n', '    /* Function to recover the funds on the contract */\n', '    function kill() public { if (msg.sender == owner) selfdestruct(owner); }\n', '}\n', '\n', 'contract Greeter is Mortal {\n', '    /* Define variable greeting of the type string */\n', '    string greeting;\n', '\n', '    /* This runs when the contract is executed */\n', '    constructor() public {\n', '        greeting = "Well, hello there! I am Gruvin\'s first Ethereum contract!";\n', '    }\n', '\n', '    /* Main function */\n', '    function greet() public constant returns (string) {\n', '        return greeting;\n', '    }\n', '}']
