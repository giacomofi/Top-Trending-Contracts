['pragma solidity ^0.4.20;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ZipFlax ICO Crowdsale CONTRACT\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Ownership contract\n', '// _newOwner is address of new owner\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = 0xBF2B073fF018F6bF1Caee6cE716B833271C159ee;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0x0));\n', '        emit OwnershipTransferred(owner,_newOwner);\n', '        owner = _newOwner;\n', '    }\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Token interface\n', '// ----------------------------------------------------------------------------\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ZipFlax ICO smart contract\n', '// ----------------------------------------------------------------------------\n', 'contract ZipFlaxICO is Owned{\n', '    \n', '    using SafeMath for uint256;\n', '   \n', '    enum State {\n', '        PrivateSale,\n', '        PreICO,\n', '        ICO,\n', '        Successful\n', '    }\n', '    \n', '    //public variables\n', '    uint256 tokenPrice;\n', '    State public state; //Set initial stage\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    token public tokenReward; //Address of the valid token used as reward\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(address _creator);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '\n', '\n', '    modifier notFinished {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // constructor\n', '    // _addressOfToken is the token totalDistributed\n', '    // ----------------------------------------------------------------------------\n', '    function ZipFlaxICO(token _addressOfTokenUsedAsReward) public {\n', '        require(_addressOfTokenUsedAsReward != address(0));\n', '        \n', '        tokenPrice = 20000;\n', '        state = State.PrivateSale;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '        emit LogFunderInitialized(owner);\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // Function to handle eth transfers\n', '    // It invokes when someone sends ETH to this contract address.\n', '    // Requires enough gas for the execution otherwise it&#39;ll throw out of gas error.\n', '    // tokens are transferred to user\n', '    // ETH are transferred to current owner\n', '    // ----------------------------------------------------------------------------\n', '    function() public payable {\n', '        contribute();\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Acceptes ETH and send equivalent tokens with bonus if any.\n', '    // ----------------------------------------------------------------------------\n', '    function contribute() public notFinished payable {\n', '        \n', '        uint256 tokenBought; // Variable to store amount of tokens bought\n', '        uint256 bonus; // Variable to store token bonus\n', '\n', '        tokenBought = msg.value.mul(tokenPrice).mul(10 ** 8).div(10 ** 18);\n', '\n', '        //Bonus calculation\n', '        if (state == State.PrivateSale){\n', '            bonus = tokenBought.mul(35).div(100); // 35 % bonus\n', '        }\n', '        \n', '        if (state == State.PreICO){\n', '            bonus = tokenBought.mul(25).div(100); // 25 % bonus\n', '        }\n', '        \n', '        if (state == State.ICO){\n', '            bonus = tokenBought.mul(20).div(100); // 20 % bonus\n', '        }\n', '        \n', '        tokenBought = tokenBought.add(bonus); // Adding bonus\n', '        \n', '        // this smart contract should have enough tokens to distribute\n', '        require(tokenReward.balanceOf(this) >= tokenBought);\n', '        \n', '        totalRaised = totalRaised.add(msg.value); //Save the total eth totalRaised (in wei)\n', '        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\n', '        \n', '        tokenReward.transfer(msg.sender,tokenBought); //Send Tokens to user\n', '        owner.transfer(msg.value); // Send ETH to owner\n', '        \n', '        //LOGS\n', '        emit LogBeneficiaryPaid(owner);\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit LogContributorsPayout(msg.sender,tokenBought);\n', '\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // To change to next stage\n', '    // ----------------------------------------------------------------------------\n', '    function nextState() onlyOwner public {\n', '        require(state != State.ICO);\n', '        state = State(uint(state) + 1);\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // To change to previous stage\n', '    // ----------------------------------------------------------------------------\n', '    function previousState() onlyOwner public {\n', '        require(state != State.PrivateSale);\n', '        state = State(uint(state) - 1);\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // To close the ICO and mark as Successful\n', '    // ----------------------------------------------------------------------------\n', '    function finished() onlyOwner public { \n', '        \n', '        uint256 remainder = tokenReward.balanceOf(this); //Remaining tokens on contract\n', '        \n', '        //Funds send to creator if any\n', '        if(address(this).balance > 0) {\n', '            owner.transfer(address(this).balance);\n', '            emit LogBeneficiaryPaid(owner);\n', '        }\n', ' \n', '        tokenReward.transfer(owner,remainder); //remainder tokens send to creator\n', '        emit LogContributorsPayout(owner, remainder);\n', '        \n', '        state = State.Successful; // updating the state\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Function to claim any token stuck on contract\n', '    // tokens is the amount to transfer tokens to the owner\n', '    // ----------------------------------------------------------------------------\n', '    function claimTokens(uint256 tokens) onlyOwner public {\n', '        require(tokenReward.balanceOf(this) >= tokens); // should have enough tokens\n', '        tokenReward.transfer(owner,tokens); // Transfer tokens to owner\n', '    }\n', '\n', '    \n', '}']