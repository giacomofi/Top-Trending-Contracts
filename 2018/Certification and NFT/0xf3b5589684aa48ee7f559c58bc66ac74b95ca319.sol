['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Escrow is Ownable {\n', '    using SafeMath for uint256;\n', '    struct EscrowElement {\n', '    bool exists;\n', '    address src;\n', '    address dst;\n', '    uint256 value;\n', '    }\n', '\n', '    address public token;\n', '    ERC20 public tok;\n', '\n', '    mapping (bytes20 => EscrowElement) public escrows;\n', '\n', '    /* Numerator and denominator of common fraction.\n', '        E.g. 1 & 25 mean one twenty fifths, i.e. 0.04 = 4% */\n', '    uint256 public escrow_fee_numerator; /* 1 */\n', '    uint256 public escrow_fee_denominator; /* 25 */\n', '\n', '\n', '\n', '    event EscrowStarted(\n', '    bytes20 indexed escrow_id,\n', '    EscrowElement escrow_element\n', '    );\n', '\n', '    event EscrowReleased(\n', '    bytes20 indexed escrow_id,\n', '    EscrowElement escrow_element\n', '    );\n', '\n', '    event EscrowCancelled(\n', '    bytes20 indexed escrow_id,\n', '    EscrowElement escrow_element\n', '    );\n', '\n', '\n', '    event TokenSet(\n', '    address indexed token\n', '    );\n', '\n', '    event Withdrawed(\n', '    address indexed dst,\n', '    uint256 value\n', '    );\n', '\n', '    function Escrow(address _token){\n', '        token = _token;\n', '        tok = ERC20(_token);\n', '        escrow_fee_numerator = 1;\n', '        escrow_fee_denominator = 25;\n', '    }\n', '\n', '    function startEscrow(bytes20 escrow_id, address to, uint256 value) public returns (bool) {\n', '        require(to != address(0));\n', '        require(escrows[escrow_id].exists != true);\n', '//        ERC20 tok = ERC20(token);\n', '        tok.transferFrom(msg.sender, address(this), value);\n', '        EscrowElement memory escrow_element = EscrowElement(true, msg.sender, to, value);\n', '        escrows[escrow_id] = escrow_element;\n', '\n', '        emit EscrowStarted(escrow_id, escrow_element);\n', '\n', '        return true;\n', '    }\n', '\n', '    function releaseEscrow(bytes20 escrow_id, address fee_destination) onlyOwner returns (bool) {\n', '        require(fee_destination != address(0));\n', '        require(escrows[escrow_id].exists == true);\n', '\n', '        EscrowElement storage escrow_element = escrows[escrow_id];\n', '\n', '        uint256 fee = escrow_element.value.mul(escrow_fee_numerator).div(escrow_fee_denominator);\n', '        uint256 value = escrow_element.value.sub(fee);\n', '\n', '//        ERC20 tok = ERC20(token);\n', '\n', '        tok.transfer(escrow_element.dst, value);\n', '        tok.transfer(fee_destination, fee);\n', '\n', '\n', '        EscrowElement memory _escrow_element = escrow_element;\n', '\n', '        emit EscrowReleased(escrow_id, _escrow_element);\n', '\n', '        delete escrows[escrow_id];\n', '\n', '        return true;\n', '    }\n', '\n', '    function cancelEscrow(bytes20 escrow_id) onlyOwner returns (bool) {\n', '        EscrowElement storage escrow_element = escrows[escrow_id];\n', '\n', '//        ERC20 tok = ERC20(token);\n', '\n', '        tok.transfer(escrow_element.src, escrow_element.value);\n', '        /* Workaround because of lack of feature. See https://github.com/ethereum/solidity/issues/3577 */\n', '        EscrowElement memory _escrow_element = escrow_element;\n', '\n', '\n', '        emit EscrowCancelled(escrow_id, _escrow_element);\n', '\n', '        delete escrows[escrow_id];\n', '\n', '        return true;\n', '    }\n', '\n', '    function withdrawToken(address dst, uint256 value) onlyOwner returns (bool){\n', '        require(dst != address(0));\n', '        require(value > 0);\n', '//        ERC20 tok = ERC20(token);\n', '        tok.transfer(dst, value);\n', '\n', '        emit Withdrawed(dst, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setToken(address _token) onlyOwner returns (bool){\n', '        require(_token != address(0));\n', '        token = _token;\n', '        tok = ERC20(_token);\n', '        emit TokenSet(_token);\n', '\n', '        return true;\n', '    }\n', '    //\n', '\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Escrow is Ownable {\n', '    using SafeMath for uint256;\n', '    struct EscrowElement {\n', '    bool exists;\n', '    address src;\n', '    address dst;\n', '    uint256 value;\n', '    }\n', '\n', '    address public token;\n', '    ERC20 public tok;\n', '\n', '    mapping (bytes20 => EscrowElement) public escrows;\n', '\n', '    /* Numerator and denominator of common fraction.\n', '        E.g. 1 & 25 mean one twenty fifths, i.e. 0.04 = 4% */\n', '    uint256 public escrow_fee_numerator; /* 1 */\n', '    uint256 public escrow_fee_denominator; /* 25 */\n', '\n', '\n', '\n', '    event EscrowStarted(\n', '    bytes20 indexed escrow_id,\n', '    EscrowElement escrow_element\n', '    );\n', '\n', '    event EscrowReleased(\n', '    bytes20 indexed escrow_id,\n', '    EscrowElement escrow_element\n', '    );\n', '\n', '    event EscrowCancelled(\n', '    bytes20 indexed escrow_id,\n', '    EscrowElement escrow_element\n', '    );\n', '\n', '\n', '    event TokenSet(\n', '    address indexed token\n', '    );\n', '\n', '    event Withdrawed(\n', '    address indexed dst,\n', '    uint256 value\n', '    );\n', '\n', '    function Escrow(address _token){\n', '        token = _token;\n', '        tok = ERC20(_token);\n', '        escrow_fee_numerator = 1;\n', '        escrow_fee_denominator = 25;\n', '    }\n', '\n', '    function startEscrow(bytes20 escrow_id, address to, uint256 value) public returns (bool) {\n', '        require(to != address(0));\n', '        require(escrows[escrow_id].exists != true);\n', '//        ERC20 tok = ERC20(token);\n', '        tok.transferFrom(msg.sender, address(this), value);\n', '        EscrowElement memory escrow_element = EscrowElement(true, msg.sender, to, value);\n', '        escrows[escrow_id] = escrow_element;\n', '\n', '        emit EscrowStarted(escrow_id, escrow_element);\n', '\n', '        return true;\n', '    }\n', '\n', '    function releaseEscrow(bytes20 escrow_id, address fee_destination) onlyOwner returns (bool) {\n', '        require(fee_destination != address(0));\n', '        require(escrows[escrow_id].exists == true);\n', '\n', '        EscrowElement storage escrow_element = escrows[escrow_id];\n', '\n', '        uint256 fee = escrow_element.value.mul(escrow_fee_numerator).div(escrow_fee_denominator);\n', '        uint256 value = escrow_element.value.sub(fee);\n', '\n', '//        ERC20 tok = ERC20(token);\n', '\n', '        tok.transfer(escrow_element.dst, value);\n', '        tok.transfer(fee_destination, fee);\n', '\n', '\n', '        EscrowElement memory _escrow_element = escrow_element;\n', '\n', '        emit EscrowReleased(escrow_id, _escrow_element);\n', '\n', '        delete escrows[escrow_id];\n', '\n', '        return true;\n', '    }\n', '\n', '    function cancelEscrow(bytes20 escrow_id) onlyOwner returns (bool) {\n', '        EscrowElement storage escrow_element = escrows[escrow_id];\n', '\n', '//        ERC20 tok = ERC20(token);\n', '\n', '        tok.transfer(escrow_element.src, escrow_element.value);\n', '        /* Workaround because of lack of feature. See https://github.com/ethereum/solidity/issues/3577 */\n', '        EscrowElement memory _escrow_element = escrow_element;\n', '\n', '\n', '        emit EscrowCancelled(escrow_id, _escrow_element);\n', '\n', '        delete escrows[escrow_id];\n', '\n', '        return true;\n', '    }\n', '\n', '    function withdrawToken(address dst, uint256 value) onlyOwner returns (bool){\n', '        require(dst != address(0));\n', '        require(value > 0);\n', '//        ERC20 tok = ERC20(token);\n', '        tok.transfer(dst, value);\n', '\n', '        emit Withdrawed(dst, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    function setToken(address _token) onlyOwner returns (bool){\n', '        require(_token != address(0));\n', '        token = _token;\n', '        tok = ERC20(_token);\n', '        emit TokenSet(_token);\n', '\n', '        return true;\n', '    }\n', '    //\n', '\n', '\n', '}']
