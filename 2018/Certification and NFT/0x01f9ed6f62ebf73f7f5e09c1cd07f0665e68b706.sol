['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     **/\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     **/\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '    \n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     **/\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     **/\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic interface\n', ' * @dev Basic ERC20 interface\n', ' **/\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' **/\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' **/\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    \n', '    /**\n', '     * @dev total number of tokens in existence\n', '     **/\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     **/\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     **/\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     **/\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '    \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     **/\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     **/\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     **/\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     **/\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' **/\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '     **/\n', '   constructor() public {\n', '      owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     **/\n', '    modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     **/\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '      require(newOwner != address(0));\n', '      emit OwnershipTransferred(owner, newOwner);\n', '      owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev The Pausable contract has control functions to pause and unpause token transfers\n', ' **/\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '    \n', '    bool public canPause = true;\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     **/\n', '    modifier whenNotPaused() {\n', '        require(!paused || msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     **/\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     **/\n', '    function pause() onlyOwner whenNotPaused public {\n', '        require(canPause == true);\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '    \n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     **/\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '    \n', '    /**\n', '     * @dev Prevent the token from ever being paused again\n', '     **/\n', '    function notPauseable() onlyOwner public{\n', '        paused = false;\n', '        canPause = false;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '    /**\n', '     * @dev Prevent the token from ever being paused again\n', '     **/\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '    \n', '    /**\n', '     * @dev transferFrom function to tansfer tokens when token is not paused\n', '     **/\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    /**\n', '     * @dev approve spender when not paused\n', '     **/\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '    \n', '    /**\n', '     * @dev increaseApproval of spender when not paused\n', '     **/\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '    \n', '    /**\n', '     * @dev decreaseApproval of spender when not paused\n', '     **/\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Configurable\n', ' * @dev Configurable varriables of the contract\n', ' **/\n', 'contract Configurable {\n', '    uint256 public constant cap = 1000000000*10**18;\n', '    uint256 public constant preSaleFirstCap = 25000000*10**18;\n', '    uint256 public constant preSaleSecondCap = 175000000*10**18; // 25,000,000 + 150,000,000\n', '    uint256 public constant preSaleThirdCap = 325000000*10**18; // 25,000,000 + 150,000,000 + 150,000,000\n', '    uint256 public constant preSaleFourthCap = 425000000*10**18; // 25,000,000 + 150,000,000 + 150,000,000 + 100,000,000\n', '    uint256 public constant privateLimit = 200000000*10**18;\n', '    uint256 public constant basePrice = 2777777777777777777778; // tokens per 1 ether\n', '    uint256 public constant preSaleDiscountPrice = 11111111111111111111111; // pre sale 1 stage > 10 ETH or pre sale private discount 75% tokens per 1 ether\n', '    uint256 public constant preSaleFirstPrice = 5555555555555555555556; // pre sale 1 stage < 10 ETH discount 50%, tokens per 1 ether\n', '    uint256 public constant preSaleSecondPrice = 5555555555555555555556; // pre sale 2 stage discount 50%, tokens per 1 ether\n', '    uint256 public constant preSaleThirdPrice = 4273504273504273504274; // pre sale 3 stage discount 35%, tokens per 1 ether\n', '    uint256 public constant preSaleFourthPrice = 3472222222222222222222; // pre sale 4 stage discount 20%, tokens per 1 ether\n', '    uint256 public constant privateDiscountPrice = 7936507936507936507937; // sale private discount 65%, tokens per 1 ether\n', '    uint256 public privateSold = 0;\n', '    \n', '    uint256 public icoStartDate = 0;\n', '    uint256 public constant timeToBeBurned = 1 years;\n', '    uint256 public constant companyReserve = 1000000000*10**18;\n', '    uint256 public remainingTokens = 0;\n', '    bool public icoFinalized = false;\n', '    uint256 public icoEnd = 0; \n', '    uint256 public maxAmmount = 1000 ether; // maximum investment allowed\n', '    uint256 public minContribute = 0.1 ether; // Minimum investment allowed\n', '    uint256 public constant preSaleStartDate = 1525046400; // 30/04/2018 00:00:00\n', '    \n', '    //custom variables for private and public events\n', '    uint256 public privateEventTokens = 0;\n', '    uint256 public publicEventTokens = 0;\n', '    bool public privateEventActive = false;\n', '    bool public publicEventActive = false;\n', '    uint256 public publicMin = 0;\n', '    uint256 public privateMin = 0;\n', '    uint256 public privateRate = 0;\n', '    uint256 public publicRate = 0;\n', '}\n', '\n', '/**\n', ' * @title CrowdsaleToken \n', ' * @dev Contract to preform crowd sale with token\n', ' **/\n', 'contract CrowdsaleToken is PausableToken, Configurable {\n', '    /**\n', '     * @dev enum of current crowd sale state\n', '     **/\n', '     enum Stages {\n', '        preSale, \n', '        pause, \n', '        sale, \n', '        icoEnd\n', '    }\n', '  \n', '    Stages currentStage;\n', '    mapping(address => bool) saleDiscountList; // 65% private discount\n', '    mapping(address => bool) customPrivateSale; // Private discount for events\n', '    \n', '    /**\n', '     * @dev constructor of CrowdsaleToken\n', '     **/\n', '    constructor() public {\n', '        currentStage = Stages.preSale;\n', '        pause();\n', '        balances[owner] = balances[owner].add(companyReserve);\n', '        totalSupply_ = totalSupply_.add(companyReserve);\n', '        emit Transfer(address(this), owner, companyReserve);\n', '    }\n', '    \n', '    /**\n', '     * @dev fallback function to send ether to for Crowd sale\n', '     **/\n', '    function () public payable {\n', '        require(msg.value >= minContribute);\n', '        require(preSaleStartDate < now);\n', '        require(currentStage != Stages.pause);\n', '        require(currentStage != Stages.icoEnd);\n', '        require(msg.value > 0);\n', '        uint256[] memory tokens = tokensAmount(msg.value);\n', '        require (tokens[0] > 0);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens[0]);\n', '        totalSupply_ = totalSupply_.add(tokens[0]);\n', '        require(totalSupply_ <= cap.add(companyReserve));\n', '        emit Transfer(address(this), msg.sender, tokens[0]);\n', '        uint256 ethValue = msg.value.sub(tokens[1]);\n', '        owner.transfer(ethValue);\n', '        if(tokens[1] > 0){\n', '            msg.sender.transfer(tokens[1]);\n', '            emit Transfer(address(this), msg.sender, tokens[1]);\n', '        }\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev tokensAmount calculates the amount of tokens the sender is purchasing \n', '     **/\n', '    function tokensAmount (uint256 _wei) internal returns (uint256[]) {\n', '        uint256[] memory tokens = new uint256[](7);\n', '        tokens[0] = tokens[1] = 0;\n', '        uint256 stageWei = 0;\n', '        uint256 stageTokens = 0;\n', '        uint256 stagePrice = 0;\n', '        uint256 totalSold = totalSupply_.sub(companyReserve);\n', '        uint256 extraWei = 0;\n', '        bool ismember = false;\n', '        \n', '        // if sender sent more then maximum spending amount\n', '        if(_wei > maxAmmount){\n', '            extraWei = _wei.sub(maxAmmount);\n', '            _wei = maxAmmount;\n', '        }\n', '        \n', '        // if member is part of a private sale event\n', '       if(customPrivateSale[msg.sender] == true && msg.value >= privateMin && privateEventActive == true && privateEventTokens > 0){\n', '            stagePrice = privateRate;\n', '            stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '           \n', '            if(stageTokens <= privateEventTokens){\n', '                tokens[0] = tokens[0].add(stageTokens);\n', '                privateEventTokens = privateEventTokens.sub(tokens[0]);\n', '                \n', '                if(extraWei > 0){\n', '                    tokens[1] = extraWei;\n', '                    //emit Transfer(address(this), msg.sender, extraWei);\n', '                }\n', '                \n', '                return tokens;\n', '            } else {\n', '                stageTokens = privateEventTokens;\n', '                privateEventActive = false;\n', '                stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '                tokens[0] = tokens[0].add(stageTokens);\n', '                privateEventTokens = privateEventTokens.sub(tokens[0]);\n', '                _wei = _wei.sub(stageWei);\n', '            }\n', '        }\n', '        \n', '        // private member \n', '        if (totalSold > preSaleFirstCap && privateSold <= privateLimit && saleDiscountList[msg.sender]) {\n', '            stagePrice = privateDiscountPrice; // private member %65 discount\n', '          \n', '          stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (privateSold.add(tokens[0]).add(stageTokens) <= privateLimit) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '            totalSold = totalSold.add(tokens[0]);\n', '            privateSold = privateSold.add(tokens[0]);\n', '            return tokens;\n', '          } else {\n', '            stageTokens = privateLimit.sub(privateSold);\n', '            privateSold = privateSold.add(stageTokens);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            _wei = _wei.sub(stageWei);\n', '          }\n', '        }\n', '        \n', '         // if public event is active and tokens available\n', '        if(publicEventActive == true && publicEventTokens > 0 && msg.value >= publicMin) {\n', '            stagePrice = publicRate;\n', '            stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '           \n', '            if(stageTokens <= publicEventTokens){\n', '                tokens[0] = tokens[0].add(stageTokens);\n', '                publicEventTokens = publicEventTokens.sub(tokens[0]);\n', '                \n', '                if(extraWei > 0){\n', '                    tokens[1] = stageWei;\n', '                    //emit Transfer(address(this), msg.sender, extraWei);\n', '                }\n', '                \n', '                return tokens;\n', '            } else {\n', '                stageTokens = publicEventTokens;\n', '                publicEventActive = false;\n', '                stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '                tokens[0] = tokens[0].add(stageTokens);\n', '                publicEventTokens = publicEventTokens.sub(tokens[0]);\n', '                _wei = _wei.sub(stageWei);\n', '            }\n', '        }\n', '        \n', '        \n', '        // 75% discount\n', '        if (currentStage == Stages.preSale && totalSold <= preSaleFirstCap) {\n', '          if (msg.value >= 10 ether) \n', '            stagePrice = preSaleDiscountPrice;\n', '          else {\n', '              if (saleDiscountList[msg.sender]) {\n', '                  ismember = true;\n', '                stagePrice = privateDiscountPrice; // private member %65 discount\n', '              }\n', '            else\n', '                stagePrice = preSaleFirstPrice;\n', '          }\n', '            \n', '            stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (totalSold.add(stageTokens) <= preSaleFirstCap) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '            return tokens;\n', '          }\n', '            else if( ismember && totalSold.add(stageTokens) <= privateLimit) {\n', '                tokens[0] = tokens[0].add(stageTokens);\n', '                privateSold = privateSold.sub(tokens[0]);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '            return tokens;\n', '            \n', '          } else {\n', '            stageTokens = preSaleFirstCap.sub(totalSold);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            if(ismember)\n', '                privateSold = privateSold.sub(tokens[0]);\n', '            _wei = _wei.sub(stageWei);\n', '          }\n', '        }\n', '        \n', '        // 50% discount\n', '        if (currentStage == Stages.preSale && totalSold.add(tokens[0]) <= preSaleSecondCap) {\n', '              stagePrice = preSaleSecondPrice; \n', '\n', '          stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (totalSold.add(tokens[0]).add(stageTokens) <= preSaleSecondCap) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '        \n', '            return tokens;\n', '          } else {\n', '            stageTokens = preSaleSecondCap.sub(totalSold).sub(tokens[0]);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            _wei = _wei.sub(stageWei);\n', '          }\n', '        }\n', '        \n', '        // 35% discount\n', '        if (currentStage == Stages.preSale && totalSold.add(tokens[0]) <= preSaleThirdCap) {\n', '            stagePrice = preSaleThirdPrice;\n', '          stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (totalSold.add(tokens[0]).add(stageTokens) <= preSaleThirdCap) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '           \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '        \n', '            return tokens;\n', '          } else {\n', '            stageTokens = preSaleThirdCap.sub(totalSold).sub(tokens[0]);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            _wei = _wei.sub(stageWei);\n', '          }\n', '        }\n', '        // 20% discount\n', '        if (currentStage == Stages.preSale && totalSold.add(tokens[0]) <= preSaleFourthCap) {\n', '            stagePrice = preSaleFourthPrice;\n', '          \n', '          stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (totalSold.add(tokens[0]).add(stageTokens) <= preSaleFourthCap) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '        \n', '            return tokens;\n', '          } else {\n', '            stageTokens = preSaleFourthCap.sub(totalSold).sub(tokens[0]);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            _wei = _wei.sub(stageWei);\n', '            currentStage = Stages.pause;\n', '            \n', '            if(_wei > 0 || extraWei > 0){\n', '                _wei = _wei.add(extraWei);\n', '                tokens[1] = _wei;\n', '            }\n', '            return tokens;\n', '          }\n', '        }\n', '        \n', '        // 0% discount\n', '        if (currentStage == Stages.sale) {\n', '          if (privateSold > privateLimit && saleDiscountList[msg.sender]) {\n', '            stagePrice = privateDiscountPrice; // private member %65 discount\n', '            stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '            uint256 ceil = totalSold.add(privateLimit);\n', '            \n', '            if (ceil > cap) {\n', '              ceil = cap;\n', '            }\n', '            \n', '            if (totalSold.add(stageTokens) <= ceil) {\n', '              tokens[0] = tokens[0].add(stageTokens);\n', '             \n', '              if(extraWei > 0){\n', '               tokens[1] = extraWei;\n', '            }\n', '            privateSold = privateSold.sub(tokens[0]);\n', '              return tokens;          \n', '            } else {\n', '              stageTokens = ceil.sub(totalSold);\n', '              tokens[0] = tokens[0].add(stageTokens);\n', '              stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '              _wei = _wei.sub(stageWei);\n', '            }\n', '            \n', '            if (ceil == cap) {\n', '              endIco();\n', '              if(_wei > 0 || extraWei > 0){\n', '                _wei = _wei.add(extraWei);\n', '                tokens[1] = _wei;\n', '              }\n', '              privateSold = privateSold.sub(tokens[0]);\n', '              return tokens;\n', '            }\n', '          }\n', '          \n', '          stagePrice = basePrice;\n', '          stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (totalSold.add(tokens[0]).add(stageTokens) <= cap) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '        \n', '                \n', '            return tokens;\n', '          } else {\n', '            stageTokens = cap.sub(totalSold).sub(tokens[0]);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            _wei = _wei.sub(stageWei);\n', '            endIco();\n', '            \n', '            if(_wei > 0 || extraWei > 0){\n', '                _wei = _wei.add(extraWei);\n', '                tokens[1] = _wei;\n', '            }\n', '            return tokens;\n', '          }      \n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev startIco starts the public ICO\n', '     **/\n', '    function startIco() public onlyOwner {\n', '        require(currentStage != Stages.icoEnd);\n', '        currentStage = Stages.sale;\n', '        icoStartDate = now;\n', '    }\n', '    \n', '    /**\n', '     * @dev Sets either custom public or private sale events. \n', '     * @param tokenCap : the amount of toknes to cap the event with\n', '     * @param eventRate : the discounted price of the event given in amount per ether\n', '     * @param isActive : boolean that stats is the event is active or not\n', '     * @param eventType : string that says is the event is public or private\n', '     **/\n', '    function setCustomEvent(uint256 tokenCap, uint256 eventRate, bool isActive, string eventType, uint256 minAmount) public onlyOwner {\n', '        require(tokenCap > 0);\n', '        require(eventRate > 0);\n', '        require(minAmount > 0);\n', '        \n', '        if(compareStrings(eventType, "private")){\n', '            privateEventTokens = tokenCap;\n', '            privateRate = eventRate;\n', '            privateEventActive = isActive;\n', '            privateMin = minAmount;\n', '        }\n', '        else if(compareStrings(eventType, "public")){\n', '            publicEventTokens = tokenCap;\n', '            publicRate = eventRate;\n', '            publicEventActive = isActive;\n', '            publicMin = minAmount;\n', '        }\n', '        else\n', '            require(1==2);\n', '    }\n', '    \n', '    /**\n', '     * @dev function to compare two strings for equality\n', '     **/\n', '    function compareStrings (string a, string b) internal pure returns (bool){\n', '       return keccak256(a) == keccak256(b);\n', '   }\n', '    \n', '    /**\n', '     * @dev setEventActive sets the private presale discount members address\n', '     **/\n', '    function setEventActive (bool isActive, string eventType) public onlyOwner {\n', '        // Turn private event on/off\n', '        if(compareStrings(eventType, "private"))\n', '            privateEventActive = isActive;\n', '        // Turn public event on or off\n', '        else if(compareStrings(eventType, "public"))\n', '            publicEventActive = isActive;\n', '        else\n', '            require(1==2);\n', '    }\n', '\n', '    /**\n', '     * @dev setMinMax function to set the minimum or maximum investment amount \n', '     **/\n', '    function setMinMax (uint256 minMax, string eventType) public onlyOwner {\n', '        require(minMax >= 0);\n', '        // Set new maxAmmount\n', '        if(compareStrings(eventType, "max"))\n', '            maxAmmount = minMax;\n', '        // Set new min to Contribute\n', '        else if(compareStrings(eventType,"min"))\n', '            minContribute = minMax;\n', '        else\n', '            require(1==2);\n', '    }\n', '\n', '    /**\n', '     * @dev function to set the discount member as active or not for one of the 4 events\n', '     * @param _address : address of the member\n', '     * @param memberType : specifying if the member should belong to private sale, pre sale, private event or public event\n', '     * @param isActiveMember : bool to set the member at active or not\n', '     **/\n', '    function setDiscountMember(address _address, string memberType, bool isActiveMember) public onlyOwner {\n', '        // Set discount sale member    \n', '        if(compareStrings(memberType, "preSale"))\n', '            saleDiscountList[_address] = isActiveMember;\n', '        // Set private event member\n', '        else if(compareStrings(memberType,"privateEvent"))\n', '            customPrivateSale[_address] = isActiveMember;\n', '        else\n', '            require(1==2);\n', '    }\n', '    \n', '    /**\n', '     * @dev checks if an address is a member of a specific address\n', '     * @param _address : address of member to check\n', '     * @param memberType : member type to check: preSlae, privateEvent\n', '     **/\n', '    function isMemberOf(address _address, string memberType) public view returns (bool){\n', '        // Set discount sale member    \n', '        if(compareStrings(memberType, "preSale"))\n', '            return saleDiscountList[_address];\n', '        // Set private event member\n', '        else if(compareStrings(memberType,"privateEvent"))\n', '            return customPrivateSale[_address];\n', '        else\n', '            require(1==2);\n', '    }\n', '\n', '    /**\n', '     * @dev endIco closes down the ICO \n', '     **/\n', '    function endIco() internal {\n', '        currentStage = Stages.icoEnd;\n', '    }\n', '\n', '    /**\n', '     * @dev withdrawFromRemainingTokens allows the owner of the contract to withdraw \n', '     * remaining unsold tokens for acquisitions. Any remaining tokens after 1 year from\n', '     * ICO end time will be burned.\n', '     **/\n', '    function withdrawFromRemainingTokens(uint256 _value) public onlyOwner returns(bool) {\n', '        require(currentStage == Stages.icoEnd);\n', '        require(remainingTokens > 0);\n', '        \n', '        // if 1 year after ICO, Burn all remaining tokens\n', '        if (now > icoEnd.add(timeToBeBurned)) \n', '            remainingTokens = 0;\n', '        \n', '        // If tokens remain, withdraw\n', '        if (_value <= remainingTokens) {\n', '            balances[owner] = balances[owner].add(_value);\n', '            totalSupply_ = totalSupply_.add(_value);\n', '            remainingTokens = remainingTokens.sub(_value);\n', '            emit Transfer(address(this), owner, _value);\n', '            return true;\n', '          }\n', '          return false;\n', '    }\n', '\n', '    /**\n', '     * @dev finalizeIco closes down the ICO and sets needed varriables\n', '     **/\n', '    function finalizeIco() public onlyOwner {\n', '        require(!icoFinalized);\n', '            icoFinalized = true;\n', '        \n', '        if (currentStage != Stages.icoEnd){\n', '             endIco();\n', '             icoEnd = now;\n', '        }\n', '        \n', '        remainingTokens = cap.add(companyReserve).sub(totalSupply_);\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    /**\n', '     * @dev function to get the current discount rate\n', '     **/\n', '    function currentBonus() public view returns (string) {\n', '        if(totalSupply_.sub(companyReserve) < preSaleFirstCap)\n', '            return "300% Bonus!";\n', '        else if((totalSupply_.sub(companyReserve) < preSaleSecondCap) && (totalSupply_.sub(companyReserve) > preSaleFirstCap))\n', '            return "100% Bonus!";\n', '        else if((totalSupply_.sub(companyReserve) < preSaleThirdCap) && (totalSupply_.sub(companyReserve) > preSaleSecondCap))\n', '            return "54% Bonus!";\n', '        else if((totalSupply_.sub(companyReserve) < preSaleFourthCap) && (totalSupply_.sub(companyReserve) > preSaleThirdCap))\n', '            return "25% Bonus!";\n', '        else\n', '            return "No Bonus... Sorry...#BOTB";\n', '    }\n', '}\n', '\n', '/**\n', ' * @title KimeraToken \n', ' * @dev Contract to create the Kimera Token\n', ' **/\n', 'contract KimeraToken is CrowdsaleToken {\n', '    string public constant name = "KIMERACoin";\n', '    string public constant symbol = "KIMERA";\n', '    uint32 public constant decimals = 18;\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     **/\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     **/\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '    \n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     **/\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    \n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     **/\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic interface\n', ' * @dev Basic ERC20 interface\n', ' **/\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' **/\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' **/\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '    mapping(address => uint256) balances;\n', '    uint256 totalSupply_;\n', '    \n', '    /**\n', '     * @dev total number of tokens in existence\n', '     **/\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '    \n', '    /**\n', '     * @dev transfer token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     **/\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Gets the balance of the specified address.\n', '     * @param _owner The address to query the the balance of.\n', '     * @return An uint256 representing the amount owned by the passed address.\n', '     **/\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     **/\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '    \n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        \n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     **/\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     **/\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     **/\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     **/\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' **/\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender account.\n', '     **/\n', '   constructor() public {\n', '      owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     **/\n', '    modifier onlyOwner() {\n', '      require(msg.sender == owner);\n', '      _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     **/\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '      require(newOwner != address(0));\n', '      emit OwnershipTransferred(owner, newOwner);\n', '      owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev The Pausable contract has control functions to pause and unpause token transfers\n', ' **/\n', 'contract Pausable is Ownable {\n', '    event Pause();\n', '    event Unpause();\n', '    \n', '    bool public canPause = true;\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     **/\n', '    modifier whenNotPaused() {\n', '        require(!paused || msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     **/\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev called by the owner to pause, triggers stopped state\n', '     **/\n', '    function pause() onlyOwner whenNotPaused public {\n', '        require(canPause == true);\n', '        paused = true;\n', '        emit Pause();\n', '    }\n', '    \n', '    /**\n', '     * @dev called by the owner to unpause, returns to normal state\n', '     **/\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpause();\n', '    }\n', '    \n', '    /**\n', '     * @dev Prevent the token from ever being paused again\n', '     **/\n', '    function notPauseable() onlyOwner public{\n', '        paused = false;\n', '        canPause = false;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '    /**\n', '     * @dev Prevent the token from ever being paused again\n', '     **/\n', '    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '    \n', '    /**\n', '     * @dev transferFrom function to tansfer tokens when token is not paused\n', '     **/\n', '    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    /**\n', '     * @dev approve spender when not paused\n', '     **/\n', '    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '        return super.approve(_spender, _value);\n', '    }\n', '    \n', '    /**\n', '     * @dev increaseApproval of spender when not paused\n', '     **/\n', '    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '        return super.increaseApproval(_spender, _addedValue);\n', '    }\n', '    \n', '    /**\n', '     * @dev decreaseApproval of spender when not paused\n', '     **/\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '        return super.decreaseApproval(_spender, _subtractedValue);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Configurable\n', ' * @dev Configurable varriables of the contract\n', ' **/\n', 'contract Configurable {\n', '    uint256 public constant cap = 1000000000*10**18;\n', '    uint256 public constant preSaleFirstCap = 25000000*10**18;\n', '    uint256 public constant preSaleSecondCap = 175000000*10**18; // 25,000,000 + 150,000,000\n', '    uint256 public constant preSaleThirdCap = 325000000*10**18; // 25,000,000 + 150,000,000 + 150,000,000\n', '    uint256 public constant preSaleFourthCap = 425000000*10**18; // 25,000,000 + 150,000,000 + 150,000,000 + 100,000,000\n', '    uint256 public constant privateLimit = 200000000*10**18;\n', '    uint256 public constant basePrice = 2777777777777777777778; // tokens per 1 ether\n', '    uint256 public constant preSaleDiscountPrice = 11111111111111111111111; // pre sale 1 stage > 10 ETH or pre sale private discount 75% tokens per 1 ether\n', '    uint256 public constant preSaleFirstPrice = 5555555555555555555556; // pre sale 1 stage < 10 ETH discount 50%, tokens per 1 ether\n', '    uint256 public constant preSaleSecondPrice = 5555555555555555555556; // pre sale 2 stage discount 50%, tokens per 1 ether\n', '    uint256 public constant preSaleThirdPrice = 4273504273504273504274; // pre sale 3 stage discount 35%, tokens per 1 ether\n', '    uint256 public constant preSaleFourthPrice = 3472222222222222222222; // pre sale 4 stage discount 20%, tokens per 1 ether\n', '    uint256 public constant privateDiscountPrice = 7936507936507936507937; // sale private discount 65%, tokens per 1 ether\n', '    uint256 public privateSold = 0;\n', '    \n', '    uint256 public icoStartDate = 0;\n', '    uint256 public constant timeToBeBurned = 1 years;\n', '    uint256 public constant companyReserve = 1000000000*10**18;\n', '    uint256 public remainingTokens = 0;\n', '    bool public icoFinalized = false;\n', '    uint256 public icoEnd = 0; \n', '    uint256 public maxAmmount = 1000 ether; // maximum investment allowed\n', '    uint256 public minContribute = 0.1 ether; // Minimum investment allowed\n', '    uint256 public constant preSaleStartDate = 1525046400; // 30/04/2018 00:00:00\n', '    \n', '    //custom variables for private and public events\n', '    uint256 public privateEventTokens = 0;\n', '    uint256 public publicEventTokens = 0;\n', '    bool public privateEventActive = false;\n', '    bool public publicEventActive = false;\n', '    uint256 public publicMin = 0;\n', '    uint256 public privateMin = 0;\n', '    uint256 public privateRate = 0;\n', '    uint256 public publicRate = 0;\n', '}\n', '\n', '/**\n', ' * @title CrowdsaleToken \n', ' * @dev Contract to preform crowd sale with token\n', ' **/\n', 'contract CrowdsaleToken is PausableToken, Configurable {\n', '    /**\n', '     * @dev enum of current crowd sale state\n', '     **/\n', '     enum Stages {\n', '        preSale, \n', '        pause, \n', '        sale, \n', '        icoEnd\n', '    }\n', '  \n', '    Stages currentStage;\n', '    mapping(address => bool) saleDiscountList; // 65% private discount\n', '    mapping(address => bool) customPrivateSale; // Private discount for events\n', '    \n', '    /**\n', '     * @dev constructor of CrowdsaleToken\n', '     **/\n', '    constructor() public {\n', '        currentStage = Stages.preSale;\n', '        pause();\n', '        balances[owner] = balances[owner].add(companyReserve);\n', '        totalSupply_ = totalSupply_.add(companyReserve);\n', '        emit Transfer(address(this), owner, companyReserve);\n', '    }\n', '    \n', '    /**\n', '     * @dev fallback function to send ether to for Crowd sale\n', '     **/\n', '    function () public payable {\n', '        require(msg.value >= minContribute);\n', '        require(preSaleStartDate < now);\n', '        require(currentStage != Stages.pause);\n', '        require(currentStage != Stages.icoEnd);\n', '        require(msg.value > 0);\n', '        uint256[] memory tokens = tokensAmount(msg.value);\n', '        require (tokens[0] > 0);\n', '        balances[msg.sender] = balances[msg.sender].add(tokens[0]);\n', '        totalSupply_ = totalSupply_.add(tokens[0]);\n', '        require(totalSupply_ <= cap.add(companyReserve));\n', '        emit Transfer(address(this), msg.sender, tokens[0]);\n', '        uint256 ethValue = msg.value.sub(tokens[1]);\n', '        owner.transfer(ethValue);\n', '        if(tokens[1] > 0){\n', '            msg.sender.transfer(tokens[1]);\n', '            emit Transfer(address(this), msg.sender, tokens[1]);\n', '        }\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev tokensAmount calculates the amount of tokens the sender is purchasing \n', '     **/\n', '    function tokensAmount (uint256 _wei) internal returns (uint256[]) {\n', '        uint256[] memory tokens = new uint256[](7);\n', '        tokens[0] = tokens[1] = 0;\n', '        uint256 stageWei = 0;\n', '        uint256 stageTokens = 0;\n', '        uint256 stagePrice = 0;\n', '        uint256 totalSold = totalSupply_.sub(companyReserve);\n', '        uint256 extraWei = 0;\n', '        bool ismember = false;\n', '        \n', '        // if sender sent more then maximum spending amount\n', '        if(_wei > maxAmmount){\n', '            extraWei = _wei.sub(maxAmmount);\n', '            _wei = maxAmmount;\n', '        }\n', '        \n', '        // if member is part of a private sale event\n', '       if(customPrivateSale[msg.sender] == true && msg.value >= privateMin && privateEventActive == true && privateEventTokens > 0){\n', '            stagePrice = privateRate;\n', '            stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '           \n', '            if(stageTokens <= privateEventTokens){\n', '                tokens[0] = tokens[0].add(stageTokens);\n', '                privateEventTokens = privateEventTokens.sub(tokens[0]);\n', '                \n', '                if(extraWei > 0){\n', '                    tokens[1] = extraWei;\n', '                    //emit Transfer(address(this), msg.sender, extraWei);\n', '                }\n', '                \n', '                return tokens;\n', '            } else {\n', '                stageTokens = privateEventTokens;\n', '                privateEventActive = false;\n', '                stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '                tokens[0] = tokens[0].add(stageTokens);\n', '                privateEventTokens = privateEventTokens.sub(tokens[0]);\n', '                _wei = _wei.sub(stageWei);\n', '            }\n', '        }\n', '        \n', '        // private member \n', '        if (totalSold > preSaleFirstCap && privateSold <= privateLimit && saleDiscountList[msg.sender]) {\n', '            stagePrice = privateDiscountPrice; // private member %65 discount\n', '          \n', '          stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (privateSold.add(tokens[0]).add(stageTokens) <= privateLimit) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '            totalSold = totalSold.add(tokens[0]);\n', '            privateSold = privateSold.add(tokens[0]);\n', '            return tokens;\n', '          } else {\n', '            stageTokens = privateLimit.sub(privateSold);\n', '            privateSold = privateSold.add(stageTokens);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            _wei = _wei.sub(stageWei);\n', '          }\n', '        }\n', '        \n', '         // if public event is active and tokens available\n', '        if(publicEventActive == true && publicEventTokens > 0 && msg.value >= publicMin) {\n', '            stagePrice = publicRate;\n', '            stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '           \n', '            if(stageTokens <= publicEventTokens){\n', '                tokens[0] = tokens[0].add(stageTokens);\n', '                publicEventTokens = publicEventTokens.sub(tokens[0]);\n', '                \n', '                if(extraWei > 0){\n', '                    tokens[1] = stageWei;\n', '                    //emit Transfer(address(this), msg.sender, extraWei);\n', '                }\n', '                \n', '                return tokens;\n', '            } else {\n', '                stageTokens = publicEventTokens;\n', '                publicEventActive = false;\n', '                stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '                tokens[0] = tokens[0].add(stageTokens);\n', '                publicEventTokens = publicEventTokens.sub(tokens[0]);\n', '                _wei = _wei.sub(stageWei);\n', '            }\n', '        }\n', '        \n', '        \n', '        // 75% discount\n', '        if (currentStage == Stages.preSale && totalSold <= preSaleFirstCap) {\n', '          if (msg.value >= 10 ether) \n', '            stagePrice = preSaleDiscountPrice;\n', '          else {\n', '              if (saleDiscountList[msg.sender]) {\n', '                  ismember = true;\n', '                stagePrice = privateDiscountPrice; // private member %65 discount\n', '              }\n', '            else\n', '                stagePrice = preSaleFirstPrice;\n', '          }\n', '            \n', '            stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (totalSold.add(stageTokens) <= preSaleFirstCap) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '            return tokens;\n', '          }\n', '            else if( ismember && totalSold.add(stageTokens) <= privateLimit) {\n', '                tokens[0] = tokens[0].add(stageTokens);\n', '                privateSold = privateSold.sub(tokens[0]);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '            return tokens;\n', '            \n', '          } else {\n', '            stageTokens = preSaleFirstCap.sub(totalSold);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            if(ismember)\n', '                privateSold = privateSold.sub(tokens[0]);\n', '            _wei = _wei.sub(stageWei);\n', '          }\n', '        }\n', '        \n', '        // 50% discount\n', '        if (currentStage == Stages.preSale && totalSold.add(tokens[0]) <= preSaleSecondCap) {\n', '              stagePrice = preSaleSecondPrice; \n', '\n', '          stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (totalSold.add(tokens[0]).add(stageTokens) <= preSaleSecondCap) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '        \n', '            return tokens;\n', '          } else {\n', '            stageTokens = preSaleSecondCap.sub(totalSold).sub(tokens[0]);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            _wei = _wei.sub(stageWei);\n', '          }\n', '        }\n', '        \n', '        // 35% discount\n', '        if (currentStage == Stages.preSale && totalSold.add(tokens[0]) <= preSaleThirdCap) {\n', '            stagePrice = preSaleThirdPrice;\n', '          stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (totalSold.add(tokens[0]).add(stageTokens) <= preSaleThirdCap) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '           \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '        \n', '            return tokens;\n', '          } else {\n', '            stageTokens = preSaleThirdCap.sub(totalSold).sub(tokens[0]);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            _wei = _wei.sub(stageWei);\n', '          }\n', '        }\n', '        // 20% discount\n', '        if (currentStage == Stages.preSale && totalSold.add(tokens[0]) <= preSaleFourthCap) {\n', '            stagePrice = preSaleFourthPrice;\n', '          \n', '          stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (totalSold.add(tokens[0]).add(stageTokens) <= preSaleFourthCap) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '        \n', '            return tokens;\n', '          } else {\n', '            stageTokens = preSaleFourthCap.sub(totalSold).sub(tokens[0]);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            _wei = _wei.sub(stageWei);\n', '            currentStage = Stages.pause;\n', '            \n', '            if(_wei > 0 || extraWei > 0){\n', '                _wei = _wei.add(extraWei);\n', '                tokens[1] = _wei;\n', '            }\n', '            return tokens;\n', '          }\n', '        }\n', '        \n', '        // 0% discount\n', '        if (currentStage == Stages.sale) {\n', '          if (privateSold > privateLimit && saleDiscountList[msg.sender]) {\n', '            stagePrice = privateDiscountPrice; // private member %65 discount\n', '            stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '            uint256 ceil = totalSold.add(privateLimit);\n', '            \n', '            if (ceil > cap) {\n', '              ceil = cap;\n', '            }\n', '            \n', '            if (totalSold.add(stageTokens) <= ceil) {\n', '              tokens[0] = tokens[0].add(stageTokens);\n', '             \n', '              if(extraWei > 0){\n', '               tokens[1] = extraWei;\n', '            }\n', '            privateSold = privateSold.sub(tokens[0]);\n', '              return tokens;          \n', '            } else {\n', '              stageTokens = ceil.sub(totalSold);\n', '              tokens[0] = tokens[0].add(stageTokens);\n', '              stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '              _wei = _wei.sub(stageWei);\n', '            }\n', '            \n', '            if (ceil == cap) {\n', '              endIco();\n', '              if(_wei > 0 || extraWei > 0){\n', '                _wei = _wei.add(extraWei);\n', '                tokens[1] = _wei;\n', '              }\n', '              privateSold = privateSold.sub(tokens[0]);\n', '              return tokens;\n', '            }\n', '          }\n', '          \n', '          stagePrice = basePrice;\n', '          stageTokens = _wei.mul(stagePrice).div(1 ether);\n', '          \n', '          if (totalSold.add(tokens[0]).add(stageTokens) <= cap) {\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            \n', '            if(extraWei > 0){\n', '                tokens[1] = extraWei;\n', '            }\n', '        \n', '                \n', '            return tokens;\n', '          } else {\n', '            stageTokens = cap.sub(totalSold).sub(tokens[0]);\n', '            stageWei = stageTokens.mul(1 ether).div(stagePrice);\n', '            tokens[0] = tokens[0].add(stageTokens);\n', '            _wei = _wei.sub(stageWei);\n', '            endIco();\n', '            \n', '            if(_wei > 0 || extraWei > 0){\n', '                _wei = _wei.add(extraWei);\n', '                tokens[1] = _wei;\n', '            }\n', '            return tokens;\n', '          }      \n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev startIco starts the public ICO\n', '     **/\n', '    function startIco() public onlyOwner {\n', '        require(currentStage != Stages.icoEnd);\n', '        currentStage = Stages.sale;\n', '        icoStartDate = now;\n', '    }\n', '    \n', '    /**\n', '     * @dev Sets either custom public or private sale events. \n', '     * @param tokenCap : the amount of toknes to cap the event with\n', '     * @param eventRate : the discounted price of the event given in amount per ether\n', '     * @param isActive : boolean that stats is the event is active or not\n', '     * @param eventType : string that says is the event is public or private\n', '     **/\n', '    function setCustomEvent(uint256 tokenCap, uint256 eventRate, bool isActive, string eventType, uint256 minAmount) public onlyOwner {\n', '        require(tokenCap > 0);\n', '        require(eventRate > 0);\n', '        require(minAmount > 0);\n', '        \n', '        if(compareStrings(eventType, "private")){\n', '            privateEventTokens = tokenCap;\n', '            privateRate = eventRate;\n', '            privateEventActive = isActive;\n', '            privateMin = minAmount;\n', '        }\n', '        else if(compareStrings(eventType, "public")){\n', '            publicEventTokens = tokenCap;\n', '            publicRate = eventRate;\n', '            publicEventActive = isActive;\n', '            publicMin = minAmount;\n', '        }\n', '        else\n', '            require(1==2);\n', '    }\n', '    \n', '    /**\n', '     * @dev function to compare two strings for equality\n', '     **/\n', '    function compareStrings (string a, string b) internal pure returns (bool){\n', '       return keccak256(a) == keccak256(b);\n', '   }\n', '    \n', '    /**\n', '     * @dev setEventActive sets the private presale discount members address\n', '     **/\n', '    function setEventActive (bool isActive, string eventType) public onlyOwner {\n', '        // Turn private event on/off\n', '        if(compareStrings(eventType, "private"))\n', '            privateEventActive = isActive;\n', '        // Turn public event on or off\n', '        else if(compareStrings(eventType, "public"))\n', '            publicEventActive = isActive;\n', '        else\n', '            require(1==2);\n', '    }\n', '\n', '    /**\n', '     * @dev setMinMax function to set the minimum or maximum investment amount \n', '     **/\n', '    function setMinMax (uint256 minMax, string eventType) public onlyOwner {\n', '        require(minMax >= 0);\n', '        // Set new maxAmmount\n', '        if(compareStrings(eventType, "max"))\n', '            maxAmmount = minMax;\n', '        // Set new min to Contribute\n', '        else if(compareStrings(eventType,"min"))\n', '            minContribute = minMax;\n', '        else\n', '            require(1==2);\n', '    }\n', '\n', '    /**\n', '     * @dev function to set the discount member as active or not for one of the 4 events\n', '     * @param _address : address of the member\n', '     * @param memberType : specifying if the member should belong to private sale, pre sale, private event or public event\n', '     * @param isActiveMember : bool to set the member at active or not\n', '     **/\n', '    function setDiscountMember(address _address, string memberType, bool isActiveMember) public onlyOwner {\n', '        // Set discount sale member    \n', '        if(compareStrings(memberType, "preSale"))\n', '            saleDiscountList[_address] = isActiveMember;\n', '        // Set private event member\n', '        else if(compareStrings(memberType,"privateEvent"))\n', '            customPrivateSale[_address] = isActiveMember;\n', '        else\n', '            require(1==2);\n', '    }\n', '    \n', '    /**\n', '     * @dev checks if an address is a member of a specific address\n', '     * @param _address : address of member to check\n', '     * @param memberType : member type to check: preSlae, privateEvent\n', '     **/\n', '    function isMemberOf(address _address, string memberType) public view returns (bool){\n', '        // Set discount sale member    \n', '        if(compareStrings(memberType, "preSale"))\n', '            return saleDiscountList[_address];\n', '        // Set private event member\n', '        else if(compareStrings(memberType,"privateEvent"))\n', '            return customPrivateSale[_address];\n', '        else\n', '            require(1==2);\n', '    }\n', '\n', '    /**\n', '     * @dev endIco closes down the ICO \n', '     **/\n', '    function endIco() internal {\n', '        currentStage = Stages.icoEnd;\n', '    }\n', '\n', '    /**\n', '     * @dev withdrawFromRemainingTokens allows the owner of the contract to withdraw \n', '     * remaining unsold tokens for acquisitions. Any remaining tokens after 1 year from\n', '     * ICO end time will be burned.\n', '     **/\n', '    function withdrawFromRemainingTokens(uint256 _value) public onlyOwner returns(bool) {\n', '        require(currentStage == Stages.icoEnd);\n', '        require(remainingTokens > 0);\n', '        \n', '        // if 1 year after ICO, Burn all remaining tokens\n', '        if (now > icoEnd.add(timeToBeBurned)) \n', '            remainingTokens = 0;\n', '        \n', '        // If tokens remain, withdraw\n', '        if (_value <= remainingTokens) {\n', '            balances[owner] = balances[owner].add(_value);\n', '            totalSupply_ = totalSupply_.add(_value);\n', '            remainingTokens = remainingTokens.sub(_value);\n', '            emit Transfer(address(this), owner, _value);\n', '            return true;\n', '          }\n', '          return false;\n', '    }\n', '\n', '    /**\n', '     * @dev finalizeIco closes down the ICO and sets needed varriables\n', '     **/\n', '    function finalizeIco() public onlyOwner {\n', '        require(!icoFinalized);\n', '            icoFinalized = true;\n', '        \n', '        if (currentStage != Stages.icoEnd){\n', '             endIco();\n', '             icoEnd = now;\n', '        }\n', '        \n', '        remainingTokens = cap.add(companyReserve).sub(totalSupply_);\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    /**\n', '     * @dev function to get the current discount rate\n', '     **/\n', '    function currentBonus() public view returns (string) {\n', '        if(totalSupply_.sub(companyReserve) < preSaleFirstCap)\n', '            return "300% Bonus!";\n', '        else if((totalSupply_.sub(companyReserve) < preSaleSecondCap) && (totalSupply_.sub(companyReserve) > preSaleFirstCap))\n', '            return "100% Bonus!";\n', '        else if((totalSupply_.sub(companyReserve) < preSaleThirdCap) && (totalSupply_.sub(companyReserve) > preSaleSecondCap))\n', '            return "54% Bonus!";\n', '        else if((totalSupply_.sub(companyReserve) < preSaleFourthCap) && (totalSupply_.sub(companyReserve) > preSaleThirdCap))\n', '            return "25% Bonus!";\n', '        else\n', '            return "No Bonus... Sorry...#BOTB";\n', '    }\n', '}\n', '\n', '/**\n', ' * @title KimeraToken \n', ' * @dev Contract to create the Kimera Token\n', ' **/\n', 'contract KimeraToken is CrowdsaleToken {\n', '    string public constant name = "KIMERACoin";\n', '    string public constant symbol = "KIMERA";\n', '    uint32 public constant decimals = 18;\n', '}']
