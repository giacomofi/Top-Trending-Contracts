['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  //Allow transfers from owner even in paused state - block all others\n', '  modifier whenNotPaused() {\n', '    require(!paused || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers paused state\n', '  function pause() onlyOwner public{\n', '    require(paused == false);\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unpause() onlyOwner whenPaused public{\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '\n', '}\n', '\n', '\n', '// allow contract to be destructible\n', 'contract Mortal is Ownable {\n', '    function kill() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * Upgrade agent interface inspired by Lunyr.\n', ' *\n', ' * Upgrade agent transfers tokens to a new contract.\n', ' * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' */\n', 'contract UpgradeAgent {\n', '\n', '  uint public originalSupply;\n', '\n', '  /** Interface marker */\n', '  function isUpgradeAgent() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function upgradeFrom(address _from, uint256 _value) public;\n', '\n', '}\n', '\n', '\n', 'contract BaseToken is Ownable, Pausable, Mortal{\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // ERC20 State\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => mapping (address => uint256)) public allowances;\n', '  mapping (address => bool) public frozenAccount;\n', '  uint256 public totalSupply;\n', '\n', '  // Human State\n', '  string public name;\n', '  uint8 public decimals;\n', '  string public symbol;\n', '  string public version;\n', '\n', '  // ERC20 Events\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  //Frozen event\n', '  event FrozenFunds(address target, bool frozen);\n', '\n', '  // ERC20 Methods\n', '  function totalSupply() public constant returns (uint _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _address) public view returns (uint256 balance) {\n', '    return balances[_address];\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowances[_owner][_spender];\n', '  }\n', '\n', '  //Freeze/unfreeze specific address\n', '  function freezeAccount(address target, bool freeze) onlyOwner public{\n', '    frozenAccount[target] = freeze;\n', '    FrozenFunds(target, freeze);\n', '    }\n', '\n', '  //Check if given address is frozen\n', '  function isFrozen(address _address) public view returns (bool frozen) {\n', '      return frozenAccount[_address];\n', '  }\n', '\n', '  //ERC20 transfer\n', '  function transfer(address _to, uint256 _value) whenNotPaused public returns (bool success)  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    //REMOVED - SH 20180430 - WOULD PREVENT SENDING TO MULTISIG WALLET\n', '    //require(isContract(_to) == false);\n', '    require(!frozenAccount[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  //REMOVED - SH 20180430 - WOULD PREVENT SENDING TO MULTISIG WALLET\n', '  //Check if to address is contract\n', '  //function isContract(address _addr) private constant returns (bool) {\n', '  //      uint codeSize;\n', '  //      assembly {\n', '  //          codeSize := extcodesize(_addr)\n', '  //      }\n', '  //      return codeSize > 0;\n', '  //  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    allowances[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _owner, address _to, uint256 _value) whenNotPaused public returns (bool success) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_owner]);\n', '    require(_value <= allowances[_owner][msg.sender]);\n', '    require(!frozenAccount[_owner]);\n', '\n', '    balances[_owner] = balances[_owner].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowances[_owner][msg.sender] = allowances[_owner][msg.sender].sub(_value);\n', '    Transfer(_owner, _to, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', 'contract UpgradeableToken is BaseToken {\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint256 public totalUpgraded;\n', '\n', '  /**\n', '   * Upgrade states.\n', '   *\n', '   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n', '   * - WaitingForAgent: Token allows upgrade, but we don&#39;t have a new agent yet\n', '   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n', '   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '   *\n', '   */\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeAgentEnabledToken(address _upgradeMaster) {\n', '    upgradeMaster = _upgradeMaster;\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint256 value) public {\n', '\n', '      UpgradeState state = getUpgradeState();\n', '      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n', '        // Called in a bad state\n', '        revert();\n', '      }\n', '\n', '      // Validate input value.\n', '      if (value == 0) revert();\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(value);\n', '\n', '      // Take tokens out from circulation\n', '      totalSupply = totalSupply.sub(value);\n', '      totalUpgraded = totalUpgraded.add(value);\n', '\n', '      // Upgrade agent reissues the tokens\n', '      upgradeAgent.upgradeFrom(msg.sender, value);\n', '      Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles\n', '   */\n', '  function setUpgradeAgent(address agent) external {\n', '\n', '      if(!canUpgrade()) {\n', '        // The token is not yet in a state that we could think upgrading\n', '        revert();\n', '      }\n', '\n', '      if (agent == 0x0) revert();\n', '      // Only a master can designate the next agent\n', '      if (msg.sender != upgradeMaster) revert();\n', '      // Upgrade has already begun for an agent\n', '      if (getUpgradeState() == UpgradeState.Upgrading) revert();\n', '\n', '      upgradeAgent = UpgradeAgent(agent);\n', '\n', '      // Bad interface\n', '      if(!upgradeAgent.isUpgradeAgent()) revert();\n', '      // Make sure that token supplies match in source and target\n', '      if (upgradeAgent.originalSupply() != totalSupply) revert();\n', '\n', '      UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public constant returns(UpgradeState) {\n', '    if(!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function setUpgradeMaster(address master) public {\n', '      if (master == 0x0) revert();\n', '      if (msg.sender != upgradeMaster) revert();\n', '      upgradeMaster = master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can enable to provide the condition when the upgrade can begin.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '     return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A crowdsaled token.\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' *\n', ' */\n', 'contract YBKToken is UpgradeableToken {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint public decimals;\n', '  string public version;\n', '\n', '  /**\n', '   * Construct the token.\n', '   */\n', '   // Constructor\n', '   function YBKToken(string _name, string _symbol, uint _initialSupply, uint _decimals, string _version) public {\n', '\n', '     owner = msg.sender;\n', '\n', '     // Initially set the upgrade master same as owner\n', '     upgradeMaster = owner;\n', '\n', '     name = _name;\n', '     decimals = _decimals;\n', '     symbol = _symbol;\n', '     version = _version;\n', '\n', '     totalSupply = _initialSupply;\n', '     balances[msg.sender] = totalSupply;\n', '\n', '   }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  //Allow transfers from owner even in paused state - block all others\n', '  modifier whenNotPaused() {\n', '    require(!paused || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers paused state\n', '  function pause() onlyOwner public{\n', '    require(paused == false);\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unpause() onlyOwner whenPaused public{\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '\n', '}\n', '\n', '\n', '// allow contract to be destructible\n', 'contract Mortal is Ownable {\n', '    function kill() onlyOwner public {\n', '        selfdestruct(owner);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * Upgrade agent interface inspired by Lunyr.\n', ' *\n', ' * Upgrade agent transfers tokens to a new contract.\n', ' * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' */\n', 'contract UpgradeAgent {\n', '\n', '  uint public originalSupply;\n', '\n', '  /** Interface marker */\n', '  function isUpgradeAgent() public constant returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  function upgradeFrom(address _from, uint256 _value) public;\n', '\n', '}\n', '\n', '\n', 'contract BaseToken is Ownable, Pausable, Mortal{\n', '\n', '  using SafeMath for uint256;\n', '\n', '  // ERC20 State\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => mapping (address => uint256)) public allowances;\n', '  mapping (address => bool) public frozenAccount;\n', '  uint256 public totalSupply;\n', '\n', '  // Human State\n', '  string public name;\n', '  uint8 public decimals;\n', '  string public symbol;\n', '  string public version;\n', '\n', '  // ERC20 Events\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '  //Frozen event\n', '  event FrozenFunds(address target, bool frozen);\n', '\n', '  // ERC20 Methods\n', '  function totalSupply() public constant returns (uint _totalSupply) {\n', '      return totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _address) public view returns (uint256 balance) {\n', '    return balances[_address];\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '    return allowances[_owner][_spender];\n', '  }\n', '\n', '  //Freeze/unfreeze specific address\n', '  function freezeAccount(address target, bool freeze) onlyOwner public{\n', '    frozenAccount[target] = freeze;\n', '    FrozenFunds(target, freeze);\n', '    }\n', '\n', '  //Check if given address is frozen\n', '  function isFrozen(address _address) public view returns (bool frozen) {\n', '      return frozenAccount[_address];\n', '  }\n', '\n', '  //ERC20 transfer\n', '  function transfer(address _to, uint256 _value) whenNotPaused public returns (bool success)  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    //REMOVED - SH 20180430 - WOULD PREVENT SENDING TO MULTISIG WALLET\n', '    //require(isContract(_to) == false);\n', '    require(!frozenAccount[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  //REMOVED - SH 20180430 - WOULD PREVENT SENDING TO MULTISIG WALLET\n', '  //Check if to address is contract\n', '  //function isContract(address _addr) private constant returns (bool) {\n', '  //      uint codeSize;\n', '  //      assembly {\n', '  //          codeSize := extcodesize(_addr)\n', '  //      }\n', '  //      return codeSize > 0;\n', '  //  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool success) {\n', '    allowances[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _owner, address _to, uint256 _value) whenNotPaused public returns (bool success) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_owner]);\n', '    require(_value <= allowances[_owner][msg.sender]);\n', '    require(!frozenAccount[_owner]);\n', '\n', '    balances[_owner] = balances[_owner].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowances[_owner][msg.sender] = allowances[_owner][msg.sender].sub(_value);\n', '    Transfer(_owner, _to, _value);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', 'contract UpgradeableToken is BaseToken {\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint256 public totalUpgraded;\n', '\n', '  /**\n', '   * Upgrade states.\n', '   *\n', '   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n', "   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n", '   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n', '   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '   *\n', '   */\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeAgentEnabledToken(address _upgradeMaster) {\n', '    upgradeMaster = _upgradeMaster;\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint256 value) public {\n', '\n', '      UpgradeState state = getUpgradeState();\n', '      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n', '        // Called in a bad state\n', '        revert();\n', '      }\n', '\n', '      // Validate input value.\n', '      if (value == 0) revert();\n', '\n', '      balances[msg.sender] = balances[msg.sender].sub(value);\n', '\n', '      // Take tokens out from circulation\n', '      totalSupply = totalSupply.sub(value);\n', '      totalUpgraded = totalUpgraded.add(value);\n', '\n', '      // Upgrade agent reissues the tokens\n', '      upgradeAgent.upgradeFrom(msg.sender, value);\n', '      Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles\n', '   */\n', '  function setUpgradeAgent(address agent) external {\n', '\n', '      if(!canUpgrade()) {\n', '        // The token is not yet in a state that we could think upgrading\n', '        revert();\n', '      }\n', '\n', '      if (agent == 0x0) revert();\n', '      // Only a master can designate the next agent\n', '      if (msg.sender != upgradeMaster) revert();\n', '      // Upgrade has already begun for an agent\n', '      if (getUpgradeState() == UpgradeState.Upgrading) revert();\n', '\n', '      upgradeAgent = UpgradeAgent(agent);\n', '\n', '      // Bad interface\n', '      if(!upgradeAgent.isUpgradeAgent()) revert();\n', '      // Make sure that token supplies match in source and target\n', '      if (upgradeAgent.originalSupply() != totalSupply) revert();\n', '\n', '      UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public constant returns(UpgradeState) {\n', '    if(!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function setUpgradeMaster(address master) public {\n', '      if (master == 0x0) revert();\n', '      if (msg.sender != upgradeMaster) revert();\n', '      upgradeMaster = master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can enable to provide the condition when the upgrade can begin.\n', '   */\n', '  function canUpgrade() public constant returns(bool) {\n', '     return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * A crowdsaled token.\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' *\n', ' */\n', 'contract YBKToken is UpgradeableToken {\n', '\n', '  string public name;\n', '  string public symbol;\n', '  uint public decimals;\n', '  string public version;\n', '\n', '  /**\n', '   * Construct the token.\n', '   */\n', '   // Constructor\n', '   function YBKToken(string _name, string _symbol, uint _initialSupply, uint _decimals, string _version) public {\n', '\n', '     owner = msg.sender;\n', '\n', '     // Initially set the upgrade master same as owner\n', '     upgradeMaster = owner;\n', '\n', '     name = _name;\n', '     decimals = _decimals;\n', '     symbol = _symbol;\n', '     version = _version;\n', '\n', '     totalSupply = _initialSupply;\n', '     balances[msg.sender] = totalSupply;\n', '\n', '   }\n', '\n', '}']
