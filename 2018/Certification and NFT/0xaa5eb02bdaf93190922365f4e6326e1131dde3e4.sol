['pragma solidity ^0.4.18;\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  \n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', 'contract HasWallet is Ownable {\n', '    address public wallet;\n', '\n', '    function setWallet(address walletAddress) public onlyOwner {\n', '        require(walletAddress != address(0));\n', '        wallet = walletAddress;\n', '    }\n', '\n', '\n', '}\n', 'contract WalletUsage is HasWallet {\n', '\n', '\n', '    /**\n', '      * 合约自己是否保留eth.\n', '      */\n', '    bool public keepEth;\n', '\n', '\n', '    /**\n', '      * 为避免默认方法被占用，特别开指定方法接受以太坊\n', '      */\n', '    function depositEth() public payable {\n', '    }\n', '\n', '    function withdrawEth2Wallet(uint256 weiAmount) public onlyOwner {\n', '        require(wallet != address(0));\n', '        require(weiAmount > 0);\n', '        wallet.transfer(weiAmount);\n', '    }\n', '\n', '    function setKeepEth(bool _keepEth) public onlyOwner {\n', '        keepEth = _keepEth;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract PublicBatchTransfer is WalletUsage {\n', '    using SafeERC20 for ERC20;\n', '\n', '    uint256 public fee;\n', '\n', '    function PublicBatchTransfer(address walletAddress,uint256 _fee){\n', '        require(walletAddress != address(0));\n', '        setWallet(walletAddress);\n', '        setFee(_fee);\n', '    }\n', '\n', '    function batchTransfer(address tokenAddress, address[] beneficiaries, uint256[] tokenAmount) payable public returns (bool) {\n', '        require(msg.value >= fee);\n', '        require(tokenAddress != address(0));\n', '        require(beneficiaries.length > 0 && beneficiaries.length == tokenAmount.length);\n', '        ERC20 ERC20Contract = ERC20(tokenAddress);\n', '        for (uint256 i = 0; i < beneficiaries.length; i++) {\n', '            ERC20Contract.safeTransferFrom(msg.sender, beneficiaries[i], tokenAmount[i]);\n', '        }\n', '        if (!keepEth) {\n', '            wallet.transfer(msg.value);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function setFee(uint256 _fee) onlyOwner public {\n', '        fee = _fee;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  \n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', 'contract HasWallet is Ownable {\n', '    address public wallet;\n', '\n', '    function setWallet(address walletAddress) public onlyOwner {\n', '        require(walletAddress != address(0));\n', '        wallet = walletAddress;\n', '    }\n', '\n', '\n', '}\n', 'contract WalletUsage is HasWallet {\n', '\n', '\n', '    /**\n', '      * 合约自己是否保留eth.\n', '      */\n', '    bool public keepEth;\n', '\n', '\n', '    /**\n', '      * 为避免默认方法被占用，特别开指定方法接受以太坊\n', '      */\n', '    function depositEth() public payable {\n', '    }\n', '\n', '    function withdrawEth2Wallet(uint256 weiAmount) public onlyOwner {\n', '        require(wallet != address(0));\n', '        require(weiAmount > 0);\n', '        wallet.transfer(weiAmount);\n', '    }\n', '\n', '    function setKeepEth(bool _keepEth) public onlyOwner {\n', '        keepEth = _keepEth;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract PublicBatchTransfer is WalletUsage {\n', '    using SafeERC20 for ERC20;\n', '\n', '    uint256 public fee;\n', '\n', '    function PublicBatchTransfer(address walletAddress,uint256 _fee){\n', '        require(walletAddress != address(0));\n', '        setWallet(walletAddress);\n', '        setFee(_fee);\n', '    }\n', '\n', '    function batchTransfer(address tokenAddress, address[] beneficiaries, uint256[] tokenAmount) payable public returns (bool) {\n', '        require(msg.value >= fee);\n', '        require(tokenAddress != address(0));\n', '        require(beneficiaries.length > 0 && beneficiaries.length == tokenAmount.length);\n', '        ERC20 ERC20Contract = ERC20(tokenAddress);\n', '        for (uint256 i = 0; i < beneficiaries.length; i++) {\n', '            ERC20Contract.safeTransferFrom(msg.sender, beneficiaries[i], tokenAmount[i]);\n', '        }\n', '        if (!keepEth) {\n', '            wallet.transfer(msg.value);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function setFee(uint256 _fee) onlyOwner public {\n', '        fee = _fee;\n', '    }\n', '}']
