['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '        // benefit is lost if &#39;b&#39; is also tested.\n', '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '    \n', '    \n', '    /**\n', '     * Constructor assigns ownership to the address used to deploy the contract.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * Any function with this modifier in its method signature can only be executed by\n', '     * the owner of the contract. Any attempt made by any other account to invoke the \n', '     * functions with this modifier will result in a loss of gas and the contract&#39;s state\n', '     * will remain untampered.\n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Allows for the transfer of ownership to another address;\n', '     * \n', '     * @param _newOwner The address to be assigned new ownership.\n', '     * */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(\n', '            _newOwner != address(0)\n', '            && _newOwner != owner \n', '        );\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Contract acts as an interface between the DappleAirdrops contract and all ERC20 compliant\n', ' * tokens. \n', ' * */\n', 'contract ERCInterface {\n', '    function transferFrom(address _from, address _to, uint256 _value) public;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function allowance(address owner, address spender) constant public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '}\n', '\n', '\n', '\n', 'contract DappleAirdrops is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) public bonusDropsOf;\n', '    mapping (address => uint256) public ethBalanceOf;\n', '    mapping (address => bool) public tokenIsBanned;\n', '    mapping (address => uint256) public trialDrops;\n', '        \n', '    uint256 public rate;\n', '    uint256 public dropUnitPrice;\n', '    uint256 public bonus;\n', '    uint256 public maxDropsPerTx;\n', '    uint256 public maxTrialDrops;\n', '    string public constant website = "www.dappleairdrops.com";\n', '    \n', '    event BonusCreditGranted(address indexed to, uint256 credit);\n', '    event BonusCreditRevoked(address indexed from, uint256 credit);\n', '    event CreditPurchased(address indexed by, uint256 etherValue, uint256 credit);\n', '    event AirdropInvoked(address indexed by, uint256 creditConsumed);\n', '    event BonustChanged(uint256 from, uint256 to);\n', '    event TokenBanned(address indexed tokenAddress);\n', '    event TokenUnbanned(address indexed tokenAddress);\n', '    event EthWithdrawn(address indexed by, uint256 totalWei);\n', '    event RateChanged(uint256 from, uint256 to);\n', '    event MaxDropsChanged(uint256 from, uint256 to);\n', '    event RefundIssued(address indexed to, uint256 totalWei);\n', '    event ERC20TokensWithdrawn(address token, address sentTo, uint256 value);\n', '\n', '    \n', '    /**\n', '     * Constructor sets the rate such that 1 ETH = 10,000 credits (i.e., 10,000 airdrop recipients)\n', '     * which equates to a unit price of 0.00001 ETH per airdrop recipient. The bonus percentage\n', '     * is set to 20% but is subject to change. Bonus credits will only be issued after once normal\n', '     * credits have been used (unless credits have been granted to an address by the owner of the \n', '     * contract).\n', '     * */\n', '    function DappleAirdrops() public {\n', '        rate = 10000;\n', '        dropUnitPrice = 1e14; \n', '        bonus = 20;\n', '        maxDropsPerTx = 1000000;\n', '        maxTrialDrops = 1000000;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Checks whether or not an ERC20 token has used its free trial of 100 drops. This is a constant \n', '     * function which does not alter the state of the contract and therefore does not require any gas \n', '     * or a signature to be executed. \n', '     * \n', '     * @param _addressOfToken The address of the token being queried.\n', '     * \n', '     * @return true if the token being queried has not used its 100 first free trial drops, false\n', '     * otherwise.\n', '     * */\n', '    function tokenHasFreeTrial(address _addressOfToken) public view returns(bool) {\n', '        return trialDrops[_addressOfToken] < maxTrialDrops;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Checks how many remaining free trial drops a token has.\n', '     * \n', '     * @param _addressOfToken the address of the token being queried.\n', '     * \n', '     * @return the total remaining free trial drops of a token.\n', '     * */\n', '    function getRemainingTrialDrops(address _addressOfToken) public view returns(uint256) {\n', '        if(tokenHasFreeTrial(_addressOfToken)) {\n', '            return maxTrialDrops.sub(trialDrops[_addressOfToken]);\n', '        } \n', '        return 0;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the price of drops to be changed by the owner of the contract. Any attempt made by \n', '     * any other account to invoke the function will result in a loss of gas and the price will remain \n', '     * untampered.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function setRate(uint256 _newRate) public onlyOwner returns(bool) {\n', '        require(\n', '            _newRate != rate \n', '            && _newRate > 0\n', '        );\n', '        RateChanged(rate, _newRate);\n', '        rate = _newRate;\n', '        uint256 eth = 1 ether;\n', '        dropUnitPrice = eth.div(rate);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function getRate() public view returns(uint256) {\n', '        return rate;\n', '    }\n', '\n', '    \n', '    /**\n', '     * Allows for the maximum number of participants to be queried. This is a constant function \n', '     * which does not alter the state of the contract and therefore does not require any gas or a\n', '     * signature to be executed. \n', '     * \n', '     * @return the maximum number of recipients per transaction.\n', '     * */\n', '    function getMaxDropsPerTx() public view returns(uint256) {\n', '        return maxDropsPerTx;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the maximum number of recipients per transaction to be changed by the owner. \n', '     * Any attempt made by any other account to invoke the function will result in a loss of gas \n', '     * and the maximum number of recipients will remain untampered.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function setMaxDrops(uint256 _maxDrops) public onlyOwner returns(bool) {\n', '        require(_maxDrops >= 1000000);\n', '        MaxDropsChanged(maxDropsPerTx, _maxDrops);\n', '        maxDropsPerTx = _maxDrops;\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Allows for the bonus to be changed at any point in time by the owner of the contract. Any\n', '     * attempt made by any other account to invoke the function will result in a loss of gas and \n', '     * the bonus will remain untampered.\n', '     * \n', '     * @param _newBonus The value of the new bonus to be set.\n', '     * */\n', '    function setBonus(uint256 _newBonus) public onlyOwner returns(bool) {\n', '        require(bonus != _newBonus);\n', '        BonustChanged(bonus, _newBonus);\n', '        bonus = _newBonus;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for bonus drops to be granted to a recipient address by the owner of the contract. \n', '     * Any attempt made by any other account to invoke the function will result in a loss of gas \n', '     * and the bonus drops of the recipient will remain untampered.\n', '     * \n', '     * @param _addr The address which will receive bonus credits.\n', '     * @param _bonusDrops The amount of bonus drops to be granted.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function grantBonusDrops(address _addr, uint256 _bonusDrops) public onlyOwner returns(bool) {\n', '        require(\n', '            _addr != address(0) \n', '            && _bonusDrops > 0\n', '        );\n', '        bonusDropsOf[_addr] = bonusDropsOf[_addr].add(_bonusDrops);\n', '        BonusCreditGranted(_addr, _bonusDrops);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for bonus drops of an address to be revoked by the owner of the contract. Any \n', '     * attempt made by any other account to invoke the function will result in a loss of gas\n', '     * and the bonus drops of the recipient will remain untampered.\n', '     * \n', '     * @param _addr The address to revoke bonus credits from.\n', '     * @param _bonusDrops The amount of bonus drops to be revoked.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function revokeBonusCreditOf(address _addr, uint256 _bonusDrops) public onlyOwner returns(bool) {\n', '        require(\n', '            _addr != address(0) \n', '            && bonusDropsOf[_addr] >= _bonusDrops\n', '        );\n', '        bonusDropsOf[_addr] = bonusDropsOf[_addr].sub(_bonusDrops);\n', '        BonusCreditRevoked(_addr, _bonusDrops);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the credit of an address to be queried. This is a constant function which\n', '     * does not alter the state of the contract and therefore does not require any gas or a\n', '     * signature to be executed. \n', '     * \n', '     * @param _addr The address of which to query the credit balance of. \n', '     * \n', '     * @return The total amount of credit the address has (minus any bonus credits).\n', '     * */\n', '    function getDropsOf(address _addr) public view returns(uint256) {\n', '        return (ethBalanceOf[_addr].mul(rate)).div(10 ** 18);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the bonus credit of an address to be queried. This is a constant function \n', '     * which does not alter the state of the contract and therefore does not require any gas \n', '     * or a signature to be executed. \n', '     * \n', '     * @param _addr The address of which to query the bonus credits. \n', '     * \n', '     * @return The total amount of bonus credit the address has (minus non-bonus credit).\n', '     * */\n', '    function getBonusDropsOf(address _addr) public view returns(uint256) {\n', '        return bonusDropsOf[_addr];\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the total credit (bonus + non-bonus) of an address to be queried. This is a \n', '     * constant function which does not alter the state of the contract and therefore does not  \n', '     * require any gas or a signature to be executed. \n', '     * \n', '     * @param _addr The address of which to query the total credits. \n', '     * \n', '     * @return The total amount of credit the address has (bonus + non-bonus credit).\n', '     * */\n', '    function getTotalDropsOf(address _addr) public view returns(uint256) {\n', '        return getDropsOf(_addr).add(getBonusDropsOf(_addr));\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the total ETH balance of an address to be queried. This is a constant\n', '     * function which does not alter the state of the contract and therefore does not  \n', '     * require any gas or a signature to be executed. \n', '     * \n', '     * @param _addr The address of which to query the total ETH balance. \n', '     * \n', '     * @return The total amount of ETH balance the address has.\n', '     * */\n', '    function getEthBalanceOf(address _addr) public view returns(uint256) {\n', '        return ethBalanceOf[_addr];\n', '    }\n', '\n', '    \n', '    /**\n', '     * Allows for suspected fraudulent ERC20 tokens to be banned from being airdropped by the \n', '     * owner of the contract. Any attempt made by any other account to invoke the function will \n', '     * result in a loss of gas and the token to remain unbanned.\n', '     * \n', '     * @param _tokenAddr The contract address of the ERC20 token to be banned from being airdropped. \n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function banToken(address _tokenAddr) public onlyOwner returns(bool) {\n', '        require(!tokenIsBanned[_tokenAddr]);\n', '        tokenIsBanned[_tokenAddr] = true;\n', '        TokenBanned(_tokenAddr);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for previously suspected fraudulent ERC20 tokens to become unbanned by the owner\n', '     * of the contract. Any attempt made by any other account to invoke the function will \n', '     * result in a loss of gas and the token to remain banned.\n', '     * \n', '     * @param _tokenAddr The contract address of the ERC20 token to be banned from being airdropped. \n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     **/\n', '    function unbanToken(address _tokenAddr) public onlyOwner returns(bool) {\n', '        require(tokenIsBanned[_tokenAddr]);\n', '        tokenIsBanned[_tokenAddr] = false;\n', '        TokenUnbanned(_tokenAddr);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the allowance of a token from its owner to this contract to be queried. \n', '     * \n', '     * As part of the ERC20 standard all tokens which fall under this category have an allowance \n', '     * function which enables owners of tokens to allow (or give permission) to another address \n', '     * to spend tokens on behalf of the owner. This contract uses this as part of its protocol.\n', '     * Users must first give permission to the contract to transfer tokens on their behalf, however,\n', '     * this does not mean that the tokens will ever be transferrable without the permission of the \n', '     * owner. This is a security feature which was implemented on this contract. It is not possible\n', '     * for the owner of this contract or anyone else to transfer the tokens which belong to others. \n', '     * \n', '     * @param _addr The address of the token&#39;s owner.\n', '     * @param _addressOfToken The contract address of the ERC20 token.\n', '     * \n', '     * @return The ERC20 token allowance from token owner to this contract. \n', '     * */\n', '    function getTokenAllowance(address _addr, address _addressOfToken) public view returns(uint256) {\n', '        ERCInterface token = ERCInterface(_addressOfToken);\n', '        return token.allowance(_addr, address(this));\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows users to buy and receive credits automatically when sending ETH to the contract address.\n', '     * */\n', '    function() public payable {\n', '        ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].add(msg.value);\n', '        CreditPurchased(msg.sender, msg.value, msg.value.mul(rate));\n', '    }\n', '\n', '    \n', '    /**\n', '     * Allows users to withdraw their ETH for drops which they have bought and not used. This \n', '     * will result in the credit of the user being set back to 0. However, bonus credits will \n', '     * remain the same because they are granted when users use their drops. \n', '     * \n', '     * @param _eth The amount of ETH to withdraw\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function withdrawEth(uint256 _eth) public returns(bool) {\n', '        require(\n', '            ethBalanceOf[msg.sender] >= _eth\n', '            && _eth > 0 \n', '        );\n', '        uint256 toTransfer = _eth;\n', '        ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].sub(_eth);\n', '        msg.sender.transfer(toTransfer);\n', '        EthWithdrawn(msg.sender, toTransfer);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for refunds to be made by the owner of the contract. Any attempt made by any other account \n', '     * to invoke the function will result in a loss of gas and no refunds will be made.\n', '     * */\n', '    function issueRefunds(address[] _addrs) public onlyOwner returns(bool) {\n', '        require(_addrs.length <= maxDropsPerTx);\n', '        for(uint i = 0; i < _addrs.length; i++) {\n', '            if(_addrs[i] != address(0) && ethBalanceOf[_addrs[i]] > 0) {\n', '                uint256 toRefund = ethBalanceOf[_addrs[i]];\n', '                ethBalanceOf[_addrs[i]] = 0;\n', '                _addrs[i].transfer(toRefund);\n', '                RefundIssued(_addrs[i], toRefund);\n', '            }\n', '        }\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the distribution of an ERC20 token to be transferred to up to 100 recipients at \n', '     * a time. This function only facilitates batch transfers of constant values (i.e., all recipients\n', '     * will receive the same amount of tokens).\n', '     * \n', '     * @param _addressOfToken The contract address of an ERC20 token.\n', '     * @param _recipients The list of addresses which will receive tokens. \n', '     * @param _value The amount of tokens all addresses will receive. \n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function singleValueAirdrop(address _addressOfToken,  address[] _recipients, uint256 _value) public returns(bool) {\n', '        ERCInterface token = ERCInterface(_addressOfToken);\n', '        require(\n', '            _recipients.length <= maxDropsPerTx \n', '            && (\n', '                getTotalDropsOf(msg.sender)>= _recipients.length \n', '                || tokenHasFreeTrial(_addressOfToken) \n', '            )\n', '            && !tokenIsBanned[_addressOfToken]\n', '        );\n', '        for(uint i = 0; i < _recipients.length; i++) {\n', '            if(_recipients[i] != address(0)) {\n', '                token.transferFrom(msg.sender, _recipients[i], _value);\n', '            }\n', '        }\n', '        if(tokenHasFreeTrial(_addressOfToken)) {\n', '            trialDrops[_addressOfToken] = trialDrops[_addressOfToken].add(_recipients.length);\n', '        } else {\n', '            updateMsgSenderBonusDrops(_recipients.length);\n', '        }\n', '        AirdropInvoked(msg.sender, _recipients.length);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the distribution of an ERC20 token to be transferred to up to 100 recipients at \n', '     * a time. This function facilitates batch transfers of differing values (i.e., all recipients\n', '     * can receive different amounts of tokens).\n', '     * \n', '     * @param _addressOfToken The contract address of an ERC20 token.\n', '     * @param _recipients The list of addresses which will receive tokens. \n', '     * @param _values The corresponding values of tokens which each address will receive.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */    \n', '    function multiValueAirdrop(address _addressOfToken,  address[] _recipients, uint256[] _values) public returns(bool) {\n', '        ERCInterface token = ERCInterface(_addressOfToken);\n', '        require(\n', '            _recipients.length <= maxDropsPerTx \n', '            && _recipients.length == _values.length \n', '            && (\n', '                getTotalDropsOf(msg.sender) >= _recipients.length\n', '                || tokenHasFreeTrial(_addressOfToken)\n', '            )\n', '            && !tokenIsBanned[_addressOfToken]\n', '        );\n', '        for(uint i = 0; i < _recipients.length; i++) {\n', '            if(_recipients[i] != address(0) && _values[i] > 0) {\n', '                token.transferFrom(msg.sender, _recipients[i], _values[i]);\n', '            }\n', '        }\n', '        if(tokenHasFreeTrial(_addressOfToken)) {\n', '            trialDrops[_addressOfToken] = trialDrops[_addressOfToken].add(_recipients.length);\n', '        } else {\n', '            updateMsgSenderBonusDrops(_recipients.length);\n', '        }\n', '        AirdropInvoked(msg.sender, _recipients.length);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Invoked internally by the airdrop functions. The purpose of thie function is to grant bonus \n', '     * drops to users who spend their ETH airdropping tokens, and to remove bonus drops when users \n', '     * no longer have ETH in their account but do have some bonus drops when airdropping tokens.\n', '     * \n', '     * @param _drops The amount of recipients which received tokens from the airdrop.\n', '     * */\n', '    function updateMsgSenderBonusDrops(uint256 _drops) internal {\n', '        if(_drops <= getDropsOf(msg.sender)) {\n', '            bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].add(_drops.mul(bonus).div(100));\n', '            ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].sub(_drops.mul(dropUnitPrice));\n', '            owner.transfer(_drops.mul(dropUnitPrice));\n', '        } else {\n', '            uint256 remainder = _drops.sub(getDropsOf(msg.sender));\n', '            if(ethBalanceOf[msg.sender] > 0) {\n', '                bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].add(getDropsOf(msg.sender).mul(bonus).div(100));\n', '                owner.transfer(ethBalanceOf[msg.sender]);\n', '                ethBalanceOf[msg.sender] = 0;\n', '            }\n', '            bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].sub(remainder);\n', '        }\n', '    }\n', '    \n', '\n', '    /**\n', '     * Allows for any ERC20 tokens which have been mistakenly  sent to this contract to be returned \n', '     * to the original sender by the owner of the contract. Any attempt made by any other account \n', '     * to invoke the function will result in a loss of gas and no tokens will be transferred out.\n', '     * \n', '     * @param _addressOfToken The contract address of an ERC20 token.\n', '     * @param _recipient The address which will receive tokens. \n', '     * @param _value The amount of tokens to refund.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */  \n', '    function withdrawERC20Tokens(address _addressOfToken,  address _recipient, uint256 _value) public onlyOwner returns(bool){\n', '        require(\n', '            _addressOfToken != address(0)\n', '            && _recipient != address(0)\n', '            && _value > 0\n', '        );\n', '        ERCInterface token = ERCInterface(_addressOfToken);\n', '        token.transfer(_recipient, _value);\n', '        ERC20TokensWithdrawn(_addressOfToken, _recipient, _value);\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'library SafeMath {\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    \n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '    \n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '    \n', '    \n', '    /**\n', '     * Constructor assigns ownership to the address used to deploy the contract.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * Any function with this modifier in its method signature can only be executed by\n', '     * the owner of the contract. Any attempt made by any other account to invoke the \n', "     * functions with this modifier will result in a loss of gas and the contract's state\n", '     * will remain untampered.\n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Allows for the transfer of ownership to another address;\n', '     * \n', '     * @param _newOwner The address to be assigned new ownership.\n', '     * */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(\n', '            _newOwner != address(0)\n', '            && _newOwner != owner \n', '        );\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Contract acts as an interface between the DappleAirdrops contract and all ERC20 compliant\n', ' * tokens. \n', ' * */\n', 'contract ERCInterface {\n', '    function transferFrom(address _from, address _to, uint256 _value) public;\n', '    function balanceOf(address who) constant public returns (uint256);\n', '    function allowance(address owner, address spender) constant public returns (uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '}\n', '\n', '\n', '\n', 'contract DappleAirdrops is Ownable {\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    mapping (address => uint256) public bonusDropsOf;\n', '    mapping (address => uint256) public ethBalanceOf;\n', '    mapping (address => bool) public tokenIsBanned;\n', '    mapping (address => uint256) public trialDrops;\n', '        \n', '    uint256 public rate;\n', '    uint256 public dropUnitPrice;\n', '    uint256 public bonus;\n', '    uint256 public maxDropsPerTx;\n', '    uint256 public maxTrialDrops;\n', '    string public constant website = "www.dappleairdrops.com";\n', '    \n', '    event BonusCreditGranted(address indexed to, uint256 credit);\n', '    event BonusCreditRevoked(address indexed from, uint256 credit);\n', '    event CreditPurchased(address indexed by, uint256 etherValue, uint256 credit);\n', '    event AirdropInvoked(address indexed by, uint256 creditConsumed);\n', '    event BonustChanged(uint256 from, uint256 to);\n', '    event TokenBanned(address indexed tokenAddress);\n', '    event TokenUnbanned(address indexed tokenAddress);\n', '    event EthWithdrawn(address indexed by, uint256 totalWei);\n', '    event RateChanged(uint256 from, uint256 to);\n', '    event MaxDropsChanged(uint256 from, uint256 to);\n', '    event RefundIssued(address indexed to, uint256 totalWei);\n', '    event ERC20TokensWithdrawn(address token, address sentTo, uint256 value);\n', '\n', '    \n', '    /**\n', '     * Constructor sets the rate such that 1 ETH = 10,000 credits (i.e., 10,000 airdrop recipients)\n', '     * which equates to a unit price of 0.00001 ETH per airdrop recipient. The bonus percentage\n', '     * is set to 20% but is subject to change. Bonus credits will only be issued after once normal\n', '     * credits have been used (unless credits have been granted to an address by the owner of the \n', '     * contract).\n', '     * */\n', '    function DappleAirdrops() public {\n', '        rate = 10000;\n', '        dropUnitPrice = 1e14; \n', '        bonus = 20;\n', '        maxDropsPerTx = 1000000;\n', '        maxTrialDrops = 1000000;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Checks whether or not an ERC20 token has used its free trial of 100 drops. This is a constant \n', '     * function which does not alter the state of the contract and therefore does not require any gas \n', '     * or a signature to be executed. \n', '     * \n', '     * @param _addressOfToken The address of the token being queried.\n', '     * \n', '     * @return true if the token being queried has not used its 100 first free trial drops, false\n', '     * otherwise.\n', '     * */\n', '    function tokenHasFreeTrial(address _addressOfToken) public view returns(bool) {\n', '        return trialDrops[_addressOfToken] < maxTrialDrops;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Checks how many remaining free trial drops a token has.\n', '     * \n', '     * @param _addressOfToken the address of the token being queried.\n', '     * \n', '     * @return the total remaining free trial drops of a token.\n', '     * */\n', '    function getRemainingTrialDrops(address _addressOfToken) public view returns(uint256) {\n', '        if(tokenHasFreeTrial(_addressOfToken)) {\n', '            return maxTrialDrops.sub(trialDrops[_addressOfToken]);\n', '        } \n', '        return 0;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the price of drops to be changed by the owner of the contract. Any attempt made by \n', '     * any other account to invoke the function will result in a loss of gas and the price will remain \n', '     * untampered.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function setRate(uint256 _newRate) public onlyOwner returns(bool) {\n', '        require(\n', '            _newRate != rate \n', '            && _newRate > 0\n', '        );\n', '        RateChanged(rate, _newRate);\n', '        rate = _newRate;\n', '        uint256 eth = 1 ether;\n', '        dropUnitPrice = eth.div(rate);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    function getRate() public view returns(uint256) {\n', '        return rate;\n', '    }\n', '\n', '    \n', '    /**\n', '     * Allows for the maximum number of participants to be queried. This is a constant function \n', '     * which does not alter the state of the contract and therefore does not require any gas or a\n', '     * signature to be executed. \n', '     * \n', '     * @return the maximum number of recipients per transaction.\n', '     * */\n', '    function getMaxDropsPerTx() public view returns(uint256) {\n', '        return maxDropsPerTx;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the maximum number of recipients per transaction to be changed by the owner. \n', '     * Any attempt made by any other account to invoke the function will result in a loss of gas \n', '     * and the maximum number of recipients will remain untampered.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function setMaxDrops(uint256 _maxDrops) public onlyOwner returns(bool) {\n', '        require(_maxDrops >= 1000000);\n', '        MaxDropsChanged(maxDropsPerTx, _maxDrops);\n', '        maxDropsPerTx = _maxDrops;\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * Allows for the bonus to be changed at any point in time by the owner of the contract. Any\n', '     * attempt made by any other account to invoke the function will result in a loss of gas and \n', '     * the bonus will remain untampered.\n', '     * \n', '     * @param _newBonus The value of the new bonus to be set.\n', '     * */\n', '    function setBonus(uint256 _newBonus) public onlyOwner returns(bool) {\n', '        require(bonus != _newBonus);\n', '        BonustChanged(bonus, _newBonus);\n', '        bonus = _newBonus;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for bonus drops to be granted to a recipient address by the owner of the contract. \n', '     * Any attempt made by any other account to invoke the function will result in a loss of gas \n', '     * and the bonus drops of the recipient will remain untampered.\n', '     * \n', '     * @param _addr The address which will receive bonus credits.\n', '     * @param _bonusDrops The amount of bonus drops to be granted.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function grantBonusDrops(address _addr, uint256 _bonusDrops) public onlyOwner returns(bool) {\n', '        require(\n', '            _addr != address(0) \n', '            && _bonusDrops > 0\n', '        );\n', '        bonusDropsOf[_addr] = bonusDropsOf[_addr].add(_bonusDrops);\n', '        BonusCreditGranted(_addr, _bonusDrops);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for bonus drops of an address to be revoked by the owner of the contract. Any \n', '     * attempt made by any other account to invoke the function will result in a loss of gas\n', '     * and the bonus drops of the recipient will remain untampered.\n', '     * \n', '     * @param _addr The address to revoke bonus credits from.\n', '     * @param _bonusDrops The amount of bonus drops to be revoked.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function revokeBonusCreditOf(address _addr, uint256 _bonusDrops) public onlyOwner returns(bool) {\n', '        require(\n', '            _addr != address(0) \n', '            && bonusDropsOf[_addr] >= _bonusDrops\n', '        );\n', '        bonusDropsOf[_addr] = bonusDropsOf[_addr].sub(_bonusDrops);\n', '        BonusCreditRevoked(_addr, _bonusDrops);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the credit of an address to be queried. This is a constant function which\n', '     * does not alter the state of the contract and therefore does not require any gas or a\n', '     * signature to be executed. \n', '     * \n', '     * @param _addr The address of which to query the credit balance of. \n', '     * \n', '     * @return The total amount of credit the address has (minus any bonus credits).\n', '     * */\n', '    function getDropsOf(address _addr) public view returns(uint256) {\n', '        return (ethBalanceOf[_addr].mul(rate)).div(10 ** 18);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the bonus credit of an address to be queried. This is a constant function \n', '     * which does not alter the state of the contract and therefore does not require any gas \n', '     * or a signature to be executed. \n', '     * \n', '     * @param _addr The address of which to query the bonus credits. \n', '     * \n', '     * @return The total amount of bonus credit the address has (minus non-bonus credit).\n', '     * */\n', '    function getBonusDropsOf(address _addr) public view returns(uint256) {\n', '        return bonusDropsOf[_addr];\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the total credit (bonus + non-bonus) of an address to be queried. This is a \n', '     * constant function which does not alter the state of the contract and therefore does not  \n', '     * require any gas or a signature to be executed. \n', '     * \n', '     * @param _addr The address of which to query the total credits. \n', '     * \n', '     * @return The total amount of credit the address has (bonus + non-bonus credit).\n', '     * */\n', '    function getTotalDropsOf(address _addr) public view returns(uint256) {\n', '        return getDropsOf(_addr).add(getBonusDropsOf(_addr));\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the total ETH balance of an address to be queried. This is a constant\n', '     * function which does not alter the state of the contract and therefore does not  \n', '     * require any gas or a signature to be executed. \n', '     * \n', '     * @param _addr The address of which to query the total ETH balance. \n', '     * \n', '     * @return The total amount of ETH balance the address has.\n', '     * */\n', '    function getEthBalanceOf(address _addr) public view returns(uint256) {\n', '        return ethBalanceOf[_addr];\n', '    }\n', '\n', '    \n', '    /**\n', '     * Allows for suspected fraudulent ERC20 tokens to be banned from being airdropped by the \n', '     * owner of the contract. Any attempt made by any other account to invoke the function will \n', '     * result in a loss of gas and the token to remain unbanned.\n', '     * \n', '     * @param _tokenAddr The contract address of the ERC20 token to be banned from being airdropped. \n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function banToken(address _tokenAddr) public onlyOwner returns(bool) {\n', '        require(!tokenIsBanned[_tokenAddr]);\n', '        tokenIsBanned[_tokenAddr] = true;\n', '        TokenBanned(_tokenAddr);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for previously suspected fraudulent ERC20 tokens to become unbanned by the owner\n', '     * of the contract. Any attempt made by any other account to invoke the function will \n', '     * result in a loss of gas and the token to remain banned.\n', '     * \n', '     * @param _tokenAddr The contract address of the ERC20 token to be banned from being airdropped. \n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     **/\n', '    function unbanToken(address _tokenAddr) public onlyOwner returns(bool) {\n', '        require(tokenIsBanned[_tokenAddr]);\n', '        tokenIsBanned[_tokenAddr] = false;\n', '        TokenUnbanned(_tokenAddr);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the allowance of a token from its owner to this contract to be queried. \n', '     * \n', '     * As part of the ERC20 standard all tokens which fall under this category have an allowance \n', '     * function which enables owners of tokens to allow (or give permission) to another address \n', '     * to spend tokens on behalf of the owner. This contract uses this as part of its protocol.\n', '     * Users must first give permission to the contract to transfer tokens on their behalf, however,\n', '     * this does not mean that the tokens will ever be transferrable without the permission of the \n', '     * owner. This is a security feature which was implemented on this contract. It is not possible\n', '     * for the owner of this contract or anyone else to transfer the tokens which belong to others. \n', '     * \n', "     * @param _addr The address of the token's owner.\n", '     * @param _addressOfToken The contract address of the ERC20 token.\n', '     * \n', '     * @return The ERC20 token allowance from token owner to this contract. \n', '     * */\n', '    function getTokenAllowance(address _addr, address _addressOfToken) public view returns(uint256) {\n', '        ERCInterface token = ERCInterface(_addressOfToken);\n', '        return token.allowance(_addr, address(this));\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows users to buy and receive credits automatically when sending ETH to the contract address.\n', '     * */\n', '    function() public payable {\n', '        ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].add(msg.value);\n', '        CreditPurchased(msg.sender, msg.value, msg.value.mul(rate));\n', '    }\n', '\n', '    \n', '    /**\n', '     * Allows users to withdraw their ETH for drops which they have bought and not used. This \n', '     * will result in the credit of the user being set back to 0. However, bonus credits will \n', '     * remain the same because they are granted when users use their drops. \n', '     * \n', '     * @param _eth The amount of ETH to withdraw\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function withdrawEth(uint256 _eth) public returns(bool) {\n', '        require(\n', '            ethBalanceOf[msg.sender] >= _eth\n', '            && _eth > 0 \n', '        );\n', '        uint256 toTransfer = _eth;\n', '        ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].sub(_eth);\n', '        msg.sender.transfer(toTransfer);\n', '        EthWithdrawn(msg.sender, toTransfer);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for refunds to be made by the owner of the contract. Any attempt made by any other account \n', '     * to invoke the function will result in a loss of gas and no refunds will be made.\n', '     * */\n', '    function issueRefunds(address[] _addrs) public onlyOwner returns(bool) {\n', '        require(_addrs.length <= maxDropsPerTx);\n', '        for(uint i = 0; i < _addrs.length; i++) {\n', '            if(_addrs[i] != address(0) && ethBalanceOf[_addrs[i]] > 0) {\n', '                uint256 toRefund = ethBalanceOf[_addrs[i]];\n', '                ethBalanceOf[_addrs[i]] = 0;\n', '                _addrs[i].transfer(toRefund);\n', '                RefundIssued(_addrs[i], toRefund);\n', '            }\n', '        }\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the distribution of an ERC20 token to be transferred to up to 100 recipients at \n', '     * a time. This function only facilitates batch transfers of constant values (i.e., all recipients\n', '     * will receive the same amount of tokens).\n', '     * \n', '     * @param _addressOfToken The contract address of an ERC20 token.\n', '     * @param _recipients The list of addresses which will receive tokens. \n', '     * @param _value The amount of tokens all addresses will receive. \n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */\n', '    function singleValueAirdrop(address _addressOfToken,  address[] _recipients, uint256 _value) public returns(bool) {\n', '        ERCInterface token = ERCInterface(_addressOfToken);\n', '        require(\n', '            _recipients.length <= maxDropsPerTx \n', '            && (\n', '                getTotalDropsOf(msg.sender)>= _recipients.length \n', '                || tokenHasFreeTrial(_addressOfToken) \n', '            )\n', '            && !tokenIsBanned[_addressOfToken]\n', '        );\n', '        for(uint i = 0; i < _recipients.length; i++) {\n', '            if(_recipients[i] != address(0)) {\n', '                token.transferFrom(msg.sender, _recipients[i], _value);\n', '            }\n', '        }\n', '        if(tokenHasFreeTrial(_addressOfToken)) {\n', '            trialDrops[_addressOfToken] = trialDrops[_addressOfToken].add(_recipients.length);\n', '        } else {\n', '            updateMsgSenderBonusDrops(_recipients.length);\n', '        }\n', '        AirdropInvoked(msg.sender, _recipients.length);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows for the distribution of an ERC20 token to be transferred to up to 100 recipients at \n', '     * a time. This function facilitates batch transfers of differing values (i.e., all recipients\n', '     * can receive different amounts of tokens).\n', '     * \n', '     * @param _addressOfToken The contract address of an ERC20 token.\n', '     * @param _recipients The list of addresses which will receive tokens. \n', '     * @param _values The corresponding values of tokens which each address will receive.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */    \n', '    function multiValueAirdrop(address _addressOfToken,  address[] _recipients, uint256[] _values) public returns(bool) {\n', '        ERCInterface token = ERCInterface(_addressOfToken);\n', '        require(\n', '            _recipients.length <= maxDropsPerTx \n', '            && _recipients.length == _values.length \n', '            && (\n', '                getTotalDropsOf(msg.sender) >= _recipients.length\n', '                || tokenHasFreeTrial(_addressOfToken)\n', '            )\n', '            && !tokenIsBanned[_addressOfToken]\n', '        );\n', '        for(uint i = 0; i < _recipients.length; i++) {\n', '            if(_recipients[i] != address(0) && _values[i] > 0) {\n', '                token.transferFrom(msg.sender, _recipients[i], _values[i]);\n', '            }\n', '        }\n', '        if(tokenHasFreeTrial(_addressOfToken)) {\n', '            trialDrops[_addressOfToken] = trialDrops[_addressOfToken].add(_recipients.length);\n', '        } else {\n', '            updateMsgSenderBonusDrops(_recipients.length);\n', '        }\n', '        AirdropInvoked(msg.sender, _recipients.length);\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Invoked internally by the airdrop functions. The purpose of thie function is to grant bonus \n', '     * drops to users who spend their ETH airdropping tokens, and to remove bonus drops when users \n', '     * no longer have ETH in their account but do have some bonus drops when airdropping tokens.\n', '     * \n', '     * @param _drops The amount of recipients which received tokens from the airdrop.\n', '     * */\n', '    function updateMsgSenderBonusDrops(uint256 _drops) internal {\n', '        if(_drops <= getDropsOf(msg.sender)) {\n', '            bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].add(_drops.mul(bonus).div(100));\n', '            ethBalanceOf[msg.sender] = ethBalanceOf[msg.sender].sub(_drops.mul(dropUnitPrice));\n', '            owner.transfer(_drops.mul(dropUnitPrice));\n', '        } else {\n', '            uint256 remainder = _drops.sub(getDropsOf(msg.sender));\n', '            if(ethBalanceOf[msg.sender] > 0) {\n', '                bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].add(getDropsOf(msg.sender).mul(bonus).div(100));\n', '                owner.transfer(ethBalanceOf[msg.sender]);\n', '                ethBalanceOf[msg.sender] = 0;\n', '            }\n', '            bonusDropsOf[msg.sender] = bonusDropsOf[msg.sender].sub(remainder);\n', '        }\n', '    }\n', '    \n', '\n', '    /**\n', '     * Allows for any ERC20 tokens which have been mistakenly  sent to this contract to be returned \n', '     * to the original sender by the owner of the contract. Any attempt made by any other account \n', '     * to invoke the function will result in a loss of gas and no tokens will be transferred out.\n', '     * \n', '     * @param _addressOfToken The contract address of an ERC20 token.\n', '     * @param _recipient The address which will receive tokens. \n', '     * @param _value The amount of tokens to refund.\n', '     * \n', '     * @return true if function executes successfully, false otherwise.\n', '     * */  \n', '    function withdrawERC20Tokens(address _addressOfToken,  address _recipient, uint256 _value) public onlyOwner returns(bool){\n', '        require(\n', '            _addressOfToken != address(0)\n', '            && _recipient != address(0)\n', '            && _value > 0\n', '        );\n', '        ERCInterface token = ERCInterface(_addressOfToken);\n', '        token.transfer(_recipient, _value);\n', '        ERC20TokensWithdrawn(_addressOfToken, _recipient, _value);\n', '        return true;\n', '    }\n', '}']
