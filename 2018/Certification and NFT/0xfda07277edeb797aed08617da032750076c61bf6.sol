['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Ownership interface\n', ' *\n', ' * Perminent ownership\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'interface IOwnership {\n', '\n', '    /**\n', '     * Returns true if `_account` is the current owner\n', '     *\n', '     * @param _account The address to test against\n', '     */\n', '    function isOwner(address _account) public view returns (bool);\n', '\n', '\n', '    /**\n', '     * Gets the current owner\n', '     *\n', '     * @return address The current owner\n', '     */\n', '    function getOwner() public view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * Ownership\n', ' *\n', ' * Perminent ownership\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract Ownership is IOwnership {\n', '\n', '    // Owner\n', '    address internal owner;\n', '\n', '\n', '    /**\n', '     * The publisher is the inital owner\n', '     */\n', '    function Ownership() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * Access is restricted to the current owner\n', '     */\n', '    modifier only_owner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns true if `_account` is the current owner\n', '     *\n', '     * @param _account The address to test against\n', '     */\n', '    function isOwner(address _account) public view returns (bool) {\n', '        return _account == owner;\n', '    }\n', '\n', '\n', '    /**\n', '     * Gets the current owner\n', '     *\n', '     * @return address The current owner\n', '     */\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * ransferable ownership interface\n', ' *\n', ' * Enhances ownership by allowing the current owner to \n', ' * transfer ownership to a new owner\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'interface ITransferableOwnership {\n', '    \n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner \n', '     */\n', '    function transferOwnership(address _newOwner) public;\n', '}\n', '\n', '\n', '/**\n', ' * Transferable ownership\n', ' *\n', ' * Enhances ownership by allowing the current owner to \n', ' * transfer ownership to a new owner\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract TransferableOwnership is ITransferableOwnership, Ownership {\n', '\n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner \n', '     */\n', '    function transferOwnership(address _newOwner) public only_owner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * ERC20 compatible token interface\n', ' *\n', ' * - Implements ERC 20 Token standard\n', ' * - Implements short address attack fix\n', ' *\n', ' * #created 29/09/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'interface IToken { \n', '\n', '    /** \n', '     * Get the total supply of tokens\n', '     * \n', '     * @return The total supply\n', '     */\n', '    function totalSupply() public view returns (uint);\n', '\n', '\n', '    /** \n', '     * Get balance of `_owner` \n', '     * \n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint);\n', '\n', '\n', '    /** \n', '     * Send `_value` token to `_to` from `msg.sender`\n', '     * \n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '\n', '\n', '    /** \n', '     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * \n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '\n', '\n', '    /** \n', '     * `msg.sender` approves `_spender` to spend `_value` tokens\n', '     * \n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '\n', '\n', '    /** \n', '     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n', '     * \n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint);\n', '}\n', '\n', '\n', '/**\n', ' * @title Token retrieve interface\n', ' *\n', ' * Allows tokens to be retrieved from a contract\n', ' *\n', ' * #created 29/09/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract ITokenRetriever {\n', '\n', '    /**\n', '     * Extracts tokens from the contract\n', '     *\n', '     * @param _tokenContract The address of ERC20 compatible token\n', '     */\n', '    function retrieveTokens(address _tokenContract) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title Token retrieve\n', ' *\n', ' * Allows tokens to be retrieved from a contract\n', ' *\n', ' * #created 18/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract TokenRetriever is ITokenRetriever {\n', '\n', '    /**\n', '     * Extracts tokens from the contract\n', '     *\n', '     * @param _tokenContract The address of ERC20 compatible token\n', '     */\n', '    function retrieveTokens(address _tokenContract) public {\n', '        IToken tokenInstance = IToken(_tokenContract);\n', '        uint tokenBalance = tokenInstance.balanceOf(this);\n', '        if (tokenBalance > 0) {\n', '            tokenInstance.transfer(msg.sender, tokenBalance);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * IAirdropper\n', ' *\n', ' * #created 29/03/2018\n', ' * #author Frank Bonnet\n', ' */\n', 'interface IAirdropper {\n', '\n', '    /**\n', '     * Airdrop tokens\n', '     *\n', '     * Transfers the appropriate `_token` value for each recipient \n', '     * found in `_recipients` and `_values` \n', '     *\n', '     * @param _token Token contract to send from\n', '     * @param _recipients Receivers of the tokens\n', '     * @param _values Amounts of tokens that are transferred\n', '     */\n', '    function drop(IToken _token, address[] _recipients, uint[] _values) public;\n', '}\n', '\n', '\n', '/**\n', ' * Airdropper \n', ' *\n', ' * Transfer tokens to multiple accounts at once\n', ' *\n', ' * #created 29/03/2018\n', ' * #author Frank Bonnet\n', ' */\n', 'contract Airdropper is TransferableOwnership {\n', '\n', '    /**\n', '     * Airdrop tokens\n', '     *\n', '     * Transfers the appropriate `_token` value for each recipient \n', '     * found in `_recipients` and `_values` \n', '     *\n', '     * @param _token Token contract to send from\n', '     * @param _recipients Receivers of the tokens\n', '     * @param _values Amounts of tokens that are transferred\n', '     */\n', '    function drop(IToken _token, address[] _recipients, uint[] _values) public only_owner {\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            _token.transfer(_recipients[i], _values[i]);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * DCorp Airdropper \n', ' *\n', ' * Transfer tokens to multiple accounts at once\n', ' *\n', ' * #created 27/03/2018\n', ' * #author Frank Bonnet\n', ' */\n', 'contract DCorpAirdropper is Airdropper, TokenRetriever {\n', '\n', '    /**\n', '     * Failsafe mechanism\n', '     * \n', '     * Allows the owner to retrieve tokens (other than DRPS and DRPU tokens) from the contract that \n', '     * might have been send there by accident\n', '     *\n', '     * @param _tokenContract The address of ERC20 compatible token\n', '     */\n', '    function retrieveTokens(address _tokenContract) public only_owner {\n', '        super.retrieveTokens(_tokenContract);\n', '    }\n', '\n', '\n', '    // Do not accept ether\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * Ownership interface\n', ' *\n', ' * Perminent ownership\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'interface IOwnership {\n', '\n', '    /**\n', '     * Returns true if `_account` is the current owner\n', '     *\n', '     * @param _account The address to test against\n', '     */\n', '    function isOwner(address _account) public view returns (bool);\n', '\n', '\n', '    /**\n', '     * Gets the current owner\n', '     *\n', '     * @return address The current owner\n', '     */\n', '    function getOwner() public view returns (address);\n', '}\n', '\n', '\n', '/**\n', ' * Ownership\n', ' *\n', ' * Perminent ownership\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract Ownership is IOwnership {\n', '\n', '    // Owner\n', '    address internal owner;\n', '\n', '\n', '    /**\n', '     * The publisher is the inital owner\n', '     */\n', '    function Ownership() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * Access is restricted to the current owner\n', '     */\n', '    modifier only_owner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * Returns true if `_account` is the current owner\n', '     *\n', '     * @param _account The address to test against\n', '     */\n', '    function isOwner(address _account) public view returns (bool) {\n', '        return _account == owner;\n', '    }\n', '\n', '\n', '    /**\n', '     * Gets the current owner\n', '     *\n', '     * @return address The current owner\n', '     */\n', '    function getOwner() public view returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * ransferable ownership interface\n', ' *\n', ' * Enhances ownership by allowing the current owner to \n', ' * transfer ownership to a new owner\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'interface ITransferableOwnership {\n', '    \n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner \n', '     */\n', '    function transferOwnership(address _newOwner) public;\n', '}\n', '\n', '\n', '/**\n', ' * Transferable ownership\n', ' *\n', ' * Enhances ownership by allowing the current owner to \n', ' * transfer ownership to a new owner\n', ' *\n', ' * #created 01/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract TransferableOwnership is ITransferableOwnership, Ownership {\n', '\n', '    /**\n', '     * Transfer ownership to `_newOwner`\n', '     *\n', '     * @param _newOwner The address of the account that will become the new owner \n', '     */\n', '    function transferOwnership(address _newOwner) public only_owner {\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * ERC20 compatible token interface\n', ' *\n', ' * - Implements ERC 20 Token standard\n', ' * - Implements short address attack fix\n', ' *\n', ' * #created 29/09/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'interface IToken { \n', '\n', '    /** \n', '     * Get the total supply of tokens\n', '     * \n', '     * @return The total supply\n', '     */\n', '    function totalSupply() public view returns (uint);\n', '\n', '\n', '    /** \n', '     * Get balance of `_owner` \n', '     * \n', '     * @param _owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint);\n', '\n', '\n', '    /** \n', '     * Send `_value` token to `_to` from `msg.sender`\n', '     * \n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '\n', '\n', '    /** \n', '     * Send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '     * \n', '     * @param _from The address of the sender\n', '     * @param _to The address of the recipient\n', '     * @param _value The amount of token to be transferred\n', '     * @return Whether the transfer was successful or not\n', '     */\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n', '\n', '\n', '    /** \n', '     * `msg.sender` approves `_spender` to spend `_value` tokens\n', '     * \n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @param _value The amount of tokens to be approved for transfer\n', '     * @return Whether the approval was successful or not\n', '     */\n', '    function approve(address _spender, uint _value) public returns (bool);\n', '\n', '\n', '    /** \n', '     * Get the amount of remaining tokens that `_spender` is allowed to spend from `_owner`\n', '     * \n', '     * @param _owner The address of the account owning tokens\n', '     * @param _spender The address of the account able to transfer the tokens\n', '     * @return Amount of remaining tokens allowed to spent\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint);\n', '}\n', '\n', '\n', '/**\n', ' * @title Token retrieve interface\n', ' *\n', ' * Allows tokens to be retrieved from a contract\n', ' *\n', ' * #created 29/09/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract ITokenRetriever {\n', '\n', '    /**\n', '     * Extracts tokens from the contract\n', '     *\n', '     * @param _tokenContract The address of ERC20 compatible token\n', '     */\n', '    function retrieveTokens(address _tokenContract) public;\n', '}\n', '\n', '\n', '/**\n', ' * @title Token retrieve\n', ' *\n', ' * Allows tokens to be retrieved from a contract\n', ' *\n', ' * #created 18/10/2017\n', ' * #author Frank Bonnet\n', ' */\n', 'contract TokenRetriever is ITokenRetriever {\n', '\n', '    /**\n', '     * Extracts tokens from the contract\n', '     *\n', '     * @param _tokenContract The address of ERC20 compatible token\n', '     */\n', '    function retrieveTokens(address _tokenContract) public {\n', '        IToken tokenInstance = IToken(_tokenContract);\n', '        uint tokenBalance = tokenInstance.balanceOf(this);\n', '        if (tokenBalance > 0) {\n', '            tokenInstance.transfer(msg.sender, tokenBalance);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * IAirdropper\n', ' *\n', ' * #created 29/03/2018\n', ' * #author Frank Bonnet\n', ' */\n', 'interface IAirdropper {\n', '\n', '    /**\n', '     * Airdrop tokens\n', '     *\n', '     * Transfers the appropriate `_token` value for each recipient \n', '     * found in `_recipients` and `_values` \n', '     *\n', '     * @param _token Token contract to send from\n', '     * @param _recipients Receivers of the tokens\n', '     * @param _values Amounts of tokens that are transferred\n', '     */\n', '    function drop(IToken _token, address[] _recipients, uint[] _values) public;\n', '}\n', '\n', '\n', '/**\n', ' * Airdropper \n', ' *\n', ' * Transfer tokens to multiple accounts at once\n', ' *\n', ' * #created 29/03/2018\n', ' * #author Frank Bonnet\n', ' */\n', 'contract Airdropper is TransferableOwnership {\n', '\n', '    /**\n', '     * Airdrop tokens\n', '     *\n', '     * Transfers the appropriate `_token` value for each recipient \n', '     * found in `_recipients` and `_values` \n', '     *\n', '     * @param _token Token contract to send from\n', '     * @param _recipients Receivers of the tokens\n', '     * @param _values Amounts of tokens that are transferred\n', '     */\n', '    function drop(IToken _token, address[] _recipients, uint[] _values) public only_owner {\n', '        for (uint i = 0; i < _values.length; i++) {\n', '            _token.transfer(_recipients[i], _values[i]);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * DCorp Airdropper \n', ' *\n', ' * Transfer tokens to multiple accounts at once\n', ' *\n', ' * #created 27/03/2018\n', ' * #author Frank Bonnet\n', ' */\n', 'contract DCorpAirdropper is Airdropper, TokenRetriever {\n', '\n', '    /**\n', '     * Failsafe mechanism\n', '     * \n', '     * Allows the owner to retrieve tokens (other than DRPS and DRPU tokens) from the contract that \n', '     * might have been send there by accident\n', '     *\n', '     * @param _tokenContract The address of ERC20 compatible token\n', '     */\n', '    function retrieveTokens(address _tokenContract) public only_owner {\n', '        super.retrieveTokens(_tokenContract);\n', '    }\n', '\n', '\n', '    // Do not accept ether\n', '    function () public payable {\n', '        revert();\n', '    }\n', '}']
