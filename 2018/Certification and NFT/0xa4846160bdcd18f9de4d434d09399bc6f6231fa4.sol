['pragma solidity ^0.4.15;\n', '\n', '\n', '/// @title Math library - Allows calculation of logarithmic and exponential functions\n', '/// @author Alan Lu - <alan.lu@gnosis.pm>\n', '/// @author Stefan George - <stefan@gnosis.pm>\n', 'library Math {\n', '\n', '    enum EstimationMode { LowerBound, UpperBound, Midpoint }\n', '\n', '    /*\n', '     *  Constants\n', '     */\n', '    // This is equal to 1 in our calculations\n', '    uint public constant ONE =  0x10000000000000000;\n', '    uint public constant LN2 = 0xb17217f7d1cf79ac;\n', '    uint public constant LOG2_E = 0x171547652b82fe177;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Returns natural exponential function value of given x\n', '    /// @param x x\n', '    /// @return e**x\n', '    function exp(int x)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        // revert if x is > MAX_POWER, where\n', '        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))\n', '        require(x <= 2454971259878909886679);\n', '        // return 0 if exp(x) is tiny, using\n', '        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))\n', '        if (x <= -818323753292969962227)\n', '            return 0;\n', '\n', '        // Transform so that e^x -> 2^x\n', '        var (lower, upper) = pow2Bounds(x * int(ONE) / int(LN2));\n', '        return (upper - lower) / 2 + lower;\n', '    }\n', '\n', '    /// @dev Returns estimate of 2**x given x\n', '    /// @param x exponent in fixed point\n', '    /// @param estimationMode whether to return a lower bound, upper bound, or a midpoint\n', '    /// @return estimate of 2**x in fixed point\n', '    function pow2(int x, EstimationMode estimationMode)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        var (lower, upper) = pow2Bounds(x);\n', '        if(estimationMode == EstimationMode.LowerBound) {\n', '            return lower;\n', '        }\n', '        if(estimationMode == EstimationMode.UpperBound) {\n', '            return upper;\n', '        }\n', '        if(estimationMode == EstimationMode.Midpoint) {\n', '            return (upper - lower) / 2 + lower;\n', '        }\n', '        revert();\n', '    }\n', '\n', '    /// @dev Returns bounds for value of 2**x given x\n', '    /// @param x exponent in fixed point\n', '    /// @return {\n', '    ///   "lower": "lower bound of 2**x in fixed point",\n', '    ///   "upper": "upper bound of 2**x in fixed point"\n', '    /// }\n', '    function pow2Bounds(int x)\n', '        public\n', '        constant\n', '        returns (uint lower, uint upper)\n', '    {\n', '        // revert if x is > MAX_POWER, where\n', '        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE, 2) * ONE))\n', '        require(x <= 3541774862152233910271);\n', '        // return 0 if exp(x) is tiny, using\n', '        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE, 2) * ONE))\n', '        if (x < -1180591620717411303424)\n', '            return (0, 1);\n', '\n', '        // 2^x = 2^(floor(x)) * 2^(x-floor(x))\n', '        //       ^^^^^^^^^^^^^^ is a bit shift of ceil(x)\n', '        // so Taylor expand on z = x-floor(x), z in [0, 1)\n', '        int shift;\n', '        int z;\n', '        if (x >= 0) {\n', '            shift = x / int(ONE);\n', '            z = x % int(ONE);\n', '        }\n', '        else {\n', '            shift = (x+1) / int(ONE) - 1;\n', '            z = x - (int(ONE) * shift);\n', '        }\n', '        assert(z >= 0);\n', '        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...\n', '        //\n', '        // Can generate the z coefficients using mpmath and the following lines\n', '        // >>> from mpmath import mp\n', '        // >>> mp.dps = 100\n', '        // >>> coeffs = [mp.log(2)**i / mp.factorial(i) for i in range(1, 21)]\n', '        // >>> shifts = [64 - int(mp.log(c, 2)) for c in coeffs]\n', '        // >>> print(&#39;\\n&#39;.join(hex(int(c * (1 << s))) + &#39;, &#39; + str(s) for c, s in zip(coeffs, shifts)))\n', '        int result = int(ONE) << 64;\n', '        int zpow = z;\n', '        result += 0xb17217f7d1cf79ab * zpow;\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xf5fdeffc162c7543 * zpow >> (66 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xe35846b82505fc59 * zpow >> (68 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0x9d955b7dd273b94e * zpow >> (70 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xaec3ff3c53398883 * zpow >> (73 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xa184897c363c3b7a * zpow >> (76 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xffe5fe2c45863435 * zpow >> (80 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xb160111d2e411fec * zpow >> (83 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xda929e9caf3e1ed2 * zpow >> (87 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xf267a8ac5c764fb7 * zpow >> (91 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xf465639a8dd92607 * zpow >> (95 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xe1deb287e14c2f15 * zpow >> (99 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xc0b0c98b3687cb14 * zpow >> (103 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0x98a4b26ac3c54b9f * zpow >> (107 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xe1b7421d82010f33 * zpow >> (112 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0x9c744d73cfc59c91 * zpow >> (116 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        result += 0xcc2225a0e12d3eab * zpow >> (121 - 64);\n', '        zpow = zpow * z / int(ONE);\n', '        zpow = 0xfb8bb5eda1b4aeb9 * zpow >> (126 - 64);\n', '        result += zpow;\n', '        zpow = int(8 * ONE);\n', '\n', '        shift -= 64;\n', '        if (shift >= 0) {\n', '            if (result >> (256-shift) == 0) {\n', '                lower = uint(result) << shift;\n', '                zpow <<= shift; // todo: is this safe?\n', '                if (safeToAdd(lower, uint(zpow)))\n', '                    upper = lower + uint(zpow);\n', '                else\n', '                    upper = 2**256-1;\n', '                return;\n', '            }\n', '            else\n', '                return (2**256-1, 2**256-1);\n', '        }\n', '        zpow = (zpow >> (-shift)) + 1;\n', '        lower = uint(result) >> (-shift);\n', '        upper = lower + uint(zpow);\n', '        return;\n', '    }\n', '\n', '    /// @dev Returns natural logarithm value of given x\n', '    /// @param x x\n', '    /// @return ln(x)\n', '    function ln(uint x)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        var (lower, upper) = log2Bounds(x);\n', '        return ((upper - lower) / 2 + lower) * int(ONE) / int(LOG2_E);\n', '    }\n', '\n', '    /// @dev Returns estimate of log2(x) given x\n', '    /// @param x logarithm argument in fixed point\n', '    /// @param estimationMode whether to return a lower bound, upper bound, or a midpoint\n', '    /// @return estimate of log2(x) in fixed point\n', '    function log2(uint x, EstimationMode estimationMode)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        var (lower, upper) = log2Bounds(x);\n', '        if(estimationMode == EstimationMode.LowerBound) {\n', '            return lower;\n', '        }\n', '        if(estimationMode == EstimationMode.UpperBound) {\n', '            return upper;\n', '        }\n', '        if(estimationMode == EstimationMode.Midpoint) {\n', '            return (upper - lower) / 2 + lower;\n', '        }\n', '        revert();\n', '    }\n', '\n', '    /// @dev Returns bounds for value of log2(x) given x\n', '    /// @param x logarithm argument in fixed point\n', '    /// @return {\n', '    ///   "lower": "lower bound of log2(x) in fixed point",\n', '    ///   "upper": "upper bound of log2(x) in fixed point"\n', '    /// }\n', '    function log2Bounds(uint x)\n', '        public\n', '        constant\n', '        returns (int lower, int upper)\n', '    {\n', '        require(x > 0);\n', '        // compute ⌊log₂x⌋\n', '        lower = floorLog2(x);\n', '\n', '        uint y;\n', '        if (lower < 0)\n', '            y = x << uint(-lower);\n', '        else\n', '            y = x >> uint(lower);\n', '\n', '        lower *= int(ONE);\n', '\n', '        // y = x * 2^(-⌊log₂x⌋)\n', '        // so 1 <= y < 2\n', '        // and log₂x = ⌊log₂x⌋ + log₂y\n', '        for (int m = 1; m <= 64; m++) {\n', '            if(y == ONE) {\n', '                break;\n', '            }\n', '            y = y * y / ONE;\n', '            if(y >= 2 * ONE) {\n', '                lower += int(ONE >> m);\n', '                y /= 2;\n', '            }\n', '        }\n', '\n', '        return (lower, lower + 4);\n', '    }\n', '\n', '    /// @dev Returns base 2 logarithm value of given x\n', '    /// @param x x\n', '    /// @return logarithmic value\n', '    function floorLog2(uint x)\n', '        public\n', '        constant\n', '        returns (int lo)\n', '    {\n', '        lo = -64;\n', '        int hi = 193;\n', '        // I use a shift here instead of / 2 because it floors instead of rounding towards 0\n', '        int mid = (hi + lo) >> 1;\n', '        while((lo + 1) < hi) {\n', '            if (mid < 0 && x << uint(-mid) < ONE || mid >= 0 && x >> uint(mid) < ONE)\n', '                hi = mid;\n', '            else\n', '                lo = mid;\n', '            mid = (hi + lo) >> 1;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns maximum of an array\n', '    /// @param nums Numbers to look through\n', '    /// @return Maximum number\n', '    function max(int[] nums)\n', '        public\n', '        constant\n', '        returns (int max)\n', '    {\n', '        require(nums.length > 0);\n', '        max = -2**255;\n', '        for (uint i = 0; i < nums.length; i++)\n', '            if (nums[i] > max)\n', '                max = nums[i];\n', '    }\n', '\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a + b >= a;\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a >= b;\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return b == 0 || a * b / b == a;\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(int a, int b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return (b >= 0 && a + b >= a) || (b < 0 && a + b < a);\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(int a, int b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return (b >= 0 && a - b <= a) || (b < 0 && a - b > a);\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(int a, int b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return (b == 0) || (a * b / b == a);\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(int a, int b)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(int a, int b)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(int a, int b)\n', '        public\n', '        constant\n', '        returns (int)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '}']