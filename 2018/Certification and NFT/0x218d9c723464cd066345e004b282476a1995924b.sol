['pragma solidity 0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns(uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint a, uint b) internal pure returns(uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint a, uint b) internal pure returns(uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns(uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="81e5e4f5e4c1e0f9e8eeecfbe4efafe2ee">[email&#160;protected]</a>> (https://github.com/dete)\n', '\n', 'contract ERC721 {\n', '    // Required methods\n', '    function approve(address _to, uint _tokenId) public;\n', '    function balanceOf(address _owner) public view returns(uint balance);\n', '    function implementsERC721() public pure returns(bool);\n', '    function ownerOf(uint _tokenId) public view returns(address addr);\n', '    function takeOwnership(uint _tokenId) public;\n', '    function totalSupply() public view returns(uint total);\n', '    function transferFrom(address _from, address _to, uint _tokenId) public;\n', '    function transfer(address _to, uint _tokenId) public;\n', '\n', '    //event Transfer(uint tokenId, address indexed from, address indexed to);\n', '    event Approval(uint tokenId, address indexed owner, address indexed approved);\n', '    \n', '    // Optional\n', '    // function name() public view returns (string name);\n', '    // function symbol() public view returns (string symbol);\n', '    // function tokenOfOwnerByIndex(address _owner, uint _index) external view returns (uint tokenId);\n', '    // function tokenMetadata(uint _tokenId) public view returns (string infoUrl);\n', '}\n', 'contract CryptoCovfefes is ERC721 {\n', '    /*** CONSTANTS ***/\n', '    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant NAME = "CryptoCovfefes";\n', '    string public constant SYMBOL = "Covfefe Token";\n', '    \n', '    uint private constant startingPrice = 0.001 ether;\n', '    \n', '    uint private constant PROMO_CREATION_LIMIT = 5000;\n', '    uint private constant CONTRACT_CREATION_LIMIT = 45000;\n', '    uint private constant SaleCooldownTime = 12 hours;\n', '    \n', '    uint private randNonce = 0;\n', '    uint private constant duelVictoryProbability = 51;\n', '    uint private constant duelFee = .001 ether;\n', '    \n', '    uint private addMeaningFee = .001 ether;\n', '\n', '    /*** EVENTS ***/\n', '        /// @dev The Creation event is fired whenever a new Covfefe comes into existence.\n', '    event NewCovfefeCreated(uint tokenId, string term, string meaning, uint generation, address owner);\n', '    \n', '    /// @dev The Meaning added event is fired whenever a Covfefe is defined\n', '    event CovfefeMeaningAdded(uint tokenId, string term, string meaning);\n', '    \n', '    /// @dev The CovfefeSold event is fired whenever a token is bought and sold.\n', '    event CovfefeSold(uint tokenId, string term, string meaning, uint generation, uint sellingpPice, uint currentPrice, address buyer, address seller);\n', '    \n', '     /// @dev The Add Value To Covfefe event is fired whenever value is added to the Covfefe token\n', '    event AddedValueToCovfefe(uint tokenId, string term, string meaning, uint generation, uint currentPrice);\n', '    \n', '     /// @dev The Transfer Covfefe event is fired whenever a Covfefe token is transferred\n', '     event CovfefeTransferred(uint tokenId, address from, address to);\n', '     \n', '    /// @dev The ChallengerWinsCovfefeDuel event is fired whenever the Challenging Covfefe wins a duel\n', '    event ChallengerWinsCovfefeDuel(uint tokenIdChallenger, string termChallenger, uint tokenIdDefender, string termDefender);\n', '    \n', '    /// @dev The DefenderWinsCovfefeDuel event is fired whenever the Challenging Covfefe wins a duel\n', '    event DefenderWinsCovfefeDuel(uint tokenIdDefender, string termDefender, uint tokenIdChallenger, string termChallenger);\n', '\n', '    /*** STORAGE ***/\n', '    /// @dev A mapping from covfefe IDs to the address that owns them. All covfefes have\n', '    ///  some valid owner address.\n', '    mapping(uint => address) public covfefeIndexToOwner;\n', '    \n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping(address => uint) private ownershipTokenCount;\n', '    \n', '    /// @dev A mapping from CovfefeIDs to an address that has been approved to call\n', '    ///  transferFrom(). Each Covfefe can only have one approved address for transfer\n', '    ///  at any time. A zero value means no approval is outstanding.\n', '    mapping(uint => address) public covfefeIndexToApproved;\n', '    \n', '    // @dev A mapping from CovfefeIDs to the price of the token.\n', '    mapping(uint => uint) private covfefeIndexToPrice;\n', '    \n', '    // @dev A mapping from CovfefeIDs to the price of the token.\n', '    mapping(uint => uint) private covfefeIndexToLastPrice;\n', '    \n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public covmanAddress;\n', '    address public covmanagerAddress;\n', '    uint public promoCreatedCount;\n', '    uint public contractCreatedCount;\n', '    \n', '    /*** DATATYPES ***/\n', '    struct Covfefe {\n', '        string term;\n', '        string meaning;\n', '        uint16 generation;\n', '        uint16 winCount;\n', '        uint16 lossCount;\n', '        uint64 saleReadyTime;\n', '    }\n', '    \n', '    Covfefe[] private covfefes;\n', '    /*** ACCESS MODIFIERS ***/\n', '    /// @dev Access modifier for Covman-only functionality\n', '    modifier onlyCovman() {\n', '        require(msg.sender == covmanAddress);\n', '        _;\n', '    }\n', '    /// @dev Access modifier for Covmanager-only functionality\n', '    modifier onlyCovmanager() {\n', '        require(msg.sender == covmanagerAddress);\n', '        _;\n', '    }\n', '    /// Access modifier for contract owner only functionality\n', '    modifier onlyCovDwellers() {\n', '        require(msg.sender == covmanAddress || msg.sender == covmanagerAddress);\n', '        _;\n', '    }\n', '    \n', '    /*** CONSTRUCTOR ***/\n', '    function CryptoCovfefes() public {\n', '        covmanAddress = msg.sender;\n', '        covmanagerAddress = msg.sender;\n', '    }\n', '    /*** PUBLIC FUNCTIONS ***/\n', '    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(address _to, uint _tokenId) public {\n', '        // Caller must own token.\n', '        require(_owns(msg.sender, _tokenId));\n', '        covfefeIndexToApproved[_tokenId] = _to;\n', '        emit Approval(_tokenId, msg.sender, _to);\n', '    }\n', '    \n', '    /// For querying balance of a particular account\n', '    /// @param _owner The address for balance query\n', '    /// @dev Required for ERC-721 compliance.\n', '    function balanceOf(address _owner) public view returns(uint balance) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '    ///////////////////Create Covfefe///////////////////////////\n', '\n', '    /// @dev Creates a new promo Covfefe with the given term, with given _price and assignes it to an address.\n', '    function createPromoCovfefe(address _owner, string _term, string _meaning, uint16 _generation, uint _price) public onlyCovmanager {\n', '        require(promoCreatedCount < PROMO_CREATION_LIMIT);\n', '        address covfefeOwner = _owner;\n', '        if (covfefeOwner == address(0)) {\n', '            covfefeOwner = covmanagerAddress;\n', '        }\n', '        if (_price <= 0) {\n', '            _price = startingPrice;\n', '        }\n', '        promoCreatedCount++;\n', '        _createCovfefe(_term, _meaning, _generation, covfefeOwner, _price);\n', '    }\n', '    \n', '    /// @dev Creates a new Covfefe with the given term.\n', '    function createContractCovfefe(string _term, string _meaning, uint16 _generation) public onlyCovmanager {\n', '        require(contractCreatedCount < CONTRACT_CREATION_LIMIT);\n', '        contractCreatedCount++;\n', '        _createCovfefe(_term, _meaning, _generation, address(this), startingPrice);\n', '    }\n', '\n', '    function _triggerSaleCooldown(Covfefe storage _covfefe) internal {\n', '        _covfefe.saleReadyTime = uint64(now + SaleCooldownTime);\n', '    }\n', '\n', '    function _ripeForSale(Covfefe storage _covfefe) internal view returns(bool) {\n', '        return (_covfefe.saleReadyTime <= now);\n', '    }\n', '    /// @notice Returns all the relevant information about a specific covfefe.\n', '    /// @param _tokenId The tokenId of the covfefe of interest.\n', '    function getCovfefe(uint _tokenId) public view returns(string Term, string Meaning, uint Generation, uint ReadyTime, uint WinCount, uint LossCount, uint CurrentPrice, uint LastPrice, address Owner) {\n', '        Covfefe storage covfefe = covfefes[_tokenId];\n', '        Term = covfefe.term;\n', '        Meaning = covfefe.meaning;\n', '        Generation = covfefe.generation;\n', '        ReadyTime = covfefe.saleReadyTime;\n', '        WinCount = covfefe.winCount;\n', '        LossCount = covfefe.lossCount;\n', '        CurrentPrice = covfefeIndexToPrice[_tokenId];\n', '        LastPrice = covfefeIndexToLastPrice[_tokenId];\n', '        Owner = covfefeIndexToOwner[_tokenId];\n', '    }\n', '\n', '    function implementsERC721() public pure returns(bool) {\n', '        return true;\n', '    }\n', '    /// @dev Required for ERC-721 compliance.\n', '    function name() public pure returns(string) {\n', '        return NAME;\n', '    }\n', '    \n', '    /// For querying owner of token\n', '    /// @param _tokenId The tokenID for owner inquiry\n', '    /// @dev Required for ERC-721 compliance.\n', '    \n', '    function ownerOf(uint _tokenId)\n', '    public\n', '    view\n', '    returns(address owner) {\n', '        owner = covfefeIndexToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '    modifier onlyOwnerOf(uint _tokenId) {\n', '        require(msg.sender == covfefeIndexToOwner[_tokenId]);\n', '        _;\n', '    }\n', '    \n', '    ///////////////////Add Meaning /////////////////////\n', '    \n', '    function addMeaningToCovfefe(uint _tokenId, string _newMeaning) external payable onlyOwnerOf(_tokenId) {\n', '        \n', '        /// Making sure the transaction is not from another smart contract\n', '        require(!isContract(msg.sender));\n', '        \n', '        /// Making sure the addMeaningFee is included\n', '        require(msg.value == addMeaningFee);\n', '        \n', '        /// Add the new meaning\n', '        covfefes[_tokenId].meaning = _newMeaning;\n', '    \n', '        /// Emit the term meaning added event.\n', '        emit CovfefeMeaningAdded(_tokenId, covfefes[_tokenId].term, _newMeaning);\n', '    }\n', '\n', '    function payout(address _to) public onlyCovDwellers {\n', '        _payout(_to);\n', '    }\n', '    /////////////////Buy Token ////////////////////\n', '    \n', '    // Allows someone to send ether and obtain the token\n', '    function buyCovfefe(uint _tokenId) public payable {\n', '        address oldOwner = covfefeIndexToOwner[_tokenId];\n', '        address newOwner = msg.sender;\n', '        \n', '        // Making sure sale cooldown is not in effect\n', '        Covfefe storage myCovfefe = covfefes[_tokenId];\n', '        require(_ripeForSale(myCovfefe));\n', '        \n', '        // Making sure the transaction is not from another smart contract\n', '        require(!isContract(msg.sender));\n', '        \n', '        covfefeIndexToLastPrice[_tokenId] = covfefeIndexToPrice[_tokenId];\n', '        uint sellingPrice = covfefeIndexToPrice[_tokenId];\n', '        \n', '        // Making sure token owner is not sending to self\n', '        require(oldOwner != newOwner);\n', '        \n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_addressNotNull(newOwner));\n', '        \n', '        // Making sure sent amount is greater than or equal to the sellingPrice\n', '        require(msg.value >= sellingPrice);\n', '        uint payment = uint(SafeMath.div(SafeMath.mul(sellingPrice, 95), 100));\n', '        uint purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '        \n', '        // Update prices\n', '        covfefeIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 95);\n', '        _transfer(oldOwner, newOwner, _tokenId);\n', '        \n', '        ///Trigger Sale cooldown\n', '        _triggerSaleCooldown(myCovfefe);\n', '        \n', '        // Pay previous tokenOwner if owner is not contract\n', '        if (oldOwner != address(this)) {\n', '            oldOwner.transfer(payment); //(1-0.05)\n', '        }\n', '        \n', '        emit CovfefeSold(_tokenId, covfefes[_tokenId].term, covfefes[_tokenId].meaning, covfefes[_tokenId].generation, covfefeIndexToLastPrice[_tokenId], covfefeIndexToPrice[_tokenId], newOwner, oldOwner);\n', '        msg.sender.transfer(purchaseExcess);\n', '    }\n', '\n', '    function priceOf(uint _tokenId) public view returns(uint price) {\n', '        return covfefeIndexToPrice[_tokenId];\n', '    }\n', '\n', '    function lastPriceOf(uint _tokenId) public view returns(uint price) {\n', '        return covfefeIndexToLastPrice[_tokenId];\n', '    }\n', '    \n', '    /// @dev Assigns a new address to act as the Covman. Only available to the current Covman\n', '    /// @param _newCovman The address of the new Covman\n', '    function setCovman(address _newCovman) public onlyCovman {\n', '        require(_newCovman != address(0));\n', '        covmanAddress = _newCovman;\n', '    }\n', '    \n', '    /// @dev Assigns a new address to act as the Covmanager. Only available to the current Covman\n', '    /// @param _newCovmanager The address of the new Covmanager\n', '    function setCovmanager(address _newCovmanager) public onlyCovman {\n', '        require(_newCovmanager != address(0));\n', '        covmanagerAddress = _newCovmanager;\n', '    }\n', '    \n', '    /// @dev Required for ERC-721 compliance.\n', '    function symbol() public pure returns(string) {\n', '        return SYMBOL;\n', '    }\n', '    \n', '    /// @notice Allow pre-approved user to take ownership of a token\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function takeOwnership(uint _tokenId) public {\n', '        address newOwner = msg.sender;\n', '        address oldOwner = covfefeIndexToOwner[_tokenId];\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_addressNotNull(newOwner));\n', '        // Making sure transfer is approved\n', '        require(_approved(newOwner, _tokenId));\n', '        _transfer(oldOwner, newOwner, _tokenId);\n', '    }\n', '    \n', '    ///////////////////Add Value to Covfefe/////////////////////////////\n', '    //////////////There&#39;s no fee for adding value//////////////////////\n', '\n', '    function addValueToCovfefe(uint _tokenId) external payable onlyOwnerOf(_tokenId) {\n', '        \n', '        // Making sure the transaction is not from another smart contract\n', '        require(!isContract(msg.sender));\n', '        \n', '        //Making sure amount is within the min and max range\n', '        require(msg.value >= 0.001 ether);\n', '        require(msg.value <= 9999.000 ether);\n', '        \n', '        //Keeping a record of lastprice before updating price\n', '        covfefeIndexToLastPrice[_tokenId] = covfefeIndexToPrice[_tokenId];\n', '        \n', '        uint newValue = msg.value;\n', '\n', '        // Update prices\n', '        newValue = SafeMath.div(SafeMath.mul(newValue, 115), 100);\n', '        covfefeIndexToPrice[_tokenId] = SafeMath.add(newValue, covfefeIndexToPrice[_tokenId]);\n', '        \n', '        ///Emit the AddValueToCovfefe event\n', '        emit AddedValueToCovfefe(_tokenId, covfefes[_tokenId].term, covfefes[_tokenId].meaning, covfefes[_tokenId].generation, covfefeIndexToPrice[_tokenId]);\n', '    }\n', '    \n', '    /// @param _owner The owner whose covfefe tokens we are interested in.\n', '    /// @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '    ///  expensive (it walks the entire Covfefes array looking for covfefes belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    \n', '    function getTokensOfOwner(address _owner) external view returns(uint[] ownerTokens) {\n', '        uint tokenCount = balanceOf(_owner);\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint[](0);\n', '        } else {\n', '            uint[] memory result = new uint[](tokenCount);\n', '            uint totalCovfefes = totalSupply();\n', '            uint resultIndex = 0;\n', '            uint covfefeId;\n', '            for (covfefeId = 0; covfefeId <= totalCovfefes; covfefeId++) {\n', '                if (covfefeIndexToOwner[covfefeId] == _owner) {\n', '                    result[resultIndex] = covfefeId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '            return result;\n', '        }\n', '    }\n', '    \n', '    /// For querying totalSupply of token\n', '    /// @dev Required for ERC-721 compliance.\n', '    function totalSupply() public view returns(uint total) {\n', '        return covfefes.length;\n', '    }\n', '    /// Owner initates the transfer of the token to another account\n', '    /// @param _to The address for the token to be transferred to.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(address _to, uint _tokenId) public {\n', '        require(_owns(msg.sender, _tokenId));\n', '        require(_addressNotNull(_to));\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '    /// Third-party initiates transfer of token from address _from to address _to\n', '    /// @param _from The address for the token to be transferred from.\n', '    /// @param _to The address for the token to be transferred to.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transferFrom(address _from, address _to, uint _tokenId) public {\n', '        require(_owns(_from, _tokenId));\n', '        require(_approved(_to, _tokenId));\n', '        require(_addressNotNull(_to));\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '    /*** PRIVATE FUNCTIONS ***/\n', '    /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '    function _addressNotNull(address _to) private pure returns(bool) {\n', '        return _to != address(0);\n', '    }\n', '    /// For checking approval of transfer for address _to\n', '    function _approved(address _to, uint _tokenId) private view returns(bool) {\n', '        return covfefeIndexToApproved[_tokenId] == _to;\n', '    }\n', '    \n', '    /////////////Covfefe Creation////////////\n', '    \n', '    function _createCovfefe(string _term, string _meaning, uint16 _generation, address _owner, uint _price) private {\n', '        Covfefe memory _covfefe = Covfefe({\n', '            term: _term,\n', '            meaning: _meaning,\n', '            generation: _generation,\n', '            saleReadyTime: uint64(now),\n', '            winCount: 0,\n', '            lossCount: 0\n', '        });\n', '        \n', '        uint newCovfefeId = covfefes.push(_covfefe) - 1;\n', '        // It&#39;s probably never going to happen, 4 billion tokens are A LOT, but\n', '        // let&#39;s just be 100% sure we never let this happen.\n', '        require(newCovfefeId == uint(uint32(newCovfefeId)));\n', '        \n', '        //Emit the Covfefe creation event\n', '        emit NewCovfefeCreated(newCovfefeId, _term, _meaning, _generation, _owner);\n', '        \n', '        covfefeIndexToPrice[newCovfefeId] = _price;\n', '        \n', '        // This will assign ownership, and also emit the Transfer event as\n', '        // per ERC721 draft\n', '        _transfer(address(0), _owner, newCovfefeId);\n', '    }\n', '    \n', '    /// Check for token ownership\n', '    function _owns(address claimant, uint _tokenId) private view returns(bool) {\n', '        return claimant == covfefeIndexToOwner[_tokenId];\n', '    }\n', '    \n', '    /// For paying out balance on contract\n', '    function _payout(address _to) private {\n', '        if (_to == address(0)) {\n', '            covmanAddress.transfer(address(this).balance);\n', '        } else {\n', '            _to.transfer(address(this).balance);\n', '        }\n', '    }\n', '    \n', '    /////////////////////Transfer//////////////////////\n', '    /// @dev Transfer event as defined in current draft of ERC721. \n', '    ///  ownership is assigned, including births.\n', '    \n', '    /// @dev Assigns ownership of a specific Covfefe to an address.\n', '    function _transfer(address _from, address _to, uint _tokenId) private {\n', '        // Since the number of covfefes is capped to 2^32 we can&#39;t overflow this\n', '        ownershipTokenCount[_to]++;\n', '        //transfer ownership\n', '        covfefeIndexToOwner[_tokenId] = _to;\n', '        // When creating new covfefes _from is 0x0, but we can&#39;t account that address.\n', '        if (_from != address(0)) {\n', '            ownershipTokenCount[_from]--;\n', '            // clear any previously approved ownership exchange\n', '            delete covfefeIndexToApproved[_tokenId];\n', '        }\n', '        // Emit the transfer event.\n', '        emit CovfefeTransferred(_tokenId, _from, _to);\n', '    }\n', '    \n', '    ///////////////////Covfefe Duel System//////////////////////\n', '    \n', '    //Simple Randomizer for the covfefe duelling system\n', '    function randMod(uint _modulus) internal returns(uint) {\n', '        randNonce++;\n', '        return uint(keccak256(now, msg.sender, randNonce)) % _modulus;\n', '    }\n', '    \n', '    function duelAnotherCovfefe(uint _tokenId, uint _targetId) external payable onlyOwnerOf(_tokenId) {\n', '        //Load the covfefes from storage\n', '        Covfefe storage myCovfefe = covfefes[_tokenId];\n', '        \n', '        // Making sure the transaction is not from another smart contract\n', '        require(!isContract(msg.sender));\n', '        \n', '        //Making sure the duelling fee is included\n', '        require(msg.value == duelFee);\n', '        \n', '        //\n', '        Covfefe storage enemyCovfefe = covfefes[_targetId];\n', '        uint rand = randMod(100);\n', '        \n', '        if (rand <= duelVictoryProbability) {\n', '            myCovfefe.winCount++;\n', '            enemyCovfefe.lossCount++;\n', '        \n', '        ///Emit the ChallengerWins event\n', '            emit ChallengerWinsCovfefeDuel(_tokenId, covfefes[_tokenId].term, _targetId, covfefes[_targetId].term);\n', '            \n', '        } else {\n', '        \n', '            myCovfefe.lossCount++;\n', '            enemyCovfefe.winCount++;\n', '        \n', '            ///Emit the DefenderWins event\n', '            emit DefenderWinsCovfefeDuel(_targetId, covfefes[_targetId].term, _tokenId, covfefes[_tokenId].term);\n', '        }\n', '    }\n', '    \n', '    ////////////////// Utility //////////////////\n', '    \n', '    function isContract(address addr) internal view returns(bool) {\n', '        uint size;\n', '        assembly {\n', '            size: = extcodesize(addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '}']
['pragma solidity 0.4.21;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns(uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint a, uint b) internal pure returns(uint) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint a, uint b) internal pure returns(uint) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns(uint) {\n', '        uint c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\n', '/// @author Dieter Shirley <dete@axiomzen.co> (https://github.com/dete)\n', '\n', 'contract ERC721 {\n', '    // Required methods\n', '    function approve(address _to, uint _tokenId) public;\n', '    function balanceOf(address _owner) public view returns(uint balance);\n', '    function implementsERC721() public pure returns(bool);\n', '    function ownerOf(uint _tokenId) public view returns(address addr);\n', '    function takeOwnership(uint _tokenId) public;\n', '    function totalSupply() public view returns(uint total);\n', '    function transferFrom(address _from, address _to, uint _tokenId) public;\n', '    function transfer(address _to, uint _tokenId) public;\n', '\n', '    //event Transfer(uint tokenId, address indexed from, address indexed to);\n', '    event Approval(uint tokenId, address indexed owner, address indexed approved);\n', '    \n', '    // Optional\n', '    // function name() public view returns (string name);\n', '    // function symbol() public view returns (string symbol);\n', '    // function tokenOfOwnerByIndex(address _owner, uint _index) external view returns (uint tokenId);\n', '    // function tokenMetadata(uint _tokenId) public view returns (string infoUrl);\n', '}\n', 'contract CryptoCovfefes is ERC721 {\n', '    /*** CONSTANTS ***/\n', '    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\n', '    string public constant NAME = "CryptoCovfefes";\n', '    string public constant SYMBOL = "Covfefe Token";\n', '    \n', '    uint private constant startingPrice = 0.001 ether;\n', '    \n', '    uint private constant PROMO_CREATION_LIMIT = 5000;\n', '    uint private constant CONTRACT_CREATION_LIMIT = 45000;\n', '    uint private constant SaleCooldownTime = 12 hours;\n', '    \n', '    uint private randNonce = 0;\n', '    uint private constant duelVictoryProbability = 51;\n', '    uint private constant duelFee = .001 ether;\n', '    \n', '    uint private addMeaningFee = .001 ether;\n', '\n', '    /*** EVENTS ***/\n', '        /// @dev The Creation event is fired whenever a new Covfefe comes into existence.\n', '    event NewCovfefeCreated(uint tokenId, string term, string meaning, uint generation, address owner);\n', '    \n', '    /// @dev The Meaning added event is fired whenever a Covfefe is defined\n', '    event CovfefeMeaningAdded(uint tokenId, string term, string meaning);\n', '    \n', '    /// @dev The CovfefeSold event is fired whenever a token is bought and sold.\n', '    event CovfefeSold(uint tokenId, string term, string meaning, uint generation, uint sellingpPice, uint currentPrice, address buyer, address seller);\n', '    \n', '     /// @dev The Add Value To Covfefe event is fired whenever value is added to the Covfefe token\n', '    event AddedValueToCovfefe(uint tokenId, string term, string meaning, uint generation, uint currentPrice);\n', '    \n', '     /// @dev The Transfer Covfefe event is fired whenever a Covfefe token is transferred\n', '     event CovfefeTransferred(uint tokenId, address from, address to);\n', '     \n', '    /// @dev The ChallengerWinsCovfefeDuel event is fired whenever the Challenging Covfefe wins a duel\n', '    event ChallengerWinsCovfefeDuel(uint tokenIdChallenger, string termChallenger, uint tokenIdDefender, string termDefender);\n', '    \n', '    /// @dev The DefenderWinsCovfefeDuel event is fired whenever the Challenging Covfefe wins a duel\n', '    event DefenderWinsCovfefeDuel(uint tokenIdDefender, string termDefender, uint tokenIdChallenger, string termChallenger);\n', '\n', '    /*** STORAGE ***/\n', '    /// @dev A mapping from covfefe IDs to the address that owns them. All covfefes have\n', '    ///  some valid owner address.\n', '    mapping(uint => address) public covfefeIndexToOwner;\n', '    \n', '    // @dev A mapping from owner address to count of tokens that address owns.\n', '    //  Used internally inside balanceOf() to resolve ownership count.\n', '    mapping(address => uint) private ownershipTokenCount;\n', '    \n', '    /// @dev A mapping from CovfefeIDs to an address that has been approved to call\n', '    ///  transferFrom(). Each Covfefe can only have one approved address for transfer\n', '    ///  at any time. A zero value means no approval is outstanding.\n', '    mapping(uint => address) public covfefeIndexToApproved;\n', '    \n', '    // @dev A mapping from CovfefeIDs to the price of the token.\n', '    mapping(uint => uint) private covfefeIndexToPrice;\n', '    \n', '    // @dev A mapping from CovfefeIDs to the price of the token.\n', '    mapping(uint => uint) private covfefeIndexToLastPrice;\n', '    \n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public covmanAddress;\n', '    address public covmanagerAddress;\n', '    uint public promoCreatedCount;\n', '    uint public contractCreatedCount;\n', '    \n', '    /*** DATATYPES ***/\n', '    struct Covfefe {\n', '        string term;\n', '        string meaning;\n', '        uint16 generation;\n', '        uint16 winCount;\n', '        uint16 lossCount;\n', '        uint64 saleReadyTime;\n', '    }\n', '    \n', '    Covfefe[] private covfefes;\n', '    /*** ACCESS MODIFIERS ***/\n', '    /// @dev Access modifier for Covman-only functionality\n', '    modifier onlyCovman() {\n', '        require(msg.sender == covmanAddress);\n', '        _;\n', '    }\n', '    /// @dev Access modifier for Covmanager-only functionality\n', '    modifier onlyCovmanager() {\n', '        require(msg.sender == covmanagerAddress);\n', '        _;\n', '    }\n', '    /// Access modifier for contract owner only functionality\n', '    modifier onlyCovDwellers() {\n', '        require(msg.sender == covmanAddress || msg.sender == covmanagerAddress);\n', '        _;\n', '    }\n', '    \n', '    /*** CONSTRUCTOR ***/\n', '    function CryptoCovfefes() public {\n', '        covmanAddress = msg.sender;\n', '        covmanagerAddress = msg.sender;\n', '    }\n', '    /*** PUBLIC FUNCTIONS ***/\n', '    /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\n', '    /// @param _to The address to be granted transfer approval. Pass address(0) to\n', '    ///  clear all approvals.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(address _to, uint _tokenId) public {\n', '        // Caller must own token.\n', '        require(_owns(msg.sender, _tokenId));\n', '        covfefeIndexToApproved[_tokenId] = _to;\n', '        emit Approval(_tokenId, msg.sender, _to);\n', '    }\n', '    \n', '    /// For querying balance of a particular account\n', '    /// @param _owner The address for balance query\n', '    /// @dev Required for ERC-721 compliance.\n', '    function balanceOf(address _owner) public view returns(uint balance) {\n', '        return ownershipTokenCount[_owner];\n', '    }\n', '    ///////////////////Create Covfefe///////////////////////////\n', '\n', '    /// @dev Creates a new promo Covfefe with the given term, with given _price and assignes it to an address.\n', '    function createPromoCovfefe(address _owner, string _term, string _meaning, uint16 _generation, uint _price) public onlyCovmanager {\n', '        require(promoCreatedCount < PROMO_CREATION_LIMIT);\n', '        address covfefeOwner = _owner;\n', '        if (covfefeOwner == address(0)) {\n', '            covfefeOwner = covmanagerAddress;\n', '        }\n', '        if (_price <= 0) {\n', '            _price = startingPrice;\n', '        }\n', '        promoCreatedCount++;\n', '        _createCovfefe(_term, _meaning, _generation, covfefeOwner, _price);\n', '    }\n', '    \n', '    /// @dev Creates a new Covfefe with the given term.\n', '    function createContractCovfefe(string _term, string _meaning, uint16 _generation) public onlyCovmanager {\n', '        require(contractCreatedCount < CONTRACT_CREATION_LIMIT);\n', '        contractCreatedCount++;\n', '        _createCovfefe(_term, _meaning, _generation, address(this), startingPrice);\n', '    }\n', '\n', '    function _triggerSaleCooldown(Covfefe storage _covfefe) internal {\n', '        _covfefe.saleReadyTime = uint64(now + SaleCooldownTime);\n', '    }\n', '\n', '    function _ripeForSale(Covfefe storage _covfefe) internal view returns(bool) {\n', '        return (_covfefe.saleReadyTime <= now);\n', '    }\n', '    /// @notice Returns all the relevant information about a specific covfefe.\n', '    /// @param _tokenId The tokenId of the covfefe of interest.\n', '    function getCovfefe(uint _tokenId) public view returns(string Term, string Meaning, uint Generation, uint ReadyTime, uint WinCount, uint LossCount, uint CurrentPrice, uint LastPrice, address Owner) {\n', '        Covfefe storage covfefe = covfefes[_tokenId];\n', '        Term = covfefe.term;\n', '        Meaning = covfefe.meaning;\n', '        Generation = covfefe.generation;\n', '        ReadyTime = covfefe.saleReadyTime;\n', '        WinCount = covfefe.winCount;\n', '        LossCount = covfefe.lossCount;\n', '        CurrentPrice = covfefeIndexToPrice[_tokenId];\n', '        LastPrice = covfefeIndexToLastPrice[_tokenId];\n', '        Owner = covfefeIndexToOwner[_tokenId];\n', '    }\n', '\n', '    function implementsERC721() public pure returns(bool) {\n', '        return true;\n', '    }\n', '    /// @dev Required for ERC-721 compliance.\n', '    function name() public pure returns(string) {\n', '        return NAME;\n', '    }\n', '    \n', '    /// For querying owner of token\n', '    /// @param _tokenId The tokenID for owner inquiry\n', '    /// @dev Required for ERC-721 compliance.\n', '    \n', '    function ownerOf(uint _tokenId)\n', '    public\n', '    view\n', '    returns(address owner) {\n', '        owner = covfefeIndexToOwner[_tokenId];\n', '        require(owner != address(0));\n', '    }\n', '    modifier onlyOwnerOf(uint _tokenId) {\n', '        require(msg.sender == covfefeIndexToOwner[_tokenId]);\n', '        _;\n', '    }\n', '    \n', '    ///////////////////Add Meaning /////////////////////\n', '    \n', '    function addMeaningToCovfefe(uint _tokenId, string _newMeaning) external payable onlyOwnerOf(_tokenId) {\n', '        \n', '        /// Making sure the transaction is not from another smart contract\n', '        require(!isContract(msg.sender));\n', '        \n', '        /// Making sure the addMeaningFee is included\n', '        require(msg.value == addMeaningFee);\n', '        \n', '        /// Add the new meaning\n', '        covfefes[_tokenId].meaning = _newMeaning;\n', '    \n', '        /// Emit the term meaning added event.\n', '        emit CovfefeMeaningAdded(_tokenId, covfefes[_tokenId].term, _newMeaning);\n', '    }\n', '\n', '    function payout(address _to) public onlyCovDwellers {\n', '        _payout(_to);\n', '    }\n', '    /////////////////Buy Token ////////////////////\n', '    \n', '    // Allows someone to send ether and obtain the token\n', '    function buyCovfefe(uint _tokenId) public payable {\n', '        address oldOwner = covfefeIndexToOwner[_tokenId];\n', '        address newOwner = msg.sender;\n', '        \n', '        // Making sure sale cooldown is not in effect\n', '        Covfefe storage myCovfefe = covfefes[_tokenId];\n', '        require(_ripeForSale(myCovfefe));\n', '        \n', '        // Making sure the transaction is not from another smart contract\n', '        require(!isContract(msg.sender));\n', '        \n', '        covfefeIndexToLastPrice[_tokenId] = covfefeIndexToPrice[_tokenId];\n', '        uint sellingPrice = covfefeIndexToPrice[_tokenId];\n', '        \n', '        // Making sure token owner is not sending to self\n', '        require(oldOwner != newOwner);\n', '        \n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_addressNotNull(newOwner));\n', '        \n', '        // Making sure sent amount is greater than or equal to the sellingPrice\n', '        require(msg.value >= sellingPrice);\n', '        uint payment = uint(SafeMath.div(SafeMath.mul(sellingPrice, 95), 100));\n', '        uint purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\n', '        \n', '        // Update prices\n', '        covfefeIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 95);\n', '        _transfer(oldOwner, newOwner, _tokenId);\n', '        \n', '        ///Trigger Sale cooldown\n', '        _triggerSaleCooldown(myCovfefe);\n', '        \n', '        // Pay previous tokenOwner if owner is not contract\n', '        if (oldOwner != address(this)) {\n', '            oldOwner.transfer(payment); //(1-0.05)\n', '        }\n', '        \n', '        emit CovfefeSold(_tokenId, covfefes[_tokenId].term, covfefes[_tokenId].meaning, covfefes[_tokenId].generation, covfefeIndexToLastPrice[_tokenId], covfefeIndexToPrice[_tokenId], newOwner, oldOwner);\n', '        msg.sender.transfer(purchaseExcess);\n', '    }\n', '\n', '    function priceOf(uint _tokenId) public view returns(uint price) {\n', '        return covfefeIndexToPrice[_tokenId];\n', '    }\n', '\n', '    function lastPriceOf(uint _tokenId) public view returns(uint price) {\n', '        return covfefeIndexToLastPrice[_tokenId];\n', '    }\n', '    \n', '    /// @dev Assigns a new address to act as the Covman. Only available to the current Covman\n', '    /// @param _newCovman The address of the new Covman\n', '    function setCovman(address _newCovman) public onlyCovman {\n', '        require(_newCovman != address(0));\n', '        covmanAddress = _newCovman;\n', '    }\n', '    \n', '    /// @dev Assigns a new address to act as the Covmanager. Only available to the current Covman\n', '    /// @param _newCovmanager The address of the new Covmanager\n', '    function setCovmanager(address _newCovmanager) public onlyCovman {\n', '        require(_newCovmanager != address(0));\n', '        covmanagerAddress = _newCovmanager;\n', '    }\n', '    \n', '    /// @dev Required for ERC-721 compliance.\n', '    function symbol() public pure returns(string) {\n', '        return SYMBOL;\n', '    }\n', '    \n', '    /// @notice Allow pre-approved user to take ownership of a token\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function takeOwnership(uint _tokenId) public {\n', '        address newOwner = msg.sender;\n', '        address oldOwner = covfefeIndexToOwner[_tokenId];\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_addressNotNull(newOwner));\n', '        // Making sure transfer is approved\n', '        require(_approved(newOwner, _tokenId));\n', '        _transfer(oldOwner, newOwner, _tokenId);\n', '    }\n', '    \n', '    ///////////////////Add Value to Covfefe/////////////////////////////\n', "    //////////////There's no fee for adding value//////////////////////\n", '\n', '    function addValueToCovfefe(uint _tokenId) external payable onlyOwnerOf(_tokenId) {\n', '        \n', '        // Making sure the transaction is not from another smart contract\n', '        require(!isContract(msg.sender));\n', '        \n', '        //Making sure amount is within the min and max range\n', '        require(msg.value >= 0.001 ether);\n', '        require(msg.value <= 9999.000 ether);\n', '        \n', '        //Keeping a record of lastprice before updating price\n', '        covfefeIndexToLastPrice[_tokenId] = covfefeIndexToPrice[_tokenId];\n', '        \n', '        uint newValue = msg.value;\n', '\n', '        // Update prices\n', '        newValue = SafeMath.div(SafeMath.mul(newValue, 115), 100);\n', '        covfefeIndexToPrice[_tokenId] = SafeMath.add(newValue, covfefeIndexToPrice[_tokenId]);\n', '        \n', '        ///Emit the AddValueToCovfefe event\n', '        emit AddedValueToCovfefe(_tokenId, covfefes[_tokenId].term, covfefes[_tokenId].meaning, covfefes[_tokenId].generation, covfefeIndexToPrice[_tokenId]);\n', '    }\n', '    \n', '    /// @param _owner The owner whose covfefe tokens we are interested in.\n', "    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '    ///  expensive (it walks the entire Covfefes array looking for covfefes belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    \n', '    function getTokensOfOwner(address _owner) external view returns(uint[] ownerTokens) {\n', '        uint tokenCount = balanceOf(_owner);\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint[](0);\n', '        } else {\n', '            uint[] memory result = new uint[](tokenCount);\n', '            uint totalCovfefes = totalSupply();\n', '            uint resultIndex = 0;\n', '            uint covfefeId;\n', '            for (covfefeId = 0; covfefeId <= totalCovfefes; covfefeId++) {\n', '                if (covfefeIndexToOwner[covfefeId] == _owner) {\n', '                    result[resultIndex] = covfefeId;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '            return result;\n', '        }\n', '    }\n', '    \n', '    /// For querying totalSupply of token\n', '    /// @dev Required for ERC-721 compliance.\n', '    function totalSupply() public view returns(uint total) {\n', '        return covfefes.length;\n', '    }\n', '    /// Owner initates the transfer of the token to another account\n', '    /// @param _to The address for the token to be transferred to.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(address _to, uint _tokenId) public {\n', '        require(_owns(msg.sender, _tokenId));\n', '        require(_addressNotNull(_to));\n', '        _transfer(msg.sender, _to, _tokenId);\n', '    }\n', '    /// Third-party initiates transfer of token from address _from to address _to\n', '    /// @param _from The address for the token to be transferred from.\n', '    /// @param _to The address for the token to be transferred to.\n', '    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transferFrom(address _from, address _to, uint _tokenId) public {\n', '        require(_owns(_from, _tokenId));\n', '        require(_approved(_to, _tokenId));\n', '        require(_addressNotNull(_to));\n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '    /*** PRIVATE FUNCTIONS ***/\n', '    /// Safety check on _to address to prevent against an unexpected 0x0 default.\n', '    function _addressNotNull(address _to) private pure returns(bool) {\n', '        return _to != address(0);\n', '    }\n', '    /// For checking approval of transfer for address _to\n', '    function _approved(address _to, uint _tokenId) private view returns(bool) {\n', '        return covfefeIndexToApproved[_tokenId] == _to;\n', '    }\n', '    \n', '    /////////////Covfefe Creation////////////\n', '    \n', '    function _createCovfefe(string _term, string _meaning, uint16 _generation, address _owner, uint _price) private {\n', '        Covfefe memory _covfefe = Covfefe({\n', '            term: _term,\n', '            meaning: _meaning,\n', '            generation: _generation,\n', '            saleReadyTime: uint64(now),\n', '            winCount: 0,\n', '            lossCount: 0\n', '        });\n', '        \n', '        uint newCovfefeId = covfefes.push(_covfefe) - 1;\n', "        // It's probably never going to happen, 4 billion tokens are A LOT, but\n", "        // let's just be 100% sure we never let this happen.\n", '        require(newCovfefeId == uint(uint32(newCovfefeId)));\n', '        \n', '        //Emit the Covfefe creation event\n', '        emit NewCovfefeCreated(newCovfefeId, _term, _meaning, _generation, _owner);\n', '        \n', '        covfefeIndexToPrice[newCovfefeId] = _price;\n', '        \n', '        // This will assign ownership, and also emit the Transfer event as\n', '        // per ERC721 draft\n', '        _transfer(address(0), _owner, newCovfefeId);\n', '    }\n', '    \n', '    /// Check for token ownership\n', '    function _owns(address claimant, uint _tokenId) private view returns(bool) {\n', '        return claimant == covfefeIndexToOwner[_tokenId];\n', '    }\n', '    \n', '    /// For paying out balance on contract\n', '    function _payout(address _to) private {\n', '        if (_to == address(0)) {\n', '            covmanAddress.transfer(address(this).balance);\n', '        } else {\n', '            _to.transfer(address(this).balance);\n', '        }\n', '    }\n', '    \n', '    /////////////////////Transfer//////////////////////\n', '    /// @dev Transfer event as defined in current draft of ERC721. \n', '    ///  ownership is assigned, including births.\n', '    \n', '    /// @dev Assigns ownership of a specific Covfefe to an address.\n', '    function _transfer(address _from, address _to, uint _tokenId) private {\n', "        // Since the number of covfefes is capped to 2^32 we can't overflow this\n", '        ownershipTokenCount[_to]++;\n', '        //transfer ownership\n', '        covfefeIndexToOwner[_tokenId] = _to;\n', "        // When creating new covfefes _from is 0x0, but we can't account that address.\n", '        if (_from != address(0)) {\n', '            ownershipTokenCount[_from]--;\n', '            // clear any previously approved ownership exchange\n', '            delete covfefeIndexToApproved[_tokenId];\n', '        }\n', '        // Emit the transfer event.\n', '        emit CovfefeTransferred(_tokenId, _from, _to);\n', '    }\n', '    \n', '    ///////////////////Covfefe Duel System//////////////////////\n', '    \n', '    //Simple Randomizer for the covfefe duelling system\n', '    function randMod(uint _modulus) internal returns(uint) {\n', '        randNonce++;\n', '        return uint(keccak256(now, msg.sender, randNonce)) % _modulus;\n', '    }\n', '    \n', '    function duelAnotherCovfefe(uint _tokenId, uint _targetId) external payable onlyOwnerOf(_tokenId) {\n', '        //Load the covfefes from storage\n', '        Covfefe storage myCovfefe = covfefes[_tokenId];\n', '        \n', '        // Making sure the transaction is not from another smart contract\n', '        require(!isContract(msg.sender));\n', '        \n', '        //Making sure the duelling fee is included\n', '        require(msg.value == duelFee);\n', '        \n', '        //\n', '        Covfefe storage enemyCovfefe = covfefes[_targetId];\n', '        uint rand = randMod(100);\n', '        \n', '        if (rand <= duelVictoryProbability) {\n', '            myCovfefe.winCount++;\n', '            enemyCovfefe.lossCount++;\n', '        \n', '        ///Emit the ChallengerWins event\n', '            emit ChallengerWinsCovfefeDuel(_tokenId, covfefes[_tokenId].term, _targetId, covfefes[_targetId].term);\n', '            \n', '        } else {\n', '        \n', '            myCovfefe.lossCount++;\n', '            enemyCovfefe.winCount++;\n', '        \n', '            ///Emit the DefenderWins event\n', '            emit DefenderWinsCovfefeDuel(_targetId, covfefes[_targetId].term, _tokenId, covfefes[_tokenId].term);\n', '        }\n', '    }\n', '    \n', '    ////////////////// Utility //////////////////\n', '    \n', '    function isContract(address addr) internal view returns(bool) {\n', '        uint size;\n', '        assembly {\n', '            size: = extcodesize(addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '}']
