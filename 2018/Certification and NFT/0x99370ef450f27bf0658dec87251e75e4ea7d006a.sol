['// File: contracts/core/platform/ChronoBankAssetInterface.sol\n', '\n', '/**\n', ' * Copyright 2017–2018, LaborX PTY\n', ' * Licensed under the AGPL Version 3 license.\n', ' */\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', 'contract ChronoBankAssetInterface {\n', '    function __transferWithReference(address _to, uint _value, string _reference, address _sender) public returns (bool);\n', '    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns (bool);\n', '    function __approve(address _spender, uint _value, address _sender) public returns(bool);\n', '    function __process(bytes /*_data*/, address /*_sender*/) public payable {\n', '        revert();\n', '    }\n', '}\n', '\n', '// File: contracts/core/platform/ChronoBankAssetProxyInterface.sol\n', '\n', '/**\n', ' * Copyright 2017–2018, LaborX PTY\n', ' * Licensed under the AGPL Version 3 license.\n', ' */\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', 'contract ChronoBankAssetProxyInterface {\n', '    address public chronoBankPlatform;\n', '    bytes32 public smbl;\n', '    function __transferWithReference(address _to, uint _value, string _reference, address _sender) public returns (bool);\n', '    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns (bool);\n', '    function __approve(address _spender, uint _value, address _sender) public returns (bool);\n', '    function getLatestVersion() public view returns (address);\n', '    function init(address _chronoBankPlatform, string _symbol, string _name) public;\n', '    function proposeUpgrade(address _newVersion) external returns (bool);\n', '}\n', '\n', '// File: contracts/core/platform/ChronoBankPlatformInterface.sol\n', '\n', '/**\n', ' * Copyright 2017–2018, LaborX PTY\n', ' * Licensed under the AGPL Version 3 license.\n', ' */\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', 'contract ChronoBankPlatformInterface {\n', '    mapping(bytes32 => address) public proxies;\n', '\n', '    function symbols(uint _idx) public view returns (bytes32);\n', '    function symbolsCount() public view returns (uint);\n', '    function isCreated(bytes32 _symbol) public view returns(bool);\n', '    function isOwner(address _owner, bytes32 _symbol) public view returns(bool);\n', '    function owner(bytes32 _symbol) public view returns(address);\n', '\n', '    function setProxy(address _address, bytes32 _symbol) public returns(uint errorCode);\n', '\n', '    function name(bytes32 _symbol) public view returns(string);\n', '\n', '    function totalSupply(bytes32 _symbol) public view returns(uint);\n', '    function balanceOf(address _holder, bytes32 _symbol) public view returns(uint);\n', '    function allowance(address _from, address _spender, bytes32 _symbol) public view returns(uint);\n', '    function baseUnit(bytes32 _symbol) public view returns(uint8);\n', '    function description(bytes32 _symbol) public view returns(string);\n', '    function isReissuable(bytes32 _symbol) public view returns(bool);\n', '\n', '    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\n', '    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\n', '\n', '    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) public returns(uint errorCode);\n', '\n', '    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable) public returns(uint errorCode);\n', '    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, address _account) public returns(uint errorCode);\n', '    function reissueAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\n', '    function revokeAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\n', '\n', '    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool);\n', '    function changeOwnership(bytes32 _symbol, address _newOwner) public returns(uint errorCode);\n', '    \n', '    function eventsHistory() public view returns (address);\n', '}\n', '\n', '// File: contracts/core/platform/ChronoBankAsset.sol\n', '\n', '/**\n', ' * Copyright 2017–2018, LaborX PTY\n', ' * Licensed under the AGPL Version 3 license.\n', ' */\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', 'contract ChronoBankAssetProxy is ChronoBankAssetProxyInterface {}\n', '\n', 'contract ChronoBankPlatform is ChronoBankPlatformInterface {}\n', '\n', '\n', '/// @title ChronoBank Asset implementation contract.\n', '///\n', '/// Basic asset implementation contract, without any additional logic.\n', '/// Every other asset implementation contracts should derive from this one.\n', '/// Receives calls from the proxy, and calls back immediatly without arguments modification.\n', '///\n', '/// Note: all the non constant functions return false instead of throwing in case if state change\n', "/// didn't happen yet.\n", 'contract ChronoBankAsset is ChronoBankAssetInterface {\n', '\n', '    // @dev Assigned asset proxy contract, immutable.\n', '    ChronoBankAssetProxy public proxy;\n', '\n', '    // @dev banned addresses\n', '    mapping (address => bool) public blacklist;\n', '\n', '    // @dev stops asset transfers\n', '    bool public paused = false;\n', '\n', '    // @dev restriction/Unrestriction events\n', '    event Restricted(bytes32 indexed symbol, address restricted);\n', '    event Unrestricted(bytes32 indexed symbol, address unrestricted);\n', '\n', '    // @dev Paused/Unpaused events\n', '    event Paused(bytes32 indexed symbol);\n', '    event Unpaused(bytes32 indexed symbol);\n', '\n', '    /// @dev Only assigned proxy is allowed to call.\n', '    modifier onlyProxy {\n', '        if (proxy == msg.sender) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /// @dev Only not paused tokens could go further.\n', '    modifier onlyNotPaused(address _sender) {\n', '        if (!paused || isAuthorized(_sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /// @dev Only acceptable (not in blacklist) addresses are allowed to call.\n', '    modifier onlyAcceptable(address _address) {\n', '        if (!blacklist[_address]) {\n', '            _;\n', '        }\n', '    }\n', '\n', "    /// @dev Only assets's admins are allowed to execute\n", '    modifier onlyAuthorized {\n', '        if (isAuthorized(msg.sender)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /// @notice Sets asset proxy address.\n', '    /// Can be set only once.\n', '    /// @dev function is final, and must not be overridden.\n', '    /// @param _proxy asset proxy contract address.\n', '    /// @return success.\n', '    function init(ChronoBankAssetProxy _proxy) public returns(bool) {\n', '        if (address(proxy) != 0x0) {\n', '            return false;\n', '        }\n', '        proxy = _proxy;\n', '        return true;\n', '    }\n', '\n', "    /// @notice Gets eventsHistory contract used for events' triggering\n", '    function eventsHistory() public view returns (address) {\n', '        ChronoBankPlatform platform = ChronoBankPlatform(proxy.chronoBankPlatform());\n', '        return platform.eventsHistory() != address(platform) ? platform.eventsHistory() : this;\n', '    }\n', '\n', '    /// @notice Lifts the ban on transfers for given addresses\n', '    function restrict(address [] _restricted) onlyAuthorized external returns (bool) {\n', '        for (uint i = 0; i < _restricted.length; i++) {\n', '            address restricted = _restricted[i];\n', '            blacklist[restricted] = true;\n', '            _emitRestricted(restricted);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @notice Revokes the ban on transfers for given addresses\n', '    function unrestrict(address [] _unrestricted) onlyAuthorized external returns (bool) {\n', '        for (uint i = 0; i < _unrestricted.length; i++) {\n', '            address unrestricted = _unrestricted[i];\n', '            delete blacklist[unrestricted];\n', '            _emitUnrestricted(unrestricted);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @notice called by the owner to pause, triggers stopped state\n', '    /// Only admin is allowed to execute this method.\n', '    function pause() onlyAuthorized external returns (bool) {\n', '        paused = true;\n', '        _emitPaused();\n', '        return true;\n', '    }\n', '\n', '    /// @notice called by the owner to unpause, returns to normal state\n', '    /// Only admin is allowed to execute this method.\n', '    function unpause() onlyAuthorized external returns (bool) {\n', '        paused = false;\n', '        _emitUnpaused();\n', '        return true;\n', '    }\n', '\n', '    /// @notice Passes execution into virtual function.\n', '    /// Can only be called by assigned asset proxy.\n', '    /// @dev function is final, and must not be overridden.\n', '    /// @return success.\n', '    function __transferWithReference(\n', '        address _to, \n', '        uint _value, \n', '        string _reference, \n', '        address _sender\n', '    ) \n', '    onlyProxy \n', '    public \n', '    returns (bool) \n', '    {\n', '        return _transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    /// @notice Calls back without modifications if an asset is not stopped.\n', '    /// Checks whether _from/_sender are not in blacklist.\n', '    /// @dev function is virtual, and meant to be overridden.\n', '    /// @return success.\n', '    function _transferWithReference(\n', '        address _to, \n', '        uint _value, \n', '        string _reference, \n', '        address _sender\n', '    )\n', '    onlyNotPaused(_sender)\n', '    onlyAcceptable(_to)\n', '    onlyAcceptable(_sender)\n', '    internal\n', '    returns (bool)\n', '    {\n', '        return proxy.__transferWithReference(_to, _value, _reference, _sender);\n', '    }\n', '\n', '    /// @notice Passes execution into virtual function.\n', '    /// Can only be called by assigned asset proxy.\n', '    /// @dev function is final, and must not be overridden.\n', '    /// @return success.\n', '    function __transferFromWithReference(\n', '        address _from, \n', '        address _to, \n', '        uint _value, \n', '        string _reference, \n', '        address _sender\n', '    ) \n', '    onlyProxy \n', '    public \n', '    returns (bool) \n', '    {\n', '        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /// @notice Calls back without modifications if an asset is not stopped.\n', '    /// Checks whether _from/_sender are not in blacklist.\n', '    /// @dev function is virtual, and meant to be overridden.\n', '    /// @return success.\n', '    function _transferFromWithReference(\n', '        address _from, \n', '        address _to, \n', '        uint _value, \n', '        string _reference, \n', '        address _sender\n', '    )\n', '    onlyNotPaused(_sender)\n', '    onlyAcceptable(_from)\n', '    onlyAcceptable(_to)\n', '    onlyAcceptable(_sender)\n', '    internal\n', '    returns (bool)\n', '    {\n', '        return proxy.__transferFromWithReference(_from, _to, _value, _reference, _sender);\n', '    }\n', '\n', '    /// @notice Passes execution into virtual function.\n', '    /// Can only be called by assigned asset proxy.\n', '    /// @dev function is final, and must not be overridden.\n', '    /// @return success.\n', '    function __approve(address _spender, uint _value, address _sender) onlyProxy public returns (bool) {\n', '        return _approve(_spender, _value, _sender);\n', '    }\n', '\n', '    /// @notice Calls back without modifications.\n', '    /// @dev function is virtual, and meant to be overridden.\n', '    /// @return success.\n', '    function _approve(address _spender, uint _value, address _sender)\n', '    onlyAcceptable(_spender)\n', '    onlyAcceptable(_sender)\n', '    internal\n', '    returns (bool)\n', '    {\n', '        return proxy.__approve(_spender, _value, _sender);\n', '    }\n', '\n', '    function isAuthorized(address _owner)\n', '    public\n', '    view\n', '    returns (bool) {\n', '        ChronoBankPlatform platform = ChronoBankPlatform(proxy.chronoBankPlatform());\n', '        return platform.hasAssetRights(_owner, proxy.smbl());\n', '    }\n', '\n', '    function _emitRestricted(address _restricted) private {\n', '        ChronoBankAsset(eventsHistory()).emitRestricted(proxy.smbl(), _restricted);\n', '    }\n', '\n', '    function _emitUnrestricted(address _unrestricted) private {\n', '        ChronoBankAsset(eventsHistory()).emitUnrestricted(proxy.smbl(), _unrestricted);\n', '    }\n', '\n', '    function _emitPaused() private {\n', '        ChronoBankAsset(eventsHistory()).emitPaused(proxy.smbl());\n', '    }\n', '\n', '    function _emitUnpaused() private {\n', '        ChronoBankAsset(eventsHistory()).emitUnpaused(proxy.smbl());\n', '    }\n', '\n', '    function emitRestricted(bytes32 _symbol, address _restricted) public {\n', '        emit Restricted(_symbol, _restricted);\n', '    }\n', '\n', '    function emitUnrestricted(bytes32 _symbol, address _unrestricted) public {\n', '        emit Unrestricted(_symbol, _unrestricted);\n', '    }\n', '\n', '    function emitPaused(bytes32 _symbol) public {\n', '        emit Paused(_symbol);\n', '    }\n', '\n', '    function emitUnpaused(bytes32 _symbol) public {\n', '        emit Unpaused(_symbol);\n', '    }\n', '}']