['pragma solidity ^0.4.25;\n', '\n', '/*     ONUP TOKEN AFFILIATE PROJECT, THE FIRST EDITION\n', '        CREATED 2018-10-31 BY DAO DRIVER ETHEREUM\n', '        ALL PROJECT DETAILS AT https://onup.online       */\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b)internal pure returns(uint256){if(a==0){return 0;}uint256 c=a*b;assert(c/a==b);return c;}\n', '    function div(uint256 a, uint256 b)internal pure returns(uint256){uint256 c=a/b;return c;}\n', '    function sub(uint256 a, uint256 b)internal pure returns(uint256){assert(b<=a);return a-b;}\n', '    function add(uint256 a, uint256 b)internal pure returns(uint256){uint256 c=a+b;assert(c>=a);return c;}\n', '}\n', 'contract ERC20 {uint256 internal Bank=0;string public constant name="OnUp TOKEN";string public constant symbol="OnUp";\n', '    uint8  public constant decimals=6; uint256 public price=700000000; uint256 public totalSupply;\n', '    event Approval(address indexed owner,address indexed spender,uint value);\n', '    event Transfer(address indexed from,address indexed to,uint value);\n', '    mapping(address=>mapping(address=>uint256))public allowance; mapping(address=>uint256)public balanceOf;\n', '    function balanceOf(address who)public constant returns(uint){return balanceOf[who];}\n', '    function approve(address _spender,uint _value)public{allowance[msg.sender][_spender]=_value; emit Approval(msg.sender,_spender,_value);}\n', '    function allowance(address _owner,address _spender) public constant returns (uint remaining){return allowance[_owner][_spender];} \n', '}\n', 'contract ALFA is ERC20{using SafeMath for uint256;\n', '    modifier onlyPayloadSize(uint size){require(msg.data.length >= size + 4); _;}\n', '    address  ref1 = 0x0000000000000000000000000000000000000000;\n', '    address  ref2 = 0x0000000000000000000000000000000000000000;\n', '    address  ref3 = 0x0000000000000000000000000000000000000000;\n', '    address  ref4 = 0x0000000000000000000000000000000000000000;\n', '    address  ref5 = 0x0000000000000000000000000000000000000000;\n', '    address public owner;\n', '    address internal constant insdr = 0xaB85Cb1087ce716E11dC37c69EaaBc09d674575d;// FEEDER \n', '    address internal constant advrt = 0x28fF20D2d413A346F123198385CCf16E15295351;// ADVERTISE\n', '    address internal constant spcnv = 0x516e0deBB3dB8C2c087786CcF7653fa0991784b3;// AIRDROPS\n', '    mapping (address => address) public referrerOf;\n', '    mapping (address => uint256) public prevOf;\n', '    mapping (address => uint256) public summOf;\n', '    constructor()public payable{owner=msg.sender;prevOf[advrt]=6;prevOf[owner]=6;}\n', '    function()payable public{\n', '        require(msg.value >= 10000000000000000);\n', '        require(msg.value <= 30000000000000000000);\n', '        require(isContract(msg.sender)==false); \n', '        if( msg.sender!=insdr ){\n', '            ref1=0x0000000000000000000000000000000000000000; \n', '            ref2=0x0000000000000000000000000000000000000000;\n', '            ref3=0x0000000000000000000000000000000000000000;\n', '            ref4=0x0000000000000000000000000000000000000000;\n', '            ref5=0x0000000000000000000000000000000000000000;\n', '            if(msg.sender!= advrt && msg.sender!=owner){CheckPrivilege();}else{mintTokens();}\n', '        }else{Bank+=(msg.value.div(100)).mul(90);price=Bank.div(totalSupply);}\n', '    }\n', '    function CheckPrivilege()internal{\n', '        if(msg.value>=25000000000000000000 && prevOf[msg.sender]<6){prevOf[msg.sender]=6;}\n', '        if(msg.value>=20000000000000000000 && prevOf[msg.sender]<5){prevOf[msg.sender]=5;}\n', '        if(msg.value>=15000000000000000000 && prevOf[msg.sender]<4){prevOf[msg.sender]=4;}\n', '        if(msg.value>=10000000000000000000 && prevOf[msg.sender]<3){prevOf[msg.sender]=3;}\n', '        if(msg.value>= 5000000000000000000 && prevOf[msg.sender]<2){prevOf[msg.sender]=2;} \n', '        if(msg.value>=  100000000000000000 && prevOf[msg.sender]<1){prevOf[msg.sender]=1;}\n', '        if(summOf[msg.sender]>=250000000000000000000 && prevOf[msg.sender]<6){prevOf[msg.sender]=6;}\n', '\t\tif(summOf[msg.sender]>=200000000000000000000 && prevOf[msg.sender]<5){prevOf[msg.sender]=5;}\n', '\t\tif(summOf[msg.sender]>=150000000000000000000 && prevOf[msg.sender]<4){prevOf[msg.sender]=4;}\n', '\t\tif(summOf[msg.sender]>=100000000000000000000 && prevOf[msg.sender]<3){prevOf[msg.sender]=3;}\n', '\t\tif(summOf[msg.sender]>= 50000000000000000000 && prevOf[msg.sender]<2){prevOf[msg.sender]=2;}\n', '\t\tref1=referrerOf[msg.sender];if(ref1==0x0000000000000000000000000000000000000000){\n', '\t\tref1=bytesToAddress(msg.data);require(isContract(ref1)==false);require(balanceOf[ref1]>0);require(ref1!=spcnv);\n', '\t\trequire(ref1!=insdr);referrerOf[msg.sender]=ref1;}mintTokens();\n', '    }\n', '    function mintTokens()internal{\n', '        uint256 tokens=msg.value.div((price*100).div(70));\n', '        require(tokens>0);require(balanceOf[msg.sender]+tokens>balanceOf[msg.sender]);\n', '        uint256 perc=msg.value.div(100);uint256 sif=perc.mul(10);\n', '        uint256 percair=0;uint256 bonus1=0;uint256 bonus2=0;uint256 bonus3=0;\n', '        uint256 bonus4=0;uint256 bonus5=0;uint256 minus=0;uint256 airdrop=0;\n', '        if(msg.sender!=advrt && msg.sender!=owner && msg.sender!=spcnv){\n', '        if(ref1!=0x0000000000000000000000000000000000000000){summOf[ref1]+=msg.value; \n', '        if(prevOf[ref1]>1){sif-=perc.mul(2);bonus1=perc.mul(2);minus+=2;} \n', '        else if(prevOf[ref1]>0){sif-=perc;bonus1=perc;minus+=1;}else{}\n', '        if(ref2!= 0x0000000000000000000000000000000000000000){ \n', '        if(prevOf[ref2]>2){sif-=perc.mul(2);bonus2=perc.mul(2);minus+=2;}\n', '        else if(prevOf[ref2]>0){sif-=perc;bonus2=perc;minus+=1;}else{}\n', '        if(ref3!= 0x0000000000000000000000000000000000000000){ \n', '        if(prevOf[ref3]>3){sif-=perc.mul(2);bonus3=perc.mul(2);minus+=2;}\n', '        else if(prevOf[ref3]>0){sif-=perc;bonus3=perc;minus+=1;}else{}\n', '        if(ref4!= 0x0000000000000000000000000000000000000000){ \n', '        if(prevOf[ref4]>4){sif-=perc.mul(2);bonus4=perc.mul(2);minus+=2;}\n', '        else if(prevOf[ref4]>0){sif-=perc;bonus4=perc;minus+=1;}else{}\n', '        if(ref5!= 0x0000000000000000000000000000000000000000){ \n', '        if(prevOf[ref5]>5){sif-=perc.mul(2);bonus5=perc.mul(2);minus+= 2;}\n', '        else if(prevOf[ref5]>0){sif-=perc;bonus5=perc;minus+=1;}else{}}}}}}} \n', '        if(sif>0){\n', '            airdrop=sif.div((price*100).div(70)); \n', '            require(airdrop>0); \n', '            percair=sif.div(100);\n', '            balanceOf[spcnv]+=airdrop; \n', '            emit Transfer(this,spcnv,airdrop);}\n', '        Bank+=(perc+percair).mul(85-minus);    \n', '        totalSupply+=(tokens+airdrop);\n', '        price=Bank.div(totalSupply);\n', '        balanceOf[msg.sender]+=tokens;\n', '        emit Transfer(this,msg.sender,tokens);\n', '        tokens=0;airdrop=0;\n', '        owner.transfer(perc.mul(5)); \n', '        advrt.transfer(perc.mul(5));\n', '        if(bonus1>0){ref1.transfer(bonus1);} \n', '        if(bonus2>0){ref2.transfer(bonus2);} \n', '        if(bonus3>0){ref3.transfer(bonus3);} \n', '        if(bonus4>0){ref4.transfer(bonus4);} \n', '        if(bonus5>0){ref5.transfer(bonus5);}\n', '    }\n', '      function transfer(address _to,uint _value)\n', '      public onlyPayloadSize(2*32)returns(bool success){\n', '        require(balanceOf[msg.sender]>=_value);\n', '        if(_to!=address(this)){\n', '            if(msg.sender==spcnv){require(_value<10000001);}\n', '            require(balanceOf[_to]+_value>=balanceOf[_to]);\n', '            balanceOf[msg.sender] -=_value;\n', '            balanceOf[_to]+=_value;\n', '            emit Transfer(msg.sender,_to,_value);\n', '        }else{require(msg.sender!=spcnv);\n', '        balanceOf[msg.sender]-=_value;uint256 change=_value.mul(price);\n', '        require(address(this).balance>=change);\n', '        if(totalSupply>_value){\n', '            uint256 plus=(address(this).balance-Bank).div(totalSupply);\n', '            Bank-=change;totalSupply-=_value;Bank+=(plus.mul(_value));\n', '            price=Bank.div(totalSupply);\n', '            emit Transfer(msg.sender,_to,_value);}\n', '        if(totalSupply==_value){\n', '            price=address(this).balance.div(totalSupply);\n', '            price=(price.mul(101)).div(100);totalSupply=0;Bank=0;\n', '            emit Transfer(msg.sender,_to,_value);\n', '            owner.transfer(address(this).balance-change);}\n', '        msg.sender.transfer(change);}return true;\n', '      }\n', '    function transferFrom(address _from,address _to,uint _value)\n', '    public onlyPayloadSize(3*32)returns(bool success){\n', '        require(balanceOf[_from]>=_value);require(allowance[_from][msg.sender]>=_value);\n', '        if(_to!=address(this)){\n', '            if(msg.sender==spcnv){require(_value<10000001);}\n', '            require(balanceOf[_to]+_value>=balanceOf[_to]);\n', '            balanceOf[_from]-=_value;balanceOf[_to]+=_value;\n', '            allowance[_from][msg.sender]-=_value;\n', '            emit Transfer(_from,_to,_value);\n', '        }else{require(_from!=spcnv);\n', '        balanceOf[_from]-=_value;uint256 change=_value.mul(price);\n', '        require(address(this).balance>=change);\n', '        if(totalSupply>_value){\n', '            uint256 plus=(address(this).balance-Bank).div(totalSupply);\n', '            Bank-=change;\n', '            totalSupply-=_value;\n', '            Bank+=(plus.mul(_value));\n', '            price=Bank.div(totalSupply);\n', '            emit Transfer(_from,_to,_value);\n', '            allowance[_from][msg.sender]-=_value;} \n', '        if(totalSupply==_value){\n', '            price=address(this).balance.div(totalSupply);\n', '            price=(price.mul(101)).div(100);totalSupply=0;Bank=0;\n', '            emit Transfer(_from,_to,_value);allowance[_from][msg.sender]-=_value;\n', '            owner.transfer(address(this).balance - change);}\n', '        _from.transfer(change);}return true;\n', '    }\n', '    function bytesToAddress(bytes source)internal pure returns(address addr){assembly{addr:=mload(add(source,0x14))}return addr;}\n', '    function isContract(address addr)internal view returns(bool){uint size;assembly{size:=extcodesize(addr)}return size>0;}\n', '}']