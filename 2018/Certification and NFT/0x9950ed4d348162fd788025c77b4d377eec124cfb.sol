['// solium-disable linebreak-style\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    // Owner&#39;s address\n', '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnerChanged(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    event OwnerChanged(address indexed previousOwner,address indexed newOwner);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      // Gas optimization: this is cheaper than requiring &#39;a&#39; not being zero, but the\n', '      // benefit is lost if &#39;b&#39; is also tested.\n', '      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\n', '        return c;\n', '    }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract AoraTgeCoin is IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // Name of the token\n', '    string public constant name = "Aora TGE Coin"; \n', '    \n', '    // Symbol of the token\n', '    string public constant symbol = "AORATGE";\n', '\n', '    // Number of decimals for the token\n', '    uint8 public constant decimals = 18;\n', '    \n', '    uint constant private _totalSupply = 650000000 ether;\n', '\n', '    // Contract deployment block\n', '    uint256 public deploymentBlock;\n', '\n', '    // Address of the convertContract\n', '    address public convertContract = address(0);\n', '\n', '    // Address of the crowdsaleContract\n', '    address public crowdsaleContract = address(0);\n', '\n', '    // Token balances \n', '    mapping (address => uint) balances;\n', '\n', '    /**\n', '    * @dev Sets the convertContract address. \n', '    *   In the future, there will be a need to convert Aora TGE Coins to Aora Coins. \n', '    *   That will be done using the Convert contract which will be deployed in the future.\n', '    *   Convert contract will do the functions of converting Aora TGE Coins to Aora Coins\n', '    *   and enforcing vesting rules. \n', '    * @param _convert address of the convert contract.\n', '    */\n', '    function setConvertContract(address _convert) external onlyOwner {\n', '        require(address(0) != address(_convert));\n', '        convertContract = _convert;\n', '        emit OnConvertContractSet(_convert);\n', '    }\n', '\n', '    /** \n', '    * @dev Sets the crowdsaleContract address.\n', '    *   transfer function is modified in a way that only owner and crowdsale can call it.\n', '    *   That is done because crowdsale will sell the tokens, and owner will be allowed\n', '    *   to assign AORATGE to addresses in a way that matches the Aora business model.\n', '    * @param _crowdsale address of the crowdsale contract.\n', '    */\n', '    function setCrowdsaleContract(address _crowdsale) external onlyOwner {\n', '        require(address(0) != address(_crowdsale));\n', '        crowdsaleContract = _crowdsale;\n', '        emit OnCrowdsaleContractSet(_crowdsale);\n', '    }\n', '\n', '    /**\n', '    * @dev only convert contract can call the modified function\n', '    */\n', '    modifier onlyConvert {\n', '        require(msg.sender == convertContract);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = _totalSupply;\n', '        deploymentBlock = block.number;\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address who) external view returns (uint256) {\n', '        return balances[who];\n', '    }\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256) {\n', '        require(false);\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address.\n', '    *   Only callable by the owner or crowdsale contract, to prevent token trading.\n', '    *   AORA will be a tradable token. AORATGE will be exchanged for AORA in 1-1 ratio. \n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(msg.sender == owner || msg.sender == crowdsaleContract);\n', '\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) external returns (bool) {\n', '        require(false);\n', '        return false;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another. \n', '    *   Only callable by the convert contract. Used in the process of converting \n', '    *   AORATGE to AORA. Will be called from convert contracts convert() function.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to. \n', '    *   Only 0x0 address, because of a need to prevent token recycling. \n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) onlyConvert public returns (bool) {\n', '        require(_value <= balances[_from]);\n', '        require(_to == address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback function. Can&#39;t send ether to this contract. \n', '    */\n', '    function () external payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '    * @dev This method can be used by the owner to extract mistakenly sent tokens\n', '    * or Ether sent to this contract.\n', '    * @param _token address The address of the token contract that you want to\n', '    * recover set to 0 in case you want to extract ether. It can&#39;t be ElpisToken.\n', '    */\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (_token == address(0)) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        IERC20 tokenReference = IERC20(_token);\n', '        uint balance = tokenReference.balanceOf(address(this));\n', '        tokenReference.transfer(owner, balance);\n', '        emit OnClaimTokens(_token, owner, balance);\n', '    }\n', '\n', '    /**\n', '    * @param crowdsaleAddress crowdsale contract address\n', '    */\n', '    event OnCrowdsaleContractSet(address indexed crowdsaleAddress);\n', '\n', '    /**\n', '    * @param convertAddress crowdsale contract address\n', '    */\n', '    event OnConvertContractSet(address indexed convertAddress);\n', '\n', '    /**\n', '    * @param token claimed token\n', '    * @param owner who owns the contract\n', '    * @param amount amount of the claimed token\n', '    */\n', '    event OnClaimTokens(address indexed token, address indexed owner, uint256 amount);\n', '}']
['// solium-disable linebreak-style\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', "    // Owner's address\n", '    address public owner;\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param _newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0));\n', '        emit OwnerChanged(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    event OwnerChanged(address indexed previousOwner,address indexed newOwner);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "      // benefit is lost if 'b' is also tested.\n", '      // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract AoraTgeCoin is IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // Name of the token\n', '    string public constant name = "Aora TGE Coin"; \n', '    \n', '    // Symbol of the token\n', '    string public constant symbol = "AORATGE";\n', '\n', '    // Number of decimals for the token\n', '    uint8 public constant decimals = 18;\n', '    \n', '    uint constant private _totalSupply = 650000000 ether;\n', '\n', '    // Contract deployment block\n', '    uint256 public deploymentBlock;\n', '\n', '    // Address of the convertContract\n', '    address public convertContract = address(0);\n', '\n', '    // Address of the crowdsaleContract\n', '    address public crowdsaleContract = address(0);\n', '\n', '    // Token balances \n', '    mapping (address => uint) balances;\n', '\n', '    /**\n', '    * @dev Sets the convertContract address. \n', '    *   In the future, there will be a need to convert Aora TGE Coins to Aora Coins. \n', '    *   That will be done using the Convert contract which will be deployed in the future.\n', '    *   Convert contract will do the functions of converting Aora TGE Coins to Aora Coins\n', '    *   and enforcing vesting rules. \n', '    * @param _convert address of the convert contract.\n', '    */\n', '    function setConvertContract(address _convert) external onlyOwner {\n', '        require(address(0) != address(_convert));\n', '        convertContract = _convert;\n', '        emit OnConvertContractSet(_convert);\n', '    }\n', '\n', '    /** \n', '    * @dev Sets the crowdsaleContract address.\n', '    *   transfer function is modified in a way that only owner and crowdsale can call it.\n', '    *   That is done because crowdsale will sell the tokens, and owner will be allowed\n', '    *   to assign AORATGE to addresses in a way that matches the Aora business model.\n', '    * @param _crowdsale address of the crowdsale contract.\n', '    */\n', '    function setCrowdsaleContract(address _crowdsale) external onlyOwner {\n', '        require(address(0) != address(_crowdsale));\n', '        crowdsaleContract = _crowdsale;\n', '        emit OnCrowdsaleContractSet(_crowdsale);\n', '    }\n', '\n', '    /**\n', '    * @dev only convert contract can call the modified function\n', '    */\n', '    modifier onlyConvert {\n', '        require(msg.sender == convertContract);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        balances[msg.sender] = _totalSupply;\n', '        deploymentBlock = block.number;\n', '    }\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address who) external view returns (uint256) {\n', '        return balances[who];\n', '    }\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256) {\n', '        require(false);\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address.\n', '    *   Only callable by the owner or crowdsale contract, to prevent token trading.\n', '    *   AORA will be a tradable token. AORATGE will be exchanged for AORA in 1-1 ratio. \n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(msg.sender == owner || msg.sender == crowdsaleContract);\n', '\n', '        require(_value <= balances[msg.sender]);\n', '        require(_to != address(0));\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 value) external returns (bool) {\n', '        require(false);\n', '        return false;\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another. \n', '    *   Only callable by the convert contract. Used in the process of converting \n', '    *   AORATGE to AORA. Will be called from convert contracts convert() function.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to. \n', '    *   Only 0x0 address, because of a need to prevent token recycling. \n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) onlyConvert public returns (bool) {\n', '        require(_value <= balances[_from]);\n', '        require(_to == address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "    * @dev Fallback function. Can't send ether to this contract. \n", '    */\n', '    function () external payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '    * @dev This method can be used by the owner to extract mistakenly sent tokens\n', '    * or Ether sent to this contract.\n', '    * @param _token address The address of the token contract that you want to\n', "    * recover set to 0 in case you want to extract ether. It can't be ElpisToken.\n", '    */\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (_token == address(0)) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        IERC20 tokenReference = IERC20(_token);\n', '        uint balance = tokenReference.balanceOf(address(this));\n', '        tokenReference.transfer(owner, balance);\n', '        emit OnClaimTokens(_token, owner, balance);\n', '    }\n', '\n', '    /**\n', '    * @param crowdsaleAddress crowdsale contract address\n', '    */\n', '    event OnCrowdsaleContractSet(address indexed crowdsaleAddress);\n', '\n', '    /**\n', '    * @param convertAddress crowdsale contract address\n', '    */\n', '    event OnConvertContractSet(address indexed convertAddress);\n', '\n', '    /**\n', '    * @param token claimed token\n', '    * @param owner who owns the contract\n', '    * @param amount amount of the claimed token\n', '    */\n', '    event OnClaimTokens(address indexed token, address indexed owner, uint256 amount);\n', '}']
