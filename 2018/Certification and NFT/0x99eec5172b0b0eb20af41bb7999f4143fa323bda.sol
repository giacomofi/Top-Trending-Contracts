['pragma solidity ^0.4.18; \n', ' \n', 'contract BaseCertoChainContract {\n', '    address creator; \n', '    bool public isSealed;\n', '      \n', '    function BaseCertoChainContract() public    {   creator = msg.sender;   }\n', '    \n', '    modifier onlyBy(address _account)\n', '    {\n', '        require(msg.sender != _account);\n', '        _;\n', '    }\n', '    \n', '    \n', '     modifier onlyIfNotSealed() //semantic when sealed is not possible to change sensible data\n', '    {\n', '        if (isSealed)\n', '            throw;\n', '        _;\n', '    }\n', '    \n', '    function kill() onlyBy(creator)\n', '    {               suicide(creator);     }\n', '     \n', '     function setCreator(address _creator)  onlyBy(creator)\n', '    {           creator = _creator;     }\n', '    \n', '    \n', 'function setSealed()  onlyBy(creator)  { isSealed = true;  EventSealed(this);   } //seal down contract not reversible\n', '\n', ' event EventSealed(address self); //invoked when contract is sealed\n', '\n', '}\n', 'contract DocumentCertoChainContract   is BaseCertoChainContract    \n', '{  \n', '  \n', '    string  public  Name;         //Product\n', '    string  public  Description ; //Description\n', '    string  public  FileName;     //ProductionData\n', '    string  public  FileHash;     //SecuritySeal\n', '    string  public  FileData;     //SecuritySeal\n', '    address public  Revision; \n', '    address public  NextOwner; \n', '    address public  PrevOwner; \n', '    \n', '    \n', '    \n', '    \n', '   //function   DocumentCertoChainContract() public\n', '   //{}\n', '    \n', '    function DocumentCertoChainContract(string _Description, string _FileName,string _FileHash,string _FileData) public\n', '    //onlyBy(creator)\n', '    {\n', '          Revision=address(this);\n', '          NextOwner=address(this);\n', '          Description=_Description;\n', '          FileName=_FileName;\n', '          FileHash=_FileHash;\n', '          FileData=_FileData;\n', '       \n', '    }\n', '    \n', '    function setRevision(address _Revision)  onlyBy(creator) onlyIfNotSealed()\n', '    {\n', '          Revision = _Revision;\n', '          EventNewRevision(this);\n', '        \n', '    }\n', '     \n', '     \n', '     function setNextOwner(address _NextOwner)  onlyBy(creator) onlyIfNotSealed()\n', '    {\n', '          NextOwner = _NextOwner;\n', '          EventNewOwner(this);\n', '    }\n', '    \n', '     function setPrevOwner(address _PrevOwner)  onlyBy(creator) onlyIfNotSealed()\n', '    {\n', '          PrevOwner = _PrevOwner;\n', '          EventNewPrevOwner(this);\n', '    }\n', '     event EventNewOwner(address self);\n', '     event EventNewPrevOwner(address self);\n', '     event EventNewRevision(address self); \n', '}']