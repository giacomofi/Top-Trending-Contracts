['pragma solidity ^0.4.17;\n', '\n', '/**\n', '    This contract represents a sort of time-limited challenge,\n', '    where users can vote for some candidates.\n', '    After the deadline comes the contract will define a winner and vote holders can get their reward.\n', '**/\n', 'contract VotingChallenge {\n', '    uint public challengeDuration;\n', '    uint public challengePrize;\n', '    uint public creatorPrize;\n', '    uint public cryptoVersusPrize;\n', '    uint public challengeStarted;\n', '    uint public candidatesNumber;\n', '    address public creator;\n', '    uint16 public creatorFee;       // measured in in tenths of a percent\n', '    address public cryptoVersusWallet;\n', '    uint16 public cryptoVersusFee;  // measured in in tenths of a percent\n', '    uint public winner;\n', '    bool public isVotingPeriod;\n', '    bool public beforeVoting;\n', '    uint[] public votes;\n', '    mapping( address => mapping (uint => uint)) public userVotesDistribution;\n', '    uint private lastPayment;\n', '\n', '    // Modifiers\n', '    modifier inVotingPeriod() {\n', '        require(isVotingPeriod);\n', '        _;\n', '    }\n', '\n', '    modifier afterVotingPeriod() {\n', '        require(!isVotingPeriod);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCreator() {\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '\n', '    // Events\n', '    event ChallengeBegins(address _creator, uint16 _creatorFee, uint _candidatesNumber, uint _challengeDuration);\n', '    event NewVotesFor(address _participant, uint _candidate, uint _votes);\n', '    event TransferVotes(address _from, address _to, uint _candidateIndex, uint _votes);\n', '    event EndOfChallenge(uint _winner, uint _winnerVotes, uint _challengePrize);\n', '    event RewardWasPaid(address _participant, uint _amount);\n', '    event CreatorRewardWasPaid(address _creator, uint _amount);\n', '    event CryptoVersusRewardWasPaid(address _cryptoVersusWallet, uint _amount);\n', '\n', '    // Constructor\n', '    constructor(uint _challengeDuration, uint _candidatesNumber, uint16 _creatorFee) public {\n', '        challengeDuration = _challengeDuration;\n', '        candidatesNumber = _candidatesNumber;\n', '        votes.length = candidatesNumber + 1; // we will never use the first elements of array (with zero index)\n', '        creator = msg.sender;\n', '        cryptoVersusWallet = 0xa0bedE75cfeEF0266f8A31b47074F5f9fBE1df80;\n', '        creatorFee = _creatorFee;\n', '        cryptoVersusFee = 25;\n', '        beforeVoting = true;\n', '\n', '        // Check that creatorFee and cryptoVersusFee are less than 1000\n', '        if(creatorFee > 1000) {\n', '            creatorFee = 1000;\n', '            cryptoVersusFee = 0;\n', '            return;\n', '        }\n', '        if(cryptoVersusFee > 1000) {\n', '            cryptoVersusFee = 1000;\n', '            creatorFee = 0;\n', '            return;\n', '        }\n', '        if(creatorFee + cryptoVersusFee > 1000) {\n', '            cryptoVersusFee = 1000 - creatorFee;\n', '        }\n', '    }\n', '\n', '    // Last block timestamp getter\n', '    function getTime() public view returns (uint) {\n', '        return now;\n', '    }\n', '\n', '    function getAllVotes() public view returns (uint[]) {\n', '        return votes;\n', '    }\n', '\n', '    // Start challenge\n', '    function startChallenge() public onlyCreator {\n', '        require(beforeVoting);\n', '        isVotingPeriod = true;\n', '        beforeVoting = false;\n', '        challengeStarted = now;\n', '\n', '        emit ChallengeBegins(creator, creatorFee, candidatesNumber, challengeDuration);\n', '    }\n', '\n', '    // Change creator address\n', '    function changeCreator(address newCreator) public onlyCreator {\n', '        creator = newCreator;\n', '    }\n', '\n', '    // Change Crypto Versus wallet address\n', '    function changeWallet(address newWallet) public {\n', '        require(msg.sender == cryptoVersusWallet);\n', '        cryptoVersusWallet = newWallet;\n', '    }\n', '\n', '    // Vote for candidate\n', '    function voteForCandidate(uint candidate) public payable inVotingPeriod {\n', '        require(candidate <= candidatesNumber);\n', '        require(candidate > 0);\n', '        require(msg.value > 0);\n', '\n', '        lastPayment = msg.value;\n', '        if(checkEndOfChallenge()) {\n', '            msg.sender.transfer(lastPayment);\n', '            return;\n', '        }\n', '        lastPayment = 0;\n', '\n', '        // Add new votes for community\n', '        votes[candidate] += msg.value;\n', '\n', '        // Change the votes distribution\n', '        userVotesDistribution[msg.sender][candidate] += msg.value;\n', '\n', '        // Fire the event\n', '        emit NewVotesFor(msg.sender, candidate, msg.value);\n', '    }\n', '\n', '    // Transfer votes to anybody\n', '    function transferVotes (address to, uint candidate) public inVotingPeriod {\n', '        require(userVotesDistribution[msg.sender][candidate] > 0);\n', '        uint votesToTransfer = userVotesDistribution[msg.sender][candidate];\n', '        userVotesDistribution[msg.sender][candidate] = 0;\n', '        userVotesDistribution[to][candidate] += votesToTransfer;\n', '\n', '        // Fire the event\n', '        emit TransferVotes(msg.sender, to, candidate, votesToTransfer);\n', '    }\n', '\n', '    // Check the deadline\n', '    // If success then define a winner and close the challenge\n', '    function checkEndOfChallenge() public inVotingPeriod returns (bool) {\n', '        if (challengeStarted + challengeDuration > now)\n', '            return false;\n', '        uint theWinner;\n', '        uint winnerVotes;\n', '        uint actualBalance = address(this).balance - lastPayment;\n', '\n', '        for (uint i = 1; i <= candidatesNumber; i++) {\n', '            if (votes[i] > winnerVotes) {\n', '                winnerVotes = votes[i];\n', '                theWinner = i;\n', '            }\n', '        }\n', '        winner = theWinner;\n', '        creatorPrize = (actualBalance * creatorFee) / 1000;\n', '        cryptoVersusPrize = (actualBalance * cryptoVersusFee) / 1000;\n', '        challengePrize = actualBalance - creatorPrize - cryptoVersusPrize;\n', '        isVotingPeriod = false;\n', '\n', '        // Fire the event\n', '        emit EndOfChallenge(winner, winnerVotes, challengePrize);\n', '        return true;\n', '    }\n', '\n', '    // Send a reward if user voted for a winner\n', '    function getReward() public afterVotingPeriod {\n', '        require(userVotesDistribution[msg.sender][winner] > 0);\n', '\n', '        // Compute a vote ratio and send the reward\n', '        uint userVotesForWinner = userVotesDistribution[msg.sender][winner];\n', '        userVotesDistribution[msg.sender][winner] = 0;\n', '        uint reward = (challengePrize * userVotesForWinner) / votes[winner];\n', '        msg.sender.transfer(reward);\n', '\n', '        // Fire the event\n', '        emit RewardWasPaid(msg.sender, reward);\n', '    }\n', '\n', '    // Send a reward if user voted for a winner\n', '    function sendReward(address to) public afterVotingPeriod {\n', '        require(userVotesDistribution[to][winner] > 0);\n', '\n', '        // Compute a vote ratio and send the reward\n', '        uint userVotesForWinner = userVotesDistribution[to][winner];\n', '        userVotesDistribution[to][winner] = 0;\n', '        uint reward = (challengePrize * userVotesForWinner) / votes[winner];\n', '        to.transfer(reward);\n', '\n', '        // Fire the event\n', '        emit RewardWasPaid(to, reward);\n', '    }\n', '\n', '    // Send a reward to challenge creator\n', '    function sendCreatorReward() public afterVotingPeriod {\n', '        require(creatorPrize > 0);\n', '        uint creatorReward = creatorPrize;\n', '        creatorPrize = 0;\n', '        creator.transfer(creatorReward);\n', '\n', '        // Fire the event\n', '        emit CreatorRewardWasPaid(creator, creatorReward);\n', '    }\n', '\n', '    // Send a reward to cryptoVersusWallet\n', '    function sendCryptoVersusReward() public afterVotingPeriod {\n', '        require(cryptoVersusPrize > 0);\n', '        uint cryptoVersusReward = cryptoVersusPrize;\n', '        cryptoVersusPrize = 0;\n', '        cryptoVersusWallet.transfer(cryptoVersusReward);\n', '\n', '        // Fire the event\n', '        emit CryptoVersusRewardWasPaid(cryptoVersusWallet, cryptoVersusReward);\n', '    }\n', '}']
['pragma solidity ^0.4.17;\n', '\n', '/**\n', '    This contract represents a sort of time-limited challenge,\n', '    where users can vote for some candidates.\n', '    After the deadline comes the contract will define a winner and vote holders can get their reward.\n', '**/\n', 'contract VotingChallenge {\n', '    uint public challengeDuration;\n', '    uint public challengePrize;\n', '    uint public creatorPrize;\n', '    uint public cryptoVersusPrize;\n', '    uint public challengeStarted;\n', '    uint public candidatesNumber;\n', '    address public creator;\n', '    uint16 public creatorFee;       // measured in in tenths of a percent\n', '    address public cryptoVersusWallet;\n', '    uint16 public cryptoVersusFee;  // measured in in tenths of a percent\n', '    uint public winner;\n', '    bool public isVotingPeriod;\n', '    bool public beforeVoting;\n', '    uint[] public votes;\n', '    mapping( address => mapping (uint => uint)) public userVotesDistribution;\n', '    uint private lastPayment;\n', '\n', '    // Modifiers\n', '    modifier inVotingPeriod() {\n', '        require(isVotingPeriod);\n', '        _;\n', '    }\n', '\n', '    modifier afterVotingPeriod() {\n', '        require(!isVotingPeriod);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCreator() {\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '\n', '    // Events\n', '    event ChallengeBegins(address _creator, uint16 _creatorFee, uint _candidatesNumber, uint _challengeDuration);\n', '    event NewVotesFor(address _participant, uint _candidate, uint _votes);\n', '    event TransferVotes(address _from, address _to, uint _candidateIndex, uint _votes);\n', '    event EndOfChallenge(uint _winner, uint _winnerVotes, uint _challengePrize);\n', '    event RewardWasPaid(address _participant, uint _amount);\n', '    event CreatorRewardWasPaid(address _creator, uint _amount);\n', '    event CryptoVersusRewardWasPaid(address _cryptoVersusWallet, uint _amount);\n', '\n', '    // Constructor\n', '    constructor(uint _challengeDuration, uint _candidatesNumber, uint16 _creatorFee) public {\n', '        challengeDuration = _challengeDuration;\n', '        candidatesNumber = _candidatesNumber;\n', '        votes.length = candidatesNumber + 1; // we will never use the first elements of array (with zero index)\n', '        creator = msg.sender;\n', '        cryptoVersusWallet = 0xa0bedE75cfeEF0266f8A31b47074F5f9fBE1df80;\n', '        creatorFee = _creatorFee;\n', '        cryptoVersusFee = 25;\n', '        beforeVoting = true;\n', '\n', '        // Check that creatorFee and cryptoVersusFee are less than 1000\n', '        if(creatorFee > 1000) {\n', '            creatorFee = 1000;\n', '            cryptoVersusFee = 0;\n', '            return;\n', '        }\n', '        if(cryptoVersusFee > 1000) {\n', '            cryptoVersusFee = 1000;\n', '            creatorFee = 0;\n', '            return;\n', '        }\n', '        if(creatorFee + cryptoVersusFee > 1000) {\n', '            cryptoVersusFee = 1000 - creatorFee;\n', '        }\n', '    }\n', '\n', '    // Last block timestamp getter\n', '    function getTime() public view returns (uint) {\n', '        return now;\n', '    }\n', '\n', '    function getAllVotes() public view returns (uint[]) {\n', '        return votes;\n', '    }\n', '\n', '    // Start challenge\n', '    function startChallenge() public onlyCreator {\n', '        require(beforeVoting);\n', '        isVotingPeriod = true;\n', '        beforeVoting = false;\n', '        challengeStarted = now;\n', '\n', '        emit ChallengeBegins(creator, creatorFee, candidatesNumber, challengeDuration);\n', '    }\n', '\n', '    // Change creator address\n', '    function changeCreator(address newCreator) public onlyCreator {\n', '        creator = newCreator;\n', '    }\n', '\n', '    // Change Crypto Versus wallet address\n', '    function changeWallet(address newWallet) public {\n', '        require(msg.sender == cryptoVersusWallet);\n', '        cryptoVersusWallet = newWallet;\n', '    }\n', '\n', '    // Vote for candidate\n', '    function voteForCandidate(uint candidate) public payable inVotingPeriod {\n', '        require(candidate <= candidatesNumber);\n', '        require(candidate > 0);\n', '        require(msg.value > 0);\n', '\n', '        lastPayment = msg.value;\n', '        if(checkEndOfChallenge()) {\n', '            msg.sender.transfer(lastPayment);\n', '            return;\n', '        }\n', '        lastPayment = 0;\n', '\n', '        // Add new votes for community\n', '        votes[candidate] += msg.value;\n', '\n', '        // Change the votes distribution\n', '        userVotesDistribution[msg.sender][candidate] += msg.value;\n', '\n', '        // Fire the event\n', '        emit NewVotesFor(msg.sender, candidate, msg.value);\n', '    }\n', '\n', '    // Transfer votes to anybody\n', '    function transferVotes (address to, uint candidate) public inVotingPeriod {\n', '        require(userVotesDistribution[msg.sender][candidate] > 0);\n', '        uint votesToTransfer = userVotesDistribution[msg.sender][candidate];\n', '        userVotesDistribution[msg.sender][candidate] = 0;\n', '        userVotesDistribution[to][candidate] += votesToTransfer;\n', '\n', '        // Fire the event\n', '        emit TransferVotes(msg.sender, to, candidate, votesToTransfer);\n', '    }\n', '\n', '    // Check the deadline\n', '    // If success then define a winner and close the challenge\n', '    function checkEndOfChallenge() public inVotingPeriod returns (bool) {\n', '        if (challengeStarted + challengeDuration > now)\n', '            return false;\n', '        uint theWinner;\n', '        uint winnerVotes;\n', '        uint actualBalance = address(this).balance - lastPayment;\n', '\n', '        for (uint i = 1; i <= candidatesNumber; i++) {\n', '            if (votes[i] > winnerVotes) {\n', '                winnerVotes = votes[i];\n', '                theWinner = i;\n', '            }\n', '        }\n', '        winner = theWinner;\n', '        creatorPrize = (actualBalance * creatorFee) / 1000;\n', '        cryptoVersusPrize = (actualBalance * cryptoVersusFee) / 1000;\n', '        challengePrize = actualBalance - creatorPrize - cryptoVersusPrize;\n', '        isVotingPeriod = false;\n', '\n', '        // Fire the event\n', '        emit EndOfChallenge(winner, winnerVotes, challengePrize);\n', '        return true;\n', '    }\n', '\n', '    // Send a reward if user voted for a winner\n', '    function getReward() public afterVotingPeriod {\n', '        require(userVotesDistribution[msg.sender][winner] > 0);\n', '\n', '        // Compute a vote ratio and send the reward\n', '        uint userVotesForWinner = userVotesDistribution[msg.sender][winner];\n', '        userVotesDistribution[msg.sender][winner] = 0;\n', '        uint reward = (challengePrize * userVotesForWinner) / votes[winner];\n', '        msg.sender.transfer(reward);\n', '\n', '        // Fire the event\n', '        emit RewardWasPaid(msg.sender, reward);\n', '    }\n', '\n', '    // Send a reward if user voted for a winner\n', '    function sendReward(address to) public afterVotingPeriod {\n', '        require(userVotesDistribution[to][winner] > 0);\n', '\n', '        // Compute a vote ratio and send the reward\n', '        uint userVotesForWinner = userVotesDistribution[to][winner];\n', '        userVotesDistribution[to][winner] = 0;\n', '        uint reward = (challengePrize * userVotesForWinner) / votes[winner];\n', '        to.transfer(reward);\n', '\n', '        // Fire the event\n', '        emit RewardWasPaid(to, reward);\n', '    }\n', '\n', '    // Send a reward to challenge creator\n', '    function sendCreatorReward() public afterVotingPeriod {\n', '        require(creatorPrize > 0);\n', '        uint creatorReward = creatorPrize;\n', '        creatorPrize = 0;\n', '        creator.transfer(creatorReward);\n', '\n', '        // Fire the event\n', '        emit CreatorRewardWasPaid(creator, creatorReward);\n', '    }\n', '\n', '    // Send a reward to cryptoVersusWallet\n', '    function sendCryptoVersusReward() public afterVotingPeriod {\n', '        require(cryptoVersusPrize > 0);\n', '        uint cryptoVersusReward = cryptoVersusPrize;\n', '        cryptoVersusPrize = 0;\n', '        cryptoVersusWallet.transfer(cryptoVersusReward);\n', '\n', '        // Fire the event\n', '        emit CryptoVersusRewardWasPaid(cryptoVersusWallet, cryptoVersusReward);\n', '    }\n', '}']
