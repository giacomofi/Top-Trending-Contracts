['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}   \n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/** \n', ' * @title Based on the &#39;final&#39; ERC20 token standard as specified at:\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md \n', ' */\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function name() public view returns (string);\n', '    function symbol() public view returns (string);\n', '    function decimals() public view returns (uint8);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title TestToken\n', ' * @dev The TestToken contract provides the token functionality of the IPT Global token\n', ' * and allows the admin to distribute frozen tokens which requires defrosting to become transferable.\n', ' */\n', 'contract IPTGlobal is ERC20Interface, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    //Name of the token.\n', '    string  internal constant NAME = "IPT Global";\n', '    \n', '    //Symbol of the token.\n', '    string  internal constant SYMBOL = "IPT";     \n', '    \n', '    //Granularity of the token.\n', '    uint8   internal constant DECIMALS = 8;        \n', '    \n', '    //Factor for numerical calculations.\n', '    uint256 internal constant DECIMALFACTOR = 10 ** uint(DECIMALS); \n', '    \n', '    //Total supply of IPT Global tokens.\n', '    uint256 internal constant TOTAL_SUPPLY = 300000000 * uint256(DECIMALFACTOR);  \n', '    \n', '    //Base unlocking value used to calculate fractional percentage of 0.2 %\n', '    uint8   internal constant unlockingValue = 2;\n', '    \n', '    //Base unlocking numerator used to calculate fractional percentage of 0.2 %\n', '    uint8   internal constant unlockingNumerator = 10;\n', '    \n', '    //Allows admin to call a getter which tracks latest/daily unlocked tokens\n', '    uint256 private unlockedTokensDaily;\n', '    //Allows admin to call a getter which tracks total unlocked tokens\n', '    uint256 private unlockedTokensTotal;\n', '    \n', '    address[] uniqueLockedTokenReceivers; \n', '    \n', '    //Stores uniqueness of all locked token recipients.\n', '    mapping(address => bool)    internal uniqueLockedTokenReceiver;\n', '    \n', '    //Stores all locked IPT Global token holders.\n', '    mapping(address => bool)    internal isHoldingLockedTokens;\n', '    \n', '    //Stores excluded recipients who will not be effected by token unlocking.\n', '    mapping(address => bool)    internal excludedFromTokenUnlock;\n', '    \n', '    //Stores and tracks locked IPT Global token balances.\n', '    mapping(address => uint256) internal lockedTokenBalance;\n', '    \n', '    //Stores the balance of IPT Global holders (complies with ERC-Standard).\n', '    mapping(address => uint256) internal balances; \n', '    \n', '    //Stores any allowances given to other IPT Global holders.\n', '    mapping(address => mapping(address => uint256)) internal allowed; \n', '    \n', '    \n', '    event HoldingLockedTokens(\n', '        address recipient, \n', '        uint256 lockedTokenBalance,\n', '        bool    isHoldingLockedTokens);\n', '    \n', '    event LockedTokensTransferred(\n', '        address recipient, \n', '        uint256 lockedTokens,\n', '        uint256 lockedTokenBalance);\n', '        \n', '    event TokensUnlocked(\n', '        address recipient,\n', '        uint256 unlockedTokens,\n', '        uint256 lockedTokenBalance);\n', '        \n', '    event LockedTokenBalanceChanged(\n', '        address recipient, \n', '        uint256 unlockedTokens,\n', '        uint256 lockedTokenBalance);\n', '        \n', '    event ExcludedFromTokenUnlocks(\n', '        address recipient,\n', '        bool    excludedFromTokenUnlocks);\n', '    \n', '    event CompleteTokenBalanceUnlocked(\n', '        address recipient,\n', '        uint256 lockedTokenBalance,\n', '        bool    isHoldingLockedTokens,\n', '        bool    completeTokenBalanceUnlocked);\n', '    \n', '    \n', '    /**\n', '     * @dev constructor sets initialises and configurates the smart contract.\n', '     * More specifically, it grants the smart contract owner the total supply\n', '     * of IPT Global tokens.\n', '     */\n', '    constructor() public {\n', '        balances[msg.sender] = TOTAL_SUPPLY;\n', '    }\n', '\n', '    /**\n', '     * @dev allows owner to transfer tokens which are locked by default.\n', '     * @param _recipient is the addresses which will receive locked tokens.\n', '     * @param _lockedTokens is the amount of locked tokens to distribute.\n', '     * and therefore requires unlocking to be transferable.\n', '     */\n', '    function lockedTokenTransfer(address[] _recipient, uint256[] _lockedTokens) external onlyOwner {\n', '       \n', '        for (uint256 i = 0; i < _recipient.length; i++) {\n', '            if (!uniqueLockedTokenReceiver[_recipient[i]]) {\n', '                uniqueLockedTokenReceiver[_recipient[i]] = true;\n', '                uniqueLockedTokenReceivers.push(_recipient[i]);\n', '                }\n', '                \n', '            isHoldingLockedTokens[_recipient[i]] = true;\n', '            \n', '            lockedTokenBalance[_recipient[i]] = lockedTokenBalance[_recipient[i]].add(_lockedTokens[i]);\n', '            \n', '            transfer(_recipient[i], _lockedTokens[i]);\n', '            \n', '            emit HoldingLockedTokens(_recipient[i], _lockedTokens[i], isHoldingLockedTokens[_recipient[i]]);\n', '            emit LockedTokensTransferred(_recipient[i], _lockedTokens[i], lockedTokenBalance[_recipient[i]]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allows owner to change the locked balance of a recipient manually.\n', '     * @param _owner is the address of the locked token balance to unlock.\n', '     * @param _unlockedTokens is the amount of locked tokens to unlock.\n', '     */\n', '    function changeLockedBalanceManually(address _owner, uint256 _unlockedTokens) external onlyOwner {\n', '        require(_owner != address(0));\n', '        require(_unlockedTokens <= lockedTokenBalance[_owner]);\n', '        require(isHoldingLockedTokens[_owner]);\n', '        require(!excludedFromTokenUnlock[_owner]);\n', '        \n', '        lockedTokenBalance[_owner] = lockedTokenBalance[_owner].sub(_unlockedTokens);\n', '        emit LockedTokenBalanceChanged(_owner, _unlockedTokens, lockedTokenBalance[_owner]);\n', '        \n', '        unlockedTokensDaily  = unlockedTokensDaily.add(_unlockedTokens);\n', '        unlockedTokensTotal  = unlockedTokensTotal.add(_unlockedTokens);\n', '        \n', '        if (lockedTokenBalance[_owner] == 0) {\n', '           isHoldingLockedTokens[_owner] = false;\n', '           emit CompleteTokenBalanceUnlocked(_owner, lockedTokenBalance[_owner], isHoldingLockedTokens[_owner], true);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allows owner to unlock 0.2% of locked token balances, be careful with implementation of \n', '     * loops over large arrays, could result in block limit issues.\n', '     * should be called once a day as per specifications.\n', '     */\n', '    function unlockTokens() external onlyOwner {\n', '\n', '        for (uint256 i = 0; i < uniqueLockedTokenReceivers.length; i++) {\n', '            if (isHoldingLockedTokens[uniqueLockedTokenReceivers[i]] && \n', '                !excludedFromTokenUnlock[uniqueLockedTokenReceivers[i]]) {\n', '                \n', '                uint256 unlockedTokens = (lockedTokenBalance[uniqueLockedTokenReceivers[i]].mul(unlockingValue).div(unlockingNumerator)).div(100);\n', '                lockedTokenBalance[uniqueLockedTokenReceivers[i]] = lockedTokenBalance[uniqueLockedTokenReceivers[i]].sub(unlockedTokens);\n', '                uint256 unlockedTokensToday = unlockedTokensToday.add(unlockedTokens);\n', '                \n', '                emit TokensUnlocked(uniqueLockedTokenReceivers[i], unlockedTokens, lockedTokenBalance[uniqueLockedTokenReceivers[i]]);\n', '            }\n', '            if (lockedTokenBalance[uniqueLockedTokenReceivers[i]] == 0) {\n', '                isHoldingLockedTokens[uniqueLockedTokenReceivers[i]] = false;\n', '                \n', '                emit CompleteTokenBalanceUnlocked(uniqueLockedTokenReceivers[i], lockedTokenBalance[uniqueLockedTokenReceivers[i]], isHoldingLockedTokens[uniqueLockedTokenReceivers[i]], true);\n', '            }  \n', '        }    \n', '        unlockedTokensDaily  = unlockedTokensToday;\n', '        unlockedTokensTotal  = unlockedTokensTotal.add(unlockedTokensDaily);\n', '    }\n', '    \n', '    /**\n', '     * @dev allows owner to exclude certain recipients from having their locked token balance unlocked.\n', '     * @param _excludedRecipients is the addresses to add token unlock exclusion for.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function addExclusionFromTokenUnlocks(address[] _excludedRecipients) external onlyOwner returns (bool) {\n', '        for (uint256 i = 0; i < _excludedRecipients.length; i++) {\n', '            excludedFromTokenUnlock[_excludedRecipients[i]] = true;\n', '            emit ExcludedFromTokenUnlocks(_excludedRecipients[i], excludedFromTokenUnlock[_excludedRecipients[i]]);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev allows owner to remove any exclusion from certain recipients, allowing their locked token balance to be unlockable again.\n', '     * @param _excludedRecipients is the addresses to remove unlock token exclusion from.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function removeExclusionFromTokenUnlocks(address[] _excludedRecipients) external onlyOwner returns (bool) {\n', '        for (uint256 i = 0; i < _excludedRecipients.length; i++) {\n', '            excludedFromTokenUnlock[_excludedRecipients[i]] = false;\n', '            emit ExcludedFromTokenUnlocks(_excludedRecipients[i], excludedFromTokenUnlock[_excludedRecipients[i]]);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev allows anyone to check the unlocked and locked token balance of a recipient. \n', '     * @param _owner is the address of the locked token balance to check.\n', '     * @return a uint256 representing the locked and unlocked token balances.\n', '     */\n', '    function checkTokenBalanceState(address _owner) external view returns(uint256 unlockedBalance, uint256 lockedBalance) {\n', '    return (balanceOf(_owner).sub(lockedTokenBalance[_owner]), lockedTokenBalance[_owner]);\n', '    }\n', '    \n', '    /**\n', '     * @dev allows anyone to check the a list of all locked token recipients. \n', '     * @return an address array representing the list of recipients.\n', '     */\n', '    function checkUniqueLockedTokenReceivers() external view returns (address[]) {\n', '        return uniqueLockedTokenReceivers;\n', '    }\n', '    \n', '     /**\n', '     * @dev allows checking of the daily and total amount of unlocked tokens. \n', '     * @return an uint representing the daily and total unlocked value.\n', '     */\n', '    function checkUnlockedTokensData() external view returns (uint256 unlockedDaily, uint256 unlockedTotal) {\n', '        return (unlockedTokensDaily, unlockedTokensTotal);\n', '    }\n', '\n', '    /**\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        if (isHoldingLockedTokens[msg.sender]) {\n', '            require(_value <= balances[msg.sender].sub(lockedTokenBalance[msg.sender]));\n', '        }\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '         \n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        if (isHoldingLockedTokens[_from]) {\n', '            require(_value <= balances[_from].sub(lockedTokenBalance[_from]));\n', '            require(_value <= allowed[_from][msg.sender]);\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev balanceOf function gets the balance of the specified address.\n', '     * @param _owner The address to query the balance of.\n', '     * @return An uint256 representing the token balance of the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '        \n', '    /**\n', '     * @dev allowance function checks the amount of tokens allowed by an owner for a spender to spend.\n', '     * @param _owner address is the address which owns the spendable funds.\n', '     * @param _spender address is the address which will spend the owned funds.\n', '     * @return A uint256 specifying the amount of tokens which are still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev totalSupply function returns the total supply of tokens.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return TOTAL_SUPPLY;\n', '    }\n', '    \n', '    /** \n', '     * @dev decimals function returns the decimal units of the token. \n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return DECIMALS;\n', '    }\n', '            \n', '    /** \n', '     * @dev symbol function returns the symbol ticker of the token. \n', '     */\n', '    function symbol() public view returns (string) {\n', '        return SYMBOL;\n', '    }\n', '    \n', '    /** \n', '     * @dev name function returns the name of the token. \n', '     */\n', '    function name() public view returns (string) {\n', '        return NAME;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Multiplies two numbers, throws on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two numbers, truncating the quotient.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two numbers, throws on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}   \n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/** \n', " * @title Based on the 'final' ERC20 token standard as specified at:\n", ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md \n', ' */\n', 'contract ERC20Interface {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function name() public view returns (string);\n', '    function symbol() public view returns (string);\n', '    function decimals() public view returns (uint8);\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address _owner) public view returns (uint256);\n', '    function allowance(address _owner, address _spender) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n', '    function approve(address _spender, uint256 _value) public returns (bool);\n', '}\n', '\n', '/**\n', ' * @title TestToken\n', ' * @dev The TestToken contract provides the token functionality of the IPT Global token\n', ' * and allows the admin to distribute frozen tokens which requires defrosting to become transferable.\n', ' */\n', 'contract IPTGlobal is ERC20Interface, Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    //Name of the token.\n', '    string  internal constant NAME = "IPT Global";\n', '    \n', '    //Symbol of the token.\n', '    string  internal constant SYMBOL = "IPT";     \n', '    \n', '    //Granularity of the token.\n', '    uint8   internal constant DECIMALS = 8;        \n', '    \n', '    //Factor for numerical calculations.\n', '    uint256 internal constant DECIMALFACTOR = 10 ** uint(DECIMALS); \n', '    \n', '    //Total supply of IPT Global tokens.\n', '    uint256 internal constant TOTAL_SUPPLY = 300000000 * uint256(DECIMALFACTOR);  \n', '    \n', '    //Base unlocking value used to calculate fractional percentage of 0.2 %\n', '    uint8   internal constant unlockingValue = 2;\n', '    \n', '    //Base unlocking numerator used to calculate fractional percentage of 0.2 %\n', '    uint8   internal constant unlockingNumerator = 10;\n', '    \n', '    //Allows admin to call a getter which tracks latest/daily unlocked tokens\n', '    uint256 private unlockedTokensDaily;\n', '    //Allows admin to call a getter which tracks total unlocked tokens\n', '    uint256 private unlockedTokensTotal;\n', '    \n', '    address[] uniqueLockedTokenReceivers; \n', '    \n', '    //Stores uniqueness of all locked token recipients.\n', '    mapping(address => bool)    internal uniqueLockedTokenReceiver;\n', '    \n', '    //Stores all locked IPT Global token holders.\n', '    mapping(address => bool)    internal isHoldingLockedTokens;\n', '    \n', '    //Stores excluded recipients who will not be effected by token unlocking.\n', '    mapping(address => bool)    internal excludedFromTokenUnlock;\n', '    \n', '    //Stores and tracks locked IPT Global token balances.\n', '    mapping(address => uint256) internal lockedTokenBalance;\n', '    \n', '    //Stores the balance of IPT Global holders (complies with ERC-Standard).\n', '    mapping(address => uint256) internal balances; \n', '    \n', '    //Stores any allowances given to other IPT Global holders.\n', '    mapping(address => mapping(address => uint256)) internal allowed; \n', '    \n', '    \n', '    event HoldingLockedTokens(\n', '        address recipient, \n', '        uint256 lockedTokenBalance,\n', '        bool    isHoldingLockedTokens);\n', '    \n', '    event LockedTokensTransferred(\n', '        address recipient, \n', '        uint256 lockedTokens,\n', '        uint256 lockedTokenBalance);\n', '        \n', '    event TokensUnlocked(\n', '        address recipient,\n', '        uint256 unlockedTokens,\n', '        uint256 lockedTokenBalance);\n', '        \n', '    event LockedTokenBalanceChanged(\n', '        address recipient, \n', '        uint256 unlockedTokens,\n', '        uint256 lockedTokenBalance);\n', '        \n', '    event ExcludedFromTokenUnlocks(\n', '        address recipient,\n', '        bool    excludedFromTokenUnlocks);\n', '    \n', '    event CompleteTokenBalanceUnlocked(\n', '        address recipient,\n', '        uint256 lockedTokenBalance,\n', '        bool    isHoldingLockedTokens,\n', '        bool    completeTokenBalanceUnlocked);\n', '    \n', '    \n', '    /**\n', '     * @dev constructor sets initialises and configurates the smart contract.\n', '     * More specifically, it grants the smart contract owner the total supply\n', '     * of IPT Global tokens.\n', '     */\n', '    constructor() public {\n', '        balances[msg.sender] = TOTAL_SUPPLY;\n', '    }\n', '\n', '    /**\n', '     * @dev allows owner to transfer tokens which are locked by default.\n', '     * @param _recipient is the addresses which will receive locked tokens.\n', '     * @param _lockedTokens is the amount of locked tokens to distribute.\n', '     * and therefore requires unlocking to be transferable.\n', '     */\n', '    function lockedTokenTransfer(address[] _recipient, uint256[] _lockedTokens) external onlyOwner {\n', '       \n', '        for (uint256 i = 0; i < _recipient.length; i++) {\n', '            if (!uniqueLockedTokenReceiver[_recipient[i]]) {\n', '                uniqueLockedTokenReceiver[_recipient[i]] = true;\n', '                uniqueLockedTokenReceivers.push(_recipient[i]);\n', '                }\n', '                \n', '            isHoldingLockedTokens[_recipient[i]] = true;\n', '            \n', '            lockedTokenBalance[_recipient[i]] = lockedTokenBalance[_recipient[i]].add(_lockedTokens[i]);\n', '            \n', '            transfer(_recipient[i], _lockedTokens[i]);\n', '            \n', '            emit HoldingLockedTokens(_recipient[i], _lockedTokens[i], isHoldingLockedTokens[_recipient[i]]);\n', '            emit LockedTokensTransferred(_recipient[i], _lockedTokens[i], lockedTokenBalance[_recipient[i]]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allows owner to change the locked balance of a recipient manually.\n', '     * @param _owner is the address of the locked token balance to unlock.\n', '     * @param _unlockedTokens is the amount of locked tokens to unlock.\n', '     */\n', '    function changeLockedBalanceManually(address _owner, uint256 _unlockedTokens) external onlyOwner {\n', '        require(_owner != address(0));\n', '        require(_unlockedTokens <= lockedTokenBalance[_owner]);\n', '        require(isHoldingLockedTokens[_owner]);\n', '        require(!excludedFromTokenUnlock[_owner]);\n', '        \n', '        lockedTokenBalance[_owner] = lockedTokenBalance[_owner].sub(_unlockedTokens);\n', '        emit LockedTokenBalanceChanged(_owner, _unlockedTokens, lockedTokenBalance[_owner]);\n', '        \n', '        unlockedTokensDaily  = unlockedTokensDaily.add(_unlockedTokens);\n', '        unlockedTokensTotal  = unlockedTokensTotal.add(_unlockedTokens);\n', '        \n', '        if (lockedTokenBalance[_owner] == 0) {\n', '           isHoldingLockedTokens[_owner] = false;\n', '           emit CompleteTokenBalanceUnlocked(_owner, lockedTokenBalance[_owner], isHoldingLockedTokens[_owner], true);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allows owner to unlock 0.2% of locked token balances, be careful with implementation of \n', '     * loops over large arrays, could result in block limit issues.\n', '     * should be called once a day as per specifications.\n', '     */\n', '    function unlockTokens() external onlyOwner {\n', '\n', '        for (uint256 i = 0; i < uniqueLockedTokenReceivers.length; i++) {\n', '            if (isHoldingLockedTokens[uniqueLockedTokenReceivers[i]] && \n', '                !excludedFromTokenUnlock[uniqueLockedTokenReceivers[i]]) {\n', '                \n', '                uint256 unlockedTokens = (lockedTokenBalance[uniqueLockedTokenReceivers[i]].mul(unlockingValue).div(unlockingNumerator)).div(100);\n', '                lockedTokenBalance[uniqueLockedTokenReceivers[i]] = lockedTokenBalance[uniqueLockedTokenReceivers[i]].sub(unlockedTokens);\n', '                uint256 unlockedTokensToday = unlockedTokensToday.add(unlockedTokens);\n', '                \n', '                emit TokensUnlocked(uniqueLockedTokenReceivers[i], unlockedTokens, lockedTokenBalance[uniqueLockedTokenReceivers[i]]);\n', '            }\n', '            if (lockedTokenBalance[uniqueLockedTokenReceivers[i]] == 0) {\n', '                isHoldingLockedTokens[uniqueLockedTokenReceivers[i]] = false;\n', '                \n', '                emit CompleteTokenBalanceUnlocked(uniqueLockedTokenReceivers[i], lockedTokenBalance[uniqueLockedTokenReceivers[i]], isHoldingLockedTokens[uniqueLockedTokenReceivers[i]], true);\n', '            }  \n', '        }    \n', '        unlockedTokensDaily  = unlockedTokensToday;\n', '        unlockedTokensTotal  = unlockedTokensTotal.add(unlockedTokensDaily);\n', '    }\n', '    \n', '    /**\n', '     * @dev allows owner to exclude certain recipients from having their locked token balance unlocked.\n', '     * @param _excludedRecipients is the addresses to add token unlock exclusion for.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function addExclusionFromTokenUnlocks(address[] _excludedRecipients) external onlyOwner returns (bool) {\n', '        for (uint256 i = 0; i < _excludedRecipients.length; i++) {\n', '            excludedFromTokenUnlock[_excludedRecipients[i]] = true;\n', '            emit ExcludedFromTokenUnlocks(_excludedRecipients[i], excludedFromTokenUnlock[_excludedRecipients[i]]);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev allows owner to remove any exclusion from certain recipients, allowing their locked token balance to be unlockable again.\n', '     * @param _excludedRecipients is the addresses to remove unlock token exclusion from.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function removeExclusionFromTokenUnlocks(address[] _excludedRecipients) external onlyOwner returns (bool) {\n', '        for (uint256 i = 0; i < _excludedRecipients.length; i++) {\n', '            excludedFromTokenUnlock[_excludedRecipients[i]] = false;\n', '            emit ExcludedFromTokenUnlocks(_excludedRecipients[i], excludedFromTokenUnlock[_excludedRecipients[i]]);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev allows anyone to check the unlocked and locked token balance of a recipient. \n', '     * @param _owner is the address of the locked token balance to check.\n', '     * @return a uint256 representing the locked and unlocked token balances.\n', '     */\n', '    function checkTokenBalanceState(address _owner) external view returns(uint256 unlockedBalance, uint256 lockedBalance) {\n', '    return (balanceOf(_owner).sub(lockedTokenBalance[_owner]), lockedTokenBalance[_owner]);\n', '    }\n', '    \n', '    /**\n', '     * @dev allows anyone to check the a list of all locked token recipients. \n', '     * @return an address array representing the list of recipients.\n', '     */\n', '    function checkUniqueLockedTokenReceivers() external view returns (address[]) {\n', '        return uniqueLockedTokenReceivers;\n', '    }\n', '    \n', '     /**\n', '     * @dev allows checking of the daily and total amount of unlocked tokens. \n', '     * @return an uint representing the daily and total unlocked value.\n', '     */\n', '    function checkUnlockedTokensData() external view returns (uint256 unlockedDaily, uint256 unlockedTotal) {\n', '        return (unlockedTokensDaily, unlockedTokensTotal);\n', '    }\n', '\n', '    /**\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '        \n', '        if (isHoldingLockedTokens[msg.sender]) {\n', '            require(_value <= balances[msg.sender].sub(lockedTokenBalance[msg.sender]));\n', '        }\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '         \n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        if (isHoldingLockedTokens[_from]) {\n', '            require(_value <= balances[_from].sub(lockedTokenBalance[_from]));\n', '            require(_value <= allowed[_from][msg.sender]);\n', '        }\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     * @return a boolean representing whether the function was executed succesfully.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * @dev balanceOf function gets the balance of the specified address.\n', '     * @param _owner The address to query the balance of.\n', '     * @return An uint256 representing the token balance of the passed address.\n', '     */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '        \n', '    /**\n', '     * @dev allowance function checks the amount of tokens allowed by an owner for a spender to spend.\n', '     * @param _owner address is the address which owns the spendable funds.\n', '     * @param _spender address is the address which will spend the owned funds.\n', '     * @return A uint256 specifying the amount of tokens which are still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '    /**\n', '     * @dev totalSupply function returns the total supply of tokens.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return TOTAL_SUPPLY;\n', '    }\n', '    \n', '    /** \n', '     * @dev decimals function returns the decimal units of the token. \n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return DECIMALS;\n', '    }\n', '            \n', '    /** \n', '     * @dev symbol function returns the symbol ticker of the token. \n', '     */\n', '    function symbol() public view returns (string) {\n', '        return SYMBOL;\n', '    }\n', '    \n', '    /** \n', '     * @dev name function returns the name of the token. \n', '     */\n', '    function name() public view returns (string) {\n', '        return NAME;\n', '    }\n', '}']
