['pragma solidity ^0.4.24;\n', '\n', "import './DividendTokenStore.sol';\n", "import './Administratable.sol';\n", "import './StandardToken.sol';\n", '\n', 'contract MoriaToken is StandardToken, Administratable {\n', '  \n', '  string public constant name = "MoriaToken";\n', '  string public constant symbol = "MOR";\n', '  uint8 public constant decimals = 18;\n', '\n', '  DividendTokenStore public store;\n', '  bool public canDestroy = true;\n', '  bool public minting = true;\n', '\n', '  modifier isDestroyable() {\n', '    require(canDestroy);\n', '    _;\n', '  }\n', '\n', '  modifier canMint() {\n', '    require(minting);\n', '    _;\n', '  }\n', '\n', '  constructor() public {\n', '  }\n', '\n', '  function () public payable {\n', '    require(store.payIn.value(msg.value)());\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return store.totalSupply();\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return store.balanceOf(_owner);\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    store.transfer(msg.sender, _to, _value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    store.transfer(_from, _to, _value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function pause() public onlyOwner {\n', '    store.pause();\n', '  }\n', '\n', '  function unpause() public onlyOwner {\n', '    store.unpause();\n', '  }\n', '\n', '  function addLock(address _address) onlyAdmin public returns (bool) {\n', '    return store.addLock(_address);\n', '  }\n', '\n', '  function revokeLock(address _address) onlyAdmin public returns (bool) {\n', '    return store.revokeLock(_address);\n', '  }\n', '\n', '  function claimDividends() public returns (uint256 amount) {\n', '    return store.claimDividendsFor(msg.sender);\n', '  }\n', '\n', '  function claimDividendsFor(address _address) public onlyAdmin returns (uint256 amount) {\n', '    return store.claimDividendsFor(_address);\n', '  }\n', '\n', '  function buyBack() public onlyAdmin payable returns (bool) {\n', '    require(store.buyBack.value(msg.value)());\n', '    return true;\n', '  }\n', '\n', '  function claimBuyBack() public returns (bool) {\n', '    return claimBuyBackFor(msg.sender);\n', '  }\n', '\n', '  function claimBuyBackFor(address _address) public onlyAdmin returns (bool) {\n', '    return claimBuyBackFor(_address);\n', '  }\n', ' \n', '  // admin\n', '\n', '  function mint(address _from, address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '    store.mint(_to, _amount);\n', '    emit Transfer(_from, _to, _amount);\n', '  }\n', '\n', '  function endMinting() public onlyOwner canMint returns (bool) {\n', '    minting = false;\n', '  }\n', '\n', '  function upgradeEvent(address _from, address _to) public onlyAdmin {\n', '    emit Transfer(_from, _to,  store.balanceOf(_to));\n', '  }\n', '\n', '  function changeStore(DividendTokenStore _store) public onlyOwner returns (bool) {\n', '    store = _store;\n', '    emit StoreChanged(address(store));\n', '    return true;\n', '  }\n', '\n', '  function transferStoreOwnership() public onlyOwner {\n', '    store.transferOwnership(owner);\n', '  }\n', '\n', '  function destroyToken() public onlyOwner isDestroyable {\n', '    transferStoreOwnership();\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  function disableSelfDestruct() public onlyOwner isDestroyable {\n', '    canDestroy = false;\n', '  } \n', '\n', '  event StoreChanged(address indexed _newStore);\n', '  \n', '}']