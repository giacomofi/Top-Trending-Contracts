['pragma solidity ^0.4.18;\n', ' \n', '//Never Mind :P\n', '/* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract NVT {\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '}\n', '\n', 'contract NVTDrop is Ownable{\n', '  mapping(address => bool) getDropped;\n', '  bool public halted = true;\n', '  uint256 public amout = 1 * 10 ** 4;\n', '  address public NVTAddr;\n', '  NVT NVTFace;\n', '  function setNVTface(address _nvt) public onlyOwner {\n', '    NVTFace = NVT(_nvt);\n', '  }\n', '  function setAmout(uint _amout) onlyOwner {\n', '    amout = _amout;\n', '  }\n', '\n', '  function () public payable{\n', '    require(getDropped[msg.sender] == false);\n', '    require(halted == false);\n', '    getDropped[msg.sender] = true;\n', '    NVTFace.transfer(msg.sender, amout);\n', '  }\n', '\n', '\n', '\n', '  function getStuckCoin (address _to, uint _amout) onlyOwner{\n', '    _to.transfer(_amout);\n', '  }\n', '  function halt() onlyOwner{\n', '    halted = true;\n', '  }\n', '  function unhalt() onlyOwner{\n', '    halted = false;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', ' \n', '//Never Mind :P\n', '/* @dev The Ownable contract has an owner address, and provides basic authorization control\n', '* functions, this simplifies the implementation of "user permissions".\n', '*/\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract NVT {\n', '    function transfer(address _to, uint _value) public returns (bool);\n', '}\n', '\n', 'contract NVTDrop is Ownable{\n', '  mapping(address => bool) getDropped;\n', '  bool public halted = true;\n', '  uint256 public amout = 1 * 10 ** 4;\n', '  address public NVTAddr;\n', '  NVT NVTFace;\n', '  function setNVTface(address _nvt) public onlyOwner {\n', '    NVTFace = NVT(_nvt);\n', '  }\n', '  function setAmout(uint _amout) onlyOwner {\n', '    amout = _amout;\n', '  }\n', '\n', '  function () public payable{\n', '    require(getDropped[msg.sender] == false);\n', '    require(halted == false);\n', '    getDropped[msg.sender] = true;\n', '    NVTFace.transfer(msg.sender, amout);\n', '  }\n', '\n', '\n', '\n', '  function getStuckCoin (address _to, uint _amout) onlyOwner{\n', '    _to.transfer(_amout);\n', '  }\n', '  function halt() onlyOwner{\n', '    halted = true;\n', '  }\n', '  function unhalt() onlyOwner{\n', '    halted = false;\n', '  }\n', '}']
