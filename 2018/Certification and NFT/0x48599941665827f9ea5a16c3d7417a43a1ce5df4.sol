['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tuint256 public totalSupply;\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract DetailedERC20 is ERC20 {\n', '\tstring public name;\n', '\tstring public symbol;\n', '\tuint8 public decimals;\n', '\n', '\tfunction DetailedERC20(string _name, string _symbol, uint8 _decimals) public {\n', '\t\tname = _name;\n', '\t\tsymbol = _symbol;\n', '\t\tdecimals = _decimals;\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\t/**\n', '\t * @dev Transfer tokens from one address to another\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint256 the amount of tokens to be transferred\n', '\t */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t *\n', '\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _value The amount of tokens to be spent.\n', '\t */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t * @param _owner address The address which owns the funds.\n', '\t * @param _spender address The address which will spend the funds.\n', '\t * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t */\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To increment\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _addedValue The amount of tokens to increase the allowance by.\n', '\t */\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To decrement\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t */\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\taddress public owner;\n', '\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '\t/**\n', '\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\t * account.\n', '\t */\n', '\tfunction Ownable() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\n', '\t/**\n', '\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\t * @param newOwner The address to transfer ownership to.\n', '\t */\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\trequire(newOwner != address(0));\n', '\t\tOwnershipTransferred(owner, newOwner);\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '\tevent Pause();\n', '\tevent Unpause();\n', '\n', '\tbool public paused = false;\n', '\n', '\n', '\t/**\n', '\t * @dev Modifier to make a function callable only when the contract is not paused.\n', '\t */\n', '\tmodifier whenNotPaused() {\n', '\t\trequire(!paused);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Modifier to make a function callable only when the contract is paused.\n', '\t */\n', '\tmodifier whenPaused() {\n', '\t\trequire(paused);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev called by the owner to pause, triggers stopped state\n', '\t */\n', '\tfunction pause() onlyOwner whenNotPaused public {\n', '\t\tpaused = true;\n', '\t\tPause();\n', '\t}\n', '\n', '\t/**\n', '\t * @dev called by the owner to unpause, returns to normal state\n', '\t */\n', '\tfunction unpause() onlyOwner whenPaused public {\n', '\t\tpaused = false;\n', '\t\tUnpause();\n', '\t}\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '\tevent Mint(address indexed to, uint256 amount);\n', '\tevent MintFinished();\n', '\n', '\tbool public mintingFinished = false;\n', '\n', '\n', '\tmodifier canMint() {\n', '\t\trequire(!mintingFinished);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to mint tokens\n', '\t * @param _to The address that will receive the minted tokens.\n', '\t * @param _amount The amount of tokens to mint.\n', '\t * @return A boolean that indicates if the operation was successful.\n', '\t */\n', '\tfunction mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '\t\ttotalSupply = totalSupply.add(_amount);\n', '\t\tbalances[_to] = balances[_to].add(_amount);\n', '\t\tMint(_to, _amount);\n', '\t\tTransfer(address(0), _to, _amount);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to stop minting new tokens.\n', '\t * @return True if the operation was successful.\n', '\t */\n', '\tfunction finishMinting() onlyOwner canMint public returns (bool) {\n', '\t\tmintingFinished = true;\n', '\t\tMintFinished();\n', '\t\treturn true;\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', '\n', 'contract CappedToken is MintableToken {\n', '\n', '\tuint256 public cap;\n', '\n', '\tfunction CappedToken(uint256 _cap) public {\n', '\t\trequire(_cap > 0);\n', '\t\tcap = _cap;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to mint tokens\n', '\t * @param _to The address that will receive the minted tokens.\n', '\t * @param _amount The amount of tokens to mint.\n', '\t * @return A boolean that indicates if the operation was successful.\n', '\t */\n', '\tfunction mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '\t\trequire(totalSupply.add(_amount) <= cap);\n', '\n', '\t\treturn super.mint(_to, _amount);\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '\tevent Burn(address indexed burner, uint256 value);\n', '\n', '\t/**\n', '\t * @dev Burns a specific amount of tokens.\n', '\t * @param _value The amount of token to be burned.\n', '\t */\n', '\tfunction burn(uint256 _value) public {\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\t\t// no need to require value <= totalSupply, since that would imply the\n', "\t\t// sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '\t\taddress burner = msg.sender;\n', '\t\tbalances[burner] = balances[burner].sub(_value);\n', '\t\ttotalSupply = totalSupply.sub(_value);\n', '\t\tBurn(burner, _value);\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tuint256 c = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\tuint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\t\treturn c;\n', '\t}\n', '\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '\tusing SafeMath for uint256;\n', '\n', '\t// The token being sold\n', '\tMintableToken public token;\n', '\n', '\t// start and end timestamps where investments are allowed (both inclusive)\n', '\tuint256 public startTime;\n', '\tuint256 public endTime;\n', '\n', '\t// address where funds are collected\n', '\taddress public wallet;\n', '\n', '\t// how many token units a buyer gets per wei\n', '\tuint256 public rate;\n', '\n', '\t// amount of raised money in wei\n', '\tuint256 public weiRaised;\n', '\n', '\t/**\n', '\t * event for token purchase logging\n', '\t * @param purchaser who paid for the tokens\n', '\t * @param beneficiary who got the tokens\n', '\t * @param value weis paid for purchase\n', '\t * @param amount amount of tokens purchased\n', '\t */\n', '\tevent TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '\tfunction Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '\t\trequire(_startTime >= now);\n', '\t\trequire(_endTime >= _startTime);\n', '\t\trequire(_rate > 0);\n', '\t\trequire(_wallet != address(0));\n', '\n', '\t\ttoken = createTokenContract();\n', '\t\tstartTime = _startTime;\n', '\t\tendTime = _endTime;\n', '\t\trate = _rate;\n', '\t\twallet = _wallet;\n', '\t}\n', '\n', '\t// creates the token to be sold.\n', '\t// override this method to have crowdsale of a specific mintable token.\n', '\tfunction createTokenContract() internal returns (MintableToken) {\n', '\t\treturn new MintableToken();\n', '\t}\n', '\n', '\n', '\t// fallback function can be used to buy tokens\n', '\tfunction () external payable {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\t// low level token purchase function\n', '\tfunction buyTokens(address beneficiary) public payable {\n', '\t\trequire(beneficiary != address(0));\n', '\t\trequire(validPurchase());\n', '\n', '\t\tuint256 weiAmount = msg.value;\n', '\n', '\t\t// calculate token amount to be created\n', '\t\tuint256 tokens = weiAmount.mul(rate);\n', '\n', '\t\t// update state\n', '\t\tweiRaised = weiRaised.add(weiAmount);\n', '\n', '\t\ttoken.mint(beneficiary, tokens);\n', '\t\tTokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '\t\tforwardFunds();\n', '\t}\n', '\n', '\t// send ether to the fund collection wallet\n', '\t// override to create custom fund forwarding mechanisms\n', '\tfunction forwardFunds() internal {\n', '\t\twallet.transfer(msg.value);\n', '\t}\n', '\n', '\t// @return true if the transaction can buy tokens\n', '\tfunction validPurchase() internal view returns (bool) {\n', '\t\tbool withinPeriod = now >= startTime && now <= endTime;\n', '\t\tbool nonZeroPurchase = msg.value != 0;\n', '\t\treturn withinPeriod && nonZeroPurchase;\n', '\t}\n', '\n', '\t// @return true if crowdsale event has ended\n', '\tfunction hasEnded() public view returns (bool) {\n', '\t\treturn now > endTime;\n', '\t}\n', '\n', '\n', '}\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 public cap;\n', '\n', '\tfunction CappedCrowdsale(uint256 _cap) public {\n', '\t\trequire(_cap > 0);\n', '\t\tcap = _cap;\n', '\t}\n', '\n', '\t// overriding Crowdsale#validPurchase to add extra cap logic\n', '\t// @return true if investors can buy at the moment\n', '\tfunction validPurchase() internal view returns (bool) {\n', '\t\tbool withinCap = weiRaised.add(msg.value) <= cap;\n', '\t\treturn super.validPurchase() && withinCap;\n', '\t}\n', '\n', '\t// overriding Crowdsale#hasEnded to add cap logic\n', '\t// @return true if crowdsale event has ended\n', '\tfunction hasEnded() public view returns (bool) {\n', '\t\tbool capReached = weiRaised >= cap;\n', '\t\treturn super.hasEnded() || capReached;\n', '\t}\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' *\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '\tfunction transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '\t\treturn super.approve(_spender, _value);\n', '\t}\n', '\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '\t\treturn super.increaseApproval(_spender, _addedValue);\n', '\t}\n', '\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '\t\treturn super.decreaseApproval(_spender, _subtractedValue);\n', '\t}\n', '}\n', '\n', 'contract BftToken is DetailedERC20, CappedToken, BurnableToken, PausableToken {\n', '\n', '\tCappedCrowdsale public crowdsale;\n', '\n', '\tfunction BftToken(\n', '\t\tuint256 _tokenCap,\n', '\t\tuint8 _decimals,\n', '\t\tCappedCrowdsale _crowdsale\n', '\t)\n', '\tDetailedERC20("BF Token", "BFT", _decimals)\n', '\tCappedToken(_tokenCap) public {\n', '\n', '\t\tcrowdsale = _crowdsale;\n', '\t}\n', '\n', '\t// ----------------------------------------------------------------------------------------------------------------\n', '\t// the following is the functionality to upgrade this token smart contract to a new one\n', '\n', '\tMintableToken public newToken = MintableToken(0x0);\n', '\tevent LogRedeem(address beneficiary, uint256 amount);\n', '\n', '\tmodifier hasUpgrade() {\n', '\t\trequire(newToken != MintableToken(0x0));\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction upgrade(MintableToken _newToken) onlyOwner public {\n', '\t\tnewToken = _newToken;\n', '\t}\n', '\n', '\t// overriding BurnableToken#burn to make disable it for public use\n', '\tfunction burn(uint256 _value) public {\n', '\t\trevert();\n', '\t\t_value = _value; // to silence compiler warning\n', '\t}\n', '\n', '\tfunction redeem() hasUpgrade public {\n', '\n', '\t\tvar balance = balanceOf(msg.sender);\n', '\n', '\t\t// burn the tokens in this token smart contract\n', '\t\tsuper.burn(balance);\n', '\n', '\t\t// mint tokens in the new token smart contract\n', '\t\trequire(newToken.mint(msg.sender, balance));\n', '\t\tLogRedeem(msg.sender, balance);\n', '\t}\n', '\n', '\t// ----------------------------------------------------------------------------------------------------------------\n', '\t// we override the token transfer functions to block transfers before startTransfersDate timestamp\n', '\n', '\tmodifier canDoTransfers() {\n', '\t\trequire(hasCrowdsaleFinished());\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction hasCrowdsaleFinished() view public returns(bool) {\n', '\t\treturn crowdsale.hasEnded();\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) public canDoTransfers returns (bool) {\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public canDoTransfers returns (bool) {\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\tfunction approve(address _spender, uint256 _value) public canDoTransfers returns (bool) {\n', '\t\treturn super.approve(_spender, _value);\n', '\t}\n', '\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public canDoTransfers returns (bool success) {\n', '\t\treturn super.increaseApproval(_spender, _addedValue);\n', '\t}\n', '\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public canDoTransfers returns (bool success) {\n', '\t\treturn super.decreaseApproval(_spender, _subtractedValue);\n', '\t}\n', '\n', '\t// ----------------------------------------------------------------------------------------------------------------\n', '\t// functionality to change the token ticker - in case of conflict\n', '\n', '\tfunction changeSymbol(string _symbol) onlyOwner public {\n', '\t\tsymbol = _symbol;\n', '\t}\n', '\n', '\tfunction changeName(string _name) onlyOwner public {\n', '\t\tname = _name;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', 'contract BftCrowdsale is CappedCrowdsale, Pausable {\n', '\n', '\tuint8 public constant tokenDecimals = 18;\n', '\tuint256 public constant etherInWei = 10**uint256(tokenDecimals);\n', '\tuint256 public constant tokenCap = 1000000000 * etherInWei;\n', '\n', '\tuint256 public SALE_CAP_USD;\n', '\tuint256 public BUYER_CAP_LOW_USD;\n', '\tuint256 public BUYER_CAP_HIGH_USD;\n', '\n', '\tuint256 public constant PRICE_MULTIPLIER = 100;\n', '\tuint256 public constant TOKENS_PER_USD = 10;\n', '\n', '\tuint256 public etherPrice = PRICE_MULTIPLIER;\n', '\tuint256 public buyerCapLowEther = etherInWei;\n', '\tuint256 public buyerCapHighEther = etherInWei;\n', '\tuint256 public saleHardCapEther = etherInWei;\n', '\tuint256 public mintRate = TOKENS_PER_USD;\n', '\n', '\taddress public preSaleBfPlatform;\n', '\taddress public company;\n', '\taddress public rewardPool;\n', '\taddress public shareholders;\n', '\taddress public tokenSaleCosts;\n', '\n', '\t// smart contracts that will lock tokens for a pre-defined time\n', '\tTokenTimelock public companyHolding2y;\n', '\tTokenTimelock public shareholdersHolding1y;\n', '\n', '\t// address permissioned to whitelist public sale addresses\n', '\tmapping(address => bool) whitelist;\n', '\n', '\tmapping(address => bool) operators;\n', '\tevent LogOperatorAdd(address newOperator);\n', '\tevent LogOperatorRem(address newOperator);\n', '\n', '\tmodifier onlyOperator() {\n', '\t\trequire(operators[msg.sender]);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyWhitelisted(address _address) {\n', '\t\trequire(whitelist[_address]);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction BftCrowdsale(\n', '\t\tuint256 _startTime,\n', '\t\tuint256 _endTime,\n', '\t\tuint256 _etherPrice,\n', '\t\taddress _wallet,\n', '\n', '\t// addresses with pre-minted tokens\n', '\t\taddress _preSaleBfPlatform,\n', '\t\taddress _company,\n', '\t\taddress _rewardPool,\n', '\t\taddress _shareholders,\n', '\t\taddress _tokenSaleCosts,\n', '\n', '\t// owner of the whitelist function\n', '\t\taddress _operator,\n', '\t\taddress _admin,\n', '\n', '\t\tuint256 _saleCapUsd,\n', '\t\tuint256 _buyerCapLowUsd,\n', '\t\tuint256 _buyerCapHighUsd\n', '\t)\n', '\tCappedCrowdsale(saleHardCapEther)\n', '\tCrowdsale(_startTime, _endTime, mintRate, _wallet) public {\n', '\n', '\t\trequire(_preSaleBfPlatform != address(0x0));\n', '\t\trequire(_company != address(0x0));\n', '\t\trequire(_rewardPool != address(0x0));\n', '\t\trequire(_shareholders != address(0x0));\n', '\t\trequire(_tokenSaleCosts != address(0x0));\n', '\t\trequire(_operator != address(0x0));\n', '\n', '\t\tSALE_CAP_USD = _saleCapUsd;\n', '\t\tBUYER_CAP_LOW_USD = _buyerCapLowUsd;\n', '\t\tBUYER_CAP_HIGH_USD = _buyerCapHighUsd;\n', '\n', '\t\tpreSaleBfPlatform = _preSaleBfPlatform;\n', '\t\tcompany = _company;\n', '\t\trewardPool = _rewardPool;\n', '\t\tshareholders = _shareholders;\n', '\t\ttokenSaleCosts = _tokenSaleCosts;\n', '\n', '\t\taddOperator(_operator);\n', '\t\tupdateEtherPrice(_etherPrice);\n', '\t\tcreateHoldings();\n', '\t\tpreMintTokens();\n', '\n', '\t\t// transfer ownership the the admin multi-sig\n', '\t\ttransferOwnership(_admin);\n', '\t}\n', '\n', '\tfunction updateEtherPrice(uint256 _price) onlyOwner public {\n', '\t\trequire(_price > 0);\n', '\t\trequire(now < startTime);\n', '\n', '\t\tetherPrice = _price;\n', '\t\tbuyerCapLowEther = BUYER_CAP_LOW_USD.mul(etherInWei).mul(PRICE_MULTIPLIER).div(etherPrice);\n', '\t\tbuyerCapHighEther = BUYER_CAP_HIGH_USD.mul(etherInWei).mul(PRICE_MULTIPLIER).div(etherPrice);\n', '\t\tsaleHardCapEther = SALE_CAP_USD.mul(etherInWei).mul(PRICE_MULTIPLIER).div(etherPrice);\n', '\t\tmintRate = TOKENS_PER_USD.mul(etherPrice).div(PRICE_MULTIPLIER);\n', '\n', '\t\t// update vars on parent contracts\n', '\t\tcap = saleHardCapEther;\n', '\t\trate = mintRate;\n', '\t}\n', '\n', '\tfunction createHoldings() internal {\n', '\t\tcompanyHolding2y = new TokenTimelock(token, company, startTime+2 years);\n', '\t\tshareholdersHolding1y = new TokenTimelock(token, shareholders, startTime+1 years);\n', '\t}\n', '\n', '\tfunction preMintTokens() internal {\n', '\t\ttoken.mint(preSaleBfPlatform, 300000000 * etherInWei);\n', '\t\ttoken.mint(companyHolding2y, 300000000 * etherInWei);\n', '\t\ttoken.mint(rewardPool, 200000000 * etherInWei);\n', '\t\ttoken.mint(shareholdersHolding1y, 100000000 * etherInWei);\n', '\t\ttoken.mint(tokenSaleCosts, 70000000 * etherInWei);\n', '\t}\n', '\n', '\tfunction checkSaleEnded() internal {\n', '\t\t// if no further purchases are possible due to lower buyer cap\n', '\t\tif(saleHardCapEther.sub(weiRaised) < buyerCapLowEther) {\n', '\t\t\ttoken.mint(rewardPool, tokenCap.sub(token.totalSupply()));\n', '\t\t}\n', '\t}\n', '\n', '\t// overriding CappedCrowdsale#validPurchase to add extra low/high limits logic\n', '\t// @return true if investors can buy at the moment\n', '\tfunction validPurchase() whenNotPaused\n', '\tinternal view returns (bool) {\n', '\t\tbool aboveLowBuyerCap = (msg.value >= buyerCapLowEther);\n', '\t\tbool underMaxBuyerCap = (msg.value <= buyerCapHighEther);\n', '\t\treturn super.validPurchase() && aboveLowBuyerCap && underMaxBuyerCap;\n', '\t}\n', '\n', '\t// overriding Crowdsale#hasEnded to add token cap logic\n', '\t// @return true if crowdsale event has ended\n', '\tfunction hasEnded() public view returns (bool) {\n', '\t\tbool tokenCapReached = token.totalSupply() == tokenCap;\n', '\t\treturn super.hasEnded() || tokenCapReached;\n', '\t}\n', '\n', '\tfunction buyTokens(address beneficiary)\n', '\tonlyWhitelisted(beneficiary)\n', '\twhenNotPaused\n', '\tpublic payable {\n', '\t\trequire(token.balanceOf(beneficiary)==0);\n', '\t\tsuper.buyTokens(beneficiary);\n', '\t\tcheckSaleEnded();\n', '\t}\n', '\n', '\t// creates the token to be sold.\n', '\t// override this method to have crowdsale of a specific mintable token.\n', '\tfunction createTokenContract() internal returns (MintableToken) {\n', '\t\treturn new BftToken(tokenCap, tokenDecimals, this);\n', '\t}\n', '\n', '\tfunction addWhitelist(address[] beneficiaries) onlyOperator public {\n', '\t\tfor (uint i = 0; i < beneficiaries.length; i++) {\n', '\t\t\twhitelist[beneficiaries[i]] = true;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction remWhitelist(address[] beneficiaries) onlyOperator public {\n', '\t\tfor (uint i = 0; i < beneficiaries.length; i++) {\n', '\t\t\twhitelist[beneficiaries[i]] = false;\n', '\t\t}\n', '\t}\n', '\n', '\tfunction isWhitelisted(address beneficiary) view public returns(bool) {\n', '\t\treturn whitelist[beneficiary];\n', '\t}\n', '\n', '\tfunction addOperator(address _operator) onlyOwner public {\n', '\t\toperators[_operator] = true;\n', '\t\tLogOperatorAdd(_operator);\n', '\t}\n', '\n', '\tfunction remOperator(address _operator) onlyOwner public {\n', '\t\toperators[_operator] = false;\n', '\t\tLogOperatorAdd(_operator);\n', '\t}\n', '\n', '\tfunction isOperator(address _operator) view public returns(bool) {\n', '\t\treturn operators[_operator];\n', '\t}\n', '\n', '\tfunction transferTokenOwnership(address _newOwner) onlyOwner public {\n', '\t\t// only allow transfer at the end of the sale\n', '\t\trequire(hasEnded());\n', '\t\t// stop the minting process on the token as we only allow the crowdsale to mint\n', '\t\ttoken.finishMinting();\n', '\t\ttoken.transferOwnership(_newOwner);\n', '\t}\n', '}']