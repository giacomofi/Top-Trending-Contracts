['pragma solidity ^0.4.16;\n', '\n', 'contract IERC20Token {\n', "    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n", '    function name() public constant returns (string);\n', '    function symbol() public constant returns (string);\n', '    function decimals() public constant returns (uint8);\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address _owner) public constant returns (uint256);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256);\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', 'contract BancorConverter {\n', '    function quickConvert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) payable public returns (uint256);\n', '}\n', '\n', 'contract BancorMarketMaker {\n', '    BancorConverter public constant bancorConverterAddress = BancorConverter(0x578f3c8454F316293DBd31D8C7806050F3B3E2D8);\n', '\n', '    IERC20Token public constant dai = IERC20Token(0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359);\n', '    IERC20Token public constant bancorErc20Eth = IERC20Token(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\n', '    IERC20Token public constant bancorToken = IERC20Token(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\n', '    IERC20Token public constant bancorDaiSmartTokenRelay = IERC20Token(0xee01b3AB5F6728adc137Be101d99c678938E6E72);\n', '    // sell dai price, will be less than normal conversion, _minReturn should be 1/(Dai/Eth price) * .95\n', '    function sellDaiForEth(uint256 _amountDai, uint256 _minReturn) external returns (uint256) {\n', '        require(_amountDai > 0);\n', '        \n', '        IERC20Token(dai).transferFrom(msg.sender, address(this), _amountDai);\n', '        require(IERC20Token(dai).approve(address(bancorConverterAddress), _amountDai));\n', '        \n', '        IERC20Token[] memory daiToEthConversionPath;\n', '        daiToEthConversionPath[0] = dai;\n', '        daiToEthConversionPath[1] = bancorDaiSmartTokenRelay;\n', '        daiToEthConversionPath[2] = bancorDaiSmartTokenRelay;\n', '        daiToEthConversionPath[3] = bancorDaiSmartTokenRelay;\n', '        daiToEthConversionPath[4] = bancorToken;\n', '        daiToEthConversionPath[5] = bancorToken;\n', '        daiToEthConversionPath[6] = bancorErc20Eth;\n', '        bancorConverterAddress.quickConvert(daiToEthConversionPath, _amountDai, _minReturn);\n', '        msg.sender.transfer(this.balance);\n', '        \n', '    }\n', '\n', '    // buy dai price, will be more than normal conversion, _minReturn should be 1/(Dai/Eth price) * 1.05\n', '    function buyDaiWithEth(uint256 _minReturn) payable external returns (uint256) {\n', '        require(msg.value > 0);\n', '        IERC20Token[] memory ethToDaiConversionPath;\n', '        ethToDaiConversionPath[0] = bancorErc20Eth;\n', '        ethToDaiConversionPath[1] = bancorToken;\n', '        ethToDaiConversionPath[2] = bancorToken;\n', '        ethToDaiConversionPath[3] = bancorDaiSmartTokenRelay;\n', '        ethToDaiConversionPath[4] = bancorDaiSmartTokenRelay;\n', '        ethToDaiConversionPath[5] = bancorDaiSmartTokenRelay;\n', '        ethToDaiConversionPath[6] = dai;\n', '        bancorConverterAddress.quickConvert.value(msg.value)(ethToDaiConversionPath, msg.value, _minReturn);\n', '        dai.transfer(msg.sender, dai.balanceOf(address(this)));\n', '        \n', '    }\n', '}']