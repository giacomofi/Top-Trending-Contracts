['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '// File: contracts/Marketplace.sol\n', '\n', 'contract Marketplace is Ownable {\n', '    ERC721 public nft;\n', '\n', '    mapping (uint256 => Listing) public listings;\n', '\n', '    uint256 public minListingSeconds;\n', '    uint256 public maxListingSeconds;\n', '\n', '    struct Listing {\n', '        address seller;\n', '        uint256 startingPrice;\n', '        uint256 minimumPrice;\n', '        uint256 createdAt;\n', '        uint256 durationSeconds;\n', '    }\n', '\n', '    event TokenListed(uint256 indexed _tokenId, uint256 _startingPrice, uint256 _minimumPrice, uint256 _durationSeconds, address _seller);\n', '    event TokenUnlisted(uint256 indexed _tokenId, address _unlister);\n', '    event TokenSold(uint256 indexed _tokenId, uint256 _price, uint256 _paidAmount, address indexed _seller, address _buyer);\n', '\n', '    modifier nftOnly() {\n', '        require(msg.sender == address(nft));\n', '        _;\n', '    }\n', '\n', '    function Marketplace(ERC721 _nft, uint256 _minListingSeconds, uint256 _maxListingSeconds) public {\n', '        nft = _nft;\n', '        minListingSeconds = _minListingSeconds;\n', '        maxListingSeconds = _maxListingSeconds;\n', '    }\n', '\n', '    function list(address _tokenSeller, uint256 _tokenId, uint256 _startingPrice, uint256 _minimumPrice, uint256 _durationSeconds) public nftOnly {\n', '        require(_durationSeconds >= minListingSeconds && _durationSeconds <= maxListingSeconds);\n', '        require(_startingPrice >= _minimumPrice);\n', '        require(! listingActive(_tokenId));\n', '        listings[_tokenId] = Listing(_tokenSeller, _startingPrice, _minimumPrice, now, _durationSeconds);\n', '        nft.takeOwnership(_tokenId);\n', '        TokenListed(_tokenId, _startingPrice, _minimumPrice, _durationSeconds, _tokenSeller);\n', '    }\n', '\n', '    function unlist(address _caller, uint256 _tokenId) public nftOnly {\n', '        address _seller = listings[_tokenId].seller;\n', '        // Allow owner to unlist (via nft) for when it&#39;s time to shut this down\n', '        require(_seller == _caller || address(owner) == _caller);\n', '        nft.transfer(_seller, _tokenId);\n', '        delete listings[_tokenId];\n', '        TokenUnlisted(_tokenId, _caller);\n', '    }\n', '\n', '    function purchase(address _caller, uint256 _tokenId, uint256 _totalPaid) public payable nftOnly {\n', '        Listing memory _listing = listings[_tokenId];\n', '        address _seller = _listing.seller;\n', '\n', '        require(_caller != _seller); // Doesn&#39;t make sense for someone to buy/sell their own token.\n', '        require(listingActive(_tokenId));\n', '\n', '        uint256 _price = currentPrice(_tokenId);\n', '        require(_totalPaid >= _price);\n', '\n', '        delete listings[_tokenId];\n', '\n', '        nft.transfer(_caller, _tokenId);\n', '        _seller.transfer(msg.value);\n', '        TokenSold(_tokenId, _price, _totalPaid, _seller, _caller);\n', '    }\n', '\n', '    function currentPrice(uint256 _tokenId) public view returns (uint256) {\n', '        Listing memory listing = listings[_tokenId];\n', '        require(now >= listing.createdAt);\n', '\n', '        uint256 _deadline = listing.createdAt + listing.durationSeconds;\n', '        require(now <= _deadline);\n', '\n', '        uint256 _elapsedTime = now - listing.createdAt;\n', '        uint256 _progress = (_elapsedTime * 100) / listing.durationSeconds;\n', '        uint256 _delta = listing.startingPrice - listing.minimumPrice;\n', '        return listing.startingPrice - ((_delta * _progress) / 100);\n', '    }\n', '\n', '    function listingActive(uint256 _tokenId) internal view returns (bool) {\n', '        Listing memory listing = listings[_tokenId];\n', '        return listing.createdAt + listing.durationSeconds >= now && now >= listing.createdAt;\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract ERC721Token is ERC721 {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addToken(_to, _tokenId);\n', '    Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Burns a specific token\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n', '    if (approvedFor(_tokenId) != 0) {\n', '      clearApproval(msg.sender, _tokenId);\n', '    }\n', '    removeToken(msg.sender, _tokenId);\n', '    Transfer(msg.sender, 0x0, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '}\n', '\n', '// File: contracts/PineappleArcadeTrophy.sol\n', '\n', 'contract PineappleArcadeTrophy is ERC721Token, Pausable {\n', '    /// @notice Name and Symbol are part of the ERC721 standard\n', '    string public constant name = "PineappleArcadeTrophy";\n', '    string public constant symbol = "DEGEN";\n', '\n', '    Marketplace public marketplace;\n', '    uint256 public maxTrophies;\n', '\n', '    /// @dev trophyId to trophyName\n', '    mapping (uint256 => bytes32) public trophies;\n', '\n', '    function PineappleArcadeTrophy(uint256 _maxTrophies) public {\n', '        maxTrophies = _maxTrophies;\n', '        pause();\n', '    }\n', '\n', '    function setMarketplace(Marketplace _marketplace) external onlyOwner {\n', '        marketplace = _marketplace;\n', '    }\n', '\n', '    function grantTrophy(address _initialOwner, bytes32 _trophyName) external onlyOwner {\n', '        require(totalSupply() < maxTrophies);\n', '        require(_trophyName != 0x0);\n', '        trophies[nextId()] = _trophyName;\n', '        _mint(_initialOwner, nextId());\n', '    }\n', '\n', '    function listTrophy(uint256 _trophyId, uint256 _startingPriceWei, uint256 _minimumPriceWei, uint256 _durationSeconds) external whenNotPaused {\n', '        address _trophySeller = ownerOf(_trophyId);\n', '        require(_trophySeller == msg.sender);\n', '        approve(marketplace, _trophyId);\n', '        marketplace.list(_trophySeller, _trophyId, _startingPriceWei, _minimumPriceWei, _durationSeconds);\n', '    }\n', '\n', '    function unlistTrophy(uint256 _trophyId) external {\n', '        marketplace.unlist(msg.sender, _trophyId);\n', '    }\n', '\n', '    function currentPrice(uint256 _trophyId) public view returns(uint256) {\n', '        return marketplace.currentPrice(_trophyId);\n', '    }\n', '\n', '    function purchaseTrophy(uint256 _trophyId) external payable whenNotPaused {\n', '        // Blockade collects 3.75% of each market transaction, paid by the seller.\n', '        uint256 _blockadeFee = (msg.value * 375) / 10000; // Note: small values prevent Blockade from earning anything\n', '        uint256 _sellerTake = msg.value - _blockadeFee;\n', '        marketplace.purchase.value(_sellerTake)(msg.sender, _trophyId, msg.value);\n', '    }\n', '\n', '    /// @notice With each call to purchaseTrophy, fees will build up in this contract&#39;s balance.\n', '    /// This method allows the contract owner to transfer that balance to their account.\n', '    function withdrawBalance() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function nextId() internal view returns (uint256) {\n', '        return totalSupply() + 1;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '// File: contracts/Marketplace.sol\n', '\n', 'contract Marketplace is Ownable {\n', '    ERC721 public nft;\n', '\n', '    mapping (uint256 => Listing) public listings;\n', '\n', '    uint256 public minListingSeconds;\n', '    uint256 public maxListingSeconds;\n', '\n', '    struct Listing {\n', '        address seller;\n', '        uint256 startingPrice;\n', '        uint256 minimumPrice;\n', '        uint256 createdAt;\n', '        uint256 durationSeconds;\n', '    }\n', '\n', '    event TokenListed(uint256 indexed _tokenId, uint256 _startingPrice, uint256 _minimumPrice, uint256 _durationSeconds, address _seller);\n', '    event TokenUnlisted(uint256 indexed _tokenId, address _unlister);\n', '    event TokenSold(uint256 indexed _tokenId, uint256 _price, uint256 _paidAmount, address indexed _seller, address _buyer);\n', '\n', '    modifier nftOnly() {\n', '        require(msg.sender == address(nft));\n', '        _;\n', '    }\n', '\n', '    function Marketplace(ERC721 _nft, uint256 _minListingSeconds, uint256 _maxListingSeconds) public {\n', '        nft = _nft;\n', '        minListingSeconds = _minListingSeconds;\n', '        maxListingSeconds = _maxListingSeconds;\n', '    }\n', '\n', '    function list(address _tokenSeller, uint256 _tokenId, uint256 _startingPrice, uint256 _minimumPrice, uint256 _durationSeconds) public nftOnly {\n', '        require(_durationSeconds >= minListingSeconds && _durationSeconds <= maxListingSeconds);\n', '        require(_startingPrice >= _minimumPrice);\n', '        require(! listingActive(_tokenId));\n', '        listings[_tokenId] = Listing(_tokenSeller, _startingPrice, _minimumPrice, now, _durationSeconds);\n', '        nft.takeOwnership(_tokenId);\n', '        TokenListed(_tokenId, _startingPrice, _minimumPrice, _durationSeconds, _tokenSeller);\n', '    }\n', '\n', '    function unlist(address _caller, uint256 _tokenId) public nftOnly {\n', '        address _seller = listings[_tokenId].seller;\n', "        // Allow owner to unlist (via nft) for when it's time to shut this down\n", '        require(_seller == _caller || address(owner) == _caller);\n', '        nft.transfer(_seller, _tokenId);\n', '        delete listings[_tokenId];\n', '        TokenUnlisted(_tokenId, _caller);\n', '    }\n', '\n', '    function purchase(address _caller, uint256 _tokenId, uint256 _totalPaid) public payable nftOnly {\n', '        Listing memory _listing = listings[_tokenId];\n', '        address _seller = _listing.seller;\n', '\n', "        require(_caller != _seller); // Doesn't make sense for someone to buy/sell their own token.\n", '        require(listingActive(_tokenId));\n', '\n', '        uint256 _price = currentPrice(_tokenId);\n', '        require(_totalPaid >= _price);\n', '\n', '        delete listings[_tokenId];\n', '\n', '        nft.transfer(_caller, _tokenId);\n', '        _seller.transfer(msg.value);\n', '        TokenSold(_tokenId, _price, _totalPaid, _seller, _caller);\n', '    }\n', '\n', '    function currentPrice(uint256 _tokenId) public view returns (uint256) {\n', '        Listing memory listing = listings[_tokenId];\n', '        require(now >= listing.createdAt);\n', '\n', '        uint256 _deadline = listing.createdAt + listing.durationSeconds;\n', '        require(now <= _deadline);\n', '\n', '        uint256 _elapsedTime = now - listing.createdAt;\n', '        uint256 _progress = (_elapsedTime * 100) / listing.durationSeconds;\n', '        uint256 _delta = listing.startingPrice - listing.minimumPrice;\n', '        return listing.startingPrice - ((_delta * _progress) / 100);\n', '    }\n', '\n', '    function listingActive(uint256 _tokenId) internal view returns (bool) {\n', '        Listing memory listing = listings[_tokenId];\n', '        return listing.createdAt + listing.durationSeconds >= now && now >= listing.createdAt;\n', '    }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract ERC721Token is ERC721 {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addToken(_to, _tokenId);\n', '    Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Burns a specific token\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n', '    if (approvedFor(_tokenId) != 0) {\n', '      clearApproval(msg.sender, _tokenId);\n', '    }\n', '    removeToken(msg.sender, _tokenId);\n', '    Transfer(msg.sender, 0x0, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '}\n', '\n', '// File: contracts/PineappleArcadeTrophy.sol\n', '\n', 'contract PineappleArcadeTrophy is ERC721Token, Pausable {\n', '    /// @notice Name and Symbol are part of the ERC721 standard\n', '    string public constant name = "PineappleArcadeTrophy";\n', '    string public constant symbol = "DEGEN";\n', '\n', '    Marketplace public marketplace;\n', '    uint256 public maxTrophies;\n', '\n', '    /// @dev trophyId to trophyName\n', '    mapping (uint256 => bytes32) public trophies;\n', '\n', '    function PineappleArcadeTrophy(uint256 _maxTrophies) public {\n', '        maxTrophies = _maxTrophies;\n', '        pause();\n', '    }\n', '\n', '    function setMarketplace(Marketplace _marketplace) external onlyOwner {\n', '        marketplace = _marketplace;\n', '    }\n', '\n', '    function grantTrophy(address _initialOwner, bytes32 _trophyName) external onlyOwner {\n', '        require(totalSupply() < maxTrophies);\n', '        require(_trophyName != 0x0);\n', '        trophies[nextId()] = _trophyName;\n', '        _mint(_initialOwner, nextId());\n', '    }\n', '\n', '    function listTrophy(uint256 _trophyId, uint256 _startingPriceWei, uint256 _minimumPriceWei, uint256 _durationSeconds) external whenNotPaused {\n', '        address _trophySeller = ownerOf(_trophyId);\n', '        require(_trophySeller == msg.sender);\n', '        approve(marketplace, _trophyId);\n', '        marketplace.list(_trophySeller, _trophyId, _startingPriceWei, _minimumPriceWei, _durationSeconds);\n', '    }\n', '\n', '    function unlistTrophy(uint256 _trophyId) external {\n', '        marketplace.unlist(msg.sender, _trophyId);\n', '    }\n', '\n', '    function currentPrice(uint256 _trophyId) public view returns(uint256) {\n', '        return marketplace.currentPrice(_trophyId);\n', '    }\n', '\n', '    function purchaseTrophy(uint256 _trophyId) external payable whenNotPaused {\n', '        // Blockade collects 3.75% of each market transaction, paid by the seller.\n', '        uint256 _blockadeFee = (msg.value * 375) / 10000; // Note: small values prevent Blockade from earning anything\n', '        uint256 _sellerTake = msg.value - _blockadeFee;\n', '        marketplace.purchase.value(_sellerTake)(msg.sender, _trophyId, msg.value);\n', '    }\n', '\n', "    /// @notice With each call to purchaseTrophy, fees will build up in this contract's balance.\n", '    /// This method allows the contract owner to transfer that balance to their account.\n', '    function withdrawBalance() external onlyOwner {\n', '        owner.transfer(this.balance);\n', '    }\n', '\n', '    function nextId() internal view returns (uint256) {\n', '        return totalSupply() + 1;\n', '    }\n', '}']
