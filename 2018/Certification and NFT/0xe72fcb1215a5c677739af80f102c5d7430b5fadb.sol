['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract zombieToken {\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function buyCard(address from, uint256 value) public returns (bool success);\n', '}\n', '\n', 'contract zombieMain {\n', '  function createZombie(uint8 star,bytes32 dna,uint16 roletype,bool isFreeZombie,address player) public;\n', '}\n', '\n', 'contract zombieCreator is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  event NewZombie(bytes32 dna, uint8 star,uint16 roletype, bool isfree);\n', '\n', '  mapping (address => bool) isGetFreeZombie;\n', '\n', '  uint createRandomZombie_EtherPrice = 0.01 ether;\n', '  uint createRandomZombie_ZOBToken_smallpack = 100 * 10 ** 18;\n', '  uint createRandomZombie_ZOBToken_goldpack = 400 * 10 ** 18;\n', '  \n', '  zombieMain c = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n', '  zombieToken t = zombieToken(0x83B8C8A08938B878017fDF0Ec0A689313F75739D);\n', '  \n', '  uint public FreeZombieCount = 999999;\n', '\n', '  function isGetFreeZombiew(address _owner) public view returns (bool _getFreeZombie) {\n', '    return isGetFreeZombie[_owner];\n', '  }\n', '\n', '  function createRandomZombie_ZOB_smallpack() public {\n', '\n', '    require(t.buyCard(msg.sender, createRandomZombie_ZOBToken_smallpack));\n', '    \n', '    for(uint8 i = 0;i<3;i++){\n', '       \n', '       bytes32 dna;\n', '\n', '       if(i == 0){\n', '         dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, "CryptoDeads DNA Seed");\n', '       } else if(i == 1){\n', '         dna = keccak256(msg.sender, now, block.blockhash(block.number-1), "CryptoDeads DNA Seed", block.coinbase, block.difficulty);\n', '       } else {\n', '         dna = keccak256("CryptoDeads DNA Seed", now, block.difficulty, block.coinbase, block.blockhash(block.number-1), msg.sender);\n', '       }\n', '\n', '       uint star = uint(dna) % 1000 +1;\n', '       uint roletype = 1;\n', '\n', '       if(star<=700){\n', '            star = 1;\n', '            roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 3 + 1;\n', '       }else if(star <= 980){\n', '            star = 2;\n', '            roletype = 4;\n', '       }else{\n', '            star = 3;\n', '            roletype = uint(keccak256(block.blockhash(block.number-1), msg.sender, block.difficulty, block.coinbase, now)) % 3 + 5; \n', '       }\n', '\n', '       c.createZombie(uint8(star),dna,uint16(roletype),false,msg.sender);\n', '       NewZombie(dna,uint8(star),uint16(roletype),false);\n', '    }\n', '  }\n', '\n', '  function createRandomZombie_ZOB_goldpack() public {\n', '\n', '    require(t.buyCard(msg.sender, createRandomZombie_ZOBToken_goldpack));\n', '    \n', '    for(uint8 i = 0;i<3;i++){\n', '\n', '       bytes32 dna;\n', '       \n', '       if(i == 0){\n', '         dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, "CryptoDeads DNA Seed");\n', '       } else if(i == 1){\n', '         dna = keccak256(msg.sender, now, block.blockhash(block.number-1), "CryptoDeads DNA Seed", block.coinbase, block.difficulty);\n', '       } else {\n', '         dna = keccak256("CryptoDeads DNA Seed", now, block.difficulty, block.coinbase, block.blockhash(block.number-1), msg.sender);\n', '       }\n', '\n', '       uint star = uint(dna) % 1000 +1;\n', '       uint roletype = 2;\n', '\n', '       if(star<=700){\n', '            star = 2;\n', '            roletype = 4;\n', '       }else if(star <= 950){\n', '            star = 3;\n', '            roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 3 + 5;\n', '       }else{\n', '            star = 4;\n', '            roletype = uint(keccak256(block.blockhash(block.number-1), msg.sender, block.difficulty, block.coinbase, now)) % 3 + 9;\n', '       }\n', '\n', '       c.createZombie(uint8(star),dna,uint16(roletype),false,msg.sender);\n', '       NewZombie(dna,uint8(star),uint16(roletype),false);\n', '    }\n', '  }\n', '\n', '  function createRandomZombie_FreeZombie() public {\n', '    require(!isGetFreeZombie[msg.sender]);\n', '    require(FreeZombieCount>=1);\n', '\n', '    uint ran = uint(keccak256(block.coinbase,block.difficulty,now, block.blockhash(block.number-1))) % 100 + 1;\n', '\n', '    uint roletype = 1;\n', '    uint8 star = 1;\n', '\n', '    if(ran>=90){\n', '      roletype = 2;\n', '      star = 4;\n', '    } else {\n', '      roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 3 + 1;\n', '    }\n', '    \n', '    bytes32 dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, "CryptoDeads DNA Seed");\n', '    \n', '    c.createZombie(star,dna,uint16(roletype),true,msg.sender);\n', '    isGetFreeZombie[msg.sender] = true;\n', '    FreeZombieCount--;\n', '\n', '    NewZombie(dna,uint8(star),uint16(roletype),true);\n', '  }\n', '  \n', '  function createRandomZombie_Ether() public payable{\n', '    require(msg.value == createRandomZombie_EtherPrice);\n', '    \n', '    for(uint8 i = 0;i<3;i++){\n', '       bytes32 dna;\n', '       \n', '       if(i == 0){\n', '         dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, "CryptoDeads DNA Seed");\n', '       } else if(i == 1){\n', '         dna = keccak256(msg.sender, now, block.blockhash(block.number-1), "CryptoDeads DNA Seed", block.coinbase, block.difficulty);\n', '       } else {\n', '         dna = keccak256("CryptoDeads DNA Seed", now, block.difficulty, block.coinbase, block.blockhash(block.number-1), msg.sender);\n', '       }\n', '\n', '       uint star = uint(dna) % 1000 + 1;\n', '       uint roletype = 4;\n', '\n', '       if(star<=500){\n', '            star = 2;\n', '       }else if(star <= 850){\n', '            star = 3;\n', '            roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 4 + 5;\n', '       }else{\n', '            star = 4;\n', '            roletype = uint(keccak256(block.blockhash(block.number-1), msg.sender, block.difficulty, block.coinbase, now)) % 4 + 9;\n', '       } \n', '\n', '       c.createZombie(uint8(star),dna,uint16(roletype),false,msg.sender);\n', '       \n', '       NewZombie(dna,uint8(star),uint16(roletype),true);\n', '    }\n', '  }\n', '  \n', '  function changeFreeZombiewCount(uint16 _count) public onlyOwner {\n', '      FreeZombieCount = _count;\n', '  }\n', '  \n', '  function withdrawEther(uint _ether) public onlyOwner{\n', '      msg.sender.transfer(_ether);\n', '  }\n', '\n', '  function withdrawZOB(uint _zob) public onlyOwner{\n', '      t.transfer(msg.sender, _zob);\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract zombieToken {\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '  function buyCard(address from, uint256 value) public returns (bool success);\n', '}\n', '\n', 'contract zombieMain {\n', '  function createZombie(uint8 star,bytes32 dna,uint16 roletype,bool isFreeZombie,address player) public;\n', '}\n', '\n', 'contract zombieCreator is Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  event NewZombie(bytes32 dna, uint8 star,uint16 roletype, bool isfree);\n', '\n', '  mapping (address => bool) isGetFreeZombie;\n', '\n', '  uint createRandomZombie_EtherPrice = 0.01 ether;\n', '  uint createRandomZombie_ZOBToken_smallpack = 100 * 10 ** 18;\n', '  uint createRandomZombie_ZOBToken_goldpack = 400 * 10 ** 18;\n', '  \n', '  zombieMain c = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n', '  zombieToken t = zombieToken(0x83B8C8A08938B878017fDF0Ec0A689313F75739D);\n', '  \n', '  uint public FreeZombieCount = 999999;\n', '\n', '  function isGetFreeZombiew(address _owner) public view returns (bool _getFreeZombie) {\n', '    return isGetFreeZombie[_owner];\n', '  }\n', '\n', '  function createRandomZombie_ZOB_smallpack() public {\n', '\n', '    require(t.buyCard(msg.sender, createRandomZombie_ZOBToken_smallpack));\n', '    \n', '    for(uint8 i = 0;i<3;i++){\n', '       \n', '       bytes32 dna;\n', '\n', '       if(i == 0){\n', '         dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, "CryptoDeads DNA Seed");\n', '       } else if(i == 1){\n', '         dna = keccak256(msg.sender, now, block.blockhash(block.number-1), "CryptoDeads DNA Seed", block.coinbase, block.difficulty);\n', '       } else {\n', '         dna = keccak256("CryptoDeads DNA Seed", now, block.difficulty, block.coinbase, block.blockhash(block.number-1), msg.sender);\n', '       }\n', '\n', '       uint star = uint(dna) % 1000 +1;\n', '       uint roletype = 1;\n', '\n', '       if(star<=700){\n', '            star = 1;\n', '            roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 3 + 1;\n', '       }else if(star <= 980){\n', '            star = 2;\n', '            roletype = 4;\n', '       }else{\n', '            star = 3;\n', '            roletype = uint(keccak256(block.blockhash(block.number-1), msg.sender, block.difficulty, block.coinbase, now)) % 3 + 5; \n', '       }\n', '\n', '       c.createZombie(uint8(star),dna,uint16(roletype),false,msg.sender);\n', '       NewZombie(dna,uint8(star),uint16(roletype),false);\n', '    }\n', '  }\n', '\n', '  function createRandomZombie_ZOB_goldpack() public {\n', '\n', '    require(t.buyCard(msg.sender, createRandomZombie_ZOBToken_goldpack));\n', '    \n', '    for(uint8 i = 0;i<3;i++){\n', '\n', '       bytes32 dna;\n', '       \n', '       if(i == 0){\n', '         dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, "CryptoDeads DNA Seed");\n', '       } else if(i == 1){\n', '         dna = keccak256(msg.sender, now, block.blockhash(block.number-1), "CryptoDeads DNA Seed", block.coinbase, block.difficulty);\n', '       } else {\n', '         dna = keccak256("CryptoDeads DNA Seed", now, block.difficulty, block.coinbase, block.blockhash(block.number-1), msg.sender);\n', '       }\n', '\n', '       uint star = uint(dna) % 1000 +1;\n', '       uint roletype = 2;\n', '\n', '       if(star<=700){\n', '            star = 2;\n', '            roletype = 4;\n', '       }else if(star <= 950){\n', '            star = 3;\n', '            roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 3 + 5;\n', '       }else{\n', '            star = 4;\n', '            roletype = uint(keccak256(block.blockhash(block.number-1), msg.sender, block.difficulty, block.coinbase, now)) % 3 + 9;\n', '       }\n', '\n', '       c.createZombie(uint8(star),dna,uint16(roletype),false,msg.sender);\n', '       NewZombie(dna,uint8(star),uint16(roletype),false);\n', '    }\n', '  }\n', '\n', '  function createRandomZombie_FreeZombie() public {\n', '    require(!isGetFreeZombie[msg.sender]);\n', '    require(FreeZombieCount>=1);\n', '\n', '    uint ran = uint(keccak256(block.coinbase,block.difficulty,now, block.blockhash(block.number-1))) % 100 + 1;\n', '\n', '    uint roletype = 1;\n', '    uint8 star = 1;\n', '\n', '    if(ran>=90){\n', '      roletype = 2;\n', '      star = 4;\n', '    } else {\n', '      roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 3 + 1;\n', '    }\n', '    \n', '    bytes32 dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, "CryptoDeads DNA Seed");\n', '    \n', '    c.createZombie(star,dna,uint16(roletype),true,msg.sender);\n', '    isGetFreeZombie[msg.sender] = true;\n', '    FreeZombieCount--;\n', '\n', '    NewZombie(dna,uint8(star),uint16(roletype),true);\n', '  }\n', '  \n', '  function createRandomZombie_Ether() public payable{\n', '    require(msg.value == createRandomZombie_EtherPrice);\n', '    \n', '    for(uint8 i = 0;i<3;i++){\n', '       bytes32 dna;\n', '       \n', '       if(i == 0){\n', '         dna = keccak256(block.blockhash(block.number-1), block.difficulty, block.coinbase, now, msg.sender, "CryptoDeads DNA Seed");\n', '       } else if(i == 1){\n', '         dna = keccak256(msg.sender, now, block.blockhash(block.number-1), "CryptoDeads DNA Seed", block.coinbase, block.difficulty);\n', '       } else {\n', '         dna = keccak256("CryptoDeads DNA Seed", now, block.difficulty, block.coinbase, block.blockhash(block.number-1), msg.sender);\n', '       }\n', '\n', '       uint star = uint(dna) % 1000 + 1;\n', '       uint roletype = 4;\n', '\n', '       if(star<=500){\n', '            star = 2;\n', '       }else if(star <= 850){\n', '            star = 3;\n', '            roletype = uint(keccak256(msg.sender ,block.blockhash(block.number-1), block.coinbase, now, block.difficulty)) % 4 + 5;\n', '       }else{\n', '            star = 4;\n', '            roletype = uint(keccak256(block.blockhash(block.number-1), msg.sender, block.difficulty, block.coinbase, now)) % 4 + 9;\n', '       } \n', '\n', '       c.createZombie(uint8(star),dna,uint16(roletype),false,msg.sender);\n', '       \n', '       NewZombie(dna,uint8(star),uint16(roletype),true);\n', '    }\n', '  }\n', '  \n', '  function changeFreeZombiewCount(uint16 _count) public onlyOwner {\n', '      FreeZombieCount = _count;\n', '  }\n', '  \n', '  function withdrawEther(uint _ether) public onlyOwner{\n', '      msg.sender.transfer(_ether);\n', '  }\n', '\n', '  function withdrawZOB(uint _zob) public onlyOwner{\n', '      t.transfer(msg.sender, _zob);\n', '  }\n', '}']
