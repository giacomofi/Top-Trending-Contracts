['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC223 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/223\n', ' */\n', 'interface ERC223I {\n', '\n', '  function balanceOf(address _owner) external view returns (uint balance);\n', '  \n', '  function name() external view returns (string _name);\n', '  function symbol() external view returns (string _symbol);\n', '  function decimals() external view returns (uint8 _decimals);\n', '  function totalSupply() external view returns (uint256 supply);\n', '\n', '  function transfer(address to, uint value) external returns (bool ok);\n', '  function transfer(address to, uint value, bytes data) external returns (bool ok);\n', '  function transfer(address to, uint value, bytes data, string custom_fallback) external returns (bool ok);\n', '\n', '  function releaseTokenTransfer() external;\n', '  \n', '  event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);  \n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'contract SafeMath {\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow.\n', '    */\n', '    function safeSub(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        assert(y <= x);\n', '        uint256 z = x - y;\n', '        return z;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function safeAdd(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x + y;\n', '        assert(z >= x);\n', '        return z;\n', '    }\n', '\t\n', '\t/**\n', '    * @dev Integer division of two numbers, reverts on division by zero.\n', '    */\n', '    function safeDiv(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x / y;\n', '        return z;\n', '    }\n', '    \n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\t\n', '    function safeMul(uint256 x, uint256 y) internal pure returns (uint256) {    \n', '        if (x == 0) {\n', '            return 0;\n', '        }\n', '    \n', '        uint256 z = x * y;\n', '        assert(z / x == y);\n', '        return z;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the integer percentage of the number.\n', '    */\n', '    function safePerc(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        if (x == 0) {\n', '            return 0;\n', '        }\n', '        \n', '        uint256 z = x * y;\n', '        assert(z / x == y);    \n', '        z = z / 10000; // percent to hundredths\n', '        return z;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the minimum value of two numbers.\n', '    */\t\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x <= y ? x : y;\n', '        return z;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the maximum value of two numbers.\n', '    */\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        uint256 z = x >= y ? x : y;\n', '        return z;\n', '    }\n', '}\n', '/**\n', ' * @title Ownable contract - base contract with an owner\n', ' */\n', 'contract Ownable {\n', '  \n', '  address public owner;\n', '  address public newOwner;\n', '\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '  \n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    assert(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    assert(_newOwner != address(0));      \n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Accept transferOwnership.\n', '   */\n', '  function acceptOwnership() public {\n', '    if (msg.sender == newOwner) {\n', '      emit OwnershipTransferred(owner, newOwner);\n', '      owner = newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RateContract Interface\n', ' * @dev \n', ' */\n', 'interface RateContractI {\n', '    // returns the Currency information\n', '    function getCurrency(bytes32 _code) external view returns (string, uint, uint, uint, uint);\n', '\n', '    // returns Rate of coin to PMC (with the exception of rate["ETH"]) \n', '    function getRate(bytes32 _code) external view returns (uint);\n', '\n', '    // returns Price of Object in the specified currency (local user currency)\n', '    // _code - specified currency\n', '    // _amount - price of object in PMC\n', '    function getLocalPrice(bytes32 _code, uint _amount) external view returns (uint);\n', '\n', '    // returns Price of Object in the crypto currency (ETH)    \n', '    // _amount - price of object in PMC\n', '    function getCryptoPrice(uint _amount) external view returns (uint);\n', '\n', '    // update rates for a specific coin\n', '    function updateRate(bytes32 _code, uint _pmc) external;\n', '}\n', '\n', '/**\n', ' * @title Agent contract - base contract with an agent\n', ' */\n', 'contract Agent is Ownable {\n', '\n', '  address public defAgent;\n', '\n', '  mapping(address => bool) public Agents;  \n', '\n', '  event UpdatedAgent(address _agent, bool _status);\n', '\n', '  constructor() public {\n', '    defAgent = msg.sender;\n', '    Agents[msg.sender] = true;\n', '  }\n', '  \n', '  modifier onlyAgent() {\n', '    assert(Agents[msg.sender]);\n', '    _;\n', '  }\n', '  \n', '  function updateAgent(address _agent, bool _status) public onlyOwner {\n', '    assert(_agent != address(0));\n', '    Agents[_agent] = _status;\n', '\n', '    emit UpdatedAgent(_agent, _status);\n', '  }  \n', '}\n', '\n', '/**\n', ' * @title Standard ERC223 token\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/223\n', ' */\n', 'contract ERC223 is ERC223I, Agent, SafeMath {\n', '\n', '  mapping(address => uint) balances;\n', '  \n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '  uint256 public totalSupply;\n', '\n', '  address public crowdsale = address(0);\n', '  bool public released = false;\n', '\n', '  /**\n', '   * @dev Limit token transfer until the crowdsale is over.\n', '   */\n', '  modifier canTransfer() {\n', '    assert(released || msg.sender == crowdsale);\n', '    _;\n', '  }\n', '\n', '  modifier onlyCrowdsaleContract() {\n', '    assert(msg.sender == crowdsale);\n', '    _;\n', '  }  \n', '  \n', '  function name() public view returns (string _name) {\n', '    return name;\n', '  }\n', '\n', '  function symbol() public view returns (string _symbol) {\n', '    return symbol;\n', '  }\n', '\n', '  function decimals() public view returns (uint8 _decimals) {\n', '    return decimals;\n', '  }\n', '\n', '  function totalSupply() public view returns (uint256 _totalSupply) {\n', '    return totalSupply;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint balance) {\n', '    return balances[_owner];\n', '  }  \n', '\n', '  // if bytecode exists then the _addr is a contract.\n', '  function isContract(address _addr) private view returns (bool is_contract) {\n', '    uint length;\n', '    assembly {\n', '      //retrieve the size of the code on target address, this needs assembly\n', '      length := extcodesize(_addr)\n', '    }\n', '    return (length>0);\n', '  }\n', '  \n', '  // function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data) external canTransfer() returns (bool success) {      \n', '    if(isContract(_to)) {\n', '      return transferToContract(_to, _value, _data);\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '  \n', '  // standard function transfer similar to ERC20 transfer with no _data.\n', '  // added due to backwards compatibility reasons.\n', '  function transfer(address _to, uint _value) external canTransfer() returns (bool success) {      \n', '    bytes memory empty;\n', '    if(isContract(_to)) {\n', '      return transferToContract(_to, _value, empty);\n', '    } else {\n', '      return transferToAddress(_to, _value, empty);\n', '    }\n', '  }\n', '\n', '  // function that is called when transaction target is an address\n', '  function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    emit Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '  \n', '  // function that is called when transaction target is a contract\n', '  function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n', '    if (balanceOf(msg.sender) < _value) revert();\n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    assert(_to.call.value(0)(abi.encodeWithSignature("tokenFallback(address,uint256,bytes)", msg.sender, _value, _data)));\n', '    emit Transfer(msg.sender, _to, _value, _data);\n', '    return true;\n', '  }\n', '\n', '  // function that is called when a user or another contract wants to transfer funds .\n', '  function transfer(address _to, uint _value, bytes _data, string _custom_fallback) external canTransfer() returns (bool success) {      \n', '    if(isContract(_to)) {\n', '      if (balanceOf(msg.sender) < _value) revert();\n', '      balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n', '      balances[_to] = safeAdd(balanceOf(_to), _value);      \n', '      assert(_to.call.value(0)(abi.encodeWithSignature(_custom_fallback), msg.sender, _value, _data));    \n', '      emit Transfer(msg.sender, _to, _value, _data);\n', '      return true;\n', '    } else {\n', '      return transferToAddress(_to, _value, _data);\n', '    }\n', '  }\n', '\n', '  function setCrowdsaleContract(address _contract) external onlyOwner {\n', '    crowdsale = _contract;\n', '  }\n', '\n', '  /**\n', '   * @dev One way function to release the tokens to the wild. Can be called only from the crowdsale contract.\n', '   */\n', '  function releaseTokenTransfer() external onlyCrowdsaleContract {\n', '    released = true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SABIGlobal CrowdSale management contract\n', ' */\n', 'contract CrowdSale is Agent, SafeMath {\n', '\n', '  uint public decimals = 8;\n', '  uint public multiplier = 10 ** decimals;\n', '  \n', '  RateContractI public RateContract;\n', '  ERC223I public ERC223;\n', '\n', '  uint public totalSupply;\n', '  \n', '  uint public SoftCap;\n', '  uint public HardCap;\n', '\n', '  /* The UNIX timestamp start/end date of the crowdsale */\n', '  uint public startsAt;\n', '  uint public endsIn;\n', '  \n', '  /* How many unique addresses that have invested */\n', '  uint public investorCount = 0;\n', '  \n', '  /* How many wei of funding we have raised */\n', '  uint public weiRaised = 0;\n', '  \n', '  /* How many usd of funding we have raised */\n', '  uint public usdRaised = 0;\n', '  \n', '  /* The number of tokens already sold through this contract*/\n', '  uint public tokensSold = 0;\n', '  \n', '  /* Has this crowdsale been finalized */\n', '  bool public finalized;\n', '\n', '  /** State\n', '   *\n', '   * - Preparing: All contract initialization calls and variables have not been set yet\n', '   * - PrivateSale: Private sale\n', '   * - PreSale: Pre Sale\n', '   * - Sale: Active crowdsale\n', '   * - Success: HardCap reached\n', '   * - Failure: HardCap not reached before ending time\n', '   * - Finalized: The finalized has been called and succesfully executed\n', '   */\n', '  enum State{Unknown, Preparing, PrivateSale, PreSale, Sale, Success, Failure, Finalized}\n', '\n', '  /* How much ETH each address has invested to this crowdsale */\n', '  mapping (address => uint) public investedAmountOf;\n', '  \n', '  /* How much tokens this crowdsale has credited for each investor address */\n', '  mapping (address => uint) public tokenAmountOf;\n', '  \n', '  /* Wei will be transfered on this address */\n', '  address public multisigWallet;\n', '  \n', '  /* How much wei we have given back to investors. */\n', '  uint public weiRefunded = 0;\n', '\n', '  /* token price in USD */\n', '  uint public price;\n', '\n', '  struct _Stage {\n', '    uint startsAt;\n', '    uint endsIn;\n', '    uint bonus;    \n', '    uint min;\n', '    uint tokenAmount;\n', '    mapping (address => uint) tokenAmountOfStage; // how much tokens this crowdsale has credited for each investor address in a particular stage\n', '  }\n', '\n', '  _Stage[5] public Stages;\n', '\n', '  mapping (bytes32 => uint) public cap;\n', '  uint[5] public duration;\n', '\n', '  /* A new investment was made */\n', '  event Invested(address investor, uint weiAmount, uint tokenAmount, uint bonusAmount);\n', '  /* Receive ether on the contract */\n', '  event ReceiveEtherOnContract(address sender, uint amount);\n', '  \n', '  /**\n', '   * @dev Constructor sets default parameters\n', '   * @param _startsAt1 = 1539993600 (20.10.2018)\n', '   * @param _startsAt2 = 1543104000 (25.11.2018)\n', '   * @param _startsAt3 = 1544313600 (09.12.2018)\n', '   * @param _startsAt4 = 1545523200 (23.12.2018)\n', '   * @param _startsAt5 = 1552176000 (10.03.2019)\n', '   */\n', '  constructor(address _multisigWallet, uint _priceTokenInUSDCents, uint _startsAt1, uint _startsAt2, uint _startsAt3, uint _startsAt4, uint _startsAt5) public {\n', '    \n', '    duration[0] = 36 days;\n', '    duration[1] = 14 days;\n', '    duration[2] = 14 days;\n', '    duration[3] =  9 days;  \n', '    duration[4] = 32 days;\n', '\n', '    initialization(_multisigWallet, _priceTokenInUSDCents, _startsAt1, _startsAt2, _startsAt3, _startsAt4, _startsAt5);\n', '  }\n', '\n', '  function hash(State _data) private pure returns (bytes32 _hash) {\n', '    return keccak256(abi.encodePacked(_data));\n', '  }\n', '\n', '  function initialization(address _multisigWallet, uint _priceTokenInUSDCents, uint _startsAt1, uint _startsAt2, uint _startsAt3, uint _startsAt4, uint _startsAt5) public onlyOwner {\n', '\n', '    require(_multisigWallet != address(0) && _priceTokenInUSDCents > 0);\n', '\n', '    require(_startsAt1 < _startsAt2 &&\n', '            _startsAt2 >= _startsAt1 + duration[0] &&\n', '            _startsAt3 >= _startsAt2 + duration[1] &&\n', '            _startsAt4 >= _startsAt3 + duration[2] &&\n', '            _startsAt5 >= _startsAt4 + duration[3]);\n', '\n', '    multisigWallet =_multisigWallet;\n', '    startsAt = _startsAt1;\n', '    endsIn = _startsAt5 + duration[4];\n', '    price = _priceTokenInUSDCents;\n', '\n', '    SoftCap =  200 * (10**6) * multiplier;\n', '    HardCap = 1085 * (10**6) * multiplier;\n', '\n', '    cap[hash(State.PrivateSale)] = 150 * (10**6) * multiplier +  60 * (10**6) * multiplier;\n', '    cap[hash(State.PreSale)]     = 500 * (10**6) * multiplier + 125 * (10**6) * multiplier;\n', '    cap[hash(State.Sale)]        = 250 * (10**6) * multiplier;\n', '\n', '    Stages[0] = _Stage({startsAt: _startsAt1, endsIn:_startsAt1 + duration[0] - 1, bonus: 4000, min: 1250 * 10**3 * multiplier, tokenAmount: 0});\n', '    Stages[1] = _Stage({startsAt: _startsAt2, endsIn:_startsAt2 + duration[1] - 1, bonus: 2500, min: 2500 * multiplier, tokenAmount: 0});\n', '    Stages[2] = _Stage({startsAt: _startsAt3, endsIn:_startsAt3 + duration[2] - 1, bonus: 2000, min: 2500 * multiplier, tokenAmount: 0});\n', '    Stages[3] = _Stage({startsAt: _startsAt4, endsIn:_startsAt4 + duration[3],     bonus: 1500, min: 2500 * multiplier, tokenAmount: 0});\n', '    Stages[4] = _Stage({startsAt: _startsAt5, endsIn:_startsAt5 + duration[4],     bonus:    0, min: 1000 * multiplier, tokenAmount: 0});\n', '  }\n', '  \n', '  /** \n', '   * @dev Crowdfund state\n', '   * @return State current state\n', '   */\n', '  function getState() public constant returns (State) {\n', '    if (finalized) return State.Finalized;\n', '    else if (ERC223 == address(0) || RateContract == address(0) || now < startsAt) return State.Preparing;\n', '    else if (now >= Stages[0].startsAt && now <= Stages[0].endsIn) return State.PrivateSale;\n', '    else if (now >= Stages[1].startsAt && now <= Stages[3].endsIn) return State.PreSale;\n', '    else if (now > Stages[3].endsIn && now < Stages[4].startsAt) return State.Preparing;\n', '    else if (now >= Stages[4].startsAt && now <= Stages[4].endsIn) return State.Sale;    \n', '    else if (isCrowdsaleFull()) return State.Success;\n', '    else return State.Failure;\n', '  }\n', '\n', '  /** \n', '   * @dev Gets the current stage.\n', '   * @return uint current stage\n', '   */\n', '  function getStage() public constant returns (uint) {\n', '    uint i;\n', '    for (i = 0; i < Stages.length; i++) {\n', '      if (now >= Stages[i].startsAt && now < Stages[i].endsIn) {\n', '        return i;\n', '      }\n', '    }\n', '    return Stages.length-1;\n', '  }\n', '\n', '  /**\n', '   * Buy tokens from the contract\n', '   */\n', '  function() public payable {\n', '    investInternal(msg.sender, msg.value);\n', '  }\n', '\n', '  /**\n', '   * Buy tokens from personal area (ETH or BTC)\n', '   */\n', '  function investByAgent(address _receiver, uint _weiAmount) external onlyAgent {\n', '    investInternal(_receiver, _weiAmount);\n', '  }\n', '  \n', '  /**\n', '   * Make an investment.\n', '   *\n', '   * @param _receiver The Ethereum address who receives the tokens\n', '   * @param _weiAmount The invested amount\n', '   *\n', '   */\n', '  function investInternal(address _receiver, uint _weiAmount) private {\n', '\n', '    require(_weiAmount > 0);\n', '\n', '    State currentState = getState();\n', '    require(currentState == State.PrivateSale || currentState == State.PreSale || currentState == State.Sale);\n', '\n', '    uint currentStage = getStage();\n', '    \n', '    // Calculating the number of tokens\n', '    uint tokenAmount = 0;\n', '    uint bonusAmount = 0;\n', '    (tokenAmount, bonusAmount) = calculateTokens(_weiAmount, currentStage);\n', '\n', '    tokenAmount = safeAdd(tokenAmount, bonusAmount);\n', '    \n', '    // Check cap for every State\n', '    if (currentState == State.PrivateSale || currentState == State.Sale) {\n', '      require(safeAdd(Stages[currentStage].tokenAmount, tokenAmount) <= cap[hash(currentState)]);\n', '    } else {\n', '      uint TokenSoldOnPreSale = safeAdd(safeAdd(Stages[1].tokenAmount, Stages[2].tokenAmount), Stages[3].tokenAmount);\n', '      TokenSoldOnPreSale = safeAdd(TokenSoldOnPreSale, tokenAmount);\n', '      require(TokenSoldOnPreSale <= cap[hash(currentState)]);\n', '    }      \n', '\n', '    // Check HardCap\n', '    require(safeAdd(tokensSold, tokenAmount) <= HardCap);\n', '    \n', '    // Update stage counts  \n', '    Stages[currentStage].tokenAmount  = safeAdd(Stages[currentStage].tokenAmount, tokenAmount);\n', '    Stages[currentStage].tokenAmountOfStage[_receiver] = safeAdd(Stages[currentStage].tokenAmountOfStage[_receiver], tokenAmount);\n', '\t\n', '    // Update investor\n', '    if(investedAmountOf[_receiver] == 0) {       \n', '       investorCount++; // A new investor\n', '    }  \n', '    investedAmountOf[_receiver] = safeAdd(investedAmountOf[_receiver], _weiAmount);\n', '    tokenAmountOf[_receiver] = safeAdd(tokenAmountOf[_receiver], tokenAmount);\n', '\n', '    // Update totals\n', '    weiRaised  = safeAdd(weiRaised, _weiAmount);\n', '    usdRaised  = safeAdd(usdRaised, weiToUsdCents(_weiAmount));\n', '    tokensSold = safeAdd(tokensSold, tokenAmount);    \n', '\n', '    // Send ETH to multisigWallet\n', '    multisigWallet.transfer(msg.value);\n', '\n', '    // Send tokens to _receiver\n', '    ERC223.transfer(_receiver, tokenAmount);\n', '\n', '    // Tell us invest was success\n', '    emit Invested(_receiver, _weiAmount, tokenAmount, bonusAmount);\n', '  }  \n', '  \n', '  /**\n', '   * @dev Calculating tokens count\n', '   * @param _weiAmount invested\n', '   * @param _stage stage of crowdsale\n', '   * @return tokens amount\n', '   */\n', '  function calculateTokens(uint _weiAmount, uint _stage) internal view returns (uint tokens, uint bonus) {\n', '    uint usdAmount = weiToUsdCents(_weiAmount);    \n', '    tokens = safeDiv(safeMul(multiplier, usdAmount), price);\n', '\n', '    // Check minimal amount to buy\n', '    require(tokens >= Stages[_stage].min);    \n', '\n', '    bonus = safePerc(tokens, Stages[_stage].bonus);\n', '    return (tokens, bonus);\n', '  }\n', '  \n', '  /**\n', '   * @dev Converts wei value into USD cents according to current exchange rate\n', '   * @param weiValue wei value to convert\n', '   * @return USD cents equivalent of the wei value\n', '   */\n', '  function weiToUsdCents(uint weiValue) internal view returns (uint) {\n', '    return safeDiv(safeMul(weiValue, RateContract.getRate("ETH")), 1 ether);\n', '  }\n', '  \n', '  /**\n', '   * @dev Check if SoftCap was reached.\n', '   * @return true if the crowdsale has raised enough money to be a success\n', '   */\n', '  function isCrowdsaleFull() public constant returns (bool) {\n', '    if(tokensSold >= SoftCap){\n', '      return true;  \n', '    }\n', '    return false;\n', '  }\n', '\n', '  /**\n', '   * @dev burn unsold tokens and allow transfer of tokens.\n', '   */\n', '  function finalize() public onlyOwner {    \n', '    require(!finalized);\n', '    require(now > endsIn);\n', '\n', '    if(HardCap > tokensSold){\n', '      // burn unsold tokens \n', '      ERC223.transfer(address(0), safeSub(HardCap, tokensSold));\n', '    }\n', '\n', '    // allow transfer of tokens\n', '    ERC223.releaseTokenTransfer();\n', '\n', '    finalized = true;\n', '  }\n', '\n', '  /**\n', '   * Receives ether on the contract\n', '   */\n', '  function receive() public payable {\n', '    emit ReceiveEtherOnContract(msg.sender, msg.value);\n', '  }\n', '\n', '  function setTokenContract(address _contract) external onlyOwner {\n', '    ERC223 = ERC223I(_contract);\n', '    totalSupply = ERC223.totalSupply();\n', '    HardCap = ERC223.balanceOf(address(this));\n', '  }\n', '\n', '  function setRateContract(address _contract) external onlyOwner {\n', '    RateContract = RateContractI(_contract);\n', '  }\n', '\n', '  function setDurations(uint _duration1, uint _duration2, uint _duration3, uint _duration4, uint _duration5) public onlyOwner {\n', '    duration[0] = _duration1;\n', '    duration[1] = _duration2;\n', '    duration[2] = _duration3;\n', '    duration[3] = _duration4;\n', '    duration[4] = _duration5;\n', '  }\n', '}']