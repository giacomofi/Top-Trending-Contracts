['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint256;\n', '    \n', '  mapping (address => bool) public staff;\n', '  mapping (address => uint256) balances;\n', '  uint256 totalSupply_;\n', '  mapping (address => uint256) public uniqueTokens;\n', '  mapping (address => uint256) public preSaleTokens;\n', '  mapping (address => uint256) public crowdSaleTokens;\n', '  mapping (address => uint256) public freezeTokens;\n', '  mapping (address => uint256) public freezeTimeBlock;\n', '  uint256 public launchTime = 999999999999999999999999999999;\n', '  uint256 public totalFreezeTokens = 0;\n', '  bool public listing = false;\n', '  bool public freezing = true;\n', '  address public agentAddress;\n', '  \n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '  \n', '  modifier afterListing() {\n', '    require(listing == true || owner == msg.sender || agentAddress == msg.sender);\n', '    _;\n', '  }\n', '  \n', '  function checkVesting(address sender) public view returns (uint256) {\n', '    if (now >= launchTime.add(270 days)) {\n', '        return balances[sender];\n', '    } else if (now >= launchTime.add(180 days)) {\n', '        return balances[sender].sub(uniqueTokens[sender].mul(35).div(100));\n', '    } else if (now >= launchTime.add(120 days)) {\n', '        return balances[sender].sub(uniqueTokens[sender].mul(7).div(10));\n', '    } else if (now >= launchTime.add(90 days)) {\n', '        return balances[sender].sub((uniqueTokens[sender].mul(7).div(10)).add(crowdSaleTokens[sender].mul(2).div(10)));\n', '    } else if (now >= launchTime.add(60 days)) {\n', '        return balances[sender].sub(uniqueTokens[sender].add(preSaleTokens[sender].mul(3).div(10)).add(crowdSaleTokens[sender].mul(4).div(10)));\n', '    } else if (now >= launchTime.add(30 days)) {\n', '        return balances[sender].sub(uniqueTokens[sender].add(preSaleTokens[sender].mul(6).div(10)).add(crowdSaleTokens[sender].mul(6).div(10)));\n', '    } else {\n', '        return balances[sender].sub(uniqueTokens[sender].add(preSaleTokens[sender].mul(9).div(10)).add(crowdSaleTokens[sender].mul(8).div(10)));\n', '    }\n', '  }\n', '  \n', '  function checkVestingWithFrozen(address sender) public view returns (uint256) {\n', '    if (freezing) {\n', '        \n', '      if (freezeTimeBlock[sender] <= now) {\n', '          return checkVesting(sender);\n', '      } else {\n', '          return checkVesting(sender).sub(freezeTokens[sender]);\n', '      }\n', '    \n', '    } else {\n', '        return checkVesting(sender);\n', '    }\n', '  }\n', '  \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) afterListing public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    if (!staff[msg.sender]) {\n', '        require(_value <= checkVestingWithFrozen(msg.sender));\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    if (!staff[_owner]) {\n', '        return checkVestingWithFrozen(_owner);\n', '    }\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) afterListing public {\n', '    require(_value <= balances[msg.sender]);\n', '    if (!staff[msg.sender]) {\n', '        require(_value <= checkVestingWithFrozen(msg.sender));\n', '    }\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '    emit Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BurnableToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) afterListing public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    if (!staff[_from]) {\n', '        require(_value <= checkVestingWithFrozen(_from));\n', '    }\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '}\n', '\n', 'contract AlbosWallet is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public withdrawFoundersTokens;\n', '  uint256 public withdrawReservedTokens;\n', '\n', '  address public foundersAddress;\n', '  address public reservedAddress;\n', '\n', '  AlbosToken public albosAddress;\n', '  \n', '  constructor(address _albosAddress, address _foundersAddress, address _reservedAddress) public {\n', '    albosAddress = AlbosToken(_albosAddress);\n', '    owner = albosAddress;\n', '\n', '    foundersAddress = _foundersAddress;\n', '    reservedAddress = _reservedAddress;\n', '  }\n', '\n', '  modifier onlyFounders() {\n', '    require(msg.sender == foundersAddress);\n', '    _;\n', '  }\n', '\n', '  modifier onlyReserved() {\n', '    require(msg.sender == reservedAddress);\n', '    _;\n', '  }\n', '\n', '  function viewFoundersTokens() public view returns (uint256) {\n', '    if (now >= albosAddress.launchTime().add(270 days)) {\n', '      return albosAddress.foundersSupply();\n', '    } else if (now >= albosAddress.launchTime().add(180 days)) {\n', '      return albosAddress.foundersSupply().mul(65).div(100);\n', '    } else if (now >= albosAddress.launchTime().add(90 days)) {\n', '      return albosAddress.foundersSupply().mul(3).div(10);\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function viewReservedTokens() public view returns (uint256) {\n', '    if (now >= albosAddress.launchTime().add(270 days)) {\n', '      return albosAddress.reservedSupply();\n', '    } else if (now >= albosAddress.launchTime().add(180 days)) {\n', '      return albosAddress.reservedSupply().mul(65).div(100);\n', '    } else if (now >= albosAddress.launchTime().add(90 days)) {\n', '      return albosAddress.reservedSupply().mul(3).div(10);\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function getFoundersTokens(uint256 _tokens) public onlyFounders {\n', '    uint256 tokens = _tokens.mul(10 ** 18);\n', '    require(withdrawFoundersTokens.add(tokens) <= viewFoundersTokens());\n', '    albosAddress.transfer(foundersAddress, tokens);\n', '    withdrawFoundersTokens = withdrawFoundersTokens.add(tokens);\n', '  }\n', '\n', '  function getReservedTokens(uint256 _tokens) public onlyReserved {\n', '    uint256 tokens = _tokens.mul(10 ** 18);\n', '    require(withdrawReservedTokens.add(tokens) <= viewReservedTokens());\n', '    albosAddress.transfer(reservedAddress, tokens);\n', '    withdrawReservedTokens = withdrawReservedTokens.add(tokens);\n', '  }\n', '}\n', '\n', 'contract AlbosToken is StandardToken {\n', '  string constant public name = "ALBOS Token";\n', '  string constant public symbol = "ALB";\n', '  uint256 public decimals = 18;\n', '  \n', '  uint256 public INITIAL_SUPPLY = uint256(28710000000).mul(10 ** decimals); // 28,710,000,000 tokens\n', '  uint256 public foundersSupply = uint256(4306500000).mul(10 ** decimals); // 4,306,500,000 tokens\n', '  uint256 public reservedSupply = uint256(2871000000).mul(10 ** decimals); // 2,871,000,000 tokens\n', '  AlbosWallet public albosWallet;\n', '  \n', '  constructor() public {\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[address(this)] = totalSupply_;\n', '    emit Transfer(0x0, address(this), totalSupply_);\n', '\n', '    agentAddress = msg.sender;\n', '    staff[owner] = true;\n', '    staff[agentAddress] = true;\n', '  }\n', '  \n', '  modifier onlyAgent() {\n', '    require(msg.sender == agentAddress || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function startListing() public onlyOwner {\n', '    require(!listing);\n', '    launchTime = now;\n', '    listing = true;\n', '  }\n', '\n', '  function setTeamContract(address _albosWallet) external onlyOwner {\n', '\n', '    albosWallet = AlbosWallet(_albosWallet);\n', '\n', '    balances[address(albosWallet)] = balances[address(albosWallet)].add(foundersSupply).add(reservedSupply);\n', '    balances[address(this)] = balances[address(this)].sub(foundersSupply).sub(reservedSupply);\n', '     emit Transfer(address(this), address(albosWallet), balances[address(albosWallet)]);\n', '  }\n', '\n', '  function addUniqueSaleTokens(address sender, uint256 amount) external onlyAgent {\n', '    uniqueTokens[sender] = uniqueTokens[sender].add(amount);\n', '    \n', '    balances[address(this)] = balances[address(this)].sub(amount);\n', '    balances[sender] = balances[sender].add(amount);\n', '    emit Transfer(address(this), sender, amount);\n', '  }\n', '  \n', '  function addUniqueSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\n', '    require(sender.length > 0 && sender.length == amount.length);\n', '    \n', '    for(uint i = 0; i < sender.length; i++) {\n', '      uniqueTokens[sender[i]] = uniqueTokens[sender[i]].add(amount[i]);\n', '      balances[address(this)] = balances[address(this)].sub(amount[i]);\n', '      balances[sender[i]] = balances[sender[i]].add(amount[i]);\n', '      emit Transfer(address(this), sender[i], amount[i]);\n', '    }\n', '  }\n', '  \n', '  function addPrivateSaleTokens(address sender, uint256 amount) external onlyAgent {\n', '    balances[address(this)] = balances[address(this)].sub(amount);\n', '    balances[sender] = balances[sender].add(amount);\n', '    emit Transfer(address(this), sender, amount);\n', '  }\n', '  \n', '  function addPrivateSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\n', '    require(sender.length > 0 && sender.length == amount.length);\n', '    \n', '    for(uint i = 0; i < sender.length; i++) {\n', '      balances[address(this)] = balances[address(this)].sub(amount[i]);\n', '      balances[sender[i]] = balances[sender[i]].add(amount[i]);\n', '      emit Transfer(address(this), sender[i], amount[i]);\n', '    }\n', '  }\n', '  \n', '  function addPreSaleTokens(address sender, uint256 amount) external onlyAgent {\n', '    preSaleTokens[sender] = preSaleTokens[sender].add(amount);\n', '    \n', '    balances[address(this)] = balances[address(this)].sub(amount);\n', '    balances[sender] = balances[sender].add(amount);\n', '    emit Transfer(address(this), sender, amount);\n', '  }\n', '  \n', '  function addPreSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\n', '    require(sender.length > 0 && sender.length == amount.length);\n', '    \n', '    for(uint i = 0; i < sender.length; i++) {\n', '      preSaleTokens[sender[i]] = preSaleTokens[sender[i]].add(amount[i]);\n', '      balances[address(this)] = balances[address(this)].sub(amount[i]);\n', '      balances[sender[i]] = balances[sender[i]].add(amount[i]);\n', '      emit Transfer(address(this), sender[i], amount[i]);\n', '    }\n', '  }\n', '  \n', '  function addCrowdSaleTokens(address sender, uint256 amount) external onlyAgent {\n', '    crowdSaleTokens[sender] = crowdSaleTokens[sender].add(amount);\n', '    \n', '    balances[address(this)] = balances[address(this)].sub(amount);\n', '    balances[sender] = balances[sender].add(amount);\n', '    emit Transfer(address(this), sender, amount);\n', '  }\n', '\n', '  function addCrowdSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\n', '    require(sender.length > 0 && sender.length == amount.length);\n', '    \n', '    for(uint i = 0; i < sender.length; i++) {\n', '      crowdSaleTokens[sender[i]] = crowdSaleTokens[sender[i]].add(amount[i]);\n', '      balances[address(this)] = balances[address(this)].sub(amount[i]);\n', '      balances[sender[i]] = balances[sender[i]].add(amount[i]);\n', '      emit Transfer(address(this), sender[i], amount[i]);\n', '    }\n', '  }\n', '  \n', '  function addFrostTokens(address sender, uint256 amount, uint256 blockTime) public onlyAgent {\n', '\n', '    totalFreezeTokens = totalFreezeTokens.add(amount);\n', '    require(totalFreezeTokens <= totalSupply_.mul(2).div(10));\n', '\n', '    freezeTokens[sender] = amount;\n', '    freezeTimeBlock[sender] = blockTime;\n', '  }\n', '  \n', '  function transferAndFrostTokens(address sender, uint256 amount, uint256 blockTime) external onlyAgent {\n', '    balances[address(this)] = balances[address(this)].sub(amount);\n', '    balances[sender] = balances[sender].add(amount);\n', '    emit Transfer(address(this), sender, amount);\n', '    addFrostTokens(sender, amount, blockTime);\n', '  }\n', '  \n', '  function addFrostTokensMulti(address[] sender, uint256[] amount, uint256[] blockTime) external onlyAgent {\n', '    require(sender.length > 0 && sender.length == amount.length && amount.length == blockTime.length);\n', '\n', '    for(uint i = 0; i < sender.length; i++) {\n', '      totalFreezeTokens = totalFreezeTokens.add(amount[i]);\n', '      freezeTokens[sender[i]] = amount[i];\n', '      freezeTimeBlock[sender[i]] = blockTime[i];\n', '    }\n', '    require(totalFreezeTokens <= totalSupply_.mul(2).div(10));\n', '  }\n', '  \n', '  function transferAgent(address _agent) external onlyOwner {\n', '    agentAddress = _agent;\n', '  }\n', '\n', '  function addStaff(address _staff) external onlyOwner {\n', '    staff[_staff] = true;\n', '  }\n', '\n', '  function killFrost() external onlyOwner {\n', '    freezing = false;\n', '  }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '  using SafeMath for uint256;\n', '    \n', '  mapping (address => bool) public staff;\n', '  mapping (address => uint256) balances;\n', '  uint256 totalSupply_;\n', '  mapping (address => uint256) public uniqueTokens;\n', '  mapping (address => uint256) public preSaleTokens;\n', '  mapping (address => uint256) public crowdSaleTokens;\n', '  mapping (address => uint256) public freezeTokens;\n', '  mapping (address => uint256) public freezeTimeBlock;\n', '  uint256 public launchTime = 999999999999999999999999999999;\n', '  uint256 public totalFreezeTokens = 0;\n', '  bool public listing = false;\n', '  bool public freezing = true;\n', '  address public agentAddress;\n', '  \n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '  \n', '  modifier afterListing() {\n', '    require(listing == true || owner == msg.sender || agentAddress == msg.sender);\n', '    _;\n', '  }\n', '  \n', '  function checkVesting(address sender) public view returns (uint256) {\n', '    if (now >= launchTime.add(270 days)) {\n', '        return balances[sender];\n', '    } else if (now >= launchTime.add(180 days)) {\n', '        return balances[sender].sub(uniqueTokens[sender].mul(35).div(100));\n', '    } else if (now >= launchTime.add(120 days)) {\n', '        return balances[sender].sub(uniqueTokens[sender].mul(7).div(10));\n', '    } else if (now >= launchTime.add(90 days)) {\n', '        return balances[sender].sub((uniqueTokens[sender].mul(7).div(10)).add(crowdSaleTokens[sender].mul(2).div(10)));\n', '    } else if (now >= launchTime.add(60 days)) {\n', '        return balances[sender].sub(uniqueTokens[sender].add(preSaleTokens[sender].mul(3).div(10)).add(crowdSaleTokens[sender].mul(4).div(10)));\n', '    } else if (now >= launchTime.add(30 days)) {\n', '        return balances[sender].sub(uniqueTokens[sender].add(preSaleTokens[sender].mul(6).div(10)).add(crowdSaleTokens[sender].mul(6).div(10)));\n', '    } else {\n', '        return balances[sender].sub(uniqueTokens[sender].add(preSaleTokens[sender].mul(9).div(10)).add(crowdSaleTokens[sender].mul(8).div(10)));\n', '    }\n', '  }\n', '  \n', '  function checkVestingWithFrozen(address sender) public view returns (uint256) {\n', '    if (freezing) {\n', '        \n', '      if (freezeTimeBlock[sender] <= now) {\n', '          return checkVesting(sender);\n', '      } else {\n', '          return checkVesting(sender).sub(freezeTokens[sender]);\n', '      }\n', '    \n', '    } else {\n', '        return checkVesting(sender);\n', '    }\n', '  }\n', '  \n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) afterListing public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    if (!staff[msg.sender]) {\n', '        require(_value <= checkVestingWithFrozen(msg.sender));\n', '    }\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    if (!staff[_owner]) {\n', '        return checkVestingWithFrozen(_owner);\n', '    }\n', '    return balances[_owner];\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) afterListing public {\n', '    require(_value <= balances[msg.sender]);\n', '    if (!staff[msg.sender]) {\n', '        require(_value <= checkVestingWithFrozen(msg.sender));\n', '    }\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '    emit Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BurnableToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) afterListing public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    if (!staff[_from]) {\n', '        require(_value <= checkVestingWithFrozen(_from));\n', '    }\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  \n', '}\n', '\n', 'contract AlbosWallet is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public withdrawFoundersTokens;\n', '  uint256 public withdrawReservedTokens;\n', '\n', '  address public foundersAddress;\n', '  address public reservedAddress;\n', '\n', '  AlbosToken public albosAddress;\n', '  \n', '  constructor(address _albosAddress, address _foundersAddress, address _reservedAddress) public {\n', '    albosAddress = AlbosToken(_albosAddress);\n', '    owner = albosAddress;\n', '\n', '    foundersAddress = _foundersAddress;\n', '    reservedAddress = _reservedAddress;\n', '  }\n', '\n', '  modifier onlyFounders() {\n', '    require(msg.sender == foundersAddress);\n', '    _;\n', '  }\n', '\n', '  modifier onlyReserved() {\n', '    require(msg.sender == reservedAddress);\n', '    _;\n', '  }\n', '\n', '  function viewFoundersTokens() public view returns (uint256) {\n', '    if (now >= albosAddress.launchTime().add(270 days)) {\n', '      return albosAddress.foundersSupply();\n', '    } else if (now >= albosAddress.launchTime().add(180 days)) {\n', '      return albosAddress.foundersSupply().mul(65).div(100);\n', '    } else if (now >= albosAddress.launchTime().add(90 days)) {\n', '      return albosAddress.foundersSupply().mul(3).div(10);\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function viewReservedTokens() public view returns (uint256) {\n', '    if (now >= albosAddress.launchTime().add(270 days)) {\n', '      return albosAddress.reservedSupply();\n', '    } else if (now >= albosAddress.launchTime().add(180 days)) {\n', '      return albosAddress.reservedSupply().mul(65).div(100);\n', '    } else if (now >= albosAddress.launchTime().add(90 days)) {\n', '      return albosAddress.reservedSupply().mul(3).div(10);\n', '    } else {\n', '      return 0;\n', '    }\n', '  }\n', '\n', '  function getFoundersTokens(uint256 _tokens) public onlyFounders {\n', '    uint256 tokens = _tokens.mul(10 ** 18);\n', '    require(withdrawFoundersTokens.add(tokens) <= viewFoundersTokens());\n', '    albosAddress.transfer(foundersAddress, tokens);\n', '    withdrawFoundersTokens = withdrawFoundersTokens.add(tokens);\n', '  }\n', '\n', '  function getReservedTokens(uint256 _tokens) public onlyReserved {\n', '    uint256 tokens = _tokens.mul(10 ** 18);\n', '    require(withdrawReservedTokens.add(tokens) <= viewReservedTokens());\n', '    albosAddress.transfer(reservedAddress, tokens);\n', '    withdrawReservedTokens = withdrawReservedTokens.add(tokens);\n', '  }\n', '}\n', '\n', 'contract AlbosToken is StandardToken {\n', '  string constant public name = "ALBOS Token";\n', '  string constant public symbol = "ALB";\n', '  uint256 public decimals = 18;\n', '  \n', '  uint256 public INITIAL_SUPPLY = uint256(28710000000).mul(10 ** decimals); // 28,710,000,000 tokens\n', '  uint256 public foundersSupply = uint256(4306500000).mul(10 ** decimals); // 4,306,500,000 tokens\n', '  uint256 public reservedSupply = uint256(2871000000).mul(10 ** decimals); // 2,871,000,000 tokens\n', '  AlbosWallet public albosWallet;\n', '  \n', '  constructor() public {\n', '    totalSupply_ = INITIAL_SUPPLY;\n', '    balances[address(this)] = totalSupply_;\n', '    emit Transfer(0x0, address(this), totalSupply_);\n', '\n', '    agentAddress = msg.sender;\n', '    staff[owner] = true;\n', '    staff[agentAddress] = true;\n', '  }\n', '  \n', '  modifier onlyAgent() {\n', '    require(msg.sender == agentAddress || msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function startListing() public onlyOwner {\n', '    require(!listing);\n', '    launchTime = now;\n', '    listing = true;\n', '  }\n', '\n', '  function setTeamContract(address _albosWallet) external onlyOwner {\n', '\n', '    albosWallet = AlbosWallet(_albosWallet);\n', '\n', '    balances[address(albosWallet)] = balances[address(albosWallet)].add(foundersSupply).add(reservedSupply);\n', '    balances[address(this)] = balances[address(this)].sub(foundersSupply).sub(reservedSupply);\n', '     emit Transfer(address(this), address(albosWallet), balances[address(albosWallet)]);\n', '  }\n', '\n', '  function addUniqueSaleTokens(address sender, uint256 amount) external onlyAgent {\n', '    uniqueTokens[sender] = uniqueTokens[sender].add(amount);\n', '    \n', '    balances[address(this)] = balances[address(this)].sub(amount);\n', '    balances[sender] = balances[sender].add(amount);\n', '    emit Transfer(address(this), sender, amount);\n', '  }\n', '  \n', '  function addUniqueSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\n', '    require(sender.length > 0 && sender.length == amount.length);\n', '    \n', '    for(uint i = 0; i < sender.length; i++) {\n', '      uniqueTokens[sender[i]] = uniqueTokens[sender[i]].add(amount[i]);\n', '      balances[address(this)] = balances[address(this)].sub(amount[i]);\n', '      balances[sender[i]] = balances[sender[i]].add(amount[i]);\n', '      emit Transfer(address(this), sender[i], amount[i]);\n', '    }\n', '  }\n', '  \n', '  function addPrivateSaleTokens(address sender, uint256 amount) external onlyAgent {\n', '    balances[address(this)] = balances[address(this)].sub(amount);\n', '    balances[sender] = balances[sender].add(amount);\n', '    emit Transfer(address(this), sender, amount);\n', '  }\n', '  \n', '  function addPrivateSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\n', '    require(sender.length > 0 && sender.length == amount.length);\n', '    \n', '    for(uint i = 0; i < sender.length; i++) {\n', '      balances[address(this)] = balances[address(this)].sub(amount[i]);\n', '      balances[sender[i]] = balances[sender[i]].add(amount[i]);\n', '      emit Transfer(address(this), sender[i], amount[i]);\n', '    }\n', '  }\n', '  \n', '  function addPreSaleTokens(address sender, uint256 amount) external onlyAgent {\n', '    preSaleTokens[sender] = preSaleTokens[sender].add(amount);\n', '    \n', '    balances[address(this)] = balances[address(this)].sub(amount);\n', '    balances[sender] = balances[sender].add(amount);\n', '    emit Transfer(address(this), sender, amount);\n', '  }\n', '  \n', '  function addPreSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\n', '    require(sender.length > 0 && sender.length == amount.length);\n', '    \n', '    for(uint i = 0; i < sender.length; i++) {\n', '      preSaleTokens[sender[i]] = preSaleTokens[sender[i]].add(amount[i]);\n', '      balances[address(this)] = balances[address(this)].sub(amount[i]);\n', '      balances[sender[i]] = balances[sender[i]].add(amount[i]);\n', '      emit Transfer(address(this), sender[i], amount[i]);\n', '    }\n', '  }\n', '  \n', '  function addCrowdSaleTokens(address sender, uint256 amount) external onlyAgent {\n', '    crowdSaleTokens[sender] = crowdSaleTokens[sender].add(amount);\n', '    \n', '    balances[address(this)] = balances[address(this)].sub(amount);\n', '    balances[sender] = balances[sender].add(amount);\n', '    emit Transfer(address(this), sender, amount);\n', '  }\n', '\n', '  function addCrowdSaleTokensMulti(address[] sender, uint256[] amount) external onlyAgent {\n', '    require(sender.length > 0 && sender.length == amount.length);\n', '    \n', '    for(uint i = 0; i < sender.length; i++) {\n', '      crowdSaleTokens[sender[i]] = crowdSaleTokens[sender[i]].add(amount[i]);\n', '      balances[address(this)] = balances[address(this)].sub(amount[i]);\n', '      balances[sender[i]] = balances[sender[i]].add(amount[i]);\n', '      emit Transfer(address(this), sender[i], amount[i]);\n', '    }\n', '  }\n', '  \n', '  function addFrostTokens(address sender, uint256 amount, uint256 blockTime) public onlyAgent {\n', '\n', '    totalFreezeTokens = totalFreezeTokens.add(amount);\n', '    require(totalFreezeTokens <= totalSupply_.mul(2).div(10));\n', '\n', '    freezeTokens[sender] = amount;\n', '    freezeTimeBlock[sender] = blockTime;\n', '  }\n', '  \n', '  function transferAndFrostTokens(address sender, uint256 amount, uint256 blockTime) external onlyAgent {\n', '    balances[address(this)] = balances[address(this)].sub(amount);\n', '    balances[sender] = balances[sender].add(amount);\n', '    emit Transfer(address(this), sender, amount);\n', '    addFrostTokens(sender, amount, blockTime);\n', '  }\n', '  \n', '  function addFrostTokensMulti(address[] sender, uint256[] amount, uint256[] blockTime) external onlyAgent {\n', '    require(sender.length > 0 && sender.length == amount.length && amount.length == blockTime.length);\n', '\n', '    for(uint i = 0; i < sender.length; i++) {\n', '      totalFreezeTokens = totalFreezeTokens.add(amount[i]);\n', '      freezeTokens[sender[i]] = amount[i];\n', '      freezeTimeBlock[sender[i]] = blockTime[i];\n', '    }\n', '    require(totalFreezeTokens <= totalSupply_.mul(2).div(10));\n', '  }\n', '  \n', '  function transferAgent(address _agent) external onlyOwner {\n', '    agentAddress = _agent;\n', '  }\n', '\n', '  function addStaff(address _staff) external onlyOwner {\n', '    staff[_staff] = true;\n', '  }\n', '\n', '  function killFrost() external onlyOwner {\n', '    freezing = false;\n', '  }\n', '}']
