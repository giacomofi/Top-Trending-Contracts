['// Lottery Source code\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/// @title A base contract to control ownership\n', '/// @author cuilichen\n', 'contract OwnerBase {\n', '\n', '    // The addresses of the accounts that can execute actions within each roles.\n', '    address public ceoAddress;\n', '    address public cfoAddress;\n', '    address public cooAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '    \n', '    /// constructor\n', '    function OwnerBase() public {\n', '       ceoAddress = msg.sender;\n', '       cfoAddress = msg.sender;\n', '       cooAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Access modifier for CEO-only functionality\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CFO-only functionality\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '    \n', '    /// @dev Access modifier for COO-only functionality\n', '    modifier onlyCOO() {\n', '        require(msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '\n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCFO The address of the new COO\n', '    function setCFO(address _newCFO) external onlyCEO {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '    \n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCOO The address of the new COO\n', '    function setCOO(address _newCOO) external onlyCEO {\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCOO whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CFO or COO accounts are\n', '    ///  compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCOO whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '    \n', '    \n', '    /// @dev check wether target address is a contract or not\n', '    function isNormalUser(address addr) internal view returns (bool) {\n', '        if (addr == address(0)) {\n', '            return false;\n', '        }\n', '        uint size = 0;\n', '        assembly { \n', '            size := extcodesize(addr) \n', '        } \n', '        return size == 0;\n', '    }\n', '}\n', '\n', '\n', 'contract Lottery is OwnerBase {\n', '\n', '    event Winner( address indexed account,uint indexed id, uint indexed sn );\n', '    \n', '    uint public price = 1 finney;\n', '    \n', '    uint public reward = 10 finney;\n', '    \n', '    uint public sn = 1;\n', '    \n', '    uint private seed = 0;\n', '    \n', '    \n', '    /// @dev constructor of contract, create a seed\n', '    function Lottery() public {\n', '        ceoAddress = msg.sender;\n', '        cooAddress = msg.sender;\n', '        cfoAddress = msg.sender;\n', '        seed = now;\n', '    }\n', '    \n', '    /// @dev set seed by coo\n', '    function setSeed( uint val) public onlyCOO {\n', '        seed = val;\n', '    }\n', '    \n', '    \n', '    function() public payable {\n', '        // get ether, maybe from coo.\n', '    }\n', '        \n', '    \n', '    \n', '    /// @dev buy lottery\n', '    function buy(uint id) payable public {\n', '        require(isNormalUser(msg.sender));\n', '        require(msg.value >= price);\n', '        uint back = msg.value - price;  \n', '        \n', '        sn++;\n', '        uint sum = seed + sn + now + uint(msg.sender);\n', '        uint ran = uint16(keccak256(sum));\n', '        if (ran * 10000 < 880 * 0xffff) { // win the reward \n', '            back = reward + back;\n', '            emit Winner(msg.sender, id, sn);\n', '        }else{\n', '            emit Winner(msg.sender, id, 0);\n', '        }\n', '        \n', '        if (back > 1 finney) {\n', '            msg.sender.transfer(back);\n', '        }\n', '    }\n', '    \n', '    \n', '\n', '    // @dev Allows the cfo to capture the balance.\n', '    function cfoWithdraw( uint remain) external onlyCFO {\n', '        address myself = address(this);\n', '        require(myself.balance > remain);\n', '        cfoAddress.transfer(myself.balance - remain);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '}']
['// Lottery Source code\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/// @title A base contract to control ownership\n', '/// @author cuilichen\n', 'contract OwnerBase {\n', '\n', '    // The addresses of the accounts that can execute actions within each roles.\n', '    address public ceoAddress;\n', '    address public cfoAddress;\n', '    address public cooAddress;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '    \n', '    /// constructor\n', '    function OwnerBase() public {\n', '       ceoAddress = msg.sender;\n', '       cfoAddress = msg.sender;\n', '       cooAddress = msg.sender;\n', '    }\n', '\n', '    /// @dev Access modifier for CEO-only functionality\n', '    modifier onlyCEO() {\n', '        require(msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Access modifier for CFO-only functionality\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '    \n', '    /// @dev Access modifier for COO-only functionality\n', '    modifier onlyCOO() {\n', '        require(msg.sender == cooAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '    /// @param _newCEO The address of the new CEO\n', '    function setCEO(address _newCEO) external onlyCEO {\n', '        require(_newCEO != address(0));\n', '\n', '        ceoAddress = _newCEO;\n', '    }\n', '\n', '\n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCFO The address of the new COO\n', '    function setCFO(address _newCFO) external onlyCEO {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '    \n', '    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\n', '    /// @param _newCOO The address of the new COO\n', '    function setCOO(address _newCOO) external onlyCEO {\n', '        require(_newCOO != address(0));\n', '\n', '        cooAddress = _newCOO;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any "C-level" role to pause the contract. Used only when\n', '    ///  a bug or exploit is detected and we need to limit damage.\n', '    function pause() external onlyCOO whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\n', '    ///  one reason we may pause the contract is when CFO or COO accounts are\n', '    ///  compromised.\n', '    /// @notice This is public rather than external so it can be called by\n', '    ///  derived contracts.\n', '    function unpause() public onlyCOO whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '    \n', '    \n', '    /// @dev check wether target address is a contract or not\n', '    function isNormalUser(address addr) internal view returns (bool) {\n', '        if (addr == address(0)) {\n', '            return false;\n', '        }\n', '        uint size = 0;\n', '        assembly { \n', '            size := extcodesize(addr) \n', '        } \n', '        return size == 0;\n', '    }\n', '}\n', '\n', '\n', 'contract Lottery is OwnerBase {\n', '\n', '    event Winner( address indexed account,uint indexed id, uint indexed sn );\n', '    \n', '    uint public price = 1 finney;\n', '    \n', '    uint public reward = 10 finney;\n', '    \n', '    uint public sn = 1;\n', '    \n', '    uint private seed = 0;\n', '    \n', '    \n', '    /// @dev constructor of contract, create a seed\n', '    function Lottery() public {\n', '        ceoAddress = msg.sender;\n', '        cooAddress = msg.sender;\n', '        cfoAddress = msg.sender;\n', '        seed = now;\n', '    }\n', '    \n', '    /// @dev set seed by coo\n', '    function setSeed( uint val) public onlyCOO {\n', '        seed = val;\n', '    }\n', '    \n', '    \n', '    function() public payable {\n', '        // get ether, maybe from coo.\n', '    }\n', '        \n', '    \n', '    \n', '    /// @dev buy lottery\n', '    function buy(uint id) payable public {\n', '        require(isNormalUser(msg.sender));\n', '        require(msg.value >= price);\n', '        uint back = msg.value - price;  \n', '        \n', '        sn++;\n', '        uint sum = seed + sn + now + uint(msg.sender);\n', '        uint ran = uint16(keccak256(sum));\n', '        if (ran * 10000 < 880 * 0xffff) { // win the reward \n', '            back = reward + back;\n', '            emit Winner(msg.sender, id, sn);\n', '        }else{\n', '            emit Winner(msg.sender, id, 0);\n', '        }\n', '        \n', '        if (back > 1 finney) {\n', '            msg.sender.transfer(back);\n', '        }\n', '    }\n', '    \n', '    \n', '\n', '    // @dev Allows the cfo to capture the balance.\n', '    function cfoWithdraw( uint remain) external onlyCFO {\n', '        address myself = address(this);\n', '        require(myself.balance > remain);\n', '        cfoAddress.transfer(myself.balance - remain);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '}']
