['pragma solidity ^0.4.20;\n', '\n', '\n', '\n', '/* ********** Zeppelin Solidity - v1.3.0 ********** */\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/* ********** RxEAL Token Contract ********** */\n', '\n', '\n', '\n', '/**\n', ' * @title RxEALTokenContract\n', ' * @author RxEAL.com\n', ' *\n', ' * ERC20 Compatible token\n', ' * Zeppelin Solidity - v1.3.0\n', ' */\n', '\n', 'contract RxEALTokenContract is StandardToken {\n', '\n', '  /* ********** Token Predefined Information ********** */\n', '\n', '  // Predefine token info\n', '  string public constant name = "RxEAL";\n', '  string public constant symbol = "RXL";\n', '  uint256 public constant decimals = 18;\n', '\n', '  /* ********** Defined Variables ********** */\n', '\n', '  // Total tokens supply 96 000 000\n', '  // For ethereum wallets we added decimals constant\n', '  uint256 public constant INITIAL_SUPPLY = 96000000 * (10 ** decimals);\n', '  // Vault where tokens are stored\n', '  address public vault = this;\n', '  // Sale agent who has permissions to sell tokens\n', '  address public salesAgent;\n', '  // Array of token owners\n', '  mapping (address => bool) public owners;\n', '\n', '  /* ********** Events ********** */\n', '\n', '  // Contract events\n', '  event OwnershipGranted(address indexed _owner, address indexed revoked_owner);\n', '  event OwnershipRevoked(address indexed _owner, address indexed granted_owner);\n', '  event SalesAgentPermissionsTransferred(address indexed previousSalesAgent, address indexed newSalesAgent);\n', '  event SalesAgentRemoved(address indexed currentSalesAgent);\n', '  event Burn(uint256 value);\n', '\n', '  /* ********** Modifiers ********** */\n', '\n', '  // Throws if called by any account other than the owner\n', '  modifier onlyOwner() {\n', '    require(owners[msg.sender] == true);\n', '    _;\n', '  }\n', '\n', '  /* ********** Functions ********** */\n', '\n', '  // Constructor\n', '  function RxEALTokenContract() {\n', '    owners[msg.sender] = true;\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[vault] = totalSupply;\n', '  }\n', '\n', '  // Allows the current owner to grant control of the contract to another account\n', '  function grantOwnership(address _owner) onlyOwner public {\n', '    require(_owner != address(0));\n', '    owners[_owner] = true;\n', '    OwnershipGranted(msg.sender, _owner);\n', '  }\n', '\n', '  // Allow the current owner to revoke control of the contract from another owner\n', '  function revokeOwnership(address _owner) onlyOwner public {\n', '    require(_owner != msg.sender);\n', '    owners[_owner] = false;\n', '    OwnershipRevoked(msg.sender, _owner);\n', '  }\n', '\n', '  // Transfer sales agent permissions to another account\n', '  function transferSalesAgentPermissions(address _salesAgent) onlyOwner public {\n', '    SalesAgentPermissionsTransferred(salesAgent, _salesAgent);\n', '    salesAgent = _salesAgent;\n', '  }\n', '\n', '  // Remove sales agent from token\n', '  function removeSalesAgent() onlyOwner public {\n', '    SalesAgentRemoved(salesAgent);\n', '    salesAgent = address(0);\n', '  }\n', '\n', '  // Transfer tokens from vault to account if sales agent is correct\n', '  function transferTokensFromVault(address _from, address _to, uint256 _amount) public {\n', '    require(salesAgent == msg.sender);\n', '    balances[vault] = balances[vault].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Transfer(_from, _to, _amount);\n', '  }\n', '\n', '  // Allow the current owner to burn a specific amount of tokens from the vault\n', '  function burn(uint256 _value) onlyOwner public {\n', '    require(_value > 0);\n', '    balances[vault] = balances[vault].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(_value);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/* ********** RxEAL Presale Contract ********** */\n', '\n', '\n', '\n', 'contract RxEALSaleContract {\n', '  // Extend uint256 to use SafeMath functions\n', '  using SafeMath for uint256;\n', '\n', '  /* ********** Defined Variables ********** */\n', '\n', '  // The token being sold\n', '  RxEALTokenContract public token;\n', '\n', '  // Start and end timestamps where sales are allowed (both inclusive)\n', '  uint256 public startTime = 1520856000;\n', '  uint256 public endTime = 1523448000;\n', '\n', '  // Address where funds are collected\n', '  address public wallet1 = 0x56E4e5d451dF045827e214FE10bBF99D730d9683;\n', '  address public wallet2 = 0x8C0988711E60CfF153359Ab6CFC8d45565C6ce79;\n', '  address public wallet3 = 0x0EdF5c34ddE2573f162CcfEede99EeC6aCF1c2CB;\n', '  address public wallet4 = 0xcBdC5eE000f77f3bCc0eFeF0dc47d38911CBD45B;\n', '\n', '  // How many token units a buyer gets per wei. Rate per ether equals rate * (10 ** token.decimals())\n', '  // Cap in ethers\n', '\n', '  // Rate and cap for tier 1\n', '  uint256 public tier_rate_1 = 1800;\n', '  uint256 public tier_cap_1 = 4800000;\n', '  // Rate and cap for tier 2\n', '  uint256 public tier_rate_2 = 1440;\n', '  uint256 public tier_cap_2 = 14400000;\n', '  // Rate and cap for tier 3\n', '  uint256 public tier_rate_3 = 1320;\n', '  uint256 public tier_cap_3 = 14400000;\n', '  // Rate and cap for tier 4\n', '  uint256 public tier_rate_4 = 1200;\n', '  uint256 public tier_cap_4 = 14400000;\n', '\n', '  uint256 public hard_cap;\n', '\n', '  // Current tier\n', '  uint8 public current_tier = 1;\n', '\n', '  // Amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // Amount of sold tokens\n', '  uint256 public soldTokens;\n', '  uint256 public current_tier_sold_tokens;\n', '\n', '  /* ********** Events ********** */\n', '\n', '  // Event for token purchase logging\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens);\n', '\n', '  /* ********** Functions ********** */\n', '\n', '  // Constructor\n', '  function RxEALSaleContract() {\n', '    token = RxEALTokenContract(0xD6682Db9106e0cfB530B697cA0EcDC8F5597CD15);\n', '\n', '    tier_cap_1 = tier_cap_1 * (10 ** token.decimals());\n', '    tier_cap_2 = tier_cap_2 * (10 ** token.decimals());\n', '    tier_cap_3 = tier_cap_3 * (10 ** token.decimals());\n', '    tier_cap_4 = tier_cap_4 * (10 ** token.decimals());\n', '\n', '    hard_cap = tier_cap_1 + tier_cap_2 + tier_cap_3 + tier_cap_4;\n', '  }\n', '\n', '  // Fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // Tier calculation function\n', '  function tier_action(\n', '    uint8 tier,\n', '    uint256 left_wei,\n', '    uint256 tokens_amount,\n', '    uint8 next_tier,\n', '    uint256 tier_rate,\n', '    uint256 tier_cap\n', '  ) internal returns (uint256, uint256) {\n', '    if (current_tier == tier) {\n', '      // Tokens to be sold\n', '      uint256 tokens_can_be_sold;\n', '      // Temp tokens to be sold\n', '      uint256 tokens_to_be_sold = left_wei.mul(tier_rate);\n', '      // New temporary sold tier tokens\n', '      uint256 new_tier_sold_tokens = current_tier_sold_tokens.add(tokens_to_be_sold);\n', '\n', '      if (new_tier_sold_tokens >= tier_cap) {\n', '        // If purchase reached tier cap\n', '\n', '        // Calculate spare tokens\n', '        uint256 spare_tokens = new_tier_sold_tokens.sub(tier_cap);\n', '        // Tokens to be sold\n', '        tokens_can_be_sold = tokens_to_be_sold.sub(spare_tokens);\n', '\n', '        // Reset current tier sold tokens\n', '        current_tier_sold_tokens = 0;\n', '        // Switch to next tier\n', '        current_tier = next_tier;\n', '      } else {\n', '        // If purchase not reached tier cap\n', '\n', '        // Tokens to be sold\n', '        tokens_can_be_sold = tokens_to_be_sold;\n', '        // Update current tier sold tokens\n', '        current_tier_sold_tokens = new_tier_sold_tokens;\n', '      }\n', '\n', '      // Wei to buy amount of tokens\n', '      uint256 wei_amount = tokens_can_be_sold.div(tier_rate);\n', '      // Spare wei amount\n', '      left_wei = left_wei.sub(wei_amount);\n', '      // Tokens to be sold in purchase\n', '      tokens_amount = tokens_amount.add(tokens_can_be_sold);\n', '    }\n', '\n', '    return (left_wei, tokens_amount);\n', '  }\n', '\n', '  // Low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(validPurchase());\n', '\n', '    uint256 left_wei = msg.value;\n', '    uint256 tokens_amount;\n', '\n', '    (left_wei, tokens_amount) = tier_action(1, left_wei, tokens_amount, 2, tier_rate_1, tier_cap_1);\n', '    (left_wei, tokens_amount) = tier_action(2, left_wei, tokens_amount, 3, tier_rate_2, tier_cap_2);\n', '    (left_wei, tokens_amount) = tier_action(3, left_wei, tokens_amount, 4, tier_rate_3, tier_cap_3);\n', '    (left_wei, tokens_amount) = tier_action(4, left_wei, tokens_amount, 4, tier_rate_4, tier_cap_4);\n', '\n', '    // Update state of raised wei amount and sold tokens ammount\n', '    uint256 purchase_wei_amount = msg.value.sub(left_wei);\n', '    weiRaised = weiRaised.add(purchase_wei_amount);\n', '    soldTokens = soldTokens.add(tokens_amount);\n', '\n', '    // If have spare wei, send it back to beneficiary\n', '    if (left_wei > 0) {\n', '      beneficiary.transfer(left_wei);\n', '    }\n', '\n', '    // Tranfer tokens from vault\n', '    token.transferTokensFromVault(msg.sender, beneficiary, tokens_amount);\n', '    TokenPurchase(msg.sender, beneficiary, purchase_wei_amount, tokens_amount);\n', '\n', '    forwardFunds(purchase_wei_amount);\n', '  }\n', '\n', '  // Send wei to the fund collection wallets\n', '  function forwardFunds(uint256 weiAmount) internal {\n', '    uint256 value = weiAmount.div(4);\n', '\n', '    // If buyer sends amount of wei that can not be divided to 4 without float point, send all wei to first wallet\n', '    if (value.mul(4) != weiAmount) {\n', '      wallet1.transfer(weiAmount);\n', '    } else {\n', '      wallet1.transfer(value);\n', '      wallet2.transfer(value);\n', '      wallet3.transfer(value);\n', '      wallet4.transfer(value);\n', '    }\n', '  }\n', '\n', '  // Validate if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = soldTokens < hard_cap;\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase && withinCap;\n', '  }\n', '\n', '  // Validate if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime || soldTokens >= hard_cap;\n', '  }\n', '}']
['pragma solidity ^0.4.20;\n', '\n', '\n', '\n', '/* ********** Zeppelin Solidity - v1.3.0 ********** */\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/* ********** RxEAL Token Contract ********** */\n', '\n', '\n', '\n', '/**\n', ' * @title RxEALTokenContract\n', ' * @author RxEAL.com\n', ' *\n', ' * ERC20 Compatible token\n', ' * Zeppelin Solidity - v1.3.0\n', ' */\n', '\n', 'contract RxEALTokenContract is StandardToken {\n', '\n', '  /* ********** Token Predefined Information ********** */\n', '\n', '  // Predefine token info\n', '  string public constant name = "RxEAL";\n', '  string public constant symbol = "RXL";\n', '  uint256 public constant decimals = 18;\n', '\n', '  /* ********** Defined Variables ********** */\n', '\n', '  // Total tokens supply 96 000 000\n', '  // For ethereum wallets we added decimals constant\n', '  uint256 public constant INITIAL_SUPPLY = 96000000 * (10 ** decimals);\n', '  // Vault where tokens are stored\n', '  address public vault = this;\n', '  // Sale agent who has permissions to sell tokens\n', '  address public salesAgent;\n', '  // Array of token owners\n', '  mapping (address => bool) public owners;\n', '\n', '  /* ********** Events ********** */\n', '\n', '  // Contract events\n', '  event OwnershipGranted(address indexed _owner, address indexed revoked_owner);\n', '  event OwnershipRevoked(address indexed _owner, address indexed granted_owner);\n', '  event SalesAgentPermissionsTransferred(address indexed previousSalesAgent, address indexed newSalesAgent);\n', '  event SalesAgentRemoved(address indexed currentSalesAgent);\n', '  event Burn(uint256 value);\n', '\n', '  /* ********** Modifiers ********** */\n', '\n', '  // Throws if called by any account other than the owner\n', '  modifier onlyOwner() {\n', '    require(owners[msg.sender] == true);\n', '    _;\n', '  }\n', '\n', '  /* ********** Functions ********** */\n', '\n', '  // Constructor\n', '  function RxEALTokenContract() {\n', '    owners[msg.sender] = true;\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[vault] = totalSupply;\n', '  }\n', '\n', '  // Allows the current owner to grant control of the contract to another account\n', '  function grantOwnership(address _owner) onlyOwner public {\n', '    require(_owner != address(0));\n', '    owners[_owner] = true;\n', '    OwnershipGranted(msg.sender, _owner);\n', '  }\n', '\n', '  // Allow the current owner to revoke control of the contract from another owner\n', '  function revokeOwnership(address _owner) onlyOwner public {\n', '    require(_owner != msg.sender);\n', '    owners[_owner] = false;\n', '    OwnershipRevoked(msg.sender, _owner);\n', '  }\n', '\n', '  // Transfer sales agent permissions to another account\n', '  function transferSalesAgentPermissions(address _salesAgent) onlyOwner public {\n', '    SalesAgentPermissionsTransferred(salesAgent, _salesAgent);\n', '    salesAgent = _salesAgent;\n', '  }\n', '\n', '  // Remove sales agent from token\n', '  function removeSalesAgent() onlyOwner public {\n', '    SalesAgentRemoved(salesAgent);\n', '    salesAgent = address(0);\n', '  }\n', '\n', '  // Transfer tokens from vault to account if sales agent is correct\n', '  function transferTokensFromVault(address _from, address _to, uint256 _amount) public {\n', '    require(salesAgent == msg.sender);\n', '    balances[vault] = balances[vault].sub(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Transfer(_from, _to, _amount);\n', '  }\n', '\n', '  // Allow the current owner to burn a specific amount of tokens from the vault\n', '  function burn(uint256 _value) onlyOwner public {\n', '    require(_value > 0);\n', '    balances[vault] = balances[vault].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    Burn(_value);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/* ********** RxEAL Presale Contract ********** */\n', '\n', '\n', '\n', 'contract RxEALSaleContract {\n', '  // Extend uint256 to use SafeMath functions\n', '  using SafeMath for uint256;\n', '\n', '  /* ********** Defined Variables ********** */\n', '\n', '  // The token being sold\n', '  RxEALTokenContract public token;\n', '\n', '  // Start and end timestamps where sales are allowed (both inclusive)\n', '  uint256 public startTime = 1520856000;\n', '  uint256 public endTime = 1523448000;\n', '\n', '  // Address where funds are collected\n', '  address public wallet1 = 0x56E4e5d451dF045827e214FE10bBF99D730d9683;\n', '  address public wallet2 = 0x8C0988711E60CfF153359Ab6CFC8d45565C6ce79;\n', '  address public wallet3 = 0x0EdF5c34ddE2573f162CcfEede99EeC6aCF1c2CB;\n', '  address public wallet4 = 0xcBdC5eE000f77f3bCc0eFeF0dc47d38911CBD45B;\n', '\n', '  // How many token units a buyer gets per wei. Rate per ether equals rate * (10 ** token.decimals())\n', '  // Cap in ethers\n', '\n', '  // Rate and cap for tier 1\n', '  uint256 public tier_rate_1 = 1800;\n', '  uint256 public tier_cap_1 = 4800000;\n', '  // Rate and cap for tier 2\n', '  uint256 public tier_rate_2 = 1440;\n', '  uint256 public tier_cap_2 = 14400000;\n', '  // Rate and cap for tier 3\n', '  uint256 public tier_rate_3 = 1320;\n', '  uint256 public tier_cap_3 = 14400000;\n', '  // Rate and cap for tier 4\n', '  uint256 public tier_rate_4 = 1200;\n', '  uint256 public tier_cap_4 = 14400000;\n', '\n', '  uint256 public hard_cap;\n', '\n', '  // Current tier\n', '  uint8 public current_tier = 1;\n', '\n', '  // Amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  // Amount of sold tokens\n', '  uint256 public soldTokens;\n', '  uint256 public current_tier_sold_tokens;\n', '\n', '  /* ********** Events ********** */\n', '\n', '  // Event for token purchase logging\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 tokens);\n', '\n', '  /* ********** Functions ********** */\n', '\n', '  // Constructor\n', '  function RxEALSaleContract() {\n', '    token = RxEALTokenContract(0xD6682Db9106e0cfB530B697cA0EcDC8F5597CD15);\n', '\n', '    tier_cap_1 = tier_cap_1 * (10 ** token.decimals());\n', '    tier_cap_2 = tier_cap_2 * (10 ** token.decimals());\n', '    tier_cap_3 = tier_cap_3 * (10 ** token.decimals());\n', '    tier_cap_4 = tier_cap_4 * (10 ** token.decimals());\n', '\n', '    hard_cap = tier_cap_1 + tier_cap_2 + tier_cap_3 + tier_cap_4;\n', '  }\n', '\n', '  // Fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // Tier calculation function\n', '  function tier_action(\n', '    uint8 tier,\n', '    uint256 left_wei,\n', '    uint256 tokens_amount,\n', '    uint8 next_tier,\n', '    uint256 tier_rate,\n', '    uint256 tier_cap\n', '  ) internal returns (uint256, uint256) {\n', '    if (current_tier == tier) {\n', '      // Tokens to be sold\n', '      uint256 tokens_can_be_sold;\n', '      // Temp tokens to be sold\n', '      uint256 tokens_to_be_sold = left_wei.mul(tier_rate);\n', '      // New temporary sold tier tokens\n', '      uint256 new_tier_sold_tokens = current_tier_sold_tokens.add(tokens_to_be_sold);\n', '\n', '      if (new_tier_sold_tokens >= tier_cap) {\n', '        // If purchase reached tier cap\n', '\n', '        // Calculate spare tokens\n', '        uint256 spare_tokens = new_tier_sold_tokens.sub(tier_cap);\n', '        // Tokens to be sold\n', '        tokens_can_be_sold = tokens_to_be_sold.sub(spare_tokens);\n', '\n', '        // Reset current tier sold tokens\n', '        current_tier_sold_tokens = 0;\n', '        // Switch to next tier\n', '        current_tier = next_tier;\n', '      } else {\n', '        // If purchase not reached tier cap\n', '\n', '        // Tokens to be sold\n', '        tokens_can_be_sold = tokens_to_be_sold;\n', '        // Update current tier sold tokens\n', '        current_tier_sold_tokens = new_tier_sold_tokens;\n', '      }\n', '\n', '      // Wei to buy amount of tokens\n', '      uint256 wei_amount = tokens_can_be_sold.div(tier_rate);\n', '      // Spare wei amount\n', '      left_wei = left_wei.sub(wei_amount);\n', '      // Tokens to be sold in purchase\n', '      tokens_amount = tokens_amount.add(tokens_can_be_sold);\n', '    }\n', '\n', '    return (left_wei, tokens_amount);\n', '  }\n', '\n', '  // Low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(validPurchase());\n', '\n', '    uint256 left_wei = msg.value;\n', '    uint256 tokens_amount;\n', '\n', '    (left_wei, tokens_amount) = tier_action(1, left_wei, tokens_amount, 2, tier_rate_1, tier_cap_1);\n', '    (left_wei, tokens_amount) = tier_action(2, left_wei, tokens_amount, 3, tier_rate_2, tier_cap_2);\n', '    (left_wei, tokens_amount) = tier_action(3, left_wei, tokens_amount, 4, tier_rate_3, tier_cap_3);\n', '    (left_wei, tokens_amount) = tier_action(4, left_wei, tokens_amount, 4, tier_rate_4, tier_cap_4);\n', '\n', '    // Update state of raised wei amount and sold tokens ammount\n', '    uint256 purchase_wei_amount = msg.value.sub(left_wei);\n', '    weiRaised = weiRaised.add(purchase_wei_amount);\n', '    soldTokens = soldTokens.add(tokens_amount);\n', '\n', '    // If have spare wei, send it back to beneficiary\n', '    if (left_wei > 0) {\n', '      beneficiary.transfer(left_wei);\n', '    }\n', '\n', '    // Tranfer tokens from vault\n', '    token.transferTokensFromVault(msg.sender, beneficiary, tokens_amount);\n', '    TokenPurchase(msg.sender, beneficiary, purchase_wei_amount, tokens_amount);\n', '\n', '    forwardFunds(purchase_wei_amount);\n', '  }\n', '\n', '  // Send wei to the fund collection wallets\n', '  function forwardFunds(uint256 weiAmount) internal {\n', '    uint256 value = weiAmount.div(4);\n', '\n', '    // If buyer sends amount of wei that can not be divided to 4 without float point, send all wei to first wallet\n', '    if (value.mul(4) != weiAmount) {\n', '      wallet1.transfer(weiAmount);\n', '    } else {\n', '      wallet1.transfer(value);\n', '      wallet2.transfer(value);\n', '      wallet3.transfer(value);\n', '      wallet4.transfer(value);\n', '    }\n', '  }\n', '\n', '  // Validate if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = soldTokens < hard_cap;\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase && withinCap;\n', '  }\n', '\n', '  // Validate if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime || soldTokens >= hard_cap;\n', '  }\n', '}']
