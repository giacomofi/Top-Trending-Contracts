['pragma solidity ^0.4.24;\n', '\n', '/// @title Proxied - indicates that a contract will be proxied. Also defines storage requirements for Proxy.\n', '/// @author Alan Lu - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7c1d101d123c1b12130f150f520c11">[email&#160;protected]</a>>\n', 'contract Proxied {\n', '    address public masterCopy;\n', '}\n', '\n', '/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n', '/// @author Stefan George - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c5b6b1a0a3a4ab85a2abaab6acb6ebb5a8">[email&#160;protected]</a>>\n', 'contract Proxy is Proxied {\n', '    /// @dev Constructor function sets address of master copy contract.\n', '    /// @param _masterCopy Master copy address.\n', '    constructor(address _masterCopy)\n', '        public\n', '    {\n', '        require(_masterCopy != 0);\n', '        masterCopy = _masterCopy;\n', '    }\n', '\n', '    /// @dev Fallback function forwards all transactions and returns all received return data.\n', '    function ()\n', '        external\n', '        payable\n', '    {\n', '        address _masterCopy = masterCopy;\n', '        assembly {\n', '            calldatacopy(0, 0, calldatasize())\n', '            let success := delegatecall(not(0), _masterCopy, 0, calldatasize(), 0, 0)\n', '            returndatacopy(0, 0, returndatasize())\n', '            switch success\n', '            case 0 { revert(0, returndatasize()) }\n', '            default { return(0, returndatasize()) }\n', '        }\n', '    }\n', '}\n', '/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '\n', '\n', '\n', '/// @title Abstract token contract - Functions to be implemented by token contracts\n', 'contract Token {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    function transfer(address to, uint value) public returns (bool);\n', '    function transferFrom(address from, address to, uint value) public returns (bool);\n', '    function approve(address spender, uint value) public returns (bool);\n', '    function balanceOf(address owner) public view returns (uint);\n', '    function allowance(address owner, address spender) public view returns (uint);\n', '    function totalSupply() public view returns (uint);\n', '}\n', '\n', '\n', '\n', '/// @title Abstract oracle contract - Functions to be implemented by oracles\n', 'contract Oracle {\n', '\n', '    function isOutcomeSet() public view returns (bool);\n', '    function getOutcome() public view returns (int);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract CentralizedBugOracleData {\n', '  event OwnerReplacement(address indexed newOwner);\n', '  event OutcomeAssignment(int outcome);\n', '\n', '  /*\n', '   *  Storage\n', '   */\n', '  address public owner;\n', '  bytes public ipfsHash;\n', '  bool public isSet;\n', '  int public outcome;\n', '  address public maker;\n', '  address public taker;\n', '\n', '  /*\n', '   *  Modifiers\n', '   */\n', '  modifier isOwner () {\n', '      // Only owner is allowed to proceed\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '}\n', '\n', 'contract CentralizedBugOracleProxy is Proxy, CentralizedBugOracleData {\n', '\n', '    /// @dev Constructor sets owner address and IPFS hash\n', '    /// @param _ipfsHash Hash identifying off chain event description\n', '    constructor(address proxied, address _owner, bytes _ipfsHash, address _maker, address _taker)\n', '        public\n', '        Proxy(proxied)\n', '    {\n', '        // Description hash cannot be null\n', '        require(_ipfsHash.length == 46);\n', '        owner = _owner;\n', '        ipfsHash = _ipfsHash;\n', '        maker = _maker;\n', '        taker = _taker;\n', '    }\n', '}\n', '\n', 'contract CentralizedBugOracle is Proxied,Oracle, CentralizedBugOracleData{\n', '\n', '  /// @dev Sets event outcome\n', '  /// @param _outcome Event outcome\n', '  function setOutcome(int _outcome)\n', '      public\n', '      isOwner\n', '  {\n', '      // Result is not set yet\n', '      require(!isSet);\n', '      _setOutcome(_outcome);\n', '  }\n', '\n', '  /// @dev Returns if winning outcome is set\n', '  /// @return Is outcome set?\n', '  function isOutcomeSet()\n', '      public\n', '      view\n', '      returns (bool)\n', '  {\n', '      return isSet;\n', '  }\n', '\n', '  /// @dev Returns outcome\n', '  /// @return Outcome\n', '  function getOutcome()\n', '      public\n', '      view\n', '      returns (int)\n', '  {\n', '      return outcome;\n', '  }\n', '\n', '\n', '  //@dev internal funcion to set the outcome sat\n', '  function _setOutcome(int _outcome) internal {\n', '    isSet = true;\n', '    outcome = _outcome;\n', '    emit OutcomeAssignment(_outcome);\n', '  }\n', '\n', '\n', '}\n', '\n', '\n', '//Vending machine Logic goes in this contract\n', 'contract OracleVendingMachine {\n', '  using SafeMath for *;\n', '\n', '  /*\n', '   *  events\n', '   */\n', '\n', '  event OracleProposed(address maker, address taker, uint256 index, bytes hash);\n', '  event OracleAccepted(address maker, address taker, uint256 index, bytes hash);\n', '  event OracleDeployed(address maker, address taker, uint256 index, bytes hash, address oracle);\n', '  event OracleRevoked(address maker, address taker, uint256 index, bytes hash);\n', '\n', '  event FeeUpdated(uint256 newFee);\n', '  event OracleUpgraded(address newAddress);\n', '  event PaymentTokenChanged(address newToken);\n', '  event StatusChanged(bool newStatus);\n', '  event OracleBoughtFor(address buyer, address maker, address taker, uint256 index, bytes ipfsHash, address oracle);\n', '\n', '  /*\n', '   *  Storage\n', '   */\n', '  address public owner;\n', '  uint public fee;\n', '  Oracle public oracleMasterCopy;\n', '  Token public paymentToken;\n', '  bool public open;\n', '\n', '\n', '  mapping (address => uint256) public balances;\n', '  mapping (address => bool) public balanceChecked;\n', '  mapping (address => mapping (address => uint256)) public oracleIndexes;\n', '  mapping (address => mapping (address => mapping (uint256 => proposal))) public oracleProposed;\n', '  mapping (address => mapping (address => mapping (uint256 => address))) public oracleDeployed;\n', '\n', '  struct proposal {\n', '    bytes hash;\n', '    address oracleMasterCopy;\n', '    uint256 fee;\n', '  }\n', '\n', '  /*\n', '   *  Modifiers\n', '   */\n', '  modifier isOwner () {\n', '      // Only owner is allowed to proceed\n', '      require(msg.sender == owner);\n', '      _;\n', '  }\n', '\n', '  modifier whenOpen() {\n', '    //Only proceeds with operation if open is true\n', '    require(open);\n', '    _;\n', '  }\n', '\n', '  /**\n', '    @dev Contructor to the vending Machine\n', '    @param _fee The for using the vending Machine\n', '    @param _token the Address of the token used for paymentToken\n', '    @param _oracleMasterCopy The deployed version of the oracle which will be proxied to\n', '  **/\n', '  constructor(uint _fee, address _token, address _oracleMasterCopy) public {\n', '    owner = msg.sender;\n', '    fee = _fee;\n', '    paymentToken = Token(_token);\n', '    oracleMasterCopy = Oracle(_oracleMasterCopy);\n', '    open = true;\n', '  }\n', '\n', '  /**\n', '    @dev Change the fee\n', '    @param _fee Te new vending machine fee\n', '  **/\n', '  function changeFee(uint _fee) public isOwner {\n', '      fee = _fee;\n', '      emit FeeUpdated(_fee);\n', '  }\n', '\n', '  /**\n', '    @dev Change the master copy of the oracle\n', '    @param _oracleMasterCopy The address of the deployed version of the oracle which will be proxied to\n', '  **/\n', '  function upgradeOracle(address _oracleMasterCopy) public isOwner {\n', '    require(_oracleMasterCopy != 0x0);\n', '    oracleMasterCopy = Oracle(_oracleMasterCopy);\n', '    emit OracleUpgraded(_oracleMasterCopy);\n', '  }\n', '\n', '  /**\n', '    @dev Change the payment token\n', '    @param _paymentToken the Address of the token used for paymentToken\n', '  **/\n', '  function changePaymentToken(address _paymentToken) public isOwner {\n', '    require(_paymentToken != 0x0);\n', '    paymentToken = Token(_paymentToken);\n', '    emit PaymentTokenChanged(_paymentToken);\n', '  }\n', '\n', '  /**\n', '    @dev Contructor to the vending Machine\n', '    @param status The new open status for the vending Machine\n', '  **/\n', '  function modifyOpenStatus(bool status) public isOwner {\n', '    open = status;\n', '    emit StatusChanged(status);\n', '  }\n', '\n', '\n', '  /**\n', '    @dev Internal function to deploy and register a oracle\n', '    @param _proposal A proposal struct containing the bug information\n', '    @param maker the Address who proposed the oracle\n', '    @param taker the Address who accepted the oracle\n', '    @param index The index of the oracle to be deployed\n', '    @return A deployed oracle contract\n', '  **/\n', '  function deployOracle(proposal _proposal, address maker, address taker, uint256 index) internal returns(Oracle oracle){\n', '    require(oracleDeployed[maker][taker][index] == address(0));\n', '    oracle = CentralizedBugOracle(new CentralizedBugOracleProxy(_proposal.oracleMasterCopy, owner, _proposal.hash, maker, taker));\n', '    oracleDeployed[maker][taker][index] = oracle;\n', '    emit OracleDeployed(maker, taker, index, _proposal.hash, oracle);\n', '  }\n', '\n', '\n', '  /**\n', '    @dev Function called by he taker to confirm a proposed oracle\n', '    @param maker the Address who proposed the oracle\n', '    @param index The index of the oracle to be deployed\n', '    @return A deployed oracle contract\n', '  **/\n', '  function confirmOracle(address maker, uint index) public returns(Oracle oracle) {\n', '    require(oracleProposed[maker][msg.sender][index].fee > 0);\n', '\n', '    if(!balanceChecked[msg.sender]) checkBalance(msg.sender);\n', '    balances[msg.sender] = balances[msg.sender].sub(fee);\n', '\n', '    oracle = deployOracle(oracleProposed[maker][msg.sender][index], maker, msg.sender, index);\n', '    oracleIndexes[maker][msg.sender] += 1;\n', '    emit OracleAccepted(maker, msg.sender, index, oracleProposed[maker][msg.sender][index].hash);\n', '  }\n', '\n', '\n', '  /**\n', '    @dev Function to propose an oracle, calle by maker\n', '    @param _ipfsHash The hash for the bug information(description, spurce code, etc)\n', '    @param taker the Address who needs to accept the oracle\n', '    @return index of the proposal\n', '  **/\n', '  function buyOracle(bytes _ipfsHash, address taker) public whenOpen returns (uint index){\n', '    if(!balanceChecked[msg.sender]) checkBalance(msg.sender);\n', '    balances[msg.sender] = balances[msg.sender].sub(fee);\n', '    index = oracleIndexes[msg.sender][taker];\n', '    oracleProposed[msg.sender][taker][index] = proposal(_ipfsHash, oracleMasterCopy, fee);\n', '    emit OracleProposed(msg.sender, taker, index, _ipfsHash);\n', '  }\n', '\n', '  /**\n', '    @dev Priviledged function to propose and deploy an oracle with one transaction. Called by Solidified Bug Bounty plataform\n', '    @param _ipfsHash The hash for the bug information(description, spurce code, etc)\n', '    @param maker the Address who proposed the oracle\n', '    @param taker the Address who accepted the oracle\n', '    @return A deployed oracle contract\n', '  **/\n', '  function buyOracleFor(bytes _ipfsHash, address maker, address taker) public whenOpen isOwner returns(Oracle oracle){\n', '    if(!balanceChecked[maker]) checkBalance(maker);\n', '    if(!balanceChecked[taker]) checkBalance(taker);\n', '\n', '    balances[maker] = balances[maker].sub(fee);\n', '    balances[taker] = balances[taker].sub(fee);\n', '\n', '    uint256 index = oracleIndexes[maker][taker];\n', '    proposal memory oracleProposal  = proposal(_ipfsHash, oracleMasterCopy, fee);\n', '\n', '    oracleProposed[maker][taker][index] = oracleProposal;\n', '    oracle = deployOracle(oracleProposal,maker,taker,index);\n', '    oracleDeployed[maker][taker][oracleIndexes[maker][taker]] = oracle;\n', '    oracleIndexes[maker][taker] += 1;\n', '    emit OracleBoughtFor(msg.sender, maker, taker, index, _ipfsHash, oracle);\n', '  }\n', '\n', '  /**\n', '    @dev  Function to cancel a proposed oracle, called by the maker\n', '    @param taker the Address who accepted the oracle\n', '    @param index The index of the proposed to be revoked\n', '  **/\n', '  function revokeOracle(address taker, uint256 index) public {\n', '    require(oracleProposed[msg.sender][taker][index].fee >  0);\n', '    require(oracleDeployed[msg.sender][taker][index] == address(0));\n', '    proposal memory oracleProposal = oracleProposed[msg.sender][taker][index];\n', '    oracleProposed[msg.sender][taker][index].hash = "";\n', '    oracleProposed[msg.sender][taker][index].fee = 0;\n', '    oracleProposed[msg.sender][taker][index].oracleMasterCopy = address(0);\n', '\n', '    balances[msg.sender] = balances[msg.sender].add(oracleProposal.fee);\n', '    emit OracleRevoked(msg.sender, taker, index, oracleProposal.hash);\n', '  }\n', '\n', '  /**\n', '    @dev Function to check a users balance of SOLID and deposit as credit\n', '    @param holder Address of the holder to be checked\n', '  **/\n', '  function checkBalance(address holder) public {\n', '    require(!balanceChecked[holder]);\n', '    balances[holder] = paymentToken.balanceOf(holder);\n', '    balanceChecked[holder] = true;\n', '  }\n', '\n', '}']