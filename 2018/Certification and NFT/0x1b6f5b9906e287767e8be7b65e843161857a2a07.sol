['pragma solidity ^0.4.24;\n', '\n', 'contract FakeToken {\n', '    string constant public name = "FakeToken";\n', '    string constant public symbol = "FTKN";\n', '    uint8 constant public decimals = 0;\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    event Transfer(address from, address to, uint256 value);\n', '    \n', '    constructor() public {\n', '        balanceOf[msg.sender] = 1000;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    // WTF method!!!\n', '    function claim(address _from, uint256 _value) public {\n', '        _transfer(_from, msg.sender, _value);\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(balanceOf[_from] >= _value, "Not enought balance");\n', '        require(balanceOf[_to] + _value >= _value, "Overflow protection");\n', '        \n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract FakeToken {\n', '    string constant public name = "FakeToken";\n', '    string constant public symbol = "FTKN";\n', '    uint8 constant public decimals = 0;\n', '    \n', '    mapping (address => uint256) public balanceOf;\n', '    \n', '    event Transfer(address from, address to, uint256 value);\n', '    \n', '    constructor() public {\n', '        balanceOf[msg.sender] = 1000;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public {\n', '        _transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    // WTF method!!!\n', '    function claim(address _from, uint256 _value) public {\n', '        _transfer(_from, msg.sender, _value);\n', '    }\n', '    \n', '    function _transfer(address _from, address _to, uint256 _value) internal {\n', '        require(balanceOf[_from] >= _value, "Not enought balance");\n', '        require(balanceOf[_to] + _value >= _value, "Overflow protection");\n', '        \n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '}']
