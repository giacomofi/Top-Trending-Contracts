['pragma solidity ^0.4.21;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/MainFabric.sol\n', '\n', '//import "./tokens/ERC20StandardToken.sol";\n', '//import "./tokens/ERC20MintableToken.sol";\n', '//import "./crowdsale/RefundCrowdsale.sol";\n', '\n', 'contract MainFabric is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Contract {\n', '        address addr;\n', '        address owner;\n', '        address fabric;\n', '        string contractType;\n', '        uint256 index;\n', '    }\n', '\n', '    struct Fabric {\n', '        address addr;\n', '        address owner;\n', '        bool isActive;\n', '        uint256 index;\n', '    }\n', '\n', '    struct Admin {\n', '        address addr;\n', '        address[] contratcs;\n', '        uint256 numContratcs;\n', '        uint256 index;\n', '    }\n', '\n', '    // ---====== CONTRACTS ======---\n', '    /**\n', '     * @dev Get contract object by address\n', '     */\n', '    mapping(address => Contract) public contracts;\n', '\n', '    /**\n', '     * @dev Contracts addresses list\n', '     */\n', '    address[] public contractsAddr;\n', '\n', '    /**\n', '     * @dev Count of contracts in list\n', '     */\n', '    function numContracts() public view returns (uint256)\n', '    { return contractsAddr.length; }\n', '\n', '\n', '    // ---====== ADMINS ======---\n', '    /**\n', '     * @dev Get contract object by address\n', '     */\n', '    mapping(address => Admin) public admins;\n', '\n', '    /**\n', '     * @dev Contracts addresses list\n', '     */\n', '    address[] public adminsAddr;\n', '\n', '    /**\n', '     * @dev Count of contracts in list\n', '     */\n', '    function numAdmins() public view returns (uint256)\n', '    { return adminsAddr.length; }\n', '\n', '    function getAdminContract(address _adminAddress, uint256 _index) public view returns (\n', '        address\n', '    ) {\n', '        return (\n', '            admins[_adminAddress].contratcs[_index]\n', '        );\n', '    }\n', '\n', '    // ---====== FABRICS ======---\n', '    /**\n', '     * @dev Get fabric object by address\n', '     */\n', '    mapping(address => Fabric) public fabrics;\n', '\n', '    /**\n', '     * @dev Fabrics addresses list\n', '     */\n', '    address[] public fabricsAddr;\n', '\n', '    /**\n', '     * @dev Count of fabrics in list\n', '     */\n', '    function numFabrics() public view returns (uint256)\n', '    { return fabricsAddr.length; }\n', '\n', '    /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '    modifier onlyFabric() {\n', '        require(fabrics[msg.sender].isActive);\n', '        _;\n', '    }\n', '\n', '    // ---====== CONSTRUCTOR ======---\n', '\n', '    function MainFabric() public {\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Add fabric\n', '     * @param _address Fabric address\n', '     */\n', '    function addFabric(\n', '        address _address\n', '    )\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        fabrics[_address].addr = _address;\n', '        fabrics[_address].owner = msg.sender;\n', '        fabrics[_address].isActive = true;\n', '        fabrics[_address].index = fabricsAddr.push(_address) - 1;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Remove fabric\n', '     * @param _address Fabric address\n', '     */\n', '    function removeFabric(\n', '        address _address\n', '    )\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        require(fabrics[_address].isActive);\n', '        fabrics[_address].isActive = false;\n', '\n', '        uint rowToDelete = fabrics[_address].index;\n', '        address keyToMove   = fabricsAddr[fabricsAddr.length-1];\n', '        fabricsAddr[rowToDelete] = keyToMove;\n', '        fabrics[keyToMove].index = rowToDelete;\n', '        fabricsAddr.length--;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Create refund crowdsale\n', '     * @param _address Fabric address\n', '     */\n', '    function addContract(\n', '        address _address,\n', '        address _owner,\n', '        string _contractType\n', '    )\n', '    public\n', '    onlyFabric\n', '    returns (bool)\n', '    {\n', '        contracts[_address].addr = _address;\n', '        contracts[_address].owner = _owner;\n', '        contracts[_address].fabric = msg.sender;\n', '        contracts[_address].contractType = _contractType;\n', '        contracts[_address].index = contractsAddr.push(_address) - 1;\n', '\n', '        if (admins[_owner].addr != _owner) {\n', '            admins[_owner].addr = _owner;\n', '            admins[_owner].index = adminsAddr.push(_owner) - 1;\n', '        }\n', '\n', '        admins[_owner].contratcs.push(contracts[_address].addr);\n', '        admins[_owner].numContratcs++;\n', '\n', '        return true;\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/MainFabric.sol\n', '\n', '//import "./tokens/ERC20StandardToken.sol";\n', '//import "./tokens/ERC20MintableToken.sol";\n', '//import "./crowdsale/RefundCrowdsale.sol";\n', '\n', 'contract MainFabric is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Contract {\n', '        address addr;\n', '        address owner;\n', '        address fabric;\n', '        string contractType;\n', '        uint256 index;\n', '    }\n', '\n', '    struct Fabric {\n', '        address addr;\n', '        address owner;\n', '        bool isActive;\n', '        uint256 index;\n', '    }\n', '\n', '    struct Admin {\n', '        address addr;\n', '        address[] contratcs;\n', '        uint256 numContratcs;\n', '        uint256 index;\n', '    }\n', '\n', '    // ---====== CONTRACTS ======---\n', '    /**\n', '     * @dev Get contract object by address\n', '     */\n', '    mapping(address => Contract) public contracts;\n', '\n', '    /**\n', '     * @dev Contracts addresses list\n', '     */\n', '    address[] public contractsAddr;\n', '\n', '    /**\n', '     * @dev Count of contracts in list\n', '     */\n', '    function numContracts() public view returns (uint256)\n', '    { return contractsAddr.length; }\n', '\n', '\n', '    // ---====== ADMINS ======---\n', '    /**\n', '     * @dev Get contract object by address\n', '     */\n', '    mapping(address => Admin) public admins;\n', '\n', '    /**\n', '     * @dev Contracts addresses list\n', '     */\n', '    address[] public adminsAddr;\n', '\n', '    /**\n', '     * @dev Count of contracts in list\n', '     */\n', '    function numAdmins() public view returns (uint256)\n', '    { return adminsAddr.length; }\n', '\n', '    function getAdminContract(address _adminAddress, uint256 _index) public view returns (\n', '        address\n', '    ) {\n', '        return (\n', '            admins[_adminAddress].contratcs[_index]\n', '        );\n', '    }\n', '\n', '    // ---====== FABRICS ======---\n', '    /**\n', '     * @dev Get fabric object by address\n', '     */\n', '    mapping(address => Fabric) public fabrics;\n', '\n', '    /**\n', '     * @dev Fabrics addresses list\n', '     */\n', '    address[] public fabricsAddr;\n', '\n', '    /**\n', '     * @dev Count of fabrics in list\n', '     */\n', '    function numFabrics() public view returns (uint256)\n', '    { return fabricsAddr.length; }\n', '\n', '    /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '    modifier onlyFabric() {\n', '        require(fabrics[msg.sender].isActive);\n', '        _;\n', '    }\n', '\n', '    // ---====== CONSTRUCTOR ======---\n', '\n', '    function MainFabric() public {\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Add fabric\n', '     * @param _address Fabric address\n', '     */\n', '    function addFabric(\n', '        address _address\n', '    )\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        fabrics[_address].addr = _address;\n', '        fabrics[_address].owner = msg.sender;\n', '        fabrics[_address].isActive = true;\n', '        fabrics[_address].index = fabricsAddr.push(_address) - 1;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Remove fabric\n', '     * @param _address Fabric address\n', '     */\n', '    function removeFabric(\n', '        address _address\n', '    )\n', '    public\n', '    onlyOwner\n', '    returns (bool)\n', '    {\n', '        require(fabrics[_address].isActive);\n', '        fabrics[_address].isActive = false;\n', '\n', '        uint rowToDelete = fabrics[_address].index;\n', '        address keyToMove   = fabricsAddr[fabricsAddr.length-1];\n', '        fabricsAddr[rowToDelete] = keyToMove;\n', '        fabrics[keyToMove].index = rowToDelete;\n', '        fabricsAddr.length--;\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Create refund crowdsale\n', '     * @param _address Fabric address\n', '     */\n', '    function addContract(\n', '        address _address,\n', '        address _owner,\n', '        string _contractType\n', '    )\n', '    public\n', '    onlyFabric\n', '    returns (bool)\n', '    {\n', '        contracts[_address].addr = _address;\n', '        contracts[_address].owner = _owner;\n', '        contracts[_address].fabric = msg.sender;\n', '        contracts[_address].contractType = _contractType;\n', '        contracts[_address].index = contractsAddr.push(_address) - 1;\n', '\n', '        if (admins[_owner].addr != _owner) {\n', '            admins[_owner].addr = _owner;\n', '            admins[_owner].index = adminsAddr.push(_owner) - 1;\n', '        }\n', '\n', '        admins[_owner].contratcs.push(contracts[_address].addr);\n', '        admins[_owner].numContratcs++;\n', '\n', '        return true;\n', '    }\n', '}']
