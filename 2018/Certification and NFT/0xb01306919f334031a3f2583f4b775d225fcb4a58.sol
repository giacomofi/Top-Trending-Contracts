['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/BikeCrowdsale.sol\n', '\n', '//import "./BlockchainBikeToken.sol";\n', 'contract BikeCrowdsale is Ownable, StandardToken {\n', '    string public constant name = "Blockchain based Bike Token"; // name of token\n', '    string public constant symbol = "BBT"; // symbol of token\n', '    uint8 public constant decimals = 18;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Investor {\n', '        uint256 weiDonated;\n', '        uint256 tokensGiven;\n', '        uint256 freeTokens;\n', '    }\n', '\n', '    mapping(address => Investor) participants;\n', '\n', '    uint256 public totalSupply= 5*10**9 * 10**18; // total supply \n', '    uint256 public hardCap = 1000000 * 10**18; // 1 million ether = 1 m * 10^18 Wei\n', '    uint256 public minimalGoal = 1000 * 10**18; // 1k ether = 1k * 10^18 Wei\n', '    uint256 public weiToToken = 5000; // 1 ether = 5000 tokens\n', '    uint256 public totalSoldTokens = 0;\n', '    uint256 public openingTime = 1537372800; // date -j -f "%Y-%m-%d %H:%M:%S" "2018-09-20 00:00:00" "+%s"\n', '    uint256 public closingTime = 1568044800; // date -j -f "%Y-%m-%d %H:%M:%S" "2019-09-10 00:00:00" "+%s";\n', '\n', '    uint256 public totalCollected; // unit: Wei\n', '\n', '    bool public ICOstatus = true; // true - active, false - inactive\n', '    bool public hardcapReached = false; // true - the cap is reached, false - the cap is not reached\n', '    bool public minimalgoalReached = false; // true - the goal is reached, false - the goal is not reached\n', '    bool public isRefundable = true; // can refund or not\n', '\n', '    address public forSale; // fund address for sale \n', '    address public ecoSystemFund; // fund address for eco-system\n', '    address public founders; // fund address for founders\n', '    address public team; // fund address for team\n', '    address public advisers; // fund address for advisors\n', '    address public bounty; // fund address for bountry\n', '    address public affiliate; // fund address for affiliate\n', '\n', '    address private crowdsale;\n', ' \n', '    //BlockchainBikeToken public token;\n', '\n', '\n', '  constructor(\n', '    //address _token\n', '    ) public {\n', '\n', '    require(hardCap > minimalGoal);\n', '    require(openingTime < closingTime);\n', '    //token = BlockchainBikeToken(_token);\n', '    crowdsale = address(this);\n', '\n', '    forSale = 0xf6ACFDba39D8F786D0D2781A1D20C82E47adF8b7;\n', '    ecoSystemFund = 0x5A77aAE15258a2a4445C701d63dbE74016F7e629;\n', '    founders = 0xA80A449514541aeEcd3e17BECcC74a86e3de6bfA;\n', '    team = 0x309d62B8eaDF717b76296326CA35bB8f2D996B1a;\n', '    advisers = 0xc4319217ca328F7518c463D6D3e78f68acc5B076;\n', '    bounty = 0x3605e4E99efFaB70D0C84aA2beA530683824246f;\n', '    affiliate = 0x1709365100eD9B7c417E0dF0fdc32027af1DAff1;\n', '\n', '    /*forSale = _forSale;\n', '    ecoSystemFund = _ecoSystemFund;\n', '    founders = _founders;\n', '    team = _team;\n', '    advisers = _advisers;\n', '    bounty = _bountry;\n', '    affiliate = _affiliate;*/\n', '\n', '    balances[team] = totalSupply * 28 / 100;\n', '    balances[founders] = totalSupply * 12 / 100;\n', '    balances[bounty] = totalSupply * 1 / 100;\n', '    balances[affiliate] = totalSupply * 1 / 100;\n', '    balances[advisers] = totalSupply * 1 / 100;\n', '    balances[ecoSystemFund] = totalSupply * 5 / 100;\n', '    balances[forSale] = totalSupply * 52 / 100;\n', '\n', '    emit Transfer(0x0, team, balances[team]);\n', '    emit Transfer(0x0, founders, balances[founders]);\n', '    emit Transfer(0x0, bounty, balances[bounty]);\n', '    emit Transfer(0x0, affiliate, balances[affiliate]);\n', '    emit Transfer(0x0, advisers, balances[advisers]);\n', '    emit Transfer(0x0, ecoSystemFund, balances[ecoSystemFund]);\n', '    emit Transfer(0x0, forSale, balances[forSale]);\n', '  }\n', '\n', '\n', '  // returns address of crowdsale token, The token must be ERC20-compliant\n', '  /*function getToken() view public onlyOwner() returns(address) {\n', '    return address(token);\n', '  }*/\n', '\n', '\n', '  function () external payable {\n', '\n', '    require(msg.value >= 0.1 ether); // minimal ether to buy\n', '    require(now >= openingTime);\n', '    require(now <= closingTime);\n', '    require(hardCap > totalCollected);\n', '    require(isICOActive());\n', '    require(!hardcapReached);\n', '\n', '    sellTokens(msg.sender, msg.value); // the msg.value is in wei\n', '  }\n', '\n', '\n', '  function sellTokens(address _recepient, uint256 _value) private\n', '  {\n', '    require(_recepient != 0x0); // 0x0 is meaning to destory(burn)\n', '    require(now >= openingTime && now <= closingTime);\n', '\n', '    // the unit of the msg.value is in wei \n', '\n', '    // if reaching the hard cap, we allow the user to pay partial ethers and get partial tokensSold\n', '    // then, we will refund reset ethers to the buyer&#39;s address\n', '    uint256 newTotalCollected = totalCollected + _value; // unit: wei\n', '\n', '    if (hardCap <= newTotalCollected) {\n', '        hardcapReached = true; // reach the hard cap\n', '        ICOstatus = false;  // close the ICO\n', '        isRefundable = false; // can&#39;t refund\n', '        minimalgoalReached = true;\n', '    }\n', '\n', '    totalCollected = totalCollected + _value; // unit: wei\n', '\n', '    if (minimalGoal <= newTotalCollected) {\n', '        minimalgoalReached = true; // reach the minimal goal (soft cap)\n', '        isRefundable = false; // can&#39;t refund\n', '    }\n', '\n', '    uint256 tokensSold = _value * weiToToken; // token = eth * rate\n', '    uint256 bonusTokens = 0;\n', '    bonusTokens = getBonusTokens(tokensSold);\n', '    if (bonusTokens > 0) {\n', '        tokensSold += bonusTokens;\n', '    }\n', '\n', '        require(balances[forSale] > tokensSold);\n', '        balances[forSale] -= tokensSold;\n', '        balances[_recepient] += tokensSold;\n', '        emit Transfer(forSale, _recepient, tokensSold);\n', '\n', '    participants[_recepient].weiDonated += _value;\n', '    participants[_recepient].tokensGiven += tokensSold;\n', '\n', '    totalSoldTokens += tokensSold;    // total sold tokens\n', '  }\n', '\n', '\n', '  function isICOActive() private returns (bool) {\n', '    if (now >= openingTime  && now <= closingTime && !hardcapReached) {\n', '        ICOstatus = true;\n', '    } else {\n', '        ICOstatus = false;\n', '    }\n', '    return ICOstatus;\n', '  }\n', '\n', '\n', '  function refund() public {\n', '    require(now >= openingTime);\n', '    require(now <= closingTime);\n', '    require(isRefundable);\n', '\n', '    uint256 weiDonated = participants[msg.sender].weiDonated;\n', '    uint256 tokensGiven = participants[msg.sender].tokensGiven;\n', '\n', '    require(weiDonated > 0);\n', '    require(tokensGiven > 0);\n', '\n', '    require(forSale != msg.sender);\n', '    require(balances[msg.sender] >= tokensGiven); \n', '\n', '    balances[forSale] += tokensGiven;\n', '    balances[msg.sender] -= tokensGiven;\n', '    emit Transfer(msg.sender, forSale, tokensGiven);\n', '\n', '    // if refundSaleTokens fail, it will throw\n', '    msg.sender.transfer(weiDonated);    // unit: wei, refund ether to buyer\n', '\n', '    participants[msg.sender].weiDonated = 0;    // set balance of wei to 0\n', '    participants[msg.sender].tokensGiven = 0;   // set balance of token to 0\n', '    participants[msg.sender].freeTokens = 0; // set free token to 0\n', ' \n', '    // re-calcuate total tokens & total wei of funding\n', '    totalSoldTokens -= tokensGiven;\n', '    totalCollected -= weiDonated;\n', '  }\n', '\n', '\n', '  function transferICOFundingToWallet(uint256 _value) public onlyOwner() {\n', '        forSale.transfer(_value); // unit wei\n', '  }\n', '\n', '  function getBonusTokens(uint256 _tokensSold) view public returns (uint256) {\n', '\n', '    uint256 bonusTokens = 0;\n', '    uint256 bonusBeginTime = openingTime; // Sep-08\n', '    // date -j -f "%Y-%m-%d %H:%M:%S" "2018-09-10 00:00:00" "+%s"\n', '    if (now >= bonusBeginTime && now <= bonusBeginTime+86400*7) {\n', '        bonusTokens = _tokensSold * 20 / 100;\n', '    } else if (now > bonusBeginTime+86400*7 && now <= bonusBeginTime+86400*14) {\n', '        bonusTokens = _tokensSold * 15 / 100;\n', '    } else if (now > bonusBeginTime+86400*14 && now <= bonusBeginTime+86400*21) {\n', '        bonusTokens = _tokensSold * 10 / 100;\n', '    } else if (now > bonusBeginTime+86400*21 && now <= bonusBeginTime+86400*30) {\n', '        bonusTokens = _tokensSold * 5 / 100;\n', '    }\n', '\n', '    uint256 newTotalSoldTokens = _tokensSold + bonusTokens;\n', '    uint256 hardCapTokens = hardCap * weiToToken;\n', '    if (hardCapTokens < newTotalSoldTokens) {\n', '        bonusTokens = 0;\n', '    }\n', '\n', '    return bonusTokens;\n', '  }\n', '\n', '    function getCrowdsaleStatus() view public onlyOwner() returns (bool,bool,bool,bool) {\n', '        return (ICOstatus,isRefundable,minimalgoalReached,hardcapReached);\n', '    }\n', '\n', '  function getCurrentTime() view public onlyOwner() returns (uint256) {\n', '    return now;\n', '  }\n', '\n', '  function sendFreeTokens(address _to, uint256 _value) public onlyOwner() {\n', '    require(_to != 0x0); // 0x0 is meaning to destory(burn)\n', '    require(participants[_to].freeTokens <= 1000); // maximum total free tokens per user\n', '    require(_value <= 100); // maximum free tokens per time\n', '    require(_value > 0);\n', '    require(forSale != _to);\n', '    require(balances[forSale] > _value);\n', '\n', '    participants[_to].freeTokens += _value;\n', '    participants[_to].tokensGiven += _value;\n', '    totalSoldTokens += _value;    // total sold tokens\n', '\n', '    balances[forSale] -= _value;\n', '    balances[_to] += _value;\n', '\n', '    emit Transfer(forSale, _to, _value);\n', '  }\n', '\n', '  // get free tokens in user&#39;s account\n', '  function getFreeTokensAmountOfUser(address _to) view public onlyOwner() returns (uint256) {\n', '    require(_to != 0x0); // 0x0 is meaning to destory(burn)\n', '    uint256 _tokens = 0;\n', '    _tokens = participants[_to].freeTokens;\n', '    return _tokens;\n', '  }\n', '\n', '  function getBalanceOfAccount(address _to) view public onlyOwner() returns (uint256, uint256) {\n', '    return (participants[_to].weiDonated, participants[_to].tokensGiven);\n', '  }\n', '\n', '    function transferFundsTokens(address _from, address _to, uint256 _value) public onlyOwner() {\n', '        require(_from == team || _from == founders || _from == bounty || _from == affiliate || _from == advisers || _from == ecoSystemFund || _from == forSale);\n', '        require(_to == team || _to == founders || _to == bounty || _to == affiliate || _to == advisers || _to == ecoSystemFund || _to == forSale);\n', '        require(_value > 0);\n', '        require(balances[_from] >= _value);\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/BikeCrowdsale.sol\n', '\n', '//import "./BlockchainBikeToken.sol";\n', 'contract BikeCrowdsale is Ownable, StandardToken {\n', '    string public constant name = "Blockchain based Bike Token"; // name of token\n', '    string public constant symbol = "BBT"; // symbol of token\n', '    uint8 public constant decimals = 18;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct Investor {\n', '        uint256 weiDonated;\n', '        uint256 tokensGiven;\n', '        uint256 freeTokens;\n', '    }\n', '\n', '    mapping(address => Investor) participants;\n', '\n', '    uint256 public totalSupply= 5*10**9 * 10**18; // total supply \n', '    uint256 public hardCap = 1000000 * 10**18; // 1 million ether = 1 m * 10^18 Wei\n', '    uint256 public minimalGoal = 1000 * 10**18; // 1k ether = 1k * 10^18 Wei\n', '    uint256 public weiToToken = 5000; // 1 ether = 5000 tokens\n', '    uint256 public totalSoldTokens = 0;\n', '    uint256 public openingTime = 1537372800; // date -j -f "%Y-%m-%d %H:%M:%S" "2018-09-20 00:00:00" "+%s"\n', '    uint256 public closingTime = 1568044800; // date -j -f "%Y-%m-%d %H:%M:%S" "2019-09-10 00:00:00" "+%s";\n', '\n', '    uint256 public totalCollected; // unit: Wei\n', '\n', '    bool public ICOstatus = true; // true - active, false - inactive\n', '    bool public hardcapReached = false; // true - the cap is reached, false - the cap is not reached\n', '    bool public minimalgoalReached = false; // true - the goal is reached, false - the goal is not reached\n', '    bool public isRefundable = true; // can refund or not\n', '\n', '    address public forSale; // fund address for sale \n', '    address public ecoSystemFund; // fund address for eco-system\n', '    address public founders; // fund address for founders\n', '    address public team; // fund address for team\n', '    address public advisers; // fund address for advisors\n', '    address public bounty; // fund address for bountry\n', '    address public affiliate; // fund address for affiliate\n', '\n', '    address private crowdsale;\n', ' \n', '    //BlockchainBikeToken public token;\n', '\n', '\n', '  constructor(\n', '    //address _token\n', '    ) public {\n', '\n', '    require(hardCap > minimalGoal);\n', '    require(openingTime < closingTime);\n', '    //token = BlockchainBikeToken(_token);\n', '    crowdsale = address(this);\n', '\n', '    forSale = 0xf6ACFDba39D8F786D0D2781A1D20C82E47adF8b7;\n', '    ecoSystemFund = 0x5A77aAE15258a2a4445C701d63dbE74016F7e629;\n', '    founders = 0xA80A449514541aeEcd3e17BECcC74a86e3de6bfA;\n', '    team = 0x309d62B8eaDF717b76296326CA35bB8f2D996B1a;\n', '    advisers = 0xc4319217ca328F7518c463D6D3e78f68acc5B076;\n', '    bounty = 0x3605e4E99efFaB70D0C84aA2beA530683824246f;\n', '    affiliate = 0x1709365100eD9B7c417E0dF0fdc32027af1DAff1;\n', '\n', '    /*forSale = _forSale;\n', '    ecoSystemFund = _ecoSystemFund;\n', '    founders = _founders;\n', '    team = _team;\n', '    advisers = _advisers;\n', '    bounty = _bountry;\n', '    affiliate = _affiliate;*/\n', '\n', '    balances[team] = totalSupply * 28 / 100;\n', '    balances[founders] = totalSupply * 12 / 100;\n', '    balances[bounty] = totalSupply * 1 / 100;\n', '    balances[affiliate] = totalSupply * 1 / 100;\n', '    balances[advisers] = totalSupply * 1 / 100;\n', '    balances[ecoSystemFund] = totalSupply * 5 / 100;\n', '    balances[forSale] = totalSupply * 52 / 100;\n', '\n', '    emit Transfer(0x0, team, balances[team]);\n', '    emit Transfer(0x0, founders, balances[founders]);\n', '    emit Transfer(0x0, bounty, balances[bounty]);\n', '    emit Transfer(0x0, affiliate, balances[affiliate]);\n', '    emit Transfer(0x0, advisers, balances[advisers]);\n', '    emit Transfer(0x0, ecoSystemFund, balances[ecoSystemFund]);\n', '    emit Transfer(0x0, forSale, balances[forSale]);\n', '  }\n', '\n', '\n', '  // returns address of crowdsale token, The token must be ERC20-compliant\n', '  /*function getToken() view public onlyOwner() returns(address) {\n', '    return address(token);\n', '  }*/\n', '\n', '\n', '  function () external payable {\n', '\n', '    require(msg.value >= 0.1 ether); // minimal ether to buy\n', '    require(now >= openingTime);\n', '    require(now <= closingTime);\n', '    require(hardCap > totalCollected);\n', '    require(isICOActive());\n', '    require(!hardcapReached);\n', '\n', '    sellTokens(msg.sender, msg.value); // the msg.value is in wei\n', '  }\n', '\n', '\n', '  function sellTokens(address _recepient, uint256 _value) private\n', '  {\n', '    require(_recepient != 0x0); // 0x0 is meaning to destory(burn)\n', '    require(now >= openingTime && now <= closingTime);\n', '\n', '    // the unit of the msg.value is in wei \n', '\n', '    // if reaching the hard cap, we allow the user to pay partial ethers and get partial tokensSold\n', "    // then, we will refund reset ethers to the buyer's address\n", '    uint256 newTotalCollected = totalCollected + _value; // unit: wei\n', '\n', '    if (hardCap <= newTotalCollected) {\n', '        hardcapReached = true; // reach the hard cap\n', '        ICOstatus = false;  // close the ICO\n', "        isRefundable = false; // can't refund\n", '        minimalgoalReached = true;\n', '    }\n', '\n', '    totalCollected = totalCollected + _value; // unit: wei\n', '\n', '    if (minimalGoal <= newTotalCollected) {\n', '        minimalgoalReached = true; // reach the minimal goal (soft cap)\n', "        isRefundable = false; // can't refund\n", '    }\n', '\n', '    uint256 tokensSold = _value * weiToToken; // token = eth * rate\n', '    uint256 bonusTokens = 0;\n', '    bonusTokens = getBonusTokens(tokensSold);\n', '    if (bonusTokens > 0) {\n', '        tokensSold += bonusTokens;\n', '    }\n', '\n', '        require(balances[forSale] > tokensSold);\n', '        balances[forSale] -= tokensSold;\n', '        balances[_recepient] += tokensSold;\n', '        emit Transfer(forSale, _recepient, tokensSold);\n', '\n', '    participants[_recepient].weiDonated += _value;\n', '    participants[_recepient].tokensGiven += tokensSold;\n', '\n', '    totalSoldTokens += tokensSold;    // total sold tokens\n', '  }\n', '\n', '\n', '  function isICOActive() private returns (bool) {\n', '    if (now >= openingTime  && now <= closingTime && !hardcapReached) {\n', '        ICOstatus = true;\n', '    } else {\n', '        ICOstatus = false;\n', '    }\n', '    return ICOstatus;\n', '  }\n', '\n', '\n', '  function refund() public {\n', '    require(now >= openingTime);\n', '    require(now <= closingTime);\n', '    require(isRefundable);\n', '\n', '    uint256 weiDonated = participants[msg.sender].weiDonated;\n', '    uint256 tokensGiven = participants[msg.sender].tokensGiven;\n', '\n', '    require(weiDonated > 0);\n', '    require(tokensGiven > 0);\n', '\n', '    require(forSale != msg.sender);\n', '    require(balances[msg.sender] >= tokensGiven); \n', '\n', '    balances[forSale] += tokensGiven;\n', '    balances[msg.sender] -= tokensGiven;\n', '    emit Transfer(msg.sender, forSale, tokensGiven);\n', '\n', '    // if refundSaleTokens fail, it will throw\n', '    msg.sender.transfer(weiDonated);    // unit: wei, refund ether to buyer\n', '\n', '    participants[msg.sender].weiDonated = 0;    // set balance of wei to 0\n', '    participants[msg.sender].tokensGiven = 0;   // set balance of token to 0\n', '    participants[msg.sender].freeTokens = 0; // set free token to 0\n', ' \n', '    // re-calcuate total tokens & total wei of funding\n', '    totalSoldTokens -= tokensGiven;\n', '    totalCollected -= weiDonated;\n', '  }\n', '\n', '\n', '  function transferICOFundingToWallet(uint256 _value) public onlyOwner() {\n', '        forSale.transfer(_value); // unit wei\n', '  }\n', '\n', '  function getBonusTokens(uint256 _tokensSold) view public returns (uint256) {\n', '\n', '    uint256 bonusTokens = 0;\n', '    uint256 bonusBeginTime = openingTime; // Sep-08\n', '    // date -j -f "%Y-%m-%d %H:%M:%S" "2018-09-10 00:00:00" "+%s"\n', '    if (now >= bonusBeginTime && now <= bonusBeginTime+86400*7) {\n', '        bonusTokens = _tokensSold * 20 / 100;\n', '    } else if (now > bonusBeginTime+86400*7 && now <= bonusBeginTime+86400*14) {\n', '        bonusTokens = _tokensSold * 15 / 100;\n', '    } else if (now > bonusBeginTime+86400*14 && now <= bonusBeginTime+86400*21) {\n', '        bonusTokens = _tokensSold * 10 / 100;\n', '    } else if (now > bonusBeginTime+86400*21 && now <= bonusBeginTime+86400*30) {\n', '        bonusTokens = _tokensSold * 5 / 100;\n', '    }\n', '\n', '    uint256 newTotalSoldTokens = _tokensSold + bonusTokens;\n', '    uint256 hardCapTokens = hardCap * weiToToken;\n', '    if (hardCapTokens < newTotalSoldTokens) {\n', '        bonusTokens = 0;\n', '    }\n', '\n', '    return bonusTokens;\n', '  }\n', '\n', '    function getCrowdsaleStatus() view public onlyOwner() returns (bool,bool,bool,bool) {\n', '        return (ICOstatus,isRefundable,minimalgoalReached,hardcapReached);\n', '    }\n', '\n', '  function getCurrentTime() view public onlyOwner() returns (uint256) {\n', '    return now;\n', '  }\n', '\n', '  function sendFreeTokens(address _to, uint256 _value) public onlyOwner() {\n', '    require(_to != 0x0); // 0x0 is meaning to destory(burn)\n', '    require(participants[_to].freeTokens <= 1000); // maximum total free tokens per user\n', '    require(_value <= 100); // maximum free tokens per time\n', '    require(_value > 0);\n', '    require(forSale != _to);\n', '    require(balances[forSale] > _value);\n', '\n', '    participants[_to].freeTokens += _value;\n', '    participants[_to].tokensGiven += _value;\n', '    totalSoldTokens += _value;    // total sold tokens\n', '\n', '    balances[forSale] -= _value;\n', '    balances[_to] += _value;\n', '\n', '    emit Transfer(forSale, _to, _value);\n', '  }\n', '\n', "  // get free tokens in user's account\n", '  function getFreeTokensAmountOfUser(address _to) view public onlyOwner() returns (uint256) {\n', '    require(_to != 0x0); // 0x0 is meaning to destory(burn)\n', '    uint256 _tokens = 0;\n', '    _tokens = participants[_to].freeTokens;\n', '    return _tokens;\n', '  }\n', '\n', '  function getBalanceOfAccount(address _to) view public onlyOwner() returns (uint256, uint256) {\n', '    return (participants[_to].weiDonated, participants[_to].tokensGiven);\n', '  }\n', '\n', '    function transferFundsTokens(address _from, address _to, uint256 _value) public onlyOwner() {\n', '        require(_from == team || _from == founders || _from == bounty || _from == affiliate || _from == advisers || _from == ecoSystemFund || _from == forSale);\n', '        require(_to == team || _to == founders || _to == bounty || _to == affiliate || _to == advisers || _to == ecoSystemFund || _to == forSale);\n', '        require(_value > 0);\n', '        require(balances[_from] >= _value);\n', '        balances[_from] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '}']
