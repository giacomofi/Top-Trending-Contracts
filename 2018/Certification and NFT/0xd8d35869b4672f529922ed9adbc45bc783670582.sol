['pragma solidity ^0.4.11;\n', '\n', 'contract ERC20Interface {\n', '     function totalSupply() public constant returns (uint);\n', '     function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '     function transfer(address to, uint tokens) public returns (bool success);\n', '     function approve(address spender, uint tokens) public returns (bool success);\n', '     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '     event Transfer(address indexed from, address indexed to, uint tokens);\n', '     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', 'contract BitFluxADContract {\n', '    \n', '  // The token being sold\n', '  ERC20Interface public token;\n', '\n', '  \n', '  // address where funds are collected\n', '  // address where tokens are deposited and from where we send tokens to buyers\n', '  address public wallet;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  function BitFluxADContract(address _wallet, address _tokenAddress) public \n', '  {\n', '    require(_wallet != 0x0);\n', '    require (_tokenAddress != 0x0);\n', '    wallet = _wallet;\n', '    token = ERC20Interface(_tokenAddress);\n', '  }\n', '  \n', '  // fallback function can be used to buy tokens\n', '  function () public payable {\n', '    throw;\n', '  }\n', '\n', '    /**\n', '     * airdrop to token holders\n', '     **/ \n', '    function BulkTransfer(address[] tokenHolders, uint amount) public {\n', '        require(msg.sender==wallet);\n', '        for(uint i = 0; i<tokenHolders.length; i++)\n', '        {\n', '            token.transferFrom(wallet,tokenHolders[i],amount);\n', '        }\n', '    }\n', '}']