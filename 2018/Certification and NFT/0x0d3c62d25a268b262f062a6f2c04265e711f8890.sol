['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', "/// @dev We need to be able to check a card's checklist ID, so use this interface instead of importing everything.\n", 'contract StrikersBaseInterface {\n', '\n', '  struct Card {\n', '    uint32 mintTime;\n', '    uint8 checklistId;\n', '    uint16 serialNumber;\n', '  }\n', '\n', '  Card[] public cards;\n', '}\n', '\n', '/// @title An optional contract that allows us to associate metadata to our cards.\n', '/// @author The CryptoStrikers Team\n', 'contract StrikersMetadataIPFS is Ownable {\n', '\n', '  /// @dev The base url for an IPFS gateway\n', '  ///   ex: https://ipfs.infura.io/ipfs/\n', '  string public ipfsGateway;\n', '\n', '  /// @dev A reference to the main CryptoStrikers contract\n', '  StrikersBaseInterface public strikersBaseContract;\n', '\n', '  /// @dev Cards with stars have special metadata, which we access here using the relevant token id.\n', '  mapping(uint256 => string) internal starredCardURIs;\n', '\n', '  /// @dev For the rest of the cards, we get their checklist id and access this mapping.\n', '  mapping(uint8 => string) internal checklistIdURIs;\n', '\n', '  constructor(string _ipfsGateway, address _strikersBaseAddress) public {\n', '    ipfsGateway = _ipfsGateway;\n', '    strikersBaseContract = StrikersBaseInterface(_strikersBaseAddress);\n', '    setupURIs();\n', '  }\n', '\n', "  /// @dev This isn't super expensive so just do it in the constructor.\n", '  function setupURIs() internal {\n', '    // ONE STAR HAZARD\n', '    starredCardURIs[1778] = "QmYr929yRFHUWqadAW6djKXaXjv9hzjxJyhgfNiTyQWw3a";\n', '    starredCardURIs[8151] = "QmYr929yRFHUWqadAW6djKXaXjv9hzjxJyhgfNiTyQWw3a";\n', '\n', '    // ONE STAR MBAPPE\n', '    starredCardURIs[882] = "QmPvDZykYBw9iMBfHcSdLMruWirKUfcwsXfZ5mZwEFnG7X";\n', '    starredCardURIs[2552] = "QmPvDZykYBw9iMBfHcSdLMruWirKUfcwsXfZ5mZwEFnG7X";\n', '    starredCardURIs[3043] = "QmPvDZykYBw9iMBfHcSdLMruWirKUfcwsXfZ5mZwEFnG7X";\n', '    starredCardURIs[4019] = "QmPvDZykYBw9iMBfHcSdLMruWirKUfcwsXfZ5mZwEFnG7X";\n', '    starredCardURIs[4460] = "QmPvDZykYBw9iMBfHcSdLMruWirKUfcwsXfZ5mZwEFnG7X";\n', '    starredCardURIs[5303] = "QmPvDZykYBw9iMBfHcSdLMruWirKUfcwsXfZ5mZwEFnG7X";\n', '    starredCardURIs[7109] = "QmPvDZykYBw9iMBfHcSdLMruWirKUfcwsXfZ5mZwEFnG7X";\n', '    starredCardURIs[8494] = "QmPvDZykYBw9iMBfHcSdLMruWirKUfcwsXfZ5mZwEFnG7X";\n', '\n', '    // ONE STAR GRIEZMANN\n', '    starredCardURIs[3448] = "QmXZmq6xs5MaoSZ6UPJ5MLKDeLK5rTWuwhjYvaeZJdMS77";\n', '    starredCardURIs[4455] = "QmXZmq6xs5MaoSZ6UPJ5MLKDeLK5rTWuwhjYvaeZJdMS77";\n', '    starredCardURIs[7366] = "QmXZmq6xs5MaoSZ6UPJ5MLKDeLK5rTWuwhjYvaeZJdMS77";\n', '    starredCardURIs[7619] = "QmXZmq6xs5MaoSZ6UPJ5MLKDeLK5rTWuwhjYvaeZJdMS77";\n', '\n', '    // ONE STAR POGBA\n', '    starredCardURIs[5233] = "QmVDfxWGjLSomrcQz7JB2iZmsfNFpyVPQzJvkCbJc19iWu";\n', '    starredCardURIs[8089] = "QmVDfxWGjLSomrcQz7JB2iZmsfNFpyVPQzJvkCbJc19iWu";\n', '\n', '    // ONE STAR COURTOIS\n', '    starredCardURIs[3224] = "QmXCJ53VF2nZdj1xpYaBo8BJyjdoo1ggVmCjt1cAWhd4ou";\n', '\n', '    // ONE STAR LLORIS\n', '    starredCardURIs[7357] = "QmP5wADxxZJVrzkKj5e8S7HAtAGg6L1DHMAUp7tGCgiGxE";\n', '    starredCardURIs[7407] = "QmP5wADxxZJVrzkKj5e8S7HAtAGg6L1DHMAUp7tGCgiGxE";\n', '    starredCardURIs[7697] = "QmP5wADxxZJVrzkKj5e8S7HAtAGg6L1DHMAUp7tGCgiGxE";\n', '\n', '    // ONE STAR ALLI\n', '    starredCardURIs[736] = "Qmc7w3D5C9xEp3LPTwGxwC3xUnAsQH22KDSdhLi5Bj7nYr";\n', '    starredCardURIs[5487] = "Qmc7w3D5C9xEp3LPTwGxwC3xUnAsQH22KDSdhLi5Bj7nYr";\n', '    starredCardURIs[7421] = "Qmc7w3D5C9xEp3LPTwGxwC3xUnAsQH22KDSdhLi5Bj7nYr";\n', '\n', '    // ONE STAR VARANE\n', '    starredCardURIs[2867] = "QmecZq2xjqRPQfUQbGs2N4dp7NX1ftutVcp6vRK9FUMV4C";\n', '    starredCardURIs[6252] = "QmecZq2xjqRPQfUQbGs2N4dp7NX1ftutVcp6vRK9FUMV4C";\n', '\n', '    // ONE STAR MANDZUKIC\n', '    starredCardURIs[6250] = "QmTyyYRJQhqVHAVCgvpMJgp5d67QDuLnkDZ24EnZBD2heF";\n', '\n', '    // TWO STAR MANDZUKIC\n', '    starredCardURIs[7794] = "QmZFHQhcWenea4GwHsK2chF5x1rxyFDvnz3QhyPqLSRKc4";\n', '  }\n', '\n', '  function updateIpfsGateway(string _ipfsGateway) external onlyOwner {\n', '    ipfsGateway = _ipfsGateway;\n', '  }\n', '\n', '  function updateStarredCardURI(uint256 _tokenId, string _uri) external onlyOwner {\n', '    starredCardURIs[_tokenId] = _uri;\n', '  }\n', '\n', '  function updateChecklistIdURI(uint8 _checklistId, string _uri) external onlyOwner {\n', '    checklistIdURIs[_checklistId] = _uri;\n', '  }\n', '\n', '  /// @dev Returns the IPFS URL for a given token Id.\n', '  ///   ex: https://ipfs.infura.io/ipfs/QmP5wADxxZJVrzkKj5e8S7HAtAGg6L1DHMAUp7tGCgiGxE\n', "  ///   That URI points to a JSON blob conforming to OpenSea's spec.\n", '  ///   see: https://docs.opensea.io/docs/2-adding-metadata\n', '  function tokenURI(uint256 _tokenId) external view returns (string) {\n', '    string memory starredCardURI = starredCardURIs[_tokenId];\n', '    if (bytes(starredCardURI).length > 0) {\n', '      return strConcat(ipfsGateway, starredCardURI);\n', '    }\n', '\n', '    uint8 checklistId;\n', '    (,checklistId,) = strikersBaseContract.cards(_tokenId);\n', '    return strConcat(ipfsGateway, checklistIdURIs[checklistId]);\n', '  }\n', '\n', '  // String helper below was taken from Oraclize.\n', '  // https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.4.sol\n', '\n', '  function strConcat(string _a, string _b) internal pure returns (string) {\n', '    bytes memory _ba = bytes(_a);\n', '    bytes memory _bb = bytes(_b);\n', '    string memory ab = new string(_ba.length + _bb.length);\n', '    bytes memory bab = bytes(ab);\n', '    uint k = 0;\n', '    for (uint i = 0; i < _ba.length; i++) bab[k++] = _ba[i];\n', '    for (i = 0; i < _bb.length; i++) bab[k++] = _bb[i];\n', '    return string(bab);\n', '  }\n', '}']