['pragma solidity ^0.4.24;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title UpgradeabilityStorage\n', ' * @dev This contract holds all the necessary state variables to support the upgrade functionality\n', ' */\n', 'contract UpgradeabilityStorage {\n', '    // Versions registry\n', '    IRegistry internal registry;\n', '\n', '    // Address of the current implementation\n', '    address internal _implementation;\n', '\n', '    /**\n', '    * @dev Tells the address of the current implementation\n', '    * @return address of the current implementation\n', '    */\n', '    function implementation() public view returns (address) {\n', '        return _implementation;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Gives the possibility to delegate any call to a foreign implementation.\n', ' */\n', 'contract Proxy {\n', '\n', '    /**\n', '    * @dev Tells the address of the implementation where every call will be delegated.\n', '    * @return address of the implementation to which it will be delegated\n', '    */\n', '    function implementation() public view returns (address);\n', '\n', '    /**\n', '    * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n', '    * This function will return whatever the implementation call returns\n', '    */\n', '    function () payable public {\n', '        address _impl = implementation();\n', '        require(_impl != address(0));\n', '\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize)\n', '            let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n', '            let size := returndatasize\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            switch result\n', '            case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title IRegistry\n', ' * @dev This contract represents the interface of a registry contract\n', ' */\n', 'interface IRegistry {\n', '    /**\n', '    * @dev This event will be emitted every time a new proxy is created\n', '    * @param proxy representing the address of the proxy created\n', '    */\n', '    event ProxyCreated(address proxy);\n', '\n', '    /**\n', '    * @dev This event will be emitted every time a new implementation is registered\n', '    * @param version representing the version name of the registered implementation\n', '    * @param implementation representing the address of the registered implementation\n', '    */\n', '    event VersionAdded(string version, address implementation);\n', '\n', '    /**\n', '    * @dev Registers a new version with its implementation address\n', '    * @param version representing the version name of the new implementation to be registered\n', '    * @param implementation representing the address of the new implementation to be registered\n', '    */\n', '    function addVersion(string version, address implementation) external;\n', '\n', '    /**\n', '    * @dev Tells the address of the implementation for a given version\n', '    * @param version to query the implementation of\n', '    * @return address of the implementation registered for the given version\n', '    */\n', '    function getVersion(string version) external view returns (address);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title UpgradeabilityProxy\n', ' * @dev This contract represents a proxy where the implementation address to which it will delegate can be upgraded\n', ' */\n', 'contract UpgradeabilityProxy is Proxy, UpgradeabilityStorage, Ownable {\n', '\n', '    /**\n', '    * @dev Constructor function\n', '    */\n', '    constructor(string _version) public {\n', '        registry = IRegistry(msg.sender);\n', '        upgradeTo(_version);\n', '    }\n', '\n', '    /**\n', '    * @dev Upgrades the implementation to the requested version\n', '    * @param _version representing the version name of the new implementation to be set\n', '    */\n', '    function upgradeTo(string _version) public onlyOwner {\n', '        _implementation = registry.getVersion(_version);\n', '    }\n', '\n', '}']