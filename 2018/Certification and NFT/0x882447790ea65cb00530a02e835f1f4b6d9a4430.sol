['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '// We need this interface to interact with out ERC20 - tokencontract\n', 'contract ERC20Interface {\n', '         // function totalSupply() public constant returns (uint256);\n', '      function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '         // function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n', '      function transfer(address to, uint256 tokens) public returns (bool success);\n', '         // function approve(address spender, uint256 tokens) public returns (bool success);\n', '         // function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '         // event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '         // event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', ' } \n', '\n', '\n', '// ---\n', '// Main tokensale class\n', '//\n', 'contract Tokensale\n', '{\n', 'using SafeMath for uint256;\n', '\n', 'address public owner;                  // Owner of this contract, may withdraw ETH and kill this contract\n', 'address public thisAddress;            // Address of this contract\n', 'string  public lastaction;             // \n', 'uint256 public constant RATE = 1000;   // 1 ETH = 1000 Rentarto Coin\n', 'uint256 public raisedAmount     = 0;   // Raised amount in ETH\n', 'uint256 public available_tokens = 0;   // Last number of available_tokens BEFORE last payment\n', '\n', 'uint256 public lasttokencount;         // Last ordered token\n', 'bool    public last_transfer_state;    // Last state (bool) of token transfer\n', '\n', '\n', '\n', '// ---\n', '// Construktor\n', '// \n', 'function Tokensale () public\n', '{\n', 'owner       = msg.sender;\n', 'thisAddress = address(this);\n', '} // Construktor\n', '\n', '\n', ' \n', ' \n', '\n', '\n', '\n', '// ---\n', '// Pay ether to this contract and receive your tokens\n', '//\n', 'function () payable public\n', '{\n', 'address tokenAddress = 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E;\n', 'ERC20Interface atoContract = ERC20Interface(tokenAddress); // Rentarto Coin is 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E\n', '\n', '\n', '//\n', '// Minimum = 0.00125 ETH\n', '//\n', 'if ( msg.value >= 1250000000000000 )\n', '   {\n', '   // Calculate tokens to sell\n', '   uint256 weiAmount = msg.value;\n', '   uint256 tokens = weiAmount.mul(RATE);\n', '    \n', '   // Our current token balance\n', '   available_tokens = atoContract.balanceOf(thisAddress);    \n', '    \n', '   \n', '   if (available_tokens >= tokens)\n', '      {      \n', '      \n', '      \t  lasttokencount = tokens;   \n', '      \t  raisedAmount   = raisedAmount.add(msg.value);\n', '   \n', '          // Send tokens to buyer\n', '          last_transfer_state = atoContract.transfer(msg.sender,  tokens);\n', '          \n', '          \n', '      } // if (available_tokens >= tokens)\n', '      else\n', '          {\n', '          revert();\n', '          }\n', '   \n', '   \n', '   \n', '   } // if ( msg.value >= 1250000000000000 )\n', '   else\n', '       {\n', '       revert();\n', '       }\n', '\n', '\n', '\n', '\n', '\n', '} // ()\n', ' \n', '\n', '\n', '\n', '//\n', '// owner_withdraw - Ether withdraw (owner only)\n', '//\n', 'function owner_withdraw () public\n', '{\n', 'if (msg.sender != owner) return;\n', '\n', 'owner.transfer( this.balance );\n', 'lastaction = "Withdraw";  \n', '} // owner_withdraw\n', '\n', '\n', '\n', '//\n', '// Kill (owner only)\n', '//\n', 'function kill () public\n', '{\n', 'if (msg.sender != owner) return;\n', '\n', '\n', '// Transfer tokens back to owner\n', 'address tokenAddress = 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E;\n', 'ERC20Interface atoContract = ERC20Interface(tokenAddress); // rentarto is 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E\n', '\n', 'uint256 balance = atoContract.balanceOf(this);\n', 'assert(balance > 0);\n', 'atoContract.transfer(owner, balance);\n', '\n', '\n', 'owner.transfer( this.balance );\n', 'selfdestruct(owner);\n', '} // kill\n', '\n', '\n', '} /* contract Tokensale */']
['pragma solidity ^0.4.19;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '// We need this interface to interact with out ERC20 - tokencontract\n', 'contract ERC20Interface {\n', '         // function totalSupply() public constant returns (uint256);\n', '      function balanceOf(address tokenOwner) public constant returns (uint256 balance);\n', '         // function allowance(address tokenOwner, address spender) public constant returns (uint256 remaining);\n', '      function transfer(address to, uint256 tokens) public returns (bool success);\n', '         // function approve(address spender, uint256 tokens) public returns (bool success);\n', '         // function transferFrom(address from, address to, uint256 tokens) public returns (bool success);\n', '         // event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '         // event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', ' } \n', '\n', '\n', '// ---\n', '// Main tokensale class\n', '//\n', 'contract Tokensale\n', '{\n', 'using SafeMath for uint256;\n', '\n', 'address public owner;                  // Owner of this contract, may withdraw ETH and kill this contract\n', 'address public thisAddress;            // Address of this contract\n', 'string  public lastaction;             // \n', 'uint256 public constant RATE = 1000;   // 1 ETH = 1000 Rentarto Coin\n', 'uint256 public raisedAmount     = 0;   // Raised amount in ETH\n', 'uint256 public available_tokens = 0;   // Last number of available_tokens BEFORE last payment\n', '\n', 'uint256 public lasttokencount;         // Last ordered token\n', 'bool    public last_transfer_state;    // Last state (bool) of token transfer\n', '\n', '\n', '\n', '// ---\n', '// Construktor\n', '// \n', 'function Tokensale () public\n', '{\n', 'owner       = msg.sender;\n', 'thisAddress = address(this);\n', '} // Construktor\n', '\n', '\n', ' \n', ' \n', '\n', '\n', '\n', '// ---\n', '// Pay ether to this contract and receive your tokens\n', '//\n', 'function () payable public\n', '{\n', 'address tokenAddress = 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E;\n', 'ERC20Interface atoContract = ERC20Interface(tokenAddress); // Rentarto Coin is 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E\n', '\n', '\n', '//\n', '// Minimum = 0.00125 ETH\n', '//\n', 'if ( msg.value >= 1250000000000000 )\n', '   {\n', '   // Calculate tokens to sell\n', '   uint256 weiAmount = msg.value;\n', '   uint256 tokens = weiAmount.mul(RATE);\n', '    \n', '   // Our current token balance\n', '   available_tokens = atoContract.balanceOf(thisAddress);    \n', '    \n', '   \n', '   if (available_tokens >= tokens)\n', '      {      \n', '      \n', '      \t  lasttokencount = tokens;   \n', '      \t  raisedAmount   = raisedAmount.add(msg.value);\n', '   \n', '          // Send tokens to buyer\n', '          last_transfer_state = atoContract.transfer(msg.sender,  tokens);\n', '          \n', '          \n', '      } // if (available_tokens >= tokens)\n', '      else\n', '          {\n', '          revert();\n', '          }\n', '   \n', '   \n', '   \n', '   } // if ( msg.value >= 1250000000000000 )\n', '   else\n', '       {\n', '       revert();\n', '       }\n', '\n', '\n', '\n', '\n', '\n', '} // ()\n', ' \n', '\n', '\n', '\n', '//\n', '// owner_withdraw - Ether withdraw (owner only)\n', '//\n', 'function owner_withdraw () public\n', '{\n', 'if (msg.sender != owner) return;\n', '\n', 'owner.transfer( this.balance );\n', 'lastaction = "Withdraw";  \n', '} // owner_withdraw\n', '\n', '\n', '\n', '//\n', '// Kill (owner only)\n', '//\n', 'function kill () public\n', '{\n', 'if (msg.sender != owner) return;\n', '\n', '\n', '// Transfer tokens back to owner\n', 'address tokenAddress = 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E;\n', 'ERC20Interface atoContract = ERC20Interface(tokenAddress); // rentarto is 0x7C0924eEA284EF4B7A1b0Fefdd0d808Fc717377E\n', '\n', 'uint256 balance = atoContract.balanceOf(this);\n', 'assert(balance > 0);\n', 'atoContract.transfer(owner, balance);\n', '\n', '\n', 'owner.transfer( this.balance );\n', 'selfdestruct(owner);\n', '} // kill\n', '\n', '\n', '} /* contract Tokensale */']
