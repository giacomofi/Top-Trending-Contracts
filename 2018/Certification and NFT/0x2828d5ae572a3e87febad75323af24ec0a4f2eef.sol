['pragma solidity ^0.4.18;\n', '\n', '/*\n', 'Game Name: CryptoPlanets\n', 'Game Link: https://cryptoplanets.com/\n', 'Rules: \n', '- Acquire planets\n', '- Steal resources (ETH) from other planets\n', '*/\n', '\n', 'contract CryptoPlanets {\n', '\n', '    address ceoAddress = 0x8e6DBF31540d2299a674b8240596ae85ebD21314;\n', '    \n', '    modifier onlyCeo() {\n', '        require (msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '    \n', '    struct Planet {\n', '        string name;\n', '        address ownerAddress;\n', '        uint256 curPrice;\n', '        uint256 curResources;\n', '    }\n', '    Planet[] planets;\n', '\n', '\n', '    // How many shares an addres own\n', '    mapping (address => uint) public addressPlanetsCount;\n', '    mapping (address => uint) public addressAttackCount;\n', '    mapping (address => uint) public addressDefenseCount;\n', '    \n', '\n', '    uint256 attackCost = 10000000000000000;\n', '    uint256 defenseCost = 10000000000000000;\n', '    \n', '    uint randNonce = 0;\n', '    bool planetsAreInitiated;\n', '\n', '    /*\n', '    This function allows players to purchase planets from other players. \n', '    The price of the planets is automatically multiplied by 1.5 after each purchase.\n', '    */\n', '    function purchasePlanet(uint _planetId) public payable {\n', '        require(msg.value == planets[_planetId].curPrice);\n', '\n', '        // Calculate the 5% value\n', '        uint256 commission5percent = ((msg.value / 10)/2);\n', '\n', '        // Calculate the owner commission on this sale & transfer the commission to the owner.      \n', '        uint256 commissionOwner = msg.value - (commission5percent * 2); // => 95%\n', '        planets[_planetId].ownerAddress.transfer(commissionOwner);\n', '\n', '        // Reduce number of planets for previous owner\n', '        addressPlanetsCount[planets[_planetId].ownerAddress] = addressPlanetsCount[planets[_planetId].ownerAddress] - 1;\n', '\n', '        // Keep 5% in the resources of the planet\n', '        planets[_planetId].curResources =  planets[_planetId].curResources + commission5percent;\n', '\n', '        // Transfer the 5% commission to the developer\n', '        ceoAddress.transfer(commission5percent);                  \n', '\n', '        // Update the planet owner and set the new price\n', '        planets[_planetId].ownerAddress = msg.sender;\n', '        planets[_planetId].curPrice = planets[_planetId].curPrice + (planets[_planetId].curPrice / 2);\n', '\n', '        // Increment number of planets for new owner\n', '        addressPlanetsCount[msg.sender] = addressPlanetsCount[msg.sender] + 1;\n', '    }\n', '\n', '    //User is purchasing attack\n', '    function purchaseAttack() payable {\n', '\n', '        // Verify that user is paying the correct price\n', '        require(msg.value == attackCost);\n', '        \n', '        // We transfer the amount paid to the owner\n', '        ceoAddress.transfer(msg.value);\n', '\n', '        addressAttackCount[msg.sender]++;\n', '    }\n', '\n', '    //User is purchasing defense\n', '    function purchaseDefense() payable {\n', '        // Verify that user is paying the correct price\n', '        require(msg.value == defenseCost);\n', '        \n', '        // We transfer the amount paid to the owner\n', '        ceoAddress.transfer(msg.value);\n', '        \n', '        addressDefenseCount[msg.sender]++;\n', '    }\n', '\n', '    function StealResources(uint _planetId) {\n', '        // Verify that the address actually own a planet\n', '        require(addressPlanetsCount[msg.sender] > 0);\n', '\n', '        // We verify that this address doesn&#39;t own this planet\n', '        require(planets[_planetId].ownerAddress != msg.sender);\n', '\n', '        // We verify that this planet has resources\n', '        require(planets[_planetId].curResources > 0);\n', '\n', '        // Transfer a random amount of resources (between 1% and 90%) of the resources of the planet to the stealer if it&#39;s attack is better than the planet&#39;s owner defense\n', '        if(addressAttackCount[msg.sender] > addressDefenseCount[planets[_planetId].ownerAddress]) {\n', '            // Generate a random number between 1 and 49\n', '            uint random = uint(keccak256(now, msg.sender, randNonce)) % 49;\n', '            randNonce++;\n', '            \n', '            // Calculate and transfer the random amount of resources to the stealer\n', '            uint256 resourcesStealable = (planets[_planetId].curResources * (50 + random)) / 100;\n', '            msg.sender.transfer(resourcesStealable);\n', '            \n', '            // Save the new resources count\n', '            planets[_planetId].curResources = planets[_planetId].curResources - resourcesStealable;\n', '        }\n', '\n', '    }\n', '    \n', '    // This function will return the details for the connected user (planets count, attack count, defense count)\n', '    function getUserDetails(address _user) public view returns(uint, uint, uint) {\n', '        return(addressPlanetsCount[_user], addressAttackCount[_user], addressDefenseCount[_user]);\n', '    }\n', '    \n', '    // This function will return the details of a planet\n', '    function getPlanet(uint _planetId) public view returns (\n', '        string name,\n', '        address ownerAddress,\n', '        uint256 curPrice,\n', '        uint256 curResources,\n', '        uint ownerAttack,\n', '        uint ownerDefense\n', '    ) {\n', '        Planet storage _planet = planets[_planetId];\n', '\n', '        name = _planet.name;\n', '        ownerAddress = _planet.ownerAddress;\n', '        curPrice = _planet.curPrice;\n', '        curResources = _planet.curResources;\n', '        ownerAttack = addressAttackCount[_planet.ownerAddress];\n', '        ownerDefense = addressDefenseCount[_planet.ownerAddress];\n', '    }\n', '    \n', '    \n', '    // The dev can use this function to create new planets.\n', '    function createPlanet(string _planetName, uint256 _planetPrice) public onlyCeo {\n', '        uint planetId = planets.push(Planet(_planetName, ceoAddress, _planetPrice, 0)) - 1;\n', '    }\n', '    \n', '    // Initiate functions that will create the planets\n', '    function InitiatePlanets() public onlyCeo {\n', '        require(planetsAreInitiated == false);\n', '        createPlanet("Blue Lagoon", 100000000000000000); \n', '        createPlanet("GreenPeace", 100000000000000000); \n', '        createPlanet("Medusa", 100000000000000000); \n', '        createPlanet("O&#39;Ranger", 100000000000000000); \n', '        createPlanet("Queen", 90000000000000000); \n', '        createPlanet("Citrus", 90000000000000000); \n', '        createPlanet("O&#39;Ranger II", 90000000000000000); \n', '        createPlanet("Craterion", 50000000000000000);\n', '        createPlanet("Dark&#39;Air", 50000000000000000);\n', '\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/*\n', 'Game Name: CryptoPlanets\n', 'Game Link: https://cryptoplanets.com/\n', 'Rules: \n', '- Acquire planets\n', '- Steal resources (ETH) from other planets\n', '*/\n', '\n', 'contract CryptoPlanets {\n', '\n', '    address ceoAddress = 0x8e6DBF31540d2299a674b8240596ae85ebD21314;\n', '    \n', '    modifier onlyCeo() {\n', '        require (msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '    \n', '    struct Planet {\n', '        string name;\n', '        address ownerAddress;\n', '        uint256 curPrice;\n', '        uint256 curResources;\n', '    }\n', '    Planet[] planets;\n', '\n', '\n', '    // How many shares an addres own\n', '    mapping (address => uint) public addressPlanetsCount;\n', '    mapping (address => uint) public addressAttackCount;\n', '    mapping (address => uint) public addressDefenseCount;\n', '    \n', '\n', '    uint256 attackCost = 10000000000000000;\n', '    uint256 defenseCost = 10000000000000000;\n', '    \n', '    uint randNonce = 0;\n', '    bool planetsAreInitiated;\n', '\n', '    /*\n', '    This function allows players to purchase planets from other players. \n', '    The price of the planets is automatically multiplied by 1.5 after each purchase.\n', '    */\n', '    function purchasePlanet(uint _planetId) public payable {\n', '        require(msg.value == planets[_planetId].curPrice);\n', '\n', '        // Calculate the 5% value\n', '        uint256 commission5percent = ((msg.value / 10)/2);\n', '\n', '        // Calculate the owner commission on this sale & transfer the commission to the owner.      \n', '        uint256 commissionOwner = msg.value - (commission5percent * 2); // => 95%\n', '        planets[_planetId].ownerAddress.transfer(commissionOwner);\n', '\n', '        // Reduce number of planets for previous owner\n', '        addressPlanetsCount[planets[_planetId].ownerAddress] = addressPlanetsCount[planets[_planetId].ownerAddress] - 1;\n', '\n', '        // Keep 5% in the resources of the planet\n', '        planets[_planetId].curResources =  planets[_planetId].curResources + commission5percent;\n', '\n', '        // Transfer the 5% commission to the developer\n', '        ceoAddress.transfer(commission5percent);                  \n', '\n', '        // Update the planet owner and set the new price\n', '        planets[_planetId].ownerAddress = msg.sender;\n', '        planets[_planetId].curPrice = planets[_planetId].curPrice + (planets[_planetId].curPrice / 2);\n', '\n', '        // Increment number of planets for new owner\n', '        addressPlanetsCount[msg.sender] = addressPlanetsCount[msg.sender] + 1;\n', '    }\n', '\n', '    //User is purchasing attack\n', '    function purchaseAttack() payable {\n', '\n', '        // Verify that user is paying the correct price\n', '        require(msg.value == attackCost);\n', '        \n', '        // We transfer the amount paid to the owner\n', '        ceoAddress.transfer(msg.value);\n', '\n', '        addressAttackCount[msg.sender]++;\n', '    }\n', '\n', '    //User is purchasing defense\n', '    function purchaseDefense() payable {\n', '        // Verify that user is paying the correct price\n', '        require(msg.value == defenseCost);\n', '        \n', '        // We transfer the amount paid to the owner\n', '        ceoAddress.transfer(msg.value);\n', '        \n', '        addressDefenseCount[msg.sender]++;\n', '    }\n', '\n', '    function StealResources(uint _planetId) {\n', '        // Verify that the address actually own a planet\n', '        require(addressPlanetsCount[msg.sender] > 0);\n', '\n', "        // We verify that this address doesn't own this planet\n", '        require(planets[_planetId].ownerAddress != msg.sender);\n', '\n', '        // We verify that this planet has resources\n', '        require(planets[_planetId].curResources > 0);\n', '\n', "        // Transfer a random amount of resources (between 1% and 90%) of the resources of the planet to the stealer if it's attack is better than the planet's owner defense\n", '        if(addressAttackCount[msg.sender] > addressDefenseCount[planets[_planetId].ownerAddress]) {\n', '            // Generate a random number between 1 and 49\n', '            uint random = uint(keccak256(now, msg.sender, randNonce)) % 49;\n', '            randNonce++;\n', '            \n', '            // Calculate and transfer the random amount of resources to the stealer\n', '            uint256 resourcesStealable = (planets[_planetId].curResources * (50 + random)) / 100;\n', '            msg.sender.transfer(resourcesStealable);\n', '            \n', '            // Save the new resources count\n', '            planets[_planetId].curResources = planets[_planetId].curResources - resourcesStealable;\n', '        }\n', '\n', '    }\n', '    \n', '    // This function will return the details for the connected user (planets count, attack count, defense count)\n', '    function getUserDetails(address _user) public view returns(uint, uint, uint) {\n', '        return(addressPlanetsCount[_user], addressAttackCount[_user], addressDefenseCount[_user]);\n', '    }\n', '    \n', '    // This function will return the details of a planet\n', '    function getPlanet(uint _planetId) public view returns (\n', '        string name,\n', '        address ownerAddress,\n', '        uint256 curPrice,\n', '        uint256 curResources,\n', '        uint ownerAttack,\n', '        uint ownerDefense\n', '    ) {\n', '        Planet storage _planet = planets[_planetId];\n', '\n', '        name = _planet.name;\n', '        ownerAddress = _planet.ownerAddress;\n', '        curPrice = _planet.curPrice;\n', '        curResources = _planet.curResources;\n', '        ownerAttack = addressAttackCount[_planet.ownerAddress];\n', '        ownerDefense = addressDefenseCount[_planet.ownerAddress];\n', '    }\n', '    \n', '    \n', '    // The dev can use this function to create new planets.\n', '    function createPlanet(string _planetName, uint256 _planetPrice) public onlyCeo {\n', '        uint planetId = planets.push(Planet(_planetName, ceoAddress, _planetPrice, 0)) - 1;\n', '    }\n', '    \n', '    // Initiate functions that will create the planets\n', '    function InitiatePlanets() public onlyCeo {\n', '        require(planetsAreInitiated == false);\n', '        createPlanet("Blue Lagoon", 100000000000000000); \n', '        createPlanet("GreenPeace", 100000000000000000); \n', '        createPlanet("Medusa", 100000000000000000); \n', '        createPlanet("O\'Ranger", 100000000000000000); \n', '        createPlanet("Queen", 90000000000000000); \n', '        createPlanet("Citrus", 90000000000000000); \n', '        createPlanet("O\'Ranger II", 90000000000000000); \n', '        createPlanet("Craterion", 50000000000000000);\n', '        createPlanet("Dark\'Air", 50000000000000000);\n', '\n', '    }\n', '}']
