['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  \n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0)); \n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract BtradeWhiteList {\n', '\tmapping(address => bool) public whiteList;\n', '\t\n', '\tfunction BtradeWhiteList() public {\n', '\t\n', '\t}\n', '\t\n', '\tfunction register(address _address) public {\n', '        whiteList[msg.sender] = true;\n', '    }\n', '\n', '    function unregister(address _address) public {\n', '        whiteList[msg.sender] = false;\n', '    }\n', '\n', '    function isRegistered(address _address) public view returns (bool registered) {\n', '        return whiteList[_address];\n', '    }\n', '}']