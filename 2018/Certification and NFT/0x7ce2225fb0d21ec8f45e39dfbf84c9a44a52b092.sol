['pragma solidity ^0.4.24;\n', '\n', '/// @title Smart contract for forwarding ETH to a pre-defined recipient in the passive mode i.e. someone has to trigger the transfer.\n', '/// It also allows recipient to call any smart contracts. For example: Calling Trustcoin smart contract to transfer TRST.\n', '/// @author WeTrustPlatform\n', 'contract PassiveForwarder {\n', '  /// @dev recipient must be a normal account or a smart contract with the standard payable fallback method.\n', '  /// Otherwise, fund will be stuck!\n', '  address public recipient;\n', '\n', '  event Received(address indexed sender, uint256 value);\n', '\n', '  constructor(address _recipient) public {\n', '    recipient = _recipient;\n', '  }\n', '\n', '  function () public payable {\n', '    require(msg.value > 0);\n', '    emit Received(msg.sender, msg.value);\n', '  }\n', '\n', '  function sweep() public {\n', '    recipient.transfer(address(this).balance);\n', '  }\n', '\n', '  /// @dev Courtesy of https://github.com/gnosis/MultiSigWallet/blob/master/contracts/MultiSigWallet.sol\n', '  /// This method allows the pre-defined recipient to call other smart contracts.\n', '  function externalCall(address destination, uint256 value, bytes data) public returns (bool) {\n', '    require(msg.sender == recipient, "Sender must be the recipient.");\n', '    uint256 dataLength = data.length;\n', '    bool result;\n', '    assembly {\n', '      let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)\n', '      let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\n', '      result := call(\n', '        sub(gas, 34710),     // 34710 is the value that solidity is currently emitting\n', '                             // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\n', '                             // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\n', '        destination,\n', '        value,\n', '        d,\n', '        dataLength,          // Size of the input (in bytes) - this is what fixes the padding problem\n', '        x,\n', '        0                    // Output is ignored, therefore the output size is zero\n', '      )\n', '    }\n', '    return result;\n', '  }\n', '}']