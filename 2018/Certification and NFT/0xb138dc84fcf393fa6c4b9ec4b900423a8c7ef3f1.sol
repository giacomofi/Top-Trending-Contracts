['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract KeralaDonationContract is Ownable {\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    uint public totalSupply;\n', '    uint public amountRaised;\n', '    bool donationClosed = false;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    /* To track donated amount of a user */\n', '    mapping (address => uint256) public balance;\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor() public {\n', '        name = &#39;Kerala Flood Donation Token&#39;;\n', '        symbol = &#39;KFDT&#39;;\n', '        decimals = 0;\n', '        totalSupply = 1000000;\n', '\n', '        balanceOf[owner] = totalSupply;\n', '        amountRaised = 0;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] == 0);\n', '        require(_value == 1);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public onlyOwner returns(bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Stop taking donations */\n', '    function disableDonation() public onlyOwner returns(bool success) {\n', '      donationClosed = true;\n', '      return true;\n', '    }\n', '\n', '\n', '    /* Start taking donations */\n', '    function enableDonation() public onlyOwner returns(bool success) {\n', '      donationClosed = false;\n', '      return true;\n', '    }\n', '\n', '    /* check user&#39;s donated amount */\n', '    function checkMyDonation() public view returns(uint) {\n', '      return balance[msg.sender];\n', '    }\n', '\n', '    /* check if user is a backer */\n', '    function isBacker() public view returns(bool) {\n', '      if (balanceOf[msg.sender] > 0) {\n', '        return true;\n', '      }\n', '      return false;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        require(!donationClosed);\n', '        uint amount = msg.value;\n', '        amountRaised += amount;\n', '        balance[msg.sender] += amount;\n', '        transfer(msg.sender, 1);\n', '        owner.transfer(msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract KeralaDonationContract is Ownable {\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    uint public totalSupply;\n', '    uint public amountRaised;\n', '    bool donationClosed = false;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    /* To track donated amount of a user */\n', '    mapping (address => uint256) public balance;\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor() public {\n', "        name = 'Kerala Flood Donation Token';\n", "        symbol = 'KFDT';\n", '        decimals = 0;\n', '        totalSupply = 1000000;\n', '\n', '        balanceOf[owner] = totalSupply;\n', '        amountRaised = 0;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        require(_to != 0x0);\n', '        require(balanceOf[_from] >= _value);\n', '        require(balanceOf[_to] == 0);\n', '        require(_value == 1);\n', '\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public onlyOwner returns(bool success) {\n', '        _transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Stop taking donations */\n', '    function disableDonation() public onlyOwner returns(bool success) {\n', '      donationClosed = true;\n', '      return true;\n', '    }\n', '\n', '\n', '    /* Start taking donations */\n', '    function enableDonation() public onlyOwner returns(bool success) {\n', '      donationClosed = false;\n', '      return true;\n', '    }\n', '\n', "    /* check user's donated amount */\n", '    function checkMyDonation() public view returns(uint) {\n', '      return balance[msg.sender];\n', '    }\n', '\n', '    /* check if user is a backer */\n', '    function isBacker() public view returns(bool) {\n', '      if (balanceOf[msg.sender] > 0) {\n', '        return true;\n', '      }\n', '      return false;\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        require(!donationClosed);\n', '        uint amount = msg.value;\n', '        amountRaised += amount;\n', '        balance[msg.sender] += amount;\n', '        transfer(msg.sender, 1);\n', '        owner.transfer(msg.value);\n', '    }\n', '}']
