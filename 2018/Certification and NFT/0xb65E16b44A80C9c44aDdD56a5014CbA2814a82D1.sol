['pragma solidity ^0.4.18;\n', '// -------------------------------------------------\n', '// Assistive Reality ARX Token - ICO token sale contract\n', '// contact <span class="__cf_email__" data-cfemail="e29196838484a283908d8c8e8b8c87cc8b8d">[email&#160;protected]</span> for queries\n', '// Revision 20b\n', '// Refunds integrated, full test suite 20r passed\n', '// -------------------------------------------------\n', '// ERC Token Standard #20 interface:\n', '// https://github.com/ethereum/EIPs/issues/20\n', '// ------------------------------------------------\n', '// 2018 improvements:\n', '// - Updates to comply with latest Solidity versioning (0.4.18):\n', '// -   Classification of internal/private vs public functions\n', '// -   Specification of pure functions such as SafeMath integrated functions\n', '// -   Conversion of all constant to view or pure dependant on state changed\n', '// -   Full regression test of code updates\n', '// -   Revision of block number timing for new Ethereum block times\n', '// - Removed duplicate Buy/Transfer event call in buyARXtokens function (ethScan output verified)\n', '// - Burn event now records number of ARX tokens burned vs Refund event Eth\n', '// - Transfer event now fired when beneficiaryWallet withdraws\n', '// - Gas req optimisation for payable function to maximise compatibility\n', '// - Going live in code ahead of ICO announcement 09th March 2018 19:30 GMT\n', '// -------------------------------------------------\n', '// Security reviews passed - cycle 20r\n', '// Functional reviews passed - cycle 20r\n', '// Final code revision and regression test cycle passed - cycle 20r\n', '// -------------------------------------------------\n', '\n', 'contract owned {\n', '  address public owner;\n', '\n', '  function owned() internal {\n', '    owner = msg.sender;\n', '  }\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', 'contract safeMath {\n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    safeAssert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    safeAssert(b > 0);\n', '    uint256 c = a / b;\n', '    safeAssert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    safeAssert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    safeAssert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function safeAssert(bool assertion) internal pure {\n', '    if (!assertion) revert();\n', '  }\n', '}\n', '\n', 'contract StandardToken is owned, safeMath {\n', '  function balanceOf(address who) view public returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ARXCrowdsale is owned, safeMath {\n', '  // owner/admin & token reward\n', '  address        public admin                     = owner;    // admin address\n', '  StandardToken  public tokenReward;                          // address of the token used as reward\n', '\n', '  // deployment variables for static supply sale\n', '  uint256 private initialTokenSupply;\n', '  uint256 private tokensRemaining;\n', '\n', '  // multi-sig addresses and price variable\n', '  address private beneficiaryWallet;                           // beneficiaryMultiSig (founder group) or wallet account\n', '\n', '  // uint256 values for min,max,caps,tracking\n', '  uint256 public amountRaisedInWei;                           //\n', '  uint256 public fundingMinCapInWei;                          //\n', '  uint256 public fundingMaxCapInWei;                          //\n', '\n', '  // loop control, ICO startup and limiters\n', '  string  public CurrentStatus                    = "";        // current crowdsale status\n', '  uint256 public fundingStartBlock;                           // crowdsale start block#\n', '  uint256 public fundingEndBlock;                             // crowdsale end block#\n', '  bool    public isCrowdSaleClosed               = false;     // crowdsale completion boolean\n', '  bool    private areFundsReleasedToBeneficiary  = false;     // boolean for founder to receive Eth or not\n', '  bool    public isCrowdSaleSetup                = false;     // boolean for crowdsale setup\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '  event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);\n', '  event Refund(address indexed _refunder, uint256 _value);\n', '  event Burn(address _from, uint256 _value);\n', '  mapping(address => uint256) balancesArray;\n', '  mapping(address => uint256) usersARXfundValue;\n', '\n', '  // default function, map admin\n', '  function ARXCrowdsale() public onlyOwner {\n', '    admin = msg.sender;\n', '    CurrentStatus = "Crowdsale deployed to chain";\n', '  }\n', '\n', '  // total number of tokens initially\n', '  function initialARXSupply() public view returns (uint256 initialARXtokenCount) {\n', '    return safeDiv(initialTokenSupply,1000000000000000000); // div by 1000000000000000000 for display normalisation (18 decimals)\n', '  }\n', '\n', '  // remaining number of tokens\n', '  function remainingARXSupply() public view returns (uint256 remainingARXtokenCount) {\n', '    return safeDiv(tokensRemaining,1000000000000000000); // div by 1000000000000000000 for display normalisation (18 decimals)\n', '  }\n', '\n', '  // setup the CrowdSale parameters\n', '  function SetupCrowdsale(uint256 _fundingStartBlock, uint256 _fundingEndBlock) public onlyOwner returns (bytes32 response) {\n', '    if ((msg.sender == admin)\n', '    && (!(isCrowdSaleSetup))\n', '    && (!(beneficiaryWallet > 0))) {\n', '      // init addresses\n', '      beneficiaryWallet                       = 0x98DE47A1F7F96500276900925B334E4e54b1caD5;\n', '      tokenReward                             = StandardToken(0xb0D926c1BC3d78064F3e1075D5bD9A24F35Ae6C5);\n', '\n', '      // funding targets\n', '      fundingMinCapInWei                      = 30000000000000000000;                       // 300  ETH wei\n', '      initialTokenSupply                      = 277500000000000000000000000;                // 277,500,000 + 18 dec resolution\n', '\n', '      // update values\n', '      amountRaisedInWei                       = 0;\n', '      tokensRemaining                         = initialTokenSupply;\n', '      fundingStartBlock                       = _fundingStartBlock;\n', '      fundingEndBlock                         = _fundingEndBlock;\n', '      fundingMaxCapInWei                      = 4500000000000000000000;\n', '\n', '      // configure crowdsale\n', '      isCrowdSaleSetup                        = true;\n', '      isCrowdSaleClosed                       = false;\n', '      CurrentStatus                           = "Crowdsale is setup";\n', '      return "Crowdsale is setup";\n', '    } else if (msg.sender != admin) {\n', '      return "not authorised";\n', '    } else  {\n', '      return "campaign cannot be changed";\n', '    }\n', '  }\n', '\n', '  function checkPrice() internal view returns (uint256 currentPriceValue) {\n', '    if (block.number >= 5532293) {\n', '      return (2250);\n', '    } else if (block.number >= 5490292) {\n', '      return (2500);\n', '    } else if (block.number >= 5406291) {\n', '      return (2750);\n', '    } else if (block.number >= 5370290) {\n', '      return (3000);\n', '    } else if (block.number >= 5352289) {\n', '      return (3250);\n', '    } else if (block.number >= 5310289) {\n', '      return (3500);\n', '    } else if (block.number >= 5268288) {\n', '      return (4000);\n', '    } else if (block.number >= 5232287) {\n', '      return (4500);\n', '    } else if (block.number >= fundingStartBlock) {\n', '      return (5000);\n', '    }\n', '  }\n', '\n', '  // default payable function when sending ether to this contract\n', '  function () public payable {\n', '    // 0. conditions (length, crowdsale setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)\n', '    require(!(msg.value == 0)\n', '    && (msg.data.length == 0)\n', '    && (block.number <= fundingEndBlock)\n', '    && (block.number >= fundingStartBlock)\n', '    && (tokensRemaining > 0));\n', '\n', '    // 1. vars\n', '    uint256 rewardTransferAmount    = 0;\n', '\n', '    // 2. effects\n', '    amountRaisedInWei               = safeAdd(amountRaisedInWei, msg.value);\n', '    rewardTransferAmount            = (safeMul(msg.value, checkPrice()));\n', '\n', '    // 3. interaction\n', '    tokensRemaining                 = safeSub(tokensRemaining, rewardTransferAmount);\n', '    tokenReward.transfer(msg.sender, rewardTransferAmount);\n', '\n', '    // 4. events\n', '    usersARXfundValue[msg.sender]   = safeAdd(usersARXfundValue[msg.sender], msg.value);\n', '    Buy(msg.sender, msg.value, rewardTransferAmount);\n', '  }\n', '\n', '  function beneficiaryMultiSigWithdraw(uint256 _amount) public onlyOwner {\n', '    require(areFundsReleasedToBeneficiary && (amountRaisedInWei >= fundingMinCapInWei));\n', '    beneficiaryWallet.transfer(_amount);\n', '    Transfer(this, beneficiaryWallet, _amount);\n', '  }\n', '\n', '  function checkGoalReached() public onlyOwner { // return crowdfund status to owner for each result case, update public vars\n', '    // update state & status variables\n', '    require (isCrowdSaleSetup);\n', '    if ((amountRaisedInWei < fundingMinCapInWei) && (block.number <= fundingEndBlock && block.number >= fundingStartBlock)) { // ICO in progress, under softcap\n', '      areFundsReleasedToBeneficiary = false;\n', '      isCrowdSaleClosed = false;\n', '      CurrentStatus = "In progress (Eth < Softcap)";\n', '    } else if ((amountRaisedInWei < fundingMinCapInWei) && (block.number < fundingStartBlock)) { // ICO has not started\n', '      areFundsReleasedToBeneficiary = false;\n', '      isCrowdSaleClosed = false;\n', '      CurrentStatus = "Crowdsale is setup";\n', '    } else if ((amountRaisedInWei < fundingMinCapInWei) && (block.number > fundingEndBlock)) { // ICO ended, under softcap\n', '      areFundsReleasedToBeneficiary = false;\n', '      isCrowdSaleClosed = true;\n', '      CurrentStatus = "Unsuccessful (Eth < Softcap)";\n', '    } else if ((amountRaisedInWei >= fundingMinCapInWei) && (tokensRemaining == 0)) { // ICO ended, all tokens bought!\n', '      areFundsReleasedToBeneficiary = true;\n', '      isCrowdSaleClosed = true;\n', '      CurrentStatus = "Successful (ARX >= Hardcap)!";\n', '    } else if ((amountRaisedInWei >= fundingMinCapInWei) && (block.number > fundingEndBlock) && (tokensRemaining > 0)) { // ICO ended, over softcap!\n', '      areFundsReleasedToBeneficiary = true;\n', '      isCrowdSaleClosed = true;\n', '      CurrentStatus = "Successful (Eth >= Softcap)!";\n', '    } else if ((amountRaisedInWei >= fundingMinCapInWei) && (tokensRemaining > 0) && (block.number <= fundingEndBlock)) { // ICO in progress, over softcap!\n', '      areFundsReleasedToBeneficiary = true;\n', '      isCrowdSaleClosed = false;\n', '      CurrentStatus = "In progress (Eth >= Softcap)!";\n', '    }\n', '  }\n', '\n', '  function refund() public { // any contributor can call this to have their Eth returned. user&#39;s purchased ARX tokens are burned prior refund of Eth.\n', '    //require minCap not reached\n', '    require ((amountRaisedInWei < fundingMinCapInWei)\n', '    && (isCrowdSaleClosed)\n', '    && (block.number > fundingEndBlock)\n', '    && (usersARXfundValue[msg.sender] > 0));\n', '\n', '    //burn user&#39;s token ARX token balance, refund Eth sent\n', '    uint256 ethRefund = usersARXfundValue[msg.sender];\n', '    balancesArray[msg.sender] = 0;\n', '    usersARXfundValue[msg.sender] = 0;\n', '\n', '    //record Burn event with number of ARX tokens burned\n', '    Burn(msg.sender, usersARXfundValue[msg.sender]);\n', '\n', '    //send Eth back\n', '    msg.sender.transfer(ethRefund);\n', '\n', '    //record Refund event with number of Eth refunded in transaction\n', '    Refund(msg.sender, ethRefund);\n', '  }\n', '}']