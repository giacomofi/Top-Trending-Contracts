['pragma solidity 0.4.23;\n', '\n', '\n', '/// @title Version\n', 'contract Version {\n', '    string public semanticVersion;\n', '\n', '    /// @notice Constructor saves a public version of the deployed Contract.\n', '    /// @param _version Semantic version of the contract.\n', '    constructor(string _version) internal {\n', '        semanticVersion = _version;\n', '    }\n', '}\n', '\n', '\n', '/// @title Factory\n', 'contract Factory is Version {\n', '    event FactoryAddedContract(address indexed _contract);\n', '\n', '    modifier contractHasntDeployed(address _contract) {\n', '        require(contracts[_contract] == false);\n', '        _;\n', '    }\n', '\n', '    mapping(address => bool) public contracts;\n', '\n', '    constructor(string _version) internal Version(_version) {}\n', '\n', '    function hasBeenDeployed(address _contract) public constant returns (bool) {\n', '        return contracts[_contract];\n', '    }\n', '\n', '    function addContract(address _contract)\n', '        internal\n', '        contractHasntDeployed(_contract)\n', '        returns (bool)\n', '    {\n', '        contracts[_contract] = true;\n', '        emit FactoryAddedContract(_contract);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract PaymentAddress {\n', '    event PaymentMade(address indexed _payer, address indexed _collector, uint256 _value);\n', '\n', '    address public collector;\n', '\n', '    constructor(address _collector) public {\n', '        collector = _collector;\n', '    }\n', '\n', '    function () public payable {\n', '        emit PaymentMade(msg.sender, collector, msg.value);\n', '        collector.transfer(msg.value);\n', '    }\n', '}\n', '\n', '\n', 'contract PaymentAddressFactory is Factory {\n', '    // index of created contracts\n', '    mapping (address => address[]) public paymentAddresses;\n', '\n', '    constructor() public Factory("1.0.0") {}\n', '\n', '    // deploy a new contract\n', '    function newPaymentAddress(address _collector)\n', '        public\n', '        returns(address newContract)\n', '    {\n', '        PaymentAddress paymentAddress = new PaymentAddress(_collector);\n', '        paymentAddresses[_collector].push(paymentAddress);\n', '        addContract(paymentAddress);\n', '        return paymentAddress;\n', '    }\n', '}']
['pragma solidity 0.4.23;\n', '\n', '\n', '/// @title Version\n', 'contract Version {\n', '    string public semanticVersion;\n', '\n', '    /// @notice Constructor saves a public version of the deployed Contract.\n', '    /// @param _version Semantic version of the contract.\n', '    constructor(string _version) internal {\n', '        semanticVersion = _version;\n', '    }\n', '}\n', '\n', '\n', '/// @title Factory\n', 'contract Factory is Version {\n', '    event FactoryAddedContract(address indexed _contract);\n', '\n', '    modifier contractHasntDeployed(address _contract) {\n', '        require(contracts[_contract] == false);\n', '        _;\n', '    }\n', '\n', '    mapping(address => bool) public contracts;\n', '\n', '    constructor(string _version) internal Version(_version) {}\n', '\n', '    function hasBeenDeployed(address _contract) public constant returns (bool) {\n', '        return contracts[_contract];\n', '    }\n', '\n', '    function addContract(address _contract)\n', '        internal\n', '        contractHasntDeployed(_contract)\n', '        returns (bool)\n', '    {\n', '        contracts[_contract] = true;\n', '        emit FactoryAddedContract(_contract);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract PaymentAddress {\n', '    event PaymentMade(address indexed _payer, address indexed _collector, uint256 _value);\n', '\n', '    address public collector;\n', '\n', '    constructor(address _collector) public {\n', '        collector = _collector;\n', '    }\n', '\n', '    function () public payable {\n', '        emit PaymentMade(msg.sender, collector, msg.value);\n', '        collector.transfer(msg.value);\n', '    }\n', '}\n', '\n', '\n', 'contract PaymentAddressFactory is Factory {\n', '    // index of created contracts\n', '    mapping (address => address[]) public paymentAddresses;\n', '\n', '    constructor() public Factory("1.0.0") {}\n', '\n', '    // deploy a new contract\n', '    function newPaymentAddress(address _collector)\n', '        public\n', '        returns(address newContract)\n', '    {\n', '        PaymentAddress paymentAddress = new PaymentAddress(_collector);\n', '        paymentAddresses[_collector].push(paymentAddress);\n', '        addContract(paymentAddress);\n', '        return paymentAddress;\n', '    }\n', '}']
