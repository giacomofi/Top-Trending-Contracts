['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', 'contract InterfaceContentCreatorUniverse {\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price);\n', '  function getNextPrice(uint price, uint _tokenId) public pure returns (uint);\n', '  function lastSubTokenBuyerOf(uint tokenId) public view returns(address);\n', '  function lastSubTokenCreatorOf(uint tokenId) public view returns(address);\n', '\n', '  //\n', '  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external ;\n', '}\n', '\n', 'contract InterfaceYCC {\n', '  function payForUpgrade(address user, uint price) external  returns (bool success);\n', '  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external  returns (bool success);\n', '  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external;\n', '  function payoutForMining(address user, uint amount) external;\n', '  uint256 public totalSupply;\n', '}\n', '\n', 'contract InterfaceMining {\n', '  function createMineForToken(uint tokenId, uint level, uint xp, uint nextLevelBreak, uint blocknumber) external;\n', '  function payoutMining(uint tokenId, address owner, address newOwner) external;\n', '  function levelUpMining(uint tokenId) external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '  address private newCeoAddress;\n', '  address private newCooAddress;\n', '\n', '\n', '  function Owned() public {\n', '      ceoAddress = msg.sender;\n', '      cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '    newCeoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '    newCooAddress = _newCOO;\n', '  }\n', '\n', '  function acceptCeoOwnership() public {\n', '      require(msg.sender == newCeoAddress);\n', '      require(address(0) != newCeoAddress);\n', '      ceoAddress = newCeoAddress;\n', '      newCeoAddress = address(0);\n', '  }\n', '\n', '  function acceptCooOwnership() public {\n', '      require(msg.sender == newCooAddress);\n', '      require(address(0) != newCooAddress);\n', '      cooAddress = newCooAddress;\n', '      newCooAddress = address(0);\n', '  }\n', '\n', '  mapping (address => bool) public youCollectContracts;\n', '  function addYouCollectContract(address contractAddress, bool active) public onlyCOO {\n', '    youCollectContracts[contractAddress] = active;\n', '  }\n', '  modifier onlyYCC() {\n', '    require(youCollectContracts[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  InterfaceYCC ycc;\n', '  InterfaceContentCreatorUniverse yct;\n', '  InterfaceMining ycm;\n', '  function setMainYouCollectContractAddresses(address yccContract, address yctContract, address ycmContract, address[] otherContracts) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[yccContract] = true;\n', '    youCollectContracts[yctContract] = true;\n', '    youCollectContracts[ycmContract] = true;\n', '    for (uint16 index = 0; index < otherContracts.length; index++) {\n', '      youCollectContracts[otherContracts[index]] = true;\n', '    }\n', '  }\n', '  function setYccContractAddress(address yccContract) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    youCollectContracts[yccContract] = true;\n', '  }\n', '  function setYctContractAddress(address yctContract) public onlyCOO {\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    youCollectContracts[yctContract] = true;\n', '  }\n', '  function setYcmContractAddress(address ycmContract) public onlyCOO {\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[ycmContract] = true;\n', '  }\n', '\n', '}\n', '\n', 'contract TransferInterfaceERC721YC {\n', '  function transferToken(address to, uint256 tokenId) public returns (bool success);\n', '}\n', 'contract TransferInterfaceERC20 {\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\n', '// ----------------------------------------------------------------------------\n', 'contract YouCollectBase is Owned {\n', '  using SafeMath for uint256;\n', '\n', '  event RedButton(uint value, uint totalSupply);\n', '\n', '  // Payout\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to, this.balance);\n', '  }\n', '  function payout(address _to, uint amount) public onlyCLevel {\n', '    if (amount>this.balance)\n', '      amount = this.balance;\n', '    _payout(_to, amount);\n', '  }\n', '  function _payout(address _to, uint amount) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(amount);\n', '    } else {\n', '      _to.transfer(amount);\n', '    }\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCEO returns (bool success) {\n', '      return TransferInterfaceERC20(tokenAddress).transfer(ceoAddress, tokens);\n', '  }\n', '}\n', '\n', '\n', 'contract Donate is YouCollectBase {\n', '  mapping (uint256 => address) public tokenIndexToOwner;\n', '  mapping (uint256 => uint256) public tokenIndexToPrice;\n', '  mapping (uint256 => address) public donateAddress;\n', '  mapping (uint256 => address) public tokenWinner;\n', '  uint256 donateTokenCount;\n', '  uint256 highestPrice = 0.001 ether;\n', '  address public nextRoundWinner;\n', '\n', '  uint256 lastBuyBlock;\n', '  uint256 roundDelay = 1999;\n', '  bool started = false;\n', '    \n', '  event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner);\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function Donate() public {\n', '  }\n', '\n', '  /// For creating Collectibles\n', '  function addDonateTokenAddress(address adr) external onlyCEO {\n', '    donateTokenCount = donateTokenCount.add(1);\n', '    donateAddress[donateTokenCount] = adr;\n', '  }\n', '  function updateDonateTokenAddress(address adr, uint256 tokenId) external onlyCEO {\n', '    donateAddress[tokenId] = adr;\n', '  }\n', '  function changeRoundDelay(uint256 delay) external onlyCEO {\n', '    roundDelay = delay;\n', '  }\n', '\n', '  function getBlocksUntilNextRound() public view returns(uint) {\n', '    if (lastBuyBlock+roundDelay<block.number)\n', '      return 0;\n', '    return lastBuyBlock + roundDelay - block.number + 1;\n', '  }\n', '  function start() public onlyCEO {\n', '    started = true;\n', '    startNextRound();\n', '  }\n', '  \n', '  function startNextRound() public {\n', '    require(started);\n', '    require(lastBuyBlock+roundDelay<block.number);\n', '    tokenIndexToPrice[0] = highestPrice;\n', '    tokenIndexToOwner[0] = nextRoundWinner;\n', '    tokenWinner[0] = tokenIndexToOwner[0];\n', '    \n', '    for (uint index = 1; index <= donateTokenCount; index++) {\n', '      tokenIndexToPrice[index] = 0.001 ether;\n', '      tokenWinner[index] = tokenIndexToOwner[index];\n', '    }\n', '    highestPrice = 0.001 ether;\n', '    lastBuyBlock = block.number;\n', '  }\n', '\n', '  function getNextPrice(uint price) public pure returns (uint) {\n', '    if (price < 1 ether)\n', '      return price.mul(200).div(87);\n', '    return price.mul(120).div(87);\n', '  }\n', '\n', '  function buyToken(uint _tokenId) public payable {\n', '    address oldOwner = tokenIndexToOwner[_tokenId];\n', '    uint256 sellingPrice = tokenIndexToPrice[_tokenId];\n', '    require(oldOwner!=msg.sender);\n', '    require(msg.value >= sellingPrice);\n', '    require(sellingPrice > 0);\n', '\n', '    uint256 purchaseExcess = msg.value.sub(sellingPrice);\n', '    uint256 payment = sellingPrice.mul(87).div(100);\n', '    uint256 feeOnce = sellingPrice.sub(payment).div(13);\n', '    uint256 feeThree = feeOnce.mul(3);\n', '    uint256 nextPrice = getNextPrice(sellingPrice);\n', '    // Update prices\n', '    tokenIndexToPrice[_tokenId] = nextPrice;\n', '    // Transfers the Token\n', '    tokenIndexToOwner[_tokenId] = msg.sender;\n', '    lastBuyBlock = block.number;\n', '    if (_tokenId > 0) {\n', '      // Taxes for last round winner or new owner of the All-Donate-Token\n', '      if (tokenIndexToOwner[0]!=address(0))\n', '        tokenIndexToOwner[0].transfer(feeThree);\n', '      // Check for new winner of this round\n', '      if (nextPrice > highestPrice) {\n', '        highestPrice = nextPrice;\n', '        nextRoundWinner = msg.sender;\n', '      }\n', '    }\n', '    // Donation\n', '    donateAddress[_tokenId].transfer(feeThree);\n', '    // Taxes for last round token winner \n', '    if (tokenWinner[_tokenId]!=address(0))\n', '      tokenWinner[_tokenId].transfer(feeThree);\n', '    // Taxes for universe\n', '    yct.ownerOf(0).transfer(feeOnce);\n', '    // Payment for old owner\n', '    if (oldOwner != address(0)) {\n', '      oldOwner.transfer(payment);\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, oldOwner, msg.sender);\n', '\n', '    // refund when paid too much\n', '    if (purchaseExcess>0)\n', '      msg.sender.transfer(purchaseExcess);\n', '  }\n', '\n', '\n', '  function getCollectibleWithMeta(uint256 tokenId) public view returns (uint256 _tokenId, uint256 sellingPrice, address owner, uint256 nextSellingPrice, address _tokenWinner, address _donateAddress) {\n', '    _tokenId = tokenId;\n', '    sellingPrice = tokenIndexToPrice[tokenId];\n', '    owner = tokenIndexToOwner[tokenId];\n', '    nextSellingPrice = getNextPrice(sellingPrice);\n', '    \n', '    _tokenWinner = tokenWinner[tokenId];\n', '    _donateAddress = donateAddress[tokenId];\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', 'contract InterfaceContentCreatorUniverse {\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price);\n', '  function getNextPrice(uint price, uint _tokenId) public pure returns (uint);\n', '  function lastSubTokenBuyerOf(uint tokenId) public view returns(address);\n', '  function lastSubTokenCreatorOf(uint tokenId) public view returns(address);\n', '\n', '  //\n', '  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external ;\n', '}\n', '\n', 'contract InterfaceYCC {\n', '  function payForUpgrade(address user, uint price) external  returns (bool success);\n', '  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external  returns (bool success);\n', '  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external;\n', '  function payoutForMining(address user, uint amount) external;\n', '  uint256 public totalSupply;\n', '}\n', '\n', 'contract InterfaceMining {\n', '  function createMineForToken(uint tokenId, uint level, uint xp, uint nextLevelBreak, uint blocknumber) external;\n', '  function payoutMining(uint tokenId, address owner, address newOwner) external;\n', '  function levelUpMining(uint tokenId) external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '  address private newCeoAddress;\n', '  address private newCooAddress;\n', '\n', '\n', '  function Owned() public {\n', '      ceoAddress = msg.sender;\n', '      cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '    newCeoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '    newCooAddress = _newCOO;\n', '  }\n', '\n', '  function acceptCeoOwnership() public {\n', '      require(msg.sender == newCeoAddress);\n', '      require(address(0) != newCeoAddress);\n', '      ceoAddress = newCeoAddress;\n', '      newCeoAddress = address(0);\n', '  }\n', '\n', '  function acceptCooOwnership() public {\n', '      require(msg.sender == newCooAddress);\n', '      require(address(0) != newCooAddress);\n', '      cooAddress = newCooAddress;\n', '      newCooAddress = address(0);\n', '  }\n', '\n', '  mapping (address => bool) public youCollectContracts;\n', '  function addYouCollectContract(address contractAddress, bool active) public onlyCOO {\n', '    youCollectContracts[contractAddress] = active;\n', '  }\n', '  modifier onlyYCC() {\n', '    require(youCollectContracts[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  InterfaceYCC ycc;\n', '  InterfaceContentCreatorUniverse yct;\n', '  InterfaceMining ycm;\n', '  function setMainYouCollectContractAddresses(address yccContract, address yctContract, address ycmContract, address[] otherContracts) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[yccContract] = true;\n', '    youCollectContracts[yctContract] = true;\n', '    youCollectContracts[ycmContract] = true;\n', '    for (uint16 index = 0; index < otherContracts.length; index++) {\n', '      youCollectContracts[otherContracts[index]] = true;\n', '    }\n', '  }\n', '  function setYccContractAddress(address yccContract) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    youCollectContracts[yccContract] = true;\n', '  }\n', '  function setYctContractAddress(address yctContract) public onlyCOO {\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    youCollectContracts[yctContract] = true;\n', '  }\n', '  function setYcmContractAddress(address ycmContract) public onlyCOO {\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[ycmContract] = true;\n', '  }\n', '\n', '}\n', '\n', 'contract TransferInterfaceERC721YC {\n', '  function transferToken(address to, uint256 tokenId) public returns (bool success);\n', '}\n', 'contract TransferInterfaceERC20 {\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\n', '// ----------------------------------------------------------------------------\n', 'contract YouCollectBase is Owned {\n', '  using SafeMath for uint256;\n', '\n', '  event RedButton(uint value, uint totalSupply);\n', '\n', '  // Payout\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to, this.balance);\n', '  }\n', '  function payout(address _to, uint amount) public onlyCLevel {\n', '    if (amount>this.balance)\n', '      amount = this.balance;\n', '    _payout(_to, amount);\n', '  }\n', '  function _payout(address _to, uint amount) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(amount);\n', '    } else {\n', '      _to.transfer(amount);\n', '    }\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCEO returns (bool success) {\n', '      return TransferInterfaceERC20(tokenAddress).transfer(ceoAddress, tokens);\n', '  }\n', '}\n', '\n', '\n', 'contract Donate is YouCollectBase {\n', '  mapping (uint256 => address) public tokenIndexToOwner;\n', '  mapping (uint256 => uint256) public tokenIndexToPrice;\n', '  mapping (uint256 => address) public donateAddress;\n', '  mapping (uint256 => address) public tokenWinner;\n', '  uint256 donateTokenCount;\n', '  uint256 highestPrice = 0.001 ether;\n', '  address public nextRoundWinner;\n', '\n', '  uint256 lastBuyBlock;\n', '  uint256 roundDelay = 1999;\n', '  bool started = false;\n', '    \n', '  event TokenSold(uint256 indexed tokenId, uint256 price, address prevOwner, address winner);\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function Donate() public {\n', '  }\n', '\n', '  /// For creating Collectibles\n', '  function addDonateTokenAddress(address adr) external onlyCEO {\n', '    donateTokenCount = donateTokenCount.add(1);\n', '    donateAddress[donateTokenCount] = adr;\n', '  }\n', '  function updateDonateTokenAddress(address adr, uint256 tokenId) external onlyCEO {\n', '    donateAddress[tokenId] = adr;\n', '  }\n', '  function changeRoundDelay(uint256 delay) external onlyCEO {\n', '    roundDelay = delay;\n', '  }\n', '\n', '  function getBlocksUntilNextRound() public view returns(uint) {\n', '    if (lastBuyBlock+roundDelay<block.number)\n', '      return 0;\n', '    return lastBuyBlock + roundDelay - block.number + 1;\n', '  }\n', '  function start() public onlyCEO {\n', '    started = true;\n', '    startNextRound();\n', '  }\n', '  \n', '  function startNextRound() public {\n', '    require(started);\n', '    require(lastBuyBlock+roundDelay<block.number);\n', '    tokenIndexToPrice[0] = highestPrice;\n', '    tokenIndexToOwner[0] = nextRoundWinner;\n', '    tokenWinner[0] = tokenIndexToOwner[0];\n', '    \n', '    for (uint index = 1; index <= donateTokenCount; index++) {\n', '      tokenIndexToPrice[index] = 0.001 ether;\n', '      tokenWinner[index] = tokenIndexToOwner[index];\n', '    }\n', '    highestPrice = 0.001 ether;\n', '    lastBuyBlock = block.number;\n', '  }\n', '\n', '  function getNextPrice(uint price) public pure returns (uint) {\n', '    if (price < 1 ether)\n', '      return price.mul(200).div(87);\n', '    return price.mul(120).div(87);\n', '  }\n', '\n', '  function buyToken(uint _tokenId) public payable {\n', '    address oldOwner = tokenIndexToOwner[_tokenId];\n', '    uint256 sellingPrice = tokenIndexToPrice[_tokenId];\n', '    require(oldOwner!=msg.sender);\n', '    require(msg.value >= sellingPrice);\n', '    require(sellingPrice > 0);\n', '\n', '    uint256 purchaseExcess = msg.value.sub(sellingPrice);\n', '    uint256 payment = sellingPrice.mul(87).div(100);\n', '    uint256 feeOnce = sellingPrice.sub(payment).div(13);\n', '    uint256 feeThree = feeOnce.mul(3);\n', '    uint256 nextPrice = getNextPrice(sellingPrice);\n', '    // Update prices\n', '    tokenIndexToPrice[_tokenId] = nextPrice;\n', '    // Transfers the Token\n', '    tokenIndexToOwner[_tokenId] = msg.sender;\n', '    lastBuyBlock = block.number;\n', '    if (_tokenId > 0) {\n', '      // Taxes for last round winner or new owner of the All-Donate-Token\n', '      if (tokenIndexToOwner[0]!=address(0))\n', '        tokenIndexToOwner[0].transfer(feeThree);\n', '      // Check for new winner of this round\n', '      if (nextPrice > highestPrice) {\n', '        highestPrice = nextPrice;\n', '        nextRoundWinner = msg.sender;\n', '      }\n', '    }\n', '    // Donation\n', '    donateAddress[_tokenId].transfer(feeThree);\n', '    // Taxes for last round token winner \n', '    if (tokenWinner[_tokenId]!=address(0))\n', '      tokenWinner[_tokenId].transfer(feeThree);\n', '    // Taxes for universe\n', '    yct.ownerOf(0).transfer(feeOnce);\n', '    // Payment for old owner\n', '    if (oldOwner != address(0)) {\n', '      oldOwner.transfer(payment);\n', '    }\n', '\n', '    TokenSold(_tokenId, sellingPrice, oldOwner, msg.sender);\n', '\n', '    // refund when paid too much\n', '    if (purchaseExcess>0)\n', '      msg.sender.transfer(purchaseExcess);\n', '  }\n', '\n', '\n', '  function getCollectibleWithMeta(uint256 tokenId) public view returns (uint256 _tokenId, uint256 sellingPrice, address owner, uint256 nextSellingPrice, address _tokenWinner, address _donateAddress) {\n', '    _tokenId = tokenId;\n', '    sellingPrice = tokenIndexToPrice[tokenId];\n', '    owner = tokenIndexToOwner[tokenId];\n', '    nextSellingPrice = getNextPrice(sellingPrice);\n', '    \n', '    _tokenWinner = tokenWinner[tokenId];\n', '    _donateAddress = donateAddress[tokenId];\n', '  }\n', '\n', '}']
