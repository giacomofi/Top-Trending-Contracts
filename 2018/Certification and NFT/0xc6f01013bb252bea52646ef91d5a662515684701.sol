['pragma solidity ^0.4.18;\n', '\n', '//      (`)\n', '//     / /\n', '//    / /\n', '//   / /\n', '//  (_)_)\n', '\n', '\n', '// similar to ShrimpFarmer, with three changes:\n', '// 1. one third of your sperm die when you sell your cells\n', '// 2. the ownership of the devfee can transfer through sacrificing sperm\n', '//  a. the new requirement will be how many remaining sperm you have after the sacrifice\n', '//  b. you cannot sacrifice sperm if you are the spermlord\n', '// 3. the "free" 500 sperm cost 0.001 eth (in line with the mining fee)\n', '// bots should have a harder time, and whales can compete for the devfee\n', '\n', 'contract SpermLabsReborn {\n', '\n', '    uint256 public CELLS_TO_MAKE_1_SPERM = 86400;\n', '    uint256 public STARTING_SPERM = 500;\n', '    uint256 PSN = 10000;\n', '    uint256 PSNH = 5000;\n', '    bool public initialized = false;\n', '    address public spermlordAddress;\n', '    uint256 public spermlordReq = 500000; // starts at 500k sperm\n', '    mapping (address => uint256) public ballSperm;\n', '    mapping (address => uint256) public claimedCells;\n', '    mapping (address => uint256) public lastEvent;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketCells;\n', '\n', '    function SpermLabsReborn() public {\n', '        spermlordAddress = msg.sender;\n', '    }\n', '\n', '    function makeSperm(address ref) public {\n', '        require(initialized);\n', '\n', '        if (referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender) {\n', '            referrals[msg.sender] = ref;\n', '        }\n', '\n', '        uint256 cellsUsed = getMyCells();\n', '        uint256 newSperm = SafeMath.div(cellsUsed, CELLS_TO_MAKE_1_SPERM);\n', '        ballSperm[msg.sender] = SafeMath.add(ballSperm[msg.sender], newSperm);\n', '        claimedCells[msg.sender] = 0;\n', '        lastEvent[msg.sender] = now;\n', '        \n', '        // send referral cells\n', '        claimedCells[referrals[msg.sender]] = SafeMath.add(claimedCells[referrals[msg.sender]], SafeMath.div(cellsUsed, 5)); // +20%\n', '        \n', '        // boost market to prevent sprem hoarding\n', '        marketCells = SafeMath.add(marketCells, SafeMath.div(cellsUsed, 10)); // +10%\n', '    }\n', '\n', '    function sellCells() public {\n', '        require(initialized);\n', '\n', '        uint256 cellCount = getMyCells();\n', '        uint256 cellValue = calculateCellSell(cellCount);\n', '        uint256 fee = devFee(cellValue);\n', '        \n', '        // one third of your sperm die :&#39;(\n', '        ballSperm[msg.sender] = SafeMath.mul(SafeMath.div(ballSperm[msg.sender], 3), 2); // =66%\n', '        claimedCells[msg.sender] = 0;\n', '        lastEvent[msg.sender] = now;\n', '\n', '        // put them on the market\n', '        marketCells = SafeMath.add(marketCells, cellCount);\n', '\n', '        // ALL HAIL THE SPERMLORD!\n', '        spermlordAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(cellValue, fee));\n', '    }\n', '\n', '    function buyCells() public payable {\n', '        require(initialized);\n', '\n', '        uint256 cellsBought = calculateCellBuy(msg.value, SafeMath.sub(this.balance, msg.value));\n', '        cellsBought = SafeMath.sub(cellsBought, devFee(cellsBought));\n', '        claimedCells[msg.sender] = SafeMath.add(claimedCells[msg.sender], cellsBought);\n', '\n', '        // ALL HAIL THE SPERMLORD!\n', '        spermlordAddress.transfer(devFee(msg.value));\n', '    }\n', '\n', '    // magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt, uint256 rs, uint256 bs) public view returns(uint256) {\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '\n', '    function calculateCellSell(uint256 cells) public view returns(uint256) {\n', '        return calculateTrade(cells, marketCells, this.balance);\n', '    }\n', '\n', '    function calculateCellBuy(uint256 eth, uint256 contractBalance) public view returns(uint256) {\n', '        return calculateTrade(eth, contractBalance, marketCells);\n', '    }\n', '\n', '    function calculateCellBuySimple(uint256 eth) public view returns(uint256) {\n', '        return calculateCellBuy(eth, this.balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public view returns(uint256) {\n', '        return SafeMath.div(SafeMath.mul(amount, 4), 100); // 4%\n', '    }\n', '\n', '    function seedMarket(uint256 cells) public payable {\n', '        require(marketCells == 0);\n', '\n', '        initialized = true;\n', '        marketCells = cells;\n', '    }\n', '\n', '    function getFreeSperm() public payable {\n', '        require(initialized);\n', '        require(msg.value == 0.001 ether); // similar to mining fee, prevents bots\n', '        spermlordAddress.transfer(msg.value); // the spermlord gets the entry fee ;)\n', '\n', '        require(ballSperm[msg.sender] == 0);\n', '        lastEvent[msg.sender] = now;\n', '        ballSperm[msg.sender] = STARTING_SPERM;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256) {\n', '        return this.balance;\n', '    }\n', '\n', '    function getMySperm() public view returns(uint256) {\n', '        return ballSperm[msg.sender];\n', '    }\n', '\n', '    function becomeSpermlord() public {\n', '        require(initialized);\n', '        require(msg.sender != spermlordAddress);\n', '        require(ballSperm[msg.sender] >= spermlordReq);\n', '\n', '        ballSperm[msg.sender] = SafeMath.sub(ballSperm[msg.sender], spermlordReq);\n', '        spermlordReq = ballSperm[msg.sender]; // the requirement now becomes the balance at that time\n', '        spermlordAddress = msg.sender;\n', '    }\n', '\n', '    function getSpermlordReq() public view returns(uint256) {\n', '        return spermlordReq;\n', '    }\n', '\n', '    function getMyCells() public view returns(uint256) {\n', '        return SafeMath.add(claimedCells[msg.sender], getCellsSinceLastEvent(msg.sender));\n', '    }\n', '\n', '    function getCellsSinceLastEvent(address adr) public view returns(uint256) {\n', '        uint256 secondsPassed = min(CELLS_TO_MAKE_1_SPERM, SafeMath.sub(now, lastEvent[adr]));\n', '        return SafeMath.mul(secondsPassed, ballSperm[adr]);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '//      (`)\n', '//     / /\n', '//    / /\n', '//   / /\n', '//  (_)_)\n', '\n', '\n', '// similar to ShrimpFarmer, with three changes:\n', '// 1. one third of your sperm die when you sell your cells\n', '// 2. the ownership of the devfee can transfer through sacrificing sperm\n', '//  a. the new requirement will be how many remaining sperm you have after the sacrifice\n', '//  b. you cannot sacrifice sperm if you are the spermlord\n', '// 3. the "free" 500 sperm cost 0.001 eth (in line with the mining fee)\n', '// bots should have a harder time, and whales can compete for the devfee\n', '\n', 'contract SpermLabsReborn {\n', '\n', '    uint256 public CELLS_TO_MAKE_1_SPERM = 86400;\n', '    uint256 public STARTING_SPERM = 500;\n', '    uint256 PSN = 10000;\n', '    uint256 PSNH = 5000;\n', '    bool public initialized = false;\n', '    address public spermlordAddress;\n', '    uint256 public spermlordReq = 500000; // starts at 500k sperm\n', '    mapping (address => uint256) public ballSperm;\n', '    mapping (address => uint256) public claimedCells;\n', '    mapping (address => uint256) public lastEvent;\n', '    mapping (address => address) public referrals;\n', '    uint256 public marketCells;\n', '\n', '    function SpermLabsReborn() public {\n', '        spermlordAddress = msg.sender;\n', '    }\n', '\n', '    function makeSperm(address ref) public {\n', '        require(initialized);\n', '\n', '        if (referrals[msg.sender] == 0 && referrals[msg.sender] != msg.sender) {\n', '            referrals[msg.sender] = ref;\n', '        }\n', '\n', '        uint256 cellsUsed = getMyCells();\n', '        uint256 newSperm = SafeMath.div(cellsUsed, CELLS_TO_MAKE_1_SPERM);\n', '        ballSperm[msg.sender] = SafeMath.add(ballSperm[msg.sender], newSperm);\n', '        claimedCells[msg.sender] = 0;\n', '        lastEvent[msg.sender] = now;\n', '        \n', '        // send referral cells\n', '        claimedCells[referrals[msg.sender]] = SafeMath.add(claimedCells[referrals[msg.sender]], SafeMath.div(cellsUsed, 5)); // +20%\n', '        \n', '        // boost market to prevent sprem hoarding\n', '        marketCells = SafeMath.add(marketCells, SafeMath.div(cellsUsed, 10)); // +10%\n', '    }\n', '\n', '    function sellCells() public {\n', '        require(initialized);\n', '\n', '        uint256 cellCount = getMyCells();\n', '        uint256 cellValue = calculateCellSell(cellCount);\n', '        uint256 fee = devFee(cellValue);\n', '        \n', "        // one third of your sperm die :'(\n", '        ballSperm[msg.sender] = SafeMath.mul(SafeMath.div(ballSperm[msg.sender], 3), 2); // =66%\n', '        claimedCells[msg.sender] = 0;\n', '        lastEvent[msg.sender] = now;\n', '\n', '        // put them on the market\n', '        marketCells = SafeMath.add(marketCells, cellCount);\n', '\n', '        // ALL HAIL THE SPERMLORD!\n', '        spermlordAddress.transfer(fee);\n', '        msg.sender.transfer(SafeMath.sub(cellValue, fee));\n', '    }\n', '\n', '    function buyCells() public payable {\n', '        require(initialized);\n', '\n', '        uint256 cellsBought = calculateCellBuy(msg.value, SafeMath.sub(this.balance, msg.value));\n', '        cellsBought = SafeMath.sub(cellsBought, devFee(cellsBought));\n', '        claimedCells[msg.sender] = SafeMath.add(claimedCells[msg.sender], cellsBought);\n', '\n', '        // ALL HAIL THE SPERMLORD!\n', '        spermlordAddress.transfer(devFee(msg.value));\n', '    }\n', '\n', '    // magic trade balancing algorithm\n', '    function calculateTrade(uint256 rt, uint256 rs, uint256 bs) public view returns(uint256) {\n', '        //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));\n', '        return SafeMath.div(SafeMath.mul(PSN,bs),SafeMath.add(PSNH,SafeMath.div(SafeMath.add(SafeMath.mul(PSN,rs),SafeMath.mul(PSNH,rt)),rt)));\n', '    }\n', '\n', '    function calculateCellSell(uint256 cells) public view returns(uint256) {\n', '        return calculateTrade(cells, marketCells, this.balance);\n', '    }\n', '\n', '    function calculateCellBuy(uint256 eth, uint256 contractBalance) public view returns(uint256) {\n', '        return calculateTrade(eth, contractBalance, marketCells);\n', '    }\n', '\n', '    function calculateCellBuySimple(uint256 eth) public view returns(uint256) {\n', '        return calculateCellBuy(eth, this.balance);\n', '    }\n', '\n', '    function devFee(uint256 amount) public view returns(uint256) {\n', '        return SafeMath.div(SafeMath.mul(amount, 4), 100); // 4%\n', '    }\n', '\n', '    function seedMarket(uint256 cells) public payable {\n', '        require(marketCells == 0);\n', '\n', '        initialized = true;\n', '        marketCells = cells;\n', '    }\n', '\n', '    function getFreeSperm() public payable {\n', '        require(initialized);\n', '        require(msg.value == 0.001 ether); // similar to mining fee, prevents bots\n', '        spermlordAddress.transfer(msg.value); // the spermlord gets the entry fee ;)\n', '\n', '        require(ballSperm[msg.sender] == 0);\n', '        lastEvent[msg.sender] = now;\n', '        ballSperm[msg.sender] = STARTING_SPERM;\n', '    }\n', '\n', '    function getBalance() public view returns(uint256) {\n', '        return this.balance;\n', '    }\n', '\n', '    function getMySperm() public view returns(uint256) {\n', '        return ballSperm[msg.sender];\n', '    }\n', '\n', '    function becomeSpermlord() public {\n', '        require(initialized);\n', '        require(msg.sender != spermlordAddress);\n', '        require(ballSperm[msg.sender] >= spermlordReq);\n', '\n', '        ballSperm[msg.sender] = SafeMath.sub(ballSperm[msg.sender], spermlordReq);\n', '        spermlordReq = ballSperm[msg.sender]; // the requirement now becomes the balance at that time\n', '        spermlordAddress = msg.sender;\n', '    }\n', '\n', '    function getSpermlordReq() public view returns(uint256) {\n', '        return spermlordReq;\n', '    }\n', '\n', '    function getMyCells() public view returns(uint256) {\n', '        return SafeMath.add(claimedCells[msg.sender], getCellsSinceLastEvent(msg.sender));\n', '    }\n', '\n', '    function getCellsSinceLastEvent(address adr) public view returns(uint256) {\n', '        uint256 secondsPassed = min(CELLS_TO_MAKE_1_SPERM, SafeMath.sub(now, lastEvent[adr]));\n', '        return SafeMath.mul(secondsPassed, ballSperm[adr]);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) private pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}']
