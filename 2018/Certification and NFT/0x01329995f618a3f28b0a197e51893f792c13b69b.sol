['pragma solidity 0.4.25;\n', '// ----------------------------------------------------------------------------\n', "// 'Easy Life Coin' contract with following features\n", '//      => In-built ICO functionality\n', '//      => ERC20 Compliance\n', '//      => Higher control of ICO by owner\n', '//      => selfdestruct functionality\n', '//      => SafeMath implementation \n', '//      => Air-drop\n', '//      => User whitelisting\n', '//      => Minting new tokens by owner\n', '//\n', '// Deployed to : 0xb36c38Bfe4BD56C780EEa5010aBE93A669c57098\n', '// Symbol      : ELC\n', '// Name        : Easy Life Coin\n', '// Total supply: 100,000,000,000,000  (100 Trillion)\n', '// Reserved coins for ICO: 2,500,000,000 ELC (2.5 Billion)\n', '// Decimals    : 2\n', '//\n', '// Copyright (c) 2018 Human Ecological Business Holding International Inc., USA (https://easylifecommunity.com)\n', '// Contract designed by Ether Authority (https://EtherAuthority.io)\n', '// ----------------------------------------------------------------------------\n', '   \n', '\n', '//*******************************************************************//\n', '//------------------------ SafeMath Library -------------------------//\n', '//*******************************************************************//\n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '\n', '\n', '//*******************************************************************//\n', '//------------------ Contract to Manage Ownership -------------------//\n', '//*******************************************************************//\n', '    \n', '    contract owned {\n', '        address public owner;\n', '    \tusing SafeMath for uint256;\n', '    \t\n', '         constructor () public {\n', '            owner = msg.sender;\n', '        }\n', '    \n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '    \n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n', '\n', '\n', '//***************************************************************//\n', '//------------------ ERC20 Standard Template -------------------//\n', '//***************************************************************//\n', '    \n', '    contract TokenERC20 {\n', '        // Public variables of the token\n', '        using SafeMath for uint256;\n', '    \tstring public name;\n', '        string public symbol;\n', '        uint8 public decimals = 2; // 18 decimals is the strongly suggested default, avoid changing it\n', '        uint256 public totalSupply;\n', '        uint256 public reservedForICO;\n', '        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n', '    \n', '        // This creates an array with all balances\n', '        mapping (address => uint256) public balanceOf;\n', '        mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '        // This generates a public event on the blockchain that will notify clients\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '        // This notifies clients about the amount burnt\n', '        event Burn(address indexed from, uint256 value);\n', '    \n', '        /**\n', '         * Constrctor function\n', '         *\n', '         * Initializes contract with initial supply tokens to the creator of the contract\n', '         */\n', '        constructor (\n', '            uint256 initialSupply,\n', '            uint256 allocatedForICO,\n', '            string tokenName,\n', '            string tokenSymbol\n', '        ) public {\n', '            totalSupply = initialSupply.mul(100);       // Update total supply with the decimal amount\n', '            reservedForICO = allocatedForICO.mul(100);  // Tokens reserved For ICO\n', '            balanceOf[this] = reservedForICO;           // 2.5 Billion ELC will remain in the contract\n', '            balanceOf[msg.sender]=totalSupply.sub(reservedForICO); // Rest of tokens will be sent to owner\n', '            name = tokenName;                           // Set the name for display purposes\n', '            symbol = tokenSymbol;                       // Set the symbol for display purposes\n', '        }\n', '    \n', '        /**\n', '         * Internal transfer, only can be called by this contract\n', '         */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '            // Prevent transfer to 0x0 address. Use burn() instead\n', '            require(_to != 0x0);\n', '            // Check if the sender has enough\n', '            require(balanceOf[_from] >= _value);\n', '            // Check for overflows\n', '            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '            // Save this for an assertion in the future\n', '            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '            // Subtract from the sender\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            // Add the same to the recipient\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            emit Transfer(_from, _to, _value);\n', '            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens\n', '         *\n', '         * Send `_value` tokens to `_to` from your account\n', '         *\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transfer(address _to, uint256 _value) public returns (bool success) {\n', '            _transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens from other address\n', '         *\n', '         * Send `_value` tokens to `_to` in behalf of `_from`\n', '         *\n', '         * @param _from The address of the sender\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '            _transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         */\n', '        function approve(address _spender, uint256 _value) public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            allowance[msg.sender][_spender] = _value;\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address and notify\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         * @param _extraData some extra information to send to the approved contract\n', '         */\n', '        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '            public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            tokenRecipient spender = tokenRecipient(_spender);\n', '            if (approve(_spender, _value)) {\n', '                spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '                return true;\n', '            }\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly\n', '         *\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burn(uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n', '            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '           \temit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens from other account\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '         *\n', '         * @param _from the address of the sender\n', '         * @param _value the amount of money to burn\n', '         */\n', '        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n', '            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n', "            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n", '            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n', '          \temit  Burn(_from, _value);\n', '            return true;\n', '        }\n', '        \n', '    }\n', '    \n', '//**********************************************************************//\n', '//---------------------  EASY LIFE COIN STARTS HERE --------------------//\n', '//**********************************************************************//\n', '    \n', '    contract EasyLifeCoin is owned, TokenERC20 {\n', '    \tusing SafeMath for uint256;\n', '    \t\n', '    \t/*************************************/\n', '        /*  User whitelisting functionality  */\n', '        /*************************************/\n', '        bool public whitelistingStatus = false;\n', '        mapping (address => bool) public whitelisted;\n', '        \n', '        /**\n', '         * Change whitelisting status on or off\n', '         *\n', '         * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.\n', '         */\n', '        function changeWhitelistingStatus() onlyOwner public{\n', '            if (whitelistingStatus == false){\n', '\t\t\t    whitelistingStatus = true;\n', '            }\n', '            else{\n', '                whitelistingStatus = false;    \n', '            }\n', '\t\t}\n', '\t\t\n', '\t\t/**\n', '         * Whitelist any user address - only Owner can do this\n', '         *\n', '         * It will add user address in whitelisted mapping\n', '         */\n', '        function whitelistUser(address userAddress) onlyOwner public{\n', '            require(whitelistingStatus == true);\n', '            require(userAddress != 0x0);\n', '            whitelisted[userAddress] = true;\n', '\t\t}\n', '\t\t\n', '        \n', '    \t\n', '    \t/*************************************/\n', '        /* Code for the ERC20 Easy Life Coin */\n', '        /*************************************/\n', '    \n', '    \t/* Public variables of the token */\n', '    \tstring private tokenName = "Easy Life Coin";\n', '        string private tokenSymbol = "ELC";\n', '        uint256 private initialSupply = 100000000000000;    // 100 Trillion\n', '        uint256 private allocatedForICO = 2500000000;       // 2.5 Billion\n', '        \n', '\t\t\n', '\t\t/* Records for the fronzen accounts */\n', '        mapping (address => bool) public frozenAccount;\n', '        \n', '        /* This generates a public event on the blockchain that will notify clients */\n', '        event FrozenFunds(address target, bool frozen);\n', '    \n', '        /* Initializes contract with initial supply tokens to the creator of the contract */\n', '        constructor () TokenERC20(initialSupply, allocatedForICO, tokenName, tokenSymbol) public {}\n', '\n', '        /* Internal transfer, only can be called by this contract */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '\t\t\trequire (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n', '\t\t\trequire (balanceOf[_from] >= _value);               // Check if the sender has enough\n', '\t\t\trequire (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n', '\t\t\trequire(!frozenAccount[_from]);                     // Check if sender is frozen\n', '\t\t\trequire(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '\t\t\tbalanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n', '\t\t\tbalanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n', '\t\t\temit Transfer(_from, _to, _value);\n', '        }\n', '        \n', '\t\t/// @notice Create `mintedAmount` tokens and send it to `target`\n', '\t\t/// @param target Address to receive the tokens\n', '\t\t/// @param mintedAmount the amount of tokens it will receive\n', '\t\tfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '\t\t\tbalanceOf[target] = balanceOf[target].add(mintedAmount);\n', '\t\t\ttotalSupply = totalSupply.add(mintedAmount);\n', '\t\t \temit Transfer(0, this, mintedAmount);\n', '\t\t \temit Transfer(this, target, mintedAmount);\n', '\t\t}\n', '\n', '\t\t/// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '\t\t/// @param target Address to be frozen\n', '\t\t/// @param freeze either to freeze it or not\n', '\t\tfunction freezeAccount(address target, bool freeze) onlyOwner public {\n', '\t\t\t\tfrozenAccount[target] = freeze;\n', '\t\t\temit  FrozenFunds(target, freeze);\n', '\t\t}\n', '\n', '\t\t/******************************/\n', '\t\t/* Code for the ELC Crowdsale */\n', '\t\t/******************************/\n', '\t\t\n', '\t\t/* TECHNICAL SPECIFICATIONS:\n', '\t\t\n', '\t\t=> Pre-sale starts  :  November 01st, 2018\n', '\t\t=> ICO will starts  :  January 01st, 2019\n', '\t\t=> ICO Ends         :  December 31st, 2019\n', '\t\t=> Pre-sale Bonus   :  50%\n', '\t\t=> Main ICO Bonuses \n', '\t\t    January 2019    :  40%\n', '\t\t    February 2019   :  30%\n', '\t\t    March 2019      :  20%\n', '\t\t=> Coins reserved for ICO : 2.5 Billion\n', '\t\t=> Minimum Contribution: 0.5 ETH (Pre-sale and Main-sale)\n', '\t\t=> Token Exchange Rate: 1 ETH = 200 ELC (which equals to 1 Token = ~ $1 at time of deployment)\n', '\t\t\n', '\t\t*/\n', '\n', '\t\t//public variables for the Crowdsale\n', '\t\tuint256 public preSaleStartDate = 1541059200 ;  // November 1, 2018 8:00:00 AM - GMT\n', '\t\tuint256 public icoJanuaryDate = 1546329600 ;    // January 1, 2019 8:00:00 AM - GMT\n', '\t\tuint256 public icoFabruaryDate = 1549008000 ;   // Fabruary 1, 2019 8:00:00 AM - GMT\n', '\t\tuint256 public icoMarchDate = 1551427200 ;      // March 1, 2019 8:00:00 AM - GMT\n', '\t\tuint256 public icoAprilDate = 1554076800 ;      // April 1, 2019 0:00:00 AM - GMT - End of the bonus\n', '\t\tuint256 public icoEndDate = 1577836740 ;        // December 31, 2019 11:59:00 PM - GMT\n', '\t\tuint256 public exchangeRate = 200;              // 1 ETH = 200 Tokens \n', '\t\tuint256 public tokensSold = 0;                  // how many tokens sold through crowdsale\n', '\t\tuint256 public minimumContribution = 50;        // Minimum amount to invest - 0.5 ETH (in 2 decimal format)\n', '\n', '\t\t//@dev fallback function, only accepts ether if pre-sale or ICO is running or Reject\n', '\t\tfunction () payable public {\n', '\t\t    require(!safeguard);\n', '\t\t    require(!frozenAccount[msg.sender]);\n', '\t\t    if(whitelistingStatus == true) { require(whitelisted[msg.sender]); }\n', '\t\t\trequire(preSaleStartDate < now);\n', '\t\t\trequire(icoEndDate > now);\n', '            require(msg.value.mul(100).div(1 ether)  >= minimumContribution);   //converting msg.value wei into 2 decimal format\n', '\t\t\t// calculate token amount to be sent\n', '\t\t\tuint256 token = msg.value.mul(100).div(1 ether).mul(exchangeRate);  //weiamount * exchangeRate\n', '\t\t\tuint256 finalTokens = token.add(calculatePurchaseBonus(token));     //add bonus if available\n', '\t\t\ttokensSold = tokensSold.add(finalTokens);\n', '\t\t\t_transfer(this, msg.sender, finalTokens);                           //makes the transfers\n', '\t\t\tforwardEherToOwner();                                               //send Ether to owner\n', '\t\t}\n', '\n', '        \n', '\t\t//calculating purchase bonus\n', '\t\tfunction calculatePurchaseBonus(uint256 token) internal view returns(uint256){\n', '\t\t    if(preSaleStartDate < now && icoJanuaryDate > now){\n', '\t\t        return token.mul(50).div(100);  //50% bonus if pre-sale is on\n', '\t\t    }\n', '\t\t    else if(icoJanuaryDate < now && icoFabruaryDate > now){\n', '\t\t        return token.mul(40).div(100);  //40% bonus in January 2019\n', '\t\t    }\n', '\t\t    else if(icoFabruaryDate < now && icoMarchDate > now){\n', '\t\t        return token.mul(30).div(100);  //30% bonus in Fabruary 2019\n', '\t\t    }\n', '\t\t    else if(icoMarchDate < now && icoAprilDate > now){\n', '\t\t        return token.mul(20).div(100);  //20% bonus in March 2019\n', '\t\t    }\n', '\t\t    else{\n', '\t\t        return 0;                       // No bonus from April 2019\n', '\t\t    }\n', '\t\t}\n', '\n', '\t\t//Automatocally forwards ether from smart contract to owner address\n', '\t\tfunction forwardEherToOwner() internal {\n', '\t\t\towner.transfer(msg.value); \n', '\t\t}\n', '\n', '\t\t//Function to update an ICO parameter.\n', '\t\t//It requires: timestamp of start and end date, exchange rate (1 ETH = ? Tokens)\n', '\t\t//Owner need to make sure the contract has enough tokens for ICO. \n', '\t\t//If not enough, then he needs to transfer some tokens into contract addresss from his wallet\n', '\t\t//If there are no tokens in smart contract address, then ICO will not work.\n', '\t\tfunction updateCrowdsale(uint256 preSaleStart, uint256 icoJanuary, uint256 icoFabruary, uint256 icoMarch, uint256 icoApril, uint256 icoEnd) onlyOwner public {\n', '\t\t\trequire(preSaleStart < icoEnd);\n', '\t\t\tpreSaleStartDate = preSaleStart;\n', '\t\t\ticoJanuaryDate = icoJanuary;\n', '\t\t\ticoFabruaryDate = icoFabruary;\n', '\t\t\ticoMarchDate = icoMarch;\n', '\t\t\ticoAprilDate = icoApril;\n', '\t\t\ticoEndDate=icoEnd;\n', '        }\n', '        \n', '        //Stops an ICO.\n', '        //It will just set the ICO end date to zero and thus it will stop an ICO\n', '\t\tfunction stopICO() onlyOwner public{\n', '            icoEndDate = 0;\n', '        }\n', '        \n', '        //function to check wheter ICO is running or not. \n', '        //It will return current state of the crowdsale\n', '        function icoStatus() public view returns(string){\n', '            if(icoEndDate < now ){\n', '                return "ICO is over";\n', '            }else if(preSaleStartDate < now && icoJanuaryDate > now ){\n', '                return "Pre-sale is running";\n', '            }else if(icoJanuaryDate < now && icoEndDate > now){\n', '                return "ICO is running";                \n', '            }else if(preSaleStartDate > now){\n', '                return "Pre-sale will start on November 1, 2018";\n', '            }else{\n', '                return "ICO is over";\n', '            }\n', '        }\n', '        \n', '        //Function to set ICO Exchange rate. \n', '    \tfunction setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\n', '\t\t\texchangeRate=newExchangeRate;\n', '        }\n', '        \n', '        //Just in case, owner wants to transfer Tokens from contract to owner address\n', '        function manualWithdrawToken(uint256 _amount) onlyOwner public {\n', '      \t\tuint256 tokenAmount = _amount.mul(100);\n', '            _transfer(this, msg.sender, tokenAmount);\n', '        }\n', '          \n', '        //Just in case, owner wants to transfer Ether from contract to owner address\n', '        function manualWithdrawEther()onlyOwner public{\n', '\t\t\tuint256 amount=address(this).balance;\n', '\t\t\towner.transfer(amount);\n', '\t\t}\n', '\t\t\n', '\t\t//selfdestruct function. just in case owner decided to destruct this contract.\n', '\t\tfunction destructContract()onlyOwner public{\n', '\t\t\tselfdestruct(owner);\n', '\t\t}\n', '\t\t\n', '\t\t/**\n', '         * Change safeguard status on or off\n', '         *\n', '         * When safeguard is true, then all the non-owner functions will stop working.\n', '         * When safeguard is false, then all the functions will resume working back again!\n', '         */\n', '        function changeSafeguardStatus() onlyOwner public{\n', '            if (safeguard == false){\n', '\t\t\t    safeguard = true;\n', '            }\n', '            else{\n', '                safeguard = false;    \n', '            }\n', '\t\t}\n', '\t\t\n', '\t\t\n', '\t\t/********************************/\n', '\t\t/* Code for the Air drop of ELC */\n', '\t\t/********************************/\n', '\t\t\n', '\t\t/**\n', '         * Run an Air-Drop\n', '         *\n', '         * It requires an array of all the addresses and amount of tokens to distribute\n', '         * It will only process first 150 recipients. That limit is fixed to prevent gas limit\n', '         */\n', '        function airdrop(address[] recipients,uint tokenAmount) public onlyOwner {\n', '            require(recipients.length <= 150);\n', '            for(uint i = 0; i < recipients.length; i++)\n', '            {\n', '                  //This will loop through all the recipients and send them the specified tokens\n', '                  _transfer(this, recipients[i], tokenAmount.mul(100));\n', '            }\n', '        }\n', '}']