['// Generated by TokenGen and the Fabric Token platform.\n', '// https://tokengen.io\n', '// https://fabrictoken.io\n', 'pragma solidity ^0.4.21;\n', '\n', '// File: contracts/library/SafeMath.sol\n', '\n', '/**\n', ' * @title Safe Math\n', ' *\n', ' * @dev Library for safe mathematical operations.\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '    }\n', '\n', '    function plus(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20Token.sol\n', '\n', '/**\n', ' * @dev The standard ERC20 Token contract base.\n', ' */\n', 'contract ERC20Token {\n', '    uint256 public totalSupply;  /* shorthand for public function and a property */\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '// File: contracts/trait/HasOwner.sol\n', '\n', '/**\n', ' * @title HasOwner\n', ' *\n', ' * @dev Allows for exclusive access to certain functionality.\n', ' */\n', 'contract HasOwner {\n', '    // The current owner.\n', '    address public owner;\n', '\n', '    // Conditionally the new owner.\n', '    address public newOwner;\n', '\n', '    /**\n', '     * @dev The constructor.\n', '     *\n', '     * @param _owner The address of the owner.\n', '     */\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /** \n', '     * @dev Access control modifier that allows only the current owner to call the function.\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The event is fired when the current owner is changed.\n', '     *\n', '     * @param _oldOwner The address of the previous owner.\n', '     * @param _newOwner The address of the new owner.\n', '     */\n', '    event OwnershipTransfer(address indexed _oldOwner, address indexed _newOwner);\n', '\n', '    /**\n', '     * @dev Transfering the ownership is a two-step process, as we prepare\n', '     * for the transfer by setting `newOwner` and requiring `newOwner` to accept\n', '     * the transfer. This prevents accidental lock-out if something goes wrong\n', '     * when passing the `newOwner` address.\n', '     *\n', '     * @param _newOwner The address of the proposed new owner.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', ' \n', '    /**\n', '     * @dev The `newOwner` finishes the ownership transfer process by accepting the\n', '     * ownership.\n', '     */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '\n', '        emit OwnershipTransfer(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/AbstractFundraiser.sol\n', '\n', 'contract AbstractFundraiser {\n', '    /// The ERC20 token contract.\n', '    ERC20Token public token;\n', '\n', '    /**\n', '     * @dev The event fires every time a new buyer enters the fundraiser.\n', '     *\n', '     * @param _address The address of the buyer.\n', '     * @param _ethers The number of ethers funded.\n', '     * @param _tokens The number of tokens purchased.\n', '     */\n', '    event FundsReceived(address indexed _address, uint _ethers, uint _tokens);\n', '\n', '\n', '    /**\n', '     * @dev The initialization method for the token\n', '     *\n', '     * @param _token The address of the token of the fundraiser\n', '     */\n', '    function initializeFundraiserToken(address _token) internal\n', '    {\n', '        token = ERC20Token(_token);\n', '    }\n', '\n', '    /**\n', '     * @dev The default function which is executed when someone sends funds to this contract address.\n', '     */\n', '    function() public payable {\n', '        receiveFunds(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev this overridable function returns the current conversion rate for the fundraiser\n', '     */\n', '    function getConversionRate() public view returns (uint256);\n', '\n', '    /**\n', '     * @dev checks whether the fundraiser passed `endTime`.\n', '     *\n', '     * @return whether the fundraiser has ended.\n', '     */\n', '    function hasEnded() public view returns (bool);\n', '\n', '    /**\n', '     * @dev Create and sends tokens to `_address` considering amount funded and `conversionRate`.\n', '     *\n', '     * @param _address The address of the receiver of tokens.\n', '     * @param _amount The amount of received funds in ether.\n', '     */\n', '    function receiveFunds(address _address, uint256 _amount) internal;\n', '    \n', '    /**\n', '     * @dev It throws an exception if the transaction does not meet the preconditions.\n', '     */\n', '    function validateTransaction() internal view;\n', '    \n', '    /**\n', '     * @dev this overridable function makes and handles tokens to buyers\n', '     */\n', '    function handleTokens(address _address, uint256 _tokens) internal;\n', '\n', '    /**\n', '     * @dev this overridable function forwards the funds (if necessary) to a vault or directly to the beneficiary\n', '     */\n', '    function handleFunds(address _address, uint256 _ethers) internal;\n', '\n', '}\n', '\n', '// File: contracts/fundraiser/BasicFundraiser.sol\n', '\n', '/**\n', ' * @title Basic Fundraiser\n', ' *\n', ' * @dev An abstract contract that is a base for fundraisers. \n', ' * It implements a generic procedure for handling received funds:\n', ' * 1. Validates the transaciton preconditions\n', ' * 2. Calculates the amount of tokens based on the conversion rate.\n', ' * 3. Delegate the handling of the tokens (mint, transfer or conjure)\n', ' * 4. Delegate the handling of the funds\n', ' * 5. Emit event for received funds\n', ' */\n', 'contract BasicFundraiser is HasOwner, AbstractFundraiser {\n', '    using SafeMath for uint256;\n', '\n', '    // The number of decimals for the token.\n', '    uint8 constant DECIMALS = 18;  // Enforced\n', '\n', '    // Decimal factor for multiplication purposes.\n', '    uint256 constant DECIMALS_FACTOR = 10 ** uint256(DECIMALS);\n', '\n', '    /// The start time of the fundraiser - Unix timestamp.\n', '    uint256 public startTime;\n', '\n', '    /// The end time of the fundraiser - Unix timestamp.\n', '    uint256 public endTime;\n', '\n', '    /// The address where funds collected will be sent.\n', '    address public beneficiary;\n', '\n', '    /// The conversion rate with decimals difference adjustment,\n', '    /// When converion rate is lower than 1 (inversed), the function calculateTokens() should use division\n', '    uint256 public conversionRate;\n', '\n', '    /// The total amount of ether raised.\n', '    uint256 public totalRaised;\n', '\n', '    /**\n', '     * @dev The event fires when the number of token conversion rate has changed.\n', '     *\n', '     * @param _conversionRate The new number of tokens per 1 ether.\n', '     */\n', '    event ConversionRateChanged(uint _conversionRate);\n', '\n', '    /**\n', '     * @dev The basic fundraiser initialization method.\n', '     *\n', '     * @param _startTime The start time of the fundraiser - Unix timestamp.\n', '     * @param _endTime The end time of the fundraiser - Unix timestamp.\n', '     * @param _conversionRate The number of tokens create for 1 ETH funded.\n', '     * @param _beneficiary The address which will receive the funds gathered by the fundraiser.\n', '     */\n', '    function initializeBasicFundraiser(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _conversionRate,\n', '        address _beneficiary\n', '    )\n', '        internal\n', '    {\n', '        require(_endTime >= _startTime);\n', '        require(_conversionRate > 0);\n', '        require(_beneficiary != address(0));\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        conversionRate = _conversionRate;\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the new conversion rate\n', '     *\n', '     * @param _conversionRate New conversion rate\n', '     */\n', '    function setConversionRate(uint256 _conversionRate) public onlyOwner {\n', '        require(_conversionRate > 0);\n', '\n', '        conversionRate = _conversionRate;\n', '\n', '        emit ConversionRateChanged(_conversionRate);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets The beneficiary of the fundraiser.\n', '     *\n', '     * @param _beneficiary The address of the beneficiary.\n', '     */\n', '    function setBeneficiary(address _beneficiary) public onlyOwner {\n', '        require(_beneficiary != address(0));\n', '\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @dev Create and sends tokens to `_address` considering amount funded and `conversionRate`.\n', '     *\n', '     * @param _address The address of the receiver of tokens.\n', '     * @param _amount The amount of received funds in ether.\n', '     */\n', '    function receiveFunds(address _address, uint256 _amount) internal {\n', '        validateTransaction();\n', '\n', '        uint256 tokens = calculateTokens(_amount);\n', '        require(tokens > 0);\n', '\n', '        totalRaised = totalRaised.plus(_amount);\n', '        handleTokens(_address, tokens);\n', '        handleFunds(_address, _amount);\n', '\n', '        emit FundsReceived(_address, msg.value, tokens);\n', '    }\n', '\n', '    /**\n', '     * @dev this overridable function returns the current conversion rate for the fundraiser\n', '     */\n', '    function getConversionRate() public view returns (uint256) {\n', '        return conversionRate;\n', '    }\n', '\n', '    /**\n', '     * @dev this overridable function that calculates the tokens based on the ether amount\n', '     */\n', '    function calculateTokens(uint256 _amount) internal view returns(uint256 tokens) {\n', '        tokens = _amount.mul(getConversionRate());\n', '    }\n', '\n', '    /**\n', '     * @dev It throws an exception if the transaction does not meet the preconditions.\n', '     */\n', '    function validateTransaction() internal view {\n', '        require(msg.value != 0);\n', '        require(now >= startTime && now < endTime);\n', '    }\n', '\n', '    /**\n', '     * @dev checks whether the fundraiser passed `endtime`.\n', '     *\n', '     * @return whether the fundraiser is passed its deadline or not.\n', '     */\n', '    function hasEnded() public view returns (bool) {\n', '        return now >= endTime;\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/CappedFundraiser.sol\n', '\n', '/**\n', ' * @title Capped Fundraiser\n', ' *\n', ' * @dev Allows you to set a hard cap on your fundraiser.\n', ' */\n', 'contract CappedFundraiser is BasicFundraiser {\n', '    /// The maximum amount of ether allowed for the fundraiser.\n', '    uint256 public hardCap;\n', '\n', '    /**\n', '     * @dev The initialization method.\n', '     *\n', '     * @param _hardCap The maximum amount of ether allowed to be raised.\n', '     */\n', '    function initializeCappedFundraiser(uint256 _hardCap) internal {\n', '        require(_hardCap > 0);\n', '\n', '        hardCap = _hardCap;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds additional check if the hard cap has been reached.\n', '     *\n', '     * @return Whether the token purchase will be allowed.\n', '     */\n', '    function validateTransaction() internal view {\n', '        super.validateTransaction();\n', '        require(totalRaised < hardCap);\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides the method from the default `Fundraiser` contract\n', '     * to additionally check if the `hardCap` is reached.\n', '     *\n', '     * @return Whether or not the fundraiser has ended.\n', '     */\n', '    function hasEnded() public view returns (bool) {\n', '        return (super.hasEnded() || totalRaised >= hardCap);\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/ForwardFundsFundraiser.sol\n', '\n', '/**\n', ' * @title Forward Funds to Beneficiary Fundraiser\n', ' *\n', ' * @dev This contract forwards the funds received to the beneficiary.\n', ' */\n', 'contract ForwardFundsFundraiser is BasicFundraiser {\n', '    /**\n', '     * @dev Forward funds directly to beneficiary\n', '     */\n', '    function handleFunds(address, uint256 _ethers) internal {\n', '        // Forward the funds directly to the beneficiary\n', '        beneficiary.transfer(_ethers);\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/GasPriceLimitFundraiser.sol\n', '\n', '/**\n', ' * @title GasPriceLimitFundraiser\n', ' *\n', ' * @dev This fundraiser allows to set gas price limit for the participants in the fundraiser\n', ' */\n', 'contract GasPriceLimitFundraiser is HasOwner, BasicFundraiser {\n', '    uint256 public gasPriceLimit;\n', '\n', '    event GasPriceLimitChanged(uint256 gasPriceLimit);\n', '\n', '    /**\n', '     * @dev This function puts the initial gas limit\n', '     */\n', '    function initializeGasPriceLimitFundraiser(uint256 _gasPriceLimit) internal {\n', '        gasPriceLimit = _gasPriceLimit;\n', '    }\n', '\n', '    /**\n', '     * @dev This function allows the owner to change the gas limit any time during the fundraiser\n', '     */\n', '    function changeGasPriceLimit(uint256 _gasPriceLimit) onlyOwner() public {\n', '        gasPriceLimit = _gasPriceLimit;\n', '\n', '        emit GasPriceLimitChanged(_gasPriceLimit);\n', '    }\n', '\n', '    /**\n', '     * @dev The transaction is valid if the gas price limit is lifted-off or the transaction meets the requirement\n', '     */\n', '    function validateTransaction() internal view {\n', '        require(gasPriceLimit == 0 || tx.gasprice <= gasPriceLimit);\n', '\n', '        return super.validateTransaction();\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/IndividualCapsFundraiser.sol\n', '\n', '/**\n', ' * @title Fundraiser with individual caps\n', ' *\n', ' * @dev Allows you to set a hard cap on your fundraiser.\n', ' */\n', 'contract IndividualCapsFundraiser is BasicFundraiser {\n', '    uint256 public individualMinCap;\n', '    uint256 public individualMaxCap;\n', '    uint256 public individualMaxCapTokens;\n', '\n', '\n', '    event IndividualMinCapChanged(uint256 _individualMinCap);\n', '    event IndividualMaxCapTokensChanged(uint256 _individualMaxCapTokens);\n', '\n', '    /**\n', '     * @dev The initialization method.\n', '     *\n', '     * @param _individualMinCap The minimum amount of ether contribution per address.\n', '     * @param _individualMaxCap The maximum amount of ether contribution per address.\n', '     */\n', '    function initializeIndividualCapsFundraiser(uint256 _individualMinCap, uint256 _individualMaxCap) internal {\n', '        individualMinCap = _individualMinCap;\n', '        individualMaxCap = _individualMaxCap;\n', '        individualMaxCapTokens = _individualMaxCap * conversionRate;\n', '    }\n', '\n', '    function setConversionRate(uint256 _conversionRate) public onlyOwner {\n', '        super.setConversionRate(_conversionRate);\n', '\n', '        if (individualMaxCap == 0) {\n', '            return;\n', '        }\n', '        \n', '        individualMaxCapTokens = individualMaxCap * _conversionRate;\n', '\n', '        emit IndividualMaxCapTokensChanged(individualMaxCapTokens);\n', '    }\n', '\n', '    function setIndividualMinCap(uint256 _individualMinCap) public onlyOwner {\n', '        individualMinCap = _individualMinCap;\n', '\n', '        emit IndividualMinCapChanged(individualMinCap);\n', '    }\n', '\n', '    function setIndividualMaxCap(uint256 _individualMaxCap) public onlyOwner {\n', '        individualMaxCap = _individualMaxCap;\n', '        individualMaxCapTokens = _individualMaxCap * conversionRate;\n', '\n', '        emit IndividualMaxCapTokensChanged(individualMaxCapTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Extends the transaction validation to check if the value this higher than the minumum cap.\n', '     */\n', '    function validateTransaction() internal view {\n', '        super.validateTransaction();\n', '        require(msg.value >= individualMinCap);\n', '    }\n', '\n', '    /**\n', '     * @dev We validate the new amount doesn&#39;t surpass maximum contribution cap\n', '     */\n', '    function handleTokens(address _address, uint256 _tokens) internal {\n', '        require(individualMaxCapTokens == 0 || token.balanceOf(_address).plus(_tokens) <= individualMaxCapTokens);\n', '\n', '        super.handleTokens(_address, _tokens);\n', '    }\n', '}\n', '\n', '// File: contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard Token\n', ' *\n', ' * @dev The standard abstract implementation of the ERC20 interface.\n', ' */\n', 'contract StandardToken is ERC20Token {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    /**\n', '     * @dev The constructor assigns the token name, symbols and decimals.\n', '     */\n', '    constructor(string _name, string _symbol, uint8 _decimals) internal {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the balance of an address.\n', '     *\n', '     * @param _address The address which&#39;s balance will be checked.\n', '     *\n', '     * @return The current balance of the address.\n', '     */\n', '    function balanceOf(address _address) public view returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '\n', '    /**\n', '     * @dev Checks the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * @param _owner The address which owns the funds allowed for spending by a third-party.\n', '     * @param _spender The third-party address that is allowed to spend the tokens.\n', '     *\n', '     * @return The number of tokens available to `_spender` to be spent.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Give permission to `_spender` to spend `_value` number of tokens on your behalf.\n', '     * E.g. You place a buy or sell order on an exchange and in that example, the \n', '     * `_spender` address is the address of the contract the exchange created to add your token to their \n', '     * website and you are `msg.sender`.\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     *\n', '     * @return Whether the approval process was successful or not.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `_value` number of tokens to the `_to` address.\n', '     *\n', '     * @param _to The address of the recipient.\n', '     * @param _value The number of tokens to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        executeTransfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows another contract to spend tokens on behalf of the `_from` address and send them to the `_to` address.\n', '     *\n', '     * @param _from The address which approved you to spend tokens on their behalf.\n', '     * @param _to The address where you want to send tokens.\n', '     * @param _value The number of tokens to be sent.\n', '     *\n', '     * @return Whether the transfer was successful or not.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\n', '        executeTransfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that this reused by the transfer functions\n', '     */\n', '    function executeTransfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != address(0));\n', '        require(_value != 0 && _value <= balances[_from]);\n', '        \n', '        balances[_from] = balances[_from].minus(_value);\n', '        balances[_to] = balances[_to].plus(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable Token\n', ' *\n', ' * @dev Allows the creation of new tokens.\n', ' */\n', 'contract MintableToken is StandardToken {\n', '    /// @dev The only address allowed to mint coins\n', '    address public minter;\n', '\n', '    /// @dev Indicates whether the token is still mintable.\n', '    bool public mintingDisabled = false;\n', '\n', '    /**\n', '     * @dev Event fired when minting is no longer allowed.\n', '     */\n', '    event MintingDisabled();\n', '\n', '    /**\n', '     * @dev Allows a function to be executed only if minting is still allowed.\n', '     */\n', '    modifier canMint() {\n', '        require(!mintingDisabled);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows a function to be called only by the minter\n', '     */\n', '    modifier onlyMinter() {\n', '        require(msg.sender == minter);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The constructor assigns the minter which is allowed to mind and disable minting\n', '     */\n', '    constructor(address _minter) internal {\n', '        minter = _minter;\n', '    }\n', '\n', '    /**\n', '    * @dev Creates new `_value` number of tokens and sends them to the `_to` address.\n', '    *\n', '    * @param _to The address which will receive the freshly minted tokens.\n', '    * @param _value The number of tokens that will be created.\n', '    */\n', '    function mint(address _to, uint256 _value) onlyMinter canMint public {\n', '        totalSupply = totalSupply.plus(_value);\n', '        balances[_to] = balances[_to].plus(_value);\n', '\n', '        emit Transfer(0x0, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Disable the minting of new tokens. Cannot be reversed.\n', '    *\n', '    * @return Whether or not the process was successful.\n', '    */\n', '    function disableMinting() onlyMinter canMint public {\n', '        mintingDisabled = true;\n', '       \n', '        emit MintingDisabled();\n', '    }\n', '}\n', '\n', '// File: contracts/token/StandardMintableToken.sol\n', '\n', 'contract StandardMintableToken is MintableToken {\n', '    constructor(address _minter, string _name, string _symbol, uint8 _decimals)\n', '        StandardToken(_name, _symbol, _decimals)\n', '        MintableToken(_minter)\n', '        public\n', '    {\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/MintableTokenFundraiser.sol\n', '\n', '/**\n', ' * @title Fundraiser With Mintable Token\n', ' */\n', 'contract MintableTokenFundraiser is BasicFundraiser {\n', '    /**\n', '     * @dev The initialization method that creates a new mintable token.\n', '     *\n', '     * @param _name Token name\n', '     * @param _symbol Token symbol\n', '     * @param _decimals Token decimals\n', '     */\n', '    function initializeMintableTokenFundraiser(string _name, string _symbol, uint8 _decimals) internal {\n', '        token = new StandardMintableToken(\n', '            address(this), // The fundraiser is the token minter\n', '            _name,\n', '            _symbol,\n', '            _decimals\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Mint the specific amount tokens\n', '     */\n', '    function handleTokens(address _address, uint256 _tokens) internal {\n', '        MintableToken(token).mint(_address, _tokens);\n', '    }\n', '}\n', '\n', '// File: contracts/token/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' *\n', ' * @dev Allows tokens to be destroyed.\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '    /**\n', '     * @dev Event fired when tokens are burned.\n', '     *\n', '     * @param _from The address from which tokens will be removed.\n', '     * @param _value The number of tokens to be destroyed.\n', '     */\n', '    event Burn(address indexed _from, uint256 _value);\n', '\n', '    /**\n', '     * @dev Burnes `_value` number of tokens.\n', '     *\n', '     * @param _value The number of tokens that will be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value != 0);\n', '\n', '        address burner = msg.sender;\n', '        require(_value <= balances[burner]);\n', '\n', '        balances[burner] = balances[burner].minus(_value);\n', '        totalSupply = totalSupply.minus(_value);\n', '\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '    }\n', '}\n', '\n', '// File: contracts/Fundraiser.sol\n', '\n', '/**\n', ' * @title TRADELOANToken\n', ' */\n', ' \n', 'contract TRADELOANToken is MintableToken, BurnableToken {\n', '  constructor(address _minter)\n', '    StandardToken(\n', '      "TRADE LOAN",   // Token name\n', '      "TL", // Token symbol\n', '      18  // Token decimals\n', '    )\n', '    \n', '    MintableToken(_minter)\n', '    public\n', '  {\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title TRADELOANTokenFundraiser\n', ' */\n', '\n', 'contract TRADELOANTokenFundraiser is MintableTokenFundraiser, IndividualCapsFundraiser, CappedFundraiser, ForwardFundsFundraiser, GasPriceLimitFundraiser {\n', '  \n', '\n', '  constructor()\n', '    HasOwner(msg.sender)\n', '    public\n', '  {\n', '    token = new TRADELOANToken(\n', '      \n', '      address(this)  // The fundraiser is the minter\n', '    );\n', '\n', '    \n', '\n', '    initializeBasicFundraiser(\n', '      1531569600, // Start date = 14 Jul 2018 12:00 UTC\n', '      1535745600,  // End date = 31 Aug 2018 20:00 UTC\n', '      1100, // Conversion rate = 1100 TL per 1 ether\n', '      0x88FE3A52C66CD0158643A1C1B7572b42932133A4     // Beneficiary\n', '    );\n', '\n', '    initializeIndividualCapsFundraiser(\n', '      (0.001 ether), // Minimum contribution\n', '      (50 ether)  // Maximum individual cap\n', '    );\n', '\n', '    initializeGasPriceLimitFundraiser(\n', '        50000000000 // Gas price limit in wei\n', '    );\n', '\n', '    \n', '\n', '    initializeCappedFundraiser(\n', '      (600 ether) // Hard cap\n', '    );\n', '\n', '    \n', '    \n', '    \n', '  }\n', '  \n', '}']
['// Generated by TokenGen and the Fabric Token platform.\n', '// https://tokengen.io\n', '// https://fabrictoken.io\n', 'pragma solidity ^0.4.21;\n', '\n', '// File: contracts/library/SafeMath.sol\n', '\n', '/**\n', ' * @title Safe Math\n', ' *\n', ' * @dev Library for safe mathematical operations.\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function minus(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '\n', '        return a - b;\n', '    }\n', '\n', '    function plus(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20Token.sol\n', '\n', '/**\n', ' * @dev The standard ERC20 Token contract base.\n', ' */\n', 'contract ERC20Token {\n', '    uint256 public totalSupply;  /* shorthand for public function and a property */\n', '    \n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '// File: contracts/trait/HasOwner.sol\n', '\n', '/**\n', ' * @title HasOwner\n', ' *\n', ' * @dev Allows for exclusive access to certain functionality.\n', ' */\n', 'contract HasOwner {\n', '    // The current owner.\n', '    address public owner;\n', '\n', '    // Conditionally the new owner.\n', '    address public newOwner;\n', '\n', '    /**\n', '     * @dev The constructor.\n', '     *\n', '     * @param _owner The address of the owner.\n', '     */\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /** \n', '     * @dev Access control modifier that allows only the current owner to call the function.\n', '     */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The event is fired when the current owner is changed.\n', '     *\n', '     * @param _oldOwner The address of the previous owner.\n', '     * @param _newOwner The address of the new owner.\n', '     */\n', '    event OwnershipTransfer(address indexed _oldOwner, address indexed _newOwner);\n', '\n', '    /**\n', '     * @dev Transfering the ownership is a two-step process, as we prepare\n', '     * for the transfer by setting `newOwner` and requiring `newOwner` to accept\n', '     * the transfer. This prevents accidental lock-out if something goes wrong\n', '     * when passing the `newOwner` address.\n', '     *\n', '     * @param _newOwner The address of the proposed new owner.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', ' \n', '    /**\n', '     * @dev The `newOwner` finishes the ownership transfer process by accepting the\n', '     * ownership.\n', '     */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '\n', '        emit OwnershipTransfer(owner, newOwner);\n', '\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/AbstractFundraiser.sol\n', '\n', 'contract AbstractFundraiser {\n', '    /// The ERC20 token contract.\n', '    ERC20Token public token;\n', '\n', '    /**\n', '     * @dev The event fires every time a new buyer enters the fundraiser.\n', '     *\n', '     * @param _address The address of the buyer.\n', '     * @param _ethers The number of ethers funded.\n', '     * @param _tokens The number of tokens purchased.\n', '     */\n', '    event FundsReceived(address indexed _address, uint _ethers, uint _tokens);\n', '\n', '\n', '    /**\n', '     * @dev The initialization method for the token\n', '     *\n', '     * @param _token The address of the token of the fundraiser\n', '     */\n', '    function initializeFundraiserToken(address _token) internal\n', '    {\n', '        token = ERC20Token(_token);\n', '    }\n', '\n', '    /**\n', '     * @dev The default function which is executed when someone sends funds to this contract address.\n', '     */\n', '    function() public payable {\n', '        receiveFunds(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev this overridable function returns the current conversion rate for the fundraiser\n', '     */\n', '    function getConversionRate() public view returns (uint256);\n', '\n', '    /**\n', '     * @dev checks whether the fundraiser passed `endTime`.\n', '     *\n', '     * @return whether the fundraiser has ended.\n', '     */\n', '    function hasEnded() public view returns (bool);\n', '\n', '    /**\n', '     * @dev Create and sends tokens to `_address` considering amount funded and `conversionRate`.\n', '     *\n', '     * @param _address The address of the receiver of tokens.\n', '     * @param _amount The amount of received funds in ether.\n', '     */\n', '    function receiveFunds(address _address, uint256 _amount) internal;\n', '    \n', '    /**\n', '     * @dev It throws an exception if the transaction does not meet the preconditions.\n', '     */\n', '    function validateTransaction() internal view;\n', '    \n', '    /**\n', '     * @dev this overridable function makes and handles tokens to buyers\n', '     */\n', '    function handleTokens(address _address, uint256 _tokens) internal;\n', '\n', '    /**\n', '     * @dev this overridable function forwards the funds (if necessary) to a vault or directly to the beneficiary\n', '     */\n', '    function handleFunds(address _address, uint256 _ethers) internal;\n', '\n', '}\n', '\n', '// File: contracts/fundraiser/BasicFundraiser.sol\n', '\n', '/**\n', ' * @title Basic Fundraiser\n', ' *\n', ' * @dev An abstract contract that is a base for fundraisers. \n', ' * It implements a generic procedure for handling received funds:\n', ' * 1. Validates the transaciton preconditions\n', ' * 2. Calculates the amount of tokens based on the conversion rate.\n', ' * 3. Delegate the handling of the tokens (mint, transfer or conjure)\n', ' * 4. Delegate the handling of the funds\n', ' * 5. Emit event for received funds\n', ' */\n', 'contract BasicFundraiser is HasOwner, AbstractFundraiser {\n', '    using SafeMath for uint256;\n', '\n', '    // The number of decimals for the token.\n', '    uint8 constant DECIMALS = 18;  // Enforced\n', '\n', '    // Decimal factor for multiplication purposes.\n', '    uint256 constant DECIMALS_FACTOR = 10 ** uint256(DECIMALS);\n', '\n', '    /// The start time of the fundraiser - Unix timestamp.\n', '    uint256 public startTime;\n', '\n', '    /// The end time of the fundraiser - Unix timestamp.\n', '    uint256 public endTime;\n', '\n', '    /// The address where funds collected will be sent.\n', '    address public beneficiary;\n', '\n', '    /// The conversion rate with decimals difference adjustment,\n', '    /// When converion rate is lower than 1 (inversed), the function calculateTokens() should use division\n', '    uint256 public conversionRate;\n', '\n', '    /// The total amount of ether raised.\n', '    uint256 public totalRaised;\n', '\n', '    /**\n', '     * @dev The event fires when the number of token conversion rate has changed.\n', '     *\n', '     * @param _conversionRate The new number of tokens per 1 ether.\n', '     */\n', '    event ConversionRateChanged(uint _conversionRate);\n', '\n', '    /**\n', '     * @dev The basic fundraiser initialization method.\n', '     *\n', '     * @param _startTime The start time of the fundraiser - Unix timestamp.\n', '     * @param _endTime The end time of the fundraiser - Unix timestamp.\n', '     * @param _conversionRate The number of tokens create for 1 ETH funded.\n', '     * @param _beneficiary The address which will receive the funds gathered by the fundraiser.\n', '     */\n', '    function initializeBasicFundraiser(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _conversionRate,\n', '        address _beneficiary\n', '    )\n', '        internal\n', '    {\n', '        require(_endTime >= _startTime);\n', '        require(_conversionRate > 0);\n', '        require(_beneficiary != address(0));\n', '\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        conversionRate = _conversionRate;\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @dev Sets the new conversion rate\n', '     *\n', '     * @param _conversionRate New conversion rate\n', '     */\n', '    function setConversionRate(uint256 _conversionRate) public onlyOwner {\n', '        require(_conversionRate > 0);\n', '\n', '        conversionRate = _conversionRate;\n', '\n', '        emit ConversionRateChanged(_conversionRate);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets The beneficiary of the fundraiser.\n', '     *\n', '     * @param _beneficiary The address of the beneficiary.\n', '     */\n', '    function setBeneficiary(address _beneficiary) public onlyOwner {\n', '        require(_beneficiary != address(0));\n', '\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @dev Create and sends tokens to `_address` considering amount funded and `conversionRate`.\n', '     *\n', '     * @param _address The address of the receiver of tokens.\n', '     * @param _amount The amount of received funds in ether.\n', '     */\n', '    function receiveFunds(address _address, uint256 _amount) internal {\n', '        validateTransaction();\n', '\n', '        uint256 tokens = calculateTokens(_amount);\n', '        require(tokens > 0);\n', '\n', '        totalRaised = totalRaised.plus(_amount);\n', '        handleTokens(_address, tokens);\n', '        handleFunds(_address, _amount);\n', '\n', '        emit FundsReceived(_address, msg.value, tokens);\n', '    }\n', '\n', '    /**\n', '     * @dev this overridable function returns the current conversion rate for the fundraiser\n', '     */\n', '    function getConversionRate() public view returns (uint256) {\n', '        return conversionRate;\n', '    }\n', '\n', '    /**\n', '     * @dev this overridable function that calculates the tokens based on the ether amount\n', '     */\n', '    function calculateTokens(uint256 _amount) internal view returns(uint256 tokens) {\n', '        tokens = _amount.mul(getConversionRate());\n', '    }\n', '\n', '    /**\n', '     * @dev It throws an exception if the transaction does not meet the preconditions.\n', '     */\n', '    function validateTransaction() internal view {\n', '        require(msg.value != 0);\n', '        require(now >= startTime && now < endTime);\n', '    }\n', '\n', '    /**\n', '     * @dev checks whether the fundraiser passed `endtime`.\n', '     *\n', '     * @return whether the fundraiser is passed its deadline or not.\n', '     */\n', '    function hasEnded() public view returns (bool) {\n', '        return now >= endTime;\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/CappedFundraiser.sol\n', '\n', '/**\n', ' * @title Capped Fundraiser\n', ' *\n', ' * @dev Allows you to set a hard cap on your fundraiser.\n', ' */\n', 'contract CappedFundraiser is BasicFundraiser {\n', '    /// The maximum amount of ether allowed for the fundraiser.\n', '    uint256 public hardCap;\n', '\n', '    /**\n', '     * @dev The initialization method.\n', '     *\n', '     * @param _hardCap The maximum amount of ether allowed to be raised.\n', '     */\n', '    function initializeCappedFundraiser(uint256 _hardCap) internal {\n', '        require(_hardCap > 0);\n', '\n', '        hardCap = _hardCap;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds additional check if the hard cap has been reached.\n', '     *\n', '     * @return Whether the token purchase will be allowed.\n', '     */\n', '    function validateTransaction() internal view {\n', '        super.validateTransaction();\n', '        require(totalRaised < hardCap);\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides the method from the default `Fundraiser` contract\n', '     * to additionally check if the `hardCap` is reached.\n', '     *\n', '     * @return Whether or not the fundraiser has ended.\n', '     */\n', '    function hasEnded() public view returns (bool) {\n', '        return (super.hasEnded() || totalRaised >= hardCap);\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/ForwardFundsFundraiser.sol\n', '\n', '/**\n', ' * @title Forward Funds to Beneficiary Fundraiser\n', ' *\n', ' * @dev This contract forwards the funds received to the beneficiary.\n', ' */\n', 'contract ForwardFundsFundraiser is BasicFundraiser {\n', '    /**\n', '     * @dev Forward funds directly to beneficiary\n', '     */\n', '    function handleFunds(address, uint256 _ethers) internal {\n', '        // Forward the funds directly to the beneficiary\n', '        beneficiary.transfer(_ethers);\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/GasPriceLimitFundraiser.sol\n', '\n', '/**\n', ' * @title GasPriceLimitFundraiser\n', ' *\n', ' * @dev This fundraiser allows to set gas price limit for the participants in the fundraiser\n', ' */\n', 'contract GasPriceLimitFundraiser is HasOwner, BasicFundraiser {\n', '    uint256 public gasPriceLimit;\n', '\n', '    event GasPriceLimitChanged(uint256 gasPriceLimit);\n', '\n', '    /**\n', '     * @dev This function puts the initial gas limit\n', '     */\n', '    function initializeGasPriceLimitFundraiser(uint256 _gasPriceLimit) internal {\n', '        gasPriceLimit = _gasPriceLimit;\n', '    }\n', '\n', '    /**\n', '     * @dev This function allows the owner to change the gas limit any time during the fundraiser\n', '     */\n', '    function changeGasPriceLimit(uint256 _gasPriceLimit) onlyOwner() public {\n', '        gasPriceLimit = _gasPriceLimit;\n', '\n', '        emit GasPriceLimitChanged(_gasPriceLimit);\n', '    }\n', '\n', '    /**\n', '     * @dev The transaction is valid if the gas price limit is lifted-off or the transaction meets the requirement\n', '     */\n', '    function validateTransaction() internal view {\n', '        require(gasPriceLimit == 0 || tx.gasprice <= gasPriceLimit);\n', '\n', '        return super.validateTransaction();\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/IndividualCapsFundraiser.sol\n', '\n', '/**\n', ' * @title Fundraiser with individual caps\n', ' *\n', ' * @dev Allows you to set a hard cap on your fundraiser.\n', ' */\n', 'contract IndividualCapsFundraiser is BasicFundraiser {\n', '    uint256 public individualMinCap;\n', '    uint256 public individualMaxCap;\n', '    uint256 public individualMaxCapTokens;\n', '\n', '\n', '    event IndividualMinCapChanged(uint256 _individualMinCap);\n', '    event IndividualMaxCapTokensChanged(uint256 _individualMaxCapTokens);\n', '\n', '    /**\n', '     * @dev The initialization method.\n', '     *\n', '     * @param _individualMinCap The minimum amount of ether contribution per address.\n', '     * @param _individualMaxCap The maximum amount of ether contribution per address.\n', '     */\n', '    function initializeIndividualCapsFundraiser(uint256 _individualMinCap, uint256 _individualMaxCap) internal {\n', '        individualMinCap = _individualMinCap;\n', '        individualMaxCap = _individualMaxCap;\n', '        individualMaxCapTokens = _individualMaxCap * conversionRate;\n', '    }\n', '\n', '    function setConversionRate(uint256 _conversionRate) public onlyOwner {\n', '        super.setConversionRate(_conversionRate);\n', '\n', '        if (individualMaxCap == 0) {\n', '            return;\n', '        }\n', '        \n', '        individualMaxCapTokens = individualMaxCap * _conversionRate;\n', '\n', '        emit IndividualMaxCapTokensChanged(individualMaxCapTokens);\n', '    }\n', '\n', '    function setIndividualMinCap(uint256 _individualMinCap) public onlyOwner {\n', '        individualMinCap = _individualMinCap;\n', '\n', '        emit IndividualMinCapChanged(individualMinCap);\n', '    }\n', '\n', '    function setIndividualMaxCap(uint256 _individualMaxCap) public onlyOwner {\n', '        individualMaxCap = _individualMaxCap;\n', '        individualMaxCapTokens = _individualMaxCap * conversionRate;\n', '\n', '        emit IndividualMaxCapTokensChanged(individualMaxCapTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Extends the transaction validation to check if the value this higher than the minumum cap.\n', '     */\n', '    function validateTransaction() internal view {\n', '        super.validateTransaction();\n', '        require(msg.value >= individualMinCap);\n', '    }\n', '\n', '    /**\n', "     * @dev We validate the new amount doesn't surpass maximum contribution cap\n", '     */\n', '    function handleTokens(address _address, uint256 _tokens) internal {\n', '        require(individualMaxCapTokens == 0 || token.balanceOf(_address).plus(_tokens) <= individualMaxCapTokens);\n', '\n', '        super.handleTokens(_address, _tokens);\n', '    }\n', '}\n', '\n', '// File: contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard Token\n', ' *\n', ' * @dev The standard abstract implementation of the ERC20 interface.\n', ' */\n', 'contract StandardToken is ERC20Token {\n', '    using SafeMath for uint256;\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    \n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '    \n', '    /**\n', '     * @dev The constructor assigns the token name, symbols and decimals.\n', '     */\n', '    constructor(string _name, string _symbol, uint8 _decimals) internal {\n', '        name = _name;\n', '        symbol = _symbol;\n', '        decimals = _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the balance of an address.\n', '     *\n', "     * @param _address The address which's balance will be checked.\n", '     *\n', '     * @return The current balance of the address.\n', '     */\n', '    function balanceOf(address _address) public view returns (uint256 balance) {\n', '        return balances[_address];\n', '    }\n', '\n', '    /**\n', '     * @dev Checks the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * @param _owner The address which owns the funds allowed for spending by a third-party.\n', '     * @param _spender The third-party address that is allowed to spend the tokens.\n', '     *\n', '     * @return The number of tokens available to `_spender` to be spent.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Give permission to `_spender` to spend `_value` number of tokens on your behalf.\n', '     * E.g. You place a buy or sell order on an exchange and in that example, the \n', '     * `_spender` address is the address of the contract the exchange created to add your token to their \n', '     * website and you are `msg.sender`.\n', '     *\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     *\n', '     * @return Whether the approval process was successful or not.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '\n', '        emit Approval(msg.sender, _spender, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `_value` number of tokens to the `_to` address.\n', '     *\n', '     * @param _to The address of the recipient.\n', '     * @param _value The number of tokens to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        executeTransfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows another contract to spend tokens on behalf of the `_from` address and send them to the `_to` address.\n', '     *\n', '     * @param _from The address which approved you to spend tokens on their behalf.\n', '     * @param _to The address where you want to send tokens.\n', '     * @param _value The number of tokens to be sent.\n', '     *\n', '     * @return Whether the transfer was successful or not.\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        \n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].minus(_value);\n', '        executeTransfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function that this reused by the transfer functions\n', '     */\n', '    function executeTransfer(address _from, address _to, uint256 _value) internal {\n', '        require(_to != address(0));\n', '        require(_value != 0 && _value <= balances[_from]);\n', '        \n', '        balances[_from] = balances[_from].minus(_value);\n', '        balances[_to] = balances[_to].plus(_value);\n', '\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/token/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable Token\n', ' *\n', ' * @dev Allows the creation of new tokens.\n', ' */\n', 'contract MintableToken is StandardToken {\n', '    /// @dev The only address allowed to mint coins\n', '    address public minter;\n', '\n', '    /// @dev Indicates whether the token is still mintable.\n', '    bool public mintingDisabled = false;\n', '\n', '    /**\n', '     * @dev Event fired when minting is no longer allowed.\n', '     */\n', '    event MintingDisabled();\n', '\n', '    /**\n', '     * @dev Allows a function to be executed only if minting is still allowed.\n', '     */\n', '    modifier canMint() {\n', '        require(!mintingDisabled);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows a function to be called only by the minter\n', '     */\n', '    modifier onlyMinter() {\n', '        require(msg.sender == minter);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev The constructor assigns the minter which is allowed to mind and disable minting\n', '     */\n', '    constructor(address _minter) internal {\n', '        minter = _minter;\n', '    }\n', '\n', '    /**\n', '    * @dev Creates new `_value` number of tokens and sends them to the `_to` address.\n', '    *\n', '    * @param _to The address which will receive the freshly minted tokens.\n', '    * @param _value The number of tokens that will be created.\n', '    */\n', '    function mint(address _to, uint256 _value) onlyMinter canMint public {\n', '        totalSupply = totalSupply.plus(_value);\n', '        balances[_to] = balances[_to].plus(_value);\n', '\n', '        emit Transfer(0x0, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Disable the minting of new tokens. Cannot be reversed.\n', '    *\n', '    * @return Whether or not the process was successful.\n', '    */\n', '    function disableMinting() onlyMinter canMint public {\n', '        mintingDisabled = true;\n', '       \n', '        emit MintingDisabled();\n', '    }\n', '}\n', '\n', '// File: contracts/token/StandardMintableToken.sol\n', '\n', 'contract StandardMintableToken is MintableToken {\n', '    constructor(address _minter, string _name, string _symbol, uint8 _decimals)\n', '        StandardToken(_name, _symbol, _decimals)\n', '        MintableToken(_minter)\n', '        public\n', '    {\n', '    }\n', '}\n', '\n', '// File: contracts/fundraiser/MintableTokenFundraiser.sol\n', '\n', '/**\n', ' * @title Fundraiser With Mintable Token\n', ' */\n', 'contract MintableTokenFundraiser is BasicFundraiser {\n', '    /**\n', '     * @dev The initialization method that creates a new mintable token.\n', '     *\n', '     * @param _name Token name\n', '     * @param _symbol Token symbol\n', '     * @param _decimals Token decimals\n', '     */\n', '    function initializeMintableTokenFundraiser(string _name, string _symbol, uint8 _decimals) internal {\n', '        token = new StandardMintableToken(\n', '            address(this), // The fundraiser is the token minter\n', '            _name,\n', '            _symbol,\n', '            _decimals\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Mint the specific amount tokens\n', '     */\n', '    function handleTokens(address _address, uint256 _tokens) internal {\n', '        MintableToken(token).mint(_address, _tokens);\n', '    }\n', '}\n', '\n', '// File: contracts/token/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' *\n', ' * @dev Allows tokens to be destroyed.\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '    /**\n', '     * @dev Event fired when tokens are burned.\n', '     *\n', '     * @param _from The address from which tokens will be removed.\n', '     * @param _value The number of tokens to be destroyed.\n', '     */\n', '    event Burn(address indexed _from, uint256 _value);\n', '\n', '    /**\n', '     * @dev Burnes `_value` number of tokens.\n', '     *\n', '     * @param _value The number of tokens that will be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value != 0);\n', '\n', '        address burner = msg.sender;\n', '        require(_value <= balances[burner]);\n', '\n', '        balances[burner] = balances[burner].minus(_value);\n', '        totalSupply = totalSupply.minus(_value);\n', '\n', '        emit Burn(burner, _value);\n', '        emit Transfer(burner, address(0), _value);\n', '    }\n', '}\n', '\n', '// File: contracts/Fundraiser.sol\n', '\n', '/**\n', ' * @title TRADELOANToken\n', ' */\n', ' \n', 'contract TRADELOANToken is MintableToken, BurnableToken {\n', '  constructor(address _minter)\n', '    StandardToken(\n', '      "TRADE LOAN",   // Token name\n', '      "TL", // Token symbol\n', '      18  // Token decimals\n', '    )\n', '    \n', '    MintableToken(_minter)\n', '    public\n', '  {\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title TRADELOANTokenFundraiser\n', ' */\n', '\n', 'contract TRADELOANTokenFundraiser is MintableTokenFundraiser, IndividualCapsFundraiser, CappedFundraiser, ForwardFundsFundraiser, GasPriceLimitFundraiser {\n', '  \n', '\n', '  constructor()\n', '    HasOwner(msg.sender)\n', '    public\n', '  {\n', '    token = new TRADELOANToken(\n', '      \n', '      address(this)  // The fundraiser is the minter\n', '    );\n', '\n', '    \n', '\n', '    initializeBasicFundraiser(\n', '      1531569600, // Start date = 14 Jul 2018 12:00 UTC\n', '      1535745600,  // End date = 31 Aug 2018 20:00 UTC\n', '      1100, // Conversion rate = 1100 TL per 1 ether\n', '      0x88FE3A52C66CD0158643A1C1B7572b42932133A4     // Beneficiary\n', '    );\n', '\n', '    initializeIndividualCapsFundraiser(\n', '      (0.001 ether), // Minimum contribution\n', '      (50 ether)  // Maximum individual cap\n', '    );\n', '\n', '    initializeGasPriceLimitFundraiser(\n', '        50000000000 // Gas price limit in wei\n', '    );\n', '\n', '    \n', '\n', '    initializeCappedFundraiser(\n', '      (600 ether) // Hard cap\n', '    );\n', '\n', '    \n', '    \n', '    \n', '  }\n', '  \n', '}']
