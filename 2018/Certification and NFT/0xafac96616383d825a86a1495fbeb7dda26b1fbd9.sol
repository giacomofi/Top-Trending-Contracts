['pragma solidity ^0.4.18;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external;\n', '}\n', '\n', 'contract TMONEYsale{\n', '    address public beneficiary;\n', '    uint public fundingGoal;\n', '    uint public amountRaised;\n', '    uint public deadline;\n', '    uint public priceT1;\n', '    uint public priceT2;\n', '    uint public priceT3;\n', '    uint public priceT4;\n', '    uint public startDate;\n', '    token public tokenReward;\n', '    mapping(address => uint256) public balanceOf;\n', '    bool fundingGoalReached = false;\n', '    bool crowdsaleClosed = false;\n', '\n', '    event GoalReached(address recipient, uint totalAmountRaised);\n', '    event FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    constructor() public {\n', '\n', '\n', '\t    address ifSuccessfulSendTo = 0xb2769a802438C39f01C700D718Aea13754C7D378;\n', '        uint fundingGoalInEthers = 800;\n', '        uint durationInMinutes = 102480;\n', '        uint weiCostOfEachToken = 213000000000000;\n', '        address addressOfTokenUsedAsReward = 0x66d544B100966F99A72734c7eB471fB9556BadFd;\n', '\t\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        deadline = now + durationInMinutes * 1 minutes;\n', '        priceT1 = weiCostOfEachToken + 26000000000000;\n', '        priceT2 = weiCostOfEachToken + 26000000000000;\n', '        priceT3 = weiCostOfEachToken + 26000000000000;\n', '        priceT4 = weiCostOfEachToken + 26000000000000;\n', '        tokenReward = token(addressOfTokenUsedAsReward);\n', '        \n', '        startDate = now;\n', '    }\n', '    \n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        require(!crowdsaleClosed);\n', '        uint amount = msg.value;\n', '        balanceOf[msg.sender] += amount;\n', '        amountRaised += amount;\n', '        \n', '        uint price = priceT1;\n', '        if (startDate + 7 days <= now)\n', '            price = priceT4;\n', '        else if (startDate + 14 days <= now)\n', '            price = priceT3;\n', '        else if (startDate + 90 days <= now)\n', '            price = priceT2;  \n', '        \n', '        tokenReward.transfer(msg.sender, amount / price * 1 ether);\n', '       emit FundTransfer(msg.sender, amount, true);\n', '        \n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline) _; }\n', '\n', '    /**\n', '     * Check if goal was reached\n', '     *\n', '     * Checks if the goal or time limit has been reached and ends the campaign\n', '     */\n', '    function checkGoalReached() public afterDeadline {\n', '        if (amountRaised >= fundingGoal){\n', '            fundingGoalReached = true;\n', '            emit GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n', '     * the amount they contributed.\n', '     */\n', '    function safeWithdrawal() public afterDeadline {\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                if (msg.sender.send(amount)) {\n', '                   emit FundTransfer(msg.sender, amount, false);\n', '                } else {\n', '                    balanceOf[msg.sender] = amount;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (fundingGoalReached && beneficiary == msg.sender) {\n', '            if (beneficiary.send(amountRaised)) {\n', '               emit FundTransfer(beneficiary, amountRaised, false);\n', '            } else {\n', '                //If we fail to send the funds to beneficiary, unlock funders balance\n', '                fundingGoalReached = false;\n', '            }\n', '        }\n', '    }\n', '}']