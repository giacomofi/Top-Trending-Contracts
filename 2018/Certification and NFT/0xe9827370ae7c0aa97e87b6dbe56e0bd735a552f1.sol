['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', 'contract WillAlwaysLove is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    uint256 public constant DEFAULT_INITIAL_COST = 0.025 ether;\n', '    uint256 public constant DEFAULT_LOCK_COST_PER_HOUR = 0.0006 ether; // 10 szabo per minute\n', '    uint256 public constant DEFAULT_MAX_LOCK_DURATION = 1 weeks;\n', '\n', '    uint256 public constant DEVELOPER_CUT = 25; // %\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    struct LoveStory {\n', '        address owner;\n', '        bytes32 loverName;\n', '        bytes32 lovedOneName;\n', '        uint256 transferCost;\n', '        uint256 lockedUntil;\n', '        string data;\n', '    }\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    uint256 public initialCost;\n', '    uint256 public lockCostPerHour;\n', '    uint256 public maxLockDuration;\n', '\n', '    mapping(bytes16 => LoveStory) private loveStories;\n', '    uint256 public loveStoriesCount;\n', '\n', '    mapping (address => uint256) private pendingWithdrawals;\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    event LoveStoryCreated(\n', '        bytes16 id,\n', '        address owner,\n', '        bytes32 loverName,\n', '        bytes32 lovedOneName,\n', '        uint256 transferCost,\n', '        uint256 lockedUntil,\n', '        string data\n', '    );\n', '\n', '    event LoveStoryUpdated(\n', '        bytes16 id,\n', '        bytes32 loverName,\n', '        bytes32 lovedOneName,\n', '        string data\n', '    );\n', '\n', '    event LoveStoryTransferred(\n', '        bytes16 id,\n', '        address oldOwner,\n', '        address newOwner,\n', '        bytes32 newLoverName,\n', '        bytes32 newLovedOneName,\n', '        uint256 newtransferCost,\n', '        uint256 lockedUntil,\n', '        string data\n', '    );\n', '\n', '    event Withdrawal(\n', '        address withdrawer,\n', '        uint256 amount\n', '    );\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    modifier onlyForUnregisteredId(bytes16 _id) {\n', '        require(!isIdRegistered(_id));\n', '        _;\n', '    }\n', '\n', '    modifier onlyForRegisteredId(bytes16 _id) {\n', '        require(isIdRegistered(_id));\n', '        _;\n', '    }\n', '\n', '    modifier onlyForValidId(bytes16 _id) {\n', '        require(isIdValid(_id));\n', '        _;\n', '    }\n', '\n', '    modifier onlyWithPendingWithdrawal() {\n', '        require(withdrawableAmount() != 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyLoveStoryOwner(bytes16 _id) {\n', '        require(loveStories[_id].owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    constructor ()\n', '        public\n', '    {\n', '        initialCost = DEFAULT_INITIAL_COST;\n', '        lockCostPerHour = DEFAULT_LOCK_COST_PER_HOUR;\n', '        maxLockDuration = DEFAULT_MAX_LOCK_DURATION;\n', '    }\n', '\n', '    function ()\n', '        public\n', '        payable\n', '    {\n', '    }\n', '\n', '    function createCost(uint256 _lockDurationInHours)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return initialCost.add(lockCostPerHour.mul(_lockDurationInHours));\n', '    }\n', '\n', '    function createLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours)\n', '        public\n', '        payable\n', '    {\n', '        createLoveStoryWithData(_id, _loverName, _lovedOneName, _lockDurationInHours, "");\n', '    }\n', '\n', '    function createLoveStoryWithData(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours, string _data)\n', '        public\n', '        payable\n', '        onlyForValidId(_id)\n', '        onlyForUnregisteredId(_id)\n', '    {\n', '        require(msg.value >= createCost(_lockDurationInHours));\n', '\n', '        _updateLoveStory(_id, _loverName, _lovedOneName, _lockDurationInHours, _data);\n', '        loveStoriesCount = loveStoriesCount.add(1);\n', '\n', '        pendingWithdrawals[owner] = pendingWithdrawals[owner].add(msg.value);\n', '\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '\n', '        emit LoveStoryCreated (\n', '            _id,\n', '            _loveStory.owner,\n', '            _loveStory.loverName,\n', '            _loveStory.lovedOneName,\n', '            _loveStory.transferCost,\n', '            _loveStory.lockedUntil,\n', '            _loveStory.data\n', '        );\n', '    }\n', '\n', '    function updateLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName)\n', '        public\n', '        onlyLoveStoryOwner(_id)\n', '    {\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '\n', '        _loveStory.loverName = _loverName;\n', '        _loveStory.lovedOneName = _lovedOneName;\n', '\n', '        emit LoveStoryUpdated (\n', '            _id,\n', '            _loveStory.loverName,\n', '            _loveStory.lovedOneName,\n', '            _loveStory.data\n', '        );\n', '    }\n', '\n', '    function updateLoveStoryWithData(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, string _data)\n', '        public\n', '        onlyLoveStoryOwner(_id)\n', '    {\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '\n', '        _loveStory.loverName = _loverName;\n', '        _loveStory.lovedOneName = _lovedOneName;\n', '        _loveStory.data = _data;\n', '\n', '        emit LoveStoryUpdated (\n', '            _id,\n', '            _loveStory.loverName,\n', '            _loveStory.lovedOneName,\n', '            _loveStory.data\n', '        );\n', '    }\n', '\n', '    function transferCost(bytes16 _id, uint256 _lockDurationInHours)\n', '        public\n', '        view\n', '        onlyForValidId(_id)\n', '        onlyForRegisteredId(_id)\n', '        returns (uint256)\n', '    {\n', '        return loveStories[_id].transferCost.add(lockCostPerHour.mul(_lockDurationInHours));\n', '    }\n', '\n', '    function transferLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours)\n', '        public\n', '        payable\n', '        onlyForValidId(_id)\n', '        onlyForRegisteredId(_id)\n', '    {\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '        transferLoveStoryWithData(_id, _loverName, _lovedOneName, _lockDurationInHours, _loveStory.data);\n', '    }\n', '\n', '    function transferLoveStoryWithData(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours, string _data)\n', '        public\n', '        payable\n', '        onlyForValidId(_id)\n', '        onlyForRegisteredId(_id)\n', '    {\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '        address _oldOwner = _loveStory.owner;\n', '\n', '        require(_oldOwner != msg.sender);\n', '        require(msg.value >= transferCost(_id, _lockDurationInHours));\n', '        require(now >= _loveStory.lockedUntil);\n', '\n', '        _updateLoveStory(_id, _loverName, _lovedOneName, _lockDurationInHours, _data);\n', '\n', '        uint256 _developerPayment = msg.value.mul(DEVELOPER_CUT).div(100);\n', '        uint256 _oldOwnerPayment = msg.value.sub(_developerPayment);\n', '\n', '        require(msg.value == _developerPayment.add(_oldOwnerPayment));\n', '\n', '        pendingWithdrawals[owner] = pendingWithdrawals[owner].add(_developerPayment);\n', '        pendingWithdrawals[_oldOwner] = pendingWithdrawals[_oldOwner].add(_oldOwnerPayment);\n', '\n', '        emit LoveStoryTransferred (\n', '            _id,\n', '            _oldOwner,\n', '            _loveStory.owner,\n', '            _loveStory.loverName,\n', '            _loveStory.lovedOneName,\n', '            _loveStory.transferCost,\n', '            _loveStory.lockedUntil,\n', '            _loveStory.data\n', '        );\n', '    }\n', '\n', '    function readLoveStory(bytes16 _id)\n', '        public\n', '        view\n', '        returns (address _loveStoryOwner, bytes32 _loverName, bytes32 _lovedOneName, uint256 _transferCost, uint256 _lockedUntil, string _data)\n', '    {\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '\n', '        _loveStoryOwner = _loveStory.owner;\n', '        _loverName = _loveStory.loverName;\n', '        _lovedOneName = _loveStory.lovedOneName;\n', '        _transferCost = _loveStory.transferCost;\n', '        _lockedUntil = _loveStory.lockedUntil;\n', '        _data = _loveStory.data;\n', '    }\n', '\n', '    function isIdRegistered(bytes16 _id)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return loveStories[_id].owner != 0x0;\n', '    }\n', '\n', '    function isIdValid(bytes16 _id)\n', '        public\n', '        pure\n', '        returns (bool)\n', '    {\n', '        for (uint256 i = 0; i < 16; i = i.add(1))\n', '        {\n', '            if (i == 0)\n', '            {\n', '                // First char must be between &#39;a&#39; and &#39;z&#39;. It CAN&#39;T be NULL.\n', '                if ( ! _isLowercaseLetter(_id[i]) )\n', '                {\n', '                    return false;\n', '                }\n', '            }\n', '            else if (i == 15)\n', '            {\n', '                // Last char must between &#39;a&#39; and &#39;z&#39;. It can also be a terminating NULL.\n', '                if ( !(_isLowercaseLetter(_id[i]) || _id[i] == 0) )\n', '                {\n', '                    return false;\n', '                }\n', '            }\n', '            else\n', '            {\n', '                // In-between chars must between &#39;a&#39; and &#39;z&#39; or &#39;-&#39;. Otherwise, they should be the unset bytes.\n', '                // The last part is verifiied by requiring that an in-bewteen char that is NULL\n', '                // must *also* be follwed by a NULL.\n', '                if ( !(_isLowercaseLetter(_id[i]) || (_id[i] == 0x2D && _id[i+1] != 0) || (_id[i] == _id[i+1] && _id[i] == 0)) )\n', '                {\n', '                    return false;\n', '                }\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function withdrawableAmount()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return pendingWithdrawals[msg.sender];\n', '    }\n', '\n', '    function withdraw()\n', '        external\n', '        nonReentrant\n', '        onlyWithPendingWithdrawal\n', '    {\n', '        uint256 amount = pendingWithdrawals[msg.sender];\n', '\n', '        pendingWithdrawals[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(amount);\n', '\n', '        emit Withdrawal (\n', '            msg.sender,\n', '            amount\n', '        );\n', '    }\n', '\n', '    function withdrawableAmountFor(address _withdrawer)\n', '        public\n', '        view\n', '        onlyOwner\n', '        returns (uint256)\n', '    {\n', '        return pendingWithdrawals[_withdrawer];\n', '    }\n', '\n', '    function changeInitialCost(uint256 _initialCost)\n', '        external\n', '        onlyOwner\n', '    {\n', '        initialCost = _initialCost;\n', '    }\n', '\n', '    function changeLockCostPerHour(uint256 _lockCostPerHour)\n', '        external\n', '        onlyOwner\n', '    {\n', '        lockCostPerHour = _lockCostPerHour;\n', '    }\n', '\n', '    function changeMaxLockDuration(uint256 _maxLockDuration)\n', '        external\n', '        onlyOwner\n', '    {\n', '        maxLockDuration = _maxLockDuration;\n', '    }\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    function _updateLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours, string _data)\n', '        private\n', '    {\n', '        require(_lockDurationInHours * 1 hours <= maxLockDuration);\n', '\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '\n', '        _loveStory.owner = msg.sender;\n', '        _loveStory.loverName = _loverName;\n', '        _loveStory.lovedOneName = _lovedOneName;\n', '        _loveStory.transferCost = msg.value.mul(2);\n', '        _loveStory.lockedUntil = now.add(_lockDurationInHours.mul(1 hours));\n', '        _loveStory.data = _data;\n', '    }\n', '\n', '    function _isLowercaseLetter(byte _char)\n', '        private\n', '        pure\n', '        returns (bool)\n', '    {\n', '        // Char must be a small case letter: [a-z]\n', '        return _char >= 0x61 && _char <= 0x7A;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private reentrancyLock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!reentrancyLock);\n', '    reentrancyLock = true;\n', '    _;\n', '    reentrancyLock = false;\n', '  }\n', '\n', '}\n', '\n', 'contract WillAlwaysLove is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    uint256 public constant DEFAULT_INITIAL_COST = 0.025 ether;\n', '    uint256 public constant DEFAULT_LOCK_COST_PER_HOUR = 0.0006 ether; // 10 szabo per minute\n', '    uint256 public constant DEFAULT_MAX_LOCK_DURATION = 1 weeks;\n', '\n', '    uint256 public constant DEVELOPER_CUT = 25; // %\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    struct LoveStory {\n', '        address owner;\n', '        bytes32 loverName;\n', '        bytes32 lovedOneName;\n', '        uint256 transferCost;\n', '        uint256 lockedUntil;\n', '        string data;\n', '    }\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    uint256 public initialCost;\n', '    uint256 public lockCostPerHour;\n', '    uint256 public maxLockDuration;\n', '\n', '    mapping(bytes16 => LoveStory) private loveStories;\n', '    uint256 public loveStoriesCount;\n', '\n', '    mapping (address => uint256) private pendingWithdrawals;\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    event LoveStoryCreated(\n', '        bytes16 id,\n', '        address owner,\n', '        bytes32 loverName,\n', '        bytes32 lovedOneName,\n', '        uint256 transferCost,\n', '        uint256 lockedUntil,\n', '        string data\n', '    );\n', '\n', '    event LoveStoryUpdated(\n', '        bytes16 id,\n', '        bytes32 loverName,\n', '        bytes32 lovedOneName,\n', '        string data\n', '    );\n', '\n', '    event LoveStoryTransferred(\n', '        bytes16 id,\n', '        address oldOwner,\n', '        address newOwner,\n', '        bytes32 newLoverName,\n', '        bytes32 newLovedOneName,\n', '        uint256 newtransferCost,\n', '        uint256 lockedUntil,\n', '        string data\n', '    );\n', '\n', '    event Withdrawal(\n', '        address withdrawer,\n', '        uint256 amount\n', '    );\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    modifier onlyForUnregisteredId(bytes16 _id) {\n', '        require(!isIdRegistered(_id));\n', '        _;\n', '    }\n', '\n', '    modifier onlyForRegisteredId(bytes16 _id) {\n', '        require(isIdRegistered(_id));\n', '        _;\n', '    }\n', '\n', '    modifier onlyForValidId(bytes16 _id) {\n', '        require(isIdValid(_id));\n', '        _;\n', '    }\n', '\n', '    modifier onlyWithPendingWithdrawal() {\n', '        require(withdrawableAmount() != 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyLoveStoryOwner(bytes16 _id) {\n', '        require(loveStories[_id].owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    constructor ()\n', '        public\n', '    {\n', '        initialCost = DEFAULT_INITIAL_COST;\n', '        lockCostPerHour = DEFAULT_LOCK_COST_PER_HOUR;\n', '        maxLockDuration = DEFAULT_MAX_LOCK_DURATION;\n', '    }\n', '\n', '    function ()\n', '        public\n', '        payable\n', '    {\n', '    }\n', '\n', '    function createCost(uint256 _lockDurationInHours)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return initialCost.add(lockCostPerHour.mul(_lockDurationInHours));\n', '    }\n', '\n', '    function createLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours)\n', '        public\n', '        payable\n', '    {\n', '        createLoveStoryWithData(_id, _loverName, _lovedOneName, _lockDurationInHours, "");\n', '    }\n', '\n', '    function createLoveStoryWithData(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours, string _data)\n', '        public\n', '        payable\n', '        onlyForValidId(_id)\n', '        onlyForUnregisteredId(_id)\n', '    {\n', '        require(msg.value >= createCost(_lockDurationInHours));\n', '\n', '        _updateLoveStory(_id, _loverName, _lovedOneName, _lockDurationInHours, _data);\n', '        loveStoriesCount = loveStoriesCount.add(1);\n', '\n', '        pendingWithdrawals[owner] = pendingWithdrawals[owner].add(msg.value);\n', '\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '\n', '        emit LoveStoryCreated (\n', '            _id,\n', '            _loveStory.owner,\n', '            _loveStory.loverName,\n', '            _loveStory.lovedOneName,\n', '            _loveStory.transferCost,\n', '            _loveStory.lockedUntil,\n', '            _loveStory.data\n', '        );\n', '    }\n', '\n', '    function updateLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName)\n', '        public\n', '        onlyLoveStoryOwner(_id)\n', '    {\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '\n', '        _loveStory.loverName = _loverName;\n', '        _loveStory.lovedOneName = _lovedOneName;\n', '\n', '        emit LoveStoryUpdated (\n', '            _id,\n', '            _loveStory.loverName,\n', '            _loveStory.lovedOneName,\n', '            _loveStory.data\n', '        );\n', '    }\n', '\n', '    function updateLoveStoryWithData(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, string _data)\n', '        public\n', '        onlyLoveStoryOwner(_id)\n', '    {\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '\n', '        _loveStory.loverName = _loverName;\n', '        _loveStory.lovedOneName = _lovedOneName;\n', '        _loveStory.data = _data;\n', '\n', '        emit LoveStoryUpdated (\n', '            _id,\n', '            _loveStory.loverName,\n', '            _loveStory.lovedOneName,\n', '            _loveStory.data\n', '        );\n', '    }\n', '\n', '    function transferCost(bytes16 _id, uint256 _lockDurationInHours)\n', '        public\n', '        view\n', '        onlyForValidId(_id)\n', '        onlyForRegisteredId(_id)\n', '        returns (uint256)\n', '    {\n', '        return loveStories[_id].transferCost.add(lockCostPerHour.mul(_lockDurationInHours));\n', '    }\n', '\n', '    function transferLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours)\n', '        public\n', '        payable\n', '        onlyForValidId(_id)\n', '        onlyForRegisteredId(_id)\n', '    {\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '        transferLoveStoryWithData(_id, _loverName, _lovedOneName, _lockDurationInHours, _loveStory.data);\n', '    }\n', '\n', '    function transferLoveStoryWithData(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours, string _data)\n', '        public\n', '        payable\n', '        onlyForValidId(_id)\n', '        onlyForRegisteredId(_id)\n', '    {\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '        address _oldOwner = _loveStory.owner;\n', '\n', '        require(_oldOwner != msg.sender);\n', '        require(msg.value >= transferCost(_id, _lockDurationInHours));\n', '        require(now >= _loveStory.lockedUntil);\n', '\n', '        _updateLoveStory(_id, _loverName, _lovedOneName, _lockDurationInHours, _data);\n', '\n', '        uint256 _developerPayment = msg.value.mul(DEVELOPER_CUT).div(100);\n', '        uint256 _oldOwnerPayment = msg.value.sub(_developerPayment);\n', '\n', '        require(msg.value == _developerPayment.add(_oldOwnerPayment));\n', '\n', '        pendingWithdrawals[owner] = pendingWithdrawals[owner].add(_developerPayment);\n', '        pendingWithdrawals[_oldOwner] = pendingWithdrawals[_oldOwner].add(_oldOwnerPayment);\n', '\n', '        emit LoveStoryTransferred (\n', '            _id,\n', '            _oldOwner,\n', '            _loveStory.owner,\n', '            _loveStory.loverName,\n', '            _loveStory.lovedOneName,\n', '            _loveStory.transferCost,\n', '            _loveStory.lockedUntil,\n', '            _loveStory.data\n', '        );\n', '    }\n', '\n', '    function readLoveStory(bytes16 _id)\n', '        public\n', '        view\n', '        returns (address _loveStoryOwner, bytes32 _loverName, bytes32 _lovedOneName, uint256 _transferCost, uint256 _lockedUntil, string _data)\n', '    {\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '\n', '        _loveStoryOwner = _loveStory.owner;\n', '        _loverName = _loveStory.loverName;\n', '        _lovedOneName = _loveStory.lovedOneName;\n', '        _transferCost = _loveStory.transferCost;\n', '        _lockedUntil = _loveStory.lockedUntil;\n', '        _data = _loveStory.data;\n', '    }\n', '\n', '    function isIdRegistered(bytes16 _id)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return loveStories[_id].owner != 0x0;\n', '    }\n', '\n', '    function isIdValid(bytes16 _id)\n', '        public\n', '        pure\n', '        returns (bool)\n', '    {\n', '        for (uint256 i = 0; i < 16; i = i.add(1))\n', '        {\n', '            if (i == 0)\n', '            {\n', "                // First char must be between 'a' and 'z'. It CAN'T be NULL.\n", '                if ( ! _isLowercaseLetter(_id[i]) )\n', '                {\n', '                    return false;\n', '                }\n', '            }\n', '            else if (i == 15)\n', '            {\n', "                // Last char must between 'a' and 'z'. It can also be a terminating NULL.\n", '                if ( !(_isLowercaseLetter(_id[i]) || _id[i] == 0) )\n', '                {\n', '                    return false;\n', '                }\n', '            }\n', '            else\n', '            {\n', "                // In-between chars must between 'a' and 'z' or '-'. Otherwise, they should be the unset bytes.\n", '                // The last part is verifiied by requiring that an in-bewteen char that is NULL\n', '                // must *also* be follwed by a NULL.\n', '                if ( !(_isLowercaseLetter(_id[i]) || (_id[i] == 0x2D && _id[i+1] != 0) || (_id[i] == _id[i+1] && _id[i] == 0)) )\n', '                {\n', '                    return false;\n', '                }\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function withdrawableAmount()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return pendingWithdrawals[msg.sender];\n', '    }\n', '\n', '    function withdraw()\n', '        external\n', '        nonReentrant\n', '        onlyWithPendingWithdrawal\n', '    {\n', '        uint256 amount = pendingWithdrawals[msg.sender];\n', '\n', '        pendingWithdrawals[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(amount);\n', '\n', '        emit Withdrawal (\n', '            msg.sender,\n', '            amount\n', '        );\n', '    }\n', '\n', '    function withdrawableAmountFor(address _withdrawer)\n', '        public\n', '        view\n', '        onlyOwner\n', '        returns (uint256)\n', '    {\n', '        return pendingWithdrawals[_withdrawer];\n', '    }\n', '\n', '    function changeInitialCost(uint256 _initialCost)\n', '        external\n', '        onlyOwner\n', '    {\n', '        initialCost = _initialCost;\n', '    }\n', '\n', '    function changeLockCostPerHour(uint256 _lockCostPerHour)\n', '        external\n', '        onlyOwner\n', '    {\n', '        lockCostPerHour = _lockCostPerHour;\n', '    }\n', '\n', '    function changeMaxLockDuration(uint256 _maxLockDuration)\n', '        external\n', '        onlyOwner\n', '    {\n', '        maxLockDuration = _maxLockDuration;\n', '    }\n', '\n', '    // ------------------------------------------------------------\n', '\n', '    function _updateLoveStory(bytes16 _id, bytes32 _loverName, bytes32 _lovedOneName, uint256 _lockDurationInHours, string _data)\n', '        private\n', '    {\n', '        require(_lockDurationInHours * 1 hours <= maxLockDuration);\n', '\n', '        LoveStory storage _loveStory = loveStories[_id];\n', '\n', '        _loveStory.owner = msg.sender;\n', '        _loveStory.loverName = _loverName;\n', '        _loveStory.lovedOneName = _lovedOneName;\n', '        _loveStory.transferCost = msg.value.mul(2);\n', '        _loveStory.lockedUntil = now.add(_lockDurationInHours.mul(1 hours));\n', '        _loveStory.data = _data;\n', '    }\n', '\n', '    function _isLowercaseLetter(byte _char)\n', '        private\n', '        pure\n', '        returns (bool)\n', '    {\n', '        // Char must be a small case letter: [a-z]\n', '        return _char >= 0x61 && _char <= 0x7A;\n', '    }\n', '}']
