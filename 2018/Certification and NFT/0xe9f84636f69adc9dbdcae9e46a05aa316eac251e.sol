['pragma solidity ^0.4.20;\n', '\n', 'contract owned {\n', '    address public owner;\n', '    address public tokenContract;\n', '    constructor() public{\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerAndtokenContract {\n', '        require(msg.sender == owner || msg.sender == tokenContract);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function transfertokenContract(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            tokenContract = newOwner;\n', '        }\n', '    }\n', '}\n', '\n', 'contract DataContract is owned {\n', '    struct Good {\n', '        bytes32 preset;\n', '        uint price;\n', '        uint decision;\n', '        uint time;\n', '    }\n', '\n', '    mapping (bytes32 => Good) public goods;\n', '\n', '    function setGood(bytes32 _preset, uint _price,uint _decision) onlyOwnerAndtokenContract external {\n', '        goods[_preset] = Good({preset: _preset, price: _price, decision:_decision, time: now});\n', '    }\n', '\n', '    function getGoodPreset(bytes32 _preset) view public returns (bytes32) {\n', '        return goods[_preset].preset;\n', '    }\n', '    function getGoodDecision(bytes32 _preset) view public returns (uint) {\n', '        return goods[_preset].decision;\n', '    }\n', '    function getGoodPrice(bytes32 _preset) view public returns (uint) {\n', '        return goods[_preset].price;\n', '    }\n', '}\n', '\n', '\n', 'contract Token is owned {\n', '\n', '    DataContract DC;\n', '\n', '    constructor(address _dataContractAddr) public{\n', '        DC = DataContract(_dataContractAddr);\n', '    }\n', '\n', '    event Decision(uint decision,bytes32 preset);\n', '\n', '    function postGood(bytes32 _preset, uint _price) onlyOwner public {\n', '        require(DC.getGoodPreset(_preset) == "");\n', '        uint _decision = uint(keccak256(keccak256(blockhash(block.number),_preset),now))%(_price);\n', '        DC.setGood(_preset, _price, _decision);\n', '        Decision(_decision, _preset);\n', '    }\n', '}']