['pragma solidity ^0.4.21;\n', '\n', 'contract Token{\n', '    function transfer(address _to, uint256 _value){_to;_value;}\n', '}\n', '\n', 'contract BatchTransfer{\n', '    address public owner;\n', '    mapping (address => bool) public admins;\n', '    Token public token;\n', '    \n', '    modifier onlyOwner{\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwnerOrAdmin{\n', '        require(msg.sender == owner || admins[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    function BatchTransfer(address _tokenAddr) public {\n', '        owner = msg.sender;\n', '        token = Token(_tokenAddr);\n', '    }\n', '    \n', '    function ownerSetOwner(address newOwner) public onlyOwner{\n', '        owner = newOwner;\n', '    }\n', '    \n', '    function ownerSetAdmin(address[] _admins) public onlyOwner{\n', '        for(uint i = 0; i<_admins.length; i++){\n', '            admins[_admins[i]] = true;\n', '        }\n', '    }\n', '    \n', '    function ownerModAdmin(address _admin, bool _authority) onlyOwner{\n', '        admins[_admin] = _authority;\n', '    }\n', '    \n', '    function ownerTransfer(address _addr, uint _value) public onlyOwner{\n', '        token.transfer(_addr,_value);\n', '    }\n', '    \n', '    function executeBatchTransfer(address[] _dests, uint[] _values) public onlyOwnerOrAdmin returns(uint){\n', '        uint i = 0;\n', '        while (i < _dests.length) {\n', '            token.transfer(_dests[i], _values[i] * (10 ** 18));\n', '            i += 1;\n', '        }\n', '        return i;\n', '    }\n', '    \n', '    \n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract Token{\n', '    function transfer(address _to, uint256 _value){_to;_value;}\n', '}\n', '\n', 'contract BatchTransfer{\n', '    address public owner;\n', '    mapping (address => bool) public admins;\n', '    Token public token;\n', '    \n', '    modifier onlyOwner{\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwnerOrAdmin{\n', '        require(msg.sender == owner || admins[msg.sender] == true);\n', '        _;\n', '    }\n', '    \n', '    function BatchTransfer(address _tokenAddr) public {\n', '        owner = msg.sender;\n', '        token = Token(_tokenAddr);\n', '    }\n', '    \n', '    function ownerSetOwner(address newOwner) public onlyOwner{\n', '        owner = newOwner;\n', '    }\n', '    \n', '    function ownerSetAdmin(address[] _admins) public onlyOwner{\n', '        for(uint i = 0; i<_admins.length; i++){\n', '            admins[_admins[i]] = true;\n', '        }\n', '    }\n', '    \n', '    function ownerModAdmin(address _admin, bool _authority) onlyOwner{\n', '        admins[_admin] = _authority;\n', '    }\n', '    \n', '    function ownerTransfer(address _addr, uint _value) public onlyOwner{\n', '        token.transfer(_addr,_value);\n', '    }\n', '    \n', '    function executeBatchTransfer(address[] _dests, uint[] _values) public onlyOwnerOrAdmin returns(uint){\n', '        uint i = 0;\n', '        while (i < _dests.length) {\n', '            token.transfer(_dests[i], _values[i] * (10 ** 18));\n', '            i += 1;\n', '        }\n', '        return i;\n', '    }\n', '    \n', '    \n', '}']
