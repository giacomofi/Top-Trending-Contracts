['pragma solidity ^0.4.24;\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract LoveToken is Ownable{\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract PiaoPiaoToken is LoveToken {\n', '    mapping (address => uint256) balances;\n', '    string public name;                   \n', '    uint8 public decimals;               \n', '    string public symbol;\n', '    string public loveUrl;\n', '    \n', '    function PiaoPiaoToken() {\n', '        balances[msg.sender] = 5201314; \n', '        totalSupply = 5201314;         \n', '        name = "PiaoPiao Token";                   \n', '        decimals = 0;          \n', '        symbol = "PPT";  \n', '    }\n', '    \n', '    function setLoveUrl(string _loveUrl) onlyOwner public returns (bool success) {\n', '        loveUrl = _loveUrl;\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', 'contract Ownable {\n', '  address public owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'contract LoveToken is Ownable{\n', '    uint256 public totalSupply;\n', '    function balanceOf(address _owner) constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) returns (bool success);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', 'contract PiaoPiaoToken is LoveToken {\n', '    mapping (address => uint256) balances;\n', '    string public name;                   \n', '    uint8 public decimals;               \n', '    string public symbol;\n', '    string public loveUrl;\n', '    \n', '    function PiaoPiaoToken() {\n', '        balances[msg.sender] = 5201314; \n', '        totalSupply = 5201314;         \n', '        name = "PiaoPiao Token";                   \n', '        decimals = 0;          \n', '        symbol = "PPT";  \n', '    }\n', '    \n', '    function setLoveUrl(string _loveUrl) onlyOwner public returns (bool success) {\n', '        loveUrl = _loveUrl;\n', '        return true;\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}']
