['pragma solidity ^0.4.15;\n', '\n', 'contract Base {\n', '\n', '    modifier only(address allowed) {\n', '        require(msg.sender == allowed);\n', '        _;\n', '    }\n', '\n', '    // *************************************************\n', '    // *          reentrancy handling                  *\n', '    // *************************************************\n', '    uint private bitlocks = 0;\n', '\n', '    modifier noAnyReentrancy {\n', '        var _locks = bitlocks;\n', '        require(_locks == 0);\n', '        bitlocks = uint(-1);\n', '        _;\n', '        bitlocks = _locks;\n', '    }\n', '}\n', '\n', 'contract IToken {\n', '    function mint(address _to, uint _amount) public;\n', '    function start() public;\n', '    function getTotalSupply()  public returns(uint);\n', '    function balanceOf(address _owner)  public returns(uint);\n', '    function transfer(address _to, uint _amount)  public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint _value)  public returns (bool success);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned is Base {\n', '    address public owner;\n', '    address newOwner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address _newOwner) public only(owner) {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public only(newOwner) {\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '}\n', '\n', 'contract Crowdsale is Base, Owned {\n', '    using SafeMath for uint256;\n', '\n', '    enum State { INIT, BOUNTY, PREICO, PREICO_FINISHED, ICO, CLOSED, STOPPED }\n', '    enum SupplyType { BOUNTY, SALE }\n', '\n', '    uint public constant DECIMALS = 10**18;\n', '    uint public constant MAX_PREICO_SUPPLY = 20000000 * DECIMALS;\n', '    uint public constant MAX_ICO_SUPPLY = 70000000 * DECIMALS;\n', '    uint public constant MAX_BOUNTY_SUPPLY = 10000000 * DECIMALS;\n', '\n', '    State public currentState = State.INIT;\n', '    IToken public token;\n', '\n', '    uint public totalPreICOSupply = 0;\n', '    uint public totalICOSupply = 0;\n', '    uint public totalBountySupply = 0;\n', '\n', '    uint public totalFunds = 0;\n', '    uint public tokenPrice = 6000000000000; //wei\n', '    uint public bonus = 2000; //20%\n', '    uint public currentPrice;\n', '    address public beneficiary;\n', '    mapping(address => uint) balances;\n', '    uint public countMembers = 0;\n', '\n', '    uint private bonusBase = 10000; //100%;\n', '\n', '    event Transfer(address indexed _to, uint256 _value);\n', '\n', '    modifier inState(State _state){\n', '        require(currentState == _state);\n', '        _;\n', '    }\n', '\n', '    modifier salesRunning(){\n', '        require(currentState == State.PREICO || currentState == State.ICO);\n', '        _;\n', '    }\n', '\n', '    modifier notStopped(){\n', '        require(currentState != State.STOPPED);\n', '        _;\n', '    }\n', '\n', '    function Crowdsale(address _beneficiary) public {\n', '        beneficiary = _beneficiary;\n', '    }\n', '\n', '    function ()\n', '        public\n', '        payable\n', '        salesRunning\n', '    {\n', '        _receiveFunds();\n', '    }\n', '\n', '    function initialize(address _token)\n', '        public\n', '        only(owner)\n', '        inState(State.INIT)\n', '    {\n', '        require(_token != address(0));\n', '\n', '        token = IToken(_token);\n', '        currentPrice = tokenPrice;\n', '    }\n', '\n', '    function setBonus(uint _bonus) public\n', '        only(owner)\n', '        notStopped\n', '    {\n', '        bonus = _bonus;\n', '    }\n', '\n', '    function getBonus()\n', '        public\n', '        constant\n', '        returns(uint)\n', '    {\n', '        return bonus.mul(100).div(bonusBase);\n', '    }\n', '\n', '    function setTokenPrice(uint _tokenPrice) public\n', '        only(owner)\n', '        notStopped\n', '    {\n', '        currentPrice = _tokenPrice;\n', '    }\n', '\n', '    function setState(State _newState)\n', '        public\n', '        only(owner)\n', '    {\n', '        require(\n', '            currentState != State.STOPPED && (_newState == State.STOPPED ||\n', '            (currentState == State.INIT && _newState == State.BOUNTY\n', '            || currentState == State.BOUNTY && _newState == State.PREICO\n', '            || currentState == State.PREICO && _newState == State.PREICO_FINISHED\n', '            || currentState == State.PREICO_FINISHED && _newState == State.ICO\n', '            || currentState == State.ICO && _newState == State.CLOSED))\n', '        );\n', '\n', '        if(_newState == State.CLOSED){\n', '            _finish();\n', '        }\n', '\n', '        currentState = _newState;\n', '    }\n', '\n', '    function investDirect(address _to, uint _amount)\n', '        public\n', '        only(owner)\n', '        salesRunning\n', '    {\n', '        uint bonusTokens = _amount.mul(bonus).div(bonusBase);\n', '        _amount = _amount.add(bonusTokens);\n', '\n', '        _checkMaxSaleSupply(_amount);\n', '\n', '        _mint(_to, _amount);\n', '    }\n', '    \n', '    function investBounty(address _to, uint _amount)\n', '        public\n', '        only(owner)\n', '        inState(State.BOUNTY)\n', '    {\n', '        _mint(_to, _amount);\n', '    }\n', '\n', '\n', '    function getCountMembers()\n', '    public\n', '    constant\n', '    returns(uint)\n', '    {\n', '        return countMembers;\n', '    }\n', '\n', '    //==================== Internal Methods =================\n', '    function _mint(address _to, uint _amount)\n', '        noAnyReentrancy\n', '        internal\n', '    {\n', '        _increaseSupply(_amount);\n', '        IToken(token).mint(_to, _amount);\n', '        Transfer(_to, _amount);\n', '    }\n', '\n', '    function _finish()\n', '        noAnyReentrancy\n', '        internal\n', '    {\n', '        IToken(token).start();\n', '    }\n', '\n', '    function _receiveFunds()\n', '        internal\n', '    {\n', '        require(msg.value != 0);\n', '        uint weiAmount = msg.value;\n', '        uint transferTokens = weiAmount.mul(DECIMALS).div(currentPrice);\n', '\n', '        uint bonusTokens = transferTokens.mul(bonus).div(bonusBase);\n', '        transferTokens = transferTokens.add(bonusTokens);\n', '\n', '        _checkMaxSaleSupply(transferTokens);\n', '\n', '        if(balances[msg.sender] == 0){\n', '            countMembers = countMembers.add(1);\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].add(weiAmount);\n', '        totalFunds = totalFunds.add(weiAmount);\n', '\n', '        _mint(msg.sender, transferTokens);\n', '        beneficiary.transfer(weiAmount);\n', '    }\n', '\n', '    function _checkMaxSaleSupply(uint transferTokens)\n', '        internal\n', '    {\n', '        if(currentState == State.PREICO) {\n', '            require(totalPreICOSupply.add(transferTokens) <= MAX_PREICO_SUPPLY);\n', '        } else if(currentState == State.ICO) {\n', '            require(totalICOSupply.add(transferTokens) <= MAX_ICO_SUPPLY);\n', '        }\n', '    }\n', '    \n', '     function _increaseSupply(uint _amount)\n', '        internal\n', '    {\n', '        if(currentState == State.PREICO) {\n', '            totalPreICOSupply = totalPreICOSupply.add(_amount);\n', '        } else if(currentState == State.ICO) {\n', '            totalICOSupply = totalICOSupply.add(_amount);\n', '        }\n', '    }\n', '}']