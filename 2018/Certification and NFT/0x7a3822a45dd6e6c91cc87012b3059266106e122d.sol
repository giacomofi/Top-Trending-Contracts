['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20Transfer {\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transfer(to, value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20Transfer for IERC20;\n', '\n', '  // The token being sold\n', '  IERC20 private _token;\n', '\n', '  // Address where funds are collected\n', '  address private _wallet;\n', '\n', '  // How many token units a buyer gets per 1 ETH.\n', '  uint256 private _rate = 5000;\n', '\n', '  // Amount of wei raised\n', '  uint256 private _weiRaised;\n', '\n', '  // Accrued tokens amount\n', '  uint256 private _accruedTokensAmount;\n', '\n', '  // freezing periods in seconds\n', '  uint256 private _threeMonths = 5256000;\n', '  uint256 private _sixMonths = 15768000;\n', '  uint256 private _nineMonths = 21024000;\n', '  uint256 private _twelveMonths = 31536000;\n', '\n', '  // ICO configuration\n', '  uint256 private _foundersTokens = 4e7;\n', '  uint256 private _distributedTokens = 1e9;\n', '  uint256 public softCap = 1000 ether;\n', '  uint256 public hardCap = 35000 ether;\n', '  uint256 public preICO_1_Start = 1541030400; // 01/11/2018 00:00:00\n', '  uint256 public preICO_2_Start = 1541980800; // 12/11/2018 00:00:00\n', '  uint256 public preICO_3_Start = 1542844800; // 22/11/2018 00:00:00\n', '  uint256 public ICO_Start = 1543622400; // 01/12/2018 00:00:00\n', '  uint256 public ICO_End = 1548979199; // 31/01/2019 23:59:59\n', '  uint32 public bonus1 = 30; // pre ICO phase 1\n', '  uint32 public bonus2 = 20; // pre ICO phase 2\n', '  uint32 public bonus3 = 10; // pre ICO phase 3\n', '  uint32 public whitelistedBonus = 10;\n', '\n', '  mapping (address => bool) private _whitelist;\n', '\n', '  // tokens accrual\n', '  mapping (address => uint256) public threeMonthsFreezingAccrual;\n', '  mapping (address => uint256) public sixMonthsFreezingAccrual;\n', '  mapping (address => uint256) public nineMonthsFreezingAccrual;\n', '  mapping (address => uint256) public twelveMonthsFreezingAccrual;\n', '\n', '  // investors ledger\n', '  mapping (address => uint256) public ledger;\n', '\n', '  /**\n', '   * Event for tokens accrual logging\n', '   * @param to who tokens where accrued to\n', '   * @param accruedAmount amount of tokens accrued\n', '   * @param freezingTime period for freezing in seconds\n', '   * @param purchasedAmount amount of tokens purchased\n', '   * @param weiValue amount of ether contributed\n', '   */\n', '  event Accrual(\n', '    address to,\n', '    uint256 accruedAmount,\n', '    uint256 freezingTime,\n', '    uint256 purchasedAmount,\n', '    uint256 weiValue\n', '  );\n', '\n', '  /**\n', '   * Event for accrued tokens releasing logging\n', '   * @param to who tokens where release to\n', '   * @param amount amount of tokens released\n', '   */\n', '  event Released(\n', '    address to,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * Event for refund logging\n', '   * @param to who have got refund\n', '   * @param value ether refunded\n', '   */\n', '  event Refunded(\n', '    address to,\n', '    uint256 value\n', '  );\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokensPurchased(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @dev The rate is the conversion between wei and the smallest and indivisible\n', '   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n', '   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n', '   * @param wallet Address where collected funds will be forwarded to\n', '   * @param founders Address for founders tokens accrual\n', '   * @param token Address of the token being sold\n', '   */\n', '  constructor(address newOwner, address wallet, address founders, IERC20 token) public {\n', '    require(wallet != address(0));\n', '    require(founders != address(0));\n', '    require(token != address(0));\n', '    require(newOwner != address(0));\n', '    transferOwnership(newOwner);\n', '\n', '    _wallet = wallet;\n', '    _token = token;\n', '\n', '    twelveMonthsFreezingAccrual[founders] = _foundersTokens;\n', '    _accruedTokensAmount = _foundersTokens;\n', '    emit Accrual(founders, _foundersTokens, _twelveMonths, 0, 0);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @return the token being sold.\n', '   */\n', '  function token() public view returns(IERC20) {\n', '    return _token;\n', '  }\n', '\n', '  /**\n', '   * @return the address where funds are collected.\n', '   */\n', '  function wallet() public view returns(address) {\n', '    return _wallet;\n', '  }\n', '\n', '  /**\n', '   * @return the number of token units a buyer gets per wei.\n', '   */\n', '  function rate() public view returns(uint256) {\n', '    return _rate;\n', '  }\n', '\n', '  /**\n', '   * @return the amount of wei raised.\n', '   */\n', '  function weiRaised() public view returns (uint256) {\n', '    return _weiRaised;\n', '  }\n', '\n', '  /**\n', '   * @return if who is whitelisted.\n', '   * @param who investors address\n', '   */\n', '  function whitelist(address who) public view returns (bool) {\n', '    return _whitelist[who];\n', '  }\n', '\n', '  /**\n', '   * add investor to whitelist\n', '   * @param who investors address\n', '   */\n', '  function addToWhitelist(address who) public onlyOwner {\n', '    _whitelist[who] = true;\n', '  }\n', '\n', '  /**\n', '   * remove investor from whitelist\n', '   * @param who investors address\n', '   */\n', '  function removeFromWhitelist(address who) public onlyOwner {\n', '    _whitelist[who] = false;\n', '  }\n', '\n', '  /**\n', '   * Accrue bonuses to advisors\n', '   * @param to address for accrual\n', '   * @param amount tokem amount\n', '   */\n', '  function accrueAdvisorsTokens(address to, uint256 amount) public onlyOwner {\n', '    require(now > ICO_End);\n', '    uint256 tokenBalance = _token.balanceOf(address(this));\n', '    require(tokenBalance >= _accruedTokensAmount.add(amount));\n', '\n', '    _accruedTokensAmount = _accruedTokensAmount.add(amount);\n', '    \n', '    sixMonthsFreezingAccrual[to] = sixMonthsFreezingAccrual[to].add(amount);\n', '\n', '    emit Accrual(to, amount, _sixMonths, 0, 0);    \n', '  }\n', '\n', '  /**\n', '   * Accrue bonuses to partners\n', '   * @param to address for accrual\n', '   * @param amount tokem amount\n', '   */\n', '  function accruePartnersTokens(address to, uint256 amount) public onlyOwner {\n', '    require(now > ICO_End);\n', '    uint256 tokenBalance = _token.balanceOf(address(this));\n', '    require(tokenBalance >= _accruedTokensAmount.add(amount));\n', '\n', '    _accruedTokensAmount = _accruedTokensAmount.add(amount);\n', '    \n', '    nineMonthsFreezingAccrual[to] = nineMonthsFreezingAccrual[to].add(amount);\n', '\n', '    emit Accrual(to, amount, _nineMonths, 0, 0);    \n', '  }\n', '\n', '  /**\n', '   * Accrue bounty and airdrop bonuses\n', '   * @param to address for accrual\n', '   * @param amount tokem amount\n', '   */\n', '  function accrueBountyTokens(address to, uint256 amount) public onlyOwner {\n', '    require(now > ICO_End);\n', '    uint256 tokenBalance = _token.balanceOf(address(this));\n', '    require(tokenBalance >= _accruedTokensAmount.add(amount));\n', '\n', '    _accruedTokensAmount = _accruedTokensAmount.add(amount);\n', '    \n', '    twelveMonthsFreezingAccrual[to] = twelveMonthsFreezingAccrual[to].add(amount);\n', '\n', '    emit Accrual(to, amount, _twelveMonths, 0, 0);    \n', '  }\n', '\n', '  /**\n', '   * release accrued tokens\n', '   */\n', '  function release() public {\n', '    address who = msg.sender;\n', '    uint256 amount;\n', '    if (now > ICO_End.add(_twelveMonths) && twelveMonthsFreezingAccrual[who] > 0) {\n', '      amount = amount.add(twelveMonthsFreezingAccrual[who]);\n', '      _accruedTokensAmount = _accruedTokensAmount.sub(twelveMonthsFreezingAccrual[who]);\n', '      twelveMonthsFreezingAccrual[who] = 0;\n', '    }\n', '    if (now > ICO_End.add(_nineMonths) && nineMonthsFreezingAccrual[who] > 0) {\n', '      amount = amount.add(nineMonthsFreezingAccrual[who]);\n', '      _accruedTokensAmount = _accruedTokensAmount.sub(nineMonthsFreezingAccrual[who]);\n', '      nineMonthsFreezingAccrual[who] = 0;\n', '    }\n', '    if (now > ICO_End.add(_sixMonths) && sixMonthsFreezingAccrual[who] > 0) {\n', '      amount = amount.add(sixMonthsFreezingAccrual[who]);\n', '      _accruedTokensAmount = _accruedTokensAmount.sub(sixMonthsFreezingAccrual[who]);\n', '      sixMonthsFreezingAccrual[who] = 0;\n', '    }\n', '    if (now > ICO_End.add(_threeMonths) && threeMonthsFreezingAccrual[who] > 0) {\n', '      amount = amount.add(threeMonthsFreezingAccrual[who]);\n', '      _accruedTokensAmount = _accruedTokensAmount.sub(threeMonthsFreezingAccrual[who]);\n', '      threeMonthsFreezingAccrual[who] = 0;\n', '    }\n', '    if (amount > 0) {\n', '      _deliverTokens(who, amount);\n', '      emit Released(who, amount);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * refund ether\n', '   */\n', '  function refund() public {\n', '    address investor = msg.sender;\n', '    require(now > ICO_End);\n', '    require(_weiRaised < softCap);\n', '    require(ledger[investor] > 0);\n', '    uint256 value = ledger[investor];\n', '    ledger[investor] = 0;\n', '    investor.transfer(value);\n', '    emit Refunded(investor, value);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address beneficiary) public payable {\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // bonus tokens accrual and ensure token balance is enough for accrued tokens release\n', '    _accrueBonusTokens(beneficiary, tokens, weiAmount);\n', '\n', '    // update state\n', '    _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(beneficiary, tokens);\n', '    emit TokensPurchased(\n', '      msg.sender,\n', '      beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    if (_weiRaised >= softCap) _forwardFunds();\n', '\n', '    ledger[msg.sender] = ledger[msg.sender].add(msg.value);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '    /**\n', '   * @dev Accrue bonus tokens.\n', '   * @param beneficiary Address for tokens accrual\n', '   * @param tokenAmount amount of tokens that beneficiary get\n', '   */\n', '  function _accrueBonusTokens(address beneficiary, uint256 tokenAmount, uint256 weiAmount) internal {\n', '    uint32 bonus = 0;\n', '    uint256 bonusTokens = 0;\n', '    uint256 tokenBalance = _token.balanceOf(address(this));\n', '    if (_whitelist[beneficiary] && now < ICO_Start) bonus = bonus + whitelistedBonus;\n', '    if (now < preICO_2_Start) {\n', '      bonus = bonus + bonus1;\n', '      bonusTokens = tokenAmount.mul(bonus).div(100);\n', '\n', '      require(tokenBalance >= _accruedTokensAmount.add(bonusTokens).add(tokenAmount));\n', '\n', '      _accruedTokensAmount = _accruedTokensAmount.add(bonusTokens);\n', '\n', '      nineMonthsFreezingAccrual[beneficiary] = nineMonthsFreezingAccrual[beneficiary].add(bonusTokens);\n', '\n', '      emit Accrual(beneficiary, bonusTokens, _nineMonths, tokenAmount, weiAmount);\n', '    } else if (now < preICO_3_Start) {\n', '      bonus = bonus + bonus2;\n', '      bonusTokens = tokenAmount.mul(bonus).div(100);\n', '\n', '      require(tokenBalance >= _accruedTokensAmount.add(bonusTokens).add(tokenAmount));\n', '\n', '      _accruedTokensAmount = _accruedTokensAmount.add(bonusTokens);\n', '      \n', '      sixMonthsFreezingAccrual[beneficiary] = sixMonthsFreezingAccrual[beneficiary].add(bonusTokens);\n', '\n', '      emit Accrual(beneficiary, bonusTokens, _sixMonths, tokenAmount, weiAmount);\n', '    } else if (now < ICO_Start) {\n', '      bonus = bonus + bonus3;\n', '      bonusTokens = tokenAmount.mul(bonus).div(100);\n', '\n', '      require(tokenBalance >= _accruedTokensAmount.add(bonusTokens).add(tokenAmount));\n', '\n', '      _accruedTokensAmount = _accruedTokensAmount.add(bonusTokens);\n', '      \n', '      threeMonthsFreezingAccrual[beneficiary] = threeMonthsFreezingAccrual[beneficiary].add(bonusTokens);\n', '\n', '      emit Accrual(beneficiary, bonusTokens, _threeMonths, tokenAmount, weiAmount);\n', '    } else {\n', '      require(tokenBalance >= _accruedTokensAmount.add(tokenAmount));\n', '\n', '      emit Accrual(beneficiary, 0, 0, tokenAmount, weiAmount);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "   * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n", '   *   super._preValidatePurchase(beneficiary, weiAmount);\n', '   *   require(weiRaised().add(weiAmount) <= cap);\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal view\n', '  {\n', '    require(beneficiary != address(0));\n', '    require(weiAmount != 0);\n', '    require(_weiRaised.add(weiAmount) <= hardCap);\n', '    require(now >= preICO_1_Start);\n', '    require(now <= ICO_End);\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address beneficiary,\n', '    uint256 tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _token.safeTransfer(beneficiary, tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param beneficiary Address receiving the tokens\n', '   * @param tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address beneficiary,\n', '    uint256 tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(beneficiary, tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev The way in which ether is converted to tokens.\n', '   * @param weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(\n', '    uint256 weiAmount\n', '  )\n', '    internal view returns (uint256)\n', '  {\n', '    return weiAmount.mul(_rate).div(1e18);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    uint256 balance = address(this).balance;\n', '    _wallet.transfer(balance);\n', '  }\n', '}']