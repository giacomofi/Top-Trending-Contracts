['pragma solidity 0.4.19;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract MinerOneToken is MintableToken {\n', '    using SafeMath for uint256;\n', '\n', '    string public name = "MinerOne";\n', '    string public symbol = "MIO";\n', '    uint8 public decimals = 18;\n', '\n', '    /**\n', '     * This struct holds data about token holder dividends\n', '     */\n', '    struct Account {\n', '        /**\n', '         * Last amount of dividends seen at the token holder payout\n', '         */\n', '        uint256 lastDividends;\n', '        /**\n', '         * Amount of wei contract needs to pay to token holder\n', '         */\n', '        uint256 fixedBalance;\n', '        /**\n', '         * Unpayed wei amount due to rounding\n', '         */\n', '        uint256 remainder;\n', '    }\n', '\n', '    /**\n', '     * Mapping which holds all token holders data\n', '     */\n', '    mapping(address => Account) internal accounts;\n', '\n', '    /**\n', '     * Running total of all dividends distributed\n', '     */\n', '    uint256 internal totalDividends;\n', '    /**\n', '     * Holds an amount of unpayed weis\n', '     */\n', '    uint256 internal reserved;\n', '\n', '    /**\n', '     * Raised when payment distribution occurs\n', '     */\n', '    event Distributed(uint256 amount);\n', '    /**\n', '     * Raised when shareholder withdraws his profit\n', '     */\n', '    event Paid(address indexed to, uint256 amount);\n', '    /**\n', '     * Raised when the contract receives Ether\n', '     */\n', '    event FundsReceived(address indexed from, uint256 amount);\n', '\n', '    modifier fixBalance(address _owner) {\n', '        Account storage account = accounts[_owner];\n', '        uint256 diff = totalDividends.sub(account.lastDividends);\n', '        if (diff > 0) {\n', '            uint256 numerator = account.remainder.add(balances[_owner].mul(diff));\n', '\n', '            account.fixedBalance = account.fixedBalance.add(numerator.div(totalSupply_));\n', '            account.remainder = numerator % totalSupply_;\n', '            account.lastDividends = totalDividends;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenMintingFinished() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function () external payable {\n', '        withdraw(msg.sender, msg.value);\n', '    }\n', '\n', '    function deposit() external payable {\n', '        require(msg.value > 0);\n', '        require(msg.value <= this.balance.sub(reserved));\n', '\n', '        totalDividends = totalDividends.add(msg.value);\n', '        reserved = reserved.add(msg.value);\n', '        Distributed(msg.value);\n', '    }\n', '\n', '    /**\n', '     * Returns unpayed wei for a given address\n', '     */\n', '    function getDividends(address _owner) public view returns (uint256) {\n', '        Account storage account = accounts[_owner];\n', '        uint256 diff = totalDividends.sub(account.lastDividends);\n', '        if (diff > 0) {\n', '            uint256 numerator = account.remainder.add(balances[_owner].mul(diff));\n', '            return account.fixedBalance.add(numerator.div(totalSupply_));\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public\n', '        onlyWhenMintingFinished\n', '        fixBalance(msg.sender)\n', '        fixBalance(_to) returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public\n', '        onlyWhenMintingFinished\n', '        fixBalance(_from)\n', '        fixBalance(_to) returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function payoutToAddress(address[] _holders) external {\n', '        require(_holders.length > 0);\n', '        require(_holders.length <= 100);\n', '        for (uint256 i = 0; i < _holders.length; i++) {\n', '            withdraw(_holders[i], 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Token holder must call this to receive dividends\n', '     */\n', '    function withdraw(address _benefeciary, uint256 _toReturn) internal\n', '        onlyWhenMintingFinished\n', '        fixBalance(_benefeciary) returns (bool) {\n', '\n', '        uint256 amount = accounts[_benefeciary].fixedBalance;\n', '        reserved = reserved.sub(amount);\n', '        accounts[_benefeciary].fixedBalance = 0;\n', '        uint256 toTransfer = amount.add(_toReturn);\n', '        if (toTransfer > 0) {\n', '            _benefeciary.transfer(toTransfer);\n', '        }\n', '        if (amount > 0) {\n', '            Paid(_benefeciary, amount);\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract MinerOneCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '    // Wallet where all ether will be\n', '    address public constant WALLET = 0x2C2b3885BC8B82Ad4D603D95ED8528Ef112fE8F2;\n', '    // Wallet for team tokens\n', '    address public constant TEAM_WALLET = 0x997faEf570B534E5fADc8D2D373e2F11aF4e115a;\n', '    // Wallet for research and development tokens\n', '    address public constant RESEARCH_AND_DEVELOPMENT_WALLET = 0x770998331D6775c345B1807c40413861fc4D6421;\n', '    // Wallet for bounty tokens\n', '    address public constant BOUNTY_WALLET = 0xd481Aab166B104B1aB12e372Ef7af6F986f4CF19;\n', '\n', '    uint256 public constant UINT256_MAX = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '    uint256 public constant ICO_TOKENS = 287000000e18;\n', '    uint8 public constant ICO_TOKENS_PERCENT = 82;\n', '    uint8 public constant TEAM_TOKENS_PERCENT = 10;\n', '    uint8 public constant RESEARCH_AND_DEVELOPMENT_TOKENS_PERCENT = 6;\n', '    uint8 public constant BOUNTY_TOKENS_PERCENT = 2;\n', '    uint256 public constant SOFT_CAP = 3000000e18;\n', '    uint256 public constant START_TIME = 1518692400; // 2018/02/15 11:00 UTC +0\n', '    uint256 public constant RATE = 1000; // 1000 tokens costs 1 ether\n', '    uint256 public constant LARGE_PURCHASE = 10000e18;\n', '    uint256 public constant LARGE_PURCHASE_BONUS = 4;\n', '    uint256 public constant TOKEN_DESK_BONUS = 3;\n', '    uint256 public constant MIN_TOKEN_AMOUNT = 100e18;\n', '\n', '    Phase[] internal phases;\n', '\n', '    struct Phase {\n', '        uint256 till;\n', '        uint8 discount;\n', '    }\n', '\n', '    // The token being sold\n', '    MinerOneToken public token;\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '    // refund vault used to hold funds while crowdsale is running\n', '    RefundVault public vault;\n', '    uint256 public currentPhase = 0;\n', '    bool public isFinalized = false;\n', '    address private tokenMinter;\n', '    address private tokenDeskProxy;\n', '    uint256 public icoEndTime = 1526558400; // 2018/05/17 12:00 UTC +0\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    event Finalized();\n', '    /**\n', '    * When there no tokens left to mint and token minter tries to manually mint tokens\n', '    * this event is raised to signal how many tokens we have to charge back to purchaser\n', '    */\n', '    event ManualTokenMintRequiresRefund(address indexed purchaser, uint256 value);\n', '\n', '    function MinerOneCrowdsale(address _token) public {\n', '        phases.push(Phase({ till: 1519214400, discount: 35 })); // 2018/02/21 12:00 UTC +0\n', '        phases.push(Phase({ till: 1519905600, discount: 30 })); // 2018/03/01 12:00 UTC +0\n', '        phases.push(Phase({ till: 1521201600, discount: 25 })); // 2018/03/16 12:00 UTC +0\n', '        phases.push(Phase({ till: 1522584000, discount: 20 })); // 2018/04/01 12:00 UTC +0\n', '        phases.push(Phase({ till: 1524312000, discount: 15 })); // 2018/04/21 12:00 UTC +0\n', '        phases.push(Phase({ till: 1525608000, discount: 10 })); // 2018/05/06 12:00 UTC +0\n', '        phases.push(Phase({ till: 1526472000, discount: 5  })); // 2018/05/16 12:00 UTC +0\n', '        phases.push(Phase({ till: UINT256_MAX, discount:0 }));  // unlimited\n', '\n', '        token = MinerOneToken(_token);\n', '        vault = new RefundVault(WALLET);\n', '        tokenMinter = msg.sender;\n', '    }\n', '\n', '    modifier onlyTokenMinterOrOwner() {\n', '        require(msg.sender == tokenMinter || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens or claim refund\n', '    function () external payable {\n', '        if (!isFinalized) {\n', '            buyTokens(msg.sender, msg.sender);\n', '        } else {\n', '            claimRefund();\n', '        }\n', '    }\n', '\n', '    function mintTokens(address[] _receivers, uint256[] _amounts) external onlyTokenMinterOrOwner {\n', '        require(_receivers.length > 0 && _receivers.length <= 100);\n', '        require(_receivers.length == _amounts.length);\n', '        require(!isFinalized);\n', '        for (uint256 i = 0; i < _receivers.length; i++) {\n', '            address receiver = _receivers[i];\n', '            uint256 amount = _amounts[i];\n', '\n', '            require(receiver != address(0));\n', '            require(amount > 0);\n', '\n', '            uint256 excess = appendContribution(receiver, amount);\n', '\n', '            if (excess > 0) {\n', '                ManualTokenMintRequiresRefund(receiver, excess);\n', '            }\n', '        }\n', '    }\n', '\n', '    // low level token purchase function\n', '    function buyTokens(address sender, address beneficiary) public payable {\n', '        require(beneficiary != address(0));\n', '        require(sender != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiReceived = msg.value;\n', '        uint256 nowTime = getNow();\n', '        // this loop moves phases and insures correct stage according to date\n', '        while (currentPhase < phases.length && phases[currentPhase].till < nowTime) {\n', '            currentPhase = currentPhase.add(1);\n', '        }\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = calculateTokens(weiReceived);\n', '\n', '        if (tokens < MIN_TOKEN_AMOUNT) revert();\n', '\n', '        uint256 excess = appendContribution(beneficiary, tokens);\n', '        uint256 refund = (excess > 0 ? excess.mul(weiReceived).div(tokens) : 0);\n', '\n', '        weiReceived = weiReceived.sub(refund);\n', '        weiRaised = weiRaised.add(weiReceived);\n', '\n', '        if (refund > 0) {\n', '            sender.transfer(refund);\n', '        }\n', '\n', '        TokenPurchase(sender, beneficiary, weiReceived, tokens.sub(excess));\n', '\n', '        if (goalReached()) {\n', '            WALLET.transfer(weiReceived);\n', '        } else {\n', '            vault.deposit.value(weiReceived)(sender);\n', '        }\n', '    }\n', '\n', '    // if crowdsale is unsuccessful, investors can claim refunds here\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', "    * work. Calls the contract's finalization function.\n", '    */\n', '    function finalize() public onlyOwner {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        if (goalReached()) {\n', '            vault.close();\n', '\n', '            uint256 totalSupply = token.totalSupply();\n', '\n', '            uint256 teamTokens = uint256(TEAM_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT);\n', '            token.mint(TEAM_WALLET, teamTokens);\n', '            uint256 rdTokens = uint256(RESEARCH_AND_DEVELOPMENT_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT);\n', '            token.mint(RESEARCH_AND_DEVELOPMENT_WALLET, rdTokens);\n', '            uint256 bountyTokens = uint256(BOUNTY_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT);\n', '            token.mint(BOUNTY_WALLET, bountyTokens);\n', '\n', '            token.finishMinting();\n', '            token.transferOwnership(token);\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '\n', '        Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return getNow() > icoEndTime || token.totalSupply() == ICO_TOKENS;\n', '    }\n', '\n', '    function goalReached() public view returns (bool) {\n', '        return token.totalSupply() >= SOFT_CAP;\n', '    }\n', '\n', '    function setTokenMinter(address _tokenMinter) public onlyOwner {\n', '        require(_tokenMinter != address(0));\n', '        tokenMinter = _tokenMinter;\n', '    }\n', '\n', '    function setTokenDeskProxy(address _tokekDeskProxy) public onlyOwner {\n', '        require(_tokekDeskProxy != address(0));\n', '        tokenDeskProxy = _tokekDeskProxy;\n', '    }\n', '\n', '    function setIcoEndTime(uint256 _endTime) public onlyOwner {\n', '        require(_endTime > icoEndTime);\n', '        icoEndTime = _endTime;\n', '    }\n', '\n', '    function getNow() internal view returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    function calculateTokens(uint256 _weiAmount) internal view returns (uint256) {\n', '        uint256 tokens = _weiAmount.mul(RATE).mul(100).div(uint256(100).sub(phases[currentPhase].discount));\n', '\n', '        uint256 bonus = 0;\n', '        if (currentPhase > 0) {\n', '            bonus = bonus.add(tokens >= LARGE_PURCHASE ? LARGE_PURCHASE_BONUS : 0);\n', '            bonus = bonus.add(msg.sender == tokenDeskProxy ? TOKEN_DESK_BONUS : 0);\n', '        }\n', '        return tokens.add(tokens.mul(bonus).div(100));\n', '    }\n', '\n', '    function appendContribution(address _beneficiary, uint256 _tokens) internal returns (uint256) {\n', '        uint256 excess = 0;\n', '        uint256 tokensToMint = 0;\n', '        uint256 totalSupply = token.totalSupply();\n', '\n', '        if (totalSupply.add(_tokens) < ICO_TOKENS) {\n', '            tokensToMint = _tokens;\n', '        } else {\n', '            tokensToMint = ICO_TOKENS.sub(totalSupply);\n', '            excess = _tokens.sub(tokensToMint);\n', '        }\n', '        if (tokensToMint > 0) {\n', '            token.mint(_beneficiary, tokensToMint);\n', '        }\n', '        return excess;\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        bool withinPeriod = getNow() >= START_TIME && getNow() <= icoEndTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool canMint = token.totalSupply() < ICO_TOKENS;\n', '        bool validPhase = (currentPhase < phases.length);\n', '        return withinPeriod && nonZeroPurchase && canMint && validPhase;\n', '    }\n', '}']