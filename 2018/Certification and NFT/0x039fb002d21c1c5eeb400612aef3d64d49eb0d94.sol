['pragma solidity ^0.4.21;\n', '\n', '// File: contracts/Oracle/DSAuth.sol\n', '\n', 'contract DSAuthority {\n', '    function canCall(\n', '        address src, address dst, bytes4 sig\n', '    ) public view returns (bool);\n', '}\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority (address indexed authority);\n', '    event LogSetOwner     (address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority  public  authority;\n', '    address      public  owner;\n', '\n', '    function DSAuth() public {\n', '        owner = msg.sender;\n', '        LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_)\n', '        public\n', '        auth\n', '    {\n', '        owner = owner_;\n', '        LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_)\n', '        public\n', '        auth\n', '    {\n', '        authority = authority_;\n', '        LogSetAuthority(authority);\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, this, sig);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Oracle/DSMath.sol\n', '\n', 'contract DSMath {\n', '    \n', '    /*\n', '    standard uint256 functions\n', '     */\n', '\n', '    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    uint128 functions (h is for half)\n', '     */\n', '\n', '\n', '    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x + y) >= x);\n', '    }\n', '\n', '    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x - y) <= x);\n', '    }\n', '\n', '    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        assert((z = x * y) >= x);\n', '    }\n', '\n', '    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = x / y;\n', '    }\n', '\n', '    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '\n', '    /*\n', '    int256 functions\n', '     */\n', '\n', '    function imin(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int256 x, int256 y) constant internal returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    /*\n', '    WAD math\n', '     */\n', '\n', '    uint128 constant WAD = 10 ** 18;\n', '\n', '    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + WAD / 2) / WAD);\n', '    }\n', '\n', '    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * WAD + y / 2) / y);\n', '    }\n', '\n', '    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    /*\n', '    RAY math\n', '     */\n', '\n', '    uint128 constant RAY = 10 ** 27;\n', '\n', '    function radd(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hadd(x, y);\n', '    }\n', '\n', '    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hsub(x, y);\n', '    }\n', '\n', '    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * y + RAY / 2) / RAY);\n', '    }\n', '\n', '    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {\n', '        z = cast((uint256(x) * RAY + y / 2) / y);\n', '    }\n', '\n', '    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {\n', '        // This famous algorithm is called "exponentiation by squaring"\n', '        // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '        //\n', '        // It&#39;s O(log n), instead of O(n) for naive repeated multiplication.\n', '        //\n', '        // These facts are why it works:\n', '        //\n', '        //  If n is even, then x^n = (x^2)^(n/2).\n', '        //  If n is odd,  then x^n = x * x^(n-1),\n', '        //   and applying the equation for even x gives\n', '        //    x^n = x * (x^2)^((n-1) / 2).\n', '        //\n', '        //  Also, EVM division is flooring and\n', '        //    floor[(n-1) / 2] = floor[n / 2].\n', '\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '\n', '    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmin(x, y);\n', '    }\n', '    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {\n', '        return hmax(x, y);\n', '    }\n', '\n', '    function cast(uint256 x) constant internal returns (uint128 z) {\n', '        assert((z = uint128(x)) == x);\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Oracle/DSNote.sol\n', '\n', 'contract DSNote {\n', '    event LogNote(\n', '        bytes4   indexed  sig,\n', '        address  indexed  guy,\n', '        bytes32  indexed  foo,\n', '        bytes32  indexed  bar,\n', '        uint              wad,\n', '        bytes             fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/Oracle/DSThing.sol\n', '\n', 'contract DSThing is DSAuth, DSNote, DSMath {\n', '}\n', '\n', '// File: contracts/Oracle/DSValue.sol\n', '\n', 'contract DSValue is DSThing {\n', '    bool    has;\n', '    bytes32 val;\n', '    function peek() constant returns (bytes32, bool) {\n', '        return (val,has);\n', '    }\n', '    function read() constant returns (bytes32) {\n', '        var (wut, has) = peek();\n', '        assert(has);\n', '        return wut;\n', '    }\n', '    function poke(bytes32 wut) note auth {\n', '        val = wut;\n', '        has = true;\n', '    }\n', '    function void() note auth { // unset the value\n', '        has = false;\n', '    }\n', '}\n', '\n', '// File: contracts/Oracle/Medianizer.sol\n', '\n', 'contract Medianizer is DSValue {\n', '    mapping (bytes12 => address) public values;\n', '    mapping (address => bytes12) public indexes;\n', '    bytes12 public next = 0x1;\n', '\n', '    uint96 public min = 0x1;\n', '\n', '    function set(address wat) auth {\n', '        bytes12 nextId = bytes12(uint96(next) + 1);\n', '        assert(nextId != 0x0);\n', '        set(next, wat);\n', '        next = nextId;\n', '    }\n', '\n', '    function set(bytes12 pos, address wat) note auth {\n', '        if (pos == 0x0) throw;\n', '\n', '        if (wat != 0 && indexes[wat] != 0) throw;\n', '\n', '        indexes[values[pos]] = 0; // Making sure to remove a possible existing address in that position\n', '\n', '        if (wat != 0) {\n', '            indexes[wat] = pos;\n', '        }\n', '\n', '        values[pos] = wat;\n', '    }\n', '\n', '    function setMin(uint96 min_) note auth {\n', '        if (min_ == 0x0) throw;\n', '        min = min_;\n', '    }\n', '\n', '    function setNext(bytes12 next_) note auth {\n', '        if (next_ == 0x0) throw;\n', '        next = next_;\n', '    }\n', '\n', '    function unset(bytes12 pos) {\n', '        set(pos, 0);\n', '    }\n', '\n', '    function unset(address wat) {\n', '        set(indexes[wat], 0);\n', '    }\n', '\n', '    function poke() {\n', '        poke(0);\n', '    }\n', '\n', '    function poke(bytes32) note {\n', '        (val, has) = compute();\n', '    }\n', '\n', '    function compute() constant returns (bytes32, bool) {\n', '        bytes32[] memory wuts = new bytes32[](uint96(next) - 1);\n', '        uint96 ctr = 0;\n', '        for (uint96 i = 1; i < uint96(next); i++) {\n', '            if (values[bytes12(i)] != 0) {\n', '                var (wut, wuz) = DSValue(values[bytes12(i)]).peek();\n', '                if (wuz) {\n', '                    if (ctr == 0 || wut >= wuts[ctr - 1]) {\n', '                        wuts[ctr] = wut;\n', '                    } else {\n', '                        uint96 j = 0;\n', '                        while (wut >= wuts[j]) {\n', '                            j++;\n', '                        }\n', '                        for (uint96 k = ctr; k > j; k--) {\n', '                            wuts[k] = wuts[k - 1];\n', '                        }\n', '                        wuts[j] = wut;\n', '                    }\n', '                    ctr++;\n', '                }\n', '            }\n', '        }\n', '\n', '        if (ctr < min) return (val, false);\n', '\n', '        bytes32 value;\n', '        if (ctr % 2 == 0) {\n', '            uint128 val1 = uint128(wuts[(ctr / 2) - 1]);\n', '            uint128 val2 = uint128(wuts[ctr / 2]);\n', '            value = bytes32(wdiv(hadd(val1, val2), 2 ether));\n', '        } else {\n', '            value = wuts[(ctr - 1) / 2];\n', '        }\n', '\n', '        return (value, true);\n', '    }\n', '}\n', '\n', '// File: contracts/Oracle/PriceFeed.sol\n', '\n', '/// price-feed.sol\n', '\n', '// Copyright (C) 2017  DappHub, LLC\n', '\n', '// Licensed under the Apache License, Version 2.0 (the "License").\n', '// You may not use this file except in compliance with the License.\n', '\n', '// Unless required by applicable law or agreed to in writing, software\n', '// distributed under the License is distributed on an "AS IS" BASIS,\n', '// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND (express or implied).\n', '\n', '\n', '\n', 'contract PriceFeed is DSThing {\n', '\n', '    uint128 val;\n', '    uint32 public zzz;\n', '\n', '    function peek() public view\n', '        returns (bytes32, bool)\n', '    {\n', '        return (bytes32(val), now < zzz);\n', '    }\n', '\n', '    function read() public view\n', '        returns (bytes32)\n', '    {\n', '        assert(now < zzz);\n', '        return bytes32(val);\n', '    }\n', '\n', '    function post(uint128 val_, uint32 zzz_, address med_) public note auth\n', '    {\n', '        val = val_;\n', '        zzz = zzz_;\n', '        bool ret = med_.call(bytes4(keccak256("poke()")));\n', '        ret;\n', '    }\n', '\n', '    function void() public note auth\n', '    {\n', '        zzz = 0;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Oracle/PriceOracleInterface.sol\n', '\n', '/*\n', 'This contract is the interface between the MakerDAO priceFeed and our DX platform.\n', '*/\n', '\n', '\n', '\n', 'contract PriceOracleInterface {\n', '\n', '    address public priceFeedSource;\n', '    address public owner;\n', '    bool public emergencyMode;\n', '\n', '    event NonValidPriceFeed(address priceFeedSource);\n', '\n', '    // Modifiers\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /// @dev constructor of the contract\n', '    /// @param _priceFeedSource address of price Feed Source -> should be maker feeds Medianizer contract\n', '    function PriceOracleInterface(\n', '        address _owner,\n', '        address _priceFeedSource\n', '    )\n', '        public\n', '    {\n', '        owner = _owner;\n', '        priceFeedSource = _priceFeedSource;\n', '    }\n', '    /// @dev gives the owner the possibility to put the Interface into an emergencyMode, which will \n', '    /// output always a price of 600 USD. This gives everyone time to set up a new pricefeed.\n', '    function raiseEmergency(bool _emergencyMode)\n', '        public\n', '        onlyOwner()\n', '    {\n', '        emergencyMode = _emergencyMode;\n', '    }\n', '\n', '    /// @dev updates the priceFeedSource\n', '    /// @param _owner address of owner\n', '    function updateCurator(\n', '        address _owner\n', '    )\n', '        public\n', '        onlyOwner()\n', '    {\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @dev returns the USDETH price, ie gets the USD price from Maker feed with 18 digits, but last 18 digits are cut off\n', '    function getUSDETHPrice() \n', '        public\n', '        returns (uint256)\n', '    {\n', '        // if the contract is in the emergencyMode, because there is an issue with the oracle, we will simply return a price of 600 USD\n', '        if(emergencyMode){\n', '            return 600;\n', '        }\n', '\n', '        bytes32 price;\n', '        bool valid=true;\n', '        (price, valid) = Medianizer(priceFeedSource).peek();\n', '        if (!valid) {\n', '            NonValidPriceFeed(priceFeedSource);\n', '        }\n', '        // ensuring that there is no underflow or overflow possible,\n', '        // even if the price is compromised\n', '        uint priceUint = uint256(price)/(1 ether);\n', '        if (priceUint == 0) return 1;\n', '        if (priceUint > 1000000) return 1000000; \n', '        return priceUint;\n', '    }  \n', '}\n', '\n', '// File: @gnosis.pm/util-contracts/contracts/Math.sol\n', '\n', '/// @title Math library - Allows calculation of logarithmic and exponential functions\n', '/// @author Alan Lu - <alan.lu@gnosis.pm>\n', '/// @author Stefan George - <stefan@gnosis.pm>\n', 'library Math {\n', '\n', '    /*\n', '     *  Constants\n', '     */\n', '    // This is equal to 1 in our calculations\n', '    uint public constant ONE =  0x10000000000000000;\n', '    uint public constant LN2 = 0xb17217f7d1cf79ac;\n', '    uint public constant LOG2_E = 0x171547652b82fe177;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Returns natural exponential function value of given x\n', '    /// @param x x\n', '    /// @return e**x\n', '    function exp(int x)\n', '        public\n', '        pure\n', '        returns (uint)\n', '    {\n', '        // revert if x is > MAX_POWER, where\n', '        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))\n', '        require(x <= 2454971259878909886679);\n', '        // return 0 if exp(x) is tiny, using\n', '        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))\n', '        if (x < -818323753292969962227)\n', '            return 0;\n', '        // Transform so that e^x -> 2^x\n', '        x = x * int(ONE) / int(LN2);\n', '        // 2^x = 2^whole(x) * 2^frac(x)\n', '        //       ^^^^^^^^^^ is a bit shift\n', '        // so Taylor expand on z = frac(x)\n', '        int shift;\n', '        uint z;\n', '        if (x >= 0) {\n', '            shift = x / int(ONE);\n', '            z = uint(x % int(ONE));\n', '        }\n', '        else {\n', '            shift = x / int(ONE) - 1;\n', '            z = ONE - uint(-x % int(ONE));\n', '        }\n', '        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...\n', '        //\n', '        // Can generate the z coefficients using mpmath and the following lines\n', '        // >>> from mpmath import mp\n', '        // >>> mp.dps = 100\n', '        // >>> ONE =  0x10000000000000000\n', '        // >>> print(&#39;\\n&#39;.join(hex(int(mp.log(2)**i / mp.factorial(i) * ONE)) for i in range(1, 7)))\n', '        // 0xb17217f7d1cf79ab\n', '        // 0x3d7f7bff058b1d50\n', '        // 0xe35846b82505fc5\n', '        // 0x276556df749cee5\n', '        // 0x5761ff9e299cc4\n', '        // 0xa184897c363c3\n', '        uint zpow = z;\n', '        uint result = ONE;\n', '        result += 0xb17217f7d1cf79ab * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x3d7f7bff058b1d50 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xe35846b82505fc5 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x276556df749cee5 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x5761ff9e299cc4 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xa184897c363c3 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xffe5fe2c4586 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x162c0223a5c8 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1b5253d395e * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1e4cf5158b * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1e8cac735 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1c3bd650 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x1816193 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x131496 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0xe1b7 * zpow / ONE;\n', '        zpow = zpow * z / ONE;\n', '        result += 0x9c7 * zpow / ONE;\n', '        if (shift >= 0) {\n', '            if (result >> (256-shift) > 0)\n', '                return (2**256-1);\n', '            return result << shift;\n', '        }\n', '        else\n', '            return result >> (-shift);\n', '    }\n', '\n', '    /// @dev Returns natural logarithm value of given x\n', '    /// @param x x\n', '    /// @return ln(x)\n', '    function ln(uint x)\n', '        public\n', '        pure\n', '        returns (int)\n', '    {\n', '        require(x > 0);\n', '        // binary search for floor(log2(x))\n', '        int ilog2 = floorLog2(x);\n', '        int z;\n', '        if (ilog2 < 0)\n', '            z = int(x << uint(-ilog2));\n', '        else\n', '            z = int(x >> uint(ilog2));\n', '        // z = x * 2^-⌊log₂x⌋\n', '        // so 1 <= z < 2\n', '        // and ln z = ln x - ⌊log₂x⌋/log₂e\n', '        // so just compute ln z using artanh series\n', '        // and calculate ln x from that\n', '        int term = (z - int(ONE)) * int(ONE) / (z + int(ONE));\n', '        int halflnz = term;\n', '        int termpow = term * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 3;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 5;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 7;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 9;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 11;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 13;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 15;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 17;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 19;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 21;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 23;\n', '        termpow = termpow * term / int(ONE) * term / int(ONE);\n', '        halflnz += termpow / 25;\n', '        return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;\n', '    }\n', '\n', '    /// @dev Returns base 2 logarithm value of given x\n', '    /// @param x x\n', '    /// @return logarithmic value\n', '    function floorLog2(uint x)\n', '        public\n', '        pure\n', '        returns (int lo)\n', '    {\n', '        lo = -64;\n', '        int hi = 193;\n', '        // I use a shift here instead of / 2 because it floors instead of rounding towards 0\n', '        int mid = (hi + lo) >> 1;\n', '        while((lo + 1) < hi) {\n', '            if (mid < 0 && x << uint(-mid) < ONE || mid >= 0 && x >> uint(mid) < ONE)\n', '                hi = mid;\n', '            else\n', '                lo = mid;\n', '            mid = (hi + lo) >> 1;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns maximum of an array\n', '    /// @param nums Numbers to look through\n', '    /// @return Maximum number\n', '    function max(int[] nums)\n', '        public\n', '        pure\n', '        returns (int maxNum)\n', '    {\n', '        require(nums.length > 0);\n', '        maxNum = -2**255;\n', '        for (uint i = 0; i < nums.length; i++)\n', '            if (nums[i] > maxNum)\n', '                maxNum = nums[i];\n', '    }\n', '\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(uint a, uint b)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return a + b >= a;\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(uint a, uint b)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return a >= b;\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(uint a, uint b)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return b == 0 || a * b / b == a;\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(uint a, uint b)\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(uint a, uint b)\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(uint a, uint b)\n', '        internal\n', '        pure\n', '        returns (uint)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(int a, int b)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return (b >= 0 && a + b >= a) || (b < 0 && a + b < a);\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(int a, int b)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return (b >= 0 && a - b <= a) || (b < 0 && a - b > a);\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(int a, int b)\n', '        internal\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return (b == 0) || (a * b / b == a);\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(int a, int b)\n', '        internal\n', '        pure\n', '        returns (int)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(int a, int b)\n', '        internal\n', '        pure\n', '        returns (int)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(int a, int b)\n', '        internal\n', '        pure\n', '        returns (int)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '}\n', '\n', '// File: @gnosis.pm/util-contracts/contracts/Proxy.sol\n', '\n', '/// @title Proxied - indicates that a contract will be proxied. Also defines storage requirements for Proxy.\n', '/// @author Alan Lu - <alan@gnosis.pm>\n', 'contract Proxied {\n', '    address public masterCopy;\n', '}\n', '\n', '/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n', '/// @author Stefan George - <stefan@gnosis.pm>\n', 'contract Proxy is Proxied {\n', '    /// @dev Constructor function sets address of master copy contract.\n', '    /// @param _masterCopy Master copy address.\n', '    function Proxy(address _masterCopy)\n', '        public\n', '    {\n', '        require(_masterCopy != 0);\n', '        masterCopy = _masterCopy;\n', '    }\n', '\n', '    /// @dev Fallback function forwards all transactions and returns all received return data.\n', '    function ()\n', '        external\n', '        payable\n', '    {\n', '        address _masterCopy = masterCopy;\n', '        assembly {\n', '            calldatacopy(0, 0, calldatasize())\n', '            let success := delegatecall(not(0), _masterCopy, 0, calldatasize(), 0, 0)\n', '            returndatacopy(0, 0, returndatasize())\n', '            switch success\n', '            case 0 { revert(0, returndatasize()) }\n', '            default { return(0, returndatasize()) }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @gnosis.pm/util-contracts/contracts/Token.sol\n', '\n', '/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/// @title Abstract token contract - Functions to be implemented by token contracts\n', 'contract Token {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    function transfer(address to, uint value) public returns (bool);\n', '    function transferFrom(address from, address to, uint value) public returns (bool);\n', '    function approve(address spender, uint value) public returns (bool);\n', '    function balanceOf(address owner) public view returns (uint);\n', '    function allowance(address owner, address spender) public view returns (uint);\n', '    function totalSupply() public view returns (uint);\n', '}\n', '\n', '// File: @gnosis.pm/util-contracts/contracts/StandardToken.sol\n', '\n', 'contract StandardTokenData {\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowances;\n', '    uint totalTokens;\n', '}\n', '\n', '/// @title Standard token contract with overflow protection\n', 'contract StandardToken is Token, StandardTokenData {\n', '    using Math for *;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success\n', '    /// @param to Address of token receiver\n', '    /// @param value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '    function transfer(address to, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (   !balances[msg.sender].safeToSub(value)\n', '            || !balances[to].safeToAdd(value))\n', '            return false;\n', '        balances[msg.sender] -= value;\n', '        balances[to] += value;\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success\n', '    /// @param from Address from where tokens are withdrawn\n', '    /// @param to Address to where tokens are sent\n', '    /// @param value Number of tokens to transfer\n', '    /// @return Was transfer successful?\n', '    function transferFrom(address from, address to, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        if (   !balances[from].safeToSub(value)\n', '            || !allowances[from][msg.sender].safeToSub(value)\n', '            || !balances[to].safeToAdd(value))\n', '            return false;\n', '        balances[from] -= value;\n', '        allowances[from][msg.sender] -= value;\n', '        balances[to] += value;\n', '        emit Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Sets approved amount of tokens for spender. Returns success\n', '    /// @param spender Address of allowed account\n', '    /// @param value Number of approved tokens\n', '    /// @return Was approval successful?\n', '    function approve(address spender, uint value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        allowances[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Returns number of allowed tokens for given address\n', '    /// @param owner Address of token owner\n', '    /// @param spender Address of token spender\n', '    /// @return Remaining allowance for spender\n', '    function allowance(address owner, address spender)\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by given address\n', '    /// @param owner Address of token owner\n', '    /// @return Balance of owner\n', '    function balanceOf(address owner)\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        return balances[owner];\n', '    }\n', '\n', '    /// @dev Returns total supply of tokens\n', '    /// @return Total supply\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint)\n', '    {\n', '        return totalTokens;\n', '    }\n', '}\n', '\n', '// File: contracts/TokenFRT.sol\n', '\n', '/// @title Standard token contract with overflow protection\n', 'contract TokenFRT is StandardToken {\n', '    string public constant symbol = "MGN";\n', '    string public constant name = "Magnolia Token";\n', '    uint8 public constant decimals = 18;\n', '\n', '    struct unlockedToken {\n', '        uint amountUnlocked;\n', '        uint withdrawalTime;\n', '    }\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '\n', '    address public owner;\n', '    address public minter;\n', '\n', '    // user => unlockedToken\n', '    mapping (address => unlockedToken) public unlockedTokens;\n', '\n', '    // user => amount\n', '    mapping (address => uint) public lockedTokenBalances;\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '\n', '    function TokenFRT(\n', '        address _owner\n', '    )\n', '        public\n', '    {\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '    }\n', '\n', '    // @dev allows to set the minter of Magnolia tokens once.\n', '    // @param   _minter the minter of the Magnolia tokens, should be the DX-proxy\n', '    function updateMinter(\n', '        address _minter\n', '    )\n', '        public\n', '    {\n', '        require(msg.sender == owner);\n', '        require(_minter != address(0));\n', '\n', '        minter = _minter;\n', '    }\n', '\n', '    // @dev the intention is to set the owner as the DX-proxy, once it is deployed\n', '    // Then only an update of the DX-proxy contract after a 30 days delay could change the minter again.\n', '    function updateOwner(   \n', '        address _owner\n', '    )\n', '        public\n', '    {\n', '        require(msg.sender == owner);\n', '        require(_owner != address(0));\n', '        owner = _owner;\n', '    }\n', '\n', '    function mintTokens(\n', '        address user,\n', '        uint amount\n', '    )\n', '        public\n', '    {\n', '        require(msg.sender == minter);\n', '\n', '        lockedTokenBalances[user] = add(lockedTokenBalances[user], amount);\n', '        totalTokens = add(totalTokens, amount);\n', '    }\n', '\n', '    /// @dev Lock Token\n', '    function lockTokens(\n', '        uint amount\n', '    )\n', '        public\n', '        returns (uint totalAmountLocked)\n', '    {\n', '        // Adjust amount by balance\n', '        amount = min(amount, balances[msg.sender]);\n', '        \n', '        // Update state variables\n', '        balances[msg.sender] = sub(balances[msg.sender], amount);\n', '        lockedTokenBalances[msg.sender] = add(lockedTokenBalances[msg.sender], amount);\n', '\n', '        // Get return variable\n', '        totalAmountLocked = lockedTokenBalances[msg.sender];\n', '    }\n', '\n', '    function unlockTokens(\n', '        uint amount\n', '    )\n', '        public\n', '        returns (uint totalAmountUnlocked, uint withdrawalTime)\n', '    {\n', '        // Adjust amount by locked balances\n', '        amount = min(amount, lockedTokenBalances[msg.sender]);\n', '\n', '        if (amount > 0) {\n', '            // Update state variables\n', '            lockedTokenBalances[msg.sender] = sub(lockedTokenBalances[msg.sender], amount);\n', '            unlockedTokens[msg.sender].amountUnlocked =  add(unlockedTokens[msg.sender].amountUnlocked, amount);\n', '            unlockedTokens[msg.sender].withdrawalTime = now + 24 hours;\n', '        }\n', '\n', '        // Get return variables\n', '        totalAmountUnlocked = unlockedTokens[msg.sender].amountUnlocked;\n', '        withdrawalTime = unlockedTokens[msg.sender].withdrawalTime;\n', '    }\n', '\n', '    function withdrawUnlockedTokens()\n', '        public\n', '    {\n', '        require(unlockedTokens[msg.sender].withdrawalTime < now);\n', '        balances[msg.sender] = add(balances[msg.sender], unlockedTokens[msg.sender].amountUnlocked);\n', '        unlockedTokens[msg.sender].amountUnlocked = 0;\n', '    }\n', '\n', '    function min(uint a, uint b) \n', '        public\n', '        pure\n', '        returns (uint)\n', '    {\n', '        if (a < b) {\n', '            return a;\n', '        } else {\n', '            return b;\n', '        }\n', '    }\n', '        /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a + b >= a;\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (bool)\n', '    {\n', '        return a >= b;\n', '    }\n', '\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(uint a, uint b)\n', '        public\n', '        constant\n', '        returns (uint)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '}\n', '\n', '// File: @gnosis.pm/owl-token/contracts/TokenOWL.sol\n', '\n', 'contract TokenOWL is Proxied, StandardToken {\n', '    using Math for *;\n', '\n', '    string public constant name = "OWL Token";\n', '    string public constant symbol = "OWL";\n', '    uint8 public constant decimals = 18;\n', '\n', '    struct masterCopyCountdownType {\n', '        address masterCopy;\n', '        uint timeWhenAvailable;\n', '    }\n', '\n', '    masterCopyCountdownType masterCopyCountdown;\n', '\n', '    address public creator;\n', '    address public minter;\n', '\n', '    event Minted(address indexed to, uint256 amount);\n', '    event Burnt(address indexed from, address indexed user, uint256 amount);\n', '\n', '    modifier onlyCreator() {\n', '        // R1\n', '        require(msg.sender == creator);\n', '        _;\n', '    }\n', '    /// @dev trickers the update process via the proxyMaster for a new address _masterCopy \n', '    /// updating is only possible after 30 days\n', '    function startMasterCopyCountdown (\n', '        address _masterCopy\n', '     )\n', '        public\n', '        onlyCreator()\n', '    {\n', '        require(address(_masterCopy) != 0);\n', '\n', '        // Update masterCopyCountdown\n', '        masterCopyCountdown.masterCopy = _masterCopy;\n', '        masterCopyCountdown.timeWhenAvailable = now + 30 days;\n', '    }\n', '\n', '     /// @dev executes the update process via the proxyMaster for a new address _masterCopy\n', '    function updateMasterCopy()\n', '        public\n', '        onlyCreator()\n', '    {   \n', '        require(address(masterCopyCountdown.masterCopy) != 0);\n', '        require(now >= masterCopyCountdown.timeWhenAvailable);\n', '\n', '        // Update masterCopy\n', '        masterCopy = masterCopyCountdown.masterCopy;\n', '    }\n', '\n', '    function getMasterCopy()\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return masterCopy;\n', '    }\n', '\n', '    /// @dev Set minter. Only the creator of this contract can call this.\n', '    /// @param newMinter The new address authorized to mint this token\n', '    function setMinter(address newMinter)\n', '        public\n', '        onlyCreator()\n', '    {\n', '        minter = newMinter;\n', '    }\n', '\n', '\n', '    /// @dev change owner/creator of the contract. Only the creator/owner of this contract can call this.\n', '    /// @param newOwner The new address, which should become the owner\n', '    function setNewOwner(address newOwner)\n', '        public\n', '        onlyCreator()\n', '    {\n', '        creator = newOwner;\n', '    }\n', '\n', '    /// @dev Mints OWL.\n', '    /// @param to Address to which the minted token will be given\n', '    /// @param amount Amount of OWL to be minted\n', '    function mintOWL(address to, uint amount)\n', '        public\n', '    {\n', '        require(minter != 0 && msg.sender == minter);\n', '        balances[to] = balances[to].add(amount);\n', '        totalTokens = totalTokens.add(amount);\n', '        emit Minted(to, amount);\n', '    }\n', '\n', '    /// @dev Burns OWL.\n', '    /// @param user Address of OWL owner\n', '    /// @param amount Amount of OWL to be burnt\n', '    function burnOWL(address user, uint amount)\n', '        public\n', '    {\n', '        allowances[user][msg.sender] = allowances[user][msg.sender].sub(amount);\n', '        balances[user] = balances[user].sub(amount);\n', '        totalTokens = totalTokens.sub(amount);\n', '        emit Burnt(msg.sender, user, amount);\n', '    }\n', '}\n', '\n', '// File: contracts/DutchExchange.sol\n', '\n', '/// @title Dutch Exchange - exchange token pairs with the clever mechanism of the dutch auction\n', '/// @author Alex Herrmann - <alex@gnosis.pm>\n', '/// @author Dominik Teiml - <dominik@gnosis.pm>\n', '\n', 'contract DutchExchange is Proxied {\n', '\n', '    // The price is a rational number, so we need a concept of a fraction\n', '    struct fraction {\n', '        uint num;\n', '        uint den;\n', '    }\n', '\n', '    uint constant WAITING_PERIOD_NEW_TOKEN_PAIR = 6 hours;\n', '    uint constant WAITING_PERIOD_NEW_AUCTION = 10 minutes;\n', '    uint constant WAITING_PERIOD_CHANGE_MASTERCOPY_OR_ORACLE = 30 days;\n', '    uint constant AUCTION_START_WAITING_FOR_FUNDING = 1;\n', '\n', '    address public newMasterCopy;\n', '    // Time when new masterCopy is updatabale\n', '    uint public masterCopyCountdown;\n', '\n', '    // > Storage\n', '    // auctioneer has the power to manage some variables\n', '    address public auctioneer;\n', '    // Ether ERC-20 token\n', '    address public ethToken;\n', '    // Price Oracle interface \n', '    PriceOracleInterface public ethUSDOracle;\n', '    // Price Oracle interface proposals during update process\n', '    PriceOracleInterface public newProposalEthUSDOracle;\n', '    uint public oracleInterfaceCountdown;\n', '    // Minimum required sell funding for adding a new token pair, in USD\n', '    uint public thresholdNewTokenPair;\n', '    // Minimum required sell funding for starting antoher auction, in USD\n', '    uint public thresholdNewAuction;\n', '    // Fee reduction token (magnolia, ERC-20 token)\n', '    TokenFRT public frtToken;\n', '    // Token for paying fees\n', '    TokenOWL public owlToken;\n', '\n', '    // mapping that stores the tokens, which are approved\n', '    // Token => approved\n', '    // Only tokens approved by auctioneer generate frtToken tokens\n', '    mapping (address => bool) public approvedTokens;\n', '\n', '    // For the following two mappings, there is one mapping for each token pair\n', '    // The order which the tokens should be called is smaller, larger\n', '    // These variables should never be called directly! They have getters below\n', '    // Token => Token => index\n', '    mapping (address => mapping (address => uint)) public latestAuctionIndices;\n', '    // Token => Token => time\n', '    mapping (address => mapping (address => uint)) public auctionStarts;\n', '\n', '    // Token => Token => auctionIndex => price\n', '    mapping (address => mapping (address => mapping (uint => fraction))) public closingPrices;\n', '\n', '    // Token => Token => amount\n', '    mapping (address => mapping (address => uint)) public sellVolumesCurrent;\n', '    // Token => Token => amount\n', '    mapping (address => mapping (address => uint)) public sellVolumesNext;\n', '    // Token => Token => amount\n', '    mapping (address => mapping (address => uint)) public buyVolumes;\n', '\n', '    // Token => user => amount\n', '    // balances stores a user&#39;s balance in the DutchX\n', '    mapping (address => mapping (address => uint)) public balances;\n', '\n', '    // Token => Token => auctionIndex => amount\n', '    mapping (address => mapping (address => mapping (uint => uint))) public extraTokens;\n', '\n', '    // Token => Token =>  auctionIndex => user => amount\n', '    mapping (address => mapping (address => mapping (uint => mapping (address => uint)))) public sellerBalances;\n', '    mapping (address => mapping (address => mapping (uint => mapping (address => uint)))) public buyerBalances;\n', '    mapping (address => mapping (address => mapping (uint => mapping (address => uint)))) public claimedAmounts;\n', '\n', '    // > Modifiers\n', '    modifier onlyAuctioneer() {\n', '        // Only allows auctioneer to proceed\n', '        // R1\n', '        require(msg.sender == auctioneer);\n', '        _;\n', '    }\n', '\n', '    /// @dev Constructor-Function creates exchange\n', '    /// @param _frtToken - address of frtToken ERC-20 token\n', '    /// @param _owlToken - address of owlToken ERC-20 token\n', '    /// @param _auctioneer - auctioneer for managing interfaces\n', '    /// @param _ethToken - address of ETH ERC-20 token\n', '    /// @param _ethUSDOracle - address of the oracle contract for fetching feeds\n', '    /// @param _thresholdNewTokenPair - Minimum required sell funding for adding a new token pair, in USD\n', '    function setupDutchExchange(\n', '        TokenFRT _frtToken,\n', '        TokenOWL _owlToken,\n', '        address _auctioneer, \n', '        address _ethToken,\n', '        PriceOracleInterface _ethUSDOracle,\n', '        uint _thresholdNewTokenPair,\n', '        uint _thresholdNewAuction\n', '    )\n', '        public\n', '    {\n', '        // Make sure contract hasn&#39;t been initialised\n', '        require(ethToken == 0);\n', '\n', '        // Validates inputs\n', '        require(address(_owlToken) != address(0));\n', '        require(address(_frtToken) != address(0));\n', '        require(_auctioneer != 0);\n', '        require(_ethToken != 0);\n', '        require(address(_ethUSDOracle) != address(0));\n', '\n', '        frtToken = _frtToken;\n', '        owlToken = _owlToken;\n', '        auctioneer = _auctioneer;\n', '        ethToken = _ethToken;\n', '        ethUSDOracle = _ethUSDOracle;\n', '        thresholdNewTokenPair = _thresholdNewTokenPair;\n', '        thresholdNewAuction = _thresholdNewAuction;\n', '    }\n', '\n', '    function updateAuctioneer(\n', '        address _auctioneer\n', '    )\n', '        public\n', '        onlyAuctioneer\n', '    {\n', '        require(_auctioneer != address(0));\n', '        auctioneer = _auctioneer;\n', '    }\n', '\n', '    function initiateEthUsdOracleUpdate(\n', '        PriceOracleInterface _ethUSDOracle\n', '    )\n', '        public\n', '        onlyAuctioneer\n', '    {         \n', '        require(address(_ethUSDOracle) != address(0));\n', '        newProposalEthUSDOracle = _ethUSDOracle;\n', '        oracleInterfaceCountdown = add(now, WAITING_PERIOD_CHANGE_MASTERCOPY_OR_ORACLE);\n', '        NewOracleProposal(_ethUSDOracle);\n', '    }\n', '\n', '    function updateEthUSDOracle()\n', '        public\n', '        onlyAuctioneer\n', '    {\n', '        require(address(newProposalEthUSDOracle) != address(0));\n', '        require(oracleInterfaceCountdown < now);\n', '        ethUSDOracle = newProposalEthUSDOracle;\n', '        newProposalEthUSDOracle = PriceOracleInterface(0);\n', '    }\n', '\n', '    function updateThresholdNewTokenPair(\n', '        uint _thresholdNewTokenPair\n', '    )\n', '        public\n', '        onlyAuctioneer\n', '    {\n', '        thresholdNewTokenPair = _thresholdNewTokenPair;\n', '    }\n', '\n', '    function updateThresholdNewAuction(\n', '        uint _thresholdNewAuction\n', '    )\n', '        public\n', '        onlyAuctioneer\n', '    {\n', '        thresholdNewAuction = _thresholdNewAuction;\n', '    }\n', '\n', '    function updateApprovalOfToken(\n', '        address[] token,\n', '        bool approved\n', '    )\n', '        public\n', '        onlyAuctioneer\n', '     {  \n', '        for(uint i = 0; i < token.length; i++) {\n', '            approvedTokens[token[i]] = approved;\n', '            Approval(token[i], approved);\n', '        }\n', '     }\n', '\n', '     function startMasterCopyCountdown (\n', '        address _masterCopy\n', '     )\n', '        public\n', '        onlyAuctioneer\n', '    {\n', '        require(_masterCopy != address(0));\n', '\n', '        // Update masterCopyCountdown\n', '        newMasterCopy = _masterCopy;\n', '        masterCopyCountdown = add(now, WAITING_PERIOD_CHANGE_MASTERCOPY_OR_ORACLE);\n', '        NewMasterCopyProposal(_masterCopy);\n', '    }\n', '\n', '    function updateMasterCopy()\n', '        public\n', '        onlyAuctioneer\n', '    {\n', '        require(newMasterCopy != address(0));\n', '        require(now >= masterCopyCountdown);\n', '\n', '        // Update masterCopy\n', '        masterCopy = newMasterCopy;\n', '        newMasterCopy = address(0);\n', '    }\n', '\n', '    /// @param initialClosingPriceNum initial price will be 2 * initialClosingPrice. This is its numerator\n', '    /// @param initialClosingPriceDen initial price will be 2 * initialClosingPrice. This is its denominator\n', '    function addTokenPair(\n', '        address token1,\n', '        address token2,\n', '        uint token1Funding,\n', '        uint token2Funding,\n', '        uint initialClosingPriceNum,\n', '        uint initialClosingPriceDen \n', '    )\n', '        public\n', '    {\n', '        // R1\n', '        require(token1 != token2);\n', '\n', '        // R2\n', '        require(initialClosingPriceNum != 0);\n', '\n', '        // R3\n', '        require(initialClosingPriceDen != 0);\n', '\n', '        // R4\n', '        require(getAuctionIndex(token1, token2) == 0);\n', '\n', '        // R5: to prevent overflow\n', '        require(initialClosingPriceNum < 10 ** 18);\n', '\n', '        // R6\n', '        require(initialClosingPriceDen < 10 ** 18);\n', '\n', '        setAuctionIndex(token1, token2);\n', '\n', '        token1Funding = min(token1Funding, balances[token1][msg.sender]);\n', '        token2Funding = min(token2Funding, balances[token2][msg.sender]);\n', '\n', '        // R7\n', '        require(token1Funding < 10 ** 30);\n', '\n', '        // R8\n', '        require(token2Funding < 10 ** 30);\n', '\n', '        uint fundedValueUSD;\n', '        uint ethUSDPrice = ethUSDOracle.getUSDETHPrice();\n', '\n', '        // Compute fundedValueUSD\n', '        address ethTokenMem = ethToken;\n', '        if (token1 == ethTokenMem) {\n', '            // C1\n', '            // MUL: 10^30 * 10^6 = 10^36\n', '            fundedValueUSD = mul(token1Funding, ethUSDPrice);\n', '        } else if (token2 == ethTokenMem) {\n', '            // C2\n', '            // MUL: 10^30 * 10^6 = 10^36\n', '            fundedValueUSD = mul(token2Funding, ethUSDPrice);\n', '        } else {\n', '            // C3: Neither token is ethToken\n', '            fundedValueUSD = calculateFundedValueTokenToken(token1, token2, \n', '                token1Funding, token2Funding, ethTokenMem, ethUSDPrice);\n', '        }\n', '\n', '        // R5\n', '        require(fundedValueUSD >= thresholdNewTokenPair);\n', '\n', '        // Save prices of opposite auctions\n', '        closingPrices[token1][token2][0] = fraction(initialClosingPriceNum, initialClosingPriceDen);\n', '        closingPrices[token2][token1][0] = fraction(initialClosingPriceDen, initialClosingPriceNum);\n', '\n', '        // Split into two fns because of 16 local-var cap\n', '        addTokenPairSecondPart(token1, token2, token1Funding, token2Funding);\n', '    }\n', '\n', '    function calculateFundedValueTokenToken(\n', '        address token1,\n', '        address token2,\n', '        uint token1Funding,\n', '        uint token2Funding,\n', '        address ethTokenMem,\n', '        uint ethUSDPrice\n', '    )\n', '        internal\n', '        view\n', '        returns (uint fundedValueUSD)\n', '    {\n', '        // We require there to exist ethToken-Token auctions\n', '        // R3.1\n', '        require(getAuctionIndex(token1, ethTokenMem) > 0);\n', '\n', '        // R3.2\n', '        require(getAuctionIndex(token2, ethTokenMem) > 0);\n', '\n', '        // Price of Token 1\n', '        uint priceToken1Num;\n', '        uint priceToken1Den;\n', '        (priceToken1Num, priceToken1Den) = getPriceOfTokenInLastAuction(token1);\n', '\n', '        // Price of Token 2\n', '        uint priceToken2Num;\n', '        uint priceToken2Den;\n', '        (priceToken2Num, priceToken2Den) = getPriceOfTokenInLastAuction(token2);\n', '\n', '        // Compute funded value in ethToken and USD\n', '        // 10^30 * 10^30 = 10^60\n', '        uint fundedValueETH = add(mul(token1Funding, priceToken1Num) / priceToken1Den,\n', '            token2Funding * priceToken2Num / priceToken2Den);\n', '\n', '        fundedValueUSD = mul(fundedValueETH, ethUSDPrice);\n', '    }\n', '\n', '    function addTokenPairSecondPart(\n', '        address token1,\n', '        address token2,\n', '        uint token1Funding,\n', '        uint token2Funding\n', '    )\n', '        internal\n', '    {\n', '        balances[token1][msg.sender] = sub(balances[token1][msg.sender], token1Funding);\n', '        balances[token2][msg.sender] = sub(balances[token2][msg.sender], token2Funding);\n', '\n', '        // Fee mechanism, fees are added to extraTokens\n', '        uint token1FundingAfterFee = settleFee(token1, token2, 1, token1Funding);\n', '        uint token2FundingAfterFee = settleFee(token2, token1, 1, token2Funding);\n', '\n', '        // Update other variables\n', '        sellVolumesCurrent[token1][token2] = token1FundingAfterFee;\n', '        sellVolumesCurrent[token2][token1] = token2FundingAfterFee;\n', '        sellerBalances[token1][token2][1][msg.sender] = token1FundingAfterFee;\n', '        sellerBalances[token2][token1][1][msg.sender] = token2FundingAfterFee;\n', '        \n', '        setAuctionStart(token1, token2, WAITING_PERIOD_NEW_TOKEN_PAIR);\n', '        NewTokenPair(token1, token2);\n', '    }\n', '\n', '    function deposit(\n', '        address tokenAddress,\n', '        uint amount\n', '    )\n', '        public\n', '        returns (uint)\n', '    {\n', '        // R1\n', '        require(Token(tokenAddress).transferFrom(msg.sender, this, amount));\n', '\n', '        uint newBal = add(balances[tokenAddress][msg.sender], amount);\n', '\n', '        balances[tokenAddress][msg.sender] = newBal;\n', '\n', '        NewDeposit(tokenAddress, amount);\n', '\n', '        return newBal;\n', '    }\n', '\n', '    function withdraw(\n', '        address tokenAddress,\n', '        uint amount\n', '    )\n', '        public\n', '        returns (uint)\n', '    {\n', '        uint usersBalance = balances[tokenAddress][msg.sender];\n', '        amount = min(amount, usersBalance);\n', '\n', '        // R1\n', '        require(amount > 0);\n', '\n', '        // R2\n', '        require(Token(tokenAddress).transfer(msg.sender, amount));\n', '\n', '        uint newBal = sub(usersBalance, amount);\n', '        balances[tokenAddress][msg.sender] = newBal;\n', '\n', '        NewWithdrawal(tokenAddress, amount);\n', '\n', '        return newBal;\n', '    }\n', '\n', '    function postSellOrder(\n', '        address sellToken,\n', '        address buyToken,\n', '        uint auctionIndex,\n', '        uint amount\n', '    )\n', '        public\n', '        returns (uint, uint)\n', '    {\n', '        // Note: if a user specifies auctionIndex of 0, it\n', '        // means he is agnostic which auction his sell order goes into\n', '\n', '        amount = min(amount, balances[sellToken][msg.sender]);\n', '\n', '        // R1\n', '        require(amount > 0);\n', '        \n', '        // R2\n', '        uint latestAuctionIndex = getAuctionIndex(sellToken, buyToken);\n', '        require(latestAuctionIndex > 0);\n', '      \n', '        // R3\n', '        uint auctionStart = getAuctionStart(sellToken, buyToken);\n', '        if (auctionStart == AUCTION_START_WAITING_FOR_FUNDING || auctionStart > now) {\n', '            // C1: We are in the 10 minute buffer period\n', '            // OR waiting for an auction to receive sufficient sellVolume\n', '            // Auction has already cleared, and index has been incremented\n', '            // sell order must use that auction index\n', '            // R1.1\n', '            if (auctionIndex == 0) {\n', '                auctionIndex = latestAuctionIndex;\n', '            } else {\n', '                require(auctionIndex == latestAuctionIndex);\n', '            }\n', '\n', '            // R1.2\n', '            require(add(sellVolumesCurrent[sellToken][buyToken], amount) < 10 ** 30);\n', '        } else {\n', '            // C2\n', '            // R2.1: Sell orders must go to next auction\n', '            if (auctionIndex == 0) {\n', '                auctionIndex = latestAuctionIndex + 1;\n', '            } else {\n', '                require(auctionIndex == latestAuctionIndex + 1);\n', '            }\n', '\n', '            // R2.2\n', '            require(add(sellVolumesNext[sellToken][buyToken], amount) < 10 ** 30);\n', '        }\n', '\n', '        // Fee mechanism, fees are added to extraTokens\n', '        uint amountAfterFee = settleFee(sellToken, buyToken, auctionIndex, amount);\n', '\n', '        // Update variables\n', '        balances[sellToken][msg.sender] = sub(balances[sellToken][msg.sender], amount);\n', '        uint newSellerBal = add(sellerBalances[sellToken][buyToken][auctionIndex][msg.sender], amountAfterFee);\n', '        sellerBalances[sellToken][buyToken][auctionIndex][msg.sender] = newSellerBal;\n', '\n', '        if (auctionStart == AUCTION_START_WAITING_FOR_FUNDING || auctionStart > now) {\n', '            // C1\n', '            uint sellVolumeCurrent = sellVolumesCurrent[sellToken][buyToken];\n', '            sellVolumesCurrent[sellToken][buyToken] = add(sellVolumeCurrent, amountAfterFee);\n', '        } else {\n', '            // C2\n', '            uint sellVolumeNext = sellVolumesNext[sellToken][buyToken];\n', '            sellVolumesNext[sellToken][buyToken] = add(sellVolumeNext, amountAfterFee);\n', '        }\n', '\n', '        if (auctionStart == AUCTION_START_WAITING_FOR_FUNDING) {\n', '            scheduleNextAuction(sellToken, buyToken);\n', '        }\n', '\n', '        NewSellOrder(sellToken, buyToken, msg.sender, auctionIndex, amountAfterFee);\n', '\n', '        return (auctionIndex, newSellerBal);\n', '    }\n', '\n', '    function postBuyOrder(\n', '        address sellToken,\n', '        address buyToken,\n', '        uint auctionIndex,\n', '        uint amount\n', '    )\n', '        public\n', '        returns (uint)\n', '    {\n', '        // R1: auction must not have cleared\n', '        require(closingPrices[sellToken][buyToken][auctionIndex].den == 0);\n', '\n', '        uint auctionStart = getAuctionStart(sellToken, buyToken);\n', '\n', '        // R2\n', '        require(auctionStart <= now);\n', '\n', '        // R4\n', '        require(auctionIndex == getAuctionIndex(sellToken, buyToken));\n', '        \n', '        // R5: auction must not be in waiting period\n', '        require(auctionStart > AUCTION_START_WAITING_FOR_FUNDING);\n', '        \n', '        // R6: auction must be funded\n', '        require(sellVolumesCurrent[sellToken][buyToken] > 0);\n', '        \n', '        uint buyVolume = buyVolumes[sellToken][buyToken];\n', '        amount = min(amount, balances[buyToken][msg.sender]);\n', '\n', '        // R7\n', '        require(add(buyVolume, amount) < 10 ** 30);\n', '        \n', '        // Overbuy is when a part of a buy order clears an auction\n', '        // In that case we only process the part before the overbuy\n', '        // To calculate overbuy, we first get current price\n', '        uint sellVolume = sellVolumesCurrent[sellToken][buyToken];\n', '\n', '        uint num;\n', '        uint den;\n', '        (num, den) = getCurrentAuctionPrice(sellToken, buyToken, auctionIndex);\n', '        // 10^30 * 10^37 = 10^67\n', '        uint outstandingVolume = atleastZero(int(mul(sellVolume, num) / den - buyVolume));\n', '\n', '        uint amountAfterFee;\n', '        if (amount < outstandingVolume) {\n', '            if (amount > 0) {\n', '                amountAfterFee = settleFee(buyToken, sellToken, auctionIndex, amount);\n', '            }\n', '        } else {\n', '            amount = outstandingVolume;\n', '            amountAfterFee = outstandingVolume;\n', '        }\n', '\n', '        // Here we could also use outstandingVolume or amountAfterFee, it doesn&#39;t matter\n', '        if (amount > 0) {\n', '            // Update variables\n', '            balances[buyToken][msg.sender] = sub(balances[buyToken][msg.sender], amount);\n', '            uint newBuyerBal = add(buyerBalances[sellToken][buyToken][auctionIndex][msg.sender], amountAfterFee);\n', '            buyerBalances[sellToken][buyToken][auctionIndex][msg.sender] = newBuyerBal;\n', '            buyVolumes[sellToken][buyToken] = add(buyVolumes[sellToken][buyToken], amountAfterFee);\n', '            NewBuyOrder(sellToken, buyToken, msg.sender, auctionIndex, amountAfterFee);\n', '        }\n', '\n', '        // Checking for equality would suffice here. nevertheless:\n', '        if (amount >= outstandingVolume) {\n', '            // Clear auction\n', '            clearAuction(sellToken, buyToken, auctionIndex, sellVolume);\n', '        }\n', '\n', '        return (newBuyerBal);\n', '    }\n', '    \n', '    function claimSellerFunds(\n', '        address sellToken,\n', '        address buyToken,\n', '        address user,\n', '        uint auctionIndex\n', '    )\n', '        public\n', '        // < (10^60, 10^61)\n', '        returns (uint returned, uint frtsIssued)\n', '    {\n', '        closeTheoreticalClosedAuction(sellToken, buyToken, auctionIndex);\n', '        uint sellerBalance = sellerBalances[sellToken][buyToken][auctionIndex][user];\n', '\n', '        // R1\n', '        require(sellerBalance > 0);\n', '\n', '        // Get closing price for said auction\n', '        fraction memory closingPrice = closingPrices[sellToken][buyToken][auctionIndex];\n', '        uint num = closingPrice.num;\n', '        uint den = closingPrice.den;\n', '\n', '        // R2: require auction to have cleared\n', '        require(den > 0);\n', '\n', '        // Calculate return\n', '        // < 10^30 * 10^30 = 10^60\n', '        returned = mul(sellerBalance, num) / den;\n', '\n', '        frtsIssued = issueFrts(sellToken, buyToken, returned, auctionIndex, sellerBalance, user);\n', '\n', '        // Claim tokens\n', '        sellerBalances[sellToken][buyToken][auctionIndex][user] = 0;\n', '        if (returned > 0) {\n', '            balances[buyToken][user] = add(balances[buyToken][user], returned);\n', '        }\n', '        NewSellerFundsClaim(sellToken, buyToken, user, auctionIndex, returned, frtsIssued);\n', '    }\n', '\n', '    function claimBuyerFunds(\n', '        address sellToken,\n', '        address buyToken,\n', '        address user,\n', '        uint auctionIndex\n', '    )\n', '        public\n', '        returns (uint returned, uint frtsIssued)\n', '    {\n', '        closeTheoreticalClosedAuction(sellToken, buyToken, auctionIndex);\n', '        \n', '        uint num;\n', '        uint den;\n', '        (returned, num, den) = getUnclaimedBuyerFunds(sellToken, buyToken, user, auctionIndex);\n', '\n', '        if (closingPrices[sellToken][buyToken][auctionIndex].den == 0) {\n', '            // Auction is running\n', '            claimedAmounts[sellToken][buyToken][auctionIndex][user] = add(claimedAmounts[sellToken][buyToken][auctionIndex][user], returned);\n', '        } else {\n', '            // Auction has closed\n', '            // We DON&#39;T want to check for returned > 0, because that would fail if a user claims\n', '            // intermediate funds & auction clears in same block (he/she would not be able to claim extraTokens)\n', '\n', '            // Assign extra sell tokens (this is possible only after auction has cleared,\n', '            // because buyVolume could still increase before that)\n', '            uint extraTokensTotal = extraTokens[sellToken][buyToken][auctionIndex];\n', '            uint buyerBalance = buyerBalances[sellToken][buyToken][auctionIndex][user];\n', '\n', '            // closingPrices.num represents buyVolume\n', '            // < 10^30 * 10^30 = 10^60\n', '            uint tokensExtra = mul(buyerBalance, extraTokensTotal) / closingPrices[sellToken][buyToken][auctionIndex].num;\n', '            returned = add(returned, tokensExtra);\n', '\n', '            frtsIssued = issueFrts(buyToken, sellToken, mul(buyerBalance, den) / num, auctionIndex, buyerBalance, user);\n', '\n', '            // Auction has closed\n', '            // Reset buyerBalances and claimedAmounts\n', '            buyerBalances[sellToken][buyToken][auctionIndex][user] = 0;\n', '            claimedAmounts[sellToken][buyToken][auctionIndex][user] = 0; \n', '        }\n', '\n', '        // Claim tokens\n', '        if (returned > 0) {\n', '            balances[sellToken][user] = add(balances[sellToken][user], returned);\n', '        }\n', '        \n', '        NewBuyerFundsClaim(sellToken, buyToken, user, auctionIndex, returned, frtsIssued);\n', '    }\n', '\n', '    function issueFrts(\n', '        address primaryToken,\n', '        address secondaryToken,\n', '        uint x,\n', '        uint auctionIndex,\n', '        uint bal,\n', '        address user\n', '    )\n', '        internal\n', '        returns (uint frtsIssued)\n', '    {\n', '        if (approvedTokens[primaryToken] && approvedTokens[secondaryToken]) {\n', '            address ethTokenMem = ethToken;\n', '            // Get frts issued based on ETH price of returned tokens\n', '            if (primaryToken == ethTokenMem) {\n', '                frtsIssued = bal;\n', '            } else if (secondaryToken == ethTokenMem) {\n', '                // 10^30 * 10^39 = 10^66\n', '                frtsIssued = x;\n', '            } else {\n', '                // Neither token is ethToken, so we use getHhistoricalPriceOracle()\n', '                uint pastNum;\n', '                uint pastDen;\n', '                (pastNum, pastDen) = getPriceInPastAuction(primaryToken, ethTokenMem, auctionIndex - 1);\n', '                // 10^30 * 10^35 = 10^65\n', '                frtsIssued = mul(bal, pastNum) / pastDen;\n', '            }\n', '\n', '            if (frtsIssued > 0) {\n', '                // Issue frtToken\n', '                frtToken.mintTokens(user, frtsIssued);\n', '            }\n', '        }\n', '    }\n', '\n', '    //@dev allows to close possible theoretical closed markets\n', '    //@param sellToken sellToken of an auction\n', '    //@param buyToken buyToken of an auction \n', '    //@param index is the auctionIndex of the auction\n', '    function closeTheoreticalClosedAuction(\n', '        address sellToken,\n', '        address buyToken,\n', '        uint auctionIndex\n', '    )\n', '        public\n', '    {\n', '        if(auctionIndex == getAuctionIndex(buyToken, sellToken) && closingPrices[sellToken][buyToken][auctionIndex].num == 0) {\n', '            uint buyVolume = buyVolumes[sellToken][buyToken];\n', '            uint sellVolume = sellVolumesCurrent[sellToken][buyToken];\n', '            uint num;\n', '            uint den;\n', '            (num, den) = getCurrentAuctionPrice(sellToken, buyToken, auctionIndex);\n', '            // 10^30 * 10^37 = 10^67\n', '            uint outstandingVolume = atleastZero(int(mul(sellVolume, num) / den - buyVolume));\n', '            \n', '            if(outstandingVolume == 0) {\n', '                postBuyOrder(sellToken, buyToken, auctionIndex, 0);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Claim buyer funds for one auction\n', '    function getUnclaimedBuyerFunds(\n', '        address sellToken,\n', '        address buyToken,\n', '        address user,\n', '        uint auctionIndex\n', '    )\n', '        public\n', '        view\n', '        // < (10^67, 10^37)\n', '        returns (uint unclaimedBuyerFunds, uint num, uint den)\n', '    {\n', '        // R1: checks if particular auction has ever run\n', '        require(auctionIndex <= getAuctionIndex(sellToken, buyToken));\n', '\n', '        (num, den) = getCurrentAuctionPrice(sellToken, buyToken, auctionIndex);\n', '\n', '        if (num == 0) {\n', '            // This should rarely happen - as long as there is >= 1 buy order,\n', '            // auction will clear before price = 0. So this is just fail-safe\n', '            unclaimedBuyerFunds = 0;\n', '        } else {\n', '            uint buyerBalance = buyerBalances[sellToken][buyToken][auctionIndex][user];\n', '            // < 10^30 * 10^37 = 10^67\n', '            unclaimedBuyerFunds = atleastZero(int(\n', '                mul(buyerBalance, den) / num - \n', '                claimedAmounts[sellToken][buyToken][auctionIndex][user]\n', '            ));\n', '        }\n', '    }\n', '\n', '    function settleFee(\n', '        address primaryToken,\n', '        address secondaryToken,\n', '        uint auctionIndex,\n', '        uint amount\n', '    )\n', '        internal\n', '        // < 10^30\n', '        returns (uint amountAfterFee)\n', '    {\n', '        uint feeNum;\n', '        uint feeDen;\n', '        (feeNum, feeDen) = getFeeRatio(msg.sender);\n', '        // 10^30 * 10^3 / 10^4 = 10^29\n', '        uint fee = mul(amount, feeNum) / feeDen;\n', '\n', '        if (fee > 0) {\n', '            fee = settleFeeSecondPart(primaryToken, fee);\n', '            \n', '            uint usersExtraTokens = extraTokens[primaryToken][secondaryToken][auctionIndex + 1];\n', '            extraTokens[primaryToken][secondaryToken][auctionIndex + 1] = add(usersExtraTokens, fee);\n', '\n', '            Fee(primaryToken, secondaryToken, msg.sender, auctionIndex, fee);\n', '        }\n', '        \n', '        amountAfterFee = sub(amount, fee);\n', '    }\n', '\n', '    function settleFeeSecondPart(\n', '        address primaryToken,\n', '        uint fee\n', '    )\n', '        internal\n', '        returns (uint newFee)\n', '    {\n', '        // Allow user to reduce up to half of the fee with owlToken\n', '        uint num;\n', '        uint den;\n', '        (num, den) = getPriceOfTokenInLastAuction(primaryToken);\n', '\n', '        // Convert fee to ETH, then USD\n', '        // 10^29 * 10^30 / 10^30 = 10^29\n', '        uint feeInETH = mul(fee, num) / den;\n', '\n', '        uint ethUSDPrice = ethUSDOracle.getUSDETHPrice();\n', '        // 10^29 * 10^6 = 10^35\n', '        // Uses 18 decimal places <> exactly as owlToken tokens: 10**18 owlToken == 1 USD \n', '        uint feeInUSD = mul(feeInETH, ethUSDPrice);\n', '        uint amountOfowlTokenBurned = min(owlToken.allowance(msg.sender, this), feeInUSD / 2);\n', '        amountOfowlTokenBurned = min(owlToken.balanceOf(msg.sender), amountOfowlTokenBurned);\n', '\n', '\n', '        if (amountOfowlTokenBurned > 0) {\n', '            owlToken.burnOWL(msg.sender, amountOfowlTokenBurned);\n', '            // Adjust fee\n', '            // 10^35 * 10^29 = 10^64\n', '            uint adjustment = mul(amountOfowlTokenBurned, fee) / feeInUSD;\n', '            newFee = sub(fee, adjustment);\n', '        } else {\n', '            newFee = fee;\n', '        }\n', '    }\n', '    \n', '    function getFeeRatio(\n', '        address user\n', '    )\n', '        public\n', '        view\n', '        // feeRatio < 10^4\n', '        returns (uint num, uint den)\n', '    {\n', '        uint t = frtToken.totalSupply();\n', '        uint b = frtToken.lockedTokenBalances(user);\n', '\n', '        if (b * 100000 < t || t == 0) {\n', '            // 0.5%\n', '            num = 1;\n', '            den = 200;\n', '        } else if (b * 10000 < t) {\n', '            // 0.4%\n', '            num = 1;\n', '            den = 250;\n', '        } else if (b * 1000 < t) {\n', '            // 0.3%\n', '            num = 3;\n', '            den = 1000;\n', '        } else if (b * 100 < t) {\n', '            // 0.2%\n', '            num = 1;\n', '            den = 500;\n', '        } else if (b * 10 < t) {\n', '            // 0.1%\n', '            num = 1;\n', '            den = 1000;\n', '        } else {\n', '            // 0% \n', '            num = 0; \n', '            den = 1;\n', '        }\n', '    }\n', '\n', '    /// @dev clears an Auction\n', '    /// @param sellToken sellToken of the auction\n', '    /// @param buyToken  buyToken of the auction\n', '    /// @param auctionIndex of the auction to be cleared.\n', '    function clearAuction(\n', '        address sellToken,\n', '        address buyToken,\n', '        uint auctionIndex,\n', '        uint sellVolume\n', '    )\n', '        internal\n', '    {\n', '        // Get variables\n', '        uint buyVolume = buyVolumes[sellToken][buyToken];\n', '        uint sellVolumeOpp = sellVolumesCurrent[buyToken][sellToken];\n', '        uint closingPriceOppDen = closingPrices[buyToken][sellToken][auctionIndex].den;\n', '        uint auctionStart = getAuctionStart(sellToken, buyToken);\n', '\n', '        // Update closing price\n', '        if (sellVolume > 0) {\n', '            closingPrices[sellToken][buyToken][auctionIndex] = fraction(buyVolume, sellVolume);\n', '        }\n', '\n', '        // if (opposite is 0 auction OR price = 0 OR opposite auction cleared)\n', '        // price = 0 happens if auction pair has been running for >= 24 hrs = 86400\n', '        if (sellVolumeOpp == 0 || now >= auctionStart + 86400 || closingPriceOppDen > 0) {\n', '            // Close auction pair\n', '            uint buyVolumeOpp = buyVolumes[buyToken][sellToken];\n', '            if (closingPriceOppDen == 0 && sellVolumeOpp > 0) {\n', '                // Save opposite price\n', '                closingPrices[buyToken][sellToken][auctionIndex] = fraction(buyVolumeOpp, sellVolumeOpp);\n', '            }\n', '\n', '            uint sellVolumeNext = sellVolumesNext[sellToken][buyToken];\n', '            uint sellVolumeNextOpp = sellVolumesNext[buyToken][sellToken];\n', '\n', '            // Update state variables for both auctions\n', '            sellVolumesCurrent[sellToken][buyToken] = sellVolumeNext;\n', '            if (sellVolumeNext > 0) {\n', '                sellVolumesNext[sellToken][buyToken] = 0;\n', '            }\n', '            if (buyVolume > 0) {\n', '                buyVolumes[sellToken][buyToken] = 0;\n', '            }\n', '\n', '            sellVolumesCurrent[buyToken][sellToken] = sellVolumeNextOpp;\n', '            if (sellVolumeNextOpp > 0) {\n', '                sellVolumesNext[buyToken][sellToken] = 0;\n', '            }\n', '            if (buyVolumeOpp > 0) {\n', '                buyVolumes[buyToken][sellToken] = 0;\n', '            }\n', '\n', '            // Increment auction index\n', '            setAuctionIndex(sellToken, buyToken);\n', '            // Check if next auction can be scheduled\n', '            scheduleNextAuction(sellToken, buyToken);\n', '        }\n', '\n', '        AuctionCleared(sellToken, buyToken, sellVolume, buyVolume, auctionIndex);\n', '    }\n', '\n', '    function scheduleNextAuction(\n', '        address sellToken,\n', '        address buyToken\n', '    )\n', '        internal\n', '    {\n', '        // Check if auctions received enough sell orders\n', '        uint ethUSDPrice = ethUSDOracle.getUSDETHPrice();\n', '\n', '        uint sellNum;\n', '        uint sellDen;\n', '        (sellNum, sellDen) = getPriceOfTokenInLastAuction(sellToken);\n', '\n', '        uint buyNum;\n', '        uint buyDen;\n', '        (buyNum, buyDen) = getPriceOfTokenInLastAuction(buyToken);\n', '\n', '        // We use current sell volume, because in clearAuction() we set\n', '        // sellVolumesCurrent = sellVolumesNext before calling this function\n', '        // (this is so that we don&#39;t need case work,\n', '        // since it might also be called from postSellOrder())\n', '\n', '        // < 10^30 * 10^31 * 10^6 = 10^67\n', '        uint sellVolume = mul(mul(sellVolumesCurrent[sellToken][buyToken], sellNum), ethUSDPrice) / sellDen;\n', '        uint sellVolumeOpp = mul(mul(sellVolumesCurrent[buyToken][sellToken], buyNum), ethUSDPrice) / buyDen;\n', '        if (sellVolume >= thresholdNewAuction || sellVolumeOpp >= thresholdNewAuction) {\n', '            // Schedule next auction\n', '            setAuctionStart(sellToken, buyToken, WAITING_PERIOD_NEW_AUCTION);\n', '        } else {\n', '            resetAuctionStart(sellToken, buyToken);\n', '        }\n', '    }\n', '\n', '    //@ dev returns price in units [token2]/[token1]\n', '    //@ param token1 first token for price calculation\n', '    //@ param token2 second token for price calculation\n', '    //@ param auctionIndex index for the auction to get the averaged price from\n', '    function getPriceInPastAuction(\n', '        address token1,\n', '        address token2,\n', '        uint auctionIndex\n', '    )\n', '        public\n', '        view\n', '        // price < 10^31\n', '        returns (uint num, uint den)\n', '    {\n', '        if (token1 == token2) {\n', '            // C1\n', '            num = 1;\n', '            den = 1;\n', '        } else {\n', '            // C2\n', '            // R2.1\n', '            require(auctionIndex >= 0);\n', '\n', '\n', '            // C3\n', '            // R3.1\n', '            require(auctionIndex <= getAuctionIndex(token1, token2));\n', '            // auction still running\n', '\n', '            uint i = 0;\n', '            bool correctPair = false;\n', '            fraction memory closingPriceToken1;\n', '            fraction memory closingPriceToken2;\n', '\n', '            while (!correctPair) {\n', '                closingPriceToken2 = closingPrices[token2][token1][auctionIndex - i];\n', '                closingPriceToken1 = closingPrices[token1][token2][auctionIndex - i];\n', '                \n', '                if (closingPriceToken1.num > 0 && closingPriceToken1.den > 0 || \n', '                    closingPriceToken2.num > 0 && closingPriceToken2.den > 0)\n', '                {\n', '                    correctPair = true;\n', '                }\n', '                i++;\n', '            }\n', '\n', '            // At this point at least one closing price is strictly positive\n', '            // If only one is positive, we want to output that\n', '            if (closingPriceToken1.num == 0 || closingPriceToken1.den == 0) {\n', '                num = closingPriceToken2.den;\n', '                den = closingPriceToken2.num;\n', '            } else if (closingPriceToken2.num == 0 || closingPriceToken2.den == 0) {\n', '                num = closingPriceToken1.num;\n', '                den = closingPriceToken1.den;\n', '            } else {\n', '                // If both prices are positive, output weighted average\n', '                num = closingPriceToken2.den + closingPriceToken1.num;\n', '                den = closingPriceToken2.num + closingPriceToken1.den;\n', '            }\n', '        } \n', '    }\n', '\n', '    /// @dev Gives best estimate for market price of a token in ETH of any price oracle on the Ethereum network\n', '    /// @param token address of ERC-20 token\n', '    /// @return Weighted average of closing prices of opposite Token-ethToken auctions, based on their sellVolume  \n', '    function getPriceOfTokenInLastAuction(\n', '        address token\n', '    )\n', '        public\n', '        view\n', '        // price < 10^31\n', '        returns (uint num, uint den)\n', '    {\n', '        uint latestAuctionIndex = getAuctionIndex(token, ethToken);\n', '        // getPriceInPastAuction < 10^30\n', '        (num, den) = getPriceInPastAuction(token, ethToken, latestAuctionIndex - 1);\n', '    }\n', '\n', '    function getCurrentAuctionPrice(\n', '        address sellToken,\n', '        address buyToken,\n', '        uint auctionIndex\n', '    )\n', '        public\n', '        view\n', '        // price < 10^37\n', '        returns (uint num, uint den)\n', '    {\n', '        fraction memory closingPrice = closingPrices[sellToken][buyToken][auctionIndex];\n', '\n', '        if (closingPrice.den != 0) {\n', '            // Auction has closed\n', '            (num, den) = (closingPrice.num, closingPrice.den);\n', '        } else if (auctionIndex > getAuctionIndex(sellToken, buyToken)) {\n', '            (num, den) = (0, 0);\n', '        } else {\n', '            // Auction is running\n', '            uint pastNum;\n', '            uint pastDen;\n', '            (pastNum, pastDen) = getPriceInPastAuction(sellToken, buyToken, auctionIndex - 1);\n', '\n', '            // If we&#39;re calling the function into an unstarted auction,\n', '            // it will return the starting price of that auction\n', '            uint timeElapsed = atleastZero(int(now - getAuctionStart(sellToken, buyToken)));\n', '\n', '            // The numbers below are chosen such that\n', '            // P(0 hrs) = 2 * lastClosingPrice, P(6 hrs) = lastClosingPrice, P(>=24 hrs) = 0\n', '\n', '            // 10^5 * 10^31 = 10^36\n', '            num = atleastZero(int((86400 - timeElapsed) * pastNum));\n', '            // 10^6 * 10^31 = 10^37\n', '            den = mul((timeElapsed + 43200), pastDen);\n', '\n', '            if (mul(num, sellVolumesCurrent[sellToken][buyToken]) <= mul(den, buyVolumes[sellToken][buyToken])) {\n', '                num = buyVolumes[sellToken][buyToken];\n', '                den = sellVolumesCurrent[sellToken][buyToken];\n', '            }\n', '        }\n', '    }\n', '\n', '    function depositAndSell(\n', '        address sellToken,\n', '        address buyToken,\n', '        uint amount\n', '    )\n', '        external\n', '        returns (uint newBal, uint auctionIndex, uint newSellerBal)\n', '    {\n', '        newBal = deposit(sellToken, amount);\n', '        (auctionIndex, newSellerBal) = postSellOrder(sellToken, buyToken, 0, amount);\n', '    }\n', '\n', '    function claimAndWithdraw(\n', '        address sellToken,\n', '        address buyToken,\n', '        address user,\n', '        uint auctionIndex,\n', '        uint amount\n', '    )\n', '        external\n', '        returns (uint returned, uint frtsIssued, uint newBal)\n', '    {\n', '        (returned, frtsIssued) = claimSellerFunds(sellToken, buyToken, user, auctionIndex);\n', '        newBal = withdraw(buyToken, amount);\n', '    }\n', '\n', '    // > Helper fns\n', '    function getTokenOrder(\n', '        address token1,\n', '        address token2\n', '    )\n', '        public\n', '        pure\n', '        returns (address, address)\n', '    {\n', '        if (token2 < token1) {\n', '            (token1, token2) = (token2, token1);\n', '        }\n', '\n', '        return (token1, token2);\n', '    }\n', '\n', '    function setAuctionStart(\n', '        address token1,\n', '        address token2,\n', '        uint value\n', '    )\n', '        internal\n', '    {\n', '        (token1, token2) = getTokenOrder(token1, token2);        \n', '        uint auctionStart = now + value;\n', '        uint auctionIndex = latestAuctionIndices[token1][token2];\n', '        auctionStarts[token1][token2] = auctionStart;\n', '        AuctionStartScheduled(token1, token2, auctionIndex, auctionStart);\n', '    }\n', '\n', '    function resetAuctionStart(\n', '        address token1,\n', '        address token2\n', '    )\n', '        internal\n', '    {\n', '        (token1, token2) = getTokenOrder(token1, token2);\n', '        if (auctionStarts[token1][token2] != AUCTION_START_WAITING_FOR_FUNDING) {\n', '            auctionStarts[token1][token2] = AUCTION_START_WAITING_FOR_FUNDING;\n', '        }\n', '    }\n', '\n', '    function getAuctionStart(\n', '        address token1,\n', '        address token2\n', '    )\n', '        public\n', '        view\n', '        returns (uint auctionStart)\n', '    {\n', '        (token1, token2) = getTokenOrder(token1, token2);\n', '        auctionStart = auctionStarts[token1][token2];\n', '    }\n', '\n', '    function setAuctionIndex(\n', '        address token1,\n', '        address token2\n', '    )\n', '        internal\n', '    {\n', '        (token1, token2) = getTokenOrder(token1, token2);\n', '        latestAuctionIndices[token1][token2] += 1;\n', '    }\n', '\n', '\n', '    function getAuctionIndex(\n', '        address token1,\n', '        address token2\n', '    )\n', '        public\n', '        view\n', '        returns (uint auctionIndex) \n', '    {\n', '        (token1, token2) = getTokenOrder(token1, token2);\n', '        auctionIndex = latestAuctionIndices[token1][token2];\n', '    }\n', '\n', '    // > Math fns\n', '    function min(uint a, uint b) \n', '        public\n', '        pure\n', '        returns (uint)\n', '    {\n', '        if (a < b) {\n', '            return a;\n', '        } else {\n', '            return b;\n', '        }\n', '    }\n', '\n', '    function atleastZero(int a)\n', '        public\n', '        pure\n', '        returns (uint)\n', '    {\n', '        if (a < 0) {\n', '            return 0;\n', '        } else {\n', '            return uint(a);\n', '        }\n', '    }\n', '    /// @dev Returns whether an add operation causes an overflow\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Did no overflow occur?\n', '    function safeToAdd(uint a, uint b)\n', '        public\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return a + b >= a;\n', '    }\n', '\n', '    /// @dev Returns whether a subtraction operation causes an underflow\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Did no underflow occur?\n', '    function safeToSub(uint a, uint b)\n', '        public\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return a >= b;\n', '    }\n', '\n', '    /// @dev Returns whether a multiply operation causes an overflow\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Did no overflow occur?\n', '    function safeToMul(uint a, uint b)\n', '        public\n', '        pure\n', '        returns (bool)\n', '    {\n', '        return b == 0 || a * b / b == a;\n', '    }\n', '\n', '    /// @dev Returns sum if no overflow occurred\n', '    /// @param a First addend\n', '    /// @param b Second addend\n', '    /// @return Sum\n', '    function add(uint a, uint b)\n', '        public\n', '        pure\n', '        returns (uint)\n', '    {\n', '        require(safeToAdd(a, b));\n', '        return a + b;\n', '    }\n', '\n', '    /// @dev Returns difference if no overflow occurred\n', '    /// @param a Minuend\n', '    /// @param b Subtrahend\n', '    /// @return Difference\n', '    function sub(uint a, uint b)\n', '        public\n', '        pure\n', '        returns (uint)\n', '    {\n', '        require(safeToSub(a, b));\n', '        return a - b;\n', '    }\n', '\n', '    /// @dev Returns product if no overflow occurred\n', '    /// @param a First factor\n', '    /// @param b Second factor\n', '    /// @return Product\n', '    function mul(uint a, uint b)\n', '        public\n', '        pure\n', '        returns (uint)\n', '    {\n', '        require(safeToMul(a, b));\n', '        return a * b;\n', '    }\n', '\n', '    function getRunningTokenPairs(\n', '        address[] tokens\n', '    )\n', '        external\n', '        view\n', '        returns (address[] tokens1, address[] tokens2)\n', '    {\n', '        uint arrayLength;\n', '\n', '        for (uint k = 0; k < tokens.length - 1; k++) {\n', '            for (uint l = k + 1; l < tokens.length; l++) {\n', '                if (getAuctionIndex(tokens[k], tokens[l]) > 0) {\n', '                    arrayLength++;\n', '                }\n', '            }\n', '        }\n', '\n', '        tokens1 = new address[](arrayLength);\n', '        tokens2 = new address[](arrayLength);\n', '\n', '        uint h;\n', '\n', '        for (uint i = 0; i < tokens.length - 1; i++) {\n', '            for (uint j = i + 1; j < tokens.length; j++) {\n', '                if (getAuctionIndex(tokens[i], tokens[j]) > 0) {\n', '                    tokens1[h] = tokens[i];\n', '                    tokens2[h] = tokens[j];\n', '                    h++;\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    //@dev for quick overview of possible sellerBalances to calculate the possible withdraw tokens\n', '    //@param auctionSellToken is the sellToken defining an auctionPair\n', '    //@param auctionBuyToken is the buyToken defining an auctionPair\n', '    //@param user is the user who wants to his tokens\n', '    //@param lastNAuctions how many auctions will be checked. 0 means all\n', '    //@returns returns sellbal for all indices for all tokenpairs \n', '    function getIndicesWithClaimableTokensForSellers(\n', '        address auctionSellToken,\n', '        address auctionBuyToken,\n', '        address user,\n', '        uint lastNAuctions\n', '    )\n', '        external\n', '        view\n', '        returns(uint[] indices, uint[] usersBalances)\n', '    {\n', '        uint runningAuctionIndex = getAuctionIndex(auctionSellToken, auctionBuyToken);\n', '\n', '        uint arrayLength;\n', '        \n', '        uint startingIndex = lastNAuctions == 0 ? 1 : runningAuctionIndex - lastNAuctions + 1;\n', '\n', '        for (uint j = startingIndex; j <= runningAuctionIndex; j++) {\n', '            if (sellerBalances[auctionSellToken][auctionBuyToken][j][user] > 0) {\n', '                arrayLength++;\n', '            }\n', '        }\n', '\n', '        indices = new uint[](arrayLength);\n', '        usersBalances = new uint[](arrayLength);\n', '\n', '        uint k;\n', '\n', '        for (uint i = startingIndex; i <= runningAuctionIndex; i++) {\n', '            if (sellerBalances[auctionSellToken][auctionBuyToken][i][user] > 0) {\n', '                indices[k] = i;\n', '                usersBalances[k] = sellerBalances[auctionSellToken][auctionBuyToken][i][user];\n', '                k++;\n', '            }\n', '        }\n', '    }    \n', '\n', '    //@dev for quick overview of current sellerBalances for a user\n', '    //@param auctionSellTokens are the sellTokens defining an auctionPair\n', '    //@param auctionBuyTokens are the buyTokens defining an auctionPair\n', '    //@param user is the user who wants to his tokens\n', '    function getSellerBalancesOfCurrentAuctions(\n', '        address[] auctionSellTokens,\n', '        address[] auctionBuyTokens,\n', '        address user\n', '    )\n', '        external\n', '        view\n', '        returns (uint[])\n', '    {\n', '        uint length = auctionSellTokens.length;\n', '        uint length2 = auctionBuyTokens.length;\n', '        require(length == length2);\n', '\n', '        uint[] memory sellersBalances = new uint[](length);\n', '\n', '        for (uint i = 0; i < length; i++) {\n', '            uint runningAuctionIndex = getAuctionIndex(auctionSellTokens[i], auctionBuyTokens[i]);\n', '            sellersBalances[i] = sellerBalances[auctionSellTokens[i]][auctionBuyTokens[i]][runningAuctionIndex][user];\n', '        }\n', '\n', '        return sellersBalances;\n', '    }\n', '\n', '    //@dev for quick overview of possible buyerBalances to calculate the possible withdraw tokens\n', '    //@param auctionSellToken is the sellToken defining an auctionPair\n', '    //@param auctionBuyToken is the buyToken defining an auctionPair\n', '    //@param user is the user who wants to his tokens\n', '    //@param lastNAuctions how many auctions will be checked. 0 means all\n', '    //@returns returns sellbal for all indices for all tokenpairs \n', '    function getIndicesWithClaimableTokensForBuyers(\n', '        address auctionSellToken,\n', '        address auctionBuyToken,\n', '        address user,\n', '        uint lastNAuctions\n', '    )\n', '        external\n', '        view\n', '        returns(uint[] indices, uint[] usersBalances)\n', '    {\n', '        uint runningAuctionIndex = getAuctionIndex(auctionSellToken, auctionBuyToken);\n', '\n', '        uint arrayLength;\n', '        \n', '        uint startingIndex = lastNAuctions == 0 ? 1 : runningAuctionIndex - lastNAuctions + 1;\n', '\n', '        for (uint j = startingIndex; j <= runningAuctionIndex; j++) {\n', '            if (buyerBalances[auctionSellToken][auctionBuyToken][j][user] > 0) {\n', '                arrayLength++;\n', '            }\n', '        }\n', '\n', '        indices = new uint[](arrayLength);\n', '        usersBalances = new uint[](arrayLength);\n', '\n', '        uint k;\n', '\n', '        for (uint i = startingIndex; i <= runningAuctionIndex; i++) {\n', '            if (buyerBalances[auctionSellToken][auctionBuyToken][i][user] > 0) {\n', '                indices[k] = i;\n', '                usersBalances[k] = buyerBalances[auctionSellToken][auctionBuyToken][i][user];\n', '                k++;\n', '            }\n', '        }\n', '    }    \n', '\n', '    //@dev for quick overview of current sellerBalances for a user\n', '    //@param auctionSellTokens are the sellTokens defining an auctionPair\n', '    //@param auctionBuyTokens are the buyTokens defining an auctionPair\n', '    //@param user is the user who wants to his tokens\n', '    function getBuyerBalancesOfCurrentAuctions(\n', '        address[] auctionSellTokens,\n', '        address[] auctionBuyTokens,\n', '        address user\n', '    )\n', '        external\n', '        view\n', '        returns (uint[])\n', '    {\n', '        uint length = auctionSellTokens.length;\n', '        uint length2 = auctionBuyTokens.length;\n', '        require(length == length2);\n', '\n', '        uint[] memory buyersBalances = new uint[](length);\n', '\n', '        for (uint i = 0; i < length; i++) {\n', '            uint runningAuctionIndex = getAuctionIndex(auctionSellTokens[i], auctionBuyTokens[i]);\n', '            buyersBalances[i] = buyerBalances[auctionSellTokens[i]][auctionBuyTokens[i]][runningAuctionIndex][user];\n', '        }\n', '\n', '        return buyersBalances;\n', '    }\n', '\n', '    //@dev for quick overview of approved Tokens\n', '    //@param addressesToCheck are the ERC-20 token addresses to be checked whether they are approved\n', '    function getApprovedAddressesOfList(\n', '        address[] addressToCheck\n', '    )\n', '        external\n', '        view\n', '        returns (bool[])\n', '    {\n', '        uint length = addressToCheck.length;\n', '\n', '        bool[] memory isApproved = new bool[](length);\n', '\n', '        for (uint i = 0; i < length; i++) {\n', '            isApproved[i] = approvedTokens[addressToCheck[i]];\n', '        }\n', '\n', '        return isApproved;\n', '    }\n', '\n', '    //@dev for multiple withdraws\n', '    //@param auctionSellTokens are the sellTokens defining an auctionPair\n', '    //@param auctionBuyTokens are the buyTokens defining an auctionPair\n', '    //@param auctionIndices are the auction indices on which an token should be claimedAmounts\n', '    //@param user is the user who wants to his tokens\n', '    function claimTokensFromSeveralAuctionsAsSeller(\n', '        address[] auctionSellTokens,\n', '        address[] auctionBuyTokens,\n', '        uint[] auctionIndices,\n', '        address user\n', '    )\n', '        external\n', '    {\n', '        uint length = auctionSellTokens.length;\n', '        uint length2 = auctionBuyTokens.length;\n', '        require(length == length2);\n', '\n', '        uint length3 = auctionIndices.length;\n', '        require(length2 == length3);\n', '\n', '        for (uint i = 0; i < length; i++)\n', '            claimSellerFunds(auctionSellTokens[i], auctionBuyTokens[i], user, auctionIndices[i]);\n', '    }\n', '    //@dev for multiple withdraws\n', '    //@param auctionSellTokens are the sellTokens defining an auctionPair\n', '    //@param auctionBuyTokens are the buyTokens defining an auctionPair\n', '    //@param auctionIndices are the auction indices on which an token should be claimedAmounts\n', '    //@param user is the user who wants to his tokens\n', '    function claimTokensFromSeveralAuctionsAsBuyer(\n', '        address[] auctionSellTokens,\n', '        address[] auctionBuyTokens,\n', '        uint[] auctionIndices,\n', '        address user\n', '    )\n', '        external\n', '    {\n', '        uint length = auctionSellTokens.length;\n', '        uint length2 = auctionBuyTokens.length;\n', '        require(length == length2);\n', '\n', '        uint length3 = auctionIndices.length;\n', '        require(length2 == length3);\n', '\n', '        for (uint i = 0; i < length; i++)\n', '            claimBuyerFunds(auctionSellTokens[i], auctionBuyTokens[i], user, auctionIndices[i]);\n', '    }\n', '\n', '    function getMasterCopy()\n', '        external\n', '        view \n', '        returns (address)\n', '    {\n', '        return masterCopy;\n', '    }\n', '\n', '    // > Events\n', '    event NewDeposit(\n', '         address indexed token,\n', '         uint amount\n', '    );\n', '\n', '    event NewOracleProposal(\n', '         PriceOracleInterface priceOracleInterface\n', '    );\n', '\n', '\n', '    event NewMasterCopyProposal(\n', '         address newMasterCopy\n', '    );\n', '\n', '    event NewWithdrawal(\n', '        address indexed token,\n', '        uint amount\n', '    );\n', '    \n', '    event NewSellOrder(\n', '        address indexed sellToken,\n', '        address indexed buyToken,\n', '        address indexed user,\n', '        uint auctionIndex,\n', '        uint amount\n', '    );\n', '\n', '    event NewBuyOrder(\n', '        address indexed sellToken,\n', '        address indexed buyToken,\n', '        address indexed user,\n', '        uint auctionIndex,\n', '        uint amount\n', '    );\n', '\n', '    event NewSellerFundsClaim(\n', '        address indexed sellToken,\n', '        address indexed buyToken,\n', '        address indexed user,\n', '        uint auctionIndex,\n', '        uint amount,\n', '        uint frtsIssued\n', '    );\n', '\n', '    event NewBuyerFundsClaim(\n', '        address indexed sellToken,\n', '        address indexed buyToken,\n', '        address indexed user,\n', '        uint auctionIndex,\n', '        uint amount,\n', '        uint frtsIssued\n', '    );\n', '\n', '    event NewTokenPair(\n', '        address indexed sellToken,\n', '        address indexed buyToken\n', '    );\n', '\n', '    event AuctionCleared(\n', '        address indexed sellToken,\n', '        address indexed buyToken,\n', '        uint sellVolume,\n', '        uint buyVolume,\n', '        uint indexed auctionIndex\n', '    );\n', '\n', '    event Approval(\n', '        address indexed token,\n', '        bool approved\n', '    );\n', '\n', '    event AuctionStartScheduled(\n', '        address indexed sellToken,\n', '        address indexed buyToken,\n', '        uint indexed auctionIndex,\n', '        uint auctionStart\n', '    );\n', '\n', '    event Fee(\n', '        address indexed primaryToken,\n', '        address indexed secondarToken,\n', '        address indexed user,\n', '        uint auctionIndex,\n', '        uint fee\n', '    );\n', '}']