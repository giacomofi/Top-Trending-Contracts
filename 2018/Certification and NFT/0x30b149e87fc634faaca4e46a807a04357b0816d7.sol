['pragma solidity 0.4.19;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract DiceGameToken is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "DiceGame Token";\n', '    string public constant symbol = "DICE";\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    uint256 private totalSupply_;\n', '\n', '    modifier canTransfer() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '    * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenDeskProxySupport {\n', '    function buyTokens(address sender_, address benefeciary_, uint256 tokenDeskBonus_) external payable;\n', '}\n', '\n', '\n', 'contract TokenDeskProxyAware is TokenDeskProxySupport, Ownable {\n', '\n', '    address private tokenDeskProxy;\n', '\n', '    modifier onlyTokenDeskProxy() {\n', '        require(msg.sender == tokenDeskProxy);\n', '        _;\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public payable {\n', '        internalBuyTokens(msg.sender, beneficiary, 0);\n', '    }\n', '\n', '    function buyTokens(address sender, address beneficiary, uint256 tokenDeskBonus) external payable onlyTokenDeskProxy {\n', '        internalBuyTokens(sender, beneficiary, tokenDeskBonus);\n', '    }\n', '\n', '    function setTokenDeskProxy(address tokenDeskProxy_) public onlyOwner {\n', '        require(tokenDeskProxy_ != address(0));\n', '        tokenDeskProxy = tokenDeskProxy_;\n', '    }\n', '\n', '    function internalBuyTokens(address sender, address beneficiary, uint256 tokenDeskBonus) internal;\n', '}\n', '\n', '\n', '/**\n', ' * The EscrowVault contract collects crowdsale ethers and allows to refund\n', ' * if softcap soft cap is not reached.\n', ' */\n', 'contract EscrowVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, GoalReached, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public beneficiary;\n', '  address public superOwner;\n', '  State public state;\n', '\n', '  event GoalReached();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  event Withdrawal(uint256 weiAmount);\n', '  event Close();\n', '\n', '  function EscrowVault(address _superOwner, address _beneficiary) public {\n', '    require(_beneficiary != address(0));\n', '    require(_superOwner != address(0));\n', '    beneficiary = _beneficiary;\n', '    superOwner = _superOwner;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active || state == State.GoalReached);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function setGoalReached() onlyOwner public {\n', '    require (state == State.Active);\n', '    state = State.GoalReached;\n', '    GoalReached();\n', '  }\n', '\n', '  function withdraw(uint256 _amount) public {\n', '    require(msg.sender == superOwner);\n', '    require(state == State.GoalReached);\n', '    require (_amount <= this.balance &&  _amount > 0);\n', '    beneficiary.transfer(_amount);\n', '    Withdrawal(_amount);\n', '  }\n', '\n', '  function withdrawAll() onlyOwner public {\n', '    require(state == State.GoalReached);\n', '    uint256 balance = this.balance;\n', '    Withdrawal(balance);\n', '    beneficiary.transfer(balance);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require (state == State.GoalReached);\n', '    withdrawAll();\n', '    state = State.Closed;\n', '    Close();\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract DiceGameCrowdsale is TokenDeskProxyAware {\n', '    using SafeMath for uint256;\n', '    // Wallet where all ether will be moved after escrow withdrawal. Can be even multisig wallet\n', '    address public constant WALLET = 0x15c6833A25AFDFd4d9BfE7524A731aaF65Ff1006;\n', '    // Wallet for team tokens\n', '    address public constant TEAM_WALLET = 0xf2f74443Be9314910a27495E47D9221b0DfCBD2f;\n', '    // Wallet for first tournament tokens\n', '    address public constant TOURNAMENT_WALLET = 0xc102b79F40736B7d96b31279a7e696535Cef7142;\n', '    // Wallet for company tokens\n', '    address public constant COMPANY_WALLET = 0x937f9187394F44D39e207C971103b23659Ec09c0;\n', '    // Wallet for bounty tokens\n', '    address public constant BOUNTY_WALLET = 0x7BEe48014C2D857C0Ef0126e3c6a3f5B718cC40f;\n', '    // Wallet for bounty tokens\n', '    address public constant ADVISORS_WALLET = 0x15a40F3A28a7409c0eF9a144a16bE354566221AD;\n', '\n', '    uint256 public constant TEAM_TOKENS_LOCK_PERIOD = 60 * 60 * 24 * 365; // 365 days\n', '    uint256 public constant COMPANY_TOKENS_LOCK_PERIOD = 60 * 60 * 24 * 180; // 180 days\n', '    uint256 public constant SOFT_CAP = 42000000e18; // 42 000 000\n', '    uint256 public constant ICO_TOKENS = 210000000e18; // 147 000 000\n', '    uint256 public constant START_TIME = 1524830400; // 2018-04-27 12:00 UTC +0\n', '    uint256 public constant RATE = 10000;  // 0.0001 ETH\n', '    uint256 public constant LARGE_PURCHASE = 12000e18; // 12 000 tokens\n', '\n', '    uint256 public icoEndTime = 1534420800; // 2018-08-16 12:00 12:00 UTC +0\n', '    uint8 public constant ICO_TOKENS_PERCENT = 70;\n', '    uint8 public constant TEAM_TOKENS_PERCENT = 12;\n', '    uint8 public constant COMPANY_TOKENS_PERCENT = 7;\n', '    uint8 public constant TOURNAMENT_TOKENS_PERCENT = 5;\n', '    uint8 public constant BOUNTY_TOKENS_PERCENT = 3;\n', '    uint8 public constant ADVISORS_TOKENS_PERCENT = 3;\n', '\n', '    uint8 public constant LARGE_PURCHASE_BONUS = 5;\n', '\n', '    Stage[] internal stages;\n', '\n', '    struct Stage {\n', '        uint256 cap;\n', '        uint64 till;\n', '        uint8 bonus;\n', '    }\n', '\n', '    // The token being sold\n', '    DiceGameToken public token;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    // refund vault used to hold funds while crowdsale is running\n', '    EscrowVault public vault;\n', '\n', '    uint256 public currentStage = 0;\n', '    bool public isFinalized = false;\n', '\n', '    address private tokenMinter;\n', '\n', '    TokenTimelock public teamTimelock;\n', '    TokenTimelock public companyTimelock;\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    event Finalized();\n', '    /**\n', '     * When there no tokens left to mint and token minter tries to manually mint tokens\n', '     * this event is raised to signal how many tokens we have to charge back to purchaser\n', '     */\n', '    event ManualTokenMintRequiresRefund(address indexed purchaser, uint256 value);\n', '\n', '    function DiceGameCrowdsale(address _token) public {\n', '        stages.push(Stage({ till: 1526385600, bonus: 40, cap: 20000000e18 }));    // 2018-05-15 12:00 UTC +0\n', '        stages.push(Stage({ till: 1527681600, bonus: 30, cap: 30000000e18 }));    // 2018-05-30 12:00 UTC +0\n', '        stages.push(Stage({ till: 1528977600, bonus: 20, cap: 30000000e18 }));    // 2018-06-14 12:00 UTC +0\n', '        stages.push(Stage({ till: 1530273600, bonus: 15, cap: 30000000e18 }));    // 2018-06-29 12:00 UTC +0\n', '        stages.push(Stage({ till: 1531656000, bonus: 10, cap: 30000000e18 }));    // 2018-07-15 12:00 UTC +0\n', '        stages.push(Stage({ till: ~uint64(0), bonus: 0, cap: 70000000e18 }));     // unlimited\n', '\n', '        token = DiceGameToken(_token);\n', '        vault = new EscrowVault(msg.sender, WALLET);  // Wallet where all ether will be stored during ICO\n', '    }\n', '\n', '    modifier onlyTokenMinterOrOwner() {\n', '        require(msg.sender == tokenMinter || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function internalBuyTokens(address sender, address beneficiary, uint256 tokenDeskBonus) internal {\n', '        require(beneficiary != address(0));\n', '        require(sender != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 nowTime = getNow();\n', '        // this loop moves stages and ensures correct stage according to date\n', '        while (currentStage < stages.length && stages[currentStage].till < nowTime) {\n', '            // move all unsold tokens to next stage\n', '            uint256 nextStage = currentStage.add(1);\n', '            stages[nextStage].cap = stages[nextStage].cap.add(stages[currentStage].cap);\n', '            stages[currentStage].cap = 0;\n', '            currentStage = nextStage;\n', '        }\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = calculateTokens(weiAmount, tokenDeskBonus);\n', '\n', '        uint256 excess = appendContribution(beneficiary, tokens);\n', '        uint256 refund = (excess > 0 ? excess.mul(weiAmount).div(tokens) : 0);\n', '        weiAmount = weiAmount.sub(refund);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        if (refund > 0) { // hard cap reached, no more tokens to mint\n', '            sender.transfer(refund);\n', '        }\n', '\n', '        TokenPurchase(sender, beneficiary, weiAmount, tokens.sub(excess));\n', '\n', '        if (goalReached() && vault.state() == EscrowVault.State.Active) {\n', '            vault.setGoalReached();\n', '        }\n', '        vault.deposit.value(weiAmount)(sender);\n', '    }\n', '\n', '    function calculateTokens(uint256 _weiAmount, uint256 _tokenDeskBonus) internal view returns (uint256) {\n', '        uint256 tokens = _weiAmount.mul(RATE);\n', '\n', '        if (stages[currentStage].bonus > 0) {\n', '            uint256 stageBonus = tokens.mul(stages[currentStage].bonus).div(100);\n', '            tokens = tokens.add(stageBonus);\n', '        }\n', '\n', '        if (currentStage < 1) return tokens;\n', '\n', '        uint256 bonus = _tokenDeskBonus.add(tokens >= LARGE_PURCHASE ? LARGE_PURCHASE_BONUS : 0);\n', '        return tokens.add(tokens.mul(bonus).div(100));\n', '    }\n', '\n', '    function appendContribution(address _beneficiary, uint256 _tokens) internal returns (uint256) {\n', '        uint256 excess = _tokens;\n', '        uint256 tokensToMint = 0;\n', '\n', '        while (excess > 0 && currentStage < stages.length) {\n', '            Stage storage stage = stages[currentStage];\n', '            if (excess >= stage.cap) {\n', '                excess = excess.sub(stage.cap);\n', '                tokensToMint = tokensToMint.add(stage.cap);\n', '                stage.cap = 0;\n', '                currentStage = currentStage.add(1);\n', '            } else {\n', '                stage.cap = stage.cap.sub(excess);\n', '                tokensToMint = tokensToMint.add(excess);\n', '                excess = 0;\n', '            }\n', '        }\n', '        if (tokensToMint > 0) {\n', '            token.mint(_beneficiary, tokensToMint);\n', '        }\n', '        return excess;\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        bool withinPeriod = getNow() >= START_TIME && getNow() <= icoEndTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool canMint = token.totalSupply() < ICO_TOKENS;\n', '        bool validStage = (currentStage < stages.length);\n', '        return withinPeriod && nonZeroPurchase && canMint && validStage;\n', '    }\n', '\n', '    // if crowdsale is unsuccessful, investors can claim refunds here\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', '    * work. Calls the contract&#39;s finalization function.\n', '    */\n', '    function finalize() public onlyOwner {\n', '        require(!isFinalized);\n', '        require(getNow() > icoEndTime || token.totalSupply() == ICO_TOKENS);\n', '\n', '        if (goalReached()) {\n', '            // Close escrowVault and transfer all collected ethers into WALLET address\n', '            if (vault.state() != EscrowVault.State.Closed) {\n', '                vault.close();\n', '            }\n', '\n', '            uint256 totalSupply = token.totalSupply();\n', '\n', '            teamTimelock = new TokenTimelock(token, TEAM_WALLET, getNow().add(TEAM_TOKENS_LOCK_PERIOD));\n', '            token.mint(teamTimelock, uint256(TEAM_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT));\n', '\n', '            companyTimelock = new TokenTimelock(token, COMPANY_WALLET, getNow().add(COMPANY_TOKENS_LOCK_PERIOD));\n', '            token.mint(companyTimelock, uint256(COMPANY_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT));\n', '\n', '            token.mint(TOURNAMENT_WALLET, uint256(TOURNAMENT_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT));\n', '\n', '            token.mint(BOUNTY_WALLET, uint256(BOUNTY_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT));\n', '            \n', '            token.mint(ADVISORS_WALLET, uint256(ADVISORS_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT));\n', '\n', '            token.finishMinting();\n', '            token.transferOwnership(token);\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '        Finalized();\n', '        isFinalized = true;\n', '    }\n', '\n', '    function goalReached() public view returns (bool) {\n', '        return token.totalSupply() >= SOFT_CAP;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens or claim refund\n', '    function () external payable {\n', '        if (!isFinalized) {\n', '            buyTokens(msg.sender);\n', '        } else {\n', '            claimRefund();\n', '        }\n', '    }\n', '\n', '    function mintTokens(address[] _receivers, uint256[] _amounts) external onlyTokenMinterOrOwner {\n', '        require(_receivers.length > 0 && _receivers.length <= 100);\n', '        require(_receivers.length == _amounts.length);\n', '        require(!isFinalized);\n', '        for (uint256 i = 0; i < _receivers.length; i++) {\n', '            address receiver = _receivers[i];\n', '            uint256 amount = _amounts[i];\n', '\n', '            require(receiver != address(0));\n', '            require(amount > 0);\n', '\n', '            uint256 excess = appendContribution(receiver, amount);\n', '\n', '            if (excess > 0) {\n', '                ManualTokenMintRequiresRefund(receiver, excess);\n', '            }\n', '        }\n', '    }\n', '\n', '    function setIcoEndTime(uint256 _endTime) public onlyOwner {\n', '        require(_endTime > START_TIME && _endTime > getNow());\n', '        icoEndTime = _endTime;\n', '    }\n', '\n', '    function setTokenMinter(address _tokenMinter) public onlyOwner {\n', '        require(_tokenMinter != address(0));\n', '        tokenMinter = _tokenMinter;\n', '    }\n', '\n', '    function getNow() internal view returns (uint256) {\n', '        return now;\n', '    }\n', '}']
['pragma solidity 0.4.19;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    require(_releaseTime > now);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    require(now >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract DiceGameToken is ERC20, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "DiceGame Token";\n', '    string public constant symbol = "DICE";\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping (address => uint256) private balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    uint256 private totalSupply_;\n', '\n', '    modifier canTransfer() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public canTransfer returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '    *\n', '    * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '    * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "    * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _value The amount of tokens to be spent.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '    * @param _owner address The address which owns the funds.\n', '    * @param _spender address The address which will spend the funds.\n', '    * @return A uint256 specifying the amount of tokens still available for the spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To increment\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _addedValue The amount of tokens to increase the allowance by.\n', '    */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '    *\n', '    * approve should be called when allowed[_spender] == 0. To decrement\n', '    * allowed value is better to use this function to avoid 2 calls (and wait until\n', '    * the first transaction is mined)\n', '    * From MonolithDAO Token.sol\n', '    * @param _spender The address which will spend the funds.\n', '    * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '    */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to mint tokens\n', '    * @param _to The address that will receive the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '    */\n', '    function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to stop minting new tokens.\n', '    * @return True if the operation was successful.\n', '    */\n', '    function finishMinting() public onlyOwner canMint returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenDeskProxySupport {\n', '    function buyTokens(address sender_, address benefeciary_, uint256 tokenDeskBonus_) external payable;\n', '}\n', '\n', '\n', 'contract TokenDeskProxyAware is TokenDeskProxySupport, Ownable {\n', '\n', '    address private tokenDeskProxy;\n', '\n', '    modifier onlyTokenDeskProxy() {\n', '        require(msg.sender == tokenDeskProxy);\n', '        _;\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public payable {\n', '        internalBuyTokens(msg.sender, beneficiary, 0);\n', '    }\n', '\n', '    function buyTokens(address sender, address beneficiary, uint256 tokenDeskBonus) external payable onlyTokenDeskProxy {\n', '        internalBuyTokens(sender, beneficiary, tokenDeskBonus);\n', '    }\n', '\n', '    function setTokenDeskProxy(address tokenDeskProxy_) public onlyOwner {\n', '        require(tokenDeskProxy_ != address(0));\n', '        tokenDeskProxy = tokenDeskProxy_;\n', '    }\n', '\n', '    function internalBuyTokens(address sender, address beneficiary, uint256 tokenDeskBonus) internal;\n', '}\n', '\n', '\n', '/**\n', ' * The EscrowVault contract collects crowdsale ethers and allows to refund\n', ' * if softcap soft cap is not reached.\n', ' */\n', 'contract EscrowVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, GoalReached, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public beneficiary;\n', '  address public superOwner;\n', '  State public state;\n', '\n', '  event GoalReached();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  event Withdrawal(uint256 weiAmount);\n', '  event Close();\n', '\n', '  function EscrowVault(address _superOwner, address _beneficiary) public {\n', '    require(_beneficiary != address(0));\n', '    require(_superOwner != address(0));\n', '    beneficiary = _beneficiary;\n', '    superOwner = _superOwner;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active || state == State.GoalReached);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function setGoalReached() onlyOwner public {\n', '    require (state == State.Active);\n', '    state = State.GoalReached;\n', '    GoalReached();\n', '  }\n', '\n', '  function withdraw(uint256 _amount) public {\n', '    require(msg.sender == superOwner);\n', '    require(state == State.GoalReached);\n', '    require (_amount <= this.balance &&  _amount > 0);\n', '    beneficiary.transfer(_amount);\n', '    Withdrawal(_amount);\n', '  }\n', '\n', '  function withdrawAll() onlyOwner public {\n', '    require(state == State.GoalReached);\n', '    uint256 balance = this.balance;\n', '    Withdrawal(balance);\n', '    beneficiary.transfer(balance);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require (state == State.GoalReached);\n', '    withdrawAll();\n', '    state = State.Closed;\n', '    Close();\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', '\n', 'contract DiceGameCrowdsale is TokenDeskProxyAware {\n', '    using SafeMath for uint256;\n', '    // Wallet where all ether will be moved after escrow withdrawal. Can be even multisig wallet\n', '    address public constant WALLET = 0x15c6833A25AFDFd4d9BfE7524A731aaF65Ff1006;\n', '    // Wallet for team tokens\n', '    address public constant TEAM_WALLET = 0xf2f74443Be9314910a27495E47D9221b0DfCBD2f;\n', '    // Wallet for first tournament tokens\n', '    address public constant TOURNAMENT_WALLET = 0xc102b79F40736B7d96b31279a7e696535Cef7142;\n', '    // Wallet for company tokens\n', '    address public constant COMPANY_WALLET = 0x937f9187394F44D39e207C971103b23659Ec09c0;\n', '    // Wallet for bounty tokens\n', '    address public constant BOUNTY_WALLET = 0x7BEe48014C2D857C0Ef0126e3c6a3f5B718cC40f;\n', '    // Wallet for bounty tokens\n', '    address public constant ADVISORS_WALLET = 0x15a40F3A28a7409c0eF9a144a16bE354566221AD;\n', '\n', '    uint256 public constant TEAM_TOKENS_LOCK_PERIOD = 60 * 60 * 24 * 365; // 365 days\n', '    uint256 public constant COMPANY_TOKENS_LOCK_PERIOD = 60 * 60 * 24 * 180; // 180 days\n', '    uint256 public constant SOFT_CAP = 42000000e18; // 42 000 000\n', '    uint256 public constant ICO_TOKENS = 210000000e18; // 147 000 000\n', '    uint256 public constant START_TIME = 1524830400; // 2018-04-27 12:00 UTC +0\n', '    uint256 public constant RATE = 10000;  // 0.0001 ETH\n', '    uint256 public constant LARGE_PURCHASE = 12000e18; // 12 000 tokens\n', '\n', '    uint256 public icoEndTime = 1534420800; // 2018-08-16 12:00 12:00 UTC +0\n', '    uint8 public constant ICO_TOKENS_PERCENT = 70;\n', '    uint8 public constant TEAM_TOKENS_PERCENT = 12;\n', '    uint8 public constant COMPANY_TOKENS_PERCENT = 7;\n', '    uint8 public constant TOURNAMENT_TOKENS_PERCENT = 5;\n', '    uint8 public constant BOUNTY_TOKENS_PERCENT = 3;\n', '    uint8 public constant ADVISORS_TOKENS_PERCENT = 3;\n', '\n', '    uint8 public constant LARGE_PURCHASE_BONUS = 5;\n', '\n', '    Stage[] internal stages;\n', '\n', '    struct Stage {\n', '        uint256 cap;\n', '        uint64 till;\n', '        uint8 bonus;\n', '    }\n', '\n', '    // The token being sold\n', '    DiceGameToken public token;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    // refund vault used to hold funds while crowdsale is running\n', '    EscrowVault public vault;\n', '\n', '    uint256 public currentStage = 0;\n', '    bool public isFinalized = false;\n', '\n', '    address private tokenMinter;\n', '\n', '    TokenTimelock public teamTimelock;\n', '    TokenTimelock public companyTimelock;\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    event Finalized();\n', '    /**\n', '     * When there no tokens left to mint and token minter tries to manually mint tokens\n', '     * this event is raised to signal how many tokens we have to charge back to purchaser\n', '     */\n', '    event ManualTokenMintRequiresRefund(address indexed purchaser, uint256 value);\n', '\n', '    function DiceGameCrowdsale(address _token) public {\n', '        stages.push(Stage({ till: 1526385600, bonus: 40, cap: 20000000e18 }));    // 2018-05-15 12:00 UTC +0\n', '        stages.push(Stage({ till: 1527681600, bonus: 30, cap: 30000000e18 }));    // 2018-05-30 12:00 UTC +0\n', '        stages.push(Stage({ till: 1528977600, bonus: 20, cap: 30000000e18 }));    // 2018-06-14 12:00 UTC +0\n', '        stages.push(Stage({ till: 1530273600, bonus: 15, cap: 30000000e18 }));    // 2018-06-29 12:00 UTC +0\n', '        stages.push(Stage({ till: 1531656000, bonus: 10, cap: 30000000e18 }));    // 2018-07-15 12:00 UTC +0\n', '        stages.push(Stage({ till: ~uint64(0), bonus: 0, cap: 70000000e18 }));     // unlimited\n', '\n', '        token = DiceGameToken(_token);\n', '        vault = new EscrowVault(msg.sender, WALLET);  // Wallet where all ether will be stored during ICO\n', '    }\n', '\n', '    modifier onlyTokenMinterOrOwner() {\n', '        require(msg.sender == tokenMinter || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function internalBuyTokens(address sender, address beneficiary, uint256 tokenDeskBonus) internal {\n', '        require(beneficiary != address(0));\n', '        require(sender != address(0));\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 nowTime = getNow();\n', '        // this loop moves stages and ensures correct stage according to date\n', '        while (currentStage < stages.length && stages[currentStage].till < nowTime) {\n', '            // move all unsold tokens to next stage\n', '            uint256 nextStage = currentStage.add(1);\n', '            stages[nextStage].cap = stages[nextStage].cap.add(stages[currentStage].cap);\n', '            stages[currentStage].cap = 0;\n', '            currentStage = nextStage;\n', '        }\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = calculateTokens(weiAmount, tokenDeskBonus);\n', '\n', '        uint256 excess = appendContribution(beneficiary, tokens);\n', '        uint256 refund = (excess > 0 ? excess.mul(weiAmount).div(tokens) : 0);\n', '        weiAmount = weiAmount.sub(refund);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        if (refund > 0) { // hard cap reached, no more tokens to mint\n', '            sender.transfer(refund);\n', '        }\n', '\n', '        TokenPurchase(sender, beneficiary, weiAmount, tokens.sub(excess));\n', '\n', '        if (goalReached() && vault.state() == EscrowVault.State.Active) {\n', '            vault.setGoalReached();\n', '        }\n', '        vault.deposit.value(weiAmount)(sender);\n', '    }\n', '\n', '    function calculateTokens(uint256 _weiAmount, uint256 _tokenDeskBonus) internal view returns (uint256) {\n', '        uint256 tokens = _weiAmount.mul(RATE);\n', '\n', '        if (stages[currentStage].bonus > 0) {\n', '            uint256 stageBonus = tokens.mul(stages[currentStage].bonus).div(100);\n', '            tokens = tokens.add(stageBonus);\n', '        }\n', '\n', '        if (currentStage < 1) return tokens;\n', '\n', '        uint256 bonus = _tokenDeskBonus.add(tokens >= LARGE_PURCHASE ? LARGE_PURCHASE_BONUS : 0);\n', '        return tokens.add(tokens.mul(bonus).div(100));\n', '    }\n', '\n', '    function appendContribution(address _beneficiary, uint256 _tokens) internal returns (uint256) {\n', '        uint256 excess = _tokens;\n', '        uint256 tokensToMint = 0;\n', '\n', '        while (excess > 0 && currentStage < stages.length) {\n', '            Stage storage stage = stages[currentStage];\n', '            if (excess >= stage.cap) {\n', '                excess = excess.sub(stage.cap);\n', '                tokensToMint = tokensToMint.add(stage.cap);\n', '                stage.cap = 0;\n', '                currentStage = currentStage.add(1);\n', '            } else {\n', '                stage.cap = stage.cap.sub(excess);\n', '                tokensToMint = tokensToMint.add(excess);\n', '                excess = 0;\n', '            }\n', '        }\n', '        if (tokensToMint > 0) {\n', '            token.mint(_beneficiary, tokensToMint);\n', '        }\n', '        return excess;\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal view returns (bool) {\n', '        bool withinPeriod = getNow() >= START_TIME && getNow() <= icoEndTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool canMint = token.totalSupply() < ICO_TOKENS;\n', '        bool validStage = (currentStage < stages.length);\n', '        return withinPeriod && nonZeroPurchase && canMint && validStage;\n', '    }\n', '\n', '    // if crowdsale is unsuccessful, investors can claim refunds here\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Must be called after crowdsale ends, to do some extra finalization\n', "    * work. Calls the contract's finalization function.\n", '    */\n', '    function finalize() public onlyOwner {\n', '        require(!isFinalized);\n', '        require(getNow() > icoEndTime || token.totalSupply() == ICO_TOKENS);\n', '\n', '        if (goalReached()) {\n', '            // Close escrowVault and transfer all collected ethers into WALLET address\n', '            if (vault.state() != EscrowVault.State.Closed) {\n', '                vault.close();\n', '            }\n', '\n', '            uint256 totalSupply = token.totalSupply();\n', '\n', '            teamTimelock = new TokenTimelock(token, TEAM_WALLET, getNow().add(TEAM_TOKENS_LOCK_PERIOD));\n', '            token.mint(teamTimelock, uint256(TEAM_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT));\n', '\n', '            companyTimelock = new TokenTimelock(token, COMPANY_WALLET, getNow().add(COMPANY_TOKENS_LOCK_PERIOD));\n', '            token.mint(companyTimelock, uint256(COMPANY_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT));\n', '\n', '            token.mint(TOURNAMENT_WALLET, uint256(TOURNAMENT_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT));\n', '\n', '            token.mint(BOUNTY_WALLET, uint256(BOUNTY_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT));\n', '            \n', '            token.mint(ADVISORS_WALLET, uint256(ADVISORS_TOKENS_PERCENT).mul(totalSupply).div(ICO_TOKENS_PERCENT));\n', '\n', '            token.finishMinting();\n', '            token.transferOwnership(token);\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '        Finalized();\n', '        isFinalized = true;\n', '    }\n', '\n', '    function goalReached() public view returns (bool) {\n', '        return token.totalSupply() >= SOFT_CAP;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens or claim refund\n', '    function () external payable {\n', '        if (!isFinalized) {\n', '            buyTokens(msg.sender);\n', '        } else {\n', '            claimRefund();\n', '        }\n', '    }\n', '\n', '    function mintTokens(address[] _receivers, uint256[] _amounts) external onlyTokenMinterOrOwner {\n', '        require(_receivers.length > 0 && _receivers.length <= 100);\n', '        require(_receivers.length == _amounts.length);\n', '        require(!isFinalized);\n', '        for (uint256 i = 0; i < _receivers.length; i++) {\n', '            address receiver = _receivers[i];\n', '            uint256 amount = _amounts[i];\n', '\n', '            require(receiver != address(0));\n', '            require(amount > 0);\n', '\n', '            uint256 excess = appendContribution(receiver, amount);\n', '\n', '            if (excess > 0) {\n', '                ManualTokenMintRequiresRefund(receiver, excess);\n', '            }\n', '        }\n', '    }\n', '\n', '    function setIcoEndTime(uint256 _endTime) public onlyOwner {\n', '        require(_endTime > START_TIME && _endTime > getNow());\n', '        icoEndTime = _endTime;\n', '    }\n', '\n', '    function setTokenMinter(address _tokenMinter) public onlyOwner {\n', '        require(_tokenMinter != address(0));\n', '        tokenMinter = _tokenMinter;\n', '    }\n', '\n', '    function getNow() internal view returns (uint256) {\n', '        return now;\n', '    }\n', '}']
