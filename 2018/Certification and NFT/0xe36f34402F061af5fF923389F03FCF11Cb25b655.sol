['pragma solidity ^0.4.17;\n', '\n', '/// @title Base Token contract - Functions to be implemented by token contracts.\n', 'contract BaseToken {\n', '    /*\n', '     * Implements ERC 20 standard.\n', '     * https://github.com/ethereum/EIPs/blob/f90864a3d2b2b45c4decf95efd26b3f0c276051a/EIPS/eip-20-token-standard.md\n', '     * https://github.com/ethereum/EIPs/issues/20\n', '     *\n', '     *  Added support for the ERC 223 "tokenFallback" method in a "transfer" function with a payload.\n', '     *  https://github.com/ethereum/EIPs/issues/223\n', '     */\n', '\n', '    /*\n', '     * This is a slight change to the ERC20 base standard.\n', '     * function totalSupply() constant returns (uint256 supply);\n', '     * is replaced with:\n', '     * uint256 public totalSupply;\n', '     * This automatically creates a getter function for the totalSupply.\n', '     * This is moved to the base contract since public getter functions are not\n', '     * currently recognised as an implementation of the matching abstract\n', '     * function by the compiler.\n', '     */\n', '    uint256 public totalSupply;\n', '\n', '    /*\n', '     * ERC 20\n', '     */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    /*\n', '     * ERC 223\n', '     */\n', '    function transfer(address _to, uint256 _value, bytes _data) public returns (bool success);\n', '\n', '    /*\n', '     * Events\n', '     */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    // There is no ERC223 compatible Transfer event, with `_data` included.\n', '}\n', '\n', '\n', ' /*\n', ' * Contract that is working with ERC223 tokens\n', ' * https://github.com/ethereum/EIPs/issues/223\n', ' */\n', '\n', '/// @title ERC223ReceivingContract - Standard contract implementation for compatibility with ERC223 tokens.\n', 'contract ERC223ReceivingContract {\n', '\n', '    /// @dev Function that is called when a user or another contract wants to transfer funds.\n', '    /// @param _from Transaction initiator, analogue of msg.sender\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @param _data Data containig a function signature and/or parameters\n', '    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n', '}\n', '\n', '\n', '/// @title Standard token contract - Standard token implementation.\n', 'contract StandardToken is BaseToken {\n', '\n', '    /*\n', '     * Data structures\n', '     */\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    /*\n', '     * Public functions\n', '     */\n', '    /// @notice Send `_value` tokens to `_to` from `msg.sender`.\n', '    /// @dev Transfers sender&#39;s tokens to a given address. Returns success.\n', '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @return Returns success of function call.\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != 0x0);\n', '        require(_to != address(this));\n', '        require(balances[msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_value` tokens to `_to` from `msg.sender` and trigger\n', '    /// tokenFallback if sender is a contract.\n', '    /// @dev Function that is called when a user or another contract wants to transfer funds.\n', '    /// @param _to Address of token receiver.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @param _data Data to be sent to tokenFallback\n', '    /// @return Returns success of function call.\n', '    function transfer(\n', '        address _to,\n', '        uint256 _value,\n', '        bytes _data)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(transfer(_to, _value));\n', '\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly.\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        if (codeLength > 0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @notice Transfer `_value` tokens from `_from` to `_to` if `msg.sender` is allowed.\n', '    /// @dev Allows for an approved third party to transfer tokens from one\n', '    /// address to another. Returns success.\n', '    /// @param _from Address from where tokens are withdrawn.\n', '    /// @param _to Address to where tokens are sent.\n', '    /// @param _value Number of tokens to transfer.\n', '    /// @return Returns success of function call.\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_from != 0x0);\n', '        require(_to != 0x0);\n', '        require(_to != address(this));\n', '        require(balances[_from] >= _value);\n', '        require(allowed[_from][msg.sender] >= _value);\n', '        require(balances[_to] + _value >= balances[_to]);\n', '\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        allowed[_from][msg.sender] -= _value;\n', '\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @notice Allows `_spender` to transfer `_value` tokens from `msg.sender` to any address.\n', '    /// @dev Sets approved amount of tokens for spender. Returns success.\n', '    /// @param _spender Address of allowed account.\n', '    /// @param _value Number of approved tokens.\n', '    /// @return Returns success of function call.\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(_spender != 0x0);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        // allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        // already 0 to mitigate the race condition described here:\n', '        // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require(_value == 0 || allowed[msg.sender][_spender] == 0);\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*\n', '     * Read functions\n', '     */\n', '    /// @dev Returns number of allowed tokens that a spender can transfer on\n', '    /// behalf of a token owner.\n', '    /// @param _owner Address of token owner.\n', '    /// @param _spender Address of token spender.\n', '    /// @return Returns remaining allowance for spender.\n', '    function allowance(address _owner, address _spender)\n', '        constant\n', '        public\n', '        returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @dev Returns number of tokens owned by the given address.\n', '    /// @param _owner Address of token owner.\n', '    /// @return Returns balance of owner.\n', '    function balanceOf(address _owner) constant public returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', 'contract Moneto is StandardToken {\n', '  \n', '  string public name = "Moneto";\n', '  string public symbol = "MTO";\n', '  uint8 public decimals = 18;\n', '\n', '  function Moneto(address saleAddress) public {\n', '    require(saleAddress != 0x0);\n', '\n', '    totalSupply = 42901786 * 10**18;\n', '    balances[saleAddress] = totalSupply;\n', '    emit Transfer(0x0, saleAddress, totalSupply);\n', '\n', '    assert(totalSupply == balances[saleAddress]);\n', '  }\n', '\n', '  function burn(uint num) public {\n', '    require(num > 0);\n', '    require(balances[msg.sender] >= num);\n', '    require(totalSupply >= num);\n', '\n', '    uint preBalance = balances[msg.sender];\n', '\n', '    balances[msg.sender] -= num;\n', '    totalSupply -= num;\n', '    emit Transfer(msg.sender, 0x0, num);\n', '\n', '    assert(balances[msg.sender] == preBalance - num);\n', '  }\n', '}\n', '\n', '\n', 'contract MonetoSale {\n', '    Moneto public token;\n', '\n', '    address public beneficiary;\n', '    address public alfatokenteam;\n', '    uint public alfatokenFee;\n', '    \n', '    uint public amountRaised;\n', '    uint public tokenSold;\n', '    \n', '    uint public constant PRE_SALE_START = 1523952000; // 17 April 2018, 08:00:00 GMT\n', '    uint public constant PRE_SALE_END = 1526543999; // 17 May 2018, 07:59:59 GMT\n', '    uint public constant SALE_START = 1528617600; // 10 June 2018,08:00:00 GMT\n', '    uint public constant SALE_END = 1531209599; // 10 July 2018, 07:59:59 GMT\n', '\n', '    uint public constant PRE_SALE_MAX_CAP = 2531250 * 10**18;\n', '    uint public constant SALE_MAX_CAP = 300312502 * 10**17;\n', '\n', '    uint public constant SALE_MIN_CAP = 2500 ether;\n', '\n', '    uint public constant PRE_SALE_PRICE = 1250;\n', '    uint public constant SALE_PRICE = 1000;\n', '\n', '    uint public constant PRE_SALE_MIN_BUY = 10 * 10**18;\n', '    uint public constant SALE_MIN_BUY = 1 * 10**18;\n', '\n', '    uint public constant PRE_SALE_1WEEK_BONUS = 35;\n', '    uint public constant PRE_SALE_2WEEK_BONUS = 15;\n', '    uint public constant PRE_SALE_3WEEK_BONUS = 5;\n', '    uint public constant PRE_SALE_4WEEK_BONUS = 0;\n', '\n', '    uint public constant SALE_1WEEK_BONUS = 10;\n', '    uint public constant SALE_2WEEK_BONUS = 7;\n', '    uint public constant SALE_3WEEK_BONUS = 5;\n', '    uint public constant SALE_4WEEK_BONUS = 3;\n', '    \n', '    mapping (address => uint) public icoBuyers;\n', '\n', '    Stages public stage;\n', '    \n', '    enum Stages {\n', '        Deployed,\n', '        Ready,\n', '        Ended,\n', '        Canceled\n', '    }\n', '    \n', '    modifier atStage(Stages _stage) {\n', '        require(stage == _stage);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\n', '    function MonetoSale(address _beneficiary, address _alfatokenteam) public {\n', '        beneficiary = _beneficiary;\n', '        alfatokenteam = _alfatokenteam;\n', '        alfatokenFee = 5 ether;\n', '\n', '        stage = Stages.Deployed;\n', '    }\n', '\n', '    function setup(address _token) public isOwner atStage(Stages.Deployed) {\n', '        require(_token != 0x0);\n', '        token = Moneto(_token);\n', '\n', '        stage = Stages.Ready;\n', '    }\n', '\n', '    function () payable public atStage(Stages.Ready) {\n', '        require((now >= PRE_SALE_START && now <= PRE_SALE_END) || (now >= SALE_START && now <= SALE_END));\n', '\n', '        uint amount = msg.value;\n', '        amountRaised += amount;\n', '\n', '        if (now >= SALE_START && now <= SALE_END) {\n', '            assert(icoBuyers[msg.sender] + msg.value >= msg.value);\n', '            icoBuyers[msg.sender] += amount;\n', '        }\n', '        \n', '        uint tokenAmount = amount * getPrice();\n', '        require(tokenAmount > getMinimumAmount());\n', '        uint allTokens = tokenAmount + getBonus(tokenAmount);\n', '        tokenSold += allTokens;\n', '\n', '        if (now >= PRE_SALE_START && now <= PRE_SALE_END) {\n', '            require(tokenSold <= PRE_SALE_MAX_CAP);\n', '        }\n', '        if (now >= SALE_START && now <= SALE_END) {\n', '            require(tokenSold <= SALE_MAX_CAP);\n', '        }\n', '\n', '        token.transfer(msg.sender, allTokens);\n', '    }\n', '\n', '    function transferEther(address _to, uint _amount) public isOwner {\n', '        require(_amount <= address(this).balance - alfatokenFee);\n', '        require(now < SALE_START || stage == Stages.Ended);\n', '        \n', '        _to.transfer(_amount);\n', '    }\n', '\n', '    function transferFee(address _to, uint _amount) public {\n', '        require(msg.sender == alfatokenteam);\n', '        require(_amount <= alfatokenFee);\n', '\n', '        alfatokenFee -= _amount;\n', '        _to.transfer(_amount);\n', '    }\n', '\n', '    function endSale(address _to) public isOwner {\n', '        require(amountRaised >= SALE_MIN_CAP);\n', '\n', '        token.transfer(_to, tokenSold*3/7);\n', '        token.burn(token.balanceOf(address(this)));\n', '\n', '        stage = Stages.Ended;\n', '    }\n', '\n', '    function cancelSale() public {\n', '        require(amountRaised < SALE_MIN_CAP);\n', '        require(now > SALE_END);\n', '\n', '        stage = Stages.Canceled;\n', '    }\n', '\n', '    function takeEtherBack() public atStage(Stages.Canceled) returns (bool) {\n', '        return proxyTakeEtherBack(msg.sender);\n', '    }\n', '\n', '    function proxyTakeEtherBack(address receiverAddress) public atStage(Stages.Canceled) returns (bool) {\n', '        require(receiverAddress != 0x0);\n', '        \n', '        if (icoBuyers[receiverAddress] == 0) {\n', '            return false;\n', '        }\n', '\n', '        uint amount = icoBuyers[receiverAddress];\n', '        icoBuyers[receiverAddress] = 0;\n', '        receiverAddress.transfer(amount);\n', '\n', '        assert(icoBuyers[receiverAddress] == 0);\n', '        return true;\n', '    }\n', '\n', '    function getBonus(uint amount) public view returns (uint) {\n', '        if (now >= PRE_SALE_START && now <= PRE_SALE_END) {\n', '            uint w = now - PRE_SALE_START;\n', '            if (w <= 1 weeks) {\n', '                return amount * PRE_SALE_1WEEK_BONUS/100;\n', '            }\n', '            if (w > 1 weeks && w <= 2 weeks) {\n', '                return amount * PRE_SALE_2WEEK_BONUS/100;\n', '            }\n', '            if (w > 2 weeks && w <= 3 weeks) {\n', '                return amount * PRE_SALE_3WEEK_BONUS/100;\n', '            }\n', '            if (w > 3 weeks && w <= 4 weeks) {\n', '                return amount * PRE_SALE_4WEEK_BONUS/100;\n', '            }\n', '            return 0;\n', '        }\n', '        if (now >= SALE_START && now <= SALE_END) {\n', '            uint w2 = now - SALE_START;\n', '            if (w2 <= 1 weeks) {\n', '                return amount * SALE_1WEEK_BONUS/100;\n', '            }\n', '            if (w2 > 1 weeks && w2 <= 2 weeks) {\n', '                return amount * SALE_2WEEK_BONUS/100;\n', '            }\n', '            if (w2 > 2 weeks && w2 <= 3 weeks) {\n', '                return amount * SALE_3WEEK_BONUS/100;\n', '            }\n', '            if (w2 > 3 weeks && w2 <= 4 weeks) {\n', '                return amount * SALE_4WEEK_BONUS/100;\n', '            }\n', '            return 0;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getPrice() public view returns (uint) {\n', '        if (now >= PRE_SALE_START && now <= PRE_SALE_END) {\n', '            return PRE_SALE_PRICE;\n', '        }\n', '        if (now >= SALE_START && now <= SALE_END) {\n', '            return SALE_PRICE;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function getMinimumAmount() public view returns (uint) {\n', '        if (now >= PRE_SALE_START && now <= PRE_SALE_END) {\n', '            return PRE_SALE_MIN_BUY;\n', '        }\n', '        if (now >= SALE_START && now <= SALE_END) {\n', '            return SALE_MIN_BUY;\n', '        }\n', '        return 0;\n', '    }\n', '}']