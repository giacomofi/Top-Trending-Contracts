['pragma solidity ^0.4.21;\n', '\n', '//-----------------------------------------\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', 'contract BurnableToken is MintableToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '    emit Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract PPToken is BurnableToken{\n', '    using SafeMath for uint256;\n', '    \n', '    string public constant name = "PayPortalToken";\n', '    \n', '    string public constant symbol = "PPTL";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '    uint256 public freezTime;\n', '    \n', '    address internal saleAgent;\n', '    \n', '    \n', '    function PPToken(uint256 initialSupply, uint256 _freezTime) public{\n', '        require(initialSupply > 0 && now <= _freezTime);\n', '        totalSupply_ = initialSupply * 10 ** uint256(decimals);\n', '        balances[owner] = totalSupply_;\n', '        emit Mint(owner, totalSupply_);\n', '        emit Transfer(0x0, owner, totalSupply_);\n', '        freezTime = _freezTime;\n', '        saleAgent = owner;\n', '    }\n', '\n', '    modifier onlySaleAgent() {\n', '        require(msg.sender == saleAgent);\n', '        _;\n', '    }\n', '    \n', '    function burnRemain() public onlySaleAgent {\n', '        uint256 _remSupply = balances[owner];\n', '        balances[owner] = 0;\n', '        totalSupply_ = totalSupply_.sub(_remSupply);\n', '\n', '        emit Burn(owner, _remSupply);\n', '        emit Transfer(owner, address(0), _remSupply);\n', '        \n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '    }\n', '    \n', '    function setSaleAgent(address _saleAgent) public onlyOwner{\n', '        require(_saleAgent != address(0));\n', '        saleAgent = _saleAgent;\n', '    }\n', '    \n', '    function setFreezTime(uint256 _freezTime) public onlyOwner{\n', '        require(_freezTime <= 1531699200);//16 july 2018\n', '        freezTime = _freezTime;\n', '    }\n', '    \n', '    function saleTokens(address _to, uint256 _value) public onlySaleAgent returns (bool){\n', '        require(_to != address(0));\n', '        require(_value <= balances[owner]);\n', '    \n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[owner] = balances[owner].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        emit Transfer(owner, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    function hasPastFreezTime() public view returns(bool){\n', '        return now >= freezTime;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(hasPastFreezTime());\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(hasPastFreezTime());\n', '        return super.transfer(_to, _value);\n', '    }\n', '}\n', '//-----------------------------------------\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  PPToken public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  function Crowdsale(uint256 _rate, address _wallet, PPToken _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 totalTokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, totalTokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, totalTokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal\n', '  {}\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal\n', '  {}\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal\n', '  {}\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal returns (uint256)\n', '  {\n', '      uint256 tokens = _weiAmount.mul(rate);\n', '      return tokens;\n', '  }\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', 'contract AllowanceCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  address public tokenWallet;\n', '\n', '  /**\n', '   * @dev Constructor, takes token wallet address. \n', '   * @param _tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n', '   */\n', '  function AllowanceCrowdsale(address _tokenWallet) public {\n', '    require(_tokenWallet != address(0));\n', '    tokenWallet = _tokenWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks the amount of tokens left in the allowance.\n', '   * @return Amount of tokens left in the allowance\n', '   */\n', '  function remainingTokens() public view returns (uint256) {\n', '    return token.balanceOf(tokenWallet);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides parent behavior by transferring tokens from wallet.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Amount of tokens purchased\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.saleTokens(_beneficiary, _tokenAmount);\n', '  }\n', '}\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '  \n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param _cap Max amount of wei to be contributed\n', '   */\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached. \n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    //require(!capReached());\n', '    require(weiRaised.add(_weiAmount) <= cap);\n', '  }\n', '\n', '}\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range. \n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(now >= openingTime && now <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= now);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return now > closingTime;\n', '  }\n', '  \n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal\n', '  {\n', '      \n', '  }\n', '}\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '  function depositAdvisor(address _advWallet, uint256 _amount) onlyOwner public{\n', '      require(state == State.Active);\n', '      _advWallet.transfer(_amount);\n', '  }\n', '  function depositOf(address investor) public view returns(uint256){\n', '      return deposited[investor];\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    wallet.transfer(this.balance);\n', '    emit Closed();\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', 'contract StagebleCrowdsale is FinalizableCrowdsale{\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (uint256 => mapping (string => uint256)) internal stage;\n', '    uint256 internal countStages;\n', '    \n', '    function StagebleCrowdsale() public {\n', '        stage[0]["bonus"] = 30;\n', '        stage[0]["cap"] = (rate * (6000 ether)); // rate * (6000 ether)\n', '        stage[0]["tranmin"] = (1 ether);\n', '        stage[0]["closeTime"] = 1529280000;//18.06.2018 - 1529280000\n', '        \n', '        stage[1]["bonus"] = 20;\n', '        stage[1]["cap"] = (rate * (6000 ether)); // rate * (6000 ether)\n', '        stage[1]["tranmin"] = (1 ether)/10;\n', '        stage[1]["closeTime"] = 1529884800;//25.06.2018 - 1529884800\n', '        \n', '        stage[2]["bonus"] = 10;\n', '        stage[2]["cap"] = (rate * (6000 ether));// rate * (6000 ether)\n', '        stage[2]["tranmin"] = (1 ether)/10;\n', '        stage[2]["closeTime"] = 1531094400;//09.07.2018 - 1531094400\n', '        \n', '        stage[3]["bonus"] = 0;\n', '        stage[3]["cap"] = token.totalSupply();\n', '        stage[3]["tranmin"] = 0;\n', '        stage[3]["closeTime"] = closingTime;\n', '        \n', '        countStages = 4;\n', '    }\n', '\n', '    function getStageBonus(uint256 _index) public view returns(uint256){\n', '        return stage[_index]["bonus"];\n', '    }\n', '    function getStageAvailableTokens(uint256 _index) public view returns(uint256){\n', '        return stage[_index]["cap"];\n', '    }\n', '    function getStageMinWeiAmount(uint256 _index) public view returns(uint256){\n', '        return stage[_index]["tranmin"];\n', '    }\n', '    function getStageClosingTime(uint256 _index) public view returns(uint256){\n', '        return stage[_index]["closeTime"];\n', '    }\n', '    function getCurrentStageIndex() public view returns(uint256){\n', '        return _getInStageIndex();\n', '    }\n', '    function getCountStages() public view returns(uint256){\n', '        return countStages;\n', '    }\n', '\n', '    function _getBonus(uint256 _stageIndex, uint256 _leftcap) internal returns(uint256){\n', '        uint256 bonuses = 0;\n', '        if(_stageIndex < countStages)\n', '        {\n', '            if(stage[_stageIndex]["cap"] >= _leftcap)\n', '            {\n', '                if(stage[_stageIndex]["bonus"] > 0)\n', '                {\n', '                    bonuses = bonuses.add(_leftcap.mul(stage[_stageIndex]["bonus"]).div(100));\n', '                }\n', '                stage[_stageIndex]["cap"] = stage[_stageIndex]["cap"].sub(_leftcap);\n', '            }\n', '            else\n', '            {\n', '                _leftcap = _leftcap.sub(stage[_stageIndex]["cap"]);\n', '                if(stage[_stageIndex]["cap"] > 0)\n', '                {\n', '                    if(stage[_stageIndex]["bonus"] > 0)\n', '                    {\n', '                        bonuses = bonuses.add(stage[_stageIndex]["cap"].mul(stage[_stageIndex]["bonus"]).div(100));\n', '                    }\n', '                    stage[_stageIndex]["cap"] = 0;\n', '                }\n', '                bonuses = bonuses.add(_getBonus(_stageIndex.add(1), _leftcap));\n', '            }\n', '        }\n', '        return bonuses;\n', '    }\n', '    function _isInStage(uint256 _stageIndex) internal view returns (bool){\n', '        return now < stage[_stageIndex]["closeTime"] && stage[_stageIndex]["cap"] > 0;\n', '    }\n', '    function _getInStageIndex () internal view returns(uint256){\n', '        uint256 _index = 0;\n', '        while(_index < countStages)\n', '        {\n', '            if(_isInStage(_index))\n', '                return _index;\n', '            _index = _index.add(1);\n', '        }\n', '        return countStages.sub(1);\n', '    }\n', '    \n', '    function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\n', '        uint256 tokens = super._getTokenAmount(_weiAmount);\n', '        tokens = tokens.add(_getBonus(_getInStageIndex(), tokens));\n', '        return tokens;\n', '    }\n', '    \n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        uint256 _index = _getInStageIndex();\n', '        if(stage[_index]["tranmin"] > 0)\n', '            require(stage[_index]["tranmin"] <= _weiAmount);\n', '    }\n', '\n', '}\n', '\n', 'contract RefundableCrowdsale is StagebleCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '  \n', '  address advWallet;\n', '  uint256 advPercent;\n', '  bool advIsCalc = false;\n', '\n', '  /**\n', '   * @dev Constructor, creates RefundVault. \n', '   * @param _goal Funding goal\n', '   */\n', '  function RefundableCrowdsale(uint256 _goal, uint256 _advPercent) public {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '    advPercent = _advPercent;\n', '  }\n', '\n', '  /**\n', '   * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '   */\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether funding goal was reached. \n', '   * @return Whether funding goal was reached\n', '   */\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  /**\n', '   * @dev vault finalization task, called when owner calls finalize()\n', '   */\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '        vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n', '   */\n', '  function _forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '    if(!advIsCalc &&_getInStageIndex () > 0 && goalReached() && advWallet != address(0))\n', '    {\n', '        //Send ETH to advisor, after to stage 1\n', '        uint256 advAmount = 0;\n', '        advIsCalc = true;\n', '        advAmount = weiRaised.mul(advPercent).div(100);\n', '        vault.depositAdvisor(advWallet, advAmount);\n', '    }\n', '  }\n', '  \n', '  function onlyOwnerSetAdvWallet(address _advWallet) public onlyOwner{\n', '      require(_advWallet != address(0));\n', '      advWallet = _advWallet;\n', '  }\n', '  function onlyOwnerGetAdvWallet() onlyOwner public view returns(address){\n', '          return advWallet;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'contract PPTokenCrowdsale is CappedCrowdsale, RefundableCrowdsale, AllowanceCrowdsale{\n', '    using SafeMath for uint256;\n', '    \n', '    address bountyWallet;\n', '    uint256 bountyPercent;\n', '    \n', '    address teamWallet;\n', '    uint256 teamPercent;\n', '    \n', '    address companyWallet;\n', '    uint256 companyPercent;\n', '    \n', '    function PPTokenCrowdsale( PPToken _token) public\n', '        Crowdsale(500, msg.sender, _token)//(_rate, _wallet, _token)\n', '        CappedCrowdsale((24000 ether))//(_cap)24000 ether\n', '        TimedCrowdsale(1526860800, 1531699200)//(1526860800, 1531699200)\n', '        RefundableCrowdsale((3000 ether), 5)//3000 ether, 5%\n', '        AllowanceCrowdsale(msg.sender)\n', '      {\n', '        bountyPercent = 5;\n', '        teamPercent = 15;\n', '        companyPercent = 10;\n', '      }\n', '      \n', '      \n', '      function finalize() onlyOwner public {\n', '          require(bountyWallet != address(0));\n', '          require(teamWallet != address(0));\n', '          require(companyWallet != address(0));\n', '          super.finalize();\n', '          uint256 _totalSupplyRem = token.totalSupply().sub(token.balanceOf(msg.sender));\n', '          \n', '          uint256 _bountyTokens = _totalSupplyRem.mul(bountyPercent).div(100);\n', '          require(token.saleTokens(bountyWallet, _bountyTokens));\n', '          \n', '          uint256 _teamTokens = _totalSupplyRem.mul(teamPercent).div(100);\n', '          require(token.saleTokens(teamWallet, _teamTokens));\n', '          \n', '          uint256 _companyTokens = _totalSupplyRem.mul(companyPercent).div(100);\n', '          require(token.saleTokens(companyWallet, _companyTokens));\n', '          \n', '          token.burnRemain();\n', '      }\n', '      \n', '      function onlyOwnerSetBountyWallet(address _wallet) onlyOwner public{\n', '          bountyWallet = _wallet;\n', '      }\n', '      function onlyOwnerGetBountyWallet() onlyOwner public view returns(address){\n', '          return bountyWallet;\n', '      }\n', '      function onlyOwnerSetTeamWallet(address _wallet) onlyOwner public{\n', '          teamWallet = _wallet;\n', '      }\n', '      function onlyOwnerGetTeamWallet() onlyOwner public view returns(address){\n', '          return teamWallet;\n', '      }\n', '      function onlyOwnerSetCompanyWallet(address _wallet) onlyOwner public{\n', '          companyWallet = _wallet;\n', '      }\n', '      function onlyOwnerGetCompanyWallet() onlyOwner public view returns(address){\n', '          return companyWallet;\n', '      }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '//-----------------------------------------\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', 'contract BurnableToken is MintableToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(burner, _value);\n', '    emit Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract PPToken is BurnableToken{\n', '    using SafeMath for uint256;\n', '    \n', '    string public constant name = "PayPortalToken";\n', '    \n', '    string public constant symbol = "PPTL";\n', '    \n', '    uint32 public constant decimals = 18;\n', '    \n', '    uint256 public freezTime;\n', '    \n', '    address internal saleAgent;\n', '    \n', '    \n', '    function PPToken(uint256 initialSupply, uint256 _freezTime) public{\n', '        require(initialSupply > 0 && now <= _freezTime);\n', '        totalSupply_ = initialSupply * 10 ** uint256(decimals);\n', '        balances[owner] = totalSupply_;\n', '        emit Mint(owner, totalSupply_);\n', '        emit Transfer(0x0, owner, totalSupply_);\n', '        freezTime = _freezTime;\n', '        saleAgent = owner;\n', '    }\n', '\n', '    modifier onlySaleAgent() {\n', '        require(msg.sender == saleAgent);\n', '        _;\n', '    }\n', '    \n', '    function burnRemain() public onlySaleAgent {\n', '        uint256 _remSupply = balances[owner];\n', '        balances[owner] = 0;\n', '        totalSupply_ = totalSupply_.sub(_remSupply);\n', '\n', '        emit Burn(owner, _remSupply);\n', '        emit Transfer(owner, address(0), _remSupply);\n', '        \n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '    }\n', '    \n', '    function setSaleAgent(address _saleAgent) public onlyOwner{\n', '        require(_saleAgent != address(0));\n', '        saleAgent = _saleAgent;\n', '    }\n', '    \n', '    function setFreezTime(uint256 _freezTime) public onlyOwner{\n', '        require(_freezTime <= 1531699200);//16 july 2018\n', '        freezTime = _freezTime;\n', '    }\n', '    \n', '    function saleTokens(address _to, uint256 _value) public onlySaleAgent returns (bool){\n', '        require(_to != address(0));\n', '        require(_value <= balances[owner]);\n', '    \n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[owner] = balances[owner].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        \n', '        emit Transfer(owner, _to, _value);\n', '        \n', '        return true;\n', '    }\n', '    function hasPastFreezTime() public view returns(bool){\n', '        return now >= freezTime;\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(hasPastFreezTime());\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(hasPastFreezTime());\n', '        return super.transfer(_to, _value);\n', '    }\n', '}\n', '//-----------------------------------------\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  PPToken public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  function Crowdsale(uint256 _rate, address _wallet, PPToken _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 totalTokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, totalTokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, totalTokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal\n', '  {}\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal\n', '  {}\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal\n', '  {}\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal returns (uint256)\n', '  {\n', '      uint256 tokens = _weiAmount.mul(rate);\n', '      return tokens;\n', '  }\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', 'contract AllowanceCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  address public tokenWallet;\n', '\n', '  /**\n', '   * @dev Constructor, takes token wallet address. \n', '   * @param _tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n', '   */\n', '  function AllowanceCrowdsale(address _tokenWallet) public {\n', '    require(_tokenWallet != address(0));\n', '    tokenWallet = _tokenWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks the amount of tokens left in the allowance.\n', '   * @return Amount of tokens left in the allowance\n', '   */\n', '  function remainingTokens() public view returns (uint256) {\n', '    return token.balanceOf(tokenWallet);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides parent behavior by transferring tokens from wallet.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Amount of tokens purchased\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.saleTokens(_beneficiary, _tokenAmount);\n', '  }\n', '}\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public cap;\n', '  \n', '\n', '  /**\n', '   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '   * @param _cap Max amount of wei to be contributed\n', '   */\n', '  function CappedCrowdsale(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the cap has been reached. \n', '   * @return Whether the cap was reached\n', '   */\n', '  function capReached() public view returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '    //require(!capReached());\n', '    require(weiRaised.add(_weiAmount) <= cap);\n', '  }\n', '\n', '}\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range. \n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(now >= openingTime && now <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= now);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return now > closingTime;\n', '  }\n', '  \n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal\n', '  {\n', '      \n', '  }\n', '}\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '  function depositAdvisor(address _advWallet, uint256 _amount) onlyOwner public{\n', '      require(state == State.Active);\n', '      _advWallet.transfer(_amount);\n', '  }\n', '  function depositOf(address investor) public view returns(uint256){\n', '      return deposited[investor];\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    wallet.transfer(this.balance);\n', '    emit Closed();\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', 'contract StagebleCrowdsale is FinalizableCrowdsale{\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (uint256 => mapping (string => uint256)) internal stage;\n', '    uint256 internal countStages;\n', '    \n', '    function StagebleCrowdsale() public {\n', '        stage[0]["bonus"] = 30;\n', '        stage[0]["cap"] = (rate * (6000 ether)); // rate * (6000 ether)\n', '        stage[0]["tranmin"] = (1 ether);\n', '        stage[0]["closeTime"] = 1529280000;//18.06.2018 - 1529280000\n', '        \n', '        stage[1]["bonus"] = 20;\n', '        stage[1]["cap"] = (rate * (6000 ether)); // rate * (6000 ether)\n', '        stage[1]["tranmin"] = (1 ether)/10;\n', '        stage[1]["closeTime"] = 1529884800;//25.06.2018 - 1529884800\n', '        \n', '        stage[2]["bonus"] = 10;\n', '        stage[2]["cap"] = (rate * (6000 ether));// rate * (6000 ether)\n', '        stage[2]["tranmin"] = (1 ether)/10;\n', '        stage[2]["closeTime"] = 1531094400;//09.07.2018 - 1531094400\n', '        \n', '        stage[3]["bonus"] = 0;\n', '        stage[3]["cap"] = token.totalSupply();\n', '        stage[3]["tranmin"] = 0;\n', '        stage[3]["closeTime"] = closingTime;\n', '        \n', '        countStages = 4;\n', '    }\n', '\n', '    function getStageBonus(uint256 _index) public view returns(uint256){\n', '        return stage[_index]["bonus"];\n', '    }\n', '    function getStageAvailableTokens(uint256 _index) public view returns(uint256){\n', '        return stage[_index]["cap"];\n', '    }\n', '    function getStageMinWeiAmount(uint256 _index) public view returns(uint256){\n', '        return stage[_index]["tranmin"];\n', '    }\n', '    function getStageClosingTime(uint256 _index) public view returns(uint256){\n', '        return stage[_index]["closeTime"];\n', '    }\n', '    function getCurrentStageIndex() public view returns(uint256){\n', '        return _getInStageIndex();\n', '    }\n', '    function getCountStages() public view returns(uint256){\n', '        return countStages;\n', '    }\n', '\n', '    function _getBonus(uint256 _stageIndex, uint256 _leftcap) internal returns(uint256){\n', '        uint256 bonuses = 0;\n', '        if(_stageIndex < countStages)\n', '        {\n', '            if(stage[_stageIndex]["cap"] >= _leftcap)\n', '            {\n', '                if(stage[_stageIndex]["bonus"] > 0)\n', '                {\n', '                    bonuses = bonuses.add(_leftcap.mul(stage[_stageIndex]["bonus"]).div(100));\n', '                }\n', '                stage[_stageIndex]["cap"] = stage[_stageIndex]["cap"].sub(_leftcap);\n', '            }\n', '            else\n', '            {\n', '                _leftcap = _leftcap.sub(stage[_stageIndex]["cap"]);\n', '                if(stage[_stageIndex]["cap"] > 0)\n', '                {\n', '                    if(stage[_stageIndex]["bonus"] > 0)\n', '                    {\n', '                        bonuses = bonuses.add(stage[_stageIndex]["cap"].mul(stage[_stageIndex]["bonus"]).div(100));\n', '                    }\n', '                    stage[_stageIndex]["cap"] = 0;\n', '                }\n', '                bonuses = bonuses.add(_getBonus(_stageIndex.add(1), _leftcap));\n', '            }\n', '        }\n', '        return bonuses;\n', '    }\n', '    function _isInStage(uint256 _stageIndex) internal view returns (bool){\n', '        return now < stage[_stageIndex]["closeTime"] && stage[_stageIndex]["cap"] > 0;\n', '    }\n', '    function _getInStageIndex () internal view returns(uint256){\n', '        uint256 _index = 0;\n', '        while(_index < countStages)\n', '        {\n', '            if(_isInStage(_index))\n', '                return _index;\n', '            _index = _index.add(1);\n', '        }\n', '        return countStages.sub(1);\n', '    }\n', '    \n', '    function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\n', '        uint256 tokens = super._getTokenAmount(_weiAmount);\n', '        tokens = tokens.add(_getBonus(_getInStageIndex(), tokens));\n', '        return tokens;\n', '    }\n', '    \n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        uint256 _index = _getInStageIndex();\n', '        if(stage[_index]["tranmin"] > 0)\n', '            require(stage[_index]["tranmin"] <= _weiAmount);\n', '    }\n', '\n', '}\n', '\n', 'contract RefundableCrowdsale is StagebleCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault public vault;\n', '  \n', '  address advWallet;\n', '  uint256 advPercent;\n', '  bool advIsCalc = false;\n', '\n', '  /**\n', '   * @dev Constructor, creates RefundVault. \n', '   * @param _goal Funding goal\n', '   */\n', '  function RefundableCrowdsale(uint256 _goal, uint256 _advPercent) public {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '    advPercent = _advPercent;\n', '  }\n', '\n', '  /**\n', '   * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '   */\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    vault.refund(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether funding goal was reached. \n', '   * @return Whether funding goal was reached\n', '   */\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  /**\n', '   * @dev vault finalization task, called when owner calls finalize()\n', '   */\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '        vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n', '   */\n', '  function _forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '    if(!advIsCalc &&_getInStageIndex () > 0 && goalReached() && advWallet != address(0))\n', '    {\n', '        //Send ETH to advisor, after to stage 1\n', '        uint256 advAmount = 0;\n', '        advIsCalc = true;\n', '        advAmount = weiRaised.mul(advPercent).div(100);\n', '        vault.depositAdvisor(advWallet, advAmount);\n', '    }\n', '  }\n', '  \n', '  function onlyOwnerSetAdvWallet(address _advWallet) public onlyOwner{\n', '      require(_advWallet != address(0));\n', '      advWallet = _advWallet;\n', '  }\n', '  function onlyOwnerGetAdvWallet() onlyOwner public view returns(address){\n', '          return advWallet;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', 'contract PPTokenCrowdsale is CappedCrowdsale, RefundableCrowdsale, AllowanceCrowdsale{\n', '    using SafeMath for uint256;\n', '    \n', '    address bountyWallet;\n', '    uint256 bountyPercent;\n', '    \n', '    address teamWallet;\n', '    uint256 teamPercent;\n', '    \n', '    address companyWallet;\n', '    uint256 companyPercent;\n', '    \n', '    function PPTokenCrowdsale( PPToken _token) public\n', '        Crowdsale(500, msg.sender, _token)//(_rate, _wallet, _token)\n', '        CappedCrowdsale((24000 ether))//(_cap)24000 ether\n', '        TimedCrowdsale(1526860800, 1531699200)//(1526860800, 1531699200)\n', '        RefundableCrowdsale((3000 ether), 5)//3000 ether, 5%\n', '        AllowanceCrowdsale(msg.sender)\n', '      {\n', '        bountyPercent = 5;\n', '        teamPercent = 15;\n', '        companyPercent = 10;\n', '      }\n', '      \n', '      \n', '      function finalize() onlyOwner public {\n', '          require(bountyWallet != address(0));\n', '          require(teamWallet != address(0));\n', '          require(companyWallet != address(0));\n', '          super.finalize();\n', '          uint256 _totalSupplyRem = token.totalSupply().sub(token.balanceOf(msg.sender));\n', '          \n', '          uint256 _bountyTokens = _totalSupplyRem.mul(bountyPercent).div(100);\n', '          require(token.saleTokens(bountyWallet, _bountyTokens));\n', '          \n', '          uint256 _teamTokens = _totalSupplyRem.mul(teamPercent).div(100);\n', '          require(token.saleTokens(teamWallet, _teamTokens));\n', '          \n', '          uint256 _companyTokens = _totalSupplyRem.mul(companyPercent).div(100);\n', '          require(token.saleTokens(companyWallet, _companyTokens));\n', '          \n', '          token.burnRemain();\n', '      }\n', '      \n', '      function onlyOwnerSetBountyWallet(address _wallet) onlyOwner public{\n', '          bountyWallet = _wallet;\n', '      }\n', '      function onlyOwnerGetBountyWallet() onlyOwner public view returns(address){\n', '          return bountyWallet;\n', '      }\n', '      function onlyOwnerSetTeamWallet(address _wallet) onlyOwner public{\n', '          teamWallet = _wallet;\n', '      }\n', '      function onlyOwnerGetTeamWallet() onlyOwner public view returns(address){\n', '          return teamWallet;\n', '      }\n', '      function onlyOwnerSetCompanyWallet(address _wallet) onlyOwner public{\n', '          companyWallet = _wallet;\n', '      }\n', '      function onlyOwnerGetCompanyWallet() onlyOwner public view returns(address){\n', '          return companyWallet;\n', '      }\n', '}']
