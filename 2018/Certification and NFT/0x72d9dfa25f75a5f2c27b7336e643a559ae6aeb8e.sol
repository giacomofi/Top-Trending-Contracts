['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract IController is Pausable {\n', '    event SetContractInfo(bytes32 id, address contractAddress, bytes20 gitCommitHash);\n', '\n', '    function setContractInfo(bytes32 _id, address _contractAddress, bytes20 _gitCommitHash) external;\n', '    function updateController(bytes32 _id, address _controller) external;\n', '    function getContract(bytes32 _id) public view returns (address);\n', '}\n', '\n', 'contract IManager {\n', '    event SetController(address controller);\n', '    event ParameterUpdate(string param);\n', '\n', '    function setController(address _controller) external;\n', '}\n', '\n', 'contract Manager is IManager {\n', '    // Controller that contract is registered with\n', '    IController public controller;\n', '\n', '    // Check if sender is controller\n', '    modifier onlyController() {\n', '        require(msg.sender == address(controller));\n', '        _;\n', '    }\n', '\n', '    // Check if sender is controller owner\n', '    modifier onlyControllerOwner() {\n', '        require(msg.sender == controller.owner());\n', '        _;\n', '    }\n', '\n', '    // Check if controller is not paused\n', '    modifier whenSystemNotPaused() {\n', '        require(!controller.paused());\n', '        _;\n', '    }\n', '\n', '    // Check if controller is paused\n', '    modifier whenSystemPaused() {\n', '        require(controller.paused());\n', '        _;\n', '    }\n', '\n', '    function Manager(address _controller) public {\n', '        controller = IController(_controller);\n', '    }\n', '\n', '    /*\n', '     * @dev Set controller. Only callable by current controller\n', '     * @param _controller Controller contract address\n', '     */\n', '    function setController(address _controller) external onlyController {\n', '        controller = IController(_controller);\n', '\n', '        SetController(_controller);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ManagerProxyTarget\n', ' * @dev The base contract that target contracts used by a proxy contract should inherit from\n', ' * Note: Both the target contract and the proxy contract (implemented as ManagerProxy) MUST inherit from ManagerProxyTarget in order to guarantee\n', ' * that both contracts have the same storage layout. Differing storage layouts in a proxy contract and target contract can\n', ' * potentially break the delegate proxy upgradeability mechanism\n', ' */\n', 'contract ManagerProxyTarget is Manager {\n', '    // Used to look up target contract address in controller&#39;s registry\n', '    bytes32 public targetContractId;\n', '}\n', '\n', '/**\n', ' * @title ServiceRegistry\n', ' * @dev Maintains a registry of service metadata associated with service provider addresses (transcoders/orchestrators)\n', ' */\n', 'contract ServiceRegistry is ManagerProxyTarget {\n', '    // Store service metadata\n', '    struct Record {\n', '        string serviceURI;   // Service URI endpoint that can be used to send off-chain requests\n', '    }\n', '\n', '    // Track records for addresses\n', '    mapping (address => Record) private records;\n', '\n', '    // Event fired when a caller updates its service URI endpoint\n', '    event ServiceURIUpdate(address indexed addr, string serviceURI);\n', '\n', '    /**\n', '     * @dev ServiceRegistry constructor. Only invokes constructor of base Manager contract with provided Controller address\n', '     * @param _controller Address of a Controller that this contract will be registered with\n', '     */\n', '    function ServiceRegistry(address _controller) public Manager(_controller) {}\n', '\n', '    /**\n', '     * @dev Stores service URI endpoint for the caller that can be used to send requests to the caller off-chain \n', '     * @param _serviceURI Service URI endpoint for the caller\n', '     */\n', '    function setServiceURI(string _serviceURI) external {\n', '        records[msg.sender].serviceURI = _serviceURI;\n', '\n', '        ServiceURIUpdate(msg.sender, _serviceURI);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns service URI endpoint stored for a given address\n', '     * @param _addr Address for which a service URI endpoint is desired\n', '     */\n', '    function getServiceURI(address _addr) public view returns (string) {\n', '        return records[_addr].serviceURI;\n', '    }\n', '}']