['pragma solidity ^0.4.18;\n', '\n', 'contract InterfaceContentCreatorUniverse {\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price);\n', '  function getNextPrice(uint price, uint _tokenId) public pure returns (uint);\n', '  function lastSubTokenBuyerOf(uint tokenId) public view returns(address);\n', '  function lastSubTokenCreatorOf(uint tokenId) public view returns(address);\n', '\n', '  //\n', '  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external ;\n', '}\n', '\n', 'contract InterfaceYCC {\n', '  function payForUpgrade(address user, uint price) external  returns (bool success);\n', '  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external  returns (bool success);\n', '  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external;\n', '  function payoutForMining(address user, uint amount) external;\n', '  uint256 public totalSupply;\n', '}\n', '\n', 'contract InterfaceMining {\n', '  function createMineForToken(uint tokenId, uint level, uint xp, uint nextLevelBreak, uint blocknumber) external;\n', '  function payoutMining(uint tokenId, address owner, address newOwner) external;\n', '  function levelUpMining(uint tokenId) external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '  address private newCeoAddress;\n', '  address private newCooAddress;\n', '\n', '\n', '  function Owned() public {\n', '      ceoAddress = msg.sender;\n', '      cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '    newCeoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '    newCooAddress = _newCOO;\n', '  }\n', '\n', '  function acceptCeoOwnership() public {\n', '      require(msg.sender == newCeoAddress);\n', '      require(address(0) != newCeoAddress);\n', '      ceoAddress = newCeoAddress;\n', '      newCeoAddress = address(0);\n', '  }\n', '\n', '  function acceptCooOwnership() public {\n', '      require(msg.sender == newCooAddress);\n', '      require(address(0) != newCooAddress);\n', '      cooAddress = newCooAddress;\n', '      newCooAddress = address(0);\n', '  }\n', '\n', '  mapping (address => bool) public youCollectContracts;\n', '  function addYouCollectContract(address contractAddress, bool active) public onlyCOO {\n', '    youCollectContracts[contractAddress] = active;\n', '  }\n', '  modifier onlyYCC() {\n', '    require(youCollectContracts[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  InterfaceYCC ycc;\n', '  InterfaceContentCreatorUniverse yct;\n', '  InterfaceMining ycm;\n', '  function setMainYouCollectContractAddresses(address yccContract, address yctContract, address ycmContract, address[] otherContracts) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[yccContract] = true;\n', '    youCollectContracts[yctContract] = true;\n', '    youCollectContracts[ycmContract] = true;\n', '    for (uint16 index = 0; index < otherContracts.length; index++) {\n', '      youCollectContracts[otherContracts[index]] = true;\n', '    }\n', '  }\n', '  function setYccContractAddress(address yccContract) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    youCollectContracts[yccContract] = true;\n', '  }\n', '  function setYctContractAddress(address yctContract) public onlyCOO {\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    youCollectContracts[yctContract] = true;\n', '  }\n', '  function setYcmContractAddress(address ycmContract) public onlyCOO {\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[ycmContract] = true;\n', '  }\n', '\n', '}\n', '\n', 'contract TransferInterfaceERC721YC {\n', '  function transferToken(address to, uint256 tokenId) public returns (bool success);\n', '}\n', 'contract TransferInterfaceERC20 {\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\n', '// ----------------------------------------------------------------------------\n', 'contract YouCollectBase is Owned {\n', '  using SafeMath for uint256;\n', '\n', '  event RedButton(uint value, uint totalSupply);\n', '\n', '  // Payout\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to, this.balance);\n', '  }\n', '  function payout(address _to, uint amount) public onlyCLevel {\n', '    if (amount>this.balance)\n', '      amount = this.balance;\n', '    _payout(_to, amount);\n', '  }\n', '  function _payout(address _to, uint amount) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(amount);\n', '    } else {\n', '      _to.transfer(amount);\n', '    }\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCEO returns (bool success) {\n', '      return TransferInterfaceERC20(tokenAddress).transfer(ceoAddress, tokens);\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract YouCollectCoins is YouCollectBase {\n', '\n', '  //\n', '  //  ERC20 \n', '  //\n', '    /*** CONSTANTS ***/\n', '    string public constant NAME = "YouCollectCoin";\n', '    string public constant SYMBOL = "YCC";\n', '    uint8 public constant DECIMALS = 18;  \n', '\n', '    uint256 public totalSupply;\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    bool allowTransfer;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function YouCollectCoins() {\n', '      addYouCollectContract(msg.sender, true);\n', '    }\n', '\n', '    /// @dev Required for ERC-20 compliance.\n', '    function name() public pure returns (string) {\n', '      return NAME;\n', '    }\n', '\n', '    /// @dev Required for ERC-20 compliance.\n', '    function symbol() public pure returns (string) {\n', '      return SYMBOL;\n', '    }\n', '    /// @dev Required for ERC-20 compliance.\n', '    function decimals() public pure returns (uint8) {\n', '      return DECIMALS;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '    // from the token owner&#39;s account. The `spender` contract function\n', '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        require(allowTransfer);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '  //\n', '  //\n', '\n', '\n', '  //\n', '  // Coin sale controlled by external smart contract\n', '  //\n', '    bool public coinSaleStarted;\n', '    address public mintableAddress;\n', '    uint public totalTokenSellAmount;\n', '    function mintCoins(address to, uint256 amount) external returns (bool success) {\n', '      require(coinSaleStarted);\n', '      require(msg.sender == mintableAddress);\n', '      require(balances[this] >= amount);\n', '      balances[this] -= amount;\n', '      balances[to] += amount;\n', '      uint bonus = amount.div(100);\n', '      address universeOwner = yct.ownerOf(0);\n', '      balances[universeOwner] += bonus;\n', '      totalSupply += bonus;\n', '      Transfer(this, to, amount);\n', '      Transfer(address(0), universeOwner, bonus);\n', '      return true;\n', '    }\n', '    function startCoinSale(uint totalTokens, address sellingContractAddress) public onlyCEO {\n', '      require(!coinSaleStarted);\n', '      totalTokenSellAmount = totalTokens;\n', '      mintableAddress = sellingContractAddress;\n', '    }\n', '    function acceptCoinSale() public onlyCEO {\n', '      coinSaleStarted = true;\n', '      balances[this] = totalTokenSellAmount;\n', '      totalSupply += totalTokenSellAmount;\n', '    }\n', '    function changeTransfer(bool allowTransfers) external {\n', '        require(msg.sender == mintableAddress);\n', '        allowTransfer = allowTransfers;\n', '    }\n', '  //\n', '  //\n', '\n', '\n', '  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external onlyYCC returns (bool success) {\n', '    balances[to] += amount;\n', '    uint bonus = amount.div(100);\n', '    balances[universeOwner] += bonus;\n', '    totalSupply += amount + bonus;\n', '    Transfer(address(0), to, amount);\n', '    Transfer(address(0), universeOwner, amount);\n', '    return true;\n', '  }\n', '\n', '  function payForUpgrade(address user, uint price) external onlyYCC returns (bool success) {\n', '    require(balances[user] >= price);\n', '    balances[user] -= price;\n', '    totalSupply -= price;\n', '    Transfer(user, address(0), price);\n', '    return true;\n', '  }\n', '\n', '  function payoutForMining(address user, uint amount) external onlyYCC {\n', '    balances[user] += amount;\n', '    totalSupply += amount;\n', '    Transfer(address(0), user, amount);\n', '  }\n', '\n', '  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external onlyYCC {\n', '    require(balances[buyer] >= price);\n', '    balances[buyer] -= price;\n', '    if (seller != address(0)) {\n', '      uint256 onePercent = price.div(100);\n', '      uint256 payment = price.sub(onePercent.mul(burnPercent+1));\n', '      // Payment for old owner\n', '      balances[seller] += payment;\n', '      totalSupply -= onePercent.mul(burnPercent);\n', '      balances[universeOwner] += onePercent;\n', '      Transfer(buyer, seller, payment);\n', '      Transfer(buyer, universeOwner, onePercent);\n', '    }else {\n', '      totalSupply -= price;\n', '    }\n', '  }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract InterfaceContentCreatorUniverse {\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function priceOf(uint256 _tokenId) public view returns (uint256 price);\n', '  function getNextPrice(uint price, uint _tokenId) public pure returns (uint);\n', '  function lastSubTokenBuyerOf(uint tokenId) public view returns(address);\n', '  function lastSubTokenCreatorOf(uint tokenId) public view returns(address);\n', '\n', '  //\n', '  function createCollectible(uint256 tokenId, uint256 _price, address creator, address owner) external ;\n', '}\n', '\n', 'contract InterfaceYCC {\n', '  function payForUpgrade(address user, uint price) external  returns (bool success);\n', '  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external  returns (bool success);\n', '  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external;\n', '  function payoutForMining(address user, uint amount) external;\n', '  uint256 public totalSupply;\n', '}\n', '\n', 'contract InterfaceMining {\n', '  function createMineForToken(uint tokenId, uint level, uint xp, uint nextLevelBreak, uint blocknumber) external;\n', '  function payoutMining(uint tokenId, address owner, address newOwner) external;\n', '  function levelUpMining(uint tokenId) external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Owned {\n', '  // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '  address public ceoAddress;\n', '  address public cooAddress;\n', '  address private newCeoAddress;\n', '  address private newCooAddress;\n', '\n', '\n', '  function Owned() public {\n', '      ceoAddress = msg.sender;\n', '      cooAddress = msg.sender;\n', '  }\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /// @dev Access modifier for COO-only functionality\n', '  modifier onlyCOO() {\n', '    require(msg.sender == cooAddress);\n', '    _;\n', '  }\n', '\n', '  /// Access modifier for contract owner only functionality\n', '  modifier onlyCLevel() {\n', '    require(\n', '      msg.sender == ceoAddress ||\n', '      msg.sender == cooAddress\n', '    );\n', '    _;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '    newCeoAddress = _newCEO;\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\n', '  /// @param _newCOO The address of the new COO\n', '  function setCOO(address _newCOO) public onlyCEO {\n', '    require(_newCOO != address(0));\n', '    newCooAddress = _newCOO;\n', '  }\n', '\n', '  function acceptCeoOwnership() public {\n', '      require(msg.sender == newCeoAddress);\n', '      require(address(0) != newCeoAddress);\n', '      ceoAddress = newCeoAddress;\n', '      newCeoAddress = address(0);\n', '  }\n', '\n', '  function acceptCooOwnership() public {\n', '      require(msg.sender == newCooAddress);\n', '      require(address(0) != newCooAddress);\n', '      cooAddress = newCooAddress;\n', '      newCooAddress = address(0);\n', '  }\n', '\n', '  mapping (address => bool) public youCollectContracts;\n', '  function addYouCollectContract(address contractAddress, bool active) public onlyCOO {\n', '    youCollectContracts[contractAddress] = active;\n', '  }\n', '  modifier onlyYCC() {\n', '    require(youCollectContracts[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  InterfaceYCC ycc;\n', '  InterfaceContentCreatorUniverse yct;\n', '  InterfaceMining ycm;\n', '  function setMainYouCollectContractAddresses(address yccContract, address yctContract, address ycmContract, address[] otherContracts) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[yccContract] = true;\n', '    youCollectContracts[yctContract] = true;\n', '    youCollectContracts[ycmContract] = true;\n', '    for (uint16 index = 0; index < otherContracts.length; index++) {\n', '      youCollectContracts[otherContracts[index]] = true;\n', '    }\n', '  }\n', '  function setYccContractAddress(address yccContract) public onlyCOO {\n', '    ycc = InterfaceYCC(yccContract);\n', '    youCollectContracts[yccContract] = true;\n', '  }\n', '  function setYctContractAddress(address yctContract) public onlyCOO {\n', '    yct = InterfaceContentCreatorUniverse(yctContract);\n', '    youCollectContracts[yctContract] = true;\n', '  }\n', '  function setYcmContractAddress(address ycmContract) public onlyCOO {\n', '    ycm = InterfaceMining(ycmContract);\n', '    youCollectContracts[ycmContract] = true;\n', '  }\n', '\n', '}\n', '\n', 'contract TransferInterfaceERC721YC {\n', '  function transferToken(address to, uint256 tokenId) public returns (bool success);\n', '}\n', 'contract TransferInterfaceERC20 {\n', '  function transfer(address to, uint tokens) public returns (bool success);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol\n', '// ----------------------------------------------------------------------------\n', 'contract YouCollectBase is Owned {\n', '  using SafeMath for uint256;\n', '\n', '  event RedButton(uint value, uint totalSupply);\n', '\n', '  // Payout\n', '  function payout(address _to) public onlyCLevel {\n', '    _payout(_to, this.balance);\n', '  }\n', '  function payout(address _to, uint amount) public onlyCLevel {\n', '    if (amount>this.balance)\n', '      amount = this.balance;\n', '    _payout(_to, amount);\n', '  }\n', '  function _payout(address _to, uint amount) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(amount);\n', '    } else {\n', '      _to.transfer(amount);\n', '    }\n', '  }\n', '\n', '  // ------------------------------------------------------------------------\n', '  // Owner can transfer out any accidentally sent ERC20 tokens\n', '  // ------------------------------------------------------------------------\n', '  function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyCEO returns (bool success) {\n', '      return TransferInterfaceERC20(tokenAddress).transfer(ceoAddress, tokens);\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Contract function to receive approval and execute function in one call\n', '// ----------------------------------------------------------------------------\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract YouCollectCoins is YouCollectBase {\n', '\n', '  //\n', '  //  ERC20 \n', '  //\n', '    /*** CONSTANTS ***/\n', '    string public constant NAME = "YouCollectCoin";\n', '    string public constant SYMBOL = "YCC";\n', '    uint8 public constant DECIMALS = 18;  \n', '\n', '    uint256 public totalSupply;\n', '    uint256 constant private MAX_UINT256 = 2**256 - 1;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    bool allowTransfer;\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    function YouCollectCoins() {\n', '      addYouCollectContract(msg.sender, true);\n', '    }\n', '\n', '    /// @dev Required for ERC-20 compliance.\n', '    function name() public pure returns (string) {\n', '      return NAME;\n', '    }\n', '\n', '    /// @dev Required for ERC-20 compliance.\n', '    function symbol() public pure returns (string) {\n', '      return SYMBOL;\n', '    }\n', '    /// @dev Required for ERC-20 compliance.\n', '    function decimals() public pure returns (uint8) {\n', '      return DECIMALS;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(allowTransfer);\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account. The `spender` contract function\n", '    // `receiveApproval(...)` is then executed\n', '    // ------------------------------------------------------------------------\n', '    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n', '        require(allowTransfer);\n', '        allowed[msg.sender][spender] = tokens;\n', '        Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }   \n', '  //\n', '  //\n', '\n', '\n', '  //\n', '  // Coin sale controlled by external smart contract\n', '  //\n', '    bool public coinSaleStarted;\n', '    address public mintableAddress;\n', '    uint public totalTokenSellAmount;\n', '    function mintCoins(address to, uint256 amount) external returns (bool success) {\n', '      require(coinSaleStarted);\n', '      require(msg.sender == mintableAddress);\n', '      require(balances[this] >= amount);\n', '      balances[this] -= amount;\n', '      balances[to] += amount;\n', '      uint bonus = amount.div(100);\n', '      address universeOwner = yct.ownerOf(0);\n', '      balances[universeOwner] += bonus;\n', '      totalSupply += bonus;\n', '      Transfer(this, to, amount);\n', '      Transfer(address(0), universeOwner, bonus);\n', '      return true;\n', '    }\n', '    function startCoinSale(uint totalTokens, address sellingContractAddress) public onlyCEO {\n', '      require(!coinSaleStarted);\n', '      totalTokenSellAmount = totalTokens;\n', '      mintableAddress = sellingContractAddress;\n', '    }\n', '    function acceptCoinSale() public onlyCEO {\n', '      coinSaleStarted = true;\n', '      balances[this] = totalTokenSellAmount;\n', '      totalSupply += totalTokenSellAmount;\n', '    }\n', '    function changeTransfer(bool allowTransfers) external {\n', '        require(msg.sender == mintableAddress);\n', '        allowTransfer = allowTransfers;\n', '    }\n', '  //\n', '  //\n', '\n', '\n', '  function mintCoinsForOldCollectibles(address to, uint256 amount, address universeOwner) external onlyYCC returns (bool success) {\n', '    balances[to] += amount;\n', '    uint bonus = amount.div(100);\n', '    balances[universeOwner] += bonus;\n', '    totalSupply += amount + bonus;\n', '    Transfer(address(0), to, amount);\n', '    Transfer(address(0), universeOwner, amount);\n', '    return true;\n', '  }\n', '\n', '  function payForUpgrade(address user, uint price) external onlyYCC returns (bool success) {\n', '    require(balances[user] >= price);\n', '    balances[user] -= price;\n', '    totalSupply -= price;\n', '    Transfer(user, address(0), price);\n', '    return true;\n', '  }\n', '\n', '  function payoutForMining(address user, uint amount) external onlyYCC {\n', '    balances[user] += amount;\n', '    totalSupply += amount;\n', '    Transfer(address(0), user, amount);\n', '  }\n', '\n', '  function tradePreToken(uint price, address buyer, address seller, uint burnPercent, address universeOwner) external onlyYCC {\n', '    require(balances[buyer] >= price);\n', '    balances[buyer] -= price;\n', '    if (seller != address(0)) {\n', '      uint256 onePercent = price.div(100);\n', '      uint256 payment = price.sub(onePercent.mul(burnPercent+1));\n', '      // Payment for old owner\n', '      balances[seller] += payment;\n', '      totalSupply -= onePercent.mul(burnPercent);\n', '      balances[universeOwner] += onePercent;\n', '      Transfer(buyer, seller, payment);\n', '      Transfer(buyer, universeOwner, onePercent);\n', '    }else {\n', '      totalSupply -= price;\n', '    }\n', '  }\n', '\n', '}']
