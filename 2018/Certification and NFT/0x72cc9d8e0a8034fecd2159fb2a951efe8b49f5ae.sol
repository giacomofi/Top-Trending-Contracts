['pragma solidity 0.4.20;\n', '/**\n', '* @title ICO CONTRACT\n', '* @dev ERC-20 Token Standard Compliant\n', '* @author Fares A. Akel C. f.antonio.akel@gmail.com\n', '*/\n', '\n', '/**\n', '* @title SafeMath by OpenZeppelin\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    }\n', '\n', '/**\n', '* @title DateTime contract\n', '* @dev This contract will return the unix value of any date\n', '*/\n', 'contract DateTimeAPI {\n', '        \n', '    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) constant returns (uint timestamp);\n', '\n', '}\n', '\n', '\n', 'contract ICO {\n', '    using SafeMath for uint256;\n', '    //This ico have 5 states\n', '    enum State {\n', '        stage1,\n', '        stage2,\n', '        stage3,\n', '        stage4,\n', '        Successful\n', '    }\n', '\n', '    DateTimeAPI dateTimeContract = DateTimeAPI(0x1a6184CD4C5Bea62B0116de7962EE7315B7bcBce);//Main\n', '    //DateTimeAPI dateTimeContract = DateTimeAPI(0x1F0a2ba4B115bd3e4007533C52BBd30C17E8B222);//Ropsten\n', '\n', '    //public variables\n', '    State public state = State.stage1; //Set initial stage\n', '    uint256 public startTime;\n', '    uint256 public rate;\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens\n', '    uint256 public ICOdeadline;\n', '    uint256 public completedAt;\n', '    token public tokenReward;\n', '    address public creator;\n', '    address public beneficiary;\n', "    string public version = '1';\n", '\n', '    mapping(address => bool) public airdropClaimed;\n', '    mapping(address => uint) public icoTokensReceived;\n', '\n', '    uint public constant TOKEN_SUPPLY_ICO   = 130000000 * 10 ** 18; // 130 Million tokens\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(address _creator, uint256 _ICOdeadline);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    /**\n', '    * @notice ICO constructor\n', '    * @param _addressOfTokenUsedAsReward is the token totalDistributed\n', '    */\n', '    function ICO (token _addressOfTokenUsedAsReward) public {\n', '        \n', '        startTime = dateTimeContract.toTimestamp(2018,3,2,12); //From March 2 12:00 UTC\n', '        ICOdeadline = dateTimeContract.toTimestamp(2018,3,30,12); //Till March 30 12:00 UTC;\n', '        rate = 80000; //Tokens per ether unit\n', '\n', '        creator = msg.sender;\n', '        beneficiary = 0x3a1CE9289EC2826A69A115A6AAfC2fbaCc6F8063;\n', '        tokenReward = _addressOfTokenUsedAsReward;\n', '\n', '        LogFunderInitialized(\n', '            creator,\n', '            ICOdeadline);\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '        require(now >= startTime);\n', '        require(msg.value > 50 finney);\n', '\n', '        uint256 tokenBought = 0;\n', '\n', '        totalRaised = totalRaised.add(msg.value);\n', '        tokenBought = msg.value.mul(rate);\n', '\n', '        //Rate of exchange depends on stage\n', '        if (state == State.stage1){\n', '\n', '            tokenBought = tokenBought.mul(15);\n', '            tokenBought = tokenBought.div(10);//+50%\n', '        \n', '        } else if (state == State.stage2){\n', '        \n', '            tokenBought = tokenBought.mul(125);\n', '            tokenBought = tokenBought.div(100);//+25%\n', '        \n', '        } else if (state == State.stage3){\n', '        \n', '            tokenBought = tokenBought.mul(115);\n', '            tokenBought = tokenBought.div(100);//+15%\n', '        \n', '        }\n', '\n', '        icoTokensReceived[msg.sender] = icoTokensReceived[msg.sender].add(tokenBought);\n', '        totalDistributed = totalDistributed.add(tokenBought);\n', '        \n', '        tokenReward.transfer(msg.sender, tokenBought);\n', '\n', '        LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        LogContributorsPayout(msg.sender, tokenBought);\n', '        \n', '        checkIfFundingCompleteOrExpired();\n', '    }\n', '\n', '    function claimAirdrop() external {\n', '\n', '        doAirdrop(msg.sender);\n', '\n', '    }\n', '\n', '    function doAirdrop(address _participant) internal {\n', '        uint airdrop = computeAirdrop(_participant);\n', '\n', '        require( airdrop > 0 );\n', '\n', '        // update balances and token issue volume\n', '        airdropClaimed[_participant] = true;\n', '        tokenReward.transfer(_participant,airdrop);\n', '\n', '        // log\n', '        LogContributorsPayout(_participant, airdrop);\n', '    }\n', '\n', '    /* Function to estimate airdrop amount. For some accounts, the value of */\n', '    /* tokens received by calling claimAirdrop() may be less than gas costs */\n', '\n', '    /* If an account has tokens from the ico, the amount after the airdrop */\n', '    /* will be newBalance = tokens * TOKEN_SUPPLY_ICO / totalDistributed */\n', '      \n', '    function computeAirdrop(address _participant) public constant returns (uint airdrop) {\n', '        require(state == State.Successful);\n', '\n', '        // return  0 is the airdrop was already claimed\n', '        if( airdropClaimed[_participant] ) return 0;\n', '\n', '        // return 0 if the account does not hold any crowdsale tokens\n', '        if( icoTokensReceived[_participant] == 0 ) return 0;\n', '\n', '        // airdrop amount\n', '        uint tokens = icoTokensReceived[_participant];\n', '        uint newBalance = tokens.mul(TOKEN_SUPPLY_ICO) / totalDistributed;\n', '        airdrop = newBalance - tokens;\n', '    }\n', '\n', '    /**\n', '    * @notice check status\n', '    */\n', '    function checkIfFundingCompleteOrExpired() public {\n', '\n', '        if(state == State.stage1 && now > dateTimeContract.toTimestamp(2018,3,9,12)) { //Till March 9 12:00 UTC\n', '\n', '            state = State.stage2;\n', '\n', '        } else if(state == State.stage2 && now > dateTimeContract.toTimestamp(2018,3,16,12)) { //Till March 16 12:00 UTC\n', '\n', '            state = State.stage3;\n', '            \n', '        } else if(state == State.stage3 && now > dateTimeContract.toTimestamp(2018,3,23,12)) { //From March 23 12:00 UTC\n', '\n', '            state = State.stage4;\n', '            \n', '        } else if(now > ICOdeadline && state!=State.Successful) { //if we reach ico deadline and its not Successful yet\n', '\n', '        state = State.Successful; //ico becomes Successful\n', '        completedAt = now; //ICO is complete\n', '\n', '        LogFundingSuccessful(totalRaised); //we log the finish\n', '        finished(); //and execute closure\n', '\n', '    }\n', '}\n', '\n', '    /**\n', '    * @notice closure handler\n', '    */\n', '    function finished() public { //When finished eth are transfered to beneficiary\n', '\n', '        require(state == State.Successful);\n', '        require(beneficiary.send(this.balance));\n', '        LogBeneficiaryPaid(beneficiary);\n', '\n', '    }\n', '\n', '    /*\n', '    * @dev direct payments\n', '    */\n', '    function () public payable {\n', '        \n', '        contribute();\n', '\n', '    }\n', '}']