['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '    * @return the address of the owner.\n', '    */\n', '    function owner() public view returns(address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @return true if `msg.sender` is the owner of the contract.\n', '    */\n', '    function isOwner() public view returns(bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to relinquish control of the contract.\n', '    * @notice Renouncing to ownership will leave the contract without an owner.\n', '    * It will not be possible to call the functions with the `onlyOwner`\n', '    * modifier anymore.\n', '    */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '    event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '    );\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '\n', '/**\n', ' * @title AzbitTokenInterface\n', ' * @dev ERC20 Token Interface for Azbit project\n', ' */\n', 'contract AzbitTokenInterface is IERC20 {\n', '\n', '    function releaseDate() external view returns (uint256);\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title AzbitAirdrop\n', ' * @dev Airdrop Smart Contract of Azbit project\n', ' */\n', 'contract AzbitAirdrop is Ownable {\n', '\n', '    // ** PUBLIC STATE VARIABLES **\n', '\n', '    // Azbit token\n', '    AzbitTokenInterface public azbitToken;\n', '\n', '\n', '    // ** CONSTRUCTOR **\n', '\n', '    /**\n', '    * @dev Constructor of AzbitAirdrop Contract\n', '    * @param tokenAddress address of AzbitToken\n', '    */\n', '    constructor(\n', '        address tokenAddress\n', '    ) \n', '        public \n', '    {\n', '        _setToken(tokenAddress);\n', '    }\n', '\n', '\n', '    // ** ONLY OWNER FUNCTIONS **\n', '\n', '    /**\n', '    * @dev Send tokens to beneficiary by owner\n', '    * @param beneficiary The address for tokens withdrawal\n', '    * @param amount The token amount\n', '    */\n', '    function sendTokens(\n', '        address beneficiary,\n', '        uint256 amount\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        _sendTokens(beneficiary, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Send tokens to the array of beneficiaries  by owner\n', '    * @param beneficiaries The array of addresses for tokens withdrawal\n', '    * @param amounts The array of tokens amount\n', '    */\n', '    function sendTokensArray(\n', '        address[] beneficiaries, \n', '        uint256[] amounts\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(beneficiaries.length == amounts.length, "array lengths have to be equal");\n', '        require(beneficiaries.length > 0, "array lengths have to be greater than zero");\n', '\n', '        for (uint256 i = 0; i < beneficiaries.length; i++) {\n', '            _sendTokens(beneficiaries[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '\n', '    // ** PUBLIC VIEW FUNCTIONS **\n', '\n', '    /**\n', '    * @return total tokens of this contract.\n', '    */\n', '    function contractTokenBalance()\n', '        public \n', '        view \n', '        returns(uint256) \n', '    {\n', '        return azbitToken.balanceOf(this);\n', '    }\n', '\n', '\n', '    // ** PRIVATE HELPER FUNCTIONS **\n', '\n', '    // Helper: Set the address of Azbit Token\n', '    function _setToken(address tokenAddress) \n', '        internal \n', '    {\n', '        azbitToken = AzbitTokenInterface(tokenAddress);\n', '        require(contractTokenBalance() >= 0, "The token being added is not ERC20 token");\n', '    }\n', '\n', '    // Helper: send tokens to beneficiary\n', '    function _sendTokens(\n', '        address beneficiary, \n', '        uint256 amount\n', '    )\n', '        internal\n', '    {\n', '        require(beneficiary != address(0), "Address cannot be 0x0");\n', '        require(amount > 0, "Amount cannot be zero");\n', '        require(amount <= contractTokenBalance(), "not enough tokens on this contract");\n', '\n', '        // transfer tokens\n', '        require(azbitToken.transfer(beneficiary, amount), "tokens are not transferred");\n', '    }\n', '}']