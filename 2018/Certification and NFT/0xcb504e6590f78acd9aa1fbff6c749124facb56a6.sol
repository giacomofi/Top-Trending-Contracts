['pragma solidity ^0.4.18;\n', '\n', 'contract KryptoArmy {\n', '\n', '    address ceoAddress = 0x46d9112533ef677059c430E515775e358888e38b;\n', '    address cfoAddress = 0x23a49A9930f5b562c6B1096C3e6b5BEc133E8B2E;\n', '\n', '    modifier onlyCeo() {\n', '        require (msg.sender == ceoAddress);\n', '        _;\n', '    }\n', '\n', '    // Struct for Army\n', '    struct Army {\n', '        string name;            // The name of the army (invented by the user)\n', '        string idArmy;          // The id of the army (USA for United States)\n', '        uint experiencePoints;  // The experience points of the army, we will use this to handle\n', '        uint256 price;          // The cost of the Army in Wei (1 ETH = 1000000000000000000 Wei) \n', '        uint attackBonus;       // The attack bonus for the soldiers (from 0 to 10)\n', '        uint defenseBonus;      // The defense bonus for the soldiers (from 0 to 10)\n', '        bool isForSale;         // User is selling this army, it can be purchase on the marketplace\n', '        address ownerAddress;   // The address of the owner\n', '        uint soldiersCount;     // The count of all the soldiers in this army\n', '    } \n', '    Army[] armies;\n', '    \n', '    // Struct for Battles\n', '    struct Battle {\n', '        uint idArmyAttacking;   // The id of the army attacking\n', '        uint idArmyDefensing;   // The id of the army defensing\n', '        uint idArmyVictorious;  // The id of the winning army\n', '    } \n', '\n', '    Battle[] battles;\n', '\n', '    // Mapping army\n', '    mapping (address => uint) public ownerToArmy;       // Which army does this address own\n', '    mapping (address => uint) public ownerArmyCount;    // How many armies own this address?\n', '\n', '    // Mapping weapons to army\n', '    mapping (uint => uint) public armyDronesCount;\n', '    mapping (uint => uint) public armyPlanesCount;\n', '    mapping (uint => uint) public armyHelicoptersCount;\n', '    mapping (uint => uint) public armyTanksCount;\n', '    mapping (uint => uint) public armyAircraftCarriersCount;\n', '    mapping (uint => uint) public armySubmarinesCount;\n', '    mapping (uint => uint) public armySatelitesCount;\n', '\n', '    // Mapping battles\n', '    mapping (uint => uint) public armyCountBattlesWon;\n', '    mapping (uint => uint) public armyCountBattlesLost;\n', '\n', '    // This function creates a new army and saves it in the array with its parameters\n', '    function _createArmy(string _name, string _idArmy, uint _price, uint _attackBonus, uint _defenseBonus) public onlyCeo {\n', '\n', '        // We add the new army to the list and save the id in a variable \n', '        armies.push(Army(_name, _idArmy, 0, _price, _attackBonus, _defenseBonus, true, address(this), 0));\n', '    }\n', '\n', '    // We use this function to purchase an army with Metamask\n', '    function purchaseArmy(uint _armyId) public payable {\n', '        // We verify that the value paid is equal to the cost of the army\n', '        require(msg.value == armies[_armyId].price);\n', '        require(msg.value > 0);\n', '        \n', '        // We check if this army is owned by another user\n', '        if(armies[_armyId].ownerAddress != address(this)) {\n', '            uint CommissionOwnerValue = msg.value - (msg.value / 10);\n', '            armies[_armyId].ownerAddress.transfer(CommissionOwnerValue);\n', '        }\n', '\n', '        // We modify the ownership of the army\n', '        _ownershipArmy(_armyId);\n', '    }\n', '\n', '    // Function to purchase a soldier\n', '    function purchaseSoldiers(uint _armyId, uint _countSoldiers) public payable {\n', '        // Check that message value > 0\n', '        require(msg.value > 0);\n', '        uint256 msgValue = msg.value;\n', '\n', '        if(msgValue == 1000000000000000 && _countSoldiers == 1) {\n', '            // Increment soldiers count in army\n', '            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n', '        } else if(msgValue == 8000000000000000 && _countSoldiers == 10) {\n', '            // Increment soldiers count in army\n', '            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n', '        } else if(msgValue == 65000000000000000 && _countSoldiers == 100) {\n', '            // Increment soldiers count in army\n', '            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n', '        } else if(msgValue == 500000000000000000 && _countSoldiers == 1000) {\n', '            // Increment soldiers count in army\n', '            armies[_armyId].soldiersCount = armies[_armyId].soldiersCount + _countSoldiers;\n', '        }\n', '    }\n', '\n', '    // Payable function to purchase weapons\n', '    function purchaseWeapons(uint _armyId, uint _weaponId, uint _bonusAttack, uint _bonusDefense ) public payable {\n', '        // Check that message value > 0\n', '        uint isValid = 0;\n', '        uint256 msgValue = msg.value;\n', '\n', '        if(msgValue == 10000000000000000 && _weaponId == 0) {\n', '            armyDronesCount[_armyId]++;\n', '            isValid = 1;\n', '        } else if(msgValue == 25000000000000000 && _weaponId == 1) {\n', '             armyPlanesCount[_armyId]++;\n', '            isValid = 1;\n', '        } else if(msgValue == 25000000000000000 && _weaponId == 2) {\n', '            armyHelicoptersCount[_armyId]++;\n', '            isValid = 1;\n', '        } else if(msgValue == 45000000000000000 && _weaponId == 3) {\n', '            armyTanksCount[_armyId]++;\n', '            isValid = 1;\n', '        } else if(msgValue == 100000000000000000 && _weaponId == 4) {\n', '            armyAircraftCarriersCount[_armyId]++;\n', '            isValid = 1;\n', '        } else if(msgValue == 100000000000000000 && _weaponId == 5) {\n', '            armySubmarinesCount[_armyId]++;\n', '            isValid = 1;\n', '        } else if(msgValue == 120000000000000000 && _weaponId == 6) {\n', '            armySatelitesCount[_armyId]++;\n', '            isValid = 1;\n', '        } \n', '\n', '        // We check if the data has been verified as valid\n', '        if(isValid == 1) {\n', '            armies[_armyId].attackBonus = armies[_armyId].attackBonus + _bonusAttack;\n', '            armies[_armyId].defenseBonus = armies[_armyId].defenseBonus + _bonusDefense;\n', '        }\n', '    }\n', '\n', '    // We use this function to affect an army to an address (when someone purchase an army)\n', '    function _ownershipArmy(uint armyId) private {\n', '\n', '        // We check if the sender already own an army\n', '        require (ownerArmyCount[msg.sender] == 0);\n', '\n', '        // If this army has alreay been purchased we verify that the owner put it on sale\n', '        require(armies[armyId].isForSale == true);\n', '        \n', '        // We check one more time that the price paid is the price of the army\n', '        require(armies[armyId].price == msg.value);\n', '\n', '        // We decrement the army count for the previous owner (in case a user is selling army on marketplace)\n', '        ownerArmyCount[armies[armyId].ownerAddress]--;\n', '        \n', '        // We set the new army owner\n', '        armies[armyId].ownerAddress = msg.sender;\n', '        ownerToArmy[msg.sender] = armyId;\n', '\n', '        // We increment the army count for this address\n', '        ownerArmyCount[msg.sender]++;\n', '\n', '        // Send event for new ownership\n', '        armies[armyId].isForSale = false;\n', '    }\n', '\n', '    // We use this function to start a new battle\n', '    function startNewBattle(uint _idArmyAttacking, uint _idArmyDefensing, uint _randomIndicatorAttack, uint _randomIndicatorDefense) public returns(uint) {\n', '\n', '        // We verify that the army attacking is the army of msg.sender\n', '        require (armies[_idArmyAttacking].ownerAddress == msg.sender);\n', '\n', '        // Get details for army attacking\n', '        uint ScoreAttack = armies[_idArmyAttacking].attackBonus * (armies[_idArmyAttacking].soldiersCount/3) + armies[_idArmyAttacking].soldiersCount  + _randomIndicatorAttack; \n', '\n', '        // Get details for army defending\n', '        uint ScoreDefense = armies[_idArmyAttacking].defenseBonus * (armies[_idArmyDefensing].soldiersCount/2) + armies[_idArmyDefensing].soldiersCount + _randomIndicatorDefense; \n', '\n', '        uint VictoriousArmy;\n', '        uint ExperiencePointsGained;\n', '        if(ScoreDefense >= ScoreAttack) {\n', '            VictoriousArmy = _idArmyDefensing;\n', '            ExperiencePointsGained = armies[_idArmyAttacking].attackBonus + 2;\n', '            armies[_idArmyDefensing].experiencePoints = armies[_idArmyDefensing].experiencePoints + ExperiencePointsGained;\n', '\n', '            // Increment mapping battles won\n', '            armyCountBattlesWon[_idArmyDefensing]++;\n', '            armyCountBattlesLost[_idArmyAttacking]++;\n', '        } else {\n', '            VictoriousArmy = _idArmyAttacking;\n', '            ExperiencePointsGained = armies[_idArmyDefensing].defenseBonus + 2;\n', '            armies[_idArmyAttacking].experiencePoints = armies[_idArmyAttacking].experiencePoints + ExperiencePointsGained;\n', '\n', '            // Increment mapping battles won\n', '            armyCountBattlesWon[_idArmyAttacking]++;\n', '            armyCountBattlesLost[_idArmyDefensing]++;\n', '        }\n', '        \n', '        // We add the new battle to the blockchain and save its id in a variable \n', '        battles.push(Battle(_idArmyAttacking, _idArmyDefensing, VictoriousArmy));  \n', '        \n', '        // Send event\n', '        return (VictoriousArmy);\n', '    }\n', '\n', '    // Owner can sell army\n', '    function ownerSellArmy(uint _armyId, uint256 _amount) public {\n', "        // We close the function if the user calling this function doesn't own the army\n", '        require (armies[_armyId].ownerAddress == msg.sender);\n', '        require (_amount > 0);\n', '        require (armies[_armyId].isForSale == false);\n', '\n', '        armies[_armyId].isForSale = true;\n', '        armies[_armyId].price = _amount;\n', '    }\n', '    \n', '    // Owner remove army from marketplace\n', '    function ownerCancelArmyMarketplace(uint _armyId) public {\n', '        require (armies[_armyId].ownerAddress == msg.sender);\n', '        require (armies[_armyId].isForSale == true);\n', '        armies[_armyId].isForSale = false;\n', '    }\n', '\n', '    // Function to return all the value of an army\n', '    function getArmyFullData(uint armyId) public view returns(string, string, uint, uint256, uint, uint, bool) {\n', '        string storage ArmyName = armies[armyId].name;\n', '        string storage ArmyId = armies[armyId].idArmy;\n', '        uint ArmyExperiencePoints = armies[armyId].experiencePoints;\n', '        uint256 ArmyPrice = armies[armyId].price;\n', '        uint ArmyAttack = armies[armyId].attackBonus;\n', '        uint ArmyDefense = armies[armyId].defenseBonus;\n', '        bool ArmyIsForSale = armies[armyId].isForSale;\n', '        return (ArmyName, ArmyId, ArmyExperiencePoints, ArmyPrice, ArmyAttack, ArmyDefense, ArmyIsForSale);\n', '    }\n', '\n', '    // Function to return the owner of the army\n', '    function getArmyOwner(uint armyId) public view returns(address, bool) {\n', '        return (armies[armyId].ownerAddress, armies[armyId].isForSale);\n', '    }\n', '\n', '    // Function to return the owner of the army\n', '    function getSenderArmyDetails() public view returns(uint, string) {\n', '        uint ArmyId = ownerToArmy[msg.sender];\n', '        string storage ArmyName = armies[ArmyId].name;\n', '        return (ArmyId, ArmyName);\n', '    }\n', '    \n', '    // Function to return the owner army count\n', '    function getSenderArmyCount() public view returns(uint) {\n', '        uint ArmiesCount = ownerArmyCount[msg.sender];\n', '        return (ArmiesCount);\n', '    }\n', '\n', '    // Function to return the soldiers count of an army\n', '    function getArmySoldiersCount(uint armyId) public view returns(uint) {\n', '        uint SoldiersCount = armies[armyId].soldiersCount;\n', '        return (SoldiersCount);\n', '    }\n', '\n', '    // Return an array with the weapons of the army\n', '    function getWeaponsArmy1(uint armyId) public view returns(uint, uint, uint, uint)  {\n', '        uint CountDrones = armyDronesCount[armyId];\n', '        uint CountPlanes = armyPlanesCount[armyId];\n', '        uint CountHelicopters = armyHelicoptersCount[armyId];\n', '        uint CountTanks = armyTanksCount[armyId];\n', '        return (CountDrones, CountPlanes, CountHelicopters, CountTanks);\n', '    }\n', '    function getWeaponsArmy2(uint armyId) public view returns(uint, uint, uint)  {\n', '        uint CountAircraftCarriers = armyAircraftCarriersCount[armyId];\n', '        uint CountSubmarines = armySubmarinesCount[armyId];\n', '        uint CountSatelites = armySatelitesCount[armyId];\n', '        return (CountAircraftCarriers, CountSubmarines, CountSatelites);\n', '    }\n', '\n', '    // Retrieve count battles won\n', '    function getArmyBattles(uint _armyId) public view returns(uint, uint) {\n', '        return (armyCountBattlesWon[_armyId], armyCountBattlesLost[_armyId]);\n', '    }\n', '    \n', '    // Retrieve the details of a battle\n', '    function getDetailsBattles(uint battleId) public view returns(uint, uint, uint, string, string) {\n', '        return (battles[battleId].idArmyAttacking, battles[battleId].idArmyDefensing, battles[battleId].idArmyVictorious, armies[battles[battleId].idArmyAttacking].idArmy, armies[battles[battleId].idArmyDefensing].idArmy);\n', '    }\n', '    \n', '    // Get battles count\n', '    function getBattlesCount() public view returns(uint) {\n', '        return (battles.length);\n', '    }\n', '\n', '    // To withdraw fund from this contract\n', '    function withdraw(uint amount, uint who) public onlyCeo returns(bool) {\n', '        require(amount <= this.balance);\n', '        if(who == 0) {\n', '            ceoAddress.transfer(amount);\n', '        } else {\n', '            cfoAddress.transfer(amount);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    // Initial function to create the 100 armies with their attributes\n', '    function KryptoArmy() public onlyCeo {\n', '\n', '      // 1. USA\n', '        _createArmy("United States", "USA", 550000000000000000, 8, 9);\n', '\n', '        // 2. North Korea\n', '        _createArmy("North Korea", "NK", 500000000000000000, 10, 5);\n', '\n', '        // 3. Russia\n', '        _createArmy("Russia", "RUS", 450000000000000000, 8, 7);\n', '\n', '        // 4. China\n', '        _createArmy("China", "CHN", 450000000000000000, 7, 8);\n', '\n', '        // 5. Japan\n', '        _createArmy("Japan", "JPN", 420000000000000000, 7, 7);\n', '\n', '        // 6. France\n', '        _createArmy("France", "FRA", 400000000000000000, 6, 8);\n', '\n', '        // 7. Germany\n', '        _createArmy("Germany", "GER", 400000000000000000, 7, 6);\n', '\n', '        // 8. India\n', '        _createArmy("India", "IND", 400000000000000000, 7, 6);\n', '\n', '        // 9. United Kingdom\n', '        _createArmy("United Kingdom", "UK", 350000000000000000, 5, 7);\n', '\n', '        // 10. South Korea\n', '        _createArmy("South Korea", "SK", 350000000000000000, 6, 6);\n', '\n', '        // 11. Turkey\n', '        _createArmy("Turkey", "TUR", 300000000000000000, 7, 4);\n', '\n', '        // 12. Italy\n', '        //_createArmy("Italy", "ITA", 280000000000000000, 5, 5);\n', '    }\n', '}']