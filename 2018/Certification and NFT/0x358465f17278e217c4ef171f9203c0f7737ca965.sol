['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract EntryToken is StandardToken, Ownable {\n', '    string public constant name = "Entry Token";\n', '    string public constant symbol = "ENTRY";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /// Maximum tokens to be allocated on the sale (55% of the hard cap)\n', '    uint256 public constant TOKENS_SALE_HARD_CAP = 325000000000000000000000000; // 325000000 * 10**18\n', '\n', '    /// Base exchange rate is set to 1 ETH = 6000 ENTRY.\n', '    uint256 public constant BASE_RATE = 6000;\n', '\n', '    /// pre sale start 03.05.2018\n', '    uint256 private constant datePreSaleStart = 1525294800;\n', '    \n', '    /// pre sale end time 11.05.2018\n', '    uint256 private constant datePreSaleEnd = 1525986000;\n', '\n', '    /// sale start time 01.06.2018\n', '    uint256 private constant dateSaleStart = 1527800400;\n', '\n', '    /// sale end time 01.09.2018\n', '    uint256 private constant dateSaleEnd = 1535749200;\n', '\n', '    \n', '    /// pre-sale token cap\n', '    uint256 private preSaleCap = 75000000000000000000000000; // Pre-sale  75000000 * 10**18\n', '    \n', '    /// token caps for each round\n', '    uint256[25] private stageCaps = [\n', '        85000000000000000000000000\t, // Stage 1   85000000 * 10**18\n', '        95000000000000000000000000\t, // Stage 2   95000000 * 10**18\n', '        105000000000000000000000000\t, // Stage 3   105000000 * 10**18\n', '        115000000000000000000000000\t, // Stage 4   115000000 * 10**18\n', '        125000000000000000000000000\t, // Stage 5   125000000 * 10**18\n', '        135000000000000000000000000\t, // Stage 6   135000000 * 10**18\n', '        145000000000000000000000000\t, // Stage 7   145000000 * 10**18\n', '        155000000000000000000000000\t, // Stage 8   155000000 * 10**18\n', '        165000000000000000000000000\t, // Stage 9   165000000 * 10**18\n', '        175000000000000000000000000\t, // Stage 10   175000000 * 10**18\n', '        185000000000000000000000000\t, // Stage 11   185000000 * 10**18\n', '        195000000000000000000000000\t, // Stage 12   195000000 * 10**18\n', '        205000000000000000000000000\t, // Stage 13   205000000 * 10**18\n', '        215000000000000000000000000\t, // Stage 14   215000000 * 10**18\n', '        225000000000000000000000000\t, // Stage 15   225000000 * 10**18\n', '        235000000000000000000000000\t, // Stage 16   235000000 * 10**18\n', '        245000000000000000000000000\t, // Stage 17   245000000 * 10**18\n', '        255000000000000000000000000\t, // Stage 18   255000000 * 10**18\n', '        265000000000000000000000000\t, // Stage 19   265000000 * 10**18\n', '        275000000000000000000000000\t, // Stage 20   275000000 * 10**18\n', '        285000000000000000000000000\t, // Stage 21   285000000 * 10**18\n', '        295000000000000000000000000\t, // Stage 22   295000000 * 10**18\n', '        305000000000000000000000000\t, // Stage 23   305000000 * 10**18\n', '        315000000000000000000000000\t, // Stage 24   315000000 * 10**18\n', '        325000000000000000000000000   // Stage 25   325000000 * 10**18\n', '    ];\n', '    /// tokens rate for each round\n', '    uint8[25] private stageRates = [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, \n', '                        28, 29, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44];\n', '\n', '    uint64 private constant dateTeamTokensLockedTill = 1630443600;\n', '   \n', '    bool public tokenSaleClosed = false;\n', '\n', '    address public timelockContractAddress;\n', '\n', '\n', '    function isPreSalePeriod() public constant returns (bool) {\n', '        if(totalSupply > preSaleCap || now >= datePreSaleEnd) {\n', '            return false;\n', '        } else {\n', '            return now > datePreSaleStart;\n', '        }\n', '    }\n', '\n', '\n', '    function isICOPeriod() public constant returns (bool) {\n', '        if (totalSupply > TOKENS_SALE_HARD_CAP || now >= dateSaleEnd){\n', '            return false;\n', '        } else {\n', '            return now > dateSaleStart;\n', '        }\n', '    }\n', '\n', '    modifier inProgress {\n', '        require(totalSupply < TOKENS_SALE_HARD_CAP && !tokenSaleClosed && now >= datePreSaleStart);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier beforeEnd {\n', '        require(!tokenSaleClosed);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier canBeTraded {\n', '        require(tokenSaleClosed);\n', '        _;\n', '    }\n', '\n', '\n', '    function EntryToken() public {\n', '    \t/// generate private investor tokens \n', '    \tgenerateTokens(owner, 50000000000000000000000000); // 50000000 * 10**18\n', '    }\n', '\n', '\n', '    function () public payable inProgress {\n', '        if(isPreSalePeriod()){\n', '            buyPreSaleTokens(msg.sender);\n', '        } else if (isICOPeriod()){\n', '            buyTokens(msg.sender);\n', '        }\t\t\t\n', '    } \n', '    \n', '\n', '    function buyPreSaleTokens(address _beneficiary) internal {\n', '        require(msg.value >= 0.01 ether);\n', '        uint256 tokens = getPreSaleTokenAmount(msg.value);\n', '        require(totalSupply.add(tokens) <= preSaleCap);\n', '        generateTokens(_beneficiary, tokens);\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    \n', '    function buyTokens(address _beneficiary) internal {\n', '        require(msg.value >= 0.01 ether);\n', '        uint256 tokens = getTokenAmount(msg.value);\n', '        require(totalSupply.add(tokens) <= TOKENS_SALE_HARD_CAP);\n', '        generateTokens(_beneficiary, tokens);\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '\n', '    function getPreSaleTokenAmount(uint256 weiAmount)internal pure returns (uint256) {\n', '        return weiAmount.mul(BASE_RATE);\n', '    }\n', '    \n', '    \n', '    function getTokenAmount(uint256 weiAmount) internal view returns (uint256 tokens) {\n', '        uint256 tokenBase = weiAmount.mul(BASE_RATE);\n', '        uint8 stageNumber = currentStageIndex();\n', '        tokens = getStageTokenAmount(tokenBase, stageNumber);\n', '        while(tokens.add(totalSupply) > stageCaps[stageNumber] && stageNumber < 24){\n', '           stageNumber++;\n', '           tokens = getStageTokenAmount(tokenBase, stageNumber);\n', '        }\n', '    }\n', '    \n', '    \n', '    function getStageTokenAmount(uint256 tokenBase, uint8 stageNumber)internal view returns (uint256) {\n', '    \tuint256 rate = 10000000000000000000/stageRates[stageNumber];\n', '    \tuint256 base = tokenBase/1000000000000000000;\n', '        return base.mul(rate);\n', '    }\n', '    \n', '    \n', '    function currentStageIndex() internal view returns (uint8 stageNumber) {\n', '        stageNumber = 0;\n', '        while(stageNumber < 24 && totalSupply > stageCaps[stageNumber]) {\n', '            stageNumber++;\n', '        }\n', '    }\n', '    \n', '    \n', '    function buyTokensOnInvestorBehalf(address _beneficiary, uint256 _tokens) public onlyOwner beforeEnd {\n', '        generateTokens(_beneficiary, _tokens);\n', '    }\n', '    \n', '    \n', '    function buyTokensOnInvestorBehalfBatch(address[] _addresses, uint256[] _tokens) public onlyOwner beforeEnd {\n', '        require(_addresses.length == _tokens.length);\n', '        require(_addresses.length <= 100);\n', '\n', '        for (uint256 i = 0; i < _tokens.length; i = i.add(1)) {\n', '            generateTokens(_addresses[i], _tokens[i]);\n', '        }\n', '    }\n', '    \n', '    \n', '    function generateTokens(address _beneficiary, uint256 _tokens) internal {\n', '        require(_beneficiary != address(0));\n', '        totalSupply = totalSupply.add(_tokens);\n', '        balances[_beneficiary] = balances[_beneficiary].add(_tokens);\n', '        emit Transfer(address(0), _beneficiary, _tokens);\n', '    }\n', '\n', '\n', '    function close() public onlyOwner beforeEnd {\n', '        /// team tokens are equal to 5% of tokens\n', '        uint256 lockedTokens = 16250000000000000000000000; // 16 250 000 * 10**18\n', '        // partner tokens for advisors, bouties, SCO 40% of tokens\n', '        uint256 partnerTokens = 260000000000000000000000; // 130 000 0000 * 10**18\n', '        \n', '        generateLockedTokens(lockedTokens);\n', '        generatePartnerTokens(partnerTokens);\n', '        \n', '        totalSupply = totalSupply.add(lockedTokens+partnerTokens);\n', '\n', '        tokenSaleClosed = true;\n', '\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    function generateLockedTokens( uint lockedTokens) internal{\n', '        TokenTimelock lockedTeamTokens = new TokenTimelock(this, owner, dateTeamTokensLockedTill);\n', '        timelockContractAddress = address(lockedTeamTokens);\n', '        balances[timelockContractAddress] = balances[timelockContractAddress].add(lockedTokens);\n', '        emit Transfer(address(0), timelockContractAddress, lockedTokens);\n', '    }\n', '    \n', '    \n', '    function generatePartnerTokens(uint partnerTokens) internal{\n', '        balances[owner] = partnerTokens;\n', '        emit Transfer(address(0), owner, partnerTokens);\n', '    }\n', '      \n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public canBeTraded returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public canBeTraded returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        require(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '        assert(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        assert(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        assert(token.approve(spender, value));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title TokenTimelock\n', ' * @dev TokenTimelock is a token holder contract that will allow a\n', ' * beneficiary to extract the tokens after a given release time\n', ' */\n', 'contract TokenTimelock {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  // ERC20 basic token contract being held\n', '  ERC20Basic public token;\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  // timestamp when token release is enabled\n', '  uint256 public releaseTime;\n', '\n', '  function TokenTimelock(ERC20Basic _token, address _beneficiary, uint256 _releaseTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_releaseTime > block.timestamp);\n', '    token = _token;\n', '    beneficiary = _beneficiary;\n', '    releaseTime = _releaseTime;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers tokens held by timelock to beneficiary.\n', '   */\n', '  function release() public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= releaseTime);\n', '\n', '    uint256 amount = token.balanceOf(this);\n', '    require(amount > 0);\n', '\n', '    token.safeTransfer(beneficiary, amount);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     */\n', '    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract EntryToken is StandardToken, Ownable {\n', '    string public constant name = "Entry Token";\n', '    string public constant symbol = "ENTRY";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /// Maximum tokens to be allocated on the sale (55% of the hard cap)\n', '    uint256 public constant TOKENS_SALE_HARD_CAP = 325000000000000000000000000; // 325000000 * 10**18\n', '\n', '    /// Base exchange rate is set to 1 ETH = 6000 ENTRY.\n', '    uint256 public constant BASE_RATE = 6000;\n', '\n', '    /// pre sale start 03.05.2018\n', '    uint256 private constant datePreSaleStart = 1525294800;\n', '    \n', '    /// pre sale end time 11.05.2018\n', '    uint256 private constant datePreSaleEnd = 1525986000;\n', '\n', '    /// sale start time 01.06.2018\n', '    uint256 private constant dateSaleStart = 1527800400;\n', '\n', '    /// sale end time 01.09.2018\n', '    uint256 private constant dateSaleEnd = 1535749200;\n', '\n', '    \n', '    /// pre-sale token cap\n', '    uint256 private preSaleCap = 75000000000000000000000000; // Pre-sale  75000000 * 10**18\n', '    \n', '    /// token caps for each round\n', '    uint256[25] private stageCaps = [\n', '        85000000000000000000000000\t, // Stage 1   85000000 * 10**18\n', '        95000000000000000000000000\t, // Stage 2   95000000 * 10**18\n', '        105000000000000000000000000\t, // Stage 3   105000000 * 10**18\n', '        115000000000000000000000000\t, // Stage 4   115000000 * 10**18\n', '        125000000000000000000000000\t, // Stage 5   125000000 * 10**18\n', '        135000000000000000000000000\t, // Stage 6   135000000 * 10**18\n', '        145000000000000000000000000\t, // Stage 7   145000000 * 10**18\n', '        155000000000000000000000000\t, // Stage 8   155000000 * 10**18\n', '        165000000000000000000000000\t, // Stage 9   165000000 * 10**18\n', '        175000000000000000000000000\t, // Stage 10   175000000 * 10**18\n', '        185000000000000000000000000\t, // Stage 11   185000000 * 10**18\n', '        195000000000000000000000000\t, // Stage 12   195000000 * 10**18\n', '        205000000000000000000000000\t, // Stage 13   205000000 * 10**18\n', '        215000000000000000000000000\t, // Stage 14   215000000 * 10**18\n', '        225000000000000000000000000\t, // Stage 15   225000000 * 10**18\n', '        235000000000000000000000000\t, // Stage 16   235000000 * 10**18\n', '        245000000000000000000000000\t, // Stage 17   245000000 * 10**18\n', '        255000000000000000000000000\t, // Stage 18   255000000 * 10**18\n', '        265000000000000000000000000\t, // Stage 19   265000000 * 10**18\n', '        275000000000000000000000000\t, // Stage 20   275000000 * 10**18\n', '        285000000000000000000000000\t, // Stage 21   285000000 * 10**18\n', '        295000000000000000000000000\t, // Stage 22   295000000 * 10**18\n', '        305000000000000000000000000\t, // Stage 23   305000000 * 10**18\n', '        315000000000000000000000000\t, // Stage 24   315000000 * 10**18\n', '        325000000000000000000000000   // Stage 25   325000000 * 10**18\n', '    ];\n', '    /// tokens rate for each round\n', '    uint8[25] private stageRates = [15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, \n', '                        28, 29, 30, 31, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44];\n', '\n', '    uint64 private constant dateTeamTokensLockedTill = 1630443600;\n', '   \n', '    bool public tokenSaleClosed = false;\n', '\n', '    address public timelockContractAddress;\n', '\n', '\n', '    function isPreSalePeriod() public constant returns (bool) {\n', '        if(totalSupply > preSaleCap || now >= datePreSaleEnd) {\n', '            return false;\n', '        } else {\n', '            return now > datePreSaleStart;\n', '        }\n', '    }\n', '\n', '\n', '    function isICOPeriod() public constant returns (bool) {\n', '        if (totalSupply > TOKENS_SALE_HARD_CAP || now >= dateSaleEnd){\n', '            return false;\n', '        } else {\n', '            return now > dateSaleStart;\n', '        }\n', '    }\n', '\n', '    modifier inProgress {\n', '        require(totalSupply < TOKENS_SALE_HARD_CAP && !tokenSaleClosed && now >= datePreSaleStart);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier beforeEnd {\n', '        require(!tokenSaleClosed);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier canBeTraded {\n', '        require(tokenSaleClosed);\n', '        _;\n', '    }\n', '\n', '\n', '    function EntryToken() public {\n', '    \t/// generate private investor tokens \n', '    \tgenerateTokens(owner, 50000000000000000000000000); // 50000000 * 10**18\n', '    }\n', '\n', '\n', '    function () public payable inProgress {\n', '        if(isPreSalePeriod()){\n', '            buyPreSaleTokens(msg.sender);\n', '        } else if (isICOPeriod()){\n', '            buyTokens(msg.sender);\n', '        }\t\t\t\n', '    } \n', '    \n', '\n', '    function buyPreSaleTokens(address _beneficiary) internal {\n', '        require(msg.value >= 0.01 ether);\n', '        uint256 tokens = getPreSaleTokenAmount(msg.value);\n', '        require(totalSupply.add(tokens) <= preSaleCap);\n', '        generateTokens(_beneficiary, tokens);\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    \n', '    function buyTokens(address _beneficiary) internal {\n', '        require(msg.value >= 0.01 ether);\n', '        uint256 tokens = getTokenAmount(msg.value);\n', '        require(totalSupply.add(tokens) <= TOKENS_SALE_HARD_CAP);\n', '        generateTokens(_beneficiary, tokens);\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '\n', '    function getPreSaleTokenAmount(uint256 weiAmount)internal pure returns (uint256) {\n', '        return weiAmount.mul(BASE_RATE);\n', '    }\n', '    \n', '    \n', '    function getTokenAmount(uint256 weiAmount) internal view returns (uint256 tokens) {\n', '        uint256 tokenBase = weiAmount.mul(BASE_RATE);\n', '        uint8 stageNumber = currentStageIndex();\n', '        tokens = getStageTokenAmount(tokenBase, stageNumber);\n', '        while(tokens.add(totalSupply) > stageCaps[stageNumber] && stageNumber < 24){\n', '           stageNumber++;\n', '           tokens = getStageTokenAmount(tokenBase, stageNumber);\n', '        }\n', '    }\n', '    \n', '    \n', '    function getStageTokenAmount(uint256 tokenBase, uint8 stageNumber)internal view returns (uint256) {\n', '    \tuint256 rate = 10000000000000000000/stageRates[stageNumber];\n', '    \tuint256 base = tokenBase/1000000000000000000;\n', '        return base.mul(rate);\n', '    }\n', '    \n', '    \n', '    function currentStageIndex() internal view returns (uint8 stageNumber) {\n', '        stageNumber = 0;\n', '        while(stageNumber < 24 && totalSupply > stageCaps[stageNumber]) {\n', '            stageNumber++;\n', '        }\n', '    }\n', '    \n', '    \n', '    function buyTokensOnInvestorBehalf(address _beneficiary, uint256 _tokens) public onlyOwner beforeEnd {\n', '        generateTokens(_beneficiary, _tokens);\n', '    }\n', '    \n', '    \n', '    function buyTokensOnInvestorBehalfBatch(address[] _addresses, uint256[] _tokens) public onlyOwner beforeEnd {\n', '        require(_addresses.length == _tokens.length);\n', '        require(_addresses.length <= 100);\n', '\n', '        for (uint256 i = 0; i < _tokens.length; i = i.add(1)) {\n', '            generateTokens(_addresses[i], _tokens[i]);\n', '        }\n', '    }\n', '    \n', '    \n', '    function generateTokens(address _beneficiary, uint256 _tokens) internal {\n', '        require(_beneficiary != address(0));\n', '        totalSupply = totalSupply.add(_tokens);\n', '        balances[_beneficiary] = balances[_beneficiary].add(_tokens);\n', '        emit Transfer(address(0), _beneficiary, _tokens);\n', '    }\n', '\n', '\n', '    function close() public onlyOwner beforeEnd {\n', '        /// team tokens are equal to 5% of tokens\n', '        uint256 lockedTokens = 16250000000000000000000000; // 16 250 000 * 10**18\n', '        // partner tokens for advisors, bouties, SCO 40% of tokens\n', '        uint256 partnerTokens = 260000000000000000000000; // 130 000 0000 * 10**18\n', '        \n', '        generateLockedTokens(lockedTokens);\n', '        generatePartnerTokens(partnerTokens);\n', '        \n', '        totalSupply = totalSupply.add(lockedTokens+partnerTokens);\n', '\n', '        tokenSaleClosed = true;\n', '\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    function generateLockedTokens( uint lockedTokens) internal{\n', '        TokenTimelock lockedTeamTokens = new TokenTimelock(this, owner, dateTeamTokensLockedTill);\n', '        timelockContractAddress = address(lockedTeamTokens);\n', '        balances[timelockContractAddress] = balances[timelockContractAddress].add(lockedTokens);\n', '        emit Transfer(address(0), timelockContractAddress, lockedTokens);\n', '    }\n', '    \n', '    \n', '    function generatePartnerTokens(uint partnerTokens) internal{\n', '        balances[owner] = partnerTokens;\n', '        emit Transfer(address(0), owner, partnerTokens);\n', '    }\n', '      \n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) public canBeTraded returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public canBeTraded returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '}']
