['pragma solidity ^0.4.23;\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  \n', '  constructor(){ \n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '  //transfer owner to another address\n', '  function transferOwnership(address _newOwner) onlyOwner {\n', '    if (_newOwner != address(0)) {\n', '      owner = _newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      revert();\n', '    }\n', '  }\n', '}\n', '\n', 'contract Token {\n', '\n', '  uint256 public totalSupply;\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token ,SafeMath{\n', '\n', '   /**\n', '   *\n', '   * Fix for the ERC20 short address attack\n', '   *\n', '   * http://vessenes.com/the-erc20-short-address-attack-explained/\n', '   */\n', '  modifier onlyPayloadSize(uint size) {   \n', '     if(msg.data.length != size + 4) {\n', '       revert();\n', '     }\n', '     _;\n', '  }\n', '\n', '  //transfer lock flag\n', '  bool transferLock = true;\n', '  //transfer modifier\n', '  modifier canTransfer() {\n', '    if (transferLock) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  \n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\n', '    \n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) canTransfer returns (bool success) {\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '      return balances[_owner];\n', '  }\n', '\n', '   function approve(address _spender, uint256 _value) canTransfer returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract PAIStandardToken is StandardToken,Ownable{\n', '\n', '  /* Public variables of the token */\n', '\n', '  string public name;                   // name: eg pchain\n', '  uint256 public decimals;              //How many decimals to show.\n', '  string public symbol;                 //An identifier: eg PAI\n', '  address public wallet;                //ETH wallet address\n', '  uint public start;                    //crowd sale start time\n', '  uint public end;                      //Crowd sale first phase end time\n', '  uint public deadline;                 // Crowd sale deadline time\n', '\n', '\n', '  uint256 public teamShare = 25;        //Team share\n', '  uint256 public foundationShare = 25;  //Foundation share\n', '  uint256 public posShare = 15;         //POS share\n', '  uint256 public saleShare = 35;     //Private share\n', '  \n', '  \n', '  address internal saleAddr;                                 //private sale wallet address\n', '  uint256 public crowdETHTotal = 0;                 //The ETH amount of current crowdsale\n', '  mapping (address => uint256) public crowdETHs;    //record user&#39;s balance of crowdsale\n', '  uint256 public crowdPrice = 10000;                //crowdsale price 1(ETH):10000(PAI)\n', '  uint256 public crowdTarget = 5000 ether;          //The total ETH of crowdsale\n', '  bool public reflectSwitch = false;                // Whether to allow user to reflect PAI\n', '  bool public blacklistSwitch = true;               // Whether to allow owner to set blacklist\n', '  mapping(address => string) public reflects;       // reflect token to PAI address\n', '  \n', '\n', '  event PurchaseSuccess(address indexed _addr, uint256 _weiAmount,uint256 _crowdsaleEth,uint256 _balance);\n', '  event EthSweepSuccess(address indexed _addr, uint256 _value);\n', '  event SetReflectSwitchEvent(bool _b);\n', '  event ReflectEvent(address indexed _addr,string _paiAddr);\n', '  event BlacklistEvent(address indexed _addr,uint256 _b);\n', '  event SetTransferLockEvent(bool _b);\n', '  event CloseBlacklistSwitchEvent(bool _b);\n', '\n', '  constructor(\n', '      address _wallet,\n', '      uint _s,\n', '      uint _e,\n', '      uint _d,\n', '      address _teamAddr,\n', '      address _fundationAddr,\n', '      address _saleAddr,\n', '      address _posAddr\n', '      ) {\n', '      totalSupply = 2100000000000000000000000000;       // Update total supply\n', '      name = "PCHAIN";                  // Set the name for display purposes\n', '      decimals = 18;           // Amount of decimals for display purposes\n', '      symbol = "PAI";              // Set the symbol for display purposes\n', '      wallet = _wallet;                   // Set ETH wallet address\n', '      start = _s;                         // Set start time for crowsale\n', '      end = _e;                           // Set Crowd sale first phase end time\n', '      deadline = _d;                      // Set Crowd sale deadline time\n', '      saleAddr = _saleAddr; // Set sale account address\n', '\n', '      balances[_teamAddr] = safeMul(safeDiv(totalSupply,100),teamShare); //Team balance\n', '      balances[_fundationAddr] = safeMul(safeDiv(totalSupply,100),foundationShare); //Foundation balance\n', '      balances[_posAddr] = safeMul(safeDiv(totalSupply,100),posShare); //POS balance\n', '      balances[_saleAddr] = safeMul(safeDiv(totalSupply,100),saleShare) ; //Sale balance  \n', '      Transfer(address(0), _teamAddr,  balances[_teamAddr]);\n', '      Transfer(address(0), _fundationAddr,  balances[_fundationAddr]);\n', '      Transfer(address(0), _posAddr,  balances[_posAddr]);\n', '      Transfer(address(0), _saleAddr,  balances[_saleAddr]);\n', '  }\n', '  //set transfer lock\n', '  function setTransferLock(bool _lock) onlyOwner{\n', '      transferLock = _lock;\n', '      SetTransferLockEvent(_lock);\n', '  }\n', '  //Permanently turn off the blacklist switch \n', '  function closeBlacklistSwitch() onlyOwner{\n', '    blacklistSwitch = false;\n', '    CloseBlacklistSwitchEvent(false);\n', '  }\n', '  //set blacklist\n', '  function setBlacklist(address _addr) onlyOwner{\n', '      require(blacklistSwitch);\n', '      uint256 tokenAmount = balances[_addr];             //calculate user token amount\n', '      balances[_addr] = 0;//clear userâ€˜s PAI balance\n', '      balances[saleAddr] = safeAdd(balances[saleAddr],tokenAmount);  //add PAI tokenAmount to Sale\n', '      Transfer(_addr, saleAddr, tokenAmount);\n', '      BlacklistEvent(_addr,tokenAmount);\n', '  } \n', '\n', '  //set reflect switch\n', '  function setReflectSwitch(bool _s) onlyOwner{\n', '      reflectSwitch = _s;\n', '      SetReflectSwitchEvent(_s);\n', '  }\n', '  function reflect(string _paiAddress){\n', '      require(reflectSwitch);\n', '      reflects[msg.sender] = _paiAddress;\n', '      ReflectEvent(msg.sender,_paiAddress);\n', '  }\n', '\n', '  function purchase() payable{\n', '      require(block.timestamp <= deadline);                                 //the timestamp must be less than the deadline time\n', '      require(tx.gasprice <= 60000000000);\n', '      require(block.timestamp >= start);                                //the timestamp must be greater than the start time\n', '      uint256 weiAmount = msg.value;                                    // The amount purchased by the current user\n', '      require(weiAmount >= 0.1 ether);\n', '      crowdETHTotal = safeAdd(crowdETHTotal,weiAmount);                 // Calculate the total amount purchased by all users\n', '      require(crowdETHTotal <= crowdTarget);                            // The total amount is less than or equal to the target amount\n', '      uint256 userETHTotal = safeAdd(crowdETHs[msg.sender],weiAmount);  // Calculate the total amount purchased by the current user\n', '      if(block.timestamp <= end){                                       // whether the current timestamp is in the first phase\n', '        require(userETHTotal <= 0.4 ether);                             // whether the total amount purchased by the current user is less than 0.4ETH\n', '      }else{\n', '        require(userETHTotal <= 10 ether);                              // whether the total amount purchased by the current user is less than 10ETH\n', '      }      \n', '      \n', '      crowdETHs[msg.sender] = userETHTotal;                             // Record the total amount purchased by the current user\n', '\n', '      uint256 tokenAmount = safeMul(weiAmount,crowdPrice);             //calculate user token amount\n', '      balances[msg.sender] = safeAdd(tokenAmount,balances[msg.sender]);//recharge userâ€˜s PAI balance\n', '      balances[saleAddr] = safeSub(balances[saleAddr],tokenAmount);  //sub PAI tokenAmount from  Sale\n', '      wallet.transfer(weiAmount);\n', '      Transfer(saleAddr, msg.sender, tokenAmount);\n', '      PurchaseSuccess(msg.sender,weiAmount,crowdETHs[msg.sender],tokenAmount); \n', '  }\n', '\n', '  function () payable{\n', '      purchase();\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  \n', '  constructor(){ \n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    if (msg.sender != owner) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '  //transfer owner to another address\n', '  function transferOwnership(address _newOwner) onlyOwner {\n', '    if (_newOwner != address(0)) {\n', '      owner = _newOwner;\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'contract SafeMath {\n', '  function safeMul(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b > 0);\n', '    uint256 c = a / b;\n', '    assert(a == b * c + a % b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c>=a && c>=b);\n', '    return c;\n', '  }\n', '\n', '  function assert(bool assertion) internal {\n', '    if (!assertion) {\n', '      revert();\n', '    }\n', '  }\n', '}\n', '\n', 'contract Token {\n', '\n', '  uint256 public totalSupply;\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '\n', '  function approve(address _spender, uint256 _value) returns (bool success);\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract StandardToken is Token ,SafeMath{\n', '\n', '   /**\n', '   *\n', '   * Fix for the ERC20 short address attack\n', '   *\n', '   * http://vessenes.com/the-erc20-short-address-attack-explained/\n', '   */\n', '  modifier onlyPayloadSize(uint size) {   \n', '     if(msg.data.length != size + 4) {\n', '       revert();\n', '     }\n', '     _;\n', '  }\n', '\n', '  //transfer lock flag\n', '  bool transferLock = true;\n', '  //transfer modifier\n', '  modifier canTransfer() {\n', '    if (transferLock) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  mapping (address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  \n', '  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\n', '    \n', '    balances[msg.sender] = safeSub(balances[msg.sender], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) canTransfer returns (bool success) {\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    allowed[_from][msg.sender] = safeSub(_allowance, _value);\n', '    balances[_from] = safeSub(balances[_from], _value);\n', '    balances[_to] = safeAdd(balances[_to], _value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  function balanceOf(address _owner) constant returns (uint256 balance) {\n', '      return balances[_owner];\n', '  }\n', '\n', '   function approve(address _spender, uint256 _value) canTransfer returns (bool success) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '}\n', '\n', 'contract PAIStandardToken is StandardToken,Ownable{\n', '\n', '  /* Public variables of the token */\n', '\n', '  string public name;                   // name: eg pchain\n', '  uint256 public decimals;              //How many decimals to show.\n', '  string public symbol;                 //An identifier: eg PAI\n', '  address public wallet;                //ETH wallet address\n', '  uint public start;                    //crowd sale start time\n', '  uint public end;                      //Crowd sale first phase end time\n', '  uint public deadline;                 // Crowd sale deadline time\n', '\n', '\n', '  uint256 public teamShare = 25;        //Team share\n', '  uint256 public foundationShare = 25;  //Foundation share\n', '  uint256 public posShare = 15;         //POS share\n', '  uint256 public saleShare = 35;     //Private share\n', '  \n', '  \n', '  address internal saleAddr;                                 //private sale wallet address\n', '  uint256 public crowdETHTotal = 0;                 //The ETH amount of current crowdsale\n', "  mapping (address => uint256) public crowdETHs;    //record user's balance of crowdsale\n", '  uint256 public crowdPrice = 10000;                //crowdsale price 1(ETH):10000(PAI)\n', '  uint256 public crowdTarget = 5000 ether;          //The total ETH of crowdsale\n', '  bool public reflectSwitch = false;                // Whether to allow user to reflect PAI\n', '  bool public blacklistSwitch = true;               // Whether to allow owner to set blacklist\n', '  mapping(address => string) public reflects;       // reflect token to PAI address\n', '  \n', '\n', '  event PurchaseSuccess(address indexed _addr, uint256 _weiAmount,uint256 _crowdsaleEth,uint256 _balance);\n', '  event EthSweepSuccess(address indexed _addr, uint256 _value);\n', '  event SetReflectSwitchEvent(bool _b);\n', '  event ReflectEvent(address indexed _addr,string _paiAddr);\n', '  event BlacklistEvent(address indexed _addr,uint256 _b);\n', '  event SetTransferLockEvent(bool _b);\n', '  event CloseBlacklistSwitchEvent(bool _b);\n', '\n', '  constructor(\n', '      address _wallet,\n', '      uint _s,\n', '      uint _e,\n', '      uint _d,\n', '      address _teamAddr,\n', '      address _fundationAddr,\n', '      address _saleAddr,\n', '      address _posAddr\n', '      ) {\n', '      totalSupply = 2100000000000000000000000000;       // Update total supply\n', '      name = "PCHAIN";                  // Set the name for display purposes\n', '      decimals = 18;           // Amount of decimals for display purposes\n', '      symbol = "PAI";              // Set the symbol for display purposes\n', '      wallet = _wallet;                   // Set ETH wallet address\n', '      start = _s;                         // Set start time for crowsale\n', '      end = _e;                           // Set Crowd sale first phase end time\n', '      deadline = _d;                      // Set Crowd sale deadline time\n', '      saleAddr = _saleAddr; // Set sale account address\n', '\n', '      balances[_teamAddr] = safeMul(safeDiv(totalSupply,100),teamShare); //Team balance\n', '      balances[_fundationAddr] = safeMul(safeDiv(totalSupply,100),foundationShare); //Foundation balance\n', '      balances[_posAddr] = safeMul(safeDiv(totalSupply,100),posShare); //POS balance\n', '      balances[_saleAddr] = safeMul(safeDiv(totalSupply,100),saleShare) ; //Sale balance  \n', '      Transfer(address(0), _teamAddr,  balances[_teamAddr]);\n', '      Transfer(address(0), _fundationAddr,  balances[_fundationAddr]);\n', '      Transfer(address(0), _posAddr,  balances[_posAddr]);\n', '      Transfer(address(0), _saleAddr,  balances[_saleAddr]);\n', '  }\n', '  //set transfer lock\n', '  function setTransferLock(bool _lock) onlyOwner{\n', '      transferLock = _lock;\n', '      SetTransferLockEvent(_lock);\n', '  }\n', '  //Permanently turn off the blacklist switch \n', '  function closeBlacklistSwitch() onlyOwner{\n', '    blacklistSwitch = false;\n', '    CloseBlacklistSwitchEvent(false);\n', '  }\n', '  //set blacklist\n', '  function setBlacklist(address _addr) onlyOwner{\n', '      require(blacklistSwitch);\n', '      uint256 tokenAmount = balances[_addr];             //calculate user token amount\n', '      balances[_addr] = 0;//clear userâ€˜s PAI balance\n', '      balances[saleAddr] = safeAdd(balances[saleAddr],tokenAmount);  //add PAI tokenAmount to Sale\n', '      Transfer(_addr, saleAddr, tokenAmount);\n', '      BlacklistEvent(_addr,tokenAmount);\n', '  } \n', '\n', '  //set reflect switch\n', '  function setReflectSwitch(bool _s) onlyOwner{\n', '      reflectSwitch = _s;\n', '      SetReflectSwitchEvent(_s);\n', '  }\n', '  function reflect(string _paiAddress){\n', '      require(reflectSwitch);\n', '      reflects[msg.sender] = _paiAddress;\n', '      ReflectEvent(msg.sender,_paiAddress);\n', '  }\n', '\n', '  function purchase() payable{\n', '      require(block.timestamp <= deadline);                                 //the timestamp must be less than the deadline time\n', '      require(tx.gasprice <= 60000000000);\n', '      require(block.timestamp >= start);                                //the timestamp must be greater than the start time\n', '      uint256 weiAmount = msg.value;                                    // The amount purchased by the current user\n', '      require(weiAmount >= 0.1 ether);\n', '      crowdETHTotal = safeAdd(crowdETHTotal,weiAmount);                 // Calculate the total amount purchased by all users\n', '      require(crowdETHTotal <= crowdTarget);                            // The total amount is less than or equal to the target amount\n', '      uint256 userETHTotal = safeAdd(crowdETHs[msg.sender],weiAmount);  // Calculate the total amount purchased by the current user\n', '      if(block.timestamp <= end){                                       // whether the current timestamp is in the first phase\n', '        require(userETHTotal <= 0.4 ether);                             // whether the total amount purchased by the current user is less than 0.4ETH\n', '      }else{\n', '        require(userETHTotal <= 10 ether);                              // whether the total amount purchased by the current user is less than 10ETH\n', '      }      \n', '      \n', '      crowdETHs[msg.sender] = userETHTotal;                             // Record the total amount purchased by the current user\n', '\n', '      uint256 tokenAmount = safeMul(weiAmount,crowdPrice);             //calculate user token amount\n', '      balances[msg.sender] = safeAdd(tokenAmount,balances[msg.sender]);//recharge userâ€˜s PAI balance\n', '      balances[saleAddr] = safeSub(balances[saleAddr],tokenAmount);  //sub PAI tokenAmount from  Sale\n', '      wallet.transfer(weiAmount);\n', '      Transfer(saleAddr, msg.sender, tokenAmount);\n', '      PurchaseSuccess(msg.sender,weiAmount,crowdETHs[msg.sender],tokenAmount); \n', '  }\n', '\n', '  function () payable{\n', '      purchase();\n', '  }\n', '}']
