['/**\n', ' * Copyright (c) 2018 blockimmo AG <span class="__cf_email__" data-cfemail="422e2b21272c312702202e2d21292b2f2f2d6c212a">[email&#160;protected]</span>\n', ' * Non-Profit Open Software License 3.0 (NPOSL-3.0)\n', ' * https://opensource.org/licenses/NPOSL-3.0\n', ' */\n', ' \n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropriate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', '   * Example from CappedCrowdsale.sol&#39;s _preValidatePurchase method: \n', '   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n', '   *   require(weiRaised.add(_weiAmount) <= cap);\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.safeTransfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title PostDeliveryCrowdsale\n', ' * @dev Crowdsale that locks tokens from withdrawal until it ends.\n', ' */\n', 'contract PostDeliveryCrowdsale is TimedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public balances;\n', '\n', '  /**\n', '   * @dev Withdraw tokens only after crowdsale ends.\n', '   */\n', '  function withdrawTokens() public {\n', '    require(hasClosed());\n', '    uint256 amount = balances[msg.sender];\n', '    require(amount > 0);\n', '    balances[msg.sender] = 0;\n', '    _deliverTokens(msg.sender, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides parent by storing balances instead of issuing tokens right away.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Amount of tokens purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Ownable, TimedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() public onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Escrow\n', ' * @dev Base escrow contract, holds funds destinated to a payee until they\n', ' * withdraw them. The contract that uses the escrow as its payment method\n', ' * should be its owner, and provide public methods redirecting to the escrow&#39;s\n', ' * deposit and withdraw.\n', ' */\n', 'contract Escrow is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event Deposited(address indexed payee, uint256 weiAmount);\n', '  event Withdrawn(address indexed payee, uint256 weiAmount);\n', '\n', '  mapping(address => uint256) private deposits;\n', '\n', '  function depositsOf(address _payee) public view returns (uint256) {\n', '    return deposits[_payee];\n', '  }\n', '\n', '  /**\n', '  * @dev Stores the sent amount as credit to be withdrawn.\n', '  * @param _payee The destination address of the funds.\n', '  */\n', '  function deposit(address _payee) public onlyOwner payable {\n', '    uint256 amount = msg.value;\n', '    deposits[_payee] = deposits[_payee].add(amount);\n', '\n', '    emit Deposited(_payee, amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Withdraw accumulated balance for a payee.\n', '  * @param _payee The address whose funds will be withdrawn and transferred to.\n', '  */\n', '  function withdraw(address _payee) public onlyOwner {\n', '    uint256 payment = deposits[_payee];\n', '    assert(address(this).balance >= payment);\n', '\n', '    deposits[_payee] = 0;\n', '\n', '    _payee.transfer(payment);\n', '\n', '    emit Withdrawn(_payee, payment);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ConditionalEscrow\n', ' * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n', ' */\n', 'contract ConditionalEscrow is Escrow {\n', '  /**\n', '  * @dev Returns whether an address is allowed to withdraw their funds. To be\n', '  * implemented by derived contracts.\n', '  * @param _payee The destination address of the funds.\n', '  */\n', '  function withdrawalAllowed(address _payee) public view returns (bool);\n', '\n', '  function withdraw(address _payee) public {\n', '    require(withdrawalAllowed(_payee));\n', '    super.withdraw(_payee);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundEscrow\n', ' * @dev Escrow that holds funds for a beneficiary, deposited from multiple parties.\n', ' * The contract owner may close the deposit period, and allow for either withdrawal\n', ' * by the beneficiary, or refunds to the depositors.\n', ' */\n', 'contract RefundEscrow is Ownable, ConditionalEscrow {\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '\n', '  State public state;\n', '  address public beneficiary;\n', '\n', '  /**\n', '   * @dev Constructor.\n', '   * @param _beneficiary The beneficiary of the deposits.\n', '   */\n', '  constructor(address _beneficiary) public {\n', '    require(_beneficiary != address(0));\n', '    beneficiary = _beneficiary;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @dev Stores funds that may later be refunded.\n', '   * @param _refundee The address funds will be sent to if a refund occurs.\n', '   */\n', '  function deposit(address _refundee) public payable {\n', '    require(state == State.Active);\n', '    super.deposit(_refundee);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows for the beneficiary to withdraw their funds, rejecting\n', '   * further deposits.\n', '   */\n', '  function close() public onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '  }\n', '\n', '  /**\n', '   * @dev Allows for refunds to take place, rejecting further deposits.\n', '   */\n', '  function enableRefunds() public onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @dev Withdraws the beneficiary&#39;s funds.\n', '   */\n', '  function beneficiaryWithdraw() public {\n', '    require(state == State.Closed);\n', '    beneficiary.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether refundees can withdraw their deposits (be refunded).\n', '   */\n', '  function withdrawalAllowed(address _payee) public view returns (bool) {\n', '    return state == State.Refunding;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund escrow used to hold funds while crowdsale is running\n', '  RefundEscrow private escrow;\n', '\n', '  /**\n', '   * @dev Constructor, creates RefundEscrow.\n', '   * @param _goal Funding goal\n', '   */\n', '  constructor(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    escrow = new RefundEscrow(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', '  /**\n', '   * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '   */\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    escrow.withdraw(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether funding goal was reached.\n', '   * @return Whether funding goal was reached\n', '   */\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  /**\n', '   * @dev escrow finalization task, called when owner calls finalize()\n', '   */\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      escrow.close();\n', '      escrow.beneficiaryWithdraw();\n', '    } else {\n', '      escrow.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides Crowdsale fund forwarding, sending funds to escrow.\n', '   */\n', '  function _forwardFunds() internal {\n', '    escrow.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract MedianizerInterface {\n', '  function read() public view returns (bytes32);\n', '}\n', '\n', '\n', 'contract WhitelistInterface {\n', '  function checkRole(address _operator, string _role) public view;\n', '  function hasRole(address _operator, string _role) public view returns (bool);\n', '}\n', '\n', '\n', 'contract WhitelistProxyInterface {\n', '  function whitelist() public view returns (WhitelistInterface);\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenSale\n', ' * @dev Distribute tokens to investors in exchange for Ether.\n', ' *\n', ' * This is the primary mechanism for outright sales of commercial investment properties (and blockimmo&#39;s STO, where shares\n', ' * of our company are represented as `TokenizedProperty`) (official pending FINMA approval).\n', ' *\n', ' * Selling:\n', ' *   1. Deploy `TokenizedProperty`. Initially all tokens and ownership of this property will be assigned to the &#39;deployer&#39;\n', ' *   2. Deploy `ShareholderDAO` and transfer the property&#39;s (1) ownership to it\n', ' *   3. Configure and deploy a `TokenSale`\n', ' *     - After completing (1, 2, 3) blockimmo will verify the property as legitimate in `LandRegistry`\n', ' *     - blockimmo will then authorize `this` to the `Whitelist` before seller can proceed to (4)\n', ' *   4. Transfer tokens of `TokenizedProperty` (1) to be sold to `this` (3)\n', ' *   5. Investors are able to buy tokens while the sale is open. &#39;Deployer&#39; calls `finalize` to complete the sale\n', ' *\n', ' * Note: blockimmo will be responsible for managing initial sales on our platform. This means we will be configuring\n', ' *       and deploying all contracts for sellers. This provides an extra layer of control/security until we&#39;ve refined\n', ' *       these processes and proven them in the real-world.\n', ' *       Later sales will use SplitPayment contracts to route funds, with examples in the tests.\n', ' *\n', ' * Unsold tokens (of a successful sale) are redistributed proportionally to investors via Airdrop, as described in:\n', ' * https://medium.com/FundFantasy/airdropping-vs-burning-part-1-613a9c6ebf1c\n', ' *\n', ' * If a sale&#39;s soft-cap is not reached (and the seller does not `accept` a lower price), investors will be refunded Ether and the seller refunded tokens.\n', ' *\n', ' * For stable token sales (soft and hard-cap in USD instead of Wei), we rely on MakerDAO&#39;s on-chain ETH/USD conversion rate\n', ' * https://developer.makerdao.com/feeds/\n', ' * This approach to mitigating Ether volatility seems to best when analyzing trade-offs, short of selling directly in FIAT.\n', ' */\n', 'contract TokenSale is RefundableCrowdsale, PostDeliveryCrowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  address public constant MEDIANIZER_ADDRESS = 0x729D19f657BD0614b4985Cf1D82531c67569197B;  // 0x0f5ea0a652e851678ebf77b69484bfcd31f9459b;\n', '  address public constant WHITELIST_PROXY_ADDRESS = 0x7223b032180CDb06Be7a3D634B1E10032111F367;  // 0xc4c7497fbe1a886841a195a5d622cd60053c1376;\n', '\n', '  MedianizerInterface private medianizer = MedianizerInterface(MEDIANIZER_ADDRESS);\n', '  WhitelistProxyInterface private whitelistProxy = WhitelistProxyInterface(WHITELIST_PROXY_ADDRESS);\n', '\n', '  uint256 public cap;\n', '  bool public goalReachedOnFinalize;\n', '  uint256 public totalTokens;\n', '  uint256 public totalTokensSold = 0;\n', '  bool public usd;\n', '\n', '  mapping(address => uint256) public usdInvestment;\n', '\n', '  constructor(\n', '    uint256 _openingTime,\n', '    uint256 _closingTime,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    uint256 _cap,\n', '    ERC20 _token,\n', '    uint256 _goal,\n', '    bool _usd  // if true, both `goal` and `cap` are in units of USD. if false, in ETH\n', '  )\n', '    public\n', '    Crowdsale(_rate, _wallet, _token)\n', '    TimedCrowdsale(_openingTime, _closingTime)\n', '    RefundableCrowdsale(_goal)\n', '    PostDeliveryCrowdsale()\n', '  {\n', '    require(_cap > 0, "cap is not > 0");\n', '    require(_goal < _cap, "goal is not < cap");\n', '    cap = _cap;\n', '    usd = _usd;\n', '  }\n', '\n', '  function capReached() public view returns (bool) {\n', '    return _reached(cap);\n', '  }\n', '\n', '  function goalReached() public view returns (bool) {\n', '    if (isFinalized) {\n', '      return goalReachedOnFinalize;\n', '    } else {\n', '      return _reached(goal);\n', '    }\n', '  }\n', '\n', '  function withdrawTokens() public {  // airdrop remaining tokens to investors proportionally\n', '    uint256 extra = totalTokens.sub(totalTokensSold).mul(balances[msg.sender]) / totalTokensSold;\n', '    balances[msg.sender] = balances[msg.sender].add(extra);\n', '    super.withdrawTokens();\n', '  }\n', '\n', '  function finalization() internal {  // ether refunds enabled for investors, refund tokens to seller\n', '    totalTokens = token.balanceOf(address(this));\n', '    goalReachedOnFinalize = goalReached();\n', '    if (!goalReachedOnFinalize) {\n', '      token.safeTransfer(owner, totalTokens);\n', '    }\n', '    super.finalization();\n', '  }\n', '\n', '  function _getUsdAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 usdPerEth = uint256(medianizer.read());\n', '    return _weiAmount.mul(usdPerEth).div(1e18).div(1e18);\n', '  }\n', '\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_weiAmount >= 1e18);\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '\n', '    WhitelistInterface whitelist = whitelistProxy.whitelist();\n', '\n', '    usdInvestment[_beneficiary] = usdInvestment[_beneficiary].add(_getUsdAmount(_weiAmount));\n', '    if (!whitelist.hasRole(_beneficiary, "uncapped")) {\n', '      require(usdInvestment[_beneficiary] <= 100000);\n', '      whitelist.checkRole(_beneficiary, "authorized");\n', '    }\n', '\n', '    if (usd) {\n', '      require(_getUsdAmount(weiRaised.add(_weiAmount)) <= cap, "usd raised must not exceed cap");\n', '    } else {\n', '      require(weiRaised.add(_weiAmount) <= cap, "wei raised must not exceed cap");\n', '    }\n', '  }\n', '\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    totalTokensSold = totalTokensSold.add(_tokenAmount);\n', '    require(totalTokensSold <= token.balanceOf(address(this)), "totalTokensSold raised must not exceed balanceOf `this`");\n', '\n', '    super._processPurchase(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function _reached(uint256 _target) internal view returns (bool) {\n', '    if (usd) {\n', '      return _getUsdAmount(weiRaised) >= _target;\n', '    } else {\n', '      return weiRaised >= _target;\n', '    }\n', '  }\n', '}']
['/**\n', ' * Copyright (c) 2018 blockimmo AG license@blockimmo.ch\n', ' * Non-Profit Open Software License 3.0 (NPOSL-3.0)\n', ' * https://opensource.org/licenses/NPOSL-3.0\n', ' */\n', ' \n', '\n', 'pragma solidity 0.4.25;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "   * Example from CappedCrowdsale.sol's _preValidatePurchase method: \n", '   *   super._preValidatePurchase(_beneficiary, _weiAmount);\n', '   *   require(weiRaised.add(_weiAmount) <= cap);\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.safeTransfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title PostDeliveryCrowdsale\n', ' * @dev Crowdsale that locks tokens from withdrawal until it ends.\n', ' */\n', 'contract PostDeliveryCrowdsale is TimedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public balances;\n', '\n', '  /**\n', '   * @dev Withdraw tokens only after crowdsale ends.\n', '   */\n', '  function withdrawTokens() public {\n', '    require(hasClosed());\n', '    uint256 amount = balances[msg.sender];\n', '    require(amount > 0);\n', '    balances[msg.sender] = 0;\n', '    _deliverTokens(msg.sender, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides parent by storing balances instead of issuing tokens right away.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Amount of tokens purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Ownable, TimedCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() public onlyOwner {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Escrow\n', ' * @dev Base escrow contract, holds funds destinated to a payee until they\n', ' * withdraw them. The contract that uses the escrow as its payment method\n', " * should be its owner, and provide public methods redirecting to the escrow's\n", ' * deposit and withdraw.\n', ' */\n', 'contract Escrow is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  event Deposited(address indexed payee, uint256 weiAmount);\n', '  event Withdrawn(address indexed payee, uint256 weiAmount);\n', '\n', '  mapping(address => uint256) private deposits;\n', '\n', '  function depositsOf(address _payee) public view returns (uint256) {\n', '    return deposits[_payee];\n', '  }\n', '\n', '  /**\n', '  * @dev Stores the sent amount as credit to be withdrawn.\n', '  * @param _payee The destination address of the funds.\n', '  */\n', '  function deposit(address _payee) public onlyOwner payable {\n', '    uint256 amount = msg.value;\n', '    deposits[_payee] = deposits[_payee].add(amount);\n', '\n', '    emit Deposited(_payee, amount);\n', '  }\n', '\n', '  /**\n', '  * @dev Withdraw accumulated balance for a payee.\n', '  * @param _payee The address whose funds will be withdrawn and transferred to.\n', '  */\n', '  function withdraw(address _payee) public onlyOwner {\n', '    uint256 payment = deposits[_payee];\n', '    assert(address(this).balance >= payment);\n', '\n', '    deposits[_payee] = 0;\n', '\n', '    _payee.transfer(payment);\n', '\n', '    emit Withdrawn(_payee, payment);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ConditionalEscrow\n', ' * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n', ' */\n', 'contract ConditionalEscrow is Escrow {\n', '  /**\n', '  * @dev Returns whether an address is allowed to withdraw their funds. To be\n', '  * implemented by derived contracts.\n', '  * @param _payee The destination address of the funds.\n', '  */\n', '  function withdrawalAllowed(address _payee) public view returns (bool);\n', '\n', '  function withdraw(address _payee) public {\n', '    require(withdrawalAllowed(_payee));\n', '    super.withdraw(_payee);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundEscrow\n', ' * @dev Escrow that holds funds for a beneficiary, deposited from multiple parties.\n', ' * The contract owner may close the deposit period, and allow for either withdrawal\n', ' * by the beneficiary, or refunds to the depositors.\n', ' */\n', 'contract RefundEscrow is Ownable, ConditionalEscrow {\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '\n', '  State public state;\n', '  address public beneficiary;\n', '\n', '  /**\n', '   * @dev Constructor.\n', '   * @param _beneficiary The beneficiary of the deposits.\n', '   */\n', '  constructor(address _beneficiary) public {\n', '    require(_beneficiary != address(0));\n', '    beneficiary = _beneficiary;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @dev Stores funds that may later be refunded.\n', '   * @param _refundee The address funds will be sent to if a refund occurs.\n', '   */\n', '  function deposit(address _refundee) public payable {\n', '    require(state == State.Active);\n', '    super.deposit(_refundee);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows for the beneficiary to withdraw their funds, rejecting\n', '   * further deposits.\n', '   */\n', '  function close() public onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '  }\n', '\n', '  /**\n', '   * @dev Allows for refunds to take place, rejecting further deposits.\n', '   */\n', '  function enableRefunds() public onlyOwner {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', "   * @dev Withdraws the beneficiary's funds.\n", '   */\n', '  function beneficiaryWithdraw() public {\n', '    require(state == State.Closed);\n', '    beneficiary.transfer(address(this).balance);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether refundees can withdraw their deposits (be refunded).\n', '   */\n', '  function withdrawalAllowed(address _payee) public view returns (bool) {\n', '    return state == State.Refunding;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '\n', '  // refund escrow used to hold funds while crowdsale is running\n', '  RefundEscrow private escrow;\n', '\n', '  /**\n', '   * @dev Constructor, creates RefundEscrow.\n', '   * @param _goal Funding goal\n', '   */\n', '  constructor(uint256 _goal) public {\n', '    require(_goal > 0);\n', '    escrow = new RefundEscrow(wallet);\n', '    goal = _goal;\n', '  }\n', '\n', '  /**\n', '   * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '   */\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '\n', '    escrow.withdraw(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether funding goal was reached.\n', '   * @return Whether funding goal was reached\n', '   */\n', '  function goalReached() public view returns (bool) {\n', '    return weiRaised >= goal;\n', '  }\n', '\n', '  /**\n', '   * @dev escrow finalization task, called when owner calls finalize()\n', '   */\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      escrow.close();\n', '      escrow.beneficiaryWithdraw();\n', '    } else {\n', '      escrow.enableRefunds();\n', '    }\n', '\n', '    super.finalization();\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides Crowdsale fund forwarding, sending funds to escrow.\n', '   */\n', '  function _forwardFunds() internal {\n', '    escrow.deposit.value(msg.value)(msg.sender);\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract MedianizerInterface {\n', '  function read() public view returns (bytes32);\n', '}\n', '\n', '\n', 'contract WhitelistInterface {\n', '  function checkRole(address _operator, string _role) public view;\n', '  function hasRole(address _operator, string _role) public view returns (bool);\n', '}\n', '\n', '\n', 'contract WhitelistProxyInterface {\n', '  function whitelist() public view returns (WhitelistInterface);\n', '}\n', '\n', '\n', '/**\n', ' * @title TokenSale\n', ' * @dev Distribute tokens to investors in exchange for Ether.\n', ' *\n', " * This is the primary mechanism for outright sales of commercial investment properties (and blockimmo's STO, where shares\n", ' * of our company are represented as `TokenizedProperty`) (official pending FINMA approval).\n', ' *\n', ' * Selling:\n', " *   1. Deploy `TokenizedProperty`. Initially all tokens and ownership of this property will be assigned to the 'deployer'\n", " *   2. Deploy `ShareholderDAO` and transfer the property's (1) ownership to it\n", ' *   3. Configure and deploy a `TokenSale`\n', ' *     - After completing (1, 2, 3) blockimmo will verify the property as legitimate in `LandRegistry`\n', ' *     - blockimmo will then authorize `this` to the `Whitelist` before seller can proceed to (4)\n', ' *   4. Transfer tokens of `TokenizedProperty` (1) to be sold to `this` (3)\n', " *   5. Investors are able to buy tokens while the sale is open. 'Deployer' calls `finalize` to complete the sale\n", ' *\n', ' * Note: blockimmo will be responsible for managing initial sales on our platform. This means we will be configuring\n', " *       and deploying all contracts for sellers. This provides an extra layer of control/security until we've refined\n", ' *       these processes and proven them in the real-world.\n', ' *       Later sales will use SplitPayment contracts to route funds, with examples in the tests.\n', ' *\n', ' * Unsold tokens (of a successful sale) are redistributed proportionally to investors via Airdrop, as described in:\n', ' * https://medium.com/FundFantasy/airdropping-vs-burning-part-1-613a9c6ebf1c\n', ' *\n', " * If a sale's soft-cap is not reached (and the seller does not `accept` a lower price), investors will be refunded Ether and the seller refunded tokens.\n", ' *\n', " * For stable token sales (soft and hard-cap in USD instead of Wei), we rely on MakerDAO's on-chain ETH/USD conversion rate\n", ' * https://developer.makerdao.com/feeds/\n', ' * This approach to mitigating Ether volatility seems to best when analyzing trade-offs, short of selling directly in FIAT.\n', ' */\n', 'contract TokenSale is RefundableCrowdsale, PostDeliveryCrowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  address public constant MEDIANIZER_ADDRESS = 0x729D19f657BD0614b4985Cf1D82531c67569197B;  // 0x0f5ea0a652e851678ebf77b69484bfcd31f9459b;\n', '  address public constant WHITELIST_PROXY_ADDRESS = 0x7223b032180CDb06Be7a3D634B1E10032111F367;  // 0xc4c7497fbe1a886841a195a5d622cd60053c1376;\n', '\n', '  MedianizerInterface private medianizer = MedianizerInterface(MEDIANIZER_ADDRESS);\n', '  WhitelistProxyInterface private whitelistProxy = WhitelistProxyInterface(WHITELIST_PROXY_ADDRESS);\n', '\n', '  uint256 public cap;\n', '  bool public goalReachedOnFinalize;\n', '  uint256 public totalTokens;\n', '  uint256 public totalTokensSold = 0;\n', '  bool public usd;\n', '\n', '  mapping(address => uint256) public usdInvestment;\n', '\n', '  constructor(\n', '    uint256 _openingTime,\n', '    uint256 _closingTime,\n', '    uint256 _rate,\n', '    address _wallet,\n', '    uint256 _cap,\n', '    ERC20 _token,\n', '    uint256 _goal,\n', '    bool _usd  // if true, both `goal` and `cap` are in units of USD. if false, in ETH\n', '  )\n', '    public\n', '    Crowdsale(_rate, _wallet, _token)\n', '    TimedCrowdsale(_openingTime, _closingTime)\n', '    RefundableCrowdsale(_goal)\n', '    PostDeliveryCrowdsale()\n', '  {\n', '    require(_cap > 0, "cap is not > 0");\n', '    require(_goal < _cap, "goal is not < cap");\n', '    cap = _cap;\n', '    usd = _usd;\n', '  }\n', '\n', '  function capReached() public view returns (bool) {\n', '    return _reached(cap);\n', '  }\n', '\n', '  function goalReached() public view returns (bool) {\n', '    if (isFinalized) {\n', '      return goalReachedOnFinalize;\n', '    } else {\n', '      return _reached(goal);\n', '    }\n', '  }\n', '\n', '  function withdrawTokens() public {  // airdrop remaining tokens to investors proportionally\n', '    uint256 extra = totalTokens.sub(totalTokensSold).mul(balances[msg.sender]) / totalTokensSold;\n', '    balances[msg.sender] = balances[msg.sender].add(extra);\n', '    super.withdrawTokens();\n', '  }\n', '\n', '  function finalization() internal {  // ether refunds enabled for investors, refund tokens to seller\n', '    totalTokens = token.balanceOf(address(this));\n', '    goalReachedOnFinalize = goalReached();\n', '    if (!goalReachedOnFinalize) {\n', '      token.safeTransfer(owner, totalTokens);\n', '    }\n', '    super.finalization();\n', '  }\n', '\n', '  function _getUsdAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    uint256 usdPerEth = uint256(medianizer.read());\n', '    return _weiAmount.mul(usdPerEth).div(1e18).div(1e18);\n', '  }\n', '\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_weiAmount >= 1e18);\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '\n', '    WhitelistInterface whitelist = whitelistProxy.whitelist();\n', '\n', '    usdInvestment[_beneficiary] = usdInvestment[_beneficiary].add(_getUsdAmount(_weiAmount));\n', '    if (!whitelist.hasRole(_beneficiary, "uncapped")) {\n', '      require(usdInvestment[_beneficiary] <= 100000);\n', '      whitelist.checkRole(_beneficiary, "authorized");\n', '    }\n', '\n', '    if (usd) {\n', '      require(_getUsdAmount(weiRaised.add(_weiAmount)) <= cap, "usd raised must not exceed cap");\n', '    } else {\n', '      require(weiRaised.add(_weiAmount) <= cap, "wei raised must not exceed cap");\n', '    }\n', '  }\n', '\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    totalTokensSold = totalTokensSold.add(_tokenAmount);\n', '    require(totalTokensSold <= token.balanceOf(address(this)), "totalTokensSold raised must not exceed balanceOf `this`");\n', '\n', '    super._processPurchase(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  function _reached(uint256 _target) internal view returns (bool) {\n', '    if (usd) {\n', '      return _getUsdAmount(weiRaised) >= _target;\n', '    } else {\n', '      return weiRaised >= _target;\n', '    }\n', '  }\n', '}']
