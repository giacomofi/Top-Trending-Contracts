['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address internal owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public returns (bool) {\n', '    require(newOwner != address(0x0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BitNauticWhitelist is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public usdPerEth;\n', '\n', '    constructor(uint256 _usdPerEth) public {\n', '        usdPerEth = _usdPerEth;\n', '    }\n', '\n', '    mapping(address => bool) public AMLWhitelisted;\n', '    mapping(address => uint256) public contributionCap;\n', '\n', '    /**\n', '     * @dev add an address to the whitelist\n', '     * @param addr address\n', '     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '     */\n', '    function setKYCLevel(address addr, uint8 level) onlyOwner public returns (bool) {\n', '        if (level >= 3) {\n', '            contributionCap[addr] = 50000 ether; // crowdsale hard cap\n', '        } else if (level == 2) {\n', '            contributionCap[addr] = SafeMath.div(500000 * 10 ** 18, usdPerEth); // KYC Tier 2 - 500k USD\n', '        } else if (level == 1) {\n', '            contributionCap[addr] = SafeMath.div(3000 * 10 ** 18, usdPerEth); // KYC Tier 1 - 3k USD\n', '        } else {\n', '            contributionCap[addr] = 0;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev add addresses to the whitelist\n', '     * @param addrs addresses\n', '     * @return true if at least one address was added to the whitelist,\n', '     * false if all addresses were already in the whitelist\n', '     */\n', '    function setKYCLevelsBulk(address[] addrs, uint8[] levels) onlyOwner external returns (bool success) {\n', '        require(addrs.length == levels.length);\n', '\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            assert(setKYCLevel(addrs[i], levels[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function setAMLWhitelisted(address addr, bool whitelisted) onlyOwner public returns (bool) {\n', '        AMLWhitelisted[addr] = whitelisted;\n', '\n', '        return true;\n', '    }\n', '\n', '    function setAMLWhitelistedBulk(address[] addrs, bool[] whitelisted) onlyOwner external returns (bool) {\n', '        require(addrs.length == whitelisted.length);\n', '\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            assert(setAMLWhitelisted(addrs[i], whitelisted[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    MintableToken public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public ICOStartTime;\n', '    uint256 public ICOEndTime;\n', '\n', '    // wallet address where funds will be saved\n', '    address internal wallet;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised; // internal\n', '\n', '    // Public Supply\n', '    uint256 public publicSupply;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    // BitNautic Crowdsale constructor\n', '    constructor(MintableToken _token, uint256 _publicSupply, uint256 _startTime, uint256 _endTime, address _wallet) public {\n', '        require(_endTime >= _startTime);\n', '        require(_wallet != 0x0);\n', '\n', '        // BitNautic token creation\n', '        token = _token;\n', '\n', '        // total supply of token for the crowdsale\n', '        publicSupply = _publicSupply;\n', '\n', '        // Pre-ICO start Time\n', '        ICOStartTime = _startTime;\n', '\n', '        // ICO end Time\n', '        ICOEndTime = _endTime;\n', '\n', '        // wallet where funds will be saved\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // High level token purchase function\n', '    function buyTokens(address beneficiary) whenNotPaused public payable {\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '\n', '        // minimum investment should be 0.05 ETH\n', '        uint256 lowerPurchaseLimit = 0.05 ether;\n', '        require(msg.value >= lowerPurchaseLimit);\n', '\n', '        assert(_tokenPurchased(msg.sender, beneficiary, msg.value));\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(msg.value);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    function _tokenPurchased(address /* buyer */, address /* beneficiary */, uint256 /* weiAmount */) internal returns (bool) {\n', '        // TO BE OVERLOADED IN SUBCLASSES\n', '        return true;\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = ICOStartTime <= now && now <= ICOEndTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > ICOEndTime;\n', '    }\n', '\n', '    bool public checkBurnTokens = false;\n', '\n', '    function burnTokens() onlyOwner public returns (bool) {\n', '        require(hasEnded());\n', '        require(!checkBurnTokens);\n', '\n', '        token.mint(0x0, publicSupply);\n', '        token.burnTokens(publicSupply);\n', '        publicSupply = 0;\n', '        checkBurnTokens = true;\n', '\n', '        return true;\n', '    }\n', '\n', '    function getTokenAddress() onlyOwner public view returns (address) {\n', '        return address(token);\n', '    }\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 internal cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    bool isFinalized = false;\n', '\n', '    event Finalized();\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', '     * work. Calls the contract&#39;s finalization function.\n', '     */\n', '    function finalizeCrowdsale() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Can be overridden to add finalization logic. The overriding function\n', '     * should call super.finalization() to ensure the chain of finalization is\n', '     * executed entirely.\n', '     */\n', '    function finalization() internal {\n', '    }\n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  constructor(address _wallet) public {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // minimum amount of funds to be raised in weis\n', '    uint256 internal goal;\n', '    bool internal _goalReached = false;\n', '    // refund vault used to hold funds while crowdsale is running\n', '    RefundVault private vault;\n', '\n', '    constructor(uint256 _goal) public {\n', '        require(_goal > 0);\n', '        vault = new RefundVault(wallet);\n', '        goal = _goal;\n', '    }\n', '\n', '    // We&#39;re overriding the fund forwarding from Crowdsale.\n', '    // In addition to sending the funds, we want to call\n', '    // the RefundVault deposit function\n', '    function forwardFunds() internal {\n', '        vault.deposit.value(msg.value)(msg.sender);\n', '    }\n', '\n', '    // if crowdsale is unsuccessful, investors can claim refunds here\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    // vault finalization task, called when owner calls finalize()\n', '    function finalization() internal {\n', '        if (goalReached()) {\n', '            vault.close();\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '        super.finalization();\n', '    }\n', '\n', '    function goalReached() public returns (bool) {\n', '        if (weiRaised >= goal) {\n', '            _goalReached = true;\n', '        }\n', '\n', '        return _goalReached;\n', '    }\n', '\n', '    //  function updateGoalCheck() onlyOwner public {\n', '    //    _goalReached = true;\n', '    //  }\n', '\n', '    function getVaultAddress() onlyOwner public view returns (address) {\n', '        return vault;\n', '    }\n', '}\n', '\n', 'contract BitNauticCrowdsale is CappedCrowdsale, RefundableCrowdsale {\n', '    uint256 constant public crowdsaleInitialSupply = 35000000 * 10 ** 18; // 70% of token cap\n', '//    uint256 constant public crowdsaleSoftCap = 2 ether;\n', '//    uint256 constant public crowdsaleHardCap = 10 ether;\n', '    uint256 constant public crowdsaleSoftCap = 5000 ether;\n', '    uint256 constant public crowdsaleHardCap = 50000 ether;\n', '\n', '    uint256 constant public preICOStartTime = 1525132800;          // 2018-05-01 00:00 GMT+0\n', '    uint256 constant public mainICOStartTime = 1527811200;         // 2018-06-01 00:00 GMT+0\n', '    uint256 constant public mainICOFirstWeekEndTime = 1528416000;  // 2018-06-08 00:00 GMT+0\n', '    uint256 constant public mainICOSecondWeekEndTime = 1529020800; // 2018-06-15 00:00 GMT+0\n', '    uint256 constant public mainICOThirdWeekEndTime = 1529625600;  // 2018-06-22 00:00 GMT+0\n', '    uint256 constant public mainICOFourthWeekEndTime = 1530403200; // 2018-07-01 00:00 GMT+0\n', '    uint256 constant public mainICOEndTime = 1532995200;           // 2018-07-31 00:00 GMT+0\n', '\n', '//    uint256 public preICOStartTime = now;          // 2018-05-01 00:00 GMT+0\n', '//    uint256 constant public mainICOStartTime = preICOStartTime;         // 2018-06-01 00:00 GMT+0\n', '//    uint256 constant public mainICOFirstWeekEndTime = mainICOStartTime;  // 2018-06-08 00:00 GMT+0\n', '//    uint256 constant public mainICOSecondWeekEndTime = mainICOFirstWeekEndTime; // 2018-06-15 00:00 GMT+0\n', '//    uint256 constant public mainICOThirdWeekEndTime = mainICOSecondWeekEndTime;  // 2018-06-22 00:00 GMT+0\n', '//    uint256 constant public mainICOFourthWeekEndTime = mainICOThirdWeekEndTime; // 2018-07-01 00:00 GMT+0\n', '//    uint256 constant public mainICOEndTime = mainICOFourthWeekEndTime + 5 minutes;           // 2018-07-30 00:00 GMT+0\n', '\n', '    uint256 constant public tokenBaseRate = 500; // 1 ETH = 500 BTNT\n', '\n', '    // bonuses in percentage\n', '    uint256 constant public preICOBonus = 30;\n', '    uint256 constant public firstWeekBonus = 20;\n', '    uint256 constant public secondWeekBonus = 15;\n', '    uint256 constant public thirdWeekBonus = 10;\n', '    uint256 constant public fourthWeekBonus = 5;\n', '\n', '    uint256 public teamSupply =     3000000 * 10 ** 18; // 6% of token cap\n', '    uint256 public bountySupply =   2500000 * 10 ** 18; // 5% of token cap\n', '    uint256 public reserveSupply =  5000000 * 10 ** 18; // 10% of token cap\n', '    uint256 public advisorSupply =  2500000 * 10 ** 18; // 5% of token cap\n', '    uint256 public founderSupply =  2000000 * 10 ** 18; // 4% of token cap\n', '\n', '    // amount of tokens each address will receive at the end of the crowdsale\n', '    mapping (address => uint256) public creditOf;\n', '\n', '    mapping (address => uint256) public weiInvestedBy;\n', '\n', '    BitNauticWhitelist public whitelist;\n', '\n', '    /** Constructor BitNauticICO */\n', '    constructor(BitNauticToken _token, BitNauticWhitelist _whitelist, address _wallet)\n', '    CappedCrowdsale(crowdsaleHardCap)\n', '    FinalizableCrowdsale()\n', '    RefundableCrowdsale(crowdsaleSoftCap)\n', '    Crowdsale(_token, crowdsaleInitialSupply, preICOStartTime, mainICOEndTime, _wallet) public\n', '    {\n', '        whitelist = _whitelist;\n', '    }\n', '\n', '    function _tokenPurchased(address buyer, address beneficiary, uint256 weiAmount) internal returns (bool) {\n', '        require(SafeMath.add(weiInvestedBy[buyer], weiAmount) <= whitelist.contributionCap(buyer));\n', '\n', '        uint256 tokens = SafeMath.mul(weiAmount, tokenBaseRate);\n', '\n', '        tokens = tokens.add(SafeMath.mul(tokens, getCurrentBonus()).div(100));\n', '\n', '        require(publicSupply >= tokens);\n', '\n', '        publicSupply = publicSupply.sub(tokens);\n', '\n', '        creditOf[beneficiary] = creditOf[beneficiary].add(tokens);\n', '        weiInvestedBy[buyer] = SafeMath.add(weiInvestedBy[buyer], weiAmount);\n', '\n', '        emit TokenPurchase(buyer, beneficiary, weiAmount, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    address constant public privateSaleWallet = 0x5A01D561AE864006c6B733f21f8D4311d1E1B42a;\n', '\n', '    function goalReached() public returns (bool) {\n', '        if (weiRaised + privateSaleWallet.balance >= goal) {\n', '            _goalReached = true;\n', '        }\n', '\n', '        return _goalReached;\n', '    }\n', '\n', '    function getCurrentBonus() public view returns (uint256) {\n', '        if (now < mainICOStartTime) {\n', '            return preICOBonus;\n', '        } else if (now < mainICOFirstWeekEndTime) {\n', '            return firstWeekBonus;\n', '        } else if (now < mainICOSecondWeekEndTime) {\n', '            return secondWeekBonus;\n', '        } else if (now < mainICOThirdWeekEndTime) {\n', '            return thirdWeekBonus;\n', '        } else if (now < mainICOFourthWeekEndTime) {\n', '            return fourthWeekBonus;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function claimBitNauticTokens() public returns (bool) {\n', '        return grantInvestorTokens(msg.sender);\n', '    }\n', '\n', '    function grantInvestorTokens(address investor) public returns (bool) {\n', '        require(creditOf[investor] > 0);\n', '        require(now > mainICOEndTime && whitelist.AMLWhitelisted(investor));\n', '        require(goalReached());\n', '\n', '        assert(token.mint(investor, creditOf[investor]));\n', '        creditOf[investor] = 0;\n', '\n', '        return true;\n', '    }\n', '\n', '    function grantInvestorsTokens(address[] investors) public returns (bool) {\n', '        require(now > mainICOEndTime);\n', '        require(goalReached());\n', '\n', '        for (uint256 i = 0; i < investors.length; i++) {\n', '            if (creditOf[investors[i]] > 0 && whitelist.AMLWhitelisted(investors[i])) {\n', '                token.mint(investors[i], creditOf[investors[i]]);\n', '                creditOf[investors[i]] = 0;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function bountyDrop(address[] recipients, uint256[] values) onlyOwner public returns (bool) {\n', '        require(now > mainICOEndTime);\n', '        require(goalReached());\n', '        require(recipients.length == values.length);\n', '\n', '        for (uint256 i = 0; i < recipients.length; i++) {\n', '            values[i] = SafeMath.mul(values[i], 1 ether);\n', '            if (bountySupply >= values[i]) {\n', '                return false;\n', '            }\n', '            bountySupply = SafeMath.sub(bountySupply, values[i]);\n', '            token.mint(recipients[i], values[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    uint256 public teamTimeLock = mainICOEndTime;\n', '    uint256 public founderTimeLock = mainICOEndTime + 365 days;\n', '    uint256 public advisorTimeLock = mainICOEndTime + 180 days;\n', '    uint256 public reserveTimeLock = mainICOEndTime;\n', '\n', '    function grantAdvisorTokens(address advisorAddress) onlyOwner public {\n', '        require((advisorSupply > 0) && (advisorTimeLock < now));\n', '        require(goalReached());\n', '\n', '        token.mint(advisorAddress, advisorSupply);\n', '        advisorSupply = 0;\n', '    }\n', '\n', '    uint256 public teamVestingCounter = 0; // months of vesting\n', '\n', '    function grantTeamTokens(address teamAddress) onlyOwner public {\n', '        require((teamVestingCounter < 12) && (teamTimeLock < now));\n', '        require(goalReached());\n', '\n', '        teamTimeLock = SafeMath.add(teamTimeLock, 4 weeks);\n', '        token.mint(teamAddress, SafeMath.div(teamSupply, 12));\n', '        teamVestingCounter = SafeMath.add(teamVestingCounter, 1);\n', '    }\n', '\n', '    function grantFounderTokens(address founderAddress) onlyOwner public {\n', '        require((founderSupply > 0) && (founderTimeLock < now));\n', '        require(goalReached());\n', '\n', '        token.mint(founderAddress, founderSupply);\n', '        founderSupply = 0;\n', '    }\n', '\n', '    function grantReserveTokens(address beneficiary) onlyOwner public {\n', '        require((reserveSupply > 0) && (now > reserveTimeLock));\n', '        require(goalReached());\n', '\n', '        token.mint(beneficiary, reserveSupply);\n', '        reserveSupply = 0;\n', '    }\n', '\n', '    function transferTokenOwnership(address newTokenOwner) onlyOwner public returns (bool) {\n', '        return token.transferOwnership(newTokenOwner);\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = SafeMath.add(totalSupply, _amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '//  function finishMinting() onlyOwner public returns (bool) {\n', '//    mintingFinished = true;\n', '//    emit MintFinished();\n', '//    return true;\n', '//  }\n', '\n', '  function burnTokens(uint256 _unsoldTokens) onlyOwner canMint public returns (bool) {\n', '    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\n', '  }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '  uint256 public cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '}\n', '\n', 'contract BitNauticToken is CappedToken {\n', '  string public constant name = "BitNautic Token";\n', '  string public constant symbol = "BTNT";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public totalSupply = 0;\n', '\n', '  constructor()\n', '  CappedToken(50000000 * 10 ** uint256(decimals)) public\n', '  {\n', '\n', '  }\n', '}']
['pragma solidity ^0.4.13;\n', '\n', 'contract Ownable {\n', '  address internal owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public returns (bool) {\n', '    require(newOwner != address(0x0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BitNauticWhitelist is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public usdPerEth;\n', '\n', '    constructor(uint256 _usdPerEth) public {\n', '        usdPerEth = _usdPerEth;\n', '    }\n', '\n', '    mapping(address => bool) public AMLWhitelisted;\n', '    mapping(address => uint256) public contributionCap;\n', '\n', '    /**\n', '     * @dev add an address to the whitelist\n', '     * @param addr address\n', '     * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '     */\n', '    function setKYCLevel(address addr, uint8 level) onlyOwner public returns (bool) {\n', '        if (level >= 3) {\n', '            contributionCap[addr] = 50000 ether; // crowdsale hard cap\n', '        } else if (level == 2) {\n', '            contributionCap[addr] = SafeMath.div(500000 * 10 ** 18, usdPerEth); // KYC Tier 2 - 500k USD\n', '        } else if (level == 1) {\n', '            contributionCap[addr] = SafeMath.div(3000 * 10 ** 18, usdPerEth); // KYC Tier 1 - 3k USD\n', '        } else {\n', '            contributionCap[addr] = 0;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev add addresses to the whitelist\n', '     * @param addrs addresses\n', '     * @return true if at least one address was added to the whitelist,\n', '     * false if all addresses were already in the whitelist\n', '     */\n', '    function setKYCLevelsBulk(address[] addrs, uint8[] levels) onlyOwner external returns (bool success) {\n', '        require(addrs.length == levels.length);\n', '\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            assert(setKYCLevel(addrs[i], levels[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function setAMLWhitelisted(address addr, bool whitelisted) onlyOwner public returns (bool) {\n', '        AMLWhitelisted[addr] = whitelisted;\n', '\n', '        return true;\n', '    }\n', '\n', '    function setAMLWhitelistedBulk(address[] addrs, bool[] whitelisted) onlyOwner external returns (bool) {\n', '        require(addrs.length == whitelisted.length);\n', '\n', '        for (uint256 i = 0; i < addrs.length; i++) {\n', '            assert(setAMLWhitelisted(addrs[i], whitelisted[i]));\n', '        }\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Crowdsale is Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    MintableToken public token;\n', '\n', '    // start and end timestamps where investments are allowed (both inclusive)\n', '    uint256 public ICOStartTime;\n', '    uint256 public ICOEndTime;\n', '\n', '    // wallet address where funds will be saved\n', '    address internal wallet;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised; // internal\n', '\n', '    // Public Supply\n', '    uint256 public publicSupply;\n', '\n', '    /**\n', '     * event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    // BitNautic Crowdsale constructor\n', '    constructor(MintableToken _token, uint256 _publicSupply, uint256 _startTime, uint256 _endTime, address _wallet) public {\n', '        require(_endTime >= _startTime);\n', '        require(_wallet != 0x0);\n', '\n', '        // BitNautic token creation\n', '        token = _token;\n', '\n', '        // total supply of token for the crowdsale\n', '        publicSupply = _publicSupply;\n', '\n', '        // Pre-ICO start Time\n', '        ICOStartTime = _startTime;\n', '\n', '        // ICO end Time\n', '        ICOEndTime = _endTime;\n', '\n', '        // wallet where funds will be saved\n', '        wallet = _wallet;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() public payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    // High level token purchase function\n', '    function buyTokens(address beneficiary) whenNotPaused public payable {\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '\n', '        // minimum investment should be 0.05 ETH\n', '        uint256 lowerPurchaseLimit = 0.05 ether;\n', '        require(msg.value >= lowerPurchaseLimit);\n', '\n', '        assert(_tokenPurchased(msg.sender, beneficiary, msg.value));\n', '\n', '        // update state\n', '        weiRaised = weiRaised.add(msg.value);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    function _tokenPurchased(address /* buyer */, address /* beneficiary */, uint256 /* weiAmount */) internal returns (bool) {\n', '        // TO BE OVERLOADED IN SUBCLASSES\n', '        return true;\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = ICOStartTime <= now && now <= ICOEndTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '\n', '        return withinPeriod && nonZeroPurchase;\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        return now > ICOEndTime;\n', '    }\n', '\n', '    bool public checkBurnTokens = false;\n', '\n', '    function burnTokens() onlyOwner public returns (bool) {\n', '        require(hasEnded());\n', '        require(!checkBurnTokens);\n', '\n', '        token.mint(0x0, publicSupply);\n', '        token.burnTokens(publicSupply);\n', '        publicSupply = 0;\n', '        checkBurnTokens = true;\n', '\n', '        return true;\n', '    }\n', '\n', '    function getTokenAddress() onlyOwner public view returns (address) {\n', '        return address(token);\n', '    }\n', '}\n', '\n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 internal cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    bool isFinalized = false;\n', '\n', '    event Finalized();\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', "     * work. Calls the contract's finalization function.\n", '     */\n', '    function finalizeCrowdsale() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Can be overridden to add finalization logic. The overriding function\n', '     * should call super.finalization() to ensure the chain of finalization is\n', '     * executed entirely.\n', '     */\n', '    function finalization() internal {\n', '    }\n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  constructor(address _wallet) public {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // minimum amount of funds to be raised in weis\n', '    uint256 internal goal;\n', '    bool internal _goalReached = false;\n', '    // refund vault used to hold funds while crowdsale is running\n', '    RefundVault private vault;\n', '\n', '    constructor(uint256 _goal) public {\n', '        require(_goal > 0);\n', '        vault = new RefundVault(wallet);\n', '        goal = _goal;\n', '    }\n', '\n', "    // We're overriding the fund forwarding from Crowdsale.\n", '    // In addition to sending the funds, we want to call\n', '    // the RefundVault deposit function\n', '    function forwardFunds() internal {\n', '        vault.deposit.value(msg.value)(msg.sender);\n', '    }\n', '\n', '    // if crowdsale is unsuccessful, investors can claim refunds here\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    // vault finalization task, called when owner calls finalize()\n', '    function finalization() internal {\n', '        if (goalReached()) {\n', '            vault.close();\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '        super.finalization();\n', '    }\n', '\n', '    function goalReached() public returns (bool) {\n', '        if (weiRaised >= goal) {\n', '            _goalReached = true;\n', '        }\n', '\n', '        return _goalReached;\n', '    }\n', '\n', '    //  function updateGoalCheck() onlyOwner public {\n', '    //    _goalReached = true;\n', '    //  }\n', '\n', '    function getVaultAddress() onlyOwner public view returns (address) {\n', '        return vault;\n', '    }\n', '}\n', '\n', 'contract BitNauticCrowdsale is CappedCrowdsale, RefundableCrowdsale {\n', '    uint256 constant public crowdsaleInitialSupply = 35000000 * 10 ** 18; // 70% of token cap\n', '//    uint256 constant public crowdsaleSoftCap = 2 ether;\n', '//    uint256 constant public crowdsaleHardCap = 10 ether;\n', '    uint256 constant public crowdsaleSoftCap = 5000 ether;\n', '    uint256 constant public crowdsaleHardCap = 50000 ether;\n', '\n', '    uint256 constant public preICOStartTime = 1525132800;          // 2018-05-01 00:00 GMT+0\n', '    uint256 constant public mainICOStartTime = 1527811200;         // 2018-06-01 00:00 GMT+0\n', '    uint256 constant public mainICOFirstWeekEndTime = 1528416000;  // 2018-06-08 00:00 GMT+0\n', '    uint256 constant public mainICOSecondWeekEndTime = 1529020800; // 2018-06-15 00:00 GMT+0\n', '    uint256 constant public mainICOThirdWeekEndTime = 1529625600;  // 2018-06-22 00:00 GMT+0\n', '    uint256 constant public mainICOFourthWeekEndTime = 1530403200; // 2018-07-01 00:00 GMT+0\n', '    uint256 constant public mainICOEndTime = 1532995200;           // 2018-07-31 00:00 GMT+0\n', '\n', '//    uint256 public preICOStartTime = now;          // 2018-05-01 00:00 GMT+0\n', '//    uint256 constant public mainICOStartTime = preICOStartTime;         // 2018-06-01 00:00 GMT+0\n', '//    uint256 constant public mainICOFirstWeekEndTime = mainICOStartTime;  // 2018-06-08 00:00 GMT+0\n', '//    uint256 constant public mainICOSecondWeekEndTime = mainICOFirstWeekEndTime; // 2018-06-15 00:00 GMT+0\n', '//    uint256 constant public mainICOThirdWeekEndTime = mainICOSecondWeekEndTime;  // 2018-06-22 00:00 GMT+0\n', '//    uint256 constant public mainICOFourthWeekEndTime = mainICOThirdWeekEndTime; // 2018-07-01 00:00 GMT+0\n', '//    uint256 constant public mainICOEndTime = mainICOFourthWeekEndTime + 5 minutes;           // 2018-07-30 00:00 GMT+0\n', '\n', '    uint256 constant public tokenBaseRate = 500; // 1 ETH = 500 BTNT\n', '\n', '    // bonuses in percentage\n', '    uint256 constant public preICOBonus = 30;\n', '    uint256 constant public firstWeekBonus = 20;\n', '    uint256 constant public secondWeekBonus = 15;\n', '    uint256 constant public thirdWeekBonus = 10;\n', '    uint256 constant public fourthWeekBonus = 5;\n', '\n', '    uint256 public teamSupply =     3000000 * 10 ** 18; // 6% of token cap\n', '    uint256 public bountySupply =   2500000 * 10 ** 18; // 5% of token cap\n', '    uint256 public reserveSupply =  5000000 * 10 ** 18; // 10% of token cap\n', '    uint256 public advisorSupply =  2500000 * 10 ** 18; // 5% of token cap\n', '    uint256 public founderSupply =  2000000 * 10 ** 18; // 4% of token cap\n', '\n', '    // amount of tokens each address will receive at the end of the crowdsale\n', '    mapping (address => uint256) public creditOf;\n', '\n', '    mapping (address => uint256) public weiInvestedBy;\n', '\n', '    BitNauticWhitelist public whitelist;\n', '\n', '    /** Constructor BitNauticICO */\n', '    constructor(BitNauticToken _token, BitNauticWhitelist _whitelist, address _wallet)\n', '    CappedCrowdsale(crowdsaleHardCap)\n', '    FinalizableCrowdsale()\n', '    RefundableCrowdsale(crowdsaleSoftCap)\n', '    Crowdsale(_token, crowdsaleInitialSupply, preICOStartTime, mainICOEndTime, _wallet) public\n', '    {\n', '        whitelist = _whitelist;\n', '    }\n', '\n', '    function _tokenPurchased(address buyer, address beneficiary, uint256 weiAmount) internal returns (bool) {\n', '        require(SafeMath.add(weiInvestedBy[buyer], weiAmount) <= whitelist.contributionCap(buyer));\n', '\n', '        uint256 tokens = SafeMath.mul(weiAmount, tokenBaseRate);\n', '\n', '        tokens = tokens.add(SafeMath.mul(tokens, getCurrentBonus()).div(100));\n', '\n', '        require(publicSupply >= tokens);\n', '\n', '        publicSupply = publicSupply.sub(tokens);\n', '\n', '        creditOf[beneficiary] = creditOf[beneficiary].add(tokens);\n', '        weiInvestedBy[buyer] = SafeMath.add(weiInvestedBy[buyer], weiAmount);\n', '\n', '        emit TokenPurchase(buyer, beneficiary, weiAmount, tokens);\n', '\n', '        return true;\n', '    }\n', '\n', '    address constant public privateSaleWallet = 0x5A01D561AE864006c6B733f21f8D4311d1E1B42a;\n', '\n', '    function goalReached() public returns (bool) {\n', '        if (weiRaised + privateSaleWallet.balance >= goal) {\n', '            _goalReached = true;\n', '        }\n', '\n', '        return _goalReached;\n', '    }\n', '\n', '    function getCurrentBonus() public view returns (uint256) {\n', '        if (now < mainICOStartTime) {\n', '            return preICOBonus;\n', '        } else if (now < mainICOFirstWeekEndTime) {\n', '            return firstWeekBonus;\n', '        } else if (now < mainICOSecondWeekEndTime) {\n', '            return secondWeekBonus;\n', '        } else if (now < mainICOThirdWeekEndTime) {\n', '            return thirdWeekBonus;\n', '        } else if (now < mainICOFourthWeekEndTime) {\n', '            return fourthWeekBonus;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function claimBitNauticTokens() public returns (bool) {\n', '        return grantInvestorTokens(msg.sender);\n', '    }\n', '\n', '    function grantInvestorTokens(address investor) public returns (bool) {\n', '        require(creditOf[investor] > 0);\n', '        require(now > mainICOEndTime && whitelist.AMLWhitelisted(investor));\n', '        require(goalReached());\n', '\n', '        assert(token.mint(investor, creditOf[investor]));\n', '        creditOf[investor] = 0;\n', '\n', '        return true;\n', '    }\n', '\n', '    function grantInvestorsTokens(address[] investors) public returns (bool) {\n', '        require(now > mainICOEndTime);\n', '        require(goalReached());\n', '\n', '        for (uint256 i = 0; i < investors.length; i++) {\n', '            if (creditOf[investors[i]] > 0 && whitelist.AMLWhitelisted(investors[i])) {\n', '                token.mint(investors[i], creditOf[investors[i]]);\n', '                creditOf[investors[i]] = 0;\n', '            }\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function bountyDrop(address[] recipients, uint256[] values) onlyOwner public returns (bool) {\n', '        require(now > mainICOEndTime);\n', '        require(goalReached());\n', '        require(recipients.length == values.length);\n', '\n', '        for (uint256 i = 0; i < recipients.length; i++) {\n', '            values[i] = SafeMath.mul(values[i], 1 ether);\n', '            if (bountySupply >= values[i]) {\n', '                return false;\n', '            }\n', '            bountySupply = SafeMath.sub(bountySupply, values[i]);\n', '            token.mint(recipients[i], values[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    uint256 public teamTimeLock = mainICOEndTime;\n', '    uint256 public founderTimeLock = mainICOEndTime + 365 days;\n', '    uint256 public advisorTimeLock = mainICOEndTime + 180 days;\n', '    uint256 public reserveTimeLock = mainICOEndTime;\n', '\n', '    function grantAdvisorTokens(address advisorAddress) onlyOwner public {\n', '        require((advisorSupply > 0) && (advisorTimeLock < now));\n', '        require(goalReached());\n', '\n', '        token.mint(advisorAddress, advisorSupply);\n', '        advisorSupply = 0;\n', '    }\n', '\n', '    uint256 public teamVestingCounter = 0; // months of vesting\n', '\n', '    function grantTeamTokens(address teamAddress) onlyOwner public {\n', '        require((teamVestingCounter < 12) && (teamTimeLock < now));\n', '        require(goalReached());\n', '\n', '        teamTimeLock = SafeMath.add(teamTimeLock, 4 weeks);\n', '        token.mint(teamAddress, SafeMath.div(teamSupply, 12));\n', '        teamVestingCounter = SafeMath.add(teamVestingCounter, 1);\n', '    }\n', '\n', '    function grantFounderTokens(address founderAddress) onlyOwner public {\n', '        require((founderSupply > 0) && (founderTimeLock < now));\n', '        require(goalReached());\n', '\n', '        token.mint(founderAddress, founderSupply);\n', '        founderSupply = 0;\n', '    }\n', '\n', '    function grantReserveTokens(address beneficiary) onlyOwner public {\n', '        require((reserveSupply > 0) && (now > reserveTimeLock));\n', '        require(goalReached());\n', '\n', '        token.mint(beneficiary, reserveSupply);\n', '        reserveSupply = 0;\n', '    }\n', '\n', '    function transferTokenOwnership(address newTokenOwner) onlyOwner public returns (bool) {\n', '        return token.transferOwnership(newTokenOwner);\n', '    }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = SafeMath.add(totalSupply, _amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '//  function finishMinting() onlyOwner public returns (bool) {\n', '//    mintingFinished = true;\n', '//    emit MintFinished();\n', '//    return true;\n', '//  }\n', '\n', '  function burnTokens(uint256 _unsoldTokens) onlyOwner canMint public returns (bool) {\n', '    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\n', '  }\n', '}\n', '\n', 'contract CappedToken is MintableToken {\n', '  uint256 public cap;\n', '\n', '  constructor(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '}\n', '\n', 'contract BitNauticToken is CappedToken {\n', '  string public constant name = "BitNautic Token";\n', '  string public constant symbol = "BTNT";\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public totalSupply = 0;\n', '\n', '  constructor()\n', '  CappedToken(50000000 * 10 ** uint256(decimals)) public\n', '  {\n', '\n', '  }\n', '}']
