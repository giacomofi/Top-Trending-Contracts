['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address _who) public view returns (uint256);\n', '\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Ownable {\n', '\n', '  // Owner&#39;s address\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    emit OwnerChanged(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '  event OwnerChanged(address indexed previousOwner,address indexed newOwner);\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Stoppable is Ownable {\n', '    \n', '    // Indicates if crowdsale is stopped\n', '    bool public stopped = false;\n', '\n', '    // Indicates if ELP or ETH withdrawal is enabled\n', '    bool public withdrawalEnabled = false;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is stopped.\n', '    */\n', '    modifier whenStopped() {\n', '        require(stopped);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not stopped.\n', '    */\n', '    modifier whenNotStopped() {\n', '        require(!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier whenWithdrawalEnabled() {\n', '        require(withdrawalEnabled);\n', '        _;\n', '    }\n', '\n', '    modifier whenWithdrawalDisabled() {\n', '        require(!withdrawalEnabled);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to stop, triggers stopped state\n', '    */\n', '    function stop() public onlyOwner whenNotStopped {\n', '        stopped = true;\n', '        emit Stopped(owner);\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to restart, triggers restarted state\n', '    */\n', '    function restart() public onlyOwner whenStopped {\n', '        stopped = false;\n', '        withdrawalEnabled = false;\n', '        emit Restarted(owner);\n', '    }\n', '\n', '    /** \n', '    * @dev enables withdrawals, only callable by the owner when the withdrawals are disabled\n', '    * @notice enables withdrawals, only callable by the owner when the withdrawals are disabled\n', '    */\n', '    function enableWithdrawal() public onlyOwner whenStopped whenWithdrawalDisabled {\n', '        withdrawalEnabled = true;\n', '        emit WithdrawalEnabled(owner);\n', '    }\n', '\n', '    /** \n', '    * @dev disables withdrawals, only callable by the owner when the withdrawals are enabled\n', '    * @notice disables withdrawals, only callable by the owner when the withdrawals are enabled\n', '    */\n', '    function disableWithdrawal() public onlyOwner whenWithdrawalEnabled {\n', '        withdrawalEnabled = false;\n', '        emit WithdrawalDisabled(owner);\n', '    }\n', '\n', '    /** \n', '    * Event for logging contract stopping\n', '    * @param owner who owns the contract\n', '    */\n', '    event Stopped(address owner);\n', '    \n', '    /** \n', '    * Event for logging contract restarting\n', '    * @param owner who owns the contract\n', '    */\n', '    event Restarted(address owner);\n', '\n', '    /** \n', '    * Event for logging enabling withdrawals\n', '    * @param owner who owns the contract\n', '    */\n', '    event WithdrawalEnabled(address owner);\n', '    \n', '    /** \n', '    * Event for logging disabling withdrawals\n', '    * @param owner who owns the contract\n', '    */\n', '    event WithdrawalDisabled(address owner);\n', '}\n', '\n', 'contract Whitelist {\n', '\n', '    // who can whitelist\n', '    address public whitelister;\n', '\n', '    // Whitelist mapping\n', '    mapping (address => bool) whitelist;\n', '\n', '    /**\n', '      * @dev The Whitelist constructor sets the original `whitelister` of the contract to the sender\n', '      * account.\n', '      */\n', '    constructor() public {\n', '        whitelister = msg.sender;\n', '    }\n', '\n', '    /**\n', '      * @dev Throws if called by any account other than the whitelister.\n', '      */\n', '    modifier onlyWhitelister() {\n', '        require(msg.sender == whitelister);\n', '        _;\n', '    }\n', '\n', '    /** \n', '    * @dev Only callable by the whitelister. Whitelists the specified address.\n', '    * @notice Only callable by the whitelister. Whitelists the specified address.\n', '    * @param _address Address to be whitelisted. \n', '    */\n', '    function addToWhitelist(address _address) public onlyWhitelister {\n', '        require(_address != address(0));\n', '        emit WhitelistAdd(whitelister, _address);\n', '        whitelist[_address] = true;\n', '    }\n', '    \n', '    /** \n', '    * @dev Only callable by the whitelister. Removes the specified address from whitelist.\n', '    * @notice Only callable by the whitelister. Removes the specified address from whitelist.\n', '    * @param _address Address to be removed from whitelist. \n', '    */\n', '    function removeFromWhitelist(address _address) public onlyWhitelister {\n', '        require(_address != address(0));\n', '        emit WhitelistRemove(whitelister, _address);\n', '        whitelist[_address] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks if the specified address is whitelisted.\n', '    * @notice Checks if the specified address is whitelisted. \n', '    * @param _address Address to be whitelisted.\n', '    */\n', '    function isWhitelisted(address _address) public view returns (bool) {\n', '        return whitelist[_address];\n', '    }\n', '\n', '    /**\n', '      * @dev Changes the current whitelister. Callable only by the whitelister.\n', '      * @notice Changes the current whitelister. Callable only by the whitelister.\n', '      * @param _newWhitelister Address of new whitelister.\n', '      */\n', '    function changeWhitelister(address _newWhitelister) public onlyWhitelister {\n', '        require(_newWhitelister != address(0));\n', '        emit WhitelisterChanged(whitelister, _newWhitelister);\n', '        whitelister = _newWhitelister;\n', '    }\n', '\n', '    /** \n', '    * Event for logging the whitelister change. \n', '    * @param previousWhitelister Old whitelister.\n', '    * @param newWhitelister New whitelister.\n', '    */\n', '    event WhitelisterChanged(address indexed previousWhitelister, address indexed newWhitelister);\n', '    \n', '    /** \n', '    * Event for logging when the user is whitelisted.\n', '    * @param whitelister Current whitelister.\n', '    * @param whitelistedAddress User added to whitelist.\n', '    */\n', '    event WhitelistAdd(address indexed whitelister, address indexed whitelistedAddress);\n', '    /** \n', '    * Event for logging when the user is removed from the whitelist.\n', '    * @param whitelister Current whitelister.\n', '    * @param whitelistedAddress User removed from whitelist.\n', '    */\n', '    event WhitelistRemove(address indexed whitelister, address indexed whitelistedAddress); \n', '}\n', '\n', 'contract ElpisCrowdsale is Stoppable, Whitelist {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Wallet for contributions\n', '    address public wallet;\n', '\n', '    // Cumulative wei contributions per address\n', '    mapping (address => uint256) public ethBalances;\n', '\n', '    // Cumulative ELP allocations per address\n', '    mapping (address => uint256) public elpBalances;\n', '\n', '    // USD/ETH rate\n', '    uint256 public rate;\n', '\n', '    // Maximum wei contribution for non-whitelisted addresses\n', '    uint256 public threshold;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    // Amount of USD raised\n', '    uint256 public usdRaised;\n', '\n', '    // Amount of tokens sold so far\n', '    uint256 public tokensSold;\n', '\n', '    // Maximum amount of ELP tokens to be sold\n', '    uint256 public cap;\n', '\n', '    // Block on which crowdsale is deployed\n', '    uint256 public deploymentBlock;\n', '\n', '    // Amount of ELP tokens sold per phase\n', '    uint256 public constant AMOUNT_PER_PHASE = 14500000 ether;\n', '\n', '    /**\n', '    * @param _rate USD/ETH rate\n', '    * @param _threshold Maximum wei contribution for non-whitelisted addresses\n', '    * @param _token Address of the token being sold\n', '    * @param _wallet Address of the wallet for contributions\n', '    */\n', '    constructor(uint256 _rate, uint256 _threshold, uint256 _cap, ERC20 _token, address _wallet) public {\n', '        require(_rate > 0);\n', '        require(_threshold > 0);\n', '        require(_cap > 0);\n', '        require(_token != address(0));\n', '        require(_wallet != address(0));\n', '\n', '        rate = _rate;\n', '        threshold = _threshold;\n', '        cap = _cap;\n', '        token = _token;\n', '        wallet = _wallet;\n', '        deploymentBlock = block.number;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the USD/ETH rate\n', '    * @param _rate USD/ETH rate\n', '    */\n', '    function setRate(uint256 _rate) public onlyOwner {\n', '        emit RateChanged(owner, rate, _rate);\n', '        rate = _rate;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the threshold\n', '    * @param _threshold Maximum wei contribution for non-whitelisted addresses\n', '    */\n', '    function setThreshold(uint256 _threshold) public onlyOwner {\n', '        emit ThresholdChanged(owner, threshold, _threshold);\n', '        threshold = _threshold;\n', '    }\n', '\n', '    /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev low level token purchase ***DO NOT OVERRIDE***\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) public payable whenNotStopped {\n', '        uint256 weiAmount = msg.value;\n', '        require(_beneficiary != address(0));\n', '        require(weiAmount != 0);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        require(weiRaised <= cap);\n', '\n', '        uint256 dollars = _getUsdAmount(weiAmount);\n', '        uint256 tokens = _getTokenAmount(dollars);\n', '\n', '        // update state & statistics\n', '        uint256 previousEthBalance = ethBalances[_beneficiary];\n', '        ethBalances[_beneficiary] = ethBalances[_beneficiary].add(weiAmount);\n', '        elpBalances[_beneficiary] = elpBalances[_beneficiary].add(tokens);\n', '        tokensSold = tokensSold.add(tokens);\n', '        usdRaised = usdRaised.add(dollars);\n', '\n', '        if (ethBalances[_beneficiary] > threshold) {\n', '            whitelist[_beneficiary] = false;\n', '            // Transfer difference (up to threshold) to wallet\n', '            // if previous balance is lower than threshold\n', '            if (previousEthBalance < threshold)\n', '                wallet.transfer(threshold - previousEthBalance);\n', '            emit NeedKyc(_beneficiary, weiAmount, ethBalances[_beneficiary]);\n', '        } else {\n', '            whitelist[_beneficiary] = true;\n', '            // When cumulative contributions for address are lower\n', '            // than threshold, transfer whole contribution to wallet\n', '            wallet.transfer(weiAmount);\n', '            emit Contribution(_beneficiary, weiAmount, ethBalances[_beneficiary]);\n', '        }\n', '\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '    }\n', '\n', '    /**\n', '    * @notice Withdraws the tokens. For whitelisted contributors it withdraws ELP tokens.\n', '    * For non-whitelisted contributors it withdraws the threshold amount of ELP tokens,\n', '    * everything above the threshold amount is transfered back to contributor as ETH.\n', '    */\n', '    function withdraw() external whenWithdrawalEnabled {\n', '        uint256 ethBalance = ethBalances[msg.sender];\n', '        require(ethBalance > 0);\n', '        uint256 elpBalance = elpBalances[msg.sender];\n', '\n', '        // reentrancy protection\n', '        elpBalances[msg.sender] = 0;\n', '        ethBalances[msg.sender] = 0;\n', '\n', '        if (isWhitelisted(msg.sender)) {\n', '            // Transfer all ELP tokens to contributor\n', '            token.transfer(msg.sender, elpBalance);\n', '        } else {\n', '            // Transfer threshold equivalent ELP amount based on average price\n', '            token.transfer(msg.sender, elpBalance.mul(threshold).div(ethBalance));\n', '\n', '            if (ethBalance > threshold) {\n', '                // Excess amount (over threshold) of contributed ETH is\n', '                // transferred back to non-whitelisted contributor\n', '                msg.sender.transfer(ethBalance - threshold);\n', '            }\n', '        }\n', '        emit Withdrawal(msg.sender, ethBalance, elpBalance);\n', '    }\n', '\n', '    /**\n', '    * @dev This method can be used by the owner to extract mistakenly sent tokens\n', '    * or Ether sent to this contract.\n', '    * @param _token address The address of the token contract that you want to\n', '    * recover set to 0 in case you want to extract ether. It can&#39;t be ElpisToken.\n', '    */\n', '    function claimTokens(address _token) public onlyOwner {\n', '        require(_token != address(token));\n', '        if (_token == address(0)) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        ERC20 tokenReference = ERC20(_token);\n', '        uint balance = tokenReference.balanceOf(address(this));\n', '        token.transfer(owner, balance);\n', '        emit ClaimedTokens(_token, owner, balance);\n', '    }\n', '\n', '    /**\n', '    * @dev Checks how much of ELP tokens one can get for the specified USD amount.\n', '    * @param _usdAmount Specified USD amount.\n', '    * @return Returns how much ELP tokens you can currently get for the specified USD amount.\n', '    */\n', '    function _getTokenAmount(uint256 _usdAmount) internal view returns (uint256) {\n', '        uint256 phase = getPhase();\n', '        uint256 initialPriceNumerator = 110;\n', '        uint256 initialPriceDenominator = 1000;\n', '\n', '        uint256 scaleNumerator = 104 ** phase;\n', '        uint256 scaleDenominator = 100 ** phase;\n', '\n', '        return _usdAmount.mul(initialPriceNumerator).mul(scaleNumerator).div(initialPriceDenominator).div(scaleDenominator);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the USD amount for specified wei amount\n', '    * @param _weiAmount Specified wei amount\n', '    * @return Returns USD amount based on wei amount\n', '    */\n', '    function _getUsdAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '    * @notice Gets the current phase of crowdsale.\n', '    * Tokens have different price during each phase.\n', '    * @return Returns the current crowdsale phase.\n', '    */\n', '    function getPhase() public view returns (uint256) {\n', '        return tokensSold / AMOUNT_PER_PHASE;\n', '    }\n', '\n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * Event for rate change logging\n', '    * @param owner who owns the contract\n', '    * @param oldValue old USD/ETH rate\n', '    * @param newValue new USD/ETH rate\n', '    */\n', '    event RateChanged(address indexed owner, uint256 oldValue, uint256 newValue);\n', '\n', '    /**\n', '    * Event for rate change logging\n', '    * @param owner who owns the contract\n', '    * @param oldValue old maximum wei contribution for non-whitelisted addresses value\n', '    * @param newValue new maximum wei contribution for non-whitelisted addresses value\n', '    */\n', '    event ThresholdChanged(address indexed owner, uint256 oldValue, uint256 newValue);\n', '\n', '    /**\n', '    * @param beneficiary who is the recipient of tokens from the contribution\n', '    * @param contributionAmount Amount of ETH contributor has contributed\n', '    * @param totalAmount Total amount of ETH contributor has contributed\n', '    */\n', '    event Contribution(address indexed beneficiary, uint256 contributionAmount, uint256 totalAmount);\n', '\n', '    /**\n', '    * @param beneficiary who is the recipient of tokens from the contribution\n', '    * @param contributionAmount Amount of ETH contributor has contributed\n', '    * @param totalAmount Total amount of ETH contributor has contributed\n', '    */\n', '    event NeedKyc(address indexed beneficiary, uint256 contributionAmount, uint256 totalAmount);\n', '\n', '    /**\n', '    * @param beneficiary who is the recipient of tokens from the contribution\n', '    * @param ethBalance ETH balance of the recipient of tokens from the contribution\n', '    * @param elpBalance ELP balance of the recipient of tokens from the contribution\n', '    */\n', '    event Withdrawal(address indexed beneficiary, uint256 ethBalance, uint256 elpBalance);\n', '\n', '    /**\n', '    * @param token claimed token\n', '    * @param owner who owns the contract\n', '    * @param amount amount of the claimed token\n', '    */\n', '    event ClaimedTokens(address indexed token, address indexed owner, uint256 amount);\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract ERC20 {\n', '  function totalSupply() public view returns (uint256);\n', '\n', '  function balanceOf(address _who) public view returns (uint256);\n', '\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract Ownable {\n', '\n', "  // Owner's address\n", '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '    emit OwnerChanged(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '\n', '  event OwnerChanged(address indexed previousOwner,address indexed newOwner);\n', '\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Stoppable is Ownable {\n', '    \n', '    // Indicates if crowdsale is stopped\n', '    bool public stopped = false;\n', '\n', '    // Indicates if ELP or ETH withdrawal is enabled\n', '    bool public withdrawalEnabled = false;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is stopped.\n', '    */\n', '    modifier whenStopped() {\n', '        require(stopped);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not stopped.\n', '    */\n', '    modifier whenNotStopped() {\n', '        require(!stopped);\n', '        _;\n', '    }\n', '\n', '    modifier whenWithdrawalEnabled() {\n', '        require(withdrawalEnabled);\n', '        _;\n', '    }\n', '\n', '    modifier whenWithdrawalDisabled() {\n', '        require(!withdrawalEnabled);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to stop, triggers stopped state\n', '    */\n', '    function stop() public onlyOwner whenNotStopped {\n', '        stopped = true;\n', '        emit Stopped(owner);\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to restart, triggers restarted state\n', '    */\n', '    function restart() public onlyOwner whenStopped {\n', '        stopped = false;\n', '        withdrawalEnabled = false;\n', '        emit Restarted(owner);\n', '    }\n', '\n', '    /** \n', '    * @dev enables withdrawals, only callable by the owner when the withdrawals are disabled\n', '    * @notice enables withdrawals, only callable by the owner when the withdrawals are disabled\n', '    */\n', '    function enableWithdrawal() public onlyOwner whenStopped whenWithdrawalDisabled {\n', '        withdrawalEnabled = true;\n', '        emit WithdrawalEnabled(owner);\n', '    }\n', '\n', '    /** \n', '    * @dev disables withdrawals, only callable by the owner when the withdrawals are enabled\n', '    * @notice disables withdrawals, only callable by the owner when the withdrawals are enabled\n', '    */\n', '    function disableWithdrawal() public onlyOwner whenWithdrawalEnabled {\n', '        withdrawalEnabled = false;\n', '        emit WithdrawalDisabled(owner);\n', '    }\n', '\n', '    /** \n', '    * Event for logging contract stopping\n', '    * @param owner who owns the contract\n', '    */\n', '    event Stopped(address owner);\n', '    \n', '    /** \n', '    * Event for logging contract restarting\n', '    * @param owner who owns the contract\n', '    */\n', '    event Restarted(address owner);\n', '\n', '    /** \n', '    * Event for logging enabling withdrawals\n', '    * @param owner who owns the contract\n', '    */\n', '    event WithdrawalEnabled(address owner);\n', '    \n', '    /** \n', '    * Event for logging disabling withdrawals\n', '    * @param owner who owns the contract\n', '    */\n', '    event WithdrawalDisabled(address owner);\n', '}\n', '\n', 'contract Whitelist {\n', '\n', '    // who can whitelist\n', '    address public whitelister;\n', '\n', '    // Whitelist mapping\n', '    mapping (address => bool) whitelist;\n', '\n', '    /**\n', '      * @dev The Whitelist constructor sets the original `whitelister` of the contract to the sender\n', '      * account.\n', '      */\n', '    constructor() public {\n', '        whitelister = msg.sender;\n', '    }\n', '\n', '    /**\n', '      * @dev Throws if called by any account other than the whitelister.\n', '      */\n', '    modifier onlyWhitelister() {\n', '        require(msg.sender == whitelister);\n', '        _;\n', '    }\n', '\n', '    /** \n', '    * @dev Only callable by the whitelister. Whitelists the specified address.\n', '    * @notice Only callable by the whitelister. Whitelists the specified address.\n', '    * @param _address Address to be whitelisted. \n', '    */\n', '    function addToWhitelist(address _address) public onlyWhitelister {\n', '        require(_address != address(0));\n', '        emit WhitelistAdd(whitelister, _address);\n', '        whitelist[_address] = true;\n', '    }\n', '    \n', '    /** \n', '    * @dev Only callable by the whitelister. Removes the specified address from whitelist.\n', '    * @notice Only callable by the whitelister. Removes the specified address from whitelist.\n', '    * @param _address Address to be removed from whitelist. \n', '    */\n', '    function removeFromWhitelist(address _address) public onlyWhitelister {\n', '        require(_address != address(0));\n', '        emit WhitelistRemove(whitelister, _address);\n', '        whitelist[_address] = false;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks if the specified address is whitelisted.\n', '    * @notice Checks if the specified address is whitelisted. \n', '    * @param _address Address to be whitelisted.\n', '    */\n', '    function isWhitelisted(address _address) public view returns (bool) {\n', '        return whitelist[_address];\n', '    }\n', '\n', '    /**\n', '      * @dev Changes the current whitelister. Callable only by the whitelister.\n', '      * @notice Changes the current whitelister. Callable only by the whitelister.\n', '      * @param _newWhitelister Address of new whitelister.\n', '      */\n', '    function changeWhitelister(address _newWhitelister) public onlyWhitelister {\n', '        require(_newWhitelister != address(0));\n', '        emit WhitelisterChanged(whitelister, _newWhitelister);\n', '        whitelister = _newWhitelister;\n', '    }\n', '\n', '    /** \n', '    * Event for logging the whitelister change. \n', '    * @param previousWhitelister Old whitelister.\n', '    * @param newWhitelister New whitelister.\n', '    */\n', '    event WhitelisterChanged(address indexed previousWhitelister, address indexed newWhitelister);\n', '    \n', '    /** \n', '    * Event for logging when the user is whitelisted.\n', '    * @param whitelister Current whitelister.\n', '    * @param whitelistedAddress User added to whitelist.\n', '    */\n', '    event WhitelistAdd(address indexed whitelister, address indexed whitelistedAddress);\n', '    /** \n', '    * Event for logging when the user is removed from the whitelist.\n', '    * @param whitelister Current whitelister.\n', '    * @param whitelistedAddress User removed from whitelist.\n', '    */\n', '    event WhitelistRemove(address indexed whitelister, address indexed whitelistedAddress); \n', '}\n', '\n', 'contract ElpisCrowdsale is Stoppable, Whitelist {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    ERC20 public token;\n', '\n', '    // Wallet for contributions\n', '    address public wallet;\n', '\n', '    // Cumulative wei contributions per address\n', '    mapping (address => uint256) public ethBalances;\n', '\n', '    // Cumulative ELP allocations per address\n', '    mapping (address => uint256) public elpBalances;\n', '\n', '    // USD/ETH rate\n', '    uint256 public rate;\n', '\n', '    // Maximum wei contribution for non-whitelisted addresses\n', '    uint256 public threshold;\n', '\n', '    // Amount of wei raised\n', '    uint256 public weiRaised;\n', '\n', '    // Amount of USD raised\n', '    uint256 public usdRaised;\n', '\n', '    // Amount of tokens sold so far\n', '    uint256 public tokensSold;\n', '\n', '    // Maximum amount of ELP tokens to be sold\n', '    uint256 public cap;\n', '\n', '    // Block on which crowdsale is deployed\n', '    uint256 public deploymentBlock;\n', '\n', '    // Amount of ELP tokens sold per phase\n', '    uint256 public constant AMOUNT_PER_PHASE = 14500000 ether;\n', '\n', '    /**\n', '    * @param _rate USD/ETH rate\n', '    * @param _threshold Maximum wei contribution for non-whitelisted addresses\n', '    * @param _token Address of the token being sold\n', '    * @param _wallet Address of the wallet for contributions\n', '    */\n', '    constructor(uint256 _rate, uint256 _threshold, uint256 _cap, ERC20 _token, address _wallet) public {\n', '        require(_rate > 0);\n', '        require(_threshold > 0);\n', '        require(_cap > 0);\n', '        require(_token != address(0));\n', '        require(_wallet != address(0));\n', '\n', '        rate = _rate;\n', '        threshold = _threshold;\n', '        cap = _cap;\n', '        token = _token;\n', '        wallet = _wallet;\n', '        deploymentBlock = block.number;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the USD/ETH rate\n', '    * @param _rate USD/ETH rate\n', '    */\n', '    function setRate(uint256 _rate) public onlyOwner {\n', '        emit RateChanged(owner, rate, _rate);\n', '        rate = _rate;\n', '    }\n', '\n', '    /**\n', '    * @dev Sets the threshold\n', '    * @param _threshold Maximum wei contribution for non-whitelisted addresses\n', '    */\n', '    function setThreshold(uint256 _threshold) public onlyOwner {\n', '        emit ThresholdChanged(owner, threshold, _threshold);\n', '        threshold = _threshold;\n', '    }\n', '\n', '    /**\n', '    * @dev fallback function ***DO NOT OVERRIDE***\n', '    */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev low level token purchase ***DO NOT OVERRIDE***\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) public payable whenNotStopped {\n', '        uint256 weiAmount = msg.value;\n', '        require(_beneficiary != address(0));\n', '        require(weiAmount != 0);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        require(weiRaised <= cap);\n', '\n', '        uint256 dollars = _getUsdAmount(weiAmount);\n', '        uint256 tokens = _getTokenAmount(dollars);\n', '\n', '        // update state & statistics\n', '        uint256 previousEthBalance = ethBalances[_beneficiary];\n', '        ethBalances[_beneficiary] = ethBalances[_beneficiary].add(weiAmount);\n', '        elpBalances[_beneficiary] = elpBalances[_beneficiary].add(tokens);\n', '        tokensSold = tokensSold.add(tokens);\n', '        usdRaised = usdRaised.add(dollars);\n', '\n', '        if (ethBalances[_beneficiary] > threshold) {\n', '            whitelist[_beneficiary] = false;\n', '            // Transfer difference (up to threshold) to wallet\n', '            // if previous balance is lower than threshold\n', '            if (previousEthBalance < threshold)\n', '                wallet.transfer(threshold - previousEthBalance);\n', '            emit NeedKyc(_beneficiary, weiAmount, ethBalances[_beneficiary]);\n', '        } else {\n', '            whitelist[_beneficiary] = true;\n', '            // When cumulative contributions for address are lower\n', '            // than threshold, transfer whole contribution to wallet\n', '            wallet.transfer(weiAmount);\n', '            emit Contribution(_beneficiary, weiAmount, ethBalances[_beneficiary]);\n', '        }\n', '\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '    }\n', '\n', '    /**\n', '    * @notice Withdraws the tokens. For whitelisted contributors it withdraws ELP tokens.\n', '    * For non-whitelisted contributors it withdraws the threshold amount of ELP tokens,\n', '    * everything above the threshold amount is transfered back to contributor as ETH.\n', '    */\n', '    function withdraw() external whenWithdrawalEnabled {\n', '        uint256 ethBalance = ethBalances[msg.sender];\n', '        require(ethBalance > 0);\n', '        uint256 elpBalance = elpBalances[msg.sender];\n', '\n', '        // reentrancy protection\n', '        elpBalances[msg.sender] = 0;\n', '        ethBalances[msg.sender] = 0;\n', '\n', '        if (isWhitelisted(msg.sender)) {\n', '            // Transfer all ELP tokens to contributor\n', '            token.transfer(msg.sender, elpBalance);\n', '        } else {\n', '            // Transfer threshold equivalent ELP amount based on average price\n', '            token.transfer(msg.sender, elpBalance.mul(threshold).div(ethBalance));\n', '\n', '            if (ethBalance > threshold) {\n', '                // Excess amount (over threshold) of contributed ETH is\n', '                // transferred back to non-whitelisted contributor\n', '                msg.sender.transfer(ethBalance - threshold);\n', '            }\n', '        }\n', '        emit Withdrawal(msg.sender, ethBalance, elpBalance);\n', '    }\n', '\n', '    /**\n', '    * @dev This method can be used by the owner to extract mistakenly sent tokens\n', '    * or Ether sent to this contract.\n', '    * @param _token address The address of the token contract that you want to\n', "    * recover set to 0 in case you want to extract ether. It can't be ElpisToken.\n", '    */\n', '    function claimTokens(address _token) public onlyOwner {\n', '        require(_token != address(token));\n', '        if (_token == address(0)) {\n', '            owner.transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        ERC20 tokenReference = ERC20(_token);\n', '        uint balance = tokenReference.balanceOf(address(this));\n', '        token.transfer(owner, balance);\n', '        emit ClaimedTokens(_token, owner, balance);\n', '    }\n', '\n', '    /**\n', '    * @dev Checks how much of ELP tokens one can get for the specified USD amount.\n', '    * @param _usdAmount Specified USD amount.\n', '    * @return Returns how much ELP tokens you can currently get for the specified USD amount.\n', '    */\n', '    function _getTokenAmount(uint256 _usdAmount) internal view returns (uint256) {\n', '        uint256 phase = getPhase();\n', '        uint256 initialPriceNumerator = 110;\n', '        uint256 initialPriceDenominator = 1000;\n', '\n', '        uint256 scaleNumerator = 104 ** phase;\n', '        uint256 scaleDenominator = 100 ** phase;\n', '\n', '        return _usdAmount.mul(initialPriceNumerator).mul(scaleNumerator).div(initialPriceDenominator).div(scaleDenominator);\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the USD amount for specified wei amount\n', '    * @param _weiAmount Specified wei amount\n', '    * @return Returns USD amount based on wei amount\n', '    */\n', '    function _getUsdAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return _weiAmount.mul(rate);\n', '    }\n', '\n', '    /**\n', '    * @notice Gets the current phase of crowdsale.\n', '    * Tokens have different price during each phase.\n', '    * @return Returns the current crowdsale phase.\n', '    */\n', '    function getPhase() public view returns (uint256) {\n', '        return tokensSold / AMOUNT_PER_PHASE;\n', '    }\n', '\n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * Event for rate change logging\n', '    * @param owner who owns the contract\n', '    * @param oldValue old USD/ETH rate\n', '    * @param newValue new USD/ETH rate\n', '    */\n', '    event RateChanged(address indexed owner, uint256 oldValue, uint256 newValue);\n', '\n', '    /**\n', '    * Event for rate change logging\n', '    * @param owner who owns the contract\n', '    * @param oldValue old maximum wei contribution for non-whitelisted addresses value\n', '    * @param newValue new maximum wei contribution for non-whitelisted addresses value\n', '    */\n', '    event ThresholdChanged(address indexed owner, uint256 oldValue, uint256 newValue);\n', '\n', '    /**\n', '    * @param beneficiary who is the recipient of tokens from the contribution\n', '    * @param contributionAmount Amount of ETH contributor has contributed\n', '    * @param totalAmount Total amount of ETH contributor has contributed\n', '    */\n', '    event Contribution(address indexed beneficiary, uint256 contributionAmount, uint256 totalAmount);\n', '\n', '    /**\n', '    * @param beneficiary who is the recipient of tokens from the contribution\n', '    * @param contributionAmount Amount of ETH contributor has contributed\n', '    * @param totalAmount Total amount of ETH contributor has contributed\n', '    */\n', '    event NeedKyc(address indexed beneficiary, uint256 contributionAmount, uint256 totalAmount);\n', '\n', '    /**\n', '    * @param beneficiary who is the recipient of tokens from the contribution\n', '    * @param ethBalance ETH balance of the recipient of tokens from the contribution\n', '    * @param elpBalance ELP balance of the recipient of tokens from the contribution\n', '    */\n', '    event Withdrawal(address indexed beneficiary, uint256 ethBalance, uint256 elpBalance);\n', '\n', '    /**\n', '    * @param token claimed token\n', '    * @param owner who owns the contract\n', '    * @param amount amount of the claimed token\n', '    */\n', '    event ClaimedTokens(address indexed token, address indexed owner, uint256 amount);\n', '}']
