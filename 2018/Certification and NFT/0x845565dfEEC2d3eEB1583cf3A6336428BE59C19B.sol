['pragma solidity ^0.4.14;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'interface GlobexSci {\n', '  function totalSupply() constant returns (uint256 totalSupply);\n', '  function balanceOf(address _owner) constant returns (uint256 balance);\n', '  function transfer(address _to, uint256 _value) returns (bool success);\n', '  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n', '  function approve(address _spender, uint256 _value) returns (bool success);\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n', '}\n', '\n', '\n', '/**\n', ' * @title  \n', ' * @dev DatCrowdSale is a contract for managing a token crowdsale.\n', ' * GlobexSciCrowdSale have a start and end date, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a refundable valut \n', ' * as they arrive.\n', ' */\n', 'contract GlobexSciICO is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  GlobexSci public token = GlobexSci(0x88dBd3f9E6809FC24d27B9403371Af1cC089ba9e);\n', '\n', '  // start and end date where investments are allowed (both inclusive)\n', '  uint256 public startDate = 1524182400; //Wed, 20 Apr 2018 00:00:00 +0000\n', '  \n', '  // Minimum amount to participate\n', '  uint256 public minimumParticipationAmount = 100000000000000000 wei; //0.1 ether\n', '\n', '  // address where funds are collected\n', '  address wallet;\n', '\n', '  // how many token units a buyer gets per ether\n', '  uint256 rate = 500;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  //flag for final of crowdsale\n', '  bool public isFinalized = false;\n', '\n', '  //cap for the sale\n', '  uint256 public cap = 60000000000000000000000 wei; //60000 ether\n', ' \n', '    uint week1 = 1 * 7 * 1 days;\n', '    uint week2 = 2 * 7 * 1 days;\n', '    uint week3 = 3 * 7 * 1 days;\n', '    uint week4 = 4 * 7 * 1 days;\n', '    uint week5 = 5 * 7 * 1 days;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */ \n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  /**\n', '  * @notice Log an event for each funding contributed during the public phase\n', '  * @notice Events are not logged when the constructor is being executed during\n', '  *         deployment, so the preallocations will not be logged\n', '  */\n', '  event LogParticipation(address indexed sender, uint256 value, uint256 timestamp);\n', '\n', '\n', '  \n', '  function GlobexSciICO() {\n', '    wallet = msg.sender;\n', '  }\n', '\n', '    //When a user buys our token they will recieve:,\n', '    //    - Week 1 - they will recieve 25% bonus\n', '    //    - Week 2 - they will revieve 15% bonus\n', '    //    - Week 3 - They will recieve 10% bonus\n', '    //    - Week 4 - they will recieve no bonus\n', '    //    - Week 5 - they will recieve no bonus\n', '  function getBonus() constant returns (uint256 price) {\n', '        uint currentDate = now;\n', '\n', '        if (currentDate < startDate + week1) {\n', '            return 25;\n', '        }\n', '\n', '        if (currentDate > startDate + week1 && currentDate < startDate + week2) {\n', '            return 20;\n', '        }\n', '\n', '        if (currentDate > startDate + week2 && currentDate < startDate + week3) {\n', '            return 15;\n', '        }\n', '        if (currentDate > startDate + week3 && currentDate < startDate + week4) {\n', '            return 10;\n', '        }\n', '        if (currentDate > startDate + week4 && currentDate < startDate + week5) {\n', '            return 5;\n', '        }\n', '        return 0; \n', '    }\n', '  \n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '\n', '    //get ammount in wei\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '    uint bonus = getBonus();\n', '    tokens = tokens + tokens * bonus / 100;\n', '\n', '    //purchase tokens and transfer to beneficiary\n', '    token.transfer(beneficiary, tokens);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    //Token purchase event\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    //forward funds to wallet\n', '    forwardFunds();\n', '  }\n', '\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // should be called after crowdsale ends or to emergency stop the sale\n', '  function finalize() onlyOwner {\n', '    require(!isFinalized);\n', '    uint256 unsoldTokens = token.balanceOf(this);\n', '    token.transfer(wallet, unsoldTokens);\n', '    isFinalized = true;\n', '    Finalized();\n', '  }\n', '\n', '\n', '  // @return true if the transaction can buy tokens\n', '  // check for valid time period, min amount and within cap\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = startDate <= now;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    bool minAmount = msg.value >= minimumParticipationAmount;\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '\n', '    return withinPeriod && nonZeroPurchase && minAmount && !isFinalized && withinCap;\n', '  }\n', '\n', '    // @return true if the goal is reached\n', '  function capReached() public constant returns (bool) {\n', '    return weiRaised >= cap;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return isFinalized;\n', '  }\n', '\n', '}']