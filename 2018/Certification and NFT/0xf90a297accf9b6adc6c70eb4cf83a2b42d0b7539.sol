['pragma solidity ^0.4.17;\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '     * The address whcih deploys this contrcat is automatically assgined ownership.\n', '     * */\n', '    function Ownable() public {\n', '        owner = 0x840E90268aC7Fa15a2f9799de205ce0fF34be30b;\n', '    }\n', '\n', '    /**\n', '     * Functions with this modifier can only be executed by the owner of the contract. \n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    /**\n', '    * Transfers ownership to new Ethereum address. This function can only be called by the \n', '    * owner.\n', '    * @param _newOwner the address to be granted ownership.\n', '    **/\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', 'library SafeMath {\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract TokenTransferInterface {\n', '    function transfer(address _to, uint256 _value) public;\n', '}\n', '\n', '\n', 'contract AirDrop is Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    function airDrop(address _addressOfToken, address[] _addrs, uint256[] _values) public onlyOwner {\n', '\t    require(_addrs.length == _values.length && _addressOfToken != 0x0);\n', '\t    TokenTransferInterface token = TokenTransferInterface(_addressOfToken);\n', '        for (uint i = 0; i < _addrs.length; i++) {\n', '            if (_addrs[i] != 0x0 && _values[i] > 0) {\n', '                token.transfer(_addrs[i], _values[i] * (10 ** 18));\n', '            }\n', '        }\n', '    }\n', '}']