['pragma solidity ^0.4.23;\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', '\n', '\n', 'library SafeMath {\n', ' /**\n', ' * @dev Multiplies two numbers, throws on overflow.\n', ' */\n', ' function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '   if (a == 0) {\n', '     return 0;\n', '   }\n', '   uint256 c = a * b;\n', '   assert(c / a == b);\n', '   return c;\n', ' }\n', ' /**\n', ' * @dev Integer division of two numbers, truncating the quotient.\n', ' */\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '   // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '   uint256 c = a / b;\n', '   // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '   return c;\n', ' }\n', ' /**\n', ' * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', ' */\n', ' function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '   assert(b <= a);\n', '   return a - b;\n', ' }\n', ' /**\n', ' * @dev Adds two numbers, throws on overflow.\n', ' */\n', ' function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '   uint256 c = a + b;\n', '   assert(c >= a);\n', '   return c;\n', ' }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', ' contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', ' contract Pausable is Ownable {\n', '     event Pause();\n', '     event Unpause();\n', '     bool public paused = false;\n', '     /**\n', '      * @dev Modifier to make a function callable only when the contract is not paused.\n', '      */\n', '     modifier whenNotPaused() {\n', '         require(!paused);\n', '         _;\n', '     }\n', '     /**\n', '      * @dev Modifier to make a function callable only when the contract is paused.\n', '      */\n', '     modifier whenPaused() {\n', '         require(paused);\n', '         _;\n', '     }\n', '     /**\n', '      * @dev called by the owner to pause, triggers stopped state\n', '      */\n', '     function pause() onlyOwner whenNotPaused public {\n', '         paused = true;\n', '         emit Pause();\n', '     }\n', '     /**\n', '      * @dev called by the owner to unpause, returns to normal state\n', '      */\n', '     function unpause() onlyOwner whenPaused public {\n', '         paused = false;\n', '         emit Unpause();\n', '     }\n', ' }\n', 'contract Controlled is Pausable {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController {\n', '        require(msg.sender == controller);\n', '        _;\n', '    }\n', '    modifier onlyControllerorOwner {\n', '        require((msg.sender == controller) || (msg.sender == owner));\n', '        _;\n', '    }\n', '    address public controller;\n', '    constructor() public {\n', '        controller = msg.sender;\n', '    }\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyControllerorOwner {\n', '        controller = _newController;\n', '    }\n', '}\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) public payable returns(bool);\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public\n', '    returns(bool);\n', '}\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '    using SafeMath for uint256;\n', '    string public name; //The Token&#39;s name: e.g. DigixDAO Tokens\n', '    uint8 public decimals; //Number of decimals of the smallest unit\n', '    string public symbol; //An identifier: e.g. REP\n', '    string public version = &#39;V 1.0&#39;; //An arbitrary versioning scheme\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct Checkpoint {\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping(address => Checkpoint[]) balances;\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '    ////////////////\n', '    // Constructor\n', '    ////////////////\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    constructor(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName; // Set the name\n', '        decimals = _decimalUnits; // Set the decimals\n', '        symbol = _tokenSymbol; // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '    ///////////////////\n', '    // ERC20 Methods\n', '    ///////////////////\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns(bool success) {\n', '        require(transfersEnabled);\n', '        doTransfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success) {\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '            // The standard ERC 20 transferFrom functionality\n', '            require(allowed[_from][msg.sender] >= _amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        }\n', '        doTransfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount) internal {\n', '        if (_amount == 0) {\n', '            emit Transfer(_from, _to, _amount); // Follow the spec to louch the event when transfer 0\n', '            return;\n', '        }\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != 0) && (_to != address(this)));\n', '        // If the amount being transfered is more than the balance of the\n', '        //  account the transfer throws\n', '        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        require(previousBalanceFrom >= _amount);\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '        require(previousBalanceTo.add(_amount) >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(balances[_to], previousBalanceTo.add(_amount));\n', '        // An event to make the transfer easy to find on the blockchain\n', '        emit Transfer(_from, _to, _amount);\n', '    }\n', '    /// @param _owner The address that&#39;s balance is being requested\n', '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public constant returns(uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns(bool success) {\n', '        require(transfersEnabled);\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        //  Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n', '        }\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns(bool success) {\n', '        require(approve(_spender, _amount));\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '        return true;\n', '    }\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public constant returns(uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '    ////////////////\n', '    // Query balance and totalSupply in History\n', '    ////////////////\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public constant\n', '    returns(uint) {\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) ||\n', '            (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '            // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) ||\n', '            (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '            // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '    ////////////////\n', '    // Generate and destroy tokens\n', '    ////////////////\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount) public onlyControllerorOwner whenNotPaused returns(bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply.add(_amount) >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo.add(_amount) >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply.add(_amount));\n', '        updateValueAtNow(balances[_owner], previousBalanceTo.add(_amount));\n', '        emit Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount) onlyControllerorOwner public returns(bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_amount));\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom.sub(_amount));\n', '        emit Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '    ////////////////\n', '    // Enable tokens transfers\n', '    ////////////////\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) public onlyControllerorOwner {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '    ////////////////\n', '    // Internal helper functions to query and set a value in a snapshot array\n', '    ////////////////\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns(uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length.sub(1)].fromBlock)\n', '            return checkpoints[checkpoints.length.sub(1)].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length.sub(1);\n', '        while (max > min) {\n', '            uint mid = (max.add(min).add(1)).div(2);\n', '            if (checkpoints[mid].fromBlock <= _block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid.sub(1);\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        if ((checkpoints.length == 0) ||\n', '            (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\n', '            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n', '            newCheckPoint.fromBlock = uint128(block.number);\n', '            newCheckPoint.value = uint128(_value);\n', '        } else {\n', '            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length.sub(1)];\n', '            oldCheckPoint.value = uint128(_value);\n', '        }\n', '    }\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size: = extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns(uint) {\n', '        return a < b ? a : b;\n', '    }\n', '    /// @notice The fallback function: If the contract&#39;s controller has not been\n', '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function() public payable {\n', '        /*require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));*/\n', '        revert();\n', '    }\n', '    //////////\n', '    // Safety Methods\n', '    //////////\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) public onlyControllerorOwner {\n', '        if (_token == 0x0) {\n', '            controller.transfer(address(this).balance);\n', '            return;\n', '        }\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        emit ClaimedTokens(_token, controller, balance);\n', '    }\n', '    ////////////////\n', '    // Events\n', '    ////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '    );\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns(uint256);\n', '    function balanceOf(address who) public view returns(uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n', '}\n', '\n', 'contract EmaToken is MiniMeToken {\n', '    constructor(address tokenfactory, address parenttoken, uint parentsnapshot, string tokenname, uint8 dec, string tokensymbol, bool transfersenabled)\n', '    MiniMeToken(tokenfactory, parenttoken, parentsnapshot, tokenname, dec, tokensymbol, transfersenabled) public {}\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', ' \n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns(MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '        );\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', ' \n', 'contract Crowdsale is Pausable {\n', '    using SafeMath\n', '    for uint256;\n', '    // The token being sold\n', '    MiniMeToken public token;\n', '    // Address where funds are collected\n', '    address public wallet;\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate = 6120;\n', '    // Amount of tokens sold\n', '    uint256 public tokensSold;\n', '    uint256 public allCrowdSaleTokens = 255000000000000000000000000; //255M tokens available for crowdsale\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event buyx(address buyer, address contractAddr, uint256 amount);\n', '    constructor(address _wallet, MiniMeToken _token) public {\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '    function setCrowdsale(address _wallet, MiniMeToken _token) internal {\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '    /**\n', '     *  fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function() external whenNotPaused payable {\n', '        emit buyx(msg.sender, this, _getTokenAmount(msg.value));\n', '        buyTokens(msg.sender);\n', '    }\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', '     * @param _beneficiary Address performing the token purchase\n', '     */\n', '    function buyTokens(address _beneficiary) public whenNotPaused payable {\n', '        if ((msg.value >= 500000000000000000000) && (msg.value < 1000000000000000000000)) {\n', '            rate = 7140;\n', '        } else if (msg.value >= 1000000000000000000000) {\n', '            rate = 7650;\n', '        } else if (tokensSold <= 21420000000000000000000000) {\n', '            if(rate != 6120) {\n', '            rate = 6120; }\n', '        } else if ((tokensSold > 21420000000000000000000000) && (tokensSold <= 42304500000000000000000000)) {\n', '             if(rate != 5967) {\n', '            rate = 5967; }\n', '        } else if ((tokensSold > 42304500000000000000000000) && (tokensSold <= 73095750000000000000000000)) {\n', '             if(rate != 5865) {\n', '            rate = 5865; }\n', '        } else if ((tokensSold > 73095750000000000000000000) && (tokensSold <= 112365750000000000000000000)) {\n', '             if(rate != 5610) {\n', '            rate = 5610; }\n', '        } else if ((tokensSold > 112365750000000000000000000) && (tokensSold <= 159222000000000000000000000)) {\n', '             if(rate != 5355) {\n', '            rate = 5355; }\n', '        } else if (tokensSold > 159222000000000000000000000) {\n', '             if(rate != 5100) {\n', '            rate = 5100;}\n', '        }\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '        _updatePurchasingState(_beneficiary, weiAmount);\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, weiAmount);\n', '        tokensSold = allCrowdSaleTokens.sub(token.balanceOf(this));\n', '    }\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '    }\n', '    /**\n', '     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '    /**\n', '     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '    /**\n', '     * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal returns(uint256) {\n', '        if ((_weiAmount >= 500000000000000000000) && (_weiAmount < 1000000000000000000000)) {\n', '            rate = 7140;\n', '        } else if (_weiAmount >= 1000000000000000000000) {\n', '            rate = 7650;\n', '        } else if (tokensSold <= 21420000000000000000000000) {\n', '            if(rate != 6120) {\n', '            rate = 6120; }\n', '        } else if ((tokensSold > 21420000000000000000000000) && (tokensSold <= 42304500000000000000000000)) {\n', '             if(rate != 5967) {\n', '            rate = 5967;}\n', '        } else if ((tokensSold > 42304500000000000000000000) && (tokensSold <= 73095750000000000000000000)) {\n', '             if(rate != 5865) {\n', '            rate = 5865;}\n', '        } else if ((tokensSold > 73095750000000000000000000) && (tokensSold <= 112365750000000000000000000)) {\n', '             if(rate != 5610) {\n', '            rate = 5610;}\n', '        } else if ((tokensSold > 112365750000000000000000000) && (tokensSold <= 159222000000000000000000000)) {\n', '             if(rate != 5355) {\n', '            rate = 5355;}\n', '        } else if (tokensSold > 159222000000000000000000000) {\n', '             if(rate != 5100) {\n', '            rate = 5100;}\n', '        }\n', '        return _weiAmount.mul(rate);\n', '    }\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', 'contract EmaCrowdSale is Crowdsale {\n', '    using SafeMath\n', '    for uint256;\n', '    constructor(address wallet, MiniMeToken token) Crowdsale(wallet, token) public  {\n', '        setCrowdsale(wallet, token);\n', '    }\n', '    function tranferPresaleTokens(address investor, uint256 ammount) public onlyOwner {\n', '        tokensSold = tokensSold.add(ammount);\n', '        token.transferFrom(this, investor, ammount);\n', '    }\n', '    function setTokenTransferState(bool state) public onlyOwner {\n', '        token.changeController(this);\n', '        token.enableTransfers(state);\n', '    }\n', '    function claim(address claimToken) public onlyOwner {\n', '        token.changeController(this);\n', '        token.claimTokens(claimToken);\n', '    }\n', '    function() external payable whenNotPaused {\n', '        emit buyx(msg.sender, this, _getTokenAmount(msg.value));\n', '        buyTokens(msg.sender);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', '\n', '\n', 'library SafeMath {\n', ' /**\n', ' * @dev Multiplies two numbers, throws on overflow.\n', ' */\n', ' function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '   if (a == 0) {\n', '     return 0;\n', '   }\n', '   uint256 c = a * b;\n', '   assert(c / a == b);\n', '   return c;\n', ' }\n', ' /**\n', ' * @dev Integer division of two numbers, truncating the quotient.\n', ' */\n', ' function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '   // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '   uint256 c = a / b;\n', "   // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '   return c;\n', ' }\n', ' /**\n', ' * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', ' */\n', ' function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '   assert(b <= a);\n', '   return a - b;\n', ' }\n', ' /**\n', ' * @dev Adds two numbers, throws on overflow.\n', ' */\n', ' function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '   uint256 c = a + b;\n', '   assert(c >= a);\n', '   return c;\n', ' }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', ' contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', ' contract Pausable is Ownable {\n', '     event Pause();\n', '     event Unpause();\n', '     bool public paused = false;\n', '     /**\n', '      * @dev Modifier to make a function callable only when the contract is not paused.\n', '      */\n', '     modifier whenNotPaused() {\n', '         require(!paused);\n', '         _;\n', '     }\n', '     /**\n', '      * @dev Modifier to make a function callable only when the contract is paused.\n', '      */\n', '     modifier whenPaused() {\n', '         require(paused);\n', '         _;\n', '     }\n', '     /**\n', '      * @dev called by the owner to pause, triggers stopped state\n', '      */\n', '     function pause() onlyOwner whenNotPaused public {\n', '         paused = true;\n', '         emit Pause();\n', '     }\n', '     /**\n', '      * @dev called by the owner to unpause, returns to normal state\n', '      */\n', '     function unpause() onlyOwner whenPaused public {\n', '         paused = false;\n', '         emit Unpause();\n', '     }\n', ' }\n', 'contract Controlled is Pausable {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController {\n', '        require(msg.sender == controller);\n', '        _;\n', '    }\n', '    modifier onlyControllerorOwner {\n', '        require((msg.sender == controller) || (msg.sender == owner));\n', '        _;\n', '    }\n', '    address public controller;\n', '    constructor() public {\n', '        controller = msg.sender;\n', '    }\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyControllerorOwner {\n', '        controller = _newController;\n', '    }\n', '}\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) public payable returns(bool);\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public\n', '    returns(bool);\n', '}\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '    using SafeMath for uint256;\n', "    string public name; //The Token's name: e.g. DigixDAO Tokens\n", '    uint8 public decimals; //Number of decimals of the smallest unit\n', '    string public symbol; //An identifier: e.g. REP\n', "    string public version = 'V 1.0'; //An arbitrary versioning scheme\n", '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct Checkpoint {\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping(address => Checkpoint[]) balances;\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '    ////////////////\n', '    // Constructor\n', '    ////////////////\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    constructor(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName; // Set the name\n', '        decimals = _decimalUnits; // Set the decimals\n', '        symbol = _tokenSymbol; // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '    ///////////////////\n', '    // ERC20 Methods\n', '    ///////////////////\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns(bool success) {\n', '        require(transfersEnabled);\n', '        doTransfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount) public returns(bool success) {\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '            // The standard ERC 20 transferFrom functionality\n', '            require(allowed[_from][msg.sender] >= _amount);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n', '        }\n', '        doTransfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount) internal {\n', '        if (_amount == 0) {\n', '            emit Transfer(_from, _to, _amount); // Follow the spec to louch the event when transfer 0\n', '            return;\n', '        }\n', '        // Do not allow transfer to 0x0 or the token contract itself\n', '        require((_to != 0) && (_to != address(this)));\n', '        // If the amount being transfered is more than the balance of the\n', '        //  account the transfer throws\n', '        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);\n', '        require(previousBalanceFrom >= _amount);\n', '        //  sending the tokens\n', '        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '        // Then update the balance array with the new value for the address\n', '        //  receiving the tokens\n', '        uint256 previousBalanceTo = balanceOfAt(_to, block.number);\n', '        require(previousBalanceTo.add(_amount) >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(balances[_to], previousBalanceTo.add(_amount));\n', '        // An event to make the transfer easy to find on the blockchain\n', '        emit Transfer(_from, _to, _amount);\n', '    }\n', "    /// @param _owner The address that's balance is being requested\n", '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public constant returns(uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns(bool success) {\n', '        require(transfersEnabled);\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '        //  Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n', '        }\n', '        allowed[msg.sender][_spender] = _amount;\n', '        emit Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender) public constant returns(uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData) public returns(bool success) {\n', '        require(approve(_spender, _amount));\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '        return true;\n', '    }\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public constant returns(uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '    ////////////////\n', '    // Query balance and totalSupply in History\n', '    ////////////////\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public constant\n', '    returns(uint) {\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0) ||\n', '            (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '            // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0) ||\n', '            (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '            // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '    ////////////////\n', '    // Generate and destroy tokens\n', '    ////////////////\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount) public onlyControllerorOwner whenNotPaused returns(bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply.add(_amount) >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo.add(_amount) >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply.add(_amount));\n', '        updateValueAtNow(balances[_owner], previousBalanceTo.add(_amount));\n', '        emit Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount) onlyControllerorOwner public returns(bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply.sub(_amount));\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom.sub(_amount));\n', '        emit Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '    ////////////////\n', '    // Enable tokens transfers\n', '    ////////////////\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) public onlyControllerorOwner {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '    ////////////////\n', '    // Internal helper functions to query and set a value in a snapshot array\n', '    ////////////////\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns(uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length.sub(1)].fromBlock)\n', '            return checkpoints[checkpoints.length.sub(1)].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length.sub(1);\n', '        while (max > min) {\n', '            uint mid = (max.add(min).add(1)).div(2);\n', '            if (checkpoints[mid].fromBlock <= _block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid.sub(1);\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\n', '        if ((checkpoints.length == 0) ||\n', '            (checkpoints[checkpoints.length.sub(1)].fromBlock < block.number)) {\n', '            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n', '            newCheckPoint.fromBlock = uint128(block.number);\n', '            newCheckPoint.value = uint128(_value);\n', '        } else {\n', '            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length.sub(1)];\n', '            oldCheckPoint.value = uint128(_value);\n', '        }\n', '    }\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size: = extcodesize(_addr)\n', '        }\n', '        return size > 0;\n', '    }\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns(uint) {\n', '        return a < b ? a : b;\n', '    }\n', "    /// @notice The fallback function: If the contract's controller has not been\n", '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function() public payable {\n', '        /*require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));*/\n', '        revert();\n', '    }\n', '    //////////\n', '    // Safety Methods\n', '    //////////\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) public onlyControllerorOwner {\n', '        if (_token == 0x0) {\n', '            controller.transfer(address(this).balance);\n', '            return;\n', '        }\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        emit ClaimedTokens(_token, controller, balance);\n', '    }\n', '    ////////////////\n', '    // Events\n', '    ////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '    );\n', '}\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns(uint256);\n', '    function balanceOf(address who) public view returns(uint256);\n', '    function transfer(address to, uint256 value) public returns(bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n', '}\n', '\n', 'contract EmaToken is MiniMeToken {\n', '    constructor(address tokenfactory, address parenttoken, uint parentsnapshot, string tokenname, uint8 dec, string tokensymbol, bool transfersenabled)\n', '    MiniMeToken(tokenfactory, parenttoken, parentsnapshot, tokenname, dec, tokensymbol, transfersenabled) public {}\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns(uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns(bool);\n', '    function approve(address spender, uint256 value) public returns(bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', ' \n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns(MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '        );\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', ' \n', 'contract Crowdsale is Pausable {\n', '    using SafeMath\n', '    for uint256;\n', '    // The token being sold\n', '    MiniMeToken public token;\n', '    // Address where funds are collected\n', '    address public wallet;\n', '    // How many token units a buyer gets per wei\n', '    uint256 public rate = 6120;\n', '    // Amount of tokens sold\n', '    uint256 public tokensSold;\n', '    uint256 public allCrowdSaleTokens = 255000000000000000000000000; //255M tokens available for crowdsale\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event buyx(address buyer, address contractAddr, uint256 amount);\n', '    constructor(address _wallet, MiniMeToken _token) public {\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '    function setCrowdsale(address _wallet, MiniMeToken _token) internal {\n', '        require(_wallet != address(0));\n', '        require(_token != address(0));\n', '        wallet = _wallet;\n', '        token = _token;\n', '    }\n', '    // -----------------------------------------\n', '    // Crowdsale external interface\n', '    // -----------------------------------------\n', '    /**\n', '     *  fallback function ***DO NOT OVERRIDE***\n', '     */\n', '    function() external whenNotPaused payable {\n', '        emit buyx(msg.sender, this, _getTokenAmount(msg.value));\n', '        buyTokens(msg.sender);\n', '    }\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', '     * @param _beneficiary Address performing the token purchase\n', '     */\n', '    function buyTokens(address _beneficiary) public whenNotPaused payable {\n', '        if ((msg.value >= 500000000000000000000) && (msg.value < 1000000000000000000000)) {\n', '            rate = 7140;\n', '        } else if (msg.value >= 1000000000000000000000) {\n', '            rate = 7650;\n', '        } else if (tokensSold <= 21420000000000000000000000) {\n', '            if(rate != 6120) {\n', '            rate = 6120; }\n', '        } else if ((tokensSold > 21420000000000000000000000) && (tokensSold <= 42304500000000000000000000)) {\n', '             if(rate != 5967) {\n', '            rate = 5967; }\n', '        } else if ((tokensSold > 42304500000000000000000000) && (tokensSold <= 73095750000000000000000000)) {\n', '             if(rate != 5865) {\n', '            rate = 5865; }\n', '        } else if ((tokensSold > 73095750000000000000000000) && (tokensSold <= 112365750000000000000000000)) {\n', '             if(rate != 5610) {\n', '            rate = 5610; }\n', '        } else if ((tokensSold > 112365750000000000000000000) && (tokensSold <= 159222000000000000000000000)) {\n', '             if(rate != 5355) {\n', '            rate = 5355; }\n', '        } else if (tokensSold > 159222000000000000000000000) {\n', '             if(rate != 5100) {\n', '            rate = 5100;}\n', '        }\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        _processPurchase(_beneficiary, tokens);\n', '        emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '        _updatePurchasingState(_beneficiary, weiAmount);\n', '        _forwardFunds();\n', '        _postValidatePurchase(_beneficiary, weiAmount);\n', '        tokensSold = allCrowdSaleTokens.sub(token.balanceOf(this));\n', '    }\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount != 0);\n', '    }\n', '    /**\n', '     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '     * @param _beneficiary Address performing the token purchase\n', '     * @param _tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '    /**\n', '     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '    /**\n', '     * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '        // optional override\n', '    }\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal returns(uint256) {\n', '        if ((_weiAmount >= 500000000000000000000) && (_weiAmount < 1000000000000000000000)) {\n', '            rate = 7140;\n', '        } else if (_weiAmount >= 1000000000000000000000) {\n', '            rate = 7650;\n', '        } else if (tokensSold <= 21420000000000000000000000) {\n', '            if(rate != 6120) {\n', '            rate = 6120; }\n', '        } else if ((tokensSold > 21420000000000000000000000) && (tokensSold <= 42304500000000000000000000)) {\n', '             if(rate != 5967) {\n', '            rate = 5967;}\n', '        } else if ((tokensSold > 42304500000000000000000000) && (tokensSold <= 73095750000000000000000000)) {\n', '             if(rate != 5865) {\n', '            rate = 5865;}\n', '        } else if ((tokensSold > 73095750000000000000000000) && (tokensSold <= 112365750000000000000000000)) {\n', '             if(rate != 5610) {\n', '            rate = 5610;}\n', '        } else if ((tokensSold > 112365750000000000000000000) && (tokensSold <= 159222000000000000000000000)) {\n', '             if(rate != 5355) {\n', '            rate = 5355;}\n', '        } else if (tokensSold > 159222000000000000000000000) {\n', '             if(rate != 5100) {\n', '            rate = 5100;}\n', '        }\n', '        return _weiAmount.mul(rate);\n', '    }\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        wallet.transfer(msg.value);\n', '    }\n', '}\n', 'contract EmaCrowdSale is Crowdsale {\n', '    using SafeMath\n', '    for uint256;\n', '    constructor(address wallet, MiniMeToken token) Crowdsale(wallet, token) public  {\n', '        setCrowdsale(wallet, token);\n', '    }\n', '    function tranferPresaleTokens(address investor, uint256 ammount) public onlyOwner {\n', '        tokensSold = tokensSold.add(ammount);\n', '        token.transferFrom(this, investor, ammount);\n', '    }\n', '    function setTokenTransferState(bool state) public onlyOwner {\n', '        token.changeController(this);\n', '        token.enableTransfers(state);\n', '    }\n', '    function claim(address claimToken) public onlyOwner {\n', '        token.changeController(this);\n', '        token.claimTokens(claimToken);\n', '    }\n', '    function() external payable whenNotPaused {\n', '        emit buyx(msg.sender, this, _getTokenAmount(msg.value));\n', '        buyTokens(msg.sender);\n', '    }\n', '}']
