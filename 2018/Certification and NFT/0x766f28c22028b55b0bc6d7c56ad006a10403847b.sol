['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BuckySalary is Ownable {\n', '\n', '    address[] public staff;\n', '    mapping(address => uint) public eth;\n', '\n', '    \n', '    function BuckySalary() public {\n', '\n', '    }\n', '\n', '\n', '    function getTotal() internal view returns (uint) {\n', '        uint total = 0;\n', '        for (uint i = 0; i < staff.length; i++) {\n', '            total += eth[staff[i]];    \n', '        }\n', '\n', '        return total;\n', '    }\n', '\n', '    event Transfer(address a, uint v);\n', '\n', '    function () public payable {\n', '        uint total = getTotal();\n', '        require(msg.value >= total);\n', '\n', '        for (uint i = 0; i < staff.length; i++) {\n', '            \n', '            address s = staff[i];\n', '            uint value = eth[s];\n', '            if (value > 0) {\n', '                s.transfer(value);\n', '                Transfer(s, value);\n', '            }\n', '        }\n', '\n', '        if (msg.value > total) {\n', '            msg.sender.transfer(msg.value - total);\n', '        }\n', '    }\n', '\n', '\n', '    function setETH(address addr, uint value) public onlyOwner {\n', '        if (eth[addr] == 0) {\n', '            staff.push(addr);\n', '        }\n', '\n', '        eth[addr] = value;\n', '    }\n', '\n', '    function setMultiETH(address[] addr, uint[] value) public onlyOwner {\n', '        require(addr.length == value.length);\n', '        for (uint i = 0; i < addr.length; i++) {\n', '            setETH(addr[i], value[i]);\n', '        }\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BuckySalary is Ownable {\n', '\n', '    address[] public staff;\n', '    mapping(address => uint) public eth;\n', '\n', '    \n', '    function BuckySalary() public {\n', '\n', '    }\n', '\n', '\n', '    function getTotal() internal view returns (uint) {\n', '        uint total = 0;\n', '        for (uint i = 0; i < staff.length; i++) {\n', '            total += eth[staff[i]];    \n', '        }\n', '\n', '        return total;\n', '    }\n', '\n', '    event Transfer(address a, uint v);\n', '\n', '    function () public payable {\n', '        uint total = getTotal();\n', '        require(msg.value >= total);\n', '\n', '        for (uint i = 0; i < staff.length; i++) {\n', '            \n', '            address s = staff[i];\n', '            uint value = eth[s];\n', '            if (value > 0) {\n', '                s.transfer(value);\n', '                Transfer(s, value);\n', '            }\n', '        }\n', '\n', '        if (msg.value > total) {\n', '            msg.sender.transfer(msg.value - total);\n', '        }\n', '    }\n', '\n', '\n', '    function setETH(address addr, uint value) public onlyOwner {\n', '        if (eth[addr] == 0) {\n', '            staff.push(addr);\n', '        }\n', '\n', '        eth[addr] = value;\n', '    }\n', '\n', '    function setMultiETH(address[] addr, uint[] value) public onlyOwner {\n', '        require(addr.length == value.length);\n', '        for (uint i = 0; i < addr.length; i++) {\n', '            setETH(addr[i], value[i]);\n', '        }\n', '    }\n', '\n', '}']
