['pragma solidity 0.4.25;\n', '\n', 'contract TokenConfig {\n', '  string public constant NAME = "MANGO";\n', '  string public constant SYMBOL = "MAO";\n', '  uint8 public constant DECIMALS = 5;\n', '  uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\n', '  uint public constant TOTALSUPPLY = 10000000000 * DECIMALSFACTOR;\n', '}\n', '\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function balanceOf(address who) external view returns (uint256);\n', '\n', '  function allowance(address owner, address spender)\n', '    external view returns (uint256);\n', '\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '\n', '  function approve(address spender, uint256 value)\n', '    external returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    external returns (bool);\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 value\n', '  );\n', '\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "can\'t mul");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0, "can\'t sub with zero.");\n', '\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "can\'t sub");\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "add overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0, "can\'t mod with zero");\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'library SafeERC20 {\n', '  using SafeMath for uint256;\n', '\n', '  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value), "safeTransfer");\n', '  }\n', '\n', '  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '    require(token.transferFrom(from, to, value), "safeTransferFrom");\n', '  }\n', '\n', '  function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '    // safeApprove should only be called when setting an initial allowance,\n', '    // or when resetting it to zero. To increase and decrease it, use\n', "    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '    require((value == 0) || (token.allowance(msg.sender, spender) == 0), "safeApprove");\n', '    require(token.approve(spender, value), "safeApprove");\n', '  }\n', '\n', '  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '    require(token.approve(spender, newAllowance), "safeIncreaseAllowance");\n', '  }\n', '\n', '  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '    require(token.approve(spender, newAllowance), "safeDecreaseAllowance");\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '  /// @dev counter to allow mutex lock with only one SSTORE operation\n', '  uint256 private _guardCounter;\n', '\n', '  constructor () internal {\n', '    // The counter starts at one to prevent changing it from zero to a non-zero\n', '    // value, which is a more expensive operation.\n', '    _guardCounter = 1;\n', '  }\n', '\n', '  /**\n', '    * @dev Prevents a contract from calling itself, directly or indirectly.\n', '    * Calling a `nonReentrant` function from another `nonReentrant`\n', '    * function is not supported. It is possible to prevent this from happening\n', '    * by making the `nonReentrant` function external, and make it call a\n', '    * `private` function that does the actual work.\n', '    */\n', '  modifier nonReentrant() {\n', '    _guardCounter += 1;\n', '    uint256 localCounter = _guardCounter;\n', '    _;\n', '    require(localCounter == _guardCounter, "nonReentrant.");\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner, "only for owner.");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0), "address is zero.");\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused, "paused.");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused, "Not paused.");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() public onlyOwner whenNotPaused {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() public onlyOwner whenPaused {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Whitelist\n', ' */\n', 'contract Whitelist is Ownable {\n', '  event EnableWhitelist();\n', '  event DisableWhitelist();\n', '  event AddWhiteListed(address addr);\n', '  event RemoveWhiteListed(address addr);\n', '\n', '  bool private _whitelistEnable = false;\n', '\n', '  mapping (address => bool) private _whitelist;\n', '\n', '   /**\n', '   * @dev add addresses to the whitelist\n', '   * @param addrs addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addWhiteListAddr(address[] addrs)\n', '    public\n', '    onlyOwner\n', '  {\n', '    uint256 len = addrs.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      _addAddressToWhitelist(addrs[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param addr address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeWhiteListAddr(address addr)\n', '    public\n', '    onlyOwner\n', '  {\n', '    require(addr != address(0), "address is zero");\n', '    _whitelist[addr] = false;\n', '    emit RemoveWhiteListed(addr);\n', '  }\n', '\n', '  function whitelistEnabled() public view returns(bool) {\n', '    return _whitelistEnable;\n', '  }\n', '\n', '  function enableWhitelist() public onlyOwner {\n', '    _whitelistEnable = true;\n', '    emit EnableWhitelist();\n', '  }\n', '\n', '  function disableWhitelist() public onlyOwner {\n', '    _whitelistEnable = true;\n', '    emit DisableWhitelist();\n', '  }\n', '\n', '  modifier onlyAuthorised(address beneficiary) {\n', '    require(_isWhiteListAddr(beneficiary),"Not authorised");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param addr address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function _addAddressToWhitelist(address addr)\n', '    internal\n', '    onlyOwner\n', '  {\n', '    require(addr != address(0), "address is zero");\n', '    _whitelist[addr] = true;\n', '    emit AddWhiteListed(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function _isWhiteListAddr(address addr)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    require(addr != address(0), "address is zero");\n', '\n', '    if (whitelistEnabled()) {\n', '      return _whitelist[addr];\n', '    }\n', "    // if white list disabled, this function always returns 'true'.\n", '    return true;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overridden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale is TokenConfig, Pausable, ReentrancyGuard, Whitelist {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  // The token being sold\n', '  IERC20 private _token;\n', '\n', '  // Address where funds are collected\n', '  address private _wallet;\n', '\n', '  // Address where funds are collected\n', '  address private _tokenholder;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 private _rate;\n', '\n', '  // Amount of contribution wei raised\n', '  uint256 private _weiRaised;\n', '\n', '  // Amount of token sold\n', '  uint256 private _tokenSoldAmount;\n', '\n', '  // Minimum contribution amount of fund\n', '  uint256 private _minWeiAmount;\n', '\n', '  // balances of user should be sent\n', '  mapping (address => uint256) private _tokenBalances;\n', '\n', '  // balances of user fund\n', '  mapping (address => uint256) private _weiBalances;\n', '\n', '  // ICO period timestamp\n', '  uint256 private _openingTime;\n', '  uint256 private _closingTime;\n', '\n', '  // Amount of token hardcap\n', '  uint256 private _hardcap;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokensPurchased(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '  event TokensDelivered(address indexed beneficiary, uint256 amount);\n', '  event RateChanged(uint256 rate);\n', '  event MinWeiChanged(uint256 minWei);\n', '  event PeriodChanged(uint256 open, uint256 close);\n', '\n', '  constructor(\n', '    uint256 rate,\n', '    uint256 minWeiAmount,\n', '    address wallet,\n', '    address tokenholder,\n', '    IERC20 token,\n', '    uint256 hardcap,\n', '    uint256 openingTime,\n', '    uint256 closingTime\n', '  ) public {\n', '    require(rate > 0, "Rate is lower than zero.");\n', '    require(wallet != address(0), "Wallet address is zero");\n', '    require(tokenholder != address(0), "Tokenholder address is zero");\n', '    require(token != address(0), "Token address is zero");\n', '\n', '    _minWeiAmount = minWeiAmount;\n', '    _rate = rate;\n', '    _wallet = wallet;\n', '    _tokenholder = tokenholder;\n', '    _token = token;\n', '    _hardcap = hardcap;\n', '    _openingTime = openingTime;\n', '    _closingTime = closingTime;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   * Note that other contracts will transfer fund with a base gas stipend\n', '   * of 2300, which is not enough to call buyTokens. Consider calling\n', '   * buyTokens directly when purchasing tokens from a contract.\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @return the token being sold.\n', '   */\n', '  function token() public view returns(IERC20) {\n', '    return _token;\n', '  }\n', '\n', '  /**\n', '   * @return token hardcap.\n', '   */\n', '  function hardcap() public view returns(uint256) {\n', '    return _hardcap;\n', '  }\n', '\n', '  /**\n', '   * @return the address where funds are collected.\n', '   */\n', '  function wallet() public view returns(address) {\n', '    return _wallet;\n', '  }\n', '\n', '  /**\n', '   * @return the number of token units a buyer gets per wei.\n', '   */\n', '  function rate() public view returns(uint256) {\n', '    return _rate;\n', '  }\n', '\n', '  /**\n', '   * @return the amount of wei raised.\n', '   */\n', '  function weiRaised() public view returns (uint256) {\n', '    return _weiRaised;\n', '  }\n', '\n', '  /**\n', '   * @return ICO opening time.\n', '   */\n', '  function openingTime() public view returns (uint256) {\n', '    return _openingTime;\n', '  }\n', '\n', '  /**\n', '   * @return ICO closing time.\n', '   */\n', '  function closingTime() public view returns (uint256) {\n', '    return _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @return the amount of token raised.\n', '   */\n', '  function tokenSoldAmount() public view returns (uint256) {\n', '    return _tokenSoldAmount;\n', '  }\n', '\n', '  /**\n', '   * @return the number of minimum amount buyer can fund.\n', '   */\n', '  function minWeiAmount() public view returns(uint256) {\n', '    return _minWeiAmount;\n', '  }\n', '\n', '  /**\n', '   * @return is ICO period\n', '   */\n', '  function isOpen() public view returns (bool) {\n', '     // solium-disable-next-line security/no-block-members\n', '    return now >= _openingTime && now <= _closingTime;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the token balance of the specified address for deliver\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function tokenBalanceOf(address owner) public view returns (uint256) {\n', '    return _tokenBalances[owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the ETH balance of the specified address.\n', '  * @param owner The address to query the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function weiBalanceOf(address owner) public view returns (uint256) {\n', '    return _weiBalances[owner];\n', '  }\n', '\n', '  function setRate(uint256 value) public onlyOwner {\n', '    _rate = value;\n', '    emit RateChanged(value);\n', '  }\n', '\n', '  function setMinWeiAmount(uint256 value) public onlyOwner {\n', '    _minWeiAmount = value;\n', '    emit MinWeiChanged(value);\n', '  }\n', '\n', '  function setPeriodTimestamp(uint256 open, uint256 close) public onlyOwner {\n', '    _openingTime = open;\n', '    _closingTime = close;\n', '    emit PeriodChanged(open, close);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', "   * This function has a non-reentrancy guard, so it shouldn't be called by\n", '   * another `nonReentrant` function.\n', '   * @param beneficiary Recipient of the token purchase\n', '   */\n', '  function buyTokens(address beneficiary)\n', '    public\n', '    nonReentrant\n', '    whenNotPaused\n', '    payable\n', '  {\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(beneficiary, weiAmount);\n', '\n', '    // Calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    require(_hardcap > _tokenSoldAmount.add(tokens), "Over hardcap");\n', '\n', '    // Update state\n', '    _weiRaised = _weiRaised.add(weiAmount);\n', '    _tokenSoldAmount = _tokenSoldAmount.add(tokens);\n', '\n', '    _weiBalances[beneficiary] = _weiBalances[beneficiary].add(weiAmount);\n', '    _tokenBalances[beneficiary] = _tokenBalances[beneficiary].add(tokens);\n', '\n', '    emit TokensPurchased(\n', '      msg.sender,\n', '      beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _forwardFunds();\n', '  }\n', '\n', '  /**\n', '   * @dev method that deliver token to user\n', '   */\n', '  function deliverTokens(address user) public onlyOwner{\n', '    uint256 tokenAmount = _tokenBalances[user];\n', '    _deliverTokens(user, tokenAmount);\n', '    _tokenBalances[user] = 0;\n', '    emit TokensDelivered(user, tokenAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address beneficiary,\n', '    uint256 weiAmount\n', '  )\n', '    internal\n', '    view\n', '    onlyAuthorised(beneficiary)\n', '  {\n', '    require(weiAmount != 0, "Zero ETH");\n', '    require(weiAmount >= _minWeiAmount, "Must be equal or higher than minimum");\n', '    require(beneficiary != address(0), "Beneficiary address is zero");\n', '    require(isOpen(), "Sales is close");\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param beneficiary Address performing the token purchase\n', '   * @param tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address beneficiary,\n', '    uint256 tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _token.safeTransferFrom(_tokenholder, beneficiary, tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 weiAmount) internal view returns (uint256)\n', '  {\n', '    uint ethDecimals = 18;\n', '    require(DECIMALS <= ethDecimals, "");\n', '\n', '    uint256 covertedTokens = weiAmount;\n', '    if (DECIMALS != ethDecimals) {\n', '      covertedTokens = weiAmount.div((10 ** uint256(ethDecimals - DECIMALS)));\n', '    }\n', '    return covertedTokens.mul(_rate);\n', '  }\n', '\n', '  /**\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '  function _forwardFunds() internal {\n', '    _wallet.transfer(msg.value);\n', '  }\n', '}']