['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract SparksterToken is StandardToken, Ownable{\n', '\tusing SafeMath for uint256;\n', '\tstruct Member {\n', '\t\tmapping(uint256 => uint256) weiBalance; // How much wei has this member contributed for this group?\n', '\t}\n', '\n', '\tstruct Group {\n', '\t\tbool distributed; // Whether or not tokens in this group have been distributed.\n', '\t\tbool distributing; // This flag is set when we first enter the distribute function and is there to prevent race conditions, since distribution might take a long time.\n', '\t\tbool unlocked; // Whether or not tokens in this group have been unlocked.\n', '\t\tmapping(address => bool) exists; // If exists[address] is true, this address has made a purchase on this group before.\n', '\t\tstring name;\n', '\t\tuint256 ratio; // 1 eth:ratio tokens. This amount represents the decimal amount. ratio*10**decimal = ratio sparks.\n', '\t\tuint256 startTime; // Epoch of crowdsale start time.\n', '\t\tuint256 phase1endTime; // Epoch of phase1 end time.\n', '\t\tuint256 phase2endTime; // Epoch of phase2 end time.\n', '\t\tuint256 deadline; // No contributions allowed after this epoch.\n', '\t\tuint256 max2; // cap of phase2\n', '\t\tuint256 max3; // Total ether this group can collect in phase 3.\n', '\t\tuint256 weiTotal; // How much ether has this group collected?\n', '\t\tuint256 cap; // The hard ether cap.\n', '\t\tuint256 nextDistributionIndex; // The next index to start distributing at.\n', '\t\taddress[] addresses; // List of addresses that have made a purchase on this group.\n', '\t}\n', '\n', '\taddress oracleAddress;\n', '\tbool public transferLock = true; // A Global transfer lock. Set to lock down all tokens from all groups.\n', '\tbool public allowedToBuyBack = false;\n', '\tbool public allowedToPurchase = false;\n', '\tstring public name;\t\t\t\t\t\t\t\t\t // name for display\n', '\tstring public symbol;\t\t\t\t\t\t\t\t //An identifier\n', '\tuint8 public decimals;\t\t\t\t\t\t\t//How many decimals to show.\n', '\tuint256 public penalty;\n', '\tuint256 public maxGasPrice; // The maximum allowed gas for the purchase function.\n', '\tuint256 internal nextGroupNumber;\n', '\tuint256 public sellPrice; // sellPrice wei:1 spark token; we won&#39;t allow to sell back parts of a token.\n', '\tmapping(address => Member) internal members;\n', '\tmapping(uint256 => Group) internal groups;\n', '\tuint256 public openGroupNumber;\n', '\tevent WantsToPurchase(address walletAddress, uint256 weiAmount, uint256 groupNumber, bool inPhase1);\n', '\tevent PurchasedCallbackOnAccept(uint256 groupNumber, address[] addresses);\n', '\tevent WantsToDistribute(uint256 groupNumber);\n', '\tevent NearingHardCap(uint256 groupNumber, uint256 remainder);\n', '\tevent ReachedHardCap(uint256 groupNumber);\n', '\tevent DistributeDone(uint256 groupNumber);\n', '\tevent DistributedBatch(uint256 groupNumber, uint256 howMany);\n', '\tevent AirdroppedBatch(address[] addresses);\n', '\tevent RefundedBatch(address[] addresses);\n', '\tevent AddToGroup(address walletAddress, uint256 groupNumber);\n', '\tevent ChangedTransferLock(bool transferLock);\n', '\tevent ChangedAllowedToPurchase(bool allowedToPurchase);\n', '\tevent ChangedAllowedToBuyBack(bool allowedToBuyBack);\n', '\tevent SetSellPrice(uint256 sellPrice);\n', '\t\n', '\tmodifier onlyOwnerOrOracle() {\n', '\t\trequire(msg.sender == owner || msg.sender == oracleAddress);\n', '\t\t_;\n', '\t}\n', '\t\n', '\t// Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\n', '\tmodifier onlyPayloadSize(uint size) {\t \n', '\t\trequire(msg.data.length == size + 4);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier canTransfer() {\n', '\t\tif (msg.sender != owner) {\n', '\t\t\trequire(!transferLock);\n', '\t\t}\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier canPurchase() {\n', '\t\trequire(allowedToPurchase);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier canSell() {\n', '\t\trequire(allowedToBuyBack);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction() public payable {\n', '\t\tpurchase();\n', '\t}\n', '\n', '\tconstructor() public {\n', '\t\tname = "Sparkster";\t\t\t\t\t\t\t\t\t// Set the name for display purposes\n', '\t\tdecimals = 18;\t\t\t\t\t // Amount of decimals for display purposes\n', '\t\tsymbol = "SPRK";\t\t\t\t\t\t\t// Set the symbol for display purposes\n', '\t\tsetMaximumGasPrice(40);\n', '\t\tmintTokens(435000000);\n', '\t}\n', '\t\n', '\tfunction setOracleAddress(address newAddress) public onlyOwner returns(bool success) {\n', '\t\toracleAddress = newAddress;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction removeOracleAddress() public onlyOwner {\n', '\t\toracleAddress = address(0);\n', '\t}\n', '\n', '\tfunction setMaximumGasPrice(uint256 gweiPrice) public onlyOwner returns(bool success) {\n', '\t\tmaxGasPrice = gweiPrice.mul(10**9); // Convert the gwei value to wei.\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction mintTokens(uint256 amount) public onlyOwner {\n', '\t\t// Here, we&#39;ll consider amount to be the full token amount, so we have to get its decimal value.\n', '\t\tuint256 decimalAmount = amount.mul(uint(10)**decimals);\n', '\t\ttotalSupply_ = totalSupply_.add(decimalAmount);\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(decimalAmount);\n', '\t\temit Transfer(address(0), msg.sender, decimalAmount); // Per erc20 standards-compliance.\n', '\t}\n', '\n', '\tfunction purchase() public canPurchase payable returns(bool success) {\n', '\t\trequire(msg.sender != address(0)); // Don&#39;t allow the 0 address.\n', '\t\tMember storage memberRecord = members[msg.sender];\n', '\t\tGroup storage openGroup = groups[openGroupNumber];\n', '\t\trequire(openGroup.ratio > 0); // Group must be initialized.\n', '\t\tuint256 currentTimestamp = block.timestamp;\n', '\t\trequire(currentTimestamp >= openGroup.startTime && currentTimestamp <= openGroup.deadline);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //the timestamp must be greater than or equal to the start time and less than or equal to the deadline time\n', '\t\trequire(!openGroup.distributing && !openGroup.distributed); // Don&#39;t allow to purchase if we&#39;re in the middle of distributing this group; Don&#39;t let someone buy tokens on the current group if that group is already distributed.\n', '\t\trequire(tx.gasprice <= maxGasPrice); // Restrict maximum gas this transaction is allowed to consume.\n', '\t\tuint256 weiAmount = msg.value;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The amount purchased by the current member\n', '\t\trequire(weiAmount >= 0.1 ether);\n', '\t\tuint256 weiTotal = openGroup.weiTotal.add(weiAmount); // Calculate total contribution of all members in this group.\n', '\t\trequire(weiTotal <= openGroup.cap);\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Check to see if accepting these funds will put us above the hard ether cap.\n', '\t\tuint256 userWeiTotal = memberRecord.weiBalance[openGroupNumber].add(weiAmount);\t// Calculate the total amount purchased by the current member\n', '\t\tif (!openGroup.exists[msg.sender]) { // Has this person not purchased on this group before?\n', '\t\t\topenGroup.addresses.push(msg.sender);\n', '\t\t\topenGroup.exists[msg.sender] = true;\n', '\t\t}\n', '\t\tif(currentTimestamp <= openGroup.phase1endTime){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // whether the current timestamp is in the first phase\n', '\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, true);\n', '\t\t\treturn true;\n', '\t\t} else if (currentTimestamp <= openGroup.phase2endTime) { // Are we in phase 2?\n', '\t\t\trequire(userWeiTotal <= openGroup.max2); // Allow to contribute no more than max2 in phase 2.\n', '\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, false);\n', '\t\t\treturn true;\n', '\t\t} else { // We&#39;ve passed both phases 1 and 2.\n', '\t\t\trequire(userWeiTotal <= openGroup.max3); // Don&#39;t allow to contribute more than max3 in phase 3.\n', '\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, false);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction purchaseCallbackOnAccept(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n', '\t\tuint256 n = addresses.length;\n', '\t\trequire(n == weiAmounts.length, "Array lengths mismatch");\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tuint256 weiTotal = theGroup.weiTotal;\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\tMember storage memberRecord = members[addresses[i]];\n', '\t\t\tuint256 weiAmount = weiAmounts[i];\n', '\t\t\tweiTotal = weiTotal.add(weiAmount);\t\t\t\t\t\t\t\t // Calculate the total amount purchased by all members in this group.\n', '\t\t\tmemberRecord.weiBalance[groupNumber] = memberRecord.weiBalance[groupNumber].add(weiAmount);\t\t\t\t\t\t\t\t\t\t\t\t\t\t // Record the total amount purchased by the current member\n', '\t\t}\n', '\t\ttheGroup.weiTotal = weiTotal;\n', '\t\tif (getHowMuchUntilHardCap_(groupNumber) <= 100 ether) {\n', '\t\t\temit NearingHardCap(groupNumber, getHowMuchUntilHardCap_(groupNumber));\n', '\t\t\tif (weiTotal >= theGroup.cap) {\n', '\t\t\t\temit ReachedHardCap(groupNumber);\n', '\t\t\t}\n', '\t\t}\n', '\t\temit PurchasedCallbackOnAccept(groupNumber, addresses);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction insertAndApprove(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n', '\t\tuint256 n = addresses.length;\n', '\t\trequire(n == weiAmounts.length, "Array lengtsh mismatch");\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\taddress theAddress = addresses[i];\n', '\t\t\tif (!theGroup.exists[theAddress]) {\n', '\t\t\t\ttheGroup.addresses.push(theAddress);\n', '\t\t\t\ttheGroup.exists[theAddress] = true;\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn purchaseCallbackOnAccept(groupNumber, addresses, weiAmounts);\n', '\t}\n', '\n', '\tfunction callbackInsertApproveAndDistribute(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n', '\t\tuint256 n = addresses.length;\n', '\t\trequire(n == weiAmounts.length, "Array lengths mismatch");\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tif (!theGroup.distributing) {\n', '\t\t\ttheGroup.distributing = true;\n', '\t\t}\n', '\t\tuint256 newOwnerSupply = balances[owner];\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\taddress theAddress = addresses[i];\n', '\t\t\tMember storage memberRecord = members[theAddress];\n', '\t\t\tuint256 weiAmount = weiAmounts[i];\n', '\t\t\tmemberRecord.weiBalance[groupNumber] = memberRecord.weiBalance[groupNumber].add(weiAmount);\t\t\t\t\t\t\t\t\t\t\t\t\t\t // Record the total amount purchased by the current member\n', '\t\t\tuint256 additionalBalance = weiAmount.mul(theGroup.ratio); // Don&#39;t give cumulative tokens; one address can be distributed multiple times.\n', '\t\t\tif (additionalBalance > 0) { // No need to waste ticks if they have no tokens to distribute\n', '\t\t\t\tbalances[theAddress] = balances[theAddress].add(additionalBalance);\n', '\t\t\t\tnewOwnerSupply = newOwnerSupply.sub(additionalBalance); // Update the available number of tokens.\n', '\t\t\t\temit Transfer(owner, theAddress, additionalBalance); // Notify exchanges of the distribution.\n', '\t\t\t}\n', '\t\t}\n', '\t\tbalances[owner] = newOwnerSupply;\n', '\t\temit PurchasedCallbackOnAccept(groupNumber, addresses);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction refund(address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n', '\t\tuint256 n = addresses.length;\n', '\t\trequire (n == weiAmounts.length, "Array lengths mismatch");\n', '\t\tuint256 thePenalty = penalty;\n', '\t\tfor(uint256 i = 0; i < n; i++) {\n', '\t\t\tuint256 weiAmount = weiAmounts[i];\n', '\t\t\taddress theAddress = addresses[i];\n', '\t\t\tif (thePenalty <= weiAmount) {\n', '\t\t\t\tweiAmount = weiAmount.sub(thePenalty);\n', '\t\t\t\trequire(address(this).balance >= weiAmount);\n', '\t\t\t\ttheAddress.transfer(weiAmount);\n', '\t\t\t}\n', '\t\t}\n', '\t\temit RefundedBatch(addresses);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction signalDoneDistributing(uint256 groupNumber) public onlyOwnerOrOracle {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\ttheGroup.distributed = true;\n', '\t\ttheGroup.distributing = false;\n', '\t\temit DistributeDone(groupNumber);\n', '\t}\n', '\t\n', '\tfunction drain() public onlyOwner {\n', '\t\towner.transfer(address(this).balance);\n', '\t}\n', '\t\n', '\tfunction setPenalty(uint256 newPenalty) public onlyOwner returns(bool success) {\n', '\t\tpenalty = newPenalty;\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction buyback(uint256 amount) public canSell { // Can&#39;t sell unless owner has allowed it.\n', '\t\tuint256 decimalAmount = amount.mul(uint(10)**decimals); // convert the full token value to the smallest unit possible.\n', '\t\trequire(balances[msg.sender].sub(decimalAmount) >= getLockedTokens_(msg.sender)); // Don&#39;t allow to sell locked tokens.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(decimalAmount); // Do this before transferring to avoid re-entrance attacks; will throw if result < 0.\n', '\t\t// Amount is considered to be how many full tokens the user wants to sell.\n', '\t\tuint256 totalCost = amount.mul(sellPrice); // sellPrice is the per-full-token value.\n', '\t\trequire(address(this).balance >= totalCost); // The contract must have enough funds to cover the selling.\n', '\t\tbalances[owner] = balances[owner].add(decimalAmount); // Put these tokens back into the available pile.\n', '\t\tmsg.sender.transfer(totalCost); // Pay the seller for their tokens.\n', '\t\temit Transfer(msg.sender, owner, decimalAmount); // Notify exchanges of the sell.\n', '\t}\n', '\n', '\tfunction fundContract() public onlyOwnerOrOracle payable { // For the owner to put funds into the contract.\n', '\t}\n', '\n', '\tfunction setSellPrice(uint256 thePrice) public onlyOwner {\n', '\t\tsellPrice = thePrice;\n', '\t}\n', '\t\n', '\tfunction setAllowedToBuyBack(bool value) public onlyOwner {\n', '\t\tallowedToBuyBack = value;\n', '\t\temit ChangedAllowedToBuyBack(value);\n', '\t}\n', '\n', '\tfunction setAllowedToPurchase(bool value) public onlyOwner {\n', '\t\tallowedToPurchase = value;\n', '\t\temit ChangedAllowedToPurchase(value);\n', '\t}\n', '\t\n', '\tfunction createGroup(string groupName, uint256 startEpoch, uint256 phase1endEpoch, uint256 phase2endEpoch, uint256 deadlineEpoch, uint256 phase2weiCap, uint256 phase3weiCap, uint256 hardWeiCap, uint256 ratio) public onlyOwner returns (bool success, uint256 createdGroupNumber) {\n', '\t\tcreatedGroupNumber = nextGroupNumber;\n', '\t\tGroup storage theGroup = groups[createdGroupNumber];\n', '\t\ttheGroup.name = groupName;\n', '\t\ttheGroup.startTime = startEpoch;\n', '\t\ttheGroup.phase1endTime = phase1endEpoch;\n', '\t\ttheGroup.phase2endTime = phase2endEpoch;\n', '\t\ttheGroup.deadline = deadlineEpoch;\n', '\t\ttheGroup.max2 = phase2weiCap;\n', '\t\ttheGroup.max3 = phase3weiCap;\n', '\t\ttheGroup.cap = hardWeiCap;\n', '\t\ttheGroup.ratio = ratio;\n', '\t\tnextGroupNumber++;\n', '\t\tsuccess = true;\n', '\t}\n', '\n', '\tfunction getGroup(uint256 groupNumber) public view returns(string groupName, bool distributed, bool unlocked, uint256 phase2cap, uint256 phase3cap, uint256 cap, uint256 ratio, uint256 startTime, uint256 phase1endTime, uint256 phase2endTime, uint256 deadline, uint256 weiTotal) {\n', '\t\trequire(groupNumber < nextGroupNumber);\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tgroupName = theGroup.name;\n', '\t\tdistributed = theGroup.distributed;\n', '\t\tunlocked = theGroup.unlocked;\n', '\t\tphase2cap = theGroup.max2;\n', '\t\tphase3cap = theGroup.max3;\n', '\t\tcap = theGroup.cap;\n', '\t\tratio = theGroup.ratio;\n', '\t\tstartTime = theGroup.startTime;\n', '\t\tphase1endTime = theGroup.phase1endTime;\n', '\t\tphase2endTime = theGroup.phase2endTime;\n', '\t\tdeadline = theGroup.deadline;\n', '\t\tweiTotal = theGroup.weiTotal;\n', '\t}\n', '\t\n', '\tfunction getHowMuchUntilHardCap_(uint256 groupNumber) internal view returns(uint256 remainder) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tif (theGroup.weiTotal > theGroup.cap) { // calling .sub in this situation will throw.\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\treturn theGroup.cap.sub(theGroup.weiTotal);\n', '\t}\n', '\t\n', '\tfunction getHowMuchUntilHardCap() public view returns(uint256 remainder) {\n', '\t\treturn getHowMuchUntilHardCap_(openGroupNumber);\n', '\t}\n', '\n', '\tfunction addMemberToGroup(address walletAddress, uint256 groupNumber) public onlyOwner returns(bool success) {\n', '\t\temit AddToGroup(walletAddress, groupNumber);\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction instructOracleToDistribute(uint256 groupNumber) public onlyOwner {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\trequire(groupNumber < nextGroupNumber && !theGroup.distributed); // can&#39;t have already distributed\n', '\t\temit WantsToDistribute(groupNumber);\n', '\t}\n', '\t\n', '\tfunction distributeCallback(uint256 groupNumber, uint256 howMany) public onlyOwnerOrOracle returns (bool success) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\trequire(!theGroup.distributed);\n', '\t\tif (!theGroup.distributing) {\n', '\t\t\ttheGroup.distributing = true;\n', '\t\t}\n', '\t\tuint256 n = theGroup.addresses.length;\n', '\t\tuint256 nextDistributionIndex = theGroup.nextDistributionIndex;\n', '\t\tuint256 exclusiveEndIndex = nextDistributionIndex + howMany;\n', '\t\tif (exclusiveEndIndex > n) {\n', '\t\t\texclusiveEndIndex = n;\n', '\t\t}\n', '\t\tuint256 newOwnerSupply = balances[owner];\n', '\t\tfor (uint256 i = nextDistributionIndex; i < exclusiveEndIndex; i++) {\n', '\t\t\taddress theAddress = theGroup.addresses[i];\n', '\t\t\tuint256 balance = getUndistributedBalanceOf_(theAddress, groupNumber);\n', '\t\t\tif (balance > 0) { // No need to waste ticks if they have no tokens to distribute\n', '\t\t\t\tbalances[theAddress] = balances[theAddress].add(balance);\n', '\t\t\t\tnewOwnerSupply = newOwnerSupply.sub(balance); // Update the available number of tokens.\n', '\t\t\t\temit Transfer(owner, theAddress, balance); // Notify exchanges of the distribution.\n', '\t\t\t}\n', '\t\t}\n', '\t\tbalances[owner] = newOwnerSupply;\n', '\t\tif (exclusiveEndIndex < n) {\n', '\t\t\temit DistributedBatch(groupNumber, howMany);\n', '\t\t} else { // We&#39;ve finished distributing people\n', '\t\t\tsignalDoneDistributing(groupNumber);\n', '\t\t}\n', '\t\ttheGroup.nextDistributionIndex = exclusiveEndIndex; // Usually not necessary if we&#39;ve finished distribution, but if we don&#39;t update this, getHowManyLeftToDistribute will never show 0.\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getHowManyLeftToDistribute(uint256 groupNumber) public view returns(uint256 remainder) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\treturn theGroup.addresses.length - theGroup.nextDistributionIndex;\n', '\t}\n', '\n', '\tfunction changeGroupInfo(uint256 groupNumber, uint256 startEpoch, uint256 phase1endEpoch, uint256 phase2endEpoch, uint256 deadlineEpoch, uint256 phase2weiCap, uint256 phase3weiCap, uint256 hardWeiCap, uint256 ratio) public onlyOwner returns (bool success) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tif (startEpoch > 0) {\n', '\t\t\ttheGroup.startTime = startEpoch;\n', '\t\t}\n', '\t\tif (phase1endEpoch > 0) {\n', '\t\t\ttheGroup.phase1endTime = phase1endEpoch;\n', '\t\t}\n', '\t\tif (phase2endEpoch > 0) {\n', '\t\t\ttheGroup.phase2endTime = phase2endEpoch;\n', '\t\t}\n', '\t\tif (deadlineEpoch > 0) {\n', '\t\t\ttheGroup.deadline = deadlineEpoch;\n', '\t\t}\n', '\t\tif (phase2weiCap > 0) {\n', '\t\t\ttheGroup.max2 = phase2weiCap;\n', '\t\t}\n', '\t\tif (phase3weiCap > 0) {\n', '\t\t\ttheGroup.max3 = phase3weiCap;\n', '\t\t}\n', '\t\tif (hardWeiCap > 0) {\n', '\t\t\ttheGroup.cap = hardWeiCap;\n', '\t\t}\n', '\t\tif (ratio > 0) {\n', '\t\t\ttheGroup.ratio = ratio;\n', '\t\t}\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction relockGroup(uint256 groupNumber) public onlyOwner returns(bool success) {\n', '\t\tgroups[groupNumber].unlocked = true;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction resetGroupInfo(uint256 groupNumber) public onlyOwner returns (bool success) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\ttheGroup.startTime = 0;\n', '\t\ttheGroup.phase1endTime = 0;\n', '\t\ttheGroup.phase2endTime = 0;\n', '\t\ttheGroup.deadline = 0;\n', '\t\ttheGroup.max2 = 0;\n', '\t\ttheGroup.max3 = 0;\n', '\t\ttheGroup.cap = 0;\n', '\t\ttheGroup.ratio = 0;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction unlock(uint256 groupNumber) public onlyOwner returns (bool success) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\trequire(theGroup.distributed); // Distribution must have occurred first.\n', '\t\ttheGroup.unlocked = true;\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction setGlobalLock(bool value) public onlyOwner {\n', '\t\ttransferLock = value;\n', '\t\temit ChangedTransferLock(transferLock);\n', '\t}\n', '\t\n', '\tfunction burn(uint256 amount) public onlyOwner {\n', '\t\t// Burns tokens from the owner&#39;s supply and doesn&#39;t touch allocated tokens.\n', '\t\t// Decrease totalSupply and leftOver by the amount to burn so we can decrease the circulation.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(amount); // Will throw if result < 0\n', '\t\ttotalSupply_ = totalSupply_.sub(amount); // Will throw if result < 0\n', '\t\temit Transfer(msg.sender, address(0), amount);\n', '\t}\n', '\t\n', '\tfunction splitTokensBeforeDistribution(uint256 splitFactor) public onlyOwner returns (bool success) {\n', '\t\t// SplitFactor is the multiplier per decimal of spark. splitFactor * 10**decimals = splitFactor sparks\n', '\t\tuint256 ownerBalance = balances[msg.sender];\n', '\t\tuint256 multiplier = ownerBalance.mul(splitFactor);\n', '\t\tuint256 increaseSupplyBy = multiplier.sub(ownerBalance); // We need to mint owner*splitFactor - owner additional tokens.\n', '\t\tbalances[msg.sender] = multiplier;\n', '\t\ttotalSupply_ = totalSupply_.mul(splitFactor);\n', '\t\temit Transfer(address(0), msg.sender, increaseSupplyBy); // Notify exchange that we&#39;ve minted tokens.\n', '\t\t// Next, increase group ratios by splitFactor, so users will receive ratio * splitFactor tokens per ether.\n', '\t\tuint256 n = nextGroupNumber;\n', '\t\trequire(n > 0); // Must have at least one group.\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\tGroup storage currentGroup = groups[i];\n', '\t\t\tcurrentGroup.ratio = currentGroup.ratio.mul(splitFactor);\n', '\t\t}\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction reverseSplitTokensBeforeDistribution(uint256 splitFactor) public onlyOwner returns (bool success) {\n', '\t\t// SplitFactor is the multiplier per decimal of spark. splitFactor * 10**decimals = splitFactor sparks\n', '\t\tuint256 ownerBalance = balances[msg.sender];\n', '\t\tuint256 divier = ownerBalance.div(splitFactor);\n', '\t\tuint256 decreaseSupplyBy = ownerBalance.sub(divier);\n', '\t\t// We don&#39;t use burnTokens here since the amount to subtract might be more than what the owner currently holds in their unallocated supply which will cause the function to throw.\n', '\t\ttotalSupply_ = totalSupply_.div(splitFactor);\n', '\t\tbalances[msg.sender] = divier;\n', '\t\t// Notify the exchanges of how many tokens were burned.\n', '\t\temit Transfer(msg.sender, address(0), decreaseSupplyBy);\n', '\t\t// Next, decrease group ratios by splitFactor, so users will receive ratio / splitFactor tokens per ether.\n', '\t\tuint256 n = nextGroupNumber;\n', '\t\trequire(n > 0); // Must have at least one group. Groups are 0-indexed.\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\tGroup storage currentGroup = groups[i];\n', '\t\t\tcurrentGroup.ratio = currentGroup.ratio.div(splitFactor);\n', '\t\t}\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction airdrop( address[] addresses, uint256[] tokenDecimalAmounts) public onlyOwnerOrOracle returns (bool success) {\n', '\t\tuint256 n = addresses.length;\n', '\t\trequire(n == tokenDecimalAmounts.length, "Array lengths mismatch");\n', '\t\tuint256 newOwnerBalance = balances[owner];\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\taddress theAddress = addresses[i];\n', '\t\t\tuint256 airdropAmount = tokenDecimalAmounts[i];\n', '\t\t\tif (airdropAmount > 0) {\n', '\t\t\t\tuint256 currentBalance = balances[theAddress];\n', '\t\t\t\tbalances[theAddress] = currentBalance.add(airdropAmount);\n', '\t\t\t\tnewOwnerBalance = newOwnerBalance.sub(airdropAmount);\n', '\t\t\t\temit Transfer(owner, theAddress, airdropAmount);\n', '\t\t\t}\n', '\t\t}\n', '\t\tbalances[owner] = newOwnerBalance;\n', '\t\temit AirdroppedBatch(addresses);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\t\t\n', '\t\t// If the transferrer has purchased tokens, they must be unlocked before they can be used.\n', '\t\tif (msg.sender != owner) { // Owner can transfer anything to anyone.\n', '\t\t\trequire(balances[msg.sender].sub(_value) >= getLockedTokens_(msg.sender));\n', '\t\t}\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) canTransfer returns (bool success) {\n', '\t\t// If the transferrer has purchased tokens, they must be unlocked before they can be used.\n', '\t\tif (msg.sender != owner) { // Owner not affected by locked tokens\n', '\t\t\trequire(balances[_from].sub(_value) >= getLockedTokens_(_from));\n', '\t\t}\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\tfunction setOpenGroup(uint256 groupNumber) public onlyOwner returns (bool success) {\n', '\t\trequire(groupNumber < nextGroupNumber);\n', '\t\topenGroupNumber = groupNumber;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getLockedTokensInGroup_(address walletAddress, uint256 groupNumber) internal view returns (uint256 balance) {\n', '\t\tMember storage theMember = members[walletAddress];\n', '\t\tif (groups[groupNumber].unlocked) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\treturn theMember.weiBalance[groupNumber].mul(groups[groupNumber].ratio);\n', '\t}\n', '\n', '\tfunction getLockedTokens_(address walletAddress) internal view returns(uint256 balance) {\n', '\t\tuint256 n = nextGroupNumber;\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\tbalance = balance.add(getLockedTokensInGroup_(walletAddress, i));\n', '\t\t}\n', '\t\treturn balance;\n', '\t}\n', '\n', '\tfunction getLockedTokens(address walletAddress) public view returns(uint256 balance) {\n', '\t\treturn getLockedTokens_(walletAddress);\n', '\t}\n', '\n', '\tfunction getUndistributedBalanceOf_(address walletAddress, uint256 groupNumber) internal view returns (uint256 balance) {\n', '\t\tMember storage theMember = members[walletAddress];\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tif (theGroup.distributed) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\treturn theMember.weiBalance[groupNumber].mul(theGroup.ratio);\n', '\t}\n', '\n', '\tfunction getUndistributedBalanceOf(address walletAddress, uint256 groupNumber) public view returns (uint256 balance) {\n', '\t\treturn getUndistributedBalanceOf_(walletAddress, groupNumber);\n', '\t}\n', '\n', '\tfunction checkMyUndistributedBalance(uint256 groupNumber) public view returns (uint256 balance) {\n', '\t\treturn getUndistributedBalanceOf_(msg.sender, groupNumber);\n', '\t}\n', '\n', '\tfunction transferRecovery(address _from, address _to, uint256 _value) public onlyOwner returns (bool success) {\n', '\t\t// Will be used if someone sends tokens to an incorrect address by accident. This way, we have the ability to recover the tokens. For example, sometimes there&#39;s a problem of lost tokens if someone sends tokens to a contract address that can&#39;t utilize the tokens.\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].add(_value); // Authorize the owner to spend on someone&#39;s behalf.\n', '\t\treturn transferFrom(_from, _to, _value);\n', '\t}\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract SparksterToken is StandardToken, Ownable{\n', '\tusing SafeMath for uint256;\n', '\tstruct Member {\n', '\t\tmapping(uint256 => uint256) weiBalance; // How much wei has this member contributed for this group?\n', '\t}\n', '\n', '\tstruct Group {\n', '\t\tbool distributed; // Whether or not tokens in this group have been distributed.\n', '\t\tbool distributing; // This flag is set when we first enter the distribute function and is there to prevent race conditions, since distribution might take a long time.\n', '\t\tbool unlocked; // Whether or not tokens in this group have been unlocked.\n', '\t\tmapping(address => bool) exists; // If exists[address] is true, this address has made a purchase on this group before.\n', '\t\tstring name;\n', '\t\tuint256 ratio; // 1 eth:ratio tokens. This amount represents the decimal amount. ratio*10**decimal = ratio sparks.\n', '\t\tuint256 startTime; // Epoch of crowdsale start time.\n', '\t\tuint256 phase1endTime; // Epoch of phase1 end time.\n', '\t\tuint256 phase2endTime; // Epoch of phase2 end time.\n', '\t\tuint256 deadline; // No contributions allowed after this epoch.\n', '\t\tuint256 max2; // cap of phase2\n', '\t\tuint256 max3; // Total ether this group can collect in phase 3.\n', '\t\tuint256 weiTotal; // How much ether has this group collected?\n', '\t\tuint256 cap; // The hard ether cap.\n', '\t\tuint256 nextDistributionIndex; // The next index to start distributing at.\n', '\t\taddress[] addresses; // List of addresses that have made a purchase on this group.\n', '\t}\n', '\n', '\taddress oracleAddress;\n', '\tbool public transferLock = true; // A Global transfer lock. Set to lock down all tokens from all groups.\n', '\tbool public allowedToBuyBack = false;\n', '\tbool public allowedToPurchase = false;\n', '\tstring public name;\t\t\t\t\t\t\t\t\t // name for display\n', '\tstring public symbol;\t\t\t\t\t\t\t\t //An identifier\n', '\tuint8 public decimals;\t\t\t\t\t\t\t//How many decimals to show.\n', '\tuint256 public penalty;\n', '\tuint256 public maxGasPrice; // The maximum allowed gas for the purchase function.\n', '\tuint256 internal nextGroupNumber;\n', "\tuint256 public sellPrice; // sellPrice wei:1 spark token; we won't allow to sell back parts of a token.\n", '\tmapping(address => Member) internal members;\n', '\tmapping(uint256 => Group) internal groups;\n', '\tuint256 public openGroupNumber;\n', '\tevent WantsToPurchase(address walletAddress, uint256 weiAmount, uint256 groupNumber, bool inPhase1);\n', '\tevent PurchasedCallbackOnAccept(uint256 groupNumber, address[] addresses);\n', '\tevent WantsToDistribute(uint256 groupNumber);\n', '\tevent NearingHardCap(uint256 groupNumber, uint256 remainder);\n', '\tevent ReachedHardCap(uint256 groupNumber);\n', '\tevent DistributeDone(uint256 groupNumber);\n', '\tevent DistributedBatch(uint256 groupNumber, uint256 howMany);\n', '\tevent AirdroppedBatch(address[] addresses);\n', '\tevent RefundedBatch(address[] addresses);\n', '\tevent AddToGroup(address walletAddress, uint256 groupNumber);\n', '\tevent ChangedTransferLock(bool transferLock);\n', '\tevent ChangedAllowedToPurchase(bool allowedToPurchase);\n', '\tevent ChangedAllowedToBuyBack(bool allowedToBuyBack);\n', '\tevent SetSellPrice(uint256 sellPrice);\n', '\t\n', '\tmodifier onlyOwnerOrOracle() {\n', '\t\trequire(msg.sender == owner || msg.sender == oracleAddress);\n', '\t\t_;\n', '\t}\n', '\t\n', '\t// Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\n', '\tmodifier onlyPayloadSize(uint size) {\t \n', '\t\trequire(msg.data.length == size + 4);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier canTransfer() {\n', '\t\tif (msg.sender != owner) {\n', '\t\t\trequire(!transferLock);\n', '\t\t}\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier canPurchase() {\n', '\t\trequire(allowedToPurchase);\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier canSell() {\n', '\t\trequire(allowedToBuyBack);\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction() public payable {\n', '\t\tpurchase();\n', '\t}\n', '\n', '\tconstructor() public {\n', '\t\tname = "Sparkster";\t\t\t\t\t\t\t\t\t// Set the name for display purposes\n', '\t\tdecimals = 18;\t\t\t\t\t // Amount of decimals for display purposes\n', '\t\tsymbol = "SPRK";\t\t\t\t\t\t\t// Set the symbol for display purposes\n', '\t\tsetMaximumGasPrice(40);\n', '\t\tmintTokens(435000000);\n', '\t}\n', '\t\n', '\tfunction setOracleAddress(address newAddress) public onlyOwner returns(bool success) {\n', '\t\toracleAddress = newAddress;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction removeOracleAddress() public onlyOwner {\n', '\t\toracleAddress = address(0);\n', '\t}\n', '\n', '\tfunction setMaximumGasPrice(uint256 gweiPrice) public onlyOwner returns(bool success) {\n', '\t\tmaxGasPrice = gweiPrice.mul(10**9); // Convert the gwei value to wei.\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction mintTokens(uint256 amount) public onlyOwner {\n', "\t\t// Here, we'll consider amount to be the full token amount, so we have to get its decimal value.\n", '\t\tuint256 decimalAmount = amount.mul(uint(10)**decimals);\n', '\t\ttotalSupply_ = totalSupply_.add(decimalAmount);\n', '\t\tbalances[msg.sender] = balances[msg.sender].add(decimalAmount);\n', '\t\temit Transfer(address(0), msg.sender, decimalAmount); // Per erc20 standards-compliance.\n', '\t}\n', '\n', '\tfunction purchase() public canPurchase payable returns(bool success) {\n', "\t\trequire(msg.sender != address(0)); // Don't allow the 0 address.\n", '\t\tMember storage memberRecord = members[msg.sender];\n', '\t\tGroup storage openGroup = groups[openGroupNumber];\n', '\t\trequire(openGroup.ratio > 0); // Group must be initialized.\n', '\t\tuint256 currentTimestamp = block.timestamp;\n', '\t\trequire(currentTimestamp >= openGroup.startTime && currentTimestamp <= openGroup.deadline);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t //the timestamp must be greater than or equal to the start time and less than or equal to the deadline time\n', "\t\trequire(!openGroup.distributing && !openGroup.distributed); // Don't allow to purchase if we're in the middle of distributing this group; Don't let someone buy tokens on the current group if that group is already distributed.\n", '\t\trequire(tx.gasprice <= maxGasPrice); // Restrict maximum gas this transaction is allowed to consume.\n', '\t\tuint256 weiAmount = msg.value;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// The amount purchased by the current member\n', '\t\trequire(weiAmount >= 0.1 ether);\n', '\t\tuint256 weiTotal = openGroup.weiTotal.add(weiAmount); // Calculate total contribution of all members in this group.\n', '\t\trequire(weiTotal <= openGroup.cap);\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Check to see if accepting these funds will put us above the hard ether cap.\n', '\t\tuint256 userWeiTotal = memberRecord.weiBalance[openGroupNumber].add(weiAmount);\t// Calculate the total amount purchased by the current member\n', '\t\tif (!openGroup.exists[msg.sender]) { // Has this person not purchased on this group before?\n', '\t\t\topenGroup.addresses.push(msg.sender);\n', '\t\t\topenGroup.exists[msg.sender] = true;\n', '\t\t}\n', '\t\tif(currentTimestamp <= openGroup.phase1endTime){\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // whether the current timestamp is in the first phase\n', '\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, true);\n', '\t\t\treturn true;\n', '\t\t} else if (currentTimestamp <= openGroup.phase2endTime) { // Are we in phase 2?\n', '\t\t\trequire(userWeiTotal <= openGroup.max2); // Allow to contribute no more than max2 in phase 2.\n', '\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, false);\n', '\t\t\treturn true;\n', "\t\t} else { // We've passed both phases 1 and 2.\n", "\t\t\trequire(userWeiTotal <= openGroup.max3); // Don't allow to contribute more than max3 in phase 3.\n", '\t\t\temit WantsToPurchase(msg.sender, weiAmount, openGroupNumber, false);\n', '\t\t\treturn true;\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction purchaseCallbackOnAccept(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n', '\t\tuint256 n = addresses.length;\n', '\t\trequire(n == weiAmounts.length, "Array lengths mismatch");\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tuint256 weiTotal = theGroup.weiTotal;\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\tMember storage memberRecord = members[addresses[i]];\n', '\t\t\tuint256 weiAmount = weiAmounts[i];\n', '\t\t\tweiTotal = weiTotal.add(weiAmount);\t\t\t\t\t\t\t\t // Calculate the total amount purchased by all members in this group.\n', '\t\t\tmemberRecord.weiBalance[groupNumber] = memberRecord.weiBalance[groupNumber].add(weiAmount);\t\t\t\t\t\t\t\t\t\t\t\t\t\t // Record the total amount purchased by the current member\n', '\t\t}\n', '\t\ttheGroup.weiTotal = weiTotal;\n', '\t\tif (getHowMuchUntilHardCap_(groupNumber) <= 100 ether) {\n', '\t\t\temit NearingHardCap(groupNumber, getHowMuchUntilHardCap_(groupNumber));\n', '\t\t\tif (weiTotal >= theGroup.cap) {\n', '\t\t\t\temit ReachedHardCap(groupNumber);\n', '\t\t\t}\n', '\t\t}\n', '\t\temit PurchasedCallbackOnAccept(groupNumber, addresses);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction insertAndApprove(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n', '\t\tuint256 n = addresses.length;\n', '\t\trequire(n == weiAmounts.length, "Array lengtsh mismatch");\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\taddress theAddress = addresses[i];\n', '\t\t\tif (!theGroup.exists[theAddress]) {\n', '\t\t\t\ttheGroup.addresses.push(theAddress);\n', '\t\t\t\ttheGroup.exists[theAddress] = true;\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn purchaseCallbackOnAccept(groupNumber, addresses, weiAmounts);\n', '\t}\n', '\n', '\tfunction callbackInsertApproveAndDistribute(uint256 groupNumber, address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n', '\t\tuint256 n = addresses.length;\n', '\t\trequire(n == weiAmounts.length, "Array lengths mismatch");\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tif (!theGroup.distributing) {\n', '\t\t\ttheGroup.distributing = true;\n', '\t\t}\n', '\t\tuint256 newOwnerSupply = balances[owner];\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\taddress theAddress = addresses[i];\n', '\t\t\tMember storage memberRecord = members[theAddress];\n', '\t\t\tuint256 weiAmount = weiAmounts[i];\n', '\t\t\tmemberRecord.weiBalance[groupNumber] = memberRecord.weiBalance[groupNumber].add(weiAmount);\t\t\t\t\t\t\t\t\t\t\t\t\t\t // Record the total amount purchased by the current member\n', "\t\t\tuint256 additionalBalance = weiAmount.mul(theGroup.ratio); // Don't give cumulative tokens; one address can be distributed multiple times.\n", '\t\t\tif (additionalBalance > 0) { // No need to waste ticks if they have no tokens to distribute\n', '\t\t\t\tbalances[theAddress] = balances[theAddress].add(additionalBalance);\n', '\t\t\t\tnewOwnerSupply = newOwnerSupply.sub(additionalBalance); // Update the available number of tokens.\n', '\t\t\t\temit Transfer(owner, theAddress, additionalBalance); // Notify exchanges of the distribution.\n', '\t\t\t}\n', '\t\t}\n', '\t\tbalances[owner] = newOwnerSupply;\n', '\t\temit PurchasedCallbackOnAccept(groupNumber, addresses);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction refund(address[] addresses, uint256[] weiAmounts) public onlyOwnerOrOracle returns(bool success) {\n', '\t\tuint256 n = addresses.length;\n', '\t\trequire (n == weiAmounts.length, "Array lengths mismatch");\n', '\t\tuint256 thePenalty = penalty;\n', '\t\tfor(uint256 i = 0; i < n; i++) {\n', '\t\t\tuint256 weiAmount = weiAmounts[i];\n', '\t\t\taddress theAddress = addresses[i];\n', '\t\t\tif (thePenalty <= weiAmount) {\n', '\t\t\t\tweiAmount = weiAmount.sub(thePenalty);\n', '\t\t\t\trequire(address(this).balance >= weiAmount);\n', '\t\t\t\ttheAddress.transfer(weiAmount);\n', '\t\t\t}\n', '\t\t}\n', '\t\temit RefundedBatch(addresses);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction signalDoneDistributing(uint256 groupNumber) public onlyOwnerOrOracle {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\ttheGroup.distributed = true;\n', '\t\ttheGroup.distributing = false;\n', '\t\temit DistributeDone(groupNumber);\n', '\t}\n', '\t\n', '\tfunction drain() public onlyOwner {\n', '\t\towner.transfer(address(this).balance);\n', '\t}\n', '\t\n', '\tfunction setPenalty(uint256 newPenalty) public onlyOwner returns(bool success) {\n', '\t\tpenalty = newPenalty;\n', '\t\treturn true;\n', '\t}\n', '\t\n', "\tfunction buyback(uint256 amount) public canSell { // Can't sell unless owner has allowed it.\n", '\t\tuint256 decimalAmount = amount.mul(uint(10)**decimals); // convert the full token value to the smallest unit possible.\n', "\t\trequire(balances[msg.sender].sub(decimalAmount) >= getLockedTokens_(msg.sender)); // Don't allow to sell locked tokens.\n", '\t\tbalances[msg.sender] = balances[msg.sender].sub(decimalAmount); // Do this before transferring to avoid re-entrance attacks; will throw if result < 0.\n', '\t\t// Amount is considered to be how many full tokens the user wants to sell.\n', '\t\tuint256 totalCost = amount.mul(sellPrice); // sellPrice is the per-full-token value.\n', '\t\trequire(address(this).balance >= totalCost); // The contract must have enough funds to cover the selling.\n', '\t\tbalances[owner] = balances[owner].add(decimalAmount); // Put these tokens back into the available pile.\n', '\t\tmsg.sender.transfer(totalCost); // Pay the seller for their tokens.\n', '\t\temit Transfer(msg.sender, owner, decimalAmount); // Notify exchanges of the sell.\n', '\t}\n', '\n', '\tfunction fundContract() public onlyOwnerOrOracle payable { // For the owner to put funds into the contract.\n', '\t}\n', '\n', '\tfunction setSellPrice(uint256 thePrice) public onlyOwner {\n', '\t\tsellPrice = thePrice;\n', '\t}\n', '\t\n', '\tfunction setAllowedToBuyBack(bool value) public onlyOwner {\n', '\t\tallowedToBuyBack = value;\n', '\t\temit ChangedAllowedToBuyBack(value);\n', '\t}\n', '\n', '\tfunction setAllowedToPurchase(bool value) public onlyOwner {\n', '\t\tallowedToPurchase = value;\n', '\t\temit ChangedAllowedToPurchase(value);\n', '\t}\n', '\t\n', '\tfunction createGroup(string groupName, uint256 startEpoch, uint256 phase1endEpoch, uint256 phase2endEpoch, uint256 deadlineEpoch, uint256 phase2weiCap, uint256 phase3weiCap, uint256 hardWeiCap, uint256 ratio) public onlyOwner returns (bool success, uint256 createdGroupNumber) {\n', '\t\tcreatedGroupNumber = nextGroupNumber;\n', '\t\tGroup storage theGroup = groups[createdGroupNumber];\n', '\t\ttheGroup.name = groupName;\n', '\t\ttheGroup.startTime = startEpoch;\n', '\t\ttheGroup.phase1endTime = phase1endEpoch;\n', '\t\ttheGroup.phase2endTime = phase2endEpoch;\n', '\t\ttheGroup.deadline = deadlineEpoch;\n', '\t\ttheGroup.max2 = phase2weiCap;\n', '\t\ttheGroup.max3 = phase3weiCap;\n', '\t\ttheGroup.cap = hardWeiCap;\n', '\t\ttheGroup.ratio = ratio;\n', '\t\tnextGroupNumber++;\n', '\t\tsuccess = true;\n', '\t}\n', '\n', '\tfunction getGroup(uint256 groupNumber) public view returns(string groupName, bool distributed, bool unlocked, uint256 phase2cap, uint256 phase3cap, uint256 cap, uint256 ratio, uint256 startTime, uint256 phase1endTime, uint256 phase2endTime, uint256 deadline, uint256 weiTotal) {\n', '\t\trequire(groupNumber < nextGroupNumber);\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tgroupName = theGroup.name;\n', '\t\tdistributed = theGroup.distributed;\n', '\t\tunlocked = theGroup.unlocked;\n', '\t\tphase2cap = theGroup.max2;\n', '\t\tphase3cap = theGroup.max3;\n', '\t\tcap = theGroup.cap;\n', '\t\tratio = theGroup.ratio;\n', '\t\tstartTime = theGroup.startTime;\n', '\t\tphase1endTime = theGroup.phase1endTime;\n', '\t\tphase2endTime = theGroup.phase2endTime;\n', '\t\tdeadline = theGroup.deadline;\n', '\t\tweiTotal = theGroup.weiTotal;\n', '\t}\n', '\t\n', '\tfunction getHowMuchUntilHardCap_(uint256 groupNumber) internal view returns(uint256 remainder) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tif (theGroup.weiTotal > theGroup.cap) { // calling .sub in this situation will throw.\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\treturn theGroup.cap.sub(theGroup.weiTotal);\n', '\t}\n', '\t\n', '\tfunction getHowMuchUntilHardCap() public view returns(uint256 remainder) {\n', '\t\treturn getHowMuchUntilHardCap_(openGroupNumber);\n', '\t}\n', '\n', '\tfunction addMemberToGroup(address walletAddress, uint256 groupNumber) public onlyOwner returns(bool success) {\n', '\t\temit AddToGroup(walletAddress, groupNumber);\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction instructOracleToDistribute(uint256 groupNumber) public onlyOwner {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', "\t\trequire(groupNumber < nextGroupNumber && !theGroup.distributed); // can't have already distributed\n", '\t\temit WantsToDistribute(groupNumber);\n', '\t}\n', '\t\n', '\tfunction distributeCallback(uint256 groupNumber, uint256 howMany) public onlyOwnerOrOracle returns (bool success) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\trequire(!theGroup.distributed);\n', '\t\tif (!theGroup.distributing) {\n', '\t\t\ttheGroup.distributing = true;\n', '\t\t}\n', '\t\tuint256 n = theGroup.addresses.length;\n', '\t\tuint256 nextDistributionIndex = theGroup.nextDistributionIndex;\n', '\t\tuint256 exclusiveEndIndex = nextDistributionIndex + howMany;\n', '\t\tif (exclusiveEndIndex > n) {\n', '\t\t\texclusiveEndIndex = n;\n', '\t\t}\n', '\t\tuint256 newOwnerSupply = balances[owner];\n', '\t\tfor (uint256 i = nextDistributionIndex; i < exclusiveEndIndex; i++) {\n', '\t\t\taddress theAddress = theGroup.addresses[i];\n', '\t\t\tuint256 balance = getUndistributedBalanceOf_(theAddress, groupNumber);\n', '\t\t\tif (balance > 0) { // No need to waste ticks if they have no tokens to distribute\n', '\t\t\t\tbalances[theAddress] = balances[theAddress].add(balance);\n', '\t\t\t\tnewOwnerSupply = newOwnerSupply.sub(balance); // Update the available number of tokens.\n', '\t\t\t\temit Transfer(owner, theAddress, balance); // Notify exchanges of the distribution.\n', '\t\t\t}\n', '\t\t}\n', '\t\tbalances[owner] = newOwnerSupply;\n', '\t\tif (exclusiveEndIndex < n) {\n', '\t\t\temit DistributedBatch(groupNumber, howMany);\n', "\t\t} else { // We've finished distributing people\n", '\t\t\tsignalDoneDistributing(groupNumber);\n', '\t\t}\n', "\t\ttheGroup.nextDistributionIndex = exclusiveEndIndex; // Usually not necessary if we've finished distribution, but if we don't update this, getHowManyLeftToDistribute will never show 0.\n", '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getHowManyLeftToDistribute(uint256 groupNumber) public view returns(uint256 remainder) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\treturn theGroup.addresses.length - theGroup.nextDistributionIndex;\n', '\t}\n', '\n', '\tfunction changeGroupInfo(uint256 groupNumber, uint256 startEpoch, uint256 phase1endEpoch, uint256 phase2endEpoch, uint256 deadlineEpoch, uint256 phase2weiCap, uint256 phase3weiCap, uint256 hardWeiCap, uint256 ratio) public onlyOwner returns (bool success) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tif (startEpoch > 0) {\n', '\t\t\ttheGroup.startTime = startEpoch;\n', '\t\t}\n', '\t\tif (phase1endEpoch > 0) {\n', '\t\t\ttheGroup.phase1endTime = phase1endEpoch;\n', '\t\t}\n', '\t\tif (phase2endEpoch > 0) {\n', '\t\t\ttheGroup.phase2endTime = phase2endEpoch;\n', '\t\t}\n', '\t\tif (deadlineEpoch > 0) {\n', '\t\t\ttheGroup.deadline = deadlineEpoch;\n', '\t\t}\n', '\t\tif (phase2weiCap > 0) {\n', '\t\t\ttheGroup.max2 = phase2weiCap;\n', '\t\t}\n', '\t\tif (phase3weiCap > 0) {\n', '\t\t\ttheGroup.max3 = phase3weiCap;\n', '\t\t}\n', '\t\tif (hardWeiCap > 0) {\n', '\t\t\ttheGroup.cap = hardWeiCap;\n', '\t\t}\n', '\t\tif (ratio > 0) {\n', '\t\t\ttheGroup.ratio = ratio;\n', '\t\t}\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction relockGroup(uint256 groupNumber) public onlyOwner returns(bool success) {\n', '\t\tgroups[groupNumber].unlocked = true;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction resetGroupInfo(uint256 groupNumber) public onlyOwner returns (bool success) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\ttheGroup.startTime = 0;\n', '\t\ttheGroup.phase1endTime = 0;\n', '\t\ttheGroup.phase2endTime = 0;\n', '\t\ttheGroup.deadline = 0;\n', '\t\ttheGroup.max2 = 0;\n', '\t\ttheGroup.max3 = 0;\n', '\t\ttheGroup.cap = 0;\n', '\t\ttheGroup.ratio = 0;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction unlock(uint256 groupNumber) public onlyOwner returns (bool success) {\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\trequire(theGroup.distributed); // Distribution must have occurred first.\n', '\t\ttheGroup.unlocked = true;\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\tfunction setGlobalLock(bool value) public onlyOwner {\n', '\t\ttransferLock = value;\n', '\t\temit ChangedTransferLock(transferLock);\n', '\t}\n', '\t\n', '\tfunction burn(uint256 amount) public onlyOwner {\n', "\t\t// Burns tokens from the owner's supply and doesn't touch allocated tokens.\n", '\t\t// Decrease totalSupply and leftOver by the amount to burn so we can decrease the circulation.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(amount); // Will throw if result < 0\n', '\t\ttotalSupply_ = totalSupply_.sub(amount); // Will throw if result < 0\n', '\t\temit Transfer(msg.sender, address(0), amount);\n', '\t}\n', '\t\n', '\tfunction splitTokensBeforeDistribution(uint256 splitFactor) public onlyOwner returns (bool success) {\n', '\t\t// SplitFactor is the multiplier per decimal of spark. splitFactor * 10**decimals = splitFactor sparks\n', '\t\tuint256 ownerBalance = balances[msg.sender];\n', '\t\tuint256 multiplier = ownerBalance.mul(splitFactor);\n', '\t\tuint256 increaseSupplyBy = multiplier.sub(ownerBalance); // We need to mint owner*splitFactor - owner additional tokens.\n', '\t\tbalances[msg.sender] = multiplier;\n', '\t\ttotalSupply_ = totalSupply_.mul(splitFactor);\n', "\t\temit Transfer(address(0), msg.sender, increaseSupplyBy); // Notify exchange that we've minted tokens.\n", '\t\t// Next, increase group ratios by splitFactor, so users will receive ratio * splitFactor tokens per ether.\n', '\t\tuint256 n = nextGroupNumber;\n', '\t\trequire(n > 0); // Must have at least one group.\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\tGroup storage currentGroup = groups[i];\n', '\t\t\tcurrentGroup.ratio = currentGroup.ratio.mul(splitFactor);\n', '\t\t}\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction reverseSplitTokensBeforeDistribution(uint256 splitFactor) public onlyOwner returns (bool success) {\n', '\t\t// SplitFactor is the multiplier per decimal of spark. splitFactor * 10**decimals = splitFactor sparks\n', '\t\tuint256 ownerBalance = balances[msg.sender];\n', '\t\tuint256 divier = ownerBalance.div(splitFactor);\n', '\t\tuint256 decreaseSupplyBy = ownerBalance.sub(divier);\n', "\t\t// We don't use burnTokens here since the amount to subtract might be more than what the owner currently holds in their unallocated supply which will cause the function to throw.\n", '\t\ttotalSupply_ = totalSupply_.div(splitFactor);\n', '\t\tbalances[msg.sender] = divier;\n', '\t\t// Notify the exchanges of how many tokens were burned.\n', '\t\temit Transfer(msg.sender, address(0), decreaseSupplyBy);\n', '\t\t// Next, decrease group ratios by splitFactor, so users will receive ratio / splitFactor tokens per ether.\n', '\t\tuint256 n = nextGroupNumber;\n', '\t\trequire(n > 0); // Must have at least one group. Groups are 0-indexed.\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\tGroup storage currentGroup = groups[i];\n', '\t\t\tcurrentGroup.ratio = currentGroup.ratio.div(splitFactor);\n', '\t\t}\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction airdrop( address[] addresses, uint256[] tokenDecimalAmounts) public onlyOwnerOrOracle returns (bool success) {\n', '\t\tuint256 n = addresses.length;\n', '\t\trequire(n == tokenDecimalAmounts.length, "Array lengths mismatch");\n', '\t\tuint256 newOwnerBalance = balances[owner];\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\taddress theAddress = addresses[i];\n', '\t\t\tuint256 airdropAmount = tokenDecimalAmounts[i];\n', '\t\t\tif (airdropAmount > 0) {\n', '\t\t\t\tuint256 currentBalance = balances[theAddress];\n', '\t\t\t\tbalances[theAddress] = currentBalance.add(airdropAmount);\n', '\t\t\t\tnewOwnerBalance = newOwnerBalance.sub(airdropAmount);\n', '\t\t\t\temit Transfer(owner, theAddress, airdropAmount);\n', '\t\t\t}\n', '\t\t}\n', '\t\tbalances[owner] = newOwnerBalance;\n', '\t\temit AirdroppedBatch(addresses);\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction transfer(address _to, uint256 _value) public onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\t\t\n', '\t\t// If the transferrer has purchased tokens, they must be unlocked before they can be used.\n', '\t\tif (msg.sender != owner) { // Owner can transfer anything to anyone.\n', '\t\t\trequire(balances[msg.sender].sub(_value) >= getLockedTokens_(msg.sender));\n', '\t\t}\n', '\t\treturn super.transfer(_to, _value);\n', '\t}\n', '\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3 * 32) canTransfer returns (bool success) {\n', '\t\t// If the transferrer has purchased tokens, they must be unlocked before they can be used.\n', '\t\tif (msg.sender != owner) { // Owner not affected by locked tokens\n', '\t\t\trequire(balances[_from].sub(_value) >= getLockedTokens_(_from));\n', '\t\t}\n', '\t\treturn super.transferFrom(_from, _to, _value);\n', '\t}\n', '\n', '\tfunction setOpenGroup(uint256 groupNumber) public onlyOwner returns (bool success) {\n', '\t\trequire(groupNumber < nextGroupNumber);\n', '\t\topenGroupNumber = groupNumber;\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction getLockedTokensInGroup_(address walletAddress, uint256 groupNumber) internal view returns (uint256 balance) {\n', '\t\tMember storage theMember = members[walletAddress];\n', '\t\tif (groups[groupNumber].unlocked) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\treturn theMember.weiBalance[groupNumber].mul(groups[groupNumber].ratio);\n', '\t}\n', '\n', '\tfunction getLockedTokens_(address walletAddress) internal view returns(uint256 balance) {\n', '\t\tuint256 n = nextGroupNumber;\n', '\t\tfor (uint256 i = 0; i < n; i++) {\n', '\t\t\tbalance = balance.add(getLockedTokensInGroup_(walletAddress, i));\n', '\t\t}\n', '\t\treturn balance;\n', '\t}\n', '\n', '\tfunction getLockedTokens(address walletAddress) public view returns(uint256 balance) {\n', '\t\treturn getLockedTokens_(walletAddress);\n', '\t}\n', '\n', '\tfunction getUndistributedBalanceOf_(address walletAddress, uint256 groupNumber) internal view returns (uint256 balance) {\n', '\t\tMember storage theMember = members[walletAddress];\n', '\t\tGroup storage theGroup = groups[groupNumber];\n', '\t\tif (theGroup.distributed) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\treturn theMember.weiBalance[groupNumber].mul(theGroup.ratio);\n', '\t}\n', '\n', '\tfunction getUndistributedBalanceOf(address walletAddress, uint256 groupNumber) public view returns (uint256 balance) {\n', '\t\treturn getUndistributedBalanceOf_(walletAddress, groupNumber);\n', '\t}\n', '\n', '\tfunction checkMyUndistributedBalance(uint256 groupNumber) public view returns (uint256 balance) {\n', '\t\treturn getUndistributedBalanceOf_(msg.sender, groupNumber);\n', '\t}\n', '\n', '\tfunction transferRecovery(address _from, address _to, uint256 _value) public onlyOwner returns (bool success) {\n', "\t\t// Will be used if someone sends tokens to an incorrect address by accident. This way, we have the ability to recover the tokens. For example, sometimes there's a problem of lost tokens if someone sends tokens to a contract address that can't utilize the tokens.\n", "\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].add(_value); // Authorize the owner to spend on someone's behalf.\n", '\t\treturn transferFrom(_from, _to, _value);\n', '\t}\n', '}']
