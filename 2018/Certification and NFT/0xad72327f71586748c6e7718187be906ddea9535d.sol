['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '\t/**\n', '\t* @dev Multiplies two numbers, throws on overflow.\n', '\t*/\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tuint256 c = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Integer division of two numbers, truncating the quotient.\n', '\t*/\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\tuint256 c = a / b;\n', '\t\t// assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t*/\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds two numbers, throws on overflow.\n', '\t*/\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\taddress public owner;\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\t/**\n', '\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\t * account.\n', '\t */\n', '\tfunction Ownable() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\t * @param newOwner The address to transfer ownership to.\n', '\t */\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\trequire(newOwner != address(0));\n', '\t\tOwnershipTransferred(owner, newOwner);\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\t/**\n', '\t* @dev total number of tokens in existence\n', '\t*/\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\t/**\n', '\t * @dev Transfer tokens from one address to another\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint256 the amount of tokens to be transferred\n', '\t */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t *\n', '\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '\t * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _value The amount of tokens to be spent.\n', '\t */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t * @param _owner address The address which owns the funds.\n', '\t * @param _spender address The address which will spend the funds.\n', '\t * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t */\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To increment\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _addedValue The amount of tokens to increase the allowance by.\n', '\t */\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To decrement\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t */\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title KOIOS\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract KOIOSToken is StandardToken, Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tstring public name = "KOIOS";\n', '\tstring public symbol = "KOI";\n', '\tuint256 public decimals = 5;\n', '\n', '\tuint256 public totalSupply = 1000000000 * (10 ** uint256(decimals));\n', '\n', '\t/**\n', '\t * @dev Constructor that gives msg.sender all of existing tokens.\n', '\t */\n', '\tfunction KOIOSToken(string _name, string _symbol, uint256 _decimals, uint256 _totalSupply) public {\n', '\t\tname = _name;\n', '\t\tsymbol = _symbol;\n', '\t\tdecimals = _decimals;\n', '\t\ttotalSupply = _totalSupply;\n', '\n', '\t\ttotalSupply_ = _totalSupply;\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev if ether is sent to this address, send it back.\n', '\t */\n', '\tfunction () public payable {\n', '\t\trevert();\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title KOIOSTokenSale\n', ' * @dev ICO Contract\n', ' */\n', 'contract KOIOSTokenSale is Ownable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\t// The token being sold, this holds reference to main token contract\n', '\tKOIOSToken public token;\n', '\n', '\t// timestamp when sale starts\n', '\tuint256 public startingTimestamp = 1518696000;\n', '\n', '\t// timestamp when sale ends\n', '\tuint256 public endingTimestamp = 1521115200;\n', '\n', '\t// how many token units a buyer gets per ether\n', '\tuint256 public tokenPriceInEth = 0.0001 ether;\n', '\n', '\t// amount of token to be sold on sale\n', '\tuint256 public tokensForSale = 400000000 * 1E5;\n', '\n', '\t// amount of token sold so far\n', '\tuint256 public totalTokenSold;\n', '\n', '\t// amount of ether raised in sale\n', '\tuint256 public totalEtherRaised;\n', '\n', '\t// ether raised per wallet\n', '\tmapping(address => uint256) public etherRaisedPerWallet;\n', '\n', '\t// wallet which will receive the ether funding\n', '\taddress public wallet;\n', '\n', '\t// is contract close and ended\n', '\tbool internal isClose = false;\n', '\n', '\t// wallet changed\n', '\tevent WalletChange(address _wallet, uint256 _timestamp);\n', '\n', '\t// token purchase event\n', '\tevent TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount, uint256 _timestamp);\n', '\n', '\t// manual transfer by owner for external purchase\n', '\tevent TransferManual(address indexed _from, address indexed _to, uint256 _value, string _message);\n', '\n', '\t/**\n', '\t * @dev Constructor that initializes token contract with token address in parameter\n', '\t *\n', '\t * @param _token Address of Token Contract\n', '\t * @param _startingTimestamp Start time of Sale in Timestamp.\n', '\t * @param _endingTimestamp End time of Sale in Timestamp.\n', '\t * @param _tokensPerEth Number of Tokens to convert per 1 ETH.\n', '\t * @param _tokensForSale Number of Tokens available for sale.\n', '\t * @param _wallet Backup Wallet Address where funds should be transfered when contract is closed or Owner wants to Withdraw.\n', '\t *\n', '\t */\n', '\tfunction KOIOSTokenSale(address _token, uint256 _startingTimestamp, uint256 _endingTimestamp, uint256 _tokensPerEth, uint256 _tokensForSale, address _wallet) public {\n', '\t\t// set token\n', '\t\ttoken = KOIOSToken(_token);\n', '\n', '\t\tstartingTimestamp = _startingTimestamp;\n', '\t\tendingTimestamp = _endingTimestamp;\n', '\t\ttokenPriceInEth =  1E18 / _tokensPerEth; // Calculating Price of 1 Token in ETH \n', '\t\ttokensForSale = _tokensForSale;\n', '\n', '\t\t// set wallet\n', '\t\twallet = _wallet;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function that validates if the purchase is valid by verifying the parameters\n', '\t *\n', '\t * @param value Amount of ethers sent\n', '\t * @param amount Total number of tokens user is trying to buy.\n', '\t *\n', '\t * @return checks various conditions and returns the bool result indicating validity.\n', '\t */\n', '\tfunction isValidPurchase(uint256 value, uint256 amount) internal constant returns (bool) {\n', '\t\t// check if timestamp is falling in the range\n', '\t\tbool validTimestamp = startingTimestamp <= block.timestamp && endingTimestamp >= block.timestamp;\n', '\n', '\t\t// check if value of the ether is valid\n', '\t\tbool validValue = value != 0;\n', '\n', '\t\t// check if rate of the token is clearly defined\n', '\t\tbool validRate = tokenPriceInEth > 0;\n', '\n', '\t\t// check if the tokens available in contract for sale\n', '\t\tbool validAmount = tokensForSale.sub(totalTokenSold) >= amount && amount > 0;\n', '\n', '\t\t// validate if all conditions are met\n', '\t\treturn validTimestamp && validValue && validRate && validAmount && !isClose;\n', '\t}\n', '\n', '\t\n', '\t/**\n', '\t * @dev Function that accepts ether value and returns the token amount\n', '\t *\n', '\t * @param value Amount of ethers sent\n', '\t *\n', '\t * @return checks various conditions and returns the bool result indicating validity.\n', '\t */\n', '\tfunction calculate(uint256 value) public constant returns (uint256) {\n', '\t\tuint256 tokenDecimals = token.decimals();\n', '\t\tuint256 tokens = value.mul(10 ** tokenDecimals).div(tokenPriceInEth);\n', '\t\treturn tokens;\n', '\t}\n', '\t\n', '\t/**\n', '\t * @dev Default fallback method which will be called when any ethers are sent to contract\n', '\t */\n', '\tfunction() public payable {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function that is called either externally or by default payable method\n', '\t *\n', '\t * @param beneficiary who should receive tokens\n', '\t */\n', '\tfunction buyTokens(address beneficiary) public payable {\n', '\t\trequire(beneficiary != address(0));\n', '\n', '\t\t// amount of ethers sent\n', '\t\tuint256 value = msg.value;\n', '\n', '\t\t// calculate token amount from the ethers sent\n', '\t\tuint256 tokens = calculate(value);\n', '\n', '\t\t// validate the purchase\n', '\t\trequire(isValidPurchase(value , tokens));\n', '\n', '\t\t// update the state to log the sold tokens and raised ethers.\n', '\t\ttotalTokenSold = totalTokenSold.add(tokens);\n', '\t\ttotalEtherRaised = totalEtherRaised.add(value);\n', '\t\tetherRaisedPerWallet[msg.sender] = etherRaisedPerWallet[msg.sender].add(value);\n', '\n', '\t\t// transfer tokens from contract balance to beneficiary account. calling ERC223 method\n', '\t\ttoken.transfer(beneficiary, tokens);\n', '\t\t\n', '\t\t// log event for token purchase\n', '\t\tTokenPurchase(msg.sender, beneficiary, value, tokens, now);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transmit token for a specified address. \n', '\t* This is owner only method and should be called using web3.js if someone is trying to buy token using bitcoin or any other altcoin.\n', '\t* \n', '\t* @param _to The address to transmit to.\n', '\t* @param _value The amount to be transferred.\n', '\t* @param _message message to log after transfer.\n', '\t*/\n', '\tfunction transferManual(address _to, uint256 _value, string _message) onlyOwner public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\n', '\t\t// transfer tokens manually from contract balance\n', '\t\ttoken.transfer(_to , _value);\n', '\t\tTransferManual(msg.sender, _to, _value, _message);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev withdraw funds \n', '\t* This will set the withdrawal wallet\n', '\t* \n', '\t* @param _wallet The address to transmit to.\n', '\t*/\t\n', '\tfunction setWallet(address _wallet) onlyOwner public returns(bool) {\n', '\t\t// set wallet \n', '\t\twallet = _wallet;\n', '\t\tWalletChange(_wallet , now);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Method called by owner of contract to withdraw funds\n', '\t*/\n', '\tfunction withdraw() onlyOwner public {\n', '\t\twallet.transfer(this.balance);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev close contract \n', '\t* This will send remaining token balance to owner\n', '\t* This will distribute available funds across team members\n', '\t*/\t\n', '\tfunction close() onlyOwner public {\n', '\t\t// send remaining tokens back to owner.\n', '\t\tuint256 tokens = token.balanceOf(this); \n', '\t\ttoken.transfer(owner , tokens);\n', '\n', '\t\t// withdraw funds \n', '\t\twithdraw();\n', '\n', '\t\t// mark the flag to indicate closure of the contract\n', '\t\tisClose = true;\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title KOIOSTokenPreSale\n', ' * @dev Pre-Sale Contract\n', ' */\n', 'contract KOIOSTokenPreSale is Ownable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\t// The token being sold, this holds reference to main token contract\n', '\tKOIOSToken public token;\n', '\n', '\t// timestamp when sale starts\n', '\tuint256 public startingTimestamp = 1527811200;\n', '\n', '\t// timestamp when sale ends\n', '\tuint256 public endingTimestamp = 1528156799;\n', '\n', '\t// how many token units a buyer gets per ether\n', '\tuint256 public tokenPriceInEth = 0.00005 ether;\n', '\n', '\t// amount of token to be sold on sale\n', '\tuint256 public tokensForSale = 400000000 * 1E5;\n', '\n', '\t// amount of token sold so far\n', '\tuint256 public totalTokenSold;\n', '\n', '\t// amount of ether raised in sale\n', '\tuint256 public totalEtherRaised;\n', '\n', '\t// ether raised per wallet\n', '\tmapping(address => uint256) public etherRaisedPerWallet;\n', '\n', '\t// wallet which will receive the ether funding\n', '\taddress public wallet;\n', '\n', '\t// is contract close and ended\n', '\tbool internal isClose = false;\n', '\n', '\t// wallet changed\n', '\tevent WalletChange(address _wallet, uint256 _timestamp);\n', '\n', '\t// token purchase event\n', '\tevent TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount, uint256 _timestamp);\n', '\n', '\t// manual transfer by owner for external purchase\n', '\tevent TransferManual(address indexed _from, address indexed _to, uint256 _value, string _message);\n', '\n', '\t// Bonus Tokens lockeup for Phase 1\n', '\tmapping(address => uint256) public lockupPhase1;\n', '\tuint256 public phase1Duration = 90 * 86400;\n', '\n', '\t// Bonus Tokens lockeup for Phase 2\n', '\tmapping(address => uint256) public lockupPhase2;\n', '\tuint256 public phase2Duration = 120 * 86400;\n', '\t\n', '\t// Bonus Tokens lockeup for Phase 3\n', '\tmapping(address => uint256) public lockupPhase3;\n', '\tuint256 public phase3Duration = 150 * 86400;\n', '\t\n', '\t// Bonus Tokens lockeup for Phase 4\n', '\tmapping(address => uint256) public lockupPhase4;\n', '\tuint256 public phase4Duration = 180 * 86400;\n', '\n', '\tuint256 public totalLockedBonus; \n', '\n', '\t/**\n', '\t * @dev Constructor that initializes token contract with token address in parameter\n', '\t *\n', '\t * @param _token Address of Token Contract\n', '\t * @param _startingTimestamp Start time of Sale in Timestamp.\n', '\t * @param _endingTimestamp End time of Sale in Timestamp.\n', '\t * @param _tokensPerEth Number of Tokens to convert per 1 ETH.\n', '\t * @param _tokensForSale Number of Tokens available for sale.\n', '\t * @param _wallet Backup Wallet Address where funds should be transfered when contract is closed or Owner wants to Withdraw.\n', '\t *\n', '\t */\n', '\tfunction KOIOSTokenPreSale(address _token, uint256 _startingTimestamp, uint256 _endingTimestamp, uint256 _tokensPerEth, uint256 _tokensForSale, address _wallet) public {\n', '\t\t// set token\n', '\t\ttoken = KOIOSToken(_token);\n', '\n', '\t\tstartingTimestamp = _startingTimestamp;\n', '\t\tendingTimestamp = _endingTimestamp;\n', '\t\ttokenPriceInEth =  1E18 / _tokensPerEth; // Calculating Price of 1 Token in ETH \n', '\t\ttokensForSale = _tokensForSale;\n', '\n', '\t\t// set wallet\n', '\t\twallet = _wallet;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function that validates if the purchase is valid by verifying the parameters\n', '\t *\n', '\t * @param value Amount of ethers sent\n', '\t * @param amount Total number of tokens user is trying to buy.\n', '\t *\n', '\t * @return checks various conditions and returns the bool result indicating validity.\n', '\t */\n', '\tfunction isValidPurchase(uint256 value, uint256 amount) internal constant returns (bool) {\n', '\t\t// check if timestamp is falling in the range\n', '\t\tbool validTimestamp = startingTimestamp <= block.timestamp && endingTimestamp >= block.timestamp;\n', '\n', '\t\t// check if value of the ether is valid\n', '\t\tbool validValue = value != 0;\n', '\n', '\t\t// check if rate of the token is clearly defined\n', '\t\tbool validRate = tokenPriceInEth > 0;\n', '\n', '\t\t// check if the tokens available in contract for sale\n', '\t\tbool validAmount = tokensForSale.sub(totalTokenSold) >= amount && amount > 0;\n', '\n', '\t\t// validate if all conditions are met\n', '\t\treturn validTimestamp && validValue && validRate && validAmount && !isClose;\n', '\t}\n', '\n', '\tfunction getBonus(uint256 _value) internal pure returns (uint256) {\n', '\t\tuint256 bonus = 0; \n', '\t\tif(_value >= 1E18) {\n', '\t\t\tbonus = _value.mul(50).div(1000);\n', '\t\t}if(_value >= 5E18) {\n', '\t\t\tbonus = _value.mul(75).div(1000);\n', '\t\t}if(_value >= 10E18) {\n', '\t\t\tbonus = _value.mul(100).div(1000);\n', '\t\t}if(_value >= 20E18) {\n', '\t\t\tbonus = _value.mul(150).div(1000);\n', '\t\t}if(_value >= 30E18) {\n', '\t\t\tbonus = _value.mul(200).div(1000);\n', '\t\t}\n', '\t\treturn bonus;\n', '\t}\n', '\t\n', '\n', '\t/**\n', '\t * @dev Function that accepts ether value and returns the token amount\n', '\t *\n', '\t * @param value Amount of ethers sent\n', '\t *\n', '\t * @return checks various conditions and returns the bool result indicating validity.\n', '\t */\n', '\tfunction calculate(uint256 value) public constant returns (uint256) {\n', '\t\tuint256 tokenDecimals = token.decimals();\n', '\n', '\t\tuint256 tokens = value.mul(10 ** tokenDecimals).div(tokenPriceInEth);\n', '\t\treturn tokens;\n', '\t}\n', '\n', '\tfunction lockBonus(address _sender, uint bonusTokens) internal returns (bool) {\n', '\t\tuint256 lockedBonus = bonusTokens.div(4);\n', '\n', '\t\tlockupPhase1[_sender] = lockupPhase1[_sender].add(lockedBonus);\n', '\t\tlockupPhase2[_sender] = lockupPhase2[_sender].add(lockedBonus);\n', '\t\tlockupPhase3[_sender] = lockupPhase3[_sender].add(lockedBonus);\n', '\t\tlockupPhase4[_sender] = lockupPhase4[_sender].add(lockedBonus);\n', '\t\ttotalLockedBonus = totalLockedBonus.add(bonusTokens);\n', '\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\t\n', '\t/**\n', '\t * @dev Default fallback method which will be called when any ethers are sent to contract\n', '\t */\n', '\tfunction() public payable {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function that is called either externally or by default payable method\n', '\t *\n', '\t * @param beneficiary who should receive tokens\n', '\t */\n', '\tfunction buyTokens(address beneficiary) public payable {\n', '\t\trequire(beneficiary != address(0));\n', '\n', '\t\t// amount of ethers sent\n', '\t\tuint256 _value = msg.value;\n', '\n', '\t\t// calculate token amount from the ethers sent\n', '\t\tuint256 tokens = calculate(_value);\n', '\n', '\t\t// calculate bonus token amount from the ethers sent\n', '\t\tuint256 bonusTokens = calculate(getBonus(_value));\n', '\n', '\t\tlockBonus(beneficiary, bonusTokens);\n', '\n', '\t\tuint256 _totalTokens = tokens.add(bonusTokens);\n', '            \n', '\t\t// validate the purchase\n', '\t\trequire(isValidPurchase(_value , _totalTokens));\n', '\n', '\t\t// update the state to log the sold tokens and raised ethers.\n', '\t\ttotalTokenSold = totalTokenSold.add(_totalTokens);\n', '\t\ttotalEtherRaised = totalEtherRaised.add(_value);\n', '\t\tetherRaisedPerWallet[msg.sender] = etherRaisedPerWallet[msg.sender].add(_value);\n', '\n', '\t\t// transfer tokens from contract balance to beneficiary account. calling ERC20 method\n', '\t\ttoken.transfer(beneficiary, tokens);\n', '\n', '\t\t\n', '\t\t// log event for token purchase\n', '\t\tTokenPurchase(msg.sender, beneficiary, _value, tokens, now);\n', '\t}\n', '\n', '\tfunction isValidRelease(uint256 amount) internal constant returns (bool) {\n', '\t\t// check if the tokens available in contract for sale\n', '\t\tbool validAmount = amount > 0;\n', '\n', '\t\t// validate if all conditions are met\n', '\t\treturn validAmount;\n', '\t}\n', '\n', '\tfunction releaseBonus() public {\n', '\t\tuint256 releaseTokens = 0;\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase1Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase1[msg.sender]);\n', '\t\t\tlockupPhase1[msg.sender] = 0;\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase2Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase2[msg.sender]);\n', '\t\t\tlockupPhase2[msg.sender] = 0;\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase3Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase3[msg.sender]);\n', '\t\t\tlockupPhase3[msg.sender] = 0;\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase4Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase4[msg.sender]);\n', '\t\t\tlockupPhase4[msg.sender] = 0;\n', '\t\t}\n', '\n', '\t\t// require(isValidRelease(releaseTokens));\n', '\t\ttotalLockedBonus = totalLockedBonus.sub(releaseTokens);\n', '\t\ttoken.transfer(msg.sender, releaseTokens);\n', '\t}\n', '\n', '\tfunction releasableBonus(address _owner) public constant returns (uint256) {\n', '\t\tuint256 releaseTokens = 0;\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase1Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase1[_owner]);\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase2Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase2[_owner]);\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase3Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase3[_owner]);\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase4Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase4[_owner]);\n', '\t\t}\n', '\t\treturn releaseTokens;\t\t\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transmit token for a specified address. \n', '\t* This is owner only method and should be called using web3.js if someone is trying to buy token using bitcoin or any other altcoin.\n', '\t* \n', '\t* @param _to The address to transmit to.\n', '\t* @param _value The amount to be transferred.\n', '\t* @param _message message to log after transfer.\n', '\t*/\n', '\tfunction transferManual(address _to, uint256 _value, string _message) onlyOwner public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\n', '\t\t// transfer tokens manually from contract balance\n', '\t\ttoken.transfer(_to , _value);\n', '\t\tTransferManual(msg.sender, _to, _value, _message);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev withdraw funds \n', '\t* This will set the withdrawal wallet\n', '\t* \n', '\t* @param _wallet The address to transmit to.\n', '\t*/\t\n', '\tfunction setWallet(address _wallet) onlyOwner public returns(bool) {\n', '\t\t// set wallet \n', '\t\twallet = _wallet;\n', '\t\tWalletChange(_wallet , now);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Method called by owner of contract to withdraw funds\n', '\t*/\n', '\tfunction withdraw() onlyOwner public {\n', '\t\twallet.transfer(this.balance);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev close contract \n', '\t* This will send remaining token balance to owner\n', '\t* This will distribute available funds across team members\n', '\t*/\t\n', '\tfunction close() onlyOwner public {\n', '\t\t// send remaining tokens back to owner.\n', '\t\tuint256 tokens = token.balanceOf(this).sub(totalLockedBonus); \n', '\t\ttoken.transfer(owner , tokens);\n', '\n', '\t\t// withdraw funds \n', '\t\twithdraw();\n', '\n', '\t\t// mark the flag to indicate closure of the contract\n', '\t\tisClose = true;\n', '\t}\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '\t/**\n', '\t* @dev Multiplies two numbers, throws on overflow.\n', '\t*/\n', '\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tif (a == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\t\tuint256 c = a * b;\n', '\t\tassert(c / a == b);\n', '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Integer division of two numbers, truncating the quotient.\n', '\t*/\n', '\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n', '\t\tuint256 c = a / b;\n', "\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\t\treturn c;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '\t*/\n', '\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tassert(b <= a);\n', '\t\treturn a - b;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Adds two numbers, throws on overflow.\n', '\t*/\n', '\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '\t\tuint256 c = a + b;\n', '\t\tassert(c >= a);\n', '\t\treturn c;\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\taddress public owner;\n', '\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\t/**\n', '\t * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '\t * account.\n', '\t */\n', '\tfunction Ownable() public {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Throws if called by any account other than the owner.\n', '\t */\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner);\n', '\t\t_;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '\t * @param newOwner The address to transfer ownership to.\n', '\t */\n', '\tfunction transferOwnership(address newOwner) public onlyOwner {\n', '\t\trequire(newOwner != address(0));\n', '\t\tOwnershipTransferred(owner, newOwner);\n', '\t\towner = newOwner;\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '\tfunction totalSupply() public view returns (uint256);\n', '\tfunction balanceOf(address who) public view returns (uint256);\n', '\tfunction transfer(address to, uint256 value) public returns (bool);\n', '\tevent Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '\tfunction allowance(address owner, address spender) public view returns (uint256);\n', '\tfunction transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\tfunction approve(address spender, uint256 value) public returns (bool);\n', '\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '\tusing SafeMath for uint256;\n', '\n', '\tmapping(address => uint256) balances;\n', '\n', '\tuint256 totalSupply_;\n', '\n', '\t/**\n', '\t* @dev total number of tokens in existence\n', '\t*/\n', '\tfunction totalSupply() public view returns (uint256) {\n', '\t\treturn totalSupply_;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transfer token for a specified address\n', '\t* @param _to The address to transfer to.\n', '\t* @param _value The amount to be transferred.\n', '\t*/\n', '\tfunction transfer(address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[msg.sender]);\n', '\n', '\t\t// SafeMath.sub will throw if there is not enough balance.\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tTransfer(msg.sender, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Gets the balance of the specified address.\n', '\t* @param _owner The address to query the the balance of.\n', '\t* @return An uint256 representing the amount owned by the passed address.\n', '\t*/\n', '\tfunction balanceOf(address _owner) public view returns (uint256 balance) {\n', '\t\treturn balances[_owner];\n', '\t}\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '\tmapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '\t/**\n', '\t * @dev Transfer tokens from one address to another\n', '\t * @param _from address The address which you want to send tokens from\n', '\t * @param _to address The address which you want to transfer to\n', '\t * @param _value uint256 the amount of tokens to be transferred\n', '\t */\n', '\tfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\t\trequire(_value <= balances[_from]);\n', '\t\trequire(_value <= allowed[_from][msg.sender]);\n', '\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\tallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\t\tTransfer(_from, _to, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '\t *\n', '\t * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '\t * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "\t * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _value The amount of tokens to be spent.\n', '\t */\n', '\tfunction approve(address _spender, uint256 _value) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = _value;\n', '\t\tApproval(msg.sender, _spender, _value);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '\t * @param _owner address The address which owns the funds.\n', '\t * @param _spender address The address which will spend the funds.\n', '\t * @return A uint256 specifying the amount of tokens still available for the spender.\n', '\t */\n', '\tfunction allowance(address _owner, address _spender) public view returns (uint256) {\n', '\t\treturn allowed[_owner][_spender];\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To increment\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _addedValue The amount of tokens to increase the allowance by.\n', '\t */\n', '\tfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '\t\tallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '\t *\n', '\t * approve should be called when allowed[_spender] == 0. To decrement\n', '\t * allowed value is better to use this function to avoid 2 calls (and wait until\n', '\t * the first transaction is mined)\n', '\t * From MonolithDAO Token.sol\n', '\t * @param _spender The address which will spend the funds.\n', '\t * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '\t */\n', '\tfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '\t\tuint oldValue = allowed[msg.sender][_spender];\n', '\t\tif (_subtractedValue > oldValue) {\n', '\t\t\tallowed[msg.sender][_spender] = 0;\n', '\t\t} else {\n', '\t\t\tallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '\t\t}\n', '\t\tApproval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '\t\treturn true;\n', '\t}\n', '\n', '}\n', '\n', '/**\n', ' * @title KOIOS\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `StandardToken` functions.\n', ' */\n', 'contract KOIOSToken is StandardToken, Ownable {\n', '\tusing SafeMath for uint256;\n', '\n', '\tstring public name = "KOIOS";\n', '\tstring public symbol = "KOI";\n', '\tuint256 public decimals = 5;\n', '\n', '\tuint256 public totalSupply = 1000000000 * (10 ** uint256(decimals));\n', '\n', '\t/**\n', '\t * @dev Constructor that gives msg.sender all of existing tokens.\n', '\t */\n', '\tfunction KOIOSToken(string _name, string _symbol, uint256 _decimals, uint256 _totalSupply) public {\n', '\t\tname = _name;\n', '\t\tsymbol = _symbol;\n', '\t\tdecimals = _decimals;\n', '\t\ttotalSupply = _totalSupply;\n', '\n', '\t\ttotalSupply_ = _totalSupply;\n', '\t\tbalances[msg.sender] = totalSupply;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev if ether is sent to this address, send it back.\n', '\t */\n', '\tfunction () public payable {\n', '\t\trevert();\n', '\t}\n', '}\n', '\n', '/**\n', ' * @title KOIOSTokenSale\n', ' * @dev ICO Contract\n', ' */\n', 'contract KOIOSTokenSale is Ownable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\t// The token being sold, this holds reference to main token contract\n', '\tKOIOSToken public token;\n', '\n', '\t// timestamp when sale starts\n', '\tuint256 public startingTimestamp = 1518696000;\n', '\n', '\t// timestamp when sale ends\n', '\tuint256 public endingTimestamp = 1521115200;\n', '\n', '\t// how many token units a buyer gets per ether\n', '\tuint256 public tokenPriceInEth = 0.0001 ether;\n', '\n', '\t// amount of token to be sold on sale\n', '\tuint256 public tokensForSale = 400000000 * 1E5;\n', '\n', '\t// amount of token sold so far\n', '\tuint256 public totalTokenSold;\n', '\n', '\t// amount of ether raised in sale\n', '\tuint256 public totalEtherRaised;\n', '\n', '\t// ether raised per wallet\n', '\tmapping(address => uint256) public etherRaisedPerWallet;\n', '\n', '\t// wallet which will receive the ether funding\n', '\taddress public wallet;\n', '\n', '\t// is contract close and ended\n', '\tbool internal isClose = false;\n', '\n', '\t// wallet changed\n', '\tevent WalletChange(address _wallet, uint256 _timestamp);\n', '\n', '\t// token purchase event\n', '\tevent TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount, uint256 _timestamp);\n', '\n', '\t// manual transfer by owner for external purchase\n', '\tevent TransferManual(address indexed _from, address indexed _to, uint256 _value, string _message);\n', '\n', '\t/**\n', '\t * @dev Constructor that initializes token contract with token address in parameter\n', '\t *\n', '\t * @param _token Address of Token Contract\n', '\t * @param _startingTimestamp Start time of Sale in Timestamp.\n', '\t * @param _endingTimestamp End time of Sale in Timestamp.\n', '\t * @param _tokensPerEth Number of Tokens to convert per 1 ETH.\n', '\t * @param _tokensForSale Number of Tokens available for sale.\n', '\t * @param _wallet Backup Wallet Address where funds should be transfered when contract is closed or Owner wants to Withdraw.\n', '\t *\n', '\t */\n', '\tfunction KOIOSTokenSale(address _token, uint256 _startingTimestamp, uint256 _endingTimestamp, uint256 _tokensPerEth, uint256 _tokensForSale, address _wallet) public {\n', '\t\t// set token\n', '\t\ttoken = KOIOSToken(_token);\n', '\n', '\t\tstartingTimestamp = _startingTimestamp;\n', '\t\tendingTimestamp = _endingTimestamp;\n', '\t\ttokenPriceInEth =  1E18 / _tokensPerEth; // Calculating Price of 1 Token in ETH \n', '\t\ttokensForSale = _tokensForSale;\n', '\n', '\t\t// set wallet\n', '\t\twallet = _wallet;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function that validates if the purchase is valid by verifying the parameters\n', '\t *\n', '\t * @param value Amount of ethers sent\n', '\t * @param amount Total number of tokens user is trying to buy.\n', '\t *\n', '\t * @return checks various conditions and returns the bool result indicating validity.\n', '\t */\n', '\tfunction isValidPurchase(uint256 value, uint256 amount) internal constant returns (bool) {\n', '\t\t// check if timestamp is falling in the range\n', '\t\tbool validTimestamp = startingTimestamp <= block.timestamp && endingTimestamp >= block.timestamp;\n', '\n', '\t\t// check if value of the ether is valid\n', '\t\tbool validValue = value != 0;\n', '\n', '\t\t// check if rate of the token is clearly defined\n', '\t\tbool validRate = tokenPriceInEth > 0;\n', '\n', '\t\t// check if the tokens available in contract for sale\n', '\t\tbool validAmount = tokensForSale.sub(totalTokenSold) >= amount && amount > 0;\n', '\n', '\t\t// validate if all conditions are met\n', '\t\treturn validTimestamp && validValue && validRate && validAmount && !isClose;\n', '\t}\n', '\n', '\t\n', '\t/**\n', '\t * @dev Function that accepts ether value and returns the token amount\n', '\t *\n', '\t * @param value Amount of ethers sent\n', '\t *\n', '\t * @return checks various conditions and returns the bool result indicating validity.\n', '\t */\n', '\tfunction calculate(uint256 value) public constant returns (uint256) {\n', '\t\tuint256 tokenDecimals = token.decimals();\n', '\t\tuint256 tokens = value.mul(10 ** tokenDecimals).div(tokenPriceInEth);\n', '\t\treturn tokens;\n', '\t}\n', '\t\n', '\t/**\n', '\t * @dev Default fallback method which will be called when any ethers are sent to contract\n', '\t */\n', '\tfunction() public payable {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function that is called either externally or by default payable method\n', '\t *\n', '\t * @param beneficiary who should receive tokens\n', '\t */\n', '\tfunction buyTokens(address beneficiary) public payable {\n', '\t\trequire(beneficiary != address(0));\n', '\n', '\t\t// amount of ethers sent\n', '\t\tuint256 value = msg.value;\n', '\n', '\t\t// calculate token amount from the ethers sent\n', '\t\tuint256 tokens = calculate(value);\n', '\n', '\t\t// validate the purchase\n', '\t\trequire(isValidPurchase(value , tokens));\n', '\n', '\t\t// update the state to log the sold tokens and raised ethers.\n', '\t\ttotalTokenSold = totalTokenSold.add(tokens);\n', '\t\ttotalEtherRaised = totalEtherRaised.add(value);\n', '\t\tetherRaisedPerWallet[msg.sender] = etherRaisedPerWallet[msg.sender].add(value);\n', '\n', '\t\t// transfer tokens from contract balance to beneficiary account. calling ERC223 method\n', '\t\ttoken.transfer(beneficiary, tokens);\n', '\t\t\n', '\t\t// log event for token purchase\n', '\t\tTokenPurchase(msg.sender, beneficiary, value, tokens, now);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transmit token for a specified address. \n', '\t* This is owner only method and should be called using web3.js if someone is trying to buy token using bitcoin or any other altcoin.\n', '\t* \n', '\t* @param _to The address to transmit to.\n', '\t* @param _value The amount to be transferred.\n', '\t* @param _message message to log after transfer.\n', '\t*/\n', '\tfunction transferManual(address _to, uint256 _value, string _message) onlyOwner public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\n', '\t\t// transfer tokens manually from contract balance\n', '\t\ttoken.transfer(_to , _value);\n', '\t\tTransferManual(msg.sender, _to, _value, _message);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev withdraw funds \n', '\t* This will set the withdrawal wallet\n', '\t* \n', '\t* @param _wallet The address to transmit to.\n', '\t*/\t\n', '\tfunction setWallet(address _wallet) onlyOwner public returns(bool) {\n', '\t\t// set wallet \n', '\t\twallet = _wallet;\n', '\t\tWalletChange(_wallet , now);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Method called by owner of contract to withdraw funds\n', '\t*/\n', '\tfunction withdraw() onlyOwner public {\n', '\t\twallet.transfer(this.balance);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev close contract \n', '\t* This will send remaining token balance to owner\n', '\t* This will distribute available funds across team members\n', '\t*/\t\n', '\tfunction close() onlyOwner public {\n', '\t\t// send remaining tokens back to owner.\n', '\t\tuint256 tokens = token.balanceOf(this); \n', '\t\ttoken.transfer(owner , tokens);\n', '\n', '\t\t// withdraw funds \n', '\t\twithdraw();\n', '\n', '\t\t// mark the flag to indicate closure of the contract\n', '\t\tisClose = true;\n', '\t}\n', '}\n', '\n', '\n', '/**\n', ' * @title KOIOSTokenPreSale\n', ' * @dev Pre-Sale Contract\n', ' */\n', 'contract KOIOSTokenPreSale is Ownable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\t// The token being sold, this holds reference to main token contract\n', '\tKOIOSToken public token;\n', '\n', '\t// timestamp when sale starts\n', '\tuint256 public startingTimestamp = 1527811200;\n', '\n', '\t// timestamp when sale ends\n', '\tuint256 public endingTimestamp = 1528156799;\n', '\n', '\t// how many token units a buyer gets per ether\n', '\tuint256 public tokenPriceInEth = 0.00005 ether;\n', '\n', '\t// amount of token to be sold on sale\n', '\tuint256 public tokensForSale = 400000000 * 1E5;\n', '\n', '\t// amount of token sold so far\n', '\tuint256 public totalTokenSold;\n', '\n', '\t// amount of ether raised in sale\n', '\tuint256 public totalEtherRaised;\n', '\n', '\t// ether raised per wallet\n', '\tmapping(address => uint256) public etherRaisedPerWallet;\n', '\n', '\t// wallet which will receive the ether funding\n', '\taddress public wallet;\n', '\n', '\t// is contract close and ended\n', '\tbool internal isClose = false;\n', '\n', '\t// wallet changed\n', '\tevent WalletChange(address _wallet, uint256 _timestamp);\n', '\n', '\t// token purchase event\n', '\tevent TokenPurchase(address indexed _purchaser, address indexed _beneficiary, uint256 _value, uint256 _amount, uint256 _timestamp);\n', '\n', '\t// manual transfer by owner for external purchase\n', '\tevent TransferManual(address indexed _from, address indexed _to, uint256 _value, string _message);\n', '\n', '\t// Bonus Tokens lockeup for Phase 1\n', '\tmapping(address => uint256) public lockupPhase1;\n', '\tuint256 public phase1Duration = 90 * 86400;\n', '\n', '\t// Bonus Tokens lockeup for Phase 2\n', '\tmapping(address => uint256) public lockupPhase2;\n', '\tuint256 public phase2Duration = 120 * 86400;\n', '\t\n', '\t// Bonus Tokens lockeup for Phase 3\n', '\tmapping(address => uint256) public lockupPhase3;\n', '\tuint256 public phase3Duration = 150 * 86400;\n', '\t\n', '\t// Bonus Tokens lockeup for Phase 4\n', '\tmapping(address => uint256) public lockupPhase4;\n', '\tuint256 public phase4Duration = 180 * 86400;\n', '\n', '\tuint256 public totalLockedBonus; \n', '\n', '\t/**\n', '\t * @dev Constructor that initializes token contract with token address in parameter\n', '\t *\n', '\t * @param _token Address of Token Contract\n', '\t * @param _startingTimestamp Start time of Sale in Timestamp.\n', '\t * @param _endingTimestamp End time of Sale in Timestamp.\n', '\t * @param _tokensPerEth Number of Tokens to convert per 1 ETH.\n', '\t * @param _tokensForSale Number of Tokens available for sale.\n', '\t * @param _wallet Backup Wallet Address where funds should be transfered when contract is closed or Owner wants to Withdraw.\n', '\t *\n', '\t */\n', '\tfunction KOIOSTokenPreSale(address _token, uint256 _startingTimestamp, uint256 _endingTimestamp, uint256 _tokensPerEth, uint256 _tokensForSale, address _wallet) public {\n', '\t\t// set token\n', '\t\ttoken = KOIOSToken(_token);\n', '\n', '\t\tstartingTimestamp = _startingTimestamp;\n', '\t\tendingTimestamp = _endingTimestamp;\n', '\t\ttokenPriceInEth =  1E18 / _tokensPerEth; // Calculating Price of 1 Token in ETH \n', '\t\ttokensForSale = _tokensForSale;\n', '\n', '\t\t// set wallet\n', '\t\twallet = _wallet;\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function that validates if the purchase is valid by verifying the parameters\n', '\t *\n', '\t * @param value Amount of ethers sent\n', '\t * @param amount Total number of tokens user is trying to buy.\n', '\t *\n', '\t * @return checks various conditions and returns the bool result indicating validity.\n', '\t */\n', '\tfunction isValidPurchase(uint256 value, uint256 amount) internal constant returns (bool) {\n', '\t\t// check if timestamp is falling in the range\n', '\t\tbool validTimestamp = startingTimestamp <= block.timestamp && endingTimestamp >= block.timestamp;\n', '\n', '\t\t// check if value of the ether is valid\n', '\t\tbool validValue = value != 0;\n', '\n', '\t\t// check if rate of the token is clearly defined\n', '\t\tbool validRate = tokenPriceInEth > 0;\n', '\n', '\t\t// check if the tokens available in contract for sale\n', '\t\tbool validAmount = tokensForSale.sub(totalTokenSold) >= amount && amount > 0;\n', '\n', '\t\t// validate if all conditions are met\n', '\t\treturn validTimestamp && validValue && validRate && validAmount && !isClose;\n', '\t}\n', '\n', '\tfunction getBonus(uint256 _value) internal pure returns (uint256) {\n', '\t\tuint256 bonus = 0; \n', '\t\tif(_value >= 1E18) {\n', '\t\t\tbonus = _value.mul(50).div(1000);\n', '\t\t}if(_value >= 5E18) {\n', '\t\t\tbonus = _value.mul(75).div(1000);\n', '\t\t}if(_value >= 10E18) {\n', '\t\t\tbonus = _value.mul(100).div(1000);\n', '\t\t}if(_value >= 20E18) {\n', '\t\t\tbonus = _value.mul(150).div(1000);\n', '\t\t}if(_value >= 30E18) {\n', '\t\t\tbonus = _value.mul(200).div(1000);\n', '\t\t}\n', '\t\treturn bonus;\n', '\t}\n', '\t\n', '\n', '\t/**\n', '\t * @dev Function that accepts ether value and returns the token amount\n', '\t *\n', '\t * @param value Amount of ethers sent\n', '\t *\n', '\t * @return checks various conditions and returns the bool result indicating validity.\n', '\t */\n', '\tfunction calculate(uint256 value) public constant returns (uint256) {\n', '\t\tuint256 tokenDecimals = token.decimals();\n', '\n', '\t\tuint256 tokens = value.mul(10 ** tokenDecimals).div(tokenPriceInEth);\n', '\t\treturn tokens;\n', '\t}\n', '\n', '\tfunction lockBonus(address _sender, uint bonusTokens) internal returns (bool) {\n', '\t\tuint256 lockedBonus = bonusTokens.div(4);\n', '\n', '\t\tlockupPhase1[_sender] = lockupPhase1[_sender].add(lockedBonus);\n', '\t\tlockupPhase2[_sender] = lockupPhase2[_sender].add(lockedBonus);\n', '\t\tlockupPhase3[_sender] = lockupPhase3[_sender].add(lockedBonus);\n', '\t\tlockupPhase4[_sender] = lockupPhase4[_sender].add(lockedBonus);\n', '\t\ttotalLockedBonus = totalLockedBonus.add(bonusTokens);\n', '\n', '\t\treturn true;\n', '\t}\n', '\t\n', '\t\n', '\t/**\n', '\t * @dev Default fallback method which will be called when any ethers are sent to contract\n', '\t */\n', '\tfunction() public payable {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Function that is called either externally or by default payable method\n', '\t *\n', '\t * @param beneficiary who should receive tokens\n', '\t */\n', '\tfunction buyTokens(address beneficiary) public payable {\n', '\t\trequire(beneficiary != address(0));\n', '\n', '\t\t// amount of ethers sent\n', '\t\tuint256 _value = msg.value;\n', '\n', '\t\t// calculate token amount from the ethers sent\n', '\t\tuint256 tokens = calculate(_value);\n', '\n', '\t\t// calculate bonus token amount from the ethers sent\n', '\t\tuint256 bonusTokens = calculate(getBonus(_value));\n', '\n', '\t\tlockBonus(beneficiary, bonusTokens);\n', '\n', '\t\tuint256 _totalTokens = tokens.add(bonusTokens);\n', '            \n', '\t\t// validate the purchase\n', '\t\trequire(isValidPurchase(_value , _totalTokens));\n', '\n', '\t\t// update the state to log the sold tokens and raised ethers.\n', '\t\ttotalTokenSold = totalTokenSold.add(_totalTokens);\n', '\t\ttotalEtherRaised = totalEtherRaised.add(_value);\n', '\t\tetherRaisedPerWallet[msg.sender] = etherRaisedPerWallet[msg.sender].add(_value);\n', '\n', '\t\t// transfer tokens from contract balance to beneficiary account. calling ERC20 method\n', '\t\ttoken.transfer(beneficiary, tokens);\n', '\n', '\t\t\n', '\t\t// log event for token purchase\n', '\t\tTokenPurchase(msg.sender, beneficiary, _value, tokens, now);\n', '\t}\n', '\n', '\tfunction isValidRelease(uint256 amount) internal constant returns (bool) {\n', '\t\t// check if the tokens available in contract for sale\n', '\t\tbool validAmount = amount > 0;\n', '\n', '\t\t// validate if all conditions are met\n', '\t\treturn validAmount;\n', '\t}\n', '\n', '\tfunction releaseBonus() public {\n', '\t\tuint256 releaseTokens = 0;\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase1Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase1[msg.sender]);\n', '\t\t\tlockupPhase1[msg.sender] = 0;\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase2Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase2[msg.sender]);\n', '\t\t\tlockupPhase2[msg.sender] = 0;\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase3Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase3[msg.sender]);\n', '\t\t\tlockupPhase3[msg.sender] = 0;\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase4Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase4[msg.sender]);\n', '\t\t\tlockupPhase4[msg.sender] = 0;\n', '\t\t}\n', '\n', '\t\t// require(isValidRelease(releaseTokens));\n', '\t\ttotalLockedBonus = totalLockedBonus.sub(releaseTokens);\n', '\t\ttoken.transfer(msg.sender, releaseTokens);\n', '\t}\n', '\n', '\tfunction releasableBonus(address _owner) public constant returns (uint256) {\n', '\t\tuint256 releaseTokens = 0;\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase1Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase1[_owner]);\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase2Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase2[_owner]);\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase3Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase3[_owner]);\n', '\t\t}\n', '\t\tif(block.timestamp > (startingTimestamp.add(phase4Duration)))\n', '\t\t{\n', '\t\t\treleaseTokens = releaseTokens.add(lockupPhase4[_owner]);\n', '\t\t}\n', '\t\treturn releaseTokens;\t\t\n', '\t}\n', '\n', '\t/**\n', '\t* @dev transmit token for a specified address. \n', '\t* This is owner only method and should be called using web3.js if someone is trying to buy token using bitcoin or any other altcoin.\n', '\t* \n', '\t* @param _to The address to transmit to.\n', '\t* @param _value The amount to be transferred.\n', '\t* @param _message message to log after transfer.\n', '\t*/\n', '\tfunction transferManual(address _to, uint256 _value, string _message) onlyOwner public returns (bool) {\n', '\t\trequire(_to != address(0));\n', '\n', '\t\t// transfer tokens manually from contract balance\n', '\t\ttoken.transfer(_to , _value);\n', '\t\tTransferManual(msg.sender, _to, _value, _message);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev withdraw funds \n', '\t* This will set the withdrawal wallet\n', '\t* \n', '\t* @param _wallet The address to transmit to.\n', '\t*/\t\n', '\tfunction setWallet(address _wallet) onlyOwner public returns(bool) {\n', '\t\t// set wallet \n', '\t\twallet = _wallet;\n', '\t\tWalletChange(_wallet , now);\n', '\t\treturn true;\n', '\t}\n', '\n', '\t/**\n', '\t* @dev Method called by owner of contract to withdraw funds\n', '\t*/\n', '\tfunction withdraw() onlyOwner public {\n', '\t\twallet.transfer(this.balance);\n', '\t}\n', '\n', '\t/**\n', '\t* @dev close contract \n', '\t* This will send remaining token balance to owner\n', '\t* This will distribute available funds across team members\n', '\t*/\t\n', '\tfunction close() onlyOwner public {\n', '\t\t// send remaining tokens back to owner.\n', '\t\tuint256 tokens = token.balanceOf(this).sub(totalLockedBonus); \n', '\t\ttoken.transfer(owner , tokens);\n', '\n', '\t\t// withdraw funds \n', '\t\twithdraw();\n', '\n', '\t\t// mark the flag to indicate closure of the contract\n', '\t\tisClose = true;\n', '\t}\n', '}']
