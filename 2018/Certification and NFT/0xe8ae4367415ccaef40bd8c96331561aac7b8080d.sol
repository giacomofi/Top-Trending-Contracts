['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract Hive is ERC20 {\n', '\n', '    using SafeMath for uint;\n', '    string public constant name = "UHIVE";\n', '    string public constant symbol = "HVE";    \n', '    uint256 public constant decimals = 18;\n', '    uint256 _totalSupply = 80000000000 * (10**decimals);\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // Owner of this contract\n', '    address public owner;\n', '\n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function isFrozenAccount(address _addr) public constant returns (bool) {\n', '        return frozenAccount[_addr];\n', '    }\n', '\n', '    function destroyCoins(address addressToDestroy, uint256 amount) onlyOwner public {\n', '        require(addressToDestroy != address(0));\n', '        require(amount > 0);\n', '        require(amount <= balances[addressToDestroy]);\n', '        balances[addressToDestroy] -= amount;    \n', '        _totalSupply -= amount;\n', '    }\n', '\n', '    // Constructor\n', '    function Hive() public {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256 supply) {\n', '        supply = _totalSupply;\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', '    // Transfer the balance from owner&#39;s account to another account\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {        \n', '        if (_to != address(0) && isFrozenAccount(msg.sender) == false && balances[msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from,address _to, uint256 _value) public returns (bool success) {\n', '        if (_to != address(0) && isFrozenAccount(_from) == false && balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\n', '            balances[_from] = balances[_from].sub(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '}\n', '\n', 'contract HivePreSale {\n', '\n', '    using SafeMath for uint256;\n', '    // The token being sold\n', '    Hive public token;\n', '\n', '    // Address where funds are collected\n', '    address public vaultWallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public hivePerEther;\n', '\n', '    // How much hive cost per USD\n', '    uint256 public hivePerUSD;\n', '\n', '    // Owner of this contract\n', '    address public owner;\n', '\n', '    //Flag paused sale\n', '    bool public paused;\n', '\n', '    uint256 public openingTime;\n', '    uint256 public closingTime;\n', '\n', '    uint256 public minimumWei;\n', '\n', '    /**\n', '    * @dev Reverts if not in crowdsale time range. \n', '    */\n', '    modifier onlyWhileOpen {\n', '        require(now >= openingTime && now <= closingTime && paused == false);\n', '        _;\n', '    }\n', '\n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function HivePreSale(uint256 _hivePerEther, address _vaultWallet, Hive _token, uint256 _openingTime, uint256 _closingTime) public {\n', '        hivePerEther = _hivePerEther;\n', '        vaultWallet = _vaultWallet;\n', '        token = _token;\n', '        owner = msg.sender;\n', '        openingTime = _openingTime;\n', '        closingTime = _closingTime;\n', '        paused = false;\n', '        hivePerUSD = 667; //each hive is 0.0015$\n', '        minimumWei = 100000000000000000; //0.1 Ether\n', '    }\n', '\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '    * @return Whether crowdsale period has elapsed\n', '    */\n', '    function hasClosed() public view returns (bool) {\n', '        return now > closingTime;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev low level token purchase ***DO NOT OVERRIDE***\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) public payable onlyWhileOpen {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        _verifyAvailability(tokens);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '        _forwardFunds();\n', '    }\n', '\n', '    function changeRate(uint256 _newRate) onlyOwner public {\n', '        require(_newRate > 0);\n', '        hivePerEther = _newRate;\n', '    }\n', '\n', '    function changeMinimumWei(uint256 _newMinimumWei) onlyOwner public {        \n', '        minimumWei = _newMinimumWei;\n', '    }\n', '\n', '    function extendSale(uint256 _newClosingTime) onlyOwner public {\n', '        require(_newClosingTime > closingTime);\n', '        closingTime = _newClosingTime;\n', '    }\n', '\n', '    function haltSale() onlyOwner public {\n', '        paused = true;\n', '    }\n', '\n', '    function resumeSale() onlyOwner public {\n', '        paused = false;\n', '    }\n', '\n', '    //Called from outside to auto handle BTC and FIAT purchases\n', '    function forwardTokens(address _beneficiary, uint256 totalTokens) onlyOwner onlyWhileOpen public {        \n', '        _preValidateTokenTransfer(_beneficiary, totalTokens);\n', '        _deliverTokens(_beneficiary, totalTokens);\n', '    }\n', '\n', '    function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function changeVaultWallet(address _newVaultWallet) onlyOwner public {\n', '        require(_newVaultWallet != address(0));\n', '        vaultWallet = _newVaultWallet;\n', '    }\n', '\n', '    //Called after the sale ends to withdraw remaining unsold tokens\n', '    function withdrawUnsoldTokens() onlyOwner public {    \n', '        uint256 unsold = token.balanceOf(this);\n', '        token.transfer(owner, unsold);\n', '    }\n', '\n', '    function terminate() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '    * @dev Validation of an incoming purchase.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\n', '        require(hasClosed() == false);\n', '        require(paused == false);\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount >= minimumWei);\n', '    }\n', '\n', '    /**\n', '    * @dev Validation of a token transfer, used with BTC purchase.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number to tokens to transfer\n', '    */\n', '    function _preValidateTokenTransfer(address _beneficiary, uint256 _tokenAmount) internal view {\n', '        require(hasClosed() == false);\n', '        require(paused == false);\n', '        require(_beneficiary != address(0));\n', '        require(_tokenAmount > 0);\n', '    }\n', '\n', '    /**\n', '    * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) private {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokenAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) private {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '  \n', '\n', '    /**\n', '    * @dev Override to extend the way in which ether is converted to tokens.\n', '    * @param _weiAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _weiAmount\n', '    */\n', '    function _getTokenAmount(uint256 _weiAmount) private view returns (uint256) {\n', '        return _weiAmount.mul(hivePerEther);\n', '    }\n', '\n', '    /**\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() private {\n', '        vaultWallet.transfer(msg.value);\n', '    }\n', '\n', '    function _verifyAvailability(uint256 _requestedAmount) private view {\n', '        uint256 remaining = token.balanceOf(this);\n', '        require(remaining >= _requestedAmount);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'contract Hive is ERC20 {\n', '\n', '    using SafeMath for uint;\n', '    string public constant name = "UHIVE";\n', '    string public constant symbol = "HVE";    \n', '    uint256 public constant decimals = 18;\n', '    uint256 _totalSupply = 80000000000 * (10**decimals);\n', '\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    // Owner of this contract\n', '    address public owner;\n', '\n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    function isFrozenAccount(address _addr) public constant returns (bool) {\n', '        return frozenAccount[_addr];\n', '    }\n', '\n', '    function destroyCoins(address addressToDestroy, uint256 amount) onlyOwner public {\n', '        require(addressToDestroy != address(0));\n', '        require(amount > 0);\n', '        require(amount <= balances[addressToDestroy]);\n', '        balances[addressToDestroy] -= amount;    \n', '        _totalSupply -= amount;\n', '    }\n', '\n', '    // Constructor\n', '    function Hive() public {\n', '        owner = msg.sender;\n', '        balances[owner] = _totalSupply;\n', '    }\n', '\n', '    function totalSupply() public constant returns (uint256 supply) {\n', '        supply = _totalSupply;\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '    \n', "    // Transfer the balance from owner's account to another account\n", '    function transfer(address _to, uint256 _value) public returns (bool success) {        \n', '        if (_to != address(0) && isFrozenAccount(msg.sender) == false && balances[msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\n', '            balances[msg.sender] = balances[msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Send _value amount of tokens from address _from to address _to\n', '    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n', '    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge\n', '    // fees in sub-currencies; the command should fail unless the _from account has\n', '    // deliberately authorized the sender of the message via some mechanism; we propose\n', '    // these standardized APIs for approval:\n', '    function transferFrom(address _from,address _to, uint256 _value) public returns (bool success) {\n', '        if (_to != address(0) && isFrozenAccount(_from) == false && balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0 && balances[_to].add(_value) > balances[_to]) {\n', '            balances[_from] = balances[_from].sub(_value);\n', '            allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '            balances[_to] = balances[_to].add(_value);\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n', '    // If this function is called again it overwrites the current allowance with _value.\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '}\n', '\n', 'contract HivePreSale {\n', '\n', '    using SafeMath for uint256;\n', '    // The token being sold\n', '    Hive public token;\n', '\n', '    // Address where funds are collected\n', '    address public vaultWallet;\n', '\n', '    // How many token units a buyer gets per wei\n', '    uint256 public hivePerEther;\n', '\n', '    // How much hive cost per USD\n', '    uint256 public hivePerUSD;\n', '\n', '    // Owner of this contract\n', '    address public owner;\n', '\n', '    //Flag paused sale\n', '    bool public paused;\n', '\n', '    uint256 public openingTime;\n', '    uint256 public closingTime;\n', '\n', '    uint256 public minimumWei;\n', '\n', '    /**\n', '    * @dev Reverts if not in crowdsale time range. \n', '    */\n', '    modifier onlyWhileOpen {\n', '        require(now >= openingTime && now <= closingTime && paused == false);\n', '        _;\n', '    }\n', '\n', '    // Functions with this modifier can only be executed by the owner\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function HivePreSale(uint256 _hivePerEther, address _vaultWallet, Hive _token, uint256 _openingTime, uint256 _closingTime) public {\n', '        hivePerEther = _hivePerEther;\n', '        vaultWallet = _vaultWallet;\n', '        token = _token;\n', '        owner = msg.sender;\n', '        openingTime = _openingTime;\n', '        closingTime = _closingTime;\n', '        paused = false;\n', '        hivePerUSD = 667; //each hive is 0.0015$\n', '        minimumWei = 100000000000000000; //0.1 Ether\n', '    }\n', '\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '    \n', '    /**\n', '    * Event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '    * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '    * @return Whether crowdsale period has elapsed\n', '    */\n', '    function hasClosed() public view returns (bool) {\n', '        return now > closingTime;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev low level token purchase ***DO NOT OVERRIDE***\n', '    * @param _beneficiary Address performing the token purchase\n', '    */\n', '    function buyTokens(address _beneficiary) public payable onlyWhileOpen {\n', '\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '        _verifyAvailability(tokens);\n', '\n', '        _processPurchase(_beneficiary, tokens);\n', '        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '        _forwardFunds();\n', '    }\n', '\n', '    function changeRate(uint256 _newRate) onlyOwner public {\n', '        require(_newRate > 0);\n', '        hivePerEther = _newRate;\n', '    }\n', '\n', '    function changeMinimumWei(uint256 _newMinimumWei) onlyOwner public {        \n', '        minimumWei = _newMinimumWei;\n', '    }\n', '\n', '    function extendSale(uint256 _newClosingTime) onlyOwner public {\n', '        require(_newClosingTime > closingTime);\n', '        closingTime = _newClosingTime;\n', '    }\n', '\n', '    function haltSale() onlyOwner public {\n', '        paused = true;\n', '    }\n', '\n', '    function resumeSale() onlyOwner public {\n', '        paused = false;\n', '    }\n', '\n', '    //Called from outside to auto handle BTC and FIAT purchases\n', '    function forwardTokens(address _beneficiary, uint256 totalTokens) onlyOwner onlyWhileOpen public {        \n', '        _preValidateTokenTransfer(_beneficiary, totalTokens);\n', '        _deliverTokens(_beneficiary, totalTokens);\n', '    }\n', '\n', '    function changeOwner(address _newOwner) onlyOwner public {\n', '        require(_newOwner != address(0));\n', '        owner = _newOwner;\n', '    }\n', '\n', '    function changeVaultWallet(address _newVaultWallet) onlyOwner public {\n', '        require(_newVaultWallet != address(0));\n', '        vaultWallet = _newVaultWallet;\n', '    }\n', '\n', '    //Called after the sale ends to withdraw remaining unsold tokens\n', '    function withdrawUnsoldTokens() onlyOwner public {    \n', '        uint256 unsold = token.balanceOf(this);\n', '        token.transfer(owner, unsold);\n', '    }\n', '\n', '    function terminate() public onlyOwner {\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    // -----------------------------------------\n', '    // Internal interface (extensible)\n', '    // -----------------------------------------\n', '\n', '    /**\n', '    * @dev Validation of an incoming purchase.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _weiAmount Value in wei involved in the purchase\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal view {\n', '        require(hasClosed() == false);\n', '        require(paused == false);\n', '        require(_beneficiary != address(0));\n', '        require(_weiAmount >= minimumWei);\n', '    }\n', '\n', '    /**\n', '    * @dev Validation of a token transfer, used with BTC purchase.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number to tokens to transfer\n', '    */\n', '    function _preValidateTokenTransfer(address _beneficiary, uint256 _tokenAmount) internal view {\n', '        require(hasClosed() == false);\n', '        require(paused == false);\n', '        require(_beneficiary != address(0));\n', '        require(_tokenAmount > 0);\n', '    }\n', '\n', '    /**\n', '    * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '    * @param _beneficiary Address performing the token purchase\n', '    * @param _tokenAmount Number of tokens to be emitted\n', '    */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) private {\n', '        token.transfer(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '    * @param _beneficiary Address receiving the tokens\n', '    * @param _tokenAmount Number of tokens to be purchased\n', '    */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) private {\n', '        _deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '  \n', '\n', '    /**\n', '    * @dev Override to extend the way in which ether is converted to tokens.\n', '    * @param _weiAmount Value in wei to be converted into tokens\n', '    * @return Number of tokens that can be purchased with the specified _weiAmount\n', '    */\n', '    function _getTokenAmount(uint256 _weiAmount) private view returns (uint256) {\n', '        return _weiAmount.mul(hivePerEther);\n', '    }\n', '\n', '    /**\n', '    * @dev Determines how ETH is stored/forwarded on purchases.\n', '    */\n', '    function _forwardFunds() private {\n', '        vaultWallet.transfer(msg.value);\n', '    }\n', '\n', '    function _verifyAvailability(uint256 _requestedAmount) private view {\n', '        uint256 remaining = token.balanceOf(this);\n', '        require(remaining >= _requestedAmount);\n', '    }\n', '}']
