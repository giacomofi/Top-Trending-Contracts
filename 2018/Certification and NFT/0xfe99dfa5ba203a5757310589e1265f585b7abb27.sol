['pragma solidity ^0.4.18;\n', '\n', 'interface token {\n', '    function    transfer(address _to, uint256 _value) public returns (bool success);\n', '    function    burn( uint256 value ) public returns ( bool success );\n', '    function    balanceOf( address user ) public view returns ( uint256 );\n', '}\n', '\n', 'contract Crowdsale {\n', '    address     public beneficiary;\n', '    uint        public amountRaised;\n', '    uint        public price;\n', '    token       public tokenReward;\n', '    uint        public excess;\n', '\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    bool    public crowdsaleClosed = false;\n', '    bool    public crowdsaleSuccess = false;\n', '\n', '    event   GoalReached(address recipient, uint totalAmountRaised, bool crowdsaleSuccess);\n', '    event   FundTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    /**\n', '     * Constrctor function\n', '     *\n', '     * Setup the owner\n', '     */\n', '    function    Crowdsale( ) public {\n', '        beneficiary = msg.sender;\n', '        price = 0.1 ether;\n', '        tokenReward = token(0x5a2dacf2D90a89B3D135c7691A74d25Afb5F7Fb7);\n', '    }\n', '\n', '    /**\n', '    * Fallback function\n', '    *\n', '    * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '    */\n', '    function () public payable {\n', '        require(!crowdsaleClosed);\n', '\n', '        uint amount = msg.value;\n', '        tokenReward.transfer(msg.sender, amount / price);\n', '        excess += amount % price;\n', '        balanceOf[msg.sender] = balanceOf[msg.sender] + amount - excess;\n', '        amountRaised = amountRaised + amount - excess;\n', '        FundTransfer(msg.sender, amount, true);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == beneficiary);\n', '        _;\n', '    }\n', '\n', '    function goalManagment(bool statement) public onlyOwner {\n', '        require(crowdsaleClosed == false);    \n', '        crowdsaleClosed = true;\n', '        crowdsaleSuccess = statement;\n', '        GoalReached(beneficiary, amountRaised, crowdsaleSuccess);\n', '    }\n', '\n', '    /**\n', '    * Withdraw the funds\n', '    *\n', '    * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '    * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n', '    * the amount they contributed.\n', '    */\n', '    function    withdrawalMoneyBack() public {\n', '        uint    amount;\n', '\n', '        if (crowdsaleClosed == true && crowdsaleSuccess == false) {\n', '            amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            amountRaised -= amount;\n', '            msg.sender.transfer(amount);\n', '            FundTransfer(msg.sender, amount, false);\n', '        }\n', '    }\n', '\n', '    function    withdrawalOwner() public onlyOwner {\n', '        if (crowdsaleSuccess == true && crowdsaleClosed == true) {\n', '            beneficiary.transfer(amountRaised);\n', '            FundTransfer(beneficiary, amountRaised, false);\n', '            burnToken();\n', '        }\n', '    }\n', '\n', '    function takeExcess () public onlyOwner {\n', '        require(excess > 0);\n', '        beneficiary.transfer(excess);\n', '        excess = 0;\n', '        FundTransfer(beneficiary, excess, false);\n', '    }\n', '\n', '    function    burnToken() private {\n', '        uint amount;\n', '\n', '        amount = tokenReward.balanceOf(this);\n', '        tokenReward.burn(amount);\n', '    }\n', '}']