['pragma solidity 0.4.24;\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting. \n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '// File: contracts/PostKYCCrowdsale.sol\n', '\n', '/// @title PostKYCCrowdsale\n', '/// @author Sicos et al.\n', 'contract PostKYCCrowdsale is Crowdsale, Ownable {\n', '\n', '    struct Investment {\n', '        bool isVerified;         // wether or not the investor passed the KYC process\n', '        uint totalWeiInvested;   // total invested wei regardless of verification state\n', '        // amount of token an unverified investor bought. should be zero for verified investors\n', '        uint pendingTokenAmount;\n', '    }\n', '\n', '    // total amount of wei held by unverified investors should never be larger than this.balance\n', '    uint public pendingWeiAmount = 0;\n', '\n', '    // maps investor addresses to investment information\n', '    mapping(address => Investment) public investments;\n', '\n', '    /// @dev Log entry on investor verified\n', '    /// @param investor the investor&#39;s Ethereum address\n', '    event InvestorVerified(address investor);\n', '\n', '    /// @dev Log entry on tokens delivered\n', '    /// @param investor the investor&#39;s Ethereum address\n', '    /// @param amount token amount delivered\n', '    event TokensDelivered(address investor, uint amount);\n', '\n', '    /// @dev Log entry on investment withdrawn\n', '    /// @param investor the investor&#39;s Ethereum address\n', '    /// @param value the wei amount withdrawn\n', '    event InvestmentWithdrawn(address investor, uint value);\n', '\n', '    /// @dev Verify investors\n', '    /// @param _investors list of investors&#39; Ethereum addresses\n', '    function verifyInvestors(address[] _investors) public onlyOwner {\n', '        for (uint i = 0; i < _investors.length; ++i) {\n', '            address investor = _investors[i];\n', '            Investment storage investment = investments[investor];\n', '\n', '            if (!investment.isVerified) {\n', '                investment.isVerified = true;\n', '\n', '                emit InvestorVerified(investor);\n', '\n', '                uint pendingTokenAmount = investment.pendingTokenAmount;\n', '                // now we issue tokens to the verfied investor\n', '                if (pendingTokenAmount > 0) {\n', '                    investment.pendingTokenAmount = 0;\n', '\n', '                    _forwardFunds(investment.totalWeiInvested);\n', '                    _deliverTokens(investor, pendingTokenAmount);\n', '\n', '                    emit TokensDelivered(investor, pendingTokenAmount);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Withdraw investment\n', '    /// @dev Investors that are not verified can withdraw their funds\n', '    function withdrawInvestment() public {\n', '        Investment storage investment = investments[msg.sender];\n', '\n', '        require(!investment.isVerified);\n', '\n', '        uint totalWeiInvested = investment.totalWeiInvested;\n', '\n', '        require(totalWeiInvested > 0);\n', '\n', '        investment.totalWeiInvested = 0;\n', '        investment.pendingTokenAmount = 0;\n', '\n', '        pendingWeiAmount = pendingWeiAmount.sub(totalWeiInvested);\n', '\n', '        msg.sender.transfer(totalWeiInvested);\n', '\n', '        emit InvestmentWithdrawn(msg.sender, totalWeiInvested);\n', '\n', '        assert(pendingWeiAmount <= address(this).balance);\n', '    }\n', '\n', '    /// @dev Prevalidate purchase\n', '    /// @param _beneficiary the investor&#39;s Ethereum address\n', '    /// @param _weiAmount the wei amount invested\n', '    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {\n', '        // We only want the msg.sender to buy tokens\n', '        require(_beneficiary == msg.sender);\n', '\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    /// @dev Process purchase\n', '    /// @param _tokenAmount the token amount purchased\n', '    function _processPurchase(address, uint _tokenAmount) internal {\n', '        Investment storage investment = investments[msg.sender];\n', '        investment.totalWeiInvested = investment.totalWeiInvested.add(msg.value);\n', '\n', '        if (investment.isVerified) {\n', '            // If the investor&#39;s KYC is already verified we issue the tokens imediatly\n', '            _deliverTokens(msg.sender, _tokenAmount);\n', '            emit TokensDelivered(msg.sender, _tokenAmount);\n', '        } else {\n', '            // If the investor&#39;s KYC is not verified we store the pending token amount\n', '            investment.pendingTokenAmount = investment.pendingTokenAmount.add(_tokenAmount);\n', '            pendingWeiAmount = pendingWeiAmount.add(msg.value);\n', '        }\n', '    }\n', '\n', '    /// @dev Forward funds\n', '    function _forwardFunds() internal {\n', '        // Ensure the investor was verified, i.e. his purchased tokens were delivered,\n', '        // before forwarding funds.\n', '        if (investments[msg.sender].isVerified) {\n', '            super._forwardFunds();\n', '        }\n', '    }\n', '\n', '    /// @dev Forward funds\n', '    /// @param _weiAmount the amount to be transfered\n', '    function _forwardFunds(uint _weiAmount) internal {\n', '        pendingWeiAmount = pendingWeiAmount.sub(_weiAmount);\n', '        wallet.transfer(_weiAmount);\n', '    }\n', '\n', '    /// @dev Postvalidate purchase\n', '    /// @param _weiAmount the amount invested\n', '    function _postValidatePurchase(address, uint _weiAmount) internal {\n', '        super._postValidatePurchase(msg.sender, _weiAmount);\n', '        // checking invariant\n', '        assert(pendingWeiAmount <= address(this).balance);\n', '    }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/VreoToken.sol\n', '\n', '/// @title VreoToken\n', '/// @author Sicos et al.\n', 'contract VreoToken is CappedToken, PausableToken, BurnableToken {\n', '\n', '    uint public constant TOTAL_TOKEN_CAP = 700000000e18;  // = 700.000.000 e18\n', '\n', '    string public name = "MERO Token";\n', '    string public symbol = "MERO";\n', '    uint8 public decimals = 18;\n', '\n', '    /// @dev Constructor\n', '    constructor() public CappedToken(TOTAL_TOKEN_CAP) {\n', '        pause();\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/VreoTokenSale.sol\n', '\n', '/// @title VreoTokenSale\n', '/// @author Sicos et al.\n', 'contract VreoTokenSale is PostKYCCrowdsale, FinalizableCrowdsale, MintedCrowdsale {\n', '\n', '    // Maxmimum number of tokens sold in Presale+Iconiq+Vreo sales\n', '    uint public constant TOTAL_TOKEN_CAP_OF_SALE = 450000000e18;  // = 450.000.000 e18\n', '\n', '    // Extra tokens minted upon finalization\n', '    uint public constant TOKEN_SHARE_OF_TEAM     =  85000000e18;  // =  85.000.000 e18\n', '    uint public constant TOKEN_SHARE_OF_ADVISORS =  58000000e18;  // =  58.000.000 e18\n', '    uint public constant TOKEN_SHARE_OF_LEGALS   =  57000000e18;  // =  57.000.000 e18\n', '    uint public constant TOKEN_SHARE_OF_BOUNTY   =  50000000e18;  // =  50.000.000 e18\n', '\n', '    // Extra token percentages\n', '    uint public constant BONUS_PCT_IN_ICONIQ_SALE       = 30;  // TBD\n', '    uint public constant BONUS_PCT_IN_VREO_SALE_PHASE_1 = 20;\n', '    uint public constant BONUS_PCT_IN_VREO_SALE_PHASE_2 = 10;\n', '\n', '    // Date/time constants\n', '    uint public constant ICONIQ_SALE_OPENING_TIME   = 1531123200;  // 2018-07-09 10:00:00 CEST\n', '    uint public constant ICONIQ_SALE_CLOSING_TIME   = 1532376000;  // 2018-07-23 22:00:00 CEST\n', '    uint public constant VREO_SALE_OPENING_TIME     = 1533369600;  // 2018-08-04 10:00:00 CEST\n', '    uint public constant VREO_SALE_PHASE_1_END_TIME = 1533672000;  // 2018-08-07 22:00:00 CEST\n', '    uint public constant VREO_SALE_PHASE_2_END_TIME = 1534276800;  // 2018-08-14 22:00:00 CEST\n', '    uint public constant VREO_SALE_CLOSING_TIME     = 1535832000;  // 2018-09-01 22:00:00 CEST\n', '    uint public constant KYC_VERIFICATION_END_TIME  = 1537041600;  // 2018-09-15 22:00:00 CEST\n', '\n', '    // Amount of ICONIQ token investors need per Wei invested in ICONIQ PreSale.\n', '    uint public constant ICONIQ_TOKENS_NEEDED_PER_INVESTED_WEI = 450;\n', '\n', '    // ICONIQ Token\n', '    ERC20Basic public iconiqToken;\n', '\n', '    // addresses token shares are minted to in finalization\n', '    address public teamAddress;\n', '    address public advisorsAddress;\n', '    address public legalsAddress;\n', '    address public bountyAddress;\n', '\n', '    // Amount of token available for purchase\n', '    uint public remainingTokensForSale;\n', '\n', '    /// @dev Log entry on rate changed\n', '    /// @param newRate the new rate\n', '    event RateChanged(uint newRate);\n', '\n', '    /// @dev Constructor\n', '    /// @param _token A VreoToken\n', '    /// @param _rate the initial rate.\n', '    /// @param _iconiqToken An IconiqInterface\n', '    /// @param _teamAddress Ethereum address of Team\n', '    /// @param _advisorsAddress Ethereum address of Advisors\n', '    /// @param _legalsAddress Ethereum address of Legals\n', '    /// @param _bountyAddress A VreoTokenBounty\n', '    /// @param _wallet MultiSig wallet address the ETH is forwarded to.\n', '    constructor(\n', '        VreoToken _token,\n', '        uint _rate,\n', '        ERC20Basic _iconiqToken,\n', '        address _teamAddress,\n', '        address _advisorsAddress,\n', '        address _legalsAddress,\n', '        address _bountyAddress,\n', '        address _wallet\n', '    )\n', '        public\n', '        Crowdsale(_rate, _wallet, _token)\n', '        TimedCrowdsale(ICONIQ_SALE_OPENING_TIME, VREO_SALE_CLOSING_TIME)\n', '    {\n', '        // Token sanity check\n', '        require(_token.cap() >= TOTAL_TOKEN_CAP_OF_SALE\n', '                                + TOKEN_SHARE_OF_TEAM\n', '                                + TOKEN_SHARE_OF_ADVISORS\n', '                                + TOKEN_SHARE_OF_LEGALS\n', '                                + TOKEN_SHARE_OF_BOUNTY);\n', '\n', '        // Sanity check of addresses\n', '        require(address(_iconiqToken) != address(0)\n', '                && _teamAddress != address(0)\n', '                && _advisorsAddress != address(0)\n', '                && _legalsAddress != address(0)\n', '                && _bountyAddress != address(0));\n', '\n', '        iconiqToken = _iconiqToken;\n', '        teamAddress = _teamAddress;\n', '        advisorsAddress = _advisorsAddress;\n', '        legalsAddress = _legalsAddress;\n', '        bountyAddress = _bountyAddress;\n', '\n', '        remainingTokensForSale = TOTAL_TOKEN_CAP_OF_SALE;\n', '    }\n', '\n', '    /// @dev Distribute presale\n', '    /// @param _investors  list of investor addresses\n', '    /// @param _amounts  list of token amounts purchased by investors\n', '    function distributePresale(address[] _investors, uint[] _amounts) public onlyOwner {\n', '        require(!hasClosed());\n', '        require(_investors.length == _amounts.length);\n', '\n', '        uint totalAmount = 0;\n', '\n', '        for (uint i = 0; i < _investors.length; ++i) {\n', '            VreoToken(token).mint(_investors[i], _amounts[i]);\n', '            totalAmount = totalAmount.add(_amounts[i]);\n', '        }\n', '\n', '        require(remainingTokensForSale >= totalAmount);\n', '        remainingTokensForSale = remainingTokensForSale.sub(totalAmount);\n', '    }\n', '\n', '    /// @dev Set rate\n', '    /// @param _newRate the new rate\n', '    function setRate(uint _newRate) public onlyOwner {\n', '        // A rate change by a magnitude order of ten and above is rather a typo than intention.\n', '        // If it was indeed desired, several setRate transactions have to be sent.\n', '        require(rate / 10 < _newRate && _newRate < 10 * rate);\n', '\n', '        rate = _newRate;\n', '\n', '        emit RateChanged(_newRate);\n', '    }\n', '\n', '    /// @dev unverified investors can withdraw their money only after the VREO Sale ended\n', '    function withdrawInvestment() public {\n', '        require(hasClosed());\n', '\n', '        super.withdrawInvestment();\n', '    }\n', '\n', '    /// @dev Is the sale for ICONIQ investors ongoing?\n', '    /// @return bool\n', '    function iconiqSaleOngoing() public view returns (bool) {\n', '        return ICONIQ_SALE_OPENING_TIME <= now && now <= ICONIQ_SALE_CLOSING_TIME;\n', '    }\n', '\n', '    /// @dev Is the Vreo main sale ongoing?\n', '    /// @return bool\n', '    function vreoSaleOngoing() public view returns (bool) {\n', '        return VREO_SALE_OPENING_TIME <= now && now <= VREO_SALE_CLOSING_TIME;\n', '    }\n', '\n', '    /// @dev Get maximum possible wei investment while Iconiq sale\n', '    /// @param _investor an investors Ethereum address\n', '    /// @return Maximum allowed wei investment\n', '    function getIconiqMaxInvestment(address _investor) public view returns (uint) {\n', '        uint iconiqBalance = iconiqToken.balanceOf(_investor);\n', '        uint prorataLimit = iconiqBalance.div(ICONIQ_TOKENS_NEEDED_PER_INVESTED_WEI);\n', '\n', '        // Substract Wei amount already invested.\n', '        require(prorataLimit >= investments[_investor].totalWeiInvested);\n', '        return prorataLimit.sub(investments[_investor].totalWeiInvested);\n', '    }\n', '\n', '    /// @dev Pre validate purchase\n', '    /// @param _beneficiary an investors Ethereum address\n', '    /// @param _weiAmount wei amount invested\n', '    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '\n', '        require(iconiqSaleOngoing() && getIconiqMaxInvestment(msg.sender) >= _weiAmount || vreoSaleOngoing());\n', '    }\n', '\n', '    /// @dev Get token amount\n', '    /// @param _weiAmount wei amount invested\n', '    /// @return token amount with bonus\n', '    function _getTokenAmount(uint _weiAmount) internal view returns (uint) {\n', '        uint tokenAmount = super._getTokenAmount(_weiAmount);\n', '\n', '        if (now <= ICONIQ_SALE_CLOSING_TIME) {\n', '            return tokenAmount.mul(100 + BONUS_PCT_IN_ICONIQ_SALE).div(100);\n', '        }\n', '\n', '        if (now <= VREO_SALE_PHASE_1_END_TIME) {\n', '            return tokenAmount.mul(100 + BONUS_PCT_IN_VREO_SALE_PHASE_1).div(100);\n', '        }\n', '\n', '        if (now <= VREO_SALE_PHASE_2_END_TIME) {\n', '            return tokenAmount.mul(100 + BONUS_PCT_IN_VREO_SALE_PHASE_2).div(100);\n', '        }\n', '\n', '        return tokenAmount;  // No bonus\n', '    }\n', '\n', '    /// @dev Deliver tokens\n', '    /// @param _beneficiary an investors Ethereum address\n', '    /// @param _tokenAmount token amount to deliver\n', '    function _deliverTokens(address _beneficiary, uint _tokenAmount) internal {\n', '        require(remainingTokensForSale >= _tokenAmount);\n', '        remainingTokensForSale = remainingTokensForSale.sub(_tokenAmount);\n', '\n', '        super._deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /// @dev Finalization\n', '    function finalization() internal {\n', '        require(now >= KYC_VERIFICATION_END_TIME);\n', '\n', '        VreoToken(token).mint(teamAddress, TOKEN_SHARE_OF_TEAM);\n', '        VreoToken(token).mint(advisorsAddress, TOKEN_SHARE_OF_ADVISORS);\n', '        VreoToken(token).mint(legalsAddress, TOKEN_SHARE_OF_LEGALS);\n', '        VreoToken(token).mint(bountyAddress, TOKEN_SHARE_OF_BOUNTY);\n', '\n', '        VreoToken(token).finishMinting();\n', '        VreoToken(token).unpause();\n', '\n', '        super.finalization();\n', '    }\n', '\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropiate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting. \n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '\n', '  /**\n', '   * @dev Overrides delivery by minting tokens upon purchase.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Number of tokens to be minted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    require(MintableToken(token).mint(_beneficiary, _tokenAmount));\n', '  }\n', '}\n', '\n', '// File: contracts/PostKYCCrowdsale.sol\n', '\n', '/// @title PostKYCCrowdsale\n', '/// @author Sicos et al.\n', 'contract PostKYCCrowdsale is Crowdsale, Ownable {\n', '\n', '    struct Investment {\n', '        bool isVerified;         // wether or not the investor passed the KYC process\n', '        uint totalWeiInvested;   // total invested wei regardless of verification state\n', '        // amount of token an unverified investor bought. should be zero for verified investors\n', '        uint pendingTokenAmount;\n', '    }\n', '\n', '    // total amount of wei held by unverified investors should never be larger than this.balance\n', '    uint public pendingWeiAmount = 0;\n', '\n', '    // maps investor addresses to investment information\n', '    mapping(address => Investment) public investments;\n', '\n', '    /// @dev Log entry on investor verified\n', "    /// @param investor the investor's Ethereum address\n", '    event InvestorVerified(address investor);\n', '\n', '    /// @dev Log entry on tokens delivered\n', "    /// @param investor the investor's Ethereum address\n", '    /// @param amount token amount delivered\n', '    event TokensDelivered(address investor, uint amount);\n', '\n', '    /// @dev Log entry on investment withdrawn\n', "    /// @param investor the investor's Ethereum address\n", '    /// @param value the wei amount withdrawn\n', '    event InvestmentWithdrawn(address investor, uint value);\n', '\n', '    /// @dev Verify investors\n', "    /// @param _investors list of investors' Ethereum addresses\n", '    function verifyInvestors(address[] _investors) public onlyOwner {\n', '        for (uint i = 0; i < _investors.length; ++i) {\n', '            address investor = _investors[i];\n', '            Investment storage investment = investments[investor];\n', '\n', '            if (!investment.isVerified) {\n', '                investment.isVerified = true;\n', '\n', '                emit InvestorVerified(investor);\n', '\n', '                uint pendingTokenAmount = investment.pendingTokenAmount;\n', '                // now we issue tokens to the verfied investor\n', '                if (pendingTokenAmount > 0) {\n', '                    investment.pendingTokenAmount = 0;\n', '\n', '                    _forwardFunds(investment.totalWeiInvested);\n', '                    _deliverTokens(investor, pendingTokenAmount);\n', '\n', '                    emit TokensDelivered(investor, pendingTokenAmount);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @dev Withdraw investment\n', '    /// @dev Investors that are not verified can withdraw their funds\n', '    function withdrawInvestment() public {\n', '        Investment storage investment = investments[msg.sender];\n', '\n', '        require(!investment.isVerified);\n', '\n', '        uint totalWeiInvested = investment.totalWeiInvested;\n', '\n', '        require(totalWeiInvested > 0);\n', '\n', '        investment.totalWeiInvested = 0;\n', '        investment.pendingTokenAmount = 0;\n', '\n', '        pendingWeiAmount = pendingWeiAmount.sub(totalWeiInvested);\n', '\n', '        msg.sender.transfer(totalWeiInvested);\n', '\n', '        emit InvestmentWithdrawn(msg.sender, totalWeiInvested);\n', '\n', '        assert(pendingWeiAmount <= address(this).balance);\n', '    }\n', '\n', '    /// @dev Prevalidate purchase\n', "    /// @param _beneficiary the investor's Ethereum address\n", '    /// @param _weiAmount the wei amount invested\n', '    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {\n', '        // We only want the msg.sender to buy tokens\n', '        require(_beneficiary == msg.sender);\n', '\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    }\n', '\n', '    /// @dev Process purchase\n', '    /// @param _tokenAmount the token amount purchased\n', '    function _processPurchase(address, uint _tokenAmount) internal {\n', '        Investment storage investment = investments[msg.sender];\n', '        investment.totalWeiInvested = investment.totalWeiInvested.add(msg.value);\n', '\n', '        if (investment.isVerified) {\n', "            // If the investor's KYC is already verified we issue the tokens imediatly\n", '            _deliverTokens(msg.sender, _tokenAmount);\n', '            emit TokensDelivered(msg.sender, _tokenAmount);\n', '        } else {\n', "            // If the investor's KYC is not verified we store the pending token amount\n", '            investment.pendingTokenAmount = investment.pendingTokenAmount.add(_tokenAmount);\n', '            pendingWeiAmount = pendingWeiAmount.add(msg.value);\n', '        }\n', '    }\n', '\n', '    /// @dev Forward funds\n', '    function _forwardFunds() internal {\n', '        // Ensure the investor was verified, i.e. his purchased tokens were delivered,\n', '        // before forwarding funds.\n', '        if (investments[msg.sender].isVerified) {\n', '            super._forwardFunds();\n', '        }\n', '    }\n', '\n', '    /// @dev Forward funds\n', '    /// @param _weiAmount the amount to be transfered\n', '    function _forwardFunds(uint _weiAmount) internal {\n', '        pendingWeiAmount = pendingWeiAmount.sub(_weiAmount);\n', '        wallet.transfer(_weiAmount);\n', '    }\n', '\n', '    /// @dev Postvalidate purchase\n', '    /// @param _weiAmount the amount invested\n', '    function _postValidatePurchase(address, uint _weiAmount) internal {\n', '        super._postValidatePurchase(msg.sender, _weiAmount);\n', '        // checking invariant\n', '        assert(pendingWeiAmount <= address(this).balance);\n', '    }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/CappedToken.sol\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '  uint256 public cap;\n', '\n', '  function CappedToken(uint256 _cap) public {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    require(totalSupply_.add(_amount) <= cap);\n', '\n', '    return super.mint(_to, _amount);\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: node_modules/zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '// File: contracts/VreoToken.sol\n', '\n', '/// @title VreoToken\n', '/// @author Sicos et al.\n', 'contract VreoToken is CappedToken, PausableToken, BurnableToken {\n', '\n', '    uint public constant TOTAL_TOKEN_CAP = 700000000e18;  // = 700.000.000 e18\n', '\n', '    string public name = "MERO Token";\n', '    string public symbol = "MERO";\n', '    uint8 public decimals = 18;\n', '\n', '    /// @dev Constructor\n', '    constructor() public CappedToken(TOTAL_TOKEN_CAP) {\n', '        pause();\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/VreoTokenSale.sol\n', '\n', '/// @title VreoTokenSale\n', '/// @author Sicos et al.\n', 'contract VreoTokenSale is PostKYCCrowdsale, FinalizableCrowdsale, MintedCrowdsale {\n', '\n', '    // Maxmimum number of tokens sold in Presale+Iconiq+Vreo sales\n', '    uint public constant TOTAL_TOKEN_CAP_OF_SALE = 450000000e18;  // = 450.000.000 e18\n', '\n', '    // Extra tokens minted upon finalization\n', '    uint public constant TOKEN_SHARE_OF_TEAM     =  85000000e18;  // =  85.000.000 e18\n', '    uint public constant TOKEN_SHARE_OF_ADVISORS =  58000000e18;  // =  58.000.000 e18\n', '    uint public constant TOKEN_SHARE_OF_LEGALS   =  57000000e18;  // =  57.000.000 e18\n', '    uint public constant TOKEN_SHARE_OF_BOUNTY   =  50000000e18;  // =  50.000.000 e18\n', '\n', '    // Extra token percentages\n', '    uint public constant BONUS_PCT_IN_ICONIQ_SALE       = 30;  // TBD\n', '    uint public constant BONUS_PCT_IN_VREO_SALE_PHASE_1 = 20;\n', '    uint public constant BONUS_PCT_IN_VREO_SALE_PHASE_2 = 10;\n', '\n', '    // Date/time constants\n', '    uint public constant ICONIQ_SALE_OPENING_TIME   = 1531123200;  // 2018-07-09 10:00:00 CEST\n', '    uint public constant ICONIQ_SALE_CLOSING_TIME   = 1532376000;  // 2018-07-23 22:00:00 CEST\n', '    uint public constant VREO_SALE_OPENING_TIME     = 1533369600;  // 2018-08-04 10:00:00 CEST\n', '    uint public constant VREO_SALE_PHASE_1_END_TIME = 1533672000;  // 2018-08-07 22:00:00 CEST\n', '    uint public constant VREO_SALE_PHASE_2_END_TIME = 1534276800;  // 2018-08-14 22:00:00 CEST\n', '    uint public constant VREO_SALE_CLOSING_TIME     = 1535832000;  // 2018-09-01 22:00:00 CEST\n', '    uint public constant KYC_VERIFICATION_END_TIME  = 1537041600;  // 2018-09-15 22:00:00 CEST\n', '\n', '    // Amount of ICONIQ token investors need per Wei invested in ICONIQ PreSale.\n', '    uint public constant ICONIQ_TOKENS_NEEDED_PER_INVESTED_WEI = 450;\n', '\n', '    // ICONIQ Token\n', '    ERC20Basic public iconiqToken;\n', '\n', '    // addresses token shares are minted to in finalization\n', '    address public teamAddress;\n', '    address public advisorsAddress;\n', '    address public legalsAddress;\n', '    address public bountyAddress;\n', '\n', '    // Amount of token available for purchase\n', '    uint public remainingTokensForSale;\n', '\n', '    /// @dev Log entry on rate changed\n', '    /// @param newRate the new rate\n', '    event RateChanged(uint newRate);\n', '\n', '    /// @dev Constructor\n', '    /// @param _token A VreoToken\n', '    /// @param _rate the initial rate.\n', '    /// @param _iconiqToken An IconiqInterface\n', '    /// @param _teamAddress Ethereum address of Team\n', '    /// @param _advisorsAddress Ethereum address of Advisors\n', '    /// @param _legalsAddress Ethereum address of Legals\n', '    /// @param _bountyAddress A VreoTokenBounty\n', '    /// @param _wallet MultiSig wallet address the ETH is forwarded to.\n', '    constructor(\n', '        VreoToken _token,\n', '        uint _rate,\n', '        ERC20Basic _iconiqToken,\n', '        address _teamAddress,\n', '        address _advisorsAddress,\n', '        address _legalsAddress,\n', '        address _bountyAddress,\n', '        address _wallet\n', '    )\n', '        public\n', '        Crowdsale(_rate, _wallet, _token)\n', '        TimedCrowdsale(ICONIQ_SALE_OPENING_TIME, VREO_SALE_CLOSING_TIME)\n', '    {\n', '        // Token sanity check\n', '        require(_token.cap() >= TOTAL_TOKEN_CAP_OF_SALE\n', '                                + TOKEN_SHARE_OF_TEAM\n', '                                + TOKEN_SHARE_OF_ADVISORS\n', '                                + TOKEN_SHARE_OF_LEGALS\n', '                                + TOKEN_SHARE_OF_BOUNTY);\n', '\n', '        // Sanity check of addresses\n', '        require(address(_iconiqToken) != address(0)\n', '                && _teamAddress != address(0)\n', '                && _advisorsAddress != address(0)\n', '                && _legalsAddress != address(0)\n', '                && _bountyAddress != address(0));\n', '\n', '        iconiqToken = _iconiqToken;\n', '        teamAddress = _teamAddress;\n', '        advisorsAddress = _advisorsAddress;\n', '        legalsAddress = _legalsAddress;\n', '        bountyAddress = _bountyAddress;\n', '\n', '        remainingTokensForSale = TOTAL_TOKEN_CAP_OF_SALE;\n', '    }\n', '\n', '    /// @dev Distribute presale\n', '    /// @param _investors  list of investor addresses\n', '    /// @param _amounts  list of token amounts purchased by investors\n', '    function distributePresale(address[] _investors, uint[] _amounts) public onlyOwner {\n', '        require(!hasClosed());\n', '        require(_investors.length == _amounts.length);\n', '\n', '        uint totalAmount = 0;\n', '\n', '        for (uint i = 0; i < _investors.length; ++i) {\n', '            VreoToken(token).mint(_investors[i], _amounts[i]);\n', '            totalAmount = totalAmount.add(_amounts[i]);\n', '        }\n', '\n', '        require(remainingTokensForSale >= totalAmount);\n', '        remainingTokensForSale = remainingTokensForSale.sub(totalAmount);\n', '    }\n', '\n', '    /// @dev Set rate\n', '    /// @param _newRate the new rate\n', '    function setRate(uint _newRate) public onlyOwner {\n', '        // A rate change by a magnitude order of ten and above is rather a typo than intention.\n', '        // If it was indeed desired, several setRate transactions have to be sent.\n', '        require(rate / 10 < _newRate && _newRate < 10 * rate);\n', '\n', '        rate = _newRate;\n', '\n', '        emit RateChanged(_newRate);\n', '    }\n', '\n', '    /// @dev unverified investors can withdraw their money only after the VREO Sale ended\n', '    function withdrawInvestment() public {\n', '        require(hasClosed());\n', '\n', '        super.withdrawInvestment();\n', '    }\n', '\n', '    /// @dev Is the sale for ICONIQ investors ongoing?\n', '    /// @return bool\n', '    function iconiqSaleOngoing() public view returns (bool) {\n', '        return ICONIQ_SALE_OPENING_TIME <= now && now <= ICONIQ_SALE_CLOSING_TIME;\n', '    }\n', '\n', '    /// @dev Is the Vreo main sale ongoing?\n', '    /// @return bool\n', '    function vreoSaleOngoing() public view returns (bool) {\n', '        return VREO_SALE_OPENING_TIME <= now && now <= VREO_SALE_CLOSING_TIME;\n', '    }\n', '\n', '    /// @dev Get maximum possible wei investment while Iconiq sale\n', '    /// @param _investor an investors Ethereum address\n', '    /// @return Maximum allowed wei investment\n', '    function getIconiqMaxInvestment(address _investor) public view returns (uint) {\n', '        uint iconiqBalance = iconiqToken.balanceOf(_investor);\n', '        uint prorataLimit = iconiqBalance.div(ICONIQ_TOKENS_NEEDED_PER_INVESTED_WEI);\n', '\n', '        // Substract Wei amount already invested.\n', '        require(prorataLimit >= investments[_investor].totalWeiInvested);\n', '        return prorataLimit.sub(investments[_investor].totalWeiInvested);\n', '    }\n', '\n', '    /// @dev Pre validate purchase\n', '    /// @param _beneficiary an investors Ethereum address\n', '    /// @param _weiAmount wei amount invested\n', '    function _preValidatePurchase(address _beneficiary, uint _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '\n', '        require(iconiqSaleOngoing() && getIconiqMaxInvestment(msg.sender) >= _weiAmount || vreoSaleOngoing());\n', '    }\n', '\n', '    /// @dev Get token amount\n', '    /// @param _weiAmount wei amount invested\n', '    /// @return token amount with bonus\n', '    function _getTokenAmount(uint _weiAmount) internal view returns (uint) {\n', '        uint tokenAmount = super._getTokenAmount(_weiAmount);\n', '\n', '        if (now <= ICONIQ_SALE_CLOSING_TIME) {\n', '            return tokenAmount.mul(100 + BONUS_PCT_IN_ICONIQ_SALE).div(100);\n', '        }\n', '\n', '        if (now <= VREO_SALE_PHASE_1_END_TIME) {\n', '            return tokenAmount.mul(100 + BONUS_PCT_IN_VREO_SALE_PHASE_1).div(100);\n', '        }\n', '\n', '        if (now <= VREO_SALE_PHASE_2_END_TIME) {\n', '            return tokenAmount.mul(100 + BONUS_PCT_IN_VREO_SALE_PHASE_2).div(100);\n', '        }\n', '\n', '        return tokenAmount;  // No bonus\n', '    }\n', '\n', '    /// @dev Deliver tokens\n', '    /// @param _beneficiary an investors Ethereum address\n', '    /// @param _tokenAmount token amount to deliver\n', '    function _deliverTokens(address _beneficiary, uint _tokenAmount) internal {\n', '        require(remainingTokensForSale >= _tokenAmount);\n', '        remainingTokensForSale = remainingTokensForSale.sub(_tokenAmount);\n', '\n', '        super._deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '\n', '    /// @dev Finalization\n', '    function finalization() internal {\n', '        require(now >= KYC_VERIFICATION_END_TIME);\n', '\n', '        VreoToken(token).mint(teamAddress, TOKEN_SHARE_OF_TEAM);\n', '        VreoToken(token).mint(advisorsAddress, TOKEN_SHARE_OF_ADVISORS);\n', '        VreoToken(token).mint(legalsAddress, TOKEN_SHARE_OF_LEGALS);\n', '        VreoToken(token).mint(bountyAddress, TOKEN_SHARE_OF_BOUNTY);\n', '\n', '        VreoToken(token).finishMinting();\n', '        VreoToken(token).unpause();\n', '\n', '        super.finalization();\n', '    }\n', '\n', '}']
