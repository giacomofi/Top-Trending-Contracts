['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract AgrolotToken is StandardToken {\n', '    \n', '  string public constant name = "Agrolot Token";\n', '   \n', '  string public constant symbol = "AGLT";\n', '    \n', '  uint32 public constant decimals = 18;\n', '\n', '  uint256 public INITIAL_SUPPLY = 100000000 * 1 ether;\n', '\n', '  function AgrolotToken() {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '    \n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    \n', '  using SafeMath for uint;\n', '    \n', '  address multisig;\n', '\n', '  uint restrictedTeam;\n', '  \n', '  uint restrictedVIA;\n', '  \n', '  uint restrictedAirdrop;\n', '\n', '  address restricted_address;\n', '  \n', '  address airdropAddress;\n', '\n', '  AgrolotToken public token = new AgrolotToken();\n', '\n', '  uint public minPaymentWei = 0.1 ether;\n', '    \n', '  uint public maxCapTokenPresale;\n', '  \n', '  uint public maxCapTokenTotal;\n', '  \n', '  uint public totalTokensSold;\n', '  \n', '  uint public totalWeiReceived;\n', '  \n', '  uint startPresale;\n', '    \n', '  uint periodPresale;\n', '  \n', '  uint startSale;\n', '    \n', '  uint periodSale;\n', '\n', '  uint rate;\n', '\n', '  function Crowdsale() {\n', '    multisig = 0x7c8Ef6E9437E8B1554dCd22a00AB1B3a709998d9;\n', '    restricted_address = 0x3a5d3146Cd9f1157F2d36488B99429500A257b13;\n', '    airdropAddress = 0xe86AC25B3d2fe81951A314BA1042Fc17A096F3a2;\n', '    restrictedTeam = 20000000 * 1 ether;\n', '    restrictedVIA = 45250000 * 1 ether;\n', '    restrictedAirdrop = 1250000 * 1 ether;\n', '    rate = 530 * 1 ether;\n', '    maxCapTokenPresale = 3000000 * 1 ether;\n', '    maxCapTokenTotal = 23000000 * 1 ether;\n', '    \n', '    startPresale = 1529496000;\n', '    periodPresale = 10;\n', '    \n', '    startSale = 1530446400;\n', '    periodSale = 90;\n', '    \n', '    token.transfer(airdropAddress, restrictedAirdrop);\n', '    \n', '    //privatesale \n', '    token.transfer(0xA44ceA410e7D1100e05bC8CDe6C63cee947A28f7, 1500000 * 1 ether);\n', '    token.transfer(0x4d044d2921e25Abda8D279d21FED919fB150F8C8, 600000 * 1 ether);\n', '    token.transfer(0x076A7E0A69Da48ac928508c1ac0E9cDCeDCeE903, 350000 * 1 ether);\n', '    token.transfer(0x60a7536b58ba2BEBB25165c09E39365c9d7Fb49A, 800000 * 1 ether);\n', '    token.transfer(0x41B05379ba55954D9e1Db10fd464cEc6cA8b085D, 750000 * 1 ether);\n', '\n', '  }\n', '\n', '  modifier saleIsOn() {\n', '    require ((now > startPresale && now < startPresale + (periodPresale * 1 days)) || (now > startSale && now < startSale + (periodSale * 1 days)));\n', '    \n', '    _;\n', '  }\n', '\n', '  function createTokens() saleIsOn payable {\n', '    require(msg.value >= minPaymentWei);\n', '    uint tokens = rate.mul(msg.value).div(1 ether);\n', '    uint bonusTokens = 0;\n', '    if (now <= startPresale + (periodPresale * 1 days)) {\n', '        require(totalTokensSold.add(tokens) <= maxCapTokenPresale);\n', '        bonusTokens = tokens.div(100).mul(50);\n', '    } else {\n', '        require(totalTokensSold.add(tokens) <= maxCapTokenTotal);\n', '        if(now < startSale + (15 * 1 days)) {\n', '            bonusTokens = tokens.div(100).mul(25);\n', '        } else if(now < startSale + (25 * 1 days)) {\n', '            bonusTokens = tokens.div(100).mul(15);\n', '        } else if(now < startSale + (35 * 1 days)) {\n', '            bonusTokens = tokens.div(100).mul(7);\n', '        }\n', '    }\n', '\n', '    totalTokensSold = totalTokensSold.add(tokens);\n', '    totalWeiReceived = totalWeiReceived.add(msg.value);\n', '    uint tokensWithBonus = tokens.add(bonusTokens);\n', '    multisig.transfer(msg.value);\n', '    token.transfer(msg.sender, tokensWithBonus);\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '  \n', ' \n', '  function getVIATokens() public {\n', '    require(now > startSale + (91 * 1 days));\n', '    address contractAddress = address(this);\n', '    uint allTokens = token.balanceOf(contractAddress).sub(restrictedTeam);\n', '    token.transfer(restricted_address, allTokens);\n', '  }\n', '  \n', '  function getTeamTokens() public {\n', '    require(now > startSale + (180 * 1 days));\n', '    \n', '    token.transfer(restricted_address, restrictedTeam);\n', '  }\n', '    \n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    \n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '  \n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances. \n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    \n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of. \n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amout of tokens to be transfered\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    balances[_to] = balances[_to].add(_value);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    \n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner {\n', '    require(newOwner != address(0));      \n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract AgrolotToken is StandardToken {\n', '    \n', '  string public constant name = "Agrolot Token";\n', '   \n', '  string public constant symbol = "AGLT";\n', '    \n', '  uint32 public constant decimals = 18;\n', '\n', '  uint256 public INITIAL_SUPPLY = 100000000 * 1 ether;\n', '\n', '  function AgrolotToken() {\n', '    totalSupply = INITIAL_SUPPLY;\n', '    balances[msg.sender] = INITIAL_SUPPLY;\n', '  }\n', '    \n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    \n', '  using SafeMath for uint;\n', '    \n', '  address multisig;\n', '\n', '  uint restrictedTeam;\n', '  \n', '  uint restrictedVIA;\n', '  \n', '  uint restrictedAirdrop;\n', '\n', '  address restricted_address;\n', '  \n', '  address airdropAddress;\n', '\n', '  AgrolotToken public token = new AgrolotToken();\n', '\n', '  uint public minPaymentWei = 0.1 ether;\n', '    \n', '  uint public maxCapTokenPresale;\n', '  \n', '  uint public maxCapTokenTotal;\n', '  \n', '  uint public totalTokensSold;\n', '  \n', '  uint public totalWeiReceived;\n', '  \n', '  uint startPresale;\n', '    \n', '  uint periodPresale;\n', '  \n', '  uint startSale;\n', '    \n', '  uint periodSale;\n', '\n', '  uint rate;\n', '\n', '  function Crowdsale() {\n', '    multisig = 0x7c8Ef6E9437E8B1554dCd22a00AB1B3a709998d9;\n', '    restricted_address = 0x3a5d3146Cd9f1157F2d36488B99429500A257b13;\n', '    airdropAddress = 0xe86AC25B3d2fe81951A314BA1042Fc17A096F3a2;\n', '    restrictedTeam = 20000000 * 1 ether;\n', '    restrictedVIA = 45250000 * 1 ether;\n', '    restrictedAirdrop = 1250000 * 1 ether;\n', '    rate = 530 * 1 ether;\n', '    maxCapTokenPresale = 3000000 * 1 ether;\n', '    maxCapTokenTotal = 23000000 * 1 ether;\n', '    \n', '    startPresale = 1529496000;\n', '    periodPresale = 10;\n', '    \n', '    startSale = 1530446400;\n', '    periodSale = 90;\n', '    \n', '    token.transfer(airdropAddress, restrictedAirdrop);\n', '    \n', '    //privatesale \n', '    token.transfer(0xA44ceA410e7D1100e05bC8CDe6C63cee947A28f7, 1500000 * 1 ether);\n', '    token.transfer(0x4d044d2921e25Abda8D279d21FED919fB150F8C8, 600000 * 1 ether);\n', '    token.transfer(0x076A7E0A69Da48ac928508c1ac0E9cDCeDCeE903, 350000 * 1 ether);\n', '    token.transfer(0x60a7536b58ba2BEBB25165c09E39365c9d7Fb49A, 800000 * 1 ether);\n', '    token.transfer(0x41B05379ba55954D9e1Db10fd464cEc6cA8b085D, 750000 * 1 ether);\n', '\n', '  }\n', '\n', '  modifier saleIsOn() {\n', '    require ((now > startPresale && now < startPresale + (periodPresale * 1 days)) || (now > startSale && now < startSale + (periodSale * 1 days)));\n', '    \n', '    _;\n', '  }\n', '\n', '  function createTokens() saleIsOn payable {\n', '    require(msg.value >= minPaymentWei);\n', '    uint tokens = rate.mul(msg.value).div(1 ether);\n', '    uint bonusTokens = 0;\n', '    if (now <= startPresale + (periodPresale * 1 days)) {\n', '        require(totalTokensSold.add(tokens) <= maxCapTokenPresale);\n', '        bonusTokens = tokens.div(100).mul(50);\n', '    } else {\n', '        require(totalTokensSold.add(tokens) <= maxCapTokenTotal);\n', '        if(now < startSale + (15 * 1 days)) {\n', '            bonusTokens = tokens.div(100).mul(25);\n', '        } else if(now < startSale + (25 * 1 days)) {\n', '            bonusTokens = tokens.div(100).mul(15);\n', '        } else if(now < startSale + (35 * 1 days)) {\n', '            bonusTokens = tokens.div(100).mul(7);\n', '        }\n', '    }\n', '\n', '    totalTokensSold = totalTokensSold.add(tokens);\n', '    totalWeiReceived = totalWeiReceived.add(msg.value);\n', '    uint tokensWithBonus = tokens.add(bonusTokens);\n', '    multisig.transfer(msg.value);\n', '    token.transfer(msg.sender, tokensWithBonus);\n', '  }\n', '\n', '  function() external payable {\n', '    createTokens();\n', '  }\n', '  \n', ' \n', '  function getVIATokens() public {\n', '    require(now > startSale + (91 * 1 days));\n', '    address contractAddress = address(this);\n', '    uint allTokens = token.balanceOf(contractAddress).sub(restrictedTeam);\n', '    token.transfer(restricted_address, allTokens);\n', '  }\n', '  \n', '  function getTeamTokens() public {\n', '    require(now > startSale + (180 * 1 days));\n', '    \n', '    token.transfer(restricted_address, restrictedTeam);\n', '  }\n', '    \n', '}']
