['// текущая версия - 12 тестовая. уменьшены объемы!!!!\n', '// добавлены комменты в require\n', '// исправлена ф-ия refund\n', '// блокировки переводов сделаны на весь период ICO и Crowdsale\n', '// добавлен лог в refund\n', '// добавлены функции блокировки\\разблокировки внешних переводов в рабочем режиме контракта\n', '// для возможности расчета дивидендов\n', '// CRYPT Token = > CRYPT\n', '// CRTT => CRT\n', '// изменены ф-ции раздачи токенов. бесплатно раздать токены можно только с 4-х зарезервированных адресов\n', '// в fallback функцию добавлен блок расчета длительности периодов, пауз между периодами \n', '// и автоматической смены периодов по окончании контрольного времени (пауза=30 суток)\n', '// изменен порядок расчета лимита при приеме средств - учитываются входящие средства\n', '// изменен порядок расчет лимита в первые сутки Pre-ICO - лимит идет не на транзакцию, а на баланс пользователя плюс его платеж\n', '// отключена возможность приема средств и продажи токенов по окончанию Crowdsale(на стадии WorkTime)\n', '// добавлена функция вывода всех токенов с баланса контракта на адрес собственника по окончании Crowdsale.\n', '\n', '//- Лимиты по объему 0.4 ETH = 2 000 токенов\n', '//- Лимиты по времени 1 СУТКИ \n', '//- Пауза между стадиями - 1 сутки \n', '//* МИНИМАЛЬНЫЙ ПЛАТЕЖ НА PRESALE 0.1 ETH \n', '//* МАКСИМАЛЬНЫЙ ПЛАТЕЖ НА PREICO 0.1 ETH\n', '// Всего выпущено = 50 000 токенов\n', '// HardCap 40% = 20 000 токенов = 4 ETH\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '    );\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract CRYPTToken is StandardToken {\n', '    string public constant name = "CRYPT";\n', '    string public constant symbol = "CRT";\n', '    uint32 public constant decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 50000 * 1 ether;\n', '    address public CrowdsaleAddress;\n', '    bool public lockTransfers = false;\n', '\n', '    constructor(address _CrowdsaleAddress) public {\n', '    \n', '        CrowdsaleAddress = _CrowdsaleAddress;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;      \n', '    }\n', '  \n', '    modifier onlyOwner() {\n', '        // only Crowdsale contract\n', '        require(msg.sender == CrowdsaleAddress);\n', '        _;\n', '    }\n', '\n', '     // Override\n', '    function transfer(address _to, uint256 _value) public returns(bool){\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(!lockTransfers, "Transfers are prohibited in ICO and Crowdsale period");\n', '        }\n', '        return super.transfer(_to,_value);\n', '    }\n', '\n', '     // Override\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(!lockTransfers, "Transfers are prohibited in ICO and Crowdsale period");\n', '        }\n', '        return super.transferFrom(_from,_to,_value);\n', '    }\n', '     \n', '    function acceptTokens(address _from, uint256 _value) public onlyOwner returns (bool){\n', '        require (balances[_from] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_value);\n', '        emit Transfer(_from, CrowdsaleAddress, _value);\n', '        return true;\n', '    }\n', '\n', '    function lockTransfer(bool _lock) public onlyOwner {\n', '        lockTransfers = _lock;\n', '    }\n', '\n', '\n', '\n', '    function() external payable {\n', '        // The token contract don`t receive ether\n', '        revert();\n', '    }  \n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address candidate;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        candidate = newOwner;\n', '    }\n', '\n', '    function confirmOwnership() public {\n', '        require(candidate == msg.sender);\n', '        owner = candidate;\n', '        delete candidate;\n', '    }\n', '\n', '}\n', '\n', 'contract HoldProjectAddress {\n', '    //Address where stored command tokens- 50%\n', '    //Withdraw tokens allowed only after 1 year\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    } \n', '}\n', '\n', 'contract HoldBountyAddress {\n', '    //Address where stored bounty tokens- 1%\n', '    //Withdraw tokens allowed only after 40 days\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    } \n', '}\n', '\n', 'contract HoldAdvisorsAddress {\n', '    //Address where stored advisors tokens- 1%\n', '    //Withdraw tokens allowed only after 40 days\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    } \n', '}\n', '\n', 'contract HoldAdditionalAddress {\n', '    //Address where stored additional tokens- 8%\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    } \n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint; \n', '    event LogStateSwitch(State newState);\n', '    event Withdraw(address indexed from, address indexed to, uint256 amount);\n', '    event Refunding(address indexed to, uint256 amount);\n', '    mapping(address => uint) public crowdsaleBalances;\n', '\n', '    address myAddress = this;\n', '    uint64 preSaleStartTime = 0;\n', '    uint64 preICOStartTime = 0;\n', '    uint64 crowdSaleStartTime = 0;\n', '    uint public  saleRate = 5000;  //tokens for 1 ether\n', '    uint256 public soldTokens = 0;\n', '\n', '    // 50 000 000 sold tokens limit for Pre-Sale\n', '    uint public constant RPESALE_TOKEN_SUPPLY_LIMIT = 2000 * 1 ether;\n', '\n', '\n', '    // 100 000 000 sold tokens limit for Pre-ICO\n', '    uint public constant RPEICO_TOKEN_SUPPLY_LIMIT = 4000 * 1 ether;\n', '\n', '    // 40 000 000 tokens soft cap (otherwise - refund)\n', '    // equal 8 000 eth\n', '\n', '\n', '    uint public constant TOKEN_SOFT_CAP = 2000 * 1 ether;\n', '\n', '    \n', '    CRYPTToken public token = new CRYPTToken(myAddress);\n', '    \n', '    // New address for hold tokens\n', '    HoldProjectAddress public holdAddress1 = new HoldProjectAddress();\n', '    HoldBountyAddress public holdAddress2 = new HoldBountyAddress();\n', '    HoldAdvisorsAddress public holdAddress3 = new HoldAdvisorsAddress();\n', '    HoldAdditionalAddress public holdAddress4 = new HoldAdditionalAddress();\n', '\n', '    // Create state of contract\n', '    enum State { \n', '        Init,    \n', '        PreSale, \n', '        PreICO,  \n', '        CrowdSale,\n', '        Refunding,\n', '        WorkTime\n', '    }\n', '        \n', '    State public currentState = State.Init;\n', '\n', '    modifier onlyInState(State state){ \n', '        require(state==currentState); \n', '        _; \n', '    }\n', '\n', '    constructor() public {\n', '        uint256 TotalTokens = token.INITIAL_SUPPLY().div(1 ether);\n', '        // distribute tokens\n', '        // Transer tokens to project address.  (50%)\n', '        giveTokens(address(holdAddress1), TotalTokens.div(2));\n', '        // Transer tokens to bounty address.  (1%)\n', '        giveTokens(address(holdAddress2), TotalTokens.div(100));\n', '        // Transer tokens to advisors address. (1%)\n', '        giveTokens(address(holdAddress3), TotalTokens.div(100));\n', '        // Transer tokens to additional address. (8%)\n', '        giveTokens(address(holdAddress4), TotalTokens.div(100).mul(8));\n', '        \n', '    }\n', '\n', '    function returnTokensFromHoldProjectAddress(uint256 _value) internal returns(bool){\n', '        // the function take tokens from HoldProjectAddress to contract\n', '        // only after 1 year\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        require (now >= preSaleStartTime + 1 days, "only after 1 year");\n', '        token.acceptTokens(address(holdAddress1), value); \n', '        return true;\n', '    } \n', '\n', '    function returnTokensFromHoldBountyAddress(uint256 _value) internal returns(bool){\n', '        // the function take tokens from HoldBountyAddress to contract\n', '        // only after 40 days\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        require (now >= preSaleStartTime + 1 days, "only after 40 days");\n', '        token.acceptTokens(address(holdAddress2), value);    \n', '        return true;\n', '    } \n', '    \n', '    function returnTokensFromHoldAdvisorsAddress(uint256 _value) internal returns(bool){\n', '        // the function take tokens from HoldAdvisorsAddress to contract\n', '        // only after 40 days\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        require (now >= preSaleStartTime + 1 days, "only after 40 days");\n', '        token.acceptTokens(address(holdAddress3), value);    \n', '        return true;\n', '    } \n', '    \n', '    function returnTokensFromHoldAdditionalAddress(uint256 _value) internal returns(bool){\n', '        // the function take tokens from HoldAdditionalAddress to contract\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        token.acceptTokens(address(holdAddress4), value);    \n', '        return true;\n', '    }     \n', '    \n', '    function giveTokens(address _newInvestor, uint256 _value) internal {\n', '        require (_newInvestor != address(0));\n', '        require (_value >= 1);\n', '        uint256 value = _value;\n', '        value = value.mul(1 ether);\n', '        token.transfer(_newInvestor, value);\n', '    }  \n', '    \n', '    function giveBountyTokens(address _newInvestor, uint256 _value) public onlyOwner {\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        if (returnTokensFromHoldBountyAddress(_value)){\n', '            giveTokens(_newInvestor, _value);\n', '        }\n', '    }\n', '\n', '    function giveProjectTokens(address _newInvestor, uint256 _value) public onlyOwner {\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '\n', '        if (returnTokensFromHoldProjectAddress(_value)){\n', '            giveTokens(_newInvestor, _value);\n', '        }\n', '    }\n', '\n', '    function giveAdvisorsTokens(address _newInvestor, uint256 _value) public onlyOwner {\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        if (returnTokensFromHoldAdvisorsAddress(_value)){\n', '            giveTokens(_newInvestor, _value);\n', '        }\n', '    }\n', '\n', '    function giveAdditionalTokens(address _newInvestor, uint256 _value) public onlyOwner {\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        if (returnTokensFromHoldAdditionalAddress(_value)){\n', '            giveTokens(_newInvestor, _value);\n', '        }\n', '    }\n', '\n', '    function withdrawAllTokensFromBalance() public onlyOwner {\n', '        require(currentState == State.WorkTime || currentState == State.Refunding,"This function is accessable only in WorkTime or Refunding");\n', '        uint value = token.balanceOf(myAddress);\n', '        token.transfer(msg.sender, value);\n', '    }\n', '\n', '    function setState(State _state) internal {\n', '        currentState = _state;\n', '        emit LogStateSwitch(_state);\n', '    }\n', '\n', '    function startPreSale() public onlyOwner onlyInState(State.Init) {\n', '        setState(State.PreSale);\n', '        preSaleStartTime = uint64(now);\n', '        token.lockTransfer(true);\n', '    }\n', '\n', '    function startPreICO() public onlyOwner onlyInState(State.PreSale) {\n', '        // PreSale minimum 10 days\n', '        require (now >= preSaleStartTime + 1 days, "Mimimum period Pre-Sale is 10 days");\n', '        setState(State.PreICO);\n', '        preICOStartTime = uint64(now);\n', '    }\n', '     \n', '    function startCrowdSale() public onlyOwner onlyInState(State.PreICO) {\n', '        // Pre-ICO minimum 15 days\n', '        require (now >= preICOStartTime + 1 days, "Mimimum period Pre-ICO is 15 days");\n', '        setState(State.CrowdSale);\n', '        crowdSaleStartTime = uint64(now);\n', '    }\n', '    \n', '    function finishCrowdSale() public onlyOwner onlyInState(State.CrowdSale) {\n', '        // CrowdSale minimum 30 days\n', '        // Attention - function not have reverse!\n', '\n', '        require (now >= crowdSaleStartTime + 1 days, "Mimimum period CrowdSale is 30 days");\n', '        // test coftcap\n', '        if (soldTokens < TOKEN_SOFT_CAP) {\n', '            // softcap don"t accessable - refunding\n', '            setState(State.Refunding);\n', '        } else {\n', '            // All right! CrowdSale is passed. WithdrawProfit is accessable\n', '            setState(State.WorkTime);\n', '            token.lockTransfer(false);\n', '        }\n', '    }\n', '\n', '\n', '    function blockExternalTransfer() public onlyOwner onlyInState (State.WorkTime){\n', '        //Blocking all external token transfer for dividends calculations\n', '        require (token.lockTransfers() == false);\n', '        token.lockTransfer(true);\n', '    }\n', '\n', '    function unBlockExternalTransfer() public onlyOwner onlyInState (State.WorkTime){\n', '        //Unblocking all external token transfer\n', '        require (token.lockTransfers() == true);\n', '        token.lockTransfer(false);\n', '    }\n', '\n', '\n', '    function calcBonus () public view returns(uint256) {\n', '        // calculation bonus\n', '        uint256 actualBonus = 0;\n', '        if (currentState == State.PreSale){\n', '            actualBonus = 20;\n', '        }\n', '        if (currentState == State.PreICO){\n', '            actualBonus = 10;\n', '        }\n', '        return actualBonus;\n', '    }\n', '\n', ' \n', '    function saleTokens() internal {\n', '        require(currentState != State.Init, "Contract is init, do not accept ether."); \n', '        require(currentState != State.Refunding, "Contract is refunding, do not accept ether.");\n', '        require(currentState != State.WorkTime, "Contract is WorkTime, do not accept ether.");\n', '        //calculation length of periods, pauses, auto set next stage\n', '        if (currentState == State.PreSale) {\n', '            if ((uint64(now) > preSaleStartTime + 1 days) && (uint64(now) <= preSaleStartTime + 2 days)){\n', '                require (false, "It is pause after PreSale stage - contract do not accept ether");\n', '            }\n', '            if (uint64(now) > preSaleStartTime + 2 days){\n', '                setState(State.PreICO);\n', '                preICOStartTime = uint64(now);\n', '            }\n', '        }\n', '\n', '        if (currentState == State.PreICO) {\n', '            if ((uint64(now) > preICOStartTime + 1 days) && (uint64(now) <= preICOStartTime + 2 days)){\n', '                require (false, "It is pause after PreICO stage - contract do not accept ether");\n', '            }\n', '            if (uint64(now) > preICOStartTime + 2 days){\n', '                setState(State.CrowdSale);\n', '                crowdSaleStartTime = uint64(now);\n', '            }\n', '        }        \n', '        \n', '        if (currentState == State.CrowdSale) {\n', '            if ((uint64(now) > crowdSaleStartTime + 1 days) && (uint64(now) <= crowdSaleStartTime + 2 days)){\n', '                require (false, "It is pause after CrowdSale stage - contract do not accept ether");\n', '            }\n', '            if (uint64(now) > crowdSaleStartTime + 2 days){\n', '                // autofinish CrowdSale stage\n', '                if (soldTokens < TOKEN_SOFT_CAP) {\n', '                    // softcap don"t accessable - refunding\n', '                    setState(State.Refunding);\n', '                } else {\n', '                    // All right! CrowdSale is passed. WithdrawProfit is accessable\n', '                    setState(State.WorkTime);\n', '                    token.lockTransfer(false);\n', '                }\n', '            }\n', '        }        \n', '        \n', '        uint tokens = saleRate.mul(msg.value);\n', '        if (currentState == State.PreSale) {\n', '            require (RPESALE_TOKEN_SUPPLY_LIMIT > soldTokens.add(tokens), "HardCap of Pre-Sale is excedded."); \n', '            require (msg.value >= 1 ether / 10, "Minimum 20 ether for transaction all Pre-Sale period");\n', '        }\n', '        if (currentState == State.PreICO) {\n', '            require (RPEICO_TOKEN_SUPPLY_LIMIT > soldTokens.add(tokens), "HardCap of Pre-ICO is excedded.");\n', '            if (uint64(now) < preICOStartTime + 1 days){\n', '                uint limitPerUser = crowdsaleBalances[msg.sender] + msg.value;\n', '                require (limitPerUser <= 1 ether / 10, "Maximum is 20 ether for user in first day of Pre-ICO");\n', '            }\n', '        }\n', '        tokens = tokens.add(tokens.mul(calcBonus()).div(100));\n', '        crowdsaleBalances[msg.sender] = crowdsaleBalances[msg.sender].add(msg.value);\n', '        token.transfer(msg.sender, tokens);\n', '        soldTokens = soldTokens.add(tokens);\n', '    }\n', ' \n', '    function refund() public payable{\n', '        require(currentState == State.Refunding, "Only for Refunding stage.");\n', '        // refund ether to investors\n', '        uint value = crowdsaleBalances[msg.sender]; \n', '        crowdsaleBalances[msg.sender] = 0; \n', '        msg.sender.transfer(value);\n', '        emit Refunding(msg.sender, value);\n', '    }\n', '    \n', '    function withdrawProfit (address _to, uint256 _value) public onlyOwner payable {\n', '    // withdrawProfit - only if coftcap passed\n', '        require (currentState == State.WorkTime, "Contract is not at WorkTime stage. Access denied.");\n', '        require (myAddress.balance >= _value);\n', '        require(_to != address(0));\n', '        _to.transfer(_value);\n', '        emit Withdraw(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '    function() external payable {\n', '        saleTokens();\n', '    }    \n', ' \n', '}']
['// текущая версия - 12 тестовая. уменьшены объемы!!!!\n', '// добавлены комменты в require\n', '// исправлена ф-ия refund\n', '// блокировки переводов сделаны на весь период ICO и Crowdsale\n', '// добавлен лог в refund\n', '// добавлены функции блокировки\\разблокировки внешних переводов в рабочем режиме контракта\n', '// для возможности расчета дивидендов\n', '// CRYPT Token = > CRYPT\n', '// CRTT => CRT\n', '// изменены ф-ции раздачи токенов. бесплатно раздать токены можно только с 4-х зарезервированных адресов\n', '// в fallback функцию добавлен блок расчета длительности периодов, пауз между периодами \n', '// и автоматической смены периодов по окончании контрольного времени (пауза=30 суток)\n', '// изменен порядок расчета лимита при приеме средств - учитываются входящие средства\n', '// изменен порядок расчет лимита в первые сутки Pre-ICO - лимит идет не на транзакцию, а на баланс пользователя плюс его платеж\n', '// отключена возможность приема средств и продажи токенов по окончанию Crowdsale(на стадии WorkTime)\n', '// добавлена функция вывода всех токенов с баланса контракта на адрес собственника по окончании Crowdsale.\n', '\n', '//- Лимиты по объему 0.4 ETH = 2 000 токенов\n', '//- Лимиты по времени 1 СУТКИ \n', '//- Пауза между стадиями - 1 сутки \n', '//* МИНИМАЛЬНЫЙ ПЛАТЕЖ НА PRESALE 0.1 ETH \n', '//* МАКСИМАЛЬНЫЙ ПЛАТЕЖ НА PREICO 0.1 ETH\n', '// Всего выпущено = 50 000 токенов\n', '// HardCap 40% = 20 000 токенов = 4 ETH\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender)\n', '        public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value)\n', '        public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '    );\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '  \n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '\n', '    function allowance(\n', '        address _owner,\n', '        address _spender\n', '    )\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '\n', '    function increaseApproval(\n', '        address _spender,\n', '        uint _addedValue\n', '    )\n', '    public\n', '    returns (bool)\n', '    {\n', '        allowed[msg.sender][_spender] = (\n', '        allowed[msg.sender][_spender].add(_addedValue));\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '\n', '    function decreaseApproval(\n', '        address _spender,\n', '        uint _subtractedValue\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract CRYPTToken is StandardToken {\n', '    string public constant name = "CRYPT";\n', '    string public constant symbol = "CRT";\n', '    uint32 public constant decimals = 18;\n', '    uint256 public INITIAL_SUPPLY = 50000 * 1 ether;\n', '    address public CrowdsaleAddress;\n', '    bool public lockTransfers = false;\n', '\n', '    constructor(address _CrowdsaleAddress) public {\n', '    \n', '        CrowdsaleAddress = _CrowdsaleAddress;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;      \n', '    }\n', '  \n', '    modifier onlyOwner() {\n', '        // only Crowdsale contract\n', '        require(msg.sender == CrowdsaleAddress);\n', '        _;\n', '    }\n', '\n', '     // Override\n', '    function transfer(address _to, uint256 _value) public returns(bool){\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(!lockTransfers, "Transfers are prohibited in ICO and Crowdsale period");\n', '        }\n', '        return super.transfer(_to,_value);\n', '    }\n', '\n', '     // Override\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns(bool){\n', '        if (msg.sender != CrowdsaleAddress){\n', '            require(!lockTransfers, "Transfers are prohibited in ICO and Crowdsale period");\n', '        }\n', '        return super.transferFrom(_from,_to,_value);\n', '    }\n', '     \n', '    function acceptTokens(address _from, uint256 _value) public onlyOwner returns (bool){\n', '        require (balances[_from] >= _value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[CrowdsaleAddress] = balances[CrowdsaleAddress].add(_value);\n', '        emit Transfer(_from, CrowdsaleAddress, _value);\n', '        return true;\n', '    }\n', '\n', '    function lockTransfer(bool _lock) public onlyOwner {\n', '        lockTransfers = _lock;\n', '    }\n', '\n', '\n', '\n', '    function() external payable {\n', '        // The token contract don`t receive ether\n', '        revert();\n', '    }  \n', '}\n', '\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    address candidate;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        candidate = newOwner;\n', '    }\n', '\n', '    function confirmOwnership() public {\n', '        require(candidate == msg.sender);\n', '        owner = candidate;\n', '        delete candidate;\n', '    }\n', '\n', '}\n', '\n', 'contract HoldProjectAddress {\n', '    //Address where stored command tokens- 50%\n', '    //Withdraw tokens allowed only after 1 year\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    } \n', '}\n', '\n', 'contract HoldBountyAddress {\n', '    //Address where stored bounty tokens- 1%\n', '    //Withdraw tokens allowed only after 40 days\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    } \n', '}\n', '\n', 'contract HoldAdvisorsAddress {\n', '    //Address where stored advisors tokens- 1%\n', '    //Withdraw tokens allowed only after 40 days\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    } \n', '}\n', '\n', 'contract HoldAdditionalAddress {\n', '    //Address where stored additional tokens- 8%\n', '    function() external payable {\n', '        // The contract don`t receive ether\n', '        revert();\n', '    } \n', '}\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint; \n', '    event LogStateSwitch(State newState);\n', '    event Withdraw(address indexed from, address indexed to, uint256 amount);\n', '    event Refunding(address indexed to, uint256 amount);\n', '    mapping(address => uint) public crowdsaleBalances;\n', '\n', '    address myAddress = this;\n', '    uint64 preSaleStartTime = 0;\n', '    uint64 preICOStartTime = 0;\n', '    uint64 crowdSaleStartTime = 0;\n', '    uint public  saleRate = 5000;  //tokens for 1 ether\n', '    uint256 public soldTokens = 0;\n', '\n', '    // 50 000 000 sold tokens limit for Pre-Sale\n', '    uint public constant RPESALE_TOKEN_SUPPLY_LIMIT = 2000 * 1 ether;\n', '\n', '\n', '    // 100 000 000 sold tokens limit for Pre-ICO\n', '    uint public constant RPEICO_TOKEN_SUPPLY_LIMIT = 4000 * 1 ether;\n', '\n', '    // 40 000 000 tokens soft cap (otherwise - refund)\n', '    // equal 8 000 eth\n', '\n', '\n', '    uint public constant TOKEN_SOFT_CAP = 2000 * 1 ether;\n', '\n', '    \n', '    CRYPTToken public token = new CRYPTToken(myAddress);\n', '    \n', '    // New address for hold tokens\n', '    HoldProjectAddress public holdAddress1 = new HoldProjectAddress();\n', '    HoldBountyAddress public holdAddress2 = new HoldBountyAddress();\n', '    HoldAdvisorsAddress public holdAddress3 = new HoldAdvisorsAddress();\n', '    HoldAdditionalAddress public holdAddress4 = new HoldAdditionalAddress();\n', '\n', '    // Create state of contract\n', '    enum State { \n', '        Init,    \n', '        PreSale, \n', '        PreICO,  \n', '        CrowdSale,\n', '        Refunding,\n', '        WorkTime\n', '    }\n', '        \n', '    State public currentState = State.Init;\n', '\n', '    modifier onlyInState(State state){ \n', '        require(state==currentState); \n', '        _; \n', '    }\n', '\n', '    constructor() public {\n', '        uint256 TotalTokens = token.INITIAL_SUPPLY().div(1 ether);\n', '        // distribute tokens\n', '        // Transer tokens to project address.  (50%)\n', '        giveTokens(address(holdAddress1), TotalTokens.div(2));\n', '        // Transer tokens to bounty address.  (1%)\n', '        giveTokens(address(holdAddress2), TotalTokens.div(100));\n', '        // Transer tokens to advisors address. (1%)\n', '        giveTokens(address(holdAddress3), TotalTokens.div(100));\n', '        // Transer tokens to additional address. (8%)\n', '        giveTokens(address(holdAddress4), TotalTokens.div(100).mul(8));\n', '        \n', '    }\n', '\n', '    function returnTokensFromHoldProjectAddress(uint256 _value) internal returns(bool){\n', '        // the function take tokens from HoldProjectAddress to contract\n', '        // only after 1 year\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        require (now >= preSaleStartTime + 1 days, "only after 1 year");\n', '        token.acceptTokens(address(holdAddress1), value); \n', '        return true;\n', '    } \n', '\n', '    function returnTokensFromHoldBountyAddress(uint256 _value) internal returns(bool){\n', '        // the function take tokens from HoldBountyAddress to contract\n', '        // only after 40 days\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        require (now >= preSaleStartTime + 1 days, "only after 40 days");\n', '        token.acceptTokens(address(holdAddress2), value);    \n', '        return true;\n', '    } \n', '    \n', '    function returnTokensFromHoldAdvisorsAddress(uint256 _value) internal returns(bool){\n', '        // the function take tokens from HoldAdvisorsAddress to contract\n', '        // only after 40 days\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        require (now >= preSaleStartTime + 1 days, "only after 40 days");\n', '        token.acceptTokens(address(holdAddress3), value);    \n', '        return true;\n', '    } \n', '    \n', '    function returnTokensFromHoldAdditionalAddress(uint256 _value) internal returns(bool){\n', '        // the function take tokens from HoldAdditionalAddress to contract\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        uint256 value = _value;\n', '        require (value >= 1);\n', '        value = value.mul(1 ether);\n', '        token.acceptTokens(address(holdAddress4), value);    \n', '        return true;\n', '    }     \n', '    \n', '    function giveTokens(address _newInvestor, uint256 _value) internal {\n', '        require (_newInvestor != address(0));\n', '        require (_value >= 1);\n', '        uint256 value = _value;\n', '        value = value.mul(1 ether);\n', '        token.transfer(_newInvestor, value);\n', '    }  \n', '    \n', '    function giveBountyTokens(address _newInvestor, uint256 _value) public onlyOwner {\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        if (returnTokensFromHoldBountyAddress(_value)){\n', '            giveTokens(_newInvestor, _value);\n', '        }\n', '    }\n', '\n', '    function giveProjectTokens(address _newInvestor, uint256 _value) public onlyOwner {\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '\n', '        if (returnTokensFromHoldProjectAddress(_value)){\n', '            giveTokens(_newInvestor, _value);\n', '        }\n', '    }\n', '\n', '    function giveAdvisorsTokens(address _newInvestor, uint256 _value) public onlyOwner {\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        if (returnTokensFromHoldAdvisorsAddress(_value)){\n', '            giveTokens(_newInvestor, _value);\n', '        }\n', '    }\n', '\n', '    function giveAdditionalTokens(address _newInvestor, uint256 _value) public onlyOwner {\n', '        // the sum is entered in whole tokens (1 = 1 token)\n', '        if (returnTokensFromHoldAdditionalAddress(_value)){\n', '            giveTokens(_newInvestor, _value);\n', '        }\n', '    }\n', '\n', '    function withdrawAllTokensFromBalance() public onlyOwner {\n', '        require(currentState == State.WorkTime || currentState == State.Refunding,"This function is accessable only in WorkTime or Refunding");\n', '        uint value = token.balanceOf(myAddress);\n', '        token.transfer(msg.sender, value);\n', '    }\n', '\n', '    function setState(State _state) internal {\n', '        currentState = _state;\n', '        emit LogStateSwitch(_state);\n', '    }\n', '\n', '    function startPreSale() public onlyOwner onlyInState(State.Init) {\n', '        setState(State.PreSale);\n', '        preSaleStartTime = uint64(now);\n', '        token.lockTransfer(true);\n', '    }\n', '\n', '    function startPreICO() public onlyOwner onlyInState(State.PreSale) {\n', '        // PreSale minimum 10 days\n', '        require (now >= preSaleStartTime + 1 days, "Mimimum period Pre-Sale is 10 days");\n', '        setState(State.PreICO);\n', '        preICOStartTime = uint64(now);\n', '    }\n', '     \n', '    function startCrowdSale() public onlyOwner onlyInState(State.PreICO) {\n', '        // Pre-ICO minimum 15 days\n', '        require (now >= preICOStartTime + 1 days, "Mimimum period Pre-ICO is 15 days");\n', '        setState(State.CrowdSale);\n', '        crowdSaleStartTime = uint64(now);\n', '    }\n', '    \n', '    function finishCrowdSale() public onlyOwner onlyInState(State.CrowdSale) {\n', '        // CrowdSale minimum 30 days\n', '        // Attention - function not have reverse!\n', '\n', '        require (now >= crowdSaleStartTime + 1 days, "Mimimum period CrowdSale is 30 days");\n', '        // test coftcap\n', '        if (soldTokens < TOKEN_SOFT_CAP) {\n', '            // softcap don"t accessable - refunding\n', '            setState(State.Refunding);\n', '        } else {\n', '            // All right! CrowdSale is passed. WithdrawProfit is accessable\n', '            setState(State.WorkTime);\n', '            token.lockTransfer(false);\n', '        }\n', '    }\n', '\n', '\n', '    function blockExternalTransfer() public onlyOwner onlyInState (State.WorkTime){\n', '        //Blocking all external token transfer for dividends calculations\n', '        require (token.lockTransfers() == false);\n', '        token.lockTransfer(true);\n', '    }\n', '\n', '    function unBlockExternalTransfer() public onlyOwner onlyInState (State.WorkTime){\n', '        //Unblocking all external token transfer\n', '        require (token.lockTransfers() == true);\n', '        token.lockTransfer(false);\n', '    }\n', '\n', '\n', '    function calcBonus () public view returns(uint256) {\n', '        // calculation bonus\n', '        uint256 actualBonus = 0;\n', '        if (currentState == State.PreSale){\n', '            actualBonus = 20;\n', '        }\n', '        if (currentState == State.PreICO){\n', '            actualBonus = 10;\n', '        }\n', '        return actualBonus;\n', '    }\n', '\n', ' \n', '    function saleTokens() internal {\n', '        require(currentState != State.Init, "Contract is init, do not accept ether."); \n', '        require(currentState != State.Refunding, "Contract is refunding, do not accept ether.");\n', '        require(currentState != State.WorkTime, "Contract is WorkTime, do not accept ether.");\n', '        //calculation length of periods, pauses, auto set next stage\n', '        if (currentState == State.PreSale) {\n', '            if ((uint64(now) > preSaleStartTime + 1 days) && (uint64(now) <= preSaleStartTime + 2 days)){\n', '                require (false, "It is pause after PreSale stage - contract do not accept ether");\n', '            }\n', '            if (uint64(now) > preSaleStartTime + 2 days){\n', '                setState(State.PreICO);\n', '                preICOStartTime = uint64(now);\n', '            }\n', '        }\n', '\n', '        if (currentState == State.PreICO) {\n', '            if ((uint64(now) > preICOStartTime + 1 days) && (uint64(now) <= preICOStartTime + 2 days)){\n', '                require (false, "It is pause after PreICO stage - contract do not accept ether");\n', '            }\n', '            if (uint64(now) > preICOStartTime + 2 days){\n', '                setState(State.CrowdSale);\n', '                crowdSaleStartTime = uint64(now);\n', '            }\n', '        }        \n', '        \n', '        if (currentState == State.CrowdSale) {\n', '            if ((uint64(now) > crowdSaleStartTime + 1 days) && (uint64(now) <= crowdSaleStartTime + 2 days)){\n', '                require (false, "It is pause after CrowdSale stage - contract do not accept ether");\n', '            }\n', '            if (uint64(now) > crowdSaleStartTime + 2 days){\n', '                // autofinish CrowdSale stage\n', '                if (soldTokens < TOKEN_SOFT_CAP) {\n', '                    // softcap don"t accessable - refunding\n', '                    setState(State.Refunding);\n', '                } else {\n', '                    // All right! CrowdSale is passed. WithdrawProfit is accessable\n', '                    setState(State.WorkTime);\n', '                    token.lockTransfer(false);\n', '                }\n', '            }\n', '        }        \n', '        \n', '        uint tokens = saleRate.mul(msg.value);\n', '        if (currentState == State.PreSale) {\n', '            require (RPESALE_TOKEN_SUPPLY_LIMIT > soldTokens.add(tokens), "HardCap of Pre-Sale is excedded."); \n', '            require (msg.value >= 1 ether / 10, "Minimum 20 ether for transaction all Pre-Sale period");\n', '        }\n', '        if (currentState == State.PreICO) {\n', '            require (RPEICO_TOKEN_SUPPLY_LIMIT > soldTokens.add(tokens), "HardCap of Pre-ICO is excedded.");\n', '            if (uint64(now) < preICOStartTime + 1 days){\n', '                uint limitPerUser = crowdsaleBalances[msg.sender] + msg.value;\n', '                require (limitPerUser <= 1 ether / 10, "Maximum is 20 ether for user in first day of Pre-ICO");\n', '            }\n', '        }\n', '        tokens = tokens.add(tokens.mul(calcBonus()).div(100));\n', '        crowdsaleBalances[msg.sender] = crowdsaleBalances[msg.sender].add(msg.value);\n', '        token.transfer(msg.sender, tokens);\n', '        soldTokens = soldTokens.add(tokens);\n', '    }\n', ' \n', '    function refund() public payable{\n', '        require(currentState == State.Refunding, "Only for Refunding stage.");\n', '        // refund ether to investors\n', '        uint value = crowdsaleBalances[msg.sender]; \n', '        crowdsaleBalances[msg.sender] = 0; \n', '        msg.sender.transfer(value);\n', '        emit Refunding(msg.sender, value);\n', '    }\n', '    \n', '    function withdrawProfit (address _to, uint256 _value) public onlyOwner payable {\n', '    // withdrawProfit - only if coftcap passed\n', '        require (currentState == State.WorkTime, "Contract is not at WorkTime stage. Access denied.");\n', '        require (myAddress.balance >= _value);\n', '        require(_to != address(0));\n', '        _to.transfer(_value);\n', '        emit Withdraw(msg.sender, _to, _value);\n', '    }\n', '\n', '\n', '    function() external payable {\n', '        saleTokens();\n', '    }    \n', ' \n', '}']
