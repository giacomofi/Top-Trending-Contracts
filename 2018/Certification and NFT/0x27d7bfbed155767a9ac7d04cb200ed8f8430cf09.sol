['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable(address _owner) public {\n', '    owner = _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(tx.origin == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', 'contract Stoppable is Ownable {\n', '  bool public halted;\n', '\n', '  event SaleStopped(address owner, uint256 datetime);\n', '\n', '  function Stoppable(address owner) public Ownable(owner) {}\n', '\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    _;\n', '  }\n', '\n', '  function hasHalted() public view returns (bool isHalted) {\n', '  \treturn halted;\n', '  }\n', '\n', '   // called by the owner on emergency, triggers stopped state\n', '  function stopICO() external onlyOwner {\n', '    halted = true;\n', '    SaleStopped(msg.sender, now);\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', '/* SALE_mtf is the smart contract facilitating MetaFusions first public crowdsale. Created by Iconemy on 11/10/18\n', " * SALE_mtf allows the owner of the MetaFusion tokens to 'allow' the sale to sell a portion of tokens on his/her behalf, \n", ' * this will then allow the owner to run further sales in the future by allowing to spend a further portion of tokens. \n', ' * The sale is stoppable therefore, the owner can stop the sale in an emergency and allow the investors to withdraw their \n', ' * investments. \n', ' */\n', 'contract SALE_mtf is Stoppable {\n', '  using SafeMath for uint256;\n', '\n', '  bool private approval = false;\n', '\n', '  mtfToken public token;\n', '  uint256 public rate;\n', '\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  uint256 public weiRaised;\n', '  uint256 public tokensSent;\n', '\n', '  mapping(address => uint256) public balanceOf;\n', '  mapping(address => uint256) public tokenBalanceOf;\n', '\n', '  address public iconemy_wallet;\n', '  uint256 public commission; \n', '\n', '  event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount, uint256 datetime);\n', '  event BeneficiaryWithdrawal(address beneficiary, uint256 amount, uint256 datetime);\n', '  event CommissionCollected(address beneficiary, uint256 amount, uint256 datetime);\n', '\n', '  // CONSTRUCTOR\n', '  function SALE_mtf(address _token, uint256 _rate, uint256 _startTime, uint256 _endTime, address _iconemy, address _owner) public Stoppable(_owner) {\n', '    require(_startTime > now);\n', '    require(_startTime < _endTime);\n', '\n', '    token = mtfToken(_token);\n', '\n', '    rate = _rate;\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    iconemy_wallet = _iconemy;\n', '  }\n', '\n', '  // Recieve approval is used in the sales interface on the MetaFusion ERC-20 token, allowing the owner to use approveAndCall\n', '  // When this function is called, we check the allowance of the sale the tokens interface and store 1% of that as a maximum commission\n', '  // We do this to reserve 1% of tokens in the case that the sale sells out, Iconemy will collect the full 1%. \n', '  function receiveApproval() onlyOwner external {\n', '    approval = true;\n', '    uint256 allowance = allowanceOf();\n', '\n', '    // Reserved for Iconemy commission\n', '    commission = allowance / 100;\n', '  }\n', '\n', '  // Uses the token interface to check how many tokens the sale is allowed to sell\n', '  function allowanceOf() public view returns(uint256) {\n', '    return token.allowanceOf(owner, this);\n', '  }\n', '\n', '  // Shows that the sale has been given approval to sell tokens by the token owner\n', '  function hasApproval() public view returns(bool) {\n', '    return approval;\n', '  }\n', '\n', '  function getPrice() public view returns(uint256) {\n', '    return rate;\n', '  }\n', '\n', '  /*\n', '   * This method has taken from Pickeringware ltd\n', '   * We have split this method down into overidable functions which may affect how users purchase tokens\n', '  */ \n', '  function buyTokens() public stopInEmergency payable {\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = tokensToRecieve(weiAmount);\n', '\n', '    validPurchase(tokens);\n', '\n', '    finalizeSale(msg.sender, weiAmount, tokens);\n', '\n', '    TokenPurchase(msg.sender, msg.value, tokens, now);\n', '  }\n', '\n', '  //Check that the amount of tokens requested is less than or equal to the ammount of tokens allowed to send\n', '  function checkAllowance(uint256 _tokens) public view {\n', '    uint256 allowance = allowanceOf();\n', '\n', '    allowance = allowance - commission;\n', '\n', '    require(allowance >= _tokens);\n', '  }\n', '\n', '  // If the transfer function works using the token interface, mark the balances of the buyer\n', '  function finalizeSale(address from, uint256 _weiAmount, uint256 _tokens) internal {\n', '    require(token.transferFrom(owner, from, _tokens));\n', '\n', '    balanceOf[from] = balanceOf[from].add(_weiAmount);\n', '    tokenBalanceOf[from] = tokenBalanceOf[from].add(_tokens);\n', '\n', '    weiRaised = weiRaised.add(_weiAmount);\n', '    tokensSent = tokensSent.add(_tokens);\n', '  }\n', '\n', '  // Calculate amount of tokens due for the amount of ETH sent\n', '  function tokensToRecieve(uint256 _wei) internal view returns (uint256 tokens) {\n', '    return _wei.div(rate);\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime || halted;\n', '  }\n', '\n', '  // Checks if the purchase is valid\n', '  function validPurchase(uint256 _tokens) internal view returns (bool) {\n', '    require(!hasEnded());\n', '\n', '    checkAllowance(_tokens);\n', '\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '\n', '    bool nonZeroPurchase = msg.value != 0;\n', '\n', '    require(withinPeriod && nonZeroPurchase);\n', '  }\n', '\n', '  // Allows someone to check if they are valid for a refund\n', '  // This can be used front-end to show/hide the collect refund function \n', '  function refundAvailable() public view returns(bool) {\n', '    return balanceOf[msg.sender] > 0 && hasHalted();\n', '  }\n', '\n', '  // Allows an investor to collect their investment if the sale was stopped prematurely\n', '  function collectRefund() public onlyInEmergency {\n', '    uint256 balance = balanceOf[msg.sender];\n', '\n', '    require(balance > 0);\n', '\n', '    balanceOf[msg.sender] = 0;\n', '\n', '    msg.sender.transfer(balance);\n', '  }\n', '\n', '  // Allows the owner to collect the eth raised in the sale\n', '  function collectInvestment() public onlyOwner stopInEmergency returns(bool) {\n', '    require(hasEnded());\n', '\n', '    owner.transfer(weiRaised);\n', '    BeneficiaryWithdrawal(owner, weiRaised, now);\n', '  }\n', '\n', '  // Allows Iconemy to collect 1% of the tokens sold in the crowdsale\n', '  function collectCommission() public stopInEmergency returns(bool) {\n', '    require(msg.sender == iconemy_wallet);\n', '    require(hasEnded());\n', '\n', '    uint256 one_percent = tokensSent / 100;\n', '\n', '    finalizeSale(iconemy_wallet, 0, one_percent);\n', '\n', '    CommissionCollected(iconemy_wallet, one_percent, now);\n', '  }\n', '}  \n', '\n', '// Token interface used for interacting with the MetaFusion ERC-20 contract\n', 'contract mtfToken { \n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success); \n', '  function allowanceOf(address _owner, address _spender) public constant returns (uint256 remaining);\n', '}']