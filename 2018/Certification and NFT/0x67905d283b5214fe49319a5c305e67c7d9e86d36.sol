['//File: contracts/acl/IACL.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', 'interface IACL {\n', '    function initialize(address permissionsCreator) public;\n', '    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n', '}\n', '\n', '//File: contracts/kernel/IKernel.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', 'interface IKernel {\n', '    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\n', '\n', '    function acl() public view returns (IACL);\n', '    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\n', '\n', '    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\n', '    function getApp(bytes32 id) public view returns (address);\n', '}\n', '//File: contracts/kernel/KernelStorage.sol\n', 'pragma solidity 0.4.18;\n', '\n', '\n', 'contract KernelConstants {\n', '    bytes32 constant public CORE_NAMESPACE = keccak256("core");\n', '    bytes32 constant public APP_BASES_NAMESPACE = keccak256("base");\n', '    bytes32 constant public APP_ADDR_NAMESPACE = keccak256("app");\n', '\n', '    bytes32 constant public KERNEL_APP_ID = keccak256("kernel.aragonpm.eth");\n', '    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\n', '\n', '    bytes32 constant public ACL_APP_ID = keccak256("acl.aragonpm.eth");\n', '    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\n', '}\n', '\n', '\n', 'contract KernelStorage is KernelConstants {\n', '    mapping (bytes32 => address) public apps;\n', '}\n', '\n', '//File: contracts/acl/ACLSyntaxSugar.sol\n', 'pragma solidity 0.4.18;\n', '\n', '\n', 'contract ACLSyntaxSugar {\n', '    function arr() internal pure returns (uint256[] r) {}\n', '\n', '    function arr(bytes32 _a) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a));\n', '    }\n', '\n', '    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a));\n', '    }\n', '\n', '    function arr(address _a, address _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), _b, _c);\n', '    }\n', '\n', '    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b));\n', '    }\n', '\n', '    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), _c, _d, _e);\n', '    }\n', '\n', '    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), uint256(_c));\n', '    }\n', '\n', '    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        return arr(uint256(_a), uint256(_b), uint256(_c));\n', '    }\n', '\n', '    function arr(uint256 _a) internal pure returns (uint256[] r) {\n', '        r = new uint256[](1);\n', '        r[0] = _a;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\n', '        r = new uint256[](2);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\n', '        r = new uint256[](3);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\n', '        r = new uint256[](4);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '        r[3] = _d;\n', '    }\n', '\n', '    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\n', '        r = new uint256[](5);\n', '        r[0] = _a;\n', '        r[1] = _b;\n', '        r[2] = _c;\n', '        r[3] = _d;\n', '        r[4] = _e;\n', '    }\n', '}\n', '\n', '\n', 'contract ACLHelpers {\n', '    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\n', '        return uint8(_x >> (8 * 30));\n', '    }\n', '\n', '    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\n', '        return uint8(_x >> (8 * 31));\n', '    }\n', '\n', '    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\n', '        a = uint32(_x);\n', '        b = uint32(_x >> (8 * 4));\n', '        c = uint32(_x >> (8 * 8));\n', '    }\n', '}\n', '\n', '//File: contracts/apps/IAppProxy.sol\n', 'pragma solidity 0.4.18;\n', '\n', 'interface IAppProxy {\n', '    function isUpgradeable() public pure returns (bool);\n', '    function getCode() public view returns (address);\n', '}\n', '\n', '//File: contracts/apps/AppStorage.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', 'contract AppStorage {\n', '    IKernel public kernel;\n', '    bytes32 public appId;\n', '    address internal pinnedCode; // used by Proxy Pinned\n', '    uint256 internal initializationBlock; // used by Initializable\n', '    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\n', '    uint256 private offset;\n', '}\n', '\n', '//File: contracts/common/Initializable.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', 'contract Initializable is AppStorage {\n', '    modifier onlyInit {\n', '        require(initializationBlock == 0);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @return Block number in which the contract was initialized\n', '    */\n', '    function getInitializationBlock() public view returns (uint256) {\n', '        return initializationBlock;\n', '    }\n', '\n', '    /**\n', '    * @dev Function to be called by top level contract after initialization has finished.\n', '    */\n', '    function initialized() internal onlyInit {\n', '        initializationBlock = getBlockNumber();\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the current block number.\n', '    *      Using a function rather than `block.number` allows us to easily mock the block number in\n', '    *      tests.\n', '    */\n', '    function getBlockNumber() internal view returns (uint256) {\n', '        return block.number;\n', '    }\n', '}\n', '\n', '//File: contracts/common/DelegateProxy.sol\n', 'pragma solidity 0.4.18;\n', '\n', '\n', 'contract DelegateProxy {\n', '    /**\n', '    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\n', '    * @param _dst Destination address to perform the delegatecall\n', '    * @param _calldata Calldata for the delegatecall\n', '    */\n', '    function delegatedFwd(address _dst, bytes _calldata) internal {\n', '        require(isContract(_dst));\n', '        assembly {\n', '            let result := delegatecall(sub(gas, 10000), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\n', '            let size := returndatasize\n', '\n', '            let ptr := mload(0x40)\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\n', '            // if the call returned error data, forward it\n', '            switch result case 0 { revert(ptr, size) }\n', '            default { return(ptr, size) }\n', '        }\n', '    }\n', '\n', '    function isContract(address _target) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly { size := extcodesize(_target) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '//File: contracts/apps/AppProxyBase.sol\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AppProxyBase is IAppProxy, AppStorage, DelegateProxy, KernelConstants {\n', '    /**\n', '    * @dev Initialize AppProxy\n', '    * @param _kernel Reference to organization kernel for the app\n', '    * @param _appId Identifier for app\n', '    * @param _initializePayload Payload for call to be made after setup to initialize\n', '    */\n', '    function AppProxyBase(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\n', '        kernel = _kernel;\n', '        appId = _appId;\n', '\n', '        // Implicit check that kernel is actually a Kernel\n', '        // The EVM doesn&#39;t actually provide a way for us to make sure, but we can force a revert to\n', '        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\n', '        // it.\n', '        address appCode = getAppBase(appId);\n', '\n', '        // If initialize payload is provided, it will be executed\n', '        if (_initializePayload.length > 0) {\n', '            require(isContract(appCode));\n', '            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\n', '            // returns ending execution context and halts contract deployment\n', '            require(appCode.delegatecall(_initializePayload));\n', '        }\n', '    }\n', '\n', '    function getAppBase(bytes32 _appId) internal view returns (address) {\n', '        return kernel.getApp(keccak256(APP_BASES_NAMESPACE, _appId));\n', '    }\n', '\n', '    function () payable public {\n', '        address target = getCode();\n', '        require(target != 0); // if app code hasn&#39;t been set yet, don&#39;t call\n', '        delegatedFwd(target, msg.data);\n', '    }\n', '}\n', '//File: contracts/apps/AppProxyUpgradeable.sol\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '\n', '\n', 'contract AppProxyUpgradeable is AppProxyBase {\n', '    address public pinnedCode;\n', '\n', '    /**\n', '    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\n', '    * @param _kernel Reference to organization kernel for the app\n', '    * @param _appId Identifier for app\n', '    * @param _initializePayload Payload for call to be made after setup to initialize\n', '    */\n', '    function AppProxyUpgradeable(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\n', '             AppProxyBase(_kernel, _appId, _initializePayload) public\n', '    {\n', '\n', '    }\n', '\n', '    function getCode() public view returns (address) {\n', '        return getAppBase(appId);\n', '    }\n', '\n', '    function isUpgradeable() public pure returns (bool) {\n', '        return true;\n', '    }\n', '}\n', '\n', '//File: contracts/apps/AppProxyPinned.sol\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '\n', '\n', 'contract AppProxyPinned is AppProxyBase {\n', '    /**\n', '    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\n', '    * @param _kernel Reference to organization kernel for the app\n', '    * @param _appId Identifier for app\n', '    * @param _initializePayload Payload for call to be made after setup to initialize\n', '    */\n', '    function AppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\n', '             AppProxyBase(_kernel, _appId, _initializePayload) public\n', '    {\n', '        pinnedCode = getAppBase(appId);\n', '        require(pinnedCode != address(0));\n', '    }\n', '\n', '    function getCode() public view returns (address) {\n', '        return pinnedCode;\n', '    }\n', '\n', '    function isUpgradeable() public pure returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function () payable public {\n', '        delegatedFwd(getCode(), msg.data);\n', '    }\n', '}\n', '//File: contracts/factory/AppProxyFactory.sol\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '\n', '\n', '\n', 'contract AppProxyFactory {\n', '    event NewAppProxy(address proxy);\n', '\n', '    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\n', '        return newAppProxy(_kernel, _appId, new bytes(0));\n', '    }\n', '\n', '    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\n', '        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\n', '        NewAppProxy(address(proxy));\n', '        return proxy;\n', '    }\n', '\n', '    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\n', '        return newAppProxyPinned(_kernel, _appId, new bytes(0));\n', '    }\n', '\n', '    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\n', '        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\n', '        NewAppProxy(address(proxy));\n', '        return proxy;\n', '    }\n', '}\n', '\n', '//File: contracts/kernel/Kernel.sol\n', 'pragma solidity 0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Kernel is IKernel, KernelStorage, Initializable, AppProxyFactory, ACLSyntaxSugar {\n', '    bytes32 constant public APP_MANAGER_ROLE = keccak256("APP_MANAGER_ROLE");\n', '\n', '    /**\n', '    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\n', '    * @notice Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions\n', '    * @param _baseAcl Address of base ACL app\n', '    * @param _permissionsCreator Entity that will be given permission over createPermission\n', '    */\n', '    function initialize(address _baseAcl, address _permissionsCreator) onlyInit public {\n', '        initialized();\n', '\n', '        IACL acl = IACL(newAppProxy(this, ACL_APP_ID));\n', '\n', '        _setApp(APP_BASES_NAMESPACE, ACL_APP_ID, _baseAcl);\n', '        _setApp(APP_ADDR_NAMESPACE, ACL_APP_ID, acl);\n', '\n', '        acl.initialize(_permissionsCreator);\n', '    }\n', '\n', '    /**\n', '    * @dev Create a new instance of an app linked to this kernel and set its base\n', '    *      implementation if it was not already set\n', '    * @param _name Name of the app\n', '    * @param _appBase Address of the app&#39;s base implementation\n', '    * @return AppProxy instance\n', '    */\n', '    function newAppInstance(bytes32 _name, address _appBase) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (IAppProxy appProxy) {\n', '        _setAppIfNew(APP_BASES_NAMESPACE, _name, _appBase);\n', '        appProxy = newAppProxy(this, _name);\n', '    }\n', '\n', '    /**\n', '    * @dev Create a new pinned instance of an app linked to this kernel and set\n', '    *      its base implementation if it was not already set\n', '    * @param _name Name of the app\n', '    * @param _appBase Address of the app&#39;s base implementation\n', '    * @return AppProxy instance\n', '    */\n', '    function newPinnedAppInstance(bytes32 _name, address _appBase) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (IAppProxy appProxy) {\n', '        _setAppIfNew(APP_BASES_NAMESPACE, _name, _appBase);\n', '        appProxy = newAppProxyPinned(this, _name);\n', '    }\n', '\n', '    /**\n', '    * @dev Set the resolving address of an app instance or base implementation\n', '    * @param _namespace App namespace to use\n', '    * @param _name Name of the app\n', '    * @param _app Address of the app\n', '    * @return ID of app\n', '    */\n', '    function setApp(bytes32 _namespace, bytes32 _name, address _app) auth(APP_MANAGER_ROLE, arr(_namespace, _name)) kernelIntegrity public returns (bytes32 id) {\n', '        return _setApp(_namespace, _name, _app);\n', '    }\n', '\n', '    /**\n', '    * @dev Get the address of an app instance or base implementation\n', '    * @param _id App identifier\n', '    * @return Address of the app\n', '    */\n', '    function getApp(bytes32 _id) public view returns (address) {\n', '        return apps[_id];\n', '    }\n', '\n', '    /**\n', '    * @dev Get the installed ACL app\n', '    * @return ACL app\n', '    */\n', '    function acl() public view returns (IACL) {\n', '        return IACL(getApp(ACL_APP));\n', '    }\n', '\n', '    /**\n', '    * @dev Function called by apps to check ACL on kernel or to check permission status\n', '    * @param _who Sender of the original call\n', '    * @param _where Address of the app\n', '    * @param _what Identifier for a group of actions in app\n', '    * @param _how Extra data for ACL auth\n', '    * @return boolean indicating whether the ACL allows the role or not\n', '    */\n', '    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\n', '        return acl().hasPermission(_who, _where, _what, _how);\n', '    }\n', '\n', '    function _setApp(bytes32 _namespace, bytes32 _name, address _app) internal returns (bytes32 id) {\n', '        id = keccak256(_namespace, _name);\n', '        apps[id] = _app;\n', '        SetApp(_namespace, _name, id, _app);\n', '    }\n', '\n', '    function _setAppIfNew(bytes32 _namespace, bytes32 _name, address _app) internal returns (bytes32 id) {\n', '        id = keccak256(_namespace, _name);\n', '\n', '        if (_app != address(0)) {\n', '            address app = getApp(id);\n', '            if (app != address(0)) {\n', '                require(app == _app);\n', '            } else {\n', '                apps[id] = _app;\n', '                SetApp(_namespace, _name, id, _app);\n', '            }\n', '        }\n', '    }\n', '\n', '    modifier auth(bytes32 _role, uint256[] memory params) {\n', '        bytes memory how;\n', '        uint256 byteLength = params.length * 32;\n', '        assembly {\n', '            how := params // forced casting\n', '            mstore(how, byteLength)\n', '        }\n', '        // Params is invalid from this point fwd\n', '        require(hasPermission(msg.sender, address(this), _role, how));\n', '        _;\n', '    }\n', '\n', '    modifier kernelIntegrity {\n', '        _; // After execution check integrity\n', '        address kernel = getApp(KERNEL_APP);\n', '        uint256 size;\n', '        assembly { size := extcodesize(kernel) }\n', '        require(size > 0);\n', '    }\n', '}']