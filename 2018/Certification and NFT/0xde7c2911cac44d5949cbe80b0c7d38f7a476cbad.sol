['pragma solidity ^0.4.25;\n', ' \n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = 0x2C43dfBAc5FC1808Cb8ccEbCc9E24BEaB1aaa816;//msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract SimpleWallet is Ownable {\n', '\n', '    address public wallet1 = 0xf038F656b511Bf37389b8Ae22D44fB3395327007;\n', '    address public wallet2 = 0xf038F656b511Bf37389b8Ae22D44fB3395327007;\n', '    \n', '    address public newWallet1 = 0xf038F656b511Bf37389b8Ae22D44fB3395327007;\n', '    address public newWallet2 = 0xf038F656b511Bf37389b8Ae22D44fB3395327007;\n', '    \n', '    function setNewWallet1(address _newWallet1) public onlyOwner {\n', '        newWallet1 = _newWallet1;\n', '    }    \n', '    \n', '    function setNewWallet2(address _newWallet2) public onlyOwner {\n', '        newWallet2 = _newWallet2;\n', '    }  \n', '    \n', '    function setWallet1(address _wallet1) public {\n', '        require(msg.sender == wallet1);\n', '        require(newWallet1 == _wallet1);\n', '        \n', '        wallet1 = _wallet1;\n', '    }    \n', '    \n', '    function setWallet2(address _wallet2) public {\n', '        require(msg.sender == wallet2);\n', '        require(newWallet2 == _wallet2);\n', '        \n', '        wallet2 = _wallet2;\n', '    }  \n', '    \n', '    \n', '    function withdraw() public{\n', '        require( (msg.sender == wallet1)||(msg.sender == wallet2) );\n', '        uint half = address(this).balance/2;\n', '        wallet1.send(half);\n', '        wallet2.send(half);\n', '    } \n', '    \n', '      function () public payable {\n', '        \n', '      }     \n', '    \n', '}']
['pragma solidity ^0.4.25;\n', ' \n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = 0x2C43dfBAc5FC1808Cb8ccEbCc9E24BEaB1aaa816;//msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract SimpleWallet is Ownable {\n', '\n', '    address public wallet1 = 0xf038F656b511Bf37389b8Ae22D44fB3395327007;\n', '    address public wallet2 = 0xf038F656b511Bf37389b8Ae22D44fB3395327007;\n', '    \n', '    address public newWallet1 = 0xf038F656b511Bf37389b8Ae22D44fB3395327007;\n', '    address public newWallet2 = 0xf038F656b511Bf37389b8Ae22D44fB3395327007;\n', '    \n', '    function setNewWallet1(address _newWallet1) public onlyOwner {\n', '        newWallet1 = _newWallet1;\n', '    }    \n', '    \n', '    function setNewWallet2(address _newWallet2) public onlyOwner {\n', '        newWallet2 = _newWallet2;\n', '    }  \n', '    \n', '    function setWallet1(address _wallet1) public {\n', '        require(msg.sender == wallet1);\n', '        require(newWallet1 == _wallet1);\n', '        \n', '        wallet1 = _wallet1;\n', '    }    \n', '    \n', '    function setWallet2(address _wallet2) public {\n', '        require(msg.sender == wallet2);\n', '        require(newWallet2 == _wallet2);\n', '        \n', '        wallet2 = _wallet2;\n', '    }  \n', '    \n', '    \n', '    function withdraw() public{\n', '        require( (msg.sender == wallet1)||(msg.sender == wallet2) );\n', '        uint half = address(this).balance/2;\n', '        wallet1.send(half);\n', '        wallet2.send(half);\n', '    } \n', '    \n', '      function () public payable {\n', '        \n', '      }     \n', '    \n', '}']
