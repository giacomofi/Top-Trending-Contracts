['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * SmartEth.co\n', ' * ERC20 Token and ICO smart contracts development, smart contracts audit, ICO websites.\n', ' * contact@smarteth.co\n', ' */\n', '\n', '/**\n', ' * @title SafeMath\n', ' */\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor() public {\n', '    owner = 0xcB503F585541F33D11Bd774b9546A7825018c2f6;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract QUIN_ICO is Pausable {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '  \n', '  // Amount of tokens offered in each stage\n', '  uint256 public stageSupply;\n', '\n', '  // Minimum investment\n', '  uint256 public minInvest;\n', '  \n', '  // Crowdsale opening time\n', '  uint256 public openingTime;\n', '  \n', '  // Crowdsale closing time\n', '  uint256 public closingTime;\n', '\n', '  // Crowdsale duration in days\n', '  uint256 public duration;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  constructor() public {\n', '    rate = getRate();\n', '    wallet = owner;\n', '    token = ERC20(0xC95c8EB73417c2eBa7683C08b2463Bf1167F3039);\n', '    minInvest = 0.01 * 1 ether;\n', '    duration = 18 days;\n', '    openingTime = 1530403200;  // Determined also by start()\n', '    closingTime = openingTime + duration;  // Determined also by start()\n', '    stageSupply = 3000000;\n', '  }\n', '  \n', '  /**\n', '   * @dev called by the owner to start the crowdsale\n', '   */\n', '  function start() public onlyOwner {\n', '    openingTime = now;\n', '    closingTime =  now + duration;\n', '  }\n', '  \n', '  /**\n', '   * @dev Returns the rate of tokens per wei at the present time.\n', '   */\n', '  function getRate() public view returns (uint256) {\n', '    if (now <= openingTime.add(14 days)) return 1000;   // 1st-14th July: 1 ETH = 1000 QUIN\n', '    if (now > openingTime.add(14 days) && now <= openingTime.add(15 days)) return 667;   // 14th-15th July: 1 ETH = 667 QUIN\n', '    if (now > openingTime.add(15 days) && now <= openingTime.add(16 days)) return 500;   // 15th-16th July: 1 ETH = 500 QUIN\n', '    if (now > openingTime.add(16 days) && now <= openingTime.add(17 days)) return 400;   // 16th-17th July: 1 ETH = 400 QUIN\n', '    if (now > openingTime.add(17 days)) return 333;   // 17th-18th July: 1 ETH = 333 QUIN\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _forwardFunds();\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal whenNotPaused {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount >= minInvest);\n', '    require(now >= openingTime && now <= closingTime);\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '  \n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return now > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to withdraw all unsold tokens\n', '   */\n', '  function withdrawTokens() public onlyOwner {\n', '    require(now > closingTime);\n', '    uint256 unsold = token.balanceOf(this);\n', '    token.transfer(owner, unsold);\n', '  }\n', '  \n', '  /**\n', '   * @dev called by the owner to burn all unsold tokens\n', '   */\n', '  function burnTokens() public onlyOwner {\n', '    require(now > closingTime);\n', '    uint256 unsold = token.balanceOf(this);\n', '    token.transfer(address(0), unsold);\n', '  }\n', '\n', '}']