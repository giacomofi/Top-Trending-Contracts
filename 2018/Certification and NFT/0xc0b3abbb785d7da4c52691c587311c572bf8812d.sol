['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '     /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract RotoToken is StandardToken {\n', '\n', '    string public constant name = "Roto"; // token name\n', '    string public constant symbol = "ROTO"; // token symbol\n', '    uint8 public constant decimals = 18; // token decimal\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 21000000 * (10 ** uint256(decimals));\n', '    address owner;\n', '    address roto = this;\n', '    address manager;\n', '\n', '    // keeps track of the ROTO currently staked in a tournament\n', '    // the format is user address -> the tournament they staked in -> how much they staked\n', '    mapping (address => mapping (bytes32 => uint256)) stakes;\n', '    uint256 owner_transfer = 2000000 * (10** uint256(decimals));\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender==owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager {\n', '      require(msg.sender==manager);\n', '      _;\n', '    }\n', '\n', '    event ManagerChanged(address _contract);\n', '    event RotoStaked(address _user, uint256 stake);\n', '    event RotoReleased(address _user, uint256 stake);\n', '    event RotoDestroyed(address _user, uint256 stake);\n', '    event RotoRewarded(address _contract, address _user, uint256 reward);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[roto] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, roto, INITIAL_SUPPLY);\n', '    }\n', '\n', '    \n', '    /**\n', '     *  @dev A function that can only be called by RotoHive, transfers Roto Tokens out of the contract.\n', '        @param _to address, the address that the ROTO will be transferred to\n', '        @param _value ROTO, amount to transfer\n', '        @return - whether the Roto was transferred succesfully\n', '     */\n', '    function transferFromContract(address _to, uint256 _value) public onlyOwner returns(bool) {\n', '        require(_to!=address(0));\n', '        require(_value<=balances[roto]);\n', '        require(owner_transfer > 0);\n', '\n', '        owner_transfer = owner_transfer.sub(_value);\n', '        \n', '        balances[roto] = balances[roto].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(roto, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev updates the helper contract(which will manage the tournament) with the new version\n', '        @param _contract address, the address of the manager contract\n', '        @return - whether the contract was successfully set\n', '    */\n', '    function setManagerContract(address _contract) external onlyOwner returns(bool) {\n', '      //checks that the address sent isn&#39;t the 0 address, the owner or the token contract\n', '      require(_contract!=address(0)&&_contract!=roto);\n', '\n', '      // requires that the address sent be a contract\n', '      uint size;\n', '      assembly { size := extcodesize(_contract) }\n', '      require(size > 0);\n', '\n', '      manager = _contract;\n', '\n', '      emit ManagerChanged(_contract);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '        @dev - called by the manager contract to add back to the user their roto in the event that their submission was successful\n', '        @param  _user address, the address of the user who submitted the rankings\n', '        @param _tournamentID identifier\n', '        @return boolean value, whether the roto were successfully released\n', '    */\n', '    function releaseRoto(address _user, bytes32 _tournamentID) external onlyManager returns(bool) {\n', '        require(_user!=address(0));\n', '        uint256 value = stakes[_user][_tournamentID];\n', '        require(value > 0);\n', '\n', '        stakes[_user][_tournamentID] = 0;\n', '        balances[_user] = balances[_user].add(value);\n', '\n', '        emit RotoReleased(_user, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev - function called by manager contract to process the accounting aspects of the destroyRoto function\n', '        @param  _user address, the address of the user who&#39;s stake will be destroyed\n', '        @param _tournamentID identifier\n', '        @return - a boolean value that reflects whether the roto were successfully destroyed\n', '    */\n', '    function destroyRoto(address _user, bytes32 _tournamentID) external onlyManager returns(bool) {\n', '        require(_user!=address(0));\n', '        uint256 value = stakes[_user][_tournamentID];\n', '        require(value > 0);\n', '\n', '        stakes[_user][_tournamentID] = 0;\n', '        balances[roto] = balances[roto].add(value);\n', '\n', '        emit RotoDestroyed(_user, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev - called by the manager contract, runs the accounting portions of the staking process\n', '        @param  _user address, the address of the user staking ROTO\n', '        @param _tournamentID identifier\n', '        @param _value ROTO, the amount the user is staking\n', '        @return - whether the staking process went successfully\n', '    */\n', '    function stakeRoto(address _user, bytes32 _tournamentID, uint256 _value) external onlyManager returns(bool) {\n', '        require(_user!=address(0));\n', '        require(_value<=balances[_user]);\n', '        require(stakes[_user][_tournamentID] == 0);\n', '\n', '        balances[_user] = balances[_user].sub(_value);\n', '        stakes[_user][_tournamentID] = _value;\n', '\n', '        emit RotoStaked(_user, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '      @dev - called by the manager contract, used to reward non-staked submissions by users\n', '      @param _user address, the address that will receive the rewarded ROTO\n', '      @param _value ROTO, the amount of ROTO that they&#39;ll be rewarded\n', '     */\n', '    function rewardRoto(address _user, uint256 _value) external onlyManager returns(bool successful) {\n', '      require(_user!=address(0));\n', '      require(_value<=balances[roto]);\n', '\n', '      balances[_user] = balances[_user].add(_value);\n', '      balances[roto] = balances[roto].sub(_value);\n', '\n', '      emit RotoRewarded(roto, _user, _value);\n', '      return true;\n', '    }\n', '    /**\n', '        @dev - to be called by the manager contract to check if a given user has enough roto to\n', '            stake the given amount\n', '        @param  _user address, the address of the user who&#39;s attempting to stake ROTO\n', '        @param _value ROTO, the amount they are attempting to stake\n', '        @return - whether the user has enough balance to stake the received amount\n', '    */\n', '    function canStake(address _user, uint256 _value) public view onlyManager returns(bool) {\n', '      require(_user!=address(0));\n', '      require(_value<=balances[_user]);\n', '\n', '      return true;\n', '    }\n', '\n', '    /**\n', '      @dev Getter function for manager\n', '     */\n', '    function getManager() public view returns (address _manager) {\n', '      return manager;\n', '    }\n', '\n', '    /**\n', '      @dev - sets the owner address to a new one\n', '      @param  _newOwner address\n', '      @return - true if the address was changed successful\n', '     */\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '      owner = _newOwner;\n', '    }\n', '}\n', 'contract RotoBasic {\n', '\n', '    mapping (bytes32 => Tournament) public tournaments;  // tournamentID\n', '    \n', '    //Instance and Address of the RotoToken contract\n', '    RotoToken token;\n', '    address roto;\n', '\n', '    //Address of the contract owner the manager contract(this contract)\n', '    address owner;\n', '    address manager;\n', '\n', '    //boolean variable that determines whether there&#39;s an emergency state\n', '    bool emergency;\n', '\n', '    struct Tournament {\n', '        bool open;\n', '        // the total ether prize and how much is left\n', '        uint256 etherPrize;\n', '        uint256 etherLeft;\n', '        // the total roto prize how much is left\n', '        uint256 rotoPrize;\n', '        uint256 rotoLeft;\n', '        // tournament details\n', '        uint256 creationTime;\n', '        mapping (address => mapping (bytes32 => Stake)) stakes;  // address of staker, to tournament ID points to a specific stake\n', '        //counters to easily tell the # of stakes vs # of stakes resolved\n', '        uint256 userStakes;\n', '        uint256 stakesResolved;\n', '    }\n', '\n', '    struct Stake {\n', '        uint256 amount; // Once the stake is resolved, this becomes 0\n', '        bool successful;\n', '        bool resolved;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '      require(msg.sender==owner);\n', '      _;\n', '    }\n', '\n', '    modifier stopInEmergency {\n', '      require(emergency==false);\n', '      _;\n', '    }\n', '\n', '    //Tournament Creation and Processing Events\n', '    event StakeProcessed(address indexed staker, uint256 totalAmountStaked, bytes32 indexed tournamentID);\n', '    event StakeDestroyed(bytes32 indexed tournamentID, address indexed stakerAddress, uint256 rotoLost);\n', '    event StakeReleased(bytes32 indexed tournamentID, address indexed stakerAddress, uint256 etherReward, uint256 rotoStaked);\n', '    event SubmissionRewarded(bytes32 indexed tournamentID, address indexed stakerAddress, uint256 rotoReward);\n', '    \n', '    event TokenChanged(address _contract);\n', '    event TournamentCreated(bytes32 indexed tournamentID, uint256 etherPrize, uint256 rotoPrize);\n', '    event TournamentClosed(bytes32 indexed tournamentID);\n', '\n', '    /**\n', '       @dev - sets the token contract to used for the token accounting\n', '       @param _contract address, the address of the token contract\n', '       @return - true if the token contract was set successfully\n', '    */\n', '    function setTokenContract(address _contract) public onlyOwner returns(bool) {\n', '      require(_contract!=address(0)&&_contract!=manager);\n', '\n', '      // requires that the address sent be a contract\n', '      uint size;\n', '      assembly { size := extcodesize(_contract) }\n', '      require(size > 0);\n', '\n', '      roto = _contract;\n', '      token = RotoToken(roto);\n', '\n', '      emit TokenChanged(_contract);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '        @dev - sets the state of the emegency variable to true, preventing any of the tournament processes to run\n', '        @param _emergency boolean variable to set emergency to\n', '        @return - true if the variable was changed successfully\n', '    */\n', '    function setEmergency(bool _emergency) public onlyOwner returns(bool) {\n', '      emergency = _emergency;\n', '      return true;\n', '    }\n', '\n', '    /**\n', '      @dev - sets the owner address to a new one\n', '      @param  _newOwner address\n', '      @return - true if the address was changed successful\n', '     */\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '      owner = _newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract RotoManager is RotoBasic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    constructor() public {\n', '      owner = msg.sender;\n', '      emergency = false;\n', '      manager = this;\n', '    }\n', '\n', '    /**\n', '        @dev - In the event that their submissions were successful, this function will return the tokens to the user, and distribute ether rewards were applicable\n', '        @param _user The user&#39;s address, the ether the&#39;ve won,\n', '        @return - returns whether the Roto was sucessfully transferred\n', '     */\n', '    function releaseRoto(address _user, bytes32 _tournamentID, uint256 _etherReward) external onlyOwner stopInEmergency returns(bool successful){\n', '        Tournament storage tournament = tournaments[_tournamentID];\n', '        require(tournament.open==true);\n', '\n', '        Stake storage user_stake = tournament.stakes[_user][_tournamentID];\n', '        uint256 initial_stake = user_stake.amount;\n', '\n', '        // prelimiary checks \n', '        require(initial_stake > 0);\n', '        require(user_stake.resolved == false);\n', '\n', '        // ether balance rewards\n', '        require(manager.balance > _etherReward);\n', '        require(tournament.etherLeft >= _etherReward);\n', '\n', '        //Redistributes roto back to the user, and marks the stake as successful and completed\n', '        user_stake.amount = 0;\n', '        assert(token.releaseRoto(_user, _tournamentID)); // calls the token contract releaseRoto function to handle the token accounting\n', '        tournament.stakesResolved = tournament.stakesResolved.add(1);\n', '        \n', '        user_stake.resolved = true;\n', '        user_stake.successful = true;\n', '\n', '        if(_etherReward > 0) {\n', '          tournament.etherLeft = tournament.etherLeft.sub(_etherReward);\n', '          _user.transfer(_etherReward);\n', '        }\n', '\n', '        emit StakeReleased(_tournamentID, _user, _etherReward, initial_stake);\n', '        \n', '        return true;\n', '    }\n', '    /**\n', '        @dev - If the user did not stake ROTO, but they still had a successful submission, then RotoHive will reward the user with an amount of ROTO respective to their performance.\n', '        @param _user address, which the ROTO will be sent to\n', '        @param _rotoReward amount of ROTO that the user has won\n', '        @return - a boolean value determining whether the operation was successful\n', '    \n', '     */\n', '    function rewardRoto(address _user, bytes32 _tournamentID, uint256 _rotoReward) external onlyOwner stopInEmergency returns(bool successful) {\n', '      Tournament storage tournament = tournaments[_tournamentID];\n', '      require(tournament.open==true);\n', '\n', '      Stake storage user_stake = tournament.stakes[_user][_tournamentID];\n', '      uint256 initial_stake = user_stake.amount;\n', '      \n', '      require(initial_stake==0);\n', '      require(tournament.rotoLeft >= _rotoReward);\n', '      require(user_stake.resolved == false);\n', '\n', '      tournament.rotoLeft = tournament.rotoLeft.sub(_rotoReward);\n', '      assert(token.rewardRoto(_user, _rotoReward));\n', '\n', '      user_stake.resolved = true;\n', '      user_stake.successful = true;\n', '\n', '      emit SubmissionRewarded(_tournamentID, _user, _rotoReward);\n', '\n', '      return true;\n', '    }\n', '\n', '    /**\n', '        @dev - For unsuccessful submission, the Roto will initially sent back to the contract.\n', '        @param _user address, the address of the user who&#39;s stake was unsuccessful\n', '        @param _tournamentID 32byte hex, the tournament which the stake belongs to\n', '        @return - whether the roto was successfully destroyed\n', '     */\n', '    function destroyRoto(address _user, bytes32 _tournamentID) external onlyOwner stopInEmergency returns(bool successful) {\n', '        Tournament storage tournament = tournaments[_tournamentID];\n', '        require(tournament.open==true);\n', '\n', '        Stake storage user_stake = tournament.stakes[_user][_tournamentID];\n', '\n', '        uint256 initial_stake = user_stake.amount;\n', '\n', '        require(initial_stake > 0);\n', '        require(user_stake.resolved == false);\n', '\n', '        user_stake.amount = 0;\n', '        user_stake.resolved = true;\n', '        user_stake.successful = false;\n', '\n', '        assert(token.destroyRoto(_user, _tournamentID));\n', '        tournament.stakesResolved = tournament.stakesResolved.add(1);\n', '\n', '        emit StakeDestroyed(_tournamentID, _user, initial_stake);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev - The public method which will allow user&#39;s to stake their Roto alongside their submissions\n', '        @param _value the amount of Roto being staked, the id of that stake, and the id of the tournament\n', '        @return - whether the staking request was successful\n', '     */\n', '    function stake(uint256 _value, bytes32 _tournamentID) external stopInEmergency returns(bool successful) {\n', '        return _stake(msg.sender, _tournamentID, _value);\n', '    }\n', '\n', '    /**\n', '        @dev - The internal method to process the request to stake Roto as a part of the Tournament Submission\n', '        @param _staker the user who&#39;s staking roto, the ID of the tournament, the amount of roto the user&#39;s staking, the staking tag\n', '        @return - whether the withdraw operation was successful\n', '     */\n', '    function _stake(address _staker, bytes32 _tournamentID, uint256 _value) internal returns(bool successful) {\n', '        Tournament storage tournament = tournaments[_tournamentID];\n', '\n', '        //The User can&#39;t submit after tournament closure and the tournament must have begun\n', '        require((tournament.open==true));\n', '        require(tournament.etherPrize>0);\n', '        \n', '        Stake storage user_stake = tournament.stakes[_staker][_tournamentID];\n', '        \n', '        require(user_stake.amount==0); // Users can only stake once\n', '        require(_value>0); // Users must stake at least 1 ROTO\n', '        require(_staker != roto && _staker != owner); //RotoHive can&#39;t stake in tournament\n', '        \n', '        //Users must have the necessary balances to submit their stake\n', '        assert(token.canStake(_staker, _value));\n', '\n', '        user_stake.amount = _value;\n', '        assert(token.stakeRoto(_staker,_tournamentID,_value));\n', '\n', '        // adds the stake the submission\n', '        tournament.userStakes = tournament.userStakes.add(1);\n', '\n', '        emit StakeProcessed(_staker, user_stake.amount, _tournamentID);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev - Allows RotoHive to create this week&#39;s RotoHive Tournament\n', '        @param _tournamentID 32byte hex, the ID which RotoHive uses to reference each tournament\n', '        @param _etherPrize Eth, the total ether prize pool for the tournament\n', '        @param _rotoPrize ROTO, the total ROTO prize pool for the tournament\n', '        @return - whether the tournament was successfully created\n', '     */\n', '    function createTournament(bytes32 _tournamentID, uint256 _etherPrize, uint256 _rotoPrize) external payable onlyOwner returns(bool successful) {\n', '        Tournament storage newTournament = tournaments[_tournamentID];\n', '        require(newTournament.creationTime==0);\n', '        \n', '        newTournament.open = true;\n', '        newTournament.etherPrize = _etherPrize;\n', '        newTournament.etherLeft = _etherPrize;\n', '\n', '        newTournament.rotoPrize = _rotoPrize;\n', '        newTournament.rotoLeft = _rotoPrize;\n', '        newTournament.creationTime = block.timestamp;\n', '\n', '        emit TournamentCreated(_tournamentID, _etherPrize, _rotoPrize);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      @dev - closes the current tournament after the submission deadline has passed\n', '      @param _tournamentID the tournament ID\n', '      @return - returns whether the tournament was closed successfully\n', '    */\n', '    function closeTournament(bytes32 _tournamentID) external onlyOwner returns(bool successful) {\n', '       Tournament storage tournament = tournaments[_tournamentID];\n', '      //  the tournament should be open\n', '       require(tournament.open==true);\n', '\n', '       //  all the prizes should have been given out\n', '       require(tournament.rotoLeft == 0 && tournament.etherLeft == 0);\n', '      //  all the users stakes should have been resolved\n', '       require(tournament.userStakes == tournament.stakesResolved);\n', '       tournament.open = false;\n', '\n', '       emit TournamentClosed(_tournamentID);\n', '       return true;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '     /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', 'contract RotoToken is StandardToken {\n', '\n', '    string public constant name = "Roto"; // token name\n', '    string public constant symbol = "ROTO"; // token symbol\n', '    uint8 public constant decimals = 18; // token decimal\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 21000000 * (10 ** uint256(decimals));\n', '    address owner;\n', '    address roto = this;\n', '    address manager;\n', '\n', '    // keeps track of the ROTO currently staked in a tournament\n', '    // the format is user address -> the tournament they staked in -> how much they staked\n', '    mapping (address => mapping (bytes32 => uint256)) stakes;\n', '    uint256 owner_transfer = 2000000 * (10** uint256(decimals));\n', '  /**\n', '   * @dev Constructor that gives msg.sender all of existing tokens.\n', '   */\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender==owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager {\n', '      require(msg.sender==manager);\n', '      _;\n', '    }\n', '\n', '    event ManagerChanged(address _contract);\n', '    event RotoStaked(address _user, uint256 stake);\n', '    event RotoReleased(address _user, uint256 stake);\n', '    event RotoDestroyed(address _user, uint256 stake);\n', '    event RotoRewarded(address _contract, address _user, uint256 reward);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[roto] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, roto, INITIAL_SUPPLY);\n', '    }\n', '\n', '    \n', '    /**\n', '     *  @dev A function that can only be called by RotoHive, transfers Roto Tokens out of the contract.\n', '        @param _to address, the address that the ROTO will be transferred to\n', '        @param _value ROTO, amount to transfer\n', '        @return - whether the Roto was transferred succesfully\n', '     */\n', '    function transferFromContract(address _to, uint256 _value) public onlyOwner returns(bool) {\n', '        require(_to!=address(0));\n', '        require(_value<=balances[roto]);\n', '        require(owner_transfer > 0);\n', '\n', '        owner_transfer = owner_transfer.sub(_value);\n', '        \n', '        balances[roto] = balances[roto].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '\n', '        emit Transfer(roto, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev updates the helper contract(which will manage the tournament) with the new version\n', '        @param _contract address, the address of the manager contract\n', '        @return - whether the contract was successfully set\n', '    */\n', '    function setManagerContract(address _contract) external onlyOwner returns(bool) {\n', "      //checks that the address sent isn't the 0 address, the owner or the token contract\n", '      require(_contract!=address(0)&&_contract!=roto);\n', '\n', '      // requires that the address sent be a contract\n', '      uint size;\n', '      assembly { size := extcodesize(_contract) }\n', '      require(size > 0);\n', '\n', '      manager = _contract;\n', '\n', '      emit ManagerChanged(_contract);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '        @dev - called by the manager contract to add back to the user their roto in the event that their submission was successful\n', '        @param  _user address, the address of the user who submitted the rankings\n', '        @param _tournamentID identifier\n', '        @return boolean value, whether the roto were successfully released\n', '    */\n', '    function releaseRoto(address _user, bytes32 _tournamentID) external onlyManager returns(bool) {\n', '        require(_user!=address(0));\n', '        uint256 value = stakes[_user][_tournamentID];\n', '        require(value > 0);\n', '\n', '        stakes[_user][_tournamentID] = 0;\n', '        balances[_user] = balances[_user].add(value);\n', '\n', '        emit RotoReleased(_user, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev - function called by manager contract to process the accounting aspects of the destroyRoto function\n', "        @param  _user address, the address of the user who's stake will be destroyed\n", '        @param _tournamentID identifier\n', '        @return - a boolean value that reflects whether the roto were successfully destroyed\n', '    */\n', '    function destroyRoto(address _user, bytes32 _tournamentID) external onlyManager returns(bool) {\n', '        require(_user!=address(0));\n', '        uint256 value = stakes[_user][_tournamentID];\n', '        require(value > 0);\n', '\n', '        stakes[_user][_tournamentID] = 0;\n', '        balances[roto] = balances[roto].add(value);\n', '\n', '        emit RotoDestroyed(_user, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev - called by the manager contract, runs the accounting portions of the staking process\n', '        @param  _user address, the address of the user staking ROTO\n', '        @param _tournamentID identifier\n', '        @param _value ROTO, the amount the user is staking\n', '        @return - whether the staking process went successfully\n', '    */\n', '    function stakeRoto(address _user, bytes32 _tournamentID, uint256 _value) external onlyManager returns(bool) {\n', '        require(_user!=address(0));\n', '        require(_value<=balances[_user]);\n', '        require(stakes[_user][_tournamentID] == 0);\n', '\n', '        balances[_user] = balances[_user].sub(_value);\n', '        stakes[_user][_tournamentID] = _value;\n', '\n', '        emit RotoStaked(_user, _value);\n', '        return true;\n', '    }\n', '    \n', '    /**\n', '      @dev - called by the manager contract, used to reward non-staked submissions by users\n', '      @param _user address, the address that will receive the rewarded ROTO\n', "      @param _value ROTO, the amount of ROTO that they'll be rewarded\n", '     */\n', '    function rewardRoto(address _user, uint256 _value) external onlyManager returns(bool successful) {\n', '      require(_user!=address(0));\n', '      require(_value<=balances[roto]);\n', '\n', '      balances[_user] = balances[_user].add(_value);\n', '      balances[roto] = balances[roto].sub(_value);\n', '\n', '      emit RotoRewarded(roto, _user, _value);\n', '      return true;\n', '    }\n', '    /**\n', '        @dev - to be called by the manager contract to check if a given user has enough roto to\n', '            stake the given amount\n', "        @param  _user address, the address of the user who's attempting to stake ROTO\n", '        @param _value ROTO, the amount they are attempting to stake\n', '        @return - whether the user has enough balance to stake the received amount\n', '    */\n', '    function canStake(address _user, uint256 _value) public view onlyManager returns(bool) {\n', '      require(_user!=address(0));\n', '      require(_value<=balances[_user]);\n', '\n', '      return true;\n', '    }\n', '\n', '    /**\n', '      @dev Getter function for manager\n', '     */\n', '    function getManager() public view returns (address _manager) {\n', '      return manager;\n', '    }\n', '\n', '    /**\n', '      @dev - sets the owner address to a new one\n', '      @param  _newOwner address\n', '      @return - true if the address was changed successful\n', '     */\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '      owner = _newOwner;\n', '    }\n', '}\n', 'contract RotoBasic {\n', '\n', '    mapping (bytes32 => Tournament) public tournaments;  // tournamentID\n', '    \n', '    //Instance and Address of the RotoToken contract\n', '    RotoToken token;\n', '    address roto;\n', '\n', '    //Address of the contract owner the manager contract(this contract)\n', '    address owner;\n', '    address manager;\n', '\n', "    //boolean variable that determines whether there's an emergency state\n", '    bool emergency;\n', '\n', '    struct Tournament {\n', '        bool open;\n', '        // the total ether prize and how much is left\n', '        uint256 etherPrize;\n', '        uint256 etherLeft;\n', '        // the total roto prize how much is left\n', '        uint256 rotoPrize;\n', '        uint256 rotoLeft;\n', '        // tournament details\n', '        uint256 creationTime;\n', '        mapping (address => mapping (bytes32 => Stake)) stakes;  // address of staker, to tournament ID points to a specific stake\n', '        //counters to easily tell the # of stakes vs # of stakes resolved\n', '        uint256 userStakes;\n', '        uint256 stakesResolved;\n', '    }\n', '\n', '    struct Stake {\n', '        uint256 amount; // Once the stake is resolved, this becomes 0\n', '        bool successful;\n', '        bool resolved;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '      require(msg.sender==owner);\n', '      _;\n', '    }\n', '\n', '    modifier stopInEmergency {\n', '      require(emergency==false);\n', '      _;\n', '    }\n', '\n', '    //Tournament Creation and Processing Events\n', '    event StakeProcessed(address indexed staker, uint256 totalAmountStaked, bytes32 indexed tournamentID);\n', '    event StakeDestroyed(bytes32 indexed tournamentID, address indexed stakerAddress, uint256 rotoLost);\n', '    event StakeReleased(bytes32 indexed tournamentID, address indexed stakerAddress, uint256 etherReward, uint256 rotoStaked);\n', '    event SubmissionRewarded(bytes32 indexed tournamentID, address indexed stakerAddress, uint256 rotoReward);\n', '    \n', '    event TokenChanged(address _contract);\n', '    event TournamentCreated(bytes32 indexed tournamentID, uint256 etherPrize, uint256 rotoPrize);\n', '    event TournamentClosed(bytes32 indexed tournamentID);\n', '\n', '    /**\n', '       @dev - sets the token contract to used for the token accounting\n', '       @param _contract address, the address of the token contract\n', '       @return - true if the token contract was set successfully\n', '    */\n', '    function setTokenContract(address _contract) public onlyOwner returns(bool) {\n', '      require(_contract!=address(0)&&_contract!=manager);\n', '\n', '      // requires that the address sent be a contract\n', '      uint size;\n', '      assembly { size := extcodesize(_contract) }\n', '      require(size > 0);\n', '\n', '      roto = _contract;\n', '      token = RotoToken(roto);\n', '\n', '      emit TokenChanged(_contract);\n', '      return true;\n', '    }\n', '\n', '    /**\n', '        @dev - sets the state of the emegency variable to true, preventing any of the tournament processes to run\n', '        @param _emergency boolean variable to set emergency to\n', '        @return - true if the variable was changed successfully\n', '    */\n', '    function setEmergency(bool _emergency) public onlyOwner returns(bool) {\n', '      emergency = _emergency;\n', '      return true;\n', '    }\n', '\n', '    /**\n', '      @dev - sets the owner address to a new one\n', '      @param  _newOwner address\n', '      @return - true if the address was changed successful\n', '     */\n', '    function changeOwner(address _newOwner) public onlyOwner returns(bool) {\n', '      owner = _newOwner;\n', '    }\n', '\n', '}\n', '\n', 'contract RotoManager is RotoBasic {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    constructor() public {\n', '      owner = msg.sender;\n', '      emergency = false;\n', '      manager = this;\n', '    }\n', '\n', '    /**\n', '        @dev - In the event that their submissions were successful, this function will return the tokens to the user, and distribute ether rewards were applicable\n', "        @param _user The user's address, the ether the've won,\n", '        @return - returns whether the Roto was sucessfully transferred\n', '     */\n', '    function releaseRoto(address _user, bytes32 _tournamentID, uint256 _etherReward) external onlyOwner stopInEmergency returns(bool successful){\n', '        Tournament storage tournament = tournaments[_tournamentID];\n', '        require(tournament.open==true);\n', '\n', '        Stake storage user_stake = tournament.stakes[_user][_tournamentID];\n', '        uint256 initial_stake = user_stake.amount;\n', '\n', '        // prelimiary checks \n', '        require(initial_stake > 0);\n', '        require(user_stake.resolved == false);\n', '\n', '        // ether balance rewards\n', '        require(manager.balance > _etherReward);\n', '        require(tournament.etherLeft >= _etherReward);\n', '\n', '        //Redistributes roto back to the user, and marks the stake as successful and completed\n', '        user_stake.amount = 0;\n', '        assert(token.releaseRoto(_user, _tournamentID)); // calls the token contract releaseRoto function to handle the token accounting\n', '        tournament.stakesResolved = tournament.stakesResolved.add(1);\n', '        \n', '        user_stake.resolved = true;\n', '        user_stake.successful = true;\n', '\n', '        if(_etherReward > 0) {\n', '          tournament.etherLeft = tournament.etherLeft.sub(_etherReward);\n', '          _user.transfer(_etherReward);\n', '        }\n', '\n', '        emit StakeReleased(_tournamentID, _user, _etherReward, initial_stake);\n', '        \n', '        return true;\n', '    }\n', '    /**\n', '        @dev - If the user did not stake ROTO, but they still had a successful submission, then RotoHive will reward the user with an amount of ROTO respective to their performance.\n', '        @param _user address, which the ROTO will be sent to\n', '        @param _rotoReward amount of ROTO that the user has won\n', '        @return - a boolean value determining whether the operation was successful\n', '    \n', '     */\n', '    function rewardRoto(address _user, bytes32 _tournamentID, uint256 _rotoReward) external onlyOwner stopInEmergency returns(bool successful) {\n', '      Tournament storage tournament = tournaments[_tournamentID];\n', '      require(tournament.open==true);\n', '\n', '      Stake storage user_stake = tournament.stakes[_user][_tournamentID];\n', '      uint256 initial_stake = user_stake.amount;\n', '      \n', '      require(initial_stake==0);\n', '      require(tournament.rotoLeft >= _rotoReward);\n', '      require(user_stake.resolved == false);\n', '\n', '      tournament.rotoLeft = tournament.rotoLeft.sub(_rotoReward);\n', '      assert(token.rewardRoto(_user, _rotoReward));\n', '\n', '      user_stake.resolved = true;\n', '      user_stake.successful = true;\n', '\n', '      emit SubmissionRewarded(_tournamentID, _user, _rotoReward);\n', '\n', '      return true;\n', '    }\n', '\n', '    /**\n', '        @dev - For unsuccessful submission, the Roto will initially sent back to the contract.\n', "        @param _user address, the address of the user who's stake was unsuccessful\n", '        @param _tournamentID 32byte hex, the tournament which the stake belongs to\n', '        @return - whether the roto was successfully destroyed\n', '     */\n', '    function destroyRoto(address _user, bytes32 _tournamentID) external onlyOwner stopInEmergency returns(bool successful) {\n', '        Tournament storage tournament = tournaments[_tournamentID];\n', '        require(tournament.open==true);\n', '\n', '        Stake storage user_stake = tournament.stakes[_user][_tournamentID];\n', '\n', '        uint256 initial_stake = user_stake.amount;\n', '\n', '        require(initial_stake > 0);\n', '        require(user_stake.resolved == false);\n', '\n', '        user_stake.amount = 0;\n', '        user_stake.resolved = true;\n', '        user_stake.successful = false;\n', '\n', '        assert(token.destroyRoto(_user, _tournamentID));\n', '        tournament.stakesResolved = tournament.stakesResolved.add(1);\n', '\n', '        emit StakeDestroyed(_tournamentID, _user, initial_stake);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', "        @dev - The public method which will allow user's to stake their Roto alongside their submissions\n", '        @param _value the amount of Roto being staked, the id of that stake, and the id of the tournament\n', '        @return - whether the staking request was successful\n', '     */\n', '    function stake(uint256 _value, bytes32 _tournamentID) external stopInEmergency returns(bool successful) {\n', '        return _stake(msg.sender, _tournamentID, _value);\n', '    }\n', '\n', '    /**\n', '        @dev - The internal method to process the request to stake Roto as a part of the Tournament Submission\n', "        @param _staker the user who's staking roto, the ID of the tournament, the amount of roto the user's staking, the staking tag\n", '        @return - whether the withdraw operation was successful\n', '     */\n', '    function _stake(address _staker, bytes32 _tournamentID, uint256 _value) internal returns(bool successful) {\n', '        Tournament storage tournament = tournaments[_tournamentID];\n', '\n', "        //The User can't submit after tournament closure and the tournament must have begun\n", '        require((tournament.open==true));\n', '        require(tournament.etherPrize>0);\n', '        \n', '        Stake storage user_stake = tournament.stakes[_staker][_tournamentID];\n', '        \n', '        require(user_stake.amount==0); // Users can only stake once\n', '        require(_value>0); // Users must stake at least 1 ROTO\n', "        require(_staker != roto && _staker != owner); //RotoHive can't stake in tournament\n", '        \n', '        //Users must have the necessary balances to submit their stake\n', '        assert(token.canStake(_staker, _value));\n', '\n', '        user_stake.amount = _value;\n', '        assert(token.stakeRoto(_staker,_tournamentID,_value));\n', '\n', '        // adds the stake the submission\n', '        tournament.userStakes = tournament.userStakes.add(1);\n', '\n', '        emit StakeProcessed(_staker, user_stake.amount, _tournamentID);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', "        @dev - Allows RotoHive to create this week's RotoHive Tournament\n", '        @param _tournamentID 32byte hex, the ID which RotoHive uses to reference each tournament\n', '        @param _etherPrize Eth, the total ether prize pool for the tournament\n', '        @param _rotoPrize ROTO, the total ROTO prize pool for the tournament\n', '        @return - whether the tournament was successfully created\n', '     */\n', '    function createTournament(bytes32 _tournamentID, uint256 _etherPrize, uint256 _rotoPrize) external payable onlyOwner returns(bool successful) {\n', '        Tournament storage newTournament = tournaments[_tournamentID];\n', '        require(newTournament.creationTime==0);\n', '        \n', '        newTournament.open = true;\n', '        newTournament.etherPrize = _etherPrize;\n', '        newTournament.etherLeft = _etherPrize;\n', '\n', '        newTournament.rotoPrize = _rotoPrize;\n', '        newTournament.rotoLeft = _rotoPrize;\n', '        newTournament.creationTime = block.timestamp;\n', '\n', '        emit TournamentCreated(_tournamentID, _etherPrize, _rotoPrize);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '      @dev - closes the current tournament after the submission deadline has passed\n', '      @param _tournamentID the tournament ID\n', '      @return - returns whether the tournament was closed successfully\n', '    */\n', '    function closeTournament(bytes32 _tournamentID) external onlyOwner returns(bool successful) {\n', '       Tournament storage tournament = tournaments[_tournamentID];\n', '      //  the tournament should be open\n', '       require(tournament.open==true);\n', '\n', '       //  all the prizes should have been given out\n', '       require(tournament.rotoLeft == 0 && tournament.etherLeft == 0);\n', '      //  all the users stakes should have been resolved\n', '       require(tournament.userStakes == tournament.stakesResolved);\n', '       tournament.open = false;\n', '\n', '       emit TournamentClosed(_tournamentID);\n', '       return true;\n', '    }\n', '}']
