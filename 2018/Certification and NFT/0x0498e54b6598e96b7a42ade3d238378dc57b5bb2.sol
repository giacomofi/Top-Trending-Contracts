['pragma solidity ^0.4.25;\n', '\n', '/*\n', '* CryptoMiningWar - Build your own empire on Blockchain\n', '* Author: InspiGames\n', '* Website: https://cryptominingwar.github.io/\n', '*/\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', 'contract CryptoEngineerInterface {\n', '    uint256 public prizePool = 0;\n', '    address public gameSponsor;\n', '\n', '    function subVirus(address /*_addr*/, uint256 /*_value*/) public pure {}\n', '    function claimPrizePool(address /*_addr*/, uint256 /*_value*/) public pure {} \n', '    function isContractMiniGame() public pure returns( bool /*_isContractMiniGame*/) {}\n', '    function fallback() external payable {}\n', '}\n', 'contract CryptoMiningWarInterface {\n', '    uint256 public deadline; \n', '    function subCrystal( address /*_addr*/, uint256 /*_value*/ ) public pure {}\n', '    function fallback() external payable {}\n', '}\n', 'contract MemoryFactoryInterface {\n', '    uint256 public factoryTotal;\n', '\n', '    function setFactoryToal(uint256 /*_value*/) public {}\n', '    function updateFactory(address /*_addr*/, uint256 /*_levelUp*/, uint256 /*_time*/) public {}\n', '    function updateLevel(address /*_addr*/) public {}\n', '    function addProgram(address /*_addr*/, uint256 /*_idx*/, uint256 /*_program*/) public {}\n', '    function subProgram(address /*_addr*/, uint256 /*_idx*/, uint256 /*_program*/) public {}\n', '\n', '    function getPrograms(address /*_addr*/) public view returns(uint256[]) {}\n', '    function getLevel(address /*_addr*/) public view returns(uint256 /*_level*/) {}\n', '    function getData(address /*_addr*/) public view returns(uint256 /*_level*/, uint256 /*_updateTime*/, uint256[] /*_programs*/) {} \n', '}\n', 'interface MiniGameInterface {\n', '    function isContractMiniGame() external pure returns( bool _isContractMiniGame );\n', '    function fallback() external payable;\n', '}\n', 'contract CryptoProgramFactory {\n', '    bool status = false;\n', '\tusing SafeMath for uint256;\n', '\n', '\taddress public administrator;\n', '\n', '    uint256 private BASE_PRICE   = 0.1 ether; \n', '    uint256 private BASE_TIME    = 4 hours; \n', '\n', '    MemoryFactoryInterface   public Memory;\n', '    CryptoMiningWarInterface public MiningWar;\n', '    CryptoEngineerInterface  public Engineer;\n', '\n', '    // factory info\n', '    mapping(uint256 => Factory) public factories; \n', '    // minigame info\n', '    mapping(address => bool)    public miniGames; \n', '   \n', '    struct Factory {\n', '        uint256 level;\n', '        uint256 crystals;\n', '        uint256 programPriceByCrystals;\n', '        uint256 programPriceByDarkCrystals;\n', '        uint256 programValue; // example with level one can more 15% virus an arena(programValue = 15);\n', '        uint256 eth;\n', '        uint256 time;\n', '    }\n', '    modifier isAdministrator()\n', '    {\n', '        require(msg.sender == administrator);\n', '        _;\n', '    }\n', '    modifier onlyContractsMiniGame() \n', '    {\n', '        require(miniGames[msg.sender] == true);\n', '        _;\n', '    }\n', '    event UpdateFactory(address _addr, uint256 _crystals, uint256 _eth, uint256 _levelUp, uint256 _updateTime);\n', '    event BuyProgarams(address _addr, uint256 _crystals, uint256 _darkCrystals, uint256[] _programs);\n', '    constructor() public {\n', '        administrator = msg.sender;\n', '        // set interface contract\n', '        setMiningWarInterface(0xf84c61bb982041c030b8580d1634f00fffb89059);\n', '        setEngineerInterface(0x69fd0e5d0a93bf8bac02c154d343a8e3709adabf);\n', '        setMemoryInterface(0xa2e6461e7a109ae070b9b064ca9448b301404784);\n', '    }\n', '    function initFactory() private \n', '    {       \n', '        //                  level crystals programPriceByCrystals programPriceByDarkCrystals programValue ether            time                \n', '        factories[0] = Factory(1, 100000,         10000,           0,                         10           ,BASE_PRICE * 0, BASE_TIME * 1);\n', '        factories[1] = Factory(2, 500000,         20000,           0,                         15           ,BASE_PRICE * 1, BASE_TIME * 2);\n', '        factories[2] = Factory(3, 1500000,        40000,           0,                         20           ,BASE_PRICE * 4, BASE_TIME * 3);\n', '        factories[3] = Factory(4, 3000000,        80000,           0,                         5            ,BASE_PRICE * 5, BASE_TIME * 6);\n', '\n', '        Memory.setFactoryToal(4);\n', '    }\n', '    function () public payable\n', '    {\n', '        \n', '    }\n', '    /** \n', "    * @dev MainContract used this function to verify game's contract\n", '    */\n', '    function isContractMiniGame() public pure returns( bool _isContractMiniGame )\n', '    {\n', '    \t_isContractMiniGame = true;\n', '    }\n', '    function upgrade(address addr) public isAdministrator\n', '    {\n', '        selfdestruct(addr);\n', '    }\n', '    /** \n', '    * @dev Main Contract call this function to setup mini game.\n', '    */\n', '    function setupMiniGame( uint256 /*_miningWarRoundNumber*/, uint256 /*_miningWarDeadline*/ ) public\n', '    {\n', '    }\n', '    // ---------------------------------------------------------------------------------------\n', '    // SET INTERFACE CONTRACT\n', '    // ---------------------------------------------------------------------------------------\n', '    \n', '    function setMemoryInterface(address _addr) public isAdministrator\n', '    {\n', '        Memory = MemoryFactoryInterface(_addr);\n', '    }\n', '    function setMiningWarInterface(address _addr) public isAdministrator\n', '    {\n', '        MiningWar = CryptoMiningWarInterface(_addr);\n', '    }\n', '    function setEngineerInterface(address _addr) public isAdministrator\n', '    {\n', '        CryptoEngineerInterface engineerInterface = CryptoEngineerInterface(_addr);\n', '        \n', '        require(engineerInterface.isContractMiniGame() == true);\n', '\n', '        Engineer = engineerInterface;\n', '    }    \n', '    //--------------------------------------------------------------------------\n', '    // SETTING CONTRACT MINI GAME \n', '    //--------------------------------------------------------------------------\n', '    function setContractMiniGame( address _contractAddress ) public isAdministrator \n', '    {\n', '        MiniGameInterface MiniGame = MiniGameInterface( _contractAddress );\n', '        if( MiniGame.isContractMiniGame() == false ) { revert(); }\n', '\n', '        miniGames[_contractAddress] = true;\n', '    }\n', '    function removeContractMiniGame(address _contractAddress) public isAdministrator\n', '    {\n', '        miniGames[_contractAddress] = false;\n', '    }\n', '    //--------------------------------------------------------------------------\n', '    // SETTING FACTORY  \n', '    //--------------------------------------------------------------------------\n', '    function addFactory(\n', '        uint256 _crystals, \n', '        uint256 _programPriceByCrystals,  \n', '        uint256 _programPriceByDarkCrystals,  \n', '        uint256 _programValue,  \n', '        uint256 _eth, \n', '        uint256 _time\n', '    ) public isAdministrator\n', '    {\n', '        uint256 factoryTotal = Memory.factoryTotal();\n', '        factories[factoryTotal] = Factory(factoryTotal +1,_crystals,_programPriceByCrystals,_programPriceByDarkCrystals,_programValue,_eth,_time);\n', '        factoryTotal += 1;\n', '        Memory.setFactoryToal(factoryTotal);\n', '    }\n', '    function setProgramValue(uint256 _idx, uint256 _value) public isAdministrator\n', '    {\n', '        Factory storage f = factories[_idx];// factory update\n', '        f.programValue = _value;\n', '    }\n', '    function setProgramPriceByCrystals(uint256 _idx, uint256 _value) public isAdministrator\n', '    {\n', '        Factory storage f = factories[_idx];// factory update\n', '        f.programPriceByCrystals = _value;\n', '    }\n', '    function setProgramPriceByDarkCrystals(uint256 _idx, uint256 _value) public isAdministrator\n', '    {\n', '        Factory storage f = factories[_idx];// factory update\n', '        f.programPriceByDarkCrystals = _value;\n', '    }\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    // MAIN CONTENT\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    /**\n', '    * @dev start the mini game\n', '    */\n', '    function startGame() public \n', '    {\n', '        require(msg.sender == administrator);\n', '        require(status == false);\n', '        \n', '        status = true;\n', '\n', '        initFactory();\n', '    }\n', '    function updateFactory() public payable \n', '    {\n', '\n', '        Memory.updateLevel(msg.sender);\n', '        \n', '        Factory memory f = factories[uint256(Memory.getLevel(msg.sender))];// factory update\n', '\n', '        if (msg.value < f.eth) revert();\n', '\n', '        MiningWar.subCrystal(msg.sender, f.crystals);\n', '\n', '        uint256 updateTime = now + f.time;\n', '        uint256 levelUp     = f.level;\n', '\n', '        Memory.updateFactory(msg.sender, levelUp, updateTime);\n', '\n', '        if (msg.value > 0) {\n', '            uint256 fee = devFee(msg.value);\n', '            address gameSponsor = Engineer.gameSponsor();\n', '            gameSponsor.transfer(fee);\n', '            administrator.transfer(fee);\n', '\n', '            MiningWar.fallback.value(fee)();\n', '            Engineer.fallback.value(SafeMath.sub(msg.value, 3 * fee))();\n', '        }\n', '\n', '        emit UpdateFactory(msg.sender, f.crystals, msg.value, levelUp, updateTime);\n', '    }\n', '\n', '    function buyProgarams(uint256[] _programs) public\n', '    {\n', '        require(_programs.length <= Memory.factoryTotal());\n', '\n', '        Memory.updateLevel(msg.sender);\n', '\n', '        uint256 factoryLevel = Memory.getLevel(msg.sender);\n', '        uint256 crystals = 0;\n', '        uint256 darkCrystals =0; \n', '\n', '        for (uint256 idx = 0; idx < _programs.length; idx ++) {\n', '            Factory memory f = factories[idx];\n', '            uint256 level = idx + 1;\n', '            if (_programs[idx] > 0 && factoryLevel < level) revert();\n', '            if (_programs[idx] > 0) {\n', '                crystals     += SafeMath.mul(_programs[idx], f.programPriceByCrystals);\n', '                darkCrystals += SafeMath.mul(_programs[idx], f.programPriceByDarkCrystals);\n', '                Memory.addProgram(msg.sender, idx, _programs[idx]);\n', '            }    \n', '        }\n', '\n', '        if (crystals > 0) MiningWar.subCrystal(msg.sender, crystals);\n', '        // if (darkCrystals > 0) BossWannaCry.subDarkCrystal(msg.sender, darkCrystals);\n', '        emit BuyProgarams(msg.sender, crystals, darkCrystals, _programs);\n', '    }\n', '    function subPrograms(address _addr, uint256[] _programs) public onlyContractsMiniGame\n', '    {\n', '        uint256 factoryTotal = Memory.factoryTotal();\n', '        require(_programs.length <= factoryTotal);\n', '\n', '        for (uint256 idx = 0; idx < _programs.length; idx++) {\n', '            if (_programs[idx] > 0) Memory.subProgram(_addr, idx, _programs[idx]);\n', '        }\n', '    }\n', '    function getData(address _addr) \n', '    public\n', '    view\n', '    returns(\n', '        uint256   _factoryTotal,\n', '        uint256   _factoryLevel,\n', '        uint256   _factoryTime,\n', '        uint256[] _programs\n', '    ) {\n', '        _factoryTotal = Memory.factoryTotal();\n', '        (_factoryLevel, _factoryTime, _programs) = Memory.getData(_addr);\n', '    }\n', '    function getProgramsValue() public view returns(uint256[]) {\n', '        uint256 factoryTotal = Memory.factoryTotal();\n', '        uint256[] memory _programsValue = new uint256[](factoryTotal);\n', '        \n', '        for(uint256 idx = 0; idx < factoryTotal; idx++) {\n', '            Factory memory f    = factories[idx];\n', '            _programsValue[idx] = f.programValue;\n', '        }\n', '        return _programsValue;\n', '    }\n', '    // INTERFACE\n', '    // --------------------------------------------------------------------------------------------------------------\n', '    function devFee(uint256 _amount) private pure returns(uint256)\n', '    {\n', '        return SafeMath.div(SafeMath.mul(_amount, 5), 100);\n', '    }\n', '  \n', '}']