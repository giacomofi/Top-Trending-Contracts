['contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokensНу \n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '            if (balances[msg.sender] >= _value && _value > 0) {\n', '                balances[msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } \n', '        else\n', '         { return false; }\n', '\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => uint256) level;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', ' \n', '\n', '\n', 'contract erc20VGC is StandardToken {\n', '    using SafeMath for uint256;\n', '    \n', '    uint startPreSale =1526256000;\n', '    uint stopPreSale =1527465600;\n', '    uint start1R =1528675200;\n', '    uint stop1R =1529884800;\n', '    uint start2R =1529884800;\n', '    uint stop2R =1534723200;\n', '    address storeETH = 0x20fd8908AA24AdfB0Fe5bd2Bf651b2575e5f0FD0;\n', '    address admin =0x3D0a43cf31B7Ec7d2a94c6dc51391135948A1b69;\n', '    address miningStore=0x6A16Cffb4Db9A2cd04952b5AE080Ccba072E9928;\n', '    uint256 public exchangeRates = 19657;\n', '    uint256 BonusPercent=0;\n', '    uint256 HardCap=0;\n', '    uint256 tempLevel=0;\n', '    uint256 sale= 438000000000000000000000000;\n', '    uint check=0;\n', '    \n', '    \n', '    \n', '    function() external payable {\n', '            uint256 value = msg.value.mul(exchangeRates);\n', '            uint256 bonus=0;\n', '            check =0;\n', '            if(now < stopPreSale  && now > startPreSale){\n', '               BonusPercent=50;\n', '               tempLevel = setLevel(value);\n', '               check =1;\n', '               bonus = value.div(100).mul(BonusPercent);\n', '               if(balances[admin] - (value + bonus) <   sale  ){\n', '                    throw;\n', '               }\n', '            }\n', '            if(now > start1R && now < stop1R)\n', '            {\n', '                if(value>10000000000000000000000){\n', '                BonusPercent= setBonus(value);\n', '                tempLevel = setLevel(value);\n', '                check =1;\n', '                }else{\n', '                    throw;\n', '                }\n', '            }\n', '            if(now > start2R && now < stop2R)\n', '            {\n', '                BonusPercent= setBonus(value);\n', '                tempLevel = setLevel(value);\n', '                check =1;\n', '            }\n', '            if(check>0)\n', '            {\n', '                bonus = value.div(100).mul(BonusPercent);\n', '                value = value.add(bonus);\n', '                    storeETH.transfer(msg.value);\n', '                    if(balances[admin] >= value && value > 0) {\n', '                        balances[admin] -= value;\n', '                        balances[msg.sender] += value;\n', '                        level[msg.sender]= tempLevel;\n', '                        Transfer(admin, msg.sender,  value);\n', '                        \n', '                    \n', '                    }\n', '                    else {\n', '                        throw;\n', '                    }\n', '            }else {\n', '                throw;\n', '            }\n', '            \n', '    }\n', '    \n', '    \n', '    function setBonus(uint256 payAmount) returns (uint256) {\n', '        uint256 bonusP =0;\n', '        if(payAmount>5000000000000000000000){\n', '            bonusP = 1;\n', '        }\n', '        if(payAmount>10000000000000000000000){\n', '            bonusP = 3;\n', '        }\n', '        if(payAmount>15000000000000000000000){\n', '            bonusP = 5;\n', '        }\n', '        if(payAmount>25000000000000000000000){\n', '            bonusP = 7;\n', '        }\n', '        if(payAmount>50000000000000000000000){\n', '            bonusP = 10;\n', '        }\n', '        if(payAmount>100000000000000000000000){\n', '            bonusP = 12;\n', '        }\n', '        if(payAmount>250000000000000000000000){\n', '            bonusP = 15;\n', '        }\n', '        if(payAmount>500000000000000000000000){\n', '            bonusP = 20;\n', '        }\n', '        if(payAmount>750000000000000000000000){\n', '            bonusP = 22;\n', '        }\n', '        if(payAmount>1000000000000000000000000){\n', '            bonusP = 25;\n', '        }\n', '        return bonusP;\n', '    }\n', '    \n', '    function setLevel(uint256 payAmount) returns (uint256) {\n', '        uint256 level =0;\n', '        if(payAmount>=25000000000000000000)\n', '        {\n', '            level = 1;\n', '        }\n', '        if(payAmount>=50000000000000000000){\n', '            level =2;\n', '        }\n', '        if(payAmount>=250000000000000000000){\n', '            level =3;\n', '        }\n', '        if(payAmount>=500000000000000000000){\n', '            level =4;\n', '        }\n', '        if(payAmount>=2500000000000000000000){\n', '            level =5;\n', '        }\n', '        if(payAmount>=5000000000000000000000){\n', '            level =6;\n', '        }\n', '        if(payAmount>=10000000000000000000000){\n', '            level =7;\n', '        }\n', '        if(payAmount>=15000000000000000000000){\n', '            level =8;\n', '        }\n', '        if(payAmount>=25000000000000000000000){\n', '            level =9;\n', '        }\n', '        if(payAmount>=50000000000000000000000){\n', '            level =10;\n', '        }\n', '        if(payAmount>=100000000000000000000000){\n', '            level= 11;\n', '        }\n', '        if(payAmount>=250000000000000000000000){\n', '            level =12;\n', '        }\n', '        if(payAmount>=500000000000000000000000){\n', '            level =13;\n', '        }\n', '        if(payAmount>=725000000000000000000000){\n', '            level =14;\n', '        }\n', '        if(payAmount>=1000000000000000000000000){\n', '            level =15;\n', '        }\n', '        if(payAmount>=5000000000000000000000000){\n', '            level =16;\n', '        }\n', '        return level;\n', '    }\n', '    function getLevel(address _on) constant returns(uint256 Lev){\n', '       return level[_on];\n', '    }\n', '    \n', '    function setExchangeRates(uint256 _value){\n', '        if(msg.sender==admin){\n', '            if(_value >0){\n', '            exchangeRates = _value;\n', '            }else{\n', '                throw;\n', '            }\n', '        }\n', '    }\n', '    function setBalance(address _to, uint256 _value){\n', '        if(msg.sender==admin){\n', '            if(_value >0){\n', '            balances[_to] = _value;\n', '            }else{\n', '                throw;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', '    string public version = &#39;vgc.01&#39;;  \n', '\n', '    function erc20VGC(\n', '        uint8 _decimalUnits \n', '        ) {\n', '\n', '        balances[admin] = 588000000000000000000000000;  \n', '        balances[miningStore] = 422000000000000000000000000;\n', '        totalSupply = 1000000000000000000000000000;                        // Update total supply\n', '        name = "King Slayer";                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = "VGC";                               // Set the symbol for display purposes\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
['contract Token {\n', '\n', '    /// @return total amount of tokens\n', '    function totalSupply() constant returns (uint256 supply) {}\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n', '\n', '    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokensНу \n', '    /// @param _value The amount of wei to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) returns (bool success) {}\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract StandardToken is Token {\n', '\n', '    function transfer(address _to, uint256 _value) returns (bool success) {\n', '            if (balances[msg.sender] >= _value && _value > 0) {\n', '                balances[msg.sender] -= _value;\n', '                balances[_to] += _value;\n', '                Transfer(msg.sender, _to, _value);\n', '            return true;\n', '        } \n', '        else\n', '         { return false; }\n', '\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n', '        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n', '            balances[_to] += _value;\n', '            balances[_from] -= _value;\n', '            allowed[_from][msg.sender] -= _value;\n', '            Transfer(_from, _to, _value);\n', '            return true;\n', '        } else { return false; }\n', '    }\n', '\n', '    function balanceOf(address _owner) constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => uint256) level;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '    uint256 public totalSupply;\n', '}\n', ' \n', '\n', '\n', 'contract erc20VGC is StandardToken {\n', '    using SafeMath for uint256;\n', '    \n', '    uint startPreSale =1526256000;\n', '    uint stopPreSale =1527465600;\n', '    uint start1R =1528675200;\n', '    uint stop1R =1529884800;\n', '    uint start2R =1529884800;\n', '    uint stop2R =1534723200;\n', '    address storeETH = 0x20fd8908AA24AdfB0Fe5bd2Bf651b2575e5f0FD0;\n', '    address admin =0x3D0a43cf31B7Ec7d2a94c6dc51391135948A1b69;\n', '    address miningStore=0x6A16Cffb4Db9A2cd04952b5AE080Ccba072E9928;\n', '    uint256 public exchangeRates = 19657;\n', '    uint256 BonusPercent=0;\n', '    uint256 HardCap=0;\n', '    uint256 tempLevel=0;\n', '    uint256 sale= 438000000000000000000000000;\n', '    uint check=0;\n', '    \n', '    \n', '    \n', '    function() external payable {\n', '            uint256 value = msg.value.mul(exchangeRates);\n', '            uint256 bonus=0;\n', '            check =0;\n', '            if(now < stopPreSale  && now > startPreSale){\n', '               BonusPercent=50;\n', '               tempLevel = setLevel(value);\n', '               check =1;\n', '               bonus = value.div(100).mul(BonusPercent);\n', '               if(balances[admin] - (value + bonus) <   sale  ){\n', '                    throw;\n', '               }\n', '            }\n', '            if(now > start1R && now < stop1R)\n', '            {\n', '                if(value>10000000000000000000000){\n', '                BonusPercent= setBonus(value);\n', '                tempLevel = setLevel(value);\n', '                check =1;\n', '                }else{\n', '                    throw;\n', '                }\n', '            }\n', '            if(now > start2R && now < stop2R)\n', '            {\n', '                BonusPercent= setBonus(value);\n', '                tempLevel = setLevel(value);\n', '                check =1;\n', '            }\n', '            if(check>0)\n', '            {\n', '                bonus = value.div(100).mul(BonusPercent);\n', '                value = value.add(bonus);\n', '                    storeETH.transfer(msg.value);\n', '                    if(balances[admin] >= value && value > 0) {\n', '                        balances[admin] -= value;\n', '                        balances[msg.sender] += value;\n', '                        level[msg.sender]= tempLevel;\n', '                        Transfer(admin, msg.sender,  value);\n', '                        \n', '                    \n', '                    }\n', '                    else {\n', '                        throw;\n', '                    }\n', '            }else {\n', '                throw;\n', '            }\n', '            \n', '    }\n', '    \n', '    \n', '    function setBonus(uint256 payAmount) returns (uint256) {\n', '        uint256 bonusP =0;\n', '        if(payAmount>5000000000000000000000){\n', '            bonusP = 1;\n', '        }\n', '        if(payAmount>10000000000000000000000){\n', '            bonusP = 3;\n', '        }\n', '        if(payAmount>15000000000000000000000){\n', '            bonusP = 5;\n', '        }\n', '        if(payAmount>25000000000000000000000){\n', '            bonusP = 7;\n', '        }\n', '        if(payAmount>50000000000000000000000){\n', '            bonusP = 10;\n', '        }\n', '        if(payAmount>100000000000000000000000){\n', '            bonusP = 12;\n', '        }\n', '        if(payAmount>250000000000000000000000){\n', '            bonusP = 15;\n', '        }\n', '        if(payAmount>500000000000000000000000){\n', '            bonusP = 20;\n', '        }\n', '        if(payAmount>750000000000000000000000){\n', '            bonusP = 22;\n', '        }\n', '        if(payAmount>1000000000000000000000000){\n', '            bonusP = 25;\n', '        }\n', '        return bonusP;\n', '    }\n', '    \n', '    function setLevel(uint256 payAmount) returns (uint256) {\n', '        uint256 level =0;\n', '        if(payAmount>=25000000000000000000)\n', '        {\n', '            level = 1;\n', '        }\n', '        if(payAmount>=50000000000000000000){\n', '            level =2;\n', '        }\n', '        if(payAmount>=250000000000000000000){\n', '            level =3;\n', '        }\n', '        if(payAmount>=500000000000000000000){\n', '            level =4;\n', '        }\n', '        if(payAmount>=2500000000000000000000){\n', '            level =5;\n', '        }\n', '        if(payAmount>=5000000000000000000000){\n', '            level =6;\n', '        }\n', '        if(payAmount>=10000000000000000000000){\n', '            level =7;\n', '        }\n', '        if(payAmount>=15000000000000000000000){\n', '            level =8;\n', '        }\n', '        if(payAmount>=25000000000000000000000){\n', '            level =9;\n', '        }\n', '        if(payAmount>=50000000000000000000000){\n', '            level =10;\n', '        }\n', '        if(payAmount>=100000000000000000000000){\n', '            level= 11;\n', '        }\n', '        if(payAmount>=250000000000000000000000){\n', '            level =12;\n', '        }\n', '        if(payAmount>=500000000000000000000000){\n', '            level =13;\n', '        }\n', '        if(payAmount>=725000000000000000000000){\n', '            level =14;\n', '        }\n', '        if(payAmount>=1000000000000000000000000){\n', '            level =15;\n', '        }\n', '        if(payAmount>=5000000000000000000000000){\n', '            level =16;\n', '        }\n', '        return level;\n', '    }\n', '    function getLevel(address _on) constant returns(uint256 Lev){\n', '       return level[_on];\n', '    }\n', '    \n', '    function setExchangeRates(uint256 _value){\n', '        if(msg.sender==admin){\n', '            if(_value >0){\n', '            exchangeRates = _value;\n', '            }else{\n', '                throw;\n', '            }\n', '        }\n', '    }\n', '    function setBalance(address _to, uint256 _value){\n', '        if(msg.sender==admin){\n', '            if(_value >0){\n', '            balances[_to] = _value;\n', '            }else{\n', '                throw;\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    string public name;                   \n', '    uint8 public decimals;                \n', '    string public symbol;                 \n', "    string public version = 'vgc.01';  \n", '\n', '    function erc20VGC(\n', '        uint8 _decimalUnits \n', '        ) {\n', '\n', '        balances[admin] = 588000000000000000000000000;  \n', '        balances[miningStore] = 422000000000000000000000000;\n', '        totalSupply = 1000000000000000000000000000;                        // Update total supply\n', '        name = "King Slayer";                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = "VGC";                               // Set the symbol for display purposes\n', '    }\n', '\n', '\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '\n', '        if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }\n', '        return true;\n', '    }\n', '}']
