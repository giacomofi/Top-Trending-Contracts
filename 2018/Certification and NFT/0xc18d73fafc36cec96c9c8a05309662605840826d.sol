['pragma solidity 0.4.25;\n', '\n', '/* ETH7.IO - MADE FOR PEOPLE\n', '* ETHEREUM ACCUMULATIVE SMARTCONTRACT\n', '* Web  - https://eth7.io\n', '* - GAIN 1.85% OF YOUR DEPOSIT  PER 12 HOURS (3.7% PER DAY)\n', '* - A UNIQUE SYSTEM DAYS OF CASHBACK DEVELOPED BY A TEAM ETH7\n', '* - Affiliate program 4% from each Deposit Of your partner \n', '* - Minimal contribution is 0.01 eth\n', '* - Currency and payment – ETH\n', '* - Transfer funds only from Your personal ETH wallet\n', '* - Contribution allocation schemes:\n', '*    -- 89% payments\n', '*    -- 11% Marketing + Operating Expenses\n', '\n', '* ---How to use:\n', '*  1. Send from ETH wallet to the smart contract address "0xC18D73FAfc36cEc96c9C8a05309662605840826d"\n', '*     any amount above 0.01 ETH.\n', '*  2. Verify your transaction in the history of your application or etherscan.io, specifying the address \n', ' of your wallet.\n', '*   Claim your profit by sending 0 ether transaction \n', '* Get your profit every 12 hours by sending 0 ether transaction to  smart contract address\n', '* RECOMMENDED GAS LIMIT: 200000\n', '* RECOMMENDED GAS PRICE: https://ethgasstation.info/\n', '* You can check the payments on the etherscan.io site, in the "Internal Txns" tab of your wallet.\n', '*\n', '* \n', '* The contract has passed several security audits and has been approved by professionals \n', 'ETH7.IO - MADE FOR PEOPLE\n', '*/\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' * @author Remco Bloemen <remco@2π.com>, Eenae <alexey@mixbytes.io>\n', ' * @dev If you mark a function `nonReentrant`, you should also\n', ' * mark it `external`.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor() internal {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter);\n', '    }\n', '\n', '}\n', '\n', '/**\n', 'The development of the contract is entirely owned by the ETH7 campaign, any copying of the source code is not legal.\n', '*/\n', 'contract Eth7 is ReentrancyGuard {\n', '    //use of library of safe mathematical operations    \n', '    using SafeMath for uint;\n', '    // array containing information about beneficiaries\n', '    mapping(address => uint) public userDeposit;\n', '    // array of refferels\n', '    mapping(address => address) public userReferral;\n', '    // collected from refferal system\n', '    mapping(address => uint) public refferalCollected;\n', '    // array containing information about users cashback\n', '    mapping(address => uint) public usersCashback;\n', '    //array containing information about the time of payment\n', '    mapping(address => uint) public userTime;\n', '    //array containing information on interest paid\n', '    mapping(address => uint) public persentWithdraw;\n', '    // users already deposited\n', '    mapping(address => bool) public alreadyDeposited;\n', '    //fund fo transfer marceting percent \n', '    address public marketingFund = 0xFEfF6b5811AEa737E03f526fD8C4E72924fdEA54;\n', '    //wallet for a dev foundation\n', '    address public devFund = 0x03e08ce26C93F6403C84365FF58498feA6c88A6a;\n', '    //percentage deducted to the advertising fund\n', '    uint marketingPercent = 8;\n', '    //percent for a charitable foundation\n', '    uint public devPercent = 3;\n', '    // refferal percent\n', '    uint public refPercent = 4;\n', '    //time through which you can take dividends\n', '    //uint public chargingTime = 12 hours;\n', '    uint public chargingTime = 12 hours;\n', '    \n', '    //start persent 1.85% per 12 hours\n', '    uint public persent = 1850;\n', '\n', '    uint public countOfInvestors = 0;\n', '    uint public countOfDev = 0;\n', '    \n', '    // information about cashback actions\n', '    uint public minDepCashBackLevel1 = 100 finney;\n', '    uint public maxDepCashBackLevel1 = 3 ether;\n', '    uint public maxDepCashBackLevel2 = 7 ether;\n', '    uint public maxDepCashBackLevel3 = 10000 ether;\n', '    \n', '    // 1st action\n', '    uint public beginCashBackTime1 = 1541462399;     // begin of the action 05.11.2018 \n', '    uint public endCashBackTime1 = 1541548799;       // end of the action 06.11.2018\n', '    uint public cashbackPercent1level1 = 25;       // cashback persent 25 = 2.5%\n', '    uint public cashbackPercent1level2 = 35;       // cashback persent 35 = 3.5%\n', '    uint public cashbackPercent1level3 = 50;       // cashback persent 50 = 5%\n', '\n', '    // 2 action\n', '    uint public beginCashBackTime2 = 1542326399;     // begin of the action 15.11.2018\n', '    uint public endCashBackTime2 = 1542499199;       // end of the action 17.11.2018\n', '    uint public cashbackPercent2level1 = 30;       \n', '    uint public cashbackPercent2level2 = 50;       \n', '    uint public cashbackPercent2level3 = 70;       \n', '\n', '    // 3 action\n', '    uint public beginCashBackTime3 = 1543363199;     // begin of the action 27.11.2018 \n', '    uint public endCashBackTime3 = 1543535999;       // end of the action 29.11.2018\n', '    uint public cashbackPercent3level1 = 50;       \n', '    uint public cashbackPercent3level2 = 80;       \n', '    uint public cashbackPercent3level3 = 100;      \n', '\n', '    // 4 action\n', '    uint public beginCashBackTime4 = 1544399999;     // begin of the action 9.12.2018\n', '    uint public endCashBackTime4 = 1544572799;       // end of the action 11.12.2018 \n', '    uint public cashbackPercent4level1 = 70;       \n', '    uint public cashbackPercent4level2 = 100;       \n', '    uint public cashbackPercent4level3 = 150;      \n', '\n', '    // 5 action\n', '    uint public beginCashBackTime5 = 1545436799;     // begin of the action 21.12.2018\n', '    uint public endCashBackTime5 = 1545523199;       // end of the action 22.12.2018 \n', '    uint public cashbackPercent5level1 = 25;       \n', '    uint public cashbackPercent5level2 = 35;       \n', '    uint public cashbackPercent5level3 = 50;      \n', '\n', '    // 6 action\n', '    uint public beginCashBackTime6 = 1546473599;     // begin of the action 02.01.2019 \n', '    uint public endCashBackTime6 = 1546646399;       // end of the action 04.01.2019\n', '    uint public cashbackPercent6level1 = 30;       \n', '    uint public cashbackPercent6level2 = 50;       \n', '    uint public cashbackPercent6level3 = 70;      \n', '\n', '    // 7 action\n', '    uint public beginCashBackTime7 = 1547510399;     // begin of the action 14.01.2019\n', '    uint public endCashBackTime7 = 1547683199;       // end of the action 16.01.2019\n', '    uint public cashbackPercent7level1 = 50;       \n', '    uint public cashbackPercent7level2 = 80;       \n', '    uint public cashbackPercent7level3 = 100;      \n', '\n', '    // 8 action\n', '    uint public beginCashBackTime8 = 1548547199;     // begin of the action 26.01.2019\n', '    uint public endCashBackTime8 = 1548719999;       // end of the action 28.01.2019\n', '    uint public cashbackPercent8level1 = 70;       \n', '    uint public cashbackPercent8level2 = 100;       \n', '    uint public cashbackPercent8level3 = 150;      \n', '\n', '\n', '    modifier isIssetUser() {\n', '        require(userDeposit[msg.sender] > 0, "Deposit not found");\n', '        _;\n', '    }\n', '\n', '    modifier timePayment() {\n', '        require(now >= userTime[msg.sender].add(chargingTime), "Too fast payout request");\n', '        _;\n', '    }\n', '\n', '    function() external payable {\n', '        require (msg.sender != marketingFund && msg.sender != devFund);\n', '        makeDeposit();\n', '    }\n', '\n', '\n', '    //make a contribution to the system\n', '    function makeDeposit() nonReentrant private {\n', '        if (usersCashback[msg.sender] > 0) collectCashback();\n', '        if (msg.value > 0) {\n', '\n', '            if (!alreadyDeposited[msg.sender]) {\n', '                countOfInvestors += 1;\n', '                address referrer = bytesToAddress(msg.data);\n', '                if (referrer != msg.sender) userReferral[msg.sender] = referrer;\n', '                alreadyDeposited[msg.sender] = true;\n', '            }\n', '\n', '            if (userReferral[msg.sender] != address(0)) {\n', '                uint refAmount = msg.value.mul(refPercent).div(100);\n', '                userReferral[msg.sender].transfer(refAmount);\n', '                refferalCollected[userReferral[msg.sender]] = refferalCollected[userReferral[msg.sender]].add(refAmount);\n', '            }\n', '\n', '            if (userDeposit[msg.sender] > 0 && now > userTime[msg.sender].add(chargingTime)) {\n', '                collectPercent();\n', '            }\n', '\n', '            userDeposit[msg.sender] = userDeposit[msg.sender].add(msg.value);\n', '            userTime[msg.sender] = now;\n', '            chargeCashBack();\n', '\n', '            //sending money for marketing\n', '            marketingFund.transfer(msg.value.mul(marketingPercent).div(100));\n', '            //sending money to dev team\n', '            uint devMoney = msg.value.mul(devPercent).div(100);\n', '            countOfDev = countOfDev.add(devMoney);\n', '            devFund.transfer(devMoney);\n', '\n', '        } else {\n', '            collectPercent();\n', '        }\n', '    }\n', '\n', '    function collectCashback() private {\n', '        uint val = usersCashback[msg.sender];\n', '        usersCashback[msg.sender] = 0;\n', '        msg.sender.transfer(val);\n', '    }\n', '\n', '    // check cashback action and cashback accrual\n', '    function chargeCashBack() private {\n', '        uint cashbackValue = 0;\n', '        // action 1\n', '        if ( (now >= beginCashBackTime1) && (now<=endCashBackTime1) ){\n', '            if ( (msg.value >= minDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel1) ) cashbackValue = msg.value.mul(cashbackPercent1level1).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel2) ) cashbackValue = msg.value.mul(cashbackPercent1level2).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel2) && (msg.value <= maxDepCashBackLevel3) ) cashbackValue = msg.value.mul(cashbackPercent1level3).div(1000);\n', '        }\n', '        // action 2\n', '        if ( (now >= beginCashBackTime2) && (now<=endCashBackTime2) ){\n', '            if ( (msg.value >= minDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel1) ) cashbackValue = msg.value.mul(cashbackPercent2level1).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel2) ) cashbackValue = msg.value.mul(cashbackPercent2level2).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel2) && (msg.value <= maxDepCashBackLevel3) ) cashbackValue = msg.value.mul(cashbackPercent2level3).div(1000);\n', '        }\n', '        // action 3\n', '        if ( (now >= beginCashBackTime3) && (now<=endCashBackTime3) ){\n', '            if ( (msg.value >= minDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel1) ) cashbackValue = msg.value.mul(cashbackPercent3level1).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel2) ) cashbackValue = msg.value.mul(cashbackPercent3level2).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel2) && (msg.value <= maxDepCashBackLevel3) ) cashbackValue = msg.value.mul(cashbackPercent3level3).div(1000);\n', '        }\n', '        // action 4\n', '        if ( (now >= beginCashBackTime4) && (now<=endCashBackTime4) ){\n', '            if ( (msg.value >= minDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel1) ) cashbackValue = msg.value.mul(cashbackPercent4level1).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel2) ) cashbackValue = msg.value.mul(cashbackPercent4level2).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel2) && (msg.value <= maxDepCashBackLevel3) ) cashbackValue = msg.value.mul(cashbackPercent4level3).div(1000);\n', '        }\n', '        // action 5\n', '        if ( (now >= beginCashBackTime5) && (now<=endCashBackTime5) ){\n', '            if ( (msg.value >= minDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel1) ) cashbackValue = msg.value.mul(cashbackPercent5level1).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel2) ) cashbackValue = msg.value.mul(cashbackPercent5level2).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel2) && (msg.value <= maxDepCashBackLevel3) ) cashbackValue = msg.value.mul(cashbackPercent5level3).div(1000);\n', '        }\n', '        // action 6\n', '        if ( (now >= beginCashBackTime6) && (now<=endCashBackTime6) ){\n', '            if ( (msg.value >= minDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel1) ) cashbackValue = msg.value.mul(cashbackPercent6level1).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel2) ) cashbackValue = msg.value.mul(cashbackPercent6level2).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel2) && (msg.value <= maxDepCashBackLevel3) ) cashbackValue = msg.value.mul(cashbackPercent6level3).div(1000);\n', '        }\n', '        // action 7\n', '        if ( (now >= beginCashBackTime7) && (now<=endCashBackTime7) ){\n', '            if ( (msg.value >= minDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel1) ) cashbackValue = msg.value.mul(cashbackPercent7level1).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel2) ) cashbackValue = msg.value.mul(cashbackPercent7level2).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel2) && (msg.value <= maxDepCashBackLevel3) ) cashbackValue = msg.value.mul(cashbackPercent7level3).div(1000);\n', '        }\n', '        // action 8\n', '        if ( (now >= beginCashBackTime8) && (now<=endCashBackTime8) ){\n', '            if ( (msg.value >= minDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel1) ) cashbackValue = msg.value.mul(cashbackPercent8level1).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel1) && (msg.value <= maxDepCashBackLevel2) ) cashbackValue = msg.value.mul(cashbackPercent8level2).div(1000);\n', '            if ( (msg.value > maxDepCashBackLevel2) && (msg.value <= maxDepCashBackLevel3) ) cashbackValue = msg.value.mul(cashbackPercent8level3).div(1000);\n', '        }\n', '\n', '        usersCashback[msg.sender] = usersCashback[msg.sender].add(cashbackValue);\n', '    }\n', '    \n', '    //return of interest on the deposit\n', '    function collectPercent() isIssetUser timePayment internal {\n', '        //if the user received 150% or more of his contribution, delete the user\n', '        if ((userDeposit[msg.sender].mul(15).div(10)) <= persentWithdraw[msg.sender]) {\n', '            userDeposit[msg.sender] = 0;\n', '            userTime[msg.sender] = 0;\n', '            persentWithdraw[msg.sender] = 0;\n', '        } else {\n', '            uint payout = payoutAmount();\n', '            userTime[msg.sender] = now;\n', '            persentWithdraw[msg.sender] += payout;\n', '            msg.sender.transfer(payout);\n', '        }\n', '    }\n', '\n', '\n', '    function bytesToAddress(bytes bys) private pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(bys, 20))\n', '        }\n', '    }\n', '\n', '    //refund of the amount available for withdrawal on deposit\n', '    function payoutAmount() public view returns(uint) {\n', '        uint rate = userDeposit[msg.sender].mul(persent).div(100000);\n', '        uint interestRate = now.sub(userTime[msg.sender]).div(chargingTime);\n', '        uint withdrawalAmount = rate.mul(interestRate).add(usersCashback[msg.sender]);\n', '        return (withdrawalAmount);\n', '    }\n', '\n', '    function userPayoutAmount(address _user) public view returns(uint) {\n', '        uint rate = userDeposit[_user].mul(persent).div(100000);\n', '        uint interestRate = now.sub(userTime[_user]).div(chargingTime);\n', '        uint withdrawalAmount = rate.mul(interestRate).add(usersCashback[_user]);\n', '        return (withdrawalAmount);\n', '    }\n', '\n', '    function getInvestedAmount(address investor) public view returns(uint) {\n', '        return userDeposit[investor];\n', '    }\n', '    \n', '    function getLastDepositeTime(address investor) public view returns(uint) {\n', '        return userTime[investor];\n', '    }\n', '    \n', '    function getPercentWitdraw(address investor) public view returns(uint) {\n', '        return persentWithdraw[investor];\n', '    }\n', '    \n', '    function getRefferalsCollected(address refferal) public view returns(uint) {\n', '        return refferalCollected[refferal];\n', '    }\n', '    \n', '}']