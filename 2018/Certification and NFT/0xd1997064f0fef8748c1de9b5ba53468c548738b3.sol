['pragma solidity ^0.4.21;\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', '    // this function isn&#39;t abstract since the compiler emits automatically generated getter functions as external\n', '    function owner() public view returns (address) {}\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '/*\n', '    Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '/*\n', '    Contract Registry interface\n', '*/\n', 'contract IContractRegistry {\n', '    function getAddress(bytes32 _contractName) public view returns (address);\n', '}\n', '\n', '/**\n', '    Contract Registry\n', '\n', '    The contract registry keeps contract addresses by name.\n', '    The owner can update contract addresses so that a contract name always points to the latest version\n', '    of the given contract.\n', '    Other contracts can query the registry to get updated addresses instead of depending on specific\n', '    addresses.\n', '\n', '    Note that contract names are limited to 32 bytes, UTF8 strings to optimize gas costs\n', '*/\n', 'contract ContractRegistry is IContractRegistry, Owned {\n', '    mapping (bytes32 => address) addresses;\n', '\n', '    event AddressUpdate(bytes32 indexed _contractName, address _contractAddress);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function ContractRegistry() public {\n', '    }\n', '\n', '    /**\n', '        @dev returns the address associated with the given contract name\n', '\n', '        @param _contractName    contract name\n', '\n', '        @return contract address\n', '    */\n', '    function getAddress(bytes32 _contractName) public view returns (address) {\n', '        return addresses[_contractName];\n', '    }\n', '\n', '    /**\n', '        @dev registers a new address for the contract name\n', '\n', '       @param _contractName     contract name\n', '       @param _contractAddress  contract address\n', '    */\n', '    function registerAddress(bytes32 _contractName, address _contractAddress) public ownerOnly {\n', '        require(_contractName.length > 0); // validating input\n', '\n', '        addresses[_contractName] = _contractAddress;\n', '        emit AddressUpdate(_contractName, _contractAddress);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', "    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n", '    function owner() public view returns (address) {}\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '/*\n', '    Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '/*\n', '    Contract Registry interface\n', '*/\n', 'contract IContractRegistry {\n', '    function getAddress(bytes32 _contractName) public view returns (address);\n', '}\n', '\n', '/**\n', '    Contract Registry\n', '\n', '    The contract registry keeps contract addresses by name.\n', '    The owner can update contract addresses so that a contract name always points to the latest version\n', '    of the given contract.\n', '    Other contracts can query the registry to get updated addresses instead of depending on specific\n', '    addresses.\n', '\n', '    Note that contract names are limited to 32 bytes, UTF8 strings to optimize gas costs\n', '*/\n', 'contract ContractRegistry is IContractRegistry, Owned {\n', '    mapping (bytes32 => address) addresses;\n', '\n', '    event AddressUpdate(bytes32 indexed _contractName, address _contractAddress);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    function ContractRegistry() public {\n', '    }\n', '\n', '    /**\n', '        @dev returns the address associated with the given contract name\n', '\n', '        @param _contractName    contract name\n', '\n', '        @return contract address\n', '    */\n', '    function getAddress(bytes32 _contractName) public view returns (address) {\n', '        return addresses[_contractName];\n', '    }\n', '\n', '    /**\n', '        @dev registers a new address for the contract name\n', '\n', '       @param _contractName     contract name\n', '       @param _contractAddress  contract address\n', '    */\n', '    function registerAddress(bytes32 _contractName, address _contractAddress) public ownerOnly {\n', '        require(_contractName.length > 0); // validating input\n', '\n', '        addresses[_contractName] = _contractAddress;\n', '        emit AddressUpdate(_contractName, _contractAddress);\n', '    }\n', '}']
