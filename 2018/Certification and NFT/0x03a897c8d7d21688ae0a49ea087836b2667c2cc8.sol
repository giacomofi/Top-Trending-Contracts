['pragma solidity ^0.4.24;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : <span class="__cf_email__" data-cfemail="f591948390b5949e9a989794db969a98">[email&#160;protected]</span>\n', '// released under Apache 2.0 licence\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract StrayToken is StandardToken, BurnableToken, Ownable {\n', '\tusing SafeERC20 for ERC20;\n', '\t\n', '\tuint256 public INITIAL_SUPPLY = 1000000000;\n', '\t\n', '\tstring public name = "Stray";\n', '\tstring public symbol = "ST";\n', '\tuint8 public decimals = 18;\n', '\n', '\taddress public companyWallet;\n', '\taddress public privateWallet;\n', '\taddress public fund;\n', '\t\n', '\t/**\n', '\t * @param _companyWallet The company wallet which reserves 15% of the token.\n', '\t * @param _privateWallet Private wallet which reservers 25% of the token.\n', '\t */\n', '\tconstructor(address _companyWallet, address _privateWallet) public {\n', '\t\trequire(_companyWallet != address(0));\n', '\t\trequire(_privateWallet != address(0));\n', '\t\t\n', '\t\ttotalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals));\n', '\t\tcompanyWallet = _companyWallet;\n', '\t\tprivateWallet = _privateWallet;\n', '\t\t\n', '\t\t// 15% of tokens for company reserved.\n', '\t\t_preSale(companyWallet, totalSupply_.mul(15).div(100));\n', '\t\t\n', '\t\t// 25% of tokens for private funding.\n', '\t\t_preSale(privateWallet, totalSupply_.mul(25).div(100));\n', '\t\t\n', '\t\t// 60% of tokens for crowdsale.\n', '\t\tuint256 sold = balances[companyWallet].add(balances[privateWallet]);\n', '\t    balances[msg.sender] = balances[msg.sender].add(totalSupply_.sub(sold));\n', '\t    emit Transfer(address(0), msg.sender, balances[msg.sender]);\n', '\t}\n', '\t\n', '\t/**\n', '\t * @param _fund The DAICO fund contract address.\n', '\t */\n', '\tfunction setFundContract(address _fund) onlyOwner public {\n', '\t    require(_fund != address(0));\n', '\t    //require(_fund != owner);\n', '\t    //require(_fund != msg.sender);\n', '\t    require(_fund != address(this));\n', '\t    \n', '\t    fund = _fund;\n', '\t}\n', '\t\n', '\t/**\n', '\t * @dev The DAICO fund contract calls this function to burn the user&#39;s token\n', '\t * to avoid over refund.\n', '\t * @param _from The address which just took its refund.\n', '\t */\n', '\tfunction burnAll(address _from) public {\n', '\t    require(fund == msg.sender);\n', '\t    require(0 != balances[_from]);\n', '\t    \n', '\t    _burn(_from, balances[_from]);\n', '\t}\n', '\t\n', '\t/**\n', '\t * @param _to The address which will get the token.\n', '\t * @param _value The token amount.\n', '\t */\n', '\tfunction _preSale(address _to, uint256 _value) internal onlyOwner {\n', '\t\tbalances[_to] = _value;\n', '\t\temit Transfer(address(0), _to, _value);\n', '\t}\n', '\t\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.safeTransfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  constructor(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', 'contract StrayCrowdsale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '    \n', '    // Soft cap and hard cap in distributed token.\n', '    uint256 public softCapInToken;\n', '    uint256 public hardCapInToken;\n', '    uint256 public soldToken = 0;\n', '    \n', '    // Bouns stage time.\n', '    uint256 public bonusClosingTime0;\n', '    uint256 public bonusClosingTime1;\n', '    \n', '    // Bouns rate.\n', '    uint256 public bonusRateInPercent0 = 33;\n', '    uint256 public bonusRateInPercent1 = 20;\n', '    \n', '    // Mininum contribute: 100 USD.\n', '    uint256 public mininumContributeUSD = 100;\n', '    \n', '    // The floating exchange rate from external API.\n', '    uint256 public decimalsETHToUSD;\n', '    uint256 public exchangeRateETHToUSD;\n', '   \n', '   // The mininum purchase token quantity.\n', '    uint256 public mininumPurchaseTokenQuantity;\n', '    \n', '    // The calculated mininum contribute Wei.\n', '    uint256 public mininumContributeWei;\n', '    \n', '    // The exchange rate from USD to Token.\n', '    // 1 USD => 100 Token (0.01 USD => 1 Token).\n', '    uint256 public exchangeRateUSDToToken = 100;\n', '    \n', '    // Stray token contract.\n', '    StrayToken public strayToken;\n', '    \n', '    // Refund vault used to hold funds while crowdsale is running\n', '    RefundVault public vault;\n', '    \n', '    // Event \n', '    event RateUpdated(uint256 rate, uint256 mininumContributeWei);\n', '    \n', '    /**\n', '     * @param _softCapInUSD Minimal funds to be collected.\n', '     * @param _hardCapInUSD Maximal funds to be collected.\n', '     * @param _fund The Stray DAICO fund contract address.\n', '     * @param _token Stray ERC20 contract.\n', '     * @param _openingTime Crowdsale opening time.\n', '     * @param _closingTime Crowdsale closing time.\n', '     * @param _bonusClosingTime0 Bonus stage0 closing time.\n', '     * @param _bonusClosingTime1 Bonus stage1 closing time.\n', '     */\n', '    constructor(uint256 _softCapInUSD\n', '        , uint256 _hardCapInUSD\n', '        , address _fund\n', '        , ERC20 _token\n', '        , uint256 _openingTime\n', '        , uint256 _closingTime\n', '        , uint256 _bonusClosingTime0\n', '        , uint256 _bonusClosingTime1\n', '        ) \n', '        Crowdsale(1, _fund, _token)\n', '        TimedCrowdsale(_openingTime, _closingTime)\n', '        public \n', '    {\n', '        // Validate ico stage time.\n', '        require(_bonusClosingTime0 >= _openingTime);\n', '        require(_bonusClosingTime1 >= _bonusClosingTime0);\n', '        require(_closingTime >= _bonusClosingTime1);\n', '        \n', '        bonusClosingTime0 = _bonusClosingTime0;\n', '        bonusClosingTime1 = _bonusClosingTime1;\n', '        \n', '        // Create the token.\n', '        strayToken = StrayToken(token);\n', '        \n', '        // Set soft cap and hard cap.\n', '        require(_softCapInUSD > 0 && _softCapInUSD <= _hardCapInUSD);\n', '        \n', '        softCapInToken = _softCapInUSD * exchangeRateUSDToToken * (10 ** uint256(strayToken.decimals()));\n', '        hardCapInToken = _hardCapInUSD * exchangeRateUSDToToken * (10 ** uint256(strayToken.decimals()));\n', '        \n', '        require(strayToken.balanceOf(owner) >= hardCapInToken);\n', '        \n', '        // Create the refund vault.\n', '        vault = new RefundVault(_fund);\n', '        \n', '        // Calculate mininum purchase token.\n', '        mininumPurchaseTokenQuantity = exchangeRateUSDToToken * mininumContributeUSD \n', '            * (10 ** (uint256(strayToken.decimals())));\n', '        \n', '        // Set default exchange rate ETH => USD: 400.00\n', '        setExchangeRateETHToUSD(40000, 2);\n', '    }\n', '    \n', '    /**\n', '     * @dev Set the exchange rate from ETH to USD.\n', '     * @param _rate The exchange rate.\n', '     * @param _decimals The decimals of input rate.\n', '     */\n', '    function setExchangeRateETHToUSD(uint256 _rate, uint256 _decimals) onlyOwner public {\n', '        // wei * 1e-18 * _rate * 1e(-_decimals) * 1e2          = amount * 1e(-token.decimals);\n', '        // -----------   ----------------------   -------------\n', '        // Wei => ETH      ETH => USD             USD => Token\n', '        //\n', '        // If _rate = 1, wei = 1,\n', '        // Then  amount = 1e(token.decimals + 2 - 18 - _decimals).\n', '        // We need amount >= 1 to ensure the precision.\n', '        \n', '        require(uint256(strayToken.decimals()).add(2) >= _decimals.add(18));\n', '        \n', '        exchangeRateETHToUSD = _rate;\n', '        decimalsETHToUSD = _decimals;\n', '        rate = _rate.mul(exchangeRateUSDToToken);\n', '        if (uint256(strayToken.decimals()) >= _decimals.add(18)) {\n', '            rate = rate.mul(10 ** (uint256(strayToken.decimals()).sub(18).sub(_decimals)));\n', '        } else {\n', '            rate = rate.div(10 ** (_decimals.add(18).sub(uint256(strayToken.decimals()))));\n', '        }\n', '        \n', '        mininumContributeWei = mininumPurchaseTokenQuantity.div(rate); \n', '        \n', '        // Avoid rounding error.\n', '        if (mininumContributeWei * rate < mininumPurchaseTokenQuantity)\n', '            mininumContributeWei += 1;\n', '            \n', '        emit RateUpdated(rate, mininumContributeWei);\n', '    }\n', '    \n', '    /**\n', '     * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '     */\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!softCapReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '    \n', '    /**\n', '     * @dev Checks whether funding goal was reached.\n', '     * @return Whether funding goal was reached\n', '     */\n', '    function softCapReached() public view returns (bool) {\n', '        return soldToken >= softCapInToken;\n', '    }\n', '    \n', '    /**\n', '     * @dev Validate if it is in ICO stage 1.\n', '     */\n', '    function isInStage1() view public returns (bool) {\n', '        return now <= bonusClosingTime0 && now >= openingTime;\n', '    }\n', '    \n', '    /**\n', '     * @dev Validate if it is in ICO stage 2.\n', '     */\n', '    function isInStage2() view public returns (bool) {\n', '        return now <= bonusClosingTime1 && now > bonusClosingTime0;\n', '    }\n', '    \n', '    /**\n', '     * @dev Validate if crowdsale has started.\n', '     */\n', '    function hasStarted() view public returns (bool) {\n', '        return now >= openingTime;\n', '    }\n', '    \n', '    /**\n', '     * @dev Validate the mininum contribution requirement.\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\n', '        internal\n', '    {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(_weiAmount >= mininumContributeWei);\n', '    }\n', '    \n', '    /**\n', '     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        soldToken = soldToken.add(_tokenAmount);\n', '        require(soldToken <= hardCapInToken);\n', '        \n', '       _tokenAmount = _addBonus(_tokenAmount);\n', '        \n', '        super._processPurchase(_beneficiary, _tokenAmount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Finalization task, called when owner calls finalize()\n', '     */\n', '    function finalization() internal {\n', '        if (softCapReached()) {\n', '            vault.close();\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '        \n', '        // Burn all the unsold token.\n', '        strayToken.burn(token.balanceOf(address(this)));\n', '        \n', '        super.finalization();\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n', '     */\n', '    function _forwardFunds() internal {\n', '        vault.deposit.value(msg.value)(msg.sender);\n', '    }\n', '    \n', '    /**\n', '     * @dev Calculate the token amount and add bonus if needed.\n', '     */\n', '    function _addBonus(uint256 _tokenAmount) internal view returns (uint256) {\n', '        if (bonusClosingTime0 >= now) {\n', '            _tokenAmount = _tokenAmount.mul(100 + bonusRateInPercent0).div(100);\n', '        } else if (bonusClosingTime1 >= now) {\n', '            _tokenAmount = _tokenAmount.mul(100 + bonusRateInPercent1).div(100);\n', '        }\n', '        \n', '        require(_tokenAmount <= token.balanceOf(address(this)));\n', '        \n', '        return _tokenAmount;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '// produced by the Solididy File Flattener (c) David Appleton 2018\n', '// contact : dave@akomba.com\n', '// released under Apache 2.0 licence\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    require(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  )\n', '    internal\n', '  {\n', '    require(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    require(token.approve(spender, value));\n', '  }\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract StrayToken is StandardToken, BurnableToken, Ownable {\n', '\tusing SafeERC20 for ERC20;\n', '\t\n', '\tuint256 public INITIAL_SUPPLY = 1000000000;\n', '\t\n', '\tstring public name = "Stray";\n', '\tstring public symbol = "ST";\n', '\tuint8 public decimals = 18;\n', '\n', '\taddress public companyWallet;\n', '\taddress public privateWallet;\n', '\taddress public fund;\n', '\t\n', '\t/**\n', '\t * @param _companyWallet The company wallet which reserves 15% of the token.\n', '\t * @param _privateWallet Private wallet which reservers 25% of the token.\n', '\t */\n', '\tconstructor(address _companyWallet, address _privateWallet) public {\n', '\t\trequire(_companyWallet != address(0));\n', '\t\trequire(_privateWallet != address(0));\n', '\t\t\n', '\t\ttotalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals));\n', '\t\tcompanyWallet = _companyWallet;\n', '\t\tprivateWallet = _privateWallet;\n', '\t\t\n', '\t\t// 15% of tokens for company reserved.\n', '\t\t_preSale(companyWallet, totalSupply_.mul(15).div(100));\n', '\t\t\n', '\t\t// 25% of tokens for private funding.\n', '\t\t_preSale(privateWallet, totalSupply_.mul(25).div(100));\n', '\t\t\n', '\t\t// 60% of tokens for crowdsale.\n', '\t\tuint256 sold = balances[companyWallet].add(balances[privateWallet]);\n', '\t    balances[msg.sender] = balances[msg.sender].add(totalSupply_.sub(sold));\n', '\t    emit Transfer(address(0), msg.sender, balances[msg.sender]);\n', '\t}\n', '\t\n', '\t/**\n', '\t * @param _fund The DAICO fund contract address.\n', '\t */\n', '\tfunction setFundContract(address _fund) onlyOwner public {\n', '\t    require(_fund != address(0));\n', '\t    //require(_fund != owner);\n', '\t    //require(_fund != msg.sender);\n', '\t    require(_fund != address(this));\n', '\t    \n', '\t    fund = _fund;\n', '\t}\n', '\t\n', '\t/**\n', "\t * @dev The DAICO fund contract calls this function to burn the user's token\n", '\t * to avoid over refund.\n', '\t * @param _from The address which just took its refund.\n', '\t */\n', '\tfunction burnAll(address _from) public {\n', '\t    require(fund == msg.sender);\n', '\t    require(0 != balances[_from]);\n', '\t    \n', '\t    _burn(_from, balances[_from]);\n', '\t}\n', '\t\n', '\t/**\n', '\t * @param _to The address which will get the token.\n', '\t * @param _value The token amount.\n', '\t */\n', '\tfunction _preSale(address _to, uint256 _value) internal onlyOwner {\n', '\t\tbalances[_to] = _value;\n', '\t\temit Transfer(address(0), _to, _value);\n', '\t}\n', '\t\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei.\n', '  // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', '  // 1 wei will give you 1 unit, or 0.001 TOK.\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(\n', '    address indexed purchaser,\n', '    address indexed beneficiary,\n', '    uint256 value,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    token.safeTransfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(\n', '    address _beneficiary,\n', '    uint256 _tokenAmount\n', '  )\n', '    internal\n', '  {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '  {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount)\n', '    internal view returns (uint256)\n', '  {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  /**\n', '   * @param _wallet Vault address\n', '   */\n', '  constructor(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    emit Closed();\n', '    wallet.transfer(address(this).balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    emit RefundsEnabled();\n', '  }\n', '\n', '  /**\n', '   * @param investor Investor address\n', '   */\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    emit Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', 'contract StrayCrowdsale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '    \n', '    // Soft cap and hard cap in distributed token.\n', '    uint256 public softCapInToken;\n', '    uint256 public hardCapInToken;\n', '    uint256 public soldToken = 0;\n', '    \n', '    // Bouns stage time.\n', '    uint256 public bonusClosingTime0;\n', '    uint256 public bonusClosingTime1;\n', '    \n', '    // Bouns rate.\n', '    uint256 public bonusRateInPercent0 = 33;\n', '    uint256 public bonusRateInPercent1 = 20;\n', '    \n', '    // Mininum contribute: 100 USD.\n', '    uint256 public mininumContributeUSD = 100;\n', '    \n', '    // The floating exchange rate from external API.\n', '    uint256 public decimalsETHToUSD;\n', '    uint256 public exchangeRateETHToUSD;\n', '   \n', '   // The mininum purchase token quantity.\n', '    uint256 public mininumPurchaseTokenQuantity;\n', '    \n', '    // The calculated mininum contribute Wei.\n', '    uint256 public mininumContributeWei;\n', '    \n', '    // The exchange rate from USD to Token.\n', '    // 1 USD => 100 Token (0.01 USD => 1 Token).\n', '    uint256 public exchangeRateUSDToToken = 100;\n', '    \n', '    // Stray token contract.\n', '    StrayToken public strayToken;\n', '    \n', '    // Refund vault used to hold funds while crowdsale is running\n', '    RefundVault public vault;\n', '    \n', '    // Event \n', '    event RateUpdated(uint256 rate, uint256 mininumContributeWei);\n', '    \n', '    /**\n', '     * @param _softCapInUSD Minimal funds to be collected.\n', '     * @param _hardCapInUSD Maximal funds to be collected.\n', '     * @param _fund The Stray DAICO fund contract address.\n', '     * @param _token Stray ERC20 contract.\n', '     * @param _openingTime Crowdsale opening time.\n', '     * @param _closingTime Crowdsale closing time.\n', '     * @param _bonusClosingTime0 Bonus stage0 closing time.\n', '     * @param _bonusClosingTime1 Bonus stage1 closing time.\n', '     */\n', '    constructor(uint256 _softCapInUSD\n', '        , uint256 _hardCapInUSD\n', '        , address _fund\n', '        , ERC20 _token\n', '        , uint256 _openingTime\n', '        , uint256 _closingTime\n', '        , uint256 _bonusClosingTime0\n', '        , uint256 _bonusClosingTime1\n', '        ) \n', '        Crowdsale(1, _fund, _token)\n', '        TimedCrowdsale(_openingTime, _closingTime)\n', '        public \n', '    {\n', '        // Validate ico stage time.\n', '        require(_bonusClosingTime0 >= _openingTime);\n', '        require(_bonusClosingTime1 >= _bonusClosingTime0);\n', '        require(_closingTime >= _bonusClosingTime1);\n', '        \n', '        bonusClosingTime0 = _bonusClosingTime0;\n', '        bonusClosingTime1 = _bonusClosingTime1;\n', '        \n', '        // Create the token.\n', '        strayToken = StrayToken(token);\n', '        \n', '        // Set soft cap and hard cap.\n', '        require(_softCapInUSD > 0 && _softCapInUSD <= _hardCapInUSD);\n', '        \n', '        softCapInToken = _softCapInUSD * exchangeRateUSDToToken * (10 ** uint256(strayToken.decimals()));\n', '        hardCapInToken = _hardCapInUSD * exchangeRateUSDToToken * (10 ** uint256(strayToken.decimals()));\n', '        \n', '        require(strayToken.balanceOf(owner) >= hardCapInToken);\n', '        \n', '        // Create the refund vault.\n', '        vault = new RefundVault(_fund);\n', '        \n', '        // Calculate mininum purchase token.\n', '        mininumPurchaseTokenQuantity = exchangeRateUSDToToken * mininumContributeUSD \n', '            * (10 ** (uint256(strayToken.decimals())));\n', '        \n', '        // Set default exchange rate ETH => USD: 400.00\n', '        setExchangeRateETHToUSD(40000, 2);\n', '    }\n', '    \n', '    /**\n', '     * @dev Set the exchange rate from ETH to USD.\n', '     * @param _rate The exchange rate.\n', '     * @param _decimals The decimals of input rate.\n', '     */\n', '    function setExchangeRateETHToUSD(uint256 _rate, uint256 _decimals) onlyOwner public {\n', '        // wei * 1e-18 * _rate * 1e(-_decimals) * 1e2          = amount * 1e(-token.decimals);\n', '        // -----------   ----------------------   -------------\n', '        // Wei => ETH      ETH => USD             USD => Token\n', '        //\n', '        // If _rate = 1, wei = 1,\n', '        // Then  amount = 1e(token.decimals + 2 - 18 - _decimals).\n', '        // We need amount >= 1 to ensure the precision.\n', '        \n', '        require(uint256(strayToken.decimals()).add(2) >= _decimals.add(18));\n', '        \n', '        exchangeRateETHToUSD = _rate;\n', '        decimalsETHToUSD = _decimals;\n', '        rate = _rate.mul(exchangeRateUSDToToken);\n', '        if (uint256(strayToken.decimals()) >= _decimals.add(18)) {\n', '            rate = rate.mul(10 ** (uint256(strayToken.decimals()).sub(18).sub(_decimals)));\n', '        } else {\n', '            rate = rate.div(10 ** (_decimals.add(18).sub(uint256(strayToken.decimals()))));\n', '        }\n', '        \n', '        mininumContributeWei = mininumPurchaseTokenQuantity.div(rate); \n', '        \n', '        // Avoid rounding error.\n', '        if (mininumContributeWei * rate < mininumPurchaseTokenQuantity)\n', '            mininumContributeWei += 1;\n', '            \n', '        emit RateUpdated(rate, mininumContributeWei);\n', '    }\n', '    \n', '    /**\n', '     * @dev Investors can claim refunds here if crowdsale is unsuccessful\n', '     */\n', '    function claimRefund() public {\n', '        require(isFinalized);\n', '        require(!softCapReached());\n', '\n', '        vault.refund(msg.sender);\n', '    }\n', '    \n', '    /**\n', '     * @dev Checks whether funding goal was reached.\n', '     * @return Whether funding goal was reached\n', '     */\n', '    function softCapReached() public view returns (bool) {\n', '        return soldToken >= softCapInToken;\n', '    }\n', '    \n', '    /**\n', '     * @dev Validate if it is in ICO stage 1.\n', '     */\n', '    function isInStage1() view public returns (bool) {\n', '        return now <= bonusClosingTime0 && now >= openingTime;\n', '    }\n', '    \n', '    /**\n', '     * @dev Validate if it is in ICO stage 2.\n', '     */\n', '    function isInStage2() view public returns (bool) {\n', '        return now <= bonusClosingTime1 && now > bonusClosingTime0;\n', '    }\n', '    \n', '    /**\n', '     * @dev Validate if crowdsale has started.\n', '     */\n', '    function hasStarted() view public returns (bool) {\n', '        return now >= openingTime;\n', '    }\n', '    \n', '    /**\n', '     * @dev Validate the mininum contribution requirement.\n', '     */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)\n', '        internal\n', '    {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(_weiAmount >= mininumContributeWei);\n', '    }\n', '    \n', '    /**\n', '     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '     * @param _beneficiary Address receiving the tokens\n', '     * @param _tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '        soldToken = soldToken.add(_tokenAmount);\n', '        require(soldToken <= hardCapInToken);\n', '        \n', '       _tokenAmount = _addBonus(_tokenAmount);\n', '        \n', '        super._processPurchase(_beneficiary, _tokenAmount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Finalization task, called when owner calls finalize()\n', '     */\n', '    function finalization() internal {\n', '        if (softCapReached()) {\n', '            vault.close();\n', '        } else {\n', '            vault.enableRefunds();\n', '        }\n', '        \n', '        // Burn all the unsold token.\n', '        strayToken.burn(token.balanceOf(address(this)));\n', '        \n', '        super.finalization();\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides Crowdsale fund forwarding, sending funds to vault.\n', '     */\n', '    function _forwardFunds() internal {\n', '        vault.deposit.value(msg.value)(msg.sender);\n', '    }\n', '    \n', '    /**\n', '     * @dev Calculate the token amount and add bonus if needed.\n', '     */\n', '    function _addBonus(uint256 _tokenAmount) internal view returns (uint256) {\n', '        if (bonusClosingTime0 >= now) {\n', '            _tokenAmount = _tokenAmount.mul(100 + bonusRateInPercent0).div(100);\n', '        } else if (bonusClosingTime1 >= now) {\n', '            _tokenAmount = _tokenAmount.mul(100 + bonusRateInPercent1).div(100);\n', '        }\n', '        \n', '        require(_tokenAmount <= token.balanceOf(address(this)));\n', '        \n', '        return _tokenAmount;\n', '    }\n', '}']
