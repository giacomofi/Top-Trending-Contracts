['contract EIP20Interface {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint256 supply);\n', '    is replaced with:\n', '    uint256 public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '    /// total amount of tokens\n', '    uint256 public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', 'contract EIP20 is EIP20Interface {\n', '\n', '    uint256 constant MAX_UINT256 = 2**256 - 1;\n', '\n', '    /*\n', '    NOTE:\n', '    The following variables are OPTIONAL vanities. One does not have to include them.\n', '    They allow one to customise the token contract & in no way influences the core functionality.\n', '    Some wallets/interfaces might not even bother to look at this information.\n', '    */\n', '    string public name;                   //fancy name: eg Simon Bucks\n', '    uint8 public decimals;                //How many decimals to show.\n', '    string public symbol;                 //An identifier: eg SBX\n', '\n', '     function EIP20(\n', '        uint256 _initialAmount,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol\n', '        ) public {\n', '        balances[msg.sender] = _initialAmount;               // Give the creator all initial tokens\n', '        totalSupply = _initialAmount;                        // Update total supply\n', '        name = _tokenName;                                   // Set the name for display purposes\n', '        decimals = _decimalUnits;                            // Amount of decimals for display purposes\n', '        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', "        //Default assumes totalSupply can't be over max (2^256 - 1).\n", "        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n", '        //Replace the if with this one instead.\n', '        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        require(balances[msg.sender] >= _value);\n', '        balances[msg.sender] -= _value;\n', '        balances[_to] += _value;\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n', '        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]);\n', '        uint256 allowance = allowed[_from][msg.sender];\n', '        require(balances[_from] >= _value && allowance >= _value);\n', '        balances[_to] += _value;\n', '        balances[_from] -= _value;\n', '        if (allowance < MAX_UINT256) {\n', '            allowed[_from][msg.sender] -= _value;\n', '        }\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) view public returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender)\n', '    view public returns (uint256 remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '\n', '    mapping (address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '}\n', '\n', 'library DLL {\n', '\n', '  uint constant NULL_NODE_ID = 0;\n', '\n', '  struct Node {\n', '    uint next;\n', '    uint prev;\n', '  }\n', '\n', '  struct Data {\n', '    mapping(uint => Node) dll;\n', '  }\n', '\n', '  function isEmpty(Data storage self) public view returns (bool) {\n', '    return getStart(self) == NULL_NODE_ID;\n', '  }\n', '\n', '  function contains(Data storage self, uint _curr) public view returns (bool) {\n', '    if (isEmpty(self) || _curr == NULL_NODE_ID) {\n', '      return false;\n', '    } \n', '\n', '    bool isSingleNode = (getStart(self) == _curr) && (getEnd(self) == _curr);\n', '    bool isNullNode = (getNext(self, _curr) == NULL_NODE_ID) && (getPrev(self, _curr) == NULL_NODE_ID);\n', '    return isSingleNode || !isNullNode;\n', '  }\n', '\n', '  function getNext(Data storage self, uint _curr) public view returns (uint) {\n', '    return self.dll[_curr].next;\n', '  }\n', '\n', '  function getPrev(Data storage self, uint _curr) public view returns (uint) {\n', '    return self.dll[_curr].prev;\n', '  }\n', '\n', '  function getStart(Data storage self) public view returns (uint) {\n', '    return getNext(self, NULL_NODE_ID);\n', '  }\n', '\n', '  function getEnd(Data storage self) public view returns (uint) {\n', '    return getPrev(self, NULL_NODE_ID);\n', '  }\n', '\n', '  /**\n', '  @dev Inserts a new node between _prev and _next. When inserting a node already existing in \n', '  the list it will be automatically removed from the old position.\n', '  @param _prev the node which _new will be inserted after\n', '  @param _curr the id of the new node being inserted\n', '  @param _next the node which _new will be inserted before\n', '  */\n', '  function insert(Data storage self, uint _prev, uint _curr, uint _next) public {\n', '    require(_curr != NULL_NODE_ID);\n', '    require(_prev == NULL_NODE_ID || contains(self, _prev));\n', '\n', '    remove(self, _curr);\n', '\n', '    require(getNext(self, _prev) == _next);\n', '\n', '    self.dll[_curr].prev = _prev;\n', '    self.dll[_curr].next = _next;\n', '\n', '    self.dll[_prev].next = _curr;\n', '    self.dll[_next].prev = _curr;\n', '  }\n', '\n', '  function remove(Data storage self, uint _curr) public {\n', '    if (!contains(self, _curr)) {\n', '      return;\n', '    }\n', '\n', '    uint next = getNext(self, _curr);\n', '    uint prev = getPrev(self, _curr);\n', '\n', '    self.dll[next].prev = prev;\n', '    self.dll[prev].next = next;\n', '\n', '    delete self.dll[_curr];\n', '  }\n', '}\n', '\n', 'library AttributeStore {\n', '    struct Data {\n', '        mapping(bytes32 => uint) store;\n', '    }\n', '\n', '    function getAttribute(Data storage self, bytes32 _UUID, string _attrName)\n', '    public view returns (uint) {\n', '        bytes32 key = keccak256(_UUID, _attrName);\n', '        return self.store[key];\n', '    }\n', '\n', '    function setAttribute(Data storage self, bytes32 _UUID, string _attrName, uint _attrVal)\n', '    public {\n', '        bytes32 key = keccak256(_UUID, _attrName);\n', '        self.store[key] = _attrVal;\n', '    }\n', '}\n', '\n', 'contract PLCRVoting {\n', '\n', '    // ============\n', '    // EVENTS:\n', '    // ============\n', '\n', '    event VoteCommitted(address voter, uint pollID, uint numTokens);\n', '    event VoteRevealed(address voter, uint pollID, uint numTokens, uint choice);\n', '    event PollCreated(uint voteQuorum, uint commitDuration, uint revealDuration, uint pollID);\n', '    event VotingRightsGranted(address voter, uint numTokens);\n', '    event VotingRightsWithdrawn(address voter, uint numTokens);\n', '\n', '    // ============\n', '    // DATA STRUCTURES:\n', '    // ============\n', '\n', '    using AttributeStore for AttributeStore.Data;\n', '    using DLL for DLL.Data;\n', '\n', '    struct Poll {\n', '        uint commitEndDate;     /// expiration date of commit period for poll\n', '        uint revealEndDate;     /// expiration date of reveal period for poll\n', '        uint voteQuorum;\t    /// number of votes required for a proposal to pass\n', '        uint votesFor;\t\t    /// tally of votes supporting proposal\n', '        uint votesAgainst;      /// tally of votes countering proposal\n', '    }\n', '    \n', '    // ============\n', '    // STATE VARIABLES:\n', '    // ============\n', '\n', '    uint constant public INITIAL_POLL_NONCE = 0;\n', '    uint public pollNonce;\n', '\n', '    mapping(uint => Poll) public pollMap; // maps pollID to Poll struct\n', "    mapping(address => uint) public voteTokenBalance; // maps user's address to voteToken balance\n", '\n', '    mapping(address => DLL.Data) dllMap;\n', '    AttributeStore.Data store;\n', '\n', '    EIP20 public token;\n', '\n', '    // ============\n', '    // CONSTRUCTOR:\n', '    // ============\n', '\n', '    /**\n', '    @dev Initializes voteQuorum, commitDuration, revealDuration, and pollNonce in addition to token contract and trusted mapping\n', '    @param _tokenAddr The address where the ERC20 token contract is deployed\n', '    */\n', '    function PLCRVoting(address _tokenAddr) public {\n', '        token = EIP20(_tokenAddr);\n', '        pollNonce = INITIAL_POLL_NONCE;\n', '    }\n', '\n', '    // ================\n', '    // TOKEN INTERFACE:\n', '    // ================\n', '\n', '    /**    \n', '    @notice Loads _numTokens ERC20 tokens into the voting contract for one-to-one voting rights\n', '    @dev Assumes that msg.sender has approved voting contract to spend on their behalf\n', '    @param _numTokens The number of votingTokens desired in exchange for ERC20 tokens\n', '    */\n', '    function requestVotingRights(uint _numTokens) external {\n', '        require(token.balanceOf(msg.sender) >= _numTokens);\n', '        require(token.transferFrom(msg.sender, this, _numTokens));\n', '        voteTokenBalance[msg.sender] += _numTokens;\n', '        VotingRightsGranted(msg.sender, _numTokens);\n', '    }\n', '\n', '    /**\n', '    @notice Withdraw _numTokens ERC20 tokens from the voting contract, revoking these voting rights\n', '    @param _numTokens The number of ERC20 tokens desired in exchange for voting rights\n', '    */\n', '    function withdrawVotingRights(uint _numTokens) external {\n', '        uint availableTokens = voteTokenBalance[msg.sender] - getLockedTokens(msg.sender);\n', '        require(availableTokens >= _numTokens);\n', '        require(token.transfer(msg.sender, _numTokens));\n', '        voteTokenBalance[msg.sender] -= _numTokens;\n', '        VotingRightsWithdrawn(msg.sender, _numTokens);\n', '    }\n', '\n', '    /**\n', '    @dev Unlocks tokens locked in unrevealed vote where poll has ended\n', '    @param _pollID Integer identifier associated with the target poll\n', '    */\n', '    function rescueTokens(uint _pollID) external {\n', '        require(pollEnded(_pollID));\n', '        require(!hasBeenRevealed(msg.sender, _pollID));\n', '\n', '        dllMap[msg.sender].remove(_pollID);\n', '    }\n', '\n', '    // =================\n', '    // VOTING INTERFACE:\n', '    // =================\n', '\n', '    /**\n', '    @notice Commits vote using hash of choice and secret salt to conceal vote until reveal\n', '    @param _pollID Integer identifier associated with target poll\n', "    @param _secretHash Commit keccak256 hash of voter's choice and salt (tightly packed in this order)\n", '    @param _numTokens The number of tokens to be committed towards the target poll\n', '    @param _prevPollID The ID of the poll that the user has voted the maximum number of tokens in which is still less than or equal to numTokens \n', '    */\n', '    function commitVote(uint _pollID, bytes32 _secretHash, uint _numTokens, uint _prevPollID) external {\n', '        require(commitPeriodActive(_pollID));\n', '        require(voteTokenBalance[msg.sender] >= _numTokens); // prevent user from overspending\n', '        require(_pollID != 0);                // prevent user from committing to zero node placeholder\n', '\n', '        // TODO: Move all insert validation into the DLL lib\n', '        // Check if _prevPollID exists\n', '        require(_prevPollID == 0 || getCommitHash(msg.sender, _prevPollID) != 0);\n', '\n', '        uint nextPollID = dllMap[msg.sender].getNext(_prevPollID);\n', '\n', '        // if nextPollID is equal to _pollID, _pollID is being updated,\n', '        nextPollID = (nextPollID == _pollID) ? dllMap[msg.sender].getNext(_pollID) : nextPollID;\n', '\n', '        require(validPosition(_prevPollID, nextPollID, msg.sender, _numTokens));\n', '        dllMap[msg.sender].insert(_prevPollID, _pollID, nextPollID);\n', '\n', '        bytes32 UUID = attrUUID(msg.sender, _pollID);\n', '\n', '        store.setAttribute(UUID, "numTokens", _numTokens);\n', '        store.setAttribute(UUID, "commitHash", uint(_secretHash));\n', '\n', '        VoteCommitted(msg.sender, _pollID, _numTokens);\n', '    }\n', '\n', '    /**\n', "    @dev Compares previous and next poll's committed tokens for sorting purposes\n", '    @param _prevID Integer identifier associated with previous poll in sorted order\n', '    @param _nextID Integer identifier associated with next poll in sorted order\n', '    @param _voter Address of user to check DLL position for\n', '    @param _numTokens The number of tokens to be committed towards the poll (used for sorting)\n', '    @return valid Boolean indication of if the specified position maintains the sort\n', '    */\n', '    function validPosition(uint _prevID, uint _nextID, address _voter, uint _numTokens) public constant returns (bool valid) {\n', '        bool prevValid = (_numTokens >= getNumTokens(_voter, _prevID));\n', '        // if next is zero node, _numTokens does not need to be greater\n', '        bool nextValid = (_numTokens <= getNumTokens(_voter, _nextID) || _nextID == 0); \n', '        return prevValid && nextValid;\n', '    }\n', '\n', '    /**\n', '    @notice Reveals vote with choice and secret salt used in generating commitHash to attribute committed tokens\n', '    @param _pollID Integer identifier associated with target poll\n', '    @param _voteOption Vote choice used to generate commitHash for associated poll\n', '    @param _salt Secret number used to generate commitHash for associated poll\n', '    */\n', '    function revealVote(uint _pollID, uint _voteOption, uint _salt) external {\n', '        // Make sure the reveal period is active\n', '        require(revealPeriodActive(_pollID));\n', '        require(!hasBeenRevealed(msg.sender, _pollID));                        // prevent user from revealing multiple times\n', '        require(keccak256(_voteOption, _salt) == getCommitHash(msg.sender, _pollID)); // compare resultant hash from inputs to original commitHash\n', '\n', '        uint numTokens = getNumTokens(msg.sender, _pollID); \n', '\n', '        if (_voteOption == 1) // apply numTokens to appropriate poll choice\n', '            pollMap[_pollID].votesFor += numTokens;\n', '        else\n', '            pollMap[_pollID].votesAgainst += numTokens;\n', '        \n', '        dllMap[msg.sender].remove(_pollID); // remove the node referring to this vote upon reveal\n', '\n', '        VoteRevealed(msg.sender, _pollID, numTokens, _voteOption);\n', '    }\n', '\n', '    /**\n', '    @param _pollID Integer identifier associated with target poll\n', '    @param _salt Arbitrarily chosen integer used to generate secretHash\n', '    @return correctVotes Number of tokens voted for winning option\n', '    */\n', '    function getNumPassingTokens(address _voter, uint _pollID, uint _salt) public constant returns (uint correctVotes) {\n', '        require(pollEnded(_pollID));\n', '        require(hasBeenRevealed(_voter, _pollID));\n', '\n', '        uint winningChoice = isPassed(_pollID) ? 1 : 0;\n', '        bytes32 winnerHash = keccak256(winningChoice, _salt);\n', '        bytes32 commitHash = getCommitHash(_voter, _pollID);\n', '\n', '        require(winnerHash == commitHash);\n', '\n', '        return getNumTokens(_voter, _pollID);\n', '    }\n', '\n', '    // ==================\n', '    // POLLING INTERFACE:\n', '    // ================== \n', '\n', '    /**\n', '    @dev Initiates a poll with canonical configured parameters at pollID emitted by PollCreated event\n', '    @param _voteQuorum Type of majority (out of 100) that is necessary for poll to be successful\n', '    @param _commitDuration Length of desired commit period in seconds\n', '    @param _revealDuration Length of desired reveal period in seconds\n', '    */\n', '    function startPoll(uint _voteQuorum, uint _commitDuration, uint _revealDuration) public returns (uint pollID) {\n', '        pollNonce = pollNonce + 1;\n', '\n', '        pollMap[pollNonce] = Poll({\n', '            voteQuorum: _voteQuorum,\n', '            commitEndDate: block.timestamp + _commitDuration,\n', '            revealEndDate: block.timestamp + _commitDuration + _revealDuration,\n', '            votesFor: 0,\n', '            votesAgainst: 0\n', '        });\n', '\n', '        PollCreated(_voteQuorum, _commitDuration, _revealDuration, pollNonce);\n', '        return pollNonce;\n', '    }\n', ' \n', '    /**\n', '    @notice Determines if proposal has passed\n', '    @dev Check if votesFor out of totalVotes exceeds votesQuorum (requires pollEnded)\n', '    @param _pollID Integer identifier associated with target poll\n', '    */\n', '    function isPassed(uint _pollID) constant public returns (bool passed) {\n', '        require(pollEnded(_pollID));\n', '\n', '        Poll memory poll = pollMap[_pollID];\n', '        return (100 * poll.votesFor) > (poll.voteQuorum * (poll.votesFor + poll.votesAgainst));\n', '    }\n', '\n', '    // ----------------\n', '    // POLLING HELPERS:\n', '    // ----------------\n', '\n', '    /**\n', '    @dev Gets the total winning votes for reward distribution purposes\n', '    @param _pollID Integer identifier associated with target poll\n', '    @return Total number of votes committed to the winning option for specified poll\n', '    */\n', '    function getTotalNumberOfTokensForWinningOption(uint _pollID) constant public returns (uint numTokens) {\n', '        require(pollEnded(_pollID));\n', '\n', '        if (isPassed(_pollID))\n', '            return pollMap[_pollID].votesFor;\n', '        else\n', '            return pollMap[_pollID].votesAgainst;\n', '    }\n', '\n', '    /**\n', '    @notice Determines if poll is over\n', "    @dev Checks isExpired for specified poll's revealEndDate\n", '    @return Boolean indication of whether polling period is over\n', '    */\n', '    function pollEnded(uint _pollID) constant public returns (bool ended) {\n', '        require(pollExists(_pollID));\n', '\n', '        return isExpired(pollMap[_pollID].revealEndDate);\n', '    }\n', '\n', '    /**\n', '    @notice Checks if the commit period is still active for the specified poll\n', "    @dev Checks isExpired for the specified poll's commitEndDate\n", '    @param _pollID Integer identifier associated with target poll\n', '    @return Boolean indication of isCommitPeriodActive for target poll\n', '    */\n', '    function commitPeriodActive(uint _pollID) constant public returns (bool active) {\n', '        require(pollExists(_pollID));\n', '\n', '        return !isExpired(pollMap[_pollID].commitEndDate);\n', '    }\n', '\n', '    /**\n', '    @notice Checks if the reveal period is still active for the specified poll\n', "    @dev Checks isExpired for the specified poll's revealEndDate\n", '    @param _pollID Integer identifier associated with target poll\n', '    */\n', '    function revealPeriodActive(uint _pollID) constant public returns (bool active) {\n', '        require(pollExists(_pollID));\n', '\n', '        return !isExpired(pollMap[_pollID].revealEndDate) && !commitPeriodActive(_pollID);\n', '    }\n', '\n', '    /**\n', '    @dev Checks if user has already revealed for specified poll\n', '    @param _voter Address of user to check against\n', '    @param _pollID Integer identifier associated with target poll\n', '    @return Boolean indication of whether user has already revealed\n', '    */\n', '    function hasBeenRevealed(address _voter, uint _pollID) constant public returns (bool revealed) {\n', '        require(pollExists(_pollID));\n', '\n', '        return !dllMap[_voter].contains(_pollID);\n', '    }\n', '\n', '    /**\n', '    @dev Checks if a poll exists, throws if the provided poll is in an impossible state\n', '    @param _pollID The pollID whose existance is to be evaluated.\n', '    @return Boolean Indicates whether a poll exists for the provided pollID\n', '    */\n', '    function pollExists(uint _pollID) constant public returns (bool exists) {\n', '        uint commitEndDate = pollMap[_pollID].commitEndDate;\n', '        uint revealEndDate = pollMap[_pollID].revealEndDate;\n', '\n', '        assert(!(commitEndDate == 0 && revealEndDate != 0));\n', '        assert(!(commitEndDate != 0 && revealEndDate == 0));\n', '\n', '        if(commitEndDate == 0 || revealEndDate == 0) { return false; }\n', '        return true;\n', '    }\n', '\n', '    // ---------------------------\n', '    // DOUBLE-LINKED-LIST HELPERS:\n', '    // ---------------------------\n', '\n', '    /**\n', '    @dev Gets the bytes32 commitHash property of target poll\n', '    @param _voter Address of user to check against\n', '    @param _pollID Integer identifier associated with target poll\n', '    @return Bytes32 hash property attached to target poll \n', '    */\n', '    function getCommitHash(address _voter, uint _pollID) constant public returns (bytes32 commitHash) { \n', '        return bytes32(store.getAttribute(attrUUID(_voter, _pollID), "commitHash"));    \n', '    } \n', '\n', '    /**\n', '    @dev Wrapper for getAttribute with attrName="numTokens"\n', '    @param _voter Address of user to check against\n', '    @param _pollID Integer identifier associated with target poll\n', '    @return Number of tokens committed to poll in sorted poll-linked-list\n', '    */\n', '    function getNumTokens(address _voter, uint _pollID) constant public returns (uint numTokens) {\n', '        return store.getAttribute(attrUUID(_voter, _pollID), "numTokens");\n', '    }\n', '\n', '    /**\n', '    @dev Gets top element of sorted poll-linked-list\n', '    @param _voter Address of user to check against\n', '    @return Integer identifier to poll with maximum number of tokens committed to it\n', '    */\n', '    function getLastNode(address _voter) constant public returns (uint pollID) {\n', '        return dllMap[_voter].getPrev(0);\n', '    }\n', '\n', '    /**\n', '    @dev Gets the numTokens property of getLastNode\n', '    @param _voter Address of user to check against\n', '    @return Maximum number of tokens committed in poll specified \n', '    */\n', '    function getLockedTokens(address _voter) constant public returns (uint numTokens) {\n', '        return getNumTokens(_voter, getLastNode(_voter));\n', '    }\n', '\n', '    /**\n', '    @dev Gets the prevNode a new node should be inserted after given the sort factor\n', '    @param _voter The voter whose DLL will be searched\n', '    @param _numTokens The value for the numTokens attribute in the node to be inserted\n', '    @return the node which the propoded node should be inserted after\n', '    */\n', '    function getInsertPointForNumTokens(address _voter, uint _numTokens)\n', '    constant public returns (uint prevNode) {\n', '      uint nodeID = getLastNode(_voter);\n', '      uint tokensInNode = getNumTokens(_voter, nodeID);\n', '\n', '      while(tokensInNode != 0) {\n', '        tokensInNode = getNumTokens(_voter, nodeID);\n', '        if(tokensInNode < _numTokens) {\n', '          return nodeID;\n', '        }\n', '        nodeID = dllMap[_voter].getPrev(nodeID);\n', '      }\n', '\n', '      return nodeID;\n', '    }\n', ' \n', '    // ----------------\n', '    // GENERAL HELPERS:\n', '    // ----------------\n', '\n', '    /**\n', '    @dev Checks if an expiration date has been reached\n', '    @param _terminationDate Integer timestamp of date to compare current timestamp with\n', '    @return expired Boolean indication of whether the terminationDate has passed\n', '    */\n', '    function isExpired(uint _terminationDate) constant public returns (bool expired) {\n', '        return (block.timestamp > _terminationDate);\n', '    }\n', '\n', '    /**\n', '    @dev Generates an identifier which associates a user and a poll together\n', '    @param _pollID Integer identifier associated with target poll\n', '    @return UUID Hash which is deterministic from _user and _pollID\n', '    */\n', '    function attrUUID(address _user, uint _pollID) public pure returns (bytes32 UUID) {\n', '        return keccak256(_user, _pollID);\n', '    }\n', '}']