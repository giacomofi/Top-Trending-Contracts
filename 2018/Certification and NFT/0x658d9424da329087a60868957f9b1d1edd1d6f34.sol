['pragma solidity ^0.4.13;\n', '\n', '/**\n', ' * @title FornicoinCrowdsale\n', ' * The Crowdsale contract for the Fornicoin Project.\n', ' * Read more at fornicoin.network\n', ' * <info (at) fornicoin.network>\n', ' */\n', '\n', '\n', ' /*\n', ' * This is the smart contract for the Fornicoin token.\n', ' * More information can be found on our website at: https://fornicoin.network\n', ' * Created by the Fornicoin Team <info@fornicoin.network>\n', ' */\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '    \n', '     mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    \n', '    var _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  \n', '    /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', ' /*\n', ' * This is the smart contract for the Fornicoin token.\n', ' * More information can be found on our website at: https://fornicoin.network\n', ' * Created by the Fornicoin Team <info@fornicoin.network>\n', ' */\n', '\n', 'contract FornicoinToken is StandardToken, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  string public constant name = "Fornicoin";\n', '  string public constant symbol = "FXX";\n', '  uint8 public constant decimals = 18;\n', '\n', '  // 100 000 000 Fornicoin tokens created\n', '  uint256 public constant MAX_SUPPLY = 100000000 * (10 ** uint256(decimals));\n', '  \n', '  // admin address for team functions\n', '  address public admin;\n', '  uint256 public teamTokens = 25000000 * (10 ** 18);\n', '  \n', '  // Top up gas balance\n', '  uint256 public minBalanceForTxFee = 55000 * 3 * 10 ** 9 wei; // == 55000 gas @ 3 gwei\n', '  // 800 FXX per ETH as the gas generation price\n', '  uint256 public sellPrice = 800; \n', '  \n', '  event Refill(uint256 amount);\n', '  \n', '  modifier onlyAdmin() {\n', '    require(msg.sender == admin);\n', '    _;\n', '  }\n', '\n', '  function FornicoinToken(address _admin) {\n', '    totalSupply = teamTokens;\n', '    balances[msg.sender] = MAX_SUPPLY;\n', '    admin =_admin;\n', '  }\n', '  \n', '  function setSellPrice(uint256 _price) public onlyAdmin {\n', '      require(_price >= 0);\n', '      // FXX can only become stronger\n', '      require(_price <= sellPrice);\n', '      \n', '      sellPrice = _price;\n', '  }\n', '  \n', '  // Update state of contract showing tokens bought\n', '  function updateTotalSupply(uint256 additions) onlyOwner {\n', '      require(totalSupply.add(additions) <= MAX_SUPPLY);\n', '      totalSupply += additions;\n', '  }\n', '  \n', '  function setMinTxFee(uint256 _balance) public onlyAdmin {\n', '      require(_balance >= 0);\n', '      // can only add more eth\n', '      require(_balance > minBalanceForTxFee);\n', '      \n', '      minBalanceForTxFee = _balance;\n', '  }\n', '  \n', '  function refillTxFeeMinimum() public payable onlyAdmin {\n', '      Refill(msg.value);\n', '  }\n', '  \n', '  // Transfers FXX tokens to another address\n', '  // Utilises transaction fee obfuscation\n', '  function transfer(address _to, uint _value) public returns (bool) {\n', '        // Prevent transfer to 0x0 address\n', '        require (_to != 0x0);\n', '        // Check for overflows \n', '        require (balanceOf(_to) + _value > balanceOf(_to));\n', '        // Determine if account has necessary funding for another tx\n', '        if(msg.sender.balance < minBalanceForTxFee && \n', '        balances[msg.sender].sub(_value) >= minBalanceForTxFee * sellPrice && \n', '        this.balance >= minBalanceForTxFee){\n', '            sellFXX((minBalanceForTxFee.sub(msg.sender.balance)) *                                 \n', '                             sellPrice);\n', '    \t        }\n', '        // Subtract from the sender\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        // Add the same to the recipient                   \n', '        balances[_to] = balances[_to].add(_value); \n', '        // Send out Transfer event to notify all parties\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    // Sells the amount of FXX to refill the senders ETH balance for another transaction\n', '    function sellFXX(uint amount) internal returns (uint revenue){\n', '        // checks if the sender has enough to sell\n', '        require(balanceOf(msg.sender) >= amount);  \n', "        // adds the amount to owner's balance       \n", '        balances[admin] = balances[admin].add(amount);          \n', "        // subtracts the amount from seller's balance              \n", '        balances[msg.sender] = balances[msg.sender].sub(amount);   \n', '        // Determines amount of ether to send to the seller \n', '        revenue = amount / sellPrice;\n', '        msg.sender.transfer(revenue);\n', '        // executes an event reflecting on the change\n', '        Transfer(msg.sender, this, amount); \n', '        // ends function and returns              \n', '        return revenue;                                   \n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title FornicoinCrowdsale\n', ' * The Crowdsale contract for the Fornicoin Project.\n', ' * Read more at fornicoin.network\n', ' * <info (at) fornicoin.network>\n', ' */\n', ' \n', 'contract FornicoinCrowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  FornicoinToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startICOPhaseOne;\n', '  uint256 public startICOPhaseTwo;\n', '  uint256 public startICOPhaseThree;\n', '  uint256 public endICO;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public phaseOneRate = 1100;\n', '  uint256 public phaseTwoRate = 1000;\n', '  uint256 public phaseThreeRate = 850;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '  \n', '  // admin address to halt contract\n', '  address public admin;\n', '  bool public haltSale;\n', '  uint256 public teamTokens = 25000000 * (10 ** 18);\n', '  bool public presaleDist = false;\n', '  \n', '  modifier onlyAdmin() {\n', '    require(msg.sender == admin);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  \n', '  function FornicoinCrowdsale(uint256 _startTime, address _wallet, address _admin) \n', '    public \n', '    {\n', '    require(_startTime >= now);\n', '    require(_wallet != 0x0);\n', '    \n', '    token = new FornicoinToken(_admin);\n', '    startICOPhaseOne = _startTime;\n', '    startICOPhaseTwo = startICOPhaseOne + 3 days;\n', '    startICOPhaseThree = startICOPhaseTwo + 4 weeks;\n', '    endICO = startICOPhaseThree + 15 days;\n', '    wallet = _wallet;\n', '    admin = _admin;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '//   low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '    require(!haltSale);\n', '\n', '    uint256 weiAmount = msg.value;\n', '    \n', '    uint256 tokens;\n', '\n', '    // calculate token amount to be created\n', '    if (now <= startICOPhaseTwo) {\n', '      tokens = weiAmount.mul(phaseOneRate);\n', '    } else if (now < startICOPhaseThree){\n', '      tokens = weiAmount.mul(phaseTwoRate);\n', '    } else {\n', '      tokens = weiAmount.mul(phaseThreeRate);\n', '    }\n', '    \n', '    token.updateTotalSupply(tokens);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.transfer(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    if (this.balance > 1 ether){\n', '      forwardFunds();\n', '    }\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startICOPhaseOne && now <= endICO;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '  \n', '  // @return currentRate of FXX tokens per ETH\n', '  function currentRate() public constant returns (uint256) {\n', '    if (now <= startICOPhaseTwo) {\n', '      return phaseOneRate;\n', '    } else if (now <= startICOPhaseThree){\n', '      return phaseTwoRate;\n', '    } else {\n', '      return phaseThreeRate;\n', '    }\n', '  }\n', '  \n', '  // Withdraw team tokens after 1 year\n', '  function withdrawTeamTokens() public onlyAdmin returns (bool) {\n', '    require(now >= startICOPhaseOne + 1 years);\n', '\n', '    token.transfer(wallet, teamTokens);\n', '    return true;\n', '  }\n', '  \n', '  function distPresale(address _presale, uint256 _tokens) public onlyAdmin {\n', '      require(_tokens <= 13000000*10**18);\n', '      require(!presaleDist);\n', '      presaleDist = true;\n', '      \n', '      token.transfer(_presale, _tokens);\n', '  }\n', '  \n', '  //sends any left over funds to the wallet\n', '  function finalizeSale() public onlyAdmin {\n', '      require(now > endICO);\n', '      \n', '      if (this.balance>0){\n', '          wallet.transfer(this.balance);\n', '      }\n', '      if(token.totalSupply() < token.MAX_SUPPLY()){\n', '          uint256 difference = token.MAX_SUPPLY().sub(token.totalSupply());\n', '          token.transfer(wallet, difference);\n', '          token.updateTotalSupply(difference);\n', '      }\n', '  }\n', '\n', '}']