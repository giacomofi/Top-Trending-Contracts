['/*************************************************************************\n', ' * This contract has been merged with solidify\n', ' * https://github.com/tiesnetwork/solidify\n', ' *************************************************************************/\n', ' \n', ' pragma solidity ^0.4.18;\n', '\n', '\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/math/SafeMath.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/math/SafeMath.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/MintableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "../ownership/Ownable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "../ownership/Ownable.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/MintableToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', 'contract S26 is MintableToken {\n', '\n', '    /* Token constants */\n', '\n', '    string public name = "SuperGidron26";\n', '\n', '    string public symbol = "S26";\n', '\n', '    uint public decimals = 6;\n', '\n', '    /* Blocks token transfers until ICO is finished.*/\n', '    bool public tokensBlocked = true;\n', '\n', '    // list of addresses with time-freezend tokens\n', '    mapping (address => uint) public teamTokensFreeze;\n', '\n', '    event debugLog(string key, uint value);\n', '\n', '\n', '\n', '\n', '    /* Allow token transfer.*/\n', '    function unblock() external onlyOwner {\n', '        tokensBlocked = false;\n', '    }\n', '\n', '    /* Override some function to add support of blocking .*/\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(!tokensBlocked);\n', '        require(allowTokenOperations(_to));\n', '        require(allowTokenOperations(msg.sender));\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(!tokensBlocked);\n', '        require(allowTokenOperations(_from));\n', '        require(allowTokenOperations(_to));\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(!tokensBlocked);\n', '        require(allowTokenOperations(_spender));\n', '        super.approve(_spender, _value);\n', '    }\n', '\n', '    // Hold team/founders tokens for defined time\n', '    function freezeTokens(address _holder, uint time) public onlyOwner {\n', '        require(_holder != 0x0);\n', '        teamTokensFreeze[_holder] = time;\n', '    }\n', '\n', '    function allowTokenOperations(address _holder) public constant returns (bool) {\n', '        return teamTokensFreeze[_holder] == 0 || now >= teamTokensFreeze[_holder];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract S26ICO {\n', '    using SafeMath for uint;\n', '\n', '    //==========\n', '    // Variables\n', '    //==========\n', '    //States\n', '    enum IcoState {Running, Paused, Failed, Finished}\n', '\n', '    // ico successed\n', '    bool public isSuccess = false;\n', '\n', '    // contract hardcoded owner\n', '    address public owner = 0xfFFafD9849e0b678a879E92581e1eF4729C65d00;// 0x987ddcbf60a5ab0206b32ca9dde2595e182f54e1;// = 0x00a329c0648769A73afAc7F9381E08FB43dBEA72;\n', '    address public wallet = 0xdDd1BB2F9BF1EEc3A11230de23b3e69Dee7665f8;//deploy 0x4A536E9F10c19112C33DEA04BFC62216792a197D;\n', '    address public unsold = 0xffC7086F6dB8d9A1545eA643aaDf4Da96668fC60; //\n', '    // Start time\n', '    uint public constant startTime = 1529761145;\n', '    // End time\n', '    uint public endTime = startTime + 30 days;\n', '\n', '    // decimals multiplier for calculation & debug\n', '    uint public constant multiplier = 1000000;\n', '\n', '    // minimal amount of tokens for sale\n', '    uint private constant minTokens = 50;\n', '\n', '    // one million\n', '    uint public constant mln = 1000000;\n', '\n', '    // ICO max tokens for sale\n', '    uint public constant tokensCap = 99 * mln * multiplier;\n', '\n', '    //ICO success\n', '    uint public constant minSuccess = 2 * mln * multiplier;\n', '\n', '    // Amount of sold tokens\n', '    uint public totalSupply = 0;\n', '    // Amount of tokens w/o bonus\n', '    uint public tokensSoldTotal = 0;\n', '\n', '\n', '    // State of ICO - default Running\n', '    IcoState public icoState = IcoState.Running;\n', '\n', '\n', '    // @dev for debug\n', '    uint private constant rateDivider = 1;\n', '\n', '    // initial price in wei\n', '    uint public priceInWei = 3046900000 / rateDivider;\n', '\n', '\n', '    // robot address\n', '    address public _robot = 0x63b247db491D3d3E32A9629509Fb459386Aff921;// = 0x00a329c0648769A73afAc7F9381E08FB43dBEA72; //\n', '\n', '    // if ICO not finished - we must send all old contract eth to new\n', '    bool public tokensAreFrozen = true;\n', '\n', '    // The token being sold\n', '    S26 public token;\n', '\n', '    // Structure for holding bonuses and tokens for btc investors\n', '    // We can now deprecate rate/bonus_tokens/value without bitcoin holding mechanism - we don&#39;t need it\n', '    struct TokensHolder {\n', '    uint value; //amount of wei\n', '    uint tokens; //amount of tokens\n', '    uint bonus; //amount of bonus tokens\n', '    uint total; //total tokens\n', '    uint rate; //conversion rate for hold moment\n', '    uint change; //unused wei amount if tx reaches cap\n', '    }\n', '\n', '    //wei amount\n', '    mapping (address => uint) public investors;\n', '\n', '    struct teamTokens {\n', '    address holder;\n', '    uint freezePeriod;\n', '    uint percent;\n', '    uint divider;\n', '    uint maxTokens;\n', '    }\n', '\n', '    teamTokens[] public listTeamTokens;\n', '\n', '    // Bonus params\n', '    uint[] public bonusPatterns = [80, 60, 40, 20];\n', '\n', '    uint[] public bonusLimit = [5 * mln * multiplier, 10 * mln * multiplier, 15 * mln * multiplier, 20 * mln * multiplier];\n', '\n', '    // flag to prevent team tokens regen with external call\n', '    bool public teamTokensGenerated = false;\n', '\n', '\n', '    //=========\n', '    //Modifiers\n', '    //=========\n', '\n', '    // Active ICO\n', '    modifier ICOActive {\n', '        require(icoState == IcoState.Running);\n', '        require(now >= (startTime));\n', '        require(now <= (endTime));\n', '        _;\n', '    }\n', '\n', '    // Finished ICO\n', '    modifier ICOFinished {\n', '        require(icoState == IcoState.Finished);\n', '        _;\n', '    }\n', '\n', '    // Failed ICO - time is over \n', '    modifier ICOFailed {\n', '        require(now >= (endTime));\n', '        require(icoState == IcoState.Failed || !isSuccess);\n', '        _;\n', '    }\n', '\n', '\n', '    // Allows some methods to be used by team or robot\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyTeam() {\n', '        require(msg.sender == owner || msg.sender == _robot);\n', '        _;\n', '    }\n', '\n', '    modifier successICOState() {\n', '        require(isSuccess);\n', '        _;\n', '    }\n', '\n', '    \n', '  \n', '\n', '    //=======\n', '    // Events\n', '    //=======\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\n', '\n', '    event RunIco();\n', '\n', '    event PauseIco();\n', '\n', '    event SuccessIco();\n', '\n', '    \n', '    event ICOFails();\n', '\n', '    event updateRate(uint time, uint rate);\n', '\n', '    event debugLog(string key, uint value);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    //========\n', '    // Methods\n', '    //========\n', '\n', '    // Constructor\n', '    function S26ICO() public {\n', '        token = new S26();\n', '        //if (owner == 0x0) {//owner not set in contract\n', '        //    owner = msg.sender;\n', '        //}\n', '        //uint freezePeriod;\n', '        //uint percent;\n', '        //uint divider;\n', '        //\n', '\n', '        \n', '        // Company tokens 10%, blocked for 182 days\n', '        listTeamTokens.push(teamTokens(0xAaa1C6f83F2D6eab13aD341a2b3Ff8d8976fcE64, 182 days, 10, 1, 0));\n', '\n', '        // Company tokens 10%, blocked for 1 year\n', '        listTeamTokens.push(teamTokens(0xAAa27079007bCe64f0a5B225FB0aFec175d69ca5, 1 years, 10, 1, 0));\n', '\n', '\n', '        // Team tokens 6.667%\n', '        listTeamTokens.push(teamTokens(0xAaa315b6640d2Af971C2Ab3a5c2af1209A8C0083, 0, 32, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAAA34a3F68e079DdaEf9566c5E7b1507F1d545B3, 0, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xaAa351aD60699729CaF0cc0812477Ee73d00a611, 0, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xaAA383c35390DC0E112CA5a46f768650F5C11C29, 0, 200, 1000, 0));\n', '        listTeamTokens.push(teamTokens(0xAaa3f9dE05E5d9c5CF2D79fDF99aBb8a9bE4b403, 0, 6670, 100000, 0));\n', '        \n', '        \n', '        // Team tokens 6.667%, blocked for 1 year\n', '        listTeamTokens.push(teamTokens(0xaAa417D941a7c49d858451B423e83355d10b68C8, 1 years, 32, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAAa42b7755517Db92379D43a2C5a5161a0DBa5fe, 1 years, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAAA47837A6751Ba35B9e9C52bD156a434b6a5B6a, 1 years, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAaa485EC95febED46628FBEA1Cd6f8404378C90d, 1 years, 200, 1000, 0));\n', '        listTeamTokens.push(teamTokens(0xAaA52924D1F18d90148D45fa020DEB5F5f755E51, 1 years, 6670, 100000, 0));\n', '\n', '  \n', '        // Team tokes 6.667%, blocked for 2 years\n', '        listTeamTokens.push(teamTokens(0xAAa6e7638AF0dE4233101BE9841C8BD1890dd2e6, 2 years, 32, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAaa7fFb1e7E1f70e94bD35C61FBBd5681c06025c, 2 years, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xaaa92aab966fCC1de934aC700C4e8A322d51D561, 2 years, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAaA95183da70778a93F7088A19A1A1c7Af3Bd154, 2 years, 200, 1000, 0));\n', '        listTeamTokens.push(teamTokens(0xAaa95a9b2Bc5A35Ffc49E6A62C6b71b76B1A61a7, 2 years, 6660, 100000, 0));\n', '\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() public payable ICOActive {\n', '        require(!isReachedLimit());\n', '        TokensHolder memory tokens = calculateTokens(msg.value);\n', '        require(tokens.total > 0);\n', '        token.mint(msg.sender, tokens.total);\n', '        TokenPurchase(msg.sender, msg.sender, tokens.value, tokens.total);\n', '        if (tokens.change > 0 && tokens.change <= msg.value) {\n', '            msg.sender.transfer(tokens.change);\n', '        }\n', '        investors[msg.sender] = investors[msg.sender].add(tokens.value);\n', '        addToStat(tokens.tokens, tokens.bonus);\n', '        manageStatus();\n', '    }\n', '\n', '    function hasStarted() public constant returns (bool) {\n', '        return now >= startTime;\n', '    }\n', '\n', '    function hasFinished() public constant returns (bool) {\n', '        return now >= endTime || isReachedLimit();\n', '    }\n', '\n', '    // Calculates amount of bonus tokens\n', '    function getBonus(uint _value, uint _sold) internal constant returns (TokensHolder) {\n', '        TokensHolder memory result;\n', '        uint _bonus = 0;\n', '\n', '        result.tokens = _value;\n', '        for (uint8 i = 0; _value > 0 && i < bonusLimit.length; ++i) {\n', '            uint current_bonus_part = 0;\n', '\n', '            if (_value > 0 && _sold < bonusLimit[i]) {\n', '                uint bonus_left = bonusLimit[i] - _sold;\n', '                uint _bonusedPart = min(_value, bonus_left);\n', '                current_bonus_part = current_bonus_part.add(percent(_bonusedPart, bonusPatterns[i]));\n', '                _value = _value.sub(_bonusedPart);\n', '                _sold = _sold.add(_bonusedPart);                \n', '            }\n', '            if (current_bonus_part > 0) {\n', '                _bonus = _bonus.add(current_bonus_part);\n', '            }\n', '            \n', '        }\n', '        result.bonus = _bonus;\n', '        return result;\n', '    }\n', '\n', '\n', '\n', '    // Are we reached tokens limit?\n', '    function isReachedLimit() internal constant returns (bool) {\n', '        return tokensCap.sub(totalSupply) == 0;\n', '    }\n', '\n', '    function manageStatus() internal {\n', '        if (totalSupply >= minSuccess && !isSuccess) {\n', '            successICO();\n', '        }\n', '        bool capIsReached = (totalSupply == tokensCap);\n', '        if (capIsReached || (now >= endTime)) {\n', '            if (!isSuccess) {\n', '                failICO();\n', '            }\n', '            else {\n', '                finishICO(false);\n', '            }\n', '        }\n', '    }\n', '\n', '    function calculateForValue(uint value) public constant returns (uint, uint, uint)\n', '    {\n', '        TokensHolder memory tokens = calculateTokens(value);\n', '        return (tokens.total, tokens.tokens, tokens.bonus);\n', '    }\n', '\n', '    function calculateTokens(uint value) internal constant returns (TokensHolder)\n', '    {\n', '        require(value > 0);\n', '        require(priceInWei * minTokens <= value);\n', '\n', '        uint tokens = value.div(priceInWei);\n', '        require(tokens > 0);\n', '        uint remain = tokensCap.sub(totalSupply);\n', '        uint change = 0;\n', '        uint value_clear = 0;\n', '        if (remain <= tokens) {\n', '            tokens = remain;\n', '            change = value.sub(tokens.mul(priceInWei));\n', '            value_clear = value.sub(change);\n', '        }\n', '        else {\n', '            value_clear = value;\n', '        }\n', '\n', '        TokensHolder memory bonus = getBonus(tokens, tokensSoldTotal);\n', '\n', '        uint total = tokens + bonus.bonus;\n', '        bonus.tokens = tokens;\n', '        bonus.total = total;\n', '        bonus.change = change;\n', '        bonus.rate = priceInWei;\n', '        bonus.value = value_clear;\n', '        return bonus;\n', '\n', '    }\n', '\n', '    // Add tokens&bonus amount to counters\n', '    function addToStat(uint tokens, uint bonus) internal {\n', '        uint total = tokens + bonus;\n', '        totalSupply = totalSupply.add(total);\n', '        //tokensBought = tokensBought.add(tokens.div(multiplier));\n', '        //tokensBonus = tokensBonus.add(bonus.div(multiplier));\n', '        tokensSoldTotal = tokensSoldTotal.add(tokens);\n', '    }\n', '\n', '    // manual start ico after pause\n', '    function startIco() external onlyOwner {\n', '        require(icoState == IcoState.Paused);\n', '        icoState = IcoState.Running;\n', '        RunIco();\n', '    }\n', '\n', '    // manual pause ico\n', '    function pauseIco() external onlyOwner {\n', '        require(icoState == IcoState.Running);\n', '        icoState = IcoState.Paused;\n', '        PauseIco();\n', '    }\n', '\n', '    // auto success ico - cat withdraw ether now\n', '    function successICO() internal\n', '    {\n', '        isSuccess = true;\n', '        SuccessIco();\n', '    }\n', '\n', '\n', '    function finishICO(bool manualFinish) internal successICOState\n', '    {\n', '        if(!manualFinish) {\n', '            bool capIsReached = (totalSupply == tokensCap);\n', '            if (capIsReached && now < endTime) {\n', '                endTime = now;\n', '            }\n', '        } else {\n', '            endTime = now;\n', '        }\n', '        icoState = IcoState.Finished;\n', '        tokensAreFrozen = false;\n', '        // maybe this must be called as external one-time call\n', '        token.unblock();\n', '    }\n', '\n', '    function failICO() internal\n', '    {\n', '        icoState = IcoState.Failed;\n', '        ICOFails();\n', '    }\n', '\n', '\n', '    function refund() public ICOFailed\n', '    {\n', '        require(msg.sender != 0x0);\n', '        require(investors[msg.sender] > 0);\n', '        uint refundVal = investors[msg.sender];\n', '        investors[msg.sender] = 0;\n', '\n', '        uint balance = token.balanceOf(msg.sender);\n', '        totalSupply = totalSupply.sub(balance);\n', '        msg.sender.transfer(refundVal);\n', '\n', '    }\n', '\n', '    // Withdraw allowed only on success\n', '    function withdraw(uint value) external onlyOwner successICOState {\n', '        wallet.transfer(value);\n', '    }\n', '\n', '    // Generates team tokens after ICO finished\n', '    function generateTeamTokens() internal ICOFinished {\n', '        require(!teamTokensGenerated);\n', '        teamTokensGenerated = true;\n', '        if(tokensCap > totalSupply) {\n', '            //debugLog(&#39;before &#39;, totalSupply);\n', '            uint unsoldAmount = tokensCap.sub(totalSupply);\n', '            token.mint(unsold, unsoldAmount);\n', '            //debugLog(&#39;unsold &#39;, unsoldAmount);\n', '            totalSupply = totalSupply.add(unsoldAmount);\n', '            //debugLog(&#39;after &#39;, totalSupply);\n', '        }\n', '        uint totalSupplyTokens = totalSupply;\n', '        totalSupplyTokens = totalSupplyTokens.mul(100);\n', '        totalSupplyTokens = totalSupplyTokens.div(60);\n', '        \n', '        for (uint8 i = 0; i < listTeamTokens.length; ++i) {\n', '            uint teamTokensPart = percent(totalSupplyTokens, listTeamTokens[i].percent);\n', '\n', '            if (listTeamTokens[i].divider != 0) {\n', '                teamTokensPart = teamTokensPart.div(listTeamTokens[i].divider);\n', '            }\n', '\n', '            if (listTeamTokens[i].maxTokens != 0 && listTeamTokens[i].maxTokens < teamTokensPart) {\n', '                teamTokensPart = listTeamTokens[i].maxTokens;\n', '            }\n', '\n', '            token.mint(listTeamTokens[i].holder, teamTokensPart);\n', '\n', '            \n', '            if(listTeamTokens[i].freezePeriod != 0) {\n', '                token.freezeTokens(listTeamTokens[i].holder, endTime + listTeamTokens[i].freezePeriod);\n', '            }\n', '            addToStat(teamTokensPart, 0);\n', '\n', '\n', '        }\n', '\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '\n', '    //==========================\n', '    // Methods for bots requests\n', '    //==========================\n', '    // set/update robot address\n', '    function setRobot(address robot) public onlyOwner {\n', '        require(robot != 0x0);\n', '        _robot = robot;\n', '    }\n', '\n', '    // update token price in wei\n', '    function setRate(uint newRate) public onlyTeam {\n', '        require(newRate > 0);\n', '        //todo min rate check! 0 - for debug\n', '        priceInWei = newRate;\n', '        updateRate(now, newRate);\n', '    }\n', '\n', '    // mb deprecated\n', '    function robotRefund(address investor) public onlyTeam ICOFailed\n', '    {\n', '        require(investor != 0x0);\n', '        require(investors[investor] > 0);\n', '        uint refundVal = investors[investor];\n', '        investors[investor] = 0;\n', '\n', '        uint balance = token.balanceOf(investor);\n', '        totalSupply = totalSupply.sub(balance);\n', '        investor.transfer(refundVal);\n', '    }\n', '\n', '\n', '    function manualFinish() public onlyTeam \n', '    {\n', '        require(!hasFinished());\n', '        finishICO(true);\n', '        generateTeamTokens();\n', '    }\n', '\n', '    function autoFinishTime() public onlyTeam\n', '    {\n', '        require(hasFinished());\n', '        manageStatus();\n', '        generateTeamTokens();\n', '    }\n', '\n', '    //========\n', '    // Helpers\n', '    //========\n', '\n', '    // calculation of min value\n', '    function min(uint a, uint b) internal pure returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '\n', '    function percent(uint value, uint bonus) internal pure returns (uint) {\n', '        return (value * bonus).div(100);\n', '    }\n', '}']
['/*************************************************************************\n', ' * This contract has been merged with solidify\n', ' * https://github.com/tiesnetwork/solidify\n', ' *************************************************************************/\n', ' \n', ' pragma solidity ^0.4.18;\n', '\n', '\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/math/SafeMath.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/math/SafeMath.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/MintableToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20Basic.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./BasicToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/*************************************************************************\n', ' * import "./ERC20.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "./StandardToken.sol" : end\n', ' *************************************************************************/\n', '/*************************************************************************\n', ' * import "../ownership/Ownable.sol" : start\n', ' *************************************************************************/\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/*************************************************************************\n', ' * import "../ownership/Ownable.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '/*************************************************************************\n', ' * import "zeppelin-solidity/contracts/token/MintableToken.sol" : end\n', ' *************************************************************************/\n', '\n', '\n', 'contract S26 is MintableToken {\n', '\n', '    /* Token constants */\n', '\n', '    string public name = "SuperGidron26";\n', '\n', '    string public symbol = "S26";\n', '\n', '    uint public decimals = 6;\n', '\n', '    /* Blocks token transfers until ICO is finished.*/\n', '    bool public tokensBlocked = true;\n', '\n', '    // list of addresses with time-freezend tokens\n', '    mapping (address => uint) public teamTokensFreeze;\n', '\n', '    event debugLog(string key, uint value);\n', '\n', '\n', '\n', '\n', '    /* Allow token transfer.*/\n', '    function unblock() external onlyOwner {\n', '        tokensBlocked = false;\n', '    }\n', '\n', '    /* Override some function to add support of blocking .*/\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(!tokensBlocked);\n', '        require(allowTokenOperations(_to));\n', '        require(allowTokenOperations(msg.sender));\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(!tokensBlocked);\n', '        require(allowTokenOperations(_from));\n', '        require(allowTokenOperations(_to));\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(!tokensBlocked);\n', '        require(allowTokenOperations(_spender));\n', '        super.approve(_spender, _value);\n', '    }\n', '\n', '    // Hold team/founders tokens for defined time\n', '    function freezeTokens(address _holder, uint time) public onlyOwner {\n', '        require(_holder != 0x0);\n', '        teamTokensFreeze[_holder] = time;\n', '    }\n', '\n', '    function allowTokenOperations(address _holder) public constant returns (bool) {\n', '        return teamTokensFreeze[_holder] == 0 || now >= teamTokensFreeze[_holder];\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract S26ICO {\n', '    using SafeMath for uint;\n', '\n', '    //==========\n', '    // Variables\n', '    //==========\n', '    //States\n', '    enum IcoState {Running, Paused, Failed, Finished}\n', '\n', '    // ico successed\n', '    bool public isSuccess = false;\n', '\n', '    // contract hardcoded owner\n', '    address public owner = 0xfFFafD9849e0b678a879E92581e1eF4729C65d00;// 0x987ddcbf60a5ab0206b32ca9dde2595e182f54e1;// = 0x00a329c0648769A73afAc7F9381E08FB43dBEA72;\n', '    address public wallet = 0xdDd1BB2F9BF1EEc3A11230de23b3e69Dee7665f8;//deploy 0x4A536E9F10c19112C33DEA04BFC62216792a197D;\n', '    address public unsold = 0xffC7086F6dB8d9A1545eA643aaDf4Da96668fC60; //\n', '    // Start time\n', '    uint public constant startTime = 1529761145;\n', '    // End time\n', '    uint public endTime = startTime + 30 days;\n', '\n', '    // decimals multiplier for calculation & debug\n', '    uint public constant multiplier = 1000000;\n', '\n', '    // minimal amount of tokens for sale\n', '    uint private constant minTokens = 50;\n', '\n', '    // one million\n', '    uint public constant mln = 1000000;\n', '\n', '    // ICO max tokens for sale\n', '    uint public constant tokensCap = 99 * mln * multiplier;\n', '\n', '    //ICO success\n', '    uint public constant minSuccess = 2 * mln * multiplier;\n', '\n', '    // Amount of sold tokens\n', '    uint public totalSupply = 0;\n', '    // Amount of tokens w/o bonus\n', '    uint public tokensSoldTotal = 0;\n', '\n', '\n', '    // State of ICO - default Running\n', '    IcoState public icoState = IcoState.Running;\n', '\n', '\n', '    // @dev for debug\n', '    uint private constant rateDivider = 1;\n', '\n', '    // initial price in wei\n', '    uint public priceInWei = 3046900000 / rateDivider;\n', '\n', '\n', '    // robot address\n', '    address public _robot = 0x63b247db491D3d3E32A9629509Fb459386Aff921;// = 0x00a329c0648769A73afAc7F9381E08FB43dBEA72; //\n', '\n', '    // if ICO not finished - we must send all old contract eth to new\n', '    bool public tokensAreFrozen = true;\n', '\n', '    // The token being sold\n', '    S26 public token;\n', '\n', '    // Structure for holding bonuses and tokens for btc investors\n', "    // We can now deprecate rate/bonus_tokens/value without bitcoin holding mechanism - we don't need it\n", '    struct TokensHolder {\n', '    uint value; //amount of wei\n', '    uint tokens; //amount of tokens\n', '    uint bonus; //amount of bonus tokens\n', '    uint total; //total tokens\n', '    uint rate; //conversion rate for hold moment\n', '    uint change; //unused wei amount if tx reaches cap\n', '    }\n', '\n', '    //wei amount\n', '    mapping (address => uint) public investors;\n', '\n', '    struct teamTokens {\n', '    address holder;\n', '    uint freezePeriod;\n', '    uint percent;\n', '    uint divider;\n', '    uint maxTokens;\n', '    }\n', '\n', '    teamTokens[] public listTeamTokens;\n', '\n', '    // Bonus params\n', '    uint[] public bonusPatterns = [80, 60, 40, 20];\n', '\n', '    uint[] public bonusLimit = [5 * mln * multiplier, 10 * mln * multiplier, 15 * mln * multiplier, 20 * mln * multiplier];\n', '\n', '    // flag to prevent team tokens regen with external call\n', '    bool public teamTokensGenerated = false;\n', '\n', '\n', '    //=========\n', '    //Modifiers\n', '    //=========\n', '\n', '    // Active ICO\n', '    modifier ICOActive {\n', '        require(icoState == IcoState.Running);\n', '        require(now >= (startTime));\n', '        require(now <= (endTime));\n', '        _;\n', '    }\n', '\n', '    // Finished ICO\n', '    modifier ICOFinished {\n', '        require(icoState == IcoState.Finished);\n', '        _;\n', '    }\n', '\n', '    // Failed ICO - time is over \n', '    modifier ICOFailed {\n', '        require(now >= (endTime));\n', '        require(icoState == IcoState.Failed || !isSuccess);\n', '        _;\n', '    }\n', '\n', '\n', '    // Allows some methods to be used by team or robot\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyTeam() {\n', '        require(msg.sender == owner || msg.sender == _robot);\n', '        _;\n', '    }\n', '\n', '    modifier successICOState() {\n', '        require(isSuccess);\n', '        _;\n', '    }\n', '\n', '    \n', '  \n', '\n', '    //=======\n', '    // Events\n', '    //=======\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint value, uint amount);\n', '\n', '    event RunIco();\n', '\n', '    event PauseIco();\n', '\n', '    event SuccessIco();\n', '\n', '    \n', '    event ICOFails();\n', '\n', '    event updateRate(uint time, uint rate);\n', '\n', '    event debugLog(string key, uint value);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    //========\n', '    // Methods\n', '    //========\n', '\n', '    // Constructor\n', '    function S26ICO() public {\n', '        token = new S26();\n', '        //if (owner == 0x0) {//owner not set in contract\n', '        //    owner = msg.sender;\n', '        //}\n', '        //uint freezePeriod;\n', '        //uint percent;\n', '        //uint divider;\n', '        //\n', '\n', '        \n', '        // Company tokens 10%, blocked for 182 days\n', '        listTeamTokens.push(teamTokens(0xAaa1C6f83F2D6eab13aD341a2b3Ff8d8976fcE64, 182 days, 10, 1, 0));\n', '\n', '        // Company tokens 10%, blocked for 1 year\n', '        listTeamTokens.push(teamTokens(0xAAa27079007bCe64f0a5B225FB0aFec175d69ca5, 1 years, 10, 1, 0));\n', '\n', '\n', '        // Team tokens 6.667%\n', '        listTeamTokens.push(teamTokens(0xAaa315b6640d2Af971C2Ab3a5c2af1209A8C0083, 0, 32, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAAA34a3F68e079DdaEf9566c5E7b1507F1d545B3, 0, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xaAa351aD60699729CaF0cc0812477Ee73d00a611, 0, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xaAA383c35390DC0E112CA5a46f768650F5C11C29, 0, 200, 1000, 0));\n', '        listTeamTokens.push(teamTokens(0xAaa3f9dE05E5d9c5CF2D79fDF99aBb8a9bE4b403, 0, 6670, 100000, 0));\n', '        \n', '        \n', '        // Team tokens 6.667%, blocked for 1 year\n', '        listTeamTokens.push(teamTokens(0xaAa417D941a7c49d858451B423e83355d10b68C8, 1 years, 32, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAAa42b7755517Db92379D43a2C5a5161a0DBa5fe, 1 years, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAAA47837A6751Ba35B9e9C52bD156a434b6a5B6a, 1 years, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAaa485EC95febED46628FBEA1Cd6f8404378C90d, 1 years, 200, 1000, 0));\n', '        listTeamTokens.push(teamTokens(0xAaA52924D1F18d90148D45fa020DEB5F5f755E51, 1 years, 6670, 100000, 0));\n', '\n', '  \n', '        // Team tokes 6.667%, blocked for 2 years\n', '        listTeamTokens.push(teamTokens(0xAAa6e7638AF0dE4233101BE9841C8BD1890dd2e6, 2 years, 32, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAaa7fFb1e7E1f70e94bD35C61FBBd5681c06025c, 2 years, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xaaa92aab966fCC1de934aC700C4e8A322d51D561, 2 years, 16, 10, 0));\n', '        listTeamTokens.push(teamTokens(0xAaA95183da70778a93F7088A19A1A1c7Af3Bd154, 2 years, 200, 1000, 0));\n', '        listTeamTokens.push(teamTokens(0xAaa95a9b2Bc5A35Ffc49E6A62C6b71b76B1A61a7, 2 years, 6660, 100000, 0));\n', '\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function() public payable ICOActive {\n', '        require(!isReachedLimit());\n', '        TokensHolder memory tokens = calculateTokens(msg.value);\n', '        require(tokens.total > 0);\n', '        token.mint(msg.sender, tokens.total);\n', '        TokenPurchase(msg.sender, msg.sender, tokens.value, tokens.total);\n', '        if (tokens.change > 0 && tokens.change <= msg.value) {\n', '            msg.sender.transfer(tokens.change);\n', '        }\n', '        investors[msg.sender] = investors[msg.sender].add(tokens.value);\n', '        addToStat(tokens.tokens, tokens.bonus);\n', '        manageStatus();\n', '    }\n', '\n', '    function hasStarted() public constant returns (bool) {\n', '        return now >= startTime;\n', '    }\n', '\n', '    function hasFinished() public constant returns (bool) {\n', '        return now >= endTime || isReachedLimit();\n', '    }\n', '\n', '    // Calculates amount of bonus tokens\n', '    function getBonus(uint _value, uint _sold) internal constant returns (TokensHolder) {\n', '        TokensHolder memory result;\n', '        uint _bonus = 0;\n', '\n', '        result.tokens = _value;\n', '        for (uint8 i = 0; _value > 0 && i < bonusLimit.length; ++i) {\n', '            uint current_bonus_part = 0;\n', '\n', '            if (_value > 0 && _sold < bonusLimit[i]) {\n', '                uint bonus_left = bonusLimit[i] - _sold;\n', '                uint _bonusedPart = min(_value, bonus_left);\n', '                current_bonus_part = current_bonus_part.add(percent(_bonusedPart, bonusPatterns[i]));\n', '                _value = _value.sub(_bonusedPart);\n', '                _sold = _sold.add(_bonusedPart);                \n', '            }\n', '            if (current_bonus_part > 0) {\n', '                _bonus = _bonus.add(current_bonus_part);\n', '            }\n', '            \n', '        }\n', '        result.bonus = _bonus;\n', '        return result;\n', '    }\n', '\n', '\n', '\n', '    // Are we reached tokens limit?\n', '    function isReachedLimit() internal constant returns (bool) {\n', '        return tokensCap.sub(totalSupply) == 0;\n', '    }\n', '\n', '    function manageStatus() internal {\n', '        if (totalSupply >= minSuccess && !isSuccess) {\n', '            successICO();\n', '        }\n', '        bool capIsReached = (totalSupply == tokensCap);\n', '        if (capIsReached || (now >= endTime)) {\n', '            if (!isSuccess) {\n', '                failICO();\n', '            }\n', '            else {\n', '                finishICO(false);\n', '            }\n', '        }\n', '    }\n', '\n', '    function calculateForValue(uint value) public constant returns (uint, uint, uint)\n', '    {\n', '        TokensHolder memory tokens = calculateTokens(value);\n', '        return (tokens.total, tokens.tokens, tokens.bonus);\n', '    }\n', '\n', '    function calculateTokens(uint value) internal constant returns (TokensHolder)\n', '    {\n', '        require(value > 0);\n', '        require(priceInWei * minTokens <= value);\n', '\n', '        uint tokens = value.div(priceInWei);\n', '        require(tokens > 0);\n', '        uint remain = tokensCap.sub(totalSupply);\n', '        uint change = 0;\n', '        uint value_clear = 0;\n', '        if (remain <= tokens) {\n', '            tokens = remain;\n', '            change = value.sub(tokens.mul(priceInWei));\n', '            value_clear = value.sub(change);\n', '        }\n', '        else {\n', '            value_clear = value;\n', '        }\n', '\n', '        TokensHolder memory bonus = getBonus(tokens, tokensSoldTotal);\n', '\n', '        uint total = tokens + bonus.bonus;\n', '        bonus.tokens = tokens;\n', '        bonus.total = total;\n', '        bonus.change = change;\n', '        bonus.rate = priceInWei;\n', '        bonus.value = value_clear;\n', '        return bonus;\n', '\n', '    }\n', '\n', '    // Add tokens&bonus amount to counters\n', '    function addToStat(uint tokens, uint bonus) internal {\n', '        uint total = tokens + bonus;\n', '        totalSupply = totalSupply.add(total);\n', '        //tokensBought = tokensBought.add(tokens.div(multiplier));\n', '        //tokensBonus = tokensBonus.add(bonus.div(multiplier));\n', '        tokensSoldTotal = tokensSoldTotal.add(tokens);\n', '    }\n', '\n', '    // manual start ico after pause\n', '    function startIco() external onlyOwner {\n', '        require(icoState == IcoState.Paused);\n', '        icoState = IcoState.Running;\n', '        RunIco();\n', '    }\n', '\n', '    // manual pause ico\n', '    function pauseIco() external onlyOwner {\n', '        require(icoState == IcoState.Running);\n', '        icoState = IcoState.Paused;\n', '        PauseIco();\n', '    }\n', '\n', '    // auto success ico - cat withdraw ether now\n', '    function successICO() internal\n', '    {\n', '        isSuccess = true;\n', '        SuccessIco();\n', '    }\n', '\n', '\n', '    function finishICO(bool manualFinish) internal successICOState\n', '    {\n', '        if(!manualFinish) {\n', '            bool capIsReached = (totalSupply == tokensCap);\n', '            if (capIsReached && now < endTime) {\n', '                endTime = now;\n', '            }\n', '        } else {\n', '            endTime = now;\n', '        }\n', '        icoState = IcoState.Finished;\n', '        tokensAreFrozen = false;\n', '        // maybe this must be called as external one-time call\n', '        token.unblock();\n', '    }\n', '\n', '    function failICO() internal\n', '    {\n', '        icoState = IcoState.Failed;\n', '        ICOFails();\n', '    }\n', '\n', '\n', '    function refund() public ICOFailed\n', '    {\n', '        require(msg.sender != 0x0);\n', '        require(investors[msg.sender] > 0);\n', '        uint refundVal = investors[msg.sender];\n', '        investors[msg.sender] = 0;\n', '\n', '        uint balance = token.balanceOf(msg.sender);\n', '        totalSupply = totalSupply.sub(balance);\n', '        msg.sender.transfer(refundVal);\n', '\n', '    }\n', '\n', '    // Withdraw allowed only on success\n', '    function withdraw(uint value) external onlyOwner successICOState {\n', '        wallet.transfer(value);\n', '    }\n', '\n', '    // Generates team tokens after ICO finished\n', '    function generateTeamTokens() internal ICOFinished {\n', '        require(!teamTokensGenerated);\n', '        teamTokensGenerated = true;\n', '        if(tokensCap > totalSupply) {\n', "            //debugLog('before ', totalSupply);\n", '            uint unsoldAmount = tokensCap.sub(totalSupply);\n', '            token.mint(unsold, unsoldAmount);\n', "            //debugLog('unsold ', unsoldAmount);\n", '            totalSupply = totalSupply.add(unsoldAmount);\n', "            //debugLog('after ', totalSupply);\n", '        }\n', '        uint totalSupplyTokens = totalSupply;\n', '        totalSupplyTokens = totalSupplyTokens.mul(100);\n', '        totalSupplyTokens = totalSupplyTokens.div(60);\n', '        \n', '        for (uint8 i = 0; i < listTeamTokens.length; ++i) {\n', '            uint teamTokensPart = percent(totalSupplyTokens, listTeamTokens[i].percent);\n', '\n', '            if (listTeamTokens[i].divider != 0) {\n', '                teamTokensPart = teamTokensPart.div(listTeamTokens[i].divider);\n', '            }\n', '\n', '            if (listTeamTokens[i].maxTokens != 0 && listTeamTokens[i].maxTokens < teamTokensPart) {\n', '                teamTokensPart = listTeamTokens[i].maxTokens;\n', '            }\n', '\n', '            token.mint(listTeamTokens[i].holder, teamTokensPart);\n', '\n', '            \n', '            if(listTeamTokens[i].freezePeriod != 0) {\n', '                token.freezeTokens(listTeamTokens[i].holder, endTime + listTeamTokens[i].freezePeriod);\n', '            }\n', '            addToStat(teamTokensPart, 0);\n', '\n', '\n', '        }\n', '\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '\n', '    //==========================\n', '    // Methods for bots requests\n', '    //==========================\n', '    // set/update robot address\n', '    function setRobot(address robot) public onlyOwner {\n', '        require(robot != 0x0);\n', '        _robot = robot;\n', '    }\n', '\n', '    // update token price in wei\n', '    function setRate(uint newRate) public onlyTeam {\n', '        require(newRate > 0);\n', '        //todo min rate check! 0 - for debug\n', '        priceInWei = newRate;\n', '        updateRate(now, newRate);\n', '    }\n', '\n', '    // mb deprecated\n', '    function robotRefund(address investor) public onlyTeam ICOFailed\n', '    {\n', '        require(investor != 0x0);\n', '        require(investors[investor] > 0);\n', '        uint refundVal = investors[investor];\n', '        investors[investor] = 0;\n', '\n', '        uint balance = token.balanceOf(investor);\n', '        totalSupply = totalSupply.sub(balance);\n', '        investor.transfer(refundVal);\n', '    }\n', '\n', '\n', '    function manualFinish() public onlyTeam \n', '    {\n', '        require(!hasFinished());\n', '        finishICO(true);\n', '        generateTeamTokens();\n', '    }\n', '\n', '    function autoFinishTime() public onlyTeam\n', '    {\n', '        require(hasFinished());\n', '        manageStatus();\n', '        generateTeamTokens();\n', '    }\n', '\n', '    //========\n', '    // Helpers\n', '    //========\n', '\n', '    // calculation of min value\n', '    function min(uint a, uint b) internal pure returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '\n', '    function percent(uint value, uint bonus) internal pure returns (uint) {\n', '        return (value * bonus).div(100);\n', '    }\n', '}']
