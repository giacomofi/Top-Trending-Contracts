['pragma solidity 0.4.21;\n', '/**\n', '* @title ICO CONTRACT\n', '* @dev ERC-20 Token Standard Compliant\n', '* @notice Website: Ze.cash\n', '* @author Fares A. Akel C. <span class="__cf_email__" data-cfemail="2a4c044b445e45444345044b414f466a4d474b434604494547">[email&#160;protected]</span>\n', '*/\n', '\n', '/**\n', '* @title SafeMath by OpenZeppelin\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', 'contract FiatContract {\n', ' \n', '  function USD(uint _id) public constant returns (uint256);\n', '\n', '}\n', '\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '}\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    function admined() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != address(0));\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '\n', '}\n', '\n', 'contract ICO is admined{\n', '    using SafeMath for uint256;\n', '    //This ico have 2 stages\n', '    enum State {\n', '        Sale,\n', '        Successful\n', '    }\n', '    //public variables\n', '    State public state = State.Sale; //Set initial stage\n', '    uint256 public startTime = now; //block-time when it was deployed\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public completedAt; //Time stamp when the ico finish\n', '    token public tokenReward; //Address of the valit token used as reward\n', '    address public creator; //Address of the contract deployer\n', '    string public campaignUrl; //Web site of the campaing\n', '    string public version = &#39;2&#39;;\n', '\n', '    FiatContract price = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\n', '    //FiatContract price = FiatContract(0x2CDe56E5c8235D6360CCbb0c57Ce248Ca9C80909); // TESTNET ADDRESS (ROPSTEN)\n', '\n', '    uint256 remanent;\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(\n', '        address _creator,\n', '        string _url);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    /**\n', '    * @notice ICO constructor\n', '    * @param _campaignUrl is the ICO _url\n', '    * @param _addressOfTokenUsedAsReward is the token totalDistributed\n', '    */\n', '    function ICO (string _campaignUrl, token _addressOfTokenUsedAsReward) public {\n', '        creator = msg.sender;\n', '        campaignUrl = _campaignUrl;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '\n', '        emit LogFunderInitialized(\n', '            creator,\n', '            campaignUrl\n', '            );\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '\n', '        uint256 tokenBought; //Variable to store amount of tokens bought\n', '        uint256 tokenPrice = price.USD(0); //1 cent value in wei\n', '\n', '        tokenPrice = tokenPrice.div(10 ** 7);\n', '        totalRaised = totalRaised.add(msg.value); //Save the total eth totalRaised (in wei)\n', '\n', '        tokenBought = msg.value.div(tokenPrice);\n', '        tokenBought = tokenBought.mul(10 **10); //0.10$ per token\n', '        \n', '        totalDistributed = totalDistributed.add(tokenBought);\n', '        \n', '        tokenReward.transfer(msg.sender,tokenBought);\n', '        \n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit LogContributorsPayout(msg.sender,tokenBought);\n', '    }\n', '\n', '    function finishFunding() onlyAdmin public {\n', '\n', '        state = State.Successful; //ico becomes Successful\n', '        completedAt = now; //ICO is complete\n', '        emit LogFundingSuccessful(totalRaised); //we log the finish\n', '        claimTokens();\n', '        claimEth();\n', '            \n', '    }\n', '\n', '    function claimTokens() onlyAdmin public{\n', '\n', '        remanent = tokenReward.balanceOf(this);\n', '        tokenReward.transfer(msg.sender,remanent);\n', '        \n', '        emit LogContributorsPayout(msg.sender,remanent);\n', '    }\n', '\n', '    function claimEth() onlyAdmin public { //When finished eth are transfered to creator\n', '        \n', '        require(msg.sender.send(address(this).balance));\n', '\n', '        emit LogBeneficiaryPaid(msg.sender);\n', '        \n', '    }\n', '\n', '    /**\n', '    * @dev This is an especial function to make massive tokens assignments\n', '    * @param _data array of addresses to transfer to\n', '    * @param _amount array of amounts to tranfer to each address\n', '    */\n', '    function batch(address[] _data,uint256[] _amount) onlyAdmin public { //It takes array of addresses and array of amount\n', '        require(_data.length == _amount.length);//same array sizes\n', '        for (uint i=0; i<_data.length; i++) { //It moves over the array\n', '            tokenReward.transfer(_data[i],_amount[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Function to handle eth transfers\n', '    * @dev BEWARE: if a call to this functions doesn&#39;t have\n', '    * enought gas, transaction could not be finished\n', '    */\n', '\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '}']
['pragma solidity 0.4.21;\n', '/**\n', '* @title ICO CONTRACT\n', '* @dev ERC-20 Token Standard Compliant\n', '* @notice Website: Ze.cash\n', '* @author Fares A. Akel C. f.antonio.akel@gmail.com\n', '*/\n', '\n', '/**\n', '* @title SafeMath by OpenZeppelin\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '    }\n', '\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '}\n', '\n', 'contract FiatContract {\n', ' \n', '  function USD(uint _id) public constant returns (uint256);\n', '\n', '}\n', '\n', 'contract token {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '}\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    function admined() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        emit Admined(admin);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != address(0));\n', '        admin = _newAdmin;\n', '        emit TransferAdminship(admin);\n', '    }\n', '\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '\n', '}\n', '\n', 'contract ICO is admined{\n', '    using SafeMath for uint256;\n', '    //This ico have 2 stages\n', '    enum State {\n', '        Sale,\n', '        Successful\n', '    }\n', '    //public variables\n', '    State public state = State.Sale; //Set initial stage\n', '    uint256 public startTime = now; //block-time when it was deployed\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public completedAt; //Time stamp when the ico finish\n', '    token public tokenReward; //Address of the valit token used as reward\n', '    address public creator; //Address of the contract deployer\n', '    string public campaignUrl; //Web site of the campaing\n', "    string public version = '2';\n", '\n', '    FiatContract price = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591); // MAINNET ADDRESS\n', '    //FiatContract price = FiatContract(0x2CDe56E5c8235D6360CCbb0c57Ce248Ca9C80909); // TESTNET ADDRESS (ROPSTEN)\n', '\n', '    uint256 remanent;\n', '\n', '    //events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(\n', '        address _creator,\n', '        string _url);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '\n', '    modifier notFinished() {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    /**\n', '    * @notice ICO constructor\n', '    * @param _campaignUrl is the ICO _url\n', '    * @param _addressOfTokenUsedAsReward is the token totalDistributed\n', '    */\n', '    function ICO (string _campaignUrl, token _addressOfTokenUsedAsReward) public {\n', '        creator = msg.sender;\n', '        campaignUrl = _campaignUrl;\n', '        tokenReward = token(_addressOfTokenUsedAsReward);\n', '\n', '        emit LogFunderInitialized(\n', '            creator,\n', '            campaignUrl\n', '            );\n', '    }\n', '\n', '    /**\n', '    * @notice contribution handler\n', '    */\n', '    function contribute() public notFinished payable {\n', '\n', '        uint256 tokenBought; //Variable to store amount of tokens bought\n', '        uint256 tokenPrice = price.USD(0); //1 cent value in wei\n', '\n', '        tokenPrice = tokenPrice.div(10 ** 7);\n', '        totalRaised = totalRaised.add(msg.value); //Save the total eth totalRaised (in wei)\n', '\n', '        tokenBought = msg.value.div(tokenPrice);\n', '        tokenBought = tokenBought.mul(10 **10); //0.10$ per token\n', '        \n', '        totalDistributed = totalDistributed.add(tokenBought);\n', '        \n', '        tokenReward.transfer(msg.sender,tokenBought);\n', '        \n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised);\n', '        emit LogContributorsPayout(msg.sender,tokenBought);\n', '    }\n', '\n', '    function finishFunding() onlyAdmin public {\n', '\n', '        state = State.Successful; //ico becomes Successful\n', '        completedAt = now; //ICO is complete\n', '        emit LogFundingSuccessful(totalRaised); //we log the finish\n', '        claimTokens();\n', '        claimEth();\n', '            \n', '    }\n', '\n', '    function claimTokens() onlyAdmin public{\n', '\n', '        remanent = tokenReward.balanceOf(this);\n', '        tokenReward.transfer(msg.sender,remanent);\n', '        \n', '        emit LogContributorsPayout(msg.sender,remanent);\n', '    }\n', '\n', '    function claimEth() onlyAdmin public { //When finished eth are transfered to creator\n', '        \n', '        require(msg.sender.send(address(this).balance));\n', '\n', '        emit LogBeneficiaryPaid(msg.sender);\n', '        \n', '    }\n', '\n', '    /**\n', '    * @dev This is an especial function to make massive tokens assignments\n', '    * @param _data array of addresses to transfer to\n', '    * @param _amount array of amounts to tranfer to each address\n', '    */\n', '    function batch(address[] _data,uint256[] _amount) onlyAdmin public { //It takes array of addresses and array of amount\n', '        require(_data.length == _amount.length);//same array sizes\n', '        for (uint i=0; i<_data.length; i++) { //It moves over the array\n', '            tokenReward.transfer(_data[i],_amount[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice Function to handle eth transfers\n', "    * @dev BEWARE: if a call to this functions doesn't have\n", '    * enought gas, transaction could not be finished\n', '    */\n', '\n', '    function () public payable {\n', '        contribute();\n', '    }\n', '}']
