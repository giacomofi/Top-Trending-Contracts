['pragma solidity 0.4.23;\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conform\n', ' * the base architecture for crowdsales. They are *not* intended to be modified / overriden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', ' * the methods to add functionality. Consider using &#39;super&#39; where appropiate to concatenate\n', ' * behavior.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  function Crowdsale(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(\n', '      msg.sender,\n', '      _beneficiary,\n', '      weiAmount,\n', '      tokens\n', '    );\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/PausableCrowdsale.sol\n', '\n', '/**\n', ' * @title PausableCrowdsale\n', ' * @dev Extension of Crowdsale contract that can be paused and unpaused by owner\n', ' */\n', 'contract PausableCrowdsale is Crowdsale, Pausable {\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal whenNotPaused {\n', '    return super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '}\n', '\n', '// File: contracts/interfaces/IDAVToken.sol\n', '\n', 'contract IDAVToken is ERC20 {\n', '\n', '  function name() public view returns (string) {}\n', '  function symbol() public view returns (string) {}\n', '  function decimals() public view returns (uint8) {}\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool success);\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success);\n', '\n', '  function owner() public view returns (address) {}\n', '  function transferOwnership(address newOwner) public;\n', '\n', '  function burn(uint256 _value) public;\n', '\n', '  function pauseCutoffTime() public view returns (uint256) {}\n', '  function paused() public view returns (bool) {}\n', '  function pause() public;\n', '  function unpause() public;\n', '  function setPauseCutoffTime(uint256 _pauseCutoffTime) public;\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/DAVCrowdsale.sol\n', '\n', '/**\n', ' * @title DAVCrowdsale\n', ' * @dev DAV Crowdsale contract\n', ' */\n', 'contract DAVCrowdsale is PausableCrowdsale, FinalizableCrowdsale {\n', '\n', '  // Opening time for Whitelist B\n', '  uint256 public openingTimeB;\n', '  // Sum of contributions in Wei, per beneficiary\n', '  mapping(address => uint256) public contributions;\n', '  // List of beneficiaries whitelisted in group A\n', '  mapping(address => bool) public whitelistA;\n', '  // List of beneficiaries whitelisted in group B\n', '  mapping(address => bool) public whitelistB;\n', '  // Maximum number of Wei that can be raised\n', '  uint256 public weiCap;\n', '  // Maximum number of Vincis that can be sold in Crowdsale\n', '  uint256 public vinciCap;\n', '  // Minimal contribution amount in Wei per transaction\n', '  uint256 public minimalContribution;\n', '  // Maximal total contribution amount in Wei per beneficiary\n', '  uint256 public maximalIndividualContribution;\n', '  // Maximal acceptable gas price\n', '  uint256 public gasPriceLimit = 50000000000 wei;\n', '  // Wallet to transfer foundation tokens to\n', '  address public tokenWallet;\n', '  // Wallet to transfer locked tokens to (e.g., presale buyers)\n', '  address public lockedTokensWallet;\n', '  // DAV Token\n', '  IDAVToken public davToken;\n', '  // Amount of Vincis sold\n', '  uint256 public vinciSold;\n', '  // Address of account that can manage the whitelist\n', '  address public whitelistManager;\n', '\n', '  constructor(uint256 _rate, address _wallet, address _tokenWallet, address _lockedTokensWallet, IDAVToken _token, uint256 _weiCap, uint256 _vinciCap, uint256 _minimalContribution, uint256 _maximalIndividualContribution, uint256 _openingTime, uint256 _openingTimeB, uint256 _closingTime) public\n', '    Crowdsale(_rate, _wallet, _token)\n', '    TimedCrowdsale(_openingTime, _closingTime)\n', '  {\n', '    require(_openingTimeB >= _openingTime);\n', '    require(_openingTimeB <= _closingTime);\n', '    require(_weiCap > 0);\n', '    require(_vinciCap > 0);\n', '    require(_minimalContribution > 0);\n', '    require(_maximalIndividualContribution > 0);\n', '    require(_minimalContribution <= _maximalIndividualContribution);\n', '    require(_tokenWallet != address(0));\n', '    require(_lockedTokensWallet != address(0));\n', '    weiCap = _weiCap;\n', '    vinciCap = _vinciCap;\n', '    minimalContribution = _minimalContribution;\n', '    maximalIndividualContribution = _maximalIndividualContribution;\n', '    openingTimeB = _openingTimeB;\n', '    tokenWallet = _tokenWallet;\n', '    lockedTokensWallet= _lockedTokensWallet;\n', '    davToken = _token;\n', '    whitelistManager = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only if user is in whitelist A, or in whitelist B and openingTimeB has passed\n', '   */\n', '  modifier onlyWhitelisted(address _beneficiary) {\n', '    require(whitelistA[_beneficiary] || (whitelistB[_beneficiary] && block.timestamp >= openingTimeB));\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the whitelist manager\n', '   */\n', '  modifier onlyWhitelistManager() {\n', '    require(msg.sender == whitelistManager);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the whitelist manager\n', '   *\n', '   * @param _whitelistManager Address of new whitelist manager\n', '   */\n', '  function setWhitelistManager(address _whitelistManager) external onlyOwner {\n', '    require(_whitelistManager != address(0));\n', '    whitelistManager= _whitelistManager;\n', '  }\n', '\n', '  /**\n', '   * @dev Change the gas price limit\n', '   *\n', '   * @param _gasPriceLimit New gas price limit\n', '   */\n', '  function setGasPriceLimit(uint256 _gasPriceLimit) external onlyOwner {\n', '    gasPriceLimit = _gasPriceLimit;\n', '  }\n', '\n', '  /**\n', '   * Add a group of users to whitelist A\n', '   *\n', '   * @param _beneficiaries List of addresses to be whitelisted\n', '   */\n', '  function addUsersWhitelistA(address[] _beneficiaries) external onlyWhitelistManager {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelistA[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Add a group of users to whitelist B\n', '   *\n', '   * @param _beneficiaries List of addresses to be whitelisted\n', '   */\n', '  function addUsersWhitelistB(address[] _beneficiaries) external onlyWhitelistManager {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelistB[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Remove a group of users from whitelist A\n', '   *\n', '   * @param _beneficiaries List of addresses to be removed from whitelist\n', '   */\n', '  function removeUsersWhitelistA(address[] _beneficiaries) external onlyWhitelistManager {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelistA[_beneficiaries[i]] = false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Remove a group of users from whitelist B\n', '   *\n', '   * @param _beneficiaries List of addresses to be removed from whitelist\n', '   */\n', '  function removeUsersWhitelistB(address[] _beneficiaries) external onlyWhitelistManager {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelistB[_beneficiaries[i]] = false;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Allow adjustment of the closing time\n', '   *\n', '   * @param _closingTime Time to close the sale. If in the past will set to the present\n', '   */\n', '  function closeEarly(uint256 _closingTime) external onlyOwner onlyWhileOpen {\n', '    // Make sure the new closing time isn&#39;t after the old closing time\n', '    require(_closingTime <= closingTime);\n', '    // solium-disable-next-line security/no-block-members\n', '    if (_closingTime < block.timestamp) {\n', '      // If closing time is in the past, set closing time to right now\n', '      closingTime = block.timestamp;\n', '    } else {\n', '      // Update the closing time\n', '      closingTime = _closingTime;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Record a transaction that happened during the presale and transfer tokens to locked tokens wallet\n', '   *\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   * @param _vinciAmount Amount of Vincis sold\n', '   */\n', '  function recordSale(uint256 _weiAmount, uint256 _vinciAmount) external onlyOwner {\n', '    // Verify that the amount won&#39;t put us over the wei cap\n', '    require(weiRaised.add(_weiAmount) <= weiCap);\n', '    // Verify that the amount won&#39;t put us over the vinci cap\n', '    require(vinciSold.add(_vinciAmount) <= vinciCap);\n', '    // Verify Crowdsale hasn&#39;t been finalized yet\n', '    require(!isFinalized);\n', '    // Update crowdsale totals\n', '    weiRaised = weiRaised.add(_weiAmount);\n', '    vinciSold = vinciSold.add(_vinciAmount);\n', '    // Transfer tokens\n', '    token.transfer(lockedTokensWallet, _vinciAmount);\n', '  }\n', '\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhitelisted(_beneficiary) {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '    // Verify that the amount won&#39;t put us over the wei cap\n', '    require(weiRaised.add(_weiAmount) <= weiCap);\n', '    // Verify that the amount won&#39;t put us over the vinci cap\n', '    require(vinciSold.add(_weiAmount.mul(rate)) <= vinciCap);\n', '    // Verify amount is larger than or equal to minimal contribution\n', '    require(_weiAmount >= minimalContribution);\n', '    // Verify that the gas price is lower than 50 gwei\n', '    require(tx.gasprice <= gasPriceLimit);\n', '    // Verify that user hasn&#39;t contributed more than the individual hard cap\n', '    require(contributions[_beneficiary].add(_weiAmount) <= maximalIndividualContribution);\n', '  }\n', '\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    super._updatePurchasingState(_beneficiary, _weiAmount);\n', '    // Update user contribution total\n', '    contributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount);\n', '    // Update total Vincis sold\n', '    vinciSold = vinciSold.add(_weiAmount.mul(rate));\n', '  }\n', '\n', '  function finalization() internal {\n', '    super.finalization();\n', '    // transfer tokens to foundation\n', '    uint256 foundationTokens = weiRaised.div(2).add(weiRaised);\n', '    foundationTokens = foundationTokens.mul(rate);\n', '    uint256 crowdsaleBalance = davToken.balanceOf(this);\n', '    if (crowdsaleBalance < foundationTokens) {\n', '      foundationTokens = crowdsaleBalance;\n', '    }\n', '    davToken.transfer(tokenWallet, foundationTokens);\n', '    // Burn off remaining tokens\n', '    crowdsaleBalance = davToken.balanceOf(this);\n', '    davToken.burn(crowdsaleBalance);\n', '    // Set token&#39;s pause cutoff time to 3 weeks from closing time\n', '    davToken.setPauseCutoffTime(closingTime.add(1814400));\n', '    // transfer token Ownership back to original owner\n', '    davToken.transferOwnership(owner);\n', '  }\n', '\n', '}']