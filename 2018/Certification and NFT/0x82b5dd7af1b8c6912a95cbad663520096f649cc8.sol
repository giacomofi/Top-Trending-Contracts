['pragma solidity 0.4.24;\n', '\n', '// File: contracts/commons/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/flavours/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions". It has two-stage ownership transfer.\n', ' */\n', 'contract Ownable {\n', '\n', '    address public owner;\n', '    address public pendingOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyPendingOwner() {\n', '        require(msg.sender == pendingOwner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to prepare transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        pendingOwner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the pendingOwner address to finalize the transfer.\n', '     */\n', '    function claimOwnership() public onlyPendingOwner {\n', '        emit OwnershipTransferred(owner, pendingOwner);\n', '        owner = pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/flavours/Whitelisted.sol\n', '\n', 'contract Whitelisted is Ownable {\n', '\n', '    /// @dev True if whitelist enabled\n', '    bool public whitelistEnabled = true;\n', '\n', '    /// @dev ICO whitelist\n', '    mapping(address => bool) public whitelist;\n', '\n', '    event ICOWhitelisted(address indexed addr);\n', '    event ICOBlacklisted(address indexed addr);\n', '\n', '    modifier onlyWhitelisted {\n', '        require(!whitelistEnabled || whitelist[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Add address to ICO whitelist\n', '     * @param address_ Investor address\n', '     */\n', '    function whitelist(address address_) external onlyOwner {\n', '        whitelist[address_] = true;\n', '        emit ICOWhitelisted(address_);\n', '    }\n', '\n', '    /**\n', '     * Remove address from ICO whitelist\n', '     * @param address_ Investor address\n', '     */\n', '    function blacklist(address address_) external onlyOwner {\n', '        delete whitelist[address_];\n', '        emit ICOBlacklisted(address_);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if given address in ICO whitelist\n', '     */\n', '    function whitelisted(address address_) public view returns (bool) {\n', '        if (whitelistEnabled) {\n', '            return whitelist[address_];\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Enable whitelisting\n', '     */\n', '    function enableWhitelist() public onlyOwner {\n', '        whitelistEnabled = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Disable whitelisting\n', '     */\n', '    function disableWhitelist() public onlyOwner {\n', '        whitelistEnabled = false;\n', '    }\n', '}\n', '\n', '// File: contracts/flavours/Lockable.sol\n', '\n', '/**\n', ' * @title Lockable\n', ' * @dev Base contract which allows children to\n', ' *      implement main operations locking mechanism.\n', ' */\n', 'contract Lockable is Ownable {\n', '    event Lock();\n', '    event Unlock();\n', '\n', '    bool public locked = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable\n', '    *       only when the contract is not locked.\n', '     */\n', '    modifier whenNotLocked() {\n', '        require(!locked);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable\n', '     *      only when the contract is locked.\n', '     */\n', '    modifier whenLocked() {\n', '        require(locked);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner to locke, triggers locked state\n', '     */\n', '    function lock() public onlyOwner whenNotLocked {\n', '        locked = true;\n', '        emit Lock();\n', '    }\n', '\n', '    /**\n', '     * @dev called by the owner\n', '     *      to unlock, returns to unlocked state\n', '     */\n', '    function unlock() public onlyOwner whenLocked {\n', '        locked = false;\n', '        emit Unlock();\n', '    }\n', '}\n', '\n', '// File: contracts/base/BaseFixedERC20Token.sol\n', '\n', 'contract BaseFixedERC20Token is Lockable {\n', '    using SafeMath for uint;\n', '\n', '    /// @dev ERC20 Total supply\n', '    uint public totalSupply;\n', '\n', '    mapping(address => uint) public balances;\n', '\n', '    mapping(address => mapping(address => uint)) private allowed;\n', '\n', '    /// @dev Fired if token is transferred according to ERC20 spec\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    /// @dev Fired if token withdrawal is approved according to ERC20 spec\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '\n', '    /**\n', '     * @dev Gets the balance of the specified address\n', '     * @param owner_ The address to query the the balance of\n', '     * @return An uint representing the amount owned by the passed address\n', '     */\n', '    function balanceOf(address owner_) public view returns (uint balance) {\n', '        return balances[owner_];\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer token for a specified address\n', '     * @param to_ The address to transfer to.\n', '     * @param value_ The amount to be transferred.\n', '     */\n', '    function transfer(address to_, uint value_) public whenNotLocked returns (bool) {\n', '        require(to_ != address(0) && value_ <= balances[msg.sender]);\n', '        // SafeMath.sub will throw an exception if there is not enough balance\n', '        balances[msg.sender] = balances[msg.sender].sub(value_);\n', '        balances[to_] = balances[to_].add(value_);\n', '        emit Transfer(msg.sender, to_, value_);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param from_ address The address which you want to send tokens from\n', '     * @param to_ address The address which you want to transfer to\n', '     * @param value_ uint the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address from_, address to_, uint value_) public whenNotLocked returns (bool) {\n', '        require(to_ != address(0) && value_ <= balances[from_] && value_ <= allowed[from_][msg.sender]);\n', '        balances[from_] = balances[from_].sub(value_);\n', '        balances[to_] = balances[to_].add(value_);\n', '        allowed[from_][msg.sender] = allowed[from_][msg.sender].sub(value_);\n', '        emit Transfer(from_, to_, value_);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering\n', '     *\n', '     * To change the approve amount you first have to reduce the addresses\n', '     * allowance to zero by calling `approve(spender_, 0)` if it is not\n', '     * already 0 to mitigate the race condition described in:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * @param spender_ The address which will spend the funds.\n', '     * @param value_ The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender_, uint value_) public whenNotLocked returns (bool) {\n', '        if (value_ != 0 && allowed[msg.sender][spender_] != 0) {\n', '            revert();\n', '        }\n', '        allowed[msg.sender][spender_] = value_;\n', '        emit Approval(msg.sender, spender_, value_);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender\n', '     * @param owner_ address The address which owns the funds\n', '     * @param spender_ address The address which will spend the funds\n', '     * @return A uint specifying the amount of tokens still available for the spender\n', '     */\n', '    function allowance(address owner_, address spender_) public view returns (uint) {\n', '        return allowed[owner_][spender_];\n', '    }\n', '}\n', '\n', '// File: contracts/base/BaseICOToken.sol\n', '\n', '/**\n', ' * @dev Not mintable, ERC20 compliant token, distributed by ICO.\n', ' */\n', 'contract BaseICOToken is BaseFixedERC20Token {\n', '\n', '    /// @dev Available supply of tokens\n', '    uint public availableSupply;\n', '\n', '    /// @dev ICO smart contract allowed to distribute public funds for this\n', '    address public ico;\n', '\n', '    /// @dev Fired if investment for `amount` of tokens performed by `to` address\n', '    event ICOTokensInvested(address indexed to, uint amount);\n', '\n', '    /// @dev ICO contract changed for this token\n', '    event ICOChanged(address indexed icoContract);\n', '\n', '    modifier onlyICO() {\n', '        require(msg.sender == ico);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Not mintable, ERC20 compliant token, distributed by ICO.\n', '     * @param totalSupply_ Total tokens supply.\n', '     */\n', '    constructor(uint totalSupply_) public {\n', '        locked = true;\n', '        totalSupply = totalSupply_;\n', '        availableSupply = totalSupply_;\n', '    }\n', '\n', '    /**\n', '     * @dev Set address of ICO smart-contract which controls token\n', '     * initial token distribution.\n', '     * @param ico_ ICO contract address.\n', '     */\n', '    function changeICO(address ico_) public onlyOwner {\n', '        ico = ico_;\n', '        emit ICOChanged(ico);\n', '    }\n', '\n', '    /**\n', '     * @dev Assign `amountWei_` of wei converted into tokens to investor identified by `to_` address.\n', '     * @param to_ Investor address.\n', '     * @param amountWei_ Number of wei invested\n', '     * @param ethTokenExchangeRatio_ Number of tokens in 1Eth\n', '     * @return Amount of invested tokens\n', '     */\n', '    function icoInvestmentWei(address to_, uint amountWei_, uint ethTokenExchangeRatio_) public returns (uint);\n', '\n', '    function isValidICOInvestment(address to_, uint amount_) internal view returns (bool) {\n', '        return to_ != address(0) && amount_ <= availableSupply;\n', '    }\n', '}\n', '\n', '// File: contracts/base/BaseICO.sol\n', '\n', '/**\n', ' * @dev Base abstract smart contract for any ICO\n', ' */\n', 'contract BaseICO is Ownable, Whitelisted {\n', '\n', '    /// @dev ICO state\n', '    enum State {\n', '\n', '        // ICO is not active and not started\n', '        Inactive,\n', '\n', '        // ICO is active, tokens can be distributed among investors.\n', '        // ICO parameters (end date, hard/low caps) cannot be changed.\n', '        Active,\n', '\n', '        // ICO is suspended, tokens cannot be distributed among investors.\n', '        // ICO can be resumed to `Active state`.\n', '        // ICO parameters (end date, hard/low caps) may changed.\n', '        Suspended,\n', '\n', '        // ICO is terminated by owner, ICO cannot be resumed.\n', '        Terminated,\n', '\n', '        // ICO goals are not reached,\n', '        // ICO terminated and cannot be resumed.\n', '        NotCompleted,\n', '\n', '        // ICO completed, ICO goals reached successfully,\n', '        // ICO terminated and cannot be resumed.\n', '        Completed\n', '    }\n', '\n', '    /// @dev Token which controlled by this ICO\n', '    BaseICOToken public token;\n', '\n', '    /// @dev Current ICO state.\n', '    State public state;\n', '\n', '    /// @dev ICO start date seconds since epoch.\n', '    uint public startAt;\n', '\n', '    /// @dev ICO end date seconds since epoch.\n', '    uint public endAt;\n', '\n', '    /// @dev Minimal amount of investments in wei needed for successful ICO\n', '    uint public lowCapWei;\n', '\n', '    /// @dev Maximal amount of investments in wei for this ICO.\n', '    /// If reached ICO will be in `Completed` state.\n', '    uint public hardCapWei;\n', '\n', '    /// @dev Minimal amount of investments in wei per investor.\n', '    uint public lowCapTxWei;\n', '\n', '    /// @dev Maximal amount of investments in wei per investor.\n', '    uint public hardCapTxWei;\n', '\n', '    /// @dev Number of investments collected by this ICO\n', '    uint public collectedWei;\n', '\n', '    /// @dev Number of sold tokens by this ICO\n', '    uint public tokensSold;\n', '\n', '    /// @dev Team wallet used to collect funds\n', '    address public teamWallet;\n', '\n', '    // ICO state transition events\n', '    event ICOStarted(uint indexed endAt, uint lowCapWei, uint hardCapWei, uint lowCapTxWei, uint hardCapTxWei);\n', '    event ICOResumed(uint indexed endAt, uint lowCapWei, uint hardCapWei, uint lowCapTxWei, uint hardCapTxWei);\n', '    event ICOSuspended();\n', '    event ICOTerminated();\n', '    event ICONotCompleted();\n', '    event ICOCompleted(uint collectedWei);\n', '    event ICOInvestment(address indexed from, uint investedWei, uint tokens, uint8 bonusPct);\n', '\n', '    modifier isSuspended() {\n', '        require(state == State.Suspended);\n', '        _;\n', '    }\n', '\n', '    modifier isActive() {\n', '        require(state == State.Active);\n', '        _;\n', '    }\n', '\n', '    constructor(address icoToken_,\n', '        address teamWallet_,\n', '        uint lowCapWei_,\n', '        uint hardCapWei_,\n', '        uint lowCapTxWei_,\n', '        uint hardCapTxWei_) public {\n', '        require(icoToken_ != address(0) && teamWallet_ != address(0));\n', '        token = BaseICOToken(icoToken_);\n', '        teamWallet = teamWallet_;\n', '        lowCapWei = lowCapWei_;\n', '        hardCapWei = hardCapWei_;\n', '        lowCapTxWei = lowCapTxWei_;\n', '        hardCapTxWei = hardCapTxWei_;\n', '    }\n', '\n', '    /**\n', '     * @dev Trigger start of ICO.\n', '     * @param endAt_ ICO end date, seconds since epoch.\n', '     */\n', '    function start(uint endAt_) public onlyOwner {\n', '        require(endAt_ > block.timestamp && state == State.Inactive);\n', '        endAt = endAt_;\n', '        startAt = block.timestamp;\n', '        state = State.Active;\n', '        emit ICOStarted(endAt, lowCapWei, hardCapWei, lowCapTxWei, hardCapTxWei);\n', '    }\n', '\n', '    /**\n', '     * @dev Suspend this ICO.\n', '     * ICO can be activated later by calling `resume()` function.\n', '     * In suspend state, ICO owner can change basic ICO parameter using `tune()` function,\n', '     * tokens cannot be distributed among investors.\n', '     */\n', '    function suspend() public onlyOwner isActive {\n', '        state = State.Suspended;\n', '        emit ICOSuspended();\n', '    }\n', '\n', '    /**\n', '     * @dev Terminate the ICO.\n', '     * ICO goals are not reached, ICO terminated and cannot be resumed.\n', '     */\n', '    function terminate() public onlyOwner {\n', '        require(state != State.Terminated &&\n', '        state != State.NotCompleted &&\n', '        state != State.Completed);\n', '        state = State.Terminated;\n', '        emit ICOTerminated();\n', '    }\n', '\n', '    /**\n', '     * @dev Change basic ICO parameters. Can be done only during `Suspended` state.\n', '     * Any provided parameter is used only if it is not zero.\n', '     * @param endAt_ ICO end date seconds since epoch. Used if it is not zero.\n', '     * @param lowCapWei_ ICO low capacity. Used if it is not zero.\n', '     * @param hardCapWei_ ICO hard capacity. Used if it is not zero.\n', '     * @param lowCapTxWei_ Min limit for ICO per transaction\n', '     * @param hardCapTxWei_ Hard limit for ICO per transaction\n', '     */\n', '    function tune(uint endAt_,\n', '        uint lowCapWei_,\n', '        uint hardCapWei_,\n', '        uint lowCapTxWei_,\n', '        uint hardCapTxWei_) public onlyOwner isSuspended {\n', '        if (endAt_ > block.timestamp) {\n', '            endAt = endAt_;\n', '        }\n', '        if (lowCapWei_ > 0) {\n', '            lowCapWei = lowCapWei_;\n', '        }\n', '        if (hardCapWei_ > 0) {\n', '            hardCapWei = hardCapWei_;\n', '        }\n', '        if (lowCapTxWei_ > 0) {\n', '            lowCapTxWei = lowCapTxWei_;\n', '        }\n', '        if (hardCapTxWei_ > 0) {\n', '            hardCapTxWei = hardCapTxWei_;\n', '        }\n', '        require(lowCapWei <= hardCapWei && lowCapTxWei <= hardCapTxWei);\n', '        touch();\n', '    }\n', '\n', '    /**\n', '     * @dev Resume a previously suspended ICO.\n', '     */\n', '    function resume() public onlyOwner isSuspended {\n', '        state = State.Active;\n', '        emit ICOResumed(endAt, lowCapWei, hardCapWei, lowCapTxWei, hardCapTxWei);\n', '        touch();\n', '    }\n', '\n', '    /**\n', '     * @dev Recalculate ICO state based on current block time.\n', '     * Should be called periodically by ICO owner.\n', '     */\n', '    function touch() public;\n', '\n', '    /**\n', '     * @dev Buy tokens\n', '     */\n', '    function buyTokens() public payable;\n', '\n', '    /**\n', '     * @dev Send ether to the fund collection wallet\n', '     */\n', '    function forwardFunds() internal {\n', '        teamWallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '// File: contracts/flavours/SelfDestructible.sol\n', '\n', '/**\n', ' * @title SelfDestructible\n', ' * @dev The SelfDestructible contract has an owner address, and provides selfDestruct method\n', ' * in case of deployment error.\n', ' */\n', 'contract SelfDestructible is Ownable {\n', '\n', '    function selfDestruct(uint8 v, bytes32 r, bytes32 s) public onlyOwner {\n', '        if (ecrecover(prefixedHash(), v, r, s) != owner) {\n', '            revert();\n', '        }\n', '        selfdestruct(owner);\n', '    }\n', '\n', '    function originalHash() internal view returns (bytes32) {\n', '        return keccak256(abi.encodePacked(\n', '                "Signed for Selfdestruct",\n', '                address(this),\n', '                msg.sender\n', '            ));\n', '    }\n', '\n', '    function prefixedHash() internal view returns (bytes32) {\n', '        bytes memory prefix = "\\x19Ethereum Signed Message:\\n32";\n', '        return keccak256(abi.encodePacked(prefix, originalHash()));\n', '    }\n', '}\n', '\n', '// File: contracts/interface/ERC20Token.sol\n', '\n', 'interface ERC20Token {\n', '    function transferFrom(address from_, address to_, uint value_) external returns (bool);\n', '    function transfer(address to_, uint value_) external returns (bool);\n', '    function balanceOf(address owner_) external returns (uint);\n', '}\n', '\n', '// File: contracts/flavours/Withdrawal.sol\n', '\n', '/**\n', ' * @title Withdrawal\n', ' * @dev The Withdrawal contract has an owner address, and provides method for withdraw funds and tokens, if any\n', ' */\n', 'contract Withdrawal is Ownable {\n', '\n', '    // withdraw funds, if any, only for owner\n', '    function withdraw() public onlyOwner {\n', '        owner.transfer(address(this).balance);\n', '    }\n', '\n', '    // withdraw stuck tokens, if any, only for owner\n', '    function withdrawTokens(address _someToken) public onlyOwner {\n', '        ERC20Token someToken = ERC20Token(_someToken);\n', '        uint balance = someToken.balanceOf(address(this));\n', '        someToken.transfer(owner, balance);\n', '    }\n', '}\n', '\n', '// File: contracts/ICHXICO.sol\n', '\n', '/**\n', ' * @title ICHX tokens ICO contract.\n', ' */\n', 'contract ICHXICO is BaseICO, SelfDestructible, Withdrawal {\n', '    using SafeMath for uint;\n', '\n', '    /// @dev Total number of invested wei\n', '    uint public collectedWei;\n', '\n', '    // @dev investments distribution\n', '    mapping (address => uint) public investments;\n', '\n', '    /// @dev 1e18 WEI == 1ETH == 16700 tokens\n', '    uint public constant ETH_TOKEN_EXCHANGE_RATIO = 16700;\n', '\n', '    constructor(address icoToken_,\n', '                address teamWallet_,\n', '                uint lowCapWei_,\n', '                uint hardCapWei_,\n', '                uint lowCapTxWei_,\n', '                uint hardCapTxWei_) public\n', '        BaseICO(icoToken_, teamWallet_, lowCapWei_, hardCapWei_, lowCapTxWei_, hardCapTxWei_) {\n', '    }\n', '\n', '    /**\n', '     * Accept direct payments\n', '     */\n', '    function() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    /**\n', '     * @dev Recalculate ICO state based on current block time.\n', '     * Should be called periodically by ICO owner.\n', '     */\n', '    function touch() public {\n', '        if (state != State.Active && state != State.Suspended) {\n', '            return;\n', '        }\n', '        if (collectedWei >= hardCapWei) {\n', '            state = State.Completed;\n', '            endAt = block.timestamp;\n', '            emit ICOCompleted(collectedWei);\n', '        } else if (block.timestamp >= endAt) {\n', '            if (collectedWei < lowCapWei) {\n', '                state = State.NotCompleted;\n', '                emit ICONotCompleted();\n', '            } else {\n', '                state = State.Completed;\n', '                emit ICOCompleted(collectedWei);\n', '            }\n', '        }\n', '    }\n', '\n', '    function buyTokens() public payable {\n', '        require(state == State.Active &&\n', '                block.timestamp < endAt &&\n', '                msg.value >= lowCapTxWei &&\n', '                msg.value <= hardCapTxWei &&\n', '                collectedWei + msg.value <= hardCapWei &&\n', '                whitelisted(msg.sender));\n', '        uint amountWei = msg.value;\n', '\n', '        uint iTokens = token.icoInvestmentWei(msg.sender, amountWei, ETH_TOKEN_EXCHANGE_RATIO);\n', '        collectedWei = collectedWei.add(amountWei);\n', '        tokensSold = tokensSold.add(iTokens);\n', '        investments[msg.sender] = investments[msg.sender].add(amountWei);\n', '\n', '        emit ICOInvestment(msg.sender, amountWei, iTokens, 0);\n', '        forwardFunds();\n', '        touch();\n', '    }\n', '\n', '    function getInvestments(address investor) public view returns (uint) {\n', '        return investments[investor];\n', '    }\n', '}']