['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'contract OracleI {\n', '    bytes32 public oracleName;\n', '    bytes16 public oracleType;\n', '    uint256 public rate;\n', '    bool public waitQuery;\n', '    uint256 public updateTime;\n', '    uint256 public callbackTime;\n', '    function getPrice() view public returns (uint);\n', '    function setBank(address _bankAddress) public;\n', '    function setGasPrice(uint256 _price) public;\n', '    function setGasLimit(uint256 _limit) public;\n', '    function updateRate() external returns (bool);\n', '}\n', '\n', 'interface ExchangerI {\n', '    /* Order creation */\n', '    function buyTokens(address _recipient) payable public;\n', '    function sellTokens(address _recipient, uint256 tokensCount) public;\n', '\n', '    /* Rate calc & init  params */\n', '    function requestRates() payable public;\n', '    function calcRates() public;\n', '\n', '    /* Data getters */\n', '    function tokenBalance() public view returns(uint256);\n', '    function getOracleData(uint number) public view returns (address, bytes32, bytes16, bool, uint256, uint256, uint256);\n', '\n', '    /* Balance methods */\n', '    function refillBalance() payable public;\n', '    function withdrawReserve() public;\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title LibreCash token contract.\n', ' *\n', ' * @dev ERC20 token contract.\n', ' */\n', 'contract LibreCash is MintableToken, BurnableToken, Claimable  {\n', '    string public constant name = "LibreCash";\n', '    string public constant symbol = "Libre";\n', '    uint32 public constant decimals = 18;\n', '}\n', '\n', '\n', 'contract ComplexExchanger is ExchangerI {\n', '    using SafeMath for uint256;\n', '\n', '    address public tokenAddress;\n', '    LibreCash token;\n', '    address[] public oracles;\n', '    uint256 public deadline;\n', '    address public withdrawWallet;\n', '\n', '    uint256 public requestTime;\n', '    uint256 public calcTime;\n', '\n', '    uint256 public buyRate;\n', '    uint256 public sellRate;\n', '    uint256 public buyFee;\n', '    uint256 public sellFee;\n', '\n', '    uint256 constant ORACLE_ACTUAL = 15 minutes;\n', '    uint256 constant ORACLE_TIMEOUT = 10 minutes;\n', '    // RATE_PERIOD should be greater than or equal to ORACLE_ACTUAL\n', '    uint256 constant RATE_PERIOD = 15 minutes;\n', '    uint256 constant MIN_READY_ORACLES = 2;\n', '    uint256 constant FEE_MULTIPLIER = 100;\n', '    uint256 constant RATE_MULTIPLIER = 1000;\n', '    uint256 constant MAX_RATE = 5000 * RATE_MULTIPLIER;\n', '    uint256 constant MIN_RATE = 100 * RATE_MULTIPLIER;\n', '\n', '    event InvalidRate(uint256 rate, address oracle);\n', '    event OracleRequest(address oracle);\n', '    event Buy(address sender, address recipient, uint256 tokenAmount, uint256 price);\n', '    event Sell(address sender, address recipient, uint256 cryptoAmount, uint256 price);\n', '    event ReserveRefill(uint256 amount);\n', '    event ReserveWithdraw(uint256 amount);\n', '\n', '    enum State {\n', '        LOCKED,\n', '        PROCESSING_ORDERS,\n', '        WAIT_ORACLES,\n', '        CALC_RATES,\n', '        REQUEST_RATES\n', '    }\n', '\n', '    function() payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function ComplexExchanger(\n', '        address _token,\n', '        uint256 _buyFee,\n', '        uint256 _sellFee,\n', '        address[] _oracles,\n', '        uint256 _deadline,\n', '        address _withdrawWallet\n', '    ) public\n', '    {\n', '        require(\n', '            _withdrawWallet != address(0x0) &&\n', '            _token != address(0x0) &&\n', '            _deadline > now &&\n', '            _oracles.length >= MIN_READY_ORACLES\n', '        );\n', '\n', '        tokenAddress = _token;\n', '        token = LibreCash(tokenAddress);\n', '        oracles = _oracles;\n', '        buyFee = _buyFee;\n', '        sellFee = _sellFee;\n', '        deadline = _deadline;\n', '        withdrawWallet = _withdrawWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the contract state.\n', '     */\n', '    function getState() public view returns (State) {\n', '        if (now >= deadline)\n', '            return State.LOCKED;\n', '\n', '        if (now - calcTime < RATE_PERIOD)\n', '            return State.PROCESSING_ORDERS;\n', '\n', '        if (waitingOracles() != 0)\n', '            return State.WAIT_ORACLES;\n', '\n', '        if (readyOracles() >= MIN_READY_ORACLES)\n', '            return State.CALC_RATES;\n', '\n', '        return State.REQUEST_RATES;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows user to buy tokens by ether.\n', '     * @param _recipient The recipient of tokens.\n', '     */\n', '    function buyTokens(address _recipient) public payable {\n', '        require(getState() == State.PROCESSING_ORDERS);\n', '\n', '        uint256 availableTokens = tokenBalance();\n', '        require(availableTokens > 0);\n', '\n', '        uint256 tokensAmount = msg.value.mul(buyRate) / RATE_MULTIPLIER;\n', '        require(tokensAmount != 0);\n', '\n', '        uint256 refundAmount = 0;\n', '        // if recipient set as 0x0 - recipient is sender\n', '        address recipient = _recipient == 0x0 ? msg.sender : _recipient;\n', '\n', '        if (tokensAmount > availableTokens) {\n', '            refundAmount = tokensAmount.sub(availableTokens).mul(RATE_MULTIPLIER) / buyRate;\n', '            tokensAmount = availableTokens;\n', '        }\n', '\n', '        token.transfer(recipient, tokensAmount);\n', '        Buy(msg.sender, recipient, tokensAmount, buyRate);\n', '        if (refundAmount > 0)\n', '            recipient.transfer(refundAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows user to sell tokens and get ether.\n', '     * @param _recipient The recipient of ether.\n', '     * @param tokensCount The count of tokens to sell.\n', '     */\n', '    function sellTokens(address _recipient, uint256 tokensCount) public {\n', '        require(getState() == State.PROCESSING_ORDERS);\n', '        require(tokensCount <= token.allowance(msg.sender, this));\n', '\n', '        uint256 cryptoAmount = tokensCount.mul(RATE_MULTIPLIER) / sellRate;\n', '        require(cryptoAmount != 0);\n', '\n', '        if (cryptoAmount > this.balance) {\n', '            uint256 extraTokens = (cryptoAmount - this.balance).mul(sellRate) / RATE_MULTIPLIER;\n', '            cryptoAmount = this.balance;\n', '            tokensCount = tokensCount.sub(extraTokens);\n', '        }\n', '\n', '        token.transferFrom(msg.sender, this, tokensCount);\n', '        address recipient = _recipient == 0x0 ? msg.sender : _recipient;\n', '\n', '        Sell(msg.sender, recipient, cryptoAmount, sellRate);\n', '        recipient.transfer(cryptoAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Requests oracles rates updating; funds oracles if needed.\n', '     */\n', '    function requestRates() public payable {\n', '        require(getState() == State.REQUEST_RATES);\n', '        // Or just sub msg.value\n', '        // If it will be below zero - it will throw revert()\n', '        // require(msg.value >= requestPrice());\n', '        uint256 value = msg.value;\n', '\n', '        for (uint256 i = 0; i < oracles.length; i++) {\n', '            OracleI oracle = OracleI(oracles[i]);\n', '            uint callPrice = oracle.getPrice();\n', '\n', '            // If oracle needs funds - refill it\n', '            if (oracles[i].balance < callPrice) {\n', '                value = value.sub(callPrice);\n', '                oracles[i].transfer(callPrice);\n', '            }\n', '\n', '            if (oracle.updateRate())\n', '                OracleRequest(oracles[i]);\n', '        }\n', '        requestTime = now;\n', '\n', '        if (value > 0)\n', '            msg.sender.transfer(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns cost of requestRates function.\n', '     */\n', '    function requestPrice() public view returns(uint256) {\n', '        uint256 requestCost = 0;\n', '        for (uint256 i = 0; i < oracles.length; i++) {\n', '            requestCost = requestCost.add(OracleI(oracles[i]).getPrice());\n', '        }\n', '        return requestCost;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates buy and sell rates after oracles have received it.\n', '     */\n', '    function calcRates() public {\n', '        require(getState() == State.CALC_RATES);\n', '\n', '        uint256 minRate = 2**256 - 1; // Max for UINT256\n', '        uint256 maxRate = 0;\n', '        uint256 validOracles = 0;\n', '\n', '        for (uint256 i = 0; i < oracles.length; i++) {\n', '            OracleI oracle = OracleI(oracles[i]);\n', '            uint256 rate = oracle.rate();\n', '            if (oracle.waitQuery()) {\n', '                continue;\n', '            }\n', '            if (isRateValid(rate)) {\n', '                minRate = Math.min256(rate, minRate);\n', '                maxRate = Math.max256(rate, maxRate);\n', '                validOracles++;\n', '            } else {\n', '                InvalidRate(rate, oracles[i]);\n', '            }\n', '        }\n', '        // If valid rates data is insufficient - throw\n', '        if (validOracles < MIN_READY_ORACLES)\n', '            revert();\n', '\n', '        buyRate = minRate.mul(FEE_MULTIPLIER * RATE_MULTIPLIER - buyFee * RATE_MULTIPLIER / 100) / FEE_MULTIPLIER / RATE_MULTIPLIER;\n', '        sellRate = maxRate.mul(FEE_MULTIPLIER * RATE_MULTIPLIER + sellFee * RATE_MULTIPLIER / 100) / FEE_MULTIPLIER / RATE_MULTIPLIER;\n', '\n', '        calcTime = now;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns contract oracles&#39; count.\n', '     */\n', '    function oracleCount() public view returns(uint256) {\n', '        return oracles.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns token balance of the sender.\n', '     */\n', '    function tokenBalance() public view returns(uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns data for an oracle by its id in the array.\n', '     */\n', '    function getOracleData(uint number)\n', '        public\n', '        view\n', '        returns (address, bytes32, bytes16, bool, uint256, uint256, uint256)\n', '                /* address, name, type, waitQuery, updTime, clbTime, rate */\n', '    {\n', '        OracleI curOracle = OracleI(oracles[number]);\n', '\n', '        return(\n', '            oracles[number],\n', '            curOracle.oracleName(),\n', '            curOracle.oracleType(),\n', '            curOracle.waitQuery(),\n', '            curOracle.updateTime(),\n', '            curOracle.callbackTime(),\n', '            curOracle.rate()\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Returns ready (which have data to be used) oracles count.\n', '     */\n', '    function readyOracles() public view returns (uint256) {\n', '        uint256 count = 0;\n', '        for (uint256 i = 0; i < oracles.length; i++) {\n', '            OracleI oracle = OracleI(oracles[i]);\n', '            if ((oracle.rate() != 0) &&\n', '                !oracle.waitQuery() &&\n', '                (now - oracle.updateTime()) < ORACLE_ACTUAL)\n', '                count++;\n', '        }\n', '\n', '        return count;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns wait query oracle count.\n', '     */\n', '    function waitingOracles() public view returns (uint256) {\n', '        uint256 count = 0;\n', '        for (uint256 i = 0; i < oracles.length; i++) {\n', '            if (OracleI(oracles[i]).waitQuery() && (now - requestTime) < ORACLE_TIMEOUT) {\n', '                count++;\n', '            }\n', '        }\n', '\n', '        return count;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws balance only to special hardcoded wallet ONLY WHEN contract is locked.\n', '     */\n', '    function withdrawReserve() public {\n', '        require(getState() == State.LOCKED && msg.sender == withdrawWallet);\n', '        ReserveWithdraw(this.balance);\n', '        withdrawWallet.transfer(this.balance);\n', '        token.burn(tokenBalance());\n', '    }\n', '\n', '    /**\n', '     * @dev Allows to deposit eth to the contract without creating orders.\n', '     */\n', '    function refillBalance() public payable {\n', '        ReserveRefill(msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns if given rate is within limits; internal.\n', '     * @param rate Rate.\n', '     */\n', '    function isRateValid(uint256 rate) internal pure returns(bool) {\n', '        return rate >= MIN_RATE && rate <= MAX_RATE;\n', '    }\n', '    \n', '    function setDeadline(uint256 _deadline) public {\n', '        deadline = _deadline;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract LibertyToken is StandardToken, BurnableToken {\n', '  string public name = "LibreBank";\n', '  string public symbol = "LBRS";\n', '  uint256 public decimals = 18;\n', '\n', 'function LibertyToken() public {\n', '  totalSupply_ = 100 * (10**6) * (10**decimals);\n', '  balances[msg.sender] = totalSupply_;\n', '}\n', '} \n', '\n', 'contract LBRSMultitransfer is Ownable {\n', '    address public lbrsToken;\n', '    address public sender;\n', '    LibertyToken token;\n', '\n', '    /**\n', '     * @dev Implements transfer method for multiple recipient. Needed in LBRS token distribution process after ICO\n', '     * @param recipient - recipient addresses array\n', '     * @param balance - refill amounts array\n', '     */\n', '    function multiTransfer(address[] recipient,uint256[] balance) public {\n', '        require(recipient.length == balance.length && msg.sender == sender);\n', '\n', '        for (uint256 i = 0; i < recipient.length; i++) {\n', '            token.transfer(recipient[i],balance[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param LBRS - LBRS token address\n', '     */\n', '    function LBRSMultitransfer(address LBRS, address _sender) public {\n', '        lbrsToken = LBRS;\n', '        sender = _sender;\n', '        token = LibertyToken(lbrsToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw unsold tokens\n', '     */\n', '    function withdrawTokens() public onlyOwner {\n', '        token.transfer(owner,tokenBalance());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns LBRS token balance of contract.\n', '     */\n', '    function tokenBalance() public view returns(uint256) {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '     /**\n', '     * @dev Sets new token sender address\n', '     * @param _sender - token sender addresses\n', '     */\n', '    function setSender(address _sender) public onlyOwner {\n', '        sender = _sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Kill contracts after ICO.\n', '     */\n', '    function kill() public onlyOwner {\n', '        withdrawTokens();\n', '        selfdestruct(owner);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', 'contract OracleI {\n', '    bytes32 public oracleName;\n', '    bytes16 public oracleType;\n', '    uint256 public rate;\n', '    bool public waitQuery;\n', '    uint256 public updateTime;\n', '    uint256 public callbackTime;\n', '    function getPrice() view public returns (uint);\n', '    function setBank(address _bankAddress) public;\n', '    function setGasPrice(uint256 _price) public;\n', '    function setGasLimit(uint256 _limit) public;\n', '    function updateRate() external returns (bool);\n', '}\n', '\n', 'interface ExchangerI {\n', '    /* Order creation */\n', '    function buyTokens(address _recipient) payable public;\n', '    function sellTokens(address _recipient, uint256 tokensCount) public;\n', '\n', '    /* Rate calc & init  params */\n', '    function requestRates() payable public;\n', '    function calcRates() public;\n', '\n', '    /* Data getters */\n', '    function tokenBalance() public view returns(uint256);\n', '    function getOracleData(uint number) public view returns (address, bytes32, bytes16, bool, uint256, uint256, uint256);\n', '\n', '    /* Balance methods */\n', '    function refillBalance() payable public;\n', '    function withdrawReserve() public;\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = msg.sender;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title LibreCash token contract.\n', ' *\n', ' * @dev ERC20 token contract.\n', ' */\n', 'contract LibreCash is MintableToken, BurnableToken, Claimable  {\n', '    string public constant name = "LibreCash";\n', '    string public constant symbol = "Libre";\n', '    uint32 public constant decimals = 18;\n', '}\n', '\n', '\n', 'contract ComplexExchanger is ExchangerI {\n', '    using SafeMath for uint256;\n', '\n', '    address public tokenAddress;\n', '    LibreCash token;\n', '    address[] public oracles;\n', '    uint256 public deadline;\n', '    address public withdrawWallet;\n', '\n', '    uint256 public requestTime;\n', '    uint256 public calcTime;\n', '\n', '    uint256 public buyRate;\n', '    uint256 public sellRate;\n', '    uint256 public buyFee;\n', '    uint256 public sellFee;\n', '\n', '    uint256 constant ORACLE_ACTUAL = 15 minutes;\n', '    uint256 constant ORACLE_TIMEOUT = 10 minutes;\n', '    // RATE_PERIOD should be greater than or equal to ORACLE_ACTUAL\n', '    uint256 constant RATE_PERIOD = 15 minutes;\n', '    uint256 constant MIN_READY_ORACLES = 2;\n', '    uint256 constant FEE_MULTIPLIER = 100;\n', '    uint256 constant RATE_MULTIPLIER = 1000;\n', '    uint256 constant MAX_RATE = 5000 * RATE_MULTIPLIER;\n', '    uint256 constant MIN_RATE = 100 * RATE_MULTIPLIER;\n', '\n', '    event InvalidRate(uint256 rate, address oracle);\n', '    event OracleRequest(address oracle);\n', '    event Buy(address sender, address recipient, uint256 tokenAmount, uint256 price);\n', '    event Sell(address sender, address recipient, uint256 cryptoAmount, uint256 price);\n', '    event ReserveRefill(uint256 amount);\n', '    event ReserveWithdraw(uint256 amount);\n', '\n', '    enum State {\n', '        LOCKED,\n', '        PROCESSING_ORDERS,\n', '        WAIT_ORACLES,\n', '        CALC_RATES,\n', '        REQUEST_RATES\n', '    }\n', '\n', '    function() payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    function ComplexExchanger(\n', '        address _token,\n', '        uint256 _buyFee,\n', '        uint256 _sellFee,\n', '        address[] _oracles,\n', '        uint256 _deadline,\n', '        address _withdrawWallet\n', '    ) public\n', '    {\n', '        require(\n', '            _withdrawWallet != address(0x0) &&\n', '            _token != address(0x0) &&\n', '            _deadline > now &&\n', '            _oracles.length >= MIN_READY_ORACLES\n', '        );\n', '\n', '        tokenAddress = _token;\n', '        token = LibreCash(tokenAddress);\n', '        oracles = _oracles;\n', '        buyFee = _buyFee;\n', '        sellFee = _sellFee;\n', '        deadline = _deadline;\n', '        withdrawWallet = _withdrawWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the contract state.\n', '     */\n', '    function getState() public view returns (State) {\n', '        if (now >= deadline)\n', '            return State.LOCKED;\n', '\n', '        if (now - calcTime < RATE_PERIOD)\n', '            return State.PROCESSING_ORDERS;\n', '\n', '        if (waitingOracles() != 0)\n', '            return State.WAIT_ORACLES;\n', '\n', '        if (readyOracles() >= MIN_READY_ORACLES)\n', '            return State.CALC_RATES;\n', '\n', '        return State.REQUEST_RATES;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows user to buy tokens by ether.\n', '     * @param _recipient The recipient of tokens.\n', '     */\n', '    function buyTokens(address _recipient) public payable {\n', '        require(getState() == State.PROCESSING_ORDERS);\n', '\n', '        uint256 availableTokens = tokenBalance();\n', '        require(availableTokens > 0);\n', '\n', '        uint256 tokensAmount = msg.value.mul(buyRate) / RATE_MULTIPLIER;\n', '        require(tokensAmount != 0);\n', '\n', '        uint256 refundAmount = 0;\n', '        // if recipient set as 0x0 - recipient is sender\n', '        address recipient = _recipient == 0x0 ? msg.sender : _recipient;\n', '\n', '        if (tokensAmount > availableTokens) {\n', '            refundAmount = tokensAmount.sub(availableTokens).mul(RATE_MULTIPLIER) / buyRate;\n', '            tokensAmount = availableTokens;\n', '        }\n', '\n', '        token.transfer(recipient, tokensAmount);\n', '        Buy(msg.sender, recipient, tokensAmount, buyRate);\n', '        if (refundAmount > 0)\n', '            recipient.transfer(refundAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows user to sell tokens and get ether.\n', '     * @param _recipient The recipient of ether.\n', '     * @param tokensCount The count of tokens to sell.\n', '     */\n', '    function sellTokens(address _recipient, uint256 tokensCount) public {\n', '        require(getState() == State.PROCESSING_ORDERS);\n', '        require(tokensCount <= token.allowance(msg.sender, this));\n', '\n', '        uint256 cryptoAmount = tokensCount.mul(RATE_MULTIPLIER) / sellRate;\n', '        require(cryptoAmount != 0);\n', '\n', '        if (cryptoAmount > this.balance) {\n', '            uint256 extraTokens = (cryptoAmount - this.balance).mul(sellRate) / RATE_MULTIPLIER;\n', '            cryptoAmount = this.balance;\n', '            tokensCount = tokensCount.sub(extraTokens);\n', '        }\n', '\n', '        token.transferFrom(msg.sender, this, tokensCount);\n', '        address recipient = _recipient == 0x0 ? msg.sender : _recipient;\n', '\n', '        Sell(msg.sender, recipient, cryptoAmount, sellRate);\n', '        recipient.transfer(cryptoAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Requests oracles rates updating; funds oracles if needed.\n', '     */\n', '    function requestRates() public payable {\n', '        require(getState() == State.REQUEST_RATES);\n', '        // Or just sub msg.value\n', '        // If it will be below zero - it will throw revert()\n', '        // require(msg.value >= requestPrice());\n', '        uint256 value = msg.value;\n', '\n', '        for (uint256 i = 0; i < oracles.length; i++) {\n', '            OracleI oracle = OracleI(oracles[i]);\n', '            uint callPrice = oracle.getPrice();\n', '\n', '            // If oracle needs funds - refill it\n', '            if (oracles[i].balance < callPrice) {\n', '                value = value.sub(callPrice);\n', '                oracles[i].transfer(callPrice);\n', '            }\n', '\n', '            if (oracle.updateRate())\n', '                OracleRequest(oracles[i]);\n', '        }\n', '        requestTime = now;\n', '\n', '        if (value > 0)\n', '            msg.sender.transfer(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns cost of requestRates function.\n', '     */\n', '    function requestPrice() public view returns(uint256) {\n', '        uint256 requestCost = 0;\n', '        for (uint256 i = 0; i < oracles.length; i++) {\n', '            requestCost = requestCost.add(OracleI(oracles[i]).getPrice());\n', '        }\n', '        return requestCost;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates buy and sell rates after oracles have received it.\n', '     */\n', '    function calcRates() public {\n', '        require(getState() == State.CALC_RATES);\n', '\n', '        uint256 minRate = 2**256 - 1; // Max for UINT256\n', '        uint256 maxRate = 0;\n', '        uint256 validOracles = 0;\n', '\n', '        for (uint256 i = 0; i < oracles.length; i++) {\n', '            OracleI oracle = OracleI(oracles[i]);\n', '            uint256 rate = oracle.rate();\n', '            if (oracle.waitQuery()) {\n', '                continue;\n', '            }\n', '            if (isRateValid(rate)) {\n', '                minRate = Math.min256(rate, minRate);\n', '                maxRate = Math.max256(rate, maxRate);\n', '                validOracles++;\n', '            } else {\n', '                InvalidRate(rate, oracles[i]);\n', '            }\n', '        }\n', '        // If valid rates data is insufficient - throw\n', '        if (validOracles < MIN_READY_ORACLES)\n', '            revert();\n', '\n', '        buyRate = minRate.mul(FEE_MULTIPLIER * RATE_MULTIPLIER - buyFee * RATE_MULTIPLIER / 100) / FEE_MULTIPLIER / RATE_MULTIPLIER;\n', '        sellRate = maxRate.mul(FEE_MULTIPLIER * RATE_MULTIPLIER + sellFee * RATE_MULTIPLIER / 100) / FEE_MULTIPLIER / RATE_MULTIPLIER;\n', '\n', '        calcTime = now;\n', '    }\n', '\n', '    /**\n', "     * @dev Returns contract oracles' count.\n", '     */\n', '    function oracleCount() public view returns(uint256) {\n', '        return oracles.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns token balance of the sender.\n', '     */\n', '    function tokenBalance() public view returns(uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns data for an oracle by its id in the array.\n', '     */\n', '    function getOracleData(uint number)\n', '        public\n', '        view\n', '        returns (address, bytes32, bytes16, bool, uint256, uint256, uint256)\n', '                /* address, name, type, waitQuery, updTime, clbTime, rate */\n', '    {\n', '        OracleI curOracle = OracleI(oracles[number]);\n', '\n', '        return(\n', '            oracles[number],\n', '            curOracle.oracleName(),\n', '            curOracle.oracleType(),\n', '            curOracle.waitQuery(),\n', '            curOracle.updateTime(),\n', '            curOracle.callbackTime(),\n', '            curOracle.rate()\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Returns ready (which have data to be used) oracles count.\n', '     */\n', '    function readyOracles() public view returns (uint256) {\n', '        uint256 count = 0;\n', '        for (uint256 i = 0; i < oracles.length; i++) {\n', '            OracleI oracle = OracleI(oracles[i]);\n', '            if ((oracle.rate() != 0) &&\n', '                !oracle.waitQuery() &&\n', '                (now - oracle.updateTime()) < ORACLE_ACTUAL)\n', '                count++;\n', '        }\n', '\n', '        return count;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns wait query oracle count.\n', '     */\n', '    function waitingOracles() public view returns (uint256) {\n', '        uint256 count = 0;\n', '        for (uint256 i = 0; i < oracles.length; i++) {\n', '            if (OracleI(oracles[i]).waitQuery() && (now - requestTime) < ORACLE_TIMEOUT) {\n', '                count++;\n', '            }\n', '        }\n', '\n', '        return count;\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws balance only to special hardcoded wallet ONLY WHEN contract is locked.\n', '     */\n', '    function withdrawReserve() public {\n', '        require(getState() == State.LOCKED && msg.sender == withdrawWallet);\n', '        ReserveWithdraw(this.balance);\n', '        withdrawWallet.transfer(this.balance);\n', '        token.burn(tokenBalance());\n', '    }\n', '\n', '    /**\n', '     * @dev Allows to deposit eth to the contract without creating orders.\n', '     */\n', '    function refillBalance() public payable {\n', '        ReserveRefill(msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns if given rate is within limits; internal.\n', '     * @param rate Rate.\n', '     */\n', '    function isRateValid(uint256 rate) internal pure returns(bool) {\n', '        return rate >= MIN_RATE && rate <= MAX_RATE;\n', '    }\n', '    \n', '    function setDeadline(uint256 _deadline) public {\n', '        deadline = _deadline;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract LibertyToken is StandardToken, BurnableToken {\n', '  string public name = "LibreBank";\n', '  string public symbol = "LBRS";\n', '  uint256 public decimals = 18;\n', '\n', 'function LibertyToken() public {\n', '  totalSupply_ = 100 * (10**6) * (10**decimals);\n', '  balances[msg.sender] = totalSupply_;\n', '}\n', '} \n', '\n', 'contract LBRSMultitransfer is Ownable {\n', '    address public lbrsToken;\n', '    address public sender;\n', '    LibertyToken token;\n', '\n', '    /**\n', '     * @dev Implements transfer method for multiple recipient. Needed in LBRS token distribution process after ICO\n', '     * @param recipient - recipient addresses array\n', '     * @param balance - refill amounts array\n', '     */\n', '    function multiTransfer(address[] recipient,uint256[] balance) public {\n', '        require(recipient.length == balance.length && msg.sender == sender);\n', '\n', '        for (uint256 i = 0; i < recipient.length; i++) {\n', '            token.transfer(recipient[i],balance[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor\n', '     * @param LBRS - LBRS token address\n', '     */\n', '    function LBRSMultitransfer(address LBRS, address _sender) public {\n', '        lbrsToken = LBRS;\n', '        sender = _sender;\n', '        token = LibertyToken(lbrsToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw unsold tokens\n', '     */\n', '    function withdrawTokens() public onlyOwner {\n', '        token.transfer(owner,tokenBalance());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns LBRS token balance of contract.\n', '     */\n', '    function tokenBalance() public view returns(uint256) {\n', '        return token.balanceOf(this);\n', '    }\n', '\n', '     /**\n', '     * @dev Sets new token sender address\n', '     * @param _sender - token sender addresses\n', '     */\n', '    function setSender(address _sender) public onlyOwner {\n', '        sender = _sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Kill contracts after ICO.\n', '     */\n', '    function kill() public onlyOwner {\n', '        withdrawTokens();\n', '        selfdestruct(owner);\n', '    }\n', '}']
