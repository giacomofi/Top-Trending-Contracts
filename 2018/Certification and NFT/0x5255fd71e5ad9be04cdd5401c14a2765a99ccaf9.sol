['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract HelpingBlocksContract is Ownable {\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    uint public totalSupply;\n', '    string public description;\n', '    bool public donationClosed = false;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    /* To track donated amount of a user */\n', '    mapping (address => uint256) public myDonation;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor() public {\n', '        name = &#39;Helping Blocks Token&#39;;\n', '        symbol = &#39;HBT&#39;;\n', '        decimals = 0;\n', '        totalSupply = 10000000;\n', '        description = "Kerala Flood Relief Fund";\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public onlyOwner returns(bool success) {\n', '        _transfer(owner, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Stop taking donations */\n', '    function disableDonation() public onlyOwner returns(bool success) {\n', '      donationClosed = true;\n', '      return true;\n', '    }\n', '\n', '\n', '    /* Start taking donations */\n', '    function enableDonation() public onlyOwner returns(bool success) {\n', '      donationClosed = false;\n', '      return true;\n', '    }\n', '\n', '    function setDescription(string str) public onlyOwner returns(bool success) {\n', '      description = str;\n', '      return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '      require(!donationClosed);\n', '      myDonation[msg.sender] += msg.value;\n', '      if (balanceOf[msg.sender] < 1) {\n', '        _transfer(owner, msg.sender, 1);\n', '      }\n', '    }\n', '\n', '    function safeWithdrawal(uint256 _value) payable public onlyOwner {\n', '      owner.transfer(_value);\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract HelpingBlocksContract is Ownable {\n', '    string public name;\n', '    string public symbol;\n', '    uint public decimals;\n', '    uint public totalSupply;\n', '    string public description;\n', '    bool public donationClosed = false;\n', '\n', '    mapping (address => uint256) public balanceOf;\n', '    /* To track donated amount of a user */\n', '    mapping (address => uint256) public myDonation;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initializes contract with initial supply tokens to the creator of the contract\n', '     */\n', '    constructor() public {\n', "        name = 'Helping Blocks Token';\n", "        symbol = 'HBT';\n", '        decimals = 0;\n', '        totalSupply = 10000000;\n', '        description = "Kerala Flood Relief Fund";\n', '        balanceOf[owner] = totalSupply;\n', '    }\n', '\n', '    /**\n', '     * Internal transfer, only can be called by this contract\n', '     */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        balanceOf[_from] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * Transfer tokens\n', '     *\n', '     * Send `_value` tokens to `_to` from your account\n', '     *\n', '     * @param _to The address of the recipient\n', '     * @param _value the amount to send\n', '     */\n', '    function transfer(address _to, uint256 _value) public onlyOwner returns(bool success) {\n', '        _transfer(owner, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /* Stop taking donations */\n', '    function disableDonation() public onlyOwner returns(bool success) {\n', '      donationClosed = true;\n', '      return true;\n', '    }\n', '\n', '\n', '    /* Start taking donations */\n', '    function enableDonation() public onlyOwner returns(bool success) {\n', '      donationClosed = false;\n', '      return true;\n', '    }\n', '\n', '    function setDescription(string str) public onlyOwner returns(bool success) {\n', '      description = str;\n', '      return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '      require(!donationClosed);\n', '      myDonation[msg.sender] += msg.value;\n', '      if (balanceOf[msg.sender] < 1) {\n', '        _transfer(owner, msg.sender, 1);\n', '      }\n', '    }\n', '\n', '    function safeWithdrawal(uint256 _value) payable public onlyOwner {\n', '      owner.transfer(_value);\n', '    }\n', '}']
