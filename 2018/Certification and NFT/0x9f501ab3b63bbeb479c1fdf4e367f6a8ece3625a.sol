['pragma solidity ^0.4.25;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC223Interface\n', ' * @dev Simpler version of ERC223 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/223\n', ' */\n', '\n', 'contract ERC223Interface {\n', '    uint public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint);\n', '    function transfer(address to, uint value) public;\n', '    function transfer(address to, uint value, bytes data) public;\n', '    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n', '}\n', '\n', '/**\n', ' * @title Contract that will work with ERC223 tokens.\n', ' */\n', ' \n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', '/**\n', ' * @title Reference implementation of the ERC223 standard token.\n', ' */\n', ' \n', 'contract ERC223Token is ERC223Interface, Pausable  {\n', '    using SafeMath for uint;\n', '\n', '    mapping(address => uint) balances; // List of user balances.\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '     \n', '    function transfer(address _to, uint _value, bytes _data) public whenNotPaused {\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        uint codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value, _data);\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', "     *      but doesn't contain `_data` param.\n", '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint _value) public whenNotPaused {\n', '        uint codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value, empty);\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev Returns balance of the `_owner`.\n', '     *\n', '     * @param _owner   The address whose balance will be returned.\n', '     * @return balance Balance of the `_owner`.\n', '     */\n', '    function balanceOf(address _owner) public whenNotPaused constant returns (uint balance)  {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '\n', 'contract LinTokenMint is ERC223Token {\n', '    \n', '    string public constant name = "LinToken";   // Set the name for display purposes\n', '    string public constant symbol = "LIN";  // Set the symbol for display purposes\n', '    uint256 public constant decimals = 18;  // 18 decimals is the strongly suggested default, avoid changing it\n', '    uint256 public constant INITIAL_SUPPLY = 1000000000 * (10 ** uint256(decimals));    // Set the initial supply\n', '    uint256 public totalSupply = INITIAL_SUPPLY;    // Set the total supply\n', '    uint256 internal Percent = INITIAL_SUPPLY.div(100); // Set the 1 percent of the total supply\n', '    \n', '    uint256 public ICOSupply = Percent.mul(50); // Set the 50 percent of the ico supply\n', '    uint256 internal LinNetOperationSupply = Percent.mul(30);   // Set the 30 percent of the LinNetOperation supply\n', '    uint256 internal LinTeamSupply = Percent.mul(10);   // Set the 10 percent of the LinTeam supply\n', '    uint256 internal SympoSiumSupply = Percent.mul(5);  // Set the 5 percent of the SympoSium supply\n', '    uint256 internal BountySupply = Percent.mul(5).div(2);  // Set the 2.5 percent of the SympoSium supply\n', '    uint256 internal preICOSupply = Percent.mul(5).div(2);  // Set the 2.5 percent of the preICO supply\n', '    \n', "    address internal LinNetOperation = 0x48a240d2aB56FE372e9867F19C7Ba33F60cB32fc;  // Set a LinNetOperation's address\n", "    address internal LinTeam = 0xF55f80d09e551c35735ed4af107f6d361a7eD623;  // Set a LinTeam's address\n", "    address internal SympoSium = 0x5761DB2F09A0DF0b03A885C61E618CFB4Da7492D;    // Set a SympoSium's address\n", "    address internal Bounty = 0x76e1173022e0fD87D15AA90270828b1a6a54Eac1;   // Set a Bounty's address\n", "    address internal preICO = 0x2bfdf8B830DAaf54d0b538aF1E62A192Bf291B5d;   // Set a preICO's address\n", '\n', '    event InitSupply(uint256 owner, uint256 LinNetOperation, uint256 LinTeam, uint256 SympoSium, uint256 Bounty, uint256 preICO);\n', '    \n', '     /**\n', '     * @dev The log is output when the contract is distributed.\n', '     */\n', '    \n', '    constructor() public {\n', '       \n', '        emit InitSupply(ICOSupply, LinNetOperationSupply, LinTeamSupply, SympoSiumSupply, BountySupply, preICOSupply);\n', '        \n', '    }\n', '    \n', '}\n', 'contract WhitelistedCrowdsale is Ownable {\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    event AddWhiteList(address who);\n', '    event DelWhiteList(address who);\n', '\n', '    /**\n', '     * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '     */\n', '    modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '    }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '    emit AddWhiteList(_beneficiary);\n', '  }\n', '  \n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing. \n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist. \n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '    emit DelWhiteList(_beneficiary);\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title LinCrowdSale\n', ' */\n', ' \n', 'contract LinCrowdSale is LinTokenMint, WhitelistedCrowdsale {\n', '    \n', '    /**\n', '     * @dev Calculate date in seconds.\n', '     */\n', '   \n', '    uint constant Month = 60*60*24*30;\n', '    uint constant SixMonth = 6 * Month;\n', '    uint constant Year = 12 * Month;\n', '    \n', '    /**\n', '     * @dev Set sales start time and end time.\n', '     */\n', '    \n', '    uint public StartTime = now;\n', '    uint public EndTime = StartTime + SixMonth;\n', '\n', '    /**\n', '     * @dev Set private Sale EndTime and PreSale EndTime.\n', '     */\n', '\n', '    uint public PrivateSaleEndTime = StartTime.add(Month*3);\n', '    uint public PreSaleEndTime = PrivateSaleEndTime.add(Month);\n', '    \n', '     /**\n', '     * @dev Flag value to check when SoftCapReached, HardCapReached, SaleClosed is achieved.\n', '     */\n', '    \n', '    bool public SoftCapReached = false;\n', '    bool public HardCapReached = false;\n', '    bool public SaleClosed = false;\n', '    \n', '    bool private rentrancy_lock = false; // prevent certain functions from being recursively called\n', '    \n', '    uint public constant Private_rate = 2000; // The ratio of LIN to Ether; 40% bonus\n', '    uint public constant Pre_rate = 1500; //  The ratio of LIN to Ether; 20%\n', '    uint public constant Public = 1200; //  The ratio of LIN to Ether; 0% bonus\n', '    \n', '\n', '    uint public MinInvestMent = 2 * (10 ** decimals); // The minimum investment is 2 eth\n', '    uint public HardCap = 500000000 * (10 ** decimals);  // Set hardcap number   =  500000000\n', '    uint public SoftCap =  10000000 * (10 ** decimals); // Set softcap number   =   10000000\n', '    \n', '    /**\n', '     * @dev Check total quantity of total amount eth, sale amount lin, refund amount.\n', '     */\n', '     \n', '    uint public TotalAmountETH;\n', '    uint public SaleAmountLIN;\n', '    uint public RefundAmount;\n', '    \n', '    uint public InvestorNum;    // check total inverstor number\n', '    \n', '    \n', '    /**\n', '     * @dev Providing information by inserting events into all functions.\n', '     */\n', '     \n', '    event SuccessCoreAccount(uint256 InvestorNum);\n', '    event Burn(address burner, uint256 value);\n', '    event SuccessInvestor(address RequestAddress, uint256 amount);\n', '    event SuccessSoftCap(uint256 SaleAmountLin, uint256 time);\n', '    event SuccessHardCap(uint256 SaleAmountLin, uint256 time);\n', '    event SucessWithdraw(address who, uint256 AmountEth, uint256 time);\n', '    event SuccessEthToOwner(address owner, uint256 AmountEth, uint256 time);\n', '    \n', '    event linTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now);\n', '    event linTokenToCore(address CoreAddress, uint256 Amount, uint256 now);\n', '    event FailsafeWithdrawal(address InverstorAddress, uint256 Amount, uint256 now);\n', '    event FaillinTokenToInvestors(address InverstorAddress, uint256 Amount, uint256 now, uint256 ReleaseTime);\n', '    event FaillinTokenToCore(address CoreAddress, uint256 Amount, uint256 now, uint256 ReleaseTime);\n', '    event FailEthToOwner(address who, uint256 _amount, uint256 now);\n', '    event safeWithdrawalTry(address who);\n', '\n', '\n', '    /**\n', '     * @dev Check whether the specified time is satisfied.\n', '     */\n', '    modifier beforeDeadline()   { require (now < EndTime); _; }\n', '    modifier afterDeadline()    { require (now >= EndTime); _; }\n', '    modifier afterStartTime()   { require (now >= StartTime); _; }\n', '    modifier saleNotClosed()    { require (!SaleClosed); _; }\n', '    \n', '    \n', '    /**\n', '     * @dev Prevent reentrant attacks.\n', '     */\n', '     \n', '    modifier nonReentrant() {\n', '\n', '        require(!rentrancy_lock);\n', '\n', '        rentrancy_lock = true;\n', '\n', '        _;\n', '\n', '        rentrancy_lock = false;\n', '\n', '    }\n', '    \n', '    /**\n', '     * @dev Set investor structure.\n', '     */\n', '     \n', '    struct Investor {\n', '    \n', '    \tuint256 EthAmount;\n', '    \tuint256 LinTokenAmount;\n', '    \tuint256 LockupTime;\n', '    \tbool    LinTokenWithdraw;\n', '    \t\n', '    }\n', '    \n', '    \n', '    mapping (address => Investor) public Inverstors;    // Investor structure connector\n', '    mapping (uint256 => address) public InverstorList;  // Investor list connector\n', '    \n', '    \n', '    constructor() public {\n', '        \n', '        /**\n', '         * @dev Initial information setting of core members.\n', '         */\n', '     \n', '        Inverstors[LinNetOperation].EthAmount = 0;\n', '        Inverstors[LinNetOperation].LockupTime = Year;\n', '        Inverstors[LinNetOperation].LinTokenAmount = LinNetOperationSupply;\n', '        Inverstors[LinNetOperation].LinTokenWithdraw = false; \n', '        InverstorList[InvestorNum] = LinNetOperation;\n', '        InvestorNum++;\n', '        \n', '        Inverstors[LinTeam].EthAmount = 0;\n', '        Inverstors[LinTeam].LockupTime = Year;\n', '        Inverstors[LinTeam].LinTokenAmount = LinTeamSupply;\n', '        Inverstors[LinTeam].LinTokenWithdraw = false; \n', '        InverstorList[InvestorNum] = LinTeam;\n', '        InvestorNum++;\n', '        \n', '        Inverstors[SympoSium].EthAmount = 0;\n', '        Inverstors[SympoSium].LockupTime = Year;\n', '        Inverstors[SympoSium].LinTokenAmount = SympoSiumSupply;\n', '        Inverstors[SympoSium].LinTokenWithdraw = false; \n', '        InverstorList[InvestorNum] = SympoSium;\n', '        InvestorNum++;\n', '        \n', '        Inverstors[Bounty].EthAmount = 0;\n', '        Inverstors[Bounty].LockupTime = Month.mul(4);\n', '        Inverstors[Bounty].LinTokenAmount = BountySupply;\n', '        Inverstors[Bounty].LinTokenWithdraw = false; \n', '        InverstorList[InvestorNum] = Bounty;\n', '        InvestorNum++;\n', '        \n', '        Inverstors[preICO].EthAmount = 0;\n', '        Inverstors[preICO].LockupTime = Year;\n', '        Inverstors[preICO].LinTokenAmount = preICOSupply;\n', '        Inverstors[preICO].LinTokenWithdraw = false; \n', '        InverstorList[InvestorNum] = preICO;\n', '        InvestorNum++;\n', '        \n', '        emit SuccessCoreAccount(InvestorNum);\n', '        \n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev It is automatically operated when depositing the eth.\n', '     *  Set the minimum amount to a MinInvestMent\n', '     */\n', '    \n', '    function() payable public isWhitelisted(msg.sender) whenNotPaused beforeDeadline afterStartTime saleNotClosed nonReentrant {\n', '         \n', '        require(msg.value >= MinInvestMent);    // Check if minimum amount satisfies\n', '\n', '        uint amount = msg.value;    // Assign investment amount\n', '        \n', '        uint CurrentTime = now; // Assign Current time\n', '        \n', '        address RequestAddress = msg.sender;    // Investor address assignment\n', '        \n', '        uint rate;  // Token quantity variable\n', '        \n', '        uint CurrentInvestMent = Inverstors[RequestAddress].EthAmount;  // Allocated eth allocation so far\n', '\n', '\n', '        Inverstors[RequestAddress].EthAmount = CurrentInvestMent.add(amount);   // Updated eth investment\n', '\n', '        Inverstors[RequestAddress].LockupTime = StartTime.add(SixMonth); // Set lockup time to trade tokens\n', '        \n', '        Inverstors[RequestAddress].LinTokenWithdraw = false;    // Confirm whether the token is withdrawn after unlocking\n', '        \n', '        TotalAmountETH = TotalAmountETH.add(amount); // Total investment of all investors eth Quantity\n', '        \n', '       \n', '        /**\n', '         * @dev Bonus Quantity Variable Setting Logic\n', '         */\n', '       \n', '        if(CurrentTime<PrivateSaleEndTime) {\n', '            \n', '            rate = Private_rate;\n', '            \n', '        } else if(CurrentTime<PreSaleEndTime) {\n', '            \n', '            rate = Pre_rate;\n', '            \n', '        } else {\n', '            \n', '            rate = Public;\n', '            \n', '        }\n', '\n', '\n', '        uint NumLinToken = amount.mul(rate);    // Lin token Quantity assignment\n', '        \n', '        ICOSupply = ICOSupply.sub(NumLinToken); // Decrease in ICOSupply quantity\n', '        \n', '        \n', '        if(ICOSupply > 0) {     \n', '        \n', "        //  Update investor's lean token\n", '        Inverstors[RequestAddress].LinTokenAmount =  Inverstors[RequestAddress].LinTokenAmount.add(NumLinToken);\n', '        \n', '        SaleAmountLIN = SaleAmountLIN.add(NumLinToken); // Total amount of lin tokens sold\n', '        \n', '        CheckHardCap(); // Execute hard cap check function\n', '        \n', '        CheckSoftCap(); // Execute soft cap check function\n', '        \n', '        InverstorList[InvestorNum] = RequestAddress;    // Assign the investor address to the current index\n', '        \n', '        InvestorNum++;  // Increase number of investors\n', '        \n', '        emit SuccessInvestor(msg.sender, msg.value);    // Investor Information event print\n', '        \n', '        } else {\n', '\n', '            revert();   // If ICOSupply is less than 0, revert\n', '             \n', '        }\n', '    }\n', '        \n', '    /**\n', '     * @dev If it is a hard cap, set the flag to true and print the event\n', '     */\n', '         \n', '    function CheckHardCap() internal {\n', '\n', '        if (!HardCapReached) {\n', '\n', '            if (SaleAmountLIN >= HardCap) {\n', '\n', '                HardCapReached = true;\n', '\n', '                SaleClosed = true;\n', '                \n', '                emit SuccessSoftCap(SaleAmountLIN, now);\n', '\n', '            }\n', '        }\n', '    }   \n', '    \n', '    /**\n', '     * @dev If it is a soft cap, set the flag to true and print the event\n', '     */\n', '     \n', '    function CheckSoftCap() internal {\n', '\n', '        if (!SoftCapReached) {\n', '\n', '            if (SaleAmountLIN >= SoftCap) {\n', '\n', '                SoftCapReached = true;\n', '                \n', '                emit SuccessHardCap(SaleAmountLIN, now);\n', '\n', '            } \n', '        }\n', '    }  \n', ' \n', '    /**\n', '     * @dev If the soft cap fails, return the investment and print the event\n', '     */\n', '     \n', '    function safeWithdrawal() external afterDeadline nonReentrant {\n', '\n', '        if (!SoftCapReached) {\n', '\n', '            uint amount = Inverstors[msg.sender].EthAmount;\n', '            \n', '            Inverstors[msg.sender].EthAmount = 0;\n', '            \n', '\n', '            if (amount > 0) {\n', '\n', '                msg.sender.transfer(amount);\n', '\n', '                RefundAmount = RefundAmount.add(amount);\n', '\n', '                emit SucessWithdraw(msg.sender, amount, now);\n', '\n', '            } else { \n', '                \n', '                emit FailsafeWithdrawal(msg.sender, amount, now);\n', '                \n', '                revert(); \n', '                \n', '            }\n', '\n', '        } else {\n', '            \n', '            emit safeWithdrawalTry(msg.sender);\n', '            \n', '        } \n', '\n', '    }\n', '    \n', '    /**\n', "     * @dev send owner's funds to the ICO owner - after ICO\n", '     */\n', '     \n', '    function transferEthToOwner(uint256 _amount) public onlyOwner afterDeadline nonReentrant { \n', '        \n', '        if(SoftCapReached) {\n', '            \n', '            owner.transfer(_amount); \n', '        \n', '            emit SuccessEthToOwner(msg.sender, _amount, now);\n', '        \n', '        } else {\n', '            \n', '            emit FailEthToOwner(msg.sender, _amount, now);\n', '            \n', '        }   \n', '\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '     \n', '    function burn(uint256 _value) public onlyOwner afterDeadline nonReentrant {\n', '        \n', '        require(_value <= ICOSupply);\n', '\n', '        address burner = msg.sender;\n', '        \n', '        ICOSupply = ICOSupply.sub(_value);\n', '        \n', '        totalSupply = totalSupply.sub(_value);\n', '        \n', '        emit Burn(burner, _value);\n', '        \n', '     }\n', '     \n', '    /**\n', '     * @dev After the lockout time, the tokens are paid to investors.\n', '     */\n', '     \n', '    function LinTokenToInvestors() public onlyOwner afterDeadline nonReentrant {\n', '        \n', '        require(SoftCapReached);\n', '\n', '        for(uint256 i=5; i<InvestorNum; i++) {\n', '                \n', '            uint256 ReleaseTime = Inverstors[InverstorList[i]].LockupTime;\n', '            \n', '            address InverstorAddress = InverstorList[i];\n', '            \n', '            uint256 Amount = Inverstors[InverstorAddress].LinTokenAmount;\n', '               \n', '                \n', '            if(now>ReleaseTime && Amount>0) {\n', '                    \n', '                balances[InverstorAddress] = Amount;\n', '                    \n', '                Inverstors[InverstorAddress].LinTokenAmount = Inverstors[InverstorAddress].LinTokenAmount.sub(Amount);\n', '                    \n', '                Inverstors[InverstorAddress].LinTokenWithdraw = true;\n', '                \n', '                emit linTokenToInvestors(InverstorAddress, Amount, now);\n', '                \n', '            } else {\n', '                \n', '                emit FaillinTokenToInvestors(InverstorAddress, Amount, now, ReleaseTime);\n', '                \n', '                revert();\n', '            }\n', '                \n', '        }\n', '  \n', '    }\n', '  \n', '    /**\n', '     * @dev After the lockout time, the tokens are paid to Core.\n', '     */\n', '  \n', '    function LinTokenToCore() public onlyOwner afterDeadline nonReentrant {\n', '        \n', '        require(SoftCapReached);\n', '\n', '        for(uint256 i=0; i<5; i++) {\n', '                \n', '            uint256 ReleaseTime = Inverstors[InverstorList[i]].LockupTime;\n', '            \n', '            address CoreAddress = InverstorList[i];\n', '            \n', '            uint256 Amount = Inverstors[CoreAddress].LinTokenAmount;\n', '            \n', '                \n', '            if(now>ReleaseTime && Amount>0) {\n', '                    \n', '                balances[CoreAddress] = Amount;\n', '                    \n', '                Inverstors[CoreAddress].LinTokenAmount = Inverstors[CoreAddress].LinTokenAmount.sub(Amount);\n', '                \n', '                Inverstors[CoreAddress].LinTokenWithdraw = true;\n', '                    \n', '                emit linTokenToCore(CoreAddress, Amount, now);\n', '                \n', '            } else {\n', '                \n', '                emit FaillinTokenToCore(CoreAddress, Amount, now, ReleaseTime);\n', '                \n', '                revert();\n', '            }\n', '                \n', '        }\n', '  \n', '    }\n', '  \n', '}']