['pragma solidity 0.4.24;\n', 'contract Owned {\n', '    /* Variables */\n', '    address public owner = msg.sender;\n', '    /* Constructor */\n', '    constructor(address _owner) public {\n', '        if ( _owner == 0x00 ) {\n', '            _owner = msg.sender;\n', '        }\n', '        owner = _owner;\n', '    }\n', '    /* Externals */\n', '    function replaceOwner(address _owner) external returns(bool) {\n', '        require( isOwner() );\n', '        owner = _owner;\n', '        return true;\n', '    }\n', '    /* Internals */\n', '    function isOwner() internal view returns(bool) {\n', '        return owner == msg.sender;\n', '    }\n', '    /* Modifiers */\n', '    modifier forOwner {\n', '        require( isOwner() );\n', '        _;\n', '    }\n', '}\n', 'library SafeMath {\n', '    /* Internals */\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        c = a + b;\n', '        assert( c >= a );\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        c = a - b;\n', '        assert( c <= a );\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        c = a * b;\n', '        assert( c == 0 || c / a == b );\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        return a / b;\n', '    }\n', '    function pow(uint256 a, uint256 b) internal pure returns(uint256 c) {\n', '        c = a ** b;\n', '        assert( c % a == 0 );\n', '        return a ** b;\n', '    }\n', '}\n', 'contract TokenDB is Owned {\n', '    /* Externals */\n', '    function transfer(address _from, address _to, uint256 _amount) external returns(bool _success) {}\n', '    function bulkTransfer(address _from, address[] _to, uint256[] _amount) external returns(bool _success) {}\n', '    function setAllowance(address _owner, address _spender, uint256 _amount) external returns(bool _success) {}\n', '    /* Constants */\n', '    function getAllowance(address _owner, address _spender) public view returns(bool _success, uint256 _remaining) {}\n', '    function balanceOf(address _owner) public view returns(bool _success, uint256 _balance) {}\n', '}\n', 'contract Token is Owned {\n', '    /* Declarations */\n', '    using SafeMath for uint256;\n', '    /* Variables */\n', '    string  public name = "Inlock token";\n', '    string  public symbol = "ILK";\n', '    uint8   public decimals = 8;\n', '    uint256 public totalSupply = 44e16;\n', '    address public libAddress;\n', '    TokenDB public db;\n', '    Ico public ico;\n', '    /* Fallback */\n', '    function () public { revert(); }\n', '    /* Externals */\n', '    function changeLibAddress(address _libAddress) external forOwner {}\n', '    function changeDBAddress(address _dbAddress) external forOwner {}\n', '    function changeIcoAddress(address _icoAddress) external forOwner {}\n', '    function approve(address _spender, uint256 _value) external returns (bool _success) {}\n', '    function transfer(address _to, uint256 _amount) external returns (bool _success) {}\n', '    function bulkTransfer(address[] _to, uint256[] _amount) external returns (bool _success) {}\n', '    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool _success) {}\n', '    /* Constants */\n', '    function allowance(address _owner, address _spender) public view returns (uint256 _remaining) {}\n', '    function balanceOf(address _owner) public view returns (uint256 _balance) {}\n', '    /* Events */\n', '    event AllowanceUsed(address indexed _spender, address indexed _owner, uint256 indexed _value);\n', '    event Mint(address indexed _addr, uint256 indexed _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '}\n', 'contract Ico is Owned {\n', '    /* Declarations */\n', '    using SafeMath for uint256;\n', '    /* Enumerations */\n', '    enum phaseType {\n', '        pause,\n', '        privateSale1,\n', '        privateSale2,\n', '        sales1,\n', '        sales2,\n', '        sales3,\n', '        sales4,\n', '        preFinish,\n', '        finish\n', '    }\n', '    struct vesting_s {\n', '        uint256 amount;\n', '        uint256 startBlock;\n', '        uint256 endBlock;\n', '        uint256 claimedAmount;\n', '    }\n', '    /* Variables */\n', '    mapping(address => bool) public KYC;\n', '    mapping(address => bool) public transferRight;\n', '    mapping(address => vesting_s) public vesting;\n', '    phaseType public currentPhase;\n', '    uint256   public currentRate;\n', '    uint256   public currentRateM = 1e3;\n', '    uint256   public privateSale1Hardcap = 4e16;\n', '    uint256   public privateSale2Hardcap = 64e15;\n', '    uint256   public thisBalance = 44e16;\n', '    address   public offchainUploaderAddress;\n', '    address   public setKYCAddress;\n', '    address   public setRateAddress;\n', '    address   public libAddress;\n', '    Token     public token;\n', '    /* Constructor */\n', '    constructor(address _owner, address _libAddress, address _tokenAddress, address _offchainUploaderAddress,\n', '        address _setKYCAddress, address _setRateAddress) Owned(_owner) public {\n', '        currentPhase = phaseType.pause;\n', '        libAddress = _libAddress;\n', '        token = Token(_tokenAddress);\n', '        offchainUploaderAddress = _offchainUploaderAddress;\n', '        setKYCAddress = _setKYCAddress;\n', '        setRateAddress = _setRateAddress;\n', '    }\n', '    /* Fallback */\n', '    function () public payable {\n', '        buy();\n', '    }\n', '    /* Externals */\n', '    function changeLibAddress(address _libAddress) external forOwner {\n', '        libAddress = _libAddress;\n', '    }\n', '    function changeOffchainUploaderAddress(address _offchainUploaderAddress) external forOwner {\n', '        offchainUploaderAddress = _offchainUploaderAddress;\n', '    }\n', '    function changeKYCAddress(address _setKYCAddress) external forOwner {\n', '        setKYCAddress = _setKYCAddress;\n', '    }\n', '    function changeSetRateAddress(address _setRateAddress) external forOwner {\n', '        setRateAddress = _setRateAddress;\n', '    }\n', '    function setVesting(address _beneficiary, uint256 _amount, uint256 _startBlock, uint256 _endBlock) external {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0)\n', '            }\n', '        }\n', '    }\n', '    function claimVesting() external {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0)\n', '            }\n', '        }\n', '    }\n', '    function setKYC(address[] _on, address[] _off) external {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0)\n', '            }\n', '        }\n', '    }\n', '    function setTransferRight(address[] _allow, address[] _disallow) external {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0)\n', '            }\n', '        }\n', '    }\n', '    function setCurrentRate(uint256 _currentRate) external {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0)\n', '            }\n', '        }\n', '    }\n', '    function setCurrentPhase(phaseType _phase) external {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0)\n', '            }\n', '        }\n', '    }\n', '    function offchainUpload(address[] _beneficiaries, uint256[] _rewards) external {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0)\n', '            }\n', '        }\n', '    }\n', '    function buy() public payable {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0)\n', '            }\n', '        }\n', '    }\n', '    /* Constants */\n', '    function allowTransfer(address _owner) public view returns (bool _success, bool _allow) {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x40)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0x40)\n', '            }\n', '        }\n', '    }\n', '    function calculateReward(uint256 _input) public view returns (bool _success, uint256 _reward) {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x40)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0x40)\n', '            }\n', '        }\n', '    }\n', '    function calcVesting(address _owner) public view returns(bool _success, uint256 _reward) {\n', '        address _trg = libAddress;\n', '        assembly {\n', '            let m := mload(0x40)\n', '            calldatacopy(m, 0, calldatasize)\n', '            let success := delegatecall(gas, _trg, m, calldatasize, m, 0x40)\n', '            switch success case 0 {\n', '                revert(0, 0)\n', '            } default {\n', '                return(m, 0x40)\n', '            }\n', '        }\n', '    }\n', '    /* Events */\n', '    event Brought(address _owner, address _beneficiary, uint256 _input, uint256 _output);\n', '    event VestingDefined(address _beneficiary, uint256 _amount, uint256 _startBlock, uint256 _endBlock);\n', '    event VestingClaimed(address _beneficiary, uint256 _amount);\n', '}']