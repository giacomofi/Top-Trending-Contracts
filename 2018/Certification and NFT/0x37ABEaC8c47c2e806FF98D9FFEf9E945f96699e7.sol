['pragma solidity ^0.4.23;\n', '\n', '// File: contracts/Crowdsale/CrowdsaleToken.sol\n', '\n', 'interface CrowdsaleToken {\n', '    function transfer(address destination, uint amount) external returns (bool);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function burn(uint amount) external;\n', '}\n', '\n', '// File: contracts/Token/CrowdsaleState.sol\n', '\n', 'interface CrowdsaleState {\n', '    function isCrowdsaleSuccessful() external view returns(bool);\n', '}\n', '\n', '// File: contracts/Token/HardCap.sol\n', '\n', 'interface HardCap {\n', '    function getHardCap() external pure returns(uint);\n', '}\n', '\n', '// File: contracts/Utils/Ownable.sol\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function isOwner() view public returns (bool) {\n', '        return msg.sender == owner;\n', '    }\n', '\n', '    modifier grantOwner {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/Proxy/ERC20Allowance.sol\n', '\n', 'interface ERC20Allowance\n', '{\n', '    function transferFrom(address source, address destination, uint amount) external returns (bool);\n', '}\n', '\n', '// File: contracts/Proxy/CryptoPoliceProxy.sol\n', '\n', 'contract CryptoPoliceProxy is Ownable\n', '{\n', '    address public token;\n', '    address public crowdsale;\n', '    mapping(address => bool) public allowanceProxyAccess;\n', '\n', '    constructor(address _token) public {\n', '        token = _token;\n', '    }\n', '\n', '    function grantAllowanceProxyAccess(address allowanceOwner) grantOwner public {\n', '        allowanceProxyAccess[allowanceOwner] = true;\n', '    }\n', '\n', '    function denyAllowanceProxyAccess(address allowanceOwner) grantOwner public {\n', '        allowanceProxyAccess[allowanceOwner] = false;\n', '    }\n', '\n', '    function transferAllowance(address destination, uint amount) public returns (bool) {\n', '        require(allowanceProxyAccess[msg.sender], "Sender must have allowance proxy access");\n', '        return ERC20Allowance(token).transferFrom(owner, destination, amount);\n', '    }\n', '\n', '    function setCrowdsale(address _crowdsale) grantOwner public {\n', '        crowdsale = _crowdsale;\n', '    }\n', '\n', '    function transfer(address destination, uint amount) grantCrowdsale public returns (bool)\n', '    {\n', '        return CrowdsaleToken(token).transfer(destination, amount);\n', '    }\n', '\n', '    function balanceOf(address account) grantCrowdsale public view returns (uint)\n', '    {\n', '        if (account == crowdsale) {\n', '            return CrowdsaleToken(token).balanceOf(address(this));\n', '        } else {\n', '            return CrowdsaleToken(token).balanceOf(account);\n', '        }\n', '    }\n', '\n', '    function burn(uint amount) grantCrowdsale public\n', '    {\n', '        CrowdsaleToken(token).burn(amount);\n', '    }\n', '\n', '    modifier grantCrowdsale {\n', '        require(crowdsale != 0x0, "Crowdsale not set");\n', '        require(msg.sender == crowdsale, "Sender must be crowdsale");\n', '        _;\n', '    }\n', '\n', '    function getHardCap() public pure returns(uint)\n', '    {\n', '        return 510000000e18;\n', '    }\n', '\n', '    function isCrowdsaleSuccessful() public view returns(bool)\n', '    {\n', '        return CrowdsaleState(crowdsale).isCrowdsaleSuccessful();\n', '    }\n', '\n', '}']