['pragma solidity ^0.4.18;\n', '\n', 'interface CornFarm\n', '{\n', '    function buyObject(address _beneficiary) public payable;\n', '}\n', '\n', 'interface Corn\n', '{\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TaxManFarmer {\n', '    using SafeMath for uint256;\n', '    \n', '    bool private reentrancy_lock = false;\n', '    \n', '    address public taxMan = 0xd5048F05Ed7185821C999e3e077A3d1baed0952c;\n', '    address[9] public shop = [0x225e5E680358FaE78216A9C0A17793c2d2A85fC2, 0xf9208661ffE1607D96cF386B84B2BE621620097C, \n', '    0x28bdDb555AdF1Bb71ce21cAb60566956bbFB0f08, 0xc8Ac76785C6b413753f6bFEdD9953785876B8a5c, 0x71e7a455991Cd9f60148720e2EB0Bc823014dB32, \n', '    0xC946a2351eA574676f5e21043F05A33c2ceaBC59, 0x0B2DA98ab93207CE1367d63947A20E24372D9Ab5, 0x0029b494669cfE56E8cDBCafF074940CC107a970,\n', '    0xbD4282E6b2Bf8eef232eD211e53b54E560D71a2B];\n', '    address[9] public object = [0x339Cd902D6F2e50717b114f0837280ce56f36020, 0x56021b1b327eBE1eed2182A74d5f6a9a04eB2C73, 0x67BE1A7555A7D38D837F6587530FFc33d89F5a90,\n', '    0x7249fd2B946cAeD7D6C695e1656434A063723926, 0xAc4A1553e1e80222D6BF9f66D8FeF629aa8dBE74, 0x94b10291AA26f29994cF944da0Db6F03D4b407e1,\n', '    0x234FcB7f91fC353fefAd092b393850803A261cf9, 0xab87f28E10E3b0942EB27596Cc73B4031C9856e9, 0xFc1082B4d80651d9948b58ffCce45A5e6586AFE6];\n', '    \n', '    mapping(address => uint256) public workDone;\n', '    \n', '    modifier nonReentrant() {\n', '        require(!reentrancy_lock);\n', '        reentrancy_lock = true;\n', '        _;\n', '        reentrancy_lock = false;\n', '    }\n', '    \n', '    function pepFarm() nonReentrant external {\n', '        // buy 11 of each item\n', '        for (uint8 i = 0; i < 9; i++) { // 9 objects\n', '            for (uint8 j = 0; j < 11; j++) { // 11 times\n', '                CornFarm(shop[i]).buyObject(this);\n', '            }\n', '            \n', '            // 10 for sender, 1 for taxMan\n', '            workDone[msg.sender] = workDone[msg.sender].add(uint256(10 ether));\n', '            workDone[taxMan] = workDone[taxMan].add(uint256(1 ether));\n', '        }\n', '        \n', '    }\n', '    \n', '    function reapFarm() nonReentrant external {\n', '        require(workDone[msg.sender] > 0);\n', '        for (uint8 i = 0; i < 9; i++) {\n', '            Corn(object[i]).transfer(msg.sender, workDone[msg.sender]);\n', '            Corn(object[i]).transfer(taxMan, workDone[taxMan]);\n', '        }\n', '        workDone[msg.sender] = 0;\n', '        workDone[taxMan] = 0;\n', '    }\n', '}']