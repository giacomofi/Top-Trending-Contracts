['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '//import "../node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol";\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard Burnable Token\n', ' * @dev Adds burnFrom method to ERC20 implementations\n', ' */\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _burn(_from, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract CFTToken is StandardBurnableToken {\n', '    // Constants\n', '    string  public constant name = "Crypto Financial Token";\n', '    string  public constant symbol = "CFT";\n', '    uint8   public constant decimals = 18;\n', '    string  public website = "www.cftoken.io"; \n', '    uint256 public constant INITIAL_SUPPLY      =  9000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant CROWDSALE_ALLOWANCE =  6000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant ADMIN_ALLOWANCE     =  3000000000 * (10 ** uint256(decimals));\n', '\n', '    address public owner;\n', '\n', '    // Properties\n', '    //uint256 public totalSupply;\n', '    uint256 public crowdSaleAllowance;      // the number of tokens available for crowdsales\n', '    uint256 public adminAllowance;          // the number of tokens available for the administrator\n', '    address public crowdSaleAddr;           // the address of a crowdsale currently selling this token\n', '    address public adminAddr;               // the address of a crowdsale currently selling this token\n', '    bool public icoStart = false;\n', '    mapping(address => uint256) public tokensTransferred;\n', '\n', '    // Events\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // Modifiers\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        require(_to != owner);\n', '        //require(_to != address(adminAddr));\n', '        //require(_to != address(crowdSaleAddr));\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor(address _admin) public {\n', '        // the owner is a custodian of tokens that can\n', '        // give an allowance of tokens for crowdsales\n', '        // or to the admin, but cannot itself transfer\n', '        // tokens; hence, this requirement\n', '        require(msg.sender != _admin);\n', '\n', '        owner = msg.sender;\n', '\n', '        //totalSupply = INITIAL_SUPPLY;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        crowdSaleAllowance = CROWDSALE_ALLOWANCE;\n', '        adminAllowance = ADMIN_ALLOWANCE;\n', '\n', '        // mint all tokens\n', '        balances[msg.sender] = totalSupply_.sub(adminAllowance);\n', '        emit Transfer(address(0x0), msg.sender, totalSupply_.sub(adminAllowance));\n', '\n', '        balances[_admin] = adminAllowance;\n', '        emit Transfer(address(0x0), _admin, adminAllowance);\n', '\n', '        adminAddr = _admin;\n', '        approve(adminAddr, adminAllowance);\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to start the ICO\n', '    */\n', '    function startICO() external onlyOwner {\n', '        icoStart = true;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to stop the ICO\n', '    */\n', '    function stopICO() external onlyOwner {\n', '        icoStart = false;\n', '    }\n', '\n', '\n', '    function setCrowdsale(address _crowdSaleAddr, uint256 _amountForSale) external onlyOwner {\n', '        require(_amountForSale <= crowdSaleAllowance);\n', '\n', '        // if 0, then full available crowdsale supply is assumed\n', '        uint amount = (_amountForSale == 0) ? crowdSaleAllowance : _amountForSale;\n', '\n', '        // Clear allowance of old, and set allowance of new\n', '        approve(crowdSaleAddr, 0);\n', '        approve(_crowdSaleAddr, amount);\n', '\n', '        crowdSaleAddr = _crowdSaleAddr;\n', '        //icoStart = true;\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public validDestination(_to) returns (bool) {\n', '        if(icoStart && (msg.sender != owner || msg.sender != adminAddr)){\n', '            require((tokensTransferred[msg.sender].add(_value)).mul(2)<=balances[msg.sender].add(tokensTransferred[msg.sender]));\n', '            tokensTransferred[msg.sender] = tokensTransferred[msg.sender].add(_value);\n', '            return super.transfer(_to, _value);\n', '        }else\n', '            return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '\n', '    function burn(uint256 _value) public {\n', '        require(msg.sender==owner || msg.sender==adminAddr);\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '\n', '    function burnFromAdmin(uint256 _value) external onlyOwner {\n', '        _burn(adminAddr, _value);\n', '    }\n', '\n', '    function changeWebsite(string _website) external onlyOwner {website = _website;}\n', '\n', '\n', '}\n', '\n', 'contract CFTSale {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // The beneficiary is the future recipient of the funds\n', '    address public beneficiary;\n', '\n', '    // The crowdsale has a funding goal, cap, deadline, and minimum contribution\n', '    uint public fundingGoal;\n', '    uint public fundingCap;\n', '    uint public minContribution;\n', '    bool public fundingGoalReached = false;\n', '    bool public fundingCapReached = false;\n', '    bool public saleClosed = false;\n', '\n', '    // Time period of sale (UNIX timestamps)\n', '    uint public startTime;\n', '    uint public endTime;\n', '    address public owner;\n', '\n', '    // Keeps track of the amount of wei raised\n', '    uint public amountRaised;\n', '\n', '    // Refund amount, should it be required\n', '    uint public refundAmount;\n', '\n', '    // The ratio of CFT to Ether\n', '    uint public rate = 3000;\n', '    uint public constant LOW_RANGE_RATE = 1;\n', '    uint public constant HIGH_RANGE_RATE = 500000;\n', '\n', '    // prevent certain functions from being recursively called\n', '    bool private rentrancy_lock = false;\n', '    bool public paused = false;\n', '\n', '    // The token being sold\n', '    CFTToken public tokenReward;\n', '\n', '    // A map that tracks the amount of wei contributed by address\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    mapping(address => uint256) public contributions;\n', '    //uint public maxUserContribution = 20 * 1 ether;\n', '    //mapping(address => uint256) public caps;\n', '\n', '    // Events\n', '    event GoalReached(address _beneficiary, uint _amountRaised);\n', '    event CapReached(address _beneficiary, uint _amountRaised);\n', '    event FundTransfer(address _backer, uint _amount, bool _isContribution);\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    // Modifiers\n', '    modifier beforeDeadline()   {require (currentTime() < endTime); _;}\n', '    modifier afterDeadline()    {require (currentTime() >= endTime); _;}\n', '    modifier afterStartTime()    {require (currentTime() >= startTime); _;}\n', '\n', '    modifier saleNotClosed()    {require (!saleClosed); _;}\n', '\n', '    modifier nonReentrant() {\n', '        require(!rentrancy_lock);\n', '        rentrancy_lock = true;\n', '        _;\n', '        rentrancy_lock = false;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    \n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        tokenReward.stopICO();\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        tokenReward.startICO();\n', '        emit Unpause();\n', '    }\n', '\n', '\n', '    constructor(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingGoalInEthers,\n', '        uint fundingCapInEthers,\n', '        uint minimumContributionInWei,\n', '        uint start,\n', '        uint end,\n', '        uint rateCFTToEther,\n', '        address addressOfTokenUsedAsReward\n', '    ) public {\n', '        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this));\n', '        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this));\n', '        require(fundingGoalInEthers <= fundingCapInEthers);\n', '        require(end > 0);\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        fundingCap = fundingCapInEthers * 1 ether;\n', '        minContribution = minimumContributionInWei;\n', '        startTime = start;\n', '        endTime = end; // TODO double check\n', '        rate = rateCFTToEther;\n', '        tokenReward = CFTToken(addressOfTokenUsedAsReward);\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    function () external payable whenNotPaused beforeDeadline afterStartTime saleNotClosed nonReentrant {\n', '        require(msg.value >= minContribution);\n', '        //require(contributions[msg.sender].add(msg.value) <= maxUserContribution);\n', '\n', '        // Update the sender&#39;s balance of wei contributed and the amount raised\n', '        uint amount = msg.value;\n', '        uint currentBalance = balanceOf[msg.sender];\n', '        balanceOf[msg.sender] = currentBalance.add(amount);\n', '        amountRaised = amountRaised.add(amount);\n', '\n', '        // Compute the number of tokens to be rewarded to the sender\n', '        // Note: it&#39;s important for this calculation that both wei\n', '        // and CFT have the same number of decimal places (18)\n', '        uint numTokens = amount.mul(rate);\n', '\n', '        // Transfer the tokens from the crowdsale supply to the sender\n', '        if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {\n', '            emit FundTransfer(msg.sender, amount, true);\n', '            contributions[msg.sender] = contributions[msg.sender].add(amount);\n', '            // Following code is to automatically transfer ETH to beneficiary\n', '            //uint balanceToSend = this.balance;\n', '            //beneficiary.transfer(balanceToSend);\n', '            //FundTransfer(beneficiary, balanceToSend, false);\n', '            checkFundingGoal();\n', '            checkFundingCap();\n', '        }\n', '        else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function terminate() external onlyOwner {\n', '        saleClosed = true;\n', '        tokenReward.stopICO();\n', '    }\n', '\n', '    function setRate(uint _rate) external onlyOwner {\n', '        require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\n', '        rate = _rate;\n', '    }\n', '\n', '    function ownerAllocateTokens(address _to, uint amountWei, uint amountMiniCFT) external\n', '            onlyOwner nonReentrant\n', '    {\n', '        if (!tokenReward.transferFrom(tokenReward.owner(), _to, amountMiniCFT)) {\n', '            revert();\n', '        }\n', '        balanceOf[_to] = balanceOf[_to].add(amountWei);\n', '        amountRaised = amountRaised.add(amountWei);\n', '        emit FundTransfer(_to, amountWei, true);\n', '        checkFundingGoal();\n', '        checkFundingCap();\n', '    }\n', '\n', '    function ownerSafeWithdrawal() external onlyOwner nonReentrant {\n', '        require(fundingGoalReached);\n', '        uint balanceToSend = address(this).balance;\n', '        beneficiary.transfer(balanceToSend);\n', '        emit FundTransfer(beneficiary, balanceToSend, false);\n', '    }\n', '\n', '    function ownerUnlockFund() external afterDeadline onlyOwner {\n', '        fundingGoalReached = false;\n', '    }\n', '\n', '    function safeWithdrawal() external afterDeadline nonReentrant {\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                msg.sender.transfer(amount);\n', '                emit FundTransfer(msg.sender, amount, false);\n', '                refundAmount = refundAmount.add(amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function checkFundingGoal() internal {\n', '        if (!fundingGoalReached) {\n', '            if (amountRaised >= fundingGoal) {\n', '                fundingGoalReached = true;\n', '                emit GoalReached(beneficiary, amountRaised);\n', '            }\n', '        }\n', '    }\n', '\n', '    function checkFundingCap() internal {\n', '        if (!fundingCapReached) {\n', '            if (amountRaised >= fundingCap) {\n', '                fundingCapReached = true;\n', '                saleClosed = true;\n', '                emit CapReached(beneficiary, amountRaised);\n', '            }\n', '        }\n', '    }\n', '\n', '    function currentTime() public view returns (uint _currentTime) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    function convertToMiniCFT(uint amount) internal view returns (uint) {\n', '        return amount * (10 ** uint(tokenReward.decimals()));\n', '    }\n', '\n', '    function changeStartTime(uint256 _startTime) external onlyOwner {startTime = _startTime;}\n', '    function changeEndTime(uint256 _endTime) external onlyOwner {endTime = _endTime;}\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '//import "../node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol";\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard Burnable Token\n', ' * @dev Adds burnFrom method to ERC20 implementations\n', ' */\n', 'contract StandardBurnableToken is BurnableToken, StandardToken {\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens from the target address and decrements allowance\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _value uint256 The amount of token to be burned\n', '   */\n', '  function burnFrom(address _from, uint256 _value) public {\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n', '    // this function needs to emit an event with the updated approval.\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    _burn(_from, _value);\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract CFTToken is StandardBurnableToken {\n', '    // Constants\n', '    string  public constant name = "Crypto Financial Token";\n', '    string  public constant symbol = "CFT";\n', '    uint8   public constant decimals = 18;\n', '    string  public website = "www.cftoken.io"; \n', '    uint256 public constant INITIAL_SUPPLY      =  9000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant CROWDSALE_ALLOWANCE =  6000000000 * (10 ** uint256(decimals));\n', '    uint256 public constant ADMIN_ALLOWANCE     =  3000000000 * (10 ** uint256(decimals));\n', '\n', '    address public owner;\n', '\n', '    // Properties\n', '    //uint256 public totalSupply;\n', '    uint256 public crowdSaleAllowance;      // the number of tokens available for crowdsales\n', '    uint256 public adminAllowance;          // the number of tokens available for the administrator\n', '    address public crowdSaleAddr;           // the address of a crowdsale currently selling this token\n', '    address public adminAddr;               // the address of a crowdsale currently selling this token\n', '    bool public icoStart = false;\n', '    mapping(address => uint256) public tokensTransferred;\n', '\n', '    // Events\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // Modifiers\n', '    modifier validDestination(address _to) {\n', '        require(_to != address(0x0));\n', '        require(_to != address(this));\n', '        require(_to != owner);\n', '        //require(_to != address(adminAddr));\n', '        //require(_to != address(crowdSaleAddr));\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    constructor(address _admin) public {\n', '        // the owner is a custodian of tokens that can\n', '        // give an allowance of tokens for crowdsales\n', '        // or to the admin, but cannot itself transfer\n', '        // tokens; hence, this requirement\n', '        require(msg.sender != _admin);\n', '\n', '        owner = msg.sender;\n', '\n', '        //totalSupply = INITIAL_SUPPLY;\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        crowdSaleAllowance = CROWDSALE_ALLOWANCE;\n', '        adminAllowance = ADMIN_ALLOWANCE;\n', '\n', '        // mint all tokens\n', '        balances[msg.sender] = totalSupply_.sub(adminAllowance);\n', '        emit Transfer(address(0x0), msg.sender, totalSupply_.sub(adminAllowance));\n', '\n', '        balances[_admin] = adminAllowance;\n', '        emit Transfer(address(0x0), _admin, adminAllowance);\n', '\n', '        adminAddr = _admin;\n', '        approve(adminAddr, adminAllowance);\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to start the ICO\n', '    */\n', '    function startICO() external onlyOwner {\n', '        icoStart = true;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to stop the ICO\n', '    */\n', '    function stopICO() external onlyOwner {\n', '        icoStart = false;\n', '    }\n', '\n', '\n', '    function setCrowdsale(address _crowdSaleAddr, uint256 _amountForSale) external onlyOwner {\n', '        require(_amountForSale <= crowdSaleAllowance);\n', '\n', '        // if 0, then full available crowdsale supply is assumed\n', '        uint amount = (_amountForSale == 0) ? crowdSaleAllowance : _amountForSale;\n', '\n', '        // Clear allowance of old, and set allowance of new\n', '        approve(crowdSaleAddr, 0);\n', '        approve(_crowdSaleAddr, amount);\n', '\n', '        crowdSaleAddr = _crowdSaleAddr;\n', '        //icoStart = true;\n', '    }\n', '\n', '\n', '    function transfer(address _to, uint256 _value) public validDestination(_to) returns (bool) {\n', '        if(icoStart && (msg.sender != owner || msg.sender != adminAddr)){\n', '            require((tokensTransferred[msg.sender].add(_value)).mul(2)<=balances[msg.sender].add(tokensTransferred[msg.sender]));\n', '            tokensTransferred[msg.sender] = tokensTransferred[msg.sender].add(_value);\n', '            return super.transfer(_to, _value);\n', '        }else\n', '            return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '\n', '    function burn(uint256 _value) public {\n', '        require(msg.sender==owner || msg.sender==adminAddr);\n', '        _burn(msg.sender, _value);\n', '    }\n', '\n', '\n', '    function burnFromAdmin(uint256 _value) external onlyOwner {\n', '        _burn(adminAddr, _value);\n', '    }\n', '\n', '    function changeWebsite(string _website) external onlyOwner {website = _website;}\n', '\n', '\n', '}\n', '\n', 'contract CFTSale {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // The beneficiary is the future recipient of the funds\n', '    address public beneficiary;\n', '\n', '    // The crowdsale has a funding goal, cap, deadline, and minimum contribution\n', '    uint public fundingGoal;\n', '    uint public fundingCap;\n', '    uint public minContribution;\n', '    bool public fundingGoalReached = false;\n', '    bool public fundingCapReached = false;\n', '    bool public saleClosed = false;\n', '\n', '    // Time period of sale (UNIX timestamps)\n', '    uint public startTime;\n', '    uint public endTime;\n', '    address public owner;\n', '\n', '    // Keeps track of the amount of wei raised\n', '    uint public amountRaised;\n', '\n', '    // Refund amount, should it be required\n', '    uint public refundAmount;\n', '\n', '    // The ratio of CFT to Ether\n', '    uint public rate = 3000;\n', '    uint public constant LOW_RANGE_RATE = 1;\n', '    uint public constant HIGH_RANGE_RATE = 500000;\n', '\n', '    // prevent certain functions from being recursively called\n', '    bool private rentrancy_lock = false;\n', '    bool public paused = false;\n', '\n', '    // The token being sold\n', '    CFTToken public tokenReward;\n', '\n', '    // A map that tracks the amount of wei contributed by address\n', '    mapping(address => uint256) public balanceOf;\n', '\n', '    mapping(address => uint256) public contributions;\n', '    //uint public maxUserContribution = 20 * 1 ether;\n', '    //mapping(address => uint256) public caps;\n', '\n', '    // Events\n', '    event GoalReached(address _beneficiary, uint _amountRaised);\n', '    event CapReached(address _beneficiary, uint _amountRaised);\n', '    event FundTransfer(address _backer, uint _amount, bool _isContribution);\n', '    event Pause();\n', '    event Unpause();\n', '\n', '    // Modifiers\n', '    modifier beforeDeadline()   {require (currentTime() < endTime); _;}\n', '    modifier afterDeadline()    {require (currentTime() >= endTime); _;}\n', '    modifier afterStartTime()    {require (currentTime() >= startTime); _;}\n', '\n', '    modifier saleNotClosed()    {require (!saleClosed); _;}\n', '\n', '    modifier nonReentrant() {\n', '        require(!rentrancy_lock);\n', '        rentrancy_lock = true;\n', '        _;\n', '        rentrancy_lock = false;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    \n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        tokenReward.stopICO();\n', '        emit Pause();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        tokenReward.startICO();\n', '        emit Unpause();\n', '    }\n', '\n', '\n', '    constructor(\n', '        address ifSuccessfulSendTo,\n', '        uint fundingGoalInEthers,\n', '        uint fundingCapInEthers,\n', '        uint minimumContributionInWei,\n', '        uint start,\n', '        uint end,\n', '        uint rateCFTToEther,\n', '        address addressOfTokenUsedAsReward\n', '    ) public {\n', '        require(ifSuccessfulSendTo != address(0) && ifSuccessfulSendTo != address(this));\n', '        require(addressOfTokenUsedAsReward != address(0) && addressOfTokenUsedAsReward != address(this));\n', '        require(fundingGoalInEthers <= fundingCapInEthers);\n', '        require(end > 0);\n', '        beneficiary = ifSuccessfulSendTo;\n', '        fundingGoal = fundingGoalInEthers * 1 ether;\n', '        fundingCap = fundingCapInEthers * 1 ether;\n', '        minContribution = minimumContributionInWei;\n', '        startTime = start;\n', '        endTime = end; // TODO double check\n', '        rate = rateCFTToEther;\n', '        tokenReward = CFTToken(addressOfTokenUsedAsReward);\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    function () external payable whenNotPaused beforeDeadline afterStartTime saleNotClosed nonReentrant {\n', '        require(msg.value >= minContribution);\n', '        //require(contributions[msg.sender].add(msg.value) <= maxUserContribution);\n', '\n', "        // Update the sender's balance of wei contributed and the amount raised\n", '        uint amount = msg.value;\n', '        uint currentBalance = balanceOf[msg.sender];\n', '        balanceOf[msg.sender] = currentBalance.add(amount);\n', '        amountRaised = amountRaised.add(amount);\n', '\n', '        // Compute the number of tokens to be rewarded to the sender\n', "        // Note: it's important for this calculation that both wei\n", '        // and CFT have the same number of decimal places (18)\n', '        uint numTokens = amount.mul(rate);\n', '\n', '        // Transfer the tokens from the crowdsale supply to the sender\n', '        if (tokenReward.transferFrom(tokenReward.owner(), msg.sender, numTokens)) {\n', '            emit FundTransfer(msg.sender, amount, true);\n', '            contributions[msg.sender] = contributions[msg.sender].add(amount);\n', '            // Following code is to automatically transfer ETH to beneficiary\n', '            //uint balanceToSend = this.balance;\n', '            //beneficiary.transfer(balanceToSend);\n', '            //FundTransfer(beneficiary, balanceToSend, false);\n', '            checkFundingGoal();\n', '            checkFundingCap();\n', '        }\n', '        else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function terminate() external onlyOwner {\n', '        saleClosed = true;\n', '        tokenReward.stopICO();\n', '    }\n', '\n', '    function setRate(uint _rate) external onlyOwner {\n', '        require(_rate >= LOW_RANGE_RATE && _rate <= HIGH_RANGE_RATE);\n', '        rate = _rate;\n', '    }\n', '\n', '    function ownerAllocateTokens(address _to, uint amountWei, uint amountMiniCFT) external\n', '            onlyOwner nonReentrant\n', '    {\n', '        if (!tokenReward.transferFrom(tokenReward.owner(), _to, amountMiniCFT)) {\n', '            revert();\n', '        }\n', '        balanceOf[_to] = balanceOf[_to].add(amountWei);\n', '        amountRaised = amountRaised.add(amountWei);\n', '        emit FundTransfer(_to, amountWei, true);\n', '        checkFundingGoal();\n', '        checkFundingCap();\n', '    }\n', '\n', '    function ownerSafeWithdrawal() external onlyOwner nonReentrant {\n', '        require(fundingGoalReached);\n', '        uint balanceToSend = address(this).balance;\n', '        beneficiary.transfer(balanceToSend);\n', '        emit FundTransfer(beneficiary, balanceToSend, false);\n', '    }\n', '\n', '    function ownerUnlockFund() external afterDeadline onlyOwner {\n', '        fundingGoalReached = false;\n', '    }\n', '\n', '    function safeWithdrawal() external afterDeadline nonReentrant {\n', '        if (!fundingGoalReached) {\n', '            uint amount = balanceOf[msg.sender];\n', '            balanceOf[msg.sender] = 0;\n', '            if (amount > 0) {\n', '                msg.sender.transfer(amount);\n', '                emit FundTransfer(msg.sender, amount, false);\n', '                refundAmount = refundAmount.add(amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function checkFundingGoal() internal {\n', '        if (!fundingGoalReached) {\n', '            if (amountRaised >= fundingGoal) {\n', '                fundingGoalReached = true;\n', '                emit GoalReached(beneficiary, amountRaised);\n', '            }\n', '        }\n', '    }\n', '\n', '    function checkFundingCap() internal {\n', '        if (!fundingCapReached) {\n', '            if (amountRaised >= fundingCap) {\n', '                fundingCapReached = true;\n', '                saleClosed = true;\n', '                emit CapReached(beneficiary, amountRaised);\n', '            }\n', '        }\n', '    }\n', '\n', '    function currentTime() public view returns (uint _currentTime) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    function convertToMiniCFT(uint amount) internal view returns (uint) {\n', '        return amount * (10 ** uint(tokenReward.decimals()));\n', '    }\n', '\n', '    function changeStartTime(uint256 _startTime) external onlyOwner {startTime = _startTime;}\n', '    function changeEndTime(uint256 _endTime) external onlyOwner {endTime = _endTime;}\n', '\n', '}']
