['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    require(c / a == b, "Overflow - Multiplication");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "Underflow - Subtraction");\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    require(c >= a, "Overflow - Addition");\n', '    return c;\n', '  }\n', '}\n', '\n', 'library Contract {\n', '\n', '  using SafeMath for uint;\n', '\n', '  // Modifiers: //\n', '\n', '  // Runs two functions before and after a function -\n', '  modifier conditions(function () pure first, function () pure last) {\n', '    first();\n', '    _;\n', '    last();\n', '  }\n', '\n', '  bytes32 internal constant EXEC_PERMISSIONS = keccak256(&#39;script_exec_permissions&#39;);\n', '\n', '  // Sets up contract execution - reads execution id and sender from storage and\n', '  // places in memory, creating getters. Calling this function should be the first\n', '  // action an application does as part of execution, as it sets up memory for\n', '  // execution. Additionally, application functions in the main file should be\n', '  // external, so that memory is not touched prior to calling this function.\n', '  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\n', '  // be reverted to abstract storage to store data, emit events, and forward\n', '  // wei on behalf of the application.\n', '  function authorize(address _script_exec) internal view {\n', '    // Initialize memory\n', '    initialize();\n', '\n', '    // Check that the sender is authorized as a script exec contract for this exec id\n', '    bytes32 perms = EXEC_PERMISSIONS;\n', '    bool authorized;\n', '    assembly {\n', '      // Place the script exec address at 0, and the exec permissions seed after it\n', '      mstore(0, _script_exec)\n', '      mstore(0x20, perms)\n', '      // Hash the resulting 0x34 bytes, and place back into memory at 0\n', '      mstore(0, keccak256(0x0c, 0x34))\n', '      // Place the exec id after the hash -\n', '      mstore(0x20, mload(0x80))\n', '      // Hash the previous hash with the execution id, and check the result\n', '      authorized := sload(keccak256(0, 0x40))\n', '    }\n', '    if (!authorized)\n', '      revert("Sender is not authorized as a script exec address");\n', '  }\n', '\n', '  // Sets up contract execution when initializing an instance of the application\n', '  // First, reads execution id and sender from storage (execution id should be 0xDEAD),\n', '  // then places them in memory, creating getters. Calling this function should be the first\n', '  // action an application does as part of execution, as it sets up memory for\n', '  // execution. Additionally, application functions in the main file should be\n', '  // external, so that memory is not touched prior to calling this function.\n', '  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\n', '  // be reverted to abstract storage to store data, emit events, and forward\n', '  // wei on behalf of the application.\n', '  function initialize() internal view {\n', '    // No memory should have been allocated yet - expect the free memory pointer\n', '    // to point to 0x80 - and throw if it does not\n', '    require(freeMem() == 0x80, "Memory allocated prior to execution");\n', '    // Next, set up memory for execution\n', '    assembly {\n', '      mstore(0x80, sload(0))     // Execution id, read from storage\n', '      mstore(0xa0, sload(1))     // Original sender address, read from storage\n', '      mstore(0xc0, 0)            // Pointer to storage buffer\n', '      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n', '      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n', '      mstore(0x120, 0)           // Number of storage slots written to in buffer\n', '      mstore(0x140, 0)           // Number of events pushed to buffer\n', '      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n', '\n', '      // Update free memory pointer -\n', '      mstore(0x40, 0x180)\n', '    }\n', '    // Ensure that the sender and execution id returned from storage are expected values -\n', '    assert(execID() != bytes32(0) && sender() != address(0));\n', '  }\n', '\n', '  // Calls the passed-in function, performing a memory state check before and after the check\n', '  // is executed.\n', '  function checks(function () view _check) conditions(validState, validState) internal view {\n', '    _check();\n', '  }\n', '\n', '  // Calls the passed-in function, performing a memory state check before and after the check\n', '  // is executed.\n', '  function checks(function () pure _check) conditions(validState, validState) internal pure {\n', '    _check();\n', '  }\n', '\n', '  // Ensures execution completed successfully, and reverts the created storage buffer\n', '  // back to the sender.\n', '  function commit() conditions(validState, none) internal pure {\n', '    // Check value of storage buffer pointer - should be at least 0x180\n', '    bytes32 ptr = buffPtr();\n', '    require(ptr >= 0x180, "Invalid buffer pointer");\n', '\n', '    assembly {\n', '      // Get the size of the buffer\n', '      let size := mload(add(0x20, ptr))\n', '      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n', '      // Revert to storage\n', '      revert(ptr, add(0x40, size))\n', '    }\n', '  }\n', '\n', '  // Helpers: //\n', '\n', '  // Checks to ensure the application was correctly executed -\n', '  function validState() private pure {\n', '    if (freeMem() < 0x180)\n', '      revert(&#39;Expected Contract.execute()&#39;);\n', '\n', '    if (buffPtr() != 0 && buffPtr() < 0x180)\n', '      revert(&#39;Invalid buffer pointer&#39;);\n', '\n', '    assert(execID() != bytes32(0) && sender() != address(0));\n', '  }\n', '\n', '  // Returns a pointer to the execution storage buffer -\n', '  function buffPtr() private pure returns (bytes32 ptr) {\n', '    assembly { ptr := mload(0xc0) }\n', '  }\n', '\n', '  // Returns the location pointed to by the free memory pointer -\n', '  function freeMem() private pure returns (bytes32 ptr) {\n', '    assembly { ptr := mload(0x40) }\n', '  }\n', '\n', '  // Returns the current storage action\n', '  function currentAction() private pure returns (bytes4 action) {\n', '    if (buffPtr() == bytes32(0))\n', '      return bytes4(0);\n', '\n', '    assembly { action := mload(0xe0) }\n', '  }\n', '\n', '  // If the current action is not storing, reverts\n', '  function isStoring() private pure {\n', '    if (currentAction() != STORES)\n', '      revert(&#39;Invalid current action - expected STORES&#39;);\n', '  }\n', '\n', '  // If the current action is not emitting, reverts\n', '  function isEmitting() private pure {\n', '    if (currentAction() != EMITS)\n', '      revert(&#39;Invalid current action - expected EMITS&#39;);\n', '  }\n', '\n', '  // If the current action is not paying, reverts\n', '  function isPaying() private pure {\n', '    if (currentAction() != PAYS)\n', '      revert(&#39;Invalid current action - expected PAYS&#39;);\n', '  }\n', '\n', '  // Initializes a storage buffer in memory -\n', '  function startBuffer() private pure {\n', '    assembly {\n', '      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n', '      let ptr := msize()\n', '      mstore(0xc0, ptr)\n', '      // Clear bytes at pointer -\n', '      mstore(ptr, 0)            // temp ptr\n', '      mstore(add(0x20, ptr), 0) // buffer length\n', '      // Update free memory pointer -\n', '      mstore(0x40, add(0x40, ptr))\n', '      // Set expected next function to &#39;NONE&#39; -\n', '      mstore(0x100, 1)\n', '    }\n', '  }\n', '\n', '  // Checks whether or not it is valid to create a STORES action request -\n', '  function validStoreBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;storing&#39;, and that the buffer has not already\n', '    // completed a STORES action -\n', '    if (stored() != 0 || currentAction() == STORES)\n', '      revert(&#39;Duplicate request - stores&#39;);\n', '  }\n', '\n', '  // Checks whether or not it is valid to create an EMITS action request -\n', '  function validEmitBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;emitting&#39;, and that the buffer has not already\n', '    // completed an EMITS action -\n', '    if (emitted() != 0 || currentAction() == EMITS)\n', '      revert(&#39;Duplicate request - emits&#39;);\n', '  }\n', '\n', '  // Checks whether or not it is valid to create a PAYS action request -\n', '  function validPayBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;paying&#39;, and that the buffer has not already\n', '    // completed an PAYS action -\n', '    if (paid() != 0 || currentAction() == PAYS)\n', '      revert(&#39;Duplicate request - pays&#39;);\n', '  }\n', '\n', '  // Placeholder function when no pre or post condition for a function is needed\n', '  function none() private pure { }\n', '\n', '  // Runtime getters: //\n', '\n', '  // Returns the execution id from memory -\n', '  function execID() internal pure returns (bytes32 exec_id) {\n', '    assembly { exec_id := mload(0x80) }\n', '    require(exec_id != bytes32(0), "Execution id overwritten, or not read");\n', '  }\n', '\n', '  // Returns the original sender from memory -\n', '  function sender() internal pure returns (address addr) {\n', '    assembly { addr := mload(0xa0) }\n', '    require(addr != address(0), "Sender address overwritten, or not read");\n', '  }\n', '\n', '  // Reading from storage: //\n', '\n', '  // Reads from storage, resolving the passed-in location to its true location in storage\n', '  // by hashing with the exec id. Returns the data read from that location\n', '  function read(bytes32 _location) internal view returns (bytes32 data) {\n', '    data = keccak256(_location, execID());\n', '    assembly { data := sload(data) }\n', '  }\n', '\n', '  // Storing data, emitting events, and forwarding payments: //\n', '\n', '  bytes4 internal constant EMITS = bytes4(keccak256(&#39;Emit((bytes32[],bytes)[])&#39;));\n', '  bytes4 internal constant STORES = bytes4(keccak256(&#39;Store(bytes32[])&#39;));\n', '  bytes4 internal constant PAYS = bytes4(keccak256(&#39;Pay(bytes32[])&#39;));\n', '  bytes4 internal constant THROWS = bytes4(keccak256(&#39;Error(string)&#39;));\n', '\n', '  // Function enums -\n', '  enum NextFunction {\n', '    INVALID, NONE, STORE_DEST, VAL_SET, VAL_INC, VAL_DEC, EMIT_LOG, PAY_DEST, PAY_AMT\n', '  }\n', '\n', '  // Checks that a call pushing a storage destination to the buffer is expected and valid\n', '  function validStoreDest() private pure {\n', '    // Ensure that the next function expected pushes a storage destination -\n', '    if (expected() != NextFunction.STORE_DEST)\n', '      revert(&#39;Unexpected function order - expected storage destination to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing STORES actions -\n', '    isStoring();\n', '  }\n', '\n', '  // Checks that a call pushing a storage value to the buffer is expected and valid\n', '  function validStoreVal() private pure {\n', '    // Ensure that the next function expected pushes a storage value -\n', '    if (\n', '      expected() != NextFunction.VAL_SET &&\n', '      expected() != NextFunction.VAL_INC &&\n', '      expected() != NextFunction.VAL_DEC\n', '    ) revert(&#39;Unexpected function order - expected storage value to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing STORES actions -\n', '    isStoring();\n', '  }\n', '\n', '  // Checks that a call pushing a payment destination to the buffer is expected and valid\n', '  function validPayDest() private pure {\n', '    // Ensure that the next function expected pushes a payment destination -\n', '    if (expected() != NextFunction.PAY_DEST)\n', '      revert(&#39;Unexpected function order - expected payment destination to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing PAYS actions -\n', '    isPaying();\n', '  }\n', '\n', '  // Checks that a call pushing a payment amount to the buffer is expected and valid\n', '  function validPayAmt() private pure {\n', '    // Ensure that the next function expected pushes a payment amount -\n', '    if (expected() != NextFunction.PAY_AMT)\n', '      revert(&#39;Unexpected function order - expected payment amount to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing PAYS actions -\n', '    isPaying();\n', '  }\n', '\n', '  // Checks that a call pushing an event to the buffer is expected and valid\n', '  function validEvent() private pure {\n', '    // Ensure that the next function expected pushes an event -\n', '    if (expected() != NextFunction.EMIT_LOG)\n', '      revert(&#39;Unexpected function order - expected event to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing EMITS actions -\n', '    isEmitting();\n', '  }\n', '\n', '  // Begins creating a storage buffer - values and locations pushed will be committed\n', '  // to storage at the end of execution\n', '  function storing() conditions(validStoreBuff, isStoring) internal pure {\n', '    bytes4 action_req = STORES;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the STORES action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (STORES) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets a passed in location to a value passed in via &#39;to&#39;\n', '  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_SET\n', '      mstore(0x100, 3)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return _field;\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, uint _val) internal pure {\n', '    to(_field, bytes32(_val));\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, address _val) internal pure {\n', '    to(_field, bytes32(_val));\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, bool _val) internal pure {\n', '    to(\n', '      _field,\n', '      _val ? bytes32(1) : bytes32(0)\n', '    );\n', '  }\n', '\n', '  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n', '    // Read value stored at the location in storage -\n', '    val = keccak256(_field, execID());\n', '    assembly {\n', '      val := sload(val)\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_INC\n', '      mstore(0x100, 4)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return val;\n', '  }\n', '\n', '  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n', '    // Read value stored at the location in storage -\n', '    val = keccak256(_field, execID());\n', '    assembly {\n', '      val := sload(val)\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_DEC\n', '      mstore(0x100, 5)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return val;\n', '  }\n', '\n', '  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n', '    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n', '    // If it is VAL_DEC, perform safe-sub on the value\n', '    if (expected() == NextFunction.VAL_INC)\n', '      _amt = _amt.add(uint(_val));\n', '    else if (expected() == NextFunction.VAL_DEC)\n', '      _amt = uint(_val).sub(_amt);\n', '    else\n', '      revert(&#39;Expected VAL_INC or VAL_DEC&#39;);\n', '\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Decreases the value at some field by a maximum amount, and sets it to 0 if there will be underflow\n', '  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n', '    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n', '    // _val and _amt, to a minimum of 0\n', '    if (expected() == NextFunction.VAL_DEC) {\n', '      if (_amt >= uint(_val))\n', '        _amt = 0;\n', '      else\n', '        _amt = uint(_val).sub(_amt);\n', '    } else {\n', '      revert(&#39;Expected VAL_DEC&#39;);\n', '    }\n', '\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Begins creating an event log buffer - topics and data pushed will be emitted by\n', '  // storage at the end of execution\n', '  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n', '    bytes4 action_req = EMITS;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (EMITS) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - EMIT_LOG\n', '      mstore(0x100, 6)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 0 to the end of the buffer - event will have 0 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x40 plus the original length\n', '        mstore(ptr, add(0x40, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0x60 plus the original length\n', '        mstore(ptr, add(0x60, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 1 to the end of the buffer - event will have 1 topic\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n', '      // Push topic to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x60 plus the original length\n', '        mstore(ptr, add(0x60, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0x80 plus the original length\n', '        mstore(ptr, add(0x80, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 2 to the end of the buffer - event will have 2 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x80 plus the original length\n', '        mstore(ptr, add(0x80, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xa0 plus the original length\n', '        mstore(ptr, add(0xa0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 3 to the end of the buffer - event will have 3 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0xa0 plus the original length\n', '        mstore(ptr, add(0xa0, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xc0 plus the original length\n', '        mstore(ptr, add(0xc0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 4 to the end of the buffer - event will have 4 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n', '      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0xc0 plus the original length\n', '        mstore(ptr, add(0xc0, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xe0 plus the original length\n', '        mstore(ptr, add(0xe0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Begins creating a storage buffer - destinations entered will be forwarded wei\n', '  // before the end of execution\n', '  function paying() conditions(validPayBuff, isPaying) internal pure {\n', '    bytes4 action_req = PAYS;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (PAYS) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - PAY_AMT\n', '      mstore(0x100, 8)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Pushes an amount of wei to forward to the buffer\n', '  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push payment amount to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - PAY_DEST\n', '      mstore(0x100, 7)\n', '      // Increment PAYS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of payment destinations to be pushed to -\n', '      mstore(0x160, add(1, mload(0x160)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return _amount;\n', '  }\n', '\n', '  // Push an address to forward wei to, to the buffer\n', '  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push payment destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - PAY_AMT\n', '      mstore(0x100, 8)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets the free memory pointer to point beyond all accessed memory\n', '  function setFreeMem() private pure {\n', '    assembly { mstore(0x40, msize) }\n', '  }\n', '\n', '  // Returns the enum representing the next expected function to be called -\n', '  function expected() private pure returns (NextFunction next) {\n', '    assembly { next := mload(0x100) }\n', '  }\n', '\n', '  // Returns the number of events pushed to the storage buffer -\n', '  function emitted() internal pure returns (uint num_emitted) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number emitted from buffer -\n', '    assembly { num_emitted := mload(0x140) }\n', '  }\n', '\n', '  // Returns the number of storage slots pushed to the storage buffer -\n', '  function stored() internal pure returns (uint num_stored) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number stored from buffer -\n', '    assembly { num_stored := mload(0x120) }\n', '  }\n', '\n', '  // Returns the number of payment destinations and amounts pushed to the storage buffer -\n', '  function paid() internal pure returns (uint num_paid) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number paid from buffer -\n', '    assembly { num_paid := mload(0x160) }\n', '  }\n', '}\n', '\n', 'interface GetterInterface {\n', '  function read(bytes32 exec_id, bytes32 location) external view returns (bytes32 data);\n', '  function readMulti(bytes32 exec_id, bytes32[] locations) external view returns (bytes32[] data);\n', '}\n', '\n', 'library ArrayUtils {\n', '\n', '  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n', '    assembly { _conv := _arr }\n', '  }\n', '\n', '  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n', '    assembly { _conv := _arr }\n', '  }\n', '\n', '  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n', '    assembly { _conv := _arr }\n', '  }\n', '}\n', '\n', 'library DutchCrowdsaleIdx {\n', '\n', '  using Contract for *;\n', '  using SafeMath for uint;\n', '  using ArrayUtils for bytes32[];\n', '\n', '  bytes32 internal constant EXEC_PERMISSIONS = keccak256(&#39;script_exec_permissions&#39;);\n', '\n', '  // Returns the storage location of a script execution address&#39;s permissions -\n', '  function execPermissions(address _exec) internal pure returns (bytes32)\n', '    { return keccak256(_exec, EXEC_PERMISSIONS); }\n', '\n', '  /// SALE ///\n', '\n', '  // Storage location of crowdsale admin address\n', '  function admin() internal pure returns (bytes32)\n', '    { return keccak256(&#39;sale_admin&#39;); }\n', '\n', '  // Whether the crowdsale and token are configured, and the sale is ready to run\n', '  function isConfigured() internal pure returns (bytes32)\n', '    { return keccak256("sale_is_configured"); }\n', '\n', '  // Whether or not the crowdsale is post-purchase\n', '  function isFinished() internal pure returns (bytes32)\n', '    { return keccak256("sale_is_completed"); }\n', '\n', '  // Whether the unsold tokens will be burnt on finalization, or be sent to the team wallet\n', '  function burnExcess() internal pure returns (bytes32)\n', '    { return keccak256("burn_excess_unsold"); }\n', '\n', '  // Storage location of the crowdsale&#39;s start time\n', '  function startTime() internal pure returns (bytes32)\n', '    { return keccak256("sale_start_time"); }\n', '\n', '  // Storage location of the amount of time the crowdsale will take, accounting for all tiers\n', '  function totalDuration() internal pure returns (bytes32)\n', '    { return keccak256("sale_total_duration"); }\n', '\n', '  // Returns the storage location of number of tokens remaining in crowdsale\n', '  function tokensRemaining() internal pure returns (bytes32)\n', '    { return keccak256("sale_tokens_remaining"); }\n', '\n', '  // Returns the storage location of crowdsale&#39;s max number of tokens to sell\n', '  function maxSellCap() internal pure returns (bytes32)\n', '    { return keccak256("token_sell_cap"); }\n', '\n', '  // Returns the storage location of crowdsale&#39;s starting sale rate\n', '  function startRate() internal pure returns (bytes32)\n', '    { return keccak256("sale_start_rate"); }\n', '\n', '  // Returns the storage location of crowdsale&#39;s ending sale rate\n', '  function endRate() internal pure returns (bytes32)\n', '    { return keccak256("sale_end_rate"); }\n', '\n', '  // Storage location of the amount of tokens sold in the crowdsale so far\n', '  function tokensSold() internal pure returns (bytes32)\n', '    { return keccak256("sale_tokens_sold"); }\n', '\n', '  // Storage location of the minimum amount of tokens allowed to be purchased\n', '  function globalMinPurchaseAmt() internal pure returns (bytes32)\n', '    { return keccak256("sale_min_purchase_amt"); }\n', '\n', '  // Stores the amount of unique contributors so far in this crowdsale\n', '  function contributors() internal pure returns (bytes32)\n', '    { return keccak256("sale_contributors"); }\n', '\n', '  // Maps addresses to a boolean indicating whether or not this address has contributed\n', '  function hasContributed(address _purchaser) internal pure returns (bytes32)\n', '    { return keccak256(_purchaser, contributors()); }\n', '\n', '  /// FUNDS ///\n', '\n', '  // Storage location of team funds wallet\n', '  function wallet() internal pure returns (bytes32)\n', '    { return keccak256("sale_destination_wallet"); }\n', '\n', '  // Storage location of amount of wei raised during the crowdsale, total\n', '  function totalWeiRaised() internal pure returns (bytes32)\n', '    { return keccak256("sale_tot_wei_raised"); }\n', '\n', '  /// WHITELIST ///\n', '\n', '  // Whether or not the sale is whitelist-enabled\n', '  function isWhitelisted() internal pure returns (bytes32)\n', '    { return keccak256(&#39;sale_is_whitelisted&#39;); }\n', '\n', '  // Stores the sale&#39;s whitelist\n', '  function saleWhitelist() internal pure returns (bytes32)\n', '    { return keccak256("sale_whitelist"); }\n', '\n', '  // Stores a spender&#39;s maximum number of tokens allowed to be purchased\n', '  function whitelistMaxTok(address _spender) internal pure returns (bytes32)\n', '    { return keccak256(_spender, "max_tok", saleWhitelist()); }\n', '\n', '  // Stores a spender&#39;s minimum token purchase amount\n', '  function whitelistMinTok(address _spender) internal pure returns (bytes32)\n', '    { return keccak256(_spender, "min_tok", saleWhitelist()); }\n', '\n', '  /// TOKEN ///\n', '\n', '  // Storage location for token name\n', '  function tokenName() internal pure returns (bytes32)\n', '    { return keccak256("token_name"); }\n', '\n', '  // Storage location for token ticker symbol\n', '  function tokenSymbol() internal pure returns (bytes32)\n', '    { return keccak256("token_symbol"); }\n', '\n', '  // Storage location for token decimals\n', '  function tokenDecimals() internal pure returns (bytes32)\n', '    { return keccak256("token_decimals"); }\n', '\n', '  // Storage location for token totalSupply\n', '  function tokenTotalSupply() internal pure returns (bytes32)\n', '    { return keccak256("token_total_supply"); }\n', '\n', '  // Storage seed for user balances mapping\n', '  bytes32 internal constant TOKEN_BALANCES = keccak256("token_balances");\n', '\n', '  function balances(address _owner) internal pure returns (bytes32)\n', '    { return keccak256(_owner, TOKEN_BALANCES); }\n', '\n', '  // Storage seed for user allowances mapping\n', '  bytes32 internal constant TOKEN_ALLOWANCES = keccak256("token_allowances");\n', '\n', '  function allowed(address _owner, address _spender) internal pure returns (bytes32)\n', '    { return keccak256(_spender, keccak256(_owner, TOKEN_ALLOWANCES)); }\n', '\n', '  // Storage seed for token &#39;transfer agent&#39; status for any address\n', '  // Transfer agents can transfer tokens, even if the crowdsale has not yet been finalized\n', '  bytes32 internal constant TOKEN_TRANSFER_AGENTS = keccak256("token_transfer_agents");\n', '\n', '  function transferAgents(address _agent) internal pure returns (bytes32)\n', '    { return keccak256(_agent, TOKEN_TRANSFER_AGENTS); }\n', '\n', '  /// INIT FUNCTION ///\n', '\n', '  /*\n', '  Creates a crowdsale with initial conditions. The admin should now configure the crowdsale&#39;s token.\n', '\n', '  @param _wallet: The team funds wallet, where crowdsale purchases are forwarded\n', '  @param _total_supply: The total supply of the token that will exist\n', '  @param _max_amount_to_sell: The maximum number of tokens that will be sold during the sale\n', '  @param _starting_rate: The price of 1 token (10^decimals) in wei at the start of the sale\n', '  @param _ending_rate: The price of 1 token (10^decimals) in wei at the end of the sale\n', '  @param _duration: The amount of time the sale will be open\n', '  @param _start_time: The time after which purchases will be enabled\n', '  @param _sale_is_whitelisted: Whether the sale will be configured with a whitelist\n', '  @param _admin: The address given permissions to complete configuration of the sale\n', '  @param _burn_excess: Whether the unpurchased tokens in the sale will be burned, or sent to the team wallet\n', '  */\n', '  function init(\n', '    address _wallet, uint _total_supply, uint _max_amount_to_sell, uint _starting_rate,\n', '    uint _ending_rate, uint _duration, uint _start_time, bool _sale_is_whitelisted,\n', '    address _admin, bool _burn_excess\n', '  ) external view {\n', '    // Ensure valid input\n', '    if (\n', '      _wallet == 0\n', '      || _max_amount_to_sell == 0\n', '      || _max_amount_to_sell > _total_supply\n', '      || _starting_rate <= _ending_rate\n', '      || _ending_rate == 0\n', '      || _start_time <= now\n', '      || _duration + _start_time <= _start_time\n', '      || _admin == 0\n', '    ) revert("Improper Initialization");\n', '\n', '    // Begin execution - we are initializing an instance of this application\n', '    Contract.initialize();\n', '\n', '    // Set up STORES action requests -\n', '    Contract.storing();\n', '    // Authorize sender as an executor for this instance -\n', '    Contract.set(execPermissions(msg.sender)).to(true);\n', '    // Store admin address, team wallet, sale duration, and sale start time\n', '    Contract.set(wallet()).to(_wallet);\n', '    Contract.set(admin()).to(_admin);\n', '    Contract.set(totalDuration()).to(_duration);\n', '    Contract.set(startTime()).to(_start_time);\n', '    // Set sale starting and ending rate, and token supply, sell cap, and number remaining\n', '    Contract.set(startRate()).to(_starting_rate);\n', '    Contract.set(endRate()).to(_ending_rate);\n', '    Contract.set(tokenTotalSupply()).to(_total_supply);\n', '    Contract.set(maxSellCap()).to(_max_amount_to_sell);\n', '    Contract.set(tokensRemaining()).to(_max_amount_to_sell);\n', '    // Set sale whitelist status and admin initial balance (difference bw totalSupply and maxSellCap)\n', '    Contract.set(isWhitelisted()).to(_sale_is_whitelisted);\n', '    Contract.set(balances(_admin)).to(_total_supply - _max_amount_to_sell);\n', '    Contract.set(burnExcess()).to(_burn_excess);\n', '\n', '    // Commit state changes to storage -\n', '    Contract.commit();\n', '  }\n', '\n', '  /// CROWDSALE GETTERS ///\n', '\n', '  // Returns the address of the admin of the crowdsale\n', '  function getAdmin(address _storage, bytes32 _exec_id) external view returns (address)\n', '    { return address(GetterInterface(_storage).read(_exec_id, admin())); }\n', '\n', '  /*\n', '  Returns sale information on a crowdsale\n', '\n', '  @param _storage: The address where storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return wei_raised: The amount of wei raised in the crowdsale so far\n', '  @return team_wallet: The address to which funds are forwarded during this crowdsale\n', '  @return minimum_contribution: The minimum amount of tokens that must be purchased\n', '  @return is_initialized: Whether or not the crowdsale has been completely initialized by the admin\n', '  @return is_finalized: Whether or not the crowdsale has been completely finalized by the admin\n', '  */\n', '  function getCrowdsaleInfo(address _storage, bytes32 _exec_id) external view\n', '  returns (uint wei_raised, address team_wallet, uint minimum_contribution, bool is_initialized, bool is_finalized, bool burn_excess) {\n', '    // Set up bytes32 array to store storage seeds\n', '    bytes32[] memory seed_arr = new bytes32[](6);\n', '\n', '    //Assign each location of seed_arr to its respective seed\n', '    seed_arr[0] = totalWeiRaised();\n', '    seed_arr[1] = wallet();\n', '    seed_arr[2] = globalMinPurchaseAmt();\n', '    seed_arr[3] = isConfigured();\n', '    seed_arr[4] = isFinished();\n', '    seed_arr[5] = burnExcess();\n', '\n', '    //Read and return all wei_raised, wallet address, min_contribution, and init/finalization status\n', '    bytes32[] memory values_arr = GetterInterface(_storage).readMulti(_exec_id, seed_arr);\n', '\n', '    // Assign all return values\n', '    wei_raised = uint(values_arr[0]);\n', '    team_wallet = address(values_arr[1]);\n', '    minimum_contribution = uint(values_arr[2]);\n', '    is_initialized = (values_arr[3] != 0 ? true : false);\n', '    is_finalized = (values_arr[4] != 0 ? true : false);\n', '    burn_excess = values_arr[5] != 0 ? true : false;\n', '  }\n', '\n', '  /*\n', '  Returns true if the all tokens have been sold, or if 1 wei is not enough to purchase a token\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return is_crowdsale_full: Whether or not the total number of tokens to sell in the crowdsale has been reached\n', '  @return max_sellable: The total number of tokens that can be sold in the crowdsale\n', '  */\n', '  function isCrowdsaleFull(address _storage, bytes32 _exec_id) external view returns (bool is_crowdsale_full, uint max_sellable) {\n', '    //Set up bytes32 array to store storage seeds\n', '    bytes32[] memory seed_arr = new bytes32[](2);\n', '    seed_arr[0] = tokensRemaining();\n', '    seed_arr[1] = maxSellCap();\n', '\n', '    // Read and return tokens remaining and max token sell cap\n', '    uint[] memory values_arr = GetterInterface(_storage).readMulti(_exec_id, seed_arr).toUintArr();\n', '\n', '    // Assign return values\n', '    is_crowdsale_full = (values_arr[0] == 0 ? true : false);\n', '    max_sellable = values_arr[1];\n', '\n', '    // If there are still tokens remaining, calculate the amount that can be purchased by 1 wei\n', '    seed_arr = new bytes32[](5);\n', '    seed_arr[0] = startTime();\n', '    seed_arr[1] = startRate();\n', '    seed_arr[2] = totalDuration();\n', '    seed_arr[3] = endRate();\n', '    seed_arr[4] = tokenDecimals();\n', '\n', '    uint num_remaining = values_arr[0];\n', '    // Read information from storage\n', '    values_arr = GetterInterface(_storage).readMulti(_exec_id, seed_arr).toUintArr();\n', '\n', '    uint current_rate;\n', '    (current_rate, ) = getRateAndTimeRemaining(values_arr[0], values_arr[2], values_arr[1], values_arr[3]);\n', '\n', '    // If the current rate and tokens remaining cannot be purchased using 1 wei, return &#39;true&#39; for is_crowdsale_full\n', '    if (current_rate.mul(num_remaining).div(10 ** values_arr[4]) == 0)\n', '      return (true, max_sellable);\n', '  }\n', '\n', '  // Returns the number of unique contributors to a crowdsale\n', '  function getCrowdsaleUniqueBuyers(address _storage, bytes32 _exec_id) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, contributors())); }\n', '\n', '  /*\n', '  Returns the start and end time of the crowdsale\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return start_time: The start time of the crowdsale\n', '  @return end_time: The time at which the crowdsale ends\n', '  */\n', '  function getCrowdsaleStartAndEndTimes(address _storage, bytes32 _exec_id) external view returns (uint start_time, uint end_time) {\n', '    //Set up bytes32 array to store storage seeds\n', '    bytes32[] memory seed_arr = new bytes32[](2);\n', '    seed_arr[0] = startTime();\n', '    seed_arr[1] = totalDuration();\n', '\n', '    // Read and return start time and duration\n', '    uint[] memory values_arr = GetterInterface(_storage).readMulti(_exec_id, seed_arr).toUintArr();\n', '\n', '    // Assign return values\n', '    start_time = values_arr[0];\n', '    end_time = values_arr[1] + start_time;\n', '  }\n', '\n', '  /*\n', '  Returns basic information on the status of the sale\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return start_rate: The price of 1 token (10^decimals) in wei at the start of the sale\n', '  @return end_rate: The price of 1 token (10^decimals) in wei at the end of the sale\n', '  @return current_rate: The price of 1 token (10^decimals) currently\n', '  @return sale_duration: The total duration of the sale\n', '  @return time_remaining: The amount of time remaining in the sale (factors in time till sale starts)\n', '  @return tokens_remaining: The amount of tokens still available to be sold\n', '  @return is_whitelisted: Whether the sale is whitelist-enabled\n', '  */\n', '  function getCrowdsaleStatus(address _storage, bytes32 _exec_id) external view\n', '  returns (uint start_rate, uint end_rate, uint current_rate, uint sale_duration, uint time_remaining, uint tokens_remaining, bool is_whitelisted) {\n', '    //Set up bytes32 array to storage seeds\n', '    bytes32[] memory seed_arr = new bytes32[](6);\n', '\n', '    //Assign seeds to locations of array\n', '    seed_arr[0] = startRate();\n', '    seed_arr[1] = endRate();\n', '    seed_arr[2] = startTime();\n', '    seed_arr[3] = totalDuration();\n', '    seed_arr[4] = tokensRemaining();\n', '    seed_arr[5] = isWhitelisted();\n', '\n', '    //Read and return values\n', '    uint[] memory values_arr = GetterInterface(_storage).readMulti(_exec_id, seed_arr).toUintArr();\n', '\n', '    // Assign return values\n', '    start_rate = values_arr[0];\n', '    end_rate = values_arr[1];\n', '    uint start_time = values_arr[2];\n', '    sale_duration = values_arr[3];\n', '    tokens_remaining = values_arr[4];\n', '    is_whitelisted = values_arr[5] == 0 ? false : true;\n', '\n', '    (current_rate, time_remaining) =\n', '      getRateAndTimeRemaining(start_time, sale_duration, start_rate, end_rate);\n', '  }\n', '\n', '  /*\n', '  Returns the current token sale rate and time remaining\n', '\n', '  @param _start_time: The start time of the crowdsale\n', '  @param _duration: The duration of the crowdsale\n', '  @param _start_rate: The price of 1 token (10^decimals) in wei at the start of the sale\n', '  @param _end_rate: The price of 1 token (10^decimals) in wei at the end of the sale\n', '  @return current_rate: The price of 1 token (10^decimals) currently\n', '  @return time_remaining: The amount of time remaining in the sale (factors in time till sale starts)\n', '  */\n', '  function getRateAndTimeRemaining(uint _start_time, uint _duration, uint _start_rate, uint _end_rate) internal view\n', '  returns (uint current_rate, uint time_remaining)  {\n', '    // If the sale has not started, return start rate and duration plus time till start\n', '    if (now <= _start_time)\n', '      return (_start_rate, (_duration + _start_time - now));\n', '\n', '    uint time_elapsed = now - _start_time;\n', '    // If the sale has ended, return 0 for end rate and time remaining\n', '    if (time_elapsed >= _duration)\n', '      return (0, 0);\n', '\n', '    // Crowdsale is still active -\n', '    time_remaining = _duration - time_elapsed;\n', '    // Calculate current rate, adding decimals for precision -\n', '    time_elapsed *= (10 ** 18);\n', '    current_rate = ((_start_rate - _end_rate) * time_elapsed) / _duration;\n', '    current_rate /= (10 ** 18); // Remove additional precision decimals\n', '    current_rate = _start_rate - current_rate;\n', '  }\n', '\n', '  // Returns the total number of tokens sold during the sale so far\n', '  function getTokensSold(address _storage, bytes32 _exec_id) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, tokensSold())); }\n', '\n', '  /*\n', '  Returns whitelist information for a given buyer\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @param _buyer: The address of the user whose whitelist status will be returned\n', '  @return minimum_purchase_amt: The minimum ammount of tokens the buyer must purchase\n', '  @return max_tokens_remaining: The maximum amount of tokens able to be purchased\n', '  */\n', '  function getWhitelistStatus(address _storage, bytes32 _exec_id, address _buyer) external view\n', '  returns (uint minimum_purchase_amt, uint max_tokens_remaining) {\n', '    bytes32[] memory seed_arr = new bytes32[](2);\n', '    seed_arr[0] = whitelistMinTok(_buyer);\n', '    seed_arr[1] = whitelistMaxTok(_buyer);\n', '\n', '    // Read values from storage\n', '    uint[] memory values_arr = GetterInterface(_storage).readMulti(_exec_id, seed_arr).toUintArr();\n', '\n', '    // Assign return values\n', '    minimum_purchase_amt = values_arr[0];\n', '    max_tokens_remaining = values_arr[1];\n', '  }\n', '\n', '  /*\n', '  Returns the list of whitelisted buyers for the crowdsale\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return num_whitelisted: The length of the sale&#39;s whitelist\n', '  @return whitelist: The sale&#39;s whitelisted addresses\n', '  */\n', '  function getCrowdsaleWhitelist(address _storage, bytes32 _exec_id) external view returns (uint num_whitelisted, address[] whitelist) {\n', '    // Read whitelist length from storage\n', '    num_whitelisted = uint(GetterInterface(_storage).read(_exec_id, saleWhitelist()));\n', '\n', '    if (num_whitelisted == 0)\n', '      return (num_whitelisted, whitelist);\n', '\n', '    // Set up storage seed array for whitelisted addresses\n', '    bytes32[] memory seed_arr = new bytes32[](num_whitelisted);\n', '\n', '    // Assign storage locations of each whitelisted address to array\n', '    for (uint i = 0; i < num_whitelisted; i++)\n', '    \tseed_arr[i] = bytes32(32 * (i + 1) + uint(saleWhitelist()));\n', '\n', '    // Read from storage an assign return value\n', '    whitelist = GetterInterface(_storage).readMulti(_exec_id, seed_arr).toAddressArr();\n', '  }\n', '\n', '  /// TOKEN GETTERS ///\n', '\n', '  // Returns the token balance of an address\n', '  function balanceOf(address _storage, bytes32 _exec_id, address _owner) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, balances(_owner))); }\n', '\n', '  // Returns the amount of tokens a spender may spend on an owner&#39;s behalf\n', '  function allowance(address _storage, bytes32 _exec_id, address _owner, address _spender) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, allowed(_owner, _spender))); }\n', '\n', '  // Returns the number of display decimals for a token\n', '  function decimals(address _storage, bytes32 _exec_id) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, tokenDecimals())); }\n', '\n', '  // Returns the total token supply\n', '  function totalSupply(address _storage, bytes32 _exec_id) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, tokenTotalSupply())); }\n', '\n', '  // Returns the token&#39;s name\n', '  function name(address _storage, bytes32 _exec_id) external view returns (bytes32)\n', '    { return GetterInterface(_storage).read(_exec_id, tokenName()); }\n', '\n', '  // Returns token&#39;s symbol\n', '  function symbol(address _storage, bytes32 _exec_id) external view returns (bytes32)\n', '    { return GetterInterface(_storage).read(_exec_id, tokenSymbol()); }\n', '\n', '  /*\n', '  Returns general information on a token - name, symbol, decimals, and total supply\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return token_name: The name of the token\n', '  @return token_symbol: The token ticker symbol\n', '  @return token_decimals: The display decimals for the token\n', '  @return total_supply: The total supply of the token\n', '  */\n', '  function getTokenInfo(address _storage, bytes32 _exec_id) external view\n', '  returns (bytes32 token_name, bytes32 token_symbol, uint token_decimals, uint total_supply) {\n', '    //Set up bytes32 array to hold storage seeds\n', '    bytes32[] memory seed_arr = new bytes32[](4);\n', '\n', '    //Assign locations of array to respective seeds\n', '    seed_arr[0] = tokenName();\n', '    seed_arr[1] = tokenSymbol();\n', '    seed_arr[2] = tokenDecimals();\n', '    seed_arr[3] = tokenTotalSupply();\n', '\n', '    //Read and return values from storage\n', '    bytes32[] memory values_arr = GetterInterface(_storage).readMulti(_exec_id, seed_arr);\n', '\n', '    //Assign values to return params\n', '    token_name = values_arr[0];\n', '    token_symbol = values_arr[1];\n', '    token_decimals = uint(values_arr[2]);\n', '    total_supply = uint(values_arr[3]);\n', '  }\n', '\n', '  // Returns whether or not an address is a transfer agent, meaning they can transfer tokens before the crowdsale is finished\n', '  function getTransferAgentStatus(address _storage, bytes32 _exec_id, address _agent) external view returns (bool)\n', '    { return GetterInterface(_storage).read(_exec_id, transferAgents(_agent)) != 0 ? true : false; }\n', '}']