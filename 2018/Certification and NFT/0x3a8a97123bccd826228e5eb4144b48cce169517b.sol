['pragma solidity ^0.4.11;\n', '\n', '// File: zeppelin/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/QravityTeamTimelock.sol\n', '\n', 'contract QravityTeamTimelock {\n', '    using SafeMath for uint256;\n', '\n', '    uint16 constant ORIGIN_YEAR = 1970;\n', '\n', '    // Account that can release tokens\n', '    address public controller;\n', '\n', '    uint256 public releasedAmount;\n', '\n', '    ERC20Basic token;\n', '\n', '    function QravityTeamTimelock(ERC20Basic _token, address _controller)\n', '    public\n', '    {\n', '        require(address(_token) != 0x0);\n', '        require(_controller != 0x0);\n', '        token = _token;\n', '        controller = _controller;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release(address _beneficiary, uint256 _amount)\n', '    public\n', '    {\n', '        require(msg.sender == controller);\n', '        require(_amount > 0);\n', '        require(_amount <= availableAmount(now));\n', '        token.transfer(_beneficiary, _amount);\n', '        releasedAmount = releasedAmount.add(_amount);\n', '    }\n', '\n', '    function availableAmount(uint256 timestamp)\n', '    public view\n', '    returns (uint256 amount)\n', '    {\n', '        uint256 totalWalletAmount = releasedAmount.add(token.balanceOf(this));\n', '        uint256 canBeReleasedAmount = totalWalletAmount.mul(availablePercent(timestamp)).div(100);\n', '        return canBeReleasedAmount.sub(releasedAmount);\n', '    }\n', '\n', '    function availablePercent(uint256 timestamp)\n', '    public view\n', '    returns (uint256 factor)\n', '    {\n', '       uint256[10] memory releasePercent = [uint256(0), 20, 30, 40, 50, 60, 70, 80, 90, 100];\n', '       uint[10] memory releaseTimes = [\n', '           toTimestamp(2020, 4, 1),\n', '           toTimestamp(2020, 7, 1),\n', '           toTimestamp(2020, 10, 1),\n', '           toTimestamp(2021, 1, 1),\n', '           toTimestamp(2021, 4, 1),\n', '           toTimestamp(2021, 7, 1),\n', '           toTimestamp(2021, 10, 1),\n', '           toTimestamp(2022, 1, 1),\n', '           toTimestamp(2022, 4, 1),\n', '           0\n', '        ];\n', '\n', '        // Set default to the 0% bonus.\n', '        uint256 timeIndex = 0;\n', '\n', '        for (uint256 i = 0; i < releaseTimes.length; i++) {\n', '            if (timestamp < releaseTimes[i] || releaseTimes[i] == 0) {\n', '                timeIndex = i;\n', '                break;\n', '            }\n', '        }\n', '        return releasePercent[timeIndex];\n', '    }\n', '\n', '    // Timestamp functions based on\n', '    // https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day)\n', '    internal pure returns (uint timestamp) {\n', '        uint16 i;\n', '\n', '        // Year\n', '        timestamp += (year - ORIGIN_YEAR) * 1 years;\n', '        timestamp += (leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR)) * 1 days;\n', '\n', '        // Month\n', '        uint8[12] memory monthDayCounts;\n', '        monthDayCounts[0] = 31;\n', '        if (isLeapYear(year)) {\n', '                monthDayCounts[1] = 29;\n', '        }\n', '        else {\n', '                monthDayCounts[1] = 28;\n', '        }\n', '        monthDayCounts[2] = 31;\n', '        monthDayCounts[3] = 30;\n', '        monthDayCounts[4] = 31;\n', '        monthDayCounts[5] = 30;\n', '        monthDayCounts[6] = 31;\n', '        monthDayCounts[7] = 31;\n', '        monthDayCounts[8] = 30;\n', '        monthDayCounts[9] = 31;\n', '        monthDayCounts[10] = 30;\n', '        monthDayCounts[11] = 31;\n', '\n', '        for (i = 1; i < month; i++) {\n', '            timestamp += monthDayCounts[i - 1] * 1 days;\n', '        }\n', '\n', '        // Day\n', '        timestamp += (day - 1) * 1 days;\n', '\n', '        // Hour, Minute, and Second are assumed as 0 (we calculate in GMT)\n', '\n', '        return timestamp;\n', '    }\n', '\n', '    function leapYearsBefore(uint year)\n', '    internal pure returns (uint) {\n', '        year -= 1;\n', '        return year / 4 - year / 100 + year / 400;\n', '    }\n', '\n', '    function isLeapYear(uint16 year)\n', '    internal pure returns (bool) {\n', '        if (year % 4 != 0) {\n', '            return false;\n', '        }\n', '        if (year % 100 != 0) {\n', '            return true;\n', '        }\n', '        if (year % 400 != 0) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/Bonus.sol\n', '\n', 'library Bonus {\n', '    uint16 constant ORIGIN_YEAR = 1970;\n', '    struct BonusData {\n', '        uint[7] factors; // aditional entry for 0% bonus\n', '        uint[6] cutofftimes;\n', '    }\n', '\n', '    // Use storage keyword so that we write this to persistent storage.\n', '    function initBonus(BonusData storage data)\n', '    internal\n', '    {\n', '        data.factors = [uint256(300), 250, 200, 150, 100, 50, 0];\n', '        data.cutofftimes = [toTimestamp(2018, 9, 1),\n', '                            toTimestamp(2018, 9, 8),\n', '                            toTimestamp(2018, 9, 15),\n', '                            toTimestamp(2018, 9, 22),\n', '                            toTimestamp(2018, 9, 29),\n', '                            toTimestamp(2018, 10, 8)];\n', '    }\n', '\n', '    function getBonusFactor(uint timestamp, BonusData storage data)\n', '    internal view returns (uint256 factor)\n', '    {\n', '        uint256 countcutoffs = data.cutofftimes.length;\n', '        // Set default to the 0% bonus.\n', '        uint256 timeIndex = countcutoffs;\n', '\n', '        for (uint256 i = 0; i < countcutoffs; i++) {\n', '            if (timestamp < data.cutofftimes[i]) {\n', '                timeIndex = i;\n', '                break;\n', '            }\n', '        }\n', '\n', '        return data.factors[timeIndex];\n', '    }\n', '\n', '    function getFollowingCutoffTime(uint timestamp, BonusData storage data)\n', '    internal view returns (uint nextTime)\n', '    {\n', '        uint256 countcutoffs = data.cutofftimes.length;\n', '        // Set default to 0 meaning "no cutoff any more".\n', '        nextTime = 0;\n', '\n', '        for (uint256 i = 0; i < countcutoffs; i++) {\n', '            if (timestamp < data.cutofftimes[i]) {\n', '                nextTime = data.cutofftimes[i];\n', '                break;\n', '            }\n', '        }\n', '\n', '        return nextTime;\n', '    }\n', '\n', '    // Timestamp functions based on\n', '    // https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day)\n', '    internal pure returns (uint timestamp) {\n', '        uint16 i;\n', '\n', '        // Year\n', '        timestamp += (year - ORIGIN_YEAR) * 1 years;\n', '        timestamp += (leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR)) * 1 days;\n', '\n', '        // Month\n', '        uint8[12] memory monthDayCounts;\n', '        monthDayCounts[0] = 31;\n', '        if (isLeapYear(year)) {\n', '                monthDayCounts[1] = 29;\n', '        }\n', '        else {\n', '                monthDayCounts[1] = 28;\n', '        }\n', '        monthDayCounts[2] = 31;\n', '        monthDayCounts[3] = 30;\n', '        monthDayCounts[4] = 31;\n', '        monthDayCounts[5] = 30;\n', '        monthDayCounts[6] = 31;\n', '        monthDayCounts[7] = 31;\n', '        monthDayCounts[8] = 30;\n', '        monthDayCounts[9] = 31;\n', '        monthDayCounts[10] = 30;\n', '        monthDayCounts[11] = 31;\n', '\n', '        for (i = 1; i < month; i++) {\n', '            timestamp += monthDayCounts[i - 1] * 1 days;\n', '        }\n', '\n', '        // Day\n', '        timestamp += (day - 1) * 1 days;\n', '\n', '        // Hour, Minute, and Second are assumed as 0 (we calculate in GMT)\n', '\n', '        return timestamp;\n', '    }\n', '\n', '    function leapYearsBefore(uint year)\n', '    internal pure returns (uint) {\n', '        year -= 1;\n', '        return year / 4 - year / 100 + year / 400;\n', '    }\n', '\n', '    function isLeapYear(uint16 year)\n', '    internal pure returns (bool) {\n', '        if (year % 4 != 0) {\n', '            return false;\n', '        }\n', '        if (year % 100 != 0) {\n', '            return true;\n', '        }\n', '        if (year % 400 != 0) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/QCOToken.sol\n', '\n', '/*\n', 'Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20.\n', '*/\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '\n', '\n', 'contract QCOToken is StandardToken {\n', '\n', '    // data structures\n', '    enum States {\n', '        Initial, // deployment time\n', '        ValuationSet,\n', '        Ico, // whitelist addresses, accept funds, update balances\n', '        Aborted, // ICO aborted\n', '        Operational, // production phase\n', '        Paused         // for contract upgrades\n', '    }\n', '\n', '    mapping(address => uint256) public ethPossibleRefunds;\n', '\n', '    uint256 public soldTokens;\n', '\n', '    string public constant name = "Qravity Coin Token";\n', '\n', '    string public constant symbol = "QCO";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    address public stateControl;\n', '\n', '    address public whitelistControl;\n', '\n', '    address public withdrawControl;\n', '\n', '    address public tokenAssignmentControl;\n', '\n', '    address public teamWallet;\n', '\n', '    address public reserves;\n', '\n', '    States public state;\n', '\n', '    uint256 public endBlock;\n', '\n', '    uint256 public ETH_QCO; //number of tokens per ETH\n', '\n', '    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n', '\n', '    uint256 public constant maxTotalSupply = 1000000000 * pointMultiplier; //1B tokens\n', '\n', '    uint256 public constant percentForSale = 50;\n', '\n', '    Bonus.BonusData bonusData;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    //pausing the contract should extend the ico dates into the future.\n', '    uint256 public pauseOffset = 0;\n', '\n', '    uint256 public pauseLastStart = 0;\n', '\n', '\n', '    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n', '    function QCOToken(\n', '        address _stateControl\n', '    , address _whitelistControl\n', '    , address _withdrawControl\n', '    , address _tokenAssignmentControl\n', '    , address _teamControl\n', '    , address _reserves)\n', '    public\n', '    {\n', '        stateControl = _stateControl;\n', '        whitelistControl = _whitelistControl;\n', '        withdrawControl = _withdrawControl;\n', '        tokenAssignmentControl = _tokenAssignmentControl;\n', '        moveToState(States.Initial);\n', '        endBlock = 0;\n', '        ETH_QCO = 0;\n', '        totalSupply = maxTotalSupply;\n', '        soldTokens = 0;\n', '        Bonus.initBonus(bonusData);\n', '        teamWallet = address(new QravityTeamTimelock(this, _teamControl));\n', '\n', '        reserves = _reserves;\n', '        balances[reserves] = totalSupply;\n', '        Mint(reserves, totalSupply);\n', '        Transfer(0x0, reserves, totalSupply);\n', '    }\n', '\n', '    event Whitelisted(address addr);\n', '\n', '    event StateTransition(States oldState, States newState);\n', '\n', '    modifier onlyWhitelist() {\n', '        require(msg.sender == whitelistControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStateControl() {\n', '        require(msg.sender == stateControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyTokenAssignmentControl() {\n', '        require(msg.sender == tokenAssignmentControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWithdraw() {\n', '        require(msg.sender == withdrawControl);\n', '        _;\n', '    }\n', '\n', '    modifier requireState(States _requiredState) {\n', '        require(state == _requiredState);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    BEGIN ICO functions\n', '    */\n', '\n', '    //this is the main funding function, it updates the balances of tokens during the ICO.\n', '    //no particular incentive schemes have been implemented here\n', '    //it is only accessible during the "ICO" phase.\n', '    function() payable\n', '    public\n', '    requireState(States.Ico)\n', '    {\n', '        require(whitelist[msg.sender] == true);\n', '        require(msg.value > 0);\n', '        // We have reports that some wallet contracts may end up sending a single null-byte.\n', '        // Still reject calls of unknown functions, which are always at least 4 bytes of data.\n', '        require(msg.data.length < 4);\n', '        require(block.number < endBlock);\n', '\n', '        uint256 soldToTuserWithBonus = calcBonus(msg.value);\n', '\n', '        issueTokensToUser(msg.sender, soldToTuserWithBonus);\n', '        ethPossibleRefunds[msg.sender] = ethPossibleRefunds[msg.sender].add(msg.value);\n', '    }\n', '\n', '    function issueTokensToUser(address beneficiary, uint256 amount)\n', '    internal\n', '    {\n', '        uint256 soldTokensAfterInvestment = soldTokens.add(amount);\n', '        require(soldTokensAfterInvestment <= maxTotalSupply.mul(percentForSale).div(100));\n', '\n', '        balances[beneficiary] = balances[beneficiary].add(amount);\n', '        balances[reserves] = balances[reserves].sub(amount);\n', '        soldTokens = soldTokensAfterInvestment;\n', '        Transfer(reserves, beneficiary, amount);\n', '    }\n', '\n', '    function getCurrentBonusFactor()\n', '    public view\n', '    returns (uint256 factor)\n', '    {\n', '        //we pass in  now-pauseOffset as the "now time" for purposes of calculating the bonus factor\n', '        return Bonus.getBonusFactor(now - pauseOffset, bonusData);\n', '    }\n', '\n', '    function getNextCutoffTime()\n', '    public view returns (uint timestamp)\n', '    {\n', '        return Bonus.getFollowingCutoffTime(now - pauseOffset, bonusData);\n', '    }\n', '\n', '    function calcBonus(uint256 weiAmount)\n', '    constant\n', '    public\n', '    returns (uint256 resultingTokens)\n', '    {\n', '        uint256 basisTokens = weiAmount.mul(ETH_QCO);\n', '        //percentages are integer numbers as per mill (promille) so we can accurately calculate 0.5% = 5. 100% = 1000\n', '        uint256 perMillBonus = getCurrentBonusFactor();\n', '        //100% + bonus % times original amount divided by 100%.\n', '        return basisTokens.mul(per_mill + perMillBonus).div(per_mill);\n', '    }\n', '\n', '    uint256 constant per_mill = 1000;\n', '\n', '\n', '    function moveToState(States _newState)\n', '    internal\n', '    {\n', '        StateTransition(state, _newState);\n', '        state = _newState;\n', '    }\n', '    // ICO contract configuration function\n', '    // new_ETH_QCO is the new rate of ETH in QCO to use when no bonus applies\n', '    // newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\n', '    function updateEthICOVariables(uint256 _new_ETH_QCO, uint256 _newEndBlock)\n', '    public\n', '    onlyStateControl\n', '    {\n', '        require(state == States.Initial || state == States.ValuationSet);\n', '        require(_new_ETH_QCO > 0);\n', '        require(block.number < _newEndBlock);\n', '        endBlock = _newEndBlock;\n', '        // initial conversion rate of ETH_QCO set now, this is used during the Ico phase.\n', '        ETH_QCO = _new_ETH_QCO;\n', '        moveToState(States.ValuationSet);\n', '    }\n', '\n', '    function startICO()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.ValuationSet)\n', '    {\n', '        require(block.number < endBlock);\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    function addPresaleAmount(address beneficiary, uint256 amount)\n', '    public\n', '    onlyTokenAssignmentControl\n', '    {\n', '        require(state == States.ValuationSet || state == States.Ico);\n', '        issueTokensToUser(beneficiary, amount);\n', '    }\n', '\n', '\n', '    function endICO()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        burnAndFinish();\n', '        moveToState(States.Operational);\n', '    }\n', '\n', '    function anyoneEndICO()\n', '    public\n', '    requireState(States.Ico)\n', '    {\n', '        require(block.number > endBlock);\n', '        burnAndFinish();\n', '        moveToState(States.Operational);\n', '    }\n', '\n', '    function burnAndFinish()\n', '    internal\n', '    {\n', '        totalSupply = soldTokens.mul(100).div(percentForSale);\n', '\n', '        uint256 teamAmount = totalSupply.mul(22).div(100);\n', '        balances[teamWallet] = teamAmount;\n', '        Transfer(reserves, teamWallet, teamAmount);\n', '\n', '        uint256 reservesAmount = totalSupply.sub(soldTokens).sub(teamAmount);\n', '        // Burn all tokens over the target amount.\n', '        Transfer(reserves, 0x0, balances[reserves].sub(reservesAmount).sub(teamAmount));\n', '        balances[reserves] = reservesAmount;\n', '\n', '        mintingFinished = true;\n', '        MintFinished();\n', '    }\n', '\n', '    function addToWhitelist(address _whitelisted)\n', '    public\n', '    onlyWhitelist\n', '        //    requireState(States.Ico)\n', '    {\n', '        whitelist[_whitelisted] = true;\n', '        Whitelisted(_whitelisted);\n', '    }\n', '\n', '\n', '    //emergency pause for the ICO\n', '    function pause()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        moveToState(States.Paused);\n', '        pauseLastStart = now;\n', '    }\n', '\n', '    //in case we want to completely abort\n', '    function abort()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Aborted);\n', '    }\n', '\n', '    //un-pause\n', '    function resumeICO()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Ico);\n', '        //increase pauseOffset by the time it was paused\n', '        pauseOffset = pauseOffset + (now - pauseLastStart);\n', '    }\n', '\n', '    //in case of a failed/aborted ICO every investor can get back their money\n', '    function requestRefund()\n', '    public\n', '    requireState(States.Aborted)\n', '    {\n', '        require(ethPossibleRefunds[msg.sender] > 0);\n', '        //there is no need for updateAccount(msg.sender) since the token never became active.\n', '        uint256 payout = ethPossibleRefunds[msg.sender];\n', '        //reverse calculate the amount to pay out\n', '        ethPossibleRefunds[msg.sender] = 0;\n', '        msg.sender.transfer(payout);\n', '    }\n', '\n', '    //after the ICO has run its course, the withdraw account can drain funds bit-by-bit as needed.\n', '    function requestPayout(uint _amount)\n', '    public\n', '    onlyWithdraw //very important!\n', '    requireState(States.Operational)\n', '    {\n', '        msg.sender.transfer(_amount);\n', '    }\n', '\n', '    //if this contract gets a balance in some other ERC20 contract - or even iself - then we can rescue it.\n', '    function rescueToken(ERC20Basic _foreignToken, address _to)\n', '    public\n', '    onlyTokenAssignmentControl\n', '    {\n', '        _foreignToken.transfer(_to, _foreignToken.balanceOf(this));\n', '    }\n', '    /**\n', '    END ICO functions\n', '    */\n', '\n', '    /**\n', '    BEGIN ERC20 functions\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '    public\n', '    requireState(States.Operational)\n', '    returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    requireState(States.Operational)\n', '    returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    END ERC20 functions\n', '    */\n', '}']
['pragma solidity ^0.4.11;\n', '\n', '// File: zeppelin/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/QravityTeamTimelock.sol\n', '\n', 'contract QravityTeamTimelock {\n', '    using SafeMath for uint256;\n', '\n', '    uint16 constant ORIGIN_YEAR = 1970;\n', '\n', '    // Account that can release tokens\n', '    address public controller;\n', '\n', '    uint256 public releasedAmount;\n', '\n', '    ERC20Basic token;\n', '\n', '    function QravityTeamTimelock(ERC20Basic _token, address _controller)\n', '    public\n', '    {\n', '        require(address(_token) != 0x0);\n', '        require(_controller != 0x0);\n', '        token = _token;\n', '        controller = _controller;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers tokens held by timelock to beneficiary.\n', '     */\n', '    function release(address _beneficiary, uint256 _amount)\n', '    public\n', '    {\n', '        require(msg.sender == controller);\n', '        require(_amount > 0);\n', '        require(_amount <= availableAmount(now));\n', '        token.transfer(_beneficiary, _amount);\n', '        releasedAmount = releasedAmount.add(_amount);\n', '    }\n', '\n', '    function availableAmount(uint256 timestamp)\n', '    public view\n', '    returns (uint256 amount)\n', '    {\n', '        uint256 totalWalletAmount = releasedAmount.add(token.balanceOf(this));\n', '        uint256 canBeReleasedAmount = totalWalletAmount.mul(availablePercent(timestamp)).div(100);\n', '        return canBeReleasedAmount.sub(releasedAmount);\n', '    }\n', '\n', '    function availablePercent(uint256 timestamp)\n', '    public view\n', '    returns (uint256 factor)\n', '    {\n', '       uint256[10] memory releasePercent = [uint256(0), 20, 30, 40, 50, 60, 70, 80, 90, 100];\n', '       uint[10] memory releaseTimes = [\n', '           toTimestamp(2020, 4, 1),\n', '           toTimestamp(2020, 7, 1),\n', '           toTimestamp(2020, 10, 1),\n', '           toTimestamp(2021, 1, 1),\n', '           toTimestamp(2021, 4, 1),\n', '           toTimestamp(2021, 7, 1),\n', '           toTimestamp(2021, 10, 1),\n', '           toTimestamp(2022, 1, 1),\n', '           toTimestamp(2022, 4, 1),\n', '           0\n', '        ];\n', '\n', '        // Set default to the 0% bonus.\n', '        uint256 timeIndex = 0;\n', '\n', '        for (uint256 i = 0; i < releaseTimes.length; i++) {\n', '            if (timestamp < releaseTimes[i] || releaseTimes[i] == 0) {\n', '                timeIndex = i;\n', '                break;\n', '            }\n', '        }\n', '        return releasePercent[timeIndex];\n', '    }\n', '\n', '    // Timestamp functions based on\n', '    // https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day)\n', '    internal pure returns (uint timestamp) {\n', '        uint16 i;\n', '\n', '        // Year\n', '        timestamp += (year - ORIGIN_YEAR) * 1 years;\n', '        timestamp += (leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR)) * 1 days;\n', '\n', '        // Month\n', '        uint8[12] memory monthDayCounts;\n', '        monthDayCounts[0] = 31;\n', '        if (isLeapYear(year)) {\n', '                monthDayCounts[1] = 29;\n', '        }\n', '        else {\n', '                monthDayCounts[1] = 28;\n', '        }\n', '        monthDayCounts[2] = 31;\n', '        monthDayCounts[3] = 30;\n', '        monthDayCounts[4] = 31;\n', '        monthDayCounts[5] = 30;\n', '        monthDayCounts[6] = 31;\n', '        monthDayCounts[7] = 31;\n', '        monthDayCounts[8] = 30;\n', '        monthDayCounts[9] = 31;\n', '        monthDayCounts[10] = 30;\n', '        monthDayCounts[11] = 31;\n', '\n', '        for (i = 1; i < month; i++) {\n', '            timestamp += monthDayCounts[i - 1] * 1 days;\n', '        }\n', '\n', '        // Day\n', '        timestamp += (day - 1) * 1 days;\n', '\n', '        // Hour, Minute, and Second are assumed as 0 (we calculate in GMT)\n', '\n', '        return timestamp;\n', '    }\n', '\n', '    function leapYearsBefore(uint year)\n', '    internal pure returns (uint) {\n', '        year -= 1;\n', '        return year / 4 - year / 100 + year / 400;\n', '    }\n', '\n', '    function isLeapYear(uint16 year)\n', '    internal pure returns (bool) {\n', '        if (year % 4 != 0) {\n', '            return false;\n', '        }\n', '        if (year % 100 != 0) {\n', '            return true;\n', '        }\n', '        if (year % 400 != 0) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/Bonus.sol\n', '\n', 'library Bonus {\n', '    uint16 constant ORIGIN_YEAR = 1970;\n', '    struct BonusData {\n', '        uint[7] factors; // aditional entry for 0% bonus\n', '        uint[6] cutofftimes;\n', '    }\n', '\n', '    // Use storage keyword so that we write this to persistent storage.\n', '    function initBonus(BonusData storage data)\n', '    internal\n', '    {\n', '        data.factors = [uint256(300), 250, 200, 150, 100, 50, 0];\n', '        data.cutofftimes = [toTimestamp(2018, 9, 1),\n', '                            toTimestamp(2018, 9, 8),\n', '                            toTimestamp(2018, 9, 15),\n', '                            toTimestamp(2018, 9, 22),\n', '                            toTimestamp(2018, 9, 29),\n', '                            toTimestamp(2018, 10, 8)];\n', '    }\n', '\n', '    function getBonusFactor(uint timestamp, BonusData storage data)\n', '    internal view returns (uint256 factor)\n', '    {\n', '        uint256 countcutoffs = data.cutofftimes.length;\n', '        // Set default to the 0% bonus.\n', '        uint256 timeIndex = countcutoffs;\n', '\n', '        for (uint256 i = 0; i < countcutoffs; i++) {\n', '            if (timestamp < data.cutofftimes[i]) {\n', '                timeIndex = i;\n', '                break;\n', '            }\n', '        }\n', '\n', '        return data.factors[timeIndex];\n', '    }\n', '\n', '    function getFollowingCutoffTime(uint timestamp, BonusData storage data)\n', '    internal view returns (uint nextTime)\n', '    {\n', '        uint256 countcutoffs = data.cutofftimes.length;\n', '        // Set default to 0 meaning "no cutoff any more".\n', '        nextTime = 0;\n', '\n', '        for (uint256 i = 0; i < countcutoffs; i++) {\n', '            if (timestamp < data.cutofftimes[i]) {\n', '                nextTime = data.cutofftimes[i];\n', '                break;\n', '            }\n', '        }\n', '\n', '        return nextTime;\n', '    }\n', '\n', '    // Timestamp functions based on\n', '    // https://github.com/pipermerriam/ethereum-datetime/blob/master/contracts/DateTime.sol\n', '    function toTimestamp(uint16 year, uint8 month, uint8 day)\n', '    internal pure returns (uint timestamp) {\n', '        uint16 i;\n', '\n', '        // Year\n', '        timestamp += (year - ORIGIN_YEAR) * 1 years;\n', '        timestamp += (leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR)) * 1 days;\n', '\n', '        // Month\n', '        uint8[12] memory monthDayCounts;\n', '        monthDayCounts[0] = 31;\n', '        if (isLeapYear(year)) {\n', '                monthDayCounts[1] = 29;\n', '        }\n', '        else {\n', '                monthDayCounts[1] = 28;\n', '        }\n', '        monthDayCounts[2] = 31;\n', '        monthDayCounts[3] = 30;\n', '        monthDayCounts[4] = 31;\n', '        monthDayCounts[5] = 30;\n', '        monthDayCounts[6] = 31;\n', '        monthDayCounts[7] = 31;\n', '        monthDayCounts[8] = 30;\n', '        monthDayCounts[9] = 31;\n', '        monthDayCounts[10] = 30;\n', '        monthDayCounts[11] = 31;\n', '\n', '        for (i = 1; i < month; i++) {\n', '            timestamp += monthDayCounts[i - 1] * 1 days;\n', '        }\n', '\n', '        // Day\n', '        timestamp += (day - 1) * 1 days;\n', '\n', '        // Hour, Minute, and Second are assumed as 0 (we calculate in GMT)\n', '\n', '        return timestamp;\n', '    }\n', '\n', '    function leapYearsBefore(uint year)\n', '    internal pure returns (uint) {\n', '        year -= 1;\n', '        return year / 4 - year / 100 + year / 400;\n', '    }\n', '\n', '    function isLeapYear(uint16 year)\n', '    internal pure returns (bool) {\n', '        if (year % 4 != 0) {\n', '            return false;\n', '        }\n', '        if (year % 100 != 0) {\n', '            return true;\n', '        }\n', '        if (year % 400 != 0) {\n', '            return false;\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/QCOToken.sol\n', '\n', '/*\n', 'Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20.\n', '*/\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '\n', '\n', 'contract QCOToken is StandardToken {\n', '\n', '    // data structures\n', '    enum States {\n', '        Initial, // deployment time\n', '        ValuationSet,\n', '        Ico, // whitelist addresses, accept funds, update balances\n', '        Aborted, // ICO aborted\n', '        Operational, // production phase\n', '        Paused         // for contract upgrades\n', '    }\n', '\n', '    mapping(address => uint256) public ethPossibleRefunds;\n', '\n', '    uint256 public soldTokens;\n', '\n', '    string public constant name = "Qravity Coin Token";\n', '\n', '    string public constant symbol = "QCO";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping(address => bool) public whitelist;\n', '\n', '    address public stateControl;\n', '\n', '    address public whitelistControl;\n', '\n', '    address public withdrawControl;\n', '\n', '    address public tokenAssignmentControl;\n', '\n', '    address public teamWallet;\n', '\n', '    address public reserves;\n', '\n', '    States public state;\n', '\n', '    uint256 public endBlock;\n', '\n', '    uint256 public ETH_QCO; //number of tokens per ETH\n', '\n', '    uint256 constant pointMultiplier = 1e18; //100% = 1*10^18 points\n', '\n', '    uint256 public constant maxTotalSupply = 1000000000 * pointMultiplier; //1B tokens\n', '\n', '    uint256 public constant percentForSale = 50;\n', '\n', '    Bonus.BonusData bonusData;\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    //pausing the contract should extend the ico dates into the future.\n', '    uint256 public pauseOffset = 0;\n', '\n', '    uint256 public pauseLastStart = 0;\n', '\n', '\n', '    //this creates the contract and stores the owner. it also passes in 3 addresses to be used later during the lifetime of the contract.\n', '    function QCOToken(\n', '        address _stateControl\n', '    , address _whitelistControl\n', '    , address _withdrawControl\n', '    , address _tokenAssignmentControl\n', '    , address _teamControl\n', '    , address _reserves)\n', '    public\n', '    {\n', '        stateControl = _stateControl;\n', '        whitelistControl = _whitelistControl;\n', '        withdrawControl = _withdrawControl;\n', '        tokenAssignmentControl = _tokenAssignmentControl;\n', '        moveToState(States.Initial);\n', '        endBlock = 0;\n', '        ETH_QCO = 0;\n', '        totalSupply = maxTotalSupply;\n', '        soldTokens = 0;\n', '        Bonus.initBonus(bonusData);\n', '        teamWallet = address(new QravityTeamTimelock(this, _teamControl));\n', '\n', '        reserves = _reserves;\n', '        balances[reserves] = totalSupply;\n', '        Mint(reserves, totalSupply);\n', '        Transfer(0x0, reserves, totalSupply);\n', '    }\n', '\n', '    event Whitelisted(address addr);\n', '\n', '    event StateTransition(States oldState, States newState);\n', '\n', '    modifier onlyWhitelist() {\n', '        require(msg.sender == whitelistControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyStateControl() {\n', '        require(msg.sender == stateControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyTokenAssignmentControl() {\n', '        require(msg.sender == tokenAssignmentControl);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWithdraw() {\n', '        require(msg.sender == withdrawControl);\n', '        _;\n', '    }\n', '\n', '    modifier requireState(States _requiredState) {\n', '        require(state == _requiredState);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    BEGIN ICO functions\n', '    */\n', '\n', '    //this is the main funding function, it updates the balances of tokens during the ICO.\n', '    //no particular incentive schemes have been implemented here\n', '    //it is only accessible during the "ICO" phase.\n', '    function() payable\n', '    public\n', '    requireState(States.Ico)\n', '    {\n', '        require(whitelist[msg.sender] == true);\n', '        require(msg.value > 0);\n', '        // We have reports that some wallet contracts may end up sending a single null-byte.\n', '        // Still reject calls of unknown functions, which are always at least 4 bytes of data.\n', '        require(msg.data.length < 4);\n', '        require(block.number < endBlock);\n', '\n', '        uint256 soldToTuserWithBonus = calcBonus(msg.value);\n', '\n', '        issueTokensToUser(msg.sender, soldToTuserWithBonus);\n', '        ethPossibleRefunds[msg.sender] = ethPossibleRefunds[msg.sender].add(msg.value);\n', '    }\n', '\n', '    function issueTokensToUser(address beneficiary, uint256 amount)\n', '    internal\n', '    {\n', '        uint256 soldTokensAfterInvestment = soldTokens.add(amount);\n', '        require(soldTokensAfterInvestment <= maxTotalSupply.mul(percentForSale).div(100));\n', '\n', '        balances[beneficiary] = balances[beneficiary].add(amount);\n', '        balances[reserves] = balances[reserves].sub(amount);\n', '        soldTokens = soldTokensAfterInvestment;\n', '        Transfer(reserves, beneficiary, amount);\n', '    }\n', '\n', '    function getCurrentBonusFactor()\n', '    public view\n', '    returns (uint256 factor)\n', '    {\n', '        //we pass in  now-pauseOffset as the "now time" for purposes of calculating the bonus factor\n', '        return Bonus.getBonusFactor(now - pauseOffset, bonusData);\n', '    }\n', '\n', '    function getNextCutoffTime()\n', '    public view returns (uint timestamp)\n', '    {\n', '        return Bonus.getFollowingCutoffTime(now - pauseOffset, bonusData);\n', '    }\n', '\n', '    function calcBonus(uint256 weiAmount)\n', '    constant\n', '    public\n', '    returns (uint256 resultingTokens)\n', '    {\n', '        uint256 basisTokens = weiAmount.mul(ETH_QCO);\n', '        //percentages are integer numbers as per mill (promille) so we can accurately calculate 0.5% = 5. 100% = 1000\n', '        uint256 perMillBonus = getCurrentBonusFactor();\n', '        //100% + bonus % times original amount divided by 100%.\n', '        return basisTokens.mul(per_mill + perMillBonus).div(per_mill);\n', '    }\n', '\n', '    uint256 constant per_mill = 1000;\n', '\n', '\n', '    function moveToState(States _newState)\n', '    internal\n', '    {\n', '        StateTransition(state, _newState);\n', '        state = _newState;\n', '    }\n', '    // ICO contract configuration function\n', '    // new_ETH_QCO is the new rate of ETH in QCO to use when no bonus applies\n', '    // newEndBlock is the absolute block number at which the ICO must stop. It must be set after now + silence period.\n', '    function updateEthICOVariables(uint256 _new_ETH_QCO, uint256 _newEndBlock)\n', '    public\n', '    onlyStateControl\n', '    {\n', '        require(state == States.Initial || state == States.ValuationSet);\n', '        require(_new_ETH_QCO > 0);\n', '        require(block.number < _newEndBlock);\n', '        endBlock = _newEndBlock;\n', '        // initial conversion rate of ETH_QCO set now, this is used during the Ico phase.\n', '        ETH_QCO = _new_ETH_QCO;\n', '        moveToState(States.ValuationSet);\n', '    }\n', '\n', '    function startICO()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.ValuationSet)\n', '    {\n', '        require(block.number < endBlock);\n', '        moveToState(States.Ico);\n', '    }\n', '\n', '    function addPresaleAmount(address beneficiary, uint256 amount)\n', '    public\n', '    onlyTokenAssignmentControl\n', '    {\n', '        require(state == States.ValuationSet || state == States.Ico);\n', '        issueTokensToUser(beneficiary, amount);\n', '    }\n', '\n', '\n', '    function endICO()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        burnAndFinish();\n', '        moveToState(States.Operational);\n', '    }\n', '\n', '    function anyoneEndICO()\n', '    public\n', '    requireState(States.Ico)\n', '    {\n', '        require(block.number > endBlock);\n', '        burnAndFinish();\n', '        moveToState(States.Operational);\n', '    }\n', '\n', '    function burnAndFinish()\n', '    internal\n', '    {\n', '        totalSupply = soldTokens.mul(100).div(percentForSale);\n', '\n', '        uint256 teamAmount = totalSupply.mul(22).div(100);\n', '        balances[teamWallet] = teamAmount;\n', '        Transfer(reserves, teamWallet, teamAmount);\n', '\n', '        uint256 reservesAmount = totalSupply.sub(soldTokens).sub(teamAmount);\n', '        // Burn all tokens over the target amount.\n', '        Transfer(reserves, 0x0, balances[reserves].sub(reservesAmount).sub(teamAmount));\n', '        balances[reserves] = reservesAmount;\n', '\n', '        mintingFinished = true;\n', '        MintFinished();\n', '    }\n', '\n', '    function addToWhitelist(address _whitelisted)\n', '    public\n', '    onlyWhitelist\n', '        //    requireState(States.Ico)\n', '    {\n', '        whitelist[_whitelisted] = true;\n', '        Whitelisted(_whitelisted);\n', '    }\n', '\n', '\n', '    //emergency pause for the ICO\n', '    function pause()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Ico)\n', '    {\n', '        moveToState(States.Paused);\n', '        pauseLastStart = now;\n', '    }\n', '\n', '    //in case we want to completely abort\n', '    function abort()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Aborted);\n', '    }\n', '\n', '    //un-pause\n', '    function resumeICO()\n', '    public\n', '    onlyStateControl\n', '    requireState(States.Paused)\n', '    {\n', '        moveToState(States.Ico);\n', '        //increase pauseOffset by the time it was paused\n', '        pauseOffset = pauseOffset + (now - pauseLastStart);\n', '    }\n', '\n', '    //in case of a failed/aborted ICO every investor can get back their money\n', '    function requestRefund()\n', '    public\n', '    requireState(States.Aborted)\n', '    {\n', '        require(ethPossibleRefunds[msg.sender] > 0);\n', '        //there is no need for updateAccount(msg.sender) since the token never became active.\n', '        uint256 payout = ethPossibleRefunds[msg.sender];\n', '        //reverse calculate the amount to pay out\n', '        ethPossibleRefunds[msg.sender] = 0;\n', '        msg.sender.transfer(payout);\n', '    }\n', '\n', '    //after the ICO has run its course, the withdraw account can drain funds bit-by-bit as needed.\n', '    function requestPayout(uint _amount)\n', '    public\n', '    onlyWithdraw //very important!\n', '    requireState(States.Operational)\n', '    {\n', '        msg.sender.transfer(_amount);\n', '    }\n', '\n', '    //if this contract gets a balance in some other ERC20 contract - or even iself - then we can rescue it.\n', '    function rescueToken(ERC20Basic _foreignToken, address _to)\n', '    public\n', '    onlyTokenAssignmentControl\n', '    {\n', '        _foreignToken.transfer(_to, _foreignToken.balanceOf(this));\n', '    }\n', '    /**\n', '    END ICO functions\n', '    */\n', '\n', '    /**\n', '    BEGIN ERC20 functions\n', '    */\n', '    function transfer(address _to, uint256 _value)\n', '    public\n', '    requireState(States.Operational)\n', '    returns (bool success) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '    public\n', '    requireState(States.Operational)\n', '    returns (bool success) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    END ERC20 functions\n', '    */\n', '}']
