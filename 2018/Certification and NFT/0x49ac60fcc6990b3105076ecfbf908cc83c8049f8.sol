['pragma solidity ^0.4.19;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist contract\n', ' * @dev Whitelist for wallets.\n', '*/\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) whitelist;\n', '\n', '    uint256 public whitelistLength = 0;\n', '\n', '    /**\n', '    * @dev Add wallet to whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of wallet to add.\n', '    */\n', '    function addWallet(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0));\n', '        require(!isWhitelisted(_wallet));\n', '        whitelist[_wallet] = true;\n', '        whitelistLength++;\n', '    }\n', '\n', '    /**\n', '    * @dev Remove wallet from whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of whitelisted wallet to remove.\n', '    */\n', '    function removeWallet(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0));\n', '        require(isWhitelisted(_wallet));\n', '        whitelist[_wallet] = false;\n', '        whitelistLength--;\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified wallet whether it is in the whitelist.\n', '    * @param _wallet The address of wallet to check.\n', '    */\n', '    function isWhitelisted(address _wallet) public view returns (bool) {\n', '        return whitelist[_wallet];\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist contract\n', ' * @dev Whitelist for wallets.\n', '*/\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) whitelist;\n', '\n', '    uint256 public whitelistLength = 0;\n', '\n', '    /**\n', '    * @dev Add wallet to whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of wallet to add.\n', '    */\n', '    function addWallet(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0));\n', '        require(!isWhitelisted(_wallet));\n', '        whitelist[_wallet] = true;\n', '        whitelistLength++;\n', '    }\n', '\n', '    /**\n', '    * @dev Remove wallet from whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of whitelisted wallet to remove.\n', '    */\n', '    function removeWallet(address _wallet) public onlyOwner {\n', '        require(_wallet != address(0));\n', '        require(isWhitelisted(_wallet));\n', '        whitelist[_wallet] = false;\n', '        whitelistLength--;\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified wallet whether it is in the whitelist.\n', '    * @param _wallet The address of wallet to check.\n', '    */\n', '    function isWhitelisted(address _wallet) public view returns (bool) {\n', '        return whitelist[_wallet];\n', '    }\n', '}']
