['pragma solidity ^0.4.25;\n', '\n', '/*\n', 'Version 1.0.14\n', 'This contract accepts ETH, and distributes tokens.\n', 'DBLK Airdrop Multiplier\n', ' */\n', '\n', '\n', 'interface IERC20Token {\n', '    function balanceOf(address owner) external returns (uint256);\n', '    function transfer(address to, uint256 amount) external returns (bool);\n', '    function decimals() external returns (uint256);\n', '}\n', '\n', 'contract SpecialTransferContract {\n', '    IERC20Token public tokenContract;  // the address of the token\n', '    address public owner;               // address of this contracts owner\n', '    uint256 public tokensDistributed;          // tally of the number of tokens distributed\n', '    uint256 public acceptableEthAmountInWei; //exact eth amount in wei this contract will accept\n', '    uint256 public tokensPerContributor;    // number of tokens to distribute to each contributor\n', '    uint256 public contributionsMade; // tally of all contributions \n', '    bytes32 contractOwner; // contract owner address, used during deploy\n', '\n', '    event Contribution(address buyer, uint256 amount); //log contributions\n', '\n', '    constructor(bytes32 _contractOwner, IERC20Token _tokenContract) public {\n', '        owner = msg.sender;\n', '        contractOwner = _contractOwner;\n', '        tokenContract = _tokenContract; \n', '    }    \n', '\n', '    \n', '    function ConfigurableParameters(uint256 _tokensPerContributor, uint256 _acceptableEthAmountInWei) public {\n', '        require(msg.sender == owner); //only owner can change these\n', '        tokensPerContributor = _tokensPerContributor;\n', '        acceptableEthAmountInWei = _acceptableEthAmountInWei;\n', '    }\n', '    \n', '    \n', '    function () payable public {\n', '    // skip this function if owner calls the contract    \n', '    require(msg.sender != owner);   \n', '\n', '   //call the acceptContribution function to transfer tokens for eth\n', '    acceptContribution();\n', '    emit Contribution(msg.sender, tokensPerContributor); // create event\n', '    owner.transfer(msg.value); // send received Eth to owner\n', '    }\n', '    \n', '    \n', '    function acceptContribution() public payable {\n', '        // ensure contract holds enough tokens to send\n', '        require(tokenContract.balanceOf(this) >= tokensPerContributor);\n', '        \n', '        // verify purchase amount is correct (eg.0.1ETH (100000000000000000)\n', '        require(msg.value == acceptableEthAmountInWei);\n', '\n', '        // keep a tally of distributions and tokens\n', '        tokensDistributed += tokensPerContributor;\n', '        contributionsMade += 1;\n', '\n', '        require(tokenContract.transfer(msg.sender, tokensPerContributor));\n', '    }\n', '\n', '    function endSale() public {\n', '        require(msg.sender == owner);\n', '\n', '        // Send unsold tokens back to the owner.\n', '        require(tokenContract.transfer(owner, tokenContract.balanceOf(this)));\n', '\n', '        // Send any remaining Eth from contract to the owner.\n', '        msg.sender.transfer(address(this).balance);\n', '    }\n', '}']