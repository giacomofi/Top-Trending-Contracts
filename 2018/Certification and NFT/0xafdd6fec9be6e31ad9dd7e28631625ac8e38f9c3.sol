['pragma solidity ^0.4.21;\n', '\n', 'contract EIP20Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed burner, uint256 value);\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public;\n', '  function approve(address spender, uint256 value) public;\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is\n', ' * called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Owanble() public{\n', '    owner = msg.sender;\n', '  }\n', '\n', '  // Modifier onlyOwner prevents function from running\n', '  // if it is called by anyone other than the owner\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // Function transferOwnership allows owner to change ownership.\n', '  // Before the appying changes it checks if the owner\n', '  // called this function and if the address is not 0x0.\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted = false;\n', '\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '  }\n', '\n', '}\n', '\n', 'contract TokenSale is Haltable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "TokenSale Contract";\n', '\n', '    // Constants\n', '    EIP20Interface public token;\n', '    address public beneficiary;\n', '    address public reserve;\n', '    uint public price = 0; // in wei\n', '\n', '    // Counters\n', '    uint public tokensSoldTotal = 0; // in wei\n', '    uint public weiRaisedTotal = 0; // in wei\n', '    uint public investorCount = 0;\n', '\n', '    event NewContribution(\n', '        address indexed holder,\n', '        uint256 tokenAmount,\n', '        uint256 etherAmount);\n', '\n', '    function TokenSale(\n', '        ) public {\n', '            \n', '        // Grant owner rights to deployer of a contract\n', '        owner = msg.sender;\n', '        \n', '        // Set token address and initialize constructor\n', '        token = EIP20Interface(address(0x2F7823AaF1ad1dF0D5716E8F18e1764579F4ABe6));\n', '        \n', '        // Set beneficiary address to receive ETH\n', '        beneficiary = address(0xf2b9DA535e8B8eF8aab29956823df7237f1863A3);\n', '        \n', '        // Set reserve address to receive ETH\n', '        reserve = address(0x966c0FD16a4f4292E6E0372e04fbB5c7013AD02e);\n', '        \n', '        // Set price of 1 token\n', '        price = 0.00379 ether;\n', '    }\n', '\n', '    function changeBeneficiary(address _beneficiary) public onlyOwner stopInEmergency {\n', '        beneficiary = _beneficiary;\n', '    }\n', '    \n', '    function changeReserve(address _reserve) public onlyOwner stopInEmergency {\n', '        reserve = _reserve;\n', '    }\n', '    \n', '    function changePrice(uint _price) public onlyOwner stopInEmergency {\n', '        price = _price;\n', '    }\n', '\n', '    function () public payable stopInEmergency {\n', '        \n', '        // require min limit of contribution\n', '        require(msg.value >= price);\n', '        \n', '        // calculate token amount\n', '        uint tokens = msg.value / price;\n', '        \n', '        // throw if you trying to buy over the token exists\n', '        require(token.balanceOf(this) >= tokens);\n', '        \n', '        // recalculate counters\n', '        tokensSoldTotal = tokensSoldTotal.add(tokens);\n', '        if (token.balanceOf(msg.sender) == 0) investorCount++;\n', '        weiRaisedTotal = weiRaisedTotal.add(msg.value);\n', '        \n', '        // transfer bought tokens to the contributor \n', '        token.transfer(msg.sender, tokens);\n', '\n', '        // 100% / 10 = 10%\n', '        uint reservePie = msg.value.div(10);\n', '        \n', '        // 100% - 10% = 90%\n', '        uint beneficiaryPie = msg.value.sub(reservePie);\n', '\n', '        // transfer funds to the reserve address\n', '        reserve.transfer(reservePie);\n', '\n', '        // transfer funds to the beneficiary address\n', '        beneficiary.transfer(beneficiaryPie);\n', '\n', '        emit NewContribution(msg.sender, tokens, msg.value);\n', '    }\n', '    \n', '    \n', '    // Withdraw any accidently sent to the contract ERC20 tokens.\n', '    // Can be performed only by the owner.\n', '    function withdrawERC20Token(address _token) public onlyOwner stopInEmergency {\n', '        ERC20 foreignToken = ERC20(_token);\n', '        foreignToken.transfer(msg.sender, foreignToken.balanceOf(this));\n', '    }\n', '    \n', '    // Withdraw any accidently sent to the contract EIP20 tokens.\n', '    // Can be performed only by the owner.\n', '    function withdrawEIP20Token(address _token) public onlyOwner stopInEmergency {\n', '        EIP20Interface foreignToken = EIP20Interface(_token);\n', '        foreignToken.transfer(msg.sender, foreignToken.balanceOf(this));\n', '    }\n', '    \n', '    // Withdraw all not sold tokens.\n', '    // Can be performed only by the owner.\n', '    function withdrawToken() public onlyOwner stopInEmergency {\n', '        token.transfer(msg.sender, token.balanceOf(this));\n', '    }\n', '    \n', '    // Get the contract token balance\n', '    function tokensRemaining() public constant returns (uint256) {\n', '        return token.balanceOf(this);\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.21;\n', '\n', 'contract EIP20Interface {\n', '    uint256 public totalSupply;\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value); \n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    event Burn(address indexed burner, uint256 value);\n', '}\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public;\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public;\n', '  function approve(address spender, uint256 value) public;\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/*\n', ' * Ownable\n', ' *\n', ' * Base contract with an owner.\n', ' * Provides onlyOwner modifier, which prevents function from running if it is\n', ' * called by anyone other than the owner.\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  function Owanble() public{\n', '    owner = msg.sender;\n', '  }\n', '\n', '  // Modifier onlyOwner prevents function from running\n', '  // if it is called by anyone other than the owner\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // Function transferOwnership allows owner to change ownership.\n', '  // Before the appying changes it checks if the owner\n', '  // called this function and if the address is not 0x0.\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    if (newOwner != address(0)) {\n', '      owner = newOwner;\n', '    }\n', '  }\n', '\n', '}\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted = false;\n', '\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '  }\n', '\n', '}\n', '\n', 'contract TokenSale is Haltable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "TokenSale Contract";\n', '\n', '    // Constants\n', '    EIP20Interface public token;\n', '    address public beneficiary;\n', '    address public reserve;\n', '    uint public price = 0; // in wei\n', '\n', '    // Counters\n', '    uint public tokensSoldTotal = 0; // in wei\n', '    uint public weiRaisedTotal = 0; // in wei\n', '    uint public investorCount = 0;\n', '\n', '    event NewContribution(\n', '        address indexed holder,\n', '        uint256 tokenAmount,\n', '        uint256 etherAmount);\n', '\n', '    function TokenSale(\n', '        ) public {\n', '            \n', '        // Grant owner rights to deployer of a contract\n', '        owner = msg.sender;\n', '        \n', '        // Set token address and initialize constructor\n', '        token = EIP20Interface(address(0x2F7823AaF1ad1dF0D5716E8F18e1764579F4ABe6));\n', '        \n', '        // Set beneficiary address to receive ETH\n', '        beneficiary = address(0xf2b9DA535e8B8eF8aab29956823df7237f1863A3);\n', '        \n', '        // Set reserve address to receive ETH\n', '        reserve = address(0x966c0FD16a4f4292E6E0372e04fbB5c7013AD02e);\n', '        \n', '        // Set price of 1 token\n', '        price = 0.00379 ether;\n', '    }\n', '\n', '    function changeBeneficiary(address _beneficiary) public onlyOwner stopInEmergency {\n', '        beneficiary = _beneficiary;\n', '    }\n', '    \n', '    function changeReserve(address _reserve) public onlyOwner stopInEmergency {\n', '        reserve = _reserve;\n', '    }\n', '    \n', '    function changePrice(uint _price) public onlyOwner stopInEmergency {\n', '        price = _price;\n', '    }\n', '\n', '    function () public payable stopInEmergency {\n', '        \n', '        // require min limit of contribution\n', '        require(msg.value >= price);\n', '        \n', '        // calculate token amount\n', '        uint tokens = msg.value / price;\n', '        \n', '        // throw if you trying to buy over the token exists\n', '        require(token.balanceOf(this) >= tokens);\n', '        \n', '        // recalculate counters\n', '        tokensSoldTotal = tokensSoldTotal.add(tokens);\n', '        if (token.balanceOf(msg.sender) == 0) investorCount++;\n', '        weiRaisedTotal = weiRaisedTotal.add(msg.value);\n', '        \n', '        // transfer bought tokens to the contributor \n', '        token.transfer(msg.sender, tokens);\n', '\n', '        // 100% / 10 = 10%\n', '        uint reservePie = msg.value.div(10);\n', '        \n', '        // 100% - 10% = 90%\n', '        uint beneficiaryPie = msg.value.sub(reservePie);\n', '\n', '        // transfer funds to the reserve address\n', '        reserve.transfer(reservePie);\n', '\n', '        // transfer funds to the beneficiary address\n', '        beneficiary.transfer(beneficiaryPie);\n', '\n', '        emit NewContribution(msg.sender, tokens, msg.value);\n', '    }\n', '    \n', '    \n', '    // Withdraw any accidently sent to the contract ERC20 tokens.\n', '    // Can be performed only by the owner.\n', '    function withdrawERC20Token(address _token) public onlyOwner stopInEmergency {\n', '        ERC20 foreignToken = ERC20(_token);\n', '        foreignToken.transfer(msg.sender, foreignToken.balanceOf(this));\n', '    }\n', '    \n', '    // Withdraw any accidently sent to the contract EIP20 tokens.\n', '    // Can be performed only by the owner.\n', '    function withdrawEIP20Token(address _token) public onlyOwner stopInEmergency {\n', '        EIP20Interface foreignToken = EIP20Interface(_token);\n', '        foreignToken.transfer(msg.sender, foreignToken.balanceOf(this));\n', '    }\n', '    \n', '    // Withdraw all not sold tokens.\n', '    // Can be performed only by the owner.\n', '    function withdrawToken() public onlyOwner stopInEmergency {\n', '        token.transfer(msg.sender, token.balanceOf(this));\n', '    }\n', '    \n', '    // Get the contract token balance\n', '    function tokensRemaining() public constant returns (uint256) {\n', '        return token.balanceOf(this);\n', '    }\n', '    \n', '}']
