['// File: @laborx/solidity-shared-lib/contracts/ERC20Interface.sol\n', '\n', '/**\n', '* Copyright 2017–2018, LaborX PTY\n', '* Licensed under the AGPL Version 3 license.\n', '*/\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '\n', '/// @title Defines an interface for EIP20 token smart contract\n', 'contract ERC20Interface {\n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed from, address indexed spender, uint256 value);\n', '\n', '    string public symbol;\n', '\n', '    function decimals() public view returns (uint8);\n', '    function totalSupply() public view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n', '}\n', '\n', '// File: @laborx/solidity-eventshistory-lib/contracts/EventsHistorySourceAdapter.sol\n', '\n', '/**\n', '* Copyright 2017–2018, LaborX PTY\n', '* Licensed under the AGPL Version 3 license.\n', '*/\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '/**\n', ' * @title EventsHistory Source Adapter.\n', ' */\n', 'contract EventsHistorySourceAdapter {\n', '\n', '    // It is address of MultiEventsHistory caller assuming we are inside of delegate call.\n', '    function _self()\n', '    internal\n', '    view\n', '    returns (address)\n', '    {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', '// File: @laborx/solidity-eventshistory-lib/contracts/MultiEventsHistoryAdapter.sol\n', '\n', '/**\n', '* Copyright 2017–2018, LaborX PTY\n', '* Licensed under the AGPL Version 3 license.\n', '*/\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '/**\n', ' * @title General MultiEventsHistory user.\n', ' */\n', 'contract MultiEventsHistoryAdapter is EventsHistorySourceAdapter {\n', '\n', '    address internal localEventsHistory;\n', '\n', '    event ErrorCode(address indexed self, uint errorCode);\n', '\n', '    function getEventsHistory()\n', '    public\n', '    view\n', '    returns (address)\n', '    {\n', '        address _eventsHistory = localEventsHistory;\n', '        return _eventsHistory != 0x0 ? _eventsHistory : this;\n', '    }\n', '\n', '    function emitErrorCode(uint _errorCode) public {\n', '        emit ErrorCode(_self(), _errorCode);\n', '    }\n', '\n', '    function _setEventsHistory(address _eventsHistory) internal returns (bool) {\n', '        localEventsHistory = _eventsHistory;\n', '        return true;\n', '    }\n', '    \n', '    function _emitErrorCode(uint _errorCode) internal returns (uint) {\n', '        MultiEventsHistoryAdapter(getEventsHistory()).emitErrorCode(_errorCode);\n', '        return _errorCode;\n', '    }\n', '}\n', '\n', '// File: contracts/ChronoBankPlatformEmitter.sol\n', '\n', '/**\n', ' * Copyright 2017–2018, LaborX PTY\n', ' * Licensed under the AGPL Version 3 license.\n', ' */\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', '\n', '/// @title ChronoBank Platform Emitter.\n', '///\n', '/// Contains all the original event emitting function definitions and events.\n', '/// In case of new events needed later, additional emitters can be developed.\n', '/// All the functions is meant to be called using delegatecall.\n', 'contract ChronoBankPlatformEmitter is MultiEventsHistoryAdapter {\n', '\n', '    event Transfer(address indexed from, address indexed to, bytes32 indexed symbol, uint value, string reference);\n', '    event Issue(bytes32 indexed symbol, uint value, address indexed by);\n', '    event Revoke(bytes32 indexed symbol, uint value, address indexed by);\n', '    event RevokeExternal(bytes32 indexed symbol, uint value, address indexed by, string externalReference);\n', '    event OwnershipChange(address indexed from, address indexed to, bytes32 indexed symbol);\n', '    event Approve(address indexed from, address indexed spender, bytes32 indexed symbol, uint value);\n', '    event Recovery(address indexed from, address indexed to, address by);\n', '\n', '    function emitTransfer(address _from, address _to, bytes32 _symbol, uint _value, string _reference) public {\n', '        emit Transfer(_from, _to, _symbol, _value, _reference);\n', '    }\n', '\n', '    function emitIssue(bytes32 _symbol, uint _value, address _by) public {\n', '        emit Issue(_symbol, _value, _by);\n', '    }\n', '\n', '    function emitRevoke(bytes32 _symbol, uint _value, address _by) public {\n', '        emit Revoke(_symbol, _value, _by);\n', '    }\n', '\n', '    function emitRevokeExternal(bytes32 _symbol, uint _value, address _by, string _externalReference) public {\n', '        emit RevokeExternal(_symbol, _value, _by, _externalReference);\n', '    }\n', '\n', '    function emitOwnershipChange(address _from, address _to, bytes32 _symbol) public {\n', '        emit OwnershipChange(_from, _to, _symbol);\n', '    }\n', '\n', '    function emitApprove(address _from, address _spender, bytes32 _symbol, uint _value) public {\n', '        emit Approve(_from, _spender, _symbol, _value);\n', '    }\n', '\n', '    function emitRecovery(address _from, address _to, address _by) public {\n', '        emit Recovery(_from, _to, _by);\n', '    }\n', '}\n', '\n', '// File: contracts/ChronoBankPlatformInterface.sol\n', '\n', '/**\n', ' * Copyright 2017–2018, LaborX PTY\n', ' * Licensed under the AGPL Version 3 license.\n', ' */\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '\n', 'contract ChronoBankPlatformInterface is ChronoBankPlatformEmitter {\n', '    mapping(bytes32 => address) public proxies;\n', '\n', '    function symbols(uint _idx) public view returns (bytes32);\n', '    function symbolsCount() public view returns (uint);\n', '    function isCreated(bytes32 _symbol) public view returns(bool);\n', '    function isOwner(address _owner, bytes32 _symbol) public view returns(bool);\n', '    function owner(bytes32 _symbol) public view returns(address);\n', '\n', '    function setProxy(address _address, bytes32 _symbol) public returns(uint errorCode);\n', '\n', '    function name(bytes32 _symbol) public view returns(string);\n', '\n', '    function totalSupply(bytes32 _symbol) public view returns(uint);\n', '    function balanceOf(address _holder, bytes32 _symbol) public view returns(uint);\n', '    function allowance(address _from, address _spender, bytes32 _symbol) public view returns(uint);\n', '    function baseUnit(bytes32 _symbol) public view returns(uint8);\n', '    function description(bytes32 _symbol) public view returns(string);\n', '    function isReissuable(bytes32 _symbol) public view returns(bool);\n', '    function blockNumber(bytes32 _symbol) public view returns (uint);\n', '\n', '    function proxyTransferWithReference(address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\n', '    function proxyTransferFromWithReference(address _from, address _to, uint _value, bytes32 _symbol, string _reference, address _sender) public returns(uint errorCode);\n', '\n', '    function proxyApprove(address _spender, uint _value, bytes32 _symbol, address _sender) public returns(uint errorCode);\n', '\n', '    function issueAsset(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, uint _blockNumber) public returns(uint errorCode);\n', '    function issueAssetWithInitialReceiver(bytes32 _symbol, uint _value, string _name, string _description, uint8 _baseUnit, bool _isReissuable, uint _blockNumber, address _account) public returns(uint errorCode);\n', '\n', '    function reissueAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\n', '    function reissueAssetToRecepient(bytes32 _symbol, uint _value, address _to) public returns (uint);\n', '\n', '    function revokeAsset(bytes32 _symbol, uint _value) public returns(uint errorCode);\n', '    function revokeAssetWithExternalReference(bytes32 _symbol, uint _value, string _externalReference) public returns (uint);\n', '\n', '    function hasAssetRights(address _owner, bytes32 _symbol) public view returns (bool);\n', '    function isDesignatedAssetManager(address _account, bytes32 _symbol) public view returns (bool);\n', '    function changeOwnership(bytes32 _symbol, address _newOwner) public returns(uint errorCode);\n', '}\n', '\n', '// File: contracts/ChronoBankAssetInterface.sol\n', '\n', '/**\n', ' * Copyright 2017–2018, LaborX PTY\n', ' * Licensed under the AGPL Version 3 license.\n', ' */\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', 'contract ChronoBankAssetInterface {\n', '    function __transferWithReference(address _to, uint _value, string _reference, address _sender) public returns (bool);\n', '    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) public returns (bool);\n', '    function __approve(address _spender, uint _value, address _sender) public returns(bool);\n', '    function __process(bytes /*_data*/, address /*_sender*/) public payable {\n', '        revert("ASSET_PROCESS_NOT_SUPPORTED");\n', '    }\n', '}\n', '\n', '// File: contracts/assets/ChronoBankAssetChainableInterface.sol\n', '\n', '/**\n', '* Copyright 2017–2018, LaborX PTY\n', '* Licensed under the AGPL Version 3 license.\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract ChronoBankAssetChainableInterface {\n', '\n', '    function assetType() public pure returns (bytes32);\n', '\n', '    function getPreviousAsset() public view returns (ChronoBankAssetChainableInterface);\n', '    function getNextAsset() public view returns (ChronoBankAssetChainableInterface);\n', '\n', '    function getChainedAssets() public view returns (bytes32[] _types, address[] _assets);\n', '    function getAssetByType(bytes32 _assetType) public view returns (address);\n', '\n', '    function chainAssets(ChronoBankAssetChainableInterface[] _assets) external returns (bool);\n', '    function __chainAssetsFromIdx(ChronoBankAssetChainableInterface[] _assets, uint _startFromIdx) external returns (bool);\n', '\n', '    function finalizeAssetChaining() public;\n', '}\n', '\n', '// File: contracts/assets/ChronoBankAssetUtils.sol\n', '\n', '/**\n', '* Copyright 2017–2018, LaborX PTY\n', '* Licensed under the AGPL Version 3 license.\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', '\n', 'library ChronoBankAssetUtils {\n', '\n', '    uint constant ASSETS_CHAIN_MAX_LENGTH = 20;\n', '\n', '    function getChainedAssets(ChronoBankAssetChainableInterface _asset)\n', '    public\n', '    view\n', '    returns (bytes32[] _types, address[] _assets)\n', '    {\n', '        bytes32[] memory _tempTypes = new bytes32[](ASSETS_CHAIN_MAX_LENGTH);\n', '        address[] memory _tempAssets = new address[](ASSETS_CHAIN_MAX_LENGTH);\n', '\n', '        ChronoBankAssetChainableInterface _next = getHeadAsset(_asset);\n', '        uint _counter = 0;\n', '        do {\n', '            _tempTypes[_counter] = _next.assetType();\n', '            _tempAssets[_counter] = address(_next);\n', '            _counter += 1;\n', '\n', '            _next = _next.getNextAsset();\n', '        } while (address(_next) != 0x0);\n', '\n', '        _types = new bytes32[](_counter);\n', '        _assets = new address[](_counter);\n', '        for (uint _assetIdx = 0; _assetIdx < _counter; ++_assetIdx) {\n', '            _types[_assetIdx] = _tempTypes[_assetIdx];\n', '            _assets[_assetIdx] = _tempAssets[_assetIdx];\n', '        }\n', '    }\n', '\n', '    function getAssetByType(ChronoBankAssetChainableInterface _asset, bytes32 _assetType)\n', '    public\n', '    view\n', '    returns (address)\n', '    {\n', '        ChronoBankAssetChainableInterface _next = getHeadAsset(_asset);\n', '        do {\n', '            if (_next.assetType() == _assetType) {\n', '                return address(_next);\n', '            }\n', '\n', '            _next = _next.getNextAsset();\n', '        } while (address(_next) != 0x0);\n', '    }\n', '\n', '    function containsAssetInChain(ChronoBankAssetChainableInterface _asset, address _checkAsset)\n', '    public\n', '    view\n', '    returns (bool)\n', '    {\n', '        ChronoBankAssetChainableInterface _next = getHeadAsset(_asset);\n', '        do {\n', '            if (address(_next) == _checkAsset) {\n', '                return true;\n', '            }\n', '\n', '            _next = _next.getNextAsset();\n', '        } while (address(_next) != 0x0);\n', '    }\n', '\n', '    function getHeadAsset(ChronoBankAssetChainableInterface _asset)\n', '    public\n', '    view\n', '    returns (ChronoBankAssetChainableInterface)\n', '    {\n', '        ChronoBankAssetChainableInterface _head = _asset;\n', '        ChronoBankAssetChainableInterface _previousAsset;\n', '        do {\n', '            _previousAsset = _head.getPreviousAsset();\n', '            if (address(_previousAsset) == 0x0) {\n', '                return _head;\n', '            }\n', '            _head = _previousAsset;\n', '        } while (true);\n', '    }\n', '}\n', '\n', '// File: contracts/ChronoBankAssetProxy.sol\n', '\n', '/**\n', ' * Copyright 2017–2018, LaborX PTY\n', ' * Licensed under the AGPL Version 3 license.\n', ' */\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', 'contract ERC20 is ERC20Interface {}\n', '\n', 'contract ChronoBankPlatform is ChronoBankPlatformInterface {}\n', '\n', 'contract ChronoBankAsset is ChronoBankAssetInterface {}\n', '\n', '\n', '\n', '/// @title ChronoBank Asset Proxy.\n', '///\n', '/// Proxy implements ERC20 interface and acts as a gateway to a single platform asset.\n', '/// Proxy adds symbol and caller(sender) when forwarding requests to platform.\n', '/// Every request that is made by caller first sent to the specific asset implementation\n', '/// contract, which then calls back to be forwarded onto platform.\n', '///\n', '/// Calls flow: Caller ->\n', '///             Proxy.func(...) ->\n', '///             Asset.__func(..., Caller.address) ->\n', '///             Proxy.__func(..., Caller.address) ->\n', '///             Platform.proxyFunc(..., symbol, Caller.address)\n', '///\n', '/// Asset implementation contract is mutable, but each user have an option to stick with\n', "/// old implementation, through explicit decision made in timely manner, if he doesn't agree\n", '/// with new rules.\n', '/// Each user have a possibility to upgrade to latest asset contract implementation, without the\n', '/// possibility to rollback.\n', '///\n', '/// Note: all the non constant functions return false instead of throwing in case if state change\n', "/// didn't happen yet.\n", 'contract ChronoBankAssetProxy is ERC20 {\n', '\n', '    /// @dev Supports ChronoBankPlatform ability to return error codes from methods\n', '    uint constant OK = 1;\n', '\n', '    /// @dev Assigned platform, immutable.\n', '    ChronoBankPlatform public chronoBankPlatform;\n', '\n', '    /// @dev Assigned symbol, immutable.\n', '    bytes32 public smbl;\n', '\n', '    /// @dev Assigned name, immutable.\n', '    string public name;\n', '\n', '    /// @dev Assigned symbol (from ERC20 standard), immutable\n', '    string public symbol;\n', '\n', '    /// @notice Sets platform address, assigns symbol and name.\n', '    /// Can be set only once.\n', '    /// @param _chronoBankPlatform platform contract address.\n', '    /// @param _symbol assigned symbol.\n', '    /// @param _name assigned name.\n', '    /// @return success.\n', '    function init(ChronoBankPlatform _chronoBankPlatform, string _symbol, string _name) public returns (bool) {\n', '        if (address(chronoBankPlatform) != 0x0) {\n', '            return false;\n', '        }\n', '\n', '        chronoBankPlatform = _chronoBankPlatform;\n', '        symbol = _symbol;\n', '        smbl = stringToBytes32(_symbol);\n', '        name = _name;\n', '        return true;\n', '    }\n', '\n', '    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n', '        assembly {\n', '           result := mload(add(source, 32))\n', '        }\n', '    }\n', '\n', '    /// @dev Only platform is allowed to call.\n', '    modifier onlyChronoBankPlatform {\n', '        if (msg.sender == address(chronoBankPlatform)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /// @dev Only current asset owner is allowed to call.\n', '    modifier onlyAssetOwner {\n', '        if (chronoBankPlatform.isOwner(msg.sender, smbl)) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns asset implementation contract for current caller.\n', '    /// @return asset implementation contract.\n', '    function _getAsset() internal view returns (ChronoBankAsset) {\n', '        return ChronoBankAsset(getVersionFor(msg.sender));\n', '    }\n', '\n', '    /// @notice Returns asset total supply.\n', '    /// @return asset total supply.\n', '    function totalSupply() public view returns (uint) {\n', '        return chronoBankPlatform.totalSupply(smbl);\n', '    }\n', '\n', '    /// @notice Returns asset balance for a particular holder.\n', '    /// @param _owner holder address.\n', '    /// @return holder balance.\n', '    function balanceOf(address _owner) public view returns (uint) {\n', '        return chronoBankPlatform.balanceOf(_owner, smbl);\n', '    }\n', '\n', '    /// @notice Returns asset allowance from one holder to another.\n', '    /// @param _from holder that allowed spending.\n', '    /// @param _spender holder that is allowed to spend.\n', '    /// @return holder to spender allowance.\n', '    function allowance(address _from, address _spender) public view returns (uint) {\n', '        return chronoBankPlatform.allowance(_from, _spender, smbl);\n', '    }\n', '\n', '    /// @notice Returns asset decimals.\n', '    /// @return asset decimals.\n', '    function decimals() public view returns (uint8) {\n', '        return chronoBankPlatform.baseUnit(smbl);\n', '    }\n', '\n', '    /// @notice Transfers asset balance from the caller to specified receiver.\n', '    /// @param _to holder address to give to.\n', '    /// @param _value amount to transfer.\n', '    /// @return success.\n', '    function transfer(address _to, uint _value) public returns (bool) {\n', '        if (_to != 0x0) {\n', '            return _transferWithReference(_to, _value, "");\n', '        }\n', '    }\n', '\n', '    /// @notice Transfers asset balance from the caller to specified receiver adding specified comment.\n', '    /// @param _to holder address to give to.\n', '    /// @param _value amount to transfer.\n', "    /// @param _reference transfer comment to be included in a platform's Transfer event.\n", '    /// @return success.\n', '    function transferWithReference(address _to, uint _value, string _reference) public returns (bool) {\n', '        if (_to != 0x0) {\n', '            return _transferWithReference(_to, _value, _reference);\n', '        }\n', '    }\n', '\n', '    /// @notice Resolves asset implementation contract for the caller and forwards there arguments along with\n', '    /// the caller address.\n', '    /// @return success.\n', '    function _transferWithReference(address _to, uint _value, string _reference) internal returns (bool) {\n', '        return _getAsset().__transferWithReference(_to, _value, _reference, msg.sender);\n', '    }\n', '\n', '    /// @notice Performs transfer call on the platform by the name of specified sender.\n', '    ///\n', '    /// Can only be called by asset implementation contract assigned to sender.\n', '    ///\n', '    /// @param _to holder address to give to.\n', '    /// @param _value amount to transfer.\n', "    /// @param _reference transfer comment to be included in a platform's Transfer event.\n", '    /// @param _sender initial caller.\n', '    ///\n', '    /// @return success.\n', '    function __transferWithReference(\n', '        address _to, \n', '        uint _value, \n', '        string _reference, \n', '        address _sender\n', '    ) \n', '    onlyAccess(_sender) \n', '    public \n', '    returns (bool) \n', '    {\n', '        return chronoBankPlatform.proxyTransferWithReference(_to, _value, smbl, _reference, _sender) == OK;\n', '    }\n', '\n', '    /// @notice Performs allowance transfer of asset balance between holders.\n', '    /// @param _from holder address to take from.\n', '    /// @param _to holder address to give to.\n', '    /// @param _value amount to transfer.\n', '    /// @return success.\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n', '        if (_to != 0x0) {\n', '            return _getAsset().__transferFromWithReference(_from, _to, _value, "", msg.sender);\n', '        }\n', '    }\n', '\n', '    /// @notice Performs allowance transfer call on the platform by the name of specified sender.\n', '    ///\n', '    /// Can only be called by asset implementation contract assigned to sender.\n', '    ///\n', '    /// @param _from holder address to take from.\n', '    /// @param _to holder address to give to.\n', '    /// @param _value amount to transfer.\n', "    /// @param _reference transfer comment to be included in a platform's Transfer event.\n", '    /// @param _sender initial caller.\n', '    ///\n', '    /// @return success.\n', '    function __transferFromWithReference(\n', '        address _from, \n', '        address _to, \n', '        uint _value, \n', '        string _reference, \n', '        address _sender\n', '    ) \n', '    onlyAccess(_sender) \n', '    public \n', '    returns (bool) \n', '    {\n', '        return chronoBankPlatform.proxyTransferFromWithReference(_from, _to, _value, smbl, _reference, _sender) == OK;\n', '    }\n', '\n', '    /// @notice Sets asset spending allowance for a specified spender.\n', '    /// @param _spender holder address to set allowance to.\n', '    /// @param _value amount to allow.\n', '    /// @return success.\n', '    function approve(address _spender, uint _value) public returns (bool) {\n', '        if (_spender != 0x0) {\n', '            return _getAsset().__approve(_spender, _value, msg.sender);\n', '        }\n', '    }\n', '\n', '    /// @notice Performs allowance setting call on the platform by the name of specified sender.\n', '    /// Can only be called by asset implementation contract assigned to sender.\n', '    /// @param _spender holder address to set allowance to.\n', '    /// @param _value amount to allow.\n', '    /// @param _sender initial caller.\n', '    /// @return success.\n', '    function __approve(address _spender, uint _value, address _sender) onlyAccess(_sender) public returns (bool) {\n', '        return chronoBankPlatform.proxyApprove(_spender, _value, smbl, _sender) == OK;\n', '    }\n', '\n', '    /// @notice Emits ERC20 Transfer event on this contract.\n', '    /// Can only be, and, called by assigned platform when asset transfer happens.\n', '    function emitTransfer(address _from, address _to, uint _value) onlyChronoBankPlatform public {\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /// @notice Emits ERC20 Approval event on this contract.\n', '    /// Can only be, and, called by assigned platform when asset allowance set happens.\n', '    function emitApprove(address _from, address _spender, uint _value) onlyChronoBankPlatform public {\n', '        emit Approval(_from, _spender, _value);\n', '    }\n', '\n', '    /// @notice Resolves asset implementation contract for the caller and forwards there transaction data,\n', '    /// along with the value. This allows for proxy interface growth.\n', '    function () public payable {\n', '        _getAsset().__process.value(msg.value)(msg.data, msg.sender);\n', '    }\n', '\n', '    /// @dev Indicates an upgrade freeze-time start, and the next asset implementation contract.\n', '    event UpgradeProposal(address newVersion);\n', '\n', '    /// @dev Current asset implementation contract address.\n', '    address latestVersion;\n', '\n', '    /// @dev Proposed next asset implementation contract address.\n', '    address pendingVersion;\n', '\n', '    /// @dev Upgrade freeze-time start.\n', '    uint pendingVersionTimestamp;\n', '\n', '    /// @dev Timespan for users to review the new implementation and make decision.\n', '    uint constant UPGRADE_FREEZE_TIME = 3 days;\n', '\n', '    /// @dev Asset implementation contract address that user decided to stick with.\n', '    /// 0x0 means that user uses latest version.\n', '    mapping(address => address) userOptOutVersion;\n', '\n', '    /// @dev Only asset implementation contract assigned to sender is allowed to call.\n', '    modifier onlyAccess(address _sender) {\n', '        address _versionFor = getVersionFor(_sender);\n', '        if (msg.sender == _versionFor ||\n', '            ChronoBankAssetUtils.containsAssetInChain(ChronoBankAssetChainableInterface(_versionFor), msg.sender)\n', '        ) {\n', '            _;\n', '        }\n', '    }\n', '\n', '    /// @notice Returns asset implementation contract address assigned to sender.\n', '    /// @param _sender sender address.\n', '    /// @return asset implementation contract address.\n', '    function getVersionFor(address _sender) public view returns (address) {\n', '        return userOptOutVersion[_sender] == 0 ? latestVersion : userOptOutVersion[_sender];\n', '    }\n', '\n', '    /// @notice Returns current asset implementation contract address.\n', '    /// @return asset implementation contract address.\n', '    function getLatestVersion() public view returns (address) {\n', '        return latestVersion;\n', '    }\n', '\n', '    /// @notice Returns proposed next asset implementation contract address.\n', '    /// @return asset implementation contract address.\n', '    function getPendingVersion() public view returns (address) {\n', '        return pendingVersion;\n', '    }\n', '\n', '    /// @notice Returns upgrade freeze-time start.\n', '    /// @return freeze-time start.\n', '    function getPendingVersionTimestamp() public view returns (uint) {\n', '        return pendingVersionTimestamp;\n', '    }\n', '\n', '    /// @notice Propose next asset implementation contract address.\n', '    /// Can only be called by current asset owner.\n', '    /// Note: freeze-time should not be applied for the initial setup.\n', '    /// @param _newVersion asset implementation contract address.\n', '    /// @return success.\n', '    function proposeUpgrade(address _newVersion) onlyAssetOwner public returns (bool) {\n', '        // Should not already be in the upgrading process.\n', '        if (pendingVersion != 0x0) {\n', '            return false;\n', '        }\n', '\n', '        // New version address should be other than 0x0.\n', '        if (_newVersion == 0x0) {\n', '            return false;\n', '        }\n', '\n', "        // Don't apply freeze-time for the initial setup.\n", '        if (latestVersion == 0x0) {\n', '            latestVersion = _newVersion;\n', '            return true;\n', '        }\n', '\n', '        pendingVersion = _newVersion;\n', '        pendingVersionTimestamp = now;\n', '\n', '        emit UpgradeProposal(_newVersion);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Cancel the pending upgrade process.\n', '    /// Can only be called by current asset owner.\n', '    /// @return success.\n', '    function purgeUpgrade() public onlyAssetOwner returns (bool) {\n', '        if (pendingVersion == 0x0) {\n', '            return false;\n', '        }\n', '\n', '        delete pendingVersion;\n', '        delete pendingVersionTimestamp;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Finalize an upgrade process setting new asset implementation contract address.\n', '    /// Can only be called after an upgrade freeze-time.\n', '    /// @return success.\n', '    function commitUpgrade() public returns (bool) {\n', '        if (pendingVersion == 0x0) {\n', '            return false;\n', '        }\n', '\n', '        if (pendingVersionTimestamp + UPGRADE_FREEZE_TIME > now) {\n', '            return false;\n', '        }\n', '\n', '        latestVersion = pendingVersion;\n', '        delete pendingVersion;\n', '        delete pendingVersionTimestamp;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Disagree with proposed upgrade, and stick with current asset implementation\n', '    /// until further explicit agreement to upgrade.\n', '    /// @return success.\n', '    function optOut() public returns (bool) {\n', '        if (userOptOutVersion[msg.sender] != 0x0) {\n', '            return false;\n', '        }\n', '        userOptOutVersion[msg.sender] = latestVersion;\n', '        return true;\n', '    }\n', '\n', '    /// @notice Implicitly agree to upgrade to current and future asset implementation upgrades,\n', '    /// until further explicit disagreement.\n', '    /// @return success.\n', '    function optIn() public returns (bool) {\n', '        delete userOptOutVersion[msg.sender];\n', '        return true;\n', '    }\n', '}']