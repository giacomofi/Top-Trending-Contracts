['//File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/math/SafeMath.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/ownership/Ownable.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/crowdsale/Crowdsale.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) public {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public view returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '  // Override this method to have a way to add business logic to your crowdsale when buying\n', '  function getTokenAmount(uint256 weiAmount) internal view returns(uint256) {\n', '    return weiAmount.mul(rate);\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal view returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/ERC20/TokenVesting.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title TokenVesting\n', ' * @dev A token holder contract that can release its token balance gradually like a\n', ' * typical vesting scheme, with a cliff and vesting period. Optionally revocable by the\n', ' * owner.\n', ' */\n', 'contract TokenVesting is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  event Released(uint256 amount);\n', '  event Revoked();\n', '\n', '  // beneficiary of tokens after they are released\n', '  address public beneficiary;\n', '\n', '  uint256 public cliff;\n', '  uint256 public start;\n', '  uint256 public duration;\n', '\n', '  bool public revocable;\n', '\n', '  mapping (address => uint256) public released;\n', '  mapping (address => bool) public revoked;\n', '\n', '  /**\n', '   * @dev Creates a vesting contract that vests its balance of any ERC20 token to the\n', '   * _beneficiary, gradually in a linear fashion until _start + _duration. By then all\n', '   * of the balance will have vested.\n', '   * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\n', '   * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\n', '   * @param _duration duration in seconds of the period in which the tokens will vest\n', '   * @param _revocable whether the vesting is revocable or not\n', '   */\n', '  function TokenVesting(address _beneficiary, uint256 _start, uint256 _cliff, uint256 _duration, bool _revocable) public {\n', '    require(_beneficiary != address(0));\n', '    require(_cliff <= _duration);\n', '\n', '    beneficiary = _beneficiary;\n', '    revocable = _revocable;\n', '    duration = _duration;\n', '    cliff = _start.add(_cliff);\n', '    start = _start;\n', '  }\n', '\n', '  /**\n', '   * @notice Transfers vested tokens to beneficiary.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function release(ERC20Basic token) public {\n', '    uint256 unreleased = releasableAmount(token);\n', '\n', '    require(unreleased > 0);\n', '\n', '    released[token] = released[token].add(unreleased);\n', '\n', '    token.safeTransfer(beneficiary, unreleased);\n', '\n', '    Released(unreleased);\n', '  }\n', '\n', '  /**\n', '   * @notice Allows the owner to revoke the vesting. Tokens already vested\n', '   * remain in the contract, the rest are returned to the owner.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function revoke(ERC20Basic token) public onlyOwner {\n', '    require(revocable);\n', '    require(!revoked[token]);\n', '\n', '    uint256 balance = token.balanceOf(this);\n', '\n', '    uint256 unreleased = releasableAmount(token);\n', '    uint256 refund = balance.sub(unreleased);\n', '\n', '    revoked[token] = true;\n', '\n', '    token.safeTransfer(owner, refund);\n', '\n', '    Revoked();\n', '  }\n', '\n', '  /**\n', "   * @dev Calculates the amount that has already vested but hasn't been released yet.\n", '   * @param token ERC20 token which is being vested\n', '   */\n', '  function releasableAmount(ERC20Basic token) public view returns (uint256) {\n', '    return vestedAmount(token).sub(released[token]);\n', '  }\n', '\n', '  /**\n', '   * @dev Calculates the amount that has already vested.\n', '   * @param token ERC20 token which is being vested\n', '   */\n', '  function vestedAmount(ERC20Basic token) public view returns (uint256) {\n', '    uint256 currentBalance = token.balanceOf(this);\n', '    uint256 totalBalance = currentBalance.add(released[token]);\n', '\n', '    if (now < cliff) {\n', '      return 0;\n', '    } else if (now >= start.add(duration) || revoked[token]) {\n', '      return totalBalance;\n', '    } else {\n', '      return totalBalance.mul(now.sub(start)).div(duration);\n', '    }\n', '  }\n', '}\n', '\n', '//File: node_modules/zeppelin-solidity/contracts/token/ERC20/PausableToken.sol\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable token\n', ' * @dev StandardToken modified with pausable transfers.\n', ' **/\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', '//File: src/contracts/ico/DividendToken.sol\n', '/**\n', ' * @title Dividend contract\n', ' *\n', ' * @version 1.0\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', 'contract DividendToken is StandardToken, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // time before dividendEndTime during which dividend cannot be claimed by token holders\n', '    // instead the unclaimed dividend can be claimed by treasury in that time span\n', '    uint256 public claimTimeout = 20 days;\n', '\n', '    uint256 public dividendCycleTime = 350 days;\n', '\n', '    uint256 public currentDividend;\n', '\n', '    mapping(address => uint256) unclaimedDividend;\n', '\n', '    // tracks when the dividend balance has been updated last time\n', '    mapping(address => uint256) public lastUpdate;\n', '\n', '    uint256 public lastDividendIncreaseDate;\n', '\n', '    // allow payment of dividend only by special treasury account (treasury can be set and altered by owner,\n', '    // multiple treasurer accounts are possible\n', '    mapping(address => bool) public isTreasurer;\n', '\n', '    uint256 public dividendEndTime = 0;\n', '\n', '    event Payin(address _owner, uint256 _value, uint256 _endTime);\n', '\n', '    event Payout(address _tokenHolder, uint256 _value);\n', '\n', '    event Reclaimed(uint256 remainingBalance, uint256 _endTime, uint256 _now);\n', '\n', '    event ChangedTreasurer(address treasurer, bool active);\n', '\n', '    /**\n', '     * @dev Deploy the DividendToken contract and set the owner of the contract\n', '     */\n', '    function DividendToken() public {\n', '        isTreasurer[owner] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Request payout dividend (claim) (requested by tokenHolder -> pull)\n', '     * dividends that have not been claimed within 330 days expire and cannot be claimed anymore by the token holder.\n', '     */\n', '    function claimDividend() public returns (bool) {\n', '        // unclaimed dividend fractions should expire after 330 days and the owner can reclaim that fraction\n', '        require(dividendEndTime > 0 && dividendEndTime.sub(claimTimeout) > now);\n', '\n', '        updateDividend(msg.sender);\n', '\n', '        uint256 payment = unclaimedDividend[msg.sender];\n', '        unclaimedDividend[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(payment);\n', '\n', '        // Trigger payout event\n', '        Payout(msg.sender, payment);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer dividend (fraction) to new token holder\n', '     * @param _from address The address of the old token holder\n', '     * @param _to address The address of the new token holder\n', '     * @param _value uint256 Number of tokens to transfer\n', '     */\n', '    function transferDividend(address _from, address _to, uint256 _value) internal {\n', '        updateDividend(_from);\n', '        updateDividend(_to);\n', '\n', '        uint256 transAmount = unclaimedDividend[_from].mul(_value).div(balanceOf(_from));\n', '\n', '        unclaimedDividend[_from] = unclaimedDividend[_from].sub(transAmount);\n', '        unclaimedDividend[_to] = unclaimedDividend[_to].add(transAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Update the dividend of hodler\n', '     * @param _hodler address The Address of the hodler\n', '     */\n', '    function updateDividend(address _hodler) internal {\n', '        // last update in previous period -> reset claimable dividend\n', '        if (lastUpdate[_hodler] < lastDividendIncreaseDate) {\n', '            unclaimedDividend[_hodler] = calcDividend(_hodler, totalSupply_);\n', '            lastUpdate[_hodler] = now;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Get claimable dividend for the hodler\n', '     * @param _hodler address The Address of the hodler\n', '     */\n', '    function getClaimableDividend(address _hodler) public constant returns (uint256 claimableDividend) {\n', '        if (lastUpdate[_hodler] < lastDividendIncreaseDate) {\n', '            return calcDividend(_hodler, totalSupply_);\n', '        } else {\n', '            return (unclaimedDividend[_hodler]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides transfer method from BasicToken\n', '     * transfer token for a specified address\n', '     * @param _to address The address to transfer to.\n', '     * @param _value uint256 The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        transferDividend(msg.sender, _to, _value);\n', '\n', '        // Return from inherited transfer method\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        // Prevent dividend to be claimed twice\n', '        transferDividend(_from, _to, _value);\n', '\n', '        // Return from inherited transferFrom method\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Set / alter treasurer "account". This can be done from owner only\n', '     * @param _treasurer address Address of the treasurer to create/alter\n', '     * @param _active bool Flag that shows if the treasurer account is active\n', '     */\n', '    function setTreasurer(address _treasurer, bool _active) public onlyOwner {\n', '        isTreasurer[_treasurer] = _active;\n', '        ChangedTreasurer(_treasurer, _active);\n', '    }\n', '\n', '    /**\n', '     * @dev Request unclaimed ETH, payback to beneficiary (owner) wallet\n', '     * dividend payment is possible every 330 days at the earliest - can be later, this allows for some flexibility,\n', '     * e.g. board meeting had to happen a bit earlier this year than previous year.\n', '     */\n', '    function requestUnclaimed() public onlyOwner {\n', '        // Send remaining ETH to beneficiary (back to owner) if dividend round is over\n', '        require(now >= dividendEndTime.sub(claimTimeout));\n', '\n', '        msg.sender.transfer(this.balance);\n', '\n', '        Reclaimed(this.balance, dividendEndTime, now);\n', '    }\n', '\n', '    /**\n', '     * @dev ETH Payin for Treasurer\n', '     * Only owner or treasurer can do a payin for all token holder.\n', '     * Owner / treasurer can also increase dividend by calling fallback function multiple times.\n', '     */\n', '    function() public payable {\n', '        require(isTreasurer[msg.sender]);\n', '        require(dividendEndTime < now);\n', '\n', '        // pay back unclaimed dividend that might not have been claimed by owner yet\n', '        if (this.balance > msg.value) {\n', '            uint256 payout = this.balance.sub(msg.value);\n', '            owner.transfer(payout);\n', '            Reclaimed(payout, dividendEndTime, now);\n', '        }\n', '\n', '        currentDividend = this.balance;\n', '\n', '        // No active dividend cycle found, initialize new round\n', '        dividendEndTime = now.add(dividendCycleTime);\n', '\n', '        // Trigger payin event\n', '        Payin(msg.sender, msg.value, dividendEndTime);\n', '\n', '        lastDividendIncreaseDate = now;\n', '    }\n', '\n', '    /**\n', '     * @dev calculate the dividend\n', '     * @param _hodler address\n', '     * @param _totalSupply uint256\n', '     */\n', '    function calcDividend(address _hodler, uint256 _totalSupply) public view returns(uint256) {\n', '        return (currentDividend.mul(balanceOf(_hodler))).div(_totalSupply);\n', '    }\n', '}\n', '\n', '//File: src/contracts/ico/IcoToken.sol\n', '/**\n', ' * @title ICO token\n', ' * @version 1.0\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', 'contract IcoToken is MintableToken, PausableToken, DividendToken {\n', '    string public constant name = "Tend Token";\n', '    string public constant symbol = "TND";\n', '    uint8 public constant decimals = 18;\n', '\n', '    /**\n', '     * @dev Constructor of IcoToken that instantiate a new DividendToken\n', '     */\n', '    function IcoToken() public DividendToken() {\n', '        // token should not be transferrable until after all tokens have been issued\n', '        paused = true;\n', '    }\n', '}\n', '\n', '//File: src/contracts/ico/IcoCrowdsale.sol\n', '/**\n', ' * @title IcoCrowdsale\n', ' * Simple time and capped based crowdsale.\n', ' *\n', ' * @version 1.0\n', ' * @author Validity Labs AG <info@validitylabs.org>\n', ' */\n', 'pragma solidity ^0.4.18;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract IcoCrowdsale is Crowdsale, Ownable {\n', '    /*** CONSTANTS ***/\n', '    // Different levels of caps per allotment\n', '    uint256 public constant MAX_TOKEN_CAP = 13e6 * 1e18;        // 13 million * 1e18\n', '\n', '    // // Bottom three should add to above\n', '    uint256 public constant ICO_ENABLERS_CAP = 15e5 * 1e18;     // 1.5 million * 1e18\n', '    uint256 public constant DEVELOPMENT_TEAM_CAP = 2e6 * 1e18;  // 2 million * 1e18\n', '    uint256 public constant ICO_TOKEN_CAP = 9.5e6 * 1e18;        // 9.5 million  * 1e18\n', '\n', '    uint256 public constant CHF_CENT_PER_TOKEN = 1000;          // standard CHF per token rate - in cents - 10 CHF => 1000 CHF cents\n', '    uint256 public constant MIN_CONTRIBUTION_CHF = 250;\n', '\n', '    uint256 public constant VESTING_CLIFF = 1 years;\n', '    uint256 public constant VESTING_DURATION = 3 years;\n', '\n', '    // Amount of discounted tokens per discount stage (2 stages total; each being the same amount)\n', '    uint256 public constant DISCOUNT_TOKEN_AMOUNT_T1 = 3e6 * 1e18; // 3 million * 1e18\n', '    uint256 public constant DISCOUNT_TOKEN_AMOUNT_T2 = DISCOUNT_TOKEN_AMOUNT_T1 * 2;\n', '\n', '    // Track tokens depending which stage that the ICO is in\n', '    uint256 public tokensToMint;            // tokens to be minted after confirmation\n', '    uint256 public tokensMinted;            // already minted tokens (maximally = cap)\n', '    uint256 public icoEnablersTokensMinted;\n', '    uint256 public developmentTeamTokensMinted;\n', '\n', '    uint256 public minContributionInWei;\n', '    uint256 public tokenPerWei;\n', '    uint256 public totalTokensPurchased;\n', '    bool public capReached;\n', '    bool public tier1Reached;\n', '    bool public tier2Reached;\n', '\n', '    address public underwriter;\n', '\n', '    // allow managers to blacklist and confirm contributions by manager accounts\n', '    // (managers can be set and altered by owner, multiple manager accounts are possible\n', '    mapping(address => bool) public isManager;\n', '\n', '    // true if addess is not allowed to invest\n', '    mapping(address => bool) public isBlacklisted;\n', '\n', '    uint256 public confirmationPeriod;\n', '    bool public confirmationPeriodOver;     // can be set by owner to finish confirmation in under 30 days\n', '\n', '    // for convenience we store vesting wallets\n', '    address[] public vestingWallets;\n', '\n', '    uint256 public investmentIdLastAttemptedToSettle;\n', '\n', '    struct Payment {\n', '        address investor;\n', '        address beneficiary;\n', '        uint256 weiAmount;\n', '        uint256 tokenAmount;\n', '        bool confirmed;\n', '        bool attemptedSettlement;\n', '        bool completedSettlement;\n', '    }\n', '\n', '    Payment[] public investments;\n', '\n', '    /*** EVENTS ***/\n', '    event ChangedInvestorBlacklisting(address investor, bool blacklisted);\n', '    event ChangedManager(address manager, bool active);\n', '    event ChangedInvestmentConfirmation(uint256 investmentId, address investor, bool confirmed);\n', '\n', '    /*** MODIFIERS ***/\n', '    modifier onlyUnderwriter() {\n', '        require(msg.sender == underwriter);\n', '        _;\n', '    }\n', '\n', '    modifier onlyManager() {\n', '        require(isManager[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    modifier onlyNoneZero(address _to, uint256 _amount) {\n', '        require(_to != address(0));\n', '        require(_amount > 0);\n', '        _;\n', '    }\n', '\n', '    modifier onlyConfirmPayment() {\n', '        require(now > endTime && now <= endTime.add(confirmationPeriod));\n', '        require(!confirmationPeriodOver);\n', '        _;\n', '    }\n', '\n', '    modifier onlyConfirmationOver() {\n', '        require(confirmationPeriodOver || now > endTime.add(confirmationPeriod));\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Deploy capped ico crowdsale contract\n', '     * @param _startTime uint256 Start time of the crowdsale\n', '     * @param _endTime uint256 End time of the crowdsale\n', '     * @param _rateChfPerEth uint256 CHF per ETH rate\n', '     * @param _wallet address Wallet address of the crowdsale\n', '     * @param _confirmationPeriodDays uint256 Confirmation period in days\n', '     * @param _underwriter address of the underwriter\n', '     */\n', '    function IcoCrowdsale(\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rateChfPerEth,\n', '        address _wallet,\n', '        uint256 _confirmationPeriodDays,\n', '        address _underwriter\n', '    )\n', '        public\n', '        Crowdsale(_startTime, _endTime, _rateChfPerEth, _wallet)\n', '    {\n', '        require(MAX_TOKEN_CAP == ICO_ENABLERS_CAP.add(ICO_TOKEN_CAP).add(DEVELOPMENT_TEAM_CAP));\n', '        require(_underwriter != address(0));\n', '\n', '        setManager(msg.sender, true);\n', '\n', '        tokenPerWei = (_rateChfPerEth.mul(1e2)).div(CHF_CENT_PER_TOKEN);\n', '        minContributionInWei = (MIN_CONTRIBUTION_CHF.mul(1e18)).div(_rateChfPerEth);\n', '\n', '        confirmationPeriod = _confirmationPeriodDays * 1 days;\n', '        underwriter = _underwriter;\n', '    }\n', '\n', '    /**\n', '     * @dev Set / alter manager / blacklister account. This can be done from owner only\n', '     * @param _manager address address of the manager to create/alter\n', '     * @param _active bool flag that shows if the manager account is active\n', '     */\n', '    function setManager(address _manager, bool _active) public onlyOwner {\n', '        isManager[_manager] = _active;\n', '        ChangedManager(_manager, _active);\n', '    }\n', '\n', '    /**\n', '     * @dev blacklist investor from participating in the crowdsale\n', '     * @param _investor address address of the investor to disallowed participation\n', '     */\n', '    function blackListInvestor(address _investor, bool _active) public onlyManager {\n', '        isBlacklisted[_investor] = _active;\n', '        ChangedInvestorBlacklisting(_investor, _active);\n', '    }\n', '\n', '    /**\n', '     * @dev override (not extend! because we only issues tokens after final KYC confirm phase)\n', '     *      core functionality by blacklist check and registration of payment\n', '     * @param _beneficiary address address of the beneficiary to receive tokens after they have been confirmed\n', '     */\n', '    function buyTokens(address _beneficiary) public payable {\n', '        require(_beneficiary != address(0));\n', '        require(validPurchase());\n', '        require(!isBlacklisted[msg.sender]);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 tokenAmount;\n', '        uint256 purchasedTokens = weiAmount.mul(tokenPerWei);\n', '        uint256 tempTotalTokensPurchased = totalTokensPurchased.add(purchasedTokens);\n', '        uint256 overflowTokens;\n', '        uint256 overflowTokens2;\n', '        // 20% discount bonus amount\n', '        uint256 tier1BonusTokens;\n', '        // 10% discount bonus amount\n', '        uint256 tier2BonusTokens;\n', '\n', '        // tier 1 20% discount - 1st 3 million tokens purchased\n', '        if (!tier1Reached) {\n', '\n', '            // tx tokens overflowed into next tier 2 - 10% discount - mark tier1Reached! else all tokens are tier 1 discounted\n', '            if (tempTotalTokensPurchased > DISCOUNT_TOKEN_AMOUNT_T1) {\n', '                tier1Reached = true;\n', '                overflowTokens = tempTotalTokensPurchased.sub(DISCOUNT_TOKEN_AMOUNT_T1);\n', '                tier1BonusTokens = purchasedTokens.sub(overflowTokens);\n', '            // tx tokens did not overflow into next tier 2 (10% discount)\n', '            } else {\n', '                tier1BonusTokens = purchasedTokens;\n', '            }\n', '            //apply discount\n', '            tier1BonusTokens = tier1BonusTokens.mul(10).div(8);\n', '            tokenAmount = tokenAmount.add(tier1BonusTokens);\n', '        }\n', '\n', '        // tier 2 10% discount - 2nd 3 million tokens purchased\n', '        if (tier1Reached && !tier2Reached) {\n', '\n', '            // tx tokens overflowed into next tier 3 - 0% - marked tier2Reached! else all tokens are tier 2 discounted\n', '            if (tempTotalTokensPurchased > DISCOUNT_TOKEN_AMOUNT_T2) {\n', '                tier2Reached = true;\n', '                overflowTokens2 = tempTotalTokensPurchased.sub(DISCOUNT_TOKEN_AMOUNT_T2);\n', '                tier2BonusTokens = purchasedTokens.sub(overflowTokens2);\n', '            // tx tokens did not overflow into next tier 3 (tier 3 == no discount)\n', '            } else {\n', '                // tokens overflowed from tier1 else this tx started in tier2\n', '                if (overflowTokens > 0) {\n', '                    tier2BonusTokens = overflowTokens;\n', '                } else {\n', '                    tier2BonusTokens = purchasedTokens;\n', '                }\n', '            }\n', '            // apply discount for tier 2 tokens\n', '            tier2BonusTokens = tier2BonusTokens.mul(10).div(9);\n', '            tokenAmount = tokenAmount.add(tier2BonusTokens).add(overflowTokens2);\n', '        }\n', '\n', '        // this triggers when both tier 1 and tier 2 discounted tokens have be filled - but ONLY afterwards, not if the flags got set during the same tx\n', '        // aka this is tier 3\n', '        if (tier2Reached && tier1Reached && tier2BonusTokens == 0) {\n', '            tokenAmount = purchasedTokens;\n', '        }\n', '\n', '        /*** Record & update state variables  ***/\n', '        // Tracks purchased tokens for 2 tiers of discounts\n', '        totalTokensPurchased = totalTokensPurchased.add(purchasedTokens);\n', '        // Tracks total tokens pending to be minted - this includes presale tokens\n', '        tokensToMint = tokensToMint.add(tokenAmount);\n', '\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        TokenPurchase(msg.sender, _beneficiary, weiAmount, tokenAmount);\n', '\n', '        // register payment so that later on it can be confirmed (and tokens issued and Ether paid out)\n', '        Payment memory newPayment = Payment(msg.sender, _beneficiary, weiAmount, tokenAmount, false, false, false);\n', '        investments.push(newPayment);\n', '    }\n', '\n', '    /**\n', '     * @dev confirms payment\n', '     * @param _investmentId uint256 uint256 of the investment id to confirm\n', '     */\n', '    function confirmPayment(uint256 _investmentId) public onlyManager onlyConfirmPayment {\n', '        investments[_investmentId].confirmed = true;\n', '        ChangedInvestmentConfirmation(_investmentId, investments[_investmentId].investor, true);\n', '    }\n', '\n', '    /**\n', '     * @dev confirms payments via a batch method\n', '     * @param _investmentIds uint256[] array of uint256 of the investment ids to confirm\n', '     */\n', '    function batchConfirmPayments(uint256[] _investmentIds) public onlyManager onlyConfirmPayment {\n', '        uint256 investmentId;\n', '\n', '        for (uint256 c; c < _investmentIds.length; c = c.add(1)) {\n', '            investmentId = _investmentIds[c]; // gas optimization\n', '            confirmPayment(investmentId);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev unconfirms payment made via investment id\n', '     * @param _investmentId uint256 uint256 of the investment to unconfirm\n', '     */\n', '    function unConfirmPayment(uint256 _investmentId) public onlyManager onlyConfirmPayment {\n', '        investments[_investmentId].confirmed = false;\n', '        ChangedInvestmentConfirmation(_investmentId, investments[_investmentId].investor, false);\n', '    }\n', '\n', '   /**\n', '    * @dev allows contract owner to mint tokens for presale or non-ETH contributions in batches\n', '     * @param _toList address[] array of the beneficiaries to receive tokens\n', '     * @param _tokenList uint256[] array of the token amounts to mint for the corresponding users\n', '    */\n', '    function batchMintTokenDirect(address[] _toList, uint256[] _tokenList) public onlyOwner {\n', '        require(_toList.length == _tokenList.length);\n', '\n', '        for (uint256 i; i < _toList.length; i = i.add(1)) {\n', '            mintTokenDirect(_toList[i], _tokenList[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allows contract owner to mint tokens for presale or non-ETH contributions\n', '     * @param _to address of the beneficiary to receive tokens\n', '     * @param _tokens uint256 of the token amount to mint\n', '     */\n', '    function mintTokenDirect(address _to, uint256 _tokens) public onlyOwner {\n', '        require(tokensToMint.add(_tokens) <= ICO_TOKEN_CAP);\n', '\n', '        tokensToMint = tokensToMint.add(_tokens);\n', '\n', '        // register payment so that later on it can be confirmed (and tokens issued and Ether paid out)\n', '        Payment memory newPayment = Payment(address(0), _to, 0, _tokens, false, false, false);\n', '        investments.push(newPayment);\n', '        TokenPurchase(msg.sender, _to, 0, _tokens);\n', '    }\n', '\n', '    /**\n', '     * @dev allows contract owner to mint tokens for ICO enablers respecting the ICO_ENABLERS_CAP (no vesting)\n', '     * @param _to address for beneficiary\n', '     * @param _tokens uint256 token amount to mint\n', '     */\n', '    function mintIcoEnablersTokens(address _to, uint256 _tokens) public onlyOwner onlyNoneZero(_to, _tokens) {\n', '        require(icoEnablersTokensMinted.add(_tokens) <= ICO_ENABLERS_CAP);\n', '\n', '        token.mint(_to, _tokens);\n', '        icoEnablersTokensMinted = icoEnablersTokensMinted.add(_tokens);\n', '    }\n', '\n', '    /**\n', "     * @dev allows contract owner to mint team tokens per DEVELOPMENT_TEAM_CAP and transfer to the development team's wallet (yes vesting)\n", '     * @param _to address for beneficiary\n', '     * @param _tokens uint256 token amount to mint\n', '     */\n', '    function mintDevelopmentTeamTokens(address _to, uint256 _tokens) public onlyOwner onlyNoneZero(_to, _tokens) {\n', '        require(developmentTeamTokensMinted.add(_tokens) <= DEVELOPMENT_TEAM_CAP);\n', '\n', '        developmentTeamTokensMinted = developmentTeamTokensMinted.add(_tokens);\n', '        TokenVesting newVault = new TokenVesting(_to, now, VESTING_CLIFF, VESTING_DURATION, false);\n', '        vestingWallets.push(address(newVault)); // for convenience we keep them in storage so that they are easily accessible via MEW or etherscan\n', '        token.mint(address(newVault), _tokens);\n', '    }\n', '\n', '    /**\n', '     * @dev returns number of elements in the vestinWallets array\n', '     */\n', '    function getVestingWalletLength() public view returns (uint256) {\n', '        return vestingWallets.length;\n', '    }\n', '\n', '    /**\n', '     * @dev set final the confirmation period\n', '     */\n', '    function finalizeConfirmationPeriod() public onlyOwner onlyConfirmPayment {\n', '        confirmationPeriodOver = true;\n', '    }\n', '\n', '    /**\n', '     * @dev settlement of investment made via investment id\n', '     * @param _investmentId uint256 uint256 being the investment id\n', '     */\n', '    function settleInvestment(uint256 _investmentId) public onlyConfirmationOver {\n', '        Payment storage p = investments[_investmentId];\n', '\n', '        // investment should not be settled already (prevent double token issueing or repayment)\n', '        require(!p.completedSettlement);\n', '\n', '        // investments have to be processed in right order\n', "        // unless we're at first investment, the previous has needs to have undergone an attempted settlement\n", '\n', '        require(_investmentId == 0 || investments[_investmentId.sub(1)].attemptedSettlement);\n', '\n', '        p.attemptedSettlement = true;\n', '\n', '        // just so that we can see which one we attempted last time and can continue with next\n', '        investmentIdLastAttemptedToSettle = _investmentId;\n', '\n', '        if (p.confirmed && !capReached) {\n', '            // if confirmed -> issue tokens, send ETH to wallet and complete settlement\n', '\n', '            // calculate number of tokens to be issued to investor\n', '            uint256 tokens = p.tokenAmount;\n', '\n', '            // check to see if this purchase sets it over the crowdsale token cap\n', '            // if so, refund\n', '            if (tokensMinted.add(tokens) > ICO_TOKEN_CAP) {\n', '                capReached = true;\n', '                if (p.weiAmount > 0) {\n', "                    p.investor.send(p.weiAmount); // does not throw (otherwise we'd block all further settlements)\n", '                }\n', '            } else {\n', '                tokensToMint = tokensToMint.sub(tokens);\n', '                tokensMinted = tokensMinted.add(tokens);\n', '\n', '                // mint tokens for beneficiary\n', '                token.mint(p.beneficiary, tokens);\n', '                if (p.weiAmount > 0) {\n', '                    // send Ether to project wallet (throws if wallet throws)\n', '                    wallet.transfer(p.weiAmount);\n', '                }\n', '            }\n', '\n', '            p.completedSettlement = true;\n', '        } else {\n', '            // if not confirmed -> reimburse ETH or if fiat (presale) investor: do nothing\n', '            // only complete settlement if investor got their money back\n', '            // (does not throw (as .transfer would)\n', '            // otherwise we would block settlement process of all following investments)\n', '            if (p.investor != address(0) && p.weiAmount > 0) {\n', '                if (p.investor.send(p.weiAmount)) {\n', '                    p.completedSettlement = true;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allows the batch settlement of investments made\n', '     * @param _investmentIds uint256[] array of uint256 of investment ids\n', '     */\n', '    function batchSettleInvestments(uint256[] _investmentIds) public {\n', '        for (uint256 c; c < _investmentIds.length; c = c.add(1)) {\n', '            settleInvestment(_investmentIds[c]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev allows contract owner to finalize the ICO, unpause tokens, set treasurer, finish minting, and transfer ownship of the token contract\n', '     */\n', '    function finalize() public onlyUnderwriter onlyConfirmationOver {\n', '        Pausable(token).unpause();\n', '\n', '        // this crowdsale also should not be treasurer of the token anymore\n', '        IcoToken(token).setTreasurer(this, false);\n', '\n', '        // do not allow new owner to mint further tokens\n', '        MintableToken(token).finishMinting();\n', '\n', '        // until now the owner of the token is this crowdsale contract\n', '        // in order for a human owner to make use of the tokens onlyOwner functions\n', '        // we need to transfer the ownership\n', '        // in the end the owner of this crowdsale will also be the owner of the token\n', '        Ownable(token).transferOwnership(owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Create new instance of ico token contract\n', '     */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new IcoToken();\n', '    }\n', '\n', '    /**\n', '     * @dev extend base functionality with min investment amount\n', '     */\n', '    function validPurchase() internal view returns (bool) {\n', '        // minimal investment: 250 CHF (represented in wei)\n', '        require (msg.value >= minContributionInWei);\n', '        return super.validPurchase();\n', '    }\n', '}']