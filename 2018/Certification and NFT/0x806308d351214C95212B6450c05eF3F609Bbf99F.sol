['pragma solidity 0.4.25;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}  \n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ClaimReward is Ownable {\n', '    /// @dev This emits when claimReward is called\n', '    event LogClaimReward(address indexed sender, uint256 indexed rewards);\n', '    \n', '    address communityFundAddress = 0x325a7A78e5da2333b475570398F27D8F4e8E9Eb3;\n', '    address livePeerContractAddress = 0x58b6A8A3302369DAEc383334672404Ee733aB239;\n', '\n', '    // Delegators addresses \n', '    address[] private delegatorAddressList;\n', '\n', '    mapping (address => Delegator) rewardDelegators;\n', '    // count the number of reward claimed    \n', '    uint256 public claimCounter = 0;\n', '    // Status of the current contract \n', '    bool public contractStopped = false;\n', '    \n', '    struct Delegator {\n', '        address delegator;\n', '        uint rewards;\n', '        bool hasClaimed;\n', '    }\n', '    \n', '    // Used to check contract status before executing createQuestionnaire function\n', '    modifier haltInEmergency {\n', '        require(!contractStopped);\n', '        _;\n', '    }\n', '    \n', '    /// @notice only the contract owner is allowed to change\n', '    /// @dev change the contract status to pause or continue\n', '    function toggleContractStopped() public onlyOwner {\n', '        contractStopped = !contractStopped;\n', '    }\n', '    \n', '    // @dev initialize delegator address and rewards\n', '    function updateDelegatorRewards(address[] delegatorAddress, uint[] rewards) onlyOwner public returns (bool) {\n', '        for (uint i=0; i<delegatorAddress.length; i++) {\n', '            Delegator memory delegator = Delegator(delegatorAddress[i], rewards[i] * 10 ** 14 , false);\n', '            rewardDelegators[delegatorAddress[i]] = delegator;\n', '            delegatorAddressList.push(delegatorAddress[i]);\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    // @dev query the delegator rewards\n', '    function checkRewards() external view returns (uint256) {\n', '        return rewardDelegators[msg.sender].rewards;\n', '    }\n', '    \n', '    // @dev transfer the reward to the delegator\n', '    function claimRewards() external haltInEmergency returns (bool) {\n', '        require(!rewardDelegators[msg.sender].hasClaimed);\n', '        require(rewardDelegators[msg.sender].delegator == msg.sender);\n', '        require((ERC20(livePeerContractAddress).balanceOf(this) - this.checkRewards()) > 0);\n', '        require(claimCounter < this.getAllDelegatorAddress().length);\n', '        \n', '        rewardDelegators[msg.sender].hasClaimed = true;\n', '        claimCounter += 1;\n', '        ERC20(livePeerContractAddress).transfer(msg.sender, rewardDelegators[msg.sender].rewards);\n', '        \n', '        emit LogClaimReward(msg.sender, rewardDelegators[msg.sender].rewards);\n', '        \n', '        return true;\n', '    }\n', '\n', '    // @dev transfer those remaining LPT to the community fund address\n', '    function activateCommunityFund() external onlyOwner returns (bool) {\n', '        require(ERC20(livePeerContractAddress).balanceOf(this) > 0);\n', '        ERC20(livePeerContractAddress).transfer(communityFundAddress, ERC20(livePeerContractAddress).balanceOf(this));\n', '        return true;\n', '    }\n', '    \n', '    // @dev return all delegators\n', '    function getAllDelegatorAddress() external view returns (address[]) {\n', '        return delegatorAddressList;  \n', '    } \n', '}']