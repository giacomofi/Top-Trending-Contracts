['pragma solidity ^0.4.24;\n', '\n', '/*** @title SafeMath\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol */\n', 'library SafeMath {\n', '  \n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '  \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '  \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'interface ERC20 {\n', '  function transfer (address _beneficiary, uint256 _tokenAmount) external returns (bool);\n', '  function mintFromICO(address _to, uint256 _amount) external  returns(bool);\n', '  function buyTokenICO(address _investor, uint256 _value) external  returns(bool);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/ownership/Ownable.sol */\n', 'contract Ownable {\n', '  address public owner;\n', '  \n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title MainCrowdSale\n', ' * @dev https://github.com/elephant-marketing/*/\n', '\n', 'contract MainSale is Ownable {\n', '  \n', '  ERC20 public token;\n', '  \n', '  ERC20 public BuyBackContract;\n', '  \n', '  using SafeMath for uint;\n', '  \n', '  address public backEndOperator = msg.sender;\n', '  \n', '  address team = 0x550cBC2C3Ac03f8f1d950FEf755Cd664fc498036; // 10 % - founders\n', '  \n', '  address bounty = 0x8118317911B0De31502aC978e1dD38e9EeE92538; // 2 % - bounty\n', '  \n', '  \n', '  mapping(address=>bool) public whitelist;\n', '  \n', '  mapping(address => uint256) public investedEther;\n', '  \n', '  mapping(address => uint8) public typeOfInvestors;\n', '  \n', '  \n', '  uint256 public startMainSale = 1539561600; // Monday, 15-Oct-18 00:00:00 UTC\n', '  \n', '  uint256 public endMainSale = 1544831999; // Friday, 14-Dec-18 23:59:59 UTC\n', '  \n', '  \n', '  uint256 public stage1Sale = startMainSale + 14 days; // 0- 7  days\n', '  \n', '  uint256 public stage2Sale = startMainSale + 28 days; // 8 - 14 days\n', '  \n', '  uint256 public stage3Sale = startMainSale + 42 days; // 15 - 21  days\n', '  \n', '  \n', '  uint256 public investors;\n', '  \n', '  uint256 public weisRaised;\n', '  \n', '  uint256 public buyPrice; // 1 USD\n', '  \n', '  uint256 public dollarPrice;\n', '  \n', '  uint256 public soldTokensMainSale;\n', '  \n', '  uint256 public softcapMainSale = 18500000*1e18; // 18,500,000 ANG - !!! в зачет пойдут бонусные\n', '  \n', '  uint256 public hardCapMainSale = 103500000*1e18; // 103,500,000 ANG - !!! в зачет пойдут бонусные\n', '  \n', '  \n', '  event Authorized(address wlCandidate, uint timestamp, uint8 investorType);\n', '  \n', '  event Revoked(address wlCandidate, uint timestamp);\n', '  \n', '  event UpdateDollar(uint256 time, uint256 _rate);\n', '  \n', '  event Refund(uint256 sum, address investor);\n', '  \n', '  \n', '  \n', '  modifier backEnd() {\n', '    require(msg.sender == backEndOperator || msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  \n', '  constructor(ERC20 _token, uint256 usdETH) public {\n', '    token = _token;\n', '    dollarPrice = usdETH;\n', '    buyPrice = (1e18/dollarPrice); // 1 usd\n', '  }\n', '  \n', '  \n', '  function setStartMainSale(uint256 newStartMainSale) public onlyOwner {\n', '    startMainSale = newStartMainSale;\n', '  }\n', '  \n', '  function setEndMainSale(uint256 newEndMainSale) public onlyOwner {\n', '    endMainSale = newEndMainSale;\n', '  }\n', '  \n', '  function setBackEndAddress(address newBackEndOperator) public onlyOwner {\n', '    backEndOperator = newBackEndOperator;\n', '  }\n', '  \n', '  function setBuyBackAddress(ERC20 newBuyBackAddress) public onlyOwner {\n', '    BuyBackContract = newBuyBackAddress;\n', '  }\n', '  \n', '  function setBuyPrice(uint256 _dollar) public onlyOwner {\n', '    dollarPrice = _dollar;\n', '    buyPrice = (1e18/dollarPrice); // 1 usd\n', '    emit UpdateDollar(now, dollarPrice);\n', '  }\n', '  \n', '  /*******************************************************************************\n', "   * Whitelist's section */\n", '  \n', '  function authorize(address wlCandidate, uint8 investorType) public backEnd  {\n', '    require(wlCandidate != address(0x0));\n', '    require(!isWhitelisted(wlCandidate));\n', '    require(investors == 1 || investorType == 2);\n', '    \n', '    whitelist[wlCandidate] = true;\n', '    investors++;\n', '    \n', '    if (investorType == 1) {\n', '      typeOfInvestors[wlCandidate] = 1;\n', '    } else {\n', '      typeOfInvestors[wlCandidate] = 2;\n', '    }\n', '    emit Authorized(wlCandidate, now, investorType);\n', '  }\n', '  \n', '  \n', '  function revoke(address wlCandidate) public  onlyOwner {\n', '    whitelist[wlCandidate] = false;\n', '    investors--;\n', '    emit Revoked(wlCandidate, now);\n', '  }\n', '  \n', '  \n', '  function isWhitelisted(address wlCandidate) internal view returns(bool) {\n', '    return whitelist[wlCandidate];\n', '  }\n', '  \n', '  \n', '  /*******************************************************************************\n', "   * Payable's section */\n", '  \n', '  function isMainSale() public constant returns(bool) {\n', '    return now >= startMainSale && now <= endMainSale;\n', '  }\n', '  \n', '  \n', '  function () public payable {\n', '    require(isWhitelisted(msg.sender));\n', '    require(isMainSale());\n', '    mainSale(msg.sender, msg.value);\n', '    require(soldTokensMainSale<=hardCapMainSale);\n', '    investedEther[msg.sender] = investedEther[msg.sender].add(msg.value);\n', '  }\n', '  \n', '  \n', '  function mainSale(address _investor, uint256 _value) internal {\n', '    uint256 tokens = _value.mul(1e18).div(buyPrice);\n', '    uint256 tokensByDate = tokens.mul(bonusDate()).div(100);\n', '    tokens = tokens.add(tokensByDate);\n', '    token.mintFromICO(_investor, tokens);\n', '    BuyBackContract.buyTokenICO(_investor, tokens);//Set count token for periods ICO\n', '    soldTokensMainSale = soldTokensMainSale.add(tokens); // only sold\n', '\t \n', '    uint256 tokensTeam = tokens.mul(5).div(44); // 10 %\n', '    token.mintFromICO(team, tokensTeam);\n', '    \n', '    uint256 tokensBoynty = tokens.div(44); // 2 %\n', '    token.mintFromICO(bounty, tokensBoynty);\n', '    \n', '    weisRaised = weisRaised.add(_value);\n', '  }\n', '  \n', '  \n', '  function bonusDate() private view returns (uint256){\n', '    if (now > startMainSale && now < stage1Sale) {  // 0 - 14 days preSale\n', '      return 30;\n', '    }\n', '    else if (now > stage1Sale && now < stage2Sale) { // 15 - 28 days preSale\n', '      return 20;\n', '    }\n', '    else if (now > stage2Sale && now < stage3Sale) { // 29 - 42 days preSale\n', '      return 10;\n', '    }\n', '    else if (now > stage3Sale && now < endMainSale) { // 43 - endSale\n', '      return 6;\n', '    }\n', '    \n', '    else {\n', '      return 0;\n', '    }\n', '  }\n', '  \n', '  \n', '  function mintManual(address receiver, uint256 _tokens) public backEnd {\n', '    token.mintFromICO(receiver, _tokens);\n', '    soldTokensMainSale = soldTokensMainSale.add(_tokens);\n', '    BuyBackContract.buyTokenICO(receiver, _tokens);//Set count token for periods ICO\n', '\t \n', '    uint256 tokensTeam = _tokens.mul(5).div(44); // 10 %\n', '    token.mintFromICO(team, tokensTeam);\n', '    \n', '    uint256 tokensBoynty = _tokens.div(44); // 2 %\n', '    token.mintFromICO(bounty, tokensBoynty);\n', '  }\n', '  \n', '  \n', '  function transferEthFromContract(address _to, uint256 amount) public onlyOwner {\n', '    _to.transfer(amount);\n', '  }\n', '  \n', '  \n', '  function refundPreSale() public {\n', '    require(soldTokensMainSale < soldTokensMainSale && now > endMainSale);\n', '    uint256 rate = investedEther[msg.sender];\n', '    require(investedEther[msg.sender] >= 0);\n', '    investedEther[msg.sender] = 0;\n', '    msg.sender.transfer(rate);\n', '    weisRaised = weisRaised.sub(rate);\n', '    emit Refund(rate, msg.sender);\n', '  }\n', '}']