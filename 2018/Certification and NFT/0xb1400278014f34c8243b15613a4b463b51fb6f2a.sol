['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(0x0, _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract Ballot {\n', '    using SafeMath for uint256;\n', '    EthearnalRepToken public tokenContract;\n', '\n', '    // Date when vote has started\n', '    uint256 public ballotStarted;\n', '\n', '    // Registry of votes\n', '    mapping(address => bool) public votesByAddress;\n', '\n', '    // Sum of weights of YES votes\n', '    uint256 public yesVoteSum = 0;\n', '\n', '    // Sum of weights of NO votes\n', '    uint256 public noVoteSum = 0;\n', '\n', '    // Length of `voters`\n', '    uint256 public votersLength = 0;\n', '\n', '    uint256 public initialQuorumPercent = 51;\n', '\n', '    VotingProxy public proxyVotingContract;\n', '\n', '    // Tells if voting process is active\n', '    bool public isVotingActive = false;\n', '\n', '    event FinishBallot(uint256 _time);\n', '    event Vote(address indexed sender, bytes vote);\n', '    \n', '    modifier onlyWhenBallotStarted {\n', '        require(ballotStarted != 0);\n', '        _;\n', '    }\n', '\n', '    function Ballot(address _tokenContract) {\n', '        tokenContract = EthearnalRepToken(_tokenContract);\n', '        proxyVotingContract = VotingProxy(msg.sender);\n', '        ballotStarted = getTime();\n', '        isVotingActive = true;\n', '    }\n', '    \n', '    function getQuorumPercent() public constant returns (uint256) {\n', '        require(isVotingActive);\n', '        // find number of full weeks alapsed since voting started\n', '        uint256 weeksNumber = getTime().sub(ballotStarted).div(1 weeks);\n', '        if(weeksNumber == 0) {\n', '            return initialQuorumPercent;\n', '        }\n', '        if (initialQuorumPercent < weeksNumber * 10) {\n', '            return 0;\n', '        } else {\n', '            return initialQuorumPercent.sub(weeksNumber * 10);\n', '        }\n', '    }\n', '\n', '    function vote(bytes _vote) public onlyWhenBallotStarted {\n', '        require(_vote.length > 0);\n', '        if (isDataYes(_vote)) {\n', '            processVote(true);\n', '        } else if (isDataNo(_vote)) {\n', '            processVote(false);\n', '        }\n', '        Vote(msg.sender, _vote);\n', '    }\n', '\n', '    function isDataYes(bytes data) public constant returns (bool) {\n', '        // compare data with "YES" string\n', '        return (\n', '            data.length == 3 &&\n', '            (data[0] == 0x59 || data[0] == 0x79) &&\n', '            (data[1] == 0x45 || data[1] == 0x65) &&\n', '            (data[2] == 0x53 || data[2] == 0x73)\n', '        );\n', '    }\n', '\n', '    // TESTED\n', '    function isDataNo(bytes data) public constant returns (bool) {\n', '        // compare data with "NO" string\n', '        return (\n', '            data.length == 2 &&\n', '            (data[0] == 0x4e || data[0] == 0x6e) &&\n', '            (data[1] == 0x4f || data[1] == 0x6f)\n', '        );\n', '    }\n', '    \n', '    function processVote(bool isYes) internal {\n', '        require(isVotingActive);\n', '        require(!votesByAddress[msg.sender]);\n', '        votersLength = votersLength.add(1);\n', '        uint256 voteWeight = tokenContract.balanceOf(msg.sender);\n', '        if (isYes) {\n', '            yesVoteSum = yesVoteSum.add(voteWeight);\n', '        } else {\n', '            noVoteSum = noVoteSum.add(voteWeight);\n', '        }\n', '        require(getTime().sub(tokenContract.lastMovement(msg.sender)) > 7 days);\n', '        uint256 quorumPercent = getQuorumPercent();\n', '        if (quorumPercent == 0) {\n', '            isVotingActive = false;\n', '        } else {\n', '            decide();\n', '        }\n', '        votesByAddress[msg.sender] = true;\n', '    }\n', '\n', '    function decide() internal {\n', '        uint256 quorumPercent = getQuorumPercent();\n', '        uint256 quorum = quorumPercent.mul(tokenContract.totalSupply()).div(100);\n', '        uint256 soFarVoted = yesVoteSum.add(noVoteSum);\n', '        if (soFarVoted >= quorum) {\n', '            uint256 percentYes = (100 * yesVoteSum).div(soFarVoted);\n', '            if (percentYes >= initialQuorumPercent) {\n', '                // does not matter if it would be greater than weiRaised\n', '                proxyVotingContract.proxyIncreaseWithdrawalChunk();\n', '                FinishBallot(now);\n', '                isVotingActive = false;\n', '            } else {\n', '                // do nothing, just deactivate voting\n', '                isVotingActive = false;\n', '                FinishBallot(now);\n', '            }\n', '        }\n', '        \n', '    }\n', '\n', '    function getTime() internal returns (uint256) {\n', '        // Just returns `now` value\n', '        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\n', '        // to allow testing contract behaviour at different time moments\n', '        return now;\n', '    }\n', '    \n', '}\n', '\n', 'contract LockableToken is StandardToken, Ownable {\n', '    bool public isLocked = true;\n', '    mapping (address => uint256) public lastMovement;\n', '    event Burn(address _owner, uint256 _amount);\n', '\n', '\n', '    function unlock() public onlyOwner {\n', '        isLocked = false;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _amount) public returns (bool) {\n', '        require(!isLocked);\n', '        lastMovement[msg.sender] = getTime();\n', '        lastMovement[_to] = getTime();\n', '        return super.transfer(_to, _amount);\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(!isLocked);\n', '        lastMovement[_from] = getTime();\n', '        lastMovement[_to] = getTime();\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        require(!isLocked);\n', '        super.approve(_spender, _value);\n', '    }\n', '\n', '    function burnFrom(address _from, uint256 _value) public  returns (bool) {\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(_from, _value);\n', '        return true;\n', '    }\n', '\n', '    function getTime() internal returns (uint256) {\n', '        // Just returns `now` value\n', '        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\n', '        // to allow testing contract behaviour at different time moments\n', '        return now;\n', '    }\n', '\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (_token == 0x0) {\n', '            owner.transfer(this.balance);\n', '            return;\n', '        }\n', '    \n', '        ERC20Basic token = ERC20Basic(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '    }\n', '\n', '}\n', '\n', 'contract EthearnalRepToken is MintableToken, LockableToken {\n', '    string public constant name = &#39;Ethearnal Rep Token&#39;;\n', '    string public constant symbol = &#39;ERT&#39;;\n', '    uint8 public constant decimals = 18;\n', '}\n', '\n', 'contract MultiOwnable {\n', '    mapping (address => bool) public ownerRegistry;\n', '    address[] owners;\n', '    address public multiOwnableCreator = 0x0;\n', '\n', '    function MultiOwnable() public {\n', '        multiOwnableCreator = msg.sender;\n', '    }\n', '\n', '    function setupOwners(address[] _owners) public {\n', '        // Owners are allowed to be set up only one time\n', '        require(multiOwnableCreator == msg.sender);\n', '        require(owners.length == 0);\n', '        for(uint256 idx=0; idx < _owners.length; idx++) {\n', '            require(\n', '                !ownerRegistry[_owners[idx]] &&\n', '                _owners[idx] != 0x0 &&\n', '                _owners[idx] != address(this)\n', '            );\n', '            ownerRegistry[_owners[idx]] = true;\n', '        }\n', '        owners = _owners;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(ownerRegistry[msg.sender] == true);\n', '        _;\n', '    }\n', '\n', '    function getOwners() public constant returns (address[]) {\n', '        return owners;\n', '    }\n', '}\n', '\n', 'contract EthearnalRepTokenCrowdsale is MultiOwnable {\n', '    using SafeMath for uint256;\n', '\n', '    /* *********************\n', '     * Variables & Constants\n', '     */\n', '\n', '    // Token Contract\n', '    EthearnalRepToken public token;\n', '\n', '    // Ethereum rate, how much USD does 1 ether cost\n', '    // The actual value is set by setEtherRateUsd\n', '    uint256 etherRateUsd = 1000;\n', '\n', '    // Token price in Usd, 1 token is 1.0 USD, 3 decimals. So, 1000 = $1.000\n', '    uint256 public tokenRateUsd = 1000;\n', '\n', '    // Mainsale Start Date February 28, 2018 3:00:00 PM\n', '    uint256 public constant saleStartDate = 1519830000;\n', '\n', '    // Mainsale End Date March 31, 2018 11:59:59 PM GMT\n', '    uint256 public constant saleEndDate = 1522540799;\n', '\n', '    // How many tokens generate for the team, ratio with 3 decimals digits\n', '    uint256 public constant teamTokenRatio = uint256(1 * 1000) / 3;\n', '\n', '    // Crowdsale State\n', '    enum State {\n', '        BeforeMainSale, // pre-sale finisehd, before main sale\n', '        MainSale, // main sale is active\n', '        MainSaleDone, // main sale done, ICO is not finalized\n', '        Finalized // the final state till the end of the world\n', '    }\n', '\n', '    // Hard cap for total sale\n', '    uint256 public saleCapUsd = 30 * (10**6);\n', '\n', '    // Money raised totally\n', '    uint256 public weiRaised = 0;\n', '\n', '    // This event means everything is finished and tokens\n', '    // are allowed to be used by their owners\n', '    bool public isFinalized = false;\n', '\n', '    // Wallet to send team tokens\n', '    address public teamTokenWallet = 0x0;\n', '\n', '    // money received from each customer\n', '    mapping(address => uint256) public raisedByAddress;\n', '\n', '    // whitelisted investors\n', '    mapping(address => bool) public whitelist;\n', '    // how many whitelisted investors\n', '    uint256 public whitelistedInvestorCounter;\n', '\n', '\n', '    // Extra money each address can spend each hour\n', '    uint256 hourLimitByAddressUsd = 1000;\n', '\n', '    // Wallet to store all raised money\n', '    Treasury public treasuryContract = Treasury(0x0);\n', '\n', '    /* *******\n', '     * Events\n', '     */\n', '    \n', '    event ChangeReturn(address indexed recipient, uint256 amount);\n', '    event TokenPurchase(address indexed buyer, uint256 weiAmount, uint256 tokenAmount);\n', '    /* **************\n', '     * Public methods\n', '     */\n', '\n', '    function EthearnalRepTokenCrowdsale(\n', '        address[] _owners,\n', '        address _treasuryContract,\n', '        address _teamTokenWallet\n', '    ) {\n', '        require(_owners.length > 1);\n', '        require(_treasuryContract != address(0));\n', '        require(_teamTokenWallet != address(0));\n', '        require(Treasury(_treasuryContract).votingProxyContract() != address(0));\n', '        require(Treasury(_treasuryContract).tokenContract() != address(0));\n', '        treasuryContract = Treasury(_treasuryContract);\n', '        teamTokenWallet = _teamTokenWallet;\n', '        setupOwners(_owners);\n', '    }\n', '\n', '    function() public payable {\n', '        if (whitelist[msg.sender]) {\n', '            buyForWhitelisted();\n', '        } else {\n', '            buyTokens();\n', '        }\n', '    }\n', '\n', '    function setTokenContract(address _token) public onlyOwner {\n', '        require(_token != address(0) && token == address(0));\n', '        require(EthearnalRepToken(_token).owner() == address(this));\n', '        require(EthearnalRepToken(_token).totalSupply() == 0);\n', '        require(EthearnalRepToken(_token).isLocked());\n', '        require(!EthearnalRepToken(_token).mintingFinished());\n', '        token = EthearnalRepToken(_token);\n', '    }\n', '\n', '    function buyForWhitelisted() public payable {\n', '        require(token != address(0));\n', '        address whitelistedInvestor = msg.sender;\n', '        require(whitelist[whitelistedInvestor]);\n', '        uint256 weiToBuy = msg.value;\n', '        require(weiToBuy > 0);\n', '        uint256 tokenAmount = getTokenAmountForEther(weiToBuy);\n', '        require(tokenAmount > 0);\n', '        weiRaised = weiRaised.add(weiToBuy);\n', '        raisedByAddress[whitelistedInvestor] = raisedByAddress[whitelistedInvestor].add(weiToBuy);\n', '        forwardFunds(weiToBuy);\n', '        assert(token.mint(whitelistedInvestor, tokenAmount));\n', '        TokenPurchase(whitelistedInvestor, weiToBuy, tokenAmount);\n', '    }\n', '\n', '    function buyTokens() public payable {\n', '        require(token != address(0));\n', '        address recipient = msg.sender;\n', '        State state = getCurrentState();\n', '        uint256 weiToBuy = msg.value;\n', '        require(\n', '            (state == State.MainSale) &&\n', '            (weiToBuy > 0)\n', '        );\n', '        weiToBuy = min(weiToBuy, getWeiAllowedFromAddress(recipient));\n', '        require(weiToBuy > 0);\n', '        weiToBuy = min(weiToBuy, convertUsdToEther(saleCapUsd).sub(weiRaised));\n', '        require(weiToBuy > 0);\n', '        uint256 tokenAmount = getTokenAmountForEther(weiToBuy);\n', '        require(tokenAmount > 0);\n', '        uint256 weiToReturn = msg.value.sub(weiToBuy);\n', '        weiRaised = weiRaised.add(weiToBuy);\n', '        raisedByAddress[recipient] = raisedByAddress[recipient].add(weiToBuy);\n', '        if (weiToReturn > 0) {\n', '            recipient.transfer(weiToReturn);\n', '            ChangeReturn(recipient, weiToReturn);\n', '        }\n', '        forwardFunds(weiToBuy);\n', '        require(token.mint(recipient, tokenAmount));\n', '        TokenPurchase(recipient, weiToBuy, tokenAmount);\n', '    }\n', '\n', '    // TEST\n', '    function finalizeByAdmin() public onlyOwner {\n', '        finalize();\n', '    }\n', '\n', '    /* ****************\n', '     * Internal methods\n', '     */\n', '\n', '    function forwardFunds(uint256 _weiToBuy) internal {\n', '        treasuryContract.transfer(_weiToBuy);\n', '    }\n', '\n', '    // TESTED\n', '    function convertUsdToEther(uint256 usdAmount) constant internal returns (uint256) {\n', '        return usdAmount.mul(1 ether).div(etherRateUsd);\n', '    }\n', '\n', '    // TESTED\n', '    function getTokenRateEther() public constant returns (uint256) {\n', '        // div(1000) because 3 decimals in tokenRateUsd\n', '        return convertUsdToEther(tokenRateUsd).div(1000);\n', '    }\n', '\n', '    // TESTED\n', '    function getTokenAmountForEther(uint256 weiAmount) constant internal returns (uint256) {\n', '        return weiAmount\n', '            .div(getTokenRateEther())\n', '            .mul(10 ** uint256(token.decimals()));\n', '    }\n', '\n', '    // TESTED\n', '    function isReadyToFinalize() internal returns (bool) {\n', '        return(\n', '            (weiRaised >= convertUsdToEther(saleCapUsd)) ||\n', '            (getCurrentState() == State.MainSaleDone)\n', '        );\n', '    }\n', '\n', '    // TESTED\n', '    function min(uint256 a, uint256 b) internal returns (uint256) {\n', '        return (a < b) ? a: b;\n', '    }\n', '\n', '    // TESTED\n', '    function max(uint256 a, uint256 b) internal returns (uint256) {\n', '        return (a > b) ? a: b;\n', '    }\n', '\n', '    // TESTED\n', '    function ceil(uint a, uint b) internal returns (uint) {\n', '        return ((a.add(b).sub(1)).div(b)).mul(b);\n', '    }\n', '\n', '    // TESTED\n', '    function getWeiAllowedFromAddress(address _sender) internal returns (uint256) {\n', '        uint256 secondsElapsed = getTime().sub(saleStartDate);\n', '        uint256 fullHours = ceil(secondsElapsed, 3600).div(3600);\n', '        fullHours = max(1, fullHours);\n', '        uint256 weiLimit = fullHours.mul(convertUsdToEther(hourLimitByAddressUsd));\n', '        return weiLimit.sub(raisedByAddress[_sender]);\n', '    }\n', '\n', '    function getTime() internal returns (uint256) {\n', '        // Just returns `now` value\n', '        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\n', '        // to allow testing contract behaviour at different time moments\n', '        return now;\n', '    }\n', '\n', '    // TESTED\n', '    function getCurrentState() internal returns (State) {\n', '        return getStateForTime(getTime());\n', '    }\n', '\n', '    // TESTED\n', '    function getStateForTime(uint256 unixTime) internal returns (State) {\n', '        if (isFinalized) {\n', '            // This could be before end date of ICO\n', '            // if hard cap is reached\n', '            return State.Finalized;\n', '        }\n', '        if (unixTime < saleStartDate) {\n', '            return State.BeforeMainSale;\n', '        }\n', '        if (unixTime < saleEndDate) {\n', '            return State.MainSale;\n', '        }\n', '        return State.MainSaleDone;\n', '    }\n', '\n', '    // TESTED\n', '    function finalize() private {\n', '        if (!isFinalized) {\n', '            require(isReadyToFinalize());\n', '            isFinalized = true;\n', '            mintTeamTokens();\n', '            token.unlock();\n', '            treasuryContract.setCrowdsaleFinished();\n', '        }\n', '    }\n', '\n', '    // TESTED\n', '    function mintTeamTokens() private {\n', '        // div by 1000 because of 3 decimals digits in teamTokenRatio\n', '        uint256 tokenAmount = token.totalSupply().mul(teamTokenRatio).div(1000);\n', '        token.mint(teamTokenWallet, tokenAmount);\n', '    }\n', '\n', '\n', '    function whitelistInvestor(address _newInvestor) public onlyOwner {\n', '        if(!whitelist[_newInvestor]) {\n', '            whitelist[_newInvestor] = true;\n', '            whitelistedInvestorCounter++;\n', '        }\n', '    }\n', '    function whitelistInvestors(address[] _investors) external onlyOwner {\n', '        require(_investors.length <= 250);\n', '        for(uint8 i=0; i<_investors.length;i++) {\n', '            address newInvestor = _investors[i];\n', '            if(!whitelist[newInvestor]) {\n', '                whitelist[newInvestor] = true;\n', '                whitelistedInvestorCounter++;\n', '            }\n', '        }\n', '    }\n', '    function blacklistInvestor(address _investor) public onlyOwner {\n', '        if(whitelist[_investor]) {\n', '            delete whitelist[_investor];\n', '            if(whitelistedInvestorCounter != 0) {\n', '                whitelistedInvestorCounter--;\n', '            }\n', '        }\n', '    }\n', '\n', '    function claimTokens(address _token, address _to) public onlyOwner {\n', '        if (_token == 0x0) {\n', '            _to.transfer(this.balance);\n', '            return;\n', '        }\n', '    \n', '        ERC20Basic token = ERC20Basic(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(_to, balance);\n', '    }\n', '\n', '}\n', '\n', 'contract RefundInvestorsBallot {\n', '\n', '    using SafeMath for uint256;\n', '    EthearnalRepToken public tokenContract;\n', '\n', '    // Date when vote has started\n', '    uint256 public ballotStarted;\n', '\n', '    // Registry of votes\n', '    mapping(address => bool) public votesByAddress;\n', '\n', '    // Sum of weights of YES votes\n', '    uint256 public yesVoteSum = 0;\n', '\n', '    // Sum of weights of NO votes\n', '    uint256 public noVoteSum = 0;\n', '\n', '    // Length of `voters`\n', '    uint256 public votersLength = 0;\n', '\n', '    uint256 public initialQuorumPercent = 51;\n', '\n', '    VotingProxy public proxyVotingContract;\n', '\n', '    // Tells if voting process is active\n', '    bool public isVotingActive = false;\n', '    uint256 public requiredMajorityPercent = 65;\n', '\n', '    event FinishBallot(uint256 _time);\n', '    event Vote(address indexed sender, bytes vote);\n', '    \n', '    modifier onlyWhenBallotStarted {\n', '        require(ballotStarted != 0);\n', '        _;\n', '    }\n', '\n', '    function vote(bytes _vote) public onlyWhenBallotStarted {\n', '        require(_vote.length > 0);\n', '        if (isDataYes(_vote)) {\n', '            processVote(true);\n', '        } else if (isDataNo(_vote)) {\n', '            processVote(false);\n', '        }\n', '        Vote(msg.sender, _vote);\n', '    }\n', '\n', '    function isDataYes(bytes data) public constant returns (bool) {\n', '        // compare data with "YES" string\n', '        return (\n', '            data.length == 3 &&\n', '            (data[0] == 0x59 || data[0] == 0x79) &&\n', '            (data[1] == 0x45 || data[1] == 0x65) &&\n', '            (data[2] == 0x53 || data[2] == 0x73)\n', '        );\n', '    }\n', '\n', '    // TESTED\n', '    function isDataNo(bytes data) public constant returns (bool) {\n', '        // compare data with "NO" string\n', '        return (\n', '            data.length == 2 &&\n', '            (data[0] == 0x4e || data[0] == 0x6e) &&\n', '            (data[1] == 0x4f || data[1] == 0x6f)\n', '        );\n', '    }\n', '    \n', '    function processVote(bool isYes) internal {\n', '        require(isVotingActive);\n', '        require(!votesByAddress[msg.sender]);\n', '        votersLength = votersLength.add(1);\n', '        uint256 voteWeight = tokenContract.balanceOf(msg.sender);\n', '        if (isYes) {\n', '            yesVoteSum = yesVoteSum.add(voteWeight);\n', '        } else {\n', '            noVoteSum = noVoteSum.add(voteWeight);\n', '        }\n', '        require(getTime().sub(tokenContract.lastMovement(msg.sender)) > 7 days);\n', '        uint256 quorumPercent = getQuorumPercent();\n', '        if (quorumPercent == 0) {\n', '            isVotingActive = false;\n', '        } else {\n', '            decide();\n', '        }\n', '        votesByAddress[msg.sender] = true;\n', '    }\n', '\n', '    function getTime() internal returns (uint256) {\n', '        // Just returns `now` value\n', '        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\n', '        // to allow testing contract behaviour at different time moments\n', '        return now;\n', '    }\n', '\n', '    function RefundInvestorsBallot(address _tokenContract) {\n', '        tokenContract = EthearnalRepToken(_tokenContract);\n', '        proxyVotingContract = VotingProxy(msg.sender);\n', '        ballotStarted = getTime();\n', '        isVotingActive = true;\n', '    }\n', '\n', '    function decide() internal {\n', '        uint256 quorumPercent = getQuorumPercent();\n', '        uint256 quorum = quorumPercent.mul(tokenContract.totalSupply()).div(100);\n', '        uint256 soFarVoted = yesVoteSum.add(noVoteSum);\n', '        if (soFarVoted >= quorum) {\n', '            uint256 percentYes = (100 * yesVoteSum).div(soFarVoted);\n', '            if (percentYes >= requiredMajorityPercent) {\n', '                // does not matter if it would be greater than weiRaised\n', '                proxyVotingContract.proxyEnableRefunds();\n', '                FinishBallot(now);\n', '                isVotingActive = false;\n', '            } else {\n', '                // do nothing, just deactivate voting\n', '                isVotingActive = false;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function getQuorumPercent() public constant returns (uint256) {\n', '        uint256 isMonthPassed = getTime().sub(ballotStarted).div(5 weeks);\n', '        if(isMonthPassed == 1){\n', '            return 0;\n', '        }\n', '        return initialQuorumPercent;\n', '    }\n', '    \n', '}\n', '\n', 'contract Treasury is MultiOwnable {\n', '    using SafeMath for uint256;\n', '\n', '    // Total amount of ether withdrawed\n', '    uint256 public weiWithdrawed = 0;\n', '\n', '    // Total amount of ther unlocked\n', '    uint256 public weiUnlocked = 0;\n', '\n', '    // Wallet withdraw is locked till end of crowdsale\n', '    bool public isCrowdsaleFinished = false;\n', '\n', '    // Withdrawed team funds go to this wallet\n', '    address teamWallet = 0x0;\n', '\n', '    // Crowdsale contract address\n', '    EthearnalRepTokenCrowdsale public crowdsaleContract;\n', '    EthearnalRepToken public tokenContract;\n', '    bool public isRefundsEnabled = false;\n', '\n', '    // Amount of ether that could be withdrawed each withdraw iteration\n', '    uint256 public withdrawChunk = 0;\n', '    VotingProxy public votingProxyContract;\n', '    uint256 public refundsIssued = 0;\n', '    uint256 public percentLeft = 0;\n', '\n', '\n', '    event Deposit(uint256 amount);\n', '    event Withdraw(uint256 amount);\n', '    event UnlockWei(uint256 amount);\n', '    event RefundedInvestor(address indexed investor, uint256 amountRefunded, uint256 tokensBurn);\n', '\n', '    function Treasury(address _teamWallet) public {\n', '        require(_teamWallet != 0x0);\n', '        // TODO: check address integrity\n', '        teamWallet = _teamWallet;\n', '    }\n', '\n', '    // TESTED\n', '    function() public payable {\n', '        require(msg.sender == address(crowdsaleContract));\n', '        Deposit(msg.value);\n', '    }\n', '\n', '    function setVotingProxy(address _votingProxyContract) public onlyOwner {\n', '        require(votingProxyContract == address(0x0));\n', '        votingProxyContract = VotingProxy(_votingProxyContract);\n', '    }\n', '\n', '    // TESTED\n', '    function setCrowdsaleContract(address _address) public onlyOwner {\n', '        // Could be set only once\n', '        require(crowdsaleContract == address(0x0));\n', '        require(_address != 0x0);\n', '        crowdsaleContract = EthearnalRepTokenCrowdsale(_address); \n', '    }\n', '\n', '    function setTokenContract(address _address) public onlyOwner {\n', '        // Could be set only once\n', '        require(tokenContract == address(0x0));\n', '        require(_address != 0x0);\n', '        tokenContract = EthearnalRepToken(_address);\n', '    }\n', '\n', '    // TESTED\n', '    function setCrowdsaleFinished() public {\n', '        require(crowdsaleContract != address(0x0));\n', '        require(msg.sender == address(crowdsaleContract));\n', '        withdrawChunk = getWeiRaised().div(10);\n', '        weiUnlocked = withdrawChunk;\n', '        isCrowdsaleFinished = true;\n', '    }\n', '\n', '    // TESTED\n', '    function withdrawTeamFunds() public onlyOwner {\n', '        require(isCrowdsaleFinished);\n', '        require(weiUnlocked > weiWithdrawed);\n', '        uint256 toWithdraw = weiUnlocked.sub(weiWithdrawed);\n', '        weiWithdrawed = weiUnlocked;\n', '        teamWallet.transfer(toWithdraw);\n', '        Withdraw(toWithdraw);\n', '    }\n', '\n', '    function getWeiRaised() public constant returns(uint256) {\n', '       return crowdsaleContract.weiRaised();\n', '    }\n', '\n', '    function increaseWithdrawalChunk() {\n', '        require(isCrowdsaleFinished);\n', '        require(msg.sender == address(votingProxyContract));\n', '        weiUnlocked = weiUnlocked.add(withdrawChunk);\n', '        UnlockWei(weiUnlocked);\n', '    }\n', '\n', '    function getTime() internal returns (uint256) {\n', '        // Just returns `now` value\n', '        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\n', '        // to allow testing contract behaviour at different time moments\n', '        return now;\n', '    }\n', '\n', '    function enableRefunds() public {\n', '        require(msg.sender == address(votingProxyContract));\n', '        isRefundsEnabled = true;\n', '    }\n', '    \n', '    function refundInvestor(uint256 _tokensToBurn) public {\n', '        require(isRefundsEnabled);\n', '        require(address(tokenContract) != address(0x0));\n', '        if (refundsIssued == 0) {\n', '            percentLeft = percentLeftFromTotalRaised().mul(100*1000).div(1 ether);\n', '        }\n', '        uint256 tokenRate = crowdsaleContract.getTokenRateEther();\n', '        uint256 toRefund = tokenRate.mul(_tokensToBurn).div(1 ether);\n', '        \n', '        toRefund = toRefund.mul(percentLeft).div(100*1000);\n', '        require(toRefund > 0);\n', '        tokenContract.burnFrom(msg.sender, _tokensToBurn);\n', '        msg.sender.transfer(toRefund);\n', '        refundsIssued = refundsIssued.add(1);\n', '        RefundedInvestor(msg.sender, toRefund, _tokensToBurn);\n', '    }\n', '\n', '    function percentLeftFromTotalRaised() public constant returns(uint256) {\n', '        return percent(this.balance, getWeiRaised(), 18);\n', '    }\n', '\n', '    function percent(uint numerator, uint denominator, uint precision) internal constant returns(uint quotient) {\n', '        // caution, check safe-to-multiply here\n', '        uint _numerator  = numerator * 10 ** (precision+1);\n', '        // with rounding of last digit\n', '        uint _quotient =  ((_numerator / denominator) + 5) / 10;\n', '        return ( _quotient);\n', '    }\n', '\n', '    function claimTokens(address _token, address _to) public onlyOwner {    \n', '        ERC20Basic token = ERC20Basic(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(_to, balance);\n', '    }\n', '}\n', '\n', 'contract VotingProxy is Ownable {\n', '    using SafeMath for uint256;    \n', '    Treasury public treasuryContract;\n', '    EthearnalRepToken public tokenContract;\n', '    Ballot public currentIncreaseWithdrawalTeamBallot;\n', '    RefundInvestorsBallot public currentRefundInvestorsBallot;\n', '\n', '    function  VotingProxy(address _treasuryContract, address _tokenContract) {\n', '        treasuryContract = Treasury(_treasuryContract);\n', '        tokenContract = EthearnalRepToken(_tokenContract);\n', '    }\n', '\n', '    function startincreaseWithdrawalTeam() onlyOwner {\n', '        require(treasuryContract.isCrowdsaleFinished());\n', '        require(address(currentRefundInvestorsBallot) == 0x0 || currentRefundInvestorsBallot.isVotingActive() == false);\n', '        if(address(currentIncreaseWithdrawalTeamBallot) == 0x0) {\n', '            currentIncreaseWithdrawalTeamBallot =  new Ballot(tokenContract);\n', '        } else {\n', '            require(getDaysPassedSinceLastTeamFundsBallot() > 2);\n', '            currentIncreaseWithdrawalTeamBallot =  new Ballot(tokenContract);\n', '        }\n', '    }\n', '\n', '    function startRefundInvestorsBallot() public {\n', '        require(treasuryContract.isCrowdsaleFinished());\n', '        require(address(currentIncreaseWithdrawalTeamBallot) == 0x0 || currentIncreaseWithdrawalTeamBallot.isVotingActive() == false);\n', '        if(address(currentRefundInvestorsBallot) == 0x0) {\n', '            currentRefundInvestorsBallot =  new RefundInvestorsBallot(tokenContract);\n', '        } else {\n', '            require(getDaysPassedSinceLastRefundBallot() > 2);\n', '            currentRefundInvestorsBallot =  new RefundInvestorsBallot(tokenContract);\n', '        }\n', '    }\n', '\n', '    function getDaysPassedSinceLastRefundBallot() public constant returns(uint256) {\n', '        return getTime().sub(currentRefundInvestorsBallot.ballotStarted()).div(1 days);\n', '    }\n', '\n', '    function getDaysPassedSinceLastTeamFundsBallot() public constant returns(uint256) {\n', '        return getTime().sub(currentIncreaseWithdrawalTeamBallot.ballotStarted()).div(1 days);\n', '    }\n', '\n', '    function proxyIncreaseWithdrawalChunk() public {\n', '        require(msg.sender == address(currentIncreaseWithdrawalTeamBallot));\n', '        treasuryContract.increaseWithdrawalChunk();\n', '    }\n', '\n', '    function proxyEnableRefunds() public {\n', '        require(msg.sender == address(currentRefundInvestorsBallot));\n', '        treasuryContract.enableRefunds();\n', '    }\n', '\n', '    function() {\n', '        revert();\n', '    }\n', '\n', '    function getTime() internal returns (uint256) {\n', '        // Just returns `now` value\n', '        // This function is redefined in EthearnalRepTokenCrowdsaleMock contract\n', '        // to allow testing contract behaviour at different time moments\n', '        return now;\n', '    }\n', '\n', '    function claimTokens(address _token) public onlyOwner {\n', '        if (_token == 0x0) {\n', '            owner.transfer(this.balance);\n', '            return;\n', '        }\n', '    \n', '        ERC20Basic token = ERC20Basic(_token);\n', '        uint256 balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '    }\n', '\n', '}']