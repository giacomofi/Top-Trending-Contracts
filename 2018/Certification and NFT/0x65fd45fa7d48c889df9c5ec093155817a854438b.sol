['contract Win {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 5;  \n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    \n', '\n', '    constructor() public {\n', '        totalSupply = 2100000000 * 10 ** uint256(decimals); \n', '        uint256 creatBalance=10000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] =creatBalance;\n', '        address boss=0xe64d668c2d8aba2eab3e33d64e5b8d0327bae583;\n', '        balanceOf[boss]=totalSupply-creatBalance;\n', '        name = "WIN";                                  \n', '        symbol = "WIN";                               \n', '    }\n', '\n', '    \n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '         require(_to != 0x0);\n', '         require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        uint previousBalances = balanceOf[msg.sender] + balanceOf[_to];\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        assert(balanceOf[msg.sender] + balanceOf[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    \n', '\n', '\n', '    \n', '}']
['contract Win {\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals = 5;  \n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) public balanceOf;\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    \n', '\n', '    constructor() public {\n', '        totalSupply = 2100000000 * 10 ** uint256(decimals); \n', '        uint256 creatBalance=10000 * 10 ** uint256(decimals);\n', '        balanceOf[msg.sender] =creatBalance;\n', '        address boss=0xe64d668c2d8aba2eab3e33d64e5b8d0327bae583;\n', '        balanceOf[boss]=totalSupply-creatBalance;\n', '        name = "WIN";                                  \n', '        symbol = "WIN";                               \n', '    }\n', '\n', '    \n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success){\n', '         require(_to != 0x0);\n', '         require(balanceOf[msg.sender] >= _value);\n', '        require(balanceOf[_to] + _value > balanceOf[_to]);\n', '\n', '        uint previousBalances = balanceOf[msg.sender] + balanceOf[_to];\n', '        balanceOf[msg.sender] -= _value;\n', '        balanceOf[_to] += _value;\n', '        emit Transfer(msg.sender, _to, _value);\n', '        assert(balanceOf[msg.sender] + balanceOf[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    \n', '\n', '\n', '    \n', '}']
