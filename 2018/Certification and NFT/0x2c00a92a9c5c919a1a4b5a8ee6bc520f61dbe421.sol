['pragma solidity 0.4.24;\n', '\n', '// File: contracts/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/ERC721/ERC721Basic.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '  // bytes4(keccak256(&#39;balanceOf(address)&#39;)) ^\n', '  // bytes4(keccak256(&#39;ownerOf(uint256)&#39;)) ^\n', '  // bytes4(keccak256(&#39;approve(address,uint256)&#39;)) ^\n', '  // bytes4(keccak256(&#39;getApproved(uint256)&#39;)) ^\n', '  // bytes4(keccak256(&#39;setApprovalForAll(address,bool)&#39;)) ^\n', '  // bytes4(keccak256(&#39;isApprovedForAll(address,address)&#39;)) ^\n', '  // bytes4(keccak256(&#39;transferFrom(address,address,uint256)&#39;)) ^\n', '  // bytes4(keccak256(&#39;safeTransferFrom(address,address,uint256)&#39;)) ^\n', '  // bytes4(keccak256(&#39;safeTransferFrom(address,address,uint256,bytes)&#39;));\n', '  bytes4 constant INTERFACE_ERC721 = 0x80ac58cd;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool indexed _approved);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '\n', '  // Note: This is not in the official ERC-721 standard so it&#39;s not included in the interface hash\n', '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId) public;\n', '\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId) public;\n', '\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data) public;\n', '}\n', '\n', '// File: contracts/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '  // bytes4(keccak256(&#39;totalSupply()&#39;)) ^\n', '  // bytes4(keccak256(&#39;tokenOfOwnerByIndex(address,uint256)&#39;)) ^\n', '  // bytes4(keccak256(&#39;tokenByIndex(uint256)&#39;));\n', '  bytes4 constant INTERFACE_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '  // bytes4(keccak256(&#39;name()&#39;)) ^\n', '  // bytes4(keccak256(&#39;symbol()&#39;)) ^\n', '  // bytes4(keccak256(&#39;tokenURI(uint256)&#39;));\n', '  bytes4 constant INTERFACE_ERC721_METADATA = 0x5b5e139f;\n', '\n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', '/* solium-disable-next-line no-empty-blocks */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '// File: contracts/ERC165/ERC165.sol\n', '\n', '/**\n', ' * @dev A standard for detecting smart contract interfaces.\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'contract ERC165 {\n', '\n', '  // bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;));\n', '  bytes4 constant INTERFACE_ERC165 = 0x01ffc9a7;\n', '\n', '  /**\n', '   * @dev Checks if the smart contract includes a specific interface.\n', '   * @param _interfaceID The interface identifier, as specified in ERC-165.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n', '    return _interfaceID == INTERFACE_ERC165;\n', '  }\n', '}\n', '\n', '// File: contracts/library/AddressUtils.sol\n', '\n', '/**\n', ' * @title Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * @notice Returns whether there is code in the target address\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address address to check\n', '   * @return whether there is code in the target address\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(addr) }\n', '\n', '    return size > 0;\n', '  }\n', '}\n', '\n', '// File: contracts/library/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/ERC721/ERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '   *  transfer. Returns other than the magic value MUST result in the\n', '   *  transaction being reverted.\n', '   *  Note: the contract address is always the message sender.\n', '   * @param _from The sending address\n', '   * @param _tokenId The NFT identifier which is being transfered\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address _operator,\n', '    address _from,\n', '    uint256 _tokenId,\n', '    bytes _data)\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: contracts/ERC721/ERC721BasicToken.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic, ERC165 {\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  /**\n', '   * @dev Guarantees msg.sender is owner of the given token\n', '   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '   */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks if the smart contract includes a specific interface.\n', '   * @param _interfaceID The interface identifier, as specified in ERC-165.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n', '    return super.supportsInterface(_interfaceID) || _interfaceID == INTERFACE_ERC721;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existance of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * @dev The zero address indicates there is no approved address.\n', '   * @dev There can only be one approved address per token at a given time.\n', '   * @dev Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      emit Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for a the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    internalTransferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    internalSafeTransferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId,\n', '      "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    internalSafeTransferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId,\n', '      _data);\n', '  }\n', '\n', '  function internalTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    internal\n', '  {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_from == owner);\n', '    require(_to != address(0));\n', '\n', '    address sender = msg.sender;\n', '\n', '    require(\n', '      sender == owner || isApprovedForAll(owner, sender) || getApproved(_tokenId) == sender,\n', '      "Not authorized to transfer"\n', '    );\n', '\n', '    // Resetting the approved address if it&#39;s set\n', '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '    }\n', '\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  function internalSafeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '  {\n', '    internalTransferFrom(_from, _to, _tokenId);\n', '\n', '    require(\n', '      checkAndCallSafeTransfer(\n', '        _from,\n', '        _to,\n', '        _tokenId,\n', '        _data)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * @dev The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '\n', '    bytes4 retval = ERC721Receiver(_to)\n', '      .onERC721Received(\n', '        msg.sender,\n', '        _from,\n', '        _tokenId,\n', '        _data\n', '      );\n', '\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: contracts/ERC721/ERC721Token.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '  * @dev Constructor function\n', '  */\n', '  constructor(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '  }\n', '\n', '  /**\n', '    * @dev Checks if the smart contract includes a specific interface.\n', '    * @param _interfaceID The interface identifier, as specified in ERC-165.\n', '    */\n', '  function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n', '    return super.supportsInterface(_interfaceID) || _interfaceID == INTERFACE_ERC721_ENUMERABLE || _interfaceID == INTERFACE_ERC721_METADATA;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() public view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() public view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * @dev Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * @dev Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  function internalTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    internal\n', '  {\n', '    super.internalTransferFrom(_from, _to, _tokenId);\n', '\n', '    uint256 removeTokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][removeTokenIndex] = lastToken;\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[lastToken] = removeTokenIndex;\n', '\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = ownedTokens[_to].length - 1;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * @dev Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '}\n', '\n', '// File: contracts/CodexRecordMetadata.sol\n', '\n', '/**\n', ' * @title CodexRecordMetadata\n', ' * @dev Storage, mutators, and modifiers for CodexRecord metadata.\n', ' */\n', 'contract CodexRecordMetadata is ERC721Token {\n', '  struct CodexRecordData {\n', '    bytes32 nameHash;\n', '    bytes32 descriptionHash;\n', '    bytes32[] fileHashes;\n', '  }\n', '\n', '  event Modified(\n', '    address indexed _from,\n', '    uint256 _tokenId,\n', '    bytes32 _newNameHash,\n', '    bytes32 _newDescriptionHash,\n', '    bytes32[] _newFileHashes,\n', '    bytes _data\n', '  );\n', '\n', '  // Mapping from token ID to token data\n', '  mapping(uint256 => CodexRecordData) internal tokenData;\n', '\n', '  // Global tokenURIPrefix prefix. The token ID will be appended to the uri when accessed\n', '  //  via the tokenURI method\n', '  string public tokenURIPrefix;\n', '\n', '  /**\n', '   * @dev Updates token metadata hashes to whatever is passed in\n', '   * @param _tokenId uint256 The token ID\n', '   * @param _newNameHash bytes32 The new sha3 hash of the name\n', '   * @param _newDescriptionHash bytes32 The new sha3 hash of the description\n', '   * @param _newFileHashes bytes32[] The new sha3 hashes of the files associated with the token\n', '   * @param _data (optional) bytes Additional data that will be emitted with the Modified event\n', '   */\n', '  function modifyMetadataHashes(\n', '    uint256 _tokenId,\n', '    bytes32 _newNameHash,\n', '    bytes32 _newDescriptionHash,\n', '    bytes32[] _newFileHashes,\n', '    bytes _data\n', '  )\n', '    public\n', '    onlyOwnerOf(_tokenId)\n', '  {\n', '    // nameHash is only overridden if it&#39;s not a blank string, since name is a\n', '    //  required value. Emptiness is determined if the first element is the null-byte\n', '    if (!bytes32IsEmpty(_newNameHash)) {\n', '      tokenData[_tokenId].nameHash = _newNameHash;\n', '    }\n', '\n', '    // descriptionHash can always be overridden since it&#39;s an optional value\n', '    //  (e.g. you can "remove" a description by setting it to a blank string)\n', '    tokenData[_tokenId].descriptionHash = _newDescriptionHash;\n', '\n', '    // fileHashes is only overridden if it has one or more value, since at\n', '    //  least one file (i.e. mainImage) is required\n', '    bool containsNullHash = false;\n', '    for (uint i = 0; i < _newFileHashes.length; i++) {\n', '      if (bytes32IsEmpty(_newFileHashes[i])) {\n', '        containsNullHash = true;\n', '        break;\n', '      }\n', '    }\n', '    if (_newFileHashes.length > 0 && !containsNullHash) {\n', '      tokenData[_tokenId].fileHashes = _newFileHashes;\n', '    }\n', '\n', '    emit Modified(\n', '      msg.sender,\n', '      _tokenId,\n', '      tokenData[_tokenId].nameHash,\n', '      tokenData[_tokenId].descriptionHash,\n', '      tokenData[_tokenId].fileHashes,\n', '      _data\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token given a token ID.\n', '   * @param _tokenId token ID\n', '   * @return CodexRecordData token data for the given token ID\n', '   */\n', '  function getTokenById(\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    view\n', '    returns (bytes32 nameHash, bytes32 descriptionHash, bytes32[] fileHashes)\n', '  {\n', '    return (\n', '      tokenData[_tokenId].nameHash,\n', '      tokenData[_tokenId].descriptionHash,\n', '      tokenData[_tokenId].fileHashes\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * @dev Throws if the token ID does not exist.\n', '   *\n', '   * @dev To save on gas, we will host a standard metadata endpoint for each token.\n', '   *  For Collector privacy, specific token metadata is stored off chain, which means\n', '   *  the metadata returned by this endpoint cannot include specific details about\n', '   *  the physical asset the token represents unless the Collector has made it public.\n', '   *\n', '   * @dev This metadata will be a JSON blob that includes:\n', '   *  name - Codex Record\n', '   *  description - Information about the Provider that is hosting the off-chain metadata\n', '   *  imageUri - A generic Codex Record image\n', '   *\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    view\n', '    returns (string)\n', '  {\n', '    bytes memory prefix = bytes(tokenURIPrefix);\n', '    if (prefix.length == 0) {\n', '      return "";\n', '    }\n', '\n', '    // Rather than store a string representation of _tokenId, we just convert it on the fly\n', '    // since this is just a &#39;view&#39; function (i.e., there&#39;s no gas cost if called off chain)\n', '    bytes memory tokenId = uint2bytes(_tokenId);\n', '    bytes memory output = new bytes(prefix.length + tokenId.length);\n', '\n', '    // Index counters\n', '    uint256 i;\n', '    uint256 outputIndex = 0;\n', '\n', '    // Copy over the prefix into the new bytes array\n', '    for (i = 0; i < prefix.length; i++) {\n', '      output[outputIndex++] = prefix[i];\n', '    }\n', '\n', '    // Copy over the tokenId into the new bytes array\n', '    for (i = 0; i < tokenId.length; i++) {\n', '      output[outputIndex++] = tokenId[i];\n', '    }\n', '\n', '    return string(output);\n', '  }\n', '\n', '  /**\n', '   * @dev Based on MIT licensed code @ https://github.com/oraclize/ethereum-api\n', '   * @dev Converts an incoming uint256 to a dynamic byte array\n', '   */\n', '  function uint2bytes(uint256 i) internal pure returns (bytes) {\n', '    if (i == 0) {\n', '      return "0";\n', '    }\n', '\n', '    uint256 j = i;\n', '    uint256 length;\n', '    while (j != 0) {\n', '      length++;\n', '      j /= 10;\n', '    }\n', '\n', '    bytes memory bstr = new bytes(length);\n', '    uint256 k = length - 1;\n', '    j = i;\n', '    while (j != 0) {\n', '      bstr[k--] = byte(48 + j % 10);\n', '      j /= 10;\n', '    }\n', '\n', '    return bstr;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether or not a bytes32 array is empty (all null-bytes)\n', '   * @param _data bytes32 The array to check\n', '   * @return bool Whether or not the array is empty\n', '   */\n', '  function bytes32IsEmpty(bytes32 _data) internal pure returns (bool) {\n', '    for (uint256 i = 0; i < 32; i++) {\n', '      if (_data[i] != 0x0) {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/ERC900/ERC900.sol\n', '\n', '/**\n', ' * @title ERC900 Simple Staking Interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'contract ERC900 {\n', '  event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '  event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '\n', '  function stake(uint256 amount, bytes data) public;\n', '  function stakeFor(address user, uint256 amount, bytes data) public;\n', '  function unstake(uint256 amount, bytes data) public;\n', '  function totalStakedFor(address addr) public view returns (uint256);\n', '  function totalStaked() public view returns (uint256);\n', '  function token() public view returns (address);\n', '  function supportsHistory() public pure returns (bool);\n', '\n', '  // NOTE: Not implementing the optional functions\n', '  // function lastStakedFor(address addr) public view returns (uint256);\n', '  // function totalStakedForAt(address addr, uint256 blockNumber) public view returns (uint256);\n', '  // function totalStakedAt(uint256 blockNumber) public view returns (uint256);\n', '}\n', '\n', '// File: contracts/CodexStakeContractInterface.sol\n', '\n', 'contract CodexStakeContractInterface is ERC900 {\n', '\n', '  function stakeForDuration(\n', '    address user,\n', '    uint256 amount,\n', '    uint256 lockInDuration,\n', '    bytes data)\n', '    public;\n', '\n', '  function spendCredits(\n', '    address user,\n', '    uint256 amount)\n', '    public;\n', '\n', '  function creditBalanceOf(\n', '    address user)\n', '    public\n', '    view\n', '    returns (uint256);\n', '}\n', '\n', '// File: contracts/library/DelayedOwnable.sol\n', '\n', '/**\n', ' * @title DelayedOwnable\n', ' * @dev The DelayedOwnable contract has an owner address, and provides basic authorization control\n', ' *  functions, this simplifies the implementation of "user permissions".\n', ' * @dev This is different than the original Ownable contract because intializeOwnable\n', ' *  must be specifically called after creation to create an owner.\n', ' */\n', 'contract DelayedOwnable {\n', '  address public owner;\n', '  bool public isInitialized = false;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function initializeOwnable(address _owner) external {\n', '    require(\n', '      !isInitialized,\n', '      "The owner has already been set");\n', '\n', '    isInitialized = true;\n', '    owner = _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/library/DelayedPausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract DelayedPausable is DelayedOwnable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/CodexRecordFees.sol\n', '\n', '/**\n', ' * @title CodexRecordFees\n', ' * @dev Storage, mutators, and modifiers for fees when using the token.\n', ' *  This also includes the DelayedPausable contract for the onlyOwner modifier.\n', ' */\n', 'contract CodexRecordFees is CodexRecordMetadata, DelayedPausable {\n', '\n', '  // Implementation of the ERC20 Codex Protocol Token, used for fees in the contract\n', '  ERC20 public codexCoin;\n', '\n', '  // Implementation of the ERC900 Codex Protocol Stake Container,\n', '  //  used to calculate discounts on fees\n', '  CodexStakeContractInterface public codexStakeContract;\n', '\n', '  // Address where all contract fees are sent, i.e., the Community Fund\n', '  address public feeRecipient;\n', '\n', '  // Fee to create new tokens. 10^18 = 1 token\n', '  uint256 public creationFee = 0;\n', '\n', '  // Fee to transfer tokens. 10^18 = 1 token\n', '  uint256 public transferFee = 0;\n', '\n', '  // Fee to modify tokens. 10^18 = 1 token\n', '  uint256 public modificationFee = 0;\n', '\n', '  modifier canPayFees(uint256 _baseFee) {\n', '    if (feeRecipient != address(0) && _baseFee > 0) {\n', '      bool feePaid = false;\n', '\n', '      if (codexStakeContract != address(0)) {\n', '        uint256 discountCredits = codexStakeContract.creditBalanceOf(msg.sender);\n', '\n', '        // Regardless of what the baseFee is, all transactions can be paid by using exactly one credit\n', '        if (discountCredits > 0) {\n', '          codexStakeContract.spendCredits(msg.sender, 1);\n', '          feePaid = true;\n', '        }\n', '      }\n', '\n', '      if (!feePaid) {\n', '        require(\n', '          codexCoin.transferFrom(msg.sender, feeRecipient, _baseFee),\n', '          "Insufficient funds");\n', '      }\n', '    }\n', '\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the address of the ERC20 token used for fees in the contract.\n', '   *  Fees are in the smallest denomination, e.g., 10^18 is 1 token.\n', '   * @param _codexCoin ERC20 The address of the ERC20 Codex Protocol Token\n', '   * @param _feeRecipient address The address where the fees are sent\n', '   * @param _creationFee uint256 The new creation fee.\n', '   * @param _transferFee uint256 The new transfer fee.\n', '   * @param _modificationFee uint256 The new modification fee.\n', '   */\n', '  function setFees(\n', '    ERC20 _codexCoin,\n', '    address _feeRecipient,\n', '    uint256 _creationFee,\n', '    uint256 _transferFee,\n', '    uint256 _modificationFee\n', '  )\n', '    external\n', '    onlyOwner\n', '  {\n', '    codexCoin = _codexCoin;\n', '    feeRecipient = _feeRecipient;\n', '    creationFee = _creationFee;\n', '    transferFee = _transferFee;\n', '    modificationFee = _modificationFee;\n', '  }\n', '\n', '  function setStakeContract(CodexStakeContractInterface _codexStakeContract) external onlyOwner {\n', '    codexStakeContract = _codexStakeContract;\n', '  }\n', '}\n', '\n', '// File: contracts/CodexRecordCore.sol\n', '\n', '/**\n', ' * @title CodexRecordCore\n', ' * @dev Core functionality of the token, namely minting.\n', ' */\n', 'contract CodexRecordCore is CodexRecordFees {\n', '\n', '  /**\n', '   * @dev This event is emitted when a new token is minted and allows providers\n', '   *  to discern which Minted events came from transactions they submitted vs\n', '   *  transactions submitted by other platforms, as well as providing information\n', '   *  about what metadata record the newly minted token should be associated with.\n', '   */\n', '  event Minted(uint256 _tokenId, bytes _data);\n', '\n', '  /**\n', '   * @dev Sets the global tokenURIPrefix for use when returning token metadata.\n', '   *  Only callable by the owner.\n', '   * @param _tokenURIPrefix string The new tokenURIPrefix\n', '   */\n', '  function setTokenURIPrefix(string _tokenURIPrefix) external onlyOwner {\n', '    tokenURIPrefix = _tokenURIPrefix;\n', '  }\n', '\n', '  /**\n', '   * @dev Creates a new token\n', '   * @param _to address The address the token will get transferred to after minting\n', '   * @param _nameHash bytes32 The sha3 hash of the name\n', '   * @param _descriptionHash bytes32 The sha3 hash of the description\n', '   * @param _data (optional) bytes Additional data that will be emitted with the Minted event\n', '   */\n', '  function mint(\n', '    address _to,\n', '    bytes32 _nameHash,\n', '    bytes32 _descriptionHash,\n', '    bytes32[] _fileHashes,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    // All new tokens will be the last entry in the array\n', '    uint256 newTokenId = allTokens.length;\n', '    internalMint(_to, newTokenId);\n', '\n', '    // Add metadata to the newly created token\n', '    tokenData[newTokenId] = CodexRecordData({\n', '      nameHash: _nameHash,\n', '      descriptionHash: _descriptionHash,\n', '      fileHashes: _fileHashes\n', '    });\n', '\n', '    emit Minted(newTokenId, _data);\n', '  }\n', '\n', '  function internalMint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '\n', '    ownedTokensIndex[_tokenId] = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '\n', '    allTokens.push(_tokenId);\n', '\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '}\n', '\n', '// File: contracts/CodexRecordAccess.sol\n', '\n', '/**\n', ' * @title CodexRecordAccess\n', ' * @dev Override contract functions\n', ' */\n', 'contract CodexRecordAccess is CodexRecordCore {\n', '\n', '  /**\n', '   * @dev Make mint() pausable\n', '   */\n', '  function mint(\n', '    address _to,\n', '    bytes32 _nameHash,\n', '    bytes32 _descriptionHash,\n', '    bytes32[] _fileHashes,\n', '    bytes _data\n', '  )\n', '    public\n', '    whenNotPaused\n', '    canPayFees(creationFee)\n', '  {\n', '    return super.mint(\n', '      _to,\n', '      _nameHash,\n', '      _descriptionHash,\n', '      _fileHashes,\n', '      _data);\n', '  }\n', '\n', '  /**\n', '   * @dev Make trasferFrom() pausable\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '    canPayFees(transferFee)\n', '  {\n', '    return super.transferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Make safeTrasferFrom() pausable\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '    canPayFees(transferFee)\n', '  {\n', '    return super.safeTransferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Make safeTrasferFrom() pausable\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    whenNotPaused\n', '    canPayFees(transferFee)\n', '  {\n', '    return super.safeTransferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId,\n', '      _data\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Make modifyMetadataHashes() pausable\n', '   */\n', '  function modifyMetadataHashes(\n', '    uint256 _tokenId,\n', '    bytes32 _newNameHash,\n', '    bytes32 _newDescriptionHash,\n', '    bytes32[] _newFileHashes,\n', '    bytes _data\n', '  )\n', '    public\n', '    whenNotPaused\n', '    canPayFees(modificationFee)\n', '  {\n', '    return super.modifyMetadataHashes(\n', '      _tokenId,\n', '      _newNameHash,\n', '      _newDescriptionHash,\n', '      _newFileHashes,\n', '      _data);\n', '  }\n', '}\n', '\n', '// File: contracts/CodexRecord.sol\n', '\n', '/**\n', ' * @title CodexRecord, an ERC721 token for arts & collectables\n', ' * @dev Developers should never interact with this smart contract directly!\n', ' *  All transactions/calls should be made through CodexRecordProxy. Storage will be maintained\n', ' *  in that smart contract so that the governing body has the ability\n', ' *  to upgrade the contract in the future in the event of an emergency or new functionality.\n', ' */\n', 'contract CodexRecord is CodexRecordAccess {\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor() public ERC721Token("Codex Record", "CR") { }\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.transfer(owner, balance);\n', '  }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '// File: contracts/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: contracts/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/ERC721/ERC721Basic.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', "  // bytes4(keccak256('balanceOf(address)')) ^\n", "  // bytes4(keccak256('ownerOf(uint256)')) ^\n", "  // bytes4(keccak256('approve(address,uint256)')) ^\n", "  // bytes4(keccak256('getApproved(uint256)')) ^\n", "  // bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "  // bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "  // bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "  // bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "  // bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'));\n", '  bytes4 constant INTERFACE_ERC721 = 0x80ac58cd;\n', '\n', '  event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n', '  event ApprovalForAll(address indexed _owner, address indexed _operator, bool indexed _approved);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '\n', "  // Note: This is not in the official ERC-721 standard so it's not included in the interface hash\n", '  function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function getApproved(uint256 _tokenId) public view returns (address _operator);\n', '\n', '  function setApprovalForAll(address _operator, bool _approved) public;\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\n', '\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId) public;\n', '\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId) public;\n', '\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data) public;\n', '}\n', '\n', '// File: contracts/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', "  // bytes4(keccak256('totalSupply()')) ^\n", "  // bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "  // bytes4(keccak256('tokenByIndex(uint256)'));\n", '  bytes4 constant INTERFACE_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\n', '  function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', "  // bytes4(keccak256('name()')) ^\n", "  // bytes4(keccak256('symbol()')) ^\n", "  // bytes4(keccak256('tokenURI(uint256)'));\n", '  bytes4 constant INTERFACE_ERC721_METADATA = 0x5b5e139f;\n', '\n', '  function name() public view returns (string _name);\n', '  function symbol() public view returns (string _symbol);\n', '  function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', '/* solium-disable-next-line no-empty-blocks */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '// File: contracts/ERC165/ERC165.sol\n', '\n', '/**\n', ' * @dev A standard for detecting smart contract interfaces.\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'contract ERC165 {\n', '\n', "  // bytes4(keccak256('supportsInterface(bytes4)'));\n", '  bytes4 constant INTERFACE_ERC165 = 0x01ffc9a7;\n', '\n', '  /**\n', '   * @dev Checks if the smart contract includes a specific interface.\n', '   * @param _interfaceID The interface identifier, as specified in ERC-165.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n', '    return _interfaceID == INTERFACE_ERC165;\n', '  }\n', '}\n', '\n', '// File: contracts/library/AddressUtils.sol\n', '\n', '/**\n', ' * @title Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * @notice Returns whether there is code in the target address\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address address to check\n', '   * @return whether there is code in the target address\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(addr) }\n', '\n', '    return size > 0;\n', '  }\n', '}\n', '\n', '// File: contracts/library/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/ERC721/ERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '  /**\n', '   * @dev Magic value to be returned upon successful reception of an NFT\n', '   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,\n', '   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '   */\n', '  bytes4 constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '   *  transfer. Returns other than the magic value MUST result in the\n', '   *  transaction being reverted.\n', '   *  Note: the contract address is always the message sender.\n', '   * @param _from The sending address\n', '   * @param _tokenId The NFT identifier which is being transfered\n', '   * @param _data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address _operator,\n', '    address _from,\n', '    uint256 _tokenId,\n', '    bytes _data)\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: contracts/ERC721/ERC721BasicToken.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic, ERC165 {\n', '  using SafeMath for uint256;\n', '  using AddressUtils for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 constant ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) internal tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) internal tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) internal ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '  /**\n', '   * @dev Guarantees msg.sender is owner of the given token\n', '   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '   */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks if the smart contract includes a specific interface.\n', '   * @param _interfaceID The interface identifier, as specified in ERC-165.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n', '    return super.supportsInterface(_interfaceID) || _interfaceID == INTERFACE_ERC721;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    require(_owner != address(0));\n', '    return ownedTokensCount[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param _tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param _tokenId uint256 ID of the token to query the existance of\n', '   * @return whether the token exists\n', '   */\n', '  function exists(uint256 _tokenId) public view returns (bool) {\n', '    address owner = tokenOwner[_tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * @dev The zero address indicates there is no approved address.\n', '   * @dev There can only be one approved address per token at a given time.\n', '   * @dev Can only be called by the token owner or an approved operator.\n', '   * @param _to address to be approved for the given token ID\n', '   * @param _tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      emit Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for a the given token ID\n', '   */\n', '  function getApproved(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param _to operator address to set the approval\n', '   * @param _approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address _to, bool _approved) public {\n', '    require(_to != msg.sender);\n', '    operatorApprovals[msg.sender][_to] = _approved;\n', '    emit ApprovalForAll(msg.sender, _to, _approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param _owner owner address which you want to query the approval of\n', '   * @param _operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\n', '    return operatorApprovals[_owner][_operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    internalTransferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '  {\n', '    internalSafeTransferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId,\n', '      "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '   *  which is called upon a safe transfer, and return the magic value\n', '   *  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   *  the transfer is reverted.\n', '   * @dev Requires the msg sender to be the owner, approved, or operator\n', '   * @param _from current owner of the token\n', '   * @param _to address to receive the ownership of the given token ID\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    internalSafeTransferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId,\n', '      _data);\n', '  }\n', '\n', '  function internalTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    internal\n', '  {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_from == owner);\n', '    require(_to != address(0));\n', '\n', '    address sender = msg.sender;\n', '\n', '    require(\n', '      sender == owner || isApprovedForAll(owner, sender) || getApproved(_tokenId) == sender,\n', '      "Not authorized to transfer"\n', '    );\n', '\n', "    // Resetting the approved address if it's set\n", '    if (tokenApprovals[_tokenId] != address(0)) {\n', '      tokenApprovals[_tokenId] = address(0);\n', '    }\n', '\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '\n', '    emit Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  function internalSafeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '  {\n', '    internalTransferFrom(_from, _to, _tokenId);\n', '\n', '    require(\n', '      checkAndCallSafeTransfer(\n', '        _from,\n', '        _to,\n', '        _tokenId,\n', '        _data)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * @dev The call is not executed if the target address is not a contract\n', '   * @param _from address representing the previous owner of the given token ID\n', '   * @param _to target address that will receive the tokens\n', '   * @param _tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function checkAndCallSafeTransfer(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!_to.isContract()) {\n', '      return true;\n', '    }\n', '\n', '    bytes4 retval = ERC721Receiver(_to)\n', '      .onERC721Received(\n', '        msg.sender,\n', '        _from,\n', '        _tokenId,\n', '        _data\n', '      );\n', '\n', '    return (retval == ERC721_RECEIVED);\n', '  }\n', '}\n', '\n', '// File: contracts/ERC721/ERC721Token.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '  // Token name\n', '  string internal name_;\n', '\n', '  // Token symbol\n', '  string internal symbol_;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) internal ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] internal allTokens;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) internal tokenURIs;\n', '\n', '  /**\n', '  * @dev Constructor function\n', '  */\n', '  constructor(string _name, string _symbol) public {\n', '    name_ = _name;\n', '    symbol_ = _symbol;\n', '  }\n', '\n', '  /**\n', '    * @dev Checks if the smart contract includes a specific interface.\n', '    * @param _interfaceID The interface identifier, as specified in ERC-165.\n', '    */\n', '  function supportsInterface(bytes4 _interfaceID) public pure returns (bool) {\n', '    return super.supportsInterface(_interfaceID) || _interfaceID == INTERFACE_ERC721_ENUMERABLE || _interfaceID == INTERFACE_ERC721_METADATA;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() public view returns (string) {\n', '    return name_;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() public view returns (string) {\n', '    return symbol_;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * @dev Throws if the token ID does not exist. May return an empty string.\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 _tokenId) public view returns (string) {\n', '    require(exists(_tokenId));\n', '    return tokenURIs[_tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param _owner address owning the tokens list to be accessed\n', '   * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\n', '    require(_index < balanceOf(_owner));\n', '    return ownedTokens[_owner][_index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * @dev Reverts if the index is greater or equal to the total number of tokens\n', '   * @param _index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '    require(_index < totalSupply());\n', '    return allTokens[_index];\n', '  }\n', '\n', '  function internalTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    internal\n', '  {\n', '    super.internalTransferFrom(_from, _to, _tokenId);\n', '\n', '    uint256 removeTokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    ownedTokens[_from][removeTokenIndex] = lastToken;\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[lastToken] = removeTokenIndex;\n', '\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = ownedTokens[_to].length - 1;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * @dev Reverts if the token ID does not exist\n', '   * @param _tokenId uint256 ID of the token to set its URI\n', '   * @param _uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 _tokenId, string _uri) internal {\n', '    require(exists(_tokenId));\n', '    tokenURIs[_tokenId] = _uri;\n', '  }\n', '}\n', '\n', '// File: contracts/CodexRecordMetadata.sol\n', '\n', '/**\n', ' * @title CodexRecordMetadata\n', ' * @dev Storage, mutators, and modifiers for CodexRecord metadata.\n', ' */\n', 'contract CodexRecordMetadata is ERC721Token {\n', '  struct CodexRecordData {\n', '    bytes32 nameHash;\n', '    bytes32 descriptionHash;\n', '    bytes32[] fileHashes;\n', '  }\n', '\n', '  event Modified(\n', '    address indexed _from,\n', '    uint256 _tokenId,\n', '    bytes32 _newNameHash,\n', '    bytes32 _newDescriptionHash,\n', '    bytes32[] _newFileHashes,\n', '    bytes _data\n', '  );\n', '\n', '  // Mapping from token ID to token data\n', '  mapping(uint256 => CodexRecordData) internal tokenData;\n', '\n', '  // Global tokenURIPrefix prefix. The token ID will be appended to the uri when accessed\n', '  //  via the tokenURI method\n', '  string public tokenURIPrefix;\n', '\n', '  /**\n', '   * @dev Updates token metadata hashes to whatever is passed in\n', '   * @param _tokenId uint256 The token ID\n', '   * @param _newNameHash bytes32 The new sha3 hash of the name\n', '   * @param _newDescriptionHash bytes32 The new sha3 hash of the description\n', '   * @param _newFileHashes bytes32[] The new sha3 hashes of the files associated with the token\n', '   * @param _data (optional) bytes Additional data that will be emitted with the Modified event\n', '   */\n', '  function modifyMetadataHashes(\n', '    uint256 _tokenId,\n', '    bytes32 _newNameHash,\n', '    bytes32 _newDescriptionHash,\n', '    bytes32[] _newFileHashes,\n', '    bytes _data\n', '  )\n', '    public\n', '    onlyOwnerOf(_tokenId)\n', '  {\n', "    // nameHash is only overridden if it's not a blank string, since name is a\n", '    //  required value. Emptiness is determined if the first element is the null-byte\n', '    if (!bytes32IsEmpty(_newNameHash)) {\n', '      tokenData[_tokenId].nameHash = _newNameHash;\n', '    }\n', '\n', "    // descriptionHash can always be overridden since it's an optional value\n", '    //  (e.g. you can "remove" a description by setting it to a blank string)\n', '    tokenData[_tokenId].descriptionHash = _newDescriptionHash;\n', '\n', '    // fileHashes is only overridden if it has one or more value, since at\n', '    //  least one file (i.e. mainImage) is required\n', '    bool containsNullHash = false;\n', '    for (uint i = 0; i < _newFileHashes.length; i++) {\n', '      if (bytes32IsEmpty(_newFileHashes[i])) {\n', '        containsNullHash = true;\n', '        break;\n', '      }\n', '    }\n', '    if (_newFileHashes.length > 0 && !containsNullHash) {\n', '      tokenData[_tokenId].fileHashes = _newFileHashes;\n', '    }\n', '\n', '    emit Modified(\n', '      msg.sender,\n', '      _tokenId,\n', '      tokenData[_tokenId].nameHash,\n', '      tokenData[_tokenId].descriptionHash,\n', '      tokenData[_tokenId].fileHashes,\n', '      _data\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token given a token ID.\n', '   * @param _tokenId token ID\n', '   * @return CodexRecordData token data for the given token ID\n', '   */\n', '  function getTokenById(\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    view\n', '    returns (bytes32 nameHash, bytes32 descriptionHash, bytes32[] fileHashes)\n', '  {\n', '    return (\n', '      tokenData[_tokenId].nameHash,\n', '      tokenData[_tokenId].descriptionHash,\n', '      tokenData[_tokenId].fileHashes\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * @dev Throws if the token ID does not exist.\n', '   *\n', '   * @dev To save on gas, we will host a standard metadata endpoint for each token.\n', '   *  For Collector privacy, specific token metadata is stored off chain, which means\n', '   *  the metadata returned by this endpoint cannot include specific details about\n', '   *  the physical asset the token represents unless the Collector has made it public.\n', '   *\n', '   * @dev This metadata will be a JSON blob that includes:\n', '   *  name - Codex Record\n', '   *  description - Information about the Provider that is hosting the off-chain metadata\n', '   *  imageUri - A generic Codex Record image\n', '   *\n', '   * @param _tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    view\n', '    returns (string)\n', '  {\n', '    bytes memory prefix = bytes(tokenURIPrefix);\n', '    if (prefix.length == 0) {\n', '      return "";\n', '    }\n', '\n', '    // Rather than store a string representation of _tokenId, we just convert it on the fly\n', "    // since this is just a 'view' function (i.e., there's no gas cost if called off chain)\n", '    bytes memory tokenId = uint2bytes(_tokenId);\n', '    bytes memory output = new bytes(prefix.length + tokenId.length);\n', '\n', '    // Index counters\n', '    uint256 i;\n', '    uint256 outputIndex = 0;\n', '\n', '    // Copy over the prefix into the new bytes array\n', '    for (i = 0; i < prefix.length; i++) {\n', '      output[outputIndex++] = prefix[i];\n', '    }\n', '\n', '    // Copy over the tokenId into the new bytes array\n', '    for (i = 0; i < tokenId.length; i++) {\n', '      output[outputIndex++] = tokenId[i];\n', '    }\n', '\n', '    return string(output);\n', '  }\n', '\n', '  /**\n', '   * @dev Based on MIT licensed code @ https://github.com/oraclize/ethereum-api\n', '   * @dev Converts an incoming uint256 to a dynamic byte array\n', '   */\n', '  function uint2bytes(uint256 i) internal pure returns (bytes) {\n', '    if (i == 0) {\n', '      return "0";\n', '    }\n', '\n', '    uint256 j = i;\n', '    uint256 length;\n', '    while (j != 0) {\n', '      length++;\n', '      j /= 10;\n', '    }\n', '\n', '    bytes memory bstr = new bytes(length);\n', '    uint256 k = length - 1;\n', '    j = i;\n', '    while (j != 0) {\n', '      bstr[k--] = byte(48 + j % 10);\n', '      j /= 10;\n', '    }\n', '\n', '    return bstr;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether or not a bytes32 array is empty (all null-bytes)\n', '   * @param _data bytes32 The array to check\n', '   * @return bool Whether or not the array is empty\n', '   */\n', '  function bytes32IsEmpty(bytes32 _data) internal pure returns (bool) {\n', '    for (uint256 i = 0; i < 32; i++) {\n', '      if (_data[i] != 0x0) {\n', '        return false;\n', '      }\n', '    }\n', '\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/ERC900/ERC900.sol\n', '\n', '/**\n', ' * @title ERC900 Simple Staking Interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'contract ERC900 {\n', '  event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '  event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '\n', '  function stake(uint256 amount, bytes data) public;\n', '  function stakeFor(address user, uint256 amount, bytes data) public;\n', '  function unstake(uint256 amount, bytes data) public;\n', '  function totalStakedFor(address addr) public view returns (uint256);\n', '  function totalStaked() public view returns (uint256);\n', '  function token() public view returns (address);\n', '  function supportsHistory() public pure returns (bool);\n', '\n', '  // NOTE: Not implementing the optional functions\n', '  // function lastStakedFor(address addr) public view returns (uint256);\n', '  // function totalStakedForAt(address addr, uint256 blockNumber) public view returns (uint256);\n', '  // function totalStakedAt(uint256 blockNumber) public view returns (uint256);\n', '}\n', '\n', '// File: contracts/CodexStakeContractInterface.sol\n', '\n', 'contract CodexStakeContractInterface is ERC900 {\n', '\n', '  function stakeForDuration(\n', '    address user,\n', '    uint256 amount,\n', '    uint256 lockInDuration,\n', '    bytes data)\n', '    public;\n', '\n', '  function spendCredits(\n', '    address user,\n', '    uint256 amount)\n', '    public;\n', '\n', '  function creditBalanceOf(\n', '    address user)\n', '    public\n', '    view\n', '    returns (uint256);\n', '}\n', '\n', '// File: contracts/library/DelayedOwnable.sol\n', '\n', '/**\n', ' * @title DelayedOwnable\n', ' * @dev The DelayedOwnable contract has an owner address, and provides basic authorization control\n', ' *  functions, this simplifies the implementation of "user permissions".\n', ' * @dev This is different than the original Ownable contract because intializeOwnable\n', ' *  must be specifically called after creation to create an owner.\n', ' */\n', 'contract DelayedOwnable {\n', '  address public owner;\n', '  bool public isInitialized = false;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function initializeOwnable(address _owner) external {\n', '    require(\n', '      !isInitialized,\n', '      "The owner has already been set");\n', '\n', '    isInitialized = true;\n', '    owner = _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    require(_newOwner != address(0));\n', '\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: contracts/library/DelayedPausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract DelayedPausable is DelayedOwnable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/CodexRecordFees.sol\n', '\n', '/**\n', ' * @title CodexRecordFees\n', ' * @dev Storage, mutators, and modifiers for fees when using the token.\n', ' *  This also includes the DelayedPausable contract for the onlyOwner modifier.\n', ' */\n', 'contract CodexRecordFees is CodexRecordMetadata, DelayedPausable {\n', '\n', '  // Implementation of the ERC20 Codex Protocol Token, used for fees in the contract\n', '  ERC20 public codexCoin;\n', '\n', '  // Implementation of the ERC900 Codex Protocol Stake Container,\n', '  //  used to calculate discounts on fees\n', '  CodexStakeContractInterface public codexStakeContract;\n', '\n', '  // Address where all contract fees are sent, i.e., the Community Fund\n', '  address public feeRecipient;\n', '\n', '  // Fee to create new tokens. 10^18 = 1 token\n', '  uint256 public creationFee = 0;\n', '\n', '  // Fee to transfer tokens. 10^18 = 1 token\n', '  uint256 public transferFee = 0;\n', '\n', '  // Fee to modify tokens. 10^18 = 1 token\n', '  uint256 public modificationFee = 0;\n', '\n', '  modifier canPayFees(uint256 _baseFee) {\n', '    if (feeRecipient != address(0) && _baseFee > 0) {\n', '      bool feePaid = false;\n', '\n', '      if (codexStakeContract != address(0)) {\n', '        uint256 discountCredits = codexStakeContract.creditBalanceOf(msg.sender);\n', '\n', '        // Regardless of what the baseFee is, all transactions can be paid by using exactly one credit\n', '        if (discountCredits > 0) {\n', '          codexStakeContract.spendCredits(msg.sender, 1);\n', '          feePaid = true;\n', '        }\n', '      }\n', '\n', '      if (!feePaid) {\n', '        require(\n', '          codexCoin.transferFrom(msg.sender, feeRecipient, _baseFee),\n', '          "Insufficient funds");\n', '      }\n', '    }\n', '\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Sets the address of the ERC20 token used for fees in the contract.\n', '   *  Fees are in the smallest denomination, e.g., 10^18 is 1 token.\n', '   * @param _codexCoin ERC20 The address of the ERC20 Codex Protocol Token\n', '   * @param _feeRecipient address The address where the fees are sent\n', '   * @param _creationFee uint256 The new creation fee.\n', '   * @param _transferFee uint256 The new transfer fee.\n', '   * @param _modificationFee uint256 The new modification fee.\n', '   */\n', '  function setFees(\n', '    ERC20 _codexCoin,\n', '    address _feeRecipient,\n', '    uint256 _creationFee,\n', '    uint256 _transferFee,\n', '    uint256 _modificationFee\n', '  )\n', '    external\n', '    onlyOwner\n', '  {\n', '    codexCoin = _codexCoin;\n', '    feeRecipient = _feeRecipient;\n', '    creationFee = _creationFee;\n', '    transferFee = _transferFee;\n', '    modificationFee = _modificationFee;\n', '  }\n', '\n', '  function setStakeContract(CodexStakeContractInterface _codexStakeContract) external onlyOwner {\n', '    codexStakeContract = _codexStakeContract;\n', '  }\n', '}\n', '\n', '// File: contracts/CodexRecordCore.sol\n', '\n', '/**\n', ' * @title CodexRecordCore\n', ' * @dev Core functionality of the token, namely minting.\n', ' */\n', 'contract CodexRecordCore is CodexRecordFees {\n', '\n', '  /**\n', '   * @dev This event is emitted when a new token is minted and allows providers\n', '   *  to discern which Minted events came from transactions they submitted vs\n', '   *  transactions submitted by other platforms, as well as providing information\n', '   *  about what metadata record the newly minted token should be associated with.\n', '   */\n', '  event Minted(uint256 _tokenId, bytes _data);\n', '\n', '  /**\n', '   * @dev Sets the global tokenURIPrefix for use when returning token metadata.\n', '   *  Only callable by the owner.\n', '   * @param _tokenURIPrefix string The new tokenURIPrefix\n', '   */\n', '  function setTokenURIPrefix(string _tokenURIPrefix) external onlyOwner {\n', '    tokenURIPrefix = _tokenURIPrefix;\n', '  }\n', '\n', '  /**\n', '   * @dev Creates a new token\n', '   * @param _to address The address the token will get transferred to after minting\n', '   * @param _nameHash bytes32 The sha3 hash of the name\n', '   * @param _descriptionHash bytes32 The sha3 hash of the description\n', '   * @param _data (optional) bytes Additional data that will be emitted with the Minted event\n', '   */\n', '  function mint(\n', '    address _to,\n', '    bytes32 _nameHash,\n', '    bytes32 _descriptionHash,\n', '    bytes32[] _fileHashes,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    // All new tokens will be the last entry in the array\n', '    uint256 newTokenId = allTokens.length;\n', '    internalMint(_to, newTokenId);\n', '\n', '    // Add metadata to the newly created token\n', '    tokenData[newTokenId] = CodexRecordData({\n', '      nameHash: _nameHash,\n', '      descriptionHash: _descriptionHash,\n', '      fileHashes: _fileHashes\n', '    });\n', '\n', '    emit Minted(newTokenId, _data);\n', '  }\n', '\n', '  function internalMint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '\n', '    tokenOwner[_tokenId] = _to;\n', '    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '\n', '    ownedTokensIndex[_tokenId] = ownedTokens[_to].length;\n', '    ownedTokens[_to].push(_tokenId);\n', '\n', '    allTokens.push(_tokenId);\n', '\n', '    emit Transfer(address(0), _to, _tokenId);\n', '  }\n', '}\n', '\n', '// File: contracts/CodexRecordAccess.sol\n', '\n', '/**\n', ' * @title CodexRecordAccess\n', ' * @dev Override contract functions\n', ' */\n', 'contract CodexRecordAccess is CodexRecordCore {\n', '\n', '  /**\n', '   * @dev Make mint() pausable\n', '   */\n', '  function mint(\n', '    address _to,\n', '    bytes32 _nameHash,\n', '    bytes32 _descriptionHash,\n', '    bytes32[] _fileHashes,\n', '    bytes _data\n', '  )\n', '    public\n', '    whenNotPaused\n', '    canPayFees(creationFee)\n', '  {\n', '    return super.mint(\n', '      _to,\n', '      _nameHash,\n', '      _descriptionHash,\n', '      _fileHashes,\n', '      _data);\n', '  }\n', '\n', '  /**\n', '   * @dev Make trasferFrom() pausable\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '    canPayFees(transferFee)\n', '  {\n', '    return super.transferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Make safeTrasferFrom() pausable\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId\n', '  )\n', '    public\n', '    whenNotPaused\n', '    canPayFees(transferFee)\n', '  {\n', '    return super.safeTransferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Make safeTrasferFrom() pausable\n', '   */\n', '  function safeTransferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '    whenNotPaused\n', '    canPayFees(transferFee)\n', '  {\n', '    return super.safeTransferFrom(\n', '      _from,\n', '      _to,\n', '      _tokenId,\n', '      _data\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Make modifyMetadataHashes() pausable\n', '   */\n', '  function modifyMetadataHashes(\n', '    uint256 _tokenId,\n', '    bytes32 _newNameHash,\n', '    bytes32 _newDescriptionHash,\n', '    bytes32[] _newFileHashes,\n', '    bytes _data\n', '  )\n', '    public\n', '    whenNotPaused\n', '    canPayFees(modificationFee)\n', '  {\n', '    return super.modifyMetadataHashes(\n', '      _tokenId,\n', '      _newNameHash,\n', '      _newDescriptionHash,\n', '      _newFileHashes,\n', '      _data);\n', '  }\n', '}\n', '\n', '// File: contracts/CodexRecord.sol\n', '\n', '/**\n', ' * @title CodexRecord, an ERC721 token for arts & collectables\n', ' * @dev Developers should never interact with this smart contract directly!\n', ' *  All transactions/calls should be made through CodexRecordProxy. Storage will be maintained\n', ' *  in that smart contract so that the governing body has the ability\n', ' *  to upgrade the contract in the future in the event of an emergency or new functionality.\n', ' */\n', 'contract CodexRecord is CodexRecordAccess {\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor() public ERC721Token("Codex Record", "CR") { }\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.transfer(owner, balance);\n', '  }\n', '}']
