['pragma solidity ^0.4.15;\n', '\n', '/*\n', '  https://cryptogs.io\n', '  --Austin Thomas Griffith for ETHDenver\n', '  ( this is unaudited )\n', '*/\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract SlammerTime is Ownable{\n', '\n', '  string public constant purpose = "ETHDenver";\n', '  string public constant contact = "https://cryptogs.io";\n', '  string public constant author = "Austin Thomas Griffith | <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8beafef8ffe2e5cbe8e4e5e8fef9f9eee5e8eea5e2e4">[email&#160;protected]</a>";\n', '\n', '  address public cryptogs;\n', '\n', '  function SlammerTime(address _cryptogs) public {\n', '    //deploy slammertime with cryptogs address coded in so\n', '    // only the cryptogs address can mess with it\n', '    cryptogs=_cryptogs;\n', '  }\n', '\n', '  function startSlammerTime(address _player1,uint256[5] _id1,address _player2,uint256[5] _id2) public returns (bool) {\n', '    //only the cryptogs contract should be able to hit it\n', '    require(msg.sender==cryptogs);\n', '\n', '    Cryptogs cryptogsContract = Cryptogs(cryptogs);\n', '\n', '    for(uint8 i=0;i<5;i++){\n', '      //make sure player1 owns _id1\n', '      require(cryptogsContract.tokenIndexToOwner(_id1[i])==_player1);\n', '      //transfer id1 in\n', '      cryptogsContract.transferFrom(_player1,address(this),_id1[i]);\n', '      //make this contract is the owner\n', '      require(cryptogsContract.tokenIndexToOwner(_id1[i])==address(this));\n', '    }\n', '\n', '\n', '    for(uint8 j=0;j<5;j++){\n', '      //make sure player2 owns _id1\n', '      require(cryptogsContract.tokenIndexToOwner(_id2[j])==_player2);\n', '      //transfer id1 in\n', '      cryptogsContract.transferFrom(_player2,address(this),_id2[j]);\n', '      //make this contract is the owner\n', '      require(cryptogsContract.tokenIndexToOwner(_id2[j])==address(this));\n', '    }\n', '\n', '\n', '    return true;\n', '  }\n', '\n', '  function transferBack(address _toWhom, uint256 _id) public returns (bool) {\n', '    //only the cryptogs contract should be able to hit it\n', '    require(msg.sender==cryptogs);\n', '\n', '    Cryptogs cryptogsContract = Cryptogs(cryptogs);\n', '\n', '    require(cryptogsContract.tokenIndexToOwner(_id)==address(this));\n', '    cryptogsContract.transfer(_toWhom,_id);\n', '    require(cryptogsContract.tokenIndexToOwner(_id)==_toWhom);\n', '    return true;\n', '  }\n', '\n', '  function withdraw(uint256 _amount) public onlyOwner returns (bool) {\n', '    require(this.balance >= _amount);\n', '    assert(owner.send(_amount));\n', '    return true;\n', '  }\n', '\n', '  function withdrawToken(address _token,uint256 _amount) public onlyOwner returns (bool) {\n', '    StandardToken token = StandardToken(_token);\n', '    token.transfer(msg.sender,_amount);\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract StandardToken {\n', '  function transfer(address _to, uint256 _value) public returns (bool) { }\n', '}\n', '\n', '\n', 'contract Cryptogs {\n', '  mapping (uint256 => address) public tokenIndexToOwner;\n', '  function transfer(address _to,uint256 _tokenId) external { }\n', '  function transferFrom(address _from,address _to,uint256 _tokenId) external { }\n', '}']