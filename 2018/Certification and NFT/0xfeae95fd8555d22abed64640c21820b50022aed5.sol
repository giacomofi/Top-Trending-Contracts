['pragma solidity ^0.4.20;\n', '\n', 'interface Token {\n', '    function totalSupply() constant external returns (uint256);\n', '    \n', '    function transfer(address receiver, uint amount) external returns (bool success);\n', '    function burn(uint256 _value) external returns (bool success);\n', '    function startTrading() external;\n', '}\n', '\n', 'contract Owned {\n', '    address public owner;\n', '\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'interface AquaPriceOracle {\n', '  function getAudCentWeiPrice() external constant returns (uint);\n', '  function getAquaTokenAudCentsPrice() external constant returns (uint);\n', '  event NewPrice(uint _audCentWeiPrice, uint _aquaTokenAudCentsPrice);\n', '}\n', '\n', '\n', '///@title Aqua Sale Smart contract\n', 'contract AquaSale is Owned {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 constant ONE_HUNDRED = 100;\n', '\n', '    //Internal state\n', '    mapping (address => uint) internal buyerBalances;\n', '    \n', '    //Public interface\n', '    \n', '    ///Team trust account address\n', '    address public teamTrustAccount;\n', '    \n', '    ///Team share of total token supply after successful completion of the \n', '    ///crowdsale expressed as whole percentage number (0-100)\n', '    uint public teamSharePercent;\n', '    \n', '    ///Low funding goal (Soft Cap) in number of tokens\n', '    uint public lowTokensToSellGoal;\n', '    \n', '    ///High funding goal (Hard Cap) in number of tokens\n', '    uint public highTokensToSellGoal;\n', '    \n', '    ///Number of tokens sold\n', '    uint public soldTokens;\n', '    \n', '    ///Crowdsale start time (in seconds since unix epoch)\n', '    uint public startTime;\n', '    \n', '    ///Crowdsale end time (in seconds since unix epoch)\n', '    uint public deadline;\n', '\n', '    ///Address of Aqua Token used as a reward for Ether contributions\n', '    Token public tokenReward;\n', '    \n', '    ///Aqua Token price oracle contract address\n', '    AquaPriceOracle public tokenPriceOracle;\n', '    \n', '\n', '    ///Indicates if funding goal is reached (crowdsale is successful)\n', '    bool public fundingGoalReached = false;\n', '    \n', '    ///Indicates if high funding goal (Hard Cap) is reached.\n', '    bool public highFundingGoalReached = false;\n', '\n', '    ///Event is triggered when funding goal is reached\n', '    ///@param amntRaisedWei Amount raised in Wei\n', '    ///@param isHigherGoal True if Hard Cap is reached. False if Soft Cap is reached\n', '    event GoalReached(uint amntRaisedWei, bool isHigherGoal);\n', '    \n', '    ///Event is triggered when crowdsale contract processes funds transfer\n', '    ///(contribution or withdrawal)\n', '    ///@param backer Account address that sends (in case of contribution) or receives (in case of refund or withdrawal) funds\n', '    ///@param isContribution True in case funds transfer is a contribution. False in case funds transfer is a refund or a withdrawal.\n', '    event FundsTransfer(address backer, uint amount, bool isContribution);\n', '\n', '    ///Constructor initializes Aqua Sale contract\n', '    ///@param ifSuccessfulSendTo Beneficiary address â€“ account address that can withdraw raised funds in case crowdsale succeeds\n', '    ///@param _lowTokensToSellGoal Low funding goal (Soft Cap) as number of tokens to sell\n', '    ///@param _highTokensToSellGoal High funding goal (Hard Cap) as number of tokens to sell\n', '    ///@param startAfterMinutes Crowdsale start time as the number of minutes since contract deployment time\n', '    ///@param durationInMinutes Duration of the crowdsale in minutes\n', '    ///@param addressOfTokenUsedAsReward Aqua Token smart contract address\n', '    ///@param addressOfTokenPriceOracle Aqua Price oracle smart contract address\n', '    ///@param addressOfTeamTrusAccount Account address that receives team share of tokens upon successful completion of crowdsale\n', '    ///@param _teamSharePercent Team share of total token supply after successful completion of the crowdsale expressed as whole percentage number (0-100)\n', '    function AquaSale(\n', '        address ifSuccessfulSendTo,\n', '        uint _lowTokensToSellGoal,\n', '        uint _highTokensToSellGoal,\n', '        uint startAfterMinutes,\n', '        uint durationInMinutes,\n', '        address addressOfTokenUsedAsReward,\n', '        address addressOfTokenPriceOracle,\n', '        address addressOfTeamTrusAccount,\n', '        uint _teamSharePercent\n', '    ) public {\n', '        owner = ifSuccessfulSendTo;\n', '        lowTokensToSellGoal = _lowTokensToSellGoal;\n', '        highTokensToSellGoal = _highTokensToSellGoal;\n', '        startTime = now.add(startAfterMinutes.mul(1 minutes));\n', '        deadline = startTime.add(durationInMinutes.mul(1 minutes));\n', '        tokenReward = Token(addressOfTokenUsedAsReward);\n', '        tokenPriceOracle = AquaPriceOracle(addressOfTokenPriceOracle);\n', '        teamTrustAccount = addressOfTeamTrusAccount;\n', '        teamSharePercent = _teamSharePercent;\n', '    }\n', '    \n', '    ///Returns balance of the buyer\n', '    ///@param _buyer address of crowdsale participant\n', '    ///@return Buyer balance in wei\n', '    function buyerBalance(address _buyer) public constant returns(uint) {\n', '        return buyerBalances[_buyer];\n', '    }\n', '\n', '    ///Fallback function expects that the sent amount is payment for tokens\n', '    function () public payable {\n', '        purchaseTokens();\n', '    }\n', '    \n', '    ///function accepts Ether and allocates Aqua Tokens to the sender\n', '    function purchaseTokens() public payable {\n', '        require(!highFundingGoalReached && now >= startTime );\n', '        uint amount = msg.value;\n', '        uint noTokens = amount.div(\n', '            tokenPriceOracle.getAquaTokenAudCentsPrice().mul(tokenPriceOracle.getAudCentWeiPrice())\n', '            );\n', '        buyerBalances[msg.sender] = buyerBalances[msg.sender].add(amount);\n', '        soldTokens = soldTokens.add(noTokens);\n', '        checkGoalsReached();\n', '\n', '        tokenReward.transfer(msg.sender, noTokens);\n', '\n', '        FundsTransfer(msg.sender, amount, true);\n', '    }\n', '    \n', '    ///Investors should call this function in order to receive refund in \n', '    ///case crowdsale is not successful.\n', '    ///The sending address should be the same address that was used to\n', '    ///participate in crowdsale. The amount will be refunded to this address\n', '    function refund() public {\n', '        require(!fundingGoalReached && buyerBalances[msg.sender] > 0\n', '                && now >= deadline);\n', '        uint amount = buyerBalances[msg.sender];\n', '        buyerBalances[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '        FundsTransfer(msg.sender, amount, false);\n', '    }\n', '\n', '    ///iAqua authorized sttaff will call this function to withdraw contributed \n', '    ///amount (only in case crowdsale is successful)\n', '    function withdraw() onlyOwner public {\n', '        require( (fundingGoalReached && now >= deadline) || highFundingGoalReached );\n', '        uint raisedFunds = this.balance;\n', '        uint teamTokens = soldTokens.mul(teamSharePercent).div(ONE_HUNDRED.sub(teamSharePercent));\n', '        uint totalTokens = tokenReward.totalSupply();\n', '        if (totalTokens < teamTokens.add(soldTokens)) {\n', '            teamTokens = totalTokens.sub(soldTokens);\n', '        }\n', '        tokenReward.transfer(teamTrustAccount, teamTokens);\n', '        uint distributedTokens = teamTokens.add(soldTokens);\n', '        if (totalTokens > distributedTokens) {\n', '            tokenReward.burn(totalTokens.sub(distributedTokens));\n', '        }\n', '        tokenReward.startTrading();\n', '        Owned(address(tokenReward)).transferOwnership(owner);\n', '        owner.transfer(raisedFunds);\n', '        FundsTransfer(owner, raisedFunds, false);\n', '    }\n', '    \n', '    //Internal functions\n', '    \n', '    function checkGoalsReached() internal {\n', '        if (fundingGoalReached) {\n', '            if (highFundingGoalReached) {\n', '                return;\n', '            }\n', '            if (soldTokens >= highTokensToSellGoal) {\n', '                highFundingGoalReached = true;\n', '                GoalReached(this.balance, true);\n', '                return;\n', '            }\n', '        }\n', '        else {\n', '            if (soldTokens >= lowTokensToSellGoal) {\n', '                fundingGoalReached = true;\n', '                GoalReached(this.balance, false);\n', '            }\n', '            if (soldTokens >= highTokensToSellGoal) {\n', '                highFundingGoalReached = true;\n', '                GoalReached(this.balance, true);\n', '                return;\n', '            }\n', '        }\n', '    }\n', '    \n', '}']