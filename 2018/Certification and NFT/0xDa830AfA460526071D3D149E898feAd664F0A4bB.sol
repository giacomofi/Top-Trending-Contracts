['// Smart contract used for the EatMeCoin Crowdsale \n', '//\n', '// @author: Pavel Metelitsyn, Geejay101\n', '// April 2018\n', '\n', 'library SafeMath {\n', '  function mul(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint a, uint b) internal returns (uint) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint a, uint b) internal returns (uint) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint a, uint b) internal returns (uint) {\n', '    uint c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function percent(uint a, uint b) internal returns (uint) {\n', '    uint c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c / 100;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', '\n', ' /* from OpenZeppelin library */\n', ' /* https://github.com/OpenZeppelin/zeppelin-solidity */\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/*\n', '    Copyright 2016, Jordi Baylina\n', '\n', '    This program is free software: you can redistribute it and/or modify\n', '    it under the terms of the GNU General Public License as published by\n', '    the Free Software Foundation, either version 3 of the License, or\n', '    (at your option) any later version.\n', '\n', '    This program is distributed in the hope that it will be useful,\n', '    but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '    GNU General Public License for more details.\n', '\n', '    You should have received a copy of the GNU General Public License\n', '    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', ' */\n', '\n', '/// @title MiniMeToken Contract\n', '/// @author Jordi Baylina\n', '/// @dev This token contract&#39;s goal is to make it easy for anyone to clone this\n', '///  token using the token distribution at a given block, this will allow DAO&#39;s\n', '///  and DApps to upgrade their features in a decentralized manner without\n', '///  affecting the original token\n', '/// @dev It is ERC20 compliant, but still needs to under go further testing.\n', '\n', '\n', '/// @dev The token controller contract must implement these functions\n', 'contract TokenController {\n', '    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\n', '    /// @param _owner The address that sent the ether to create tokens\n', '    /// @return True if the ether is accepted, false if it throws\n', '    function proxyPayment(address _owner) public payable returns(bool);\n', '\n', '    /// @notice Notifies the controller about a token transfer allowing the\n', '    ///  controller to react if desired\n', '    /// @param _from The origin of the transfer\n', '    /// @param _to The destination of the transfer\n', '    /// @param _amount The amount of the transfer\n', '    /// @return False if the controller does not authorize the transfer\n', '    function onTransfer(address _from, address _to, uint _amount) public returns(bool);\n', '\n', '    /// @notice Notifies the controller about an approval allowing the\n', '    ///  controller to react if desired\n', '    /// @param _owner The address that calls `approve()`\n', '    /// @param _spender The spender in the `approve()` call\n', '    /// @param _amount The amount in the `approve()` call\n', '    /// @return False if the controller does not authorize the approval\n', '    function onApprove(address _owner, address _spender, uint _amount) public\n', '        returns(bool);\n', '}\n', '\n', 'contract Controlled {\n', '    /// @notice The address of the controller is the only address that can call\n', '    ///  a function with this modifier\n', '    modifier onlyController { require(msg.sender == controller); _; }\n', '\n', '    address public controller;\n', '\n', '    function Controlled() public { controller = msg.sender;}\n', '\n', '    /// @notice Changes the controller of the contract\n', '    /// @param _newController The new controller of the contract\n', '    function changeController(address _newController) public onlyController {\n', '        controller = _newController;\n', '    }\n', '}\n', '\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;\n', '}\n', '\n', '/// @dev The actual token contract, the default controller is the msg.sender\n', '///  that deploys the contract, so usually this token will be deployed by a\n', '///  token controller contract, which Giveth will call a "Campaign"\n', 'contract MiniMeToken is Controlled {\n', '\n', '    string public name;                //The Token&#39;s name: e.g. DigixDAO Tokens\n', '    uint8 public decimals;             //Number of decimals of the smallest unit\n', '    string public symbol;              //An identifier: e.g. REP\n', '    string public version = &#39;MMT_0.2&#39;; //An arbitrary versioning scheme\n', '\n', '\n', '    /// @dev `Checkpoint` is the structure that attaches a block number to a\n', '    ///  given value, the block number attached is the one that last changed the\n', '    ///  value\n', '    struct  Checkpoint {\n', '\n', '        // `fromBlock` is the block number that the value was generated from\n', '        uint128 fromBlock;\n', '\n', '        // `value` is the amount of tokens at a specific block number\n', '        uint128 value;\n', '    }\n', '\n', '    // `parentToken` is the Token address that was cloned to produce this token;\n', '    //  it will be 0x0 for a token that was not cloned\n', '    MiniMeToken public parentToken;\n', '\n', '    // `parentSnapShotBlock` is the block number from the Parent Token that was\n', '    //  used to determine the initial distribution of the Clone Token\n', '    uint public parentSnapShotBlock;\n', '\n', '    // `creationBlock` is the block number that the Clone Token was created\n', '    uint public creationBlock;\n', '\n', '    // `balances` is the map that tracks the balance of each address, in this\n', '    //  contract when the balance changes the block number that the change\n', '    //  occurred is also included in the map\n', '    mapping (address => Checkpoint[]) balances;\n', '\n', '    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\n', '    mapping (address => mapping (address => uint256)) allowed;\n', '\n', '    // Tracks the history of the `totalSupply` of the token\n', '    Checkpoint[] totalSupplyHistory;\n', '\n', '    // Flag that determines if the token is transferable or not.\n', '    bool public transfersEnabled;\n', '\n', '    // The factory used to create new clone tokens\n', '    MiniMeTokenFactory public tokenFactory;\n', '\n', '////////////////\n', '// Constructor\n', '////////////////\n', '\n', '    /// @notice Constructor to create a MiniMeToken\n', '    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\n', '    ///  will create the Clone token contracts, the token factory needs to be\n', '    ///  deployed first\n', '    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\n', '    ///  new token\n', '    /// @param _parentSnapShotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token, set to 0 if it\n', '    ///  is a new token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    function MiniMeToken(\n', '        address _tokenFactory,\n', '        address _parentToken,\n', '        uint _parentSnapShotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public {\n', '        tokenFactory = MiniMeTokenFactory(_tokenFactory);\n', '        name = _tokenName;                                 // Set the name\n', '        decimals = _decimalUnits;                          // Set the decimals\n', '        symbol = _tokenSymbol;                             // Set the symbol\n', '        parentToken = MiniMeToken(_parentToken);\n', '        parentSnapShotBlock = _parentSnapShotBlock;\n', '        transfersEnabled = _transfersEnabled;\n', '        creationBlock = block.number;\n', '    }\n', '\n', '\n', '///////////////////\n', '// ERC20 Methods\n', '///////////////////\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '        doTransfer(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\n', '    ///  is approved by `_from`\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function transferFrom(address _from, address _to, uint256 _amount\n', '    ) public returns (bool success) {\n', '\n', '        // The controller of this contract can move tokens around at will,\n', '        //  this is important to recognize! Confirm that you trust the\n', '        //  controller of this contract, which in most situations should be\n', '        //  another open source smart contract or 0x0\n', '        if (msg.sender != controller) {\n', '            require(transfersEnabled);\n', '\n', '            // The standard ERC 20 transferFrom functionality\n', '            require(allowed[_from][msg.sender] >= _amount);\n', '            allowed[_from][msg.sender] -= _amount;\n', '        }\n', '        doTransfer(_from, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This is the actual transfer function in the token contract, it can\n', '    ///  only be called by other functions in this contract.\n', '    /// @param _from The address holding the tokens being transferred\n', '    /// @param _to The address of the recipient\n', '    /// @param _amount The amount of tokens to be transferred\n', '    /// @return True if the transfer was successful\n', '    function doTransfer(address _from, address _to, uint _amount\n', '    ) internal {\n', '\n', '           if (_amount == 0) {\n', '               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0\n', '               return;\n', '           }\n', '\n', '           require(parentSnapShotBlock < block.number);\n', '\n', '           // Do not allow transfer to 0x0 or the token contract itself\n', '           require((_to != 0) && (_to != address(this)));\n', '\n', '           // If the amount being transfered is more than the balance of the\n', '           //  account the transfer throws\n', '           var previousBalanceFrom = balanceOfAt(_from, block.number);\n', '\n', '           require(previousBalanceFrom >= _amount);\n', '\n', '           // Alerts the token controller of the transfer\n', '           if (isContract(controller)) {\n', '               require(TokenController(controller).onTransfer(_from, _to, _amount));\n', '           }\n', '\n', '           // First update the balance array with the new value for the address\n', '           //  sending the tokens\n', '           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\n', '\n', '           // Then update the balance array with the new value for the address\n', '           //  receiving the tokens\n', '           var previousBalanceTo = balanceOfAt(_to, block.number);\n', '           require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '           updateValueAtNow(balances[_to], previousBalanceTo + _amount);\n', '\n', '           // An event to make the transfer easy to find on the blockchain\n', '           Transfer(_from, _to, _amount);\n', '\n', '    }\n', '\n', '    /// @param _owner The address that&#39;s balance is being requested\n', '    /// @return The balance of `_owner` at the current block\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balanceOfAt(_owner, block.number);\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\n', '    ///  its behalf. This is a modified version of the ERC20 approve function\n', '    ///  to be a little bit safer\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the approval was successful\n', '    function approve(address _spender, uint256 _amount) public returns (bool success) {\n', '        require(transfersEnabled);\n', '\n', '        // To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender,0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '        // Alerts the token controller of the approve function call\n', '        if (isContract(controller)) {\n', '            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));\n', '        }\n', '\n', '        allowed[msg.sender][_spender] = _amount;\n', '        Approval(msg.sender, _spender, _amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to read the `allowed[]` map\n', '    /// @param _owner The address of the account that owns the token\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens of _owner that _spender is allowed\n', '    ///  to spend\n', '    function allowance(address _owner, address _spender\n', '    ) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\n', '    ///  its behalf, and then a function is triggered in the contract that is\n', '    ///  being approved, `_spender`. This allows users to use their tokens to\n', '    ///  interact with contracts in one function call instead of two\n', '    /// @param _spender The address of the contract able to transfer the tokens\n', '    /// @param _amount The amount of tokens to be approved for transfer\n', '    /// @return True if the function call was successful\n', '    function approveAndCall(address _spender, uint256 _amount, bytes _extraData\n', '    ) public returns (bool success) {\n', '        require(approve(_spender, _amount));\n', '\n', '        ApproveAndCallFallBack(_spender).receiveApproval(\n', '            msg.sender,\n', '            _amount,\n', '            this,\n', '            _extraData\n', '        );\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev This function makes it easy to get the total number of tokens\n', '    /// @return The total number of tokens\n', '    function totalSupply() public constant returns (uint) {\n', '        return totalSupplyAt(block.number);\n', '    }\n', '\n', '\n', '////////////////\n', '// Query balance and totalSupply in History\n', '////////////////\n', '\n', '    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @param _blockNumber The block number when the balance is queried\n', '    /// @return The balance at `_blockNumber`\n', '    function balanceOfAt(address _owner, uint _blockNumber) public constant\n', '        returns (uint) {\n', '\n', '        // These next few lines are used when the balance of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.balanceOfAt` be queried at the\n', '        //  genesis block for that token as this contains initial balance of\n', '        //  this token\n', '        if ((balances[_owner].length == 0)\n', '            || (balances[_owner][0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                // Has no parent\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected balance during normal situations\n', '        } else {\n', '            return getValueAt(balances[_owner], _blockNumber);\n', '        }\n', '    }\n', '\n', '    /// @notice Total amount of tokens at a specific `_blockNumber`.\n', '    /// @param _blockNumber The block number when the totalSupply is queried\n', '    /// @return The total amount of tokens at `_blockNumber`\n', '    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\n', '\n', '        // These next few lines are used when the totalSupply of the token is\n', '        //  requested before a check point was ever created for this token, it\n', '        //  requires that the `parentToken.totalSupplyAt` be queried at the\n', '        //  genesis block for this token as that contains totalSupply of this\n', '        //  token at this block number.\n', '        if ((totalSupplyHistory.length == 0)\n', '            || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n', '            if (address(parentToken) != 0) {\n', '                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\n', '            } else {\n', '                return 0;\n', '            }\n', '\n', '        // This will return the expected totalSupply during normal situations\n', '        } else {\n', '            return getValueAt(totalSupplyHistory, _blockNumber);\n', '        }\n', '    }\n', '\n', '////////////////\n', '// Clone Token Method\n', '////////////////\n', '\n', '    /// @notice Creates a new clone token with the initial distribution being\n', '    ///  this token at `_snapshotBlock`\n', '    /// @param _cloneTokenName Name of the clone token\n', '    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\n', '    /// @param _cloneTokenSymbol Symbol of the clone token\n', '    /// @param _snapshotBlock Block when the distribution of the parent token is\n', '    ///  copied to set the initial distribution of the new clone token;\n', '    ///  if the block is zero than the actual block, the current block is used\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    /// @return The address of the new MiniMeToken Contract\n', '    function createCloneToken(\n', '        string _cloneTokenName,\n', '        uint8 _cloneDecimalUnits,\n', '        string _cloneTokenSymbol,\n', '        uint _snapshotBlock,\n', '        bool _transfersEnabled\n', '        ) public returns(address) {\n', '        if (_snapshotBlock == 0) _snapshotBlock = block.number;\n', '        MiniMeToken cloneToken = tokenFactory.createCloneToken(\n', '            this,\n', '            _snapshotBlock,\n', '            _cloneTokenName,\n', '            _cloneDecimalUnits,\n', '            _cloneTokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        cloneToken.changeController(msg.sender);\n', '\n', '        // An event to make the token easy to find on the blockchain\n', '        NewCloneToken(address(cloneToken), _snapshotBlock);\n', '        return address(cloneToken);\n', '    }\n', '\n', '////////////////\n', '// Generate and destroy tokens\n', '////////////////\n', '\n', '    /// @notice Generates `_amount` tokens that are assigned to `_owner`\n', '    /// @param _owner The address that will be assigned the new tokens\n', '    /// @param _amount The quantity of tokens generated\n', '    /// @return True if the tokens are generated correctly\n', '    function generateTokens(address _owner, uint _amount\n', '    ) public onlyController returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n', '        uint previousBalanceTo = balanceOf(_owner);\n', '        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\n', '        Transfer(0, _owner, _amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice Burns `_amount` tokens from `_owner`\n', '    /// @param _owner The address that will lose the tokens\n', '    /// @param _amount The quantity of tokens to burn\n', '    /// @return True if the tokens are burned correctly\n', '    function destroyTokens(address _owner, uint _amount\n', '    ) onlyController public returns (bool) {\n', '        uint curTotalSupply = totalSupply();\n', '        require(curTotalSupply >= _amount);\n', '        uint previousBalanceFrom = balanceOf(_owner);\n', '        require(previousBalanceFrom >= _amount);\n', '        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\n', '        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\n', '        Transfer(_owner, 0, _amount);\n', '        return true;\n', '    }\n', '\n', '////////////////\n', '// Enable tokens transfers\n', '////////////////\n', '\n', '\n', '    /// @notice Enables token holders to transfer their tokens freely if true\n', '    /// @param _transfersEnabled True if transfers are allowed in the clone\n', '    function enableTransfers(bool _transfersEnabled) public onlyController {\n', '        transfersEnabled = _transfersEnabled;\n', '    }\n', '\n', '////////////////\n', '// Internal helper functions to query and set a value in a snapshot array\n', '////////////////\n', '\n', '    /// @dev `getValueAt` retrieves the number of tokens at a given block number\n', '    /// @param checkpoints The history of values being queried\n', '    /// @param _block The block number to retrieve the value at\n', '    /// @return The number of tokens being queried\n', '    function getValueAt(Checkpoint[] storage checkpoints, uint _block\n', '    ) constant internal returns (uint) {\n', '        if (checkpoints.length == 0) return 0;\n', '\n', '        // Shortcut for the actual value\n', '        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\n', '            return checkpoints[checkpoints.length-1].value;\n', '        if (_block < checkpoints[0].fromBlock) return 0;\n', '\n', '        // Binary search of the value in the array\n', '        uint min = 0;\n', '        uint max = checkpoints.length-1;\n', '        while (max > min) {\n', '            uint mid = (max + min + 1)/ 2;\n', '            if (checkpoints[mid].fromBlock<=_block) {\n', '                min = mid;\n', '            } else {\n', '                max = mid-1;\n', '            }\n', '        }\n', '        return checkpoints[min].value;\n', '    }\n', '\n', '    /// @dev `updateValueAtNow` used to update the `balances` map and the\n', '    ///  `totalSupplyHistory`\n', '    /// @param checkpoints The history of data being updated\n', '    /// @param _value The new number of tokens\n', '    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value\n', '    ) internal  {\n', '        if ((checkpoints.length == 0)\n', '        || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {\n', '               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];\n', '               newCheckPoint.fromBlock =  uint128(block.number);\n', '               newCheckPoint.value = uint128(_value);\n', '           } else {\n', '               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n', '               oldCheckPoint.value = uint128(_value);\n', '           }\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        uint size;\n', '        if (_addr == 0) return false;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return size>0;\n', '    }\n', '\n', '    /// @dev Helper function to return a min betwen the two uints\n', '    function min(uint a, uint b) pure internal returns (uint) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /// @notice The fallback function: If the contract&#39;s controller has not been\n', '    ///  set to 0, then the `proxyPayment` method is called which relays the\n', '    ///  ether and creates tokens as described in the token controller contract\n', '    function () public payable {\n', '        require(isContract(controller));\n', '        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));\n', '    }\n', '\n', '//////////\n', '// Safety Methods\n', '//////////\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) public onlyController {\n', '        if (_token == 0x0) {\n', '            controller.transfer(this.balance);\n', '            return;\n', '        }\n', '\n', '        MiniMeToken token = MiniMeToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(controller, balance);\n', '        ClaimedTokens(_token, controller, balance);\n', '    }\n', '\n', '////////////////\n', '// Events\n', '////////////////\n', '    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\n', '    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _spender,\n', '        uint256 _amount\n', '        );\n', '\n', '}\n', '\n', '\n', '////////////////\n', '// MiniMeTokenFactory\n', '////////////////\n', '\n', '/// @dev This contract is used to generate clone contracts from a contract.\n', '///  In solidity this is the way to create a contract from a contract of the\n', '///  same class\n', 'contract MiniMeTokenFactory {\n', '\n', '    /// @notice Update the DApp by creating a new token with new functionalities\n', '    ///  the msg.sender becomes the controller of this clone token\n', '    /// @param _parentToken Address of the token being cloned\n', '    /// @param _snapshotBlock Block of the parent token that will\n', '    ///  determine the initial distribution of the clone token\n', '    /// @param _tokenName Name of the new token\n', '    /// @param _decimalUnits Number of decimals of the new token\n', '    /// @param _tokenSymbol Token Symbol for the new token\n', '    /// @param _transfersEnabled If true, tokens will be able to be transferred\n', '    /// @return The address of the new token contract\n', '    function createCloneToken(\n', '        address _parentToken,\n', '        uint _snapshotBlock,\n', '        string _tokenName,\n', '        uint8 _decimalUnits,\n', '        string _tokenSymbol,\n', '        bool _transfersEnabled\n', '    ) public returns (MiniMeToken) {\n', '        MiniMeToken newToken = new MiniMeToken(\n', '            this,\n', '            _parentToken,\n', '            _snapshotBlock,\n', '            _tokenName,\n', '            _decimalUnits,\n', '            _tokenSymbol,\n', '            _transfersEnabled\n', '            );\n', '\n', '        newToken.changeController(msg.sender);\n', '        return newToken;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract EatMeCoin is MiniMeToken { \n', '\n', '  // we use this variable to store the number of the finalization block\n', '  uint256 public checkpointBlock;\n', '\n', '  // address which is allowed to trigger tokens generation\n', '  address public mayGenerateAddr;\n', '\n', '  // flag\n', '  bool tokenGenerationEnabled = true; //<- added after first audit\n', '\n', '\n', '  modifier mayGenerate() {\n', '    require ( (msg.sender == mayGenerateAddr) &&\n', '              (tokenGenerationEnabled == true) ); //<- added after first audit\n', '    _;\n', '  }\n', '\n', '  // Constructor\n', '  function EatMeCoin(address _tokenFactory) \n', '    MiniMeToken(\n', '      _tokenFactory,\n', '      0x0,\n', '      0,\n', '      "EatMeCoin",\n', '      18, // decimals\n', '      "EAT",\n', '      // SHOULD TRANSFERS BE ENABLED? -- NO\n', '      false){\n', '    \n', '    controller = msg.sender;\n', '    mayGenerateAddr = controller;\n', '  }\n', '\n', '  function setGenerateAddr(address _addr) onlyController{\n', '    // we can appoint an address to be allowed to generate tokens\n', '    require( _addr != 0x0 );\n', '    mayGenerateAddr = _addr;\n', '  }\n', '\n', '\n', '  /// @notice this is default function called when ETH is send to this contract\n', '  ///   we use the campaign contract for selling tokens\n', '  function () payable {\n', '    revert();\n', '  }\n', '\n', '  \n', '  /// @notice This function is copy-paste of the generateTokens of the original MiniMi contract\n', '  ///   except it uses mayGenerate modifier (original uses onlyController)\n', '  function generate_token_for(address _addrTo, uint256 _amount) mayGenerate returns (bool) {\n', '    \n', '    //balances[_addr] += _amount;\n', '   \n', '    uint256 curTotalSupply = totalSupply();\n', '    require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow    \n', '    uint256 previousBalanceTo = balanceOf(_addrTo);\n', '    require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n', '    updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n', '    updateValueAtNow(balances[_addrTo], previousBalanceTo + _amount);\n', '    Transfer(0, _addrTo, _amount);\n', '    return true;\n', '  }\n', '\n', '  // overwrites the original function\n', '  function generateTokens(address _owner, uint256 _amount\n', '    ) onlyController returns (bool) {\n', '    revert();\n', '    generate_token_for(_owner, _amount);    \n', '  }\n', '\n', '\n', '  // permanently disables generation of new tokens\n', '  function finalize() mayGenerate {\n', '    tokenGenerationEnabled = false;\n', '    transfersEnabled = true;\n', '    checkpointBlock = block.number;\n', '  }  \n', '}\n', '\n', '\n', 'contract eat_token_interface{\n', '  uint8 public decimals;\n', '  function generate_token_for(address _addr,uint256 _amount) returns (bool);\n', '  function finalize();\n', '}\n', '\n', '// Controlled is implemented in MiniMeToken.sol\n', 'contract TokenCampaign is Controlled {\n', '  using SafeMath for uint256;\n', '\n', '  // this is our token\n', '  eat_token_interface public token;\n', '\n', '  uint8 public constant decimals = 18;\n', '\n', '  uint256 public constant scale = (uint256(10) ** decimals);\n', '\n', '  uint256 public constant hardcap = 100000000 * scale;\n', '\n', '  ///////////////////////////////////\n', '  //\n', '  // constants related to token sale\n', '\n', '  // after sale ends, additional tokens will be generated\n', '  // according to the following rules,\n', '  // where 100% correspond to the number of sold tokens\n', '\n', '  // percent of reward tokens to be generated\n', '  uint256 public constant PRCT100_D_TEAM = 63; // % * 100 , 0.63%\n', '  uint256 public constant PRCT100_R_TEAM = 250; // % * 100 , 2.5%\n', '  uint256 public constant PRCT100_R2 = 150;  // % * 100 , 1.5%\n', '\n', '  // fixed reward\n', '  uint256 public constant FIXEDREWARD_MM = 100000 * scale; // fixed\n', '\n', '  // we keep some of the ETH in the contract until the sale is finalized\n', '  // percent of ETH going to operational and reserve account\n', '  uint256 public constant PRCT100_ETH_OP = 4000; // % * 100 , 2x 40%\n', '\n', '  // preCrowd structure, Wei\n', '  uint256 public constant preCrowdMinContribution = (20 ether);\n', '\n', '  // minmal contribution, Wei\n', '  uint256 public constant minContribution = (1 ether) / 100;\n', '\n', '  // how many tokens for one ETH\n', '  uint256 public constant preCrowd_tokens_scaled = 7142857142857140000000; // 30% discount\n', '  uint256 public constant stage_1_tokens_scaled =  6250000000000000000000; // 20% discount\n', '  uint256 public constant stage_2_tokens_scaled =  5555555555555560000000; // 10% discount\n', '  uint256 public constant stage_3_tokens_scaled =  5000000000000000000000; //<-- scaled\n', '\n', '  // Tokens allocated for each stage\n', '  uint256 public constant PreCrowdAllocation =  20000000 * scale ; // Tokens\n', '  uint256 public constant Stage1Allocation =    15000000 * scale ; // Tokens\n', '  uint256 public constant Stage2Allocation =    15000000 * scale ; // Tokens\n', '  uint256 public constant Stage3Allocation =    20000000 * scale ; // Tokens\n', '\n', '  // keeps track of tokens allocated, scaled value\n', '  uint256 public tokensRemainingPreCrowd = PreCrowdAllocation;\n', '  uint256 public tokensRemainingStage1 = Stage1Allocation;\n', '  uint256 public tokensRemainingStage2 = Stage2Allocation;\n', '  uint256 public tokensRemainingStage3 = Stage3Allocation;\n', '\n', '  // If necessary we can cap the maximum amount \n', '  // of individual contributions in case contributions have exceeded the hardcap\n', '  // this avoids to cap the contributions already when funds flow in\n', '  uint256 public maxPreCrowdAllocationPerInvestor =  20000000 * scale ; // Tokens\n', '  uint256 public maxStage1AllocationPerInvestor =    15000000 * scale ; // Tokens\n', '  uint256 public maxStage2AllocationPerInvestor =    15000000 * scale ; // Tokens\n', '  uint256 public maxStage3AllocationPerInvestor =    20000000 * scale ; // Tokens\n', '\n', '  // keeps track of tokens generated so far, scaled value\n', '  uint256 public tokensGenerated = 0;\n', '\n', '  address[] public joinedCrowdsale;\n', '\n', '  // total Ether raised (= Ether paid into the contract)\n', '  uint256 public amountRaised = 0; \n', '\n', '  // How much wei we have given back to investors.\n', '  uint256 public amountRefunded = 0;\n', '\n', '\n', '  ////////////////////////////////////////////////////////\n', '  //\n', '  // folowing addresses need to be set in the constructor\n', '  // we also have setter functions which allow to change\n', '  // an address if it is compromised or something happens\n', '\n', '  // destination for D-team&#39;s share\n', '  address public dteamVaultAddr1;\n', '  address public dteamVaultAddr2;\n', '  address public dteamVaultAddr3;\n', '  address public dteamVaultAddr4;\n', '\n', '  // destination for R-team&#39;s share\n', '  address public rteamVaultAddr;\n', '\n', '  // advisor address\n', '  address public r2VaultAddr;\n', '\n', '  // adivisor address\n', '  address public mmVaultAddr;\n', '  \n', '  // destination for reserve tokens\n', '  address public reserveVaultAddr;\n', '\n', '  // destination for collected Ether\n', '  address public trusteeVaultAddr;\n', '  \n', '  // destination for operational costs account\n', '  address public opVaultAddr;\n', '\n', '  // adress of our token\n', '  address public tokenAddr;\n', '  \n', '  // @check ensure that state transitions are \n', '  // only in one direction\n', '  // 3 - passive, not accepting funds\n', '  // 2 - active main sale, accepting funds\n', '  // 1 - closed, not accepting funds \n', '  // 0 - finalized, not accepting funds\n', '  uint8 public campaignState = 3; \n', '  bool public paused = false;\n', '\n', '  // time in seconds since epoch \n', '  // set to midnight of saturday January 1st, 4000\n', '  uint256 public tCampaignStart = 64060588800;\n', '\n', '  uint256 public t_1st_StageEnd = 5 * (1 days); // Stage1 3 days open\n', '  // for testing\n', '  // uint256 public t_1st_StageEnd = 3 * (1 hours); // Stage1 3 days open\n', '\n', '  uint256 public t_2nd_StageEnd = 2 * (1 days); // Stage2 2 days open\n', '  // for testing\n', '  // uint256 public t_2nd_StageEnd = 2 * (1 hours); // Stage2 2 days open\n', '\n', '  uint256 public tCampaignEnd = 35 * (1 days); // Stage3 35 days open\n', '  // for testing\n', '  // uint256 public tCampaignEnd = 35 * (1 hours); // Stage3 35 days open\n', '\n', '  uint256 public tFinalized = 64060588800;\n', '\n', '  // participant data\n', '  struct ParticipantListData {\n', '\n', '    bool participatedFlag;\n', '\n', '    uint256 contributedAmountPreAllocated;\n', '    uint256 contributedAmountPreCrowd;\n', '    uint256 contributedAmountStage1;\n', '    uint256 contributedAmountStage2;\n', '    uint256 contributedAmountStage3;\n', '\n', '    uint256 preallocatedTokens;\n', '    uint256 allocatedTokens;\n', '\n', '    uint256 spentAmount;\n', '  }\n', '\n', '  /** participant addresses */\n', '  mapping (address => ParticipantListData) public participantList;\n', '\n', '  uint256 public investorsProcessed = 0;\n', '  uint256 public investorsBatchSize = 100;\n', '\n', '  bool public isWhiteListed = true;\n', '\n', '  struct WhiteListData {\n', '    bool status;\n', '    uint256 maxCap;\n', '  }\n', '\n', '  /** Whitelisted addresses */\n', '  mapping (address => WhiteListData) public participantWhitelist;\n', '\n', '\n', '  //////////////////////////////////////////////\n', '  //\n', '  // Events\n', ' \n', '  event CampaignOpen(uint256 timenow);\n', '  event CampaignClosed(uint256 timenow);\n', '  event CampaignPaused(uint256 timenow);\n', '  event CampaignResumed(uint256 timenow);\n', '\n', '  event PreAllocated(address indexed backer, uint256 raised);\n', '  event RaisedPreCrowd(address indexed backer, uint256 raised);\n', '  event RaisedStage1(address indexed backer, uint256 raised);\n', '  event RaisedStage2(address indexed backer, uint256 raised);\n', '  event RaisedStage3(address indexed backer, uint256 raised);\n', '  event Airdropped(address indexed backer, uint256 tokensairdropped);\n', '\n', '  event Finalized(uint256 timenow);\n', '\n', '  event ClaimedTokens(address indexed _token, address indexed _controller, uint256 _amount);\n', '\n', '  // Address early participation whitelist status changed\n', '  event Whitelisted(address addr, bool status);\n', '\n', '  // Refund was processed for a contributor\n', '  event Refund(address investor, uint256 weiAmount);\n', '\n', '  /// @notice Constructor\n', '  /// @param _tokenAddress Our token&#39;s address\n', '  /// @param  _trusteeAddress Trustee address\n', '  /// @param  _opAddress Operational expenses address \n', '  /// @param  _reserveAddress Project Token Reserve\n', '  function TokenCampaign(\n', '    address _tokenAddress,\n', '    address _dteamAddress1,\n', '    address _dteamAddress2,\n', '    address _dteamAddress3,\n', '    address _dteamAddress4,\n', '    address _rteamAddress,\n', '    address _r2Address,\n', '    address _mmAddress,\n', '    address _trusteeAddress,\n', '    address _opAddress,\n', '    address _reserveAddress)\n', '  {\n', '\n', '    controller = msg.sender;\n', '    \n', '    /// set addresses     \n', '    tokenAddr = _tokenAddress;\n', '    dteamVaultAddr1 = _dteamAddress1;\n', '    dteamVaultAddr2 = _dteamAddress2;\n', '    dteamVaultAddr3 = _dteamAddress3;\n', '    dteamVaultAddr4 = _dteamAddress4;\n', '    rteamVaultAddr = _rteamAddress;\n', '    r2VaultAddr = _r2Address;\n', '    mmVaultAddr = _mmAddress;\n', '    trusteeVaultAddr = _trusteeAddress; \n', '    opVaultAddr = _opAddress;\n', '    reserveVaultAddr = _reserveAddress;\n', '\n', '    /// reference our token\n', '    token = eat_token_interface(tokenAddr);\n', '   \n', '  }\n', '\n', '\n', '  /////////////////////////////////////////////\n', '  ///\n', '  /// Functions that change contract state\n', '\n', '  ///\n', '  /// Setters\n', '  ///\n', '\n', '  /// @notice  Puts campaign into active state  \n', '  ///  only controller can do that\n', '  ///  only possible if team token Vault is set up\n', '  ///  WARNING: usual caveats apply to the Ethereum&#39;s interpretation of time\n', '  function startSale() public onlyController {\n', '    require( campaignState > 2 );\n', '\n', '    campaignState = 2;\n', '\n', '    uint256 tNow = now;\n', '    // assume timestamps will not cause overflow\n', '    tCampaignStart = tNow;\n', '    t_1st_StageEnd += tNow;\n', '    t_2nd_StageEnd += tNow;\n', '    tCampaignEnd += tNow;\n', '\n', '    CampaignOpen(now);\n', '  }\n', '\n', '\n', '  /// @notice Pause sale\n', '  ///   just in case we have some troubles \n', '  ///   Note that time marks are not updated\n', '  function pauseSale() public onlyController {\n', '    require( campaignState  == 2 );\n', '    paused = true;\n', '    CampaignPaused(now);\n', '  }\n', '\n', '\n', '  /// @notice Resume sale\n', '  function resumeSale() public onlyController {\n', '    require( campaignState  == 2 );\n', '    paused = false;\n', '    CampaignResumed(now);\n', '  }\n', '\n', '\n', '\n', '  /// @notice Puts the camapign into closed state\n', '  ///   only controller can do so\n', '  ///   only possible from the active state\n', '  ///   we can call this function if we want to stop sale before end time \n', '  ///   and be able to perform &#39;finalizeCampaign()&#39; immediately\n', '  function closeSale() public onlyController {\n', '    require( campaignState  == 2 );\n', '    campaignState = 1;\n', '\n', '    CampaignClosed(now);\n', '  }   \n', '\n', '\n', '  function setParticipantWhitelist(address addr, bool status, uint256 maxCap) public onlyController {\n', '    participantWhitelist[addr] = WhiteListData({status:status, maxCap:maxCap});\n', '    Whitelisted(addr, status);\n', '  }\n', '\n', '  function setMultipleParticipantWhitelist(address[] addrs, bool[] statuses, uint[] maxCaps) public onlyController {\n', '    for (uint256 iterator = 0; iterator < addrs.length; iterator++) {\n', '      setParticipantWhitelist(addrs[iterator], statuses[iterator], maxCaps[iterator]);\n', '    }\n', '  }\n', '\n', '  function investorCount() public constant returns (uint256) {\n', '    return joinedCrowdsale.length;\n', '  }\n', '\n', '  function contractBalance() public constant returns (uint256) {\n', '    return this.balance;\n', '  }\n', '\n', '  /**\n', '   * Investors can claim refund after finalisation.\n', '   *\n', '   * Note that any refunds from proxy buyers should be handled separately,\n', '   * and not through this contract.\n', '   */\n', '  function refund() public {\n', '    require (campaignState == 0);\n', '\n', '    uint256 weiValue = participantList[msg.sender].contributedAmountPreCrowd;\n', '    weiValue = weiValue.add(participantList[msg.sender].contributedAmountStage1);\n', '    weiValue = weiValue.add(participantList[msg.sender].contributedAmountStage2);\n', '    weiValue = weiValue.add(participantList[msg.sender].contributedAmountStage3);\n', '    weiValue = weiValue.sub(participantList[msg.sender].spentAmount);\n', '\n', '    if (weiValue <= 0) revert();\n', '\n', '    participantList[msg.sender].contributedAmountPreCrowd = 0;\n', '    participantList[msg.sender].contributedAmountStage1 = 0;\n', '    participantList[msg.sender].contributedAmountStage2 = 0;\n', '    participantList[msg.sender].contributedAmountStage3 = 0;\n', '\n', '    amountRefunded = amountRefunded.add(weiValue);\n', '\n', '    // send it\n', '    if (!msg.sender.send(weiValue)) revert();\n', '\n', '    // announce to world\n', '    Refund(msg.sender, weiValue);\n', '\n', '  }\n', '\n', '  /// @notice Finalizes the campaign\n', '  ///   Get funds out, generates team, reserve and reserve tokens\n', '  function allocateInvestors() public onlyController {     \n', '      \n', '    /// only if sale was closed or 48 hours = 2880 minutes have passed since campaign end\n', '    /// we leave this time to complete possibly pending orders from offchain contributions \n', '\n', '    require ( (campaignState == 1) || ((campaignState != 0) && (now > tCampaignEnd + (2880 minutes))));\n', '\n', '    uint256 nTokens = 0;\n', '    uint256 rate = 0;\n', '    uint256 contributedAmount = 0; \n', '\n', '    uint256 investorsProcessedEnd = investorsProcessed + investorsBatchSize;\n', '\n', '    if (investorsProcessedEnd > joinedCrowdsale.length) {\n', '      investorsProcessedEnd = joinedCrowdsale.length;\n', '    }\n', '\n', '    for (uint256 i = investorsProcessed; i < investorsProcessedEnd; i++) {\n', '\n', '        investorsProcessed++;\n', '\n', '        address investorAddress = joinedCrowdsale[i];\n', '\n', '        // PreCrowd stage\n', '        contributedAmount = participantList[investorAddress].contributedAmountPreCrowd;\n', '\n', '        if (isWhiteListed) {\n', '\n', '            // is contributeAmount within whitelisted amount\n', '            if (contributedAmount > participantWhitelist[investorAddress].maxCap) {\n', '                contributedAmount = participantWhitelist[investorAddress].maxCap;\n', '            }\n', '\n', '            // calculate remaining whitelisted amount\n', '            if (contributedAmount>0) {\n', '                participantWhitelist[investorAddress].maxCap = participantWhitelist[investorAddress].maxCap.sub(contributedAmount);\n', '            }\n', '\n', '        }\n', '\n', '        if (contributedAmount>0) {\n', '\n', '            // calculate the number of tokens\n', '            rate = preCrowd_tokens_scaled;\n', '            nTokens = (rate.mul(contributedAmount)).div(1 ether);\n', '\n', '            // check whether individual allocations are capped\n', '            if (nTokens > maxPreCrowdAllocationPerInvestor) {\n', '              nTokens = maxPreCrowdAllocationPerInvestor;\n', '            }\n', '\n', '            // If tokens are bigger than whats left in the stage, give the rest \n', '            if (tokensRemainingPreCrowd.sub(nTokens) < 0) {\n', '                nTokens = tokensRemainingPreCrowd;\n', '            }\n', '\n', '            // update spent amount\n', '            participantList[joinedCrowdsale[i]].spentAmount = participantList[joinedCrowdsale[i]].spentAmount.add(nTokens.div(rate).mul(1 ether));\n', '\n', '            // calculate leftover tokens for the stage \n', '            tokensRemainingPreCrowd = tokensRemainingPreCrowd.sub(nTokens);\n', '\n', '            // update the new token holding\n', '            participantList[investorAddress].allocatedTokens = participantList[investorAddress].allocatedTokens.add(nTokens);\n', '\n', '        }\n', '\n', '        //  stage1\n', '        contributedAmount = participantList[investorAddress].contributedAmountStage1;\n', '\n', '        if (isWhiteListed) {\n', '\n', '            // is contributeAmount within whitelisted amount\n', '            if (contributedAmount > participantWhitelist[investorAddress].maxCap) {\n', '                contributedAmount = participantWhitelist[investorAddress].maxCap;\n', '            }\n', '\n', '            // calculate remaining whitelisted amount\n', '            if (contributedAmount>0) {\n', '                participantWhitelist[investorAddress].maxCap = participantWhitelist[investorAddress].maxCap.sub(contributedAmount);\n', '            }\n', '\n', '        }\n', '\n', '        if (contributedAmount>0) {\n', '\n', '            // calculate the number of tokens\n', '            rate = stage_1_tokens_scaled;\n', '            nTokens = (rate.mul(contributedAmount)).div(1 ether);\n', '\n', '            // check whether individual allocations are capped\n', '            if (nTokens > maxStage1AllocationPerInvestor) {\n', '              nTokens = maxStage1AllocationPerInvestor;\n', '            }\n', '\n', '            // If tokens are bigger than whats left in the stage, give the rest \n', '            if (tokensRemainingStage1.sub(nTokens) < 0) {\n', '                nTokens = tokensRemainingStage1;\n', '            }\n', '\n', '            // update spent amount\n', '            participantList[joinedCrowdsale[i]].spentAmount = participantList[joinedCrowdsale[i]].spentAmount.add(nTokens.div(rate).mul(1 ether));\n', '\n', '            // calculate leftover tokens for the stage \n', '            tokensRemainingStage1 = tokensRemainingStage1.sub(nTokens);\n', '\n', '            // update the new token holding\n', '            participantList[investorAddress].allocatedTokens = participantList[investorAddress].allocatedTokens.add(nTokens);\n', '\n', '        }\n', '\n', '        //  stage2\n', '        contributedAmount = participantList[investorAddress].contributedAmountStage2;\n', '\n', '        if (isWhiteListed) {\n', '\n', '            // is contributeAmount within whitelisted amount\n', '            if (contributedAmount > participantWhitelist[investorAddress].maxCap) {\n', '                contributedAmount = participantWhitelist[investorAddress].maxCap;\n', '            }\n', '\n', '            // calculate remaining whitelisted amount\n', '            if (contributedAmount>0) {\n', '                participantWhitelist[investorAddress].maxCap = participantWhitelist[investorAddress].maxCap.sub(contributedAmount);\n', '            }\n', '\n', '        }\n', '\n', '        if (contributedAmount>0) {\n', '\n', '            // calculate the number of tokens\n', '            rate = stage_2_tokens_scaled;\n', '            nTokens = (rate.mul(contributedAmount)).div(1 ether);\n', '\n', '            // check whether individual allocations are capped\n', '            if (nTokens > maxStage2AllocationPerInvestor) {\n', '              nTokens = maxStage2AllocationPerInvestor;\n', '            }\n', '\n', '            // If tokens are bigger than whats left in the stage, give the rest \n', '            if (tokensRemainingStage2.sub(nTokens) < 0) {\n', '                nTokens = tokensRemainingStage2;\n', '            }\n', '\n', '            // update spent amount\n', '            participantList[joinedCrowdsale[i]].spentAmount = participantList[joinedCrowdsale[i]].spentAmount.add(nTokens.div(rate).mul(1 ether));\n', '\n', '            // calculate leftover tokens for the stage \n', '            tokensRemainingStage2 = tokensRemainingStage2.sub(nTokens);\n', '\n', '            // update the new token holding\n', '            participantList[investorAddress].allocatedTokens = participantList[investorAddress].allocatedTokens.add(nTokens);\n', '\n', '        }\n', '\n', '        //  stage3\n', '        contributedAmount = participantList[investorAddress].contributedAmountStage3;\n', '\n', '        if (isWhiteListed) {\n', '\n', '            // is contributeAmount within whitelisted amount\n', '            if (contributedAmount > participantWhitelist[investorAddress].maxCap) {\n', '                contributedAmount = participantWhitelist[investorAddress].maxCap;\n', '            }\n', '\n', '            // calculate remaining whitelisted amount\n', '            if (contributedAmount>0) {\n', '                participantWhitelist[investorAddress].maxCap = participantWhitelist[investorAddress].maxCap.sub(contributedAmount);\n', '            }\n', '\n', '        }\n', '\n', '        if (contributedAmount>0) {\n', '\n', '            // calculate the number of tokens\n', '            rate = stage_3_tokens_scaled;\n', '            nTokens = (rate.mul(contributedAmount)).div(1 ether);\n', '\n', '            // check whether individual allocations are capped\n', '            if (nTokens > maxStage3AllocationPerInvestor) {\n', '              nTokens = maxStage3AllocationPerInvestor;\n', '            }\n', '\n', '            // If tokens are bigger than whats left in the stage, give the rest \n', '            if (tokensRemainingStage3.sub(nTokens) < 0) {\n', '                nTokens = tokensRemainingStage3;\n', '            }\n', '\n', '            // update spent amount\n', '            participantList[joinedCrowdsale[i]].spentAmount = participantList[joinedCrowdsale[i]].spentAmount.add(nTokens.div(rate).mul(1 ether));\n', '\n', '            // calculate leftover tokens for the stage \n', '            tokensRemainingStage3 = tokensRemainingStage3.sub(nTokens);\n', '\n', '            // update the new token holding\n', '            participantList[investorAddress].allocatedTokens = participantList[investorAddress].allocatedTokens.add(nTokens);\n', '\n', '        }\n', '\n', '        do_grant_tokens(investorAddress, participantList[investorAddress].allocatedTokens);\n', '\n', '    }\n', '\n', '  }\n', '\n', '  /// @notice Finalizes the campaign\n', '  ///   Get funds out, generates team, reserve and reserve tokens\n', '  function finalizeCampaign() public onlyController {     \n', '      \n', '    /// only if sale was closed or 48 hours = 2880 minutes have passed since campaign end\n', '    /// we leave this time to complete possibly pending orders from offchain contributions \n', '\n', '    require ( (campaignState == 1) || ((campaignState != 0) && (now > tCampaignEnd + (2880 minutes))));\n', '\n', '    campaignState = 0;\n', '\n', '    // dteam tokens\n', '    uint256 drewardTokens = (tokensGenerated.mul(PRCT100_D_TEAM)).div(10000);\n', '\n', '    // rteam tokens\n', '    uint256 rrewardTokens = (tokensGenerated.mul(PRCT100_R_TEAM)).div(10000);\n', '\n', '    // r2 tokens\n', '    uint256 r2rewardTokens = (tokensGenerated.mul(PRCT100_R2)).div(10000);\n', '\n', '    // mm tokens\n', '    uint256 mmrewardTokens = FIXEDREWARD_MM;\n', '\n', '    do_grant_tokens(dteamVaultAddr1, drewardTokens);\n', '    do_grant_tokens(dteamVaultAddr2, drewardTokens);\n', '    do_grant_tokens(dteamVaultAddr3, drewardTokens);\n', '    do_grant_tokens(dteamVaultAddr4, drewardTokens);     \n', '    do_grant_tokens(rteamVaultAddr, rrewardTokens);\n', '    do_grant_tokens(r2VaultAddr, r2rewardTokens);\n', '    do_grant_tokens(mmVaultAddr, mmrewardTokens);\n', '\n', '    // generate reserve tokens \n', '    // uint256 reserveTokens = rest of tokens under hardcap\n', '    uint256 reserveTokens = hardcap.sub(tokensGenerated);\n', '    do_grant_tokens(reserveVaultAddr, reserveTokens);\n', '\n', '    // prevent further token generation\n', '    token.finalize();\n', '\n', '    tFinalized = now;\n', '    \n', '    // notify the world\n', '    Finalized(tFinalized);\n', '  }\n', '\n', '\n', '  ///   Get funds out\n', '  function retrieveFunds() public onlyController {     \n', '\n', '      require (campaignState == 0);\n', '      \n', '      // forward funds to the trustee \n', '      // since we forward a fraction of the incomming ether on every contribution\n', '      // &#39;amountRaised&#39; IS NOT equal to the contract&#39;s balance\n', '      // we use &#39;this.balance&#39; instead\n', '\n', '      // we do this manually to give people the chance to claim refunds in case of overpayments\n', '\n', '      trusteeVaultAddr.transfer(this.balance);\n', '\n', '  }\n', '\n', '     ///   Get funds out\n', '  function emergencyFinalize() public onlyController {     \n', '\n', '    campaignState = 0;\n', '\n', '    // prevent further token generation\n', '    token.finalize();\n', '\n', '  }\n', '\n', '\n', '  /// @notice triggers token generaton for the recipient\n', '  ///  can be called only from the token sale contract itself\n', '  ///  side effect: increases the generated tokens counter \n', '  ///  CAUTION: we do not check campaign state and parameters assuming that&#39;s callee&#39;s task\n', '  function do_grant_tokens(address _to, uint256 _nTokens) internal returns (bool){\n', '    \n', '    require( token.generate_token_for(_to, _nTokens) );\n', '    \n', '    tokensGenerated = tokensGenerated.add(_nTokens);\n', '    \n', '    return true;\n', '  }\n', '\n', '\n', '  ///  @notice processes the contribution\n', '  ///   checks campaign state, time window and minimal contribution\n', '  ///   throws if one of the conditions fails\n', '  function process_contribution(address _toAddr) internal {\n', '\n', '    require ((campaignState == 2)   // active main sale\n', '         && (now <= tCampaignEnd)   // within time window\n', '         && (paused == false));     // not on hold\n', '    \n', '    // we check that Eth sent is sufficient \n', '    // though our token has decimals we don&#39;t want nanocontributions\n', '    require ( msg.value >= minContribution );\n', '\n', '    amountRaised = amountRaised.add(msg.value);\n', '\n', '    // check whether we know this investor, if not add him to list\n', '    if (!participantList[_toAddr].participatedFlag) {\n', '\n', '       // A new investor\n', '       participantList[_toAddr].participatedFlag = true;\n', '       joinedCrowdsale.push(_toAddr);\n', '    }\n', '\n', '    if ( msg.value >= preCrowdMinContribution ) {\n', '\n', '      participantList[_toAddr].contributedAmountPreCrowd = participantList[_toAddr].contributedAmountPreCrowd.add(msg.value);\n', '      \n', '      // notify the world\n', '      RaisedPreCrowd(_toAddr, msg.value);\n', '\n', '    } else {\n', '\n', '      if (now <= t_1st_StageEnd) {\n', '\n', '        participantList[_toAddr].contributedAmountStage1 = participantList[_toAddr].contributedAmountStage1.add(msg.value);\n', '\n', '        // notify the world\n', '        RaisedStage1(_toAddr, msg.value);\n', '\n', '      } else if (now <= t_2nd_StageEnd) {\n', '\n', '        participantList[_toAddr].contributedAmountStage2 = participantList[_toAddr].contributedAmountStage2.add(msg.value);\n', '\n', '        // notify the world\n', '        RaisedStage2(_toAddr, msg.value);\n', '\n', '      } else {\n', '\n', '        participantList[_toAddr].contributedAmountStage3 = participantList[_toAddr].contributedAmountStage3.add(msg.value);\n', '        \n', '        // notify the world\n', '        RaisedStage3(_toAddr, msg.value);\n', '\n', '      }\n', '\n', '    }\n', '\n', '    // compute the fraction of ETH going to op account\n', '    uint256 opEth = (PRCT100_ETH_OP.mul(msg.value)).div(10000);\n', '\n', '    // transfer to op account \n', '    opVaultAddr.transfer(opEth);\n', '\n', '    // transfer to reserve account \n', '    reserveVaultAddr.transfer(opEth);\n', '\n', '  }\n', '\n', '  /**\n', '  * Preallocated tokens have been sold or given in airdrop before the actual crowdsale opens. \n', '  * This function mints the tokens and moves the crowdsale needle.\n', '  *\n', '  */\n', '  function preallocate(address _toAddr, uint fullTokens, uint weiPaid) public onlyController {\n', '\n', '    require (campaignState != 0);\n', '\n', '    uint tokenAmount = fullTokens * scale;\n', '    uint weiAmount = weiPaid ; // This can be also 0, we give out tokens for free\n', '\n', '    if (!participantList[_toAddr].participatedFlag) {\n', '\n', '       // A new investor\n', '       participantList[_toAddr].participatedFlag = true;\n', '       joinedCrowdsale.push(_toAddr);\n', '\n', '    }\n', '\n', '    participantList[_toAddr].contributedAmountPreAllocated = participantList[_toAddr].contributedAmountPreAllocated.add(weiAmount);\n', '    participantList[_toAddr].preallocatedTokens = participantList[_toAddr].preallocatedTokens.add(tokenAmount);\n', '\n', '    amountRaised = amountRaised.add(weiAmount);\n', '\n', '    // side effect: do_grant_tokens updates the "tokensGenerated" variable\n', '    require( do_grant_tokens(_toAddr, tokenAmount) );\n', '\n', '    // notify the world\n', '    PreAllocated(_toAddr, weiAmount);\n', '\n', '  }\n', '\n', '  function airdrop(address _toAddr, uint fullTokens) public onlyController {\n', '\n', '    require (campaignState != 0);\n', '\n', '    uint tokenAmount = fullTokens * scale;\n', '\n', '    if (!participantList[_toAddr].participatedFlag) {\n', '\n', '       // A new investor\n', '       participantList[_toAddr].participatedFlag = true;\n', '       joinedCrowdsale.push(_toAddr);\n', '\n', '    }\n', '\n', '    participantList[_toAddr].preallocatedTokens = participantList[_toAddr].allocatedTokens.add(tokenAmount);\n', '\n', '    // side effect: do_grant_tokens updates the "tokensGenerated" variable\n', '    require( do_grant_tokens(_toAddr, tokenAmount) );\n', '\n', '    // notify the world\n', '    Airdropped(_toAddr, fullTokens);\n', '\n', '  }\n', '\n', '  function multiAirdrop(address[] addrs, uint[] fullTokens) public onlyController {\n', '\n', '    require (campaignState != 0);\n', '\n', '    for (uint256 iterator = 0; iterator < addrs.length; iterator++) {\n', '      airdrop(addrs[iterator], fullTokens[iterator]);\n', '    }\n', '  }\n', '\n', '  // set individual preCrowd cap\n', '  function setInvestorsBatchSize(uint256 _batchsize) public onlyController {\n', '      investorsBatchSize = _batchsize;\n', '  }\n', '\n', '  // set individual preCrowd cap\n', '  function setMaxPreCrowdAllocationPerInvestor(uint256 _cap) public onlyController {\n', '      maxPreCrowdAllocationPerInvestor = _cap;\n', '  }\n', '\n', '  // set individual stage1Crowd cap\n', '  function setMaxStage1AllocationPerInvestor(uint256 _cap) public onlyController {\n', '      maxStage1AllocationPerInvestor = _cap;\n', '  }\n', '\n', '  // set individual stage2Crowd cap\n', '  function setMaxStage2AllocationPerInvestor(uint256 _cap) public onlyController {\n', '      maxStage2AllocationPerInvestor = _cap;\n', '  }\n', '\n', '  // set individual stage3Crowd cap\n', '  function setMaxStage3AllocationPerInvestor(uint256 _cap) public onlyController {\n', '      maxStage3AllocationPerInvestor = _cap;\n', '  }\n', '\n', '  function setdteamVaultAddr1(address _newAddr) public onlyController {\n', '    require( _newAddr != 0x0 );\n', '    dteamVaultAddr1 = _newAddr;\n', '  }\n', '\n', '  function setdteamVaultAddr2(address _newAddr) public onlyController {\n', '    require( _newAddr != 0x0 );\n', '    dteamVaultAddr2 = _newAddr;\n', '  }\n', '\n', '  function setdteamVaultAddr3(address _newAddr) public onlyController {\n', '    require( _newAddr != 0x0 );\n', '    dteamVaultAddr3 = _newAddr;\n', '  }\n', '\n', '  function setdteamVaultAddr4(address _newAddr) public onlyController {\n', '    require( _newAddr != 0x0 );\n', '    dteamVaultAddr4 = _newAddr;\n', '  }\n', '\n', '  function setrteamVaultAddr(address _newAddr) public onlyController {\n', '    require( _newAddr != 0x0 );\n', '    rteamVaultAddr = _newAddr;\n', '  }\n', '\n', '  function setr2VaultAddr(address _newAddr) public onlyController {\n', '    require( _newAddr != 0x0 );\n', '    r2VaultAddr = _newAddr;\n', '  }\n', '\n', '  function setmmVaultAddr(address _newAddr) public onlyController {\n', '    require( _newAddr != 0x0 );\n', '    mmVaultAddr = _newAddr;\n', '  }\n', '\n', '  function settrusteeVaultAddr(address _newAddr) public onlyController {\n', '    require( _newAddr != 0x0 );\n', '    trusteeVaultAddr = _newAddr;\n', '  }\n', '\n', '  function setopVaultAddr(address _newAddr) public onlyController {\n', '    require( _newAddr != 0x0 );\n', '    opVaultAddr = _newAddr;\n', '  }\n', '\n', '  function toggleWhitelist(bool _isWhitelisted) public onlyController {\n', '    isWhiteListed = _isWhitelisted;\n', '  }\n', '\n', '  /// @notice This function handles receiving Ether in favor of a third party address\n', '  ///   we can use this function for buying tokens on behalf\n', '  /// @param _toAddr the address which will receive tokens\n', '  function proxy_contribution(address _toAddr) public payable {\n', '    require ( _toAddr != 0x0 );\n', '\n', '    process_contribution(_toAddr);\n', '  }\n', '\n', '\n', '  /// @notice This function handles receiving Ether\n', '  function () payable {\n', '      process_contribution(msg.sender); \n', '  }\n', '\n', '  /// This method can be used by the controller to extract mistakenly\n', '  ///  sent tokens to this contract.\n', '  function claimTokens(address _tokenAddr) public onlyController {\n', '\n', '      ERC20Basic some_token = ERC20Basic(_tokenAddr);\n', '      uint256 balance = some_token.balanceOf(this);\n', '      some_token.transfer(controller, balance);\n', '      ClaimedTokens(_tokenAddr, controller, balance);\n', '  }\n', '}']