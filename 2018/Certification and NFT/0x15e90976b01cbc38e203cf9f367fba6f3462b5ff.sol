['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title Eliptic curve signature operations\n', ' *\n', ' * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n', ' *\n', ' * TODO Remove this library once solidity supports passing a signature to ecrecover.\n', ' * See https://github.com/ethereum/solidity/issues/864\n', ' *\n', ' */\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using their signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig)\n', '    internal\n', '    pure\n', '    returns (address)\n', '  {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * toEthSignedMessageHash\n', '   * @dev prefix a bytes32 value with "\\x19Ethereum Signed Message:"\n', '   * @dev and hash the result\n', '   */\n', '  function toEthSignedMessageHash(bytes32 hash)\n', '    internal\n', '    pure\n', '    returns (bytes32)\n', '  {\n', '    // 32 is the length in bytes of hash,\n', '    // enforced by the type signature above\n', '    return keccak256(\n', '      "\\x19Ethereum Signed Message:\\n32",\n', '      hash\n', '    );\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/robonomics/XRT.sol\n', '\n', 'contract XRT is MintableToken, BurnableToken {\n', '    string public constant name     = "Robonomics Beta";\n', '    string public constant symbol   = "XRT";\n', '    uint   public constant decimals = 9;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 1000 * (10 ** uint256(decimals));\n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/robonomics/DutchAuction.sol\n', '\n', '/// @title Dutch auction contract - distribution of XRT tokens using an auction.\n', '/// @author Stefan George - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a3d0d7c6c5c2cd8dc4c6ccd1c4c6e3c0cccdd0c6cdd0dad08dcdc6d7">[email&#160;protected]</a>>\n', '/// @author Airalab - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="95e7f0e6f0f4e7f6fdd5f4fce7f4bbf9fcf3f0">[email&#160;protected]</a>> \n', 'contract DutchAuction {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event BidSubmission(address indexed sender, uint256 amount);\n', '\n', '    /*\n', '     *  Constants\n', '     */\n', '    uint constant public MAX_TOKENS_SOLD = 8000 * 10**9; // 8M XRT = 10M - 1M (Foundation) - 1M (Early investors base)\n', '    uint constant public WAITING_PERIOD = 0; // 1 days;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    XRT     public xrt;\n', '    address public ambix;\n', '    address public wallet;\n', '    address public owner;\n', '    uint public ceiling;\n', '    uint public priceFactor;\n', '    uint public startBlock;\n', '    uint public endTime;\n', '    uint public totalReceived;\n', '    uint public finalPrice;\n', '    mapping (address => uint) public bids;\n', '    Stages public stage;\n', '\n', '    /*\n', '     *  Enums\n', '     */\n', '    enum Stages {\n', '        AuctionDeployed,\n', '        AuctionSetUp,\n', '        AuctionStarted,\n', '        AuctionEnded,\n', '        TradingStarted\n', '    }\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier atStage(Stages _stage) {\n', '        // Contract on stage\n', '        require(stage == _stage);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        // Only owner is allowed to proceed\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isWallet() {\n', '        // Only wallet is allowed to proceed\n', '        require(msg.sender == wallet);\n', '        _;\n', '    }\n', '\n', '    modifier isValidPayload() {\n', '        require(msg.data.length == 4 || msg.data.length == 36);\n', '        _;\n', '    }\n', '\n', '    modifier timedTransitions() {\n', '        if (stage == Stages.AuctionStarted && calcTokenPrice() <= calcStopPrice())\n', '            finalizeAuction();\n', '        if (stage == Stages.AuctionEnded && now > endTime + WAITING_PERIOD)\n', '            stage = Stages.TradingStarted;\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Contract constructor function sets owner.\n', '    /// @param _wallet Multisig wallet.\n', '    /// @param _ceiling Auction ceiling.\n', '    /// @param _priceFactor Auction price factor.\n', '    constructor(address _wallet, uint _ceiling, uint _priceFactor)\n', '        public\n', '    {\n', '        require(_wallet != 0 && _ceiling != 0 && _priceFactor != 0);\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        ceiling = _ceiling;\n', '        priceFactor = _priceFactor;\n', '        stage = Stages.AuctionDeployed;\n', '    }\n', '\n', '    /// @dev Setup function sets external contracts&#39; addresses.\n', '    /// @param _xrt Robonomics token address.\n', '    /// @param _ambix Distillation cube address.\n', '    function setup(address _xrt, address _ambix)\n', '        public\n', '        isOwner\n', '        atStage(Stages.AuctionDeployed)\n', '    {\n', '        // Validate argument\n', '        require(_xrt != 0 && _ambix != 0);\n', '        xrt = XRT(_xrt);\n', '        ambix = _ambix;\n', '\n', '        // Validate token balance\n', '        require(xrt.balanceOf(this) == MAX_TOKENS_SOLD);\n', '\n', '        stage = Stages.AuctionSetUp;\n', '    }\n', '\n', '    /// @dev Starts auction and sets startBlock.\n', '    function startAuction()\n', '        public\n', '        isWallet\n', '        atStage(Stages.AuctionSetUp)\n', '    {\n', '        stage = Stages.AuctionStarted;\n', '        startBlock = block.number;\n', '    }\n', '\n', '    /// @dev Changes auction ceiling and start price factor before auction is started.\n', '    /// @param _ceiling Updated auction ceiling.\n', '    /// @param _priceFactor Updated start price factor.\n', '    function changeSettings(uint _ceiling, uint _priceFactor)\n', '        public\n', '        isWallet\n', '        atStage(Stages.AuctionSetUp)\n', '    {\n', '        ceiling = _ceiling;\n', '        priceFactor = _priceFactor;\n', '    }\n', '\n', '    /// @dev Calculates current token price.\n', '    /// @return Returns token price.\n', '    function calcCurrentTokenPrice()\n', '        public\n', '        timedTransitions\n', '        returns (uint)\n', '    {\n', '        if (stage == Stages.AuctionEnded || stage == Stages.TradingStarted)\n', '            return finalPrice;\n', '        return calcTokenPrice();\n', '    }\n', '\n', '    /// @dev Returns correct stage, even if a function with timedTransitions modifier has not yet been called yet.\n', '    /// @return Returns current auction stage.\n', '    function updateStage()\n', '        public\n', '        timedTransitions\n', '        returns (Stages)\n', '    {\n', '        return stage;\n', '    }\n', '\n', '    /// @dev Allows to send a bid to the auction.\n', '    /// @param receiver Bid will be assigned to this address if set.\n', '    function bid(address receiver)\n', '        public\n', '        payable\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.AuctionStarted)\n', '        returns (uint amount)\n', '    {\n', '        require(msg.value > 0);\n', '        amount = msg.value;\n', '\n', '        // If a bid is done on behalf of a user via ShapeShift, the receiver address is set.\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '\n', '        // Prevent that more than 90% of tokens are sold. Only relevant if cap not reached.\n', '        uint maxWei = MAX_TOKENS_SOLD * calcTokenPrice() / 10**9 - totalReceived;\n', '        uint maxWeiBasedOnTotalReceived = ceiling - totalReceived;\n', '        if (maxWeiBasedOnTotalReceived < maxWei)\n', '            maxWei = maxWeiBasedOnTotalReceived;\n', '\n', '        // Only invest maximum possible amount.\n', '        if (amount > maxWei) {\n', '            amount = maxWei;\n', '            // Send change back to receiver address. In case of a ShapeShift bid the user receives the change back directly.\n', '            receiver.transfer(msg.value - amount);\n', '        }\n', '\n', '        // Forward funding to ether wallet\n', '        wallet.transfer(amount);\n', '\n', '        bids[receiver] += amount;\n', '        totalReceived += amount;\n', '        BidSubmission(receiver, amount);\n', '\n', '        // Finalize auction when maxWei reached\n', '        if (amount == maxWei)\n', '            finalizeAuction();\n', '    }\n', '\n', '    /// @dev Claims tokens for bidder after auction.\n', '    /// @param receiver Tokens will be assigned to this address if set.\n', '    function claimTokens(address receiver)\n', '        public\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.TradingStarted)\n', '    {\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '        uint tokenCount = bids[receiver] * 10**9 / finalPrice;\n', '        bids[receiver] = 0;\n', '        require(xrt.transfer(receiver, tokenCount));\n', '    }\n', '\n', '    /// @dev Calculates stop price.\n', '    /// @return Returns stop price.\n', '    function calcStopPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return totalReceived * 10**9 / MAX_TOKENS_SOLD + 1;\n', '    }\n', '\n', '    /// @dev Calculates token price.\n', '    /// @return Returns token price.\n', '    function calcTokenPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return priceFactor * 10**18 / (block.number - startBlock + 7500) + 1;\n', '    }\n', '\n', '    /*\n', '     *  Private functions\n', '     */\n', '    function finalizeAuction()\n', '        private\n', '    {\n', '        stage = Stages.AuctionEnded;\n', '        finalPrice = totalReceived == ceiling ? calcTokenPrice() : calcStopPrice();\n', '        uint soldTokens = totalReceived * 10**9 / finalPrice;\n', '\n', '        if (totalReceived == ceiling) {\n', '            // Auction contract transfers all unsold tokens to Ambix contract\n', '            require(xrt.transfer(ambix, MAX_TOKENS_SOLD - soldTokens));\n', '        } else {\n', '            // Auction contract burn all unsold tokens\n', '            xrt.burn(MAX_TOKENS_SOLD - soldTokens);\n', '        }\n', '\n', '        endTime = now;\n', '    }\n', '}\n', '\n', '// File: ens/contracts/ENS.sol\n', '\n', 'interface ENS {\n', '\n', '    // Logged when the owner of a node assigns a new owner to a subnode.\n', '    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n', '\n', '    // Logged when the owner of a node transfers ownership to a new account.\n', '    event Transfer(bytes32 indexed node, address owner);\n', '\n', '    // Logged when the resolver for a node changes.\n', '    event NewResolver(bytes32 indexed node, address resolver);\n', '\n', '    // Logged when the TTL of a node changes\n', '    event NewTTL(bytes32 indexed node, uint64 ttl);\n', '\n', '\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\n', '    function setResolver(bytes32 node, address resolver) public;\n', '    function setOwner(bytes32 node, address owner) public;\n', '    function setTTL(bytes32 node, uint64 ttl) public;\n', '    function owner(bytes32 node) public view returns (address);\n', '    function resolver(bytes32 node) public view returns (address);\n', '    function ttl(bytes32 node) public view returns (uint64);\n', '\n', '}\n', '\n', '// File: ens/contracts/PublicResolver.sol\n', '\n', '/**\n', ' * A simple resolver anyone can use; only allows the owner of a node to set its\n', ' * address.\n', ' */\n', 'contract PublicResolver {\n', '\n', '    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n', '    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n', '    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n', '    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n', '    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n', '    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n', '    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n', '    bytes4 constant MULTIHASH_INTERFACE_ID = 0xe89401a1;\n', '\n', '    event AddrChanged(bytes32 indexed node, address a);\n', '    event ContentChanged(bytes32 indexed node, bytes32 hash);\n', '    event NameChanged(bytes32 indexed node, string name);\n', '    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n', '    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n', '    event TextChanged(bytes32 indexed node, string indexedKey, string key);\n', '    event MultihashChanged(bytes32 indexed node, bytes hash);\n', '\n', '    struct PublicKey {\n', '        bytes32 x;\n', '        bytes32 y;\n', '    }\n', '\n', '    struct Record {\n', '        address addr;\n', '        bytes32 content;\n', '        string name;\n', '        PublicKey pubkey;\n', '        mapping(string=>string) text;\n', '        mapping(uint256=>bytes) abis;\n', '        bytes multihash;\n', '    }\n', '\n', '    ENS ens;\n', '\n', '    mapping (bytes32 => Record) records;\n', '\n', '    modifier only_owner(bytes32 node) {\n', '        require(ens.owner(node) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor.\n', '     * @param ensAddr The ENS registrar contract.\n', '     */\n', '    function PublicResolver(ENS ensAddr) public {\n', '        ens = ensAddr;\n', '    }\n', '\n', '    /**\n', '     * Sets the address associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param addr The address to set.\n', '     */\n', '    function setAddr(bytes32 node, address addr) public only_owner(node) {\n', '        records[node].addr = addr;\n', '        AddrChanged(node, addr);\n', '    }\n', '\n', '    /**\n', '     * Sets the content hash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The node to update.\n', '     * @param hash The content hash to set\n', '     */\n', '    function setContent(bytes32 node, bytes32 hash) public only_owner(node) {\n', '        records[node].content = hash;\n', '        ContentChanged(node, hash);\n', '    }\n', '\n', '    /**\n', '     * Sets the multihash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param hash The multihash to set\n', '     */\n', '    function setMultihash(bytes32 node, bytes hash) public only_owner(node) {\n', '        records[node].multihash = hash;\n', '        MultihashChanged(node, hash);\n', '    }\n', '    \n', '    /**\n', '     * Sets the name associated with an ENS node, for reverse records.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param name The name to set.\n', '     */\n', '    function setName(bytes32 node, string name) public only_owner(node) {\n', '        records[node].name = name;\n', '        NameChanged(node, name);\n', '    }\n', '\n', '    /**\n', '     * Sets the ABI associated with an ENS node.\n', '     * Nodes may have one ABI of each content type. To remove an ABI, set it to\n', '     * the empty string.\n', '     * @param node The node to update.\n', '     * @param contentType The content type of the ABI\n', '     * @param data The ABI data.\n', '     */\n', '    function setABI(bytes32 node, uint256 contentType, bytes data) public only_owner(node) {\n', '        // Content types must be powers of 2\n', '        require(((contentType - 1) & contentType) == 0);\n', '        \n', '        records[node].abis[contentType] = data;\n', '        ABIChanged(node, contentType);\n', '    }\n', '    \n', '    /**\n', '     * Sets the SECP256k1 public key associated with an ENS node.\n', '     * @param node The ENS node to query\n', '     * @param x the X coordinate of the curve point for the public key.\n', '     * @param y the Y coordinate of the curve point for the public key.\n', '     */\n', '    function setPubkey(bytes32 node, bytes32 x, bytes32 y) public only_owner(node) {\n', '        records[node].pubkey = PublicKey(x, y);\n', '        PubkeyChanged(node, x, y);\n', '    }\n', '\n', '    /**\n', '     * Sets the text data associated with an ENS node and key.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param key The key to set.\n', '     * @param value The text data value to set.\n', '     */\n', '    function setText(bytes32 node, string key, string value) public only_owner(node) {\n', '        records[node].text[key] = value;\n', '        TextChanged(node, key, key);\n', '    }\n', '\n', '    /**\n', '     * Returns the text data associated with an ENS node and key.\n', '     * @param node The ENS node to query.\n', '     * @param key The text data key to query.\n', '     * @return The associated text data.\n', '     */\n', '    function text(bytes32 node, string key) public view returns (string) {\n', '        return records[node].text[key];\n', '    }\n', '\n', '    /**\n', '     * Returns the SECP256k1 public key associated with an ENS node.\n', '     * Defined in EIP 619.\n', '     * @param node The ENS node to query\n', '     * @return x, y the X and Y coordinates of the curve point for the public key.\n', '     */\n', '    function pubkey(bytes32 node) public view returns (bytes32 x, bytes32 y) {\n', '        return (records[node].pubkey.x, records[node].pubkey.y);\n', '    }\n', '\n', '    /**\n', '     * Returns the ABI associated with an ENS node.\n', '     * Defined in EIP205.\n', '     * @param node The ENS node to query\n', '     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n', '     * @return contentType The content type of the return value\n', '     * @return data The ABI data\n', '     */\n', '    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n', '        Record storage record = records[node];\n', '        for (contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n', '            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n', '                data = record.abis[contentType];\n', '                return;\n', '            }\n', '        }\n', '        contentType = 0;\n', '    }\n', '\n', '    /**\n', '     * Returns the name associated with an ENS node, for reverse records.\n', '     * Defined in EIP181.\n', '     * @param node The ENS node to query.\n', '     * @return The associated name.\n', '     */\n', '    function name(bytes32 node) public view returns (string) {\n', '        return records[node].name;\n', '    }\n', '\n', '    /**\n', '     * Returns the content hash associated with an ENS node.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The ENS node to query.\n', '     * @return The associated content hash.\n', '     */\n', '    function content(bytes32 node) public view returns (bytes32) {\n', '        return records[node].content;\n', '    }\n', '\n', '    /**\n', '     * Returns the multihash associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated multihash.\n', '     */\n', '    function multihash(bytes32 node) public view returns (bytes) {\n', '        return records[node].multihash;\n', '    }\n', '\n', '    /**\n', '     * Returns the address associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated address.\n', '     */\n', '    function addr(bytes32 node) public view returns (address) {\n', '        return records[node].addr;\n', '    }\n', '\n', '    /**\n', '     * Returns true if the resolver implements the interface specified by the provided hash.\n', '     * @param interfaceID The ID of the interface to check for.\n', '     * @return True if the contract implements the requested interface.\n', '     */\n', '    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n', '        return interfaceID == ADDR_INTERFACE_ID ||\n', '        interfaceID == CONTENT_INTERFACE_ID ||\n', '        interfaceID == NAME_INTERFACE_ID ||\n', '        interfaceID == ABI_INTERFACE_ID ||\n', '        interfaceID == PUBKEY_INTERFACE_ID ||\n', '        interfaceID == TEXT_INTERFACE_ID ||\n', '        interfaceID == MULTIHASH_INTERFACE_ID ||\n', '        interfaceID == INTERFACE_META_ID;\n', '    }\n', '}\n', '\n', 'contract LightContract {\n', '    /**\n', '     * @dev Shared code smart contract \n', '     */\n', '    address lib;\n', '\n', '    constructor(address _library) public {\n', '        lib = _library;\n', '    }\n', '\n', '    function() public {\n', '        require(lib.delegatecall(msg.data));\n', '    }\n', '}\n', '\n', 'contract LighthouseABI {\n', '    function refill(uint256 _value) external;\n', '    function withdraw(uint256 _value) external;\n', '    function to(address _to, bytes _data) external;\n', '    function () external;\n', '}\n', '\n', 'contract LighthouseAPI {\n', '    address[] public members;\n', '    mapping(address => uint256) indexOf;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    uint256 public minimalFreeze;\n', '    uint256 public timeoutBlocks;\n', '\n', '    LiabilityFactory public factory;\n', '    XRT              public xrt;\n', '\n', '    uint256 public keepaliveBlock = 0;\n', '    uint256 public marker = 0;\n', '    uint256 public quota = 0;\n', '\n', '    function quotaOf(address _member) public view returns (uint256)\n', '    { return balances[_member] / minimalFreeze; }\n', '}\n', '\n', 'contract LighthouseLib is LighthouseAPI, LighthouseABI {\n', '\n', '    function refill(uint256 _value) external {\n', '        require(xrt.transferFrom(msg.sender, this, _value));\n', '        require(_value >= minimalFreeze);\n', '\n', '        if (balances[msg.sender] == 0) {\n', '            indexOf[msg.sender] = members.length;\n', '            members.push(msg.sender);\n', '        }\n', '        balances[msg.sender] += _value;\n', '    }\n', '\n', '    function withdraw(uint256 _value) external {\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        balances[msg.sender] -= _value;\n', '        require(xrt.transfer(msg.sender, _value));\n', '\n', '        // Drop member if quota go to zero\n', '        if (quotaOf(msg.sender) == 0) {\n', '            uint256 balance = balances[msg.sender];\n', '            balances[msg.sender] = 0;\n', '            require(xrt.transfer(msg.sender, balance)); \n', '            \n', '            uint256 senderIndex = indexOf[msg.sender];\n', '            uint256 lastIndex = members.length - 1;\n', '            if (senderIndex < lastIndex)\n', '                members[senderIndex] = members[lastIndex];\n', '            members.length -= 1;\n', '        }\n', '    }\n', '\n', '    function nextMember() internal\n', '    { marker = (marker + 1) % members.length; }\n', '\n', '    modifier quoted {\n', '        if (quota == 0) {\n', '            // Step over marker\n', '            nextMember();\n', '\n', '            // Allocate new quota\n', '            quota = quotaOf(members[marker]);\n', '        }\n', '\n', '        // Consume one quota for transaction sending\n', '        assert(quota > 0);\n', '        quota -= 1;\n', '\n', '        _;\n', '    }\n', '\n', '    modifier keepalive {\n', '        if (timeoutBlocks < block.number - keepaliveBlock) {\n', '            // Search keepalive sender\n', '            while (msg.sender != members[marker])\n', '                nextMember();\n', '\n', '            // Allocate new quota\n', '            quota = quotaOf(members[marker]);\n', '        }\n', '\n', '        _;\n', '    }\n', '\n', '    modifier member {\n', '        // Zero members guard\n', '        require(members.length > 0);\n', '\n', '        // Only member with marker can to send transaction\n', '        require(msg.sender == members[marker]);\n', '\n', '        // Store transaction sending block\n', '        keepaliveBlock = block.number;\n', '\n', '        _;\n', '    }\n', '\n', '    function to(address _to, bytes _data) external keepalive quoted member {\n', '        require(factory.gasUtilizing(_to) > 0);\n', '        require(_to.call(_data));\n', '    }\n', '\n', '    function () external keepalive quoted member\n', '    { require(factory.call(msg.data)); }\n', '}\n', '\n', 'contract Lighthouse is LighthouseAPI, LightContract {\n', '    constructor(\n', '        address _lib,\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks\n', '    ) \n', '        public\n', '        LightContract(_lib)\n', '    {\n', '        minimalFreeze = _minimalFreeze;\n', '        timeoutBlocks = _timeoutBlocks;\n', '        factory = LiabilityFactory(msg.sender);\n', '        xrt = factory.xrt();\n', '    }\n', '}\n', '\n', 'contract RobotLiabilityABI {\n', '    function ask(\n', '        bytes   _model,\n', '        bytes   _objective,\n', '\n', '        ERC20   _token,\n', '        uint256 _cost,\n', '\n', '        address _validator,\n', '        uint256 _validator_fee,\n', '\n', '        uint256 _deadline,\n', '        bytes32 _nonce,\n', '        bytes   _signature\n', '    ) external returns (bool);\n', '\n', '    function bid(\n', '        bytes   _model,\n', '        bytes   _objective,\n', '        \n', '        ERC20   _token,\n', '        uint256 _cost,\n', '\n', '        uint256 _lighthouse_fee,\n', '\n', '        uint256 _deadline,\n', '        bytes32 _nonce,\n', '        bytes   _signature\n', '    ) external returns (bool);\n', '\n', '    function finalize(\n', '        bytes _result,\n', '        bytes _signature,\n', '        bool  _agree\n', '    ) external returns (bool);\n', '}\n', '\n', 'contract RobotLiabilityAPI {\n', '    bytes   public model;\n', '    bytes   public objective;\n', '    bytes   public result;\n', '\n', '    ERC20   public token;\n', '    uint256 public cost;\n', '    uint256 public lighthouseFee;\n', '    uint256 public validatorFee;\n', '\n', '    bytes32 public askHash;\n', '    bytes32 public bidHash;\n', '\n', '    address public promisor;\n', '    address public promisee;\n', '    address public validator;\n', '\n', '    bool    public isConfirmed;\n', '    bool    public isFinalized;\n', '\n', '    LiabilityFactory public factory;\n', '}\n', '\n', 'contract RobotLiabilityLib is RobotLiabilityABI\n', '                            , RobotLiabilityAPI {\n', '    using ECRecovery for bytes32;\n', '\n', '    function ask(\n', '        bytes   _model,\n', '        bytes   _objective,\n', '\n', '        ERC20   _token,\n', '        uint256 _cost,\n', '\n', '        address _validator,\n', '        uint256 _validator_fee,\n', '\n', '        uint256 _deadline,\n', '        bytes32 _nonce,\n', '        bytes   _signature\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(msg.sender == address(factory));\n', '        require(block.number < _deadline);\n', '\n', '        model        = _model;\n', '        objective    = _objective;\n', '        token        = _token;\n', '        cost         = _cost;\n', '        validator    = _validator;\n', '        validatorFee = _validator_fee;\n', '\n', '        askHash = keccak256(abi.encodePacked(\n', '            _model\n', '          , _objective\n', '          , _token\n', '          , _cost\n', '          , _validator\n', '          , _validator_fee\n', '          , _deadline\n', '          , _nonce\n', '        ));\n', '\n', '        promisee = askHash\n', '            .toEthSignedMessageHash()\n', '            .recover(_signature);\n', '        return true;\n', '    }\n', '\n', '    function bid(\n', '        bytes   _model,\n', '        bytes   _objective,\n', '        \n', '        ERC20   _token,\n', '        uint256 _cost,\n', '\n', '        uint256 _lighthouse_fee,\n', '\n', '        uint256 _deadline,\n', '        bytes32 _nonce,\n', '        bytes   _signature\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(msg.sender == address(factory));\n', '        require(block.number < _deadline);\n', '        require(keccak256(model) == keccak256(_model));\n', '        require(keccak256(objective) == keccak256(_objective));\n', '        require(_token == token);\n', '        require(_cost == cost);\n', '\n', '        lighthouseFee = _lighthouse_fee;\n', '\n', '        bidHash = keccak256(abi.encodePacked(\n', '            _model\n', '          , _objective\n', '          , _token\n', '          , _cost\n', '          , _lighthouse_fee\n', '          , _deadline\n', '          , _nonce\n', '        ));\n', '\n', '        promisor = bidHash\n', '            .toEthSignedMessageHash()\n', '            .recover(_signature);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize this liability\n', '     * @param _result Result data hash\n', '     * @param _agree Validation network confirmation\n', '     * @param _signature Result sender signature\n', '     */\n', '    function finalize(\n', '        bytes _result,\n', '        bytes _signature,\n', '        bool  _agree\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        uint256 gasinit = gasleft();\n', '        require(!isFinalized);\n', '\n', '        address resultSender = keccak256(abi.encodePacked(this, _result))\n', '            .toEthSignedMessageHash()\n', '            .recover(_signature);\n', '        require(resultSender == promisor);\n', '\n', '        result = _result;\n', '        isFinalized = true;\n', '\n', '        if (validator == 0) {\n', '            require(factory.isLighthouse(msg.sender));\n', '            require(token.transfer(promisor, cost));\n', '        } else {\n', '            require(msg.sender == validator);\n', '\n', '            isConfirmed = _agree;\n', '            if (isConfirmed)\n', '                require(token.transfer(promisor, cost));\n', '            else\n', '                require(token.transfer(promisee, cost));\n', '\n', '            if (validatorFee > 0)\n', '                require(factory.xrt().transfer(validator, validatorFee));\n', '        }\n', '\n', '        require(factory.liabilityFinalized(gasinit));\n', '        return true;\n', '    }\n', '}\n', '\n', '// Standard robot liability light contract\n', 'contract RobotLiability is RobotLiabilityAPI, LightContract {\n', '    constructor(address _lib) public LightContract(_lib)\n', '    { factory = LiabilityFactory(msg.sender); }\n', '}\n', '\n', 'contract LiabilityFactory {\n', '    constructor(\n', '        address _robot_liability_lib,\n', '        address _lighthouse_lib,\n', '        DutchAuction _auction,\n', '        XRT _xrt,\n', '        ENS _ens\n', '    ) public {\n', '        robotLiabilityLib = _robot_liability_lib;\n', '        lighthouseLib = _lighthouse_lib;\n', '        auction = _auction;\n', '        xrt = _xrt;\n', '        ens = _ens;\n', '    }\n', '\n', '    /**\n', '     * @dev New liability created \n', '     */\n', '    event NewLiability(address indexed liability);\n', '\n', '    /**\n', '     * @dev New lighthouse created\n', '     */\n', '    event NewLighthouse(address indexed lighthouse, string name);\n', '\n', '    /**\n', '     * @dev Robonomics dutch auction contract\n', '     */\n', '    DutchAuction public auction;\n', '\n', '    /**\n', '     * @dev Robonomics network protocol token\n', '     */\n', '    XRT public xrt;\n', '\n', '    /**\n', '     * @dev Ethereum name system\n', '     */\n', '    ENS public ens;\n', '\n', '    /**\n', '     * @dev Total GAS utilized by Robonomics network\n', '     */\n', '    uint256 public totalGasUtilizing = 0;\n', '\n', '    /**\n', '     * @dev GAS utilized by liability contracts\n', '     */\n', '    mapping(address => uint256) public gasUtilizing;\n', '\n', '    /**\n', '     * @dev The count of utilized gas for switch to next epoch \n', '     */\n', '    uint256 public constant gasEpoch = 347 * 10**10;\n', '\n', '    /**\n', '     * @dev Weighted average gasprice\n', '     */\n', '    uint256 public constant gasPrice = 10 * 10**9;\n', '\n', '    /**\n', '     * @dev Used market orders accounting\n', '     */\n', '    mapping(bytes32 => bool) public usedHash;\n', '\n', '    /**\n', '     * @dev Lighthouse accounting\n', '     */\n', '    mapping(address => bool) public isLighthouse;\n', '\n', '    /**\n', '     * @dev Robot liability shared code smart contract\n', '     */\n', '    address public robotLiabilityLib;\n', '\n', '    /**\n', '     * @dev Lightouse shared code smart contract\n', '     */\n', '    address public lighthouseLib;\n', '\n', '    /**\n', '     * @dev XRT emission value for utilized gas\n', '     */\n', '    function wnFromGas(uint256 _gas) public view returns (uint256) {\n', '        // Just return wn=gas when auction isn&#39;t finish\n', '        if (auction.finalPrice() == 0)\n', '            return _gas;\n', '\n', '        // Current gas utilization epoch\n', '        uint256 epoch = totalGasUtilizing / gasEpoch;\n', '\n', '        // XRT emission with addition coefficient by gas utilzation epoch\n', '        uint256 wn = _gas * 10**9 * gasPrice * 2**epoch / 3**epoch / auction.finalPrice();\n', '\n', '        // Check to not permit emission decrease below wn=gas\n', '        return wn < _gas ? _gas : wn;\n', '    }\n', '\n', '    /**\n', '     * @dev Only lighthouse guard\n', '     */\n', '    modifier onlyLighthouse {\n', '        require(isLighthouse[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Parameter can be used only once\n', '     * @param _hash Single usage hash\n', '     */\n', '    function usedHashGuard(bytes32 _hash) internal {\n', '        require(!usedHash[_hash]);\n', '        usedHash[_hash] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Create robot liability smart contract\n', '     * @param _ask ABI-encoded ASK order message \n', '     * @param _bid ABI-encoded BID order message \n', '     */\n', '    function createLiability(\n', '        bytes _ask,\n', '        bytes _bid\n', '    )\n', '        external \n', '        onlyLighthouse\n', '        returns (RobotLiability liability)\n', '    {\n', '        // Store in memory available gas\n', '        uint256 gasinit = gasleft();\n', '\n', '        // Create liability\n', '        liability = new RobotLiability(robotLiabilityLib);\n', '        emit NewLiability(liability);\n', '\n', '        // Parse messages\n', '        require(liability.call(abi.encodePacked(bytes4(0x82fbaa25), _ask))); // liability.ask(...)\n', '        usedHashGuard(liability.askHash());\n', '\n', '        require(liability.call(abi.encodePacked(bytes4(0x66193359), _bid))); // liability.bid(...)\n', '        usedHashGuard(liability.bidHash());\n', '\n', '        // Transfer lighthouse fee to lighthouse worker directly\n', '        require(xrt.transferFrom(liability.promisor(),\n', '                                 tx.origin,\n', '                                 liability.lighthouseFee()));\n', '\n', '        // Transfer liability security and hold on contract\n', '        ERC20 token = liability.token();\n', '        require(token.transferFrom(liability.promisee(),\n', '                                   liability,\n', '                                   liability.cost()));\n', '\n', '        // Transfer validator fee and hold on contract\n', '        if (address(liability.validator()) != 0 && liability.validatorFee() > 0)\n', '            require(xrt.transferFrom(liability.promisee(),\n', '                                     liability,\n', '                                     liability.validatorFee()));\n', '\n', '        // Accounting gas usage of transaction\n', '        uint256 gas = gasinit - gasleft() + 110525; // Including observation error\n', '        totalGasUtilizing       += gas;\n', '        gasUtilizing[liability] += gas;\n', '     }\n', '\n', '    /**\n', '     * @dev Create lighthouse smart contract\n', '     * @param _minimalFreeze Minimal freeze value of XRT token\n', '     * @param _timeoutBlocks Max time of lighthouse silence in blocks\n', '     * @param _name Lighthouse subdomain,\n', '     *              example: for &#39;my-name&#39; will created &#39;my-name.lighthouse.1.robonomics.eth&#39; domain\n', '     */\n', '    function createLighthouse(\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks,\n', '        string  _name\n', '    )\n', '        external\n', '        returns (address lighthouse)\n', '    {\n', '        bytes32 lighthouseNode\n', '            // lighthouse.1.robonomics.eth\n', '            = 0x3662a5d633e9a5ca4b4bd25284e1b343c15a92b5347feb9b965a2b1ef3e1ea1a;\n', '\n', '        // Name reservation check\n', '        bytes32 subnode = keccak256(abi.encodePacked(lighthouseNode, keccak256(_name)));\n', '        require(ens.resolver(subnode) == 0);\n', '\n', '        // Create lighthouse\n', '        lighthouse = new Lighthouse(lighthouseLib, _minimalFreeze, _timeoutBlocks);\n', '        emit NewLighthouse(lighthouse, _name);\n', '        isLighthouse[lighthouse] = true;\n', '\n', '        // Register subnode\n', '        ens.setSubnodeOwner(lighthouseNode, keccak256(_name), this);\n', '\n', '        // Register lighthouse address\n', '        PublicResolver resolver = PublicResolver(ens.resolver(lighthouseNode));\n', '        ens.setResolver(subnode, resolver);\n', '        resolver.setAddr(subnode, lighthouse);\n', '    }\n', '\n', '    /**\n', '     * @dev Is called whan after liability finalization\n', '     * @param _gas Liability finalization gas expenses\n', '     */\n', '    function liabilityFinalized(\n', '        uint256 _gas\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(gasUtilizing[msg.sender] > 0);\n', '\n', '        uint256 gas = _gas - gasleft();\n', '        totalGasUtilizing        += gas;\n', '        gasUtilizing[msg.sender] += gas;\n', '        require(xrt.mint(tx.origin, wnFromGas(gasUtilizing[msg.sender])));\n', '        return true;\n', '    }\n', '}']
['pragma solidity 0.4.24;\n', '\n', '/**\n', ' * @title Eliptic curve signature operations\n', ' *\n', ' * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d\n', ' *\n', ' * TODO Remove this library once solidity supports passing a signature to ecrecover.\n', ' * See https://github.com/ethereum/solidity/issues/864\n', ' *\n', ' */\n', '\n', 'library ECRecovery {\n', '\n', '  /**\n', '   * @dev Recover signer address from a message by using their signature\n', '   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '   * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '   */\n', '  function recover(bytes32 hash, bytes sig)\n', '    internal\n', '    pure\n', '    returns (address)\n', '  {\n', '    bytes32 r;\n', '    bytes32 s;\n', '    uint8 v;\n', '\n', '    // Check the signature length\n', '    if (sig.length != 65) {\n', '      return (address(0));\n', '    }\n', '\n', '    // Divide the signature in r, s and v variables\n', '    // ecrecover takes the signature parameters, and the only way to get them\n', '    // currently is to use assembly.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      r := mload(add(sig, 32))\n', '      s := mload(add(sig, 64))\n', '      v := byte(0, mload(add(sig, 96)))\n', '    }\n', '\n', '    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '    if (v < 27) {\n', '      v += 27;\n', '    }\n', '\n', '    // If the version is correct return the signer address\n', '    if (v != 27 && v != 28) {\n', '      return (address(0));\n', '    } else {\n', '      // solium-disable-next-line arg-overflow\n', '      return ecrecover(hash, v, r, s);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * toEthSignedMessageHash\n', '   * @dev prefix a bytes32 value with "\\x19Ethereum Signed Message:"\n', '   * @dev and hash the result\n', '   */\n', '  function toEthSignedMessageHash(bytes32 hash)\n', '    internal\n', '    pure\n', '    returns (bytes32)\n', '  {\n', '    // 32 is the length in bytes of hash,\n', '    // enforced by the type signature above\n', '    return keccak256(\n', '      "\\x19Ethereum Signed Message:\\n32",\n', '      hash\n', '    );\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) internal balances;\n', '\n', '  uint256 internal totalSupply_;\n', '\n', '  /**\n', '  * @dev Total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_value <= balances[msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * https://github.com/ethereum/EIPs/issues/20\n', ' * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '    require(_to != address(0));\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint256 _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint256 _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint256 oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue >= oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    public\n', '    hasMintPermission\n', '    canMint\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() public onlyOwner canMint returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: contracts/robonomics/XRT.sol\n', '\n', 'contract XRT is MintableToken, BurnableToken {\n', '    string public constant name     = "Robonomics Beta";\n', '    string public constant symbol   = "XRT";\n', '    uint   public constant decimals = 9;\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 1000 * (10 ** uint256(decimals));\n', '\n', '    constructor() public {\n', '        totalSupply_ = INITIAL_SUPPLY;\n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '        emit Transfer(0x0, msg.sender, INITIAL_SUPPLY);\n', '    }\n', '}\n', '\n', '\n', '// File: contracts/robonomics/DutchAuction.sol\n', '\n', '/// @title Dutch auction contract - distribution of XRT tokens using an auction.\n', '/// @author Stefan George - <stefan.george@consensys.net>\n', '/// @author Airalab - <research@aira.life> \n', 'contract DutchAuction {\n', '\n', '    /*\n', '     *  Events\n', '     */\n', '    event BidSubmission(address indexed sender, uint256 amount);\n', '\n', '    /*\n', '     *  Constants\n', '     */\n', '    uint constant public MAX_TOKENS_SOLD = 8000 * 10**9; // 8M XRT = 10M - 1M (Foundation) - 1M (Early investors base)\n', '    uint constant public WAITING_PERIOD = 0; // 1 days;\n', '\n', '    /*\n', '     *  Storage\n', '     */\n', '    XRT     public xrt;\n', '    address public ambix;\n', '    address public wallet;\n', '    address public owner;\n', '    uint public ceiling;\n', '    uint public priceFactor;\n', '    uint public startBlock;\n', '    uint public endTime;\n', '    uint public totalReceived;\n', '    uint public finalPrice;\n', '    mapping (address => uint) public bids;\n', '    Stages public stage;\n', '\n', '    /*\n', '     *  Enums\n', '     */\n', '    enum Stages {\n', '        AuctionDeployed,\n', '        AuctionSetUp,\n', '        AuctionStarted,\n', '        AuctionEnded,\n', '        TradingStarted\n', '    }\n', '\n', '    /*\n', '     *  Modifiers\n', '     */\n', '    modifier atStage(Stages _stage) {\n', '        // Contract on stage\n', '        require(stage == _stage);\n', '        _;\n', '    }\n', '\n', '    modifier isOwner() {\n', '        // Only owner is allowed to proceed\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier isWallet() {\n', '        // Only wallet is allowed to proceed\n', '        require(msg.sender == wallet);\n', '        _;\n', '    }\n', '\n', '    modifier isValidPayload() {\n', '        require(msg.data.length == 4 || msg.data.length == 36);\n', '        _;\n', '    }\n', '\n', '    modifier timedTransitions() {\n', '        if (stage == Stages.AuctionStarted && calcTokenPrice() <= calcStopPrice())\n', '            finalizeAuction();\n', '        if (stage == Stages.AuctionEnded && now > endTime + WAITING_PERIOD)\n', '            stage = Stages.TradingStarted;\n', '        _;\n', '    }\n', '\n', '    /*\n', '     *  Public functions\n', '     */\n', '    /// @dev Contract constructor function sets owner.\n', '    /// @param _wallet Multisig wallet.\n', '    /// @param _ceiling Auction ceiling.\n', '    /// @param _priceFactor Auction price factor.\n', '    constructor(address _wallet, uint _ceiling, uint _priceFactor)\n', '        public\n', '    {\n', '        require(_wallet != 0 && _ceiling != 0 && _priceFactor != 0);\n', '        owner = msg.sender;\n', '        wallet = _wallet;\n', '        ceiling = _ceiling;\n', '        priceFactor = _priceFactor;\n', '        stage = Stages.AuctionDeployed;\n', '    }\n', '\n', "    /// @dev Setup function sets external contracts' addresses.\n", '    /// @param _xrt Robonomics token address.\n', '    /// @param _ambix Distillation cube address.\n', '    function setup(address _xrt, address _ambix)\n', '        public\n', '        isOwner\n', '        atStage(Stages.AuctionDeployed)\n', '    {\n', '        // Validate argument\n', '        require(_xrt != 0 && _ambix != 0);\n', '        xrt = XRT(_xrt);\n', '        ambix = _ambix;\n', '\n', '        // Validate token balance\n', '        require(xrt.balanceOf(this) == MAX_TOKENS_SOLD);\n', '\n', '        stage = Stages.AuctionSetUp;\n', '    }\n', '\n', '    /// @dev Starts auction and sets startBlock.\n', '    function startAuction()\n', '        public\n', '        isWallet\n', '        atStage(Stages.AuctionSetUp)\n', '    {\n', '        stage = Stages.AuctionStarted;\n', '        startBlock = block.number;\n', '    }\n', '\n', '    /// @dev Changes auction ceiling and start price factor before auction is started.\n', '    /// @param _ceiling Updated auction ceiling.\n', '    /// @param _priceFactor Updated start price factor.\n', '    function changeSettings(uint _ceiling, uint _priceFactor)\n', '        public\n', '        isWallet\n', '        atStage(Stages.AuctionSetUp)\n', '    {\n', '        ceiling = _ceiling;\n', '        priceFactor = _priceFactor;\n', '    }\n', '\n', '    /// @dev Calculates current token price.\n', '    /// @return Returns token price.\n', '    function calcCurrentTokenPrice()\n', '        public\n', '        timedTransitions\n', '        returns (uint)\n', '    {\n', '        if (stage == Stages.AuctionEnded || stage == Stages.TradingStarted)\n', '            return finalPrice;\n', '        return calcTokenPrice();\n', '    }\n', '\n', '    /// @dev Returns correct stage, even if a function with timedTransitions modifier has not yet been called yet.\n', '    /// @return Returns current auction stage.\n', '    function updateStage()\n', '        public\n', '        timedTransitions\n', '        returns (Stages)\n', '    {\n', '        return stage;\n', '    }\n', '\n', '    /// @dev Allows to send a bid to the auction.\n', '    /// @param receiver Bid will be assigned to this address if set.\n', '    function bid(address receiver)\n', '        public\n', '        payable\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.AuctionStarted)\n', '        returns (uint amount)\n', '    {\n', '        require(msg.value > 0);\n', '        amount = msg.value;\n', '\n', '        // If a bid is done on behalf of a user via ShapeShift, the receiver address is set.\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '\n', '        // Prevent that more than 90% of tokens are sold. Only relevant if cap not reached.\n', '        uint maxWei = MAX_TOKENS_SOLD * calcTokenPrice() / 10**9 - totalReceived;\n', '        uint maxWeiBasedOnTotalReceived = ceiling - totalReceived;\n', '        if (maxWeiBasedOnTotalReceived < maxWei)\n', '            maxWei = maxWeiBasedOnTotalReceived;\n', '\n', '        // Only invest maximum possible amount.\n', '        if (amount > maxWei) {\n', '            amount = maxWei;\n', '            // Send change back to receiver address. In case of a ShapeShift bid the user receives the change back directly.\n', '            receiver.transfer(msg.value - amount);\n', '        }\n', '\n', '        // Forward funding to ether wallet\n', '        wallet.transfer(amount);\n', '\n', '        bids[receiver] += amount;\n', '        totalReceived += amount;\n', '        BidSubmission(receiver, amount);\n', '\n', '        // Finalize auction when maxWei reached\n', '        if (amount == maxWei)\n', '            finalizeAuction();\n', '    }\n', '\n', '    /// @dev Claims tokens for bidder after auction.\n', '    /// @param receiver Tokens will be assigned to this address if set.\n', '    function claimTokens(address receiver)\n', '        public\n', '        isValidPayload\n', '        timedTransitions\n', '        atStage(Stages.TradingStarted)\n', '    {\n', '        if (receiver == 0)\n', '            receiver = msg.sender;\n', '        uint tokenCount = bids[receiver] * 10**9 / finalPrice;\n', '        bids[receiver] = 0;\n', '        require(xrt.transfer(receiver, tokenCount));\n', '    }\n', '\n', '    /// @dev Calculates stop price.\n', '    /// @return Returns stop price.\n', '    function calcStopPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return totalReceived * 10**9 / MAX_TOKENS_SOLD + 1;\n', '    }\n', '\n', '    /// @dev Calculates token price.\n', '    /// @return Returns token price.\n', '    function calcTokenPrice()\n', '        view\n', '        public\n', '        returns (uint)\n', '    {\n', '        return priceFactor * 10**18 / (block.number - startBlock + 7500) + 1;\n', '    }\n', '\n', '    /*\n', '     *  Private functions\n', '     */\n', '    function finalizeAuction()\n', '        private\n', '    {\n', '        stage = Stages.AuctionEnded;\n', '        finalPrice = totalReceived == ceiling ? calcTokenPrice() : calcStopPrice();\n', '        uint soldTokens = totalReceived * 10**9 / finalPrice;\n', '\n', '        if (totalReceived == ceiling) {\n', '            // Auction contract transfers all unsold tokens to Ambix contract\n', '            require(xrt.transfer(ambix, MAX_TOKENS_SOLD - soldTokens));\n', '        } else {\n', '            // Auction contract burn all unsold tokens\n', '            xrt.burn(MAX_TOKENS_SOLD - soldTokens);\n', '        }\n', '\n', '        endTime = now;\n', '    }\n', '}\n', '\n', '// File: ens/contracts/ENS.sol\n', '\n', 'interface ENS {\n', '\n', '    // Logged when the owner of a node assigns a new owner to a subnode.\n', '    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n', '\n', '    // Logged when the owner of a node transfers ownership to a new account.\n', '    event Transfer(bytes32 indexed node, address owner);\n', '\n', '    // Logged when the resolver for a node changes.\n', '    event NewResolver(bytes32 indexed node, address resolver);\n', '\n', '    // Logged when the TTL of a node changes\n', '    event NewTTL(bytes32 indexed node, uint64 ttl);\n', '\n', '\n', '    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) public;\n', '    function setResolver(bytes32 node, address resolver) public;\n', '    function setOwner(bytes32 node, address owner) public;\n', '    function setTTL(bytes32 node, uint64 ttl) public;\n', '    function owner(bytes32 node) public view returns (address);\n', '    function resolver(bytes32 node) public view returns (address);\n', '    function ttl(bytes32 node) public view returns (uint64);\n', '\n', '}\n', '\n', '// File: ens/contracts/PublicResolver.sol\n', '\n', '/**\n', ' * A simple resolver anyone can use; only allows the owner of a node to set its\n', ' * address.\n', ' */\n', 'contract PublicResolver {\n', '\n', '    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\n', '    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\n', '    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\n', '    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\n', '    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\n', '    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\n', '    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\n', '    bytes4 constant MULTIHASH_INTERFACE_ID = 0xe89401a1;\n', '\n', '    event AddrChanged(bytes32 indexed node, address a);\n', '    event ContentChanged(bytes32 indexed node, bytes32 hash);\n', '    event NameChanged(bytes32 indexed node, string name);\n', '    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\n', '    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\n', '    event TextChanged(bytes32 indexed node, string indexedKey, string key);\n', '    event MultihashChanged(bytes32 indexed node, bytes hash);\n', '\n', '    struct PublicKey {\n', '        bytes32 x;\n', '        bytes32 y;\n', '    }\n', '\n', '    struct Record {\n', '        address addr;\n', '        bytes32 content;\n', '        string name;\n', '        PublicKey pubkey;\n', '        mapping(string=>string) text;\n', '        mapping(uint256=>bytes) abis;\n', '        bytes multihash;\n', '    }\n', '\n', '    ENS ens;\n', '\n', '    mapping (bytes32 => Record) records;\n', '\n', '    modifier only_owner(bytes32 node) {\n', '        require(ens.owner(node) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Constructor.\n', '     * @param ensAddr The ENS registrar contract.\n', '     */\n', '    function PublicResolver(ENS ensAddr) public {\n', '        ens = ensAddr;\n', '    }\n', '\n', '    /**\n', '     * Sets the address associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param addr The address to set.\n', '     */\n', '    function setAddr(bytes32 node, address addr) public only_owner(node) {\n', '        records[node].addr = addr;\n', '        AddrChanged(node, addr);\n', '    }\n', '\n', '    /**\n', '     * Sets the content hash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The node to update.\n', '     * @param hash The content hash to set\n', '     */\n', '    function setContent(bytes32 node, bytes32 hash) public only_owner(node) {\n', '        records[node].content = hash;\n', '        ContentChanged(node, hash);\n', '    }\n', '\n', '    /**\n', '     * Sets the multihash associated with an ENS node.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param hash The multihash to set\n', '     */\n', '    function setMultihash(bytes32 node, bytes hash) public only_owner(node) {\n', '        records[node].multihash = hash;\n', '        MultihashChanged(node, hash);\n', '    }\n', '    \n', '    /**\n', '     * Sets the name associated with an ENS node, for reverse records.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param name The name to set.\n', '     */\n', '    function setName(bytes32 node, string name) public only_owner(node) {\n', '        records[node].name = name;\n', '        NameChanged(node, name);\n', '    }\n', '\n', '    /**\n', '     * Sets the ABI associated with an ENS node.\n', '     * Nodes may have one ABI of each content type. To remove an ABI, set it to\n', '     * the empty string.\n', '     * @param node The node to update.\n', '     * @param contentType The content type of the ABI\n', '     * @param data The ABI data.\n', '     */\n', '    function setABI(bytes32 node, uint256 contentType, bytes data) public only_owner(node) {\n', '        // Content types must be powers of 2\n', '        require(((contentType - 1) & contentType) == 0);\n', '        \n', '        records[node].abis[contentType] = data;\n', '        ABIChanged(node, contentType);\n', '    }\n', '    \n', '    /**\n', '     * Sets the SECP256k1 public key associated with an ENS node.\n', '     * @param node The ENS node to query\n', '     * @param x the X coordinate of the curve point for the public key.\n', '     * @param y the Y coordinate of the curve point for the public key.\n', '     */\n', '    function setPubkey(bytes32 node, bytes32 x, bytes32 y) public only_owner(node) {\n', '        records[node].pubkey = PublicKey(x, y);\n', '        PubkeyChanged(node, x, y);\n', '    }\n', '\n', '    /**\n', '     * Sets the text data associated with an ENS node and key.\n', '     * May only be called by the owner of that node in the ENS registry.\n', '     * @param node The node to update.\n', '     * @param key The key to set.\n', '     * @param value The text data value to set.\n', '     */\n', '    function setText(bytes32 node, string key, string value) public only_owner(node) {\n', '        records[node].text[key] = value;\n', '        TextChanged(node, key, key);\n', '    }\n', '\n', '    /**\n', '     * Returns the text data associated with an ENS node and key.\n', '     * @param node The ENS node to query.\n', '     * @param key The text data key to query.\n', '     * @return The associated text data.\n', '     */\n', '    function text(bytes32 node, string key) public view returns (string) {\n', '        return records[node].text[key];\n', '    }\n', '\n', '    /**\n', '     * Returns the SECP256k1 public key associated with an ENS node.\n', '     * Defined in EIP 619.\n', '     * @param node The ENS node to query\n', '     * @return x, y the X and Y coordinates of the curve point for the public key.\n', '     */\n', '    function pubkey(bytes32 node) public view returns (bytes32 x, bytes32 y) {\n', '        return (records[node].pubkey.x, records[node].pubkey.y);\n', '    }\n', '\n', '    /**\n', '     * Returns the ABI associated with an ENS node.\n', '     * Defined in EIP205.\n', '     * @param node The ENS node to query\n', '     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\n', '     * @return contentType The content type of the return value\n', '     * @return data The ABI data\n', '     */\n', '    function ABI(bytes32 node, uint256 contentTypes) public view returns (uint256 contentType, bytes data) {\n', '        Record storage record = records[node];\n', '        for (contentType = 1; contentType <= contentTypes; contentType <<= 1) {\n', '            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\n', '                data = record.abis[contentType];\n', '                return;\n', '            }\n', '        }\n', '        contentType = 0;\n', '    }\n', '\n', '    /**\n', '     * Returns the name associated with an ENS node, for reverse records.\n', '     * Defined in EIP181.\n', '     * @param node The ENS node to query.\n', '     * @return The associated name.\n', '     */\n', '    function name(bytes32 node) public view returns (string) {\n', '        return records[node].name;\n', '    }\n', '\n', '    /**\n', '     * Returns the content hash associated with an ENS node.\n', '     * Note that this resource type is not standardized, and will likely change\n', '     * in future to a resource type based on multihash.\n', '     * @param node The ENS node to query.\n', '     * @return The associated content hash.\n', '     */\n', '    function content(bytes32 node) public view returns (bytes32) {\n', '        return records[node].content;\n', '    }\n', '\n', '    /**\n', '     * Returns the multihash associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated multihash.\n', '     */\n', '    function multihash(bytes32 node) public view returns (bytes) {\n', '        return records[node].multihash;\n', '    }\n', '\n', '    /**\n', '     * Returns the address associated with an ENS node.\n', '     * @param node The ENS node to query.\n', '     * @return The associated address.\n', '     */\n', '    function addr(bytes32 node) public view returns (address) {\n', '        return records[node].addr;\n', '    }\n', '\n', '    /**\n', '     * Returns true if the resolver implements the interface specified by the provided hash.\n', '     * @param interfaceID The ID of the interface to check for.\n', '     * @return True if the contract implements the requested interface.\n', '     */\n', '    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\n', '        return interfaceID == ADDR_INTERFACE_ID ||\n', '        interfaceID == CONTENT_INTERFACE_ID ||\n', '        interfaceID == NAME_INTERFACE_ID ||\n', '        interfaceID == ABI_INTERFACE_ID ||\n', '        interfaceID == PUBKEY_INTERFACE_ID ||\n', '        interfaceID == TEXT_INTERFACE_ID ||\n', '        interfaceID == MULTIHASH_INTERFACE_ID ||\n', '        interfaceID == INTERFACE_META_ID;\n', '    }\n', '}\n', '\n', 'contract LightContract {\n', '    /**\n', '     * @dev Shared code smart contract \n', '     */\n', '    address lib;\n', '\n', '    constructor(address _library) public {\n', '        lib = _library;\n', '    }\n', '\n', '    function() public {\n', '        require(lib.delegatecall(msg.data));\n', '    }\n', '}\n', '\n', 'contract LighthouseABI {\n', '    function refill(uint256 _value) external;\n', '    function withdraw(uint256 _value) external;\n', '    function to(address _to, bytes _data) external;\n', '    function () external;\n', '}\n', '\n', 'contract LighthouseAPI {\n', '    address[] public members;\n', '    mapping(address => uint256) indexOf;\n', '\n', '    mapping(address => uint256) public balances;\n', '\n', '    uint256 public minimalFreeze;\n', '    uint256 public timeoutBlocks;\n', '\n', '    LiabilityFactory public factory;\n', '    XRT              public xrt;\n', '\n', '    uint256 public keepaliveBlock = 0;\n', '    uint256 public marker = 0;\n', '    uint256 public quota = 0;\n', '\n', '    function quotaOf(address _member) public view returns (uint256)\n', '    { return balances[_member] / minimalFreeze; }\n', '}\n', '\n', 'contract LighthouseLib is LighthouseAPI, LighthouseABI {\n', '\n', '    function refill(uint256 _value) external {\n', '        require(xrt.transferFrom(msg.sender, this, _value));\n', '        require(_value >= minimalFreeze);\n', '\n', '        if (balances[msg.sender] == 0) {\n', '            indexOf[msg.sender] = members.length;\n', '            members.push(msg.sender);\n', '        }\n', '        balances[msg.sender] += _value;\n', '    }\n', '\n', '    function withdraw(uint256 _value) external {\n', '        require(balances[msg.sender] >= _value);\n', '\n', '        balances[msg.sender] -= _value;\n', '        require(xrt.transfer(msg.sender, _value));\n', '\n', '        // Drop member if quota go to zero\n', '        if (quotaOf(msg.sender) == 0) {\n', '            uint256 balance = balances[msg.sender];\n', '            balances[msg.sender] = 0;\n', '            require(xrt.transfer(msg.sender, balance)); \n', '            \n', '            uint256 senderIndex = indexOf[msg.sender];\n', '            uint256 lastIndex = members.length - 1;\n', '            if (senderIndex < lastIndex)\n', '                members[senderIndex] = members[lastIndex];\n', '            members.length -= 1;\n', '        }\n', '    }\n', '\n', '    function nextMember() internal\n', '    { marker = (marker + 1) % members.length; }\n', '\n', '    modifier quoted {\n', '        if (quota == 0) {\n', '            // Step over marker\n', '            nextMember();\n', '\n', '            // Allocate new quota\n', '            quota = quotaOf(members[marker]);\n', '        }\n', '\n', '        // Consume one quota for transaction sending\n', '        assert(quota > 0);\n', '        quota -= 1;\n', '\n', '        _;\n', '    }\n', '\n', '    modifier keepalive {\n', '        if (timeoutBlocks < block.number - keepaliveBlock) {\n', '            // Search keepalive sender\n', '            while (msg.sender != members[marker])\n', '                nextMember();\n', '\n', '            // Allocate new quota\n', '            quota = quotaOf(members[marker]);\n', '        }\n', '\n', '        _;\n', '    }\n', '\n', '    modifier member {\n', '        // Zero members guard\n', '        require(members.length > 0);\n', '\n', '        // Only member with marker can to send transaction\n', '        require(msg.sender == members[marker]);\n', '\n', '        // Store transaction sending block\n', '        keepaliveBlock = block.number;\n', '\n', '        _;\n', '    }\n', '\n', '    function to(address _to, bytes _data) external keepalive quoted member {\n', '        require(factory.gasUtilizing(_to) > 0);\n', '        require(_to.call(_data));\n', '    }\n', '\n', '    function () external keepalive quoted member\n', '    { require(factory.call(msg.data)); }\n', '}\n', '\n', 'contract Lighthouse is LighthouseAPI, LightContract {\n', '    constructor(\n', '        address _lib,\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks\n', '    ) \n', '        public\n', '        LightContract(_lib)\n', '    {\n', '        minimalFreeze = _minimalFreeze;\n', '        timeoutBlocks = _timeoutBlocks;\n', '        factory = LiabilityFactory(msg.sender);\n', '        xrt = factory.xrt();\n', '    }\n', '}\n', '\n', 'contract RobotLiabilityABI {\n', '    function ask(\n', '        bytes   _model,\n', '        bytes   _objective,\n', '\n', '        ERC20   _token,\n', '        uint256 _cost,\n', '\n', '        address _validator,\n', '        uint256 _validator_fee,\n', '\n', '        uint256 _deadline,\n', '        bytes32 _nonce,\n', '        bytes   _signature\n', '    ) external returns (bool);\n', '\n', '    function bid(\n', '        bytes   _model,\n', '        bytes   _objective,\n', '        \n', '        ERC20   _token,\n', '        uint256 _cost,\n', '\n', '        uint256 _lighthouse_fee,\n', '\n', '        uint256 _deadline,\n', '        bytes32 _nonce,\n', '        bytes   _signature\n', '    ) external returns (bool);\n', '\n', '    function finalize(\n', '        bytes _result,\n', '        bytes _signature,\n', '        bool  _agree\n', '    ) external returns (bool);\n', '}\n', '\n', 'contract RobotLiabilityAPI {\n', '    bytes   public model;\n', '    bytes   public objective;\n', '    bytes   public result;\n', '\n', '    ERC20   public token;\n', '    uint256 public cost;\n', '    uint256 public lighthouseFee;\n', '    uint256 public validatorFee;\n', '\n', '    bytes32 public askHash;\n', '    bytes32 public bidHash;\n', '\n', '    address public promisor;\n', '    address public promisee;\n', '    address public validator;\n', '\n', '    bool    public isConfirmed;\n', '    bool    public isFinalized;\n', '\n', '    LiabilityFactory public factory;\n', '}\n', '\n', 'contract RobotLiabilityLib is RobotLiabilityABI\n', '                            , RobotLiabilityAPI {\n', '    using ECRecovery for bytes32;\n', '\n', '    function ask(\n', '        bytes   _model,\n', '        bytes   _objective,\n', '\n', '        ERC20   _token,\n', '        uint256 _cost,\n', '\n', '        address _validator,\n', '        uint256 _validator_fee,\n', '\n', '        uint256 _deadline,\n', '        bytes32 _nonce,\n', '        bytes   _signature\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(msg.sender == address(factory));\n', '        require(block.number < _deadline);\n', '\n', '        model        = _model;\n', '        objective    = _objective;\n', '        token        = _token;\n', '        cost         = _cost;\n', '        validator    = _validator;\n', '        validatorFee = _validator_fee;\n', '\n', '        askHash = keccak256(abi.encodePacked(\n', '            _model\n', '          , _objective\n', '          , _token\n', '          , _cost\n', '          , _validator\n', '          , _validator_fee\n', '          , _deadline\n', '          , _nonce\n', '        ));\n', '\n', '        promisee = askHash\n', '            .toEthSignedMessageHash()\n', '            .recover(_signature);\n', '        return true;\n', '    }\n', '\n', '    function bid(\n', '        bytes   _model,\n', '        bytes   _objective,\n', '        \n', '        ERC20   _token,\n', '        uint256 _cost,\n', '\n', '        uint256 _lighthouse_fee,\n', '\n', '        uint256 _deadline,\n', '        bytes32 _nonce,\n', '        bytes   _signature\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(msg.sender == address(factory));\n', '        require(block.number < _deadline);\n', '        require(keccak256(model) == keccak256(_model));\n', '        require(keccak256(objective) == keccak256(_objective));\n', '        require(_token == token);\n', '        require(_cost == cost);\n', '\n', '        lighthouseFee = _lighthouse_fee;\n', '\n', '        bidHash = keccak256(abi.encodePacked(\n', '            _model\n', '          , _objective\n', '          , _token\n', '          , _cost\n', '          , _lighthouse_fee\n', '          , _deadline\n', '          , _nonce\n', '        ));\n', '\n', '        promisor = bidHash\n', '            .toEthSignedMessageHash()\n', '            .recover(_signature);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize this liability\n', '     * @param _result Result data hash\n', '     * @param _agree Validation network confirmation\n', '     * @param _signature Result sender signature\n', '     */\n', '    function finalize(\n', '        bytes _result,\n', '        bytes _signature,\n', '        bool  _agree\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        uint256 gasinit = gasleft();\n', '        require(!isFinalized);\n', '\n', '        address resultSender = keccak256(abi.encodePacked(this, _result))\n', '            .toEthSignedMessageHash()\n', '            .recover(_signature);\n', '        require(resultSender == promisor);\n', '\n', '        result = _result;\n', '        isFinalized = true;\n', '\n', '        if (validator == 0) {\n', '            require(factory.isLighthouse(msg.sender));\n', '            require(token.transfer(promisor, cost));\n', '        } else {\n', '            require(msg.sender == validator);\n', '\n', '            isConfirmed = _agree;\n', '            if (isConfirmed)\n', '                require(token.transfer(promisor, cost));\n', '            else\n', '                require(token.transfer(promisee, cost));\n', '\n', '            if (validatorFee > 0)\n', '                require(factory.xrt().transfer(validator, validatorFee));\n', '        }\n', '\n', '        require(factory.liabilityFinalized(gasinit));\n', '        return true;\n', '    }\n', '}\n', '\n', '// Standard robot liability light contract\n', 'contract RobotLiability is RobotLiabilityAPI, LightContract {\n', '    constructor(address _lib) public LightContract(_lib)\n', '    { factory = LiabilityFactory(msg.sender); }\n', '}\n', '\n', 'contract LiabilityFactory {\n', '    constructor(\n', '        address _robot_liability_lib,\n', '        address _lighthouse_lib,\n', '        DutchAuction _auction,\n', '        XRT _xrt,\n', '        ENS _ens\n', '    ) public {\n', '        robotLiabilityLib = _robot_liability_lib;\n', '        lighthouseLib = _lighthouse_lib;\n', '        auction = _auction;\n', '        xrt = _xrt;\n', '        ens = _ens;\n', '    }\n', '\n', '    /**\n', '     * @dev New liability created \n', '     */\n', '    event NewLiability(address indexed liability);\n', '\n', '    /**\n', '     * @dev New lighthouse created\n', '     */\n', '    event NewLighthouse(address indexed lighthouse, string name);\n', '\n', '    /**\n', '     * @dev Robonomics dutch auction contract\n', '     */\n', '    DutchAuction public auction;\n', '\n', '    /**\n', '     * @dev Robonomics network protocol token\n', '     */\n', '    XRT public xrt;\n', '\n', '    /**\n', '     * @dev Ethereum name system\n', '     */\n', '    ENS public ens;\n', '\n', '    /**\n', '     * @dev Total GAS utilized by Robonomics network\n', '     */\n', '    uint256 public totalGasUtilizing = 0;\n', '\n', '    /**\n', '     * @dev GAS utilized by liability contracts\n', '     */\n', '    mapping(address => uint256) public gasUtilizing;\n', '\n', '    /**\n', '     * @dev The count of utilized gas for switch to next epoch \n', '     */\n', '    uint256 public constant gasEpoch = 347 * 10**10;\n', '\n', '    /**\n', '     * @dev Weighted average gasprice\n', '     */\n', '    uint256 public constant gasPrice = 10 * 10**9;\n', '\n', '    /**\n', '     * @dev Used market orders accounting\n', '     */\n', '    mapping(bytes32 => bool) public usedHash;\n', '\n', '    /**\n', '     * @dev Lighthouse accounting\n', '     */\n', '    mapping(address => bool) public isLighthouse;\n', '\n', '    /**\n', '     * @dev Robot liability shared code smart contract\n', '     */\n', '    address public robotLiabilityLib;\n', '\n', '    /**\n', '     * @dev Lightouse shared code smart contract\n', '     */\n', '    address public lighthouseLib;\n', '\n', '    /**\n', '     * @dev XRT emission value for utilized gas\n', '     */\n', '    function wnFromGas(uint256 _gas) public view returns (uint256) {\n', "        // Just return wn=gas when auction isn't finish\n", '        if (auction.finalPrice() == 0)\n', '            return _gas;\n', '\n', '        // Current gas utilization epoch\n', '        uint256 epoch = totalGasUtilizing / gasEpoch;\n', '\n', '        // XRT emission with addition coefficient by gas utilzation epoch\n', '        uint256 wn = _gas * 10**9 * gasPrice * 2**epoch / 3**epoch / auction.finalPrice();\n', '\n', '        // Check to not permit emission decrease below wn=gas\n', '        return wn < _gas ? _gas : wn;\n', '    }\n', '\n', '    /**\n', '     * @dev Only lighthouse guard\n', '     */\n', '    modifier onlyLighthouse {\n', '        require(isLighthouse[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Parameter can be used only once\n', '     * @param _hash Single usage hash\n', '     */\n', '    function usedHashGuard(bytes32 _hash) internal {\n', '        require(!usedHash[_hash]);\n', '        usedHash[_hash] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Create robot liability smart contract\n', '     * @param _ask ABI-encoded ASK order message \n', '     * @param _bid ABI-encoded BID order message \n', '     */\n', '    function createLiability(\n', '        bytes _ask,\n', '        bytes _bid\n', '    )\n', '        external \n', '        onlyLighthouse\n', '        returns (RobotLiability liability)\n', '    {\n', '        // Store in memory available gas\n', '        uint256 gasinit = gasleft();\n', '\n', '        // Create liability\n', '        liability = new RobotLiability(robotLiabilityLib);\n', '        emit NewLiability(liability);\n', '\n', '        // Parse messages\n', '        require(liability.call(abi.encodePacked(bytes4(0x82fbaa25), _ask))); // liability.ask(...)\n', '        usedHashGuard(liability.askHash());\n', '\n', '        require(liability.call(abi.encodePacked(bytes4(0x66193359), _bid))); // liability.bid(...)\n', '        usedHashGuard(liability.bidHash());\n', '\n', '        // Transfer lighthouse fee to lighthouse worker directly\n', '        require(xrt.transferFrom(liability.promisor(),\n', '                                 tx.origin,\n', '                                 liability.lighthouseFee()));\n', '\n', '        // Transfer liability security and hold on contract\n', '        ERC20 token = liability.token();\n', '        require(token.transferFrom(liability.promisee(),\n', '                                   liability,\n', '                                   liability.cost()));\n', '\n', '        // Transfer validator fee and hold on contract\n', '        if (address(liability.validator()) != 0 && liability.validatorFee() > 0)\n', '            require(xrt.transferFrom(liability.promisee(),\n', '                                     liability,\n', '                                     liability.validatorFee()));\n', '\n', '        // Accounting gas usage of transaction\n', '        uint256 gas = gasinit - gasleft() + 110525; // Including observation error\n', '        totalGasUtilizing       += gas;\n', '        gasUtilizing[liability] += gas;\n', '     }\n', '\n', '    /**\n', '     * @dev Create lighthouse smart contract\n', '     * @param _minimalFreeze Minimal freeze value of XRT token\n', '     * @param _timeoutBlocks Max time of lighthouse silence in blocks\n', '     * @param _name Lighthouse subdomain,\n', "     *              example: for 'my-name' will created 'my-name.lighthouse.1.robonomics.eth' domain\n", '     */\n', '    function createLighthouse(\n', '        uint256 _minimalFreeze,\n', '        uint256 _timeoutBlocks,\n', '        string  _name\n', '    )\n', '        external\n', '        returns (address lighthouse)\n', '    {\n', '        bytes32 lighthouseNode\n', '            // lighthouse.1.robonomics.eth\n', '            = 0x3662a5d633e9a5ca4b4bd25284e1b343c15a92b5347feb9b965a2b1ef3e1ea1a;\n', '\n', '        // Name reservation check\n', '        bytes32 subnode = keccak256(abi.encodePacked(lighthouseNode, keccak256(_name)));\n', '        require(ens.resolver(subnode) == 0);\n', '\n', '        // Create lighthouse\n', '        lighthouse = new Lighthouse(lighthouseLib, _minimalFreeze, _timeoutBlocks);\n', '        emit NewLighthouse(lighthouse, _name);\n', '        isLighthouse[lighthouse] = true;\n', '\n', '        // Register subnode\n', '        ens.setSubnodeOwner(lighthouseNode, keccak256(_name), this);\n', '\n', '        // Register lighthouse address\n', '        PublicResolver resolver = PublicResolver(ens.resolver(lighthouseNode));\n', '        ens.setResolver(subnode, resolver);\n', '        resolver.setAddr(subnode, lighthouse);\n', '    }\n', '\n', '    /**\n', '     * @dev Is called whan after liability finalization\n', '     * @param _gas Liability finalization gas expenses\n', '     */\n', '    function liabilityFinalized(\n', '        uint256 _gas\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(gasUtilizing[msg.sender] > 0);\n', '\n', '        uint256 gas = _gas - gasleft();\n', '        totalGasUtilizing        += gas;\n', '        gasUtilizing[msg.sender] += gas;\n', '        require(xrt.mint(tx.origin, wnFromGas(gasUtilizing[msg.sender])));\n', '        return true;\n', '    }\n', '}']
