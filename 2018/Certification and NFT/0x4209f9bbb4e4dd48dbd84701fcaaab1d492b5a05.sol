['/* ==================================================================== */\n', '/* Copyright (c) 2018 The ether.online Project.  All rights reserved.\n', '/* \n', '/* https://ether.online  The first RPG game of blockchain \n', '/*  \n', '/* authors <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5d2f343e3635283329382f732e3538331d3a303c3431733e3230">[email&#160;protected]</a>   \n', '/*         <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7201011701071c161b1c1532151f131b1e5c111d1f">[email&#160;protected]</a>            \n', '/* ==================================================================== */\n', '\n', 'pragma solidity ^0.4.20;\n', '\n', '/// @title ERC-165 Standard Interface Detection\n', '/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', 'interface ERC165 {\n', '    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n', '}\n', '\n', '/// @title ERC-721 Non-Fungible Token Standard\n', '/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', 'contract ERC721 is ERC165 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function ownerOf(uint256 _tokenId) external view returns (address);\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    function approve(address _approved, uint256 _tokenId) external;\n', '    function setApprovalForAll(address _operator, bool _approved) external;\n', '    function getApproved(uint256 _tokenId) external view returns (address);\n', '    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n', '}\n', '\n', '/// @title ERC-721 Non-Fungible Token Standard\n', 'interface ERC721TokenReceiver {\n', '\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\n', '}\n', '\n', 'contract AccessAdmin {\n', '    bool public isPaused = false;\n', '    address public addrAdmin;  \n', '\n', '    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n', '\n', '    function AccessAdmin() public {\n', '        addrAdmin = msg.sender;\n', '    }  \n', '\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == addrAdmin);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(isPaused);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) external onlyAdmin {\n', '        require(_newAdmin != address(0));\n', '        AdminTransferred(addrAdmin, _newAdmin);\n', '        addrAdmin = _newAdmin;\n', '    }\n', '\n', '    function doPause() external onlyAdmin whenNotPaused {\n', '        isPaused = true;\n', '    }\n', '\n', '    function doUnpause() external onlyAdmin whenPaused {\n', '        isPaused = false;\n', '    }\n', '}\n', '\n', 'contract AccessService is AccessAdmin {\n', '    address public addrService;\n', '    address public addrFinance;\n', '\n', '    modifier onlyService() {\n', '        require(msg.sender == addrService);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFinance() {\n', '        require(msg.sender == addrFinance);\n', '        _;\n', '    }\n', '\n', '    function setService(address _newService) external {\n', '        require(msg.sender == addrService || msg.sender == addrAdmin);\n', '        require(_newService != address(0));\n', '        addrService = _newService;\n', '    }\n', '\n', '    function setFinance(address _newFinance) external {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        require(_newFinance != address(0));\n', '        addrFinance = _newFinance;\n', '    }\n', '\n', '    function withdraw(address _target, uint256 _amount) \n', '        external \n', '    {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        require(_amount > 0);\n', '        address receiver = _target == address(0) ? addrFinance : _target;\n', '        uint256 balance = this.balance;\n', '        if (_amount < balance) {\n', '            receiver.transfer(_amount);\n', '        } else {\n', '            receiver.transfer(this.balance);\n', '        }      \n', '    }\n', '}\n', '\n', 'interface IDataMining {\n', '    function getRecommender(address _target) external view returns(address);\n', '    function subFreeMineral(address _target) external returns(bool);\n', '}\n', '\n', 'interface IDataEquip {\n', '    function isEquiped(address _target, uint256 _tokenId) external view returns(bool);\n', '    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);\n', '    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);\n', '}\n', '\n', 'contract Random {\n', '    uint256 _seed;\n', '\n', '    function _rand() internal returns (uint256) {\n', '        _seed = uint256(keccak256(_seed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n', '        return _seed;\n', '    }\n', '\n', '    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\n', '        return uint256(keccak256(_outSeed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract WarToken is ERC721, AccessAdmin {\n', '    /// @dev The equipment info\n', '    struct Fashion {\n', '        uint16 protoId;     // 0  Equipment ID\n', '        uint16 quality;     // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\n', '        uint16 pos;         // 2  Slots: 1 Weapon/2 Hat/3 Cloth/4 Pant/5 Shoes/9 Pets\n', '        uint16 health;      // 3  Health\n', '        uint16 atkMin;      // 4  Min attack\n', '        uint16 atkMax;      // 5  Max attack\n', '        uint16 defence;     // 6  Defennse\n', '        uint16 crit;        // 7  Critical rate\n', '        uint16 isPercent;   // 8  Attr value type\n', '        uint16 attrExt1;    // 9  future stat 1\n', '        uint16 attrExt2;    // 10 future stat 2\n', '        uint16 attrExt3;    // 11 future stat 3\n', '    }\n', '\n', '    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n', '    Fashion[] public fashionArray;\n', '\n', '    /// @dev Amount of tokens destroyed\n', '    uint256 destroyFashionCount;\n', '\n', '    /// @dev Equipment token ID vs owner address\n', '    mapping (uint256 => address) fashionIdToOwner;\n', '\n', '    /// @dev Equipments owner by the owner (array)\n', '    mapping (address => uint256[]) ownerToFashionArray;\n', '\n', '    /// @dev Equipment token ID search in owner array\n', '    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n', '\n', '    /// @dev The authorized address for each WAR\n', '    mapping (uint256 => address) fashionIdToApprovals;\n', '\n', '    /// @dev The authorized operators for each address\n', '    mapping (address => mapping (address => bool)) operatorToApprovals;\n', '\n', '    /// @dev Trust contract\n', '    mapping (address => bool) actionContracts;\n', '\n', '    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n', '        actionContracts[_actionAddr] = _useful;\n', '    }\n', '\n', '    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n', '        return actionContracts[_actionAddr];\n', '    }\n', '\n', '    /// @dev This emits when the approved address for an WAR is changed or reaffirmed.\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    /// @dev This emits when an operator is enabled or disabled for an owner.\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '    /// @dev This emits when the equipment ownership changed \n', '    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '\n', '    /// @dev This emits when the equipment created\n', '    event CreateFashion(address indexed owner, uint256 tokenId, uint16 protoId, uint16 quality, uint16 pos, uint16 createType);\n', '\n', '    /// @dev This emits when the equipment&#39;s attributes changed\n', '    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n', '\n', '    /// @dev This emits when the equipment destroyed\n', '    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n', '    \n', '    function WarToken() public {\n', '        addrAdmin = msg.sender;\n', '        fashionArray.length += 1;\n', '    }\n', '\n', '    // modifier\n', '    /// @dev Check if token ID is valid\n', '    modifier isValidToken(uint256 _tokenId) {\n', '        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n', '        require(fashionIdToOwner[_tokenId] != address(0)); \n', '        _;\n', '    }\n', '\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n', '        _;\n', '    }\n', '\n', '    // ERC721\n', '    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n', '        // ERC165 || ERC721 || ERC165^ERC721\n', '        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n', '    }\n', '        \n', '    function name() public pure returns(string) {\n', '        return "WAR Token";\n', '    }\n', '\n', '    function symbol() public pure returns(string) {\n', '        return "WAR";\n', '    }\n', '\n', '    /// @dev Search for token quantity address\n', '    /// @param _owner Address that needs to be searched\n', '    /// @return Returns token quantity\n', '    function balanceOf(address _owner) external view returns(uint256) {\n', '        require(_owner != address(0));\n', '        return ownerToFashionArray[_owner].length;\n', '    }\n', '\n', '    /// @dev Find the owner of an WAR\n', '    /// @param _tokenId The tokenId of WAR\n', '    /// @return Give The address of the owner of this WAR\n', '    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n', '        return fashionIdToOwner[_tokenId];\n', '    }\n', '\n', '    /// @dev Transfers the ownership of an WAR from one address to another address\n', '    /// @param _from The current owner of the WAR\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The WAR to transfer\n', '    /// @param data Additional data with no specified format, sent in call to `_to`\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n', '        external\n', '        whenNotPaused\n', '    {\n', '        _safeTransferFrom(_from, _to, _tokenId, data);\n', '    }\n', '\n', '    /// @dev Transfers the ownership of an WAR from one address to another address\n', '    /// @param _from The current owner of the WAR\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The WAR to transfer\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n', '        external\n', '        whenNotPaused\n', '    {\n', '        _safeTransferFrom(_from, _to, _tokenId, "");\n', '    }\n', '\n', '    /// @dev Transfer ownership of an WAR, &#39;_to&#39; must be a vaild address, or the WAR will lost\n', '    /// @param _from The current owner of the WAR\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The WAR to transfer\n', '    function transferFrom(address _from, address _to, uint256 _tokenId)\n', '        external\n', '        whenNotPaused\n', '        isValidToken(_tokenId)\n', '        canTransfer(_tokenId)\n', '    {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(_to != address(0));\n', '        require(owner == _from);\n', '        \n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Set or reaffirm the approved address for an WAR\n', '    /// @param _approved The new approved WAR controller\n', '    /// @param _tokenId The WAR to approve\n', '    function approve(address _approved, uint256 _tokenId)\n', '        external\n', '        whenNotPaused\n', '    {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n', '\n', '        fashionIdToApprovals[_tokenId] = _approved;\n', '        Approval(owner, _approved, _tokenId);\n', '    }\n', '\n', '    /// @dev Enable or disable approval for a third party ("operator") to manage all your asset.\n', '    /// @param _operator Address to add to the set of authorized operators.\n', '    /// @param _approved True if the operators is approved, false to revoke approval\n', '    function setApprovalForAll(address _operator, bool _approved) \n', '        external \n', '        whenNotPaused\n', '    {\n', '        operatorToApprovals[msg.sender][_operator] = _approved;\n', '        ApprovalForAll(msg.sender, _operator, _approved);\n', '    }\n', '\n', '    /// @dev Get the approved address for a single WAR\n', '    /// @param _tokenId The WAR to find the approved address for\n', '    /// @return The approved address for this WAR, or the zero address if there is none\n', '    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n', '        return fashionIdToApprovals[_tokenId];\n', '    }\n', '\n', '    /// @dev Query if an address is an authorized operator for another address\n', '    /// @param _owner The address that owns the WARs\n', '    /// @param _operator The address that acts on behalf of the owner\n', '    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n', '    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n', '        return operatorToApprovals[_owner][_operator];\n', '    }\n', '\n', '    /// @dev Count WARs tracked by this contract\n', '    /// @return A count of valid WARs tracked by this contract, where each one of\n', '    ///  them has an assigned and queryable owner not equal to the zero address\n', '    function totalSupply() external view returns (uint256) {\n', '        return fashionArray.length - destroyFashionCount - 1;\n', '    }\n', '\n', '    /// @dev Do the real transfer with out any condition checking\n', '    /// @param _from The old owner of this WAR(If created: 0x0)\n', '    /// @param _to The new owner of this WAR \n', '    /// @param _tokenId The tokenId of the WAR\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        if (_from != address(0)) {\n', '            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n', '            uint256[] storage fsArray = ownerToFashionArray[_from];\n', '            require(fsArray[indexFrom] == _tokenId);\n', '\n', '            // If the WAR is not the element of array, change it to with the last\n', '            if (indexFrom != fsArray.length - 1) {\n', '                uint256 lastTokenId = fsArray[fsArray.length - 1];\n', '                fsArray[indexFrom] = lastTokenId; \n', '                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n', '            }\n', '            fsArray.length -= 1; \n', '            \n', '            if (fashionIdToApprovals[_tokenId] != address(0)) {\n', '                delete fashionIdToApprovals[_tokenId];\n', '            }      \n', '        }\n', '\n', '        // Give the WAR to &#39;_to&#39;\n', '        fashionIdToOwner[_tokenId] = _to;\n', '        ownerToFashionArray[_to].push(_tokenId);\n', '        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n', '        \n', '        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Actually perform the safeTransferFrom\n', '    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n', '        internal\n', '        isValidToken(_tokenId) \n', '        canTransfer(_tokenId)\n', '    {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(_to != address(0));\n', '        require(owner == _from);\n', '        \n', '        _transfer(_from, _to, _tokenId);\n', '\n', '        // Do the callback after everything is done to avoid reentrancy attack\n', '        uint256 codeSize;\n', '        assembly { codeSize := extcodesize(_to) }\n', '        if (codeSize == 0) {\n', '            return;\n', '        }\n', '        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n', '        // bytes4(keccak256("onERC721Received(address,uint256,bytes)")) = 0xf0b9e5ba;\n', '        require(retval == 0xf0b9e5ba);\n', '    }\n', '\n', '    //----------------------------------------------------------------------------------------------------------\n', '\n', '    /// @dev Equipment creation\n', '    /// @param _owner Owner of the equipment created\n', '    /// @param _attrs Attributes of the equipment created\n', '    /// @return Token ID of the equipment created\n', '    function createFashion(address _owner, uint16[9] _attrs, uint16 _createType) \n', '        external \n', '        whenNotPaused\n', '        returns(uint256)\n', '    {\n', '        require(actionContracts[msg.sender]);\n', '        require(_owner != address(0));\n', '\n', '        uint256 newFashionId = fashionArray.length;\n', '        require(newFashionId < 4294967296);\n', '\n', '        fashionArray.length += 1;\n', '        Fashion storage fs = fashionArray[newFashionId];\n', '        fs.protoId = _attrs[0];\n', '        fs.quality = _attrs[1];\n', '        fs.pos = _attrs[2];\n', '        if (_attrs[3] != 0) {\n', '            fs.health = _attrs[3];\n', '        }\n', '        \n', '        if (_attrs[4] != 0) {\n', '            fs.atkMin = _attrs[4];\n', '            fs.atkMax = _attrs[5];\n', '        }\n', '       \n', '        if (_attrs[6] != 0) {\n', '            fs.defence = _attrs[6];\n', '        }\n', '        \n', '        if (_attrs[7] != 0) {\n', '            fs.crit = _attrs[7];\n', '        }\n', '\n', '        if (_attrs[8] != 0) {\n', '            fs.isPercent = _attrs[8];\n', '        }\n', '        \n', '        _transfer(0, _owner, newFashionId);\n', '        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _createType);\n', '        return newFashionId;\n', '    }\n', '\n', '    /// @dev One specific attribute of the equipment modified\n', '    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n', '        if (_index == 3) {\n', '            _fs.health = _val;\n', '        } else if(_index == 4) {\n', '            _fs.atkMin = _val;\n', '        } else if(_index == 5) {\n', '            _fs.atkMax = _val;\n', '        } else if(_index == 6) {\n', '            _fs.defence = _val;\n', '        } else if(_index == 7) {\n', '            _fs.crit = _val;\n', '        } else if(_index == 9) {\n', '            _fs.attrExt1 = _val;\n', '        } else if(_index == 10) {\n', '            _fs.attrExt2 = _val;\n', '        } else if(_index == 11) {\n', '            _fs.attrExt3 = _val;\n', '        }\n', '    }\n', '\n', '    /// @dev Equiment attributes modified (max 4 stats modified)\n', '    /// @param _tokenId Equipment Token ID\n', '    /// @param _idxArray Stats order that must be modified\n', '    /// @param _params Stat value that must be modified\n', '    /// @param _changeType Modification type such as enhance, socket, etc.\n', '    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n', '        external \n', '        whenNotPaused\n', '        isValidToken(_tokenId) \n', '    {\n', '        require(actionContracts[msg.sender]);\n', '\n', '        Fashion storage fs = fashionArray[_tokenId];\n', '        if (_idxArray[0] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n', '        }\n', '\n', '        if (_idxArray[1] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n', '        }\n', '\n', '        if (_idxArray[2] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n', '        }\n', '\n', '        if (_idxArray[3] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n', '        }\n', '\n', '        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n', '    }\n', '\n', '    /// @dev Equipment destruction\n', '    /// @param _tokenId Equipment Token ID\n', '    /// @param _deleteType Destruction type, such as craft\n', '    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n', '        external \n', '        whenNotPaused\n', '        isValidToken(_tokenId) \n', '    {\n', '        require(actionContracts[msg.sender]);\n', '\n', '        address _from = fashionIdToOwner[_tokenId];\n', '        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n', '        uint256[] storage fsArray = ownerToFashionArray[_from]; \n', '        require(fsArray[indexFrom] == _tokenId);\n', '\n', '        if (indexFrom != fsArray.length - 1) {\n', '            uint256 lastTokenId = fsArray[fsArray.length - 1];\n', '            fsArray[indexFrom] = lastTokenId; \n', '            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n', '        }\n', '        fsArray.length -= 1; \n', '\n', '        fashionIdToOwner[_tokenId] = address(0);\n', '        delete fashionIdToOwnerIndex[_tokenId];\n', '        destroyFashionCount += 1;\n', '\n', '        Transfer(_from, 0, _tokenId);\n', '\n', '        DeleteFashion(_from, _tokenId, _deleteType);\n', '    }\n', '\n', '    /// @dev Safe transfer by trust contracts\n', '    function safeTransferByContract(uint256 _tokenId, address _to) \n', '        external\n', '        whenNotPaused\n', '    {\n', '        require(actionContracts[msg.sender]);\n', '\n', '        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(_to != address(0));\n', '        require(owner != _to);\n', '\n', '        _transfer(owner, _to, _tokenId);\n', '    }\n', '\n', '    //----------------------------------------------------------------------------------------------------------\n', '\n', '    /// @dev Get fashion attrs by tokenId\n', '    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[12] datas) {\n', '        Fashion storage fs = fashionArray[_tokenId];\n', '        datas[0] = fs.protoId;\n', '        datas[1] = fs.quality;\n', '        datas[2] = fs.pos;\n', '        datas[3] = fs.health;\n', '        datas[4] = fs.atkMin;\n', '        datas[5] = fs.atkMax;\n', '        datas[6] = fs.defence;\n', '        datas[7] = fs.crit;\n', '        datas[8] = fs.isPercent;\n', '        datas[9] = fs.attrExt1;\n', '        datas[10] = fs.attrExt2;\n', '        datas[11] = fs.attrExt3;\n', '    }\n', '\n', '    /// @dev Get tokenIds and flags by owner\n', '    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n', '        require(_owner != address(0));\n', '        uint256[] storage fsArray = ownerToFashionArray[_owner];\n', '        uint256 length = fsArray.length;\n', '        tokens = new uint256[](length);\n', '        flags = new uint32[](length);\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            tokens[i] = fsArray[i];\n', '            Fashion storage fs = fashionArray[fsArray[i]];\n', '            flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos);\n', '        }\n', '    }\n', '\n', '    /// @dev WAR token info returned based on Token ID transfered (64 at most)\n', '    function getFashionsAttrs(uint256[] _tokens) external view returns(uint16[] attrs) {\n', '        uint256 length = _tokens.length;\n', '        require(length <= 64);\n', '        attrs = new uint16[](length * 11);\n', '        uint256 tokenId;\n', '        uint256 index;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            tokenId = _tokens[i];\n', '            if (fashionIdToOwner[tokenId] != address(0)) {\n', '                index = i * 11;\n', '                Fashion storage fs = fashionArray[tokenId];\n', '                attrs[index] = fs.health;\n', '                attrs[index + 1] = fs.atkMin;\n', '                attrs[index + 2] = fs.atkMax;\n', '                attrs[index + 3] = fs.defence;\n', '                attrs[index + 4] = fs.crit;\n', '                attrs[index + 5] = fs.isPercent;\n', '                attrs[index + 6] = fs.attrExt1;\n', '                attrs[index + 7] = fs.attrExt2;\n', '                attrs[index + 8] = fs.attrExt3;\n', '            }   \n', '        }\n', '    }\n', '}\n', '\n', 'contract DataEquip is AccessService, IDataEquip {\n', '    event EquipChanged(address indexed _target);\n', '\n', '    /// @dev WarToken(NFT) contract address\n', '    WarToken public tokenContract;\n', '    mapping (address => uint256) public slotWeapon;\n', '    mapping (address => uint256) public slotHat;\n', '    mapping (address => uint256) public slotCloth;\n', '    mapping (address => uint256) public slotPant;\n', '    mapping (address => uint256) public slotShoes;\n', '    mapping (address => uint256) public slotPet;\n', '\n', '    function DataEquip(address _nftAddr) public {\n', '        addrAdmin = msg.sender;\n', '        addrService = msg.sender;\n', '        addrFinance = msg.sender;\n', '\n', '        tokenContract = WarToken(_nftAddr);\n', '    }\n', '\n', '    function _equipUpOne(address _owner, uint256 _tokenId) private {\n', '        require(tokenContract.ownerOf(_tokenId) == _owner);\n', '        uint16[12] memory attrs = tokenContract.getFashion(_tokenId);\n', '        uint16 pos = attrs[2];\n', '        if (pos == 1) {\n', '            if (slotWeapon[_owner] != _tokenId) {\n', '                slotWeapon[_owner] = _tokenId;\n', '            }\n', '        } else if (pos == 2) {\n', '            if (slotHat[_owner] != _tokenId) {\n', '                slotHat[_owner] = _tokenId;\n', '            }\n', '        } else if (pos == 3) {\n', '            if (slotCloth[_owner] != _tokenId) {\n', '                slotCloth[_owner] = _tokenId;\n', '            }\n', '        } else if (pos == 4) {\n', '            if (slotPant[_owner] != _tokenId) {\n', '                slotPant[_owner] = _tokenId;\n', '            }\n', '        } else if (pos == 5) {\n', '            if (slotShoes[_owner] != _tokenId) {\n', '                slotShoes[_owner] = _tokenId;\n', '            }\n', '        } else if (pos == 9) {\n', '            if (slotPet[_owner] != _tokenId) {\n', '                slotPet[_owner] = _tokenId;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _equipDownOne(address _owner, uint16 _index) private {\n', '        if (_index == 0) {\n', '            if (slotWeapon[_owner] != 0) {\n', '                slotWeapon[_owner] = 0;\n', '            }\n', '        } else if (_index == 1) {\n', '            if (slotHat[_owner] != 0) {\n', '                slotHat[_owner] = 0;\n', '            }\n', '        } else if (_index == 2) {\n', '            if (slotCloth[_owner] != 0) {\n', '                slotCloth[_owner] = 0;\n', '            }\n', '        } else if (_index == 3) {\n', '            if (slotPant[_owner] != 0) {\n', '                slotPant[_owner] = 0;\n', '            }\n', '        } else if (_index == 4) {\n', '            if (slotShoes[_owner] != 0) {\n', '                slotShoes[_owner] = 0;\n', '            }\n', '        } else if (_index == 5) {\n', '            if (slotPet[_owner] != 0) {\n', '                slotPet[_owner] = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    function equipUp(uint256[6] _tokens) \n', '        external \n', '        whenNotPaused\n', '    {\n', '        for (uint16 i = 0; i < 6; ++i) {\n', '            if (_tokens[i] > 0) {\n', '                _equipUpOne(msg.sender, _tokens[i]);\n', '            } else {\n', '                _equipDownOne(msg.sender, i);      // tokenId 0 will be equip down\n', '            }  \n', '        }\n', '        EquipChanged(msg.sender);\n', '    }\n', '\n', '    function equipDown(uint256 _tokenId) \n', '        external\n', '        whenNotPaused \n', '    {\n', '        \n', '    }    \n', '\n', '    function isEquiped(address _target, uint256 _tokenId) external view returns(bool) {\n', '        require(_target != address(0));\n', '        require(_tokenId > 0);\n', '\n', '        if (slotWeapon[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '\n', '        if (slotHat[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '\n', '        if (slotCloth[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '\n', '        if (slotPant[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '\n', '        if (slotShoes[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '\n', '        if (slotPet[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool) {\n', '        require(_target != address(0));\n', '        require(_tokenId1 > 0);\n', '        require(_tokenId2 > 0);\n', '        \n', '        uint256 equipTokenId = slotWeapon[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotHat[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotCloth[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotPant[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotShoes[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotPet[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool) {\n', '        require(_target != address(0));\n', '        require(_tokenId1 > 0);\n', '        require(_tokenId2 > 0);\n', '        require(_tokenId3 > 0);\n', '        \n', '        uint256 equipTokenId = slotWeapon[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotHat[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotCloth[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotPant[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotShoes[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotPet[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function getEquipTokens(address _target) external view returns(uint256[6] tokens) {\n', '        tokens[0] = slotWeapon[_target];\n', '        tokens[1] = slotHat[_target];\n', '        tokens[2] = slotCloth[_target];\n', '        tokens[3] = slotPant[_target];\n', '        tokens[4] = slotShoes[_target];\n', '        tokens[5] = slotPet[_target];\n', '    }\n', '}']
['/* ==================================================================== */\n', '/* Copyright (c) 2018 The ether.online Project.  All rights reserved.\n', '/* \n', '/* https://ether.online  The first RPG game of blockchain \n', '/*  \n', '/* authors rickhunter.shen@gmail.com   \n', '/*         ssesunding@gmail.com            \n', '/* ==================================================================== */\n', '\n', 'pragma solidity ^0.4.20;\n', '\n', '/// @title ERC-165 Standard Interface Detection\n', '/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', 'interface ERC165 {\n', '    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n', '}\n', '\n', '/// @title ERC-721 Non-Fungible Token Standard\n', '/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', 'contract ERC721 is ERC165 {\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '    function ownerOf(uint256 _tokenId) external view returns (address);\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) external;\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '    function approve(address _approved, uint256 _tokenId) external;\n', '    function setApprovalForAll(address _operator, bool _approved) external;\n', '    function getApproved(uint256 _tokenId) external view returns (address);\n', '    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n', '}\n', '\n', '/// @title ERC-721 Non-Fungible Token Standard\n', 'interface ERC721TokenReceiver {\n', '\tfunction onERC721Received(address _from, uint256 _tokenId, bytes data) external returns(bytes4);\n', '}\n', '\n', 'contract AccessAdmin {\n', '    bool public isPaused = false;\n', '    address public addrAdmin;  \n', '\n', '    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);\n', '\n', '    function AccessAdmin() public {\n', '        addrAdmin = msg.sender;\n', '    }  \n', '\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == addrAdmin);\n', '        _;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!isPaused);\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused {\n', '        require(isPaused);\n', '        _;\n', '    }\n', '\n', '    function setAdmin(address _newAdmin) external onlyAdmin {\n', '        require(_newAdmin != address(0));\n', '        AdminTransferred(addrAdmin, _newAdmin);\n', '        addrAdmin = _newAdmin;\n', '    }\n', '\n', '    function doPause() external onlyAdmin whenNotPaused {\n', '        isPaused = true;\n', '    }\n', '\n', '    function doUnpause() external onlyAdmin whenPaused {\n', '        isPaused = false;\n', '    }\n', '}\n', '\n', 'contract AccessService is AccessAdmin {\n', '    address public addrService;\n', '    address public addrFinance;\n', '\n', '    modifier onlyService() {\n', '        require(msg.sender == addrService);\n', '        _;\n', '    }\n', '\n', '    modifier onlyFinance() {\n', '        require(msg.sender == addrFinance);\n', '        _;\n', '    }\n', '\n', '    function setService(address _newService) external {\n', '        require(msg.sender == addrService || msg.sender == addrAdmin);\n', '        require(_newService != address(0));\n', '        addrService = _newService;\n', '    }\n', '\n', '    function setFinance(address _newFinance) external {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        require(_newFinance != address(0));\n', '        addrFinance = _newFinance;\n', '    }\n', '\n', '    function withdraw(address _target, uint256 _amount) \n', '        external \n', '    {\n', '        require(msg.sender == addrFinance || msg.sender == addrAdmin);\n', '        require(_amount > 0);\n', '        address receiver = _target == address(0) ? addrFinance : _target;\n', '        uint256 balance = this.balance;\n', '        if (_amount < balance) {\n', '            receiver.transfer(_amount);\n', '        } else {\n', '            receiver.transfer(this.balance);\n', '        }      \n', '    }\n', '}\n', '\n', 'interface IDataMining {\n', '    function getRecommender(address _target) external view returns(address);\n', '    function subFreeMineral(address _target) external returns(bool);\n', '}\n', '\n', 'interface IDataEquip {\n', '    function isEquiped(address _target, uint256 _tokenId) external view returns(bool);\n', '    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);\n', '    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);\n', '}\n', '\n', 'contract Random {\n', '    uint256 _seed;\n', '\n', '    function _rand() internal returns (uint256) {\n', '        _seed = uint256(keccak256(_seed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n', '        return _seed;\n', '    }\n', '\n', '    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {\n', '        return uint256(keccak256(_outSeed, block.blockhash(block.number - 1), block.coinbase, block.difficulty));\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract WarToken is ERC721, AccessAdmin {\n', '    /// @dev The equipment info\n', '    struct Fashion {\n', '        uint16 protoId;     // 0  Equipment ID\n', '        uint16 quality;     // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary\n', '        uint16 pos;         // 2  Slots: 1 Weapon/2 Hat/3 Cloth/4 Pant/5 Shoes/9 Pets\n', '        uint16 health;      // 3  Health\n', '        uint16 atkMin;      // 4  Min attack\n', '        uint16 atkMax;      // 5  Max attack\n', '        uint16 defence;     // 6  Defennse\n', '        uint16 crit;        // 7  Critical rate\n', '        uint16 isPercent;   // 8  Attr value type\n', '        uint16 attrExt1;    // 9  future stat 1\n', '        uint16 attrExt2;    // 10 future stat 2\n', '        uint16 attrExt3;    // 11 future stat 3\n', '    }\n', '\n', '    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n', '    Fashion[] public fashionArray;\n', '\n', '    /// @dev Amount of tokens destroyed\n', '    uint256 destroyFashionCount;\n', '\n', '    /// @dev Equipment token ID vs owner address\n', '    mapping (uint256 => address) fashionIdToOwner;\n', '\n', '    /// @dev Equipments owner by the owner (array)\n', '    mapping (address => uint256[]) ownerToFashionArray;\n', '\n', '    /// @dev Equipment token ID search in owner array\n', '    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n', '\n', '    /// @dev The authorized address for each WAR\n', '    mapping (uint256 => address) fashionIdToApprovals;\n', '\n', '    /// @dev The authorized operators for each address\n', '    mapping (address => mapping (address => bool)) operatorToApprovals;\n', '\n', '    /// @dev Trust contract\n', '    mapping (address => bool) actionContracts;\n', '\n', '    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n', '        actionContracts[_actionAddr] = _useful;\n', '    }\n', '\n', '    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n', '        return actionContracts[_actionAddr];\n', '    }\n', '\n', '    /// @dev This emits when the approved address for an WAR is changed or reaffirmed.\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    /// @dev This emits when an operator is enabled or disabled for an owner.\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '    /// @dev This emits when the equipment ownership changed \n', '    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n', '\n', '    /// @dev This emits when the equipment created\n', '    event CreateFashion(address indexed owner, uint256 tokenId, uint16 protoId, uint16 quality, uint16 pos, uint16 createType);\n', '\n', "    /// @dev This emits when the equipment's attributes changed\n", '    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n', '\n', '    /// @dev This emits when the equipment destroyed\n', '    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n', '    \n', '    function WarToken() public {\n', '        addrAdmin = msg.sender;\n', '        fashionArray.length += 1;\n', '    }\n', '\n', '    // modifier\n', '    /// @dev Check if token ID is valid\n', '    modifier isValidToken(uint256 _tokenId) {\n', '        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n', '        require(fashionIdToOwner[_tokenId] != address(0)); \n', '        _;\n', '    }\n', '\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n', '        _;\n', '    }\n', '\n', '    // ERC721\n', '    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n', '        // ERC165 || ERC721 || ERC165^ERC721\n', '        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n', '    }\n', '        \n', '    function name() public pure returns(string) {\n', '        return "WAR Token";\n', '    }\n', '\n', '    function symbol() public pure returns(string) {\n', '        return "WAR";\n', '    }\n', '\n', '    /// @dev Search for token quantity address\n', '    /// @param _owner Address that needs to be searched\n', '    /// @return Returns token quantity\n', '    function balanceOf(address _owner) external view returns(uint256) {\n', '        require(_owner != address(0));\n', '        return ownerToFashionArray[_owner].length;\n', '    }\n', '\n', '    /// @dev Find the owner of an WAR\n', '    /// @param _tokenId The tokenId of WAR\n', '    /// @return Give The address of the owner of this WAR\n', '    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n', '        return fashionIdToOwner[_tokenId];\n', '    }\n', '\n', '    /// @dev Transfers the ownership of an WAR from one address to another address\n', '    /// @param _from The current owner of the WAR\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The WAR to transfer\n', '    /// @param data Additional data with no specified format, sent in call to `_to`\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n', '        external\n', '        whenNotPaused\n', '    {\n', '        _safeTransferFrom(_from, _to, _tokenId, data);\n', '    }\n', '\n', '    /// @dev Transfers the ownership of an WAR from one address to another address\n', '    /// @param _from The current owner of the WAR\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The WAR to transfer\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n', '        external\n', '        whenNotPaused\n', '    {\n', '        _safeTransferFrom(_from, _to, _tokenId, "");\n', '    }\n', '\n', "    /// @dev Transfer ownership of an WAR, '_to' must be a vaild address, or the WAR will lost\n", '    /// @param _from The current owner of the WAR\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The WAR to transfer\n', '    function transferFrom(address _from, address _to, uint256 _tokenId)\n', '        external\n', '        whenNotPaused\n', '        isValidToken(_tokenId)\n', '        canTransfer(_tokenId)\n', '    {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(_to != address(0));\n', '        require(owner == _from);\n', '        \n', '        _transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Set or reaffirm the approved address for an WAR\n', '    /// @param _approved The new approved WAR controller\n', '    /// @param _tokenId The WAR to approve\n', '    function approve(address _approved, uint256 _tokenId)\n', '        external\n', '        whenNotPaused\n', '    {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n', '\n', '        fashionIdToApprovals[_tokenId] = _approved;\n', '        Approval(owner, _approved, _tokenId);\n', '    }\n', '\n', '    /// @dev Enable or disable approval for a third party ("operator") to manage all your asset.\n', '    /// @param _operator Address to add to the set of authorized operators.\n', '    /// @param _approved True if the operators is approved, false to revoke approval\n', '    function setApprovalForAll(address _operator, bool _approved) \n', '        external \n', '        whenNotPaused\n', '    {\n', '        operatorToApprovals[msg.sender][_operator] = _approved;\n', '        ApprovalForAll(msg.sender, _operator, _approved);\n', '    }\n', '\n', '    /// @dev Get the approved address for a single WAR\n', '    /// @param _tokenId The WAR to find the approved address for\n', '    /// @return The approved address for this WAR, or the zero address if there is none\n', '    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n', '        return fashionIdToApprovals[_tokenId];\n', '    }\n', '\n', '    /// @dev Query if an address is an authorized operator for another address\n', '    /// @param _owner The address that owns the WARs\n', '    /// @param _operator The address that acts on behalf of the owner\n', '    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n', '    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n', '        return operatorToApprovals[_owner][_operator];\n', '    }\n', '\n', '    /// @dev Count WARs tracked by this contract\n', '    /// @return A count of valid WARs tracked by this contract, where each one of\n', '    ///  them has an assigned and queryable owner not equal to the zero address\n', '    function totalSupply() external view returns (uint256) {\n', '        return fashionArray.length - destroyFashionCount - 1;\n', '    }\n', '\n', '    /// @dev Do the real transfer with out any condition checking\n', '    /// @param _from The old owner of this WAR(If created: 0x0)\n', '    /// @param _to The new owner of this WAR \n', '    /// @param _tokenId The tokenId of the WAR\n', '    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n', '        if (_from != address(0)) {\n', '            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n', '            uint256[] storage fsArray = ownerToFashionArray[_from];\n', '            require(fsArray[indexFrom] == _tokenId);\n', '\n', '            // If the WAR is not the element of array, change it to with the last\n', '            if (indexFrom != fsArray.length - 1) {\n', '                uint256 lastTokenId = fsArray[fsArray.length - 1];\n', '                fsArray[indexFrom] = lastTokenId; \n', '                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n', '            }\n', '            fsArray.length -= 1; \n', '            \n', '            if (fashionIdToApprovals[_tokenId] != address(0)) {\n', '                delete fashionIdToApprovals[_tokenId];\n', '            }      \n', '        }\n', '\n', "        // Give the WAR to '_to'\n", '        fashionIdToOwner[_tokenId] = _to;\n', '        ownerToFashionArray[_to].push(_tokenId);\n', '        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n', '        \n', '        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n', '    }\n', '\n', '    /// @dev Actually perform the safeTransferFrom\n', '    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n', '        internal\n', '        isValidToken(_tokenId) \n', '        canTransfer(_tokenId)\n', '    {\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(_to != address(0));\n', '        require(owner == _from);\n', '        \n', '        _transfer(_from, _to, _tokenId);\n', '\n', '        // Do the callback after everything is done to avoid reentrancy attack\n', '        uint256 codeSize;\n', '        assembly { codeSize := extcodesize(_to) }\n', '        if (codeSize == 0) {\n', '            return;\n', '        }\n', '        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n', '        // bytes4(keccak256("onERC721Received(address,uint256,bytes)")) = 0xf0b9e5ba;\n', '        require(retval == 0xf0b9e5ba);\n', '    }\n', '\n', '    //----------------------------------------------------------------------------------------------------------\n', '\n', '    /// @dev Equipment creation\n', '    /// @param _owner Owner of the equipment created\n', '    /// @param _attrs Attributes of the equipment created\n', '    /// @return Token ID of the equipment created\n', '    function createFashion(address _owner, uint16[9] _attrs, uint16 _createType) \n', '        external \n', '        whenNotPaused\n', '        returns(uint256)\n', '    {\n', '        require(actionContracts[msg.sender]);\n', '        require(_owner != address(0));\n', '\n', '        uint256 newFashionId = fashionArray.length;\n', '        require(newFashionId < 4294967296);\n', '\n', '        fashionArray.length += 1;\n', '        Fashion storage fs = fashionArray[newFashionId];\n', '        fs.protoId = _attrs[0];\n', '        fs.quality = _attrs[1];\n', '        fs.pos = _attrs[2];\n', '        if (_attrs[3] != 0) {\n', '            fs.health = _attrs[3];\n', '        }\n', '        \n', '        if (_attrs[4] != 0) {\n', '            fs.atkMin = _attrs[4];\n', '            fs.atkMax = _attrs[5];\n', '        }\n', '       \n', '        if (_attrs[6] != 0) {\n', '            fs.defence = _attrs[6];\n', '        }\n', '        \n', '        if (_attrs[7] != 0) {\n', '            fs.crit = _attrs[7];\n', '        }\n', '\n', '        if (_attrs[8] != 0) {\n', '            fs.isPercent = _attrs[8];\n', '        }\n', '        \n', '        _transfer(0, _owner, newFashionId);\n', '        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _createType);\n', '        return newFashionId;\n', '    }\n', '\n', '    /// @dev One specific attribute of the equipment modified\n', '    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n', '        if (_index == 3) {\n', '            _fs.health = _val;\n', '        } else if(_index == 4) {\n', '            _fs.atkMin = _val;\n', '        } else if(_index == 5) {\n', '            _fs.atkMax = _val;\n', '        } else if(_index == 6) {\n', '            _fs.defence = _val;\n', '        } else if(_index == 7) {\n', '            _fs.crit = _val;\n', '        } else if(_index == 9) {\n', '            _fs.attrExt1 = _val;\n', '        } else if(_index == 10) {\n', '            _fs.attrExt2 = _val;\n', '        } else if(_index == 11) {\n', '            _fs.attrExt3 = _val;\n', '        }\n', '    }\n', '\n', '    /// @dev Equiment attributes modified (max 4 stats modified)\n', '    /// @param _tokenId Equipment Token ID\n', '    /// @param _idxArray Stats order that must be modified\n', '    /// @param _params Stat value that must be modified\n', '    /// @param _changeType Modification type such as enhance, socket, etc.\n', '    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n', '        external \n', '        whenNotPaused\n', '        isValidToken(_tokenId) \n', '    {\n', '        require(actionContracts[msg.sender]);\n', '\n', '        Fashion storage fs = fashionArray[_tokenId];\n', '        if (_idxArray[0] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n', '        }\n', '\n', '        if (_idxArray[1] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n', '        }\n', '\n', '        if (_idxArray[2] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n', '        }\n', '\n', '        if (_idxArray[3] > 0) {\n', '            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n', '        }\n', '\n', '        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n', '    }\n', '\n', '    /// @dev Equipment destruction\n', '    /// @param _tokenId Equipment Token ID\n', '    /// @param _deleteType Destruction type, such as craft\n', '    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n', '        external \n', '        whenNotPaused\n', '        isValidToken(_tokenId) \n', '    {\n', '        require(actionContracts[msg.sender]);\n', '\n', '        address _from = fashionIdToOwner[_tokenId];\n', '        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n', '        uint256[] storage fsArray = ownerToFashionArray[_from]; \n', '        require(fsArray[indexFrom] == _tokenId);\n', '\n', '        if (indexFrom != fsArray.length - 1) {\n', '            uint256 lastTokenId = fsArray[fsArray.length - 1];\n', '            fsArray[indexFrom] = lastTokenId; \n', '            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n', '        }\n', '        fsArray.length -= 1; \n', '\n', '        fashionIdToOwner[_tokenId] = address(0);\n', '        delete fashionIdToOwnerIndex[_tokenId];\n', '        destroyFashionCount += 1;\n', '\n', '        Transfer(_from, 0, _tokenId);\n', '\n', '        DeleteFashion(_from, _tokenId, _deleteType);\n', '    }\n', '\n', '    /// @dev Safe transfer by trust contracts\n', '    function safeTransferByContract(uint256 _tokenId, address _to) \n', '        external\n', '        whenNotPaused\n', '    {\n', '        require(actionContracts[msg.sender]);\n', '\n', '        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n', '        address owner = fashionIdToOwner[_tokenId];\n', '        require(owner != address(0));\n', '        require(_to != address(0));\n', '        require(owner != _to);\n', '\n', '        _transfer(owner, _to, _tokenId);\n', '    }\n', '\n', '    //----------------------------------------------------------------------------------------------------------\n', '\n', '    /// @dev Get fashion attrs by tokenId\n', '    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[12] datas) {\n', '        Fashion storage fs = fashionArray[_tokenId];\n', '        datas[0] = fs.protoId;\n', '        datas[1] = fs.quality;\n', '        datas[2] = fs.pos;\n', '        datas[3] = fs.health;\n', '        datas[4] = fs.atkMin;\n', '        datas[5] = fs.atkMax;\n', '        datas[6] = fs.defence;\n', '        datas[7] = fs.crit;\n', '        datas[8] = fs.isPercent;\n', '        datas[9] = fs.attrExt1;\n', '        datas[10] = fs.attrExt2;\n', '        datas[11] = fs.attrExt3;\n', '    }\n', '\n', '    /// @dev Get tokenIds and flags by owner\n', '    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n', '        require(_owner != address(0));\n', '        uint256[] storage fsArray = ownerToFashionArray[_owner];\n', '        uint256 length = fsArray.length;\n', '        tokens = new uint256[](length);\n', '        flags = new uint32[](length);\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            tokens[i] = fsArray[i];\n', '            Fashion storage fs = fashionArray[fsArray[i]];\n', '            flags[i] = uint32(uint32(fs.protoId) * 100 + uint32(fs.quality) * 10 + fs.pos);\n', '        }\n', '    }\n', '\n', '    /// @dev WAR token info returned based on Token ID transfered (64 at most)\n', '    function getFashionsAttrs(uint256[] _tokens) external view returns(uint16[] attrs) {\n', '        uint256 length = _tokens.length;\n', '        require(length <= 64);\n', '        attrs = new uint16[](length * 11);\n', '        uint256 tokenId;\n', '        uint256 index;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            tokenId = _tokens[i];\n', '            if (fashionIdToOwner[tokenId] != address(0)) {\n', '                index = i * 11;\n', '                Fashion storage fs = fashionArray[tokenId];\n', '                attrs[index] = fs.health;\n', '                attrs[index + 1] = fs.atkMin;\n', '                attrs[index + 2] = fs.atkMax;\n', '                attrs[index + 3] = fs.defence;\n', '                attrs[index + 4] = fs.crit;\n', '                attrs[index + 5] = fs.isPercent;\n', '                attrs[index + 6] = fs.attrExt1;\n', '                attrs[index + 7] = fs.attrExt2;\n', '                attrs[index + 8] = fs.attrExt3;\n', '            }   \n', '        }\n', '    }\n', '}\n', '\n', 'contract DataEquip is AccessService, IDataEquip {\n', '    event EquipChanged(address indexed _target);\n', '\n', '    /// @dev WarToken(NFT) contract address\n', '    WarToken public tokenContract;\n', '    mapping (address => uint256) public slotWeapon;\n', '    mapping (address => uint256) public slotHat;\n', '    mapping (address => uint256) public slotCloth;\n', '    mapping (address => uint256) public slotPant;\n', '    mapping (address => uint256) public slotShoes;\n', '    mapping (address => uint256) public slotPet;\n', '\n', '    function DataEquip(address _nftAddr) public {\n', '        addrAdmin = msg.sender;\n', '        addrService = msg.sender;\n', '        addrFinance = msg.sender;\n', '\n', '        tokenContract = WarToken(_nftAddr);\n', '    }\n', '\n', '    function _equipUpOne(address _owner, uint256 _tokenId) private {\n', '        require(tokenContract.ownerOf(_tokenId) == _owner);\n', '        uint16[12] memory attrs = tokenContract.getFashion(_tokenId);\n', '        uint16 pos = attrs[2];\n', '        if (pos == 1) {\n', '            if (slotWeapon[_owner] != _tokenId) {\n', '                slotWeapon[_owner] = _tokenId;\n', '            }\n', '        } else if (pos == 2) {\n', '            if (slotHat[_owner] != _tokenId) {\n', '                slotHat[_owner] = _tokenId;\n', '            }\n', '        } else if (pos == 3) {\n', '            if (slotCloth[_owner] != _tokenId) {\n', '                slotCloth[_owner] = _tokenId;\n', '            }\n', '        } else if (pos == 4) {\n', '            if (slotPant[_owner] != _tokenId) {\n', '                slotPant[_owner] = _tokenId;\n', '            }\n', '        } else if (pos == 5) {\n', '            if (slotShoes[_owner] != _tokenId) {\n', '                slotShoes[_owner] = _tokenId;\n', '            }\n', '        } else if (pos == 9) {\n', '            if (slotPet[_owner] != _tokenId) {\n', '                slotPet[_owner] = _tokenId;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _equipDownOne(address _owner, uint16 _index) private {\n', '        if (_index == 0) {\n', '            if (slotWeapon[_owner] != 0) {\n', '                slotWeapon[_owner] = 0;\n', '            }\n', '        } else if (_index == 1) {\n', '            if (slotHat[_owner] != 0) {\n', '                slotHat[_owner] = 0;\n', '            }\n', '        } else if (_index == 2) {\n', '            if (slotCloth[_owner] != 0) {\n', '                slotCloth[_owner] = 0;\n', '            }\n', '        } else if (_index == 3) {\n', '            if (slotPant[_owner] != 0) {\n', '                slotPant[_owner] = 0;\n', '            }\n', '        } else if (_index == 4) {\n', '            if (slotShoes[_owner] != 0) {\n', '                slotShoes[_owner] = 0;\n', '            }\n', '        } else if (_index == 5) {\n', '            if (slotPet[_owner] != 0) {\n', '                slotPet[_owner] = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    function equipUp(uint256[6] _tokens) \n', '        external \n', '        whenNotPaused\n', '    {\n', '        for (uint16 i = 0; i < 6; ++i) {\n', '            if (_tokens[i] > 0) {\n', '                _equipUpOne(msg.sender, _tokens[i]);\n', '            } else {\n', '                _equipDownOne(msg.sender, i);      // tokenId 0 will be equip down\n', '            }  \n', '        }\n', '        EquipChanged(msg.sender);\n', '    }\n', '\n', '    function equipDown(uint256 _tokenId) \n', '        external\n', '        whenNotPaused \n', '    {\n', '        \n', '    }    \n', '\n', '    function isEquiped(address _target, uint256 _tokenId) external view returns(bool) {\n', '        require(_target != address(0));\n', '        require(_tokenId > 0);\n', '\n', '        if (slotWeapon[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '\n', '        if (slotHat[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '\n', '        if (slotCloth[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '\n', '        if (slotPant[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '\n', '        if (slotShoes[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '\n', '        if (slotPet[_target] == _tokenId) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool) {\n', '        require(_target != address(0));\n', '        require(_tokenId1 > 0);\n', '        require(_tokenId2 > 0);\n', '        \n', '        uint256 equipTokenId = slotWeapon[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotHat[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotCloth[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotPant[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotShoes[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotPet[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool) {\n', '        require(_target != address(0));\n', '        require(_tokenId1 > 0);\n', '        require(_tokenId2 > 0);\n', '        require(_tokenId3 > 0);\n', '        \n', '        uint256 equipTokenId = slotWeapon[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotHat[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotCloth[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotPant[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotShoes[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '\n', '        equipTokenId = slotPet[_target];\n', '        if (equipTokenId == _tokenId1 || equipTokenId == _tokenId2 || equipTokenId == _tokenId3) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function getEquipTokens(address _target) external view returns(uint256[6] tokens) {\n', '        tokens[0] = slotWeapon[_target];\n', '        tokens[1] = slotHat[_target];\n', '        tokens[2] = slotCloth[_target];\n', '        tokens[3] = slotPant[_target];\n', '        tokens[4] = slotShoes[_target];\n', '        tokens[5] = slotPet[_target];\n', '    }\n', '}']
