['pragma solidity ^0.4.17;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '    function transferOwnership(address newOwner) public onlyOwner returns (bool) {\n', '        require(newOwner != address(0));\n', '        require(newOwner != address(this));\n', '        require(newOwner != owner);  \n', '        OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    uint256 public totalSupply;\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '      */\n', '    function transfer(address _to, uint256 _value) public returns (bool){\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '}\n', '\n', '// ************************ new Standard  ERC20 token with increase and decraese approval ***********************\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '//  *************************************************************************************************************\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '  /**\n', '  * @dev Function to mint tokens\n', '  * @param _to The address that will recieve the minted tokens.\n', '    * @param _amount The amount of tokens to mint.\n', '    * @return A boolean that indicates if the operation was successful.\n', '   */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply = totalSupply.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Transfer(0X0, _to, _amount);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev Function to stop minting new tokens.\n', '  * @return True if the operation was successful.\n', '   */\n', '    function finishMinting() onlyOwner public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract MooToken is MintableToken {\n', '  // Coin Properties\n', '    string public name = "MOO token";\n', '    string public symbol = "XMOO";\n', '    uint256 public decimals = 18;\n', '\n', '    event EmergencyERC20DrainWasCalled(address tokenaddress, uint256 _amount);\n', '\n', '  // Special propeties\n', '    bool public tradingStarted = false;\n', '\n', '  /**\n', '  * @dev modifier that throws if trading has not started yet\n', '   */\n', '    modifier hasStartedTrading() {\n', '        require(tradingStarted);\n', '        _;\n', '    }\n', '\n', '  /**\n', '  * @dev Allows the owner to enable the trading. This can not be undone\n', '  */\n', '    function startTrading() public onlyOwner returns(bool) {\n', '        require(!tradingStarted);\n', '        tradingStarted = true;\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev Allows anyone to transfer the MOO tokens once trading has started\n', '  * @param _to the recipient address of the tokens.\n', '  * @param _value number of tokens to be transfered.\n', '   */\n', '    function transfer(address _to, uint _value) hasStartedTrading public returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '  /**\n', '  * @dev Allows anyone to transfer the MOO tokens once trading has started\n', '  * @param _from address The address which you want to send tokens from\n', '  * @param _to address The address which you want to transfer to\n', '  * @param _value uint the amout of tokens to be transfered\n', '   */\n', '    function transferFrom(address _from, address _to, uint _value) hasStartedTrading public returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    function emergencyERC20Drain( ERC20 oddToken, uint amount ) public onlyOwner returns(bool){\n', '        oddToken.transfer(owner, amount);\n', '        EmergencyERC20DrainWasCalled(oddToken, amount);\n', '        return true;\n', '    }\n', '\n', '    function isOwner(address _owner) public view returns(bool){\n', '        if (owner == _owner) {\n', '            return true;    \n', '    } else {\n', '            return false;    \n', '    } \n', '    }\n', '}\n', '\n', '\n', 'contract MooTokenSale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '    MooToken public token;\n', '    uint256 public decimals;\n', '    uint256 public oneCoin;\n', '\n', '  // start and end block where investments are allowed \n', '    uint256 public PRESALE_STARTTIMESTAMP;\n', '    uint256 public PRESALE_ENDTIMESTAMP;\n', '\n', '  // start and end block where investments are allowed \n', '    uint256 public PUBLICSALE_STARTTIMESTAMP;\n', '    uint256 public PUBLICSALE_ENDTIMESTAMP;\n', '\n', '  // address where funds are collected\n', '    address public multiSig;\n', '\n', '    function setWallet(address _newWallet) public onlyOwner returns (bool) {\n', '        multiSig = _newWallet;\n', '        WalletUpdated(_newWallet);\n', '        return true;\n', '    } \n', '\n', '    uint256 rate; // how many token units a buyer gets per wei\n', '    uint256 public minContribution = 0.0001 ether;  // minimum contributio to participate in tokensale\n', '    uint256 public maxContribution = 1000 ether;\n', '    uint256 public tokensOfTeamAndAdvisors;\n', '\n', '  // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '  // amount of raised tokens\n', '    uint256 public tokenRaised;\n', '\n', '  // maximum amount of tokens being created\n', '    uint256 public maxTokens;\n', '\n', '  // maximum amount of tokens for sale\n', '    uint256 public tokensForSale;  \n', '  // maximum amount of tokens for presale\n', '  // uint256 public tokensForPreSale; \n', '\n', '  // number of participants in presale\n', '    uint256 public numberOfContributors = 0;\n', '\n', '  //  for whitelist\n', '    address public cs;\n', '  //  for whitelist AND placement\n', '    address public Admin;\n', '\n', '  //  for rate\n', '    uint public basicRate;\n', '\n', '  // for maximum token what one contributor can buy\n', '    uint public maxTokenCap;\n', '  // for suspension\n', '    bool public suspended;\n', ' \n', '\n', '    mapping (address => bool) public authorised; // just to annoy the heck out of americans\n', '    mapping (address => uint) adminCallMintToTeamCount; // count to admin only once can call MintToTeamAndAdvisors\n', '\n', '    event TokenPurchase(address indexed purchaser, uint256 amount, uint256 _tokens);\n', '    event TokenPlaced(address indexed beneficiary, uint256 _tokens);\n', '    event SaleClosed();\n', '    event TradingStarted();\n', '    event Closed();\n', '    event AdminUpdated(address newAdminAddress);\n', '    event CsUpdated(address newCSAddress);\n', '    event EmergencyERC20DrainWasCalled(address tokenaddress, uint256 _amount);\n', '    event AuthoriseStatusUpdated(address accounts, bool status);\n', '    event SaleResumed();\n', '    event SaleSuspended();\n', '    event WalletUpdated(address newwallet);\n', '   \n', '\n', '    function MooTokenSale() public {\n', '        PRESALE_STARTTIMESTAMP = 1516896000;\n', '        // 1516896000 converts to Friday January 26, 2018 00:00:00 (am) in time zone Asia/Singapore (+08)\n', '        PRESALE_ENDTIMESTAMP = 1522209600;\n', '        //1522209600 converts to Wednesday March 28, 2018 12:00:00 (pm) in time zone Asia/Singapore (+08)\n', '        PUBLICSALE_STARTTIMESTAMP = 1522382400;\n', '        //  1522382400 converts to Friday March 30, 2018 12:00:00 (pm) in time zone Asia/Singapore (+08)\n', '        PUBLICSALE_ENDTIMESTAMP = 1525060800; \n', '        // 1525060800 converts to Monday April 30, 2018 12:00:00 (pm) in time zone Asia/Singapore (+08)\n', '      \n', '        multiSig = 0x90420B8aef42F856a0AFB4FFBfaA57405FB190f3;\n', '   \n', '        token = new MooToken();\n', '        decimals = token.decimals();\n', '        oneCoin = 10 ** decimals;\n', '        maxTokens = 500 * (10**6) * oneCoin;\n', '        tokensForSale = 200260050 * oneCoin; // 200 260 050\n', '        basicRate = 1800;\n', '        rate = basicRate;\n', '        tokensOfTeamAndAdvisors = 99739950 * oneCoin;  // it was missing the onecoin , 99 739 950\n', '        maxTokenCap = basicRate * maxContribution * 11/10;\n', '        suspended = false;\n', '    }\n', '\n', '\n', '    function currentTime() public constant returns (uint256) {\n', '        return now;\n', '    }\n', '\n', '    /**\n', '    * @dev Calculates the rate with bonus in the publis sale\n', '    */\n', '    function getCurrentRate() public view returns (uint256) {\n', '    \n', '        if (currentTime() <= PRESALE_ENDTIMESTAMP) {\n', '            return basicRate * 5/4;\n', '        }\n', '\n', '        if (tokenRaised <= 10000000 * oneCoin) {\n', '            return basicRate * 11/10;\n', '    } else if (tokenRaised <= 20000000 * oneCoin) {\n', '        return basicRate * 1075/1000;\n', '    } else if (tokenRaised <= 30000000 * oneCoin) {\n', '        return basicRate * 105/100;\n', '    } else {\n', '        return basicRate ;\n', '    }\n', '    }\n', '\n', '\n', '  // @return true if crowdsale event has ended\n', '    function hasEnded() public constant returns (bool) {\n', '        if (currentTime() > PUBLICSALE_ENDTIMESTAMP)\n', '            return true; // if  the time is over\n', '        if (tokenRaised >= tokensForSale)\n', '            return true; // if we reach the tokensForSale \n', '        return false;\n', '    }\n', '\n', '// Allows admin to suspend the sale.\n', '    function suspend() external onlyAdmin returns(bool) {\n', '        if (suspended == true) {\n', '            return false;\n', '        }\n', '        suspended = true;\n', '        SaleSuspended();\n', '        return true;\n', '    }\n', '\n', '\n', '// Allows admin to resume the sale.\n', '    function resume() external onlyAdmin returns(bool) {\n', '        if (suspended == false) {\n', '            return false;\n', '        }\n', '        suspended = false;\n', '        SaleResumed();\n', '        return true;\n', '    }\n', '\n', '  \n', '  // @dev throws if person sending is not contract Admin or cs role\n', '    modifier onlyCSorAdmin() {\n', '        require((msg.sender == Admin) || (msg.sender==cs));\n', '        _;\n', '    }\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == Admin);\n', '        _;\n', '    }\n', '\n', '  /**\n', '  * @dev throws if person sending is not authorised or sends nothing or we are out of time\n', '  */\n', '    modifier onlyAuthorised() {\n', '        require (authorised[msg.sender]);\n', '        require ((currentTime() >= PRESALE_STARTTIMESTAMP && currentTime() <= PRESALE_ENDTIMESTAMP ) || (currentTime() >= PUBLICSALE_STARTTIMESTAMP && currentTime() <= PUBLICSALE_ENDTIMESTAMP ));\n', '        require (!(hasEnded()));\n', '        require (multiSig != 0x0);\n', '        require (msg.value > 1 finney);\n', '        require(!suspended);\n', '        require(tokensForSale > tokenRaised); // check we are not over the number of tokensForSale\n', '        _;\n', '    }\n', '\n', '  /**\n', '  * @dev authorise an account to participate\n', '  */\n', '    function authoriseAccount(address whom) onlyCSorAdmin public returns(bool) {\n', '        require(whom != address(0));\n', '        require(whom != address(this));\n', '        authorised[whom] = true;\n', '        AuthoriseStatusUpdated(whom, true);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev authorise a lot of accounts in one go\n', '  */\n', '    function authoriseManyAccounts(address[] many) onlyCSorAdmin public returns(bool) {\n', '        require(many.length > 0);  \n', '        for (uint256 i = 0; i < many.length; i++) {\n', '            require(many[i] != address(0));\n', '            require(many[i] != address(this));  \n', '            authorised[many[i]] = true;\n', '            AuthoriseStatusUpdated(many[i], true);\n', '        }\n', '        return true;            \n', '    }\n', '\n', '  /**\n', '  * @dev ban an account from participation (default)\n', '  */\n', '    function blockAccount(address whom) onlyCSorAdmin public returns(bool){\n', '        require(whom != address(0));\n', '        require(whom != address(this));\n', '        authorised[whom] = false;\n', '        AuthoriseStatusUpdated(whom, false);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev set a new CS representative\n', '  */\n', '    function setCS(address newCS) onlyOwner public returns (bool){\n', '        require(newCS != address(0));\n', '        require(newCS != address(this));\n', '        require(newCS != owner);  \n', '        cs = newCS;\n', '        CsUpdated(newCS);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev set a new Admin representative\n', '  */\n', '    function setAdmin(address newAdmin) onlyOwner public returns (bool) {\n', '        require(newAdmin != address(0));\n', '        require(newAdmin != address(this));\n', '        require(newAdmin != owner);  \n', '        Admin = newAdmin;\n', '        AdminUpdated(newAdmin);\n', '        return true;\n', '    }\n', '\n', '  /**\n', '  * @dev set a new Rate BE CAREFULL: when we calculate the bonus better if we have&#39;nt remainder \n', '  */\n', '    function setBasicRate(uint newRate) onlyAdmin public returns (bool){\n', '        require(0 < newRate && newRate < 5000);\n', '        basicRate = newRate;\n', '        return true;\n', '    }\n', '\n', '    function setMaxTokenCap(uint _newMaxTokenCap) onlyAdmin public returns (bool){\n', '        require(0 < _newMaxTokenCap && _newMaxTokenCap < tokensForSale);\n', '        maxTokenCap = _newMaxTokenCap;\n', '        return true;\n', '    }\n', '  \n', '    function isOwner(address _owner) public view returns(bool){\n', '        if (owner == _owner) {\n', '            return true;    \n', '    } else {\n', '            return false;    \n', '    } \n', '    }\n', '  \n', '    function isAdmin(address _admin) public view returns(bool){\n', '        if (Admin == _admin) {\n', '            return true;    \n', '    } else {\n', '            return false;    \n', '    } \n', '    }\n', '\n', '    function isCS(address _cs) public view returns(bool){\n', '        if (cs == _cs) {\n', '            return true;    \n', '    } else {\n', '            return false;    \n', '    } \n', '    }\n', '\n', '/**\n', '  * @dev  only Admin can send tokens manually\n', '  */\n', '    function placeTokens(address beneficiary, uint256 _tokens) onlyAdmin public returns(bool){\n', '\n', '    // *************************************************************************************************************  \n', '        require(tokenRaised.add(_tokens) <= tokensForSale); // we dont want to overmint ********************************\n', '    // *************************************************************************************************************\n', '\n', '        require(_tokens != 0);\n', '        require(!hasEnded());\n', '        if (token.balanceOf(beneficiary) == 0) {\n', '            numberOfContributors++;\n', '        }\n', '        tokenRaised = tokenRaised.add(_tokens); // so we can go slightly over\n', '        token.mint(beneficiary, _tokens);\n', '        TokenPlaced(beneficiary, _tokens);\n', '        return true;\n', '    }\n', '\n', '  // low level token purchase function\n', '    function buyTokens(address beneficiary, uint256 amount) onlyAuthorised internal returns (bool){\n', '      \n', '        rate = getCurrentRate();\n', '      // check we are in pre sale , bonus 25%\n', '        if (currentTime() <= PRESALE_ENDTIMESTAMP) {\n', '            minContribution = 50 ether;\n', '            maxContribution = 1000 ether;\n', '    // we are in publicsale bonus depends on the sold out tokens. we set the rate in the setTier\n', '    } else {\n', '            minContribution = 0.2 ether;\n', '            maxContribution = 20 ether;\n', '        }\n', '\n', '    //check minimum and maximum amount\n', '        require(msg.value >= minContribution);\n', '        require(msg.value <= maxContribution);\n', '    \n', '    // Calculate token amount to be purchased    \n', '        uint256 tokens = amount.mul(rate);\n', '   \n', '   \n', '    // *************************************************************************************************************\n', '        require(tokenRaised.add(tokens) <= tokensForSale); //if dont want to overmint ******************************\n', '    // *************************************************************************************************************\n', '        require(token.balanceOf(beneficiary) + tokens <= maxTokenCap); // limit of tokens what a buyer can buy *****\n', '    //  ************************************************************************************************************\n', '\n', '\n', '    // update state\n', '        weiRaised = weiRaised.add(amount);\n', '        if (token.balanceOf(beneficiary) == 0) {\n', '            numberOfContributors++;\n', '        }\n', '        tokenRaised = tokenRaised.add(tokens); // so we can go slightly over\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(beneficiary, amount, tokens);\n', '        multiSig.transfer(this.balance); // better in case any other ether ends up here\n', '        return true;\n', '    }\n', '\n', '  // transfer ownership of the token to the owner of the presale contract\n', '    function finishSale() public onlyOwner {\n', '        require(hasEnded());\n', '    // assign the rest of the 300 M tokens to the reserve\n', '        uint unassigned;    \n', '        if(tokensForSale > tokenRaised) {\n', '            unassigned = tokensForSale.sub(tokenRaised);\n', '            tokenRaised = tokenRaised.add(unassigned);\n', '            token.mint(multiSig,unassigned);\n', '            TokenPlaced(multiSig,unassigned);\n', '    }\n', '        SaleClosed();\n', '        token.startTrading(); \n', '        TradingStarted();\n', '    // from now everyone can trade the tokens  and the owner of the tokencontract stay the salecontract\n', '    }\n', ' \n', '/**\n', '*****************************************************************************************\n', '*****************************************************************************************\n', '*    SPECIAL PART START\n', '*****************************************************************************************\n', '*****************************************************************************************\n', '  * @dev only Admin can mint once the given amount in the given time\n', '  * tokensOfTeamAndAdvisors was given by consumer\n', '  * multiSig was given by consumer\n', '*****************************************************************************************\n', '*****************************************************************************************\n', ' */\n', '    function mintToTeamAndAdvisors() public onlyAdmin {\n', '        require(hasEnded());\n', '        require(adminCallMintToTeamCount[msg.sender] == 0); // count to admin only once can call MintToTeamAndAdvisors\n', '        require(1535644800 <= currentTime() && currentTime() <= 1535731200);  // Admin have 24h to call this function\n', '      //1535644800 converts to Friday August 31, 2018 00:00:00 (am) in time zone Asia/Singapore (+08)\n', '      //1535731200 converts to Saturday September 01, 2018 00:00:00 (am) in time zone Asia/Singapore (+08)\n', '        adminCallMintToTeamCount[msg.sender]++; \n', '        tokenRaised = tokenRaised.add(tokensOfTeamAndAdvisors);\n', '        token.mint(multiSig,tokensOfTeamAndAdvisors);\n', '        TokenPlaced(multiSig, tokensOfTeamAndAdvisors);\n', '    }\n', ' /**\n', '*****************************************************************************************\n', '*****************************************************************************************\n', '  * @dev only Admin can mint from "SaleClosed" to "Closed" \n', '  * _tokens given by client (limit if we reach the maxTokens)\n', '  * multiSig was given by client\n', '*****************************************************************************************\n', '*****************************************************************************************\n', ' */ \n', '    function afterSaleMinting(uint _tokens) public onlyAdmin {\n', '        require(hasEnded());\n', '        uint limit = maxTokens.sub(tokensOfTeamAndAdvisors); \n', '     // we dont want to mint the reserved tokens for Team and Advisors\n', '        require(tokenRaised.add(_tokens) <= limit);  \n', '        tokenRaised = tokenRaised.add(_tokens);\n', '        token.mint(multiSig,_tokens);\n', '        TokenPlaced(multiSig, _tokens);\n', '    }  \n', '/**\n', '*****************************************************************************************\n', '*****************************************************************************************\n', '  * @dev only Owner can call after the sale\n', '  * unassigned , all missing tokens will be minted\n', '  * multiSig was given by client\n', '  * finish minting and transfer ownership of token\n', '*****************************************************************************************\n', '*****************************************************************************************\n', ' */\n', '    function close() public onlyOwner {\n', '        require(1535731200 <= currentTime());  // only after the Aug31\n', '        uint unassigned;\n', '        if( maxTokens > tokenRaised) {\n', '            unassigned = maxTokens.sub(tokenRaised);\n', '            tokenRaised = tokenRaised.add(unassigned);\n', '            token.mint(multiSig,unassigned);\n', '            TokenPlaced(multiSig,unassigned);\n', '            multiSig.transfer(this.balance); // just in case if we have ether in the contarct\n', '        }\n', '        token.finishMinting();\n', '        token.transferOwnership(owner);\n', '        Closed();\n', '    }\n', '/**\n', '*****************************************************************************************\n', '*****************************************************************************************\n', '  * END OF THE SPECIAL PART\n', '*****************************************************************************************\n', '*****************************************************************************************\n', ' */\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '    function () public payable {\n', '        buyTokens(msg.sender, msg.value);\n', '    }\n', '\n', '  // emergency if the contarct get ERC20 tokens\n', '    function emergencyERC20Drain( ERC20 oddToken, uint amount ) public onlyCSorAdmin returns(bool){\n', '        oddToken.transfer(owner, amount);\n', '        EmergencyERC20DrainWasCalled(oddToken, amount);\n', '        return true;\n', '    }\n', '\n', '}']