['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    @title Provides support and utilities for contract ownership\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', '    /*\n', '        @dev constructor\n', '    */\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /*\n', '        @dev allows execution by the owner only\n', '    */\n', '    modifier ownerOnly {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /*\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /*\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract BatchTransfer is Ownable {\n', '\n', '    /*\n', '        @dev constructor\n', '\n', '    */\n', '    constructor () public Ownable(msg.sender) {}\n', '\n', '    function batchTransfer(address[] _destinations, uint256[] _amounts) \n', '        public\n', '        ownerOnly()\n', '        {\n', '            require(_destinations.length == _amounts.length);\n', '\n', '            for (uint i = 0; i < _destinations.length; i++) {\n', '                if (_destinations[i] != 0x0) {\n', '                    _destinations[i].transfer(_amounts[i]);\n', '                }\n', '            }\n', '        }\n', '\n', '    function batchTransfer(address[] _destinations, uint256 _amount) \n', '        public\n', '        ownerOnly()\n', '        {\n', '            require(_destinations.length > 0);\n', '\n', '            for (uint i = 0; i < _destinations.length; i++) {\n', '                if (_destinations[i] != 0x0) {\n', '                    _destinations[i].transfer(_amount);\n', '                }\n', '            }\n', '        }\n', '        \n', '    function transfer(address _destination, uint256 _amount)\n', '        public\n', '        ownerOnly()\n', '        {\n', '            require(_destination != 0x0 && _amount > 0);\n', '            _destination.transfer(_amount);\n', '        }\n', '\n', '    function transferAllToOwner()\n', '        public\n', '        ownerOnly()\n', '        {\n', '            address(this).transfer(address(this).balance);\n', '        }\n', '        \n', '    function() public payable { }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/*\n', '    @title Provides support and utilities for contract ownership\n', '*/\n', 'contract Ownable {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address _prevOwner, address _newOwner);\n', '\n', '    /*\n', '        @dev constructor\n', '    */\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /*\n', '        @dev allows execution by the owner only\n', '    */\n', '    modifier ownerOnly {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /*\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /*\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', 'contract BatchTransfer is Ownable {\n', '\n', '    /*\n', '        @dev constructor\n', '\n', '    */\n', '    constructor () public Ownable(msg.sender) {}\n', '\n', '    function batchTransfer(address[] _destinations, uint256[] _amounts) \n', '        public\n', '        ownerOnly()\n', '        {\n', '            require(_destinations.length == _amounts.length);\n', '\n', '            for (uint i = 0; i < _destinations.length; i++) {\n', '                if (_destinations[i] != 0x0) {\n', '                    _destinations[i].transfer(_amounts[i]);\n', '                }\n', '            }\n', '        }\n', '\n', '    function batchTransfer(address[] _destinations, uint256 _amount) \n', '        public\n', '        ownerOnly()\n', '        {\n', '            require(_destinations.length > 0);\n', '\n', '            for (uint i = 0; i < _destinations.length; i++) {\n', '                if (_destinations[i] != 0x0) {\n', '                    _destinations[i].transfer(_amount);\n', '                }\n', '            }\n', '        }\n', '        \n', '    function transfer(address _destination, uint256 _amount)\n', '        public\n', '        ownerOnly()\n', '        {\n', '            require(_destination != 0x0 && _amount > 0);\n', '            _destination.transfer(_amount);\n', '        }\n', '\n', '    function transferAllToOwner()\n', '        public\n', '        ownerOnly()\n', '        {\n', '            address(this).transfer(address(this).balance);\n', '        }\n', '        \n', '    function() public payable { }\n', '}']
