['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// SencTokenSale - SENC Token Sale Contract\n', '//\n', '// Copyright (c) 2018 InfoCorp Technologies Pte Ltd.\n', '// http://www.sentinel-chain.org/\n', '//\n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// The SENC Token Sale is organised as follows:\n', '// 1. 10% (50,000,000) of total supply will be minted and sent to founding team weallet.\n', '// 2. 20% (100,000,000) of total supply will be minted and sent to early supporter wallet.\n', '// 3. 20% (100,000,000) of total supply will be minted and sent to presale wallet.\n', '// 4. 20% (100,000,000) of total supply will be available for minting and purchase by public.\n', '// 5. 30% (150,000,000) of total supply will be minted and sent to treaury wallet.\n', '// 6. Public sale is designed to be made available in batches.\n', '// \n', '// Tokens can only be purchased by contributors depending on the batch that\n', '// contributors are assigned to in the WhiteListed smart contract to prevent a\n', '// gas war. Each batch will be assigned a timestamp. Contributors can only \n', '// make purchase once the current timestamp on the main net is above the \n', '// batch&#39;s assigned timestamp.\n', '//    - batch 0: start_date 00:01   (guaranteed allocations)\n', '//    - batch 1: start_date+1 00:01 (guaranteed allocations)\n', '//    - batch 2: start_date+2 00:01 (guaranteed and non-guaranteed allocations)\n', '//    - batch 3: start_date+2 12:01 (guaranteed and non-guaranteed allocations)\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', ' \n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract OperatableBasic {\n', '    function setPrimaryOperator (address addr) public;\n', '    function setSecondaryOperator (address addr) public;\n', '    function isPrimaryOperator(address addr) public view returns (bool);\n', '    function isSecondaryOperator(address addr) public view returns (bool);\n', '}\n', '\n', 'contract Operatable is Ownable, OperatableBasic {\n', '    address public primaryOperator;\n', '    address public secondaryOperator;\n', '\n', '    modifier canOperate() {\n', '        require(msg.sender == primaryOperator || msg.sender == secondaryOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Operatable() public {\n', '        primaryOperator = owner;\n', '        secondaryOperator = owner;\n', '    }\n', '\n', '    function setPrimaryOperator (address addr) public onlyOwner {\n', '        primaryOperator = addr;\n', '    }\n', '\n', '    function setSecondaryOperator (address addr) public onlyOwner {\n', '        secondaryOperator = addr;\n', '    }\n', '\n', '    function isPrimaryOperator(address addr) public view returns (bool) {\n', '        return (addr == primaryOperator);\n', '    }\n', '\n', '    function isSecondaryOperator(address addr) public view returns (bool) {\n', '        return (addr == secondaryOperator);\n', '    }\n', '}\n', '\n', 'contract Salvageable is Operatable {\n', '    // Salvage other tokens that are accidentally sent into this token\n', '    function emergencyERC20Drain(ERC20 oddToken, uint amount) public canOperate {\n', '        if (address(oddToken) == address(0)) {\n', '            owner.transfer(amount);\n', '            return;\n', '        }\n', '        oddToken.transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'contract WhiteListedBasic is OperatableBasic {\n', '    function addWhiteListed(address[] addrs, uint[] batches, uint[] weiAllocation) external;\n', '    function getAllocated(address addr) public view returns (uint);\n', '    function getBatchNumber(address addr) public view returns (uint);\n', '    function getWhiteListCount() public view returns (uint);\n', '    function isWhiteListed(address addr) public view returns (bool);\n', '    function removeWhiteListed(address addr) public;\n', '    function setAllocation(address[] addrs, uint[] allocation) public;\n', '    function setBatchNumber(address[] addrs, uint[] batch) public;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract SencTokenConfig {\n', '    string public constant NAME = "Sentinel Chain Token";\n', '    string public constant SYMBOL = "SENC";\n', '    uint8 public constant DECIMALS = 18;\n', '    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\n', '    uint public constant TOTALSUPPLY = 500000000 * DECIMALSFACTOR;\n', '}\n', '\n', 'contract SencToken is PausableToken, SencTokenConfig, Salvageable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = NAME;\n', '    string public symbol = SYMBOL;\n', '    uint8 public decimals = DECIMALS;\n', '    bool public mintingFinished = false;\n', '\n', '    event Mint(address indexed to, uint amount);\n', '    event MintFinished();\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function SencToken() public {\n', '        paused = true;\n', '    }\n', '\n', '    function pause() onlyOwner public {\n', '        revert();\n', '    }\n', '\n', '    function unpause() onlyOwner public {\n', '        super.unpause();\n', '    }\n', '\n', '    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    // Airdrop tokens from bounty wallet to contributors as long as there are enough balance\n', '    function airdrop(address bountyWallet, address[] dests, uint[] values) public onlyOwner returns (uint) {\n', '        require(dests.length == values.length);\n', '        uint i = 0;\n', '        while (i < dests.length && balances[bountyWallet] >= values[i]) {\n', '            this.transferFrom(bountyWallet, dests[i], values[i]);\n', '            i += 1;\n', '        }\n', '        return(i);\n', '    }\n', '}\n', '\n', 'contract SencTokenSaleConfig is SencTokenConfig {\n', '    uint public constant TOKEN_FOUNDINGTEAM =  50000000 * DECIMALSFACTOR;\n', '    uint public constant TOKEN_EARLYSUPPORTERS = 100000000 * DECIMALSFACTOR;\n', '    uint public constant TOKEN_PRESALE = 100000000 * DECIMALSFACTOR;\n', '    uint public constant TOKEN_TREASURY = 150000000 * DECIMALSFACTOR;\n', '    uint public constant MILLION = 1000000;\n', '    uint public constant PUBLICSALE_USD_PER_MSENC =  80000;\n', '    uint public constant PRIVATESALE_USD_PER_MSENC =  64000;\n', '    uint public constant MIN_CONTRIBUTION      = 120 finney;\n', '}\n', '\n', 'contract SencTokenSale is SencTokenSaleConfig, Ownable, Pausable, Salvageable {\n', '    using SafeMath for uint;\n', '    bool public isFinalized = false;\n', '\n', '    SencToken public token;\n', '    uint[] public batchStartTimes;\n', '    uint public endTime;\n', '    uint public startTime;\n', '    address public agTechWallet;        // InfoCorp AgTech Wallet Address to receive ETH\n', '    uint public usdPerMEth;             // USD per million ETH. E.g. ETHUSD 844.81 is specified as 844,810,000\n', '    uint public publicSaleSencPerMEth;  // Amount of token 1 million ETH can buy in public sale\n', '    uint public privateSaleSencPerMEth; // Amount of token 1 million ETH can buy in private sale\n', '    uint public weiRaised;              // Amount of raised money in WEI\n', '    WhiteListedBasic public whiteListed;\n', '    uint public numContributors;        // Discrete number of contributors\n', '\n', '    mapping (address => uint) public contributions; // to allow them to have multiple spends\n', '\n', '    event Finalized();\n', '    event TokenPurchase(address indexed beneficiary, uint value, uint amount);\n', '    event TokenPresale(address indexed purchaser, uint amount);\n', '    event TokenFoundingTeam(address purchaser, uint amount);\n', '    event TokenTreasury(address purchaser, uint amount);\n', '    event EarlySupporters(address purchaser, uint amount);\n', '\n', '    function SencTokenSale(uint[] _batchStartTimes, uint _endTime, uint _usdPerMEth, uint _presaleWei,\n', '        WhiteListedBasic _whiteListed, address _agTechWallet,  address _foundingTeamWallet,\n', '        address _earlySupportersWallet, address _treasuryWallet, address _presaleWallet, address _tokenIssuer\n', '    ) public {\n', '        require(_batchStartTimes.length > 0);\n', '        // require (now < batchStartTimes[0]);\n', '        for (uint i = 0; i < _batchStartTimes.length - 1; i++) {\n', '            require(_batchStartTimes[i+1] > _batchStartTimes[i]);\n', '        }\n', '        require(_endTime >= _batchStartTimes[_batchStartTimes.length - 1]);\n', '        require(_usdPerMEth > 0);\n', '        require(_whiteListed != address(0));\n', '        require(_agTechWallet != address(0));\n', '        require(_foundingTeamWallet != address(0));\n', '        require(_earlySupportersWallet != address(0));\n', '        require(_presaleWallet != address(0));\n', '        require(_treasuryWallet != address(0));\n', '        owner = _tokenIssuer;\n', '\n', '        batchStartTimes = _batchStartTimes;\n', '        startTime = _batchStartTimes[0];\n', '        endTime = _endTime;\n', '        agTechWallet = _agTechWallet;\n', '        whiteListed = _whiteListed;\n', '        weiRaised = _presaleWei;\n', '        usdPerMEth = _usdPerMEth;\n', '        publicSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PUBLICSALE_USD_PER_MSENC);\n', '        privateSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PRIVATESALE_USD_PER_MSENC);\n', '\n', '        // Let the token stuff begin\n', '        token = new SencToken();\n', '\n', '        // Mint initial tokens\n', '        mintEarlySupportersTokens(_earlySupportersWallet, TOKEN_EARLYSUPPORTERS);\n', '        mintPresaleTokens(_presaleWallet, TOKEN_PRESALE);\n', '        mintTreasuryTokens(_treasuryWallet, TOKEN_TREASURY);\n', '        mintFoundingTeamTokens(_foundingTeamWallet, TOKEN_FOUNDINGTEAM);\n', '    }\n', '\n', '    function getBatchStartTimesLength() public view returns (uint) {\n', '        return batchStartTimes.length;\n', '    }\n', '\n', '    function updateBatchStartTime(uint _batchNumber, uint _batchStartTime) public canOperate {\n', '        batchStartTimes[_batchNumber] = _batchStartTime;\n', '\tfor (uint i = 0; i < batchStartTimes.length - 1; i++) {\n', '            require(batchStartTimes[i+1] > batchStartTimes[i]);\n', '        }\n', '    }\n', '\n', '    function updateEndTime(uint _endTime) public canOperate {\n', '\trequire(_endTime >= batchStartTimes[batchStartTimes.length - 1]);\n', '        endTime = _endTime;\n', '    }\n', '\n', '    function updateUsdPerMEth(uint _usdPerMEth) public canOperate {\n', '        require(now < batchStartTimes[0]);\n', '        usdPerMEth = _usdPerMEth;\n', '        publicSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PUBLICSALE_USD_PER_MSENC);\n', '        privateSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PRIVATESALE_USD_PER_MSENC);\n', '    }\n', '\n', '    function mintEarlySupportersTokens(address addr, uint amount) internal {\n', '        token.mint(addr, amount);\n', '        EarlySupporters(addr, amount);\n', '    }\n', '\n', '    function mintTreasuryTokens(address addr, uint amount) internal {\n', '        token.mint(addr, amount);\n', '        TokenTreasury(addr, amount);\n', '    }\n', '\n', '    function mintFoundingTeamTokens(address addr, uint amount) internal {\n', '        token.mint(addr, amount);\n', '        TokenFoundingTeam(addr, amount);\n', '    }\n', '\n', '    function mintPresaleTokens(address addr, uint amount) internal {\n', '        token.mint(addr, amount);\n', '        TokenPresale(addr, amount);\n', '    }\n', '\n', '    // Only fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender, msg.value);\n', '    }\n', '\n', '    function buyTokens(address beneficiary, uint weiAmount) internal whenNotPaused {\n', '        require(beneficiary != address(0));\n', '        require(isWhiteListed(beneficiary));\n', '        require(isWithinPeriod(beneficiary));\n', '        require(isWithinAllocation(beneficiary, weiAmount));\n', '\n', '        uint tokens = weiAmount.mul(publicSaleSencPerMEth).div(MILLION);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        if (contributions[beneficiary] == 0) {\n', '            numContributors++;\n', '        }\n', '\n', '        contributions[beneficiary] = contributions[beneficiary].add(weiAmount);\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    function ethRaised() public view returns(uint) {\n', '        return weiRaised.div(10 ** 18);\n', '    }\n', '\n', '    function usdRaised() public view returns(uint) {\n', '        return weiRaised.mul(usdPerMEth).div(MILLION);\n', '    }\n', '\n', '    function sencSold() public view returns(uint) {\n', '        return token.totalSupply();\n', '    }\n', '\n', '    function sencBalance() public view returns(uint) {\n', '        return token.TOTALSUPPLY().sub(token.totalSupply());\n', '    }\n', '\n', '    // This can be used after the sale is over and tokens are unpaused\n', '    function reclaimTokens() external canOperate {\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '    }\n', '\n', '    // Batch is in 0..n-1 format\n', '    function isBatchActive(uint batch) public view returns (bool) {\n', '        if (now > endTime) {\n', '            return false;\n', '        }\n', '        if (uint(batch) >= batchStartTimes.length) {\n', '            return false;\n', '        }\n', '        if (now > batchStartTimes[batch]) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // Returns\n', '    // 0                           - not started\n', '    // 1..batchStartTimes.length   - batch plus 1\n', '    // batchStartTimes.length + 1  - ended\n', '    function batchActive() public view returns (uint) {\n', '        if (now > endTime) {\n', '            return batchStartTimes.length + 1;\n', '        }\n', '        for (uint i = batchStartTimes.length; i > 0; i--) {\n', '            if (now > batchStartTimes[i-1]) {\n', '                return i;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    // Return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // Send ether to the fund collection wallet\n', '    function forwardFunds() internal {\n', '        agTechWallet.transfer(msg.value);\n', '    }\n', '\n', '    // Buyer must be whitelisted\n', '    function isWhiteListed(address beneficiary) internal view returns (bool) {\n', '        return whiteListed.isWhiteListed(beneficiary);\n', '    }\n', '\n', '    // Buyer must by within assigned batch period\n', '    function isWithinPeriod(address beneficiary) internal view returns (bool) {\n', '        uint batchNumber = whiteListed.getBatchNumber(beneficiary);\n', '        return now >= batchStartTimes[batchNumber] && now <= endTime;\n', '    }\n', '\n', '    // Buyer must by withint allocated amount\n', '    function isWithinAllocation(address beneficiary, uint weiAmount) internal view returns (bool) {\n', '        uint allocation = whiteListed.getAllocated(beneficiary);\n', '        return (weiAmount >= MIN_CONTRIBUTION) && (weiAmount.add(contributions[beneficiary]) <= allocation);\n', '    }\n', '\n', '    // Must be called after crowdsale ends, to do some extra finalization\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    // Stops the minting and transfer token ownership to sale owner. Mints unsold tokens to owner\n', '    function finalization() internal {\n', '        token.mint(owner,sencBalance());\n', '        token.finishMinting();\n', '        token.transferOwnership(owner);\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// ----------------------------------------------------------------------------\n', '// SencTokenSale - SENC Token Sale Contract\n', '//\n', '// Copyright (c) 2018 InfoCorp Technologies Pte Ltd.\n', '// http://www.sentinel-chain.org/\n', '//\n', '// The MIT Licence.\n', '// ----------------------------------------------------------------------------\n', '\n', '// ----------------------------------------------------------------------------\n', '// The SENC Token Sale is organised as follows:\n', '// 1. 10% (50,000,000) of total supply will be minted and sent to founding team weallet.\n', '// 2. 20% (100,000,000) of total supply will be minted and sent to early supporter wallet.\n', '// 3. 20% (100,000,000) of total supply will be minted and sent to presale wallet.\n', '// 4. 20% (100,000,000) of total supply will be available for minting and purchase by public.\n', '// 5. 30% (150,000,000) of total supply will be minted and sent to treaury wallet.\n', '// 6. Public sale is designed to be made available in batches.\n', '// \n', '// Tokens can only be purchased by contributors depending on the batch that\n', '// contributors are assigned to in the WhiteListed smart contract to prevent a\n', '// gas war. Each batch will be assigned a timestamp. Contributors can only \n', '// make purchase once the current timestamp on the main net is above the \n', "// batch's assigned timestamp.\n", '//    - batch 0: start_date 00:01   (guaranteed allocations)\n', '//    - batch 1: start_date+1 00:01 (guaranteed allocations)\n', '//    - batch 2: start_date+2 00:01 (guaranteed and non-guaranteed allocations)\n', '//    - batch 3: start_date+2 12:01 (guaranteed and non-guaranteed allocations)\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', ' \n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract OperatableBasic {\n', '    function setPrimaryOperator (address addr) public;\n', '    function setSecondaryOperator (address addr) public;\n', '    function isPrimaryOperator(address addr) public view returns (bool);\n', '    function isSecondaryOperator(address addr) public view returns (bool);\n', '}\n', '\n', 'contract Operatable is Ownable, OperatableBasic {\n', '    address public primaryOperator;\n', '    address public secondaryOperator;\n', '\n', '    modifier canOperate() {\n', '        require(msg.sender == primaryOperator || msg.sender == secondaryOperator || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function Operatable() public {\n', '        primaryOperator = owner;\n', '        secondaryOperator = owner;\n', '    }\n', '\n', '    function setPrimaryOperator (address addr) public onlyOwner {\n', '        primaryOperator = addr;\n', '    }\n', '\n', '    function setSecondaryOperator (address addr) public onlyOwner {\n', '        secondaryOperator = addr;\n', '    }\n', '\n', '    function isPrimaryOperator(address addr) public view returns (bool) {\n', '        return (addr == primaryOperator);\n', '    }\n', '\n', '    function isSecondaryOperator(address addr) public view returns (bool) {\n', '        return (addr == secondaryOperator);\n', '    }\n', '}\n', '\n', 'contract Salvageable is Operatable {\n', '    // Salvage other tokens that are accidentally sent into this token\n', '    function emergencyERC20Drain(ERC20 oddToken, uint amount) public canOperate {\n', '        if (address(oddToken) == address(0)) {\n', '            owner.transfer(amount);\n', '            return;\n', '        }\n', '        oddToken.transfer(owner, amount);\n', '    }\n', '}\n', '\n', 'contract WhiteListedBasic is OperatableBasic {\n', '    function addWhiteListed(address[] addrs, uint[] batches, uint[] weiAllocation) external;\n', '    function getAllocated(address addr) public view returns (uint);\n', '    function getBatchNumber(address addr) public view returns (uint);\n', '    function getWhiteListCount() public view returns (uint);\n', '    function isWhiteListed(address addr) public view returns (bool);\n', '    function removeWhiteListed(address addr) public;\n', '    function setAllocation(address[] addrs, uint[] allocation) public;\n', '    function setBatchNumber(address[] addrs, uint[] batch) public;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract SencTokenConfig {\n', '    string public constant NAME = "Sentinel Chain Token";\n', '    string public constant SYMBOL = "SENC";\n', '    uint8 public constant DECIMALS = 18;\n', '    uint public constant DECIMALSFACTOR = 10 ** uint(DECIMALS);\n', '    uint public constant TOTALSUPPLY = 500000000 * DECIMALSFACTOR;\n', '}\n', '\n', 'contract SencToken is PausableToken, SencTokenConfig, Salvageable {\n', '    using SafeMath for uint;\n', '\n', '    string public name = NAME;\n', '    string public symbol = SYMBOL;\n', '    uint8 public decimals = DECIMALS;\n', '    bool public mintingFinished = false;\n', '\n', '    event Mint(address indexed to, uint amount);\n', '    event MintFinished();\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function SencToken() public {\n', '        paused = true;\n', '    }\n', '\n', '    function pause() onlyOwner public {\n', '        revert();\n', '    }\n', '\n', '    function unpause() onlyOwner public {\n', '        super.unpause();\n', '    }\n', '\n', '    function mint(address _to, uint _amount) onlyOwner canMint public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= TOTALSUPPLY);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        Mint(_to, _amount);\n', '        Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        MintFinished();\n', '        return true;\n', '    }\n', '\n', '    // Airdrop tokens from bounty wallet to contributors as long as there are enough balance\n', '    function airdrop(address bountyWallet, address[] dests, uint[] values) public onlyOwner returns (uint) {\n', '        require(dests.length == values.length);\n', '        uint i = 0;\n', '        while (i < dests.length && balances[bountyWallet] >= values[i]) {\n', '            this.transferFrom(bountyWallet, dests[i], values[i]);\n', '            i += 1;\n', '        }\n', '        return(i);\n', '    }\n', '}\n', '\n', 'contract SencTokenSaleConfig is SencTokenConfig {\n', '    uint public constant TOKEN_FOUNDINGTEAM =  50000000 * DECIMALSFACTOR;\n', '    uint public constant TOKEN_EARLYSUPPORTERS = 100000000 * DECIMALSFACTOR;\n', '    uint public constant TOKEN_PRESALE = 100000000 * DECIMALSFACTOR;\n', '    uint public constant TOKEN_TREASURY = 150000000 * DECIMALSFACTOR;\n', '    uint public constant MILLION = 1000000;\n', '    uint public constant PUBLICSALE_USD_PER_MSENC =  80000;\n', '    uint public constant PRIVATESALE_USD_PER_MSENC =  64000;\n', '    uint public constant MIN_CONTRIBUTION      = 120 finney;\n', '}\n', '\n', 'contract SencTokenSale is SencTokenSaleConfig, Ownable, Pausable, Salvageable {\n', '    using SafeMath for uint;\n', '    bool public isFinalized = false;\n', '\n', '    SencToken public token;\n', '    uint[] public batchStartTimes;\n', '    uint public endTime;\n', '    uint public startTime;\n', '    address public agTechWallet;        // InfoCorp AgTech Wallet Address to receive ETH\n', '    uint public usdPerMEth;             // USD per million ETH. E.g. ETHUSD 844.81 is specified as 844,810,000\n', '    uint public publicSaleSencPerMEth;  // Amount of token 1 million ETH can buy in public sale\n', '    uint public privateSaleSencPerMEth; // Amount of token 1 million ETH can buy in private sale\n', '    uint public weiRaised;              // Amount of raised money in WEI\n', '    WhiteListedBasic public whiteListed;\n', '    uint public numContributors;        // Discrete number of contributors\n', '\n', '    mapping (address => uint) public contributions; // to allow them to have multiple spends\n', '\n', '    event Finalized();\n', '    event TokenPurchase(address indexed beneficiary, uint value, uint amount);\n', '    event TokenPresale(address indexed purchaser, uint amount);\n', '    event TokenFoundingTeam(address purchaser, uint amount);\n', '    event TokenTreasury(address purchaser, uint amount);\n', '    event EarlySupporters(address purchaser, uint amount);\n', '\n', '    function SencTokenSale(uint[] _batchStartTimes, uint _endTime, uint _usdPerMEth, uint _presaleWei,\n', '        WhiteListedBasic _whiteListed, address _agTechWallet,  address _foundingTeamWallet,\n', '        address _earlySupportersWallet, address _treasuryWallet, address _presaleWallet, address _tokenIssuer\n', '    ) public {\n', '        require(_batchStartTimes.length > 0);\n', '        // require (now < batchStartTimes[0]);\n', '        for (uint i = 0; i < _batchStartTimes.length - 1; i++) {\n', '            require(_batchStartTimes[i+1] > _batchStartTimes[i]);\n', '        }\n', '        require(_endTime >= _batchStartTimes[_batchStartTimes.length - 1]);\n', '        require(_usdPerMEth > 0);\n', '        require(_whiteListed != address(0));\n', '        require(_agTechWallet != address(0));\n', '        require(_foundingTeamWallet != address(0));\n', '        require(_earlySupportersWallet != address(0));\n', '        require(_presaleWallet != address(0));\n', '        require(_treasuryWallet != address(0));\n', '        owner = _tokenIssuer;\n', '\n', '        batchStartTimes = _batchStartTimes;\n', '        startTime = _batchStartTimes[0];\n', '        endTime = _endTime;\n', '        agTechWallet = _agTechWallet;\n', '        whiteListed = _whiteListed;\n', '        weiRaised = _presaleWei;\n', '        usdPerMEth = _usdPerMEth;\n', '        publicSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PUBLICSALE_USD_PER_MSENC);\n', '        privateSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PRIVATESALE_USD_PER_MSENC);\n', '\n', '        // Let the token stuff begin\n', '        token = new SencToken();\n', '\n', '        // Mint initial tokens\n', '        mintEarlySupportersTokens(_earlySupportersWallet, TOKEN_EARLYSUPPORTERS);\n', '        mintPresaleTokens(_presaleWallet, TOKEN_PRESALE);\n', '        mintTreasuryTokens(_treasuryWallet, TOKEN_TREASURY);\n', '        mintFoundingTeamTokens(_foundingTeamWallet, TOKEN_FOUNDINGTEAM);\n', '    }\n', '\n', '    function getBatchStartTimesLength() public view returns (uint) {\n', '        return batchStartTimes.length;\n', '    }\n', '\n', '    function updateBatchStartTime(uint _batchNumber, uint _batchStartTime) public canOperate {\n', '        batchStartTimes[_batchNumber] = _batchStartTime;\n', '\tfor (uint i = 0; i < batchStartTimes.length - 1; i++) {\n', '            require(batchStartTimes[i+1] > batchStartTimes[i]);\n', '        }\n', '    }\n', '\n', '    function updateEndTime(uint _endTime) public canOperate {\n', '\trequire(_endTime >= batchStartTimes[batchStartTimes.length - 1]);\n', '        endTime = _endTime;\n', '    }\n', '\n', '    function updateUsdPerMEth(uint _usdPerMEth) public canOperate {\n', '        require(now < batchStartTimes[0]);\n', '        usdPerMEth = _usdPerMEth;\n', '        publicSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PUBLICSALE_USD_PER_MSENC);\n', '        privateSaleSencPerMEth = usdPerMEth.mul(MILLION).div(PRIVATESALE_USD_PER_MSENC);\n', '    }\n', '\n', '    function mintEarlySupportersTokens(address addr, uint amount) internal {\n', '        token.mint(addr, amount);\n', '        EarlySupporters(addr, amount);\n', '    }\n', '\n', '    function mintTreasuryTokens(address addr, uint amount) internal {\n', '        token.mint(addr, amount);\n', '        TokenTreasury(addr, amount);\n', '    }\n', '\n', '    function mintFoundingTeamTokens(address addr, uint amount) internal {\n', '        token.mint(addr, amount);\n', '        TokenFoundingTeam(addr, amount);\n', '    }\n', '\n', '    function mintPresaleTokens(address addr, uint amount) internal {\n', '        token.mint(addr, amount);\n', '        TokenPresale(addr, amount);\n', '    }\n', '\n', '    // Only fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender, msg.value);\n', '    }\n', '\n', '    function buyTokens(address beneficiary, uint weiAmount) internal whenNotPaused {\n', '        require(beneficiary != address(0));\n', '        require(isWhiteListed(beneficiary));\n', '        require(isWithinPeriod(beneficiary));\n', '        require(isWithinAllocation(beneficiary, weiAmount));\n', '\n', '        uint tokens = weiAmount.mul(publicSaleSencPerMEth).div(MILLION);\n', '        weiRaised = weiRaised.add(weiAmount);\n', '\n', '        if (contributions[beneficiary] == 0) {\n', '            numContributors++;\n', '        }\n', '\n', '        contributions[beneficiary] = contributions[beneficiary].add(weiAmount);\n', '        token.mint(beneficiary, tokens);\n', '        TokenPurchase(beneficiary, weiAmount, tokens);\n', '\n', '        forwardFunds();\n', '    }\n', '\n', '    function ethRaised() public view returns(uint) {\n', '        return weiRaised.div(10 ** 18);\n', '    }\n', '\n', '    function usdRaised() public view returns(uint) {\n', '        return weiRaised.mul(usdPerMEth).div(MILLION);\n', '    }\n', '\n', '    function sencSold() public view returns(uint) {\n', '        return token.totalSupply();\n', '    }\n', '\n', '    function sencBalance() public view returns(uint) {\n', '        return token.TOTALSUPPLY().sub(token.totalSupply());\n', '    }\n', '\n', '    // This can be used after the sale is over and tokens are unpaused\n', '    function reclaimTokens() external canOperate {\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '    }\n', '\n', '    // Batch is in 0..n-1 format\n', '    function isBatchActive(uint batch) public view returns (bool) {\n', '        if (now > endTime) {\n', '            return false;\n', '        }\n', '        if (uint(batch) >= batchStartTimes.length) {\n', '            return false;\n', '        }\n', '        if (now > batchStartTimes[batch]) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    // Returns\n', '    // 0                           - not started\n', '    // 1..batchStartTimes.length   - batch plus 1\n', '    // batchStartTimes.length + 1  - ended\n', '    function batchActive() public view returns (uint) {\n', '        if (now > endTime) {\n', '            return batchStartTimes.length + 1;\n', '        }\n', '        for (uint i = batchStartTimes.length; i > 0; i--) {\n', '            if (now > batchStartTimes[i-1]) {\n', '                return i;\n', '            }\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    // Return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // Send ether to the fund collection wallet\n', '    function forwardFunds() internal {\n', '        agTechWallet.transfer(msg.value);\n', '    }\n', '\n', '    // Buyer must be whitelisted\n', '    function isWhiteListed(address beneficiary) internal view returns (bool) {\n', '        return whiteListed.isWhiteListed(beneficiary);\n', '    }\n', '\n', '    // Buyer must by within assigned batch period\n', '    function isWithinPeriod(address beneficiary) internal view returns (bool) {\n', '        uint batchNumber = whiteListed.getBatchNumber(beneficiary);\n', '        return now >= batchStartTimes[batchNumber] && now <= endTime;\n', '    }\n', '\n', '    // Buyer must by withint allocated amount\n', '    function isWithinAllocation(address beneficiary, uint weiAmount) internal view returns (bool) {\n', '        uint allocation = whiteListed.getAllocated(beneficiary);\n', '        return (weiAmount >= MIN_CONTRIBUTION) && (weiAmount.add(contributions[beneficiary]) <= allocation);\n', '    }\n', '\n', '    // Must be called after crowdsale ends, to do some extra finalization\n', '    function finalize() onlyOwner public {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        finalization();\n', '        Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    // Stops the minting and transfer token ownership to sale owner. Mints unsold tokens to owner\n', '    function finalization() internal {\n', '        token.mint(owner,sencBalance());\n', '        token.finishMinting();\n', '        token.transferOwnership(owner);\n', '    }\n', '}']
