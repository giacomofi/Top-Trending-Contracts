['pragma solidity 0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MintableTokenInterface interface\n', ' */\n', 'contract MintableTokenIface {\n', '    function mint(address to, uint256 amount) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title TempusCrowdsale\n', ' * @dev TempusCrowdsale is a base contract for managing IQ-300 token crowdsale,\n', ' * allowing investors to purchase project tokens with ether.\n', ' */\n', 'contract TempusCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // Crowdsale owners\n', '    mapping(address => bool) public owners;\n', '\n', '    // The token being sold\n', '    MintableTokenIface public token;\n', '\n', '    // Addresses where funds are collected\n', '    address[] public wallets;\n', '\n', '    // Current phase Id\n', '    uint256 public currentRoundId;\n', '\n', '    // Maximum amount of tokens this contract can mint\n', '    uint256 public tokensCap;\n', '\n', '    // Amount of issued tokens\n', '    uint256 public tokensIssued;\n', '\n', '    // Amount of received Ethers in wei\n', '    uint256 public weiRaised;\n', '\n', '    // Minimum Deposit 0.1 ETH in wei\n', '    uint256 public minInvestment = 100000000000000000;\n', '\n', '    // Crowdsale phase with its own parameters\n', '    struct Round {\n', '        uint256 startTime;\n', '        uint256 endTime;\n', '        uint256 weiRaised;\n', '        uint256 tokensIssued;\n', '        uint256 tokensCap;\n', '        uint256 tokenPrice;\n', '    }\n', '\n', '    Round[5] public rounds;\n', '\n', '    /**\n', '     * @dev TokenPurchase event emitted on token purchase\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev WalletAdded event emitted on wallet add\n', '     * @param wallet the address of added account\n', '     */\n', '    event WalletAdded(address indexed wallet);\n', '\n', '    /**\n', '     * @dev WalletRemoved event emitted on wallet deletion\n', '     * @param wallet the address of removed account\n', '     */\n', '    event WalletRemoved(address indexed wallet);\n', '\n', '    /**\n', '     * @dev OwnerAdded event emitted on owner add\n', '     * @param newOwner is the address of added account\n', '     */\n', '    event OwnerAdded(address indexed newOwner);\n', '\n', '    /**\n', '     * @dev OwnerRemoved event emitted on owner removal\n', '     * @param removedOwner is the address of removed account\n', '     */\n', '    event OwnerRemoved(address indexed removedOwner);\n', '\n', '    /**\n', '     * @dev SwitchedToNextRound event triggered when contract changes its phase\n', '     * @param id is the index of the new phase\n', '     */\n', '    event SwitchedToNextRound(uint256 id);\n', '\n', '    constructor(MintableTokenIface _token) public {\n', '        token = _token;\n', '        tokensCap = 100000000000000000;\n', '        rounds[0] = Round(now, now.add(30 * 1 days), 0, 0, 20000000000000000, 50000000);\n', '        rounds[1] = Round(now.add(30 * 1 days).add(1), now.add(60 * 1 days), 0, 0, 20000000000000000, 100000000);\n', '        rounds[2] = Round(now.add(60 * 1 days).add(1), now.add(90 * 1 days), 0, 0, 20000000000000000, 200000000);\n', '        rounds[3] = Round(now.add(90 * 1 days).add(1), now.add(120 * 1 days), 0, 0, 20000000000000000, 400000000);\n', '        rounds[4] = Round(now.add(120 * 1 days).add(1), 1599999999, 0, 0, 20000000000000000, 800000000);\n', '        currentRoundId = 0;\n', '        owners[msg.sender] = true;\n', '    }\n', '\n', '    function() external payable {\n', '        require(msg.sender != address(0));\n', '        require(msg.value >= minInvestment);\n', '        if (now > rounds[currentRoundId].endTime) {\n', '            switchToNextRound();\n', '        }\n', '        uint256 tokenPrice = rounds[currentRoundId].tokenPrice;\n', '        uint256 tokens = msg.value.div(tokenPrice);\n', '        token.mint(msg.sender, tokens);\n', '        emit TokenPurchase(msg.sender, msg.value, tokens);\n', '        tokensIssued = tokensIssued.add(tokens);\n', '        rounds[currentRoundId].tokensIssued = rounds[currentRoundId].tokensIssued.add(tokens);\n', '        weiRaised = weiRaised.add(msg.value);\n', '        rounds[currentRoundId].weiRaised = rounds[currentRoundId].weiRaised.add(msg.value);\n', '        if (rounds[currentRoundId].tokensIssued >= rounds[currentRoundId].tokensCap) {\n', '            switchToNextRound();\n', '        }\n', '        forwardFunds();\n', '    }\n', '\n', '    /**\n', '     * @dev switchToNextRound sets the startTime, endTime and tokenCap of the next phase\n', '     * and sets the next phase as current phase.\n', '     */\n', '    function switchToNextRound() public {\n', '        uint256 prevRoundId = currentRoundId;\n', '        uint256 nextRoundId = currentRoundId + 1;\n', '        require(nextRoundId < rounds.length);\n', '        rounds[prevRoundId].endTime = now;\n', '        rounds[nextRoundId].startTime = now + 1;\n', '        rounds[nextRoundId].endTime = now + 30;\n', '        if (nextRoundId == rounds.length - 1) {\n', '            rounds[nextRoundId].tokensCap = tokensCap.sub(tokensIssued);\n', '        } else {\n', '            rounds[nextRoundId].tokensCap = tokensCap.sub(tokensIssued).div(5);\n', '        }\n', '        currentRoundId = nextRoundId;\n', '        emit SwitchedToNextRound(currentRoundId);\n', '    }\n', '\n', '    /**\n', '     * @dev Add collecting wallet address to the list\n', '     * @param _address Address of the wallet\n', '     */\n', '    function addWallet(address _address) public onlyOwner {\n', '        require(_address != address(0));\n', '        for (uint256 i = 0; i < wallets.length; i++) {\n', '            require(_address != wallets[i]);\n', '        }\n', '        wallets.push(_address);\n', '        emit WalletAdded(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Delete wallet by its index\n', '     * @param index Index of the wallet in the list\n', '     */\n', '    function delWallet(uint256 index) public onlyOwner {\n', '        require(index < wallets.length);\n', '        address walletToRemove = wallets[index];\n', '        for (uint256 i = index; i < wallets.length - 1; i++) {\n', '            wallets[i] = wallets[i + 1];\n', '        }\n', '        wallets.length--;\n', '        emit WalletRemoved(walletToRemove);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds administrative role to address\n', '     * @param _address The address that will get administrative privileges\n', '     */\n', '    function addOwner(address _address) public onlyOwner {\n', '        owners[_address] = true;\n', '        emit OwnerAdded(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes administrative role from address\n', '     * @param _address The address to remove administrative privileges from\n', '     */\n', '    function delOwner(address _address) public onlyOwner {\n', '        owners[_address] = false;\n', '        emit OwnerRemoved(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev forwardFunds splits received funds ~equally between wallets\n', '     * and sends receiwed ethers to them.\n', '     */\n', '    function forwardFunds() internal {\n', '        uint256 value = msg.value.div(wallets.length);\n', '        uint256 rest = msg.value.sub(value.mul(wallets.length));\n', '        for (uint256 i = 0; i < wallets.length - 1; i++) {\n', '            wallets[i].transfer(value);\n', '        }\n', '        wallets[wallets.length - 1].transfer(value + rest);\n', '    }\n', '}']
['pragma solidity 0.4.23;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title MintableTokenInterface interface\n', ' */\n', 'contract MintableTokenIface {\n', '    function mint(address to, uint256 amount) public returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @title TempusCrowdsale\n', ' * @dev TempusCrowdsale is a base contract for managing IQ-300 token crowdsale,\n', ' * allowing investors to purchase project tokens with ether.\n', ' */\n', 'contract TempusCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // Crowdsale owners\n', '    mapping(address => bool) public owners;\n', '\n', '    // The token being sold\n', '    MintableTokenIface public token;\n', '\n', '    // Addresses where funds are collected\n', '    address[] public wallets;\n', '\n', '    // Current phase Id\n', '    uint256 public currentRoundId;\n', '\n', '    // Maximum amount of tokens this contract can mint\n', '    uint256 public tokensCap;\n', '\n', '    // Amount of issued tokens\n', '    uint256 public tokensIssued;\n', '\n', '    // Amount of received Ethers in wei\n', '    uint256 public weiRaised;\n', '\n', '    // Minimum Deposit 0.1 ETH in wei\n', '    uint256 public minInvestment = 100000000000000000;\n', '\n', '    // Crowdsale phase with its own parameters\n', '    struct Round {\n', '        uint256 startTime;\n', '        uint256 endTime;\n', '        uint256 weiRaised;\n', '        uint256 tokensIssued;\n', '        uint256 tokensCap;\n', '        uint256 tokenPrice;\n', '    }\n', '\n', '    Round[5] public rounds;\n', '\n', '    /**\n', '     * @dev TokenPurchase event emitted on token purchase\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @dev WalletAdded event emitted on wallet add\n', '     * @param wallet the address of added account\n', '     */\n', '    event WalletAdded(address indexed wallet);\n', '\n', '    /**\n', '     * @dev WalletRemoved event emitted on wallet deletion\n', '     * @param wallet the address of removed account\n', '     */\n', '    event WalletRemoved(address indexed wallet);\n', '\n', '    /**\n', '     * @dev OwnerAdded event emitted on owner add\n', '     * @param newOwner is the address of added account\n', '     */\n', '    event OwnerAdded(address indexed newOwner);\n', '\n', '    /**\n', '     * @dev OwnerRemoved event emitted on owner removal\n', '     * @param removedOwner is the address of removed account\n', '     */\n', '    event OwnerRemoved(address indexed removedOwner);\n', '\n', '    /**\n', '     * @dev SwitchedToNextRound event triggered when contract changes its phase\n', '     * @param id is the index of the new phase\n', '     */\n', '    event SwitchedToNextRound(uint256 id);\n', '\n', '    constructor(MintableTokenIface _token) public {\n', '        token = _token;\n', '        tokensCap = 100000000000000000;\n', '        rounds[0] = Round(now, now.add(30 * 1 days), 0, 0, 20000000000000000, 50000000);\n', '        rounds[1] = Round(now.add(30 * 1 days).add(1), now.add(60 * 1 days), 0, 0, 20000000000000000, 100000000);\n', '        rounds[2] = Round(now.add(60 * 1 days).add(1), now.add(90 * 1 days), 0, 0, 20000000000000000, 200000000);\n', '        rounds[3] = Round(now.add(90 * 1 days).add(1), now.add(120 * 1 days), 0, 0, 20000000000000000, 400000000);\n', '        rounds[4] = Round(now.add(120 * 1 days).add(1), 1599999999, 0, 0, 20000000000000000, 800000000);\n', '        currentRoundId = 0;\n', '        owners[msg.sender] = true;\n', '    }\n', '\n', '    function() external payable {\n', '        require(msg.sender != address(0));\n', '        require(msg.value >= minInvestment);\n', '        if (now > rounds[currentRoundId].endTime) {\n', '            switchToNextRound();\n', '        }\n', '        uint256 tokenPrice = rounds[currentRoundId].tokenPrice;\n', '        uint256 tokens = msg.value.div(tokenPrice);\n', '        token.mint(msg.sender, tokens);\n', '        emit TokenPurchase(msg.sender, msg.value, tokens);\n', '        tokensIssued = tokensIssued.add(tokens);\n', '        rounds[currentRoundId].tokensIssued = rounds[currentRoundId].tokensIssued.add(tokens);\n', '        weiRaised = weiRaised.add(msg.value);\n', '        rounds[currentRoundId].weiRaised = rounds[currentRoundId].weiRaised.add(msg.value);\n', '        if (rounds[currentRoundId].tokensIssued >= rounds[currentRoundId].tokensCap) {\n', '            switchToNextRound();\n', '        }\n', '        forwardFunds();\n', '    }\n', '\n', '    /**\n', '     * @dev switchToNextRound sets the startTime, endTime and tokenCap of the next phase\n', '     * and sets the next phase as current phase.\n', '     */\n', '    function switchToNextRound() public {\n', '        uint256 prevRoundId = currentRoundId;\n', '        uint256 nextRoundId = currentRoundId + 1;\n', '        require(nextRoundId < rounds.length);\n', '        rounds[prevRoundId].endTime = now;\n', '        rounds[nextRoundId].startTime = now + 1;\n', '        rounds[nextRoundId].endTime = now + 30;\n', '        if (nextRoundId == rounds.length - 1) {\n', '            rounds[nextRoundId].tokensCap = tokensCap.sub(tokensIssued);\n', '        } else {\n', '            rounds[nextRoundId].tokensCap = tokensCap.sub(tokensIssued).div(5);\n', '        }\n', '        currentRoundId = nextRoundId;\n', '        emit SwitchedToNextRound(currentRoundId);\n', '    }\n', '\n', '    /**\n', '     * @dev Add collecting wallet address to the list\n', '     * @param _address Address of the wallet\n', '     */\n', '    function addWallet(address _address) public onlyOwner {\n', '        require(_address != address(0));\n', '        for (uint256 i = 0; i < wallets.length; i++) {\n', '            require(_address != wallets[i]);\n', '        }\n', '        wallets.push(_address);\n', '        emit WalletAdded(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Delete wallet by its index\n', '     * @param index Index of the wallet in the list\n', '     */\n', '    function delWallet(uint256 index) public onlyOwner {\n', '        require(index < wallets.length);\n', '        address walletToRemove = wallets[index];\n', '        for (uint256 i = index; i < wallets.length - 1; i++) {\n', '            wallets[i] = wallets[i + 1];\n', '        }\n', '        wallets.length--;\n', '        emit WalletRemoved(walletToRemove);\n', '    }\n', '\n', '    /**\n', '     * @dev Adds administrative role to address\n', '     * @param _address The address that will get administrative privileges\n', '     */\n', '    function addOwner(address _address) public onlyOwner {\n', '        owners[_address] = true;\n', '        emit OwnerAdded(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes administrative role from address\n', '     * @param _address The address to remove administrative privileges from\n', '     */\n', '    function delOwner(address _address) public onlyOwner {\n', '        owners[_address] = false;\n', '        emit OwnerRemoved(_address);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owners[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev forwardFunds splits received funds ~equally between wallets\n', '     * and sends receiwed ethers to them.\n', '     */\n', '    function forwardFunds() internal {\n', '        uint256 value = msg.value.div(wallets.length);\n', '        uint256 rest = msg.value.sub(value.mul(wallets.length));\n', '        for (uint256 i = 0; i < wallets.length - 1; i++) {\n', '            wallets[i].transfer(value);\n', '        }\n', '        wallets[wallets.length - 1].transfer(value + rest);\n', '    }\n', '}']
