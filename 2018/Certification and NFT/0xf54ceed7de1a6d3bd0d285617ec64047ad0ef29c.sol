['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev ERC20 interface\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public{\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * The WPPToken contract does this and that...\n', ' */\n', 'contract WPPToken is ERC20, Ownable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256  public  totalSupply = 5000000000 * 1 ether;\n', '\n', '\n', '\tmapping  (address => uint256)             public          _balances;\n', '    mapping  (address => mapping (address => uint256)) public  _approvals;\n', '\n', '    string   public  name = "WPPTOKEN";\n', '    string   public  symbol = "WPP";\n', '    uint256  public  decimals = 18;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '\n', '    constructor () public{\n', '\t\t_balances[owner] = totalSupply;\n', '\t}\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    function balanceOf(address src) public constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) public constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint256 wad) public returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = _balances[msg.sender].sub(wad);\n', '        _balances[dst] = _balances[dst].add(wad);\n', '        \n', '        emit Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint256 wad) public returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = _approvals[src][msg.sender].sub(wad);\n', '        _balances[src] = _balances[src].sub(wad);\n', '        _balances[dst] = _balances[dst].add(wad);\n', '        \n', '        emit Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) public returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        emit Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * The WPPPresale contract does this and that...\n', ' */\n', '\n', '\n', ' \n', ' \n', ' \n', ' \n', ' \n', 'contract WPPPresale is Ownable{\n', '\tusing SafeMath for uint256;\n', '\tWPPToken public wpp;\n', '\tuint256 public tokencap = 250000000 * 1 ether;\n', '\t// softcap : 5M WPP\n', '\tuint256 public  hardcap = 250000000 * 1 ether;\n', '\tbool    public  reached = false;\n', '\tuint    public  startTime ;\n', '\tuint    public  endTime ;\n', '\tuint256 public   rate = 2700;\n', '\tuint256 public   remain;\n', '\n', '\taddress public multisigwallet;\n', '\n', '\tmapping(address => bool) public isWhitelisted;\n', '\tmapping(address => bool) public isAdminlisted;\n', '\n', '\tevent BuyTokens(address indexed beneficiary, uint256 value, uint256 amount, uint time);\n', '\tevent WhitelistSet(address indexed _address, bool _state);\n', '\tevent AdminlistSet(address indexed _address, bool _state);\n', '\tevent TreatRemainToken();\n', '\n', '\tconstructor(address token, uint _startTime, uint _endTime, address _multi) public{\n', '\t\twpp = WPPToken(token);\n', '\t\t// wpp.transfer(address(this), tokencap);\n', '\t\trequire (wpp.owner() == msg.sender);\n', '\t\t\n', '\t\tstartTime = _startTime; // 1531659600 2018-07-15 8:AM EST->1:PM UTC\n', '\t\tendTime = _endTime; // 1537016400 2018-09-15 8:AM EST->1:PM UTC\n', '\t\tremain = hardcap;\n', '\t\tmultisigwallet = _multi;\n', '\t}\n', '\n', '\tmodifier onlyOwners() { \n', '\t\trequire (isAdminlisted[msg.sender] == true || msg.sender == owner); \n', '\t\t_; \n', '\t}\n', '\n', '\tmodifier onlyWhitelisted() { \n', '\t\trequire (isWhitelisted[msg.sender] == true); \n', '\t\t_; \n', '\t}\n', '\t\n', '\n', '\t  // fallback function can be used to buy tokens\n', '\tfunction () public payable onlyWhitelisted {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\t// low level token purchase function\n', '\tfunction buyTokens(address beneficiary) public payable onlyWhitelisted {\n', '\t\tbuyTokens(beneficiary, msg.value);\n', '\t}\n', '\n', '\t// implementation of low level token purchase function\n', '\tfunction buyTokens(address beneficiary, uint256 weiAmount) internal {\n', '\t\trequire(beneficiary != 0x0);\n', '\t\trequire(validPurchase(weiAmount));\n', '\n', '\t\t// calculate token amount to be sent\n', '\t\tuint256 tokens = calcBonus(weiAmount.mul(rate));\n', '\t\t\n', '\t\tif(remain.sub(tokens) <= 0){\n', '\t\t\treached = true;\n', '\n', '\t\t\tuint256 real = remain;\n', '\n', '\t\t\tremain = 0;\n', '\n', '\t\t\tuint256 refund = weiAmount - real.mul(100).div(110).div(rate);\n', '\n', '\t\t\tbeneficiary.transfer(refund);\n', '\n', '\t\t\ttransferToken(beneficiary, real);\n', '\n', '\t\t\tforwardFunds(weiAmount.sub(refund));\n', '\n', '\t\t\temit BuyTokens(beneficiary, weiAmount.sub(refund), real, now);\n', '\t\t} else{\n', '\n', '\t\t\tremain = remain.sub(tokens);\n', '\n', '\t\t\ttransferToken(beneficiary, tokens);\n', '\n', '\t\t\tforwardFunds(weiAmount);\n', '\n', '\t\t\temit BuyTokens(beneficiary, weiAmount, tokens, now);\n', '\t\t}\n', '\n', '\t}\n', '\n', '\tfunction calcBonus(uint256 token_amount) internal constant returns (uint256) {\n', '\t\tif(now > startTime && now <= (startTime + 3 days))\n', '\t\t\treturn token_amount * 110 / 100;\n', '\t\treturn token_amount;\n', '\t}\n', '\n', '\t// low level transfer token\n', '\t// override to create custom token transfer mechanism, eg. pull pattern\n', '\tfunction transferToken(address beneficiary, uint256 tokenamount) internal {\n', '\t\twpp.transfer(beneficiary, tokenamount);\n', '\t\t// address(wpp).call(bytes4(keccak256("transfer(address, uint256)")), beneficiary,tokenamount);\n', '\t}\n', '\n', '\t// send ether to the fund collection wallet\n', '\t// override to create custom fund forwarding mechanisms\n', '\tfunction forwardFunds(uint256 weiAmount) internal {\n', '\t\tmultisigwallet.transfer(weiAmount);\n', '\t}\n', '\n', '\t// @return true if the transaction can buy tokens\n', '\tfunction validPurchase(uint256 weiAmount) internal constant returns (bool) {\n', '\t\tbool withinPeriod = now > startTime && now <= endTime;\n', '\t\tbool nonZeroPurchase = weiAmount >= 0.5 ether;\n', '\t\tbool withinSale = reached ? false : true;\n', '\t\treturn withinPeriod && nonZeroPurchase && withinSale;\n', '\t} \n', '\n', '\tfunction setAdminlist(address _addr, bool _state) public onlyOwner {\n', '\t\tisAdminlisted[_addr] = _state;\n', '\t\temit AdminlistSet(_addr, _state);\n', '\t}\n', '\n', '\tfunction setWhitelist(address _addr) public onlyOwners {\n', '        require(_addr != address(0));\n', '        isWhitelisted[_addr] = true;\n', '        emit WhitelistSet(_addr, true);\n', '    }\n', '\n', '    ///&#160;@notice Set whitelist state for multiple addresses\n', '    function setManyWhitelist(address[] _addr) public onlyOwners {\n', '        for (uint256 i = 0; i < _addr.length; i++) {\n', '            setWhitelist(_addr[i]);\n', '        }\n', '    }\n', '\n', '\t// @return true if presale event has ended\n', '\tfunction hasEnded() public constant returns (bool) {\n', '\t\treturn now > endTime;\n', '\t}\n', '\n', '\t// @return true if presale has started\n', '\tfunction hasStarted() public constant returns (bool) {\n', '\t\treturn now >= startTime;\n', '\t}\n', '\n', '\tfunction setRate(uint256 _rate) public onlyOwner returns (bool) {\n', '\t\trequire (now >= startTime && now <= endTime);\n', '\t\trate = _rate;\n', '\t}\n', '\n', '\tfunction treatRemaintoken() public onlyOwner returns (bool) {\n', '\t\trequire(now > endTime);\n', '\t\trequire(remain > 0);\n', '\t\twpp.transfer(multisigwallet, remain);\n', '\t\tremain = 0;\n', '\t\temit TreatRemainToken();\n', '\t\treturn true;\n', '\n', '\t}\n', '\n', '\tfunction kill() public onlyOwner{\n', '        selfdestruct(owner);\n', '    }\n', '\t\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title ERC20\n', ' * @dev ERC20 interface\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public{\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * The WPPToken contract does this and that...\n', ' */\n', 'contract WPPToken is ERC20, Ownable {\n', '\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256  public  totalSupply = 5000000000 * 1 ether;\n', '\n', '\n', '\tmapping  (address => uint256)             public          _balances;\n', '    mapping  (address => mapping (address => uint256)) public  _approvals;\n', '\n', '    string   public  name = "WPPTOKEN";\n', '    string   public  symbol = "WPP";\n', '    uint256  public  decimals = 18;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    \n', '\n', '    constructor () public{\n', '\t\t_balances[owner] = totalSupply;\n', '\t}\n', '\n', '    function totalSupply() public constant returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '    function balanceOf(address src) public constant returns (uint256) {\n', '        return _balances[src];\n', '    }\n', '    function allowance(address src, address guy) public constant returns (uint256) {\n', '        return _approvals[src][guy];\n', '    }\n', '    \n', '    function transfer(address dst, uint256 wad) public returns (bool) {\n', '        assert(_balances[msg.sender] >= wad);\n', '        \n', '        _balances[msg.sender] = _balances[msg.sender].sub(wad);\n', '        _balances[dst] = _balances[dst].add(wad);\n', '        \n', '        emit Transfer(msg.sender, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(address src, address dst, uint256 wad) public returns (bool) {\n', '        assert(_balances[src] >= wad);\n', '        assert(_approvals[src][msg.sender] >= wad);\n', '        \n', '        _approvals[src][msg.sender] = _approvals[src][msg.sender].sub(wad);\n', '        _balances[src] = _balances[src].sub(wad);\n', '        _balances[dst] = _balances[dst].add(wad);\n', '        \n', '        emit Transfer(src, dst, wad);\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function approve(address guy, uint256 wad) public returns (bool) {\n', '        _approvals[msg.sender][guy] = wad;\n', '        \n', '        emit Approval(msg.sender, guy, wad);\n', '        \n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * The WPPPresale contract does this and that...\n', ' */\n', '\n', '\n', ' \n', ' \n', ' \n', ' \n', ' \n', 'contract WPPPresale is Ownable{\n', '\tusing SafeMath for uint256;\n', '\tWPPToken public wpp;\n', '\tuint256 public tokencap = 250000000 * 1 ether;\n', '\t// softcap : 5M WPP\n', '\tuint256 public  hardcap = 250000000 * 1 ether;\n', '\tbool    public  reached = false;\n', '\tuint    public  startTime ;\n', '\tuint    public  endTime ;\n', '\tuint256 public   rate = 2700;\n', '\tuint256 public   remain;\n', '\n', '\taddress public multisigwallet;\n', '\n', '\tmapping(address => bool) public isWhitelisted;\n', '\tmapping(address => bool) public isAdminlisted;\n', '\n', '\tevent BuyTokens(address indexed beneficiary, uint256 value, uint256 amount, uint time);\n', '\tevent WhitelistSet(address indexed _address, bool _state);\n', '\tevent AdminlistSet(address indexed _address, bool _state);\n', '\tevent TreatRemainToken();\n', '\n', '\tconstructor(address token, uint _startTime, uint _endTime, address _multi) public{\n', '\t\twpp = WPPToken(token);\n', '\t\t// wpp.transfer(address(this), tokencap);\n', '\t\trequire (wpp.owner() == msg.sender);\n', '\t\t\n', '\t\tstartTime = _startTime; // 1531659600 2018-07-15 8:AM EST->1:PM UTC\n', '\t\tendTime = _endTime; // 1537016400 2018-09-15 8:AM EST->1:PM UTC\n', '\t\tremain = hardcap;\n', '\t\tmultisigwallet = _multi;\n', '\t}\n', '\n', '\tmodifier onlyOwners() { \n', '\t\trequire (isAdminlisted[msg.sender] == true || msg.sender == owner); \n', '\t\t_; \n', '\t}\n', '\n', '\tmodifier onlyWhitelisted() { \n', '\t\trequire (isWhitelisted[msg.sender] == true); \n', '\t\t_; \n', '\t}\n', '\t\n', '\n', '\t  // fallback function can be used to buy tokens\n', '\tfunction () public payable onlyWhitelisted {\n', '\t\tbuyTokens(msg.sender);\n', '\t}\n', '\n', '\t// low level token purchase function\n', '\tfunction buyTokens(address beneficiary) public payable onlyWhitelisted {\n', '\t\tbuyTokens(beneficiary, msg.value);\n', '\t}\n', '\n', '\t// implementation of low level token purchase function\n', '\tfunction buyTokens(address beneficiary, uint256 weiAmount) internal {\n', '\t\trequire(beneficiary != 0x0);\n', '\t\trequire(validPurchase(weiAmount));\n', '\n', '\t\t// calculate token amount to be sent\n', '\t\tuint256 tokens = calcBonus(weiAmount.mul(rate));\n', '\t\t\n', '\t\tif(remain.sub(tokens) <= 0){\n', '\t\t\treached = true;\n', '\n', '\t\t\tuint256 real = remain;\n', '\n', '\t\t\tremain = 0;\n', '\n', '\t\t\tuint256 refund = weiAmount - real.mul(100).div(110).div(rate);\n', '\n', '\t\t\tbeneficiary.transfer(refund);\n', '\n', '\t\t\ttransferToken(beneficiary, real);\n', '\n', '\t\t\tforwardFunds(weiAmount.sub(refund));\n', '\n', '\t\t\temit BuyTokens(beneficiary, weiAmount.sub(refund), real, now);\n', '\t\t} else{\n', '\n', '\t\t\tremain = remain.sub(tokens);\n', '\n', '\t\t\ttransferToken(beneficiary, tokens);\n', '\n', '\t\t\tforwardFunds(weiAmount);\n', '\n', '\t\t\temit BuyTokens(beneficiary, weiAmount, tokens, now);\n', '\t\t}\n', '\n', '\t}\n', '\n', '\tfunction calcBonus(uint256 token_amount) internal constant returns (uint256) {\n', '\t\tif(now > startTime && now <= (startTime + 3 days))\n', '\t\t\treturn token_amount * 110 / 100;\n', '\t\treturn token_amount;\n', '\t}\n', '\n', '\t// low level transfer token\n', '\t// override to create custom token transfer mechanism, eg. pull pattern\n', '\tfunction transferToken(address beneficiary, uint256 tokenamount) internal {\n', '\t\twpp.transfer(beneficiary, tokenamount);\n', '\t\t// address(wpp).call(bytes4(keccak256("transfer(address, uint256)")), beneficiary,tokenamount);\n', '\t}\n', '\n', '\t// send ether to the fund collection wallet\n', '\t// override to create custom fund forwarding mechanisms\n', '\tfunction forwardFunds(uint256 weiAmount) internal {\n', '\t\tmultisigwallet.transfer(weiAmount);\n', '\t}\n', '\n', '\t// @return true if the transaction can buy tokens\n', '\tfunction validPurchase(uint256 weiAmount) internal constant returns (bool) {\n', '\t\tbool withinPeriod = now > startTime && now <= endTime;\n', '\t\tbool nonZeroPurchase = weiAmount >= 0.5 ether;\n', '\t\tbool withinSale = reached ? false : true;\n', '\t\treturn withinPeriod && nonZeroPurchase && withinSale;\n', '\t} \n', '\n', '\tfunction setAdminlist(address _addr, bool _state) public onlyOwner {\n', '\t\tisAdminlisted[_addr] = _state;\n', '\t\temit AdminlistSet(_addr, _state);\n', '\t}\n', '\n', '\tfunction setWhitelist(address _addr) public onlyOwners {\n', '        require(_addr != address(0));\n', '        isWhitelisted[_addr] = true;\n', '        emit WhitelistSet(_addr, true);\n', '    }\n', '\n', '    ///\xa0@notice Set whitelist state for multiple addresses\n', '    function setManyWhitelist(address[] _addr) public onlyOwners {\n', '        for (uint256 i = 0; i < _addr.length; i++) {\n', '            setWhitelist(_addr[i]);\n', '        }\n', '    }\n', '\n', '\t// @return true if presale event has ended\n', '\tfunction hasEnded() public constant returns (bool) {\n', '\t\treturn now > endTime;\n', '\t}\n', '\n', '\t// @return true if presale has started\n', '\tfunction hasStarted() public constant returns (bool) {\n', '\t\treturn now >= startTime;\n', '\t}\n', '\n', '\tfunction setRate(uint256 _rate) public onlyOwner returns (bool) {\n', '\t\trequire (now >= startTime && now <= endTime);\n', '\t\trate = _rate;\n', '\t}\n', '\n', '\tfunction treatRemaintoken() public onlyOwner returns (bool) {\n', '\t\trequire(now > endTime);\n', '\t\trequire(remain > 0);\n', '\t\twpp.transfer(multisigwallet, remain);\n', '\t\tremain = 0;\n', '\t\temit TreatRemainToken();\n', '\t\treturn true;\n', '\n', '\t}\n', '\n', '\tfunction kill() public onlyOwner{\n', '        selfdestruct(owner);\n', '    }\n', '\t\n', '}']
