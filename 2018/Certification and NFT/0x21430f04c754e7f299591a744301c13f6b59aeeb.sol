['pragma solidity ^0.4.24;\n', '\n', '// File: contracts/interfaces/IOwned.sol\n', '\n', '/*\n', '    Owned Contract Interface\n', '*/\n', 'contract IOwned {\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '    function transferOwnershipNow(address newContractOwner) public;\n', '}\n', '\n', '// File: contracts/utility/Owned.sol\n', '\n', '/*\n', '    This is the "owned" utility contract used by bancor with one additional function - transferOwnershipNow()\n', '    \n', '    The original unmodified version can be found here:\n', '    https://github.com/bancorprotocol/contracts/commit/63480ca28534830f184d3c4bf799c1f90d113846\n', '    \n', '    Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '        @dev constructor\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '        @dev allows transferring the contract ownership\n', '        the new owner still needs to accept the transfer\n', '        can only be called by the contract owner\n', '        @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner);\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '        @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '\n', '    /**\n', '        @dev transfers the contract ownership without needing the new owner to accept ownership\n', '        @param newContractOwner    new contract owner\n', '    */\n', '    function transferOwnershipNow(address newContractOwner) ownerOnly public {\n', '        require(newContractOwner != owner);\n', '        emit OwnerUpdate(owner, newContractOwner);\n', '        owner = newContractOwner;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/interfaces/IERC20.sol\n', '\n', '/*\n', '    Smart Token Interface\n', '*/\n', 'contract IERC20 {\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', '// File: contracts/interfaces/ICommunityAccount.sol\n', '\n', '/*\n', '    Community Account Interface\n', '*/\n', 'contract ICommunityAccount is IOwned {\n', '    function setStakedBalances(uint _amount, address msgSender) public;\n', '    function setTotalStaked(uint _totalStaked) public;\n', '    function setTimeStaked(uint _timeStaked, address msgSender) public;\n', '    function setEscrowedTaskBalances(uint uuid, uint balance) public;\n', '    function setEscrowedProjectBalances(uint uuid, uint balance) public;\n', '    function setEscrowedProjectPayees(uint uuid, address payeeAddress) public;\n', '    function setTotalTaskEscrow(uint balance) public;\n', '    function setTotalProjectEscrow(uint balance) public;\n', '}\n', '\n', '// File: contracts/CommunityAccount.sol\n', '\n', '/**\n', '@title Tribe Account\n', '@notice This contract is used as a community&#39;s data store.\n', '@notice Advantages:\n', '@notice 1) Decouple logic contract from data contract\n', '@notice 2) Safely upgrade logic contract without compromising stored data\n', '*/\n', 'contract CommunityAccount is Owned, ICommunityAccount {\n', '\n', '    // Staking Variables.  In community token\n', '    mapping (address => uint256) public stakedBalances;\n', '    mapping (address => uint256) public timeStaked;\n', '    uint public totalStaked;\n', '\n', '    // Escrow variables.  In native token\n', '    uint public totalTaskEscrow;\n', '    uint public totalProjectEscrow;\n', '    mapping (uint256 => uint256) public escrowedTaskBalances;\n', '    mapping (uint256 => uint256) public escrowedProjectBalances;\n', '    mapping (uint256 => address) public escrowedProjectPayees;\n', '    \n', '    /**\n', '    @notice This function allows the community to transfer tokens out of the contract.\n', '    @param tokenContractAddress Address of community contract\n', '    @param destination Destination address of user looking to remove tokens from contract\n', '    @param amount Amount to transfer out of community\n', '    */\n', '    function transferTokensOut(address tokenContractAddress, address destination, uint amount) public ownerOnly returns(bool result) {\n', '        IERC20 token = IERC20(tokenContractAddress);\n', '        return token.transfer(destination, amount);\n', '    }\n', '\n', '    /**\n', '    @notice This is the community staking method\n', '    @param _amount Amount to be staked\n', '    @param msgSender Address of the staker\n', '    */\n', '    function setStakedBalances(uint _amount, address msgSender) public ownerOnly {\n', '        stakedBalances[msgSender] = _amount;\n', '    }\n', '\n', '    /**\n', '    @param _totalStaked Set total amount staked in community\n', '     */\n', '    function setTotalStaked(uint _totalStaked) public ownerOnly {\n', '        totalStaked = _totalStaked;\n', '    }\n', '\n', '    /**\n', '    @param _timeStaked Time of user staking into community\n', '    @param msgSender Staker address\n', '     */\n', '    function setTimeStaked(uint _timeStaked, address msgSender) public ownerOnly {\n', '        timeStaked[msgSender] = _timeStaked;\n', '    }\n', '\n', '    /**\n', '    @param uuid id of escrowed task\n', '    @param balance Balance to be set of escrowed task\n', '     */\n', '    function setEscrowedTaskBalances(uint uuid, uint balance) public ownerOnly {\n', '        escrowedTaskBalances[uuid] = balance;\n', '    }\n', '\n', '    /**\n', '    @param uuid id of escrowed project\n', '    @param balance Balance to be set of escrowed project\n', '     */\n', '    function setEscrowedProjectBalances(uint uuid, uint balance) public ownerOnly {\n', '        escrowedProjectBalances[uuid] = balance;\n', '    }\n', '\n', '    /**\n', '    @param uuid id of escrowed project\n', '    @param payeeAddress Address funds will go to once project completed\n', '     */\n', '    function setEscrowedProjectPayees(uint uuid, address payeeAddress) public ownerOnly {\n', '        escrowedProjectPayees[uuid] = payeeAddress;\n', '    }\n', '\n', '    /**\n', '    @param balance Balance which to set total task escrow to\n', '     */\n', '    function setTotalTaskEscrow(uint balance) public ownerOnly {\n', '        totalTaskEscrow = balance;\n', '    }\n', '\n', '    /**\n', '    @param balance Balance which to set total project to\n', '     */\n', '    function setTotalProjectEscrow(uint balance) public ownerOnly {\n', '        totalProjectEscrow = balance;\n', '    }\n', '}']