['pragma solidity ^0.4.18;\n', '\n', 'contract SafeMathLib {\n', '  \n', '  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function safeAdd(uint256 a, uint256 b) internal pure  returns (uint256) {\n', '    uint c = a + b;\n', '    assert(c>=a);\n', '    return c;\n', '  }\n', '  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control \n', ' * functions, this simplifies the implementation of "user permissions". \n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '  address public newOwner;\n', '  event OwnershipTransferred(address indexed _from, address indexed _to);\n', '  /** \n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner. \n', '   */\n', '  modifier onlyOwner {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to. \n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    newOwner = _newOwner;\n', '  }\n', '\n', '  function acceptOwnership() public {\n', '    require(msg.sender == newOwner);\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner =  newOwner;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * A token that defines fractional units as decimals.\n', ' */\n', 'contract FractionalERC20 is ERC20 {\n', '  uint8 public decimals;\n', '}\n', '\n', '\n', '\n', '/**\n', ' * Standard ERC20 token with Short Hand Attack and approve() race condition mitigation.\n', ' *\n', ' * Based on code by FirstBlood:\n', ' * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, SafeMathLib {\n', '  /* Token supply got increased and a new owner received these tokens */\n', '  event Minted(address receiver, uint256 amount);\n', '\n', '  /* Actual balances of token holders */\n', '  mapping(address => uint) balances;\n', '\n', '  /* approve() allowances */\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  function transfer(address _to, uint256 _value)\n', '  public\n', '  returns (bool) \n', '  { \n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = safeSub(balances[msg.sender],_value);\n', '    balances[_to] = safeAdd(balances[_to],_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '    \n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    uint _allowance = allowed[_from][msg.sender];\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= _allowance);\n', '    require(balances[_to] + _value > balances[_to]);\n', '\n', '    balances[_to] = safeAdd(balances[_to],_value);\n', '    balances[_from] = safeSub(balances[_from],_value);\n', '    allowed[_from][msg.sender] = safeSub(_allowance,_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _owner) public constant returns (uint balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '   /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = safeAdd(allowed[msg.sender][_spender],_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = safeSub(oldValue,_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is StandardToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    require(_value <= balances[msg.sender]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = msg.sender;\n', '    balances[burner] = safeSub(balances[burner],_value);\n', '    totalSupply = safeSub(totalSupply,_value);\n', '    Burn(burner, _value);\n', '  }\n', '}\n', '\n', '/**\n', ' * Upgrade agent interface inspired by Lunyr.\n', ' *\n', ' * Upgrade agent transfers tokens to a new contract.\n', ' * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n', ' */\n', 'contract UpgradeAgent {\n', '  uint public originalSupply;\n', '  /** Interface marker */\n', '  function isUpgradeAgent() public pure returns (bool) {\n', '    return true;\n', '  }\n', '  function upgradeFrom(address _from, uint256 _value) public;\n', '}\n', '\n', '\n', '/**\n', ' * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n', ' *\n', ' * First envisioned by Golem and Lunyr projects.\n', ' */\n', 'contract UpgradeableToken is StandardToken {\n', '\n', '  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n', '  address public upgradeMaster;\n', '\n', '  /** The next contract where the tokens will be migrated. */\n', '  UpgradeAgent public upgradeAgent;\n', '\n', '  /** How many tokens we have upgraded by now. */\n', '  uint256 public totalUpgraded;\n', '\n', '  /**\n', '   * Upgrade states.\n', '   *\n', '   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\n', '   * - WaitingForAgent: Token allows upgrade, but we don&#39;t have a new agent yet\n', '   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet\n', '   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n', '   *\n', '   */\n', '  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n', '\n', '  /**\n', '   * Somebody has upgraded some of his tokens.\n', '   */\n', '  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '  /**\n', '   * New upgrade agent available.\n', '   */\n', '  event UpgradeAgentSet(address agent);\n', '\n', '  /**\n', '   * Do not allow construction without upgrade master set.\n', '   */\n', '  function UpgradeableToken(address _upgradeMaster) public {\n', '    upgradeMaster = _upgradeMaster;\n', '  }\n', '\n', '  /**\n', '   * Allow the token holder to upgrade some of their tokens to a new contract.\n', '   */\n', '  function upgrade(uint256 value) public {\n', '    UpgradeState state = getUpgradeState();\n', '    require((state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading));\n', '\n', '    // Validate input value.\n', '    require (value != 0);\n', '\n', '    balances[msg.sender] = safeSub(balances[msg.sender],value);\n', '\n', '    // Take tokens out from circulation\n', '    totalSupply = safeSub(totalSupply,value);\n', '    totalUpgraded = safeAdd(totalUpgraded,value);\n', '\n', '    // Upgrade agent reissues the tokens\n', '    upgradeAgent.upgradeFrom(msg.sender, value);\n', '    Upgrade(msg.sender, upgradeAgent, value);\n', '  }\n', '\n', '  /**\n', '   * Set an upgrade agent that handles\n', '   */\n', '  function setUpgradeAgent(address agent) external {\n', '    require(canUpgrade());\n', '\n', '    require(agent != 0x0);\n', '    // Only a master can designate the next agent\n', '    require(msg.sender == upgradeMaster);\n', '    // Upgrade has already begun for an agent\n', '    require(getUpgradeState() != UpgradeState.Upgrading);\n', '\n', '    upgradeAgent = UpgradeAgent(agent);\n', '\n', '    // Bad interface\n', '    require(upgradeAgent.isUpgradeAgent());\n', '    // Make sure that token supplies match in source and target\n', '    require(upgradeAgent.originalSupply() == totalSupply);\n', '\n', '    UpgradeAgentSet(upgradeAgent);\n', '  }\n', '\n', '  /**\n', '   * Get the state of the token upgrade.\n', '   */\n', '  function getUpgradeState() public constant returns(UpgradeState) {\n', '    if(!canUpgrade()) return UpgradeState.NotAllowed;\n', '    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n', '    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n', '    else return UpgradeState.Upgrading;\n', '  }\n', '\n', '  /**\n', '   * Change the upgrade master.\n', '   *\n', '   * This allows us to set a new owner for the upgrade mechanism.\n', '   */\n', '  function setUpgradeMaster(address master) public {\n', '    require(master != 0x0);\n', '    require(msg.sender == upgradeMaster);\n', '    upgradeMaster = master;\n', '  }\n', '\n', '  /**\n', '   * Child contract can enable to provide the condition when the upgrade can begun.\n', '   */\n', '  function canUpgrade() public view returns(bool) {\n', '     return true;\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Define interface for releasing the token transfer after a successful crowdsale.\n', ' */\n', 'contract ReleasableToken is ERC20, Ownable {\n', '\n', '  /* The finalizer contract that allows unlift the transfer limits on this token */\n', '  address public releaseAgent;\n', '\n', '  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n', '  bool public released = false;\n', '\n', '  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n', '  mapping (address => bool) public transferAgents;\n', '\n', '  /**\n', '   * Limit token transfer until the crowdsale is over.\n', '   *\n', '   */\n', '  modifier canTransfer(address _sender) {\n', '\n', '    if(!released) {\n', '        require(transferAgents[_sender]);\n', '    }\n', '\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Set the contract that can call release and make the token transferable.\n', '   *\n', '   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n', '   */\n', '  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n', '\n', '    // We don&#39;t do interface check here as we might want to a normal wallet address to act as a release agent\n', '    releaseAgent = addr;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n', '   */\n', '  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n', '    transferAgents[addr] = state;\n', '  }\n', '\n', '  /**\n', '   * One way function to release the tokens to the wild.\n', '   *\n', '   * Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    released = true;\n', '  }\n', '\n', '  /** The function can be called only before or after the tokens have been releasesd */\n', '  modifier inReleaseState(bool releaseState) {\n', '    require(releaseState == released);\n', '    _;\n', '  }\n', '\n', '  /** The function can be called only by a whitelisted release agent. */\n', '  modifier onlyReleaseAgent() {\n', '    require(msg.sender == releaseAgent);\n', '    _;\n', '  }\n', '\n', '  function transfer(address _to, uint _value) canTransfer(msg.sender) public returns (bool success) {\n', '    // Call StandardToken.transfer()\n', '   return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) public returns (bool success) {\n', '    // Call StandardToken.transferForm()\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * A token that can increase its supply by another contract.\n', ' *\n', ' * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n', ' * Only mint agents, contracts whitelisted by owner, can mint new tokens.\n', ' *\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  /** List of agents that are allowed to create new tokens */\n', '  mapping (address => bool) public mintAgents;\n', '\n', '  event MintingAgentChanged(address addr, bool state);\n', '  event Mint(address indexed to, uint256 amount);\n', '\n', '  /**\n', '   * Create new tokens and allocate them to an address..\n', '   *\n', '   * Only callably by a crowdsale contract (mint agent).\n', '   */\n', '  function mint(address receiver, uint256 amount) onlyMintAgent canMint public returns(bool){\n', '    totalSupply = safeAdd(totalSupply, amount);\n', '    balances[receiver] = safeAdd(balances[receiver], amount);\n', '\n', '    // This will make the mint transaction apper in EtherScan.io\n', '    // We can remove this after there is a standardized minting event\n', '    Mint(receiver, amount);\n', '    Transfer(0, receiver, amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * Owner can allow a crowdsale contract to mint new tokens.\n', '   */\n', '  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n', '    mintAgents[addr] = state;\n', '    MintingAgentChanged(addr, state);\n', '  }\n', '\n', '  modifier onlyMintAgent() {\n', '    // Only crowdsale contracts are allowed to mint new tokens\n', '    require(mintAgents[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  /** Make sure we are not done yet. */\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * A crowdsaled token.\n', ' *\n', ' * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n', ' *\n', ' * - The token transfer() is disabled until the crowdsale is over\n', ' * - The token contract gives an opt-in upgrade path to a new contract\n', ' * - The same token can be part of several crowdsales through approve() mechanism\n', ' * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n', ' *\n', ' */\n', 'contract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, BurnableToken {\n', '\n', '  event UpdatedTokenInformation(string newName, string newSymbol);\n', '\n', '  string public name;\n', '\n', '  string public symbol;\n', '\n', '  uint8 public decimals;\n', '\n', '  /**\n', '   * Construct the token.\n', '   *\n', '   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n', '   *\n', '   * @param _name Token name\n', '   * @param _symbol Token symbol - should be all caps\n', '   * @param _initialSupply How many tokens we start with\n', '   * @param _decimals Number of decimal places\n', '   * @param _mintable Are new tokens created over the crowdsale or do we distribute only the initial supply? Note that when the token becomes transferable the minting always ends.\n', '   */\n', '  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint8 _decimals, bool _mintable)\n', '    public\n', '    UpgradeableToken(msg.sender) \n', '  {\n', '\n', '    // Create any address, can be transferred\n', '    // to team multisig via changeOwner(),\n', '    // also remember to call setUpgradeMaster()\n', '    owner = msg.sender;\n', '\n', '    name = _name;\n', '    symbol = _symbol;\n', '\n', '    totalSupply = _initialSupply;\n', '\n', '    decimals = _decimals;\n', '\n', '    // Create initially all balance on the team multisig\n', '    balances[owner] = totalSupply;\n', '\n', '    if(totalSupply > 0) {\n', '      Minted(owner, totalSupply);\n', '    }\n', '\n', '    // No more new supply allowed after the token creation\n', '    if(!_mintable) {\n', '      mintingFinished = true;\n', '      require(totalSupply != 0);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * When token is released to be transferable, enforce no new tokens can be created.\n', '   */\n', '  function releaseTokenTransfer() public onlyReleaseAgent {\n', '    mintingFinished = true;\n', '    super.releaseTokenTransfer();\n', '  }\n', '\n', '  /**\n', '   * Allow upgrade agent functionality kick in only if the crowdsale was success.\n', '   */\n', '  function canUpgrade() public view returns(bool) {\n', '    return released && super.canUpgrade();\n', '  }\n', '\n', '  /**\n', '   * Owner can update token information here\n', '   */\n', '  function setTokenInformation(string _name, string _symbol) onlyOwner public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    UpdatedTokenInformation(name, symbol);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Finalize agent defines what happens at the end of succeseful crowdsale.\n', ' *\n', ' * - Allocate tokens for founders, bounties and community\n', ' * - Make tokens transferable\n', ' * - etc.\n', ' */\n', 'contract FinalizeAgent {\n', '\n', '  function isFinalizeAgent() public pure returns(bool) {\n', '    return true;\n', '  }\n', '\n', '  /** Return true if we can run finalizeCrowdsale() properly.\n', '   *\n', '   * This is a safety check function that doesn&#39;t allow crowdsale to begin\n', '   * unless the finalizer has been set up properly.\n', '   */\n', '  function isSane() public view returns (bool);\n', '\n', '  /** Called once by crowdsale finalize() if the sale was success. */\n', '  function finalizeCrowdsale() public ;\n', '\n', '}\n', '\n', '/**\n', ' * Interface for defining crowdsale pricing.\n', ' */\n', 'contract PricingStrategy {\n', '\n', '  /** Interface declaration. */\n', '  function isPricingStrategy() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /** Self check if all references are correctly set.\n', '   *\n', '   * Checks that pricing strategy matches crowdsale parameters.\n', '   */\n', '  function isSane(address crowdsale) public view returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * When somebody tries to buy tokens for X eth, calculate how many tokens they get.\n', '   *\n', '   *\n', '   * @param value - What is the value of the transaction send in as wei\n', '   * @param tokensSold - how much tokens have been sold this far\n', '   * @param weiRaised - how much money has been raised this far\n', '   * @param msgSender - who is the investor of this transaction\n', '   * @param decimals - how many decimal units the token has\n', '   * @return Amount of tokens the investor receives\n', '   */\n', '  function calculatePrice(uint256 value, uint256 weiRaised, uint256 tokensSold, address msgSender, uint256 decimals) public constant returns (uint256 tokenAmount);\n', '}\n', '\n', '/*\n', ' * Haltable\n', ' *\n', ' * Abstract contract that allows children to implement an\n', ' * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n', ' *\n', ' *\n', ' * Originally envisioned in FirstBlood ICO contract.\n', ' */\n', 'contract Haltable is Ownable {\n', '  bool public halted;\n', '\n', '  modifier stopInEmergency {\n', '    require(!halted);\n', '    _;\n', '  }\n', '\n', '  modifier onlyInEmergency {\n', '    require(halted);\n', '    _;\n', '  }\n', '\n', '  // called by the owner on emergency, triggers stopped state\n', '  function halt() external onlyOwner {\n', '    halted = true;\n', '  }\n', '\n', '  // called by the owner on end of emergency, returns to normal state\n', '  function unhalt() external onlyOwner onlyInEmergency {\n', '    halted = false;\n', '  }\n', '\n', '}\n', 'contract Allocatable is Ownable {\n', '\n', '  /** List of agents that are allowed to allocate new tokens */\n', '  mapping (address => bool) public allocateAgents;\n', '\n', '  event AllocateAgentChanged(address addr, bool state  );\n', '\n', '  /**\n', '   * Owner can allow a crowdsale contract to allocate new tokens.\n', '   */\n', '  function setAllocateAgent(address addr, bool state) onlyOwner public {\n', '    allocateAgents[addr] = state;\n', '    AllocateAgentChanged(addr, state);\n', '  }\n', '\n', '  modifier onlyAllocateAgent() {\n', '    // Only crowdsale contracts are allowed to allocate new tokens\n', '    require(allocateAgents[msg.sender]);\n', '    _;\n', '  }\n', '}\n', '\n', '/**\n', ' * Abstract base contract for token sales.\n', ' *\n', ' * Handle\n', ' * - start and end dates\n', ' * - accepting investments\n', ' * - minimum funding goal and refund\n', ' * - various statistics during the crowdfund\n', ' * - different pricing strategies\n', ' * - different investment policies (require server side customer id, allow only whitelisted addresses)\n', ' *\n', ' */\n', 'contract Crowdsale is Allocatable, Haltable, SafeMathLib {\n', '\n', '  /* Max investment count when we are still allowed to change the multisig address */\n', '  uint public MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE = 5;\n', '\n', '  /* The token we are selling */\n', '  FractionalERC20 public token;\n', '\n', '  /* Token Vesting Contract */\n', '  address public tokenVestingAddress;\n', '\n', '  /* How we are going to price our offering */\n', '  PricingStrategy public pricingStrategy;\n', '\n', '  /* Post-success callback */\n', '  FinalizeAgent public finalizeAgent;\n', '\n', '  /* tokens will be transfered from this address */\n', '  address public multisigWallet;\n', '\n', '  /* if the funding goal is not reached, investors may withdraw their funds */\n', '  uint256 public minimumFundingGoal;\n', '\n', '  /* the UNIX timestamp start date of the crowdsale */\n', '  uint256 public startsAt;\n', '\n', '  /* the UNIX timestamp end date of the crowdsale */\n', '  uint256 public endsAt;\n', '\n', '  /* the number of tokens already sold through this contract*/\n', '  uint256 public tokensSold = 0;\n', '\n', '  /* How many wei of funding we have raised */\n', '  uint256 public weiRaised = 0;\n', '\n', '  /* How many distinct addresses have invested */\n', '  uint256 public investorCount = 0;\n', '\n', '  /* How much wei we have returned back to the contract after a failed crowdfund. */\n', '  uint256 public loadedRefund = 0;\n', '\n', '  /* How much wei we have given back to investors.*/\n', '  uint256 public weiRefunded = 0;\n', '\n', '  /* Has this crowdsale been finalized */\n', '  bool public finalized;\n', '\n', '  /* Do we need to have unique contributor id for each customer */\n', '  bool public requireCustomerId;\n', '\n', '  /**\n', '    * Do we verify that contributor has been cleared on the server side (accredited investors only).\n', '    * This method was first used in FirstBlood crowdsale to ensure all contributors have accepted terms on sale (on the web).\n', '    */\n', '  bool public requiredSignedAddress;\n', '\n', '  /* Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\n', '  address public signerAddress;\n', '\n', '  /** How much ETH each address has invested to this crowdsale */\n', '  mapping (address => uint256) public investedAmountOf;\n', '\n', '  /** How much tokens this crowdsale has credited for each investor address */\n', '  mapping (address => uint256) public tokenAmountOf;\n', '\n', '  /** Addresses that are allowed to invest even before ICO offical opens. For testing, for ICO partners, etc. */\n', '  mapping (address => bool) public earlyParticipantWhitelist;\n', '\n', '  /** This is for manul testing for the interaction from owner wallet. You can set it to any value and inspect this in blockchain explorer to see that crowdsale interaction works. */\n', '  uint256 public ownerTestValue;\n', '\n', '  uint256 public earlyPariticipantWeiPrice =82815734989648;\n', '\n', '  uint256 public whitelistBonusPercentage = 15;\n', '  uint256 public whitelistPrincipleLockPercentage = 50;\n', '  uint256 public whitelistBonusLockPeriod = 7776000;\n', '  uint256 public whitelistPrincipleLockPeriod = 7776000;\n', '\n', '  /** State machine\n', '   *\n', '   * - Preparing: All contract initialization calls and variables have not been set yet\n', '   * - Prefunding: We have not passed start time yet\n', '   * - Funding: Active crowdsale\n', '   * - Success: Minimum funding goal reached\n', '   * - Failure: Minimum funding goal not reached before ending time\n', '   * - Finalized: The finalized has been called and succesfully executed\n', '   * - Refunding: Refunds are loaded on the contract for reclaim.\n', '   */\n', '  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\n', '\n', '  // A new investment was made\n', '  event Invested(address investor, uint256 weiAmount, uint256 tokenAmount, uint128 customerId);\n', '\n', '  // Refund was processed for a contributor\n', '  event Refund(address investor, uint256 weiAmount);\n', '\n', '  // The rules were changed what kind of investments we accept\n', '  event InvestmentPolicyChanged(bool requireCustId, bool requiredSignedAddr, address signerAddr);\n', '\n', '  // Address early participation whitelist status changed\n', '  event Whitelisted(address addr, bool status);\n', '\n', '  // Crowdsale end time has been changed\n', '  event EndsAtChanged(uint256 endAt);\n', '\n', '  // Crowdsale start time has been changed\n', '  event StartAtChanged(uint256 endsAt);\n', '\n', '  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, \n', '  uint256 _start, uint256 _end, uint256 _minimumFundingGoal, address _tokenVestingAddress) public \n', '  {\n', '\n', '    owner = msg.sender;\n', '\n', '    token = FractionalERC20(_token);\n', '\n', '    tokenVestingAddress = _tokenVestingAddress;\n', '\n', '    setPricingStrategy(_pricingStrategy);\n', '\n', '    multisigWallet = _multisigWallet;\n', '    require(multisigWallet != 0);\n', '\n', '    require(_start != 0);\n', '\n', '    startsAt = _start;\n', '\n', '    require(_end != 0);\n', '\n', '    endsAt = _end;\n', '\n', '    // Don&#39;t mess the dates\n', '    require(startsAt < endsAt);\n', '\n', '    // Minimum funding goal can be zero\n', '    minimumFundingGoal = _minimumFundingGoal;\n', '\n', '  }\n', '\n', '  /**\n', '   * Don&#39;t expect to just send in money and get tokens.\n', '   */\n', '  function() payable public {\n', '    invest(msg.sender);\n', '  }\n', '\n', '  /** Function to set default vesting schedule parameters. */\n', '    function setDefaultWhitelistVestingParameters(uint256 _bonusPercentage, uint256 _principleLockPercentage, uint256 _bonusLockPeriod, uint256 _principleLockPeriod, uint256 _earlyPariticipantWeiPrice) onlyAllocateAgent public {\n', '\n', '        whitelistBonusPercentage = _bonusPercentage;\n', '        whitelistPrincipleLockPercentage = _principleLockPercentage;\n', '        whitelistBonusLockPeriod = _bonusLockPeriod;\n', '        whitelistPrincipleLockPeriod = _principleLockPeriod;\n', '        earlyPariticipantWeiPrice = _earlyPariticipantWeiPrice;\n', '    }\n', '\n', '  /**\n', '   * Make an investment.\n', '   *\n', '   * Crowdsale must be running for one to invest.\n', '   * We must have not pressed the emergency brake.\n', '   *\n', '   * @param receiver The Ethereum address who receives the tokens\n', '   * @param customerId (optional) UUID v4 to track the successful payments on the server side\n', '   *\n', '   */\n', '  function investInternal(address receiver, uint128 customerId) stopInEmergency private {\n', '\n', '    uint256 tokenAmount;\n', '    uint256 weiAmount = msg.value;\n', '    // Determine if it&#39;s a good time to accept investment from this participant\n', '    if (getState() == State.PreFunding) {\n', '        // Are we whitelisted for early deposit\n', '        require(earlyParticipantWhitelist[receiver]);\n', '        require(weiAmount >= safeMul(15, uint(10 ** 18)));\n', '        require(weiAmount <= safeMul(50, uint(10 ** 18)));\n', '        tokenAmount = safeDiv(safeMul(weiAmount, uint(10) ** token.decimals()), earlyPariticipantWeiPrice);\n', '        \n', '        if (investedAmountOf[receiver] == 0) {\n', '          // A new investor\n', '          investorCount++;\n', '        }\n', '\n', '        // Update investor\n', '        investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver],weiAmount);\n', '        tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver],tokenAmount);\n', '\n', '        // Update totals\n', '        weiRaised = safeAdd(weiRaised,weiAmount);\n', '        tokensSold = safeAdd(tokensSold,tokenAmount);\n', '\n', '        // Check that we did not bust the cap\n', '        require(!isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold));\n', '\n', '        if (safeAdd(whitelistPrincipleLockPercentage,whitelistBonusPercentage) > 0) {\n', '\n', '            uint256 principleAmount = safeDiv(safeMul(tokenAmount, 100), safeAdd(whitelistBonusPercentage, 100));\n', '            uint256 bonusLockAmount = safeDiv(safeMul(whitelistBonusPercentage, principleAmount), 100);\n', '            uint256 principleLockAmount = safeDiv(safeMul(whitelistPrincipleLockPercentage, principleAmount), 100);\n', '\n', '            uint256 totalLockAmount = safeAdd(principleLockAmount, bonusLockAmount);\n', '            TokenVesting tokenVesting = TokenVesting(tokenVestingAddress);\n', '            \n', '            // to prevent minting of tokens which will be useless as vesting amount cannot be updated\n', '            require(!tokenVesting.isVestingSet(receiver));\n', '            require(totalLockAmount <= tokenAmount);\n', '            assignTokens(tokenVestingAddress,totalLockAmount);\n', '            \n', '            // set vesting with default schedule\n', '            tokenVesting.setVesting(receiver, principleLockAmount, whitelistPrincipleLockPeriod, bonusLockAmount, whitelistBonusLockPeriod); \n', '        }\n', '\n', '        // assign remaining tokens to contributor\n', '        if (tokenAmount - totalLockAmount > 0) {\n', '            assignTokens(receiver, tokenAmount - totalLockAmount);\n', '        }\n', '\n', '        // Pocket the money\n', '        require(multisigWallet.send(weiAmount));\n', '\n', '        // Tell us invest was success\n', '        Invested(receiver, weiAmount, tokenAmount, customerId);       \n', '\n', '    \n', '    } else if(getState() == State.Funding) {\n', '        // Retail participants can only come in when the crowdsale is running\n', '        tokenAmount = pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals());\n', '        require(tokenAmount != 0);\n', '\n', '\n', '        if(investedAmountOf[receiver] == 0) {\n', '          // A new investor\n', '          investorCount++;\n', '        }\n', '\n', '        // Update investor\n', '        investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver],weiAmount);\n', '        tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver],tokenAmount);\n', '\n', '        // Update totals\n', '        weiRaised = safeAdd(weiRaised,weiAmount);\n', '        tokensSold = safeAdd(tokensSold,tokenAmount);\n', '\n', '        // Check that we did not bust the cap\n', '        require(!isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold));\n', '\n', '        assignTokens(receiver, tokenAmount);\n', '\n', '        // Pocket the money\n', '        require(multisigWallet.send(weiAmount));\n', '\n', '        // Tell us invest was success\n', '        Invested(receiver, weiAmount, tokenAmount, customerId);\n', '\n', '    } else {\n', '      // Unwanted state\n', '      require(false);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * allocate tokens for the early investors.\n', '   *\n', '   * Preallocated tokens have been sold before the actual crowdsale opens.\n', '   * This function mints the tokens and moves the crowdsale needle.\n', '   *\n', '   * Investor count is not handled; it is assumed this goes for multiple investors\n', '   * and the token distribution happens outside the smart contract flow.\n', '   *\n', '   * No money is exchanged, as the crowdsale team already have received the payment.\n', '   *\n', '   * @param weiPrice Price of a single full token in wei\n', '   *\n', '   */\n', '  function preallocate(address receiver, uint256 tokenAmount, uint256 weiPrice, uint256 principleLockAmount, uint256 principleLockPeriod, uint256 bonusLockAmount, uint256 bonusLockPeriod) public onlyAllocateAgent {\n', '\n', '\n', '    uint256 weiAmount = (weiPrice * tokenAmount)/10**uint256(token.decimals()); // This can be also 0, we give out tokens for free\n', '    uint256 totalLockAmount = 0;\n', '    weiRaised = safeAdd(weiRaised,weiAmount);\n', '    tokensSold = safeAdd(tokensSold,tokenAmount);\n', '\n', '    investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver],weiAmount);\n', '    tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver],tokenAmount);\n', '\n', '    // cannot lock more than total tokens\n', '    totalLockAmount = safeAdd(principleLockAmount, bonusLockAmount);\n', '    require(totalLockAmount <= tokenAmount);\n', '\n', '    // assign locked token to Vesting contract\n', '    if (totalLockAmount > 0) {\n', '\n', '      TokenVesting tokenVesting = TokenVesting(tokenVestingAddress);\n', '      \n', '      // to prevent minting of tokens which will be useless as vesting amount cannot be updated\n', '      require(!tokenVesting.isVestingSet(receiver));\n', '      assignTokens(tokenVestingAddress,totalLockAmount);\n', '      \n', '      // set vesting with default schedule\n', '      tokenVesting.setVesting(receiver, principleLockAmount, principleLockPeriod, bonusLockAmount, bonusLockPeriod); \n', '    }\n', '\n', '    // assign remaining tokens to contributor\n', '    if (tokenAmount - totalLockAmount > 0) {\n', '      assignTokens(receiver, tokenAmount - totalLockAmount);\n', '    }\n', '\n', '    // Tell us invest was success\n', '    Invested(receiver, weiAmount, tokenAmount, 0);\n', '  }\n', '\n', '  /**\n', '   * Track who is the customer making the payment so we can send thank you email.\n', '   */\n', '  function investWithCustomerId(address addr, uint128 customerId) public payable {\n', '    require(!requiredSignedAddress);\n', '    require(customerId != 0);\n', '    investInternal(addr, customerId);\n', '  }\n', '\n', '  /**\n', '   * Allow anonymous contributions to this crowdsale.\n', '   */\n', '  function invest(address addr) public payable {\n', '    require(!requireCustomerId);\n', '    \n', '    require(!requiredSignedAddress);\n', '    investInternal(addr, 0);\n', '  }\n', '\n', '  /**\n', '   * Invest to tokens, recognize the payer and clear his address.\n', '   *\n', '   */\n', '  \n', '  // function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n', '  //   investWithSignedAddress(msg.sender, customerId, v, r, s);\n', '  // }\n', '\n', '  /**\n', '   * Invest to tokens, recognize the payer.\n', '   *\n', '   */\n', '  function buyWithCustomerId(uint128 customerId) public payable {\n', '    investWithCustomerId(msg.sender, customerId);\n', '  }\n', '\n', '  /**\n', '   * The basic entry point to participate the crowdsale process.\n', '   *\n', '   * Pay for funding, get invested tokens back in the sender address.\n', '   */\n', '  function buy() public payable {\n', '    invest(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * Finalize a succcesful crowdsale.\n', '   *\n', '   * The owner can triggre a call the contract that provides post-crowdsale actions, like releasing the tokens.\n', '   */\n', '  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n', '\n', '    // Already finalized\n', '    require(!finalized);\n', '\n', '    // Finalizing is optional. We only call it if we are given a finalizing agent.\n', '    if(address(finalizeAgent) != 0) {\n', '      finalizeAgent.finalizeCrowdsale();\n', '    }\n', '\n', '    finalized = true;\n', '  }\n', '\n', '  /**\n', '   * Allow to (re)set finalize agent.\n', '   *\n', '   * Design choice: no state restrictions on setting this, so that we can fix fat finger mistakes.\n', '   */\n', '  function setFinalizeAgent(FinalizeAgent addr) public onlyOwner {\n', '    finalizeAgent = addr;\n', '\n', '    // Don&#39;t allow setting bad agent\n', '    require(finalizeAgent.isFinalizeAgent());\n', '  }\n', '\n', '  /**\n', '   * Set policy do we need to have server-side customer ids for the investments.\n', '   *\n', '   */\n', '  function setRequireCustomerId(bool value) public onlyOwner {\n', '    requireCustomerId = value;\n', '    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n', '  }\n', '\n', '  /**\n', '   * Allow addresses to do early participation.\n', '   *\n', '   * TODO: Fix spelling error in the name\n', '   */\n', '  function setEarlyParicipantWhitelist(address addr, bool status) public onlyAllocateAgent {\n', '    earlyParticipantWhitelist[addr] = status;\n', '    Whitelisted(addr, status);\n', '  }\n', '\n', '  function setWhiteList(address[] _participants) public onlyAllocateAgent {\n', '      \n', '      require(_participants.length > 0);\n', '      uint256 participants = _participants.length;\n', '\n', '      for (uint256 j=0; j<participants; j++) {\n', '      require(_participants[j] != 0);\n', '      earlyParticipantWhitelist[_participants[j]] = true;\n', '      Whitelisted(_participants[j], true);\n', '    }\n', '\n', '  }\n', '\n', '  /**\n', '   * Allow crowdsale owner to close early or extend the crowdsale.\n', '   *\n', '   * This is useful e.g. for a manual soft cap implementation:\n', '   * - after X amount is reached determine manual closing\n', '   *\n', '   * This may put the crowdsale to an invalid state,\n', '   * but we trust owners know what they are doing.\n', '   *\n', '   */\n', '  function setEndsAt(uint time) public onlyOwner {\n', '\n', '    require(now <= time);\n', '\n', '    endsAt = time;\n', '    EndsAtChanged(endsAt);\n', '  }\n', '\n', '  /**\n', '   * Allow crowdsale owner to begin early or extend the crowdsale.\n', '   *\n', '   * This is useful e.g. for a manual soft cap implementation:\n', '   * - after X amount is reached determine manual closing\n', '   *\n', '   * This may put the crowdsale to an invalid state,\n', '   * but we trust owners know what they are doing.\n', '   *\n', '   */\n', '  function setStartAt(uint time) public onlyOwner {\n', '\n', '    startsAt = time;\n', '    StartAtChanged(endsAt);\n', '  }\n', '\n', '  /**\n', '   * Allow to (re)set pricing strategy.\n', '   *\n', '   * Design choice: no state restrictions on the set, so that we can fix fat finger mistakes.\n', '   */\n', '  function setPricingStrategy(PricingStrategy _pricingStrategy) public onlyOwner {\n', '    pricingStrategy = _pricingStrategy;\n', '\n', '    // Don&#39;t allow setting bad agent\n', '    require(pricingStrategy.isPricingStrategy());\n', '  }\n', '\n', '  /**\n', '   * Allow to change the team multisig address in the case of emergency.\n', '   *\n', '   * This allows to save a deployed crowdsale wallet in the case the crowdsale has not yet begun\n', '   * (we have done only few test transactions). After the crowdsale is going\n', '   * then multisig address stays locked for the safety reasons.\n', '   */\n', '  function setMultisig(address addr) public onlyOwner {\n', '\n', '    // Change\n', '    require(investorCount <= MAX_INVESTMENTS_BEFORE_MULTISIG_CHANGE);\n', '\n', '    multisigWallet = addr;\n', '  }\n', '\n', '  /**\n', '   * Allow load refunds back on the contract for the refunding.\n', '   *\n', '   * The team can transfer the funds back on the smart contract in the case the minimum goal was not reached..\n', '   */\n', '  function loadRefund() public payable inState(State.Failure) {\n', '    require(msg.value != 0);\n', '    loadedRefund = safeAdd(loadedRefund,msg.value);\n', '  }\n', '\n', '  /**\n', '   * Investors can claim refund.\n', '   */\n', '  function refund() public inState(State.Refunding) {\n', '    uint256 weiValue = investedAmountOf[msg.sender];\n', '    require(weiValue != 0);\n', '    investedAmountOf[msg.sender] = 0;\n', '    weiRefunded = safeAdd(weiRefunded,weiValue);\n', '    Refund(msg.sender, weiValue);\n', '    require(msg.sender.send(weiValue));\n', '  }\n', '\n', '  /**\n', '   * @return true if the crowdsale has raised enough money to be a succes\n', '   */\n', '  function isMinimumGoalReached() public constant returns (bool reached) {\n', '    return weiRaised >= minimumFundingGoal;\n', '  }\n', '\n', '  /**\n', '   * Check if the contract relationship looks good.\n', '   */\n', '  function isFinalizerSane() public constant returns (bool sane) {\n', '    return finalizeAgent.isSane();\n', '  }\n', '\n', '  /**\n', '   * Check if the contract relationship looks good.\n', '   */\n', '  function isPricingSane() public constant returns (bool sane) {\n', '    return pricingStrategy.isSane(address(this));\n', '  }\n', '\n', '  /**\n', '   * Crowdfund state machine management.\n', '   *\n', '   * We make it a function and do not assign the result to a variable, so there is no chance of the variable being stale.\n', '   */\n', '  function getState() public constant returns (State) {\n', '    if(finalized) return State.Finalized;\n', '    else if (address(finalizeAgent) == 0) return State.Preparing;\n', '    else if (!finalizeAgent.isSane()) return State.Preparing;\n', '    else if (!pricingStrategy.isSane(address(this))) return State.Preparing;\n', '    else if (block.timestamp < startsAt) return State.PreFunding;\n', '    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n', '    else if (isMinimumGoalReached()) return State.Success;\n', '    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\n', '    else return State.Failure;\n', '  }\n', '\n', '  /** This is for manual testing of multisig wallet interaction */\n', '  function setOwnerTestValue(uint val) public onlyOwner {\n', '    ownerTestValue = val;\n', '  }\n', '\n', '  /** Interface marker. */\n', '  function isCrowdsale() public pure returns (bool) {\n', '    return true;\n', '  }\n', '\n', '  //\n', '  // Modifiers\n', '  //\n', '\n', '  /** Modified allowing execution only if the crowdsale is currently running.  */\n', '  modifier inState(State state) {\n', '    require(getState() == state);\n', '    _;\n', '  }\n', '\n', '\n', '  //\n', '  // Abstract functions\n', '  //\n', '\n', '  /**\n', '   * Check if the current invested breaks our cap rules.\n', '   *\n', '   *\n', '   * The child contract must define their own cap setting rules.\n', '   * We allow a lot of flexibility through different capping strategies (ETH, token count)\n', '   * Called from invest().\n', '   *\n', '   * @param weiAmount The amount of wei the investor tries to invest in the current transaction\n', '   * @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\n', '   * @param weiRaisedTotal What would be our total raised balance after this transaction\n', '   * @param tokensSoldTotal What would be our total sold tokens count after this transaction\n', '   *\n', '   * @return true if taking this investment would break our cap rules\n', '   */\n', '  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) public constant returns (bool limitBroken);\n', '  /**\n', '   * Check if the current crowdsale is full and we can no longer sell any tokens.\n', '   */\n', '  function isCrowdsaleFull() public constant returns (bool);\n', '\n', '  /**\n', '   * Create new tokens or transfer issued tokens to the investor depending on the cap model.\n', '   */\n', '  function assignTokens(address receiver, uint tokenAmount) private;\n', '}\n', '\n', '/**\n', ' * At the end of the successful crowdsale allocate % bonus of tokens to the team.\n', ' *\n', ' * Unlock tokens.\n', ' *\n', ' * BonusAllocationFinal must be set as the minting agent for the MintableToken.\n', ' *\n', ' */\n', 'contract BonusFinalizeAgent is FinalizeAgent, SafeMathLib {\n', '\n', '  CrowdsaleToken public token;\n', '  Crowdsale public crowdsale;\n', '  uint256 public allocatedTokens;\n', '  uint256 tokenCap;\n', '  address walletAddress;\n', '\n', '\n', '  function BonusFinalizeAgent(CrowdsaleToken _token, Crowdsale _crowdsale, uint256 _tokenCap, address _walletAddress) public {\n', '    token = _token;\n', '    crowdsale = _crowdsale;\n', '\n', '    //crowdsale address must not be 0\n', '    require(address(crowdsale) != 0);\n', '\n', '    tokenCap = _tokenCap;\n', '    walletAddress = _walletAddress;\n', '  }\n', '\n', '  /* Can we run finalize properly */\n', '  function isSane() public view returns (bool) {\n', '    return (token.mintAgents(address(this)) == true) && (token.releaseAgent() == address(this));\n', '  }\n', '\n', '  /** Called once by crowdsale finalize() if the sale was success. */\n', '  function finalizeCrowdsale() public {\n', '\n', '    // if finalized is not being called from the crowdsale \n', '    // contract then throw\n', '    require (msg.sender == address(crowdsale));\n', '\n', '    // get the total sold tokens count.\n', '    uint256 tokenSupply = token.totalSupply();\n', '\n', '    allocatedTokens = safeSub(tokenCap,tokenSupply);\n', '    \n', '    if ( allocatedTokens > 0) {\n', '      token.mint(walletAddress, allocatedTokens);\n', '    }\n', '\n', '    token.releaseTokenTransfer();\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * ICO crowdsale contract that is capped by amout of ETH.\n', ' *\n', ' * - Tokens are dynamically created during the crowdsale\n', ' *\n', ' *\n', ' */\n', 'contract MintedEthCappedCrowdsale is Crowdsale {\n', '\n', '  /* Maximum amount of wei this crowdsale can raise. */\n', '  uint public weiCap;\n', '\n', '  function MintedEthCappedCrowdsale(address _token, PricingStrategy _pricingStrategy, \n', '    address _multisigWallet, uint256 _start, uint256 _end, uint256 _minimumFundingGoal, uint256 _weiCap, address _tokenVestingAddress) \n', '    Crowdsale(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal,_tokenVestingAddress) public\n', '    { \n', '      weiCap = _weiCap;\n', '    }\n', '\n', '  /**\n', '   * Called from invest() to confirm if the curret investment does not break our cap rule.\n', '   */\n', '  function isBreakingCap(uint256 weiAmount, uint256 tokenAmount, uint256 weiRaisedTotal, uint256 tokensSoldTotal) public constant returns (bool limitBroken) {\n', '    return weiRaisedTotal > weiCap;\n', '  }\n', '\n', '  function isCrowdsaleFull() public constant returns (bool) {\n', '    return weiRaised >= weiCap;\n', '  }\n', '\n', '  /**\n', '   * Dynamically create tokens and assign them to the investor.\n', '   */\n', '  function assignTokens(address receiver, uint256 tokenAmount) private {\n', '    MintableToken mintableToken = MintableToken(token);\n', '    mintableToken.mint(receiver, tokenAmount);\n', '  }\n', '}\n', '\n', '\n', '/// @dev Tranche based pricing with special support for pre-ico deals.\n', '///      Implementing "first price" tranches, meaning, that if byers order is\n', '///      covering more than one tranche, the price of the lowest tranche will apply\n', '///      to the whole order.\n', 'contract EthTranchePricing is PricingStrategy, Ownable, SafeMathLib {\n', '\n', '  uint public constant MAX_TRANCHES = 10;\n', ' \n', ' \n', '  // This contains all pre-ICO addresses, and their prices (weis per token)\n', '  mapping (address => uint256) public preicoAddresses;\n', '\n', '  /**\n', '  * Define pricing schedule using tranches.\n', '  */\n', '\n', '  struct Tranche {\n', '      // Amount in weis when this tranche becomes active\n', '      uint amount;\n', '      // How many tokens per wei you will get while this tranche is active\n', '      uint price;\n', '  }\n', '\n', '  // Store tranches in a fixed array, so that it can be seen in a blockchain explorer\n', '  // Tranche 0 is always (0, 0)\n', '  // (TODO: change this when we confirm dynamic arrays are explorable)\n', '  Tranche[10] public tranches;\n', '\n', '  // How many active tranches we have\n', '  uint public trancheCount;\n', '\n', '  /// @dev Contruction, creating a list of tranches\n', '  /// @param _tranches uint[] tranches Pairs of (start amount, price)\n', '  function EthTranchePricing(uint[] _tranches) public {\n', '\n', '    // Need to have tuples, length check\n', '    require(!(_tranches.length % 2 == 1 || _tranches.length >= MAX_TRANCHES*2));\n', '    trancheCount = _tranches.length / 2;\n', '    uint256 highestAmount = 0;\n', '    for(uint256 i=0; i<_tranches.length/2; i++) {\n', '      tranches[i].amount = _tranches[i*2];\n', '      tranches[i].price = _tranches[i*2+1];\n', '      // No invalid steps\n', '      require(!((highestAmount != 0) && (tranches[i].amount <= highestAmount)));\n', '      highestAmount = tranches[i].amount;\n', '    }\n', '\n', '    // We need to start from zero, otherwise we blow up our deployment\n', '    require(tranches[0].amount == 0);\n', '\n', '    // Last tranche price must be zero, terminating the crowdale\n', '    require(tranches[trancheCount-1].price == 0);\n', '  }\n', '\n', '  /// @dev This is invoked once for every pre-ICO address, set pricePerToken\n', '  ///      to 0 to disable\n', '  /// @param preicoAddress PresaleFundCollector address\n', '  /// @param pricePerToken How many weis one token cost for pre-ico investors\n', '  function setPreicoAddress(address preicoAddress, uint pricePerToken)\n', '    public\n', '    onlyOwner\n', '  {\n', '    preicoAddresses[preicoAddress] = pricePerToken;\n', '  }\n', '\n', '  /// @dev Iterate through tranches. You reach end of tranches when price = 0\n', '  /// @return tuple (time, price)\n', '  function getTranche(uint256 n) public constant returns (uint, uint) {\n', '    return (tranches[n].amount, tranches[n].price);\n', '  }\n', '\n', '  function getFirstTranche() private constant returns (Tranche) {\n', '    return tranches[0];\n', '  }\n', '\n', '  function getLastTranche() private constant returns (Tranche) {\n', '    return tranches[trancheCount-1];\n', '  }\n', '\n', '  function getPricingStartsAt() public constant returns (uint) {\n', '    return getFirstTranche().amount;\n', '  }\n', '\n', '  function getPricingEndsAt() public constant returns (uint) {\n', '    return getLastTranche().amount;\n', '  }\n', '\n', '  function isSane(address _crowdsale) public view returns(bool) {\n', '    // Our tranches are not bound by time, so we can&#39;t really check are we sane\n', '    // so we presume we are ;)\n', '    // In the future we could save and track raised tokens, and compare it to\n', '    // the Crowdsale contract.\n', '    return true;\n', '  }\n', '\n', '  /// @dev Get the current tranche or bail out if we are not in the tranche periods.\n', '  /// @param weiRaised total amount of weis raised, for calculating the current tranche\n', '  /// @return {[type]} [description]\n', '  function getCurrentTranche(uint256 weiRaised) private constant returns (Tranche) {\n', '    uint i;\n', '    for(i=0; i < tranches.length; i++) {\n', '      if(weiRaised < tranches[i].amount) {\n', '        return tranches[i-1];\n', '      }\n', '    }\n', '  }\n', '\n', '  /// @dev Get the current price.\n', '  /// @param weiRaised total amount of weis raised, for calculating the current tranche\n', '  /// @return The current price or 0 if we are outside trache ranges\n', '  function getCurrentPrice(uint256 weiRaised) public constant returns (uint256 result) {\n', '    return getCurrentTranche(weiRaised).price;\n', '  }\n', '\n', '  /// @dev Calculate the current price for buy in amount.\n', '  function calculatePrice(uint256 value, uint256 weiRaised, uint256 tokensSold, address msgSender, uint256 decimals) public constant returns (uint256) {\n', '\n', '    uint256 multiplier = 10 ** decimals;\n', '\n', '    // This investor is coming through pre-ico\n', '    if(preicoAddresses[msgSender] > 0) {\n', '      return safeMul(value, multiplier) / preicoAddresses[msgSender];\n', '    }\n', '\n', '    uint256 price = getCurrentPrice(weiRaised);\n', '    \n', '    return safeMul(value, multiplier) / price;\n', '  }\n', '\n', '  function() payable public {\n', '    revert(); // No money on this contract\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * Contract to enforce Token Vesting\n', ' */\n', 'contract TokenVesting is Allocatable, SafeMathLib {\n', '\n', '    address public TokenAddress;\n', '\n', '    /** keep track of total tokens yet to be released, \n', '     * this should be less than or equal to tokens held by this contract. \n', '     */\n', '    uint256 public totalUnreleasedTokens;\n', '\n', '\n', '    struct VestingSchedule {\n', '        uint256 startAt;\n', '        uint256 principleLockAmount;\n', '        uint256 principleLockPeriod;\n', '        uint256 bonusLockAmount;\n', '        uint256 bonusLockPeriod;\n', '        uint256 amountReleased;\n', '        bool isPrincipleReleased;\n', '        bool isBonusReleased;\n', '    }\n', '\n', '    mapping (address => VestingSchedule) public vestingMap;\n', '\n', '    event VestedTokensReleased(address _adr, uint256 _amount);\n', '\n', '\n', '    function TokenVesting(address _TokenAddress) public {\n', '        TokenAddress = _TokenAddress;\n', '    }\n', '\n', '\n', '\n', '    /** Function to set/update vesting schedule. PS - Amount cannot be changed once set */\n', '    function setVesting(address _adr, uint256 _principleLockAmount, uint256 _principleLockPeriod, uint256 _bonusLockAmount, uint256 _bonuslockPeriod) public onlyAllocateAgent {\n', '\n', '        VestingSchedule storage vestingSchedule = vestingMap[_adr];\n', '\n', '        // data validation\n', '        require(safeAdd(_principleLockAmount, _bonusLockAmount) > 0);\n', '\n', '        //startAt is set current time as start time.\n', '\n', '        vestingSchedule.startAt = block.timestamp;\n', '        vestingSchedule.bonusLockPeriod = safeAdd(block.timestamp,_bonuslockPeriod);\n', '        vestingSchedule.principleLockPeriod = safeAdd(block.timestamp,_principleLockPeriod);\n', '\n', '        // check if enough tokens are held by this contract\n', '        ERC20 token = ERC20(TokenAddress);\n', '        uint256 _totalAmount = safeAdd(_principleLockAmount, _bonusLockAmount);\n', '        require(token.balanceOf(this) >= safeAdd(totalUnreleasedTokens, _totalAmount));\n', '        vestingSchedule.principleLockAmount = _principleLockAmount;\n', '        vestingSchedule.bonusLockAmount = _bonusLockAmount;\n', '        vestingSchedule.isPrincipleReleased = false;\n', '        vestingSchedule.isBonusReleased = false;\n', '        totalUnreleasedTokens = safeAdd(totalUnreleasedTokens, _totalAmount);\n', '        vestingSchedule.amountReleased = 0;\n', '    }\n', '\n', '    function isVestingSet(address adr) public constant returns (bool isSet) {\n', '        return vestingMap[adr].principleLockAmount != 0 || vestingMap[adr].bonusLockAmount != 0;\n', '    }\n', '\n', '\n', '    /** Release tokens as per vesting schedule, called by contributor  */\n', '    function releaseMyVestedTokens() public {\n', '        releaseVestedTokens(msg.sender);\n', '    }\n', '\n', '    /** Release tokens as per vesting schedule, called by anyone  */\n', '    function releaseVestedTokens(address _adr) public {\n', '        VestingSchedule storage vestingSchedule = vestingMap[_adr];\n', '        \n', '        uint256 _totalTokens = safeAdd(vestingSchedule.principleLockAmount, vestingSchedule.bonusLockAmount);\n', '        // check if all tokens are not vested\n', '        require(safeSub(_totalTokens, vestingSchedule.amountReleased) > 0);\n', '        \n', '        // calculate total vested tokens till now        \n', '        uint256 amountToRelease = 0;\n', '\n', '        if (block.timestamp >= vestingSchedule.principleLockPeriod && !vestingSchedule.isPrincipleReleased) {\n', '            amountToRelease = safeAdd(amountToRelease,vestingSchedule.principleLockAmount);\n', '            vestingSchedule.amountReleased = safeAdd(vestingSchedule.amountReleased, amountToRelease);\n', '            vestingSchedule.isPrincipleReleased = true;\n', '        }\n', '        if (block.timestamp >= vestingSchedule.bonusLockPeriod && !vestingSchedule.isBonusReleased) {\n', '            amountToRelease = safeAdd(amountToRelease,vestingSchedule.bonusLockAmount);\n', '            vestingSchedule.amountReleased = safeAdd(vestingSchedule.amountReleased, amountToRelease);\n', '            vestingSchedule.isBonusReleased = true;\n', '        }\n', '\n', '        // transfer vested tokens\n', '        require(amountToRelease > 0);\n', '        ERC20 token = ERC20(TokenAddress);\n', '        token.transfer(_adr, amountToRelease);\n', '        // decrement overall unreleased token count\n', '        totalUnreleasedTokens = safeSub(totalUnreleasedTokens, amountToRelease);\n', '        VestedTokensReleased(_adr, amountToRelease);\n', '    }\n', '\n', '}']