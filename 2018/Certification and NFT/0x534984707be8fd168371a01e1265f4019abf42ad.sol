['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  // 1 denied / 0 allow\n', '  mapping(address => uint8) permissionsList;\n', '\n', '  function SetPermissionsList(address _address, uint8 _sign) public onlyOwner{\n', '    permissionsList[_address] = _sign;\n', '  }\n', '  function GetPermissionsList(address _address) public constant onlyOwner returns(uint8){\n', '    return permissionsList[_address];\n', '  }\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(permissionsList[msg.sender] == 0);\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(permissionsList[_from] == 0);\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BurnableByOwner is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '  function burn(address _address, uint256 _value) public onlyOwner{\n', '    require(_value <= balances[_address]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', '    // sender&#39;s balance is greater than the totalSupply, which *should* be an assertion failure\n', '\n', '    address burner = _address;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(burner, _value);\n', '    emit Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract Wolf is Ownable, MintableToken, BurnableByOwner {\n', '  using SafeMath for uint256;\n', '  string public constant name = "Wolf";\n', '  string public constant symbol = "Wolf";\n', '  uint32 public constant decimals = 18;\n', '\n', '  address public addressTeam;\n', '  address public addressCashwolf;\n', '  address public addressFutureInvest;\n', '  address public addressBounty;\n', '\n', '\n', '  uint public summTeam = 15000000000 * 1 ether;\n', '  uint public summCashwolf = 10000000000 * 1 ether;\n', '  uint public summFutureInvest = 10000000000 * 1 ether;\n', '  uint public summBounty = 1000000000 * 1 ether;\n', '\n', '\n', '  function Wolf() public {\n', '\taddressTeam = 0xb5AB520F01DeE8a42A2bfaEa8075398414774778;\n', '\taddressCashwolf = 0x3366e9946DD375d1966c8E09f889Bc18C5E1579A;\n', '\taddressFutureInvest = 0x7134121392eE0b6DC9382BBd8E392B4054CdCcEf;\n', '  addressBounty = 0x902A95ad8a292f5e355fCb8EcB761175D30b6fC6;\n', '\n', '    //Founders and supporters initial Allocations\n', '    balances[addressTeam] = balances[addressTeam].add(summTeam);\n', '    balances[addressCashwolf] = balances[addressCashwolf].add(summCashwolf);\n', '\t  balances[addressFutureInvest] = balances[addressFutureInvest].add(summFutureInvest);\n', '    balances[addressBounty] = balances[addressBounty].add(summBounty);\n', '\n', '    totalSupply = summTeam.add(summCashwolf).add(summFutureInvest).add(summBounty);\n', '  }\n', '  function getTotalSupply() public constant returns(uint256){\n', '      return totalSupply;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where Contributors can make\n', ' * token Contributions and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // soft cap\n', '  uint256 public softcap;\n', '  //A balance that does not include the amount of unconfirmed addresses.\n', '  //The balance which, if a soft cap is reached, can be transferred to the owner&#39;s wallet.\n', '  uint256 public activeBalance;\n', '  // balances for softcap\n', '  mapping(address => uint) public balancesSoftCap;\n', '  struct BuyInfo {\n', '    uint summEth;\n', '    uint summToken;\n', '    uint dateEndRefund;\n', '  }\n', '  mapping(address => mapping(uint => BuyInfo)) public payments;\n', '  mapping(address => uint) public paymentCounter;\n', '  // The token being offered\n', '  Wolf public token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  // start\n', '  uint256 public startICO;\n', '  // end\n', '  uint256 public endICO;\n', '  uint256 public period;\n', '  uint256 public endICO14;\n', '  // token distribution\n', '  uint256 public hardCap;\n', '  uint256 public totalICO;\n', '  // how many token units a Contributor gets per wei\n', '  uint256 public rate;\n', '  // address where funds are collected\n', '  address public wallet;\n', '  // minimum/maximum quantity values\n', '  uint256 public minNumbPerSubscr;\n', '  uint256 public maxNumbPerSubscr;\n', '\n', '/**\n', '* event for token Procurement logging\n', '* @param contributor who Pledged for the tokens\n', '* @param beneficiary who got the tokens\n', '* @param value weis Contributed for Procurement\n', '* @param amount amount of tokens Procured\n', '*/\n', '  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\n', '  function Crowdsale() public {\n', '    token = createTokenContract();\n', '    // soft cap\n', '    softcap = 5000 * 1 ether;\n', '    // minimum quantity values\n', '    minNumbPerSubscr = 10000000000000000; //0.01 eth\n', '    maxNumbPerSubscr = 300 * 1 ether;\n', '    // start and end timestamps where investments are allowed\n', '    // start\n', '    startICO = 1523455200;// 04/11/2018 @ 02:00pm (UTC)\n', '    period = 60;\n', '    // end\n', '    endICO = startICO + period * 1 days;\n', '    endICO14 = endICO + 14 * 1 days;\n', '    // restrictions on amounts during the crowdfunding event stages\n', '    hardCap = 65000000000 * 1 ether;\n', '    // rate;\n', '    rate = 500000;\n', '    // address where funds are collected\n', '    wallet = 0x7472106A07EbAB5a202e195c0dC22776778b44E6;\n', '  }\n', '\n', '  function setStartICO(uint _startICO) public onlyOwner{\n', '    startICO = _startICO;\n', '    endICO = startICO + period * 1 days;\n', '    endICO14 = endICO + 14 * 1 days;\n', '  }\n', '\n', '  function setPeriod(uint _period) public onlyOwner{\n', '    period = _period;\n', '    endICO = startICO + period * 1 days;\n', '    endICO14 = endICO + 14 * 1 days;\n', '  }\n', '\n', '  function setRate(uint _rate) public  onlyOwner{\n', '    rate = _rate;\n', '  }\n', '\n', '  function createTokenContract() internal returns (Wolf) {\n', '    return new Wolf();\n', '  }\n', '\n', '  // fallback function can be used to Procure tokens\n', '  function () external payable {\n', '    procureTokens(msg.sender);\n', '  }\n', '\n', '  // low level token Pledge function\n', '  function procureTokens(address beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 backAmount;\n', '\n', '    require(beneficiary != address(0));\n', '    //minimum/maximum amount in ETH\n', '    require(weiAmount >= minNumbPerSubscr && weiAmount <= maxNumbPerSubscr);\n', '    if (now >= startICO && now <= endICO && totalICO < hardCap){\n', '      tokens = weiAmount.mul(rate);\n', '      if (hardCap.sub(totalICO) < tokens){\n', '        tokens = hardCap.sub(totalICO);\n', '        weiAmount = tokens.div(rate);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalICO = totalICO.add(tokens);\n', '    }\n', '    require(tokens > 0);\n', '    token.mint(beneficiary, tokens);\n', '    balancesSoftCap[beneficiary] = balancesSoftCap[beneficiary].add(weiAmount);\n', '    uint256 dateEndRefund = now + 14 * 1 days;\n', '    paymentCounter[beneficiary] = paymentCounter[beneficiary] + 1;\n', '    payments[beneficiary][paymentCounter[beneficiary]] = BuyInfo(weiAmount, tokens, dateEndRefund);\n', '    token.SetPermissionsList(beneficiary, 1);\n', '    if (backAmount > 0){\n', '      msg.sender.transfer(backAmount);\n', '    }\n', '    emit TokenProcurement(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '\n', '  function SetPermissionsList(address _address, uint8 _sign) public onlyOwner{\n', '      uint8 sign;\n', '      sign = token.GetPermissionsList(_address);\n', '      token.SetPermissionsList(_address, _sign);\n', '      if (_sign == 0){\n', '          if (sign != _sign){\n', '            activeBalance =  activeBalance.add(balancesSoftCap[_address]);\n', '          }\n', '\n', '      }\n', '      if (_sign == 1){\n', '          if (sign != _sign){\n', '            activeBalance =  activeBalance.sub(balancesSoftCap[_address]);\n', '          }\n', '      }\n', '  }\n', '  function GetPermissionsList(address _address) public constant onlyOwner returns(uint8){\n', '    return token.GetPermissionsList(_address);\n', '  }\n', '  function refund() public{\n', '    require(activeBalance < softcap && now > endICO);\n', '    require(balancesSoftCap[msg.sender] > 0);\n', '    uint value = balancesSoftCap[msg.sender];\n', '    balancesSoftCap[msg.sender] = 0;\n', '    msg.sender.transfer(value);\n', '  }\n', '\n', '  function refundUnconfirmed() public{\n', '    require(now > endICO);\n', '    require(balancesSoftCap[msg.sender] > 0);\n', '    require(token.GetPermissionsList(msg.sender) == 1);\n', '    uint value = balancesSoftCap[msg.sender];\n', '    balancesSoftCap[msg.sender] = 0;\n', '    msg.sender.transfer(value);\n', '    token.burn(msg.sender, token.balanceOf(msg.sender));\n', '    totalICO = totalICO.sub(token.balanceOf(msg.sender));\n', '  }\n', '\n', '  function revoke(uint _id) public{\n', '    uint8 sign;\n', '    require(now <= payments[msg.sender][_id].dateEndRefund);\n', '    require(balancesSoftCap[msg.sender] > 0);\n', '    require(payments[msg.sender][_id].summEth > 0);\n', '    require(payments[msg.sender][_id].summToken > 0);\n', '    uint value = payments[msg.sender][_id].summEth;\n', '    uint valueToken = payments[msg.sender][_id].summToken;\n', '    balancesSoftCap[msg.sender] = balancesSoftCap[msg.sender].sub(value);\n', '    sign = token.GetPermissionsList(msg.sender);\n', '    if (sign == 0){\n', '      activeBalance =  activeBalance.sub(value);\n', '    }\n', '    payments[msg.sender][_id].summEth = 0;\n', '    payments[msg.sender][_id].summToken = 0;\n', '    msg.sender.transfer(value);\n', '    token.burn(msg.sender, valueToken);\n', '    totalICO = totalICO.sub(valueToken);\n', '  }\n', '\n', '  function transferToMultisig() public onlyOwner {\n', '    require(activeBalance >= softcap && now > endICO14);\n', '      wallet.transfer(activeBalance);\n', '      activeBalance = 0;\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '  address public owner;\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic, Ownable {\n', '\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  // 1 denied / 0 allow\n', '  mapping(address => uint8) permissionsList;\n', '\n', '  function SetPermissionsList(address _address, uint8 _sign) public onlyOwner{\n', '    permissionsList[_address] = _sign;\n', '  }\n', '  function GetPermissionsList(address _address) public constant onlyOwner returns(uint8){\n', '    return permissionsList[_address];\n', '  }\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(permissionsList[msg.sender] == 0);\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(permissionsList[_from] == 0);\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '\n', '    // To change the approve amount you first have to reduce the addresses`\n', '    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '    //  already 0 to mitigate the race condition described here:\n', '    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n', '\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifing the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract BurnableByOwner is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '  function burn(address _address, uint256 _value) public onlyOwner{\n', '    require(_value <= balances[_address]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    address burner = _address;\n', '    balances[burner] = balances[burner].sub(_value);\n', '    totalSupply = totalSupply.sub(_value);\n', '    emit Burn(burner, _value);\n', '    emit Transfer(burner, address(0), _value);\n', '  }\n', '}\n', '\n', 'contract Wolf is Ownable, MintableToken, BurnableByOwner {\n', '  using SafeMath for uint256;\n', '  string public constant name = "Wolf";\n', '  string public constant symbol = "Wolf";\n', '  uint32 public constant decimals = 18;\n', '\n', '  address public addressTeam;\n', '  address public addressCashwolf;\n', '  address public addressFutureInvest;\n', '  address public addressBounty;\n', '\n', '\n', '  uint public summTeam = 15000000000 * 1 ether;\n', '  uint public summCashwolf = 10000000000 * 1 ether;\n', '  uint public summFutureInvest = 10000000000 * 1 ether;\n', '  uint public summBounty = 1000000000 * 1 ether;\n', '\n', '\n', '  function Wolf() public {\n', '\taddressTeam = 0xb5AB520F01DeE8a42A2bfaEa8075398414774778;\n', '\taddressCashwolf = 0x3366e9946DD375d1966c8E09f889Bc18C5E1579A;\n', '\taddressFutureInvest = 0x7134121392eE0b6DC9382BBd8E392B4054CdCcEf;\n', '  addressBounty = 0x902A95ad8a292f5e355fCb8EcB761175D30b6fC6;\n', '\n', '    //Founders and supporters initial Allocations\n', '    balances[addressTeam] = balances[addressTeam].add(summTeam);\n', '    balances[addressCashwolf] = balances[addressCashwolf].add(summCashwolf);\n', '\t  balances[addressFutureInvest] = balances[addressFutureInvest].add(summFutureInvest);\n', '    balances[addressBounty] = balances[addressBounty].add(summBounty);\n', '\n', '    totalSupply = summTeam.add(summCashwolf).add(summFutureInvest).add(summBounty);\n', '  }\n', '  function getTotalSupply() public constant returns(uint256){\n', '      return totalSupply;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where Contributors can make\n', ' * token Contributions and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive. The contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' */\n', 'contract Crowdsale is Ownable {\n', '  using SafeMath for uint256;\n', '  // soft cap\n', '  uint256 public softcap;\n', '  //A balance that does not include the amount of unconfirmed addresses.\n', "  //The balance which, if a soft cap is reached, can be transferred to the owner's wallet.\n", '  uint256 public activeBalance;\n', '  // balances for softcap\n', '  mapping(address => uint) public balancesSoftCap;\n', '  struct BuyInfo {\n', '    uint summEth;\n', '    uint summToken;\n', '    uint dateEndRefund;\n', '  }\n', '  mapping(address => mapping(uint => BuyInfo)) public payments;\n', '  mapping(address => uint) public paymentCounter;\n', '  // The token being offered\n', '  Wolf public token;\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  // start\n', '  uint256 public startICO;\n', '  // end\n', '  uint256 public endICO;\n', '  uint256 public period;\n', '  uint256 public endICO14;\n', '  // token distribution\n', '  uint256 public hardCap;\n', '  uint256 public totalICO;\n', '  // how many token units a Contributor gets per wei\n', '  uint256 public rate;\n', '  // address where funds are collected\n', '  address public wallet;\n', '  // minimum/maximum quantity values\n', '  uint256 public minNumbPerSubscr;\n', '  uint256 public maxNumbPerSubscr;\n', '\n', '/**\n', '* event for token Procurement logging\n', '* @param contributor who Pledged for the tokens\n', '* @param beneficiary who got the tokens\n', '* @param value weis Contributed for Procurement\n', '* @param amount amount of tokens Procured\n', '*/\n', '  event TokenProcurement(address indexed contributor, address indexed beneficiary, uint256 value, uint256 amount);\n', '  function Crowdsale() public {\n', '    token = createTokenContract();\n', '    // soft cap\n', '    softcap = 5000 * 1 ether;\n', '    // minimum quantity values\n', '    minNumbPerSubscr = 10000000000000000; //0.01 eth\n', '    maxNumbPerSubscr = 300 * 1 ether;\n', '    // start and end timestamps where investments are allowed\n', '    // start\n', '    startICO = 1523455200;// 04/11/2018 @ 02:00pm (UTC)\n', '    period = 60;\n', '    // end\n', '    endICO = startICO + period * 1 days;\n', '    endICO14 = endICO + 14 * 1 days;\n', '    // restrictions on amounts during the crowdfunding event stages\n', '    hardCap = 65000000000 * 1 ether;\n', '    // rate;\n', '    rate = 500000;\n', '    // address where funds are collected\n', '    wallet = 0x7472106A07EbAB5a202e195c0dC22776778b44E6;\n', '  }\n', '\n', '  function setStartICO(uint _startICO) public onlyOwner{\n', '    startICO = _startICO;\n', '    endICO = startICO + period * 1 days;\n', '    endICO14 = endICO + 14 * 1 days;\n', '  }\n', '\n', '  function setPeriod(uint _period) public onlyOwner{\n', '    period = _period;\n', '    endICO = startICO + period * 1 days;\n', '    endICO14 = endICO + 14 * 1 days;\n', '  }\n', '\n', '  function setRate(uint _rate) public  onlyOwner{\n', '    rate = _rate;\n', '  }\n', '\n', '  function createTokenContract() internal returns (Wolf) {\n', '    return new Wolf();\n', '  }\n', '\n', '  // fallback function can be used to Procure tokens\n', '  function () external payable {\n', '    procureTokens(msg.sender);\n', '  }\n', '\n', '  // low level token Pledge function\n', '  function procureTokens(address beneficiary) public payable {\n', '    uint256 tokens;\n', '    uint256 weiAmount = msg.value;\n', '    uint256 backAmount;\n', '\n', '    require(beneficiary != address(0));\n', '    //minimum/maximum amount in ETH\n', '    require(weiAmount >= minNumbPerSubscr && weiAmount <= maxNumbPerSubscr);\n', '    if (now >= startICO && now <= endICO && totalICO < hardCap){\n', '      tokens = weiAmount.mul(rate);\n', '      if (hardCap.sub(totalICO) < tokens){\n', '        tokens = hardCap.sub(totalICO);\n', '        weiAmount = tokens.div(rate);\n', '        backAmount = msg.value.sub(weiAmount);\n', '      }\n', '      totalICO = totalICO.add(tokens);\n', '    }\n', '    require(tokens > 0);\n', '    token.mint(beneficiary, tokens);\n', '    balancesSoftCap[beneficiary] = balancesSoftCap[beneficiary].add(weiAmount);\n', '    uint256 dateEndRefund = now + 14 * 1 days;\n', '    paymentCounter[beneficiary] = paymentCounter[beneficiary] + 1;\n', '    payments[beneficiary][paymentCounter[beneficiary]] = BuyInfo(weiAmount, tokens, dateEndRefund);\n', '    token.SetPermissionsList(beneficiary, 1);\n', '    if (backAmount > 0){\n', '      msg.sender.transfer(backAmount);\n', '    }\n', '    emit TokenProcurement(msg.sender, beneficiary, weiAmount, tokens);\n', '  }\n', '\n', '  function SetPermissionsList(address _address, uint8 _sign) public onlyOwner{\n', '      uint8 sign;\n', '      sign = token.GetPermissionsList(_address);\n', '      token.SetPermissionsList(_address, _sign);\n', '      if (_sign == 0){\n', '          if (sign != _sign){\n', '            activeBalance =  activeBalance.add(balancesSoftCap[_address]);\n', '          }\n', '\n', '      }\n', '      if (_sign == 1){\n', '          if (sign != _sign){\n', '            activeBalance =  activeBalance.sub(balancesSoftCap[_address]);\n', '          }\n', '      }\n', '  }\n', '  function GetPermissionsList(address _address) public constant onlyOwner returns(uint8){\n', '    return token.GetPermissionsList(_address);\n', '  }\n', '  function refund() public{\n', '    require(activeBalance < softcap && now > endICO);\n', '    require(balancesSoftCap[msg.sender] > 0);\n', '    uint value = balancesSoftCap[msg.sender];\n', '    balancesSoftCap[msg.sender] = 0;\n', '    msg.sender.transfer(value);\n', '  }\n', '\n', '  function refundUnconfirmed() public{\n', '    require(now > endICO);\n', '    require(balancesSoftCap[msg.sender] > 0);\n', '    require(token.GetPermissionsList(msg.sender) == 1);\n', '    uint value = balancesSoftCap[msg.sender];\n', '    balancesSoftCap[msg.sender] = 0;\n', '    msg.sender.transfer(value);\n', '    token.burn(msg.sender, token.balanceOf(msg.sender));\n', '    totalICO = totalICO.sub(token.balanceOf(msg.sender));\n', '  }\n', '\n', '  function revoke(uint _id) public{\n', '    uint8 sign;\n', '    require(now <= payments[msg.sender][_id].dateEndRefund);\n', '    require(balancesSoftCap[msg.sender] > 0);\n', '    require(payments[msg.sender][_id].summEth > 0);\n', '    require(payments[msg.sender][_id].summToken > 0);\n', '    uint value = payments[msg.sender][_id].summEth;\n', '    uint valueToken = payments[msg.sender][_id].summToken;\n', '    balancesSoftCap[msg.sender] = balancesSoftCap[msg.sender].sub(value);\n', '    sign = token.GetPermissionsList(msg.sender);\n', '    if (sign == 0){\n', '      activeBalance =  activeBalance.sub(value);\n', '    }\n', '    payments[msg.sender][_id].summEth = 0;\n', '    payments[msg.sender][_id].summToken = 0;\n', '    msg.sender.transfer(value);\n', '    token.burn(msg.sender, valueToken);\n', '    totalICO = totalICO.sub(valueToken);\n', '  }\n', '\n', '  function transferToMultisig() public onlyOwner {\n', '    require(activeBalance >= softcap && now > endICO14);\n', '      wallet.transfer(activeBalance);\n', '      activeBalance = 0;\n', '  }\n', '}']
