['/**\n', ' * @author https://github.com/Dmitx\n', ' */\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '  \n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '    uint256 public cap;\n', '\n', '    constructor(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= cap);\n', '\n', '        return super.mint(_to, _amount);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract DividendPayoutToken is CappedToken {\n', '\n', '    // Dividends already claimed by investor\n', '    mapping(address => uint256) public dividendPayments;\n', '    // Total dividends claimed by all investors\n', '    uint256 public totalDividendPayments;\n', '\n', '    // invoke this function after each dividend payout\n', '    function increaseDividendPayments(address _investor, uint256 _amount) onlyOwner public {\n', '        dividendPayments[_investor] = dividendPayments[_investor].add(_amount);\n', '        totalDividendPayments = totalDividendPayments.add(_amount);\n', '    }\n', '\n', '    //When transfer tokens decrease dividendPayments for sender and increase for receiver\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        // balance before transfer\n', '        uint256 oldBalanceFrom = balances[msg.sender];\n', '\n', '        // invoke super function with requires\n', '        bool isTransferred = super.transfer(_to, _value);\n', '\n', '        uint256 transferredClaims = dividendPayments[msg.sender].mul(_value).div(oldBalanceFrom);\n', '        dividendPayments[msg.sender] = dividendPayments[msg.sender].sub(transferredClaims);\n', '        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\n', '\n', '        return isTransferred;\n', '    }\n', '\n', '    //When transfer tokens decrease dividendPayments for token owner and increase for receiver\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        // balance before transfer\n', '        uint256 oldBalanceFrom = balances[_from];\n', '\n', '        // invoke super function with requires\n', '        bool isTransferred = super.transferFrom(_from, _to, _value);\n', '\n', '        uint256 transferredClaims = dividendPayments[_from].mul(_value).div(oldBalanceFrom);\n', '        dividendPayments[_from] = dividendPayments[_from].sub(transferredClaims);\n', '        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\n', '\n', '        return isTransferred;\n', '    }\n', '\n', '}\n', '\n', 'contract IcsToken is DividendPayoutToken {\n', '\n', '    string public constant name = "Interexchange Crypstock System";\n', '\n', '    string public constant symbol = "ICS";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    // set Total Supply in 500 000 000 tokens\n', '    constructor() public\n', '    CappedToken(5e8 * 1e18) {}\n', '\n', '}\n', '\n', 'contract HicsToken is DividendPayoutToken {\n', '\n', '    string public constant name = "Interexchange Crypstock System Heritage Token";\n', '\n', '    string public constant symbol = "HICS";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    // set Total Supply in 50 000 000 tokens\n', '    constructor() public\n', '    CappedToken(5e7 * 1e18) {}\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '    /**\n', '     * @dev We use a single lock for the whole contract.\n', '     */\n', '    bool private reentrancyLock = false;\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * @notice If you mark a function `nonReentrant`, you should also\n', '     * mark it `external`. Calling one nonReentrant function from\n', '     * another is not supported. Instead, you can implement a\n', '     * `private` function doing the actual work, and a `external`\n', '     * wrapper marked as `nonReentrant`.\n', '     */\n', '    modifier nonReentrant() {\n', '        require(!reentrancyLock);\n', '        reentrancyLock = true;\n', '        _;\n', '        reentrancyLock = false;\n', '    }\n', '\n', '}\n', '\n', 'contract PreSale is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // T4T Token\n', '    ERC20 public t4tToken;\n', '\n', '    // Tokens being sold\n', '    IcsToken public icsToken;\n', '    HicsToken public hicsToken;\n', '\n', '    // Timestamps of period\n', '    uint64 public startTime;\n', '    uint64 public endTime;\n', '    uint64 public endPeriodA;\n', '    uint64 public endPeriodB;\n', '    uint64 public endPeriodC;\n', '\n', '    // Address where funds are transferred\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per 1 wei\n', '    uint256 public rate;\n', '\n', '    // How many token units a buyer gets per 1 token T4T\n', '    uint256 public rateT4T;\n', '\n', '    uint256 public minimumInvest; // in tokens\n', '\n', '    uint256 public hicsTokenPrice;  // in tokens\n', '\n', '    // Max HICS Token distribution in PreSale\n', '    uint256 public capHicsToken;  // in tokens\n', '\n', '    uint256 public softCap; // in tokens\n', '\n', '    // investors => amount of money\n', '    mapping(address => uint) public balances;  // in tokens\n', '\n', '    // wei which has stored on PreSale contract\n', '    mapping(address => uint) balancesForRefund;  // in wei (not public: only for refund)\n', '\n', '    // T4T which has stored on PreSale contract\n', '    mapping(address => uint) balancesForRefundT4T;  // in T4T tokens (not public: only for refund)\n', '\n', '    // Amount of wei raised in PreSale Contract\n', '    uint256 public weiRaised;\n', '\n', '    // Number of T4T raised in PreSale Contract\n', '    uint256 public t4tRaised;\n', '\n', '    // Total number of token emitted\n', '    uint256 public totalTokensEmitted;  // in tokens\n', '\n', '    // Total money raised (number of tokens without bonuses)\n', '    uint256 public totalRaised;  // in tokens\n', '\n', '    /**\n', '     * events for tokens purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param tokens purchased\n', '     */\n', '    event IcsTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 tokens);\n', '    event HicsTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 tokens);\n', '\n', '    /**\n', '    * @dev Constructor of PreSale\n', '    *\n', '    * @notice Duration of bonus periods, start and end timestamps, minimum invest,\n', '    * minimum invest to get HICS Token, token price, Soft Cap and HICS Hard Cap are set\n', '    * in body of PreSale constructor.\n', '    *\n', '    * @param _wallet for withdrawal ether\n', '    * @param _icsToken ICS Token address\n', '    * @param _hicsToken HICS Token address\n', '    * @param _erc20Token T4T Token address\n', '    */\n', '    constructor(\n', '        address _wallet,\n', '        address _icsToken,\n', '        address _hicsToken,\n', '        address _erc20Token) public\n', '    {\n', '        require(_wallet != address(0));\n', '        require(_icsToken != address(0));\n', '        require(_hicsToken != address(0));\n', '        require(_erc20Token != address(0));\n', '\n', '        // periods of PreSale&#39;s bonus and PreSale&#39;s time\n', '        startTime = 1528675200;  // 1528675200 - 11.06.2018 00:00 UTC\n', '        endPeriodA = 1529107200; // 1529107200 - 16.06.2018 00:00 UTC\n', '        endPeriodB = 1529798400; // 1529798400 - 24.06.2018 00:00 UTC\n', '        endPeriodC = 1530489600; // 1530489600 - 02.07.2018 00:00 UTC\n', '        endTime = 1531353600;    // 1531353600 - 12.07.2018 00:00 UTC\n', '\n', '        // check valid of periods\n', '        bool validPeriod = now < startTime && startTime < endPeriodA \n', '                        && endPeriodA < endPeriodB && endPeriodB < endPeriodC \n', '                        && endPeriodC < endTime;\n', '        require(validPeriod);\n', '\n', '        wallet = _wallet;\n', '        icsToken = IcsToken(_icsToken);\n', '        hicsToken = HicsToken(_hicsToken);\n', '\n', '        // set T4T token address\n', '        t4tToken = ERC20(_erc20Token);\n', '\n', '        // 4 tokens = 1 T4T token (1$)\n', '        rateT4T = 4;\n', '\n', '        // minimum invest in tokens\n', '        minimumInvest = 4 * 1e18;  // 4 tokens = 1$\n', '\n', '        // minimum invest to get HicsToken\n', '        hicsTokenPrice = 2e4 * 1e18;  // 20 000 tokens = 5 000$\n', '\n', '        // initial rate - 1 token for 25 US Cent\n', '        // initial price - 1 ETH = 680 USD\n', '        rate = 2720;  // number of tokens for 1 wei\n', '\n', '        // in tokens\n', '        softCap = 4e6 * 1e18;  // equals 1 000 000$\n', '\n', '        capHicsToken = 15e6 * 1e18;  // 15 000 000 tokens\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    modifier saleIsOn() {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        require(withinPeriod);\n', '        _;\n', '    }\n', '\n', '    // allowed refund in case of unsuccess PreSale\n', '    modifier refundAllowed() {\n', '        require(totalRaised < softCap && now > endTime);\n', '        _;\n', '    }\n', '\n', '    // @return true if CrowdSale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // Refund ether to the investors in case of under Soft Cap end\n', '    function refund() public refundAllowed nonReentrant {\n', '        uint256 valueToReturn = balancesForRefund[msg.sender];\n', '\n', '        // update states\n', '        balancesForRefund[msg.sender] = 0;\n', '        weiRaised = weiRaised.sub(valueToReturn);\n', '\n', '        msg.sender.transfer(valueToReturn);\n', '    }\n', '\n', '    // Refund T4T tokens to the investors in case of under Soft Cap end\n', '    function refundT4T() public refundAllowed nonReentrant {\n', '        uint256 valueToReturn = balancesForRefundT4T[msg.sender];\n', '\n', '        // update states\n', '        balancesForRefundT4T[msg.sender] = 0;\n', '        t4tRaised = t4tRaised.sub(valueToReturn);\n', '\n', '        t4tToken.transfer(msg.sender, valueToReturn);\n', '    }\n', '\n', '    // Get bonus percent\n', '    function _getBonusPercent() internal view returns(uint256) {\n', '\n', '        if (now < endPeriodA) {\n', '            return 40;\n', '        }\n', '        if (now < endPeriodB) {\n', '            return 25;\n', '        }\n', '        if (now < endPeriodC) {\n', '            return 20;\n', '        }\n', '\n', '        return 15;\n', '    }\n', '\n', '    // Get number of tokens with bonus\n', '    // @param _value in tokens without bonus\n', '    function _getTokenNumberWithBonus(uint256 _value) internal view returns (uint256) {\n', '        return _value.add(_value.mul(_getBonusPercent()).div(100));\n', '    }\n', '\n', '    // Send weis to the wallet\n', '    // @param _value in wei\n', '    function _forwardFunds(uint256 _value) internal {\n', '        wallet.transfer(_value);\n', '    }\n', '\n', '    // Send T4T tokens to the wallet\n', '    // @param _value in T4T tokens\n', '    function _forwardT4T(uint256 _value) internal {\n', '        t4tToken.transfer(wallet, _value);\n', '    }\n', '\n', '    // Withdrawal eth from contract\n', '    function withdrawalEth() public onlyOwner {\n', '        require(totalRaised >= softCap);\n', '\n', '        // withdrawal all eth from contract\n', '        _forwardFunds(address(this).balance);\n', '    }\n', '\n', '    // Withdrawal T4T tokens from contract\n', '    function withdrawalT4T() public onlyOwner {\n', '        require(totalRaised >= softCap);\n', '\n', '        // withdrawal all T4T tokens from contract\n', '        _forwardT4T(t4tToken.balanceOf(address(this)));\n', '    }\n', '\n', '    // Success finish of PreSale\n', '    function finishPreSale() public onlyOwner {\n', '        require(totalRaised >= softCap);\n', '        require(now > endTime);\n', '\n', '        // withdrawal all eth from contract\n', '        _forwardFunds(address(this).balance);\n', '\n', '        // withdrawal all T4T tokens from contract\n', '        _forwardT4T(t4tToken.balanceOf(address(this)));\n', '\n', '        // transfer ownership of tokens to owner\n', '        icsToken.transferOwnership(owner);\n', '        hicsToken.transferOwnership(owner);\n', '    }\n', '\n', '    // Change owner of tokens after end of PreSale\n', '    function changeTokensOwner() public onlyOwner {\n', '        require(now > endTime);\n', '\n', '        // transfer ownership of tokens to owner\n', '        icsToken.transferOwnership(owner);\n', '        hicsToken.transferOwnership(owner);\n', '    }\n', '\n', '    // Change rate\n', '    // @param _rate for change\n', '    function _changeRate(uint256 _rate) internal {\n', '        require(_rate != 0);\n', '        rate = _rate;\n', '    }\n', '\n', '    // buy ICS tokens\n', '    function _buyIcsTokens(address _beneficiary, uint256 _value) internal {\n', '        uint256 tokensWithBonus = _getTokenNumberWithBonus(_value);\n', '\n', '        icsToken.mint(_beneficiary, tokensWithBonus);\n', '\n', '        emit IcsTokenPurchase(msg.sender, _beneficiary, tokensWithBonus);\n', '    }\n', '\n', '    // buy HICS tokens\n', '    function _buyHicsTokens(address _beneficiary, uint256 _value) internal {\n', '        uint256 tokensWithBonus = _getTokenNumberWithBonus(_value);\n', '\n', '        hicsToken.mint(_beneficiary, tokensWithBonus);\n', '\n', '        emit HicsTokenPurchase(msg.sender, _beneficiary, tokensWithBonus);\n', '    }\n', '\n', '    // buy tokens - helper function\n', '    // @param _beneficiary address of beneficiary\n', '    // @param _value of tokens (1 token = 10^18)\n', '    function _buyTokens(address _beneficiary, uint256 _value) internal {\n', '        // calculate HICS token amount\n', '        uint256 valueHics = _value.div(5);  // 20% HICS and 80% ICS Tokens\n', '\n', '        if (_value >= hicsTokenPrice\n', '        && hicsToken.totalSupply().add(_getTokenNumberWithBonus(valueHics)) < capHicsToken) {\n', '            // 20% HICS and 80% ICS Tokens\n', '            _buyIcsTokens(_beneficiary, _value - valueHics);\n', '            _buyHicsTokens(_beneficiary, valueHics);\n', '        } else {\n', '            // 100% of ICS Tokens\n', '            _buyIcsTokens(_beneficiary, _value);\n', '        }\n', '\n', '        // update states\n', '        uint256 tokensWithBonus = _getTokenNumberWithBonus(_value);\n', '        totalTokensEmitted = totalTokensEmitted.add(tokensWithBonus);\n', '        balances[_beneficiary] = balances[_beneficiary].add(tokensWithBonus);\n', '\n', '        totalRaised = totalRaised.add(_value);\n', '    }\n', '\n', '    // buy tokens for T4T tokens\n', '    // @param _beneficiary address of beneficiary\n', '    function buyTokensT4T(address _beneficiary) public saleIsOn {\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 valueT4T = t4tToken.allowance(_beneficiary, address(this));\n', '\n', '        // check minimumInvest\n', '        uint256 value = valueT4T.mul(rateT4T);\n', '        require(value >= minimumInvest);\n', '\n', '        // transfer T4T from _beneficiary to this contract\n', '        require(t4tToken.transferFrom(_beneficiary, address(this), valueT4T));\n', '\n', '        _buyTokens(_beneficiary, value);\n', '\n', '        // only for buy using T4T tokens\n', '        t4tRaised = t4tRaised.add(valueT4T);\n', '        balancesForRefundT4T[_beneficiary] = balancesForRefundT4T[_beneficiary].add(valueT4T);\n', '    }\n', '\n', '    // manual transfer tokens by owner (e.g.: selling for fiat money)\n', '    // @param _to address of beneficiary\n', '    // @param _value of tokens (1 token = 10^18)\n', '    function manualBuy(address _to, uint256 _value) public saleIsOn onlyOwner {\n', '        require(_to != address(0));\n', '        require(_value >= minimumInvest);\n', '\n', '        _buyTokens(_to, _value);\n', '    }\n', '\n', '    // buy tokens with update rate state by owner\n', '    // @param _beneficiary address of beneficiary\n', '    // @param _rate new rate - how many token units a buyer gets per 1 wei\n', '    function buyTokensWithUpdateRate(address _beneficiary, uint256 _rate) public saleIsOn onlyOwner payable {\n', '        _changeRate(_rate);\n', '        buyTokens(_beneficiary);\n', '    }\n', '\n', '    // low level token purchase function\n', '    // @param _beneficiary address of beneficiary\n', '    function buyTokens(address _beneficiary) saleIsOn public payable {\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 value = weiAmount.mul(rate);\n', '        require(value >= minimumInvest);\n', '\n', '        _buyTokens(_beneficiary, value);\n', '\n', '        // only for buy using PreSale contract\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        balancesForRefund[_beneficiary] = balancesForRefund[_beneficiary].add(weiAmount);\n', '    }\n', '\n', '    function() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}']
['/**\n', ' * @author https://github.com/Dmitx\n', ' */\n', '\n', 'pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '\n', '    function balanceOf(address who) public view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping(address => mapping(address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '  \n', '}\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '    event Mint(address indexed to, uint256 amount);\n', '    event MintFinished();\n', '\n', '    bool public mintingFinished = false;\n', '\n', '\n', '    modifier canMint() {\n', '        require(!mintingFinished);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        balances[_to] = balances[_to].add(_amount);\n', '        emit Mint(_to, _amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to stop minting new tokens.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function finishMinting() onlyOwner canMint public returns (bool) {\n', '        mintingFinished = true;\n', '        emit MintFinished();\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Capped token\n', ' * @dev Mintable token with a token cap.\n', ' */\n', 'contract CappedToken is MintableToken {\n', '\n', '    uint256 public cap;\n', '\n', '    constructor(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to mint tokens\n', '     * @param _to The address that will receive the minted tokens.\n', '     * @param _amount The amount of tokens to mint.\n', '     * @return A boolean that indicates if the operation was successful.\n', '     */\n', '    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '        require(totalSupply_.add(_amount) <= cap);\n', '\n', '        return super.mint(_to, _amount);\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract DividendPayoutToken is CappedToken {\n', '\n', '    // Dividends already claimed by investor\n', '    mapping(address => uint256) public dividendPayments;\n', '    // Total dividends claimed by all investors\n', '    uint256 public totalDividendPayments;\n', '\n', '    // invoke this function after each dividend payout\n', '    function increaseDividendPayments(address _investor, uint256 _amount) onlyOwner public {\n', '        dividendPayments[_investor] = dividendPayments[_investor].add(_amount);\n', '        totalDividendPayments = totalDividendPayments.add(_amount);\n', '    }\n', '\n', '    //When transfer tokens decrease dividendPayments for sender and increase for receiver\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '        // balance before transfer\n', '        uint256 oldBalanceFrom = balances[msg.sender];\n', '\n', '        // invoke super function with requires\n', '        bool isTransferred = super.transfer(_to, _value);\n', '\n', '        uint256 transferredClaims = dividendPayments[msg.sender].mul(_value).div(oldBalanceFrom);\n', '        dividendPayments[msg.sender] = dividendPayments[msg.sender].sub(transferredClaims);\n', '        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\n', '\n', '        return isTransferred;\n', '    }\n', '\n', '    //When transfer tokens decrease dividendPayments for token owner and increase for receiver\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        // balance before transfer\n', '        uint256 oldBalanceFrom = balances[_from];\n', '\n', '        // invoke super function with requires\n', '        bool isTransferred = super.transferFrom(_from, _to, _value);\n', '\n', '        uint256 transferredClaims = dividendPayments[_from].mul(_value).div(oldBalanceFrom);\n', '        dividendPayments[_from] = dividendPayments[_from].sub(transferredClaims);\n', '        dividendPayments[_to] = dividendPayments[_to].add(transferredClaims);\n', '\n', '        return isTransferred;\n', '    }\n', '\n', '}\n', '\n', 'contract IcsToken is DividendPayoutToken {\n', '\n', '    string public constant name = "Interexchange Crypstock System";\n', '\n', '    string public constant symbol = "ICS";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    // set Total Supply in 500 000 000 tokens\n', '    constructor() public\n', '    CappedToken(5e8 * 1e18) {}\n', '\n', '}\n', '\n', 'contract HicsToken is DividendPayoutToken {\n', '\n', '    string public constant name = "Interexchange Crypstock System Heritage Token";\n', '\n', '    string public constant symbol = "HICS";\n', '\n', '    uint8 public constant decimals = 18;\n', '\n', '    // set Total Supply in 50 000 000 tokens\n', '    constructor() public\n', '    CappedToken(5e7 * 1e18) {}\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Helps contracts guard against reentrancy attacks.\n', ' */\n', 'contract ReentrancyGuard {\n', '\n', '    /**\n', '     * @dev We use a single lock for the whole contract.\n', '     */\n', '    bool private reentrancyLock = false;\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * @notice If you mark a function `nonReentrant`, you should also\n', '     * mark it `external`. Calling one nonReentrant function from\n', '     * another is not supported. Instead, you can implement a\n', '     * `private` function doing the actual work, and a `external`\n', '     * wrapper marked as `nonReentrant`.\n', '     */\n', '    modifier nonReentrant() {\n', '        require(!reentrancyLock);\n', '        reentrancyLock = true;\n', '        _;\n', '        reentrancyLock = false;\n', '    }\n', '\n', '}\n', '\n', 'contract PreSale is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // T4T Token\n', '    ERC20 public t4tToken;\n', '\n', '    // Tokens being sold\n', '    IcsToken public icsToken;\n', '    HicsToken public hicsToken;\n', '\n', '    // Timestamps of period\n', '    uint64 public startTime;\n', '    uint64 public endTime;\n', '    uint64 public endPeriodA;\n', '    uint64 public endPeriodB;\n', '    uint64 public endPeriodC;\n', '\n', '    // Address where funds are transferred\n', '    address public wallet;\n', '\n', '    // How many token units a buyer gets per 1 wei\n', '    uint256 public rate;\n', '\n', '    // How many token units a buyer gets per 1 token T4T\n', '    uint256 public rateT4T;\n', '\n', '    uint256 public minimumInvest; // in tokens\n', '\n', '    uint256 public hicsTokenPrice;  // in tokens\n', '\n', '    // Max HICS Token distribution in PreSale\n', '    uint256 public capHicsToken;  // in tokens\n', '\n', '    uint256 public softCap; // in tokens\n', '\n', '    // investors => amount of money\n', '    mapping(address => uint) public balances;  // in tokens\n', '\n', '    // wei which has stored on PreSale contract\n', '    mapping(address => uint) balancesForRefund;  // in wei (not public: only for refund)\n', '\n', '    // T4T which has stored on PreSale contract\n', '    mapping(address => uint) balancesForRefundT4T;  // in T4T tokens (not public: only for refund)\n', '\n', '    // Amount of wei raised in PreSale Contract\n', '    uint256 public weiRaised;\n', '\n', '    // Number of T4T raised in PreSale Contract\n', '    uint256 public t4tRaised;\n', '\n', '    // Total number of token emitted\n', '    uint256 public totalTokensEmitted;  // in tokens\n', '\n', '    // Total money raised (number of tokens without bonuses)\n', '    uint256 public totalRaised;  // in tokens\n', '\n', '    /**\n', '     * events for tokens purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param tokens purchased\n', '     */\n', '    event IcsTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 tokens);\n', '    event HicsTokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 tokens);\n', '\n', '    /**\n', '    * @dev Constructor of PreSale\n', '    *\n', '    * @notice Duration of bonus periods, start and end timestamps, minimum invest,\n', '    * minimum invest to get HICS Token, token price, Soft Cap and HICS Hard Cap are set\n', '    * in body of PreSale constructor.\n', '    *\n', '    * @param _wallet for withdrawal ether\n', '    * @param _icsToken ICS Token address\n', '    * @param _hicsToken HICS Token address\n', '    * @param _erc20Token T4T Token address\n', '    */\n', '    constructor(\n', '        address _wallet,\n', '        address _icsToken,\n', '        address _hicsToken,\n', '        address _erc20Token) public\n', '    {\n', '        require(_wallet != address(0));\n', '        require(_icsToken != address(0));\n', '        require(_hicsToken != address(0));\n', '        require(_erc20Token != address(0));\n', '\n', "        // periods of PreSale's bonus and PreSale's time\n", '        startTime = 1528675200;  // 1528675200 - 11.06.2018 00:00 UTC\n', '        endPeriodA = 1529107200; // 1529107200 - 16.06.2018 00:00 UTC\n', '        endPeriodB = 1529798400; // 1529798400 - 24.06.2018 00:00 UTC\n', '        endPeriodC = 1530489600; // 1530489600 - 02.07.2018 00:00 UTC\n', '        endTime = 1531353600;    // 1531353600 - 12.07.2018 00:00 UTC\n', '\n', '        // check valid of periods\n', '        bool validPeriod = now < startTime && startTime < endPeriodA \n', '                        && endPeriodA < endPeriodB && endPeriodB < endPeriodC \n', '                        && endPeriodC < endTime;\n', '        require(validPeriod);\n', '\n', '        wallet = _wallet;\n', '        icsToken = IcsToken(_icsToken);\n', '        hicsToken = HicsToken(_hicsToken);\n', '\n', '        // set T4T token address\n', '        t4tToken = ERC20(_erc20Token);\n', '\n', '        // 4 tokens = 1 T4T token (1$)\n', '        rateT4T = 4;\n', '\n', '        // minimum invest in tokens\n', '        minimumInvest = 4 * 1e18;  // 4 tokens = 1$\n', '\n', '        // minimum invest to get HicsToken\n', '        hicsTokenPrice = 2e4 * 1e18;  // 20 000 tokens = 5 000$\n', '\n', '        // initial rate - 1 token for 25 US Cent\n', '        // initial price - 1 ETH = 680 USD\n', '        rate = 2720;  // number of tokens for 1 wei\n', '\n', '        // in tokens\n', '        softCap = 4e6 * 1e18;  // equals 1 000 000$\n', '\n', '        capHicsToken = 15e6 * 1e18;  // 15 000 000 tokens\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    modifier saleIsOn() {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        require(withinPeriod);\n', '        _;\n', '    }\n', '\n', '    // allowed refund in case of unsuccess PreSale\n', '    modifier refundAllowed() {\n', '        require(totalRaised < softCap && now > endTime);\n', '        _;\n', '    }\n', '\n', '    // @return true if CrowdSale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // Refund ether to the investors in case of under Soft Cap end\n', '    function refund() public refundAllowed nonReentrant {\n', '        uint256 valueToReturn = balancesForRefund[msg.sender];\n', '\n', '        // update states\n', '        balancesForRefund[msg.sender] = 0;\n', '        weiRaised = weiRaised.sub(valueToReturn);\n', '\n', '        msg.sender.transfer(valueToReturn);\n', '    }\n', '\n', '    // Refund T4T tokens to the investors in case of under Soft Cap end\n', '    function refundT4T() public refundAllowed nonReentrant {\n', '        uint256 valueToReturn = balancesForRefundT4T[msg.sender];\n', '\n', '        // update states\n', '        balancesForRefundT4T[msg.sender] = 0;\n', '        t4tRaised = t4tRaised.sub(valueToReturn);\n', '\n', '        t4tToken.transfer(msg.sender, valueToReturn);\n', '    }\n', '\n', '    // Get bonus percent\n', '    function _getBonusPercent() internal view returns(uint256) {\n', '\n', '        if (now < endPeriodA) {\n', '            return 40;\n', '        }\n', '        if (now < endPeriodB) {\n', '            return 25;\n', '        }\n', '        if (now < endPeriodC) {\n', '            return 20;\n', '        }\n', '\n', '        return 15;\n', '    }\n', '\n', '    // Get number of tokens with bonus\n', '    // @param _value in tokens without bonus\n', '    function _getTokenNumberWithBonus(uint256 _value) internal view returns (uint256) {\n', '        return _value.add(_value.mul(_getBonusPercent()).div(100));\n', '    }\n', '\n', '    // Send weis to the wallet\n', '    // @param _value in wei\n', '    function _forwardFunds(uint256 _value) internal {\n', '        wallet.transfer(_value);\n', '    }\n', '\n', '    // Send T4T tokens to the wallet\n', '    // @param _value in T4T tokens\n', '    function _forwardT4T(uint256 _value) internal {\n', '        t4tToken.transfer(wallet, _value);\n', '    }\n', '\n', '    // Withdrawal eth from contract\n', '    function withdrawalEth() public onlyOwner {\n', '        require(totalRaised >= softCap);\n', '\n', '        // withdrawal all eth from contract\n', '        _forwardFunds(address(this).balance);\n', '    }\n', '\n', '    // Withdrawal T4T tokens from contract\n', '    function withdrawalT4T() public onlyOwner {\n', '        require(totalRaised >= softCap);\n', '\n', '        // withdrawal all T4T tokens from contract\n', '        _forwardT4T(t4tToken.balanceOf(address(this)));\n', '    }\n', '\n', '    // Success finish of PreSale\n', '    function finishPreSale() public onlyOwner {\n', '        require(totalRaised >= softCap);\n', '        require(now > endTime);\n', '\n', '        // withdrawal all eth from contract\n', '        _forwardFunds(address(this).balance);\n', '\n', '        // withdrawal all T4T tokens from contract\n', '        _forwardT4T(t4tToken.balanceOf(address(this)));\n', '\n', '        // transfer ownership of tokens to owner\n', '        icsToken.transferOwnership(owner);\n', '        hicsToken.transferOwnership(owner);\n', '    }\n', '\n', '    // Change owner of tokens after end of PreSale\n', '    function changeTokensOwner() public onlyOwner {\n', '        require(now > endTime);\n', '\n', '        // transfer ownership of tokens to owner\n', '        icsToken.transferOwnership(owner);\n', '        hicsToken.transferOwnership(owner);\n', '    }\n', '\n', '    // Change rate\n', '    // @param _rate for change\n', '    function _changeRate(uint256 _rate) internal {\n', '        require(_rate != 0);\n', '        rate = _rate;\n', '    }\n', '\n', '    // buy ICS tokens\n', '    function _buyIcsTokens(address _beneficiary, uint256 _value) internal {\n', '        uint256 tokensWithBonus = _getTokenNumberWithBonus(_value);\n', '\n', '        icsToken.mint(_beneficiary, tokensWithBonus);\n', '\n', '        emit IcsTokenPurchase(msg.sender, _beneficiary, tokensWithBonus);\n', '    }\n', '\n', '    // buy HICS tokens\n', '    function _buyHicsTokens(address _beneficiary, uint256 _value) internal {\n', '        uint256 tokensWithBonus = _getTokenNumberWithBonus(_value);\n', '\n', '        hicsToken.mint(_beneficiary, tokensWithBonus);\n', '\n', '        emit HicsTokenPurchase(msg.sender, _beneficiary, tokensWithBonus);\n', '    }\n', '\n', '    // buy tokens - helper function\n', '    // @param _beneficiary address of beneficiary\n', '    // @param _value of tokens (1 token = 10^18)\n', '    function _buyTokens(address _beneficiary, uint256 _value) internal {\n', '        // calculate HICS token amount\n', '        uint256 valueHics = _value.div(5);  // 20% HICS and 80% ICS Tokens\n', '\n', '        if (_value >= hicsTokenPrice\n', '        && hicsToken.totalSupply().add(_getTokenNumberWithBonus(valueHics)) < capHicsToken) {\n', '            // 20% HICS and 80% ICS Tokens\n', '            _buyIcsTokens(_beneficiary, _value - valueHics);\n', '            _buyHicsTokens(_beneficiary, valueHics);\n', '        } else {\n', '            // 100% of ICS Tokens\n', '            _buyIcsTokens(_beneficiary, _value);\n', '        }\n', '\n', '        // update states\n', '        uint256 tokensWithBonus = _getTokenNumberWithBonus(_value);\n', '        totalTokensEmitted = totalTokensEmitted.add(tokensWithBonus);\n', '        balances[_beneficiary] = balances[_beneficiary].add(tokensWithBonus);\n', '\n', '        totalRaised = totalRaised.add(_value);\n', '    }\n', '\n', '    // buy tokens for T4T tokens\n', '    // @param _beneficiary address of beneficiary\n', '    function buyTokensT4T(address _beneficiary) public saleIsOn {\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 valueT4T = t4tToken.allowance(_beneficiary, address(this));\n', '\n', '        // check minimumInvest\n', '        uint256 value = valueT4T.mul(rateT4T);\n', '        require(value >= minimumInvest);\n', '\n', '        // transfer T4T from _beneficiary to this contract\n', '        require(t4tToken.transferFrom(_beneficiary, address(this), valueT4T));\n', '\n', '        _buyTokens(_beneficiary, value);\n', '\n', '        // only for buy using T4T tokens\n', '        t4tRaised = t4tRaised.add(valueT4T);\n', '        balancesForRefundT4T[_beneficiary] = balancesForRefundT4T[_beneficiary].add(valueT4T);\n', '    }\n', '\n', '    // manual transfer tokens by owner (e.g.: selling for fiat money)\n', '    // @param _to address of beneficiary\n', '    // @param _value of tokens (1 token = 10^18)\n', '    function manualBuy(address _to, uint256 _value) public saleIsOn onlyOwner {\n', '        require(_to != address(0));\n', '        require(_value >= minimumInvest);\n', '\n', '        _buyTokens(_to, _value);\n', '    }\n', '\n', '    // buy tokens with update rate state by owner\n', '    // @param _beneficiary address of beneficiary\n', '    // @param _rate new rate - how many token units a buyer gets per 1 wei\n', '    function buyTokensWithUpdateRate(address _beneficiary, uint256 _rate) public saleIsOn onlyOwner payable {\n', '        _changeRate(_rate);\n', '        buyTokens(_beneficiary);\n', '    }\n', '\n', '    // low level token purchase function\n', '    // @param _beneficiary address of beneficiary\n', '    function buyTokens(address _beneficiary) saleIsOn public payable {\n', '        require(_beneficiary != address(0));\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 value = weiAmount.mul(rate);\n', '        require(value >= minimumInvest);\n', '\n', '        _buyTokens(_beneficiary, value);\n', '\n', '        // only for buy using PreSale contract\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        balancesForRefund[_beneficiary] = balancesForRefund[_beneficiary].add(weiAmount);\n', '    }\n', '\n', '    function() external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '}']
