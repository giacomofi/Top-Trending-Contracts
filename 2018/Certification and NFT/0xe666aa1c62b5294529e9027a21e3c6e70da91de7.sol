['pragma solidity ^0.4.18;\n', '\n', '/* ==================================================================== */\n', '/* Copyright (c) 2018 The Priate Conquest Project.  All rights reserved.\n', '/* \n', '/* https://www.pirateconquest.com One of the world&#39;s slg games of blockchain \n', '/*  \n', '/* authors rainy@livestar.com/Jonny.Fu@livestar.com\n', '/*                 \n', '/* ==================================================================== */\n', '\n', 'contract KittyInterface {\n', '  function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens);\n', '  function ownerOf(uint256 _tokenId) external view returns (address owner);\n', '  function balanceOf(address _owner) public view returns (uint256 count);\n', '}\n', '\n', 'interface KittyTokenInterface {\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '  function setTokenPrice(uint256 _tokenId, uint256 _price) external;\n', '  function CreateKittyToken(address _owner,uint256 _price, uint32 _kittyId) public;\n', '}\n', '\n', 'contract CaptainKitty {\n', '  address owner;\n', '  //event \n', '  event CreateKitty(uint _count,address _owner);\n', '\n', '  KittyInterface kittyContract;\n', '  KittyTokenInterface kittyToken;\n', '  /// @dev Trust contract\n', '  mapping (address => bool) actionContracts;\n', '  mapping (address => uint256) kittyToCount;\n', '  mapping (address => bool) kittyGetOrNot;\n', '\n', '  function CaptainKitty() public {\n', '    owner = msg.sender;\n', '  }  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  function setActionContract(address _actionAddr, bool _useful) public onlyOwner {\n', '    actionContracts[_actionAddr] = _useful;\n', '  }\n', '\n', '  modifier onlyAccess() {\n', '    require(actionContracts[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function setKittyContractAddress(address _address) external onlyOwner {\n', '    kittyContract = KittyInterface(_address);\n', '  }\n', '\n', '  function setKittyTokenAddress(address _address) external onlyOwner {\n', '    kittyToken = KittyTokenInterface(_address);\n', '  }\n', '\n', '  function createKitties() external payable {\n', '    uint256 kittycount = kittyContract.balanceOf(msg.sender);\n', '    require(kittyGetOrNot[msg.sender] == false);\n', '    if (kittycount>=99) {\n', '      kittycount=99;\n', '    }\n', '    if (kittycount>0 && kittyToCount[msg.sender]==0) {\n', '      kittyToCount[msg.sender] = kittycount;\n', '      kittyGetOrNot[msg.sender] = true;\n', '      for (uint i=0;i<kittycount;i++) {\n', '        kittyToken.CreateKittyToken(msg.sender,0, 1);\n', '      }\n', '      //event\n', '      CreateKitty(kittycount,msg.sender);\n', '    }\n', '  }\n', '\n', '  function getKitties() external view returns(uint256 kittycnt,uint256 captaincnt,bool bGetOrNot) {\n', '    kittycnt = kittyContract.balanceOf(msg.sender);\n', '    captaincnt = kittyToCount[msg.sender];\n', '    bGetOrNot = kittyGetOrNot[msg.sender];\n', '  }\n', '\n', '  function getKittyGetOrNot(address _addr) external view returns (bool) {\n', '    return kittyGetOrNot[_addr];\n', '  }\n', '\n', '  function getKittyCount(address _addr) external view returns (uint256) {\n', '    return kittyToCount[_addr];\n', '  }\n', '\n', '  function birthKitty() external onlyAccess payable {\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '/* ==================================================================== */\n', '/* Copyright (c) 2018 The Priate Conquest Project.  All rights reserved.\n', '/* \n', "/* https://www.pirateconquest.com One of the world's slg games of blockchain \n", '/*  \n', '/* authors rainy@livestar.com/Jonny.Fu@livestar.com\n', '/*                 \n', '/* ==================================================================== */\n', '\n', 'contract KittyInterface {\n', '  function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens);\n', '  function ownerOf(uint256 _tokenId) external view returns (address owner);\n', '  function balanceOf(address _owner) public view returns (uint256 count);\n', '}\n', '\n', 'interface KittyTokenInterface {\n', '  function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '  function setTokenPrice(uint256 _tokenId, uint256 _price) external;\n', '  function CreateKittyToken(address _owner,uint256 _price, uint32 _kittyId) public;\n', '}\n', '\n', 'contract CaptainKitty {\n', '  address owner;\n', '  //event \n', '  event CreateKitty(uint _count,address _owner);\n', '\n', '  KittyInterface kittyContract;\n', '  KittyTokenInterface kittyToken;\n', '  /// @dev Trust contract\n', '  mapping (address => bool) actionContracts;\n', '  mapping (address => uint256) kittyToCount;\n', '  mapping (address => bool) kittyGetOrNot;\n', '\n', '  function CaptainKitty() public {\n', '    owner = msg.sender;\n', '  }  \n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  \n', '  function setActionContract(address _actionAddr, bool _useful) public onlyOwner {\n', '    actionContracts[_actionAddr] = _useful;\n', '  }\n', '\n', '  modifier onlyAccess() {\n', '    require(actionContracts[msg.sender]);\n', '    _;\n', '  }\n', '\n', '  function setKittyContractAddress(address _address) external onlyOwner {\n', '    kittyContract = KittyInterface(_address);\n', '  }\n', '\n', '  function setKittyTokenAddress(address _address) external onlyOwner {\n', '    kittyToken = KittyTokenInterface(_address);\n', '  }\n', '\n', '  function createKitties() external payable {\n', '    uint256 kittycount = kittyContract.balanceOf(msg.sender);\n', '    require(kittyGetOrNot[msg.sender] == false);\n', '    if (kittycount>=99) {\n', '      kittycount=99;\n', '    }\n', '    if (kittycount>0 && kittyToCount[msg.sender]==0) {\n', '      kittyToCount[msg.sender] = kittycount;\n', '      kittyGetOrNot[msg.sender] = true;\n', '      for (uint i=0;i<kittycount;i++) {\n', '        kittyToken.CreateKittyToken(msg.sender,0, 1);\n', '      }\n', '      //event\n', '      CreateKitty(kittycount,msg.sender);\n', '    }\n', '  }\n', '\n', '  function getKitties() external view returns(uint256 kittycnt,uint256 captaincnt,bool bGetOrNot) {\n', '    kittycnt = kittyContract.balanceOf(msg.sender);\n', '    captaincnt = kittyToCount[msg.sender];\n', '    bGetOrNot = kittyGetOrNot[msg.sender];\n', '  }\n', '\n', '  function getKittyGetOrNot(address _addr) external view returns (bool) {\n', '    return kittyGetOrNot[_addr];\n', '  }\n', '\n', '  function getKittyCount(address _addr) external view returns (uint256) {\n', '    return kittyToCount[_addr];\n', '  }\n', '\n', '  function birthKitty() external onlyAccess payable {\n', '  }\n', '}']
