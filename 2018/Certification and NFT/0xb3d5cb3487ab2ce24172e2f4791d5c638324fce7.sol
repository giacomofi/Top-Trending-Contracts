['pragma solidity ^0.4.18;\n', '\n', 'contract FakeVote {\n', '    \n', '    // key-value store mapping account to the number of votes that it received\n', '    mapping (address => uint256) public voteCount;\n', '    \n', '    // every account has a finite number of votes it can cast\n', '    mapping (address => uint256) public alreadyUsedVotes;\n', '    \n', '    // every account can cast maximally 10 votes\n', '    uint256 public maxNumVotesPerAccount = 10;\n', '    \n', '    // cast a vote for an account\n', '    function voteFor(address participant, uint256 numVotes) public {\n', '\n', '        // overflow protection\n', '        require (voteCount[participant] < voteCount[participant] + numVotes);\n', '        \n', '        // do not allow self-votes\n', '        require(participant != msg.sender);\n', '        \n', '        // do not allow voter to cast more votes than they should be able to\n', '        require(alreadyUsedVotes[msg.sender] + numVotes <= maxNumVotesPerAccount);\n', '        \n', '        // increase vote count\n', '        alreadyUsedVotes[msg.sender] += numVotes;\n', '        \n', '        // register votes;\n', '        voteCount[participant] += numVotes;\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'contract FakeVote {\n', '    \n', '    // key-value store mapping account to the number of votes that it received\n', '    mapping (address => uint256) public voteCount;\n', '    \n', '    // every account has a finite number of votes it can cast\n', '    mapping (address => uint256) public alreadyUsedVotes;\n', '    \n', '    // every account can cast maximally 10 votes\n', '    uint256 public maxNumVotesPerAccount = 10;\n', '    \n', '    // cast a vote for an account\n', '    function voteFor(address participant, uint256 numVotes) public {\n', '\n', '        // overflow protection\n', '        require (voteCount[participant] < voteCount[participant] + numVotes);\n', '        \n', '        // do not allow self-votes\n', '        require(participant != msg.sender);\n', '        \n', '        // do not allow voter to cast more votes than they should be able to\n', '        require(alreadyUsedVotes[msg.sender] + numVotes <= maxNumVotesPerAccount);\n', '        \n', '        // increase vote count\n', '        alreadyUsedVotes[msg.sender] += numVotes;\n', '        \n', '        // register votes;\n', '        voteCount[participant] += numVotes;\n', '    }\n', '}']
