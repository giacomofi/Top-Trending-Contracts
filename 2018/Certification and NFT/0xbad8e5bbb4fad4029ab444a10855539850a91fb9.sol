['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '/// @dev Implements access control to the DWorld contract.\n', 'contract MetaGameAccessControl is Claimable, Pausable, CanReclaimToken {\n', '    address public cfoAddress;\n', '    \n', '    function MetaGameAccessControl() public {\n', '        // The creator of the contract is the initial CFO.\n', '        cfoAddress = msg.sender;\n', '    }\n', '    \n', '    /// @dev Access modifier for CFO-only functionality.\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CFO. Only available to the current contract owner.\n', '    /// @param _newCFO The address of the new CFO.\n', '    function setCFO(address _newCFO) external onlyOwner {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '}\n', '\n', '\n', '/// @dev Defines base data structures for DWorld.\n', 'contract MetaGameBase is MetaGameAccessControl {\n', '    using SafeMath for uint256;\n', '    \n', '    mapping (uint256 => address) identifierToOwner;\n', '    mapping (uint256 => address) identifierToApproved;\n', '    mapping (address => uint256) ownershipDeedCount;\n', '    \n', '    mapping (uint256 => uint256) identifierToParentIdentifier;\n', '    \n', '    /// @dev All existing identifiers.\n', '    uint256[] public identifiers;\n', '    \n', '    /// @notice Get all minted identifiers;\n', '    function getAllIdentifiers() external view returns(uint256[]) {\n', '        return identifiers;\n', '    }\n', '    \n', '    /// @notice Returns the identifier of the parent of an identifier.\n', '    /// The parent identifier is 0 if the identifier has no parent.\n', '    /// @param identifier The identifier to get the parent identifier of.\n', '    function parentOf(uint256 identifier) external view returns (uint256 parentIdentifier) {\n', '        parentIdentifier = identifierToParentIdentifier[identifier];\n', '    }\n', '}\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Deed Standard\n', '/// @author William Entriken (https://phor.net), et al.\n', '/// @dev Specification at https://github.com/ethereum/EIPs/pull/841 (DRAFT)\n', 'interface ERC721 {\n', '\n', '    // COMPLIANCE WITH ERC-165 (DRAFT) /////////////////////////////////////////\n', '\n', '    /// @dev ERC-165 (draft) interface signature for itself\n', '    // bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\n', "    //     bytes4(keccak256('supportsInterface(bytes4)'));\n", '\n', '    /// @dev ERC-165 (draft) interface signature for ERC721\n', '    // bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = // 0xda671b9b\n', "    //     bytes4(keccak256('ownerOf(uint256)')) ^\n", "    //     bytes4(keccak256('countOfDeeds()')) ^\n", "    //     bytes4(keccak256('countOfDeedsByOwner(address)')) ^\n", "    //     bytes4(keccak256('deedOfOwnerByIndex(address,uint256)')) ^\n", "    //     bytes4(keccak256('approve(address,uint256)')) ^\n", "    //     bytes4(keccak256('takeOwnership(uint256)'));\n", '\n', '    /// @notice Query a contract to see if it supports a certain interface\n', '    /// @dev Returns `true` the interface is supported and `false` otherwise,\n', '    ///  returns `true` for INTERFACE_SIGNATURE_ERC165 and\n', '    ///  INTERFACE_SIGNATURE_ERC721, see ERC-165 for other interface signatures.\n', '    function supportsInterface(bytes4 _interfaceID) external pure returns (bool);\n', '\n', '    // PUBLIC QUERY FUNCTIONS //////////////////////////////////////////////////\n', '\n', '    /// @notice Find the owner of a deed\n', '    /// @param _deedId The identifier for a deed we are inspecting\n', '    /// @dev Deeds assigned to zero address are considered destroyed, and\n', '    ///  queries about them do throw.\n', '    /// @return The non-zero address of the owner of deed `_deedId`, or `throw`\n', '    ///  if deed `_deedId` is not tracked by this contract\n', '    function ownerOf(uint256 _deedId) external view returns (address _owner);\n', '\n', '    /// @notice Count deeds tracked by this contract\n', '    /// @return A count of the deeds tracked by this contract, where each one of\n', '    ///  them has an assigned and queryable owner\n', '    function countOfDeeds() public view returns (uint256 _count);\n', '\n', '    /// @notice Count all deeds assigned to an owner\n', '    /// @dev Throws if `_owner` is the zero address, representing destroyed deeds.\n', '    /// @param _owner An address where we are interested in deeds owned by them\n', '    /// @return The number of deeds owned by `_owner`, possibly zero\n', '    function countOfDeedsByOwner(address _owner) public view returns (uint256 _count);\n', '\n', '    /// @notice Enumerate deeds assigned to an owner\n', '    /// @dev Throws if `_index` >= `countOfDeedsByOwner(_owner)` or if\n', '    ///  `_owner` is the zero address, representing destroyed deeds.\n', '    /// @param _owner An address where we are interested in deeds owned by them\n', '    /// @param _index A counter between zero and `countOfDeedsByOwner(_owner)`,\n', '    ///  inclusive\n', '    /// @return The identifier for the `_index`th deed assigned to `_owner`,\n', '    ///   (sort order not specified)\n', '    function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _deedId);\n', '\n', '    // TRANSFER MECHANISM //////////////////////////////////////////////////////\n', '\n', '    /// @dev This event emits when ownership of any deed changes by any\n', '    ///  mechanism. This event emits when deeds are created (`from` == 0) and\n', '    ///  destroyed (`to` == 0). Exception: during contract creation, any\n', '    ///  transfers may occur without emitting `Transfer`.\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed deedId);\n', '\n', '    /// @dev This event emits on any successful call to\n', '    ///  `approve(address _spender, uint256 _deedId)`. Exception: does not emit\n', '    ///  if an owner revokes approval (`_to` == 0x0) on a deed with no existing\n', '    ///  approval.\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed deedId);\n', '\n', '    /// @notice Approve a new owner to take your deed, or revoke approval by\n', '    ///  setting the zero address. You may `approve` any number of times while\n', '    ///  the deed is assigned to you, only the most recent approval matters.\n', '    /// @dev Throws if `msg.sender` does not own deed `_deedId` or if `_to` ==\n', '    ///  `msg.sender`.\n', '    /// @param _deedId The deed you are granting ownership of\n', '    function approve(address _to, uint256 _deedId) external;\n', '\n', '    /// @notice Become owner of a deed for which you are currently approved\n', '    /// @dev Throws if `msg.sender` is not approved to become the owner of\n', '    ///  `deedId` or if `msg.sender` currently owns `_deedId`.\n', '    /// @param _deedId The deed that is being transferred\n', '    function takeOwnership(uint256 _deedId) external;\n', '    \n', '    // SPEC EXTENSIONS /////////////////////////////////////////////////////////\n', '    \n', '    /// @notice Transfer a deed to a new owner.\n', '    /// @dev Throws if `msg.sender` does not own deed `_deedId` or if\n', '    ///  `_to` == 0x0.\n', '    /// @param _to The address of the new owner.\n', '    /// @param _deedId The deed you are transferring.\n', '    function transfer(address _to, uint256 _deedId) external;\n', '}\n', '\n', '\n', '/// @title Metadata extension to ERC-721 interface\n', '/// @author William Entriken (https://phor.net)\n', '/// @dev Specification at https://github.com/ethereum/EIPs/pull/841 (DRAFT)\n', 'interface ERC721Metadata {\n', '\n', '    /// @dev ERC-165 (draft) interface signature for ERC721\n', '    // bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = // 0x2a786f11\n', "    //     bytes4(keccak256('name()')) ^\n", "    //     bytes4(keccak256('symbol()')) ^\n", "    //     bytes4(keccak256('deedUri(uint256)'));\n", '\n', '    /// @notice A descriptive name for a collection of deeds managed by this\n', '    ///  contract\n', '    /// @dev Wallets and exchanges MAY display this to the end user.\n', '    function name() public pure returns (string _deedName);\n', '\n', '    /// @notice An abbreviated name for deeds managed by this contract\n', '    /// @dev Wallets and exchanges MAY display this to the end user.\n', '    function symbol() public pure returns (string _deedSymbol);\n', '\n', '    /// @notice A distinct URI (RFC 3986) for a given token.\n', '    /// @dev If:\n', '    ///  * The URI is a URL\n', '    ///  * The URL is accessible\n', '    ///  * The URL points to a valid JSON file format (ECMA-404 2nd ed.)\n', '    ///  * The JSON base element is an object\n', '    ///  then these names of the base element SHALL have special meaning:\n', '    ///  * "name": A string identifying the item to which `_deedId` grants\n', '    ///    ownership\n', '    ///  * "description": A string detailing the item to which `_deedId` grants\n', '    ///    ownership\n', '    ///  * "image": A URI pointing to a file of image/* mime type representing\n', '    ///    the item to which `_deedId` grants ownership\n', '    ///  Wallets and exchanges MAY display this to the end user.\n', '    ///  Consider making any images at a width between 320 and 1080 pixels and\n', '    ///  aspect ratio between 1.91:1 and 4:5 inclusive.\n', '    function deedUri(uint256 _deedId) external pure returns (string _uri);\n', '}\n', '\n', '\n', '/// @dev Holds deed functionality such as approving and transferring. Implements ERC721.\n', 'contract MetaGameDeed is MetaGameBase, ERC721, ERC721Metadata {\n', '    \n', '    /// @notice Name of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\n', '    function name() public pure returns (string _deedName) {\n', '        _deedName = "MetaGame";\n', '    }\n', '    \n', '    /// @notice Symbol of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\n', '    function symbol() public pure returns (string _deedSymbol) {\n', '        _deedSymbol = "MG";\n', '    }\n', '    \n', '    /// @dev ERC-165 (draft) interface signature for itself\n', '    bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\n', "        bytes4(keccak256('supportsInterface(bytes4)'));\n", '\n', '    /// @dev ERC-165 (draft) interface signature for ERC721\n', '    bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = // 0xda671b9b\n', "        bytes4(keccak256('ownerOf(uint256)')) ^\n", "        bytes4(keccak256('countOfDeeds()')) ^\n", "        bytes4(keccak256('countOfDeedsByOwner(address)')) ^\n", "        bytes4(keccak256('deedOfOwnerByIndex(address,uint256)')) ^\n", "        bytes4(keccak256('approve(address,uint256)')) ^\n", "        bytes4(keccak256('takeOwnership(uint256)'));\n", '        \n', '    /// @dev ERC-165 (draft) interface signature for ERC721\n', '    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = // 0x2a786f11\n', "        bytes4(keccak256('name()')) ^\n", "        bytes4(keccak256('symbol()')) ^\n", "        bytes4(keccak256('deedUri(uint256)'));\n", '    \n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    /// Returns true for any standardized interfaces implemented by this contract.\n', '    /// (ERC-165 and ERC-721.)\n', '    function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\n', '        return (\n', '            (_interfaceID == INTERFACE_SIGNATURE_ERC165)\n', '            || (_interfaceID == INTERFACE_SIGNATURE_ERC721)\n', '            || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata)\n', '        );\n', '    }\n', '    \n', '    /// @dev Checks if a given address owns a particular deed.\n', '    /// @param _owner The address of the owner to check for.\n', '    /// @param _deedId The deed identifier to check for.\n', '    function _owns(address _owner, uint256 _deedId) internal view returns (bool) {\n', '        return identifierToOwner[_deedId] == _owner;\n', '    }\n', '    \n', '    /// @dev Approve a given address to take ownership of a deed.\n', '    /// @param _from The address approving taking ownership.\n', '    /// @param _to The address to approve taking ownership.\n', '    /// @param _deedId The identifier of the deed to give approval for.\n', '    function _approve(address _from, address _to, uint256 _deedId) internal {\n', '        identifierToApproved[_deedId] = _to;\n', '        \n', '        // Emit event.\n', '        Approval(_from, _to, _deedId);\n', '    }\n', '    \n', '    /// @dev Checks if a given address has approval to take ownership of a deed.\n', '    /// @param _claimant The address of the claimant to check for.\n', '    /// @param _deedId The identifier of the deed to check for.\n', '    function _approvedFor(address _claimant, uint256 _deedId) internal view returns (bool) {\n', '        return identifierToApproved[_deedId] == _claimant;\n', '    }\n', '    \n', '    /// @dev Assigns ownership of a specific deed to an address.\n', '    /// @param _from The address to transfer the deed from.\n', '    /// @param _to The address to transfer the deed to.\n', '    /// @param _deedId The identifier of the deed to transfer.\n', '    function _transfer(address _from, address _to, uint256 _deedId) internal {\n', '        // The number of deeds is capped at rows * cols, so this cannot\n', '        // be overflowed if those parameters are sensible.\n', '        ownershipDeedCount[_to]++;\n', '        \n', '        // Transfer ownership.\n', '        identifierToOwner[_deedId] = _to;\n', '        \n', '        // When a new deed is minted, the _from address is 0x0, but we\n', '        // do not track deed ownership of 0x0.\n', '        if (_from != address(0)) {\n', '            ownershipDeedCount[_from]--;\n', '            \n', '            // Clear taking ownership approval.\n', '            delete identifierToApproved[_deedId];\n', '        }\n', '        \n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _deedId);\n', '    }\n', '    \n', '    // ERC 721 implementation\n', '    \n', '    /// @notice Returns the total number of deeds currently in existence.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function countOfDeeds() public view returns (uint256) {\n', '        return identifiers.length;\n', '    }\n', '    \n', '    /// @notice Returns the number of deeds owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    /// @dev Required for ERC-721 compliance\n', '    function countOfDeedsByOwner(address _owner) public view returns (uint256) {\n', '        return ownershipDeedCount[_owner];\n', '    }\n', '    \n', '    /// @notice Returns the address currently assigned ownership of a given deed.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _deedId) external view returns (address _owner) {\n', '        _owner = identifierToOwner[_deedId];\n', '\n', '        require(_owner != address(0));\n', '    }\n', '    \n', '    /// @notice Approve a given address to take ownership of a deed.\n', '    /// @param _to The address to approve taking owernship.\n', '    /// @param _deedId The identifier of the deed to give approval for.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(address _to, uint256 _deedId) external whenNotPaused {\n', '        uint256[] memory _deedIds = new uint256[](1);\n', '        _deedIds[0] = _deedId;\n', '        \n', '        approveMultiple(_to, _deedIds);\n', '    }\n', '    \n', '    /// @notice Approve a given address to take ownership of multiple deeds.\n', '    /// @param _to The address to approve taking ownership.\n', '    /// @param _deedIds The identifiers of the deeds to give approval for.\n', '    function approveMultiple(address _to, uint256[] _deedIds) public whenNotPaused {\n', '        // Ensure the sender is not approving themselves.\n', '        require(msg.sender != _to);\n', '    \n', '        for (uint256 i = 0; i < _deedIds.length; i++) {\n', '            uint256 _deedId = _deedIds[i];\n', '            \n', '            // Require the sender is the owner of the deed.\n', '            require(_owns(msg.sender, _deedId));\n', '            \n', '            // Perform the approval.\n', '            _approve(msg.sender, _to, _deedId);\n', '        }\n', '    }\n', '    \n', '    /// @notice Transfer a deed to another address. If transferring to a smart\n', '    /// contract be VERY CAREFUL to ensure that it is aware of ERC-721, or your\n', '    /// deed may be lost forever.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _deedId The identifier of the deed to transfer.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(address _to, uint256 _deedId) external whenNotPaused {\n', '        uint256[] memory _deedIds = new uint256[](1);\n', '        _deedIds[0] = _deedId;\n', '        \n', '        transferMultiple(_to, _deedIds);\n', '    }\n', '    \n', '    /// @notice Transfers multiple deeds to another address. If transferring to\n', '    /// a smart contract be VERY CAREFUL to ensure that it is aware of ERC-721,\n', '    /// or your deeds may be lost forever.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _deedIds The identifiers of the deeds to transfer.\n', '    function transferMultiple(address _to, uint256[] _deedIds) public whenNotPaused {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        \n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        require(_to != address(this));\n', '    \n', '        for (uint256 i = 0; i < _deedIds.length; i++) {\n', '            uint256 _deedId = _deedIds[i];\n', '            \n', '            // One can only transfer their own deeds.\n', '            require(_owns(msg.sender, _deedId));\n', '\n', '            // Transfer ownership\n', '            _transfer(msg.sender, _to, _deedId);\n', '        }\n', '    }\n', '    \n', '    /// @notice Transfer a deed owned by another address, for which the calling\n', '    /// address has previously been granted transfer approval by the owner.\n', '    /// @param _deedId The identifier of the deed to be transferred.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function takeOwnership(uint256 _deedId) external whenNotPaused {\n', '        uint256[] memory _deedIds = new uint256[](1);\n', '        _deedIds[0] = _deedId;\n', '        \n', '        takeOwnershipMultiple(_deedIds);\n', '    }\n', '    \n', '    /// @notice Transfer multiple deeds owned by another address, for which the\n', '    /// calling address has previously been granted transfer approval by the owner.\n', '    /// @param _deedIds The identifier of the deed to be transferred.\n', '    function takeOwnershipMultiple(uint256[] _deedIds) public whenNotPaused {\n', '        for (uint256 i = 0; i < _deedIds.length; i++) {\n', '            uint256 _deedId = _deedIds[i];\n', '            address _from = identifierToOwner[_deedId];\n', '            \n', '            // Check for transfer approval\n', '            require(_approvedFor(msg.sender, _deedId));\n', '\n', '            // Reassign ownership (also clears pending approvals and emits Transfer event).\n', '            _transfer(_from, msg.sender, _deedId);\n', '        }\n', '    }\n', '    \n', '    /// @notice Returns a list of all deed identifiers assigned to an address.\n', '    /// @param _owner The owner whose deeds we are interested in.\n', "    /// @dev This method MUST NEVER be called by smart contract code. It's very\n", '    /// expensive and is not supported in contract-to-contract calls as it returns\n', '    /// a dynamic array (only supported for web3 calls).\n', '    function deedsOfOwner(address _owner) external view returns(uint256[]) {\n', '        uint256 deedCount = countOfDeedsByOwner(_owner);\n', '\n', '        if (deedCount == 0) {\n', '            // Return an empty array.\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](deedCount);\n', '            uint256 totalDeeds = countOfDeeds();\n', '            uint256 resultIndex = 0;\n', '            \n', '            for (uint256 deedNumber = 0; deedNumber < totalDeeds; deedNumber++) {\n', '                uint256 identifier = identifiers[deedNumber];\n', '                if (identifierToOwner[identifier] == _owner) {\n', '                    result[resultIndex] = identifier;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '    \n', '    /// @notice Returns a deed identifier of the owner at the given index.\n', '    /// @param _owner The address of the owner we want to get a deed for.\n', '    /// @param _index The index of the deed we want.\n', '    function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n', '        // The index should be valid.\n', '        require(_index < countOfDeedsByOwner(_owner));\n', '\n', "        // Loop through all deeds, accounting the number of deeds of the owner we've seen.\n", '        uint256 seen = 0;\n', '        uint256 totalDeeds = countOfDeeds();\n', '        \n', '        for (uint256 deedNumber = 0; deedNumber < totalDeeds; deedNumber++) {\n', '            uint256 identifier = identifiers[deedNumber];\n', '            if (identifierToOwner[identifier] == _owner) {\n', '                if (seen == _index) {\n', '                    return identifier;\n', '                }\n', '                \n', '                seen++;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /// @notice Returns an (off-chain) metadata url for the given deed.\n', '    /// @param _deedId The identifier of the deed to get the metadata\n', '    /// url for.\n', '    /// @dev Implementation of optional ERC-721 functionality.\n', '    function deedUri(uint256 _deedId) external pure returns (string uri) {\n', '        // Assume a maximum deed id length.\n', '        require (_deedId < 1000000);\n', '        \n', '        uri = "https://meta.quazr.io/card/xxxxxxx";\n', '        bytes memory _uri = bytes(uri);\n', '        \n', '        for (uint256 i = 0; i < 7; i++) {\n', '            _uri[33 - i] = byte(48 + (_deedId / 10 ** i) % 10);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title PullPayment\n', ' * @dev Base contract supporting async send for pull payments. Inherit from this\n', ' * contract and use asyncSend instead of send.\n', ' */\n', 'contract PullPayment {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public payments;\n', '  uint256 public totalPayments;\n', '\n', '  /**\n', '  * @dev withdraw accumulated balance, called by payee.\n', '  */\n', '  function withdrawPayments() public {\n', '    address payee = msg.sender;\n', '    uint256 payment = payments[payee];\n', '\n', '    require(payment != 0);\n', '    require(this.balance >= payment);\n', '\n', '    totalPayments = totalPayments.sub(payment);\n', '    payments[payee] = 0;\n', '\n', '    assert(payee.send(payment));\n', '  }\n', '\n', '  /**\n', '  * @dev Called by the payer to store the sent amount as credit to be pulled.\n', '  * @param dest The destination address of the funds.\n', '  * @param amount The amount to transfer.\n', '  */\n', '  function asyncSend(address dest, uint256 amount) internal {\n', '    payments[dest] = payments[dest].add(amount);\n', '    totalPayments = totalPayments.add(amount);\n', '  }\n', '}\n', '\n', '\n', '/// @dev Defines base data structures for DWorld.\n', 'contract MetaGameFinance is MetaGameDeed, PullPayment {\n', '    /// @notice The dividend given to all parents of a deed, \n', '    /// in 1/1000th of a percentage.\n', '    uint256 public dividendPercentage = 1000;\n', '    \n', '    /// @notice The minimum fee for the contract in 1/1000th\n', '    /// of a percentage.\n', '    uint256 public minimumFee = 2500;\n', '    \n', '    /// @notice The minimum total paid in fees and dividends.\n', '    /// If there are (almost) no dividends to be paid, the fee\n', '    /// for the contract is higher. This happens for deeds at\n', '    /// or near the top of the hierarchy. In 1/1000th of a\n', '    /// percentage.\n', '    uint256 public minimumFeePlusDividends = 7000;\n', '    \n', '    // @dev A mapping from deed identifiers to the buyout price.\n', '    mapping (uint256 => uint256) public identifierToPrice;\n', '    \n', '    /// @notice The threshold for a payment to be sent directly,\n', "    /// instead of added to a beneficiary's balance.\n", '    uint256 public directPaymentThreshold = 0 ether;\n', '    \n', '    /// @notice Boolean indicating whether deed price can be changed\n', '    /// manually.\n', '    bool public allowChangePrice = false;\n', '    \n', '    /// @notice The maximum depth for which dividends will be paid to parents.\n', '    uint256 public maxDividendDepth = 6;\n', '    \n', "    /// @dev This event is emitted when a deed's buyout price is initially set or changed.\n", '    event Price(uint256 indexed identifier, uint256 price, uint256 nextPrice);\n', '    \n', '    /// @dev This event is emitted when a deed is bought out.\n', '    event Buy(address indexed oldOwner, address indexed newOwner, uint256 indexed identifier, uint256 price, uint256 ownerWinnings);\n', '    \n', '    /// @dev This event is emitted when a dividend is paid.\n', '    event DividendPaid(address indexed beneficiary, uint256 indexed identifierBought, uint256 indexed identifier, uint256 dividend);\n', '    \n', '    /// @notice Set the threshold for a payment to be sent directly.\n', '    /// @param threshold The threshold for a payment to be sent directly.\n', '    function setDirectPaymentThreshold(uint256 threshold) external onlyCFO {\n', '        directPaymentThreshold = threshold;\n', '    }\n', '    \n', '    /// @notice Set whether prices can be changed manually.\n', '    /// @param _allowChangePrice Bool indiciating wether prices can be changed manually.\n', '    function setAllowChangePrice(bool _allowChangePrice) external onlyCFO {\n', '        allowChangePrice = _allowChangePrice;\n', '    }\n', '    \n', '    /// @notice Set the maximum dividend depth.\n', '    /// @param _maxDividendDepth The maximum dividend depth.\n', '    function setMaxDividendDepth(uint256 _maxDividendDepth) external onlyCFO {\n', '        maxDividendDepth = _maxDividendDepth;\n', '    }\n', '    \n', '    /// @notice Calculate the next price given the current price.\n', '    /// @param currentPrice The current price.\n', '    function nextPrice(uint256 currentPrice) public pure returns(uint256) {\n', '        if (currentPrice < 1 ether) {\n', '            return currentPrice.mul(200).div(100); // 100% increase\n', '        } else if (currentPrice < 5 ether) {\n', '            return currentPrice.mul(150).div(100); // 50% increase\n', '        } else {\n', '            return currentPrice.mul(135).div(100); // 35% increase\n', '        }\n', '    }\n', '    \n', '    /// @notice Set the price of a deed.\n', '    /// @param identifier The identifier of the deed to change the price of.\n', '    /// @param newPrice The new price of the deed.\n', '    function changeDeedPrice(uint256 identifier, uint256 newPrice) public {\n', '        // The message sender must be the deed owner.\n', '        require(identifierToOwner[identifier] == msg.sender);\n', '        \n', '        // Price changes must be enabled.\n', '        require(allowChangePrice);\n', '        \n', '        // The new price must be lower than the current price.\n', '        require(newPrice < identifierToPrice[identifier]);\n', '        \n', '        // Set the new price.\n', '        identifierToPrice[identifier] = newPrice;\n', '        Price(identifier, newPrice, nextPrice(newPrice));\n', '    }\n', '    \n', '    /// @notice Set the initial price of a deed.\n', '    /// @param identifier The identifier of the deed to change the price of.\n', '    /// @param newPrice The new price of the deed.\n', '    function changeInitialPrice(uint256 identifier, uint256 newPrice) public onlyCFO {        \n', '        // The deed must be owned by the contract.\n', '        require(identifierToOwner[identifier] == address(this));\n', '        \n', '        // Set the new price.\n', '        identifierToPrice[identifier] = newPrice;\n', '        Price(identifier, newPrice, nextPrice(newPrice));\n', '    }\n', '    \n', '    /// @dev Pay dividends to parents of a deed.\n', '    /// @param identifierBought The identifier of the deed that was bought.\n', '    /// @param identifier The identifier of the deed to pay its parents dividends for (recursed).\n', '    /// @param dividend The dividend to be paid to parents of the deed.\n', '    /// @param depth The depth of this dividend.\n', '    function _payDividends(uint256 identifierBought, uint256 identifier, uint256 dividend, uint256 depth)\n', '        internal\n', '        returns(uint256 totalDividendsPaid)\n', '    {\n', '        uint256 parentIdentifier = identifierToParentIdentifier[identifier];\n', '        \n', '        if (parentIdentifier != 0 && depth < maxDividendDepth) {\n', '            address parentOwner = identifierToOwner[parentIdentifier];\n', '        \n', '            if (parentOwner != address(this)) {            \n', '                // Send dividend to the owner of the parent.\n', '                _sendFunds(parentOwner, dividend);\n', '                DividendPaid(parentOwner, identifierBought, parentIdentifier, dividend);\n', '            }\n', '            \n', '            totalDividendsPaid = dividend;\n', '        \n', '            // Recursively pay dividends to parents of parents.\n', '            uint256 dividendsPaid = _payDividends(identifierBought, parentIdentifier, dividend, depth + 1);\n', '            \n', '            totalDividendsPaid = totalDividendsPaid.add(dividendsPaid);\n', '        } else {\n', '            // Not strictly necessary to set this to 0 explicitly... but makes\n', '            // it clearer to see what happens.\n', '            totalDividendsPaid = 0;\n', '        }\n', '    }\n', '    \n', '    /// @dev Calculate the contract fee.\n', '    /// @param price The price of the buyout.\n', '    /// @param dividendsPaid The total amount paid in dividends.\n', '    function calculateFee(uint256 price, uint256 dividendsPaid) public view returns(uint256 fee) {\n', '        // Calculate the absolute minimum fee.\n', '        fee = price.mul(minimumFee).div(100000);\n', '        \n', '        // Calculate the minimum fee plus dividends payable.\n', '        // See also the explanation at the definition of\n', '        // minimumFeePlusDividends.\n', '        uint256 _minimumFeePlusDividends = price.mul(minimumFeePlusDividends).div(100000);\n', '        \n', '        if (_minimumFeePlusDividends > dividendsPaid) {\n', '            uint256 feeMinusDividends = _minimumFeePlusDividends.sub(dividendsPaid);\n', '        \n', "            // The minimum total paid in 'fees plus dividends', minus dividends, is\n", '            // greater than the minimum fee. Set the fee to this value.\n', '            if (feeMinusDividends > fee) {\n', '                fee = feeMinusDividends;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /// @dev Send funds to a beneficiary. If sending fails, assign\n', "    /// funds to the beneficiary's balance for manual withdrawal.\n", "    /// @param beneficiary The beneficiary's address to send funds to\n", '    /// @param amount The amount to send.\n', '    function _sendFunds(address beneficiary, uint256 amount) internal {\n', '        if (amount < directPaymentThreshold) {\n', '            // Amount is under send threshold. Send funds asynchronously\n', '            // for manual withdrawal by the beneficiary.\n', '            asyncSend(beneficiary, amount);\n', '        } else if (!beneficiary.send(amount)) {\n', '            // Failed to send funds. This can happen due to a failure in\n', '            // fallback code of the beneficiary, or because of callstack\n', '            // depth.\n', '            // Send funds asynchronously for manual withdrawal by the\n', '            // beneficiary.\n', '            asyncSend(beneficiary, amount);\n', '        }\n', '    }\n', '    \n', '    /// @notice Withdraw (unowed) contract balance.\n', '    function withdrawFreeBalance() external onlyCFO {\n', '        // Calculate the free (unowed) balance. This never underflows, as\n', '        // totalPayments is guaranteed to be less than or equal to the\n', '        // contract balance.\n', '        uint256 freeBalance = this.balance - totalPayments;\n', '        \n', '        cfoAddress.transfer(freeBalance);\n', '    }\n', '}\n', '\n', '\n', '/// @dev Defines core meta game functionality.\n', 'contract MetaGameCore is MetaGameFinance {\n', '    \n', '    function MetaGameCore() public {\n', '        // Start the contract paused.\n', '        paused = true;\n', '    }\n', '    \n', '    /// @notice Create a collectible.\n', '    /// @param identifier The identifier of the collectible that is to be created.\n', '    /// @param owner The address of the initial owner. Blank if this contract should\n', '    /// be the initial owner.\n', '    /// @param parentIdentifier The identifier of the parent of the collectible, which\n', '    /// receives dividends when this collectible trades.\n', '    /// @param price The initial price of the collectible.\n', '    function createCollectible(uint256 identifier, address owner, uint256 parentIdentifier, uint256 price) external onlyCFO {\n', '        // The identifier must be valid. Identifier 0 is reserved\n', '        // to mark a collectible as having no parent.\n', '        require(identifier >= 1);\n', '    \n', '        // The identifier must not exist yet.\n', '        require(identifierToOwner[identifier] == 0x0);\n', '        \n', '        // Add the identifier to the list of existing identifiers.\n', '        identifiers.push(identifier);\n', '        \n', '        address initialOwner = owner;\n', '        \n', '        if (initialOwner == 0x0) {\n', '            // Set the initial owner to be the contract itself.\n', '            initialOwner = address(this);\n', '        }\n', '        \n', '        // Transfer the collectible to the initial owner.\n', '        _transfer(0x0, initialOwner, identifier);\n', '        \n', '        // Set the parent identifier.\n', '        identifierToParentIdentifier[identifier] = parentIdentifier;\n', '        \n', '        // Set the initial price.\n', '        identifierToPrice[identifier] = price;\n', '        \n', '        // Emit price event.\n', '        Price(identifier, price, nextPrice(price));\n', '    }\n', '    \n', '    /// @notice Set the parent collectible of a collectible.\n', '    function setParent(uint256 identifier, uint256 parentIdentifier) external onlyCFO {\n', '        // The deed must exist.\n', '        require(identifierToOwner[identifier] != 0x0);\n', '        \n', '        identifierToParentIdentifier[identifier] = parentIdentifier;\n', '    }\n', '    \n', '    /// @notice Buy a collectible.\n', '    function buy(uint256 identifier) external payable whenNotPaused {\n', '        // The collectible must exist.\n', '        require(identifierToOwner[identifier] != 0x0);\n', '        \n', '        address oldOwner = identifierToOwner[identifier];\n', '        uint256 price = identifierToPrice[identifier];\n', '        \n', '        // The old owner must not be the same as the buyer.\n', '        require(oldOwner != msg.sender);\n', '        \n', '        // Enough ether must be provided.\n', '        require(msg.value >= price);\n', '        \n', '        // Set the new price.\n', '        uint256 newPrice = nextPrice(price);\n', '        identifierToPrice[identifier] = newPrice;\n', '        \n', '        // Transfer the collectible.\n', '        _transfer(oldOwner, msg.sender, identifier);\n', '        \n', '        // Emit price change event.\n', '        Price(identifier, newPrice, nextPrice(newPrice));\n', '        \n', '        // Pay dividends.\n', '        uint256 dividend = price.mul(dividendPercentage).div(100000);\n', '        uint256 dividendsPaid = _payDividends(identifier, identifier, dividend, 0);\n', '        \n', '        // Calculate the contract fee.\n', '        uint256 fee = calculateFee(price, dividendsPaid);\n', '        \n', '        // Calculate the winnings for the previous owner.\n', '        uint256 oldOwnerWinnings = price.sub(dividendsPaid).sub(fee);\n', '        \n', '        // Emit buy event.\n', '        Buy(oldOwner, msg.sender, identifier, price, oldOwnerWinnings);\n', '        \n', '        if (oldOwner != address(this)) {\n', '            // The old owner is not this contract itself.\n', '            // Pay the old owner.\n', '            _sendFunds(oldOwner, oldOwnerWinnings);\n', '        }\n', '        \n', '        // Calculate overspent ether. This cannot underflow, as the require\n', '        // guarantees price to be greater than or equal to msg.value.\n', '        uint256 excess = price - msg.value;\n', '        \n', '        if (excess > 0) {\n', '            // Refund overspent Ether.\n', '            msg.sender.transfer(excess);\n', '        }\n', '    }\n', '    \n', "    /// @notice Return a collectible's details.\n", '    /// @param identifier The identifier of the collectible to get details for.\n', '    function getDeed(uint256 identifier)\n', '        external\n', '        view\n', '        returns(uint256 deedId, address owner, uint256 buyPrice, uint256 nextBuyPrice)\n', '    {\n', '        deedId = identifier;\n', '        owner = identifierToOwner[identifier];\n', '        buyPrice = identifierToPrice[identifier];\n', '        nextBuyPrice = nextPrice(buyPrice);\n', '    }\n', '}']