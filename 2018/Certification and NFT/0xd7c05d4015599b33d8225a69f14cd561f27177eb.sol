['pragma solidity ^0.4.25; /*\n', '\n', '___________________________________________________________________\n', '  _      _                                        ______           \n', '  |  |  /          /                                /              \n', '--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\n', "  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \n", '__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\n', '\n', '\n', ' .----------------.  .----------------.  .----------------.  .----------------.  .-----------------.\n', '| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\n', '| |    _______   | || |  _________   | || |   _______    | || |  _________   | || | ____  _____  | |\n', '| |   /  ___  |  | || | |_   ___  |  | || |  |  ___  |   | || | |_   ___  |  | || ||_   \\|_   _| | |\n', '| |  |  (__ \\_|  | || |   | |_  \\_|  | || |  |_/  / /    | || |   | |_  \\_|  | || |  |   \\ | |   | |\n', "| |   '.___`-.   | || |   |  _|  _   | || |      / /     | || |   |  _|  _   | || |  | |\\ \\| |   | |\n", '| |  |`\\____) |  | || |  _| |___/ |  | || |     / /      | || |  _| |___/ |  | || | _| |_\\   |_  | |\n', "| |  |_______.'  | || | |_________|  | || |    /_/       | || | |_________|  | || ||_____|\\____| | |\n", '| |              | || |              | || |              | || |              | || |              | |\n', "| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\n", " '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \n", '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '// Name        : se7en\n', '// Symbol      : S7N\n', '// Copyright (c) 2018 XSe7en Social Media Inc. ( https://se7en.social )\n', '// Contract written by EtherAuthority ( https://EtherAuthority.io )\n', '// ----------------------------------------------------------------------------\n', '   \n', '*/ \n', '\n', '//*******************************************************************//\n', '//------------------------ SafeMath Library -------------------------//\n', '//*******************************************************************//\n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that throw on error\n', '     */\n', '    library SafeMath {\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '      }\n', '    \n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '      }\n', '    \n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '      }\n', '    \n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '      }\n', '    }\n', '\n', '\n', '//*******************************************************************//\n', '//------------------ Contract to Manage Ownership -------------------//\n', '//*******************************************************************//\n', '    \n', '    contract owned {\n', '        address public owner;\n', '        \n', '         constructor () public {\n', '            owner = msg.sender;\n', '        }\n', '    \n', '        modifier onlyOwner {\n', '            require(msg.sender == owner);\n', '            _;\n', '        }\n', '    \n', '        function transferOwnership(address newOwner) onlyOwner public {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes  _extraData) external; }\n', '\n', '\n', '//***************************************************************//\n', '//------------------ ERC20 Standard Template -------------------//\n', '//***************************************************************//\n', '    \n', '    contract TokenERC20 {\n', '        // Public variables of the token\n', '        using SafeMath for uint256;\n', '        string public name;\n', '        string public symbol;\n', '        uint8 public decimals = 18;\n', '        uint256 public totalSupply;\n', '        uint256 public reservedForICO;\n', '        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n', '    \n', '        // This creates an array with all balances\n', '        mapping (address => uint256) public balanceOf;\n', '        mapping (address => mapping (address => uint256)) public allowance;\n', '    \n', '        // This generates a public event on the blockchain that will notify clients\n', '        event Transfer(address indexed from, address indexed to, uint256 value);\n', '    \n', '        // This notifies clients about the amount burnt\n', '        event Burn(address indexed from, uint256 value);\n', '    \n', '        /**\n', '         * Constructor function\n', '         *\n', '         * Initializes contract with initial supply tokens to the creator of the contract\n', '         */\n', '        constructor (\n', '            uint256 initialSupply,\n', '            uint256 allocatedForICO,\n', '            string memory tokenName,\n', '            string memory tokenSymbol\n', '        ) public {\n', '            totalSupply = initialSupply.mul(1 ether);   \n', '            reservedForICO = allocatedForICO.mul(1 ether);  \n', '            balanceOf[address(this)] = reservedForICO;      \n', '            balanceOf[msg.sender]=totalSupply.sub(reservedForICO); \n', '            name = tokenName;                               \n', '            symbol = tokenSymbol;                           \n', '        }\n', '    \n', '        /**\n', '         * Internal transfer, can be called only by this contract\n', '         */\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '            // Prevent transfer to 0x0 address. Use burn() instead\n', '            require(_to != address(0x0));\n', '            // Check if the sender has enough balance\n', '            require(balanceOf[_from] >= _value);\n', '            // Check for overflows\n', '            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n', '            // Save this for an assertion in the future\n', '            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n', '            // Subtract from the sender\n', '            balanceOf[_from] = balanceOf[_from].sub(_value);\n', '            balanceOf[_to] = balanceOf[_to].add(_value);\n', '            emit Transfer(_from, _to, _value);\n', '            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens\n', '         *\n', '         * Send `_value` tokens to `_to` from your account\n', '         *\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transfer(address _to, uint256 _value) public returns (bool success) {\n', '            _transfer(msg.sender, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Transfer tokens from other address\n', '         *\n', '         * Send `_value` tokens to `_to` in behalf of `_from`\n', '         *\n', '         * @param _from The address of the sender\n', '         * @param _to The address of the recipient\n', '         * @param _value the amount to send\n', '         */\n', '        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(_value <= allowance[_from][msg.sender]);    \n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '            _transfer(_from, _to, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         */\n', '        function approve(address _spender, uint256 _value) public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            allowance[msg.sender][_spender] = _value;\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Set allowance for other address and notify\n', '         *\n', '         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n', '         *\n', '         * @param _spender The address authorized to spend\n', '         * @param _value the max amount they can spend\n', '         * @param _extraData some extra information to send to the approved contract\n', '         */\n', '        function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n', '            public\n', '            returns (bool success) {\n', '            require(!safeguard);\n', '            tokenRecipient spender = tokenRecipient(_spender);\n', '            if (approve(_spender, _value)) {\n', '                spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n', '                return true;\n', '            }\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly\n', '         *\n', '         * @param _value the amount of tokens to burn\n', '         */\n', '        function burn(uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[msg.sender] >= _value);   \n', '            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            \n', '            totalSupply = totalSupply.sub(_value);                      \n', '            emit Burn(msg.sender, _value);\n', '            return true;\n', '        }\n', '    \n', '        /**\n', '         * Destroy tokens from other account\n', '         *\n', '         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '         *\n', '         * @param _from the address of the sender\n', '         * @param _value the amount of tokens to burn\n', '         */\n', '        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '            require(!safeguard);\n', '            require(balanceOf[_from] >= _value);                \n', '            require(_value <= allowance[_from][msg.sender]);    \n', '            balanceOf[_from] = balanceOf[_from].sub(_value);                         \n', '            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             \n', '            totalSupply = totalSupply.sub(_value);                              \n', '            emit  Burn(_from, _value);\n', '            return true;\n', '        }\n', '        \n', '    }\n', '    \n', '//************************************************************************//\n', '//---------------------  SE7EN MAIN CODE STARTS HERE ---------------------//\n', '//************************************************************************//\n', '    \n', '    contract se7en is owned, TokenERC20 {\n', '        \n', '        /*************************************/\n', '        /*  User whitelisting functionality  */\n', '        /*************************************/\n', '        bool public whitelistingStatus = false;\n', '        mapping (address => bool) public whitelisted;\n', '        \n', '        /**\n', '         * Change whitelisting status on or off\n', '         *\n', '         * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.\n', '         */\n', '        function changeWhitelistingStatus() onlyOwner public{\n', '            if (whitelistingStatus == false){\n', '                whitelistingStatus = true;\n', '            }\n', '            else{\n', '                whitelistingStatus = false;    \n', '            }\n', '        }\n', '        \n', '        /**\n', '         * Whitelist any user address - only Owner can do this\n', '         *\n', '         * It will add user address to whitelisted mapping\n', '         */\n', '        function whitelistUser(address userAddress) onlyOwner public{\n', '            require(whitelistingStatus == true);\n', '            require(userAddress != address(0x0));\n', '            whitelisted[userAddress] = true;\n', '        }\n', '        \n', '        /**\n', '         * Whitelist Many user address at once - only Owner can do this\n', '         * maximum of 150 addresses to prevent block gas limit max-out and DoS attack\n', '         * this will add user address in whitelisted mapping\n', '         */\n', '        function whitelistManyUsers(address[] memory userAddresses) onlyOwner public{\n', '            require(whitelistingStatus == true);\n', '            uint256 addressCount = userAddresses.length;\n', '            require(addressCount <= 150);\n', '            for(uint256 i = 0; i < addressCount; i++){\n', '                require(userAddresses[i] != address(0x0));\n', '                whitelisted[userAddresses[i]] = true;\n', '            }\n', '        }\n', '        \n', '        \n', '        \n', '        /********************************/\n', '        /* Code for the ERC20 S7N Token */\n', '        /********************************/\n', '    \n', '        /* Public variables of the token */\n', '        string private tokenName = "se7en";\n', '        string private tokenSymbol = "S7N";\n', '        uint256 private initialSupply = 74243687134;\n', '        uint256 private allocatedForICO = 7424368713;\n', '        \n', '\n', '        mapping (address => bool) public frozenAccount;\n', '        \n', '        event FrozenFunds(address target, bool frozen);\n', '    \n', '        constructor () TokenERC20(initialSupply, allocatedForICO, tokenName, tokenSymbol) public {}\n', '\n', '        function _transfer(address _from, address _to, uint _value) internal {\n', '            require(!safeguard);\n', '            require (_to != address(0x0));                      \n', '            require (balanceOf[_from] >= _value);               \n', '            require (balanceOf[_to].add(_value) >= balanceOf[_to]); \n', '            require(!frozenAccount[_from]);                     \n', '            require(!frozenAccount[_to]);                       \n', '            balanceOf[_from] = balanceOf[_from].sub(_value);   \n', '            balanceOf[_to] = balanceOf[_to].add(_value);        \n', '            emit Transfer(_from, _to, _value);\n', '        }\n', '        \n', '        /// @notice Create `mintedAmount` tokens and send it to `target`\n', '        /// @param target Address to receive the tokens\n', '        /// @param mintedAmount the amount of tokens it will receive\n', '        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '            balanceOf[target] = balanceOf[target].add(mintedAmount);\n', '            totalSupply = totalSupply.add(mintedAmount);\n', '            emit Transfer(address(0x0), address(this), mintedAmount);\n', '            emit Transfer(address(this), target, mintedAmount);\n', '        }\n', '\n', '        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '        /// @param target Address to be frozen\n', '        /// @param freeze either to freeze it or not\n', '        function freezeAccount(address target, bool freeze) onlyOwner public {\n', '                frozenAccount[target] = freeze;\n', '            emit  FrozenFunds(target, freeze);\n', '        }\n', '\n', '        /******************************/\n', '        /* Code for the S7N Crowdsale */\n', '        /******************************/\n', '        \n', '        uint256 public datePreSale   = 1544943600 ;      // 16 Dec 2018 07:00:00 - GMT\n', '        uint256 public dateIcoPhase1 = 1546326000 ;      // 01 Jan 2019 07:00:00 - GMT\n', '        uint256 public dateIcoPhase2 = 1547622000 ;      // 16 Jan 2019 07:00:00 - GMT\n', '        uint256 public dateIcoPhase3 = 1549004400 ;      // 01 Feb 2019 07:00:00 - GMT\n', '        uint256 public dateIcoEnd    = 1551398399 ;      // 28 Feb 2019 23:59:59 - GMT\n', '        uint256 public exchangeRate  = 10000;             // 1 ETH = 10000 Tokens\n', '        uint256 public tokensSold    = 0;                // how many tokens sold through crowdsale              \n', '  \n', '        function () payable external {\n', '            require(!safeguard);\n', '            require(!frozenAccount[msg.sender]);\n', '            require(datePreSale < now && dateIcoEnd > now);\n', '            if(whitelistingStatus == true) { require(whitelisted[msg.sender]); }\n', '            if(datePreSale < now && dateIcoPhase1 > now){ require(msg.value >= (0.50 ether)); }\n', '            // calculate token amount to be sent\n', '            uint256 token = msg.value.mul(exchangeRate);                        \n', '            uint256 finalTokens = token.add(calculatePurchaseBonus(token));     \n', '            tokensSold = tokensSold.add(finalTokens);\n', '            _transfer(address(this), msg.sender, finalTokens);                  \n', '            forwardEherToOwner();                                               \n', '        }\n', '\n', '\n', '        function calculatePurchaseBonus(uint256 token) internal view returns(uint256){\n', '            if(datePreSale < now && now < dateIcoPhase1 ){\n', '                return token.mul(50).div(100);  //50% bonus in pre sale\n', '            }\n', '            else if(dateIcoPhase1 < now && now < dateIcoPhase2 ){\n', '                return token.mul(25).div(100);  //25% bonus in ICO phase 1\n', '            }\n', '            else if(dateIcoPhase2 < now && now < dateIcoPhase3 ){\n', '                return token.mul(10).div(100);  //10% bonus in ICO phase 2\n', '            }\n', '            else if(dateIcoPhase3 < now && now < dateIcoEnd ){\n', '                return token.mul(5).div(100);  //5% bonus in ICO phase 3\n', '            }\n', '            else{\n', '                return 0;                      //NO BONUS\n', '            }\n', '        }\n', '\n', '        function forwardEherToOwner() internal {\n', '            address(owner).transfer(msg.value); \n', '        }\n', '\n', '        function updateCrowdsale(uint256 datePreSaleNew, uint256 dateIcoPhase1New, uint256 dateIcoPhase2New, uint256 dateIcoPhase3New, uint256 dateIcoEndNew) onlyOwner public {\n', '            require(datePreSaleNew < dateIcoPhase1New && dateIcoPhase1New < dateIcoPhase2New);\n', '            require(dateIcoPhase2New < dateIcoPhase3New && dateIcoPhase3New < dateIcoEnd);\n', '            datePreSale   = datePreSaleNew;\n', '            dateIcoPhase1 = dateIcoPhase1New;\n', '            dateIcoPhase2 = dateIcoPhase2New;\n', '            dateIcoPhase3 = dateIcoPhase3New;\n', '            dateIcoEnd    = dateIcoEndNew;\n', '        }\n', '        \n', '\n', '        function stopICO() onlyOwner public{\n', '            dateIcoEnd = 0;\n', '        }\n', '        \n', '\n', '        function icoStatus() public view returns(string memory){\n', '            if(datePreSale > now ){\n', '                return "Pre sale has not started yet";\n', '            }\n', '            else if(datePreSale < now && now < dateIcoPhase1){\n', '                return "Pre sale is running";\n', '            }\n', '            else if(dateIcoPhase1 < now && now < dateIcoPhase2){\n', '                return "ICO phase 1 is running";\n', '            }\n', '            else if(dateIcoPhase2 < now && now < dateIcoPhase3){\n', '                return "ICO phase 2 is running";\n', '            }\n', '            else if(dateIcoPhase3 < now && now < dateIcoEnd){\n', '                return "ICO phase 3 is running";\n', '            }\n', '            else{\n', '                return "ICO is not active";\n', '            }\n', '        }\n', '        \n', '        function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\n', '            exchangeRate=newExchangeRate;\n', '        }\n', '        \n', '        function manualWithdrawToken(uint256 _amount) onlyOwner public {\n', '            uint256 tokenAmount = _amount.mul(1 ether);\n', '            _transfer(address(this), msg.sender, tokenAmount);\n', '        }\n', '          \n', '        function manualWithdrawEther()onlyOwner public{\n', '            address(owner).transfer(address(this).balance);\n', '        }\n', '        \n', '        function destructContract()onlyOwner public{\n', '            selfdestruct(owner);\n', '        }\n', '        \n', '        /**\n', '         * Change safeguard status on or off\n', '         *\n', '         * When safeguard is true, all the non-owner functions are unavailable.\n', '         * When safeguard is false, all the functions will resume!\n', '         */\n', '        function changeSafeguardStatus() onlyOwner public{\n', '            if (safeguard == false){\n', '                safeguard = true;\n', '            }\n', '            else{\n', '                safeguard = false;    \n', '            }\n', '        }\n', '        \n', '        \n', '        /********************************/\n', '        /* Code for the Air drop of S7N */\n', '        /********************************/\n', '        \n', '        /**\n', '         * Run an Air-Drop\n', '         *\n', '         * It requires an array of all the addresses and amount of tokens to distribute\n', '         * It will only process first 150 recipients. That limit is fixed to prevent gas limit\n', '         */\n', '        function airdrop(address[] memory recipients,uint tokenAmount) public onlyOwner {\n', '            uint256 addressCount = recipients.length;\n', '            require(addressCount <= 150);\n', '            for(uint i = 0; i < addressCount; i++)\n', '            {\n', '                \n', '                  _transfer(address(this), recipients[i], tokenAmount.mul(1 ether));\n', '            }\n', '        }\n', '}']