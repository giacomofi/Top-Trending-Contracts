['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Administratable is Ownable {\n', '    mapping (address => bool) admins;\n', '\n', '    event AdminAdded(address indexed _admin);\n', '\n', '    event AdminRemoved(address indexed _admin);\n', '\n', '    modifier onlyAdmin() {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function addAdmin(address _addressToAdd) external onlyOwner {\n', '        require(_addressToAdd != address(0));\n', '        admins[_addressToAdd] = true;\n', '\n', '        emit AdminAdded(_addressToAdd);\n', '    }\n', '\n', '    function removeAdmin(address _addressToRemove) external onlyOwner {\n', '        require(_addressToRemove != address(0));\n', '        admins[_addressToRemove] = false;\n', '\n', '        emit AdminRemoved(_addressToRemove);\n', '    }\n', '}\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', 'contract ERC865 is ERC20 {\n', '\n', '    function transferPreSigned(\n', '        bytes _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function approvePreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function increaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function decreaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function transferFromPreSigned(\n', '        bytes _signature,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function revokeSignature(bytes _signature)\n', '    public\n', '    returns (bool);\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20  {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  mapping(address => uint256) public balances;\n', '\n', '  uint256 _totalSupply;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC865Token is ERC865, StandardToken {\n', '\n', '    /* Nonces of transfers performed */\n', '    mapping(bytes => bool) nonces;\n', '\n', '    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n', '    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n', '    event SignatureRevoked(bytes signature, address indexed from);\n', '\n', '    /**\n', '     * @notice Submit a presigned transfer\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferPreSigned(\n', '        bytes _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(!nonces[_signature]);\n', '\n', '        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n', '\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '\n', '        nonces[_signature] = true;\n', '\n', '        balances[from] = balances[from].sub(_value).sub(_fee);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Transfer(from, _to, _value);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Submit a presigned approval\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _value uint256 The amount of tokens to allow.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function approvePreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0));\n', '        require(!nonces[_signature]);\n', '\n', '        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '\n', '        nonces[_signature] = true;\n', '\n', '        allowed[from][_spender] = _value;\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Approval(from, _spender, _value);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Increase the amount of tokens that an owner allowed to a spender.\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function increaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0));\n', '        require(!nonces[_signature]);\n', '\n', '        bytes32 hashedTx = increaseApprovalPreSignedHashing(address(this), _spender, _addedValue, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '\n', '        nonces[_signature] = true;\n', '\n', '        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Approval(from, _spender, allowed[from][_spender]);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Decrease the amount of tokens that an owner allowed to a spender.\n', '     * @param _signature bytes The signature, issued by the owner\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function decreaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0));\n', '        require(!nonces[_signature]);\n', '\n', '        bytes32 hashedTx = decreaseApprovalPreSignedHashing(address(this), _spender, _subtractedValue, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '\n', '        nonces[_signature] = true;\n', '\n', '        uint oldValue = allowed[from][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[from][_spender] = 0;\n', '        } else {\n', '            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Approval(from, _spender, _subtractedValue);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from one address to another\n', '     * @param _signature bytes The signature, issued by the spender.\n', '     * @param _from address The address which you want to send tokens from.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferFromPreSigned(\n', '        bytes _signature,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(!nonces[_signature]);\n', '\n', '        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n', '\n', '        address spender = recover(hashedTx, _signature);\n', '        require(spender != address(0));\n', '\n', '        nonces[_signature] = true;\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n', '\n', '        balances[spender] = balances[spender].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '        nonces[_signature] = true;\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        emit Transfer(spender, msg.sender, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Revote previously approved signature\n', '     * @param  _signature bytes The signature to revoke\n', '     * @return bool  Returns true if revocation was successful\n', '     */\n', '    function revokeSignature(bytes _signature) public returns (bool) {\n', '        require(!nonces[_signature]);\n', '        nonces[_signature] = true;\n', '\n', '        emit SignatureRevoked(_signature, msg.sender);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by transferPreSigned\n', '     * @param _token address The address of the token.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferPreSignedHashing(\n', '        address _token,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "48664c16": transferPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0x48664c16), _token, _to, _value, _fee, _nonce);\n', '    }\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by approvePreSigned\n', '     * @param _token address The address of the token\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _value uint256 The amount of tokens to allow.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function approvePreSignedHashing(\n', '        address _token,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "f7ac9c2e": approvePreSignedHashing(address,address,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0xf7ac9c2e), _token, _spender, _value, _fee, _nonce);\n', '    }\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by increaseApprovalPreSigned\n', '     * @param _token address The address of the token\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function increaseApprovalPreSignedHashing(\n', '        address _token,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "a45f71ff": increaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0xa45f71ff), _token, _spender, _addedValue, _fee, _nonce);\n', '    }\n', '\n', '     /**\n', '      * @notice Hash (keccak256) of the payload used by decreaseApprovalPreSigned\n', '      * @param _token address The address of the token\n', '      * @param _spender address The address which will spend the funds.\n', '      * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n', '      * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '      * @param _nonce uint256 Presigned transaction number.\n', '      */\n', '    function decreaseApprovalPreSignedHashing(\n', '        address _token,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "59388d78": decreaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0x59388d78), _token, _spender, _subtractedValue, _fee, _nonce);\n', '    }\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by transferFromPreSigned\n', '     * @param _token address The address of the token\n', '     * @param _from address The address which you want to send tokens from.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferFromPreSignedHashing(\n', '        address _token,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "b7656dc5": transferFromPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0xb7656dc5), _token, _from, _to, _value, _fee, _nonce);\n', '    }\n', '\n', '    /**\n', '     * @notice Recover signer address from a message by using his signature\n', '     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '     */\n', '    function recover(bytes32 hash, bytes sig) public pure returns (address) {\n', '      bytes32 r;\n', '      bytes32 s;\n', '      uint8 v;\n', '\n', '      //Check the signature length\n', '      if (sig.length != 65) {\n', '        return (address(0));\n', '      }\n', '\n', '      // Divide the signature in r, s and v variables\n', '      assembly {\n', '        r := mload(add(sig, 32))\n', '        s := mload(add(sig, 64))\n', '        v := byte(0, mload(add(sig, 96)))\n', '      }\n', '\n', '      // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '      if (v < 27) {\n', '        v += 27;\n', '      }\n', '\n', '      // If the version is correct return the signer address\n', '      if (v != 27 && v != 28) {\n', '        return (address(0));\n', '      } else {\n', '        return ecrecover(hash, v, r, s);\n', '      }\n', '    }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Paused();\n', '    event Unpaused();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Paused();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpaused();\n', '    }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  // Amount of token sold in wei\n', '  uint256 public tokenWeiSold;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokenWeiSold = tokenWeiSold.add(tokens);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) pure internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Nu mber of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) pure internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', 'contract AllowanceCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  address public tokenWallet;\n', '\n', '  /**\n', '   * @dev Constructor, takes token wallet address.\n', '   * @param _tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n', '   */\n', '  constructor(address _tokenWallet) public {\n', '    require(_tokenWallet != address(0));\n', '    tokenWallet = _tokenWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks the amount of tokens left in the allowance.\n', '   * @return Amount of tokens left in the allowance\n', '   */\n', '  function remainingTokens() public view returns (uint256) {\n', '    return token.allowance(tokenWallet, this);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides parent behavior by transferring tokens from wallet.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Amount of tokens purchased\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transferFrom(tokenWallet, _beneficiary, _tokenAmount);\n', '  }\n', '}\n', 'contract CappedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public cap;\n', '\n', '    /**\n', '    * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '    * @param _cap Max amount of wei to be contributed\n', '    */\n', '    constructor(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks whether the cap has been reached.\n', '    * @return Whether the cap was reached\n', '    */\n', '    function capReached() public view returns (bool) {\n', '        return weiRaised >= cap;\n', '    }\n', '\n', '    /**\n', '    * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '    * @param _beneficiary Token purchaser\n', '    * @param _weiAmount Amount of wei contributed\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(weiRaised.add(_weiAmount) <= cap);\n', '    }\n', '\n', '}\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', 'contract WhitelistedCrowdsale is Crowdsale, Administratable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * Event for logging adding to whitelist\n', '   * @param _address the address to add to the whitelist\n', '   */\n', '  event AddedToWhitelist(address indexed _address);\n', '\n', '  /**\n', '   * Event for logging removing from whitelist\n', '   * @param _address the address to remove from the whitelist\n', '   */\n', '  event RemovedFromWhitelist(address indexed _address);\n', '\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyAdmin {\n', '    whitelist[_beneficiary] = true;\n', '    emit AddedToWhitelist(_beneficiary);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyAdmin {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyAdmin {\n', '    whitelist[_beneficiary] = false;\n', '    emit RemovedFromWhitelist(_beneficiary);\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract PostDeliveryCrowdsale is TimedCrowdsale, Administratable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public balances;\n', '  /**\n', '   * Event for logging when token sale tokens are withdrawn\n', '   * @param _address the address to withdraw tokens for\n', '   * @param _amount the amount withdrawn for this address\n', '   */\n', '  event TokensWithdrawn(address indexed _address, uint256 _amount);\n', '\n', '  /**\n', '   * @dev Withdraw tokens only after crowdsale ends.\n', '   */\n', '  function withdrawTokens(address _beneficiary) public onlyAdmin {\n', '    require(hasClosed());\n', '    uint256 amount = balances[_beneficiary];\n', '    require(amount > 0);\n', '    balances[_beneficiary] = 0;\n', '    _deliverTokens(_beneficiary, amount);\n', '    emit TokensWithdrawn(_beneficiary, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides parent by storing balances instead of issuing tokens right away.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Amount of tokens purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '  }\n', '\n', '  function getBalance(address _beneficiary) public returns (uint256) {\n', '      return balances[_beneficiary];\n', '  }\n', '\n', '}\n', '\n', 'contract MultiRoundCrowdsale is  Crowdsale, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct SaleRound {\n', '        uint256 start;\n', '        uint256 end;\n', '        uint256 rate;\n', '        uint256 roundCap;\n', '        uint256 minPurchase;\n', '    }\n', '\n', '    SaleRound seedRound;\n', '    SaleRound presale;\n', '    SaleRound crowdsaleWeek1;\n', '    SaleRound crowdsaleWeek2;\n', '    SaleRound crowdsaleWeek3;\n', '    SaleRound crowdsaleWeek4;\n', '\n', '    bool public saleRoundsSet = false;\n', '\n', '    /**\n', '     * Sets the parameters for each round.\n', '     *\n', '     * Each round is defined by an array, with each field mapping to a field in the SaleRound struct.\n', '     * The array elements are as follows:\n', '     * array[0]: start time of the round\n', '     * array[1]: end time of the round\n', '     * array[2]: the exchange rate of this round. i.e number of TIP per ETH\n', '     * array[3]: The cumulative cap of this round\n', '     * array[4]: Minimum purchase of this round\n', '     *\n', '     * @param _seedRound [description]\n', '     * @param _presale [description]\n', '     * @param _crowdsaleWeek1 [description]\n', '     * @param _crowdsaleWeek2 [description]\n', '     * @param _crowdsaleWeek3 [description]\n', '     * @param _crowdsaleWeek4 [description]\n', '     */\n', '    function setTokenSaleRounds(uint256[5] _seedRound, uint256[5] _presale, uint256[5] _crowdsaleWeek1, uint256[5] _crowdsaleWeek2, uint256[5] _crowdsaleWeek3, uint256[5] _crowdsaleWeek4) external onlyOwner returns (bool) {\n', '        // This function can only be called once\n', '        require(!saleRoundsSet);\n', '\n', '        // Check that each round end time is after the start time\n', '        require(_seedRound[0] < _seedRound[1]);\n', '        require(_presale[0] < _presale[1]);\n', '        require(_crowdsaleWeek1[0] < _crowdsaleWeek1[1]);\n', '        require(_crowdsaleWeek2[0] < _crowdsaleWeek2[1]);\n', '        require(_crowdsaleWeek3[0] < _crowdsaleWeek3[1]);\n', '        require(_crowdsaleWeek4[0] < _crowdsaleWeek4[1]);\n', '\n', '        // Check that each round ends before the next begins\n', '        require(_seedRound[1] < _presale[0]);\n', '        require(_presale[1] < _crowdsaleWeek1[0]);\n', '        require(_crowdsaleWeek1[1] < _crowdsaleWeek2[0]);\n', '        require(_crowdsaleWeek2[1] < _crowdsaleWeek3[0]);\n', '        require(_crowdsaleWeek3[1] < _crowdsaleWeek4[0]);\n', '\n', '        seedRound      = SaleRound(_seedRound[0], _seedRound[1], _seedRound[2], _seedRound[3], _seedRound[4]);\n', '        presale        = SaleRound(_presale[0], _presale[1], _presale[2], _presale[3], _presale[4]);\n', '        crowdsaleWeek1 = SaleRound(_crowdsaleWeek1[0], _crowdsaleWeek1[1], _crowdsaleWeek1[2], _crowdsaleWeek1[3], _crowdsaleWeek1[4]);\n', '        crowdsaleWeek2 = SaleRound(_crowdsaleWeek2[0], _crowdsaleWeek2[1], _crowdsaleWeek2[2], _crowdsaleWeek2[3], _crowdsaleWeek2[4]);\n', '        crowdsaleWeek3 = SaleRound(_crowdsaleWeek3[0], _crowdsaleWeek3[1], _crowdsaleWeek3[2], _crowdsaleWeek3[3], _crowdsaleWeek3[4]);\n', '        crowdsaleWeek4 = SaleRound(_crowdsaleWeek4[0], _crowdsaleWeek4[1], _crowdsaleWeek4[2], _crowdsaleWeek4[3], _crowdsaleWeek4[4]);\n', '\n', '        saleRoundsSet = true;\n', '        return saleRoundsSet;\n', '    }\n', '\n', '    function getCurrentRound() internal view returns (SaleRound) {\n', '        require(saleRoundsSet);\n', '\n', '        uint256 currentTime = block.timestamp;\n', '        if (currentTime > seedRound.start && currentTime <= seedRound.end) {\n', '            return seedRound;\n', '        } else if (currentTime > presale.start && currentTime <= presale.end) {\n', '            return presale;\n', '        } else if (currentTime > crowdsaleWeek1.start && currentTime <= crowdsaleWeek1.end) {\n', '            return crowdsaleWeek1;\n', '        } else if (currentTime > crowdsaleWeek2.start && currentTime <= crowdsaleWeek2.end) {\n', '            return crowdsaleWeek2;\n', '        } else if (currentTime > crowdsaleWeek3.start && currentTime <= crowdsaleWeek3.end) {\n', '            return crowdsaleWeek3;\n', '        } else if (currentTime > crowdsaleWeek4.start && currentTime <= crowdsaleWeek4.end) {\n', '            return crowdsaleWeek4;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function getCurrentRate() public view returns (uint256) {\n', '        require(saleRoundsSet);\n', '        SaleRound memory currentRound = getCurrentRound();\n', '        return currentRound.rate;\n', '    }\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        require(_weiAmount != 0);\n', '        uint256 currentRate = getCurrentRate();\n', '        require(currentRate != 0);\n', '\n', '        return currentRate.mul(_weiAmount);\n', '    }\n', '}\n', '\n', 'contract TipToken is ERC865Token, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant TOTAL_SUPPLY = 10 ** 9;\n', '\n', '    string public constant name = "Tip Token";\n', '    string public constant symbol = "TIP";\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping (address => string) aliases;\n', '    mapping (string => address) addresses;\n', '\n', '    /**\n', '     * Constructor\n', '     */\n', '    constructor() public {\n', '        _totalSupply = TOTAL_SUPPLY * (10**uint256(decimals));\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    /**\n', '     * Returns the available supple (total supply minus tokens held by owner)\n', '     */\n', '    function availableSupply() public view returns (uint256) {\n', '        return _totalSupply.sub(balances[owner]).sub(balances[address(0)]);\n', '    }\n', '\n', '    /**\n', '     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n', '     * from the token owner&#39;s account. The `spender` contract function\n', '     * `receiveApproval(...)` is then executed\n', '     */\n', '    function approveAndCall(address spender, uint256 tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Don&#39;t accept ETH.\n', '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * Owner can transfer out any accidentally sent ERC20 tokens\n', '     */\n', '    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    /**\n', '     * Sets the alias for the msg.sender&#39;s address.\n', '     * @param alias the alias to attach to an address\n', '     */\n', '    function setAlias(string alias) public {\n', '        aliases[msg.sender] = alias;\n', '        addresses[alias] = msg.sender;\n', '    }\n', '}\n', '\n', 'contract TipTokenCrowdsale is MultiRoundCrowdsale, CappedCrowdsale, WhitelistedCrowdsale, AllowanceCrowdsale, PostDeliveryCrowdsale, Pausable {\n', '\n', '    /**\n', '     * Contract name\n', '     * String name - the name of the contract\n', '     */\n', '    string public constant name = "Tip Token Crowdsale";\n', '\n', '\n', '    /**\n', '     * @param _vault Address where collected funds will be forwarded to\n', '     * @param _tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n', '     * @param _cap the maximum number of tokens to be collected in the sale\n', '     * @param _token Address of the token being sold\n', '     */\n', '    constructor(\n', '        ERC20 _token,\n', '        address _tokenWallet,\n', '        address _vault,\n', '        uint256 _cap,\n', '        uint256 _start, uint256 _end, uint256 _baseRate\n', '        ) public\n', '        Crowdsale(_baseRate, _vault, _token)\n', '        CappedCrowdsale(_cap)\n', '        TimedCrowdsale(_start, _end)\n', '        PostDeliveryCrowdsale()\n', '        WhitelistedCrowdsale()\n', '        AllowanceCrowdsale(_tokenWallet)\n', '        MultiRoundCrowdsale()\n', '        {\n', '    }\n', '\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal whenNotPaused() {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '\n', '        SaleRound memory currentRound = getCurrentRound();\n', '        require(weiRaised.add(_weiAmount) <= currentRound.roundCap);\n', '        require(balances[_beneficiary].add(_weiAmount) >= currentRound.minPurchase);\n', '    }\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return MultiRoundCrowdsale._getTokenAmount(_weiAmount);\n', '    }\n', '\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        AllowanceCrowdsale._deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', '* @title SafeMath\n', '* @dev Math operations with safety checks that throw on error\n', '*/\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '    /**\n', '    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '    * account.\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '    * @param newOwner The address to transfer ownership to.\n', '    */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract Administratable is Ownable {\n', '    mapping (address => bool) admins;\n', '\n', '    event AdminAdded(address indexed _admin);\n', '\n', '    event AdminRemoved(address indexed _admin);\n', '\n', '    modifier onlyAdmin() {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function addAdmin(address _addressToAdd) external onlyOwner {\n', '        require(_addressToAdd != address(0));\n', '        admins[_addressToAdd] = true;\n', '\n', '        emit AdminAdded(_addressToAdd);\n', '    }\n', '\n', '    function removeAdmin(address _addressToRemove) external onlyOwner {\n', '        require(_addressToRemove != address(0));\n', '        admins[_addressToRemove] = false;\n', '\n', '        emit AdminRemoved(_addressToRemove);\n', '    }\n', '}\n', 'contract ApproveAndCallFallBack {\n', '    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n', '}\n', '\n', 'contract ERC20 {\n', '    function totalSupply() public constant returns (uint);\n', '    function balanceOf(address tokenOwner) public constant returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n', '    function transfer(address to, uint tokens) public returns (bool success);\n', '    function approve(address spender, uint tokens) public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', 'contract ERC865 is ERC20 {\n', '\n', '    function transferPreSigned(\n', '        bytes _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function approvePreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function increaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function decreaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function transferFromPreSigned(\n', '        bytes _signature,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool);\n', '\n', '    function revokeSignature(bytes _signature)\n', '    public\n', '    returns (bool);\n', '\n', '}\n', '\n', 'contract StandardToken is ERC20  {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  mapping(address => uint256) public balances;\n', '\n', '  uint256 _totalSupply;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC865Token is ERC865, StandardToken {\n', '\n', '    /* Nonces of transfers performed */\n', '    mapping(bytes => bool) nonces;\n', '\n', '    event TransferPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n', '    event ApprovalPreSigned(address indexed from, address indexed to, address indexed delegate, uint256 amount, uint256 fee);\n', '    event SignatureRevoked(bytes signature, address indexed from);\n', '\n', '    /**\n', '     * @notice Submit a presigned transfer\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferPreSigned(\n', '        bytes _signature,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(!nonces[_signature]);\n', '\n', '        bytes32 hashedTx = transferPreSignedHashing(address(this), _to, _value, _fee, _nonce);\n', '\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '\n', '        nonces[_signature] = true;\n', '\n', '        balances[from] = balances[from].sub(_value).sub(_fee);\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Transfer(from, _to, _value);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit TransferPreSigned(from, _to, msg.sender, _value, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Submit a presigned approval\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _value uint256 The amount of tokens to allow.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function approvePreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0));\n', '        require(!nonces[_signature]);\n', '\n', '        bytes32 hashedTx = approvePreSignedHashing(address(this), _spender, _value, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '\n', '        nonces[_signature] = true;\n', '\n', '        allowed[from][_spender] = _value;\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Approval(from, _spender, _value);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, _value, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Increase the amount of tokens that an owner allowed to a spender.\n', '     * @param _signature bytes The signature, issued by the owner.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function increaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0));\n', '        require(!nonces[_signature]);\n', '\n', '        bytes32 hashedTx = increaseApprovalPreSignedHashing(address(this), _spender, _addedValue, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '\n', '        nonces[_signature] = true;\n', '\n', '        allowed[from][_spender] = allowed[from][_spender].add(_addedValue);\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Approval(from, _spender, allowed[from][_spender]);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Decrease the amount of tokens that an owner allowed to a spender.\n', '     * @param _signature bytes The signature, issued by the owner\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function decreaseApprovalPreSigned(\n', '        bytes _signature,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_spender != address(0));\n', '        require(!nonces[_signature]);\n', '\n', '        bytes32 hashedTx = decreaseApprovalPreSignedHashing(address(this), _spender, _subtractedValue, _fee, _nonce);\n', '        address from = recover(hashedTx, _signature);\n', '        require(from != address(0));\n', '\n', '        nonces[_signature] = true;\n', '\n', '        uint oldValue = allowed[from][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[from][_spender] = 0;\n', '        } else {\n', '            allowed[from][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        balances[from] = balances[from].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '\n', '        emit Approval(from, _spender, _subtractedValue);\n', '        emit Transfer(from, msg.sender, _fee);\n', '        emit ApprovalPreSigned(from, _spender, msg.sender, allowed[from][_spender], _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer tokens from one address to another\n', '     * @param _signature bytes The signature, issued by the spender.\n', '     * @param _from address The address which you want to send tokens from.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferFromPreSigned(\n', '        bytes _signature,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(_to != address(0));\n', '        require(!nonces[_signature]);\n', '\n', '        bytes32 hashedTx = transferFromPreSignedHashing(address(this), _from, _to, _value, _fee, _nonce);\n', '\n', '        address spender = recover(hashedTx, _signature);\n', '        require(spender != address(0));\n', '\n', '        nonces[_signature] = true;\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][spender] = allowed[_from][spender].sub(_value);\n', '\n', '        balances[spender] = balances[spender].sub(_fee);\n', '        balances[msg.sender] = balances[msg.sender].add(_fee);\n', '        nonces[_signature] = true;\n', '\n', '        emit Transfer(_from, _to, _value);\n', '        emit Transfer(spender, msg.sender, _fee);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * Revote previously approved signature\n', '     * @param  _signature bytes The signature to revoke\n', '     * @return bool  Returns true if revocation was successful\n', '     */\n', '    function revokeSignature(bytes _signature) public returns (bool) {\n', '        require(!nonces[_signature]);\n', '        nonces[_signature] = true;\n', '\n', '        emit SignatureRevoked(_signature, msg.sender);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by transferPreSigned\n', '     * @param _token address The address of the token.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferPreSignedHashing(\n', '        address _token,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "48664c16": transferPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0x48664c16), _token, _to, _value, _fee, _nonce);\n', '    }\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by approvePreSigned\n', '     * @param _token address The address of the token\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _value uint256 The amount of tokens to allow.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function approvePreSignedHashing(\n', '        address _token,\n', '        address _spender,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "f7ac9c2e": approvePreSignedHashing(address,address,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0xf7ac9c2e), _token, _spender, _value, _fee, _nonce);\n', '    }\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by increaseApprovalPreSigned\n', '     * @param _token address The address of the token\n', '     * @param _spender address The address which will spend the funds.\n', '     * @param _addedValue uint256 The amount of tokens to increase the allowance by.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function increaseApprovalPreSignedHashing(\n', '        address _token,\n', '        address _spender,\n', '        uint256 _addedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "a45f71ff": increaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0xa45f71ff), _token, _spender, _addedValue, _fee, _nonce);\n', '    }\n', '\n', '     /**\n', '      * @notice Hash (keccak256) of the payload used by decreaseApprovalPreSigned\n', '      * @param _token address The address of the token\n', '      * @param _spender address The address which will spend the funds.\n', '      * @param _subtractedValue uint256 The amount of tokens to decrease the allowance by.\n', '      * @param _fee uint256 The amount of tokens paid to msg.sender, by the owner.\n', '      * @param _nonce uint256 Presigned transaction number.\n', '      */\n', '    function decreaseApprovalPreSignedHashing(\n', '        address _token,\n', '        address _spender,\n', '        uint256 _subtractedValue,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "59388d78": decreaseApprovalPreSignedHashing(address,address,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0x59388d78), _token, _spender, _subtractedValue, _fee, _nonce);\n', '    }\n', '\n', '    /**\n', '     * @notice Hash (keccak256) of the payload used by transferFromPreSigned\n', '     * @param _token address The address of the token\n', '     * @param _from address The address which you want to send tokens from.\n', '     * @param _to address The address which you want to transfer to.\n', '     * @param _value uint256 The amount of tokens to be transferred.\n', '     * @param _fee uint256 The amount of tokens paid to msg.sender, by the spender.\n', '     * @param _nonce uint256 Presigned transaction number.\n', '     */\n', '    function transferFromPreSignedHashing(\n', '        address _token,\n', '        address _from,\n', '        address _to,\n', '        uint256 _value,\n', '        uint256 _fee,\n', '        uint256 _nonce\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        /* "b7656dc5": transferFromPreSignedHashing(address,address,address,uint256,uint256,uint256) */\n', '        return keccak256(bytes4(0xb7656dc5), _token, _from, _to, _value, _fee, _nonce);\n', '    }\n', '\n', '    /**\n', '     * @notice Recover signer address from a message by using his signature\n', '     * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.\n', '     * @param sig bytes signature, the signature is generated using web3.eth.sign()\n', '     */\n', '    function recover(bytes32 hash, bytes sig) public pure returns (address) {\n', '      bytes32 r;\n', '      bytes32 s;\n', '      uint8 v;\n', '\n', '      //Check the signature length\n', '      if (sig.length != 65) {\n', '        return (address(0));\n', '      }\n', '\n', '      // Divide the signature in r, s and v variables\n', '      assembly {\n', '        r := mload(add(sig, 32))\n', '        s := mload(add(sig, 64))\n', '        v := byte(0, mload(add(sig, 96)))\n', '      }\n', '\n', '      // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n', '      if (v < 27) {\n', '        v += 27;\n', '      }\n', '\n', '      // If the version is correct return the signer address\n', '      if (v != 27 && v != 28) {\n', '        return (address(0));\n', '      } else {\n', '        return ecrecover(hash, v, r, s);\n', '      }\n', '    }\n', '\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '    event Paused();\n', '    event Unpaused();\n', '\n', '    bool public paused = false;\n', '\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    */\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    */\n', '    modifier whenPaused() {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to pause, triggers stopped state\n', '    */\n', '    function pause() onlyOwner whenNotPaused public {\n', '        paused = true;\n', '        emit Paused();\n', '    }\n', '\n', '    /**\n', '    * @dev called by the owner to unpause, returns to normal state\n', '    */\n', '    function unpause() onlyOwner whenPaused public {\n', '        paused = false;\n', '        emit Unpaused();\n', '    }\n', '}\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20 public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  // Amount of token sold in wei\n', '  uint256 public tokenWeiSold;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    tokenWeiSold = tokenWeiSold.add(tokens);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) pure internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Nu mber of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) pure internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', 'contract AllowanceCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  address public tokenWallet;\n', '\n', '  /**\n', '   * @dev Constructor, takes token wallet address.\n', '   * @param _tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n', '   */\n', '  constructor(address _tokenWallet) public {\n', '    require(_tokenWallet != address(0));\n', '    tokenWallet = _tokenWallet;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks the amount of tokens left in the allowance.\n', '   * @return Amount of tokens left in the allowance\n', '   */\n', '  function remainingTokens() public view returns (uint256) {\n', '    return token.allowance(tokenWallet, this);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides parent behavior by transferring tokens from wallet.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Amount of tokens purchased\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transferFrom(tokenWallet, _beneficiary, _tokenAmount);\n', '  }\n', '}\n', 'contract CappedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public cap;\n', '\n', '    /**\n', '    * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '    * @param _cap Max amount of wei to be contributed\n', '    */\n', '    constructor(uint256 _cap) public {\n', '        require(_cap > 0);\n', '        cap = _cap;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks whether the cap has been reached.\n', '    * @return Whether the cap was reached\n', '    */\n', '    function capReached() public view returns (bool) {\n', '        return weiRaised >= cap;\n', '    }\n', '\n', '    /**\n', '    * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '    * @param _beneficiary Token purchaser\n', '    * @param _weiAmount Amount of wei contributed\n', '    */\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(weiRaised.add(_weiAmount) <= cap);\n', '    }\n', '\n', '}\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', 'contract WhitelistedCrowdsale is Crowdsale, Administratable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * Event for logging adding to whitelist\n', '   * @param _address the address to add to the whitelist\n', '   */\n', '  event AddedToWhitelist(address indexed _address);\n', '\n', '  /**\n', '   * Event for logging removing from whitelist\n', '   * @param _address the address to remove from the whitelist\n', '   */\n', '  event RemovedFromWhitelist(address indexed _address);\n', '\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyAdmin {\n', '    whitelist[_beneficiary] = true;\n', '    emit AddedToWhitelist(_beneficiary);\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyAdmin {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyAdmin {\n', '    whitelist[_beneficiary] = false;\n', '    emit RemovedFromWhitelist(_beneficiary);\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract PostDeliveryCrowdsale is TimedCrowdsale, Administratable {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) public balances;\n', '  /**\n', '   * Event for logging when token sale tokens are withdrawn\n', '   * @param _address the address to withdraw tokens for\n', '   * @param _amount the amount withdrawn for this address\n', '   */\n', '  event TokensWithdrawn(address indexed _address, uint256 _amount);\n', '\n', '  /**\n', '   * @dev Withdraw tokens only after crowdsale ends.\n', '   */\n', '  function withdrawTokens(address _beneficiary) public onlyAdmin {\n', '    require(hasClosed());\n', '    uint256 amount = balances[_beneficiary];\n', '    require(amount > 0);\n', '    balances[_beneficiary] = 0;\n', '    _deliverTokens(_beneficiary, amount);\n', '    emit TokensWithdrawn(_beneficiary, amount);\n', '  }\n', '\n', '  /**\n', '   * @dev Overrides parent by storing balances instead of issuing tokens right away.\n', '   * @param _beneficiary Token purchaser\n', '   * @param _tokenAmount Amount of tokens purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    balances[_beneficiary] = balances[_beneficiary].add(_tokenAmount);\n', '  }\n', '\n', '  function getBalance(address _beneficiary) public returns (uint256) {\n', '      return balances[_beneficiary];\n', '  }\n', '\n', '}\n', '\n', 'contract MultiRoundCrowdsale is  Crowdsale, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    struct SaleRound {\n', '        uint256 start;\n', '        uint256 end;\n', '        uint256 rate;\n', '        uint256 roundCap;\n', '        uint256 minPurchase;\n', '    }\n', '\n', '    SaleRound seedRound;\n', '    SaleRound presale;\n', '    SaleRound crowdsaleWeek1;\n', '    SaleRound crowdsaleWeek2;\n', '    SaleRound crowdsaleWeek3;\n', '    SaleRound crowdsaleWeek4;\n', '\n', '    bool public saleRoundsSet = false;\n', '\n', '    /**\n', '     * Sets the parameters for each round.\n', '     *\n', '     * Each round is defined by an array, with each field mapping to a field in the SaleRound struct.\n', '     * The array elements are as follows:\n', '     * array[0]: start time of the round\n', '     * array[1]: end time of the round\n', '     * array[2]: the exchange rate of this round. i.e number of TIP per ETH\n', '     * array[3]: The cumulative cap of this round\n', '     * array[4]: Minimum purchase of this round\n', '     *\n', '     * @param _seedRound [description]\n', '     * @param _presale [description]\n', '     * @param _crowdsaleWeek1 [description]\n', '     * @param _crowdsaleWeek2 [description]\n', '     * @param _crowdsaleWeek3 [description]\n', '     * @param _crowdsaleWeek4 [description]\n', '     */\n', '    function setTokenSaleRounds(uint256[5] _seedRound, uint256[5] _presale, uint256[5] _crowdsaleWeek1, uint256[5] _crowdsaleWeek2, uint256[5] _crowdsaleWeek3, uint256[5] _crowdsaleWeek4) external onlyOwner returns (bool) {\n', '        // This function can only be called once\n', '        require(!saleRoundsSet);\n', '\n', '        // Check that each round end time is after the start time\n', '        require(_seedRound[0] < _seedRound[1]);\n', '        require(_presale[0] < _presale[1]);\n', '        require(_crowdsaleWeek1[0] < _crowdsaleWeek1[1]);\n', '        require(_crowdsaleWeek2[0] < _crowdsaleWeek2[1]);\n', '        require(_crowdsaleWeek3[0] < _crowdsaleWeek3[1]);\n', '        require(_crowdsaleWeek4[0] < _crowdsaleWeek4[1]);\n', '\n', '        // Check that each round ends before the next begins\n', '        require(_seedRound[1] < _presale[0]);\n', '        require(_presale[1] < _crowdsaleWeek1[0]);\n', '        require(_crowdsaleWeek1[1] < _crowdsaleWeek2[0]);\n', '        require(_crowdsaleWeek2[1] < _crowdsaleWeek3[0]);\n', '        require(_crowdsaleWeek3[1] < _crowdsaleWeek4[0]);\n', '\n', '        seedRound      = SaleRound(_seedRound[0], _seedRound[1], _seedRound[2], _seedRound[3], _seedRound[4]);\n', '        presale        = SaleRound(_presale[0], _presale[1], _presale[2], _presale[3], _presale[4]);\n', '        crowdsaleWeek1 = SaleRound(_crowdsaleWeek1[0], _crowdsaleWeek1[1], _crowdsaleWeek1[2], _crowdsaleWeek1[3], _crowdsaleWeek1[4]);\n', '        crowdsaleWeek2 = SaleRound(_crowdsaleWeek2[0], _crowdsaleWeek2[1], _crowdsaleWeek2[2], _crowdsaleWeek2[3], _crowdsaleWeek2[4]);\n', '        crowdsaleWeek3 = SaleRound(_crowdsaleWeek3[0], _crowdsaleWeek3[1], _crowdsaleWeek3[2], _crowdsaleWeek3[3], _crowdsaleWeek3[4]);\n', '        crowdsaleWeek4 = SaleRound(_crowdsaleWeek4[0], _crowdsaleWeek4[1], _crowdsaleWeek4[2], _crowdsaleWeek4[3], _crowdsaleWeek4[4]);\n', '\n', '        saleRoundsSet = true;\n', '        return saleRoundsSet;\n', '    }\n', '\n', '    function getCurrentRound() internal view returns (SaleRound) {\n', '        require(saleRoundsSet);\n', '\n', '        uint256 currentTime = block.timestamp;\n', '        if (currentTime > seedRound.start && currentTime <= seedRound.end) {\n', '            return seedRound;\n', '        } else if (currentTime > presale.start && currentTime <= presale.end) {\n', '            return presale;\n', '        } else if (currentTime > crowdsaleWeek1.start && currentTime <= crowdsaleWeek1.end) {\n', '            return crowdsaleWeek1;\n', '        } else if (currentTime > crowdsaleWeek2.start && currentTime <= crowdsaleWeek2.end) {\n', '            return crowdsaleWeek2;\n', '        } else if (currentTime > crowdsaleWeek3.start && currentTime <= crowdsaleWeek3.end) {\n', '            return crowdsaleWeek3;\n', '        } else if (currentTime > crowdsaleWeek4.start && currentTime <= crowdsaleWeek4.end) {\n', '            return crowdsaleWeek4;\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    function getCurrentRate() public view returns (uint256) {\n', '        require(saleRoundsSet);\n', '        SaleRound memory currentRound = getCurrentRound();\n', '        return currentRound.rate;\n', '    }\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        require(_weiAmount != 0);\n', '        uint256 currentRate = getCurrentRate();\n', '        require(currentRate != 0);\n', '\n', '        return currentRate.mul(_weiAmount);\n', '    }\n', '}\n', '\n', 'contract TipToken is ERC865Token, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant TOTAL_SUPPLY = 10 ** 9;\n', '\n', '    string public constant name = "Tip Token";\n', '    string public constant symbol = "TIP";\n', '    uint8 public constant decimals = 18;\n', '\n', '    mapping (address => string) aliases;\n', '    mapping (string => address) addresses;\n', '\n', '    /**\n', '     * Constructor\n', '     */\n', '    constructor() public {\n', '        _totalSupply = TOTAL_SUPPLY * (10**uint256(decimals));\n', '        balances[owner] = _totalSupply;\n', '        emit Transfer(address(0), owner, _totalSupply);\n', '    }\n', '\n', '    /**\n', '     * Returns the available supple (total supply minus tokens held by owner)\n', '     */\n', '    function availableSupply() public view returns (uint256) {\n', '        return _totalSupply.sub(balances[owner]).sub(balances[address(0)]);\n', '    }\n', '\n', '    /**\n', '     * Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "     * from the token owner's account. The `spender` contract function\n", '     * `receiveApproval(...)` is then executed\n', '     */\n', '    function approveAndCall(address spender, uint256 tokens, bytes data) public returns (bool success) {\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender, spender, tokens);\n', '        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n', '        return true;\n', '    }\n', '\n', '    /**\n', "     * Don't accept ETH.\n", '     */\n', '    function () public payable {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '     * Owner can transfer out any accidentally sent ERC20 tokens\n', '     */\n', '    function transferAnyERC20Token(address tokenAddress, uint256 tokens) public onlyOwner returns (bool success) {\n', '        return ERC20(tokenAddress).transfer(owner, tokens);\n', '    }\n', '\n', '    /**\n', "     * Sets the alias for the msg.sender's address.\n", '     * @param alias the alias to attach to an address\n', '     */\n', '    function setAlias(string alias) public {\n', '        aliases[msg.sender] = alias;\n', '        addresses[alias] = msg.sender;\n', '    }\n', '}\n', '\n', 'contract TipTokenCrowdsale is MultiRoundCrowdsale, CappedCrowdsale, WhitelistedCrowdsale, AllowanceCrowdsale, PostDeliveryCrowdsale, Pausable {\n', '\n', '    /**\n', '     * Contract name\n', '     * String name - the name of the contract\n', '     */\n', '    string public constant name = "Tip Token Crowdsale";\n', '\n', '\n', '    /**\n', '     * @param _vault Address where collected funds will be forwarded to\n', '     * @param _tokenWallet Address holding the tokens, which has approved allowance to the crowdsale\n', '     * @param _cap the maximum number of tokens to be collected in the sale\n', '     * @param _token Address of the token being sold\n', '     */\n', '    constructor(\n', '        ERC20 _token,\n', '        address _tokenWallet,\n', '        address _vault,\n', '        uint256 _cap,\n', '        uint256 _start, uint256 _end, uint256 _baseRate\n', '        ) public\n', '        Crowdsale(_baseRate, _vault, _token)\n', '        CappedCrowdsale(_cap)\n', '        TimedCrowdsale(_start, _end)\n', '        PostDeliveryCrowdsale()\n', '        WhitelistedCrowdsale()\n', '        AllowanceCrowdsale(_tokenWallet)\n', '        MultiRoundCrowdsale()\n', '        {\n', '    }\n', '\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal whenNotPaused() {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '\n', '        SaleRound memory currentRound = getCurrentRound();\n', '        require(weiRaised.add(_weiAmount) <= currentRound.roundCap);\n', '        require(balances[_beneficiary].add(_weiAmount) >= currentRound.minPurchase);\n', '    }\n', '\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '        return MultiRoundCrowdsale._getTokenAmount(_weiAmount);\n', '    }\n', '\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        AllowanceCrowdsale._deliverTokens(_beneficiary, _tokenAmount);\n', '    }\n', '}']
