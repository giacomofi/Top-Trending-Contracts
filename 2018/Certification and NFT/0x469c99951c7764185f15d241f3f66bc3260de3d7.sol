['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract GIT {\n', '    \n', '    using SafeMath for uint256;\n', '    address public owner;\n', '    address public tokenAddress;\n', '    address public tokenSender;\n', '    uint256 public tokenApproves;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    uint256 public totalExchange = 200000e18;\n', '    uint256 public totalDistributed = 0;\n', '    uint256 public totalRemaining = totalExchange.sub(totalDistributed);\n', '\n', '    uint256 constant public unitEthWei = 1e18;\n', '    uint256 public unitsOneEthCanBuy = 250e18;\n', '    uint256 public unitsUserCanBuyLimitEth = 4e18;\n', '    uint256 public unitsUserCanBuyLimit = (unitsUserCanBuyLimitEth.div(unitEthWei)).mul(unitsOneEthCanBuy);\n', '\n', '    event ExchangeFinished();\n', '    event ExchangeStarted();\n', '    \n', '    \n', '    event LOG_receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData);\n', '    event LOG_callTokenTransferFrom(address tokenSender,address _to,uint256 _value);\n', '    event LOG_exchange(address _to, uint256 amount);\n', '    \n', '    bool public exchangeFinished = false;\n', '    \n', '    modifier canExchange() {\n', '        require(!exchangeFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier canNotExchange() {\n', '        require(exchangeFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function GIT () public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function changeTokenAddress(address newTokenAddress) onlyOwner public {\n', '        if (newTokenAddress != address(0)) {\n', '            tokenAddress = newTokenAddress;\n', '        }\n', '    }\n', '    \n', '    function changeTokenSender(address newTokenSender) onlyOwner public {\n', '        if (newTokenSender != address(0)) {\n', '            tokenSender = newTokenSender;\n', '        }\n', '    }\n', '    \n', '    function changeUnitsOneEthCanBuy(uint256 newUnitsOneEthCanBuy) onlyOwner public {\n', '        unitsOneEthCanBuy = newUnitsOneEthCanBuy;\n', '    }\n', '    \n', '    function changeUnitsUserCanBuyLimitEth(uint256 newUnitsUserCanBuyLimitEth) onlyOwner public {\n', '        unitsUserCanBuyLimitEth = newUnitsUserCanBuyLimitEth;\n', '    }\n', '    \n', '    function changeTotalExchange(uint256 newTotalExchange) onlyOwner public {\n', '        totalExchange = newTotalExchange;\n', '    }\n', '    \n', '    function changeTokenApproves(uint256 newTokenApproves) onlyOwner public {\n', '        tokenApproves = newTokenApproves;\n', '    }\n', '    \n', '    function changeTotalDistributed(uint256 newTotalDistributed) onlyOwner public {\n', '        totalDistributed = newTotalDistributed;\n', '    }\n', '    \n', '    function changeTotalRemaining(uint256 newTotalRemaining) onlyOwner public {\n', '        totalRemaining = newTotalRemaining;\n', '    }\n', '    \n', '    function changeUnitsUserCanBuyLimit(uint256 newUnitsUserCanBuyLimit) onlyOwner public {\n', '        unitsUserCanBuyLimit = newUnitsUserCanBuyLimit;\n', '    }\n', '    \n', '    function finishExchange() onlyOwner canExchange public returns (bool) {\n', '        exchangeFinished = true;\n', '        ExchangeFinished();\n', '        return true;\n', '    }\n', '    \n', '    function startExchange() onlyOwner canNotExchange public returns (bool) {\n', '        exchangeFinished = false;\n', '        ExchangeStarted();\n', '        return true;\n', '    }\n', '    \n', '    function () external payable {\n', '            exchangeTokens();\n', '     }\n', '    \n', '    function exchangeTokens() payable canExchange public {\n', '        \n', '        require(exchange());\n', '\n', '        if (totalDistributed >= totalExchange) {\n', '            exchangeFinished = true;\n', '        }\n', '        \n', '    }\n', '    \n', '    function getTokenBalance(address _tokenAddress, address _who) constant public returns (uint256){\n', '        ForeignToken t = ForeignToken(_tokenAddress);\n', '        uint bal = t.balanceOf(_who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdraw() onlyOwner public {\n', '        uint256 etherBalance = this.balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '    \n', '    function receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData) public returns (bool){\n', '        require(tokenAddress == _tokenAddress);\n', '        require(tokenSender == _sender);\n', '        require(totalExchange <= _tokenValue);\n', '        \n', '        tokenApproves = _tokenValue;\n', '        LOG_receiveApproval(_sender, _tokenValue ,_tokenAddress ,_extraData);\n', '        return true;\n', '    }\n', '    \n', '    function callTokenTransferFrom(address _to,uint256 _value) private returns (bool){\n', '        \n', '        require(tokenSender != address(0));\n', '        require(tokenAddress.call(bytes4(bytes32(keccak256("transferFrom(address,address,uint256)"))), tokenSender, _to, _value));\n', '        \n', '        LOG_callTokenTransferFrom(tokenSender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function exchange() payable canExchange public returns (bool) {\n', '        \n', '        uint256 amount = 0;\n', '        if(msg.value == 0){\n', '            return false;\n', '        }\n', '        \n', '        address _to = msg.sender;\n', '        \n', '        amount = msg.value.mul(unitsOneEthCanBuy.div(unitEthWei));\n', '        require(amount.add(balances[msg.sender]) <= unitsUserCanBuyLimit);\n', '        \n', '        totalDistributed = totalDistributed.add(amount);\n', '        totalRemaining = totalRemaining.sub(amount);\n', '        \n', '        require(callTokenTransferFrom(_to, amount));\n', '        \n', '        balances[msg.sender] = amount.add(balances[msg.sender]);\n', '        \n', '        if (totalDistributed >= totalExchange) {\n', '            exchangeFinished = true;\n', '        }\n', '        \n', '        LOG_exchange(_to, amount);\n', '        return true;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a / b;\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract ForeignToken {\n', '    function balanceOf(address _owner) constant public returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', 'contract GIT {\n', '    \n', '    using SafeMath for uint256;\n', '    address public owner;\n', '    address public tokenAddress;\n', '    address public tokenSender;\n', '    uint256 public tokenApproves;\n', '\n', '    mapping (address => uint256) balances;\n', '\n', '    uint256 public totalExchange = 200000e18;\n', '    uint256 public totalDistributed = 0;\n', '    uint256 public totalRemaining = totalExchange.sub(totalDistributed);\n', '\n', '    uint256 constant public unitEthWei = 1e18;\n', '    uint256 public unitsOneEthCanBuy = 250e18;\n', '    uint256 public unitsUserCanBuyLimitEth = 4e18;\n', '    uint256 public unitsUserCanBuyLimit = (unitsUserCanBuyLimitEth.div(unitEthWei)).mul(unitsOneEthCanBuy);\n', '\n', '    event ExchangeFinished();\n', '    event ExchangeStarted();\n', '    \n', '    \n', '    event LOG_receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData);\n', '    event LOG_callTokenTransferFrom(address tokenSender,address _to,uint256 _value);\n', '    event LOG_exchange(address _to, uint256 amount);\n', '    \n', '    bool public exchangeFinished = false;\n', '    \n', '    modifier canExchange() {\n', '        require(!exchangeFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier canNotExchange() {\n', '        require(exchangeFinished);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '    \n', '    function GIT () public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        if (newOwner != address(0)) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '    \n', '    function changeTokenAddress(address newTokenAddress) onlyOwner public {\n', '        if (newTokenAddress != address(0)) {\n', '            tokenAddress = newTokenAddress;\n', '        }\n', '    }\n', '    \n', '    function changeTokenSender(address newTokenSender) onlyOwner public {\n', '        if (newTokenSender != address(0)) {\n', '            tokenSender = newTokenSender;\n', '        }\n', '    }\n', '    \n', '    function changeUnitsOneEthCanBuy(uint256 newUnitsOneEthCanBuy) onlyOwner public {\n', '        unitsOneEthCanBuy = newUnitsOneEthCanBuy;\n', '    }\n', '    \n', '    function changeUnitsUserCanBuyLimitEth(uint256 newUnitsUserCanBuyLimitEth) onlyOwner public {\n', '        unitsUserCanBuyLimitEth = newUnitsUserCanBuyLimitEth;\n', '    }\n', '    \n', '    function changeTotalExchange(uint256 newTotalExchange) onlyOwner public {\n', '        totalExchange = newTotalExchange;\n', '    }\n', '    \n', '    function changeTokenApproves(uint256 newTokenApproves) onlyOwner public {\n', '        tokenApproves = newTokenApproves;\n', '    }\n', '    \n', '    function changeTotalDistributed(uint256 newTotalDistributed) onlyOwner public {\n', '        totalDistributed = newTotalDistributed;\n', '    }\n', '    \n', '    function changeTotalRemaining(uint256 newTotalRemaining) onlyOwner public {\n', '        totalRemaining = newTotalRemaining;\n', '    }\n', '    \n', '    function changeUnitsUserCanBuyLimit(uint256 newUnitsUserCanBuyLimit) onlyOwner public {\n', '        unitsUserCanBuyLimit = newUnitsUserCanBuyLimit;\n', '    }\n', '    \n', '    function finishExchange() onlyOwner canExchange public returns (bool) {\n', '        exchangeFinished = true;\n', '        ExchangeFinished();\n', '        return true;\n', '    }\n', '    \n', '    function startExchange() onlyOwner canNotExchange public returns (bool) {\n', '        exchangeFinished = false;\n', '        ExchangeStarted();\n', '        return true;\n', '    }\n', '    \n', '    function () external payable {\n', '            exchangeTokens();\n', '     }\n', '    \n', '    function exchangeTokens() payable canExchange public {\n', '        \n', '        require(exchange());\n', '\n', '        if (totalDistributed >= totalExchange) {\n', '            exchangeFinished = true;\n', '        }\n', '        \n', '    }\n', '    \n', '    function getTokenBalance(address _tokenAddress, address _who) constant public returns (uint256){\n', '        ForeignToken t = ForeignToken(_tokenAddress);\n', '        uint bal = t.balanceOf(_who);\n', '        return bal;\n', '    }\n', '    \n', '    function withdraw() onlyOwner public {\n', '        uint256 etherBalance = this.balance;\n', '        owner.transfer(etherBalance);\n', '    }\n', '    \n', '    function withdrawForeignTokens(address _tokenContract) onlyOwner public returns (bool) {\n', '        ForeignToken token = ForeignToken(_tokenContract);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        return token.transfer(owner, amount);\n', '    }\n', '    \n', '    function receiveApproval(address _sender,uint256 _tokenValue,address _tokenAddress,bytes _extraData) public returns (bool){\n', '        require(tokenAddress == _tokenAddress);\n', '        require(tokenSender == _sender);\n', '        require(totalExchange <= _tokenValue);\n', '        \n', '        tokenApproves = _tokenValue;\n', '        LOG_receiveApproval(_sender, _tokenValue ,_tokenAddress ,_extraData);\n', '        return true;\n', '    }\n', '    \n', '    function callTokenTransferFrom(address _to,uint256 _value) private returns (bool){\n', '        \n', '        require(tokenSender != address(0));\n', '        require(tokenAddress.call(bytes4(bytes32(keccak256("transferFrom(address,address,uint256)"))), tokenSender, _to, _value));\n', '        \n', '        LOG_callTokenTransferFrom(tokenSender, _to, _value);\n', '        return true;\n', '    }\n', '    \n', '    function exchange() payable canExchange public returns (bool) {\n', '        \n', '        uint256 amount = 0;\n', '        if(msg.value == 0){\n', '            return false;\n', '        }\n', '        \n', '        address _to = msg.sender;\n', '        \n', '        amount = msg.value.mul(unitsOneEthCanBuy.div(unitEthWei));\n', '        require(amount.add(balances[msg.sender]) <= unitsUserCanBuyLimit);\n', '        \n', '        totalDistributed = totalDistributed.add(amount);\n', '        totalRemaining = totalRemaining.sub(amount);\n', '        \n', '        require(callTokenTransferFrom(_to, amount));\n', '        \n', '        balances[msg.sender] = amount.add(balances[msg.sender]);\n', '        \n', '        if (totalDistributed >= totalExchange) {\n', '            exchangeFinished = true;\n', '        }\n', '        \n', '        LOG_exchange(_to, amount);\n', '        return true;\n', '    }\n', '\n', '}']
