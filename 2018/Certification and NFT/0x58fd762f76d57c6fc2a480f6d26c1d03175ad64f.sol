['pragma solidity ^0.4.19;\n', '\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract zombieMain is  ERC721,Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  struct Zombie {\n', '    bytes32 dna;\n', '    uint8 star;\n', '    uint16 roletype;\n', '    bool isFreeZombie;\n', '  }\n', '\n', '  Zombie[] public zombies;\n', '  \n', '  address public ZombiewCreator;\n', '\n', '  mapping (uint => address) public zombieToOwner;\n', '  mapping (address => uint) ownerZombieCount;\n', '  mapping (uint => address) zombieApprovals;\n', '\n', '  event Transfer(address _from, address _to,uint _tokenId);\n', '  event Approval(address _from, address _to,uint _tokenId);\n', '  event Take(address _to, address _from,uint _tokenId);\n', '  event Create(uint _tokenId, bytes32 dna,uint8 star, uint16 roletype);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance) {\n', '    return ownerZombieCount[_owner];\n', '  }\n', '\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner) {\n', '    return zombieToOwner[_tokenId];\n', '  }\n', '\n', '  function checkAllOwner(uint256[] _tokenId, address owner) public view returns (bool) {\n', '    for(uint i=0;i<_tokenId.length;i++){\n', '        if(owner != zombieToOwner[_tokenId[i]]){\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    return true;\n', '  }\n', '\n', '  function seeZombieDna(uint256 _tokenId) public view returns (bytes32 dna) {\n', '    return zombies[_tokenId].dna;\n', '  }\n', '\n', '  function seeZombieStar(uint256 _tokenId) public view returns (uint8 star) {\n', '    return zombies[_tokenId].star;\n', '  }\n', '  \n', '  function seeZombieRole(uint256 _tokenId) public view returns (uint16 roletype) {\n', '    return zombies[_tokenId].roletype;\n', '  }\n', '\n', '  function getZombiesByOwner(address _owner) external view returns(uint[]) {\n', '    uint[] memory result = new uint[](ownerZombieCount[_owner]);\n', '    uint counter = 0;\n', '    for (uint i = 0; i < zombies.length; i++) {\n', '      if (zombieToOwner[i] == _owner) {\n', '        result[counter] = i;\n', '        counter++;\n', '      }\n', '    }\n', '    return result;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _tokenId) public {\n', '    require(zombieToOwner[_tokenId] == msg.sender);\n', '    require(!zombies[_tokenId].isFreeZombie);\n', '    \n', '    ownerZombieCount[_to] = ownerZombieCount[_to].add(1);\n', '    ownerZombieCount[msg.sender] =  ownerZombieCount[msg.sender].sub(1);\n', '    zombieToOwner[_tokenId] = _to;\n', '    \n', '    Transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    require(zombieToOwner[_tokenId] == msg.sender);\n', '    require(!zombies[_tokenId].isFreeZombie);\n', '    \n', '    zombieApprovals[_tokenId] = _to;\n', '    \n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(zombieApprovals[_tokenId] == msg.sender);\n', '    require(!zombies[_tokenId].isFreeZombie);\n', '    \n', '    address owner = ownerOf(_tokenId);\n', '\n', '    ownerZombieCount[msg.sender] = ownerZombieCount[msg.sender].add(1);\n', '    ownerZombieCount[owner] = ownerZombieCount[owner].sub(1);\n', '    zombieToOwner[_tokenId] = msg.sender;\n', '    \n', '    Take(msg.sender, owner, _tokenId);\n', '  }\n', '  \n', '  function createZombie(uint8 star,bytes32 dna,uint16 roletype,bool isFreeZombie,address player) public {\n', '      require(msg.sender == ZombiewCreator); // only creator can call\n', ' \n', '      uint id = zombies.push(Zombie(dna, star, roletype, isFreeZombie)) - 1;\n', '      zombieToOwner[id] = player;\n', '      ownerZombieCount[player]++;\n', '      \n', '      Create(id, dna, star, roletype);\n', '  }\n', '  \n', '  function changeZombieCreator(address _zombiewCreator) public onlyOwner{\n', '    ZombiewCreator = _zombiewCreator;\n', '  }\n', '\n', '  function getZombiesFullInfoByOwner(address _owner) external view returns(uint[] id,bytes32[] dna, uint8[] star,uint16[] roletype,bool[] isFreeZombie) {\n', '   uint[]  memory idb = new uint[](ownerZombieCount[_owner]);\n', '   bytes32[]  memory dnab = new bytes32[](ownerZombieCount[_owner]);\n', '   uint8[]  memory starb = new uint8[](ownerZombieCount[_owner]);\n', '   uint16[]  memory roletypeb = new uint16[](ownerZombieCount[_owner]);\n', '   bool[]  memory isFreeZombieb = new bool[](ownerZombieCount[_owner]);\n', '   uint counter = 0;\n', '   for (uint i = 0; i < zombies.length; i++) {\n', '     if (zombieToOwner[i] == _owner) {\n', '       idb[counter] = i;\n', '       dnab[counter] = zombies[i].dna;\n', '       starb[counter] = zombies[i].star;\n', '       roletypeb[counter] = zombies[i].roletype;\n', '       isFreeZombieb[counter] = zombies[i].isFreeZombie;\n', '       counter++;\n', '     }\n', '   }\n', '   return (idb,dnab,starb,roletypeb,isFreeZombieb);\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', 'contract zombieMain is  ERC721,Ownable {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  struct Zombie {\n', '    bytes32 dna;\n', '    uint8 star;\n', '    uint16 roletype;\n', '    bool isFreeZombie;\n', '  }\n', '\n', '  Zombie[] public zombies;\n', '  \n', '  address public ZombiewCreator;\n', '\n', '  mapping (uint => address) public zombieToOwner;\n', '  mapping (address => uint) ownerZombieCount;\n', '  mapping (uint => address) zombieApprovals;\n', '\n', '  event Transfer(address _from, address _to,uint _tokenId);\n', '  event Approval(address _from, address _to,uint _tokenId);\n', '  event Take(address _to, address _from,uint _tokenId);\n', '  event Create(uint _tokenId, bytes32 dna,uint8 star, uint16 roletype);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance) {\n', '    return ownerZombieCount[_owner];\n', '  }\n', '\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner) {\n', '    return zombieToOwner[_tokenId];\n', '  }\n', '\n', '  function checkAllOwner(uint256[] _tokenId, address owner) public view returns (bool) {\n', '    for(uint i=0;i<_tokenId.length;i++){\n', '        if(owner != zombieToOwner[_tokenId[i]]){\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    return true;\n', '  }\n', '\n', '  function seeZombieDna(uint256 _tokenId) public view returns (bytes32 dna) {\n', '    return zombies[_tokenId].dna;\n', '  }\n', '\n', '  function seeZombieStar(uint256 _tokenId) public view returns (uint8 star) {\n', '    return zombies[_tokenId].star;\n', '  }\n', '  \n', '  function seeZombieRole(uint256 _tokenId) public view returns (uint16 roletype) {\n', '    return zombies[_tokenId].roletype;\n', '  }\n', '\n', '  function getZombiesByOwner(address _owner) external view returns(uint[]) {\n', '    uint[] memory result = new uint[](ownerZombieCount[_owner]);\n', '    uint counter = 0;\n', '    for (uint i = 0; i < zombies.length; i++) {\n', '      if (zombieToOwner[i] == _owner) {\n', '        result[counter] = i;\n', '        counter++;\n', '      }\n', '    }\n', '    return result;\n', '  }\n', '\n', '  function transfer(address _to, uint256 _tokenId) public {\n', '    require(zombieToOwner[_tokenId] == msg.sender);\n', '    require(!zombies[_tokenId].isFreeZombie);\n', '    \n', '    ownerZombieCount[_to] = ownerZombieCount[_to].add(1);\n', '    ownerZombieCount[msg.sender] =  ownerZombieCount[msg.sender].sub(1);\n', '    zombieToOwner[_tokenId] = _to;\n', '    \n', '    Transfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function approve(address _to, uint256 _tokenId) public {\n', '    require(zombieToOwner[_tokenId] == msg.sender);\n', '    require(!zombies[_tokenId].isFreeZombie);\n', '    \n', '    zombieApprovals[_tokenId] = _to;\n', '    \n', '    Approval(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(zombieApprovals[_tokenId] == msg.sender);\n', '    require(!zombies[_tokenId].isFreeZombie);\n', '    \n', '    address owner = ownerOf(_tokenId);\n', '\n', '    ownerZombieCount[msg.sender] = ownerZombieCount[msg.sender].add(1);\n', '    ownerZombieCount[owner] = ownerZombieCount[owner].sub(1);\n', '    zombieToOwner[_tokenId] = msg.sender;\n', '    \n', '    Take(msg.sender, owner, _tokenId);\n', '  }\n', '  \n', '  function createZombie(uint8 star,bytes32 dna,uint16 roletype,bool isFreeZombie,address player) public {\n', '      require(msg.sender == ZombiewCreator); // only creator can call\n', ' \n', '      uint id = zombies.push(Zombie(dna, star, roletype, isFreeZombie)) - 1;\n', '      zombieToOwner[id] = player;\n', '      ownerZombieCount[player]++;\n', '      \n', '      Create(id, dna, star, roletype);\n', '  }\n', '  \n', '  function changeZombieCreator(address _zombiewCreator) public onlyOwner{\n', '    ZombiewCreator = _zombiewCreator;\n', '  }\n', '\n', '  function getZombiesFullInfoByOwner(address _owner) external view returns(uint[] id,bytes32[] dna, uint8[] star,uint16[] roletype,bool[] isFreeZombie) {\n', '   uint[]  memory idb = new uint[](ownerZombieCount[_owner]);\n', '   bytes32[]  memory dnab = new bytes32[](ownerZombieCount[_owner]);\n', '   uint8[]  memory starb = new uint8[](ownerZombieCount[_owner]);\n', '   uint16[]  memory roletypeb = new uint16[](ownerZombieCount[_owner]);\n', '   bool[]  memory isFreeZombieb = new bool[](ownerZombieCount[_owner]);\n', '   uint counter = 0;\n', '   for (uint i = 0; i < zombies.length; i++) {\n', '     if (zombieToOwner[i] == _owner) {\n', '       idb[counter] = i;\n', '       dnab[counter] = zombies[i].dna;\n', '       starb[counter] = zombies[i].star;\n', '       roletypeb[counter] = zombies[i].roletype;\n', '       isFreeZombieb[counter] = zombies[i].isFreeZombie;\n', '       counter++;\n', '     }\n', '   }\n', '   return (idb,dnab,starb,roletypeb,isFreeZombieb);\n', '  }\n', '}']
