['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath Library\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract ERC721Token is ERC721 {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addToken(_to, _tokenId);\n', '    Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Burns a specific token\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n', '    if (approvedFor(_tokenId) != 0) {\n', '      clearApproval(msg.sender, _tokenId);\n', '    }\n', '    removeToken(msg.sender, _tokenId);\n', '    Transfer(msg.sender, 0x0, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CryptoThingWithDescendants\n', ' */\n', 'contract CryptoThingWithDescendants is Ownable, ERC721Token {\n', '  using SafeMath for uint256;\n', '\n', '  struct Thing {\n', '    uint256 id;\n', '    uint256 parentId;\n', '    uint256 purchasePrice;\n', '    uint256 growthRate;\n', '    uint256 dividendRate;\n', '    uint256 dividendsPaid;\n', '    uint256 lastAction;\n', '    bytes32 displayName;\n', '  }\n', '\n', '  uint256 public gameCost = 10 ether;\n', '  uint256 public floorPrice = 10 finney;\n', '  uint256 public standardGrowthRate = 150;\n', '  uint256 public numThings;\n', '  mapping (uint256 => Thing) public things;\n', '  mapping (uint256 => uint256[]) public descendantsOfThing;\n', '\n', '  string constant public NAME = &#39;Star Card&#39;;\n', '  string constant public SYMBOL = &#39;CARD&#39;;\n', '\n', '  event DividendPaid(address indexed recipient, uint256 amount);\n', '  event OverpaymentRefunded(uint256 amountExpected, uint256 excessFunds);\n', '  event ThingBorn(uint256 indexed thingId, uint256 initialPrice);\n', '  event ThingDestroyed(uint256 indexed thingId);\n', '  event ThingSold(\n', '    uint256 indexed thingId,\n', '    uint256 oldPrice,\n', '    uint256 newPrice,\n', '    address oldOwner,\n', '    address newOwner\n', '  );\n', '\n', '  function () payable public {\n', '    // someone sent a gift! yay!\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '  function name() constant public returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  function symbol() constant public returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  function addThing(\n', '    uint256 _parentId,\n', '    uint256 _purchasePrice,\n', '    uint256 _growthRate,\n', '    uint256 _dividendRate,\n', '    bytes32 _displayName\n', '  ) public onlyOwner returns (uint256 thingId) {\n', '    thingId = ++numThings;\n', '    things[thingId] = Thing({\n', '      id: thingId,\n', '      parentId: _parentId,\n', '      purchasePrice: _purchasePrice == 0 ? floorPrice : _purchasePrice,\n', '      growthRate: _growthRate == 0 ? standardGrowthRate : _growthRate,\n', '      dividendRate: _dividendRate,\n', '      dividendsPaid: 0,\n', '      lastAction: block.timestamp,\n', '      displayName: _displayName\n', '    });\n', '\n', '    if (_parentId != 0) descendantsOfThing[_parentId].push(thingId);\n', '\n', '    _mint(msg.sender, thingId);\n', '    ThingBorn(thingId, things[thingId].purchasePrice);\n', '  }\n', '\n', '  function purchase(uint256 _thingId) public payable {\n', '    require(_thingId != 0 && _thingId <= numThings);\n', '\n', '    address previousOwner = ownerOf(_thingId);\n', '    require(previousOwner != msg.sender);\n', '\n', '    Thing storage thing = things[_thingId];\n', '    uint256[] storage descendants = descendantsOfThing[_thingId];\n', '\n', '    uint256 currentPrice = getCurrentPrice(_thingId);\n', '    require(msg.value >= currentPrice);\n', '    if (msg.value > currentPrice) {\n', '      OverpaymentRefunded(currentPrice, msg.value.sub(currentPrice));\n', '      msg.sender.transfer(msg.value.sub(currentPrice));\n', '    }\n', '\n', '    if (thing.dividendRate != 0 && (thing.parentId != 0 || descendants.length > 0)) {\n', '      uint256 numDividends = thing.parentId == 0 ? descendants.length : descendants.length.add(1);\n', '      uint256 dividendPerRecipient = getDividendPayout(\n', '        currentPrice,\n', '        thing.dividendRate,\n', '        numDividends\n', '      );\n', '\n', '      address dividendRecipient = address(this);\n', '      for (uint256 i = 0; i < numDividends; i++) {\n', '        dividendRecipient = ownerOf(\n', '          i == descendants.length ? thing.parentId : descendants[i]\n', '        );\n', '        dividendRecipient.transfer(dividendPerRecipient);\n', '        DividendPaid(dividendRecipient, dividendPerRecipient);\n', '      }\n', '\n', '      thing.dividendsPaid = thing.dividendsPaid.add(dividendPerRecipient.mul(numDividends));\n', '    }\n', '\n', '    uint256 previousHolderShare = currentPrice.sub(\n', '      dividendPerRecipient.mul(numDividends)\n', '    );\n', '\n', '    uint256 fee = previousHolderShare.div(20);\n', '    owner.transfer(fee);\n', '\n', '    previousOwner.transfer(previousHolderShare.sub(fee));\n', '    thing.purchasePrice = thing.purchasePrice.mul(thing.growthRate).div(100);\n', '    thing.lastAction = block.timestamp;\n', '\n', '    clearApprovalAndTransfer(previousOwner, msg.sender, _thingId);\n', '    ThingSold(_thingId, currentPrice, thing.purchasePrice, previousOwner, msg.sender);\n', '  }\n', '\n', '  function purchaseGame() public payable {\n', '    require(msg.sender != owner);\n', '    require(msg.value >= gameCost);\n', '    owner.transfer(msg.value);\n', '    owner = msg.sender;\n', '    OwnershipTransferred(owner, msg.sender);\n', '  }\n', '\n', '  function setGameCost(uint256 newCost) public onlyOwner {\n', '    gameCost = newCost;\n', '  }\n', '\n', '  function getDescendantsOfThing(uint256 _thingId) public view returns (uint256[]) {\n', '    return descendantsOfThing[_thingId];\n', '  }\n', '\n', '  function getCurrentPrice(\n', '    uint256 _thingId\n', '  ) public view returns (uint256 currentPrice) {\n', '    require(_thingId != 0 && _thingId <= numThings);\n', '    Thing storage thing = things[_thingId];\n', '    currentPrice = getPurchasePrice(thing.purchasePrice, thing.growthRate);\n', '  }\n', '\n', '  function getPurchasePrice(\n', '    uint256 _currentPrice,\n', '    uint256 _priceIncrease\n', '  ) internal pure returns (uint256 currentPrice) {\n', '    currentPrice = _currentPrice.mul(_priceIncrease).div(100);\n', '  }\n', '\n', '  function getDividendPayout(\n', '    uint256 _purchasePrice,\n', '    uint256 _dividendRate,\n', '    uint256 _numDividends\n', '  ) public pure returns (uint256 dividend) {\n', '    dividend = _purchasePrice.mul(\n', '      _dividendRate\n', '    ).div(\n', '      100\n', '    ).sub(\n', '      _purchasePrice\n', '    ).div(\n', '      _numDividends\n', '    );\n', '  }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * @title Ownable\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeMath Library\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC721 interface\n', ' * @dev see https://github.com/ethereum/eips/issues/721\n', ' */\n', 'contract ERC721 {\n', '  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '  function balanceOf(address _owner) public view returns (uint256 _balance);\n', '  function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '  function transfer(address _to, uint256 _tokenId) public;\n', '  function approve(address _to, uint256 _tokenId) public;\n', '  function takeOwnership(uint256 _tokenId) public;\n', '}\n', '\n', '/**\n', ' * @title ERC721Token\n', ' * Generic implementation for the required functionality of the ERC721 standard\n', ' */\n', 'contract ERC721Token is ERC721 {\n', '  using SafeMath for uint256;\n', '\n', '  // Total amount of tokens\n', '  uint256 private totalTokens;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private tokenApprovals;\n', '\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping (address => uint256[]) private ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private ownedTokensIndex;\n', '\n', '  /**\n', '  * @dev Guarantees msg.sender is owner of the given token\n', '  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '  */\n', '  modifier onlyOwnerOf(uint256 _tokenId) {\n', '    require(ownerOf(_tokenId) == msg.sender);\n', '    _;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the total amount of tokens stored by the contract\n', '  * @return uint256 representing the total amount of tokens\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalTokens;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address\n', '  * @param _owner address to query the balance of\n', '  * @return uint256 representing the amount owned by the passed address\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return ownedTokens[_owner].length;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the list of tokens owned by a given address\n', '  * @param _owner address to query the tokens of\n', '  * @return uint256[] representing the list of tokens owned by the passed address\n', '  */\n', '  function tokensOf(address _owner) public view returns (uint256[]) {\n', '    return ownedTokens[_owner];\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the owner of the specified token ID\n', '  * @param _tokenId uint256 ID of the token to query the owner of\n', '  * @return owner address currently marked as the owner of the given token ID\n', '  */\n', '  function ownerOf(uint256 _tokenId) public view returns (address) {\n', '    address owner = tokenOwner[_tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address to take ownership of a given token ID\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved to take ownership of the given token ID\n', '   */\n', '  function approvedFor(uint256 _tokenId) public view returns (address) {\n', '    return tokenApprovals[_tokenId];\n', '  }\n', '\n', '  /**\n', '  * @dev Transfers the ownership of a given token ID to another address\n', '  * @param _to address to receive the ownership of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transfer(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    clearApprovalAndTransfer(msg.sender, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Approves another address to claim for the ownership of the given token ID\n', '  * @param _to address to be approved for the given token ID\n', '  * @param _tokenId uint256 ID of the token to be approved\n', '  */\n', '  function approve(address _to, uint256 _tokenId) public onlyOwnerOf(_tokenId) {\n', '    address owner = ownerOf(_tokenId);\n', '    require(_to != owner);\n', '    if (approvedFor(_tokenId) != 0 || _to != 0) {\n', '      tokenApprovals[_tokenId] = _to;\n', '      Approval(owner, _to, _tokenId);\n', '    }\n', '  }\n', '\n', '  /**\n', '  * @dev Claims the ownership of a given token ID\n', '  * @param _tokenId uint256 ID of the token being claimed by the msg.sender\n', '  */\n', '  function takeOwnership(uint256 _tokenId) public {\n', '    require(isApprovedFor(msg.sender, _tokenId));\n', '    clearApprovalAndTransfer(ownerOf(_tokenId), msg.sender, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Mint token function\n', '  * @param _to The address that will own the minted token\n', '  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '  */\n', '  function _mint(address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    addToken(_to, _tokenId);\n', '    Transfer(0x0, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Burns a specific token\n', '  * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '  */\n', '  function _burn(uint256 _tokenId) onlyOwnerOf(_tokenId) internal {\n', '    if (approvedFor(_tokenId) != 0) {\n', '      clearApproval(msg.sender, _tokenId);\n', '    }\n', '    removeToken(msg.sender, _tokenId);\n', '    Transfer(msg.sender, 0x0, _tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether the msg.sender is approved for the given token ID or not\n', '   * This function is not private so it can be extended in further implementations like the operatable ERC721\n', '   * @param _owner address of the owner to query the approval of\n', '   * @param _tokenId uint256 ID of the token to query the approval of\n', '   * @return bool whether the msg.sender is approved for the given token ID or not\n', '   */\n', '  function isApprovedFor(address _owner, uint256 _tokenId) internal view returns (bool) {\n', '    return approvedFor(_tokenId) == _owner;\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval and transfer the ownership of a given token ID\n', '  * @param _from address which you want to send tokens from\n', '  * @param _to address which you want to transfer the token to\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApprovalAndTransfer(address _from, address _to, uint256 _tokenId) internal {\n', '    require(_to != address(0));\n', '    require(_to != ownerOf(_tokenId));\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    clearApproval(_from, _tokenId);\n', '    removeToken(_from, _tokenId);\n', '    addToken(_to, _tokenId);\n', '    Transfer(_from, _to, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to clear current approval of a given token ID\n', '  * @param _tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function clearApproval(address _owner, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _owner);\n', '    tokenApprovals[_tokenId] = 0;\n', '    Approval(_owner, 0, _tokenId);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to add a token ID to the list of a given address\n', '  * @param _to address representing the new owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '  */\n', '  function addToken(address _to, uint256 _tokenId) private {\n', '    require(tokenOwner[_tokenId] == address(0));\n', '    tokenOwner[_tokenId] = _to;\n', '    uint256 length = balanceOf(_to);\n', '    ownedTokens[_to].push(_tokenId);\n', '    ownedTokensIndex[_tokenId] = length;\n', '    totalTokens = totalTokens.add(1);\n', '  }\n', '\n', '  /**\n', '  * @dev Internal function to remove a token ID from the list of a given address\n', '  * @param _from address representing the previous owner of the given token ID\n', '  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '  */\n', '  function removeToken(address _from, uint256 _tokenId) private {\n', '    require(ownerOf(_tokenId) == _from);\n', '\n', '    uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '    uint256 lastTokenIndex = balanceOf(_from).sub(1);\n', '    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '    tokenOwner[_tokenId] = 0;\n', '    ownedTokens[_from][tokenIndex] = lastToken;\n', '    ownedTokens[_from][lastTokenIndex] = 0;\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    ownedTokens[_from].length--;\n', '    ownedTokensIndex[_tokenId] = 0;\n', '    ownedTokensIndex[lastToken] = tokenIndex;\n', '    totalTokens = totalTokens.sub(1);\n', '  }\n', '}\n', '\n', '/**\n', ' * @title CryptoThingWithDescendants\n', ' */\n', 'contract CryptoThingWithDescendants is Ownable, ERC721Token {\n', '  using SafeMath for uint256;\n', '\n', '  struct Thing {\n', '    uint256 id;\n', '    uint256 parentId;\n', '    uint256 purchasePrice;\n', '    uint256 growthRate;\n', '    uint256 dividendRate;\n', '    uint256 dividendsPaid;\n', '    uint256 lastAction;\n', '    bytes32 displayName;\n', '  }\n', '\n', '  uint256 public gameCost = 10 ether;\n', '  uint256 public floorPrice = 10 finney;\n', '  uint256 public standardGrowthRate = 150;\n', '  uint256 public numThings;\n', '  mapping (uint256 => Thing) public things;\n', '  mapping (uint256 => uint256[]) public descendantsOfThing;\n', '\n', "  string constant public NAME = 'Star Card';\n", "  string constant public SYMBOL = 'CARD';\n", '\n', '  event DividendPaid(address indexed recipient, uint256 amount);\n', '  event OverpaymentRefunded(uint256 amountExpected, uint256 excessFunds);\n', '  event ThingBorn(uint256 indexed thingId, uint256 initialPrice);\n', '  event ThingDestroyed(uint256 indexed thingId);\n', '  event ThingSold(\n', '    uint256 indexed thingId,\n', '    uint256 oldPrice,\n', '    uint256 newPrice,\n', '    address oldOwner,\n', '    address newOwner\n', '  );\n', '\n', '  function () payable public {\n', '    // someone sent a gift! yay!\n', '    owner.transfer(msg.value);\n', '  }\n', '\n', '  function name() constant public returns (string) {\n', '    return NAME;\n', '  }\n', '\n', '  function symbol() constant public returns (string) {\n', '    return SYMBOL;\n', '  }\n', '\n', '  function addThing(\n', '    uint256 _parentId,\n', '    uint256 _purchasePrice,\n', '    uint256 _growthRate,\n', '    uint256 _dividendRate,\n', '    bytes32 _displayName\n', '  ) public onlyOwner returns (uint256 thingId) {\n', '    thingId = ++numThings;\n', '    things[thingId] = Thing({\n', '      id: thingId,\n', '      parentId: _parentId,\n', '      purchasePrice: _purchasePrice == 0 ? floorPrice : _purchasePrice,\n', '      growthRate: _growthRate == 0 ? standardGrowthRate : _growthRate,\n', '      dividendRate: _dividendRate,\n', '      dividendsPaid: 0,\n', '      lastAction: block.timestamp,\n', '      displayName: _displayName\n', '    });\n', '\n', '    if (_parentId != 0) descendantsOfThing[_parentId].push(thingId);\n', '\n', '    _mint(msg.sender, thingId);\n', '    ThingBorn(thingId, things[thingId].purchasePrice);\n', '  }\n', '\n', '  function purchase(uint256 _thingId) public payable {\n', '    require(_thingId != 0 && _thingId <= numThings);\n', '\n', '    address previousOwner = ownerOf(_thingId);\n', '    require(previousOwner != msg.sender);\n', '\n', '    Thing storage thing = things[_thingId];\n', '    uint256[] storage descendants = descendantsOfThing[_thingId];\n', '\n', '    uint256 currentPrice = getCurrentPrice(_thingId);\n', '    require(msg.value >= currentPrice);\n', '    if (msg.value > currentPrice) {\n', '      OverpaymentRefunded(currentPrice, msg.value.sub(currentPrice));\n', '      msg.sender.transfer(msg.value.sub(currentPrice));\n', '    }\n', '\n', '    if (thing.dividendRate != 0 && (thing.parentId != 0 || descendants.length > 0)) {\n', '      uint256 numDividends = thing.parentId == 0 ? descendants.length : descendants.length.add(1);\n', '      uint256 dividendPerRecipient = getDividendPayout(\n', '        currentPrice,\n', '        thing.dividendRate,\n', '        numDividends\n', '      );\n', '\n', '      address dividendRecipient = address(this);\n', '      for (uint256 i = 0; i < numDividends; i++) {\n', '        dividendRecipient = ownerOf(\n', '          i == descendants.length ? thing.parentId : descendants[i]\n', '        );\n', '        dividendRecipient.transfer(dividendPerRecipient);\n', '        DividendPaid(dividendRecipient, dividendPerRecipient);\n', '      }\n', '\n', '      thing.dividendsPaid = thing.dividendsPaid.add(dividendPerRecipient.mul(numDividends));\n', '    }\n', '\n', '    uint256 previousHolderShare = currentPrice.sub(\n', '      dividendPerRecipient.mul(numDividends)\n', '    );\n', '\n', '    uint256 fee = previousHolderShare.div(20);\n', '    owner.transfer(fee);\n', '\n', '    previousOwner.transfer(previousHolderShare.sub(fee));\n', '    thing.purchasePrice = thing.purchasePrice.mul(thing.growthRate).div(100);\n', '    thing.lastAction = block.timestamp;\n', '\n', '    clearApprovalAndTransfer(previousOwner, msg.sender, _thingId);\n', '    ThingSold(_thingId, currentPrice, thing.purchasePrice, previousOwner, msg.sender);\n', '  }\n', '\n', '  function purchaseGame() public payable {\n', '    require(msg.sender != owner);\n', '    require(msg.value >= gameCost);\n', '    owner.transfer(msg.value);\n', '    owner = msg.sender;\n', '    OwnershipTransferred(owner, msg.sender);\n', '  }\n', '\n', '  function setGameCost(uint256 newCost) public onlyOwner {\n', '    gameCost = newCost;\n', '  }\n', '\n', '  function getDescendantsOfThing(uint256 _thingId) public view returns (uint256[]) {\n', '    return descendantsOfThing[_thingId];\n', '  }\n', '\n', '  function getCurrentPrice(\n', '    uint256 _thingId\n', '  ) public view returns (uint256 currentPrice) {\n', '    require(_thingId != 0 && _thingId <= numThings);\n', '    Thing storage thing = things[_thingId];\n', '    currentPrice = getPurchasePrice(thing.purchasePrice, thing.growthRate);\n', '  }\n', '\n', '  function getPurchasePrice(\n', '    uint256 _currentPrice,\n', '    uint256 _priceIncrease\n', '  ) internal pure returns (uint256 currentPrice) {\n', '    currentPrice = _currentPrice.mul(_priceIncrease).div(100);\n', '  }\n', '\n', '  function getDividendPayout(\n', '    uint256 _purchasePrice,\n', '    uint256 _dividendRate,\n', '    uint256 _numDividends\n', '  ) public pure returns (uint256 dividend) {\n', '    dividend = _purchasePrice.mul(\n', '      _dividendRate\n', '    ).div(\n', '      100\n', '    ).sub(\n', '      _purchasePrice\n', '    ).div(\n', '      _numDividends\n', '    );\n', '  }\n', '}']
