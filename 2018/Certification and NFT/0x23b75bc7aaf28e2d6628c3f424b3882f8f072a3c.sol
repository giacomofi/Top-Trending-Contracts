['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Contracts\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="eb998e868884abd9">[email&#160;protected]</span>π.com>\n', ' * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n', ' * of this contract to reclaim ownership of the contracts.\n', ' */\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimContract(address contractAddr) external onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="74061119171b3446">[email&#160;protected]</span>π.com>\n', ' * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract VITToken is Claimable, HasNoTokens, MintableToken {\n', '    // solhint-disable const-name-snakecase\n', '    string public constant name = "Vice";\n', '    string public constant symbol = "VIT";\n', '    uint8 public constant decimals = 18;\n', '    // solhint-enable const-name-snakecase\n', '\n', '    modifier cannotMint() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function VITToken() public {\n', '\n', '    }\n', '\n', '    /// @dev Same ERC20 behavior, but reverts if still minting.\n', '    /// @param _to address The address to transfer to.\n', '    /// @param _value uint256 The amount to be transferred.\n', '    function transfer(address _to, uint256 _value) public cannotMint returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /// @dev Same ERC20 behavior, but reverts if still minting.\n', '    /// @param _from address The address which you want to send tokens from.\n', '    /// @param _to address The address which you want to transfer to.\n', '    /// @param _value uint256 the amount of tokens to be transferred.\n', '    function transferFrom(address _from, address _to, uint256 _value) public cannotMint returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/// @title VITToken sale contract.\n', 'contract VITTokenSale is Claimable {\n', '    using Math for uint256;\n', '    using SafeMath for uint256;\n', '\n', '    // VIT token contract.\n', '    VITToken public vitToken;\n', '\n', '    // Received funds are forwarded to this address.\n', '    address public fundingRecipient;\n', '\n', '    // VIT token unit.\n', '    uint256 public constant TOKEN_UNIT = 10 ** 18;\n', '\n', '    // Maximum tokens offered in the sale: 2B.\n', '    uint256 public constant MAX_TOKENS_SOLD = 2 * 10 ** 9 * TOKEN_UNIT;\n', '\n', '    // VIT to 1 wei ratio.\n', '    uint256 public vitPerWei;\n', '\n', '    // Sale start and end timestamps.\n', '    uint256 public constant RESTRICTED_PERIOD_DURATION = 1 days;\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // Refund data and state.\n', '    uint256 public refundEndTime;\n', '    mapping (address => uint256) public refundableEther;\n', '    mapping (address => uint256) public claimableTokens;\n', '    uint256 public totalClaimableTokens = 0;\n', '    bool public finalizedRefund = false;\n', '\n', '    // Amount of tokens sold until now in the sale.\n', '    uint256 public tokensSold = 0;\n', '\n', '    // Accumulated amount each participant has contributed so far.\n', '    mapping (address => uint256) public participationHistory;\n', '\n', '    // Maximum amount that each participant is allowed to contribute (in WEI), during the restricted period.\n', '    mapping (address => uint256) public participationCaps;\n', '\n', '    // Initial allocations.\n', '    address[20] public strategicPartnersPools;\n', '    uint256 public constant STRATEGIC_PARTNERS_POOL_ALLOCATION = 100 * 10 ** 6 * TOKEN_UNIT; // 100M\n', '\n', '    event TokensIssued(address indexed to, uint256 tokens);\n', '    event EtherRefunded(address indexed from, uint256 weiAmount);\n', '    event TokensClaimed(address indexed from, uint256 tokens);\n', '    event Finalized();\n', '    event FinalizedRefunds();\n', '\n', '    /// @dev Reverts if called when not during sale.\n', '    modifier onlyDuringSale() {\n', '        require(!saleEnded() && now >= startTime);\n', '\n', '        _;\n', '    }\n', '\n', '    /// @dev Reverts if called before the sale ends.\n', '    modifier onlyAfterSale() {\n', '        require(saleEnded());\n', '\n', '        _;\n', '    }\n', '\n', '    /// @dev Reverts if called not doing the refund period.\n', '    modifier onlyDuringRefund() {\n', '        require(saleDuringRefundPeriod());\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterRefund() {\n', '        require(saleAfterRefundPeriod());\n', '\n', '        _;\n', '    }\n', '\n', '    /// @dev Constructor that initializes the sale conditions.\n', '    /// @param _fundingRecipient address The address of the funding recipient.\n', '    /// @param _startTime uint256 The start time of the token sale.\n', '    /// @param _endTime uint256 The end time of the token sale.\n', '    /// @param _refundEndTime uint256 The end time of the refunding period.\n', '    /// @param _vitPerWei uint256 The exchange rate of VIT for one ETH.\n', '    /// @param _strategicPartnersPools address[20] The addresses of the 20 strategic partners pools.\n', '    function VITTokenSale(address _fundingRecipient, uint256 _startTime, uint256 _endTime, uint256 _refundEndTime,\n', '        uint256 _vitPerWei, address[20] _strategicPartnersPools) public {\n', '        require(_fundingRecipient != address(0));\n', '        require(_startTime > now && _startTime < _endTime && _endTime < _refundEndTime);\n', '        require(_startTime.add(RESTRICTED_PERIOD_DURATION) < _endTime);\n', '        require(_vitPerWei > 0);\n', '\n', '        for (uint i = 0; i < _strategicPartnersPools.length; ++i) {\n', '            require(_strategicPartnersPools[i] != address(0));\n', '        }\n', '\n', '        fundingRecipient = _fundingRecipient;\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        refundEndTime = _refundEndTime;\n', '        vitPerWei = _vitPerWei;\n', '        strategicPartnersPools = _strategicPartnersPools;\n', '\n', '        // Deploy new VITToken contract.\n', '        vitToken = new VITToken();\n', '\n', '        // Grant initial token allocations.\n', '        grantInitialAllocations();\n', '    }\n', '\n', '    /// @dev Fallback function that will delegate the request to create().\n', '    function () external payable onlyDuringSale {\n', '        address recipient = msg.sender;\n', '\n', '        uint256 cappedWeiReceived = msg.value;\n', '        uint256 weiAlreadyParticipated = participationHistory[recipient];\n', '\n', '        // If we&#39;re during the restricted period, then only the white-listed participants are allowed to participate,\n', '        if (saleDuringRestrictedPeriod()) {\n', '            uint256 participationCap = participationCaps[recipient];\n', '            cappedWeiReceived = Math.min256(cappedWeiReceived, participationCap.sub(weiAlreadyParticipated));\n', '        }\n', '\n', '        require(cappedWeiReceived > 0);\n', '\n', '        // Calculate how much tokens can be sold to this participant.\n', '        uint256 tokensLeftInSale = MAX_TOKENS_SOLD.sub(tokensSold);\n', '        uint256 weiLeftInSale = tokensLeftInSale.div(vitPerWei);\n', '        uint256 weiToParticipate = Math.min256(cappedWeiReceived, weiLeftInSale);\n', '        participationHistory[recipient] = weiAlreadyParticipated.add(weiToParticipate);\n', '\n', '        // Issue tokens and transfer to recipient.\n', '        uint256 tokensToIssue = weiToParticipate.mul(vitPerWei);\n', '        if (tokensLeftInSale.sub(tokensToIssue) < vitPerWei) {\n', '            // If purchase would cause less than vitPerWei tokens left then nobody could ever buy them, so we&#39;ll gift\n', '            // them to the last buyer.\n', '            tokensToIssue = tokensLeftInSale;\n', '        }\n', '\n', '        // Record the both the participate ETH and tokens for future refunds.\n', '        refundableEther[recipient] = refundableEther[recipient].add(weiToParticipate);\n', '        claimableTokens[recipient] = claimableTokens[recipient].add(tokensToIssue);\n', '\n', '        // Update token counters.\n', '        totalClaimableTokens = totalClaimableTokens.add(tokensToIssue);\n', '        tokensSold = tokensSold.add(tokensToIssue);\n', '\n', '        // Issue the tokens to the token sale smart contract itself, which will hold them for future refunds.\n', '        issueTokens(address(this), tokensToIssue);\n', '\n', '        // Partial refund if full participation not possible, e.g. due to cap being reached.\n', '        uint256 refund = msg.value.sub(weiToParticipate);\n', '        if (refund > 0) {\n', '            msg.sender.transfer(refund);\n', '        }\n', '    }\n', '\n', '    /// @dev Set restricted period participation caps for a list of addresses.\n', '    /// @param _participants address[] The list of participant addresses.\n', '    /// @param _cap uint256 The cap amount (in ETH).\n', '    function setRestrictedParticipationCap(address[] _participants, uint256 _cap) external onlyOwner {\n', '        for (uint i = 0; i < _participants.length; ++i) {\n', '            participationCaps[_participants[i]] = _cap;\n', '        }\n', '    }\n', '\n', '    /// @dev Finalizes the token sale event, by stopping token minting.\n', '    function finalize() external onlyAfterSale {\n', '        // Issue any unsold tokens back to the company.\n', '        if (tokensSold < MAX_TOKENS_SOLD) {\n', '            issueTokens(fundingRecipient, MAX_TOKENS_SOLD.sub(tokensSold));\n', '        }\n', '\n', '        // Finish minting. Please note, that if minting was already finished - this call will revert().\n', '        vitToken.finishMinting();\n', '\n', '        Finalized();\n', '    }\n', '\n', '    function finalizeRefunds() external onlyAfterRefund {\n', '        require(!finalizedRefund);\n', '\n', '        finalizedRefund = true;\n', '\n', '        // Transfer all the Ether to the beneficiary of the funding.\n', '        fundingRecipient.transfer(this.balance);\n', '\n', '        FinalizedRefunds();\n', '    }\n', '\n', '    /// @dev Reclaim all ERC20 compatible tokens, but not more than the VIT tokens which were reserved for refunds.\n', '    /// @param token ERC20Basic The address of the token contract.\n', '    function reclaimToken(ERC20Basic token) external onlyOwner {\n', '        uint256 balance = token.balanceOf(this);\n', '        if (token == vitToken) {\n', '            balance = balance.sub(totalClaimableTokens);\n', '        }\n', '\n', '        assert(token.transfer(owner, balance));\n', '    }\n', '\n', '    /// @dev Allows participants to claim their tokens, which also transfers the Ether to the funding recipient.\n', '    /// @param _tokensToClaim uint256 The amount of tokens to claim.\n', '    function claimTokens(uint256 _tokensToClaim) public onlyAfterSale {\n', '        require(_tokensToClaim != 0);\n', '\n', '        address participant = msg.sender;\n', '        require(claimableTokens[participant] > 0);\n', '\n', '        uint256 claimableTokensAmount = claimableTokens[participant];\n', '        require(_tokensToClaim <= claimableTokensAmount);\n', '\n', '        uint256 refundableEtherAmount = refundableEther[participant];\n', '        uint256 etherToClaim = _tokensToClaim.mul(refundableEtherAmount).div(claimableTokensAmount);\n', '        assert(etherToClaim > 0);\n', '\n', '        refundableEther[participant] = refundableEtherAmount.sub(etherToClaim);\n', '        claimableTokens[participant] = claimableTokensAmount.sub(_tokensToClaim);\n', '        totalClaimableTokens = totalClaimableTokens.sub(_tokensToClaim);\n', '\n', '        // Transfer the tokens from the token sale smart contract to the participant.\n', '        assert(vitToken.transfer(participant, _tokensToClaim));\n', '\n', '        // Transfer the Ether to the beneficiary of the funding (as long as the refund hasn&#39;t finalized yet).\n', '        if (!finalizedRefund) {\n', '            fundingRecipient.transfer(etherToClaim);\n', '        }\n', '\n', '        TokensClaimed(participant, _tokensToClaim);\n', '    }\n', '\n', '    /// @dev Allows participants to claim all their tokens.\n', '    function claimAllTokens() public onlyAfterSale {\n', '        uint256 claimableTokensAmount = claimableTokens[msg.sender];\n', '        claimTokens(claimableTokensAmount);\n', '    }\n', '\n', '    /// @dev Allows participants to claim refund for their purchased tokens.\n', '    /// @param _etherToClaim uint256 The amount of Ether to claim.\n', '    function refundEther(uint256 _etherToClaim) public onlyDuringRefund {\n', '        require(_etherToClaim != 0);\n', '\n', '        address participant = msg.sender;\n', '\n', '        uint256 refundableEtherAmount = refundableEther[participant];\n', '        require(_etherToClaim <= refundableEtherAmount);\n', '\n', '        uint256 claimableTokensAmount = claimableTokens[participant];\n', '        uint256 tokensToClaim = _etherToClaim.mul(claimableTokensAmount).div(refundableEtherAmount);\n', '        assert(tokensToClaim > 0);\n', '\n', '        refundableEther[participant] = refundableEtherAmount.sub(_etherToClaim);\n', '        claimableTokens[participant] = claimableTokensAmount.sub(tokensToClaim);\n', '        totalClaimableTokens = totalClaimableTokens.sub(tokensToClaim);\n', '\n', '        // Transfer the tokens to the beneficiary of the funding.\n', '        assert(vitToken.transfer(fundingRecipient, tokensToClaim));\n', '\n', '        // Transfer the Ether to the participant.\n', '        participant.transfer(_etherToClaim);\n', '\n', '        EtherRefunded(participant, _etherToClaim);\n', '    }\n', '\n', '    /// @dev Allows participants to claim refund for all their purchased tokens.\n', '    function refundAllEther() public onlyDuringRefund {\n', '        uint256 refundableEtherAmount = refundableEther[msg.sender];\n', '        refundEther(refundableEtherAmount);\n', '    }\n', '\n', '    /// @dev Initialize token grants.\n', '    function grantInitialAllocations() private onlyOwner {\n', '        for (uint i = 0; i < strategicPartnersPools.length; ++i) {\n', '            issueTokens(strategicPartnersPools[i], STRATEGIC_PARTNERS_POOL_ALLOCATION);\n', '        }\n', '    }\n', '\n', '    /// @dev Issues tokens for the recipient.\n', '    /// @param _recipient address The address of the recipient.\n', '    /// @param _tokens uint256 The amount of tokens to issue.\n', '    function issueTokens(address _recipient, uint256 _tokens) private {\n', '        // Request VIT token contract to mint the requested tokens for the buyer.\n', '        assert(vitToken.mint(_recipient, _tokens));\n', '\n', '        TokensIssued(_recipient, _tokens);\n', '    }\n', '\n', '    /// @dev Returns whether the sale has ended.\n', '    /// @return bool Whether the sale has ended or not.\n', '    function saleEnded() private view returns (bool) {\n', '        return tokensSold >= MAX_TOKENS_SOLD || now >= endTime;\n', '    }\n', '\n', '    /// @dev Returns whether the sale is during its restricted period, where only white-listed participants are allowed\n', '    /// to participate.\n', '    /// @return bool Whether the sale is during its restricted period, where only white-listed participants are allowed\n', '    /// to participate.\n', '    function saleDuringRestrictedPeriod() private view returns (bool) {\n', '        return now <= startTime.add(RESTRICTED_PERIOD_DURATION);\n', '    }\n', '\n', '    /// @dev Returns whether the sale is during its refund period.\n', '    /// @return bool whether the sale is during its refund period.\n', '    function saleDuringRefundPeriod() private view returns (bool) {\n', '        return saleEnded() && now <= refundEndTime;\n', '    }\n', '\n', '    /// @dev Returns whether the sale is during its refund period.\n', '    /// @return bool whether the sale is during its refund period.\n', '    function saleAfterRefundPeriod() private view returns (bool) {\n', '        return saleEnded() && now > refundEndTime;\n', '    }\n', '}']
['pragma solidity 0.4.18;\n', '\n', '/**\n', ' * @title Math\n', ' * @dev Assorted math operations\n', ' */\n', '\n', 'library Math {\n', '  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n', '    return a < b ? a : b;\n', '  }\n', '\n', '  function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a >= b ? a : b;\n', '  }\n', '\n', '  function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a < b ? a : b;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Contracts\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner\n', ' * of this contract to reclaim ownership of the contracts.\n', ' */\n', 'contract HasNoContracts is Ownable {\n', '\n', '  /**\n', '   * @dev Reclaim ownership of Ownable contracts\n', '   * @param contractAddr The address of the Ownable to be reclaimed.\n', '   */\n', '  function reclaimContract(address contractAddr) external onlyOwner {\n', '    Ownable contractInst = Ownable(contractAddr);\n', '    contractInst.transferOwnership(owner);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', 'contract VITToken is Claimable, HasNoTokens, MintableToken {\n', '    // solhint-disable const-name-snakecase\n', '    string public constant name = "Vice";\n', '    string public constant symbol = "VIT";\n', '    uint8 public constant decimals = 18;\n', '    // solhint-enable const-name-snakecase\n', '\n', '    modifier cannotMint() {\n', '        require(mintingFinished);\n', '        _;\n', '    }\n', '\n', '    function VITToken() public {\n', '\n', '    }\n', '\n', '    /// @dev Same ERC20 behavior, but reverts if still minting.\n', '    /// @param _to address The address to transfer to.\n', '    /// @param _value uint256 The amount to be transferred.\n', '    function transfer(address _to, uint256 _value) public cannotMint returns (bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /// @dev Same ERC20 behavior, but reverts if still minting.\n', '    /// @param _from address The address which you want to send tokens from.\n', '    /// @param _to address The address which you want to transfer to.\n', '    /// @param _value uint256 the amount of tokens to be transferred.\n', '    function transferFrom(address _from, address _to, uint256 _value) public cannotMint returns (bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '/// @title VITToken sale contract.\n', 'contract VITTokenSale is Claimable {\n', '    using Math for uint256;\n', '    using SafeMath for uint256;\n', '\n', '    // VIT token contract.\n', '    VITToken public vitToken;\n', '\n', '    // Received funds are forwarded to this address.\n', '    address public fundingRecipient;\n', '\n', '    // VIT token unit.\n', '    uint256 public constant TOKEN_UNIT = 10 ** 18;\n', '\n', '    // Maximum tokens offered in the sale: 2B.\n', '    uint256 public constant MAX_TOKENS_SOLD = 2 * 10 ** 9 * TOKEN_UNIT;\n', '\n', '    // VIT to 1 wei ratio.\n', '    uint256 public vitPerWei;\n', '\n', '    // Sale start and end timestamps.\n', '    uint256 public constant RESTRICTED_PERIOD_DURATION = 1 days;\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '\n', '    // Refund data and state.\n', '    uint256 public refundEndTime;\n', '    mapping (address => uint256) public refundableEther;\n', '    mapping (address => uint256) public claimableTokens;\n', '    uint256 public totalClaimableTokens = 0;\n', '    bool public finalizedRefund = false;\n', '\n', '    // Amount of tokens sold until now in the sale.\n', '    uint256 public tokensSold = 0;\n', '\n', '    // Accumulated amount each participant has contributed so far.\n', '    mapping (address => uint256) public participationHistory;\n', '\n', '    // Maximum amount that each participant is allowed to contribute (in WEI), during the restricted period.\n', '    mapping (address => uint256) public participationCaps;\n', '\n', '    // Initial allocations.\n', '    address[20] public strategicPartnersPools;\n', '    uint256 public constant STRATEGIC_PARTNERS_POOL_ALLOCATION = 100 * 10 ** 6 * TOKEN_UNIT; // 100M\n', '\n', '    event TokensIssued(address indexed to, uint256 tokens);\n', '    event EtherRefunded(address indexed from, uint256 weiAmount);\n', '    event TokensClaimed(address indexed from, uint256 tokens);\n', '    event Finalized();\n', '    event FinalizedRefunds();\n', '\n', '    /// @dev Reverts if called when not during sale.\n', '    modifier onlyDuringSale() {\n', '        require(!saleEnded() && now >= startTime);\n', '\n', '        _;\n', '    }\n', '\n', '    /// @dev Reverts if called before the sale ends.\n', '    modifier onlyAfterSale() {\n', '        require(saleEnded());\n', '\n', '        _;\n', '    }\n', '\n', '    /// @dev Reverts if called not doing the refund period.\n', '    modifier onlyDuringRefund() {\n', '        require(saleDuringRefundPeriod());\n', '\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterRefund() {\n', '        require(saleAfterRefundPeriod());\n', '\n', '        _;\n', '    }\n', '\n', '    /// @dev Constructor that initializes the sale conditions.\n', '    /// @param _fundingRecipient address The address of the funding recipient.\n', '    /// @param _startTime uint256 The start time of the token sale.\n', '    /// @param _endTime uint256 The end time of the token sale.\n', '    /// @param _refundEndTime uint256 The end time of the refunding period.\n', '    /// @param _vitPerWei uint256 The exchange rate of VIT for one ETH.\n', '    /// @param _strategicPartnersPools address[20] The addresses of the 20 strategic partners pools.\n', '    function VITTokenSale(address _fundingRecipient, uint256 _startTime, uint256 _endTime, uint256 _refundEndTime,\n', '        uint256 _vitPerWei, address[20] _strategicPartnersPools) public {\n', '        require(_fundingRecipient != address(0));\n', '        require(_startTime > now && _startTime < _endTime && _endTime < _refundEndTime);\n', '        require(_startTime.add(RESTRICTED_PERIOD_DURATION) < _endTime);\n', '        require(_vitPerWei > 0);\n', '\n', '        for (uint i = 0; i < _strategicPartnersPools.length; ++i) {\n', '            require(_strategicPartnersPools[i] != address(0));\n', '        }\n', '\n', '        fundingRecipient = _fundingRecipient;\n', '        startTime = _startTime;\n', '        endTime = _endTime;\n', '        refundEndTime = _refundEndTime;\n', '        vitPerWei = _vitPerWei;\n', '        strategicPartnersPools = _strategicPartnersPools;\n', '\n', '        // Deploy new VITToken contract.\n', '        vitToken = new VITToken();\n', '\n', '        // Grant initial token allocations.\n', '        grantInitialAllocations();\n', '    }\n', '\n', '    /// @dev Fallback function that will delegate the request to create().\n', '    function () external payable onlyDuringSale {\n', '        address recipient = msg.sender;\n', '\n', '        uint256 cappedWeiReceived = msg.value;\n', '        uint256 weiAlreadyParticipated = participationHistory[recipient];\n', '\n', "        // If we're during the restricted period, then only the white-listed participants are allowed to participate,\n", '        if (saleDuringRestrictedPeriod()) {\n', '            uint256 participationCap = participationCaps[recipient];\n', '            cappedWeiReceived = Math.min256(cappedWeiReceived, participationCap.sub(weiAlreadyParticipated));\n', '        }\n', '\n', '        require(cappedWeiReceived > 0);\n', '\n', '        // Calculate how much tokens can be sold to this participant.\n', '        uint256 tokensLeftInSale = MAX_TOKENS_SOLD.sub(tokensSold);\n', '        uint256 weiLeftInSale = tokensLeftInSale.div(vitPerWei);\n', '        uint256 weiToParticipate = Math.min256(cappedWeiReceived, weiLeftInSale);\n', '        participationHistory[recipient] = weiAlreadyParticipated.add(weiToParticipate);\n', '\n', '        // Issue tokens and transfer to recipient.\n', '        uint256 tokensToIssue = weiToParticipate.mul(vitPerWei);\n', '        if (tokensLeftInSale.sub(tokensToIssue) < vitPerWei) {\n', "            // If purchase would cause less than vitPerWei tokens left then nobody could ever buy them, so we'll gift\n", '            // them to the last buyer.\n', '            tokensToIssue = tokensLeftInSale;\n', '        }\n', '\n', '        // Record the both the participate ETH and tokens for future refunds.\n', '        refundableEther[recipient] = refundableEther[recipient].add(weiToParticipate);\n', '        claimableTokens[recipient] = claimableTokens[recipient].add(tokensToIssue);\n', '\n', '        // Update token counters.\n', '        totalClaimableTokens = totalClaimableTokens.add(tokensToIssue);\n', '        tokensSold = tokensSold.add(tokensToIssue);\n', '\n', '        // Issue the tokens to the token sale smart contract itself, which will hold them for future refunds.\n', '        issueTokens(address(this), tokensToIssue);\n', '\n', '        // Partial refund if full participation not possible, e.g. due to cap being reached.\n', '        uint256 refund = msg.value.sub(weiToParticipate);\n', '        if (refund > 0) {\n', '            msg.sender.transfer(refund);\n', '        }\n', '    }\n', '\n', '    /// @dev Set restricted period participation caps for a list of addresses.\n', '    /// @param _participants address[] The list of participant addresses.\n', '    /// @param _cap uint256 The cap amount (in ETH).\n', '    function setRestrictedParticipationCap(address[] _participants, uint256 _cap) external onlyOwner {\n', '        for (uint i = 0; i < _participants.length; ++i) {\n', '            participationCaps[_participants[i]] = _cap;\n', '        }\n', '    }\n', '\n', '    /// @dev Finalizes the token sale event, by stopping token minting.\n', '    function finalize() external onlyAfterSale {\n', '        // Issue any unsold tokens back to the company.\n', '        if (tokensSold < MAX_TOKENS_SOLD) {\n', '            issueTokens(fundingRecipient, MAX_TOKENS_SOLD.sub(tokensSold));\n', '        }\n', '\n', '        // Finish minting. Please note, that if minting was already finished - this call will revert().\n', '        vitToken.finishMinting();\n', '\n', '        Finalized();\n', '    }\n', '\n', '    function finalizeRefunds() external onlyAfterRefund {\n', '        require(!finalizedRefund);\n', '\n', '        finalizedRefund = true;\n', '\n', '        // Transfer all the Ether to the beneficiary of the funding.\n', '        fundingRecipient.transfer(this.balance);\n', '\n', '        FinalizedRefunds();\n', '    }\n', '\n', '    /// @dev Reclaim all ERC20 compatible tokens, but not more than the VIT tokens which were reserved for refunds.\n', '    /// @param token ERC20Basic The address of the token contract.\n', '    function reclaimToken(ERC20Basic token) external onlyOwner {\n', '        uint256 balance = token.balanceOf(this);\n', '        if (token == vitToken) {\n', '            balance = balance.sub(totalClaimableTokens);\n', '        }\n', '\n', '        assert(token.transfer(owner, balance));\n', '    }\n', '\n', '    /// @dev Allows participants to claim their tokens, which also transfers the Ether to the funding recipient.\n', '    /// @param _tokensToClaim uint256 The amount of tokens to claim.\n', '    function claimTokens(uint256 _tokensToClaim) public onlyAfterSale {\n', '        require(_tokensToClaim != 0);\n', '\n', '        address participant = msg.sender;\n', '        require(claimableTokens[participant] > 0);\n', '\n', '        uint256 claimableTokensAmount = claimableTokens[participant];\n', '        require(_tokensToClaim <= claimableTokensAmount);\n', '\n', '        uint256 refundableEtherAmount = refundableEther[participant];\n', '        uint256 etherToClaim = _tokensToClaim.mul(refundableEtherAmount).div(claimableTokensAmount);\n', '        assert(etherToClaim > 0);\n', '\n', '        refundableEther[participant] = refundableEtherAmount.sub(etherToClaim);\n', '        claimableTokens[participant] = claimableTokensAmount.sub(_tokensToClaim);\n', '        totalClaimableTokens = totalClaimableTokens.sub(_tokensToClaim);\n', '\n', '        // Transfer the tokens from the token sale smart contract to the participant.\n', '        assert(vitToken.transfer(participant, _tokensToClaim));\n', '\n', "        // Transfer the Ether to the beneficiary of the funding (as long as the refund hasn't finalized yet).\n", '        if (!finalizedRefund) {\n', '            fundingRecipient.transfer(etherToClaim);\n', '        }\n', '\n', '        TokensClaimed(participant, _tokensToClaim);\n', '    }\n', '\n', '    /// @dev Allows participants to claim all their tokens.\n', '    function claimAllTokens() public onlyAfterSale {\n', '        uint256 claimableTokensAmount = claimableTokens[msg.sender];\n', '        claimTokens(claimableTokensAmount);\n', '    }\n', '\n', '    /// @dev Allows participants to claim refund for their purchased tokens.\n', '    /// @param _etherToClaim uint256 The amount of Ether to claim.\n', '    function refundEther(uint256 _etherToClaim) public onlyDuringRefund {\n', '        require(_etherToClaim != 0);\n', '\n', '        address participant = msg.sender;\n', '\n', '        uint256 refundableEtherAmount = refundableEther[participant];\n', '        require(_etherToClaim <= refundableEtherAmount);\n', '\n', '        uint256 claimableTokensAmount = claimableTokens[participant];\n', '        uint256 tokensToClaim = _etherToClaim.mul(claimableTokensAmount).div(refundableEtherAmount);\n', '        assert(tokensToClaim > 0);\n', '\n', '        refundableEther[participant] = refundableEtherAmount.sub(_etherToClaim);\n', '        claimableTokens[participant] = claimableTokensAmount.sub(tokensToClaim);\n', '        totalClaimableTokens = totalClaimableTokens.sub(tokensToClaim);\n', '\n', '        // Transfer the tokens to the beneficiary of the funding.\n', '        assert(vitToken.transfer(fundingRecipient, tokensToClaim));\n', '\n', '        // Transfer the Ether to the participant.\n', '        participant.transfer(_etherToClaim);\n', '\n', '        EtherRefunded(participant, _etherToClaim);\n', '    }\n', '\n', '    /// @dev Allows participants to claim refund for all their purchased tokens.\n', '    function refundAllEther() public onlyDuringRefund {\n', '        uint256 refundableEtherAmount = refundableEther[msg.sender];\n', '        refundEther(refundableEtherAmount);\n', '    }\n', '\n', '    /// @dev Initialize token grants.\n', '    function grantInitialAllocations() private onlyOwner {\n', '        for (uint i = 0; i < strategicPartnersPools.length; ++i) {\n', '            issueTokens(strategicPartnersPools[i], STRATEGIC_PARTNERS_POOL_ALLOCATION);\n', '        }\n', '    }\n', '\n', '    /// @dev Issues tokens for the recipient.\n', '    /// @param _recipient address The address of the recipient.\n', '    /// @param _tokens uint256 The amount of tokens to issue.\n', '    function issueTokens(address _recipient, uint256 _tokens) private {\n', '        // Request VIT token contract to mint the requested tokens for the buyer.\n', '        assert(vitToken.mint(_recipient, _tokens));\n', '\n', '        TokensIssued(_recipient, _tokens);\n', '    }\n', '\n', '    /// @dev Returns whether the sale has ended.\n', '    /// @return bool Whether the sale has ended or not.\n', '    function saleEnded() private view returns (bool) {\n', '        return tokensSold >= MAX_TOKENS_SOLD || now >= endTime;\n', '    }\n', '\n', '    /// @dev Returns whether the sale is during its restricted period, where only white-listed participants are allowed\n', '    /// to participate.\n', '    /// @return bool Whether the sale is during its restricted period, where only white-listed participants are allowed\n', '    /// to participate.\n', '    function saleDuringRestrictedPeriod() private view returns (bool) {\n', '        return now <= startTime.add(RESTRICTED_PERIOD_DURATION);\n', '    }\n', '\n', '    /// @dev Returns whether the sale is during its refund period.\n', '    /// @return bool whether the sale is during its refund period.\n', '    function saleDuringRefundPeriod() private view returns (bool) {\n', '        return saleEnded() && now <= refundEndTime;\n', '    }\n', '\n', '    /// @dev Returns whether the sale is during its refund period.\n', '    /// @return bool whether the sale is during its refund period.\n', '    function saleAfterRefundPeriod() private view returns (bool) {\n', '        return saleEnded() && now > refundEndTime;\n', '    }\n', '}']
