['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @title Claimable\n', ' * @dev Extension for the Ownable contract, where the ownership needs to be claimed.\n', ' * This allows the new owner to accept the transfer.\n', ' */\n', 'contract Claimable is Ownable {\n', '  address public pendingOwner;\n', '\n', '  /**\n', '   * @dev Modifier throws if called by any account other than the pendingOwner.\n', '   */\n', '  modifier onlyPendingOwner() {\n', '    require(msg.sender == pendingOwner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to set the pendingOwner address.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    pendingOwner = newOwner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the pendingOwner address to finalize the transfer.\n', '   */\n', '  function claimOwnership() onlyPendingOwner public {\n', '    OwnershipTransferred(owner, pendingOwner);\n', '    owner = pendingOwner;\n', '    pendingOwner = address(0);\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(ERC20Basic token) external onlyOwner {\n', '    uint256 balance = token.balanceOf(this);\n', '    token.safeTransfer(owner, balance);\n', '  }\n', '\n', '}\n', '\n', '\n', '/// @title Interface for contracts conforming to ERC-721: Deed Standard\n', '/// @author William Entriken (https://phor.net), et al.\n', '/// @dev Specification at https://github.com/ethereum/EIPs/pull/841 (DRAFT)\n', 'interface ERC721 {\n', '\n', '    // COMPLIANCE WITH ERC-165 (DRAFT) /////////////////////////////////////////\n', '\n', '    /// @dev ERC-165 (draft) interface signature for itself\n', '    // bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\n', "    //     bytes4(keccak256('supportsInterface(bytes4)'));\n", '\n', '    /// @dev ERC-165 (draft) interface signature for ERC721\n', '    // bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = // 0xda671b9b\n', "    //     bytes4(keccak256('ownerOf(uint256)')) ^\n", "    //     bytes4(keccak256('countOfDeeds()')) ^\n", "    //     bytes4(keccak256('countOfDeedsByOwner(address)')) ^\n", "    //     bytes4(keccak256('deedOfOwnerByIndex(address,uint256)')) ^\n", "    //     bytes4(keccak256('approve(address,uint256)')) ^\n", "    //     bytes4(keccak256('takeOwnership(uint256)'));\n", '\n', '    /// @notice Query a contract to see if it supports a certain interface\n', '    /// @dev Returns `true` the interface is supported and `false` otherwise,\n', '    ///  returns `true` for INTERFACE_SIGNATURE_ERC165 and\n', '    ///  INTERFACE_SIGNATURE_ERC721, see ERC-165 for other interface signatures.\n', '    function supportsInterface(bytes4 _interfaceID) external pure returns (bool);\n', '\n', '    // PUBLIC QUERY FUNCTIONS //////////////////////////////////////////////////\n', '\n', '    /// @notice Find the owner of a deed\n', '    /// @param _deedId The identifier for a deed we are inspecting\n', '    /// @dev Deeds assigned to zero address are considered destroyed, and\n', '    ///  queries about them do throw.\n', '    /// @return The non-zero address of the owner of deed `_deedId`, or `throw`\n', '    ///  if deed `_deedId` is not tracked by this contract\n', '    function ownerOf(uint256 _deedId) external view returns (address _owner);\n', '\n', '    /// @notice Count deeds tracked by this contract\n', '    /// @return A count of the deeds tracked by this contract, where each one of\n', '    ///  them has an assigned and queryable owner\n', '    function countOfDeeds() public view returns (uint256 _count);\n', '\n', '    /// @notice Count all deeds assigned to an owner\n', '    /// @dev Throws if `_owner` is the zero address, representing destroyed deeds.\n', '    /// @param _owner An address where we are interested in deeds owned by them\n', '    /// @return The number of deeds owned by `_owner`, possibly zero\n', '    function countOfDeedsByOwner(address _owner) public view returns (uint256 _count);\n', '\n', '    /// @notice Enumerate deeds assigned to an owner\n', '    /// @dev Throws if `_index` >= `countOfDeedsByOwner(_owner)` or if\n', '    ///  `_owner` is the zero address, representing destroyed deeds.\n', '    /// @param _owner An address where we are interested in deeds owned by them\n', '    /// @param _index A counter between zero and `countOfDeedsByOwner(_owner)`,\n', '    ///  inclusive\n', '    /// @return The identifier for the `_index`th deed assigned to `_owner`,\n', '    ///   (sort order not specified)\n', '    function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 _deedId);\n', '\n', '    // TRANSFER MECHANISM //////////////////////////////////////////////////////\n', '\n', '    /// @dev This event emits when ownership of any deed changes by any\n', '    ///  mechanism. This event emits when deeds are created (`from` == 0) and\n', '    ///  destroyed (`to` == 0). Exception: during contract creation, any\n', '    ///  transfers may occur without emitting `Transfer`.\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed deedId);\n', '\n', '    /// @dev This event emits on any successful call to\n', '    ///  `approve(address _spender, uint256 _deedId)`. Exception: does not emit\n', '    ///  if an owner revokes approval (`_to` == 0x0) on a deed with no existing\n', '    ///  approval.\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed deedId);\n', '\n', '    /// @notice Approve a new owner to take your deed, or revoke approval by\n', '    ///  setting the zero address. You may `approve` any number of times while\n', '    ///  the deed is assigned to you, only the most recent approval matters.\n', '    /// @dev Throws if `msg.sender` does not own deed `_deedId` or if `_to` ==\n', '    ///  `msg.sender`.\n', '    /// @param _deedId The deed you are granting ownership of\n', '    function approve(address _to, uint256 _deedId) external;\n', '\n', '    /// @notice Become owner of a deed for which you are currently approved\n', '    /// @dev Throws if `msg.sender` is not approved to become the owner of\n', '    ///  `deedId` or if `msg.sender` currently owns `_deedId`.\n', '    /// @param _deedId The deed that is being transferred\n', '    function takeOwnership(uint256 _deedId) external;\n', '    \n', '    // SPEC EXTENSIONS /////////////////////////////////////////////////////////\n', '    \n', '    /// @notice Transfer a deed to a new owner.\n', '    /// @dev Throws if `msg.sender` does not own deed `_deedId` or if\n', '    ///  `_to` == 0x0.\n', '    /// @param _to The address of the new owner.\n', '    /// @param _deedId The deed you are transferring.\n', '    function transfer(address _to, uint256 _deedId) external;\n', '}\n', '\n', '\n', '/// @title Metadata extension to ERC-721 interface\n', '/// @author William Entriken (https://phor.net)\n', '/// @dev Specification at https://github.com/ethereum/EIPs/pull/841 (DRAFT)\n', 'interface ERC721Metadata {\n', '\n', '    /// @dev ERC-165 (draft) interface signature for ERC721\n', '    // bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = // 0x2a786f11\n', "    //     bytes4(keccak256('name()')) ^\n", "    //     bytes4(keccak256('symbol()')) ^\n", "    //     bytes4(keccak256('deedUri(uint256)'));\n", '\n', '    /// @notice A descriptive name for a collection of deeds managed by this\n', '    ///  contract\n', '    /// @dev Wallets and exchanges MAY display this to the end user.\n', '    function name() public pure returns (string _deedName);\n', '\n', '    /// @notice An abbreviated name for deeds managed by this contract\n', '    /// @dev Wallets and exchanges MAY display this to the end user.\n', '    function symbol() public pure returns (string _deedSymbol);\n', '\n', '    /// @notice A distinct URI (RFC 3986) for a given token.\n', '    /// @dev If:\n', '    ///  * The URI is a URL\n', '    ///  * The URL is accessible\n', '    ///  * The URL points to a valid JSON file format (ECMA-404 2nd ed.)\n', '    ///  * The JSON base element is an object\n', '    ///  then these names of the base element SHALL have special meaning:\n', '    ///  * "name": A string identifying the item to which `_deedId` grants\n', '    ///    ownership\n', '    ///  * "description": A string detailing the item to which `_deedId` grants\n', '    ///    ownership\n', '    ///  * "image": A URI pointing to a file of image/* mime type representing\n', '    ///    the item to which `_deedId` grants ownership\n', '    ///  Wallets and exchanges MAY display this to the end user.\n', '    ///  Consider making any images at a width between 320 and 1080 pixels and\n', '    ///  aspect ratio between 1.91:1 and 4:5 inclusive.\n', '    function deedUri(uint256 _deedId) external pure returns (string _uri);\n', '}\n', '\n', '\n', '/// @dev Implements access control to the DWorld contract.\n', 'contract DWorldAccessControl is Claimable, Pausable, CanReclaimToken {\n', '    address public cfoAddress;\n', '\n', '    function DWorldAccessControl() public {\n', '        // The creator of the contract is the initial CFO.\n', '        cfoAddress = msg.sender;\n', '    }\n', '    \n', '    /// @dev Access modifier for CFO-only functionality.\n', '    modifier onlyCFO() {\n', '        require(msg.sender == cfoAddress);\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the CFO. Only available to the current contract owner.\n', '    /// @param _newCFO The address of the new CFO.\n', '    function setCFO(address _newCFO) external onlyOwner {\n', '        require(_newCFO != address(0));\n', '\n', '        cfoAddress = _newCFO;\n', '    }\n', '}\n', '\n', '\n', '/// @dev Defines base data structures for DWorld.\n', 'contract DWorldBase is DWorldAccessControl {\n', '    using SafeMath for uint256;\n', '    \n', '    /// @dev All minted plots (array of plot identifiers). There are\n', '    /// 2^16 * 2^16 possible plots (covering the entire world), thus\n', '    /// 32 bits are required. This fits in a uint32. Storing\n', '    /// the identifiers as uint32 instead of uint256 makes storage\n', '    /// cheaper. (The impact of this in mappings is less noticeable,\n', '    /// and using uint32 in the mappings below actually *increases*\n', '    /// gas cost for minting).\n', '    uint32[] public plots;\n', '    \n', '    mapping (uint256 => address) identifierToOwner;\n', '    mapping (uint256 => address) identifierToApproved;\n', '    mapping (address => uint256) ownershipDeedCount;\n', '    \n', '    // Boolean indicating whether the plot was bought before the migration.\n', '    mapping (uint256 => bool) public identifierIsOriginal;\n', '    \n', "    /// @dev Event fired when a plot's data are changed. The plot\n", '    /// data are not stored in the contract directly, instead the\n', '    /// data are logged to the block. This gives significant\n', '    /// reductions in gas requirements (~75k for minting with data\n', '    /// instead of ~180k). However, it also means plot data are\n', '    /// not available from *within* other contracts.\n', '    event SetData(uint256 indexed deedId, string name, string description, string imageUrl, string infoUrl);\n', '    \n', '    /// @notice Get all minted plots.\n', '    function getAllPlots() external view returns(uint32[]) {\n', '        return plots;\n', '    }\n', '    \n', '    /// @dev Represent a 2D coordinate as a single uint.\n', '    /// @param x The x-coordinate.\n', '    /// @param y The y-coordinate.\n', '    function coordinateToIdentifier(uint256 x, uint256 y) public pure returns(uint256) {\n', '        require(validCoordinate(x, y));\n', '        \n', '        return (y << 16) + x;\n', '    }\n', '    \n', '    /// @dev Turn a single uint representation of a coordinate into its x and y parts.\n', '    /// @param identifier The uint representation of a coordinate.\n', '    function identifierToCoordinate(uint256 identifier) public pure returns(uint256 x, uint256 y) {\n', '        require(validIdentifier(identifier));\n', '    \n', '        y = identifier >> 16;\n', '        x = identifier - (y << 16);\n', '    }\n', '    \n', '    /// @dev Test whether the coordinate is valid.\n', '    /// @param x The x-part of the coordinate to test.\n', '    /// @param y The y-part of the coordinate to test.\n', '    function validCoordinate(uint256 x, uint256 y) public pure returns(bool) {\n', '        return x < 65536 && y < 65536; // 2^16\n', '    }\n', '    \n', '    /// @dev Test whether an identifier is valid.\n', '    /// @param identifier The identifier to test.\n', '    function validIdentifier(uint256 identifier) public pure returns(bool) {\n', '        return identifier < 4294967296; // 2^16 * 2^16\n', '    }\n', '    \n', "    /// @dev Set a plot's data.\n", '    /// @param identifier The identifier of the plot to set data for.\n', '    function _setPlotData(uint256 identifier, string name, string description, string imageUrl, string infoUrl) internal {\n', '        SetData(identifier, name, description, imageUrl, infoUrl);\n', '    }\n', '}\n', '\n', '\n', '/// @dev Holds deed functionality such as approving and transferring. Implements ERC721.\n', 'contract DWorldDeed is DWorldBase, ERC721, ERC721Metadata {\n', '    \n', '    /// @notice Name of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\n', '    function name() public pure returns (string _deedName) {\n', '        _deedName = "DWorld Plots";\n', '    }\n', '    \n', '    /// @notice Symbol of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\n', '    function symbol() public pure returns (string _deedSymbol) {\n', '        _deedSymbol = "DWP";\n', '    }\n', '    \n', '    /// @dev ERC-165 (draft) interface signature for itself\n', '    bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\n', "        bytes4(keccak256('supportsInterface(bytes4)'));\n", '\n', '    /// @dev ERC-165 (draft) interface signature for ERC721\n', '    bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = // 0xda671b9b\n', "        bytes4(keccak256('ownerOf(uint256)')) ^\n", "        bytes4(keccak256('countOfDeeds()')) ^\n", "        bytes4(keccak256('countOfDeedsByOwner(address)')) ^\n", "        bytes4(keccak256('deedOfOwnerByIndex(address,uint256)')) ^\n", "        bytes4(keccak256('approve(address,uint256)')) ^\n", "        bytes4(keccak256('takeOwnership(uint256)'));\n", '        \n', '    /// @dev ERC-165 (draft) interface signature for ERC721\n', '    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = // 0x2a786f11\n', "        bytes4(keccak256('name()')) ^\n", "        bytes4(keccak256('symbol()')) ^\n", "        bytes4(keccak256('deedUri(uint256)'));\n", '    \n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    /// Returns true for any standardized interfaces implemented by this contract.\n', '    /// (ERC-165 and ERC-721.)\n', '    function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\n', '        return (\n', '            (_interfaceID == INTERFACE_SIGNATURE_ERC165)\n', '            || (_interfaceID == INTERFACE_SIGNATURE_ERC721)\n', '            || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata)\n', '        );\n', '    }\n', '    \n', '    /// @dev Checks if a given address owns a particular plot.\n', '    /// @param _owner The address of the owner to check for.\n', '    /// @param _deedId The plot identifier to check for.\n', '    function _owns(address _owner, uint256 _deedId) internal view returns (bool) {\n', '        return identifierToOwner[_deedId] == _owner;\n', '    }\n', '    \n', '    /// @dev Approve a given address to take ownership of a deed.\n', '    /// @param _from The address approving taking ownership.\n', '    /// @param _to The address to approve taking ownership.\n', '    /// @param _deedId The identifier of the deed to give approval for.\n', '    function _approve(address _from, address _to, uint256 _deedId) internal {\n', '        identifierToApproved[_deedId] = _to;\n', '        \n', '        // Emit event.\n', '        Approval(_from, _to, _deedId);\n', '    }\n', '    \n', '    /// @dev Checks if a given address has approval to take ownership of a deed.\n', '    /// @param _claimant The address of the claimant to check for.\n', '    /// @param _deedId The identifier of the deed to check for.\n', '    function _approvedFor(address _claimant, uint256 _deedId) internal view returns (bool) {\n', '        return identifierToApproved[_deedId] == _claimant;\n', '    }\n', '    \n', '    /// @dev Assigns ownership of a specific deed to an address.\n', '    /// @param _from The address to transfer the deed from.\n', '    /// @param _to The address to transfer the deed to.\n', '    /// @param _deedId The identifier of the deed to transfer.\n', '    function _transfer(address _from, address _to, uint256 _deedId) internal {\n', '        // The number of plots is capped at 2^16 * 2^16, so this cannot\n', '        // be overflowed.\n', '        ownershipDeedCount[_to]++;\n', '        \n', '        // Transfer ownership.\n', '        identifierToOwner[_deedId] = _to;\n', '        \n', '        // When a new deed is minted, the _from address is 0x0, but we\n', '        // do not track deed ownership of 0x0.\n', '        if (_from != address(0)) {\n', '            ownershipDeedCount[_from]--;\n', '            \n', '            // Clear taking ownership approval.\n', '            delete identifierToApproved[_deedId];\n', '        }\n', '        \n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _deedId);\n', '    }\n', '    \n', '    // ERC 721 implementation\n', '    \n', '    /// @notice Returns the total number of deeds currently in existence.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function countOfDeeds() public view returns (uint256) {\n', '        return plots.length;\n', '    }\n', '    \n', '    /// @notice Returns the number of deeds owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    /// @dev Required for ERC-721 compliance\n', '    function countOfDeedsByOwner(address _owner) public view returns (uint256) {\n', '        return ownershipDeedCount[_owner];\n', '    }\n', '    \n', '    /// @notice Returns the address currently assigned ownership of a given deed.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _deedId) external view returns (address _owner) {\n', '        _owner = identifierToOwner[_deedId];\n', '\n', '        require(_owner != address(0));\n', '    }\n', '    \n', '    /// @notice Approve a given address to take ownership of a deed.\n', '    /// @param _to The address to approve taking owernship.\n', '    /// @param _deedId The identifier of the deed to give approval for.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(address _to, uint256 _deedId) external whenNotPaused {\n', '        uint256[] memory _deedIds = new uint256[](1);\n', '        _deedIds[0] = _deedId;\n', '        \n', '        approveMultiple(_to, _deedIds);\n', '    }\n', '    \n', '    /// @notice Approve a given address to take ownership of multiple deeds.\n', '    /// @param _to The address to approve taking ownership.\n', '    /// @param _deedIds The identifiers of the deeds to give approval for.\n', '    function approveMultiple(address _to, uint256[] _deedIds) public whenNotPaused {\n', '        // Ensure the sender is not approving themselves.\n', '        require(msg.sender != _to);\n', '    \n', '        for (uint256 i = 0; i < _deedIds.length; i++) {\n', '            uint256 _deedId = _deedIds[i];\n', '            \n', '            // Require the sender is the owner of the deed.\n', '            require(_owns(msg.sender, _deedId));\n', '            \n', '            // Perform the approval.\n', '            _approve(msg.sender, _to, _deedId);\n', '        }\n', '    }\n', '    \n', '    /// @notice Transfer a deed to another address. If transferring to a smart\n', '    /// contract be VERY CAREFUL to ensure that it is aware of ERC-721, or your\n', '    /// deed may be lost forever.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _deedId The identifier of the deed to transfer.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(address _to, uint256 _deedId) external whenNotPaused {\n', '        uint256[] memory _deedIds = new uint256[](1);\n', '        _deedIds[0] = _deedId;\n', '        \n', '        transferMultiple(_to, _deedIds);\n', '    }\n', '    \n', '    /// @notice Transfers multiple deeds to another address. If transferring to\n', '    /// a smart contract be VERY CAREFUL to ensure that it is aware of ERC-721,\n', '    /// or your deeds may be lost forever.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _deedIds The identifiers of the deeds to transfer.\n', '    function transferMultiple(address _to, uint256[] _deedIds) public whenNotPaused {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        \n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        require(_to != address(this));\n', '    \n', '        for (uint256 i = 0; i < _deedIds.length; i++) {\n', '            uint256 _deedId = _deedIds[i];\n', '            \n', '            // One can only transfer their own plots.\n', '            require(_owns(msg.sender, _deedId));\n', '\n', '            // Transfer ownership\n', '            _transfer(msg.sender, _to, _deedId);\n', '        }\n', '    }\n', '    \n', '    /// @notice Transfer a deed owned by another address, for which the calling\n', '    /// address has previously been granted transfer approval by the owner.\n', '    /// @param _deedId The identifier of the deed to be transferred.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function takeOwnership(uint256 _deedId) external whenNotPaused {\n', '        uint256[] memory _deedIds = new uint256[](1);\n', '        _deedIds[0] = _deedId;\n', '        \n', '        takeOwnershipMultiple(_deedIds);\n', '    }\n', '    \n', '    /// @notice Transfer multiple deeds owned by another address, for which the\n', '    /// calling address has previously been granted transfer approval by the owner.\n', '    /// @param _deedIds The identifier of the deed to be transferred.\n', '    function takeOwnershipMultiple(uint256[] _deedIds) public whenNotPaused {\n', '        for (uint256 i = 0; i < _deedIds.length; i++) {\n', '            uint256 _deedId = _deedIds[i];\n', '            address _from = identifierToOwner[_deedId];\n', '            \n', '            // Check for transfer approval\n', '            require(_approvedFor(msg.sender, _deedId));\n', '\n', '            // Reassign ownership (also clears pending approvals and emits Transfer event).\n', '            _transfer(_from, msg.sender, _deedId);\n', '        }\n', '    }\n', '    \n', '    /// @notice Returns a list of all deed identifiers assigned to an address.\n', '    /// @param _owner The owner whose deeds we are interested in.\n', "    /// @dev This method MUST NEVER be called by smart contract code. It's very\n", '    /// expensive and is not supported in contract-to-contract calls as it returns\n', '    /// a dynamic array (only supported for web3 calls).\n', '    function deedsOfOwner(address _owner) external view returns(uint256[]) {\n', '        uint256 deedCount = countOfDeedsByOwner(_owner);\n', '\n', '        if (deedCount == 0) {\n', '            // Return an empty array.\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](deedCount);\n', '            uint256 totalDeeds = countOfDeeds();\n', '            uint256 resultIndex = 0;\n', '            \n', '            for (uint256 deedNumber = 0; deedNumber < totalDeeds; deedNumber++) {\n', '                uint256 identifier = plots[deedNumber];\n', '                if (identifierToOwner[identifier] == _owner) {\n', '                    result[resultIndex] = identifier;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '    \n', '    /// @notice Returns a deed identifier of the owner at the given index.\n', '    /// @param _owner The address of the owner we want to get a deed for.\n', '    /// @param _index The index of the deed we want.\n', '    function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n', '        // The index should be valid.\n', '        require(_index < countOfDeedsByOwner(_owner));\n', '\n', "        // Loop through all plots, accounting the number of plots of the owner we've seen.\n", '        uint256 seen = 0;\n', '        uint256 totalDeeds = countOfDeeds();\n', '        \n', '        for (uint256 deedNumber = 0; deedNumber < totalDeeds; deedNumber++) {\n', '            uint256 identifier = plots[deedNumber];\n', '            if (identifierToOwner[identifier] == _owner) {\n', '                if (seen == _index) {\n', '                    return identifier;\n', '                }\n', '                \n', '                seen++;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /// @notice Returns an (off-chain) metadata url for the given deed.\n', '    /// @param _deedId The identifier of the deed to get the metadata\n', '    /// url for.\n', '    /// @dev Implementation of optional ERC-721 functionality.\n', '    function deedUri(uint256 _deedId) external pure returns (string uri) {\n', '        require(validIdentifier(_deedId));\n', '    \n', '        var (x, y) = identifierToCoordinate(_deedId);\n', '    \n', '        // Maximum coordinate length in decimals is 5 (65535)\n', '        uri = "https://dworld.io/plot/xxxxx/xxxxx";\n', '        bytes memory _uri = bytes(uri);\n', '        \n', '        for (uint256 i = 0; i < 5; i++) {\n', '            _uri[27 - i] = byte(48 + (x / 10 ** i) % 10);\n', '            _uri[33 - i] = byte(48 + (y / 10 ** i) % 10);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @dev Holds functionality for finance related to plots.\n', 'contract DWorldFinance is DWorldDeed {\n', '    /// Total amount of Ether yet to be paid to auction beneficiaries.\n', '    uint256 public outstandingEther = 0 ether;\n', '    \n', '    /// Amount of Ether yet to be paid per beneficiary.\n', '    mapping (address => uint256) public addressToEtherOwed;\n', '    \n', '    /// Base price for unclaimed plots.\n', '    uint256 public unclaimedPlotPrice = 0.0125 ether;\n', '    \n', '    /// Dividend per plot surrounding a new claim, in 1/1000th of percentages\n', '    /// of the base unclaimed plot price.\n', '    uint256 public claimDividendPercentage = 50000;\n', '    \n', '    /// Percentage of the buyout price that goes towards dividends.\n', '    uint256 public buyoutDividendPercentage = 5000;\n', '    \n', '    /// Buyout fee in 1/1000th of a percentage.\n', '    uint256 public buyoutFeePercentage = 3500;\n', '    \n', '    /// Number of free claims per address.\n', '    mapping (address => uint256) freeClaimAllowance;\n', '    \n', '    /// Initial price paid for a plot.\n', '    mapping (uint256 => uint256) public initialPricePaid;\n', '    \n', '    /// Current plot price.\n', '    mapping (uint256 => uint256) public identifierToBuyoutPrice;\n', '    \n', '    /// Boolean indicating whether the plot has been bought out at least once.\n', '    mapping (uint256 => bool) identifierToBoughtOutOnce;\n', '    \n', '    /// @dev Event fired when dividend is paid for a new plot claim.\n', '    event ClaimDividend(address indexed from, address indexed to, uint256 deedIdFrom, uint256 indexed deedIdTo, uint256 dividend);\n', '    \n', '    /// @dev Event fired when a buyout is performed.\n', '    event Buyout(address indexed buyer, address indexed seller, uint256 indexed deedId, uint256 winnings, uint256 totalCost, uint256 newPrice);\n', '    \n', '    /// @dev Event fired when dividend is paid for a buyout.\n', '    event BuyoutDividend(address indexed from, address indexed to, uint256 deedIdFrom, uint256 indexed deedIdTo, uint256 dividend);\n', '    \n', '    /// @dev Event fired when the buyout price is manually changed for a plot.\n', '    event SetBuyoutPrice(uint256 indexed deedId, uint256 newPrice);\n', '    \n', '    /// @dev The time after which buyouts will be enabled. Set in the DWorldCore constructor.\n', '    uint256 public buyoutsEnabledFromTimestamp;\n', '    \n', '    /// @notice Sets the new price for unclaimed plots.\n', '    /// @param _unclaimedPlotPrice The new price for unclaimed plots.\n', '    function setUnclaimedPlotPrice(uint256 _unclaimedPlotPrice) external onlyCFO {\n', '        unclaimedPlotPrice = _unclaimedPlotPrice;\n', '    }\n', '    \n', '    /// @notice Sets the new dividend percentage for unclaimed plots.\n', '    /// @param _claimDividendPercentage The new dividend percentage for unclaimed plots.\n', '    function setClaimDividendPercentage(uint256 _claimDividendPercentage) external onlyCFO {\n', '        // Claim dividend percentage must be 10% at the least.\n', '        // Claim dividend percentage may be 100% at the most.\n', '        require(10000 <= _claimDividendPercentage && _claimDividendPercentage <= 100000);\n', '        \n', '        claimDividendPercentage = _claimDividendPercentage;\n', '    }\n', '    \n', '    /// @notice Sets the new dividend percentage for buyouts.\n', '    /// @param _buyoutDividendPercentage The new dividend percentage for buyouts.\n', '    function setBuyoutDividendPercentage(uint256 _buyoutDividendPercentage) external onlyCFO {\n', '        // Buyout dividend must be 2% at the least.\n', '        // Buyout dividend percentage may be 12.5% at the most.\n', '        require(2000 <= _buyoutDividendPercentage && _buyoutDividendPercentage <= 12500);\n', '        \n', '        buyoutDividendPercentage = _buyoutDividendPercentage;\n', '    }\n', '    \n', '    /// @notice Sets the new fee percentage for buyouts.\n', '    /// @param _buyoutFeePercentage The new fee percentage for buyouts.\n', '    function setBuyoutFeePercentage(uint256 _buyoutFeePercentage) external onlyCFO {\n', '        // Buyout fee may be 5% at the most.\n', '        require(0 <= _buyoutFeePercentage && _buyoutFeePercentage <= 5000);\n', '        \n', '        buyoutFeePercentage = _buyoutFeePercentage;\n', '    }\n', '    \n', '    /// @notice The claim dividend to be paid for each adjacent plot, and\n', '    /// as a flat dividend for each buyout.\n', '    function claimDividend() public view returns (uint256) {\n', '        return unclaimedPlotPrice.mul(claimDividendPercentage).div(100000);\n', '    }\n', '    \n', '    /// @notice Set the free claim allowance for an address.\n', '    /// @param addr The address to set the free claim allowance for.\n', '    /// @param allowance The free claim allowance to set.\n', '    function setFreeClaimAllowance(address addr, uint256 allowance) external onlyCFO {\n', '        freeClaimAllowance[addr] = allowance;\n', '    }\n', '    \n', '    /// @notice Get the free claim allowance of an address.\n', '    /// @param addr The address to get the free claim allowance of.\n', '    function freeClaimAllowanceOf(address addr) external view returns (uint256) {\n', '        return freeClaimAllowance[addr];\n', '    }\n', '    \n', '    /// @dev Assign balance to an account.\n', '    /// @param addr The address to assign balance to.\n', '    /// @param amount The amount to assign.\n', '    function _assignBalance(address addr, uint256 amount) internal {\n', '        addressToEtherOwed[addr] = addressToEtherOwed[addr].add(amount);\n', '        outstandingEther = outstandingEther.add(amount);\n', '    }\n', '    \n', '    /// @dev Find the _claimed_ plots surrounding a plot.\n', '    /// @param _deedId The identifier of the plot to get the surrounding plots for.\n', '    function _claimedSurroundingPlots(uint256 _deedId) internal view returns (uint256[] memory) {\n', '        var (x, y) = identifierToCoordinate(_deedId);\n', '        \n', '        // Find all claimed surrounding plots.\n', '        uint256 claimed = 0;\n', '        \n', '        // Create memory buffer capable of holding all plots.\n', '        uint256[] memory _plots = new uint256[](8);\n', '        \n', '        // Loop through all neighbors.\n', '        for (int256 dx = -1; dx <= 1; dx++) {\n', '            for (int256 dy = -1; dy <= 1; dy++) {\n', '                if (dx == 0 && dy == 0) {\n', '                    // Skip the center (i.e., the plot itself).\n', '                    continue;\n', '                }\n', '                \n', '                // Get the coordinates of this neighboring identifier.\n', '                uint256 neighborIdentifier = coordinateToIdentifier(\n', '                    uint256(int256(x) + dx) % 65536,\n', '                    uint256(int256(y) + dy) % 65536\n', '                );\n', '                \n', '                if (identifierToOwner[neighborIdentifier] != 0x0) {\n', '                    _plots[claimed] = neighborIdentifier;\n', '                    claimed++;\n', '                }\n', '            }\n', '        }\n', '        \n', '        // Memory arrays cannot be resized, so copy all\n', '        // plots from the buffer to the plot array.\n', '        uint256[] memory plots = new uint256[](claimed);\n', '        \n', '        for (uint256 i = 0; i < claimed; i++) {\n', '            plots[i] = _plots[i];\n', '        }\n', '        \n', '        return plots;\n', '    }\n', '    \n', '    /// @dev Assign claim dividend to an address.\n', '    /// @param _from The address who paid the dividend.\n', '    /// @param _to The dividend beneficiary.\n', '    /// @param _deedIdFrom The identifier of the deed the dividend is being paid for.\n', '    /// @param _deedIdTo The identifier of the deed the dividend is being paid to.\n', '    function _assignClaimDividend(address _from, address _to, uint256 _deedIdFrom, uint256 _deedIdTo) internal {\n', '        uint256 _claimDividend = claimDividend();\n', '        \n', '        // Trigger event.\n', '        ClaimDividend(_from, _to, _deedIdFrom, _deedIdTo, _claimDividend);\n', '        \n', '        // Assign the dividend.\n', '        _assignBalance(_to, _claimDividend);\n', '    }\n', '\n', '    /// @dev Calculate and assign the dividend payable for the new plot claim.\n', '    /// A new claim pays dividends to all existing surrounding plots.\n', '    /// @param _deedId The identifier of the new plot to calculate and assign dividends for.\n', '    /// Assumed to be valid.\n', '    function _calculateAndAssignClaimDividends(uint256 _deedId)\n', '        internal\n', '        returns (uint256 totalClaimDividend)\n', '    {\n', '        // Get existing surrounding plots.\n', '        uint256[] memory claimedSurroundingPlots = _claimedSurroundingPlots(_deedId);\n', '        \n', '        // Keep track of the claim dividend.\n', '        uint256 _claimDividend = claimDividend();\n', '        totalClaimDividend = 0;\n', '        \n', '        // Assign claim dividend.\n', '        for (uint256 i = 0; i < claimedSurroundingPlots.length; i++) {\n', '            if (identifierToOwner[claimedSurroundingPlots[i]] != msg.sender) {\n', '                totalClaimDividend = totalClaimDividend.add(_claimDividend);\n', '                _assignClaimDividend(msg.sender, identifierToOwner[claimedSurroundingPlots[i]], _deedId, claimedSurroundingPlots[i]);\n', '            }\n', '        }\n', '    }\n', '    \n', '    /// @dev Calculate the next buyout price given the current total buyout cost.\n', '    /// @param totalCost The current total buyout cost.\n', '    function nextBuyoutPrice(uint256 totalCost) public pure returns (uint256) {\n', '        if (totalCost < 0.05 ether) {\n', '            return totalCost * 2;\n', '        } else if (totalCost < 0.2 ether) {\n', '            return totalCost * 170 / 100; // * 1.7\n', '        } else if (totalCost < 0.5 ether) {\n', '            return totalCost * 150 / 100; // * 1.5\n', '        } else {\n', '            return totalCost.mul(125).div(100); // * 1.25\n', '        }\n', '    }\n', '    \n', '    /// @notice Get the buyout cost for a given plot.\n', '    /// @param _deedId The identifier of the plot to get the buyout cost for.\n', '    function buyoutCost(uint256 _deedId) external view returns (uint256) {\n', '        // The current buyout price.\n', '        uint256 price = identifierToBuyoutPrice[_deedId];\n', '    \n', '        // Get existing surrounding plots.\n', '        uint256[] memory claimedSurroundingPlots = _claimedSurroundingPlots(_deedId);\n', '    \n', '        // The total cost is the price plus flat rate dividends based on claim dividends.\n', '        uint256 flatDividends = claimDividend().mul(claimedSurroundingPlots.length);\n', '        return price.add(flatDividends);\n', '    }\n', '    \n', '    /// @dev Assign the proceeds of the buyout.\n', '    /// @param _deedId The identifier of the plot that is being bought out.\n', '    function _assignBuyoutProceeds(\n', '        address currentOwner,\n', '        uint256 _deedId,\n', '        uint256[] memory claimedSurroundingPlots,\n', '        uint256 currentOwnerWinnings,\n', '        uint256 totalDividendPerBeneficiary,\n', '        uint256 totalCost\n', '    )\n', '        internal\n', '    {\n', "        // Calculate and assign the current owner's winnings.\n", '        \n', '        Buyout(msg.sender, currentOwner, _deedId, currentOwnerWinnings, totalCost, nextBuyoutPrice(totalCost));\n', '        _assignBalance(currentOwner, currentOwnerWinnings);\n', '        \n', '        // Assign dividends to owners of surrounding plots.\n', '        for (uint256 i = 0; i < claimedSurroundingPlots.length; i++) {\n', '            address beneficiary = identifierToOwner[claimedSurroundingPlots[i]];\n', '            BuyoutDividend(msg.sender, beneficiary, _deedId, claimedSurroundingPlots[i], totalDividendPerBeneficiary);\n', '            _assignBalance(beneficiary, totalDividendPerBeneficiary);\n', '        }\n', '    }\n', '    \n', '    /// @dev Calculate and assign the proceeds from the buyout.\n', '    /// @param currentOwner The current owner of the plot that is being bought out.\n', '    /// @param _deedId The identifier of the plot that is being bought out.\n', '    /// @param claimedSurroundingPlots The surrounding plots that have been claimed.\n', '    function _calculateAndAssignBuyoutProceeds(address currentOwner, uint256 _deedId, uint256[] memory claimedSurroundingPlots)\n', '        internal \n', '        returns (uint256 totalCost)\n', '    {\n', '        // The current price.\n', '        uint256 price = identifierToBuyoutPrice[_deedId];\n', '    \n', '        // The total cost is the price plus flat rate dividends based on claim dividends.\n', '        uint256 flatDividends = claimDividend().mul(claimedSurroundingPlots.length);\n', '        totalCost = price.add(flatDividends);\n', '        \n', '        // Calculate the variable dividends based on the buyout price\n', '        // (only to be paid if there are surrounding plots).\n', '        uint256 variableDividends = price.mul(buyoutDividendPercentage).div(100000);\n', '        \n', '        // Calculate fees.\n', '        uint256 fee = price.mul(buyoutFeePercentage).div(100000);\n', '        \n', '        // Calculate and assign buyout proceeds.\n', '        uint256 currentOwnerWinnings = price.sub(fee);\n', '        \n', '        uint256 totalDividendPerBeneficiary;\n', '        if (claimedSurroundingPlots.length > 0) {\n', '            // If there are surrounding plots, variable dividend is to be paid\n', '            // based on the buyout price..\n', '            currentOwnerWinnings = currentOwnerWinnings.sub(variableDividends);\n', '            \n', '            // Calculate the dividend per surrounding plot.\n', '            totalDividendPerBeneficiary = flatDividends.add(variableDividends) / claimedSurroundingPlots.length;\n', '        }\n', '        \n', '        _assignBuyoutProceeds(\n', '            currentOwner,\n', '            _deedId,\n', '            claimedSurroundingPlots,\n', '            currentOwnerWinnings,\n', '            totalDividendPerBeneficiary,\n', '            totalCost\n', '        );\n', '    }\n', '    \n', '    /// @notice Buy the current owner out of the plot.\n', '    function buyout(uint256 _deedId) external payable whenNotPaused {\n', '        buyoutWithData(_deedId, "", "", "", "");\n', '    }\n', '    \n', '    /// @notice Buy the current owner out of the plot.\n', '    function buyoutWithData(uint256 _deedId, string name, string description, string imageUrl, string infoUrl)\n', '        public\n', '        payable\n', '        whenNotPaused \n', '    {\n', '        // Buyouts must be enabled.\n', '        require(buyoutsEnabledFromTimestamp <= block.timestamp);\n', '    \n', '        address currentOwner = identifierToOwner[_deedId];\n', '    \n', '        // The plot must be owned before it can be bought out.\n', '        require(currentOwner != 0x0);\n', '        \n', '        // Get existing surrounding plots.\n', '        uint256[] memory claimedSurroundingPlots = _claimedSurroundingPlots(_deedId);\n', '        \n', '        // Assign the buyout proceeds and retrieve the total cost.\n', '        uint256 totalCost = _calculateAndAssignBuyoutProceeds(currentOwner, _deedId, claimedSurroundingPlots);\n', '        \n', '        // Ensure the message has enough value.\n', '        require(msg.value >= totalCost);\n', '        \n', '        // Transfer the plot.\n', '        _transfer(currentOwner, msg.sender, _deedId);\n', '        \n', '        // Set the plot data\n', '        SetData(_deedId, name, description, imageUrl, infoUrl);\n', '        \n', '        // Calculate and set the new plot price.\n', '        identifierToBuyoutPrice[_deedId] = nextBuyoutPrice(totalCost);\n', '        \n', '        // Indicate the plot has been bought out at least once\n', '        if (!identifierToBoughtOutOnce[_deedId]) {\n', '            identifierToBoughtOutOnce[_deedId] = true;\n', '        }\n', '        \n', '        // Calculate the excess Ether sent.\n', '        // msg.value is greater than or equal to totalCost,\n', '        // so this cannot underflow.\n', '        uint256 excess = msg.value - totalCost;\n', '        \n', '        if (excess > 0) {\n', '            // Refund any excess Ether (not susceptible to re-entry attack, as\n', '            // the owner is assigned before the transfer takes place).\n', '            msg.sender.transfer(excess);\n', '        }\n', '    }\n', '    \n', '    /// @notice Calculate the maximum initial buyout price for a plot.\n', '    /// @param _deedId The identifier of the plot to get the maximum initial buyout price for.\n', '    function maximumInitialBuyoutPrice(uint256 _deedId) public view returns (uint256) {\n', '        // The initial buyout price can be set to 4x the initial plot price\n', '        // (or 100x for the original pre-migration plots).\n', '        uint256 mul = 4;\n', '        \n', '        if (identifierIsOriginal[_deedId]) {\n', '            mul = 100;\n', '        }\n', '        \n', '        return initialPricePaid[_deedId].mul(mul);\n', '    }\n', '    \n', '    /// @notice Test whether a buyout price is valid.\n', '    /// @param _deedId The identifier of the plot to test the buyout price for.\n', '    /// @param price The buyout price to test.\n', '    function validInitialBuyoutPrice(uint256 _deedId, uint256 price) public view returns (bool) {        \n', '        return (price >= unclaimedPlotPrice && price <= maximumInitialBuyoutPrice(_deedId));\n', '    }\n', '    \n', '    /// @notice Manually set the initial buyout price of a plot.\n', '    /// @param _deedId The identifier of the plot to set the buyout price for.\n', '    /// @param price The value to set the buyout price to.\n', '    function setInitialBuyoutPrice(uint256 _deedId, uint256 price) public whenNotPaused {\n', '        // One can only set the buyout price of their own plots.\n', '        require(_owns(msg.sender, _deedId));\n', '        \n', '        // The initial buyout price can only be set if the plot has never been bought out before.\n', '        require(!identifierToBoughtOutOnce[_deedId]);\n', '        \n', '        // The buyout price must be valid.\n', '        require(validInitialBuyoutPrice(_deedId, price));\n', '        \n', '        // Set the buyout price.\n', '        identifierToBuyoutPrice[_deedId] = price;\n', '        \n', '        // Trigger the buyout price event.\n', '        SetBuyoutPrice(_deedId, price);\n', '    }\n', '}\n', '\n', '\n', '/// @dev Holds functionality for minting new plot deeds.\n', 'contract DWorldMinting is DWorldFinance {       \n', '    /// @notice Buy an unclaimed plot.\n', '    /// @param _deedId The unclaimed plot to buy.\n', '    /// @param _buyoutPrice The initial buyout price to set on the plot.\n', '    function claimPlot(uint256 _deedId, uint256 _buyoutPrice) external payable whenNotPaused {\n', '        claimPlotWithData(_deedId, _buyoutPrice, "", "", "", "");\n', '    }\n', '       \n', '    /// @notice Buy an unclaimed plot.\n', '    /// @param _deedId The unclaimed plot to buy.\n', '    /// @param _buyoutPrice The initial buyout price to set on the plot.\n', '    /// @param name The name to give the plot.\n', '    /// @param description The description to add to the plot.\n', '    /// @param imageUrl The image url for the plot.\n', '    /// @param infoUrl The info url for the plot.\n', '    function claimPlotWithData(uint256 _deedId, uint256 _buyoutPrice, string name, string description, string imageUrl, string infoUrl) public payable whenNotPaused {\n', '        uint256[] memory _deedIds = new uint256[](1);\n', '        _deedIds[0] = _deedId;\n', '        \n', '        claimPlotMultipleWithData(_deedIds, _buyoutPrice, name, description, imageUrl, infoUrl);\n', '    }\n', '    \n', '    /// @notice Buy unclaimed plots.\n', '    /// @param _deedIds The unclaimed plots to buy.\n', '    /// @param _buyoutPrice The initial buyout price to set on the plot.\n', '    function claimPlotMultiple(uint256[] _deedIds, uint256 _buyoutPrice) external payable whenNotPaused {\n', '        claimPlotMultipleWithData(_deedIds, _buyoutPrice, "", "", "", "");\n', '    }\n', '    \n', '    /// @notice Buy unclaimed plots.\n', '    /// @param _deedIds The unclaimed plots to buy.\n', '    /// @param _buyoutPrice The initial buyout price to set on the plot.\n', '    /// @param name The name to give the plots.\n', '    /// @param description The description to add to the plots.\n', '    /// @param imageUrl The image url for the plots.\n', '    /// @param infoUrl The info url for the plots.\n', '    function claimPlotMultipleWithData(uint256[] _deedIds, uint256 _buyoutPrice, string name, string description, string imageUrl, string infoUrl) public payable whenNotPaused {\n', '        uint256 buyAmount = _deedIds.length;\n', '        uint256 etherRequired;\n', '        if (freeClaimAllowance[msg.sender] > 0) {\n', '            // The sender has a free claim allowance.\n', '            if (freeClaimAllowance[msg.sender] > buyAmount) {\n', '                // Subtract from allowance.\n', '                freeClaimAllowance[msg.sender] -= buyAmount;\n', '                \n', '                // No ether is required.\n', '                etherRequired = 0;\n', '            } else {\n', '                uint256 freeAmount = freeClaimAllowance[msg.sender];\n', '                \n', '                // The full allowance has been used.\n', '                delete freeClaimAllowance[msg.sender];\n', '                \n', '                // The subtraction cannot underflow, as freeAmount <= buyAmount.\n', '                etherRequired = unclaimedPlotPrice.mul(buyAmount - freeAmount);\n', '            }\n', '        } else {\n', '            // The sender does not have a free claim allowance.\n', '            etherRequired = unclaimedPlotPrice.mul(buyAmount);\n', '        }\n', '        \n', '        uint256 offset = plots.length;\n', '        \n', '        // Allocate additional memory for the plots array\n', '        // (this is more efficient than .push-ing each individual\n', '        // plot, as that requires multiple dynamic allocations).\n', '        plots.length = plots.length.add(_deedIds.length);\n', '        \n', '        for (uint256 i = 0; i < _deedIds.length; i++) { \n', '            uint256 _deedId = _deedIds[i];\n', '            require(validIdentifier(_deedId));\n', '            \n', '            // The plot must be unowned (a plot deed cannot be transferred to\n', '            // 0x0, so once a plot is claimed it will always be owned by a\n', '            // non-zero address).\n', '            require(identifierToOwner[_deedId] == address(0));\n', '            \n', '            // Create the plot\n', '            plots[offset + i] = uint32(_deedId);\n', '            \n', '            // Transfer the new plot to the sender.\n', '            _transfer(address(0), msg.sender, _deedId);\n', '            \n', '            // Set the plot data.\n', '            _setPlotData(_deedId, name, description, imageUrl, infoUrl);\n', '            \n', '            // Calculate and assign claim dividends.\n', '            uint256 claimDividends = _calculateAndAssignClaimDividends(_deedId);\n', '            etherRequired = etherRequired.add(claimDividends);\n', '            \n', '            // Set the initial price paid for the plot.\n', '            initialPricePaid[_deedId] = unclaimedPlotPrice.add(claimDividends);\n', '            \n', '            // Set the initial buyout price. Throws if it does not succeed.\n', '            setInitialBuyoutPrice(_deedId, _buyoutPrice);\n', '        }\n', '        \n', '        // Ensure enough ether is supplied.\n', '        require(msg.value >= etherRequired);\n', '        \n', '        // Calculate the excess ether sent\n', '        // msg.value is greater than or equal to etherRequired,\n', '        // so this cannot underflow.\n', '        uint256 excess = msg.value - etherRequired;\n', '        \n', '        if (excess > 0) {\n', '            // Refund any excess ether (not susceptible to re-entry attack, as\n', '            // the owner is assigned before the transfer takes place).\n', '            msg.sender.transfer(excess);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @title The internal clock auction functionality.\n', "/// Inspired by CryptoKitties' clock auction\n", 'contract ClockAuctionBase {\n', '\n', '    // Address of the ERC721 contract this auction is linked to.\n', '    ERC721 public deedContract;\n', '\n', '    // Fee per successful auction in 1/1000th of a percentage.\n', '    uint256 public fee;\n', '    \n', '    // Total amount of ether yet to be paid to auction beneficiaries.\n', '    uint256 public outstandingEther = 0 ether;\n', '    \n', '    // Amount of ether yet to be paid per beneficiary.\n', '    mapping (address => uint256) public addressToEtherOwed;\n', '    \n', '    /// @dev Represents a deed auction.\n', '    /// Care has been taken to ensure the auction fits in\n', '    /// two 256-bit words.\n', '    struct Auction {\n', '        address seller;\n', '        uint128 startPrice;\n', '        uint128 endPrice;\n', '        uint64 duration;\n', '        uint64 startedAt;\n', '    }\n', '\n', '    mapping (uint256 => Auction) identifierToAuction;\n', '    \n', '    // Events\n', '    event AuctionCreated(address indexed seller, uint256 indexed deedId, uint256 startPrice, uint256 endPrice, uint256 duration);\n', '    event AuctionSuccessful(address indexed buyer, uint256 indexed deedId, uint256 totalPrice);\n', '    event AuctionCancelled(uint256 indexed deedId);\n', '    \n', '    /// @dev Modifier to check whether the value can be stored in a 64 bit uint.\n', '    modifier fitsIn64Bits(uint256 _value) {\n', '        require (_value == uint256(uint64(_value)));\n', '        _;\n', '    }\n', '    \n', '    /// @dev Modifier to check whether the value can be stored in a 128 bit uint.\n', '    modifier fitsIn128Bits(uint256 _value) {\n', '        require (_value == uint256(uint128(_value)));\n', '        _;\n', '    }\n', '    \n', '    function ClockAuctionBase(address _deedContractAddress, uint256 _fee) public {\n', '        deedContract = ERC721(_deedContractAddress);\n', '        \n', '        // Contract must indicate support for ERC721 through its interface signature.\n', '        require(deedContract.supportsInterface(0xda671b9b));\n', '        \n', '        // Fee must be between 0 and 100%.\n', '        require(0 <= _fee && _fee <= 100000);\n', '        fee = _fee;\n', '    }\n', '    \n', '    /// @dev Checks whether the given auction is active.\n', '    /// @param auction The auction to check for activity.\n', '    function _activeAuction(Auction storage auction) internal view returns (bool) {\n', '        return auction.startedAt > 0;\n', '    }\n', '    \n', '    /// @dev Put the deed into escrow, thereby taking ownership of it.\n', '    /// @param _deedId The identifier of the deed to place into escrow.\n', '    function _escrow(uint256 _deedId) internal {\n', '        // Throws if the transfer fails\n', '        deedContract.takeOwnership(_deedId);\n', '    }\n', '    \n', '    /// @dev Create the auction.\n', '    /// @param _deedId The identifier of the deed to create the auction for.\n', '    /// @param auction The auction to create.\n', '    function _createAuction(uint256 _deedId, Auction auction) internal {\n', '        // Add the auction to the auction mapping.\n', '        identifierToAuction[_deedId] = auction;\n', '        \n', '        // Trigger auction created event.\n', '        AuctionCreated(auction.seller, _deedId, auction.startPrice, auction.endPrice, auction.duration);\n', '    }\n', '    \n', '    /// @dev Bid on an auction.\n', '    /// @param _buyer The address of the buyer.\n', '    /// @param _value The value sent by the sender (in ether).\n', '    /// @param _deedId The identifier of the deed to bid on.\n', '    function _bid(address _buyer, uint256 _value, uint256 _deedId) internal {\n', '        Auction storage auction = identifierToAuction[_deedId];\n', '        \n', '        // The auction must be active.\n', '        require(_activeAuction(auction));\n', '        \n', "        // Calculate the auction's current price.\n", '        uint256 price = _currentPrice(auction);\n', '        \n', '        // Make sure enough funds were sent.\n', '        require(_value >= price);\n', '        \n', '        address seller = auction.seller;\n', '    \n', '        if (price > 0) {\n', '            uint256 totalFee = _calculateFee(price);\n', '            uint256 proceeds = price - totalFee;\n', '            \n', '            // Assign the proceeds to the seller.\n', '            // We do not send the proceeds directly, as to prevent\n', '            // malicious sellers from denying auctions (and burning\n', "            // the buyer's gas).\n", '            _assignProceeds(seller, proceeds);\n', '        }\n', '        \n', '        AuctionSuccessful(_buyer, _deedId, price);\n', '        \n', '        // The bid was won!\n', '        _winBid(seller, _buyer, _deedId, price);\n', '        \n', '        // Remove the auction (we do this at the end, as\n', '        // winBid might require some additional information\n', '        // that will be removed when _removeAuction is\n', '        // called. As we do not transfer funds here, we do\n', '        // not have to worry about re-entry attacks.\n', '        _removeAuction(_deedId);\n', '    }\n', '\n', '    /// @dev Perform the bid win logic (in this case: transfer the deed).\n', '    /// @param _seller The address of the seller.\n', '    /// @param _winner The address of the winner.\n', '    /// @param _deedId The identifier of the deed.\n', '    /// @param _price The price the auction was bought at.\n', '    function _winBid(address _seller, address _winner, uint256 _deedId, uint256 _price) internal {\n', '        _transfer(_winner, _deedId);\n', '    }\n', '    \n', '    /// @dev Cancel an auction.\n', '    /// @param _deedId The identifier of the deed for which the auction should be cancelled.\n', '    /// @param auction The auction to cancel.\n', '    function _cancelAuction(uint256 _deedId, Auction auction) internal {\n', '        // Remove the auction\n', '        _removeAuction(_deedId);\n', '        \n', '        // Transfer the deed back to the seller\n', '        _transfer(auction.seller, _deedId);\n', '        \n', '        // Trigger auction cancelled event.\n', '        AuctionCancelled(_deedId);\n', '    }\n', '    \n', '    /// @dev Remove an auction.\n', '    /// @param _deedId The identifier of the deed for which the auction should be removed.\n', '    function _removeAuction(uint256 _deedId) internal {\n', '        delete identifierToAuction[_deedId];\n', '    }\n', '    \n', '    /// @dev Transfer a deed owned by this contract to another address.\n', '    /// @param _to The address to transfer the deed to.\n', '    /// @param _deedId The identifier of the deed.\n', '    function _transfer(address _to, uint256 _deedId) internal {\n', '        // Throws if the transfer fails\n', '        deedContract.transfer(_to, _deedId);\n', '    }\n', '    \n', '    /// @dev Assign proceeds to an address.\n', '    /// @param _to The address to assign proceeds to.\n', '    /// @param _value The proceeds to assign.\n', '    function _assignProceeds(address _to, uint256 _value) internal {\n', '        outstandingEther += _value;\n', '        addressToEtherOwed[_to] += _value;\n', '    }\n', '    \n', '    /// @dev Calculate the current price of an auction.\n', '    function _currentPrice(Auction storage _auction) internal view returns (uint256) {\n', '        require(now >= _auction.startedAt);\n', '        \n', '        uint256 secondsPassed = now - _auction.startedAt;\n', '        \n', '        if (secondsPassed >= _auction.duration) {\n', '            return _auction.endPrice;\n', '        } else {\n', '            // Negative if the end price is higher than the start price!\n', '            int256 totalPriceChange = int256(_auction.endPrice) - int256(_auction.startPrice);\n', '            \n', '            // Calculate the current price based on the total change over the entire\n', '            // auction duration, and the amount of time passed since the start of the\n', '            // auction.\n', '            int256 currentPriceChange = totalPriceChange * int256(secondsPassed) / int256(_auction.duration);\n', '            \n', '            // Calculate the final price. Note this once again\n', '            // is representable by a uint256, as the price can\n', '            // never be negative.\n', '            int256 price = int256(_auction.startPrice) + currentPriceChange;\n', '            \n', '            // This never throws.\n', '            assert(price >= 0);\n', '            \n', '            return uint256(price);\n', '        }\n', '    }\n', '    \n', '    /// @dev Calculate the fee for a given price.\n', '    /// @param _price The price to calculate the fee for.\n', '    function _calculateFee(uint256 _price) internal view returns (uint256) {\n', '        // _price is guaranteed to fit in a uint128 due to the createAuction entry\n', '        // modifiers, so this cannot overflow.\n', '        return _price * fee / 100000;\n', '    }\n', '}\n', '\n', '\n', 'contract ClockAuction is ClockAuctionBase, Pausable {\n', '    function ClockAuction(address _deedContractAddress, uint256 _fee) \n', '        ClockAuctionBase(_deedContractAddress, _fee)\n', '        public\n', '    {}\n', '    \n', '    /// @notice Update the auction fee.\n', '    /// @param _fee The new fee.\n', '    function setFee(uint256 _fee) external onlyOwner {\n', '        require(0 <= _fee && _fee <= 100000);\n', '    \n', '        fee = _fee;\n', '    }\n', '    \n', '    /// @notice Get the auction for the given deed.\n', '    /// @param _deedId The identifier of the deed to get the auction for.\n', '    /// @dev Throws if there is no auction for the given deed.\n', '    function getAuction(uint256 _deedId) external view returns (\n', '            address seller,\n', '            uint256 startPrice,\n', '            uint256 endPrice,\n', '            uint256 duration,\n', '            uint256 startedAt\n', '        )\n', '    {\n', '        Auction storage auction = identifierToAuction[_deedId];\n', '        \n', '        // The auction must be active\n', '        require(_activeAuction(auction));\n', '        \n', '        return (\n', '            auction.seller,\n', '            auction.startPrice,\n', '            auction.endPrice,\n', '            auction.duration,\n', '            auction.startedAt\n', '        );\n', '    }\n', '\n', '    /// @notice Create an auction for a given deed.\n', '    /// Must previously have been given approval to take ownership of the deed.\n', '    /// @param _deedId The identifier of the deed to create an auction for.\n', '    /// @param _startPrice The starting price of the auction.\n', '    /// @param _endPrice The ending price of the auction.\n', '    /// @param _duration The duration in seconds of the dynamic pricing part of the auction.\n', '    function createAuction(uint256 _deedId, uint256 _startPrice, uint256 _endPrice, uint256 _duration)\n', '        public\n', '        fitsIn128Bits(_startPrice)\n', '        fitsIn128Bits(_endPrice)\n', '        fitsIn64Bits(_duration)\n', '        whenNotPaused\n', '    {\n', '        // Get the owner of the deed to be auctioned\n', '        address deedOwner = deedContract.ownerOf(_deedId);\n', '    \n', '        // Caller must either be the deed contract or the owner of the deed\n', '        // to prevent abuse.\n', '        require(\n', '            msg.sender == address(deedContract) ||\n', '            msg.sender == deedOwner\n', '        );\n', '    \n', '        // The duration of the auction must be at least 60 seconds.\n', '        require(_duration >= 60);\n', '    \n', '        // Throws if placing the deed in escrow fails (the contract requires\n', '        // transfer approval prior to creating the auction).\n', '        _escrow(_deedId);\n', '        \n', '        // Auction struct\n', '        Auction memory auction = Auction(\n', '            deedOwner,\n', '            uint128(_startPrice),\n', '            uint128(_endPrice),\n', '            uint64(_duration),\n', '            uint64(now)\n', '        );\n', '        \n', '        _createAuction(_deedId, auction);\n', '    }\n', '    \n', '    /// @notice Cancel an auction\n', '    /// @param _deedId The identifier of the deed to cancel the auction for.\n', '    function cancelAuction(uint256 _deedId) external whenNotPaused {\n', '        Auction storage auction = identifierToAuction[_deedId];\n', '        \n', '        // The auction must be active.\n', '        require(_activeAuction(auction));\n', '        \n', '        // The auction can only be cancelled by the seller\n', '        require(msg.sender == auction.seller);\n', '        \n', '        _cancelAuction(_deedId, auction);\n', '    }\n', '    \n', '    /// @notice Bid on an auction.\n', '    /// @param _deedId The identifier of the deed to bid on.\n', '    function bid(uint256 _deedId) external payable whenNotPaused {\n', '        // Throws if the bid does not succeed.\n', '        _bid(msg.sender, msg.value, _deedId);\n', '    }\n', '    \n', '    /// @dev Returns the current price of an auction.\n', '    /// @param _deedId The identifier of the deed to get the currency price for.\n', '    function getCurrentPrice(uint256 _deedId) external view returns (uint256) {\n', '        Auction storage auction = identifierToAuction[_deedId];\n', '        \n', '        // The auction must be active.\n', '        require(_activeAuction(auction));\n', '        \n', '        return _currentPrice(auction);\n', '    }\n', '    \n', '    /// @notice Withdraw ether owed to a beneficiary.\n', '    /// @param beneficiary The address to withdraw the auction balance for.\n', '    function withdrawAuctionBalance(address beneficiary) external {\n', '        // The sender must either be the beneficiary or the core deed contract.\n', '        require(\n', '            msg.sender == beneficiary ||\n', '            msg.sender == address(deedContract)\n', '        );\n', '        \n', '        uint256 etherOwed = addressToEtherOwed[beneficiary];\n', '        \n', '        // Ensure ether is owed to the beneficiary.\n', '        require(etherOwed > 0);\n', '         \n', '        // Set ether owed to 0   \n', '        delete addressToEtherOwed[beneficiary];\n', '        \n', '        // Subtract from total outstanding balance. etherOwed is guaranteed\n', '        // to be less than or equal to outstandingEther, so this cannot\n', '        // underflow.\n', '        outstandingEther -= etherOwed;\n', '        \n', '        // Transfer ether owed to the beneficiary (not susceptible to re-entry\n', '        // attack, as the ether owed is set to 0 before the transfer takes place).\n', '        beneficiary.transfer(etherOwed);\n', '    }\n', '    \n', '    /// @notice Withdraw (unowed) contract balance.\n', '    function withdrawFreeBalance() external {\n', '        // Calculate the free (unowed) balance. This never underflows, as\n', '        // outstandingEther is guaranteed to be less than or equal to the\n', '        // contract balance.\n', '        uint256 freeBalance = this.balance - outstandingEther;\n', '        \n', '        address deedContractAddress = address(deedContract);\n', '\n', '        require(\n', '            msg.sender == owner ||\n', '            msg.sender == deedContractAddress\n', '        );\n', '        \n', '        deedContractAddress.transfer(freeBalance);\n', '    }\n', '}\n', '\n', '\n', '/// @dev Defines base data structures for DWorld.\n', 'contract OriginalDWorldBase is DWorldAccessControl {\n', '    using SafeMath for uint256;\n', '    \n', '    /// @dev All minted plots (array of plot identifiers). There are\n', '    /// 2^16 * 2^16 possible plots (covering the entire world), thus\n', '    /// 32 bits are required. This fits in a uint32. Storing\n', '    /// the identifiers as uint32 instead of uint256 makes storage\n', '    /// cheaper. (The impact of this in mappings is less noticeable,\n', '    /// and using uint32 in the mappings below actually *increases*\n', '    /// gas cost for minting).\n', '    uint32[] public plots;\n', '    \n', '    mapping (uint256 => address) identifierToOwner;\n', '    mapping (uint256 => address) identifierToApproved;\n', '    mapping (address => uint256) ownershipDeedCount;\n', '    \n', "    /// @dev Event fired when a plot's data are changed. The plot\n", '    /// data are not stored in the contract directly, instead the\n', '    /// data are logged to the block. This gives significant\n', '    /// reductions in gas requirements (~75k for minting with data\n', '    /// instead of ~180k). However, it also means plot data are\n', '    /// not available from *within* other contracts.\n', '    event SetData(uint256 indexed deedId, string name, string description, string imageUrl, string infoUrl);\n', '    \n', '    /// @notice Get all minted plots.\n', '    function getAllPlots() external view returns(uint32[]) {\n', '        return plots;\n', '    }\n', '    \n', '    /// @dev Represent a 2D coordinate as a single uint.\n', '    /// @param x The x-coordinate.\n', '    /// @param y The y-coordinate.\n', '    function coordinateToIdentifier(uint256 x, uint256 y) public pure returns(uint256) {\n', '        require(validCoordinate(x, y));\n', '        \n', '        return (y << 16) + x;\n', '    }\n', '    \n', '    /// @dev Turn a single uint representation of a coordinate into its x and y parts.\n', '    /// @param identifier The uint representation of a coordinate.\n', '    function identifierToCoordinate(uint256 identifier) public pure returns(uint256 x, uint256 y) {\n', '        require(validIdentifier(identifier));\n', '    \n', '        y = identifier >> 16;\n', '        x = identifier - (y << 16);\n', '    }\n', '    \n', '    /// @dev Test whether the coordinate is valid.\n', '    /// @param x The x-part of the coordinate to test.\n', '    /// @param y The y-part of the coordinate to test.\n', '    function validCoordinate(uint256 x, uint256 y) public pure returns(bool) {\n', '        return x < 65536 && y < 65536; // 2^16\n', '    }\n', '    \n', '    /// @dev Test whether an identifier is valid.\n', '    /// @param identifier The identifier to test.\n', '    function validIdentifier(uint256 identifier) public pure returns(bool) {\n', '        return identifier < 4294967296; // 2^16 * 2^16\n', '    }\n', '    \n', "    /// @dev Set a plot's data.\n", '    /// @param identifier The identifier of the plot to set data for.\n', '    function _setPlotData(uint256 identifier, string name, string description, string imageUrl, string infoUrl) internal {\n', '        SetData(identifier, name, description, imageUrl, infoUrl);\n', '    }\n', '}\n', '\n', '\n', '/// @dev Holds deed functionality such as approving and transferring. Implements ERC721.\n', 'contract OriginalDWorldDeed is OriginalDWorldBase, ERC721, ERC721Metadata {\n', '    \n', '    /// @notice Name of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\n', '    function name() public pure returns (string _deedName) {\n', '        _deedName = "DWorld Plots";\n', '    }\n', '    \n', '    /// @notice Symbol of the collection of deeds (non-fungible token), as defined in ERC721Metadata.\n', '    function symbol() public pure returns (string _deedSymbol) {\n', '        _deedSymbol = "DWP";\n', '    }\n', '    \n', '    /// @dev ERC-165 (draft) interface signature for itself\n', '    bytes4 internal constant INTERFACE_SIGNATURE_ERC165 = // 0x01ffc9a7\n', "        bytes4(keccak256('supportsInterface(bytes4)'));\n", '\n', '    /// @dev ERC-165 (draft) interface signature for ERC721\n', '    bytes4 internal constant INTERFACE_SIGNATURE_ERC721 = // 0xda671b9b\n', "        bytes4(keccak256('ownerOf(uint256)')) ^\n", "        bytes4(keccak256('countOfDeeds()')) ^\n", "        bytes4(keccak256('countOfDeedsByOwner(address)')) ^\n", "        bytes4(keccak256('deedOfOwnerByIndex(address,uint256)')) ^\n", "        bytes4(keccak256('approve(address,uint256)')) ^\n", "        bytes4(keccak256('takeOwnership(uint256)'));\n", '        \n', '    /// @dev ERC-165 (draft) interface signature for ERC721\n', '    bytes4 internal constant INTERFACE_SIGNATURE_ERC721Metadata = // 0x2a786f11\n', "        bytes4(keccak256('name()')) ^\n", "        bytes4(keccak256('symbol()')) ^\n", "        bytes4(keccak256('deedUri(uint256)'));\n", '    \n', '    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    /// Returns true for any standardized interfaces implemented by this contract.\n', '    /// (ERC-165 and ERC-721.)\n', '    function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\n', '        return (\n', '            (_interfaceID == INTERFACE_SIGNATURE_ERC165)\n', '            || (_interfaceID == INTERFACE_SIGNATURE_ERC721)\n', '            || (_interfaceID == INTERFACE_SIGNATURE_ERC721Metadata)\n', '        );\n', '    }\n', '    \n', '    /// @dev Checks if a given address owns a particular plot.\n', '    /// @param _owner The address of the owner to check for.\n', '    /// @param _deedId The plot identifier to check for.\n', '    function _owns(address _owner, uint256 _deedId) internal view returns (bool) {\n', '        return identifierToOwner[_deedId] == _owner;\n', '    }\n', '    \n', '    /// @dev Approve a given address to take ownership of a deed.\n', '    /// @param _from The address approving taking ownership.\n', '    /// @param _to The address to approve taking ownership.\n', '    /// @param _deedId The identifier of the deed to give approval for.\n', '    function _approve(address _from, address _to, uint256 _deedId) internal {\n', '        identifierToApproved[_deedId] = _to;\n', '        \n', '        // Emit event.\n', '        Approval(_from, _to, _deedId);\n', '    }\n', '    \n', '    /// @dev Checks if a given address has approval to take ownership of a deed.\n', '    /// @param _claimant The address of the claimant to check for.\n', '    /// @param _deedId The identifier of the deed to check for.\n', '    function _approvedFor(address _claimant, uint256 _deedId) internal view returns (bool) {\n', '        return identifierToApproved[_deedId] == _claimant;\n', '    }\n', '    \n', '    /// @dev Assigns ownership of a specific deed to an address.\n', '    /// @param _from The address to transfer the deed from.\n', '    /// @param _to The address to transfer the deed to.\n', '    /// @param _deedId The identifier of the deed to transfer.\n', '    function _transfer(address _from, address _to, uint256 _deedId) internal {\n', '        // The number of plots is capped at 2^16 * 2^16, so this cannot\n', '        // be overflowed.\n', '        ownershipDeedCount[_to]++;\n', '        \n', '        // Transfer ownership.\n', '        identifierToOwner[_deedId] = _to;\n', '        \n', '        // When a new deed is minted, the _from address is 0x0, but we\n', '        // do not track deed ownership of 0x0.\n', '        if (_from != address(0)) {\n', '            ownershipDeedCount[_from]--;\n', '            \n', '            // Clear taking ownership approval.\n', '            delete identifierToApproved[_deedId];\n', '        }\n', '        \n', '        // Emit the transfer event.\n', '        Transfer(_from, _to, _deedId);\n', '    }\n', '    \n', '    // ERC 721 implementation\n', '    \n', '    /// @notice Returns the total number of deeds currently in existence.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function countOfDeeds() public view returns (uint256) {\n', '        return plots.length;\n', '    }\n', '    \n', '    /// @notice Returns the number of deeds owned by a specific address.\n', '    /// @param _owner The owner address to check.\n', '    /// @dev Required for ERC-721 compliance\n', '    function countOfDeedsByOwner(address _owner) public view returns (uint256) {\n', '        return ownershipDeedCount[_owner];\n', '    }\n', '    \n', '    /// @notice Returns the address currently assigned ownership of a given deed.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function ownerOf(uint256 _deedId) external view returns (address _owner) {\n', '        _owner = identifierToOwner[_deedId];\n', '\n', '        require(_owner != address(0));\n', '    }\n', '    \n', '    /// @notice Approve a given address to take ownership of a deed.\n', '    /// @param _to The address to approve taking owernship.\n', '    /// @param _deedId The identifier of the deed to give approval for.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function approve(address _to, uint256 _deedId) external whenNotPaused {\n', '        uint256[] memory _deedIds = new uint256[](1);\n', '        _deedIds[0] = _deedId;\n', '        \n', '        approveMultiple(_to, _deedIds);\n', '    }\n', '    \n', '    /// @notice Approve a given address to take ownership of multiple deeds.\n', '    /// @param _to The address to approve taking ownership.\n', '    /// @param _deedIds The identifiers of the deeds to give approval for.\n', '    function approveMultiple(address _to, uint256[] _deedIds) public whenNotPaused {\n', '        // Ensure the sender is not approving themselves.\n', '        require(msg.sender != _to);\n', '    \n', '        for (uint256 i = 0; i < _deedIds.length; i++) {\n', '            uint256 _deedId = _deedIds[i];\n', '            \n', '            // Require the sender is the owner of the deed.\n', '            require(_owns(msg.sender, _deedId));\n', '            \n', '            // Perform the approval.\n', '            _approve(msg.sender, _to, _deedId);\n', '        }\n', '    }\n', '    \n', '    /// @notice Transfer a deed to another address. If transferring to a smart\n', '    /// contract be VERY CAREFUL to ensure that it is aware of ERC-721, or your\n', '    /// deed may be lost forever.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _deedId The identifier of the deed to transfer.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function transfer(address _to, uint256 _deedId) external whenNotPaused {\n', '        uint256[] memory _deedIds = new uint256[](1);\n', '        _deedIds[0] = _deedId;\n', '        \n', '        transferMultiple(_to, _deedIds);\n', '    }\n', '    \n', '    /// @notice Transfers multiple deeds to another address. If transferring to\n', '    /// a smart contract be VERY CAREFUL to ensure that it is aware of ERC-721,\n', '    /// or your deeds may be lost forever.\n', '    /// @param _to The address of the recipient, can be a user or contract.\n', '    /// @param _deedIds The identifiers of the deeds to transfer.\n', '    function transferMultiple(address _to, uint256[] _deedIds) public whenNotPaused {\n', '        // Safety check to prevent against an unexpected 0x0 default.\n', '        require(_to != address(0));\n', '        \n', '        // Disallow transfers to this contract to prevent accidental misuse.\n', '        require(_to != address(this));\n', '    \n', '        for (uint256 i = 0; i < _deedIds.length; i++) {\n', '            uint256 _deedId = _deedIds[i];\n', '            \n', '            // One can only transfer their own plots.\n', '            require(_owns(msg.sender, _deedId));\n', '\n', '            // Transfer ownership\n', '            _transfer(msg.sender, _to, _deedId);\n', '        }\n', '    }\n', '    \n', '    /// @notice Transfer a deed owned by another address, for which the calling\n', '    /// address has previously been granted transfer approval by the owner.\n', '    /// @param _deedId The identifier of the deed to be transferred.\n', '    /// @dev Required for ERC-721 compliance.\n', '    function takeOwnership(uint256 _deedId) external whenNotPaused {\n', '        uint256[] memory _deedIds = new uint256[](1);\n', '        _deedIds[0] = _deedId;\n', '        \n', '        takeOwnershipMultiple(_deedIds);\n', '    }\n', '    \n', '    /// @notice Transfer multiple deeds owned by another address, for which the\n', '    /// calling address has previously been granted transfer approval by the owner.\n', '    /// @param _deedIds The identifier of the deed to be transferred.\n', '    function takeOwnershipMultiple(uint256[] _deedIds) public whenNotPaused {\n', '        for (uint256 i = 0; i < _deedIds.length; i++) {\n', '            uint256 _deedId = _deedIds[i];\n', '            address _from = identifierToOwner[_deedId];\n', '            \n', '            // Check for transfer approval\n', '            require(_approvedFor(msg.sender, _deedId));\n', '\n', '            // Reassign ownership (also clears pending approvals and emits Transfer event).\n', '            _transfer(_from, msg.sender, _deedId);\n', '        }\n', '    }\n', '    \n', '    /// @notice Returns a list of all deed identifiers assigned to an address.\n', '    /// @param _owner The owner whose deeds we are interested in.\n', "    /// @dev This method MUST NEVER be called by smart contract code. It's very\n", '    /// expensive and is not supported in contract-to-contract calls as it returns\n', '    /// a dynamic array (only supported for web3 calls).\n', '    function deedsOfOwner(address _owner) external view returns(uint256[]) {\n', '        uint256 deedCount = countOfDeedsByOwner(_owner);\n', '\n', '        if (deedCount == 0) {\n', '            // Return an empty array.\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](deedCount);\n', '            uint256 totalDeeds = countOfDeeds();\n', '            uint256 resultIndex = 0;\n', '            \n', '            for (uint256 deedNumber = 0; deedNumber < totalDeeds; deedNumber++) {\n', '                uint256 identifier = plots[deedNumber];\n', '                if (identifierToOwner[identifier] == _owner) {\n', '                    result[resultIndex] = identifier;\n', '                    resultIndex++;\n', '                }\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '    \n', '    /// @notice Returns a deed identifier of the owner at the given index.\n', '    /// @param _owner The address of the owner we want to get a deed for.\n', '    /// @param _index The index of the deed we want.\n', '    function deedOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\n', '        // The index should be valid.\n', '        require(_index < countOfDeedsByOwner(_owner));\n', '\n', "        // Loop through all plots, accounting the number of plots of the owner we've seen.\n", '        uint256 seen = 0;\n', '        uint256 totalDeeds = countOfDeeds();\n', '        \n', '        for (uint256 deedNumber = 0; deedNumber < totalDeeds; deedNumber++) {\n', '            uint256 identifier = plots[deedNumber];\n', '            if (identifierToOwner[identifier] == _owner) {\n', '                if (seen == _index) {\n', '                    return identifier;\n', '                }\n', '                \n', '                seen++;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /// @notice Returns an (off-chain) metadata url for the given deed.\n', '    /// @param _deedId The identifier of the deed to get the metadata\n', '    /// url for.\n', '    /// @dev Implementation of optional ERC-721 functionality.\n', '    function deedUri(uint256 _deedId) external pure returns (string uri) {\n', '        require(validIdentifier(_deedId));\n', '    \n', '        var (x, y) = identifierToCoordinate(_deedId);\n', '    \n', '        // Maximum coordinate length in decimals is 5 (65535)\n', '        uri = "https://dworld.io/plot/xxxxx/xxxxx";\n', '        bytes memory _uri = bytes(uri);\n', '        \n', '        for (uint256 i = 0; i < 5; i++) {\n', '            _uri[27 - i] = byte(48 + (x / 10 ** i) % 10);\n', '            _uri[33 - i] = byte(48 + (y / 10 ** i) % 10);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @dev Migrate original data from the old contract.\n', 'contract DWorldUpgrade is DWorldMinting {\n', '    OriginalDWorldDeed originalContract;\n', '    ClockAuction originalSaleAuction;\n', '    ClockAuction originalRentAuction;\n', '    \n', '    /// @notice Keep track of whether we have finished migrating.\n', '    bool public migrationFinished = false;\n', '    \n', '    /// @dev Keep track of how many plots have been transferred so far.\n', '    uint256 migrationNumPlotsTransferred = 0;\n', '    \n', '    function DWorldUpgrade(\n', '        address originalContractAddress,\n', '        address originalSaleAuctionAddress,\n', '        address originalRentAuctionAddress\n', '    )\n', '        public\n', '    {\n', '        if (originalContractAddress != 0) {\n', '            _startMigration(originalContractAddress, originalSaleAuctionAddress, originalRentAuctionAddress);\n', '        } else {\n', '            migrationFinished = true;\n', '        }\n', '    }\n', '    \n', '    /// @dev Migrate data from the original contract. Assumes the original\n', '    /// contract is paused, and remains paused for the duration of the\n', '    /// migration.\n', '    /// @param originalContractAddress The address of the original contract.\n', '    function _startMigration(\n', '        address originalContractAddress,\n', '        address originalSaleAuctionAddress,\n', '        address originalRentAuctionAddress\n', '    )\n', '        internal\n', '    {\n', '        // Set contracts.\n', '        originalContract = OriginalDWorldDeed(originalContractAddress);\n', '        originalSaleAuction = ClockAuction(originalSaleAuctionAddress);\n', '        originalRentAuction = ClockAuction(originalRentAuctionAddress);\n', '        \n', '        // Start paused.\n', '        paused = true;\n', '        \n', '        // Get count of original plots.\n', '        uint256 numPlots = originalContract.countOfDeeds();\n', '        \n', '        // Allocate storage for the plots array (this is more\n', '        // efficient than .push-ing each individual plot, as\n', '        // that requires multiple dynamic allocations).\n', '        plots.length = numPlots;\n', '    }\n', '    \n', '    function migrationStep(uint256 numPlotsTransfer) external onlyOwner whenPaused {\n', '        // Migration must not be finished yet.\n', '        require(!migrationFinished);\n', '    \n', '        // Get count of original plots.\n', '        uint256 numPlots = originalContract.countOfDeeds();\n', '    \n', '        // Loop through plots and assign to original owner.\n', '        uint256 i;\n', '        for (i = migrationNumPlotsTransferred; i < numPlots && i < migrationNumPlotsTransferred + numPlotsTransfer; i++) {\n', '            uint32 _deedId = originalContract.plots(i);\n', '            \n', '            // Set plot.\n', '            plots[i] = _deedId;\n', '            \n', '            // Get the original owner and transfer.\n', '            address owner = originalContract.ownerOf(_deedId);\n', '            \n', '            // If the owner of the plot is an auction contract,\n', '            // get the actual owner of the plot.\n', '            address seller;\n', '            if (owner == address(originalSaleAuction)) {\n', '                (seller, ) = originalSaleAuction.getAuction(_deedId);\n', '                owner = seller;\n', '            } else if (owner == address(originalRentAuction)) {\n', '                (seller, ) = originalRentAuction.getAuction(_deedId);\n', '                owner = seller;\n', '            }\n', '            \n', '            _transfer(address(0), owner, _deedId);\n', '            \n', '            // Set the initial price paid for the plot.\n', '            initialPricePaid[_deedId] = 0.0125 ether;\n', '            \n', '            // The initial buyout price.\n', '            uint256 _initialBuyoutPrice = 0.050 ether;\n', '            \n', '            // Set the initial buyout price.\n', '            identifierToBuyoutPrice[_deedId] = _initialBuyoutPrice;\n', '            \n', '            // Trigger the buyout price event.\n', '            SetBuyoutPrice(_deedId, _initialBuyoutPrice);\n', '            \n', '            // Mark the plot as being an original.\n', '            identifierIsOriginal[_deedId] = true;\n', '        }\n', '        \n', '        migrationNumPlotsTransferred += numPlotsTransfer;\n', '        \n', '        // Finished migration.\n', '        if (i == numPlots) {\n', '            migrationFinished = true;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/// @dev Implements highest-level DWorld functionality.\n', 'contract DWorldCore is DWorldUpgrade {\n', '    /// If this contract is broken, this will be used to publish the address at which an upgraded contract can be found\n', '    address public upgradedContractAddress;\n', '    event ContractUpgrade(address upgradedContractAddress);\n', '\n', '    function DWorldCore(\n', '        address originalContractAddress,\n', '        address originalSaleAuctionAddress,\n', '        address originalRentAuctionAddress,\n', '        uint256 buyoutsEnabledAfterHours\n', '    )\n', '        DWorldUpgrade(originalContractAddress, originalSaleAuctionAddress, originalRentAuctionAddress)\n', '        public \n', '    {\n', '        buyoutsEnabledFromTimestamp = block.timestamp + buyoutsEnabledAfterHours * 3600;\n', '    }\n', '    \n', '    /// @notice Only to be used when this contract is significantly broken,\n', '    /// and an upgrade is required.\n', '    function setUpgradedContractAddress(address _upgradedContractAddress) external onlyOwner whenPaused {\n', '        upgradedContractAddress = _upgradedContractAddress;\n', '        ContractUpgrade(_upgradedContractAddress);\n', '    }\n', '\n', '    /// @notice Set the data associated with a plot.\n', '    function setPlotData(uint256 _deedId, string name, string description, string imageUrl, string infoUrl)\n', '        public\n', '        whenNotPaused\n', '    {\n', '        // The sender requesting the data update should be\n', '        // the owner.\n', '        require(_owns(msg.sender, _deedId));\n', '    \n', '        // Set the data\n', '        _setPlotData(_deedId, name, description, imageUrl, infoUrl);\n', '    }\n', '    \n', '    /// @notice Set the data associated with multiple plots.\n', '    function setPlotDataMultiple(uint256[] _deedIds, string name, string description, string imageUrl, string infoUrl)\n', '        external\n', '        whenNotPaused\n', '    {\n', '        for (uint256 i = 0; i < _deedIds.length; i++) {\n', '            uint256 _deedId = _deedIds[i];\n', '        \n', '            setPlotData(_deedId, name, description, imageUrl, infoUrl);\n', '        }\n', '    }\n', '    \n', '    /// @notice Withdraw Ether owed to the sender.\n', '    function withdrawBalance() external {\n', '        uint256 etherOwed = addressToEtherOwed[msg.sender];\n', '        \n', '        // Ensure Ether is owed to the sender.\n', '        require(etherOwed > 0);\n', '         \n', '        // Set Ether owed to 0.\n', '        delete addressToEtherOwed[msg.sender];\n', '        \n', '        // Subtract from total outstanding balance. etherOwed is guaranteed\n', '        // to be less than or equal to outstandingEther, so this cannot\n', '        // underflow.\n', '        outstandingEther -= etherOwed;\n', '        \n', '        // Transfer Ether owed to the sender (not susceptible to re-entry\n', '        // attack, as the Ether owed is set to 0 before the transfer takes place).\n', '        msg.sender.transfer(etherOwed);\n', '    }\n', '    \n', '    /// @notice Withdraw (unowed) contract balance.\n', '    function withdrawFreeBalance() external onlyCFO {\n', '        // Calculate the free (unowed) balance. This never underflows, as\n', '        // outstandingEther is guaranteed to be less than or equal to the\n', '        // contract balance.\n', '        uint256 freeBalance = this.balance - outstandingEther;\n', '        \n', '        cfoAddress.transfer(freeBalance);\n', '    }\n', '}']