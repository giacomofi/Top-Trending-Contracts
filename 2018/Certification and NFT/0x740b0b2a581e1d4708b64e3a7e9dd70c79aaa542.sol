['pragma solidity ^0.4.17;\n', '\n', '// ----------------------------------------------------------------------------\n', '// BLU ICO contract\n', '//\n', '// BLU mainnet token address : 0x362a95215564d895f27021a7d7314629db2e1649\n', '// RATE = 4000 => 1 ETH = 4000 BLU\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Ownership contract\n', '// _newOwner is address of new owner\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = 0x0567cB7c5A688401Aab87093058754E096C4d37E;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // transfer Ownership to other address\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0x0));\n', '        emit OwnershipTransferred(owner,_newOwner);\n', '        owner = _newOwner;\n', '    }\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// BlupassToken interface\n', '// ----------------------------------------------------------------------------\n', 'contract BlupassToken {\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Blupass ICO smart contract\n', '// ----------------------------------------------------------------------------\n', 'contract BlupassICO is Owned {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    // public Variables\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public RATE; // RATE of the BLU\n', '    BlupassToken public BLU; // BLU token address\n', '    bool public isStopped = false; // ICO start/stop\n', '    \n', '    mapping(address => bool) whitelist; // whitelisting for KYC verified users\n', '\n', '    // events for log\n', '    event LogWhiteListed(address _addr);\n', '    event LogBlackListed(address _addr);\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(address _creator);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    \n', '    // To determine whether the ICO is running or stopped\n', '    modifier onlyWhenRunning {\n', '        require(!isStopped);\n', '        _;\n', '    }\n', '    \n', '    // To determine whether the user is whitelisted \n', '    modifier onlyifWhiteListed {\n', '        require(whitelist[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // BlupassICO constructor\n', '    // _addressOfToken is the token totalDistributed\n', '    // ----------------------------------------------------------------------------\n', '    function BlupassICO (BlupassToken _addressOfToken) public {\n', '        require(_addressOfToken != address(0)); // should have valid address\n', '        RATE = 4000;\n', '        BLU = BlupassToken(_addressOfToken);\n', '        emit LogFunderInitialized(owner);\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // Function to handle eth transfers\n', '    // It invokes when someone sends ETH to this contract address.\n', '    // Requires enough gas for the execution otherwise it&#39;ll throw out of gas error.\n', '    // tokens are transferred to user\n', '    // ETH are transferred to current owner\n', '    // minimum 1 ETH investment\n', '    // ----------------------------------------------------------------------------\n', '    function() public payable {\n', '        contribute();\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Acceptes ETH and send equivalent BLU with bonus if any.\n', '    // NOTE: Add user to whitelist by invoking addToWhiteList() function.\n', '    // Only whitelisted users can buy tokens.\n', '    // For Non-whitelisted/Blacklisted users transaction will be reverted. \n', '    // ----------------------------------------------------------------------------\n', '    function contribute() onlyWhenRunning onlyifWhiteListed public payable {\n', '        \n', '        require(msg.value >= 1 ether); // min 1 ETH investment\n', '        \n', '        uint256 tokenBought; // Variable to store amount of tokens bought\n', '        uint256 bonus; // Variable to store bonus if any\n', '\n', '        totalRaised = totalRaised.add(msg.value); // Save the total eth totalRaised (in wei)\n', '        tokenBought = msg.value.mul(RATE); // Token calculation according to RATE\n', '        \n', '        // Bonus for  5+ ETH investment\n', '        \n', '        // 20 % bonus for 5 to 9 ETH investment\n', '        if (msg.value >= 5 ether && msg.value <= 9 ether) {\n', '            bonus = (tokenBought.mul(20)).div(100); // 20 % bonus\n', '            tokenBought = tokenBought.add(bonus);\n', '        } \n', '        \n', '        // 40 % bonus for 10+ ETH investment\n', '        if (msg.value >= 10 ether) {\n', '            bonus = (tokenBought.mul(40)).div(100); // 40 % bonus\n', '            tokenBought = tokenBought.add(bonus);\n', '        }\n', '\n', '        // this smart contract should have enough tokens to distribute\n', '        require(BLU.balanceOf(this) >= tokenBought);\n', '        \n', '        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\n', '        BLU.transfer(msg.sender,tokenBought); //Send Tokens to user\n', '        owner.transfer(msg.value); // Send ETH to owner\n', '        \n', '        //LOGS\n', '        emit LogContributorsPayout(msg.sender,tokenBought); // Log investor paid event\n', '        emit LogBeneficiaryPaid(owner); // Log owner paid event\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised); // Log funding event\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // function to whitelist user if KYC verified\n', '    // returns true if whitelisting is successful else returns false\n', '    // ----------------------------------------------------------------------------\n', '    function addToWhiteList(address _userAddress) onlyOwner public returns(bool) {\n', '        require(_userAddress != address(0)); // user address must be valid\n', '        // if not already in the whitelist\n', '        if (!whitelist[_userAddress]) {\n', '            whitelist[_userAddress] = true;\n', '            emit LogWhiteListed(_userAddress); // Log whitelist event\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // function to remove user from whitelist\n', '    // ----------------------------------------------------------------------------\n', '    function removeFromWhiteList(address _userAddress) onlyOwner public returns(bool) {\n', '        require(_userAddress != address(0)); // user address must be valid\n', '        // if in the whitelist\n', '        if(whitelist[_userAddress]) {\n', '           whitelist[_userAddress] = false; \n', '           emit LogBlackListed(_userAddress); // Log blacklist event\n', '           return true;\n', '        } else {\n', '            return false;\n', '        }\n', '        \n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // function to check if user is whitelisted\n', '    // ----------------------------------------------------------------------------\n', '    function checkIfWhiteListed(address _userAddress) view public returns(bool) {\n', '        return whitelist[_userAddress];\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // function to stop the ICO\n', '    // ----------------------------------------------------------------------------\n', '    function stopICO() onlyOwner public {\n', '        isStopped = true;\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // function to resume the ICO\n', '    // ----------------------------------------------------------------------------\n', '    function resumeICO() onlyOwner public {\n', '        isStopped = false;\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Function to claim any token stuck on contract\n', '    // ----------------------------------------------------------------------------\n', '    function claimTokens() onlyOwner public {\n', '        uint256 remainder = BLU.balanceOf(this); //Check remainder tokens\n', '        BLU.transfer(owner,remainder); //Transfer tokens to owner\n', '    }\n', '    \n', '}']
['pragma solidity ^0.4.17;\n', '\n', '// ----------------------------------------------------------------------------\n', '// BLU ICO contract\n', '//\n', '// BLU mainnet token address : 0x362a95215564d895f27021a7d7314629db2e1649\n', '// RATE = 4000 => 1 ETH = 4000 BLU\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Ownership contract\n', '// _newOwner is address of new owner\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    function Owned() public {\n', '        owner = 0x0567cB7c5A688401Aab87093058754E096C4d37E;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // transfer Ownership to other address\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0x0));\n', '        emit OwnershipTransferred(owner,_newOwner);\n', '        owner = _newOwner;\n', '    }\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// BlupassToken interface\n', '// ----------------------------------------------------------------------------\n', 'contract BlupassToken {\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Blupass ICO smart contract\n', '// ----------------------------------------------------------------------------\n', 'contract BlupassICO is Owned {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    // public Variables\n', '    uint256 public totalRaised; //eth in wei\n', '    uint256 public totalDistributed; //tokens distributed\n', '    uint256 public RATE; // RATE of the BLU\n', '    BlupassToken public BLU; // BLU token address\n', '    bool public isStopped = false; // ICO start/stop\n', '    \n', '    mapping(address => bool) whitelist; // whitelisting for KYC verified users\n', '\n', '    // events for log\n', '    event LogWhiteListed(address _addr);\n', '    event LogBlackListed(address _addr);\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(address _creator);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    \n', '    // To determine whether the ICO is running or stopped\n', '    modifier onlyWhenRunning {\n', '        require(!isStopped);\n', '        _;\n', '    }\n', '    \n', '    // To determine whether the user is whitelisted \n', '    modifier onlyifWhiteListed {\n', '        require(whitelist[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // BlupassICO constructor\n', '    // _addressOfToken is the token totalDistributed\n', '    // ----------------------------------------------------------------------------\n', '    function BlupassICO (BlupassToken _addressOfToken) public {\n', '        require(_addressOfToken != address(0)); // should have valid address\n', '        RATE = 4000;\n', '        BLU = BlupassToken(_addressOfToken);\n', '        emit LogFunderInitialized(owner);\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // Function to handle eth transfers\n', '    // It invokes when someone sends ETH to this contract address.\n', "    // Requires enough gas for the execution otherwise it'll throw out of gas error.\n", '    // tokens are transferred to user\n', '    // ETH are transferred to current owner\n', '    // minimum 1 ETH investment\n', '    // ----------------------------------------------------------------------------\n', '    function() public payable {\n', '        contribute();\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Acceptes ETH and send equivalent BLU with bonus if any.\n', '    // NOTE: Add user to whitelist by invoking addToWhiteList() function.\n', '    // Only whitelisted users can buy tokens.\n', '    // For Non-whitelisted/Blacklisted users transaction will be reverted. \n', '    // ----------------------------------------------------------------------------\n', '    function contribute() onlyWhenRunning onlyifWhiteListed public payable {\n', '        \n', '        require(msg.value >= 1 ether); // min 1 ETH investment\n', '        \n', '        uint256 tokenBought; // Variable to store amount of tokens bought\n', '        uint256 bonus; // Variable to store bonus if any\n', '\n', '        totalRaised = totalRaised.add(msg.value); // Save the total eth totalRaised (in wei)\n', '        tokenBought = msg.value.mul(RATE); // Token calculation according to RATE\n', '        \n', '        // Bonus for  5+ ETH investment\n', '        \n', '        // 20 % bonus for 5 to 9 ETH investment\n', '        if (msg.value >= 5 ether && msg.value <= 9 ether) {\n', '            bonus = (tokenBought.mul(20)).div(100); // 20 % bonus\n', '            tokenBought = tokenBought.add(bonus);\n', '        } \n', '        \n', '        // 40 % bonus for 10+ ETH investment\n', '        if (msg.value >= 10 ether) {\n', '            bonus = (tokenBought.mul(40)).div(100); // 40 % bonus\n', '            tokenBought = tokenBought.add(bonus);\n', '        }\n', '\n', '        // this smart contract should have enough tokens to distribute\n', '        require(BLU.balanceOf(this) >= tokenBought);\n', '        \n', '        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\n', '        BLU.transfer(msg.sender,tokenBought); //Send Tokens to user\n', '        owner.transfer(msg.value); // Send ETH to owner\n', '        \n', '        //LOGS\n', '        emit LogContributorsPayout(msg.sender,tokenBought); // Log investor paid event\n', '        emit LogBeneficiaryPaid(owner); // Log owner paid event\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised); // Log funding event\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // function to whitelist user if KYC verified\n', '    // returns true if whitelisting is successful else returns false\n', '    // ----------------------------------------------------------------------------\n', '    function addToWhiteList(address _userAddress) onlyOwner public returns(bool) {\n', '        require(_userAddress != address(0)); // user address must be valid\n', '        // if not already in the whitelist\n', '        if (!whitelist[_userAddress]) {\n', '            whitelist[_userAddress] = true;\n', '            emit LogWhiteListed(_userAddress); // Log whitelist event\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // function to remove user from whitelist\n', '    // ----------------------------------------------------------------------------\n', '    function removeFromWhiteList(address _userAddress) onlyOwner public returns(bool) {\n', '        require(_userAddress != address(0)); // user address must be valid\n', '        // if in the whitelist\n', '        if(whitelist[_userAddress]) {\n', '           whitelist[_userAddress] = false; \n', '           emit LogBlackListed(_userAddress); // Log blacklist event\n', '           return true;\n', '        } else {\n', '            return false;\n', '        }\n', '        \n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // function to check if user is whitelisted\n', '    // ----------------------------------------------------------------------------\n', '    function checkIfWhiteListed(address _userAddress) view public returns(bool) {\n', '        return whitelist[_userAddress];\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // function to stop the ICO\n', '    // ----------------------------------------------------------------------------\n', '    function stopICO() onlyOwner public {\n', '        isStopped = true;\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // function to resume the ICO\n', '    // ----------------------------------------------------------------------------\n', '    function resumeICO() onlyOwner public {\n', '        isStopped = false;\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Function to claim any token stuck on contract\n', '    // ----------------------------------------------------------------------------\n', '    function claimTokens() onlyOwner public {\n', '        uint256 remainder = BLU.balanceOf(this); //Check remainder tokens\n', '        BLU.transfer(owner,remainder); //Transfer tokens to owner\n', '    }\n', '    \n', '}']
