['pragma solidity ^0.4.24;\n', '\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (_a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = _a * _b;\n', '        require(c / _a == _b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = _a / _b;\n', "        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        require(_b <= _a);\n', '        uint256 c = _a - _b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '        uint256 c = _a + _b;\n', '        require(c >= _a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '\n', '    event OwnershipRenounced(address indexed previousOwner);\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * @notice Renouncing to ownership will leave the contract without an owner.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(owner);\n', '        owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '}\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param _newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address _newOwner) internal {\n', '        require(_newOwner != address(0));\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' */\n', 'contract ERC20 {\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', '\n', 'contract Crowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    address public multisig;\n', '\n', '    ERC20 public token;\n', '\n', '    uint rate;\n', '    uint priceETH;\n', '\n', '    mapping (address => bool) whitelist;\n', '\n', '    event Purchased(address indexed _addr, uint _amount);\n', '\n', '    function getRateCentUsd() public view returns(uint) {\n', '        if (block.timestamp >= 1539550800 && block.timestamp < 1541019600) {\n', '            return(70);\n', '        }\n', '        if (block.timestamp >= 1541019600 && block.timestamp < 1545685200) {\n', '            return(100);\n', '        }\n', '    }\n', '\n', '    function setPriceETH(uint _newPriceETH) external onlyOwner {\n', '        setRate(_newPriceETH);\n', '    }\n', '\n', '    function setRate(uint _priceETH) internal {\n', '        require(_priceETH != 0);\n', '        priceETH = _priceETH;\n', '        rate = getRateCentUsd().mul(1 ether).div(100).div(_priceETH);\n', '    }\n', '\n', '    function addToWhitelist(address _newMember) external onlyOwner {\n', '        require(_newMember != address(0));\n', '        whitelist[_newMember] = true;\n', '    }\n', '\n', '    function removeFromWhitelist(address _member) external onlyOwner {\n', '        require(_member != address(0));\n', '        whitelist[_member] = false;\n', '    }\n', '\n', '    function addListToWhitelist(address[] _addresses) external onlyOwner {\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            whitelist[_addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function removeListFromWhitelist(address[] _addresses) external onlyOwner {\n', '        for (uint i = 0; i < _addresses.length; i++) {\n', '            whitelist[_addresses[i]] = false;\n', '        }\n', '    }\n', '\n', '    function getPriceETH() public view returns(uint) {\n', '        return priceETH;\n', '    }\n', '\n', '    constructor(address _DNT, address _multisig, uint _priceETH) public {\n', '        require(_DNT != 0 && _priceETH != 0);\n', '        token = ERC20(_DNT);\n', '        multisig = _multisig;\n', '        setRate(_priceETH);\n', '    }\n', '\n', '    function() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function buyTokens() public payable {\n', '        require(whitelist[msg.sender]);\n', '        require(block.timestamp >= 1539550800 && block.timestamp < 1545685200);\n', '        require(msg.value >= 1 ether * 100 / priceETH);\n', '\n', '        uint256 amount = msg.value.div(rate);\n', '        uint256 balance = token.balanceOf(this);\n', '\n', '        if (amount > balance) {\n', '            uint256 cash = balance.mul(rate);\n', '            uint256 cashBack = msg.value.sub(cash);\n', '            multisig.transfer(cash);\n', '            msg.sender.transfer(cashBack);\n', '            token.transfer(msg.sender, balance);\n', '            emit Purchased(msg.sender, balance);\n', '            return;\n', '        }\n', '\n', '        multisig.transfer(msg.value);\n', '        token.transfer(msg.sender, amount);\n', '        emit Purchased(msg.sender, amount);\n', '    }\n', '\n', '    function finalizeICO(address _owner) external onlyOwner {\n', '        require(_owner != address(0));\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(_owner, balance);\n', '    }\n', '\n', '    function getMyBalanceDNT() external view returns(uint256) {\n', '        return token.balanceOf(msg.sender);\n', '    }\n', '}']