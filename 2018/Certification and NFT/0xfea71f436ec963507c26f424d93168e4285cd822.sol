['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract batchTransfer {\n', '    using SafeMath for uint256;\n', '    \n', '    uint public totalEther;\n', '    \n', '    function batchTransfer() public {\n', '        totalEther = 0;\n', '    }\n', '    \n', '    function distribute(address[] myAddresses) public payable {\n', '            require(myAddresses.length>0);\n', '            \n', '            uint256 value = msg.value;\n', '            uint256 length = myAddresses.length;\n', '            uint256 distr = value.div(length);\n', '            \n', '            if(length==1)\n', '            {\n', '               myAddresses[0].transfer(value);\n', '            }else\n', '            {\n', '                for(uint256 i=0;i<(length.sub(1));i++)\n', '                {\n', '                    myAddresses[i].transfer(distr);\n', '                    value = value.sub(distr);\n', '                }\n', '                myAddresses[myAddresses.length-1].transfer(value);\n', '            }\n', '            \n', '            totalEther = totalEther.add(msg.value);\n', '    }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract batchTransfer {\n', '    using SafeMath for uint256;\n', '    \n', '    uint public totalEther;\n', '    \n', '    function batchTransfer() public {\n', '        totalEther = 0;\n', '    }\n', '    \n', '    function distribute(address[] myAddresses) public payable {\n', '            require(myAddresses.length>0);\n', '            \n', '            uint256 value = msg.value;\n', '            uint256 length = myAddresses.length;\n', '            uint256 distr = value.div(length);\n', '            \n', '            if(length==1)\n', '            {\n', '               myAddresses[0].transfer(value);\n', '            }else\n', '            {\n', '                for(uint256 i=0;i<(length.sub(1));i++)\n', '                {\n', '                    myAddresses[i].transfer(distr);\n', '                    value = value.sub(distr);\n', '                }\n', '                myAddresses[myAddresses.length-1].transfer(value);\n', '            }\n', '            \n', '            totalEther = totalEther.add(msg.value);\n', '    }\n', '}']
