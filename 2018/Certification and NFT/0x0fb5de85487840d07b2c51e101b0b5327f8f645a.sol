['pragma solidity 0.4.24;\n', '\n', 'library SafeMath {\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract customIcoToken{\n', '    using SafeMath for uint256;\n', '\n', '    /* Events */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '    event LogRefund(address indexed _to, uint256 _value);\n', '    event CreateToken(address indexed _to, uint256 _value);\n', '\n', '    // metadata\n', '    string public name;\n', '    string public symbol;\n', '    uint256 public decimals;\n', '\n', '    // contracts\n', '    address public ethFundDeposit;      // deposit address for ETH\n', '    address public tokenFundDeposit;\n', '\n', '    // crowdsale parameters\n', '    bool public isFinalized;              // switched to true in operational state\n', '    uint256 public fundingStartBlock;\n', '    uint256 public fundingEndBlock;\n', '    uint256 public tokenFund;\n', '    uint256 public tokenExchangeRate;\n', '    uint256 public tokenCreationCap;\n', '    uint256 public tokenCreationMin;\n', '\n', '    /* Storage */\n', '    mapping(address => uint256) balances;\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '    uint256 public totalSupply;\n', '\n', '    /* Getters */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /* Methods */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '  }\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '    }\n', '\n', '    /* Crowdsale methods */\n', '\n', '    /// @dev Accepts ether and creates new tokens.\n', '    function createTokens() payable external {\n', '      require (isFinalized == false);\n', '      require(block.number > fundingStartBlock);\n', '      require(block.number < fundingEndBlock);\n', '      require(msg.value > 0);\n', '\n', '      uint256 tokens = msg.value.mul(tokenExchangeRate);\n', '      uint256 checkedSupply = totalSupply.add(tokens);\n', '\n', '      // return money if something goes wrong\n', '      require(tokenCreationCap >= checkedSupply); // odd fractions won&#39;t be found\n', '\n', '      totalSupply = checkedSupply;\n', '      balances[msg.sender] += tokens;  // safeAdd not needed; bad semantics to use here\n', '      emit CreateToken(msg.sender, tokens);  // logs token creation\n', '    }\n', '\n', '    /// @dev Ends the funding period and sends the ETH home\n', '    function finalize() external {\n', '      require(isFinalized == false);\n', '      require(msg.sender == ethFundDeposit);\n', '      require(totalSupply > tokenCreationMin); // have to sell minimum to move to operational\n', '      require(block.number > fundingEndBlock || totalSupply == tokenCreationCap);\n', '      // move to operational\n', '      isFinalized = true;\n', '      assert(ethFundDeposit.send(address(this).balance)); // send the eth\n', '    }\n', '\n', '    /// @dev Allows contributors to recover their ether in the case of a failed funding campaign.\n', '    function refund() external {\n', '      require(isFinalized == false);                       // prevents refund if operational\n', '      require(block.number > fundingEndBlock); // prevents refund until sale period is over\n', '      require(totalSupply < tokenCreationMin); // no refunds if we sold enough\n', '      require(msg.sender != tokenFundDeposit);    // team not entitled to a refund\n', '      uint256 tokenVal = balances[msg.sender];\n', '      require(tokenVal > 0);\n', '      balances[msg.sender] = 0;\n', '      totalSupply = totalSupply.sub(tokenVal); // extra safe\n', '      uint256 ethVal = tokenVal / tokenExchangeRate; // should be safe; previous throws covers edges\n', '      emit LogRefund(msg.sender, ethVal); // log it\n', '      assert(msg.sender.send(ethVal)); // if you&#39;re using a contract; make sure it works with .send gas limits\n', '    }\n', '\n', '    constructor(\n', '        string _name,\n', '        string _symbol,\n', '        uint8 _decimals,\n', '        address _ethFundDeposit,\n', '        address _tokenFundDeposit,\n', '        uint256 _tokenFund,\n', '        uint256 _tokenExchangeRate,\n', '        uint256 _tokenCreationCap,\n', '        uint256 _tokenCreationMin,\n', '        uint256 _fundingStartBlock,\n', '        uint256 _fundingEndBlock) public\n', '    {\n', '      name = _name;\n', '      symbol = _symbol;\n', '      decimals = _decimals;\n', '      isFinalized = false;                   //controls pre through crowdsale state\n', '      ethFundDeposit = _ethFundDeposit;\n', '      tokenFundDeposit = _tokenFundDeposit;\n', '      tokenFund = _tokenFund*10**decimals;\n', '      tokenExchangeRate = _tokenExchangeRate;\n', '      tokenCreationCap = _tokenCreationCap*10**decimals;\n', '      tokenCreationMin = _tokenCreationMin*10**decimals;\n', '      fundingStartBlock = _fundingStartBlock;\n', '      fundingEndBlock = _fundingEndBlock;\n', '      totalSupply = tokenFund;\n', '      balances[tokenFundDeposit] = tokenFund;\n', '      emit CreateToken(tokenFundDeposit, tokenFund);\n', '    }\n', '}']