['pragma solidity 0.4.17;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address internal owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title ArtToujourICO\n', ' * @dev ArtToujourCrowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them ARTZ tokens based\n', ' * on a ARTZ token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    //totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\n', '    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title ArtToujour Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '  /**\n', '   *  @MintableToken token - Token Object\n', '   *  @address wallet - Wallet Address\n', '   *  @uint8 rate - Tokens per Ether\n', '   *  @uint256 weiRaised - Total funds raised in Ethers\n', '  */\n', '  MintableToken internal token;\n', '  address internal wallet;\n', '  uint256 public rate;\n', '  uint256 internal weiRaised;\n', '  /**\n', '   *  @uint256 preSaleStartTime - Pre-Sale Start Time\n', '   *  @uint256 preSaleEndTime - Pre-Sale End Time\n', '   *  @uint256 preICOStartTime - Pre-ICO Start Time\n', '   *  @uint256 preICOEndTime - Pre-ICO End Time\n', '   *  @uint256 ICOstartTime - ICO Start Time\n', '   *  @uint256 ICOEndTime - ICO End Time\n', '  */\n', '  uint256 public preSaleStartTime;\n', '  uint256 public preSaleEndTime;\n', '  uint256 public preICOStartTime;\n', '  uint256 public preICOEndTime;\n', '  uint256 public ICOstartTime;\n', '  uint256 public ICOEndTime;\n', '  \n', '  /**\n', '   *  @uint preSaleBonus - Pre-Sale Start Time\n', '   *  @uint preICOBonus - Pre-Sale End Time\n', '   *  @uint firstWeekBonus - Pre-ICO Start Time\n', '   *  @uint secondWeekBonus - Pre-ICO End Time\n', '   *  @uint thirdWeekBonus - ICO Start Time\n', '  */\n', '  uint internal preSaleBonus;\n', '  uint internal preICOBonus;\n', '  uint internal firstWeekBonus;\n', '  uint internal secondWeekBonus;\n', '  uint internal thirdWeekBonus;\n', '  \n', '  /**\n', '   *  @uint256 weekOne - WeekOne Time \n', '   *  @uint256 weekTwo - WeekTwo Time \n', '   *  @uint256 weekThree - WeekThree Time \n', '  */\n', '  uint256 internal weekOne;\n', '  uint256 internal weekTwo;\n', '  uint256 internal weekThree;\n', '  /**\n', '   *  @uint256 totalSupply - Total supply of tokens \n', '   *  @uint256 publicSupply - Total public Supply \n', '   *  @uint256 reserveSupply - Total Reserve Supply \n', '   *  @uint256 bountySupply - Total Bounty Supply\n', '   *  @uint256 teamSupply - Total Team Supply divided by 4\n', '   *  @uint256 advisorSupply - Total Advisor Supply divided by 4\n', '   *  @uint256 founderSupply - Total Founder Supply divided by 4\n', '   *  @uint256 preSaleSupply - Total PreSale Supply from Public Supply \n', '   *  @uint256 preICOSupply - Total PreICO Supply from Public Supply\n', '   *  @uint256 icoSupply - Total ICO Supply from Public Supply\n', '  */\n', '  uint256 public totalSupply = SafeMath.mul(700000000, 1 ether);\n', '  uint256 internal publicSupply = SafeMath.mul(SafeMath.div(totalSupply,100),50);\n', '  uint256 internal reserveSupply = SafeMath.mul(SafeMath.div(totalSupply,100),14);\n', '  uint256 internal teamSupply = SafeMath.div(SafeMath.mul(SafeMath.div(totalSupply,100),13),4);\n', '  uint256 internal advisorSupply = SafeMath.div(SafeMath.mul(SafeMath.div(totalSupply,100),3),4);\n', '  uint256 internal bountySupply = SafeMath.mul(SafeMath.div(totalSupply,100),5);\n', '  uint256 internal founderSupply = SafeMath.div(SafeMath.mul(SafeMath.div(totalSupply,100),15),4);\n', '  uint256 internal preSaleSupply = SafeMath.mul(SafeMath.div(totalSupply,100),2);\n', '  uint256 internal preICOSupply = SafeMath.mul(SafeMath.div(totalSupply,100),13);\n', '  uint256 internal icoSupply = SafeMath.mul(SafeMath.div(totalSupply,100),35);\n', '  /**\n', '   *  @uint256 advisorTimeLock - Advisor Timelock \n', '   *  @uint256 founderTeamTimeLock - Founder and Team Timelock \n', '  */\n', '  uint256 internal advisorTimeLock;\n', '  uint256 internal founderTeamTimeLock;\n', '  /**\n', '   *  @bool checkUnsoldTokens - \n', '   *  @bool upgradePreICOSupply - Boolean variable updates when the PreSale tokens added to PreICO supply\n', '   *  @bool upgradeICOSupply - Boolean variable updates when the PreICO tokens added to ICO supply\n', '   *  @bool grantAdvisorSupply -  Boolean variable updates when Team tokens minted\n', '   *  @bool grantFounderTeamSupply - Boolean variable updates when Team and Founder tokens minted\n', '  */\n', '  bool internal checkUnsoldTokens;\n', '  bool internal upgradePreICOSupply;\n', '  bool internal upgradeICOSupply;\n', '  bool internal grantAdvisorSupply;\n', '  bool internal grantFounderTeamSupply;\n', '  /**\n', '   *  @uint vestedFounderTeamCheck - Variable count for vesting\n', '   *  @uint vestedAdvisorCheck - Variable count for vesting \n', '  */\n', '  uint vestedFounderTeamCheck;\n', '  uint vestedAdvisorCheck;\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value Wei&#39;s paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  /**\n', '   * function Crowdsale - Parameterized Constructor\n', '   * @param _startTime - StartTime of Crowdsale\n', '   * @param _endTime - EndTime of Crowdsale\n', '   * @param _rate - Tokens against Ether\n', '   * @param _wallet - MultiSignature Wallet Address\n', '   */\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) internal {\n', '    \n', '    require(_wallet != 0x0);\n', '    token = createTokenContract();\n', '    preSaleStartTime = _startTime;\n', '    preSaleEndTime = 1525352400;\n', '    preICOStartTime = preSaleEndTime;\n', '    preICOEndTime = 1528030800;\n', '    ICOstartTime = preICOEndTime;\n', '    ICOEndTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    preSaleBonus = SafeMath.div(SafeMath.mul(rate,40),100);\n', '    preICOBonus = SafeMath.div(SafeMath.mul(rate,30),100);\n', '    firstWeekBonus = SafeMath.div(SafeMath.mul(rate,20),100);\n', '    secondWeekBonus = SafeMath.div(SafeMath.mul(rate,15),100);\n', '    thirdWeekBonus = SafeMath.div(SafeMath.mul(rate,10),100);\n', ' \n', '    weekOne = SafeMath.add(ICOstartTime, 7 days);\n', '    weekTwo = SafeMath.add(weekOne, 7 days);\n', '    weekThree = SafeMath.add(weekTwo, 7 days);\n', '    advisorTimeLock = SafeMath.add(ICOEndTime, 180 days);\n', '    founderTeamTimeLock = SafeMath.add(ICOEndTime, 180 days);\n', '    checkUnsoldTokens = false;\n', '    upgradeICOSupply = false;\n', '    upgradePreICOSupply = false;\n', '    grantAdvisorSupply = false;\n', '    grantFounderTeamSupply = false;\n', '    vestedFounderTeamCheck = 0;\n', '    vestedAdvisorCheck = 0;\n', '    \n', '  }\n', '  /**\n', '   * function createTokenContract - Mintable Token Created\n', '   */\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '  \n', '  /**\n', '   * function Fallback - Receives Ethers\n', '   */\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  /**\n', '   * function preSaleTokens - Calculate Tokens in PreSale\n', '   */\n', '  function preSaleTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '        \n', '    require(preSaleSupply > 0);\n', '    tokens = SafeMath.add(tokens, weiAmount.mul(preSaleBonus));\n', '    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '    require(preSaleSupply >= tokens);\n', '    preSaleSupply = preSaleSupply.sub(tokens);        \n', '    return tokens;\n', '  }\n', '  /**\n', '    * function preICOTokens - Calculate Tokens in PreICO\n', '    */\n', '  function preICOTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '        \n', '    require(preICOSupply > 0);\n', '    if (!upgradePreICOSupply) {\n', '      preICOSupply = SafeMath.add(preICOSupply,preSaleSupply);\n', '      upgradePreICOSupply = true;\n', '    }\n', '    tokens = SafeMath.add(tokens, weiAmount.mul(preICOBonus));\n', '    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '    \n', '    require(preICOSupply >= tokens);\n', '    \n', '    preICOSupply = preICOSupply.sub(tokens);        \n', '    return tokens;\n', '  }\n', '  /**\n', '   * function icoTokens - Calculate Tokens in ICO\n', '   */\n', '  \n', '  function icoTokens(uint256 weiAmount, uint256 tokens, uint256 accessTime) internal returns (uint256) {\n', '        \n', '    require(icoSupply > 0);\n', '    if (!upgradeICOSupply) {\n', '      icoSupply = SafeMath.add(icoSupply,preICOSupply);\n', '      upgradeICOSupply = true;\n', '    }\n', '    \n', '    if (accessTime <= weekOne) {\n', '      tokens = SafeMath.add(tokens, weiAmount.mul(firstWeekBonus));\n', '    } else if (accessTime <= weekTwo) {\n', '      tokens = SafeMath.add(tokens, weiAmount.mul(secondWeekBonus));\n', '    } else if ( accessTime < weekThree ) {\n', '      tokens = SafeMath.add(tokens, weiAmount.mul(thirdWeekBonus));\n', '    }\n', '    \n', '    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '    icoSupply = icoSupply.sub(tokens);        \n', '    return tokens;\n', '  }\n', '  /**\n', '  * function buyTokens - Collect Ethers and transfer tokens\n', '  */\n', '  function buyTokens(address beneficiary) whenNotPaused public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '    uint256 accessTime = now;\n', '    uint256 tokens = 0;\n', '    uint256 weiAmount = msg.value;\n', '    require((weiAmount >= (100000000000000000)) && (weiAmount <= (25000000000000000000)));\n', '    if ((accessTime >= preSaleStartTime) && (accessTime < preSaleEndTime)) {\n', '      tokens = preSaleTokens(weiAmount, tokens);\n', '    } else if ((accessTime >= preICOStartTime) && (accessTime < preICOEndTime)) {\n', '      tokens = preICOTokens(weiAmount, tokens);\n', '    } else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime)) { \n', '      tokens = icoTokens(weiAmount, tokens, accessTime);\n', '    } else {\n', '      revert();\n', '    }\n', '    \n', '    publicSupply = publicSupply.sub(tokens);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '  /**\n', '   * function forwardFunds - Transfer funds to wallet\n', '   */\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '  /**\n', '   * function validPurchase - Checks the purchase is valid or not\n', '   * @return true - Purchase is withPeriod and nonZero\n', '   */\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= preSaleStartTime && now <= ICOEndTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '  /**\n', '   * function hasEnded - Checks the ICO ends or not\n', '   * @return true - ICO Ends\n', '   */\n', '  \n', '  function hasEnded() public constant returns (bool) {\n', '    return now > ICOEndTime;\n', '  }\n', '  /**\n', '   * function unsoldToken - Function used to transfer all \n', '   *               unsold public tokens to reserve supply\n', '   */\n', '  function unsoldToken() onlyOwner public {\n', '    require(hasEnded());\n', '    require(!checkUnsoldTokens);\n', '    \n', '    checkUnsoldTokens = true;\n', '    reserveSupply = SafeMath.add(reserveSupply, publicSupply);\n', '    publicSupply = 0;\n', '  }\n', '  /** \n', '   * function getTokenAddress - Get Token Address \n', '   */\n', '  function getTokenAddress() onlyOwner public returns (address) {\n', '    return token;\n', '  }\n', '  /** \n', '   * function getPublicSupply - Get Public Address \n', '   */\n', '  function getPublicSupply() onlyOwner public returns (uint256) {\n', '    return publicSupply;\n', '  }\n', '}\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', ' \n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '  uint256 public cap;\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '}\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '  bool isFinalized = false;\n', '  event Finalized();\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '    finalization();\n', '    Finalized();\n', '    isFinalized = true;\n', '  }\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '  enum State { Active, Refunding, Closed }\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', ' * Uses a RefundVault as the crowdsale&#39;s vault.\n', ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '  bool private _goalReached = false;\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault private vault;\n', '  function RefundableCrowdsale(uint256 _goal) {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', '  // We&#39;re overriding the fund forwarding from Crowdsale.\n', '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '    vault.refund(msg.sender);\n', '  }\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '    super.finalization();\n', '  }\n', '  function goalReached() public constant returns (bool) {\n', '    if (weiRaised >= goal) {\n', '      _goalReached = true;\n', '      return true;\n', '    } else if (_goalReached) {\n', '      return true;\n', '    } \n', '    else {\n', '      return false;\n', '    }\n', '  }\n', '  function updateGoalCheck() onlyOwner public {\n', '    _goalReached = true;\n', '  }\n', '  function getVaultAddress() onlyOwner public returns (address) {\n', '    return vault;\n', '  }\n', '}\n', '/**\n', ' * @title ArtToujourToken \n', ' */\n', ' \n', 'contract ArtToujourToken is MintableToken {\n', '  /**\n', '   *  @string name - Token Name\n', '   *  @string symbol - Token Symbol\n', '   *  @uint8 decimals - Token Decimals\n', '   *  @uint256 _totalSupply - Token Total Supply\n', '  */\n', '  string public constant name = "ARISTON";\n', '  string public constant symbol = "ARTZ";\n', '  uint8 public constant decimals = 18;\n', '  uint256 public constant _totalSupply = 700000000 * 1 ether;\n', '  \n', '/** Constructor ArtToujourToken */\n', '  function ArtToujourToken() {\n', '    totalSupply = _totalSupply;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract CrowdsaleFunctions is Crowdsale {\n', ' /** \n', '  * function bountyFunds - Transfer bounty tokens via AirDrop\n', '  * @param beneficiary address where owner wants to transfer tokens\n', '  * @param tokens value of token\n', '  */\n', '  function bountyFunds(address[] beneficiary, uint256[] tokens) onlyOwner public {\n', '    for (uint256 i = 0; i < beneficiary.length; i++) {\n', '      tokens[i] = SafeMath.mul(tokens[i],1 ether); \n', '      require(bountySupply >= tokens[i]);\n', '      bountySupply = SafeMath.sub(bountySupply,tokens[i]);\n', '      token.mint(beneficiary[i], tokens[i]);\n', '    }\n', '  }\n', '  /** \n', '   * function reserveFunds - Transfer reserve tokens to wallet for future platform usage\n', '   */\n', '  function reserveFunds() onlyOwner public { \n', '    require(reserveSupply > 0);\n', '    token.mint(0x3501C88dCEAC658014d6C4406E0D39e11a7e0340, reserveSupply);\n', '    reserveSupply = 0;\n', '  }\n', '  /** \n', '  * function grantAdvisorToken - Transfer advisor tokens to advisor wallet \n', '  */\n', '  function grantAdvisorToken() onlyOwner public {\n', '    require(!grantAdvisorSupply);\n', '    require(now > advisorTimeLock);\n', '    require(advisorSupply > 0);\n', '    \n', '    if (vestedAdvisorCheck < 4) {\n', '      vestedAdvisorCheck++;\n', '      advisorTimeLock = SafeMath.add(advisorTimeLock, 90 days);\n', '      token.mint(0x819acdf6731B51Dd7E68D5DfB6f602BBD8E62871, advisorSupply);\n', '  \n', '      if (vestedAdvisorCheck == 4) {\n', '        advisorSupply = 0;\n', '      }\n', '    }\n', '  }\n', '  /** \n', '   * function grantFounderTeamToken - Transfer advisor tokens to Founder and Team wallets \n', '   */\n', '  function grantFounderTeamToken() onlyOwner public {\n', '    require(!grantFounderTeamSupply);\n', '    require(now > founderTeamTimeLock);\n', '    require(founderSupply > 0);\n', '    \n', '    if (vestedFounderTeamCheck < 4) {\n', '       vestedFounderTeamCheck++;\n', '       founderTeamTimeLock = SafeMath.add(founderTeamTimeLock, 180 days);\n', '       token.mint(0x996f2959cE684B2cA221b9f0Da41899662220953, founderSupply);\n', '       token.mint(0x3c61fD8BDFf22C3Aa309f52793288CfB8A271325, teamSupply);\n', '       if (vestedFounderTeamCheck == 4) {\n', '          grantFounderTeamSupply = true;\n', '          founderSupply = 0;\n', '          teamSupply = 0;\n', '       }\n', '    }\n', '  }\n', '/** \n', ' *.function transferToken - Used to transfer tokens to investors who pays us other than Ethers\n', ' * @param beneficiary - Address where owner wants to transfer tokens\n', ' * @param tokens -  Number of tokens\n', ' */\n', '  function transferToken(address beneficiary, uint256 tokens) onlyOwner public {\n', '    require(publicSupply > 0);\n', '    tokens = SafeMath.mul(tokens,1 ether);\n', '    require(publicSupply >= tokens);\n', '    publicSupply = SafeMath.sub(publicSupply,tokens);\n', '    token.mint(beneficiary, tokens);\n', '  }\n', '}\n', 'contract ArtToujourICO is Crowdsale, CappedCrowdsale, RefundableCrowdsale, CrowdsaleFunctions {\n', '  \n', '    /** Constructor ArtToujourICO */\n', '    function ArtToujourICO(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _goal, uint256 _cap, address _wallet) \n', '    CappedCrowdsale(_cap)\n', '    FinalizableCrowdsale()\n', '    RefundableCrowdsale(_goal)   \n', '    Crowdsale(_startTime,_endTime,_rate,_wallet) \n', '    {\n', '        require(_goal < _cap);\n', '    }\n', '    \n', '    /** ArtToujourToken Contract */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new ArtToujourToken();\n', '    }\n', '}']
['pragma solidity 0.4.17;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address internal owner;\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '/**\n', ' * @title ArtToujourICO\n', ' * @dev ArtToujourCrowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them ARTZ tokens based\n', ' * on a ARTZ token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '  mapping(address => uint256) balances;\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '}\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '  mapping (address => mapping (address => uint256)) allowed;\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    uint256 _allowance = allowed[_from][msg.sender];\n', '    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n', '    // require (_value <= _allowance);\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = _allowance.sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue)\n', '    returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '  function decreaseApproval (address _spender, uint _subtractedValue)\n', '    returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '}\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '  bool public mintingFinished = false;\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    //totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(msg.sender, _to, _amount);\n', '    return true;\n', '  }\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '  function burnTokens(uint256 _unsoldTokens) onlyOwner public returns (bool) {\n', '    totalSupply = SafeMath.sub(totalSupply, _unsoldTokens);\n', '  }\n', '}\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '  bool public paused = false;\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '/**\n', ' * @title ArtToujour Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale is Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '  /**\n', '   *  @MintableToken token - Token Object\n', '   *  @address wallet - Wallet Address\n', '   *  @uint8 rate - Tokens per Ether\n', '   *  @uint256 weiRaised - Total funds raised in Ethers\n', '  */\n', '  MintableToken internal token;\n', '  address internal wallet;\n', '  uint256 public rate;\n', '  uint256 internal weiRaised;\n', '  /**\n', '   *  @uint256 preSaleStartTime - Pre-Sale Start Time\n', '   *  @uint256 preSaleEndTime - Pre-Sale End Time\n', '   *  @uint256 preICOStartTime - Pre-ICO Start Time\n', '   *  @uint256 preICOEndTime - Pre-ICO End Time\n', '   *  @uint256 ICOstartTime - ICO Start Time\n', '   *  @uint256 ICOEndTime - ICO End Time\n', '  */\n', '  uint256 public preSaleStartTime;\n', '  uint256 public preSaleEndTime;\n', '  uint256 public preICOStartTime;\n', '  uint256 public preICOEndTime;\n', '  uint256 public ICOstartTime;\n', '  uint256 public ICOEndTime;\n', '  \n', '  /**\n', '   *  @uint preSaleBonus - Pre-Sale Start Time\n', '   *  @uint preICOBonus - Pre-Sale End Time\n', '   *  @uint firstWeekBonus - Pre-ICO Start Time\n', '   *  @uint secondWeekBonus - Pre-ICO End Time\n', '   *  @uint thirdWeekBonus - ICO Start Time\n', '  */\n', '  uint internal preSaleBonus;\n', '  uint internal preICOBonus;\n', '  uint internal firstWeekBonus;\n', '  uint internal secondWeekBonus;\n', '  uint internal thirdWeekBonus;\n', '  \n', '  /**\n', '   *  @uint256 weekOne - WeekOne Time \n', '   *  @uint256 weekTwo - WeekTwo Time \n', '   *  @uint256 weekThree - WeekThree Time \n', '  */\n', '  uint256 internal weekOne;\n', '  uint256 internal weekTwo;\n', '  uint256 internal weekThree;\n', '  /**\n', '   *  @uint256 totalSupply - Total supply of tokens \n', '   *  @uint256 publicSupply - Total public Supply \n', '   *  @uint256 reserveSupply - Total Reserve Supply \n', '   *  @uint256 bountySupply - Total Bounty Supply\n', '   *  @uint256 teamSupply - Total Team Supply divided by 4\n', '   *  @uint256 advisorSupply - Total Advisor Supply divided by 4\n', '   *  @uint256 founderSupply - Total Founder Supply divided by 4\n', '   *  @uint256 preSaleSupply - Total PreSale Supply from Public Supply \n', '   *  @uint256 preICOSupply - Total PreICO Supply from Public Supply\n', '   *  @uint256 icoSupply - Total ICO Supply from Public Supply\n', '  */\n', '  uint256 public totalSupply = SafeMath.mul(700000000, 1 ether);\n', '  uint256 internal publicSupply = SafeMath.mul(SafeMath.div(totalSupply,100),50);\n', '  uint256 internal reserveSupply = SafeMath.mul(SafeMath.div(totalSupply,100),14);\n', '  uint256 internal teamSupply = SafeMath.div(SafeMath.mul(SafeMath.div(totalSupply,100),13),4);\n', '  uint256 internal advisorSupply = SafeMath.div(SafeMath.mul(SafeMath.div(totalSupply,100),3),4);\n', '  uint256 internal bountySupply = SafeMath.mul(SafeMath.div(totalSupply,100),5);\n', '  uint256 internal founderSupply = SafeMath.div(SafeMath.mul(SafeMath.div(totalSupply,100),15),4);\n', '  uint256 internal preSaleSupply = SafeMath.mul(SafeMath.div(totalSupply,100),2);\n', '  uint256 internal preICOSupply = SafeMath.mul(SafeMath.div(totalSupply,100),13);\n', '  uint256 internal icoSupply = SafeMath.mul(SafeMath.div(totalSupply,100),35);\n', '  /**\n', '   *  @uint256 advisorTimeLock - Advisor Timelock \n', '   *  @uint256 founderTeamTimeLock - Founder and Team Timelock \n', '  */\n', '  uint256 internal advisorTimeLock;\n', '  uint256 internal founderTeamTimeLock;\n', '  /**\n', '   *  @bool checkUnsoldTokens - \n', '   *  @bool upgradePreICOSupply - Boolean variable updates when the PreSale tokens added to PreICO supply\n', '   *  @bool upgradeICOSupply - Boolean variable updates when the PreICO tokens added to ICO supply\n', '   *  @bool grantAdvisorSupply -  Boolean variable updates when Team tokens minted\n', '   *  @bool grantFounderTeamSupply - Boolean variable updates when Team and Founder tokens minted\n', '  */\n', '  bool internal checkUnsoldTokens;\n', '  bool internal upgradePreICOSupply;\n', '  bool internal upgradeICOSupply;\n', '  bool internal grantAdvisorSupply;\n', '  bool internal grantFounderTeamSupply;\n', '  /**\n', '   *  @uint vestedFounderTeamCheck - Variable count for vesting\n', '   *  @uint vestedAdvisorCheck - Variable count for vesting \n', '  */\n', '  uint vestedFounderTeamCheck;\n', '  uint vestedAdvisorCheck;\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', "   * @param value Wei's paid for purchase\n", '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '  /**\n', '   * function Crowdsale - Parameterized Constructor\n', '   * @param _startTime - StartTime of Crowdsale\n', '   * @param _endTime - EndTime of Crowdsale\n', '   * @param _rate - Tokens against Ether\n', '   * @param _wallet - MultiSignature Wallet Address\n', '   */\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) internal {\n', '    \n', '    require(_wallet != 0x0);\n', '    token = createTokenContract();\n', '    preSaleStartTime = _startTime;\n', '    preSaleEndTime = 1525352400;\n', '    preICOStartTime = preSaleEndTime;\n', '    preICOEndTime = 1528030800;\n', '    ICOstartTime = preICOEndTime;\n', '    ICOEndTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    preSaleBonus = SafeMath.div(SafeMath.mul(rate,40),100);\n', '    preICOBonus = SafeMath.div(SafeMath.mul(rate,30),100);\n', '    firstWeekBonus = SafeMath.div(SafeMath.mul(rate,20),100);\n', '    secondWeekBonus = SafeMath.div(SafeMath.mul(rate,15),100);\n', '    thirdWeekBonus = SafeMath.div(SafeMath.mul(rate,10),100);\n', ' \n', '    weekOne = SafeMath.add(ICOstartTime, 7 days);\n', '    weekTwo = SafeMath.add(weekOne, 7 days);\n', '    weekThree = SafeMath.add(weekTwo, 7 days);\n', '    advisorTimeLock = SafeMath.add(ICOEndTime, 180 days);\n', '    founderTeamTimeLock = SafeMath.add(ICOEndTime, 180 days);\n', '    checkUnsoldTokens = false;\n', '    upgradeICOSupply = false;\n', '    upgradePreICOSupply = false;\n', '    grantAdvisorSupply = false;\n', '    grantFounderTeamSupply = false;\n', '    vestedFounderTeamCheck = 0;\n', '    vestedAdvisorCheck = 0;\n', '    \n', '  }\n', '  /**\n', '   * function createTokenContract - Mintable Token Created\n', '   */\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '  \n', '  /**\n', '   * function Fallback - Receives Ethers\n', '   */\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '  /**\n', '   * function preSaleTokens - Calculate Tokens in PreSale\n', '   */\n', '  function preSaleTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '        \n', '    require(preSaleSupply > 0);\n', '    tokens = SafeMath.add(tokens, weiAmount.mul(preSaleBonus));\n', '    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '    require(preSaleSupply >= tokens);\n', '    preSaleSupply = preSaleSupply.sub(tokens);        \n', '    return tokens;\n', '  }\n', '  /**\n', '    * function preICOTokens - Calculate Tokens in PreICO\n', '    */\n', '  function preICOTokens(uint256 weiAmount, uint256 tokens) internal returns (uint256) {\n', '        \n', '    require(preICOSupply > 0);\n', '    if (!upgradePreICOSupply) {\n', '      preICOSupply = SafeMath.add(preICOSupply,preSaleSupply);\n', '      upgradePreICOSupply = true;\n', '    }\n', '    tokens = SafeMath.add(tokens, weiAmount.mul(preICOBonus));\n', '    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '    \n', '    require(preICOSupply >= tokens);\n', '    \n', '    preICOSupply = preICOSupply.sub(tokens);        \n', '    return tokens;\n', '  }\n', '  /**\n', '   * function icoTokens - Calculate Tokens in ICO\n', '   */\n', '  \n', '  function icoTokens(uint256 weiAmount, uint256 tokens, uint256 accessTime) internal returns (uint256) {\n', '        \n', '    require(icoSupply > 0);\n', '    if (!upgradeICOSupply) {\n', '      icoSupply = SafeMath.add(icoSupply,preICOSupply);\n', '      upgradeICOSupply = true;\n', '    }\n', '    \n', '    if (accessTime <= weekOne) {\n', '      tokens = SafeMath.add(tokens, weiAmount.mul(firstWeekBonus));\n', '    } else if (accessTime <= weekTwo) {\n', '      tokens = SafeMath.add(tokens, weiAmount.mul(secondWeekBonus));\n', '    } else if ( accessTime < weekThree ) {\n', '      tokens = SafeMath.add(tokens, weiAmount.mul(thirdWeekBonus));\n', '    }\n', '    \n', '    tokens = SafeMath.add(tokens, weiAmount.mul(rate));\n', '    icoSupply = icoSupply.sub(tokens);        \n', '    return tokens;\n', '  }\n', '  /**\n', '  * function buyTokens - Collect Ethers and transfer tokens\n', '  */\n', '  function buyTokens(address beneficiary) whenNotPaused public payable {\n', '    require(beneficiary != 0x0);\n', '    require(validPurchase());\n', '    uint256 accessTime = now;\n', '    uint256 tokens = 0;\n', '    uint256 weiAmount = msg.value;\n', '    require((weiAmount >= (100000000000000000)) && (weiAmount <= (25000000000000000000)));\n', '    if ((accessTime >= preSaleStartTime) && (accessTime < preSaleEndTime)) {\n', '      tokens = preSaleTokens(weiAmount, tokens);\n', '    } else if ((accessTime >= preICOStartTime) && (accessTime < preICOEndTime)) {\n', '      tokens = preICOTokens(weiAmount, tokens);\n', '    } else if ((accessTime >= ICOstartTime) && (accessTime <= ICOEndTime)) { \n', '      tokens = icoTokens(weiAmount, tokens, accessTime);\n', '    } else {\n', '      revert();\n', '    }\n', '    \n', '    publicSupply = publicSupply.sub(tokens);\n', '    weiRaised = weiRaised.add(weiAmount);\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '    forwardFunds();\n', '  }\n', '  /**\n', '   * function forwardFunds - Transfer funds to wallet\n', '   */\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '  /**\n', '   * function validPurchase - Checks the purchase is valid or not\n', '   * @return true - Purchase is withPeriod and nonZero\n', '   */\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= preSaleStartTime && now <= ICOEndTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '  /**\n', '   * function hasEnded - Checks the ICO ends or not\n', '   * @return true - ICO Ends\n', '   */\n', '  \n', '  function hasEnded() public constant returns (bool) {\n', '    return now > ICOEndTime;\n', '  }\n', '  /**\n', '   * function unsoldToken - Function used to transfer all \n', '   *               unsold public tokens to reserve supply\n', '   */\n', '  function unsoldToken() onlyOwner public {\n', '    require(hasEnded());\n', '    require(!checkUnsoldTokens);\n', '    \n', '    checkUnsoldTokens = true;\n', '    reserveSupply = SafeMath.add(reserveSupply, publicSupply);\n', '    publicSupply = 0;\n', '  }\n', '  /** \n', '   * function getTokenAddress - Get Token Address \n', '   */\n', '  function getTokenAddress() onlyOwner public returns (address) {\n', '    return token;\n', '  }\n', '  /** \n', '   * function getPublicSupply - Get Public Address \n', '   */\n', '  function getPublicSupply() onlyOwner public returns (uint256) {\n', '    return publicSupply;\n', '  }\n', '}\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Extension of Crowdsale with a max amount of funds raised\n', ' */\n', ' \n', 'contract CappedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '  uint256 public cap;\n', '  function CappedCrowdsale(uint256 _cap) {\n', '    require(_cap > 0);\n', '    cap = _cap;\n', '  }\n', '  // overriding Crowdsale#validPurchase to add extra cap logic\n', '  // @return true if investors can buy at the moment\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinCap = weiRaised.add(msg.value) <= cap;\n', '    return super.validPurchase() && withinCap;\n', '  }\n', '  // overriding Crowdsale#hasEnded to add cap logic\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    bool capReached = weiRaised >= cap;\n', '    return super.hasEnded() || capReached;\n', '  }\n', '}\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of Crowdsale where an owner can do extra work\n', ' * after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '  bool isFinalized = false;\n', '  event Finalized();\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasEnded());\n', '    finalization();\n', '    Finalized();\n', '    isFinalized = true;\n', '  }\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '}\n', '/**\n', ' * @title RefundVault\n', ' * @dev This contract is used for storing funds while a crowdsale\n', ' * is in progress. Supports refunding the money if crowdsale fails,\n', ' * and forwarding it if crowdsale is successful.\n', ' */\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '  enum State { Active, Refunding, Closed }\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '  function RefundVault(address _wallet) {\n', '    require(_wallet != 0x0);\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of Crowdsale contract that adds a funding goal, and\n', ' * the possibility of users getting a refund if goal is not met.\n', " * Uses a RefundVault as the crowdsale's vault.\n", ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '  using SafeMath for uint256;\n', '  // minimum amount of funds to be raised in weis\n', '  uint256 public goal;\n', '  bool private _goalReached = false;\n', '  // refund vault used to hold funds while crowdsale is running\n', '  RefundVault private vault;\n', '  function RefundableCrowdsale(uint256 _goal) {\n', '    require(_goal > 0);\n', '    vault = new RefundVault(wallet);\n', '    goal = _goal;\n', '  }\n', "  // We're overriding the fund forwarding from Crowdsale.\n", '  // In addition to sending the funds, we want to call\n', '  // the RefundVault deposit function\n', '  function forwardFunds() internal {\n', '    vault.deposit.value(msg.value)(msg.sender);\n', '  }\n', '  // if crowdsale is unsuccessful, investors can claim refunds here\n', '  function claimRefund() public {\n', '    require(isFinalized);\n', '    require(!goalReached());\n', '    vault.refund(msg.sender);\n', '  }\n', '  // vault finalization task, called when owner calls finalize()\n', '  function finalization() internal {\n', '    if (goalReached()) {\n', '      vault.close();\n', '    } else {\n', '      vault.enableRefunds();\n', '    }\n', '    super.finalization();\n', '  }\n', '  function goalReached() public constant returns (bool) {\n', '    if (weiRaised >= goal) {\n', '      _goalReached = true;\n', '      return true;\n', '    } else if (_goalReached) {\n', '      return true;\n', '    } \n', '    else {\n', '      return false;\n', '    }\n', '  }\n', '  function updateGoalCheck() onlyOwner public {\n', '    _goalReached = true;\n', '  }\n', '  function getVaultAddress() onlyOwner public returns (address) {\n', '    return vault;\n', '  }\n', '}\n', '/**\n', ' * @title ArtToujourToken \n', ' */\n', ' \n', 'contract ArtToujourToken is MintableToken {\n', '  /**\n', '   *  @string name - Token Name\n', '   *  @string symbol - Token Symbol\n', '   *  @uint8 decimals - Token Decimals\n', '   *  @uint256 _totalSupply - Token Total Supply\n', '  */\n', '  string public constant name = "ARISTON";\n', '  string public constant symbol = "ARTZ";\n', '  uint8 public constant decimals = 18;\n', '  uint256 public constant _totalSupply = 700000000 * 1 ether;\n', '  \n', '/** Constructor ArtToujourToken */\n', '  function ArtToujourToken() {\n', '    totalSupply = _totalSupply;\n', '  }\n', '}\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract CrowdsaleFunctions is Crowdsale {\n', ' /** \n', '  * function bountyFunds - Transfer bounty tokens via AirDrop\n', '  * @param beneficiary address where owner wants to transfer tokens\n', '  * @param tokens value of token\n', '  */\n', '  function bountyFunds(address[] beneficiary, uint256[] tokens) onlyOwner public {\n', '    for (uint256 i = 0; i < beneficiary.length; i++) {\n', '      tokens[i] = SafeMath.mul(tokens[i],1 ether); \n', '      require(bountySupply >= tokens[i]);\n', '      bountySupply = SafeMath.sub(bountySupply,tokens[i]);\n', '      token.mint(beneficiary[i], tokens[i]);\n', '    }\n', '  }\n', '  /** \n', '   * function reserveFunds - Transfer reserve tokens to wallet for future platform usage\n', '   */\n', '  function reserveFunds() onlyOwner public { \n', '    require(reserveSupply > 0);\n', '    token.mint(0x3501C88dCEAC658014d6C4406E0D39e11a7e0340, reserveSupply);\n', '    reserveSupply = 0;\n', '  }\n', '  /** \n', '  * function grantAdvisorToken - Transfer advisor tokens to advisor wallet \n', '  */\n', '  function grantAdvisorToken() onlyOwner public {\n', '    require(!grantAdvisorSupply);\n', '    require(now > advisorTimeLock);\n', '    require(advisorSupply > 0);\n', '    \n', '    if (vestedAdvisorCheck < 4) {\n', '      vestedAdvisorCheck++;\n', '      advisorTimeLock = SafeMath.add(advisorTimeLock, 90 days);\n', '      token.mint(0x819acdf6731B51Dd7E68D5DfB6f602BBD8E62871, advisorSupply);\n', '  \n', '      if (vestedAdvisorCheck == 4) {\n', '        advisorSupply = 0;\n', '      }\n', '    }\n', '  }\n', '  /** \n', '   * function grantFounderTeamToken - Transfer advisor tokens to Founder and Team wallets \n', '   */\n', '  function grantFounderTeamToken() onlyOwner public {\n', '    require(!grantFounderTeamSupply);\n', '    require(now > founderTeamTimeLock);\n', '    require(founderSupply > 0);\n', '    \n', '    if (vestedFounderTeamCheck < 4) {\n', '       vestedFounderTeamCheck++;\n', '       founderTeamTimeLock = SafeMath.add(founderTeamTimeLock, 180 days);\n', '       token.mint(0x996f2959cE684B2cA221b9f0Da41899662220953, founderSupply);\n', '       token.mint(0x3c61fD8BDFf22C3Aa309f52793288CfB8A271325, teamSupply);\n', '       if (vestedFounderTeamCheck == 4) {\n', '          grantFounderTeamSupply = true;\n', '          founderSupply = 0;\n', '          teamSupply = 0;\n', '       }\n', '    }\n', '  }\n', '/** \n', ' *.function transferToken - Used to transfer tokens to investors who pays us other than Ethers\n', ' * @param beneficiary - Address where owner wants to transfer tokens\n', ' * @param tokens -  Number of tokens\n', ' */\n', '  function transferToken(address beneficiary, uint256 tokens) onlyOwner public {\n', '    require(publicSupply > 0);\n', '    tokens = SafeMath.mul(tokens,1 ether);\n', '    require(publicSupply >= tokens);\n', '    publicSupply = SafeMath.sub(publicSupply,tokens);\n', '    token.mint(beneficiary, tokens);\n', '  }\n', '}\n', 'contract ArtToujourICO is Crowdsale, CappedCrowdsale, RefundableCrowdsale, CrowdsaleFunctions {\n', '  \n', '    /** Constructor ArtToujourICO */\n', '    function ArtToujourICO(uint256 _startTime, uint256 _endTime, uint256 _rate, uint256 _goal, uint256 _cap, address _wallet) \n', '    CappedCrowdsale(_cap)\n', '    FinalizableCrowdsale()\n', '    RefundableCrowdsale(_goal)   \n', '    Crowdsale(_startTime,_endTime,_rate,_wallet) \n', '    {\n', '        require(_goal < _cap);\n', '    }\n', '    \n', '    /** ArtToujourToken Contract */\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new ArtToujourToken();\n', '    }\n', '}']
