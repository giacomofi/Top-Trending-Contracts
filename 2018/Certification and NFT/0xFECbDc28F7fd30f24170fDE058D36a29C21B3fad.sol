['pragma solidity ^0.4.24;\n', '\n', 'interface token {\n', '    function transfer(address receiver, uint amount) external returns (bool);\n', '}\n', '\n', 'contract Conteract {\n', '\n', '    event eDonate(address donor, uint256 value);\n', '    event eSuggest(address person, string suggestion);\n', '\n', '    string public About;\n', '    address public Creator;\n', '    mapping (address => uint256) public Donors;\n', '    mapping (address => string) public Suggestions;\n', '\n', '    constructor(string about) public {\n', '        Creator = msg.sender;\n', '        About = about;\n', '    }\n', '\n', '    function Suggest(string suggestion) public {\n', '        Suggestions[msg.sender] = suggestion;\n', '        emit eSuggest(msg.sender, suggestion);\n', '    }\n', '\n', '    function Donate() payable public {\n', '        Creator.transfer(msg.value);\n', '        Donors[msg.sender] += msg.value;\n', '        emit eDonate(msg.sender, msg.value);\n', '    }\n', '\n', '    function CollectERC20(address tokenAddress, uint256 amount) public {\n', '        require(msg.sender == Creator);\n', '        token tokenTransfer = token(tokenAddress);\n', '        tokenTransfer.transfer(Creator, amount);\n', '    }\n', '\n', '    function () payable public {\n', '        Creator.transfer(msg.value);\n', '    }\n', '\n', '}']