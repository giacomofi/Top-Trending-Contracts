['pragma solidity ^0.4.24;\n', '\n', '// Fabrica pre-ICO stage\n', '//      see proposal at fabrica.io\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract myPreICO is Ownable {\n', '    uint public ETHRaised;\n', '    uint public soft_cap = 1 ether; // once we raise min 1 ETH, we can get them and start the ICO preparation\n', '    uint public hard_cap = 10 ether;// once we&#39;ve raised 10 ETH, you can&#39;t withdraw them back, project will run to the ICO stage\n', '    address public owner = 0x0;\n', '    uint public end_date;\n', '    address[] public holders;\n', '    mapping (address => uint) public holder_balance;\n', '    \n', '    function myICO() public {\n', '        owner = msg.sender;\n', '        end_date = now + 90 days; // holders can take their money back some time later if pre-ICO failed\n', '    }\n', '\n', '    function sendFunds(address _addr) public onlyOwner {\n', '        require (ETHRaised >= soft_cap); // can get $ETH only if soft_cap reached\n', '        _addr.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdraw() public {\n', '        uint amount;\n', '        require(now > end_date);// holders can take their money back if pre-ICO failed ...\n', '        require(ETHRaised < hard_cap);// ... and hard_cap has&#39;t been reached\n', '        amount = holder_balance[msg.sender];\n', '        holder_balance[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '    }\n', '    \n', '    function () public payable {\n', '        require(msg.value > 0);\n', '        holders.push(msg.sender);\n', '        holder_balance[msg.sender] += msg.value;\n', '        ETHRaised += msg.value;\n', '    }\n', '\n', '    function getFunds() public view returns (uint){\n', '        return address(this).balance;\n', '    }\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '// Fabrica pre-ICO stage\n', '//      see proposal at fabrica.io\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    \n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract myPreICO is Ownable {\n', '    uint public ETHRaised;\n', '    uint public soft_cap = 1 ether; // once we raise min 1 ETH, we can get them and start the ICO preparation\n', "    uint public hard_cap = 10 ether;// once we've raised 10 ETH, you can't withdraw them back, project will run to the ICO stage\n", '    address public owner = 0x0;\n', '    uint public end_date;\n', '    address[] public holders;\n', '    mapping (address => uint) public holder_balance;\n', '    \n', '    function myICO() public {\n', '        owner = msg.sender;\n', '        end_date = now + 90 days; // holders can take their money back some time later if pre-ICO failed\n', '    }\n', '\n', '    function sendFunds(address _addr) public onlyOwner {\n', '        require (ETHRaised >= soft_cap); // can get $ETH only if soft_cap reached\n', '        _addr.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdraw() public {\n', '        uint amount;\n', '        require(now > end_date);// holders can take their money back if pre-ICO failed ...\n', "        require(ETHRaised < hard_cap);// ... and hard_cap has't been reached\n", '        amount = holder_balance[msg.sender];\n', '        holder_balance[msg.sender] = 0;\n', '        msg.sender.transfer(amount);\n', '    }\n', '    \n', '    function () public payable {\n', '        require(msg.value > 0);\n', '        holders.push(msg.sender);\n', '        holder_balance[msg.sender] += msg.value;\n', '        ETHRaised += msg.value;\n', '    }\n', '\n', '    function getFunds() public view returns (uint){\n', '        return address(this).balance;\n', '    }\n', '}']
