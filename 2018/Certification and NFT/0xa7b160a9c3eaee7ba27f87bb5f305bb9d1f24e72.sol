['pragma solidity ^0.4.23;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'contract GetAchieveICO is Ownable {\n', '    using SafeMath for uint;\n', '    \n', '    address public beneficiary;\n', '    uint256 public decimals;\n', '    uint256 public softCap;            // in Wei\n', '    uint256 public hardCap;            // in Wei\n', '    uint256 public amountRaised;       // in Wei\n', '    uint256 public amountSold;         // Amount of sold tokens with decimals\n', '    uint256 public maxAmountToSell;    // Amount of tokens to sell for current Round [Pre Sale - 192M GAT, Sale - 228M GAT]\n', '    \n', '    uint256 deadline1;  // Pre Sale deadline\n', '    uint256 deadline2;  // Sale deadline\n', '    uint256 oneWeek;    // 1 week timeline\n', '    \n', '    uint256 public price;       // Current price\n', '    uint256 price0;             // Sale period price (ICO)\n', '    uint256 price1;             // Pre Sale period price Round 1\n', '    uint256 price2;             // Pre Sale period price Round 2\n', '    uint256 price3;             // Pre Sale period price Round 3\n', '    uint256 price4;             // Pre Sale period price Round 4\n', '    uint256 price5;             // Pre Sale period price Round 5\n', '    uint256 price6;             // Pre Sale period price Round 6\n', '    uint256 price7;             // Pre Sale period price Round 7\n', '    \n', '    ERC20 public token;\n', '    mapping(address => uint256) balances;\n', '    bool public fundingGoalReached = false;\n', '    bool public crowdsaleClosed = true;     // Closed till manually start by the owner\n', '\n', '    event GoalReached(address recipient, uint256 totalAmountRaised);\n', '    event FundTransfer(address backer, uint256 amount, bool isContribution);\n', '    \n', '\n', '    /**\n', '     * Constructor function\n', '     *\n', '     * Initialization\n', '     */\n', '    constructor(\n', '        address wallet,\n', '        ERC20 addressOfToken\n', '    ) public {\n', '        beneficiary = wallet;\n', '        decimals = 18;\n', '        softCap = 4000 * 1 ether;\n', '        hardCap = 12000 * 1 ether;\n', '        maxAmountToSell = 192000000 * 10 ** decimals;    // Pre Sale 192M GAT. Then 228M GAT will be added in time of Sale period\n', '        // Price rates\n', '        price0 = 40;        // 0.000040 ETH (in Wei)\n', '        price1 = 20;        // 0.000020 ETH (in Wei)\n', '        price2 = 24;        // 0.000024 ETH (in Wei)\n', '        price3 = 24;        // 0.000024 ETH (in Wei)\n', '        price4 = 28;        // 0.000028 ETH (in Wei)\n', '        price5 = 28;        // 0.000028 ETH (in Wei)\n', '        price6 = 32;        // 0.000032 ETH (in Wei)\n', '        price7 = 32;        // 0.000032 ETH (in Wei)\n', '        price = price1;     // Set Pre Sale Round 1 token price as current\n', '        oneWeek = 7 * 1 days;\n', '        deadline2 = now + 50 * oneWeek; // Just for blocking checkGoalReached() function call till Crowdsale start\n', '        token = addressOfToken;\n', '    }\n', '    \n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '     * Fallback function\n', '     *\n', '     * The function without name is the default function that is called whenever anyone sends funds to a contract\n', '     */\n', '    function () payable public {\n', '        require(!crowdsaleClosed);\n', '        require(_validateSaleDate());\n', '        require(msg.sender != address(0));\n', '        uint256 amount = msg.value;\n', '        require(amount != 0);\n', '        require(amount >= 10000000000000000);       // min 0.01 ETH\n', '        require(amount <= hardCap);                 // Hard cap\n', '        \n', "        uint256 tokens = amount.mul(10 ** 6);       // Add 6 zeros in the end of 'amount' to use correct price rate\n", '        tokens = tokens.div(price);                 // Amount of tokens to sell for the current price rate\n', '        require(amountSold.add(tokens) <= maxAmountToSell);     // Check token oversell for the current Round\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        amountRaised = amountRaised.add(amount);\n', '        amountSold = amountSold.add(tokens);        // Update amount of sold tokens\n', '        \n', '        token.transfer(msg.sender, tokens);\n', '        emit FundTransfer(msg.sender, amount, true);\n', '    }\n', '    \n', '    /**\n', '     * @dev Validation of Pre Sale period\n', '     * @return bool\n', '     */\n', '    function _validateSaleDate() internal returns (bool) {\n', '        // Pre Sale\n', '        if(now <= deadline1) {\n', '            uint256 dateDif = deadline1.sub(now);\n', '            if (dateDif <= 2 * 1 days) {\n', '                price = price7;     // Round 7\n', '                return true;\n', '            } else if (dateDif <= 4 * 1 days) {\n', '                price = price6;     // Round 6\n', '                return true;\n', '            } else if (dateDif <= 6 * 1 days) {\n', '                price = price5;     // Round 5\n', '                return true;\n', '            } else if (dateDif <= 8 * 1 days) {\n', '                price = price4;     // Round 4\n', '                return true;\n', '            } else if (dateDif <= 10 * 1 days) {\n', '                price = price3;     // Round 3\n', '                return true;\n', '            } else if (dateDif <= 12 * 1 days) {\n', '                price = price2;     // Round 2\n', '                return true;\n', '            } else if (dateDif <= 14 * 1 days) {\n', '                price = price1;     // Round 1\n', '                return true;\n', '            } else {\n', '                price = 25;         // Default average value\n', '                return true;\n', '            }\n', '        }\n', '        // Sale\n', '        if (now >= (deadline1.add(oneWeek)) && now <= deadline2) {\n', '            maxAmountToSell = 420000000 * 10 ** decimals;    // Pre Sale + Sale = 192M GAT + 228M GAT\n', '            price = price0;             // Sale token price\n', '            return true;\n', '        }\n', '        // After Sale\n', '        if (now >= deadline2) {\n', '            crowdsaleClosed = true;     // Crowdsale period is finished\n', '            return false;\n', '        }\n', '        \n', '        return false;\n', '    }\n', '    \n', '    /**\n', '    * @dev Start Sale\n', '    */\n', '    function startCrowdsale() onlyOwner public returns (bool) {\n', '        deadline1 = now + 2 * oneWeek;                      // Set Pre Sale deadline 2 weeks\n', '        deadline2 = deadline1 + oneWeek + 8 * oneWeek;      // Set Sale deadline 8 weeks\n', '        crowdsaleClosed = false;    // Start Crowdsale period\n', '        return true;\n', '    }\n', '\n', '    modifier afterDeadline() { if (now >= deadline2) _; }\n', '\n', '    /**\n', '     * Check if goal was reached\n', '     * Checks if the goal or time limit has been reached and ends the campaign\n', '     */\n', '    function checkGoalReached() onlyOwner afterDeadline public {\n', '        if (amountRaised >= softCap) {\n', '            fundingGoalReached = true;\n', '            emit GoalReached(beneficiary, amountRaised);\n', '        }\n', '        crowdsaleClosed = true;     // Close Crowdsale\n', '    }\n', '\n', '\n', '    /**\n', '     * Withdraw the funds\n', '     *\n', '     * Checks to see if goal or time limit has been reached, and if so, and the funding goal was reached,\n', '     * sends the entire amount to the beneficiary. If goal was not reached, each contributor can withdraw\n', '     * the amount they contributed.\n', '     */\n', '    function safeWithdrawal() afterDeadline public {\n', '        require(!fundingGoalReached);\n', '        require(crowdsaleClosed);\n', '        \n', '        uint256 amount = balances[msg.sender];\n', '        balances[msg.sender] = 0;\n', '        if (amount > 0) {\n', '            if (msg.sender.send(amount)) {\n', '               emit FundTransfer(msg.sender, amount, false);\n', '            } else {\n', '                balances[msg.sender] = amount;\n', '            }\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Withdraw the funds\n', '     */\n', '    function safeWithdrawFunds(uint256 amount) onlyOwner public returns (bool) {\n', '        require(beneficiary == msg.sender);\n', '        \n', '        if (beneficiary.send(amount)) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    \n', '    /**\n', "     * Withdraw rest of tokens from smart contract balance to the owner's wallet\n", '     * if funding goal is not reached and Crowdsale is already closed.\n', '     * \n', '     * Can be used for Airdrop if funding goal is not reached.\n', '     */\n', '    function safeWithdrawTokens(uint256 amount) onlyOwner afterDeadline public returns (bool) {\n', '        require(!fundingGoalReached);\n', '        require(crowdsaleClosed);\n', '        \n', '        token.transfer(beneficiary, amount);\n', '        emit FundTransfer(beneficiary, amount, false);\n', '    }\n', '}']