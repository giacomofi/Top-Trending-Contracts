['// Ethertote - Reward/Recogniton contract\n', '// 09.08.18 \n', '//\n', '// ----------------------------------------------------------------------------\n', '// Overview\n', '// ----------------------------------------------------------------------------\n', '//\n', '// There are various individuals we would like to reward over the coming \n', '// weeks with TOTE tokens. Admins will add an ethereum wallet address and a \n', '// number of tokens for each individual to this smart contract. \n', '// The individual simply needs to click on the claim button and claim their tokens.\n', '//\n', '// This function will open immediately after the completion of the token sale, and will \n', '// remain open for 60 days, after which time admin will be able to recover any \n', '// unclaimed tokens \n', '// ----------------------------------------------------------------------------\n', '\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '///////////////////////////////////////////////////////////////////////////////\n', '// SafeMath Library \n', '///////////////////////////////////////////////////////////////////////////////\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// EXTERNAL CONTRACTS\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract EthertoteToken {\n', '    function thisContractAddress() public pure returns (address) {}\n', '    function balanceOf(address) public pure returns (uint256) {}\n', '    function transfer(address, uint) public {}\n', '}\n', '\n', 'contract TokenSale {\n', '    function closingTime() public pure returns (uint) {}\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// MAIN CONTRACT\n', '\n', 'contract Reward {\n', '        using SafeMath for uint256;\n', '        \n', '    // VARIABLES\n', '    address public admin;\n', '    address public thisContractAddress;\n', '    address public tokenContractAddress = 0x42be9831FFF77972c1D0E1eC0aA9bdb3CaA04D47;\n', '    \n', '    address public tokenSaleAddress = 0x1C49d3c4895E7b136e8F8b804F1279068d4c3c96;\n', '    \n', '    uint public contractCreationBlockNumber;\n', '    uint public contractCreationBlockTime;\n', '    \n', '    uint public tokenSaleClosingTime;\n', '    \n', '    bool public claimTokenWindowOpen;\n', '    uint public windowOpenTime;\n', '  \n', '    // ENUM\n', '    EthertoteToken token;       \n', '    TokenSale tokensale;\n', '    \n', '\n', '    // EVENTS \n', '\tevent Log(string text);\n', '        \n', '    // MODIFIERS\n', '    modifier onlyAdmin { \n', '        require(\n', '            msg.sender == admin\n', '        ); \n', '        _; \n', '    }\n', '        \n', '    modifier onlyContract { \n', '        require(\n', '            msg.sender == admin ||\n', '            msg.sender == thisContractAddress\n', '        ); \n', '        _; \n', '    }   \n', '        \n', ' \n', '    // CONSTRUCTOR\n', '    constructor() public payable {\n', '        admin = msg.sender;\n', '        thisContractAddress = address(this);\n', '        contractCreationBlockNumber = block.number;\n', '        token = EthertoteToken(tokenContractAddress);\n', '        tokensale = TokenSale(tokenSaleAddress);\n', '\n', '\t    emit Log("Reward contract created.");\n', '    }\n', '    \n', '    // FALLBACK FUNCTION\n', '    function () private payable {}\n', '    \n', '        \n', '// ----------------------------------------------------------------------------\n', '// Admin Only Functions\n', '// ----------------------------------------------------------------------------\n', '\n', '    // STRUCT \n', '    Claimant[] public claimants;  // special struct variable\n', '    \n', '        struct Claimant {\n', '        address claimantAddress;\n', '        uint claimantAmount;\n', '        bool claimantHasClaimed;\n', '    }\n', '\n', '\n', '    // Admin fuction to add claimants\n', '    function addClaimant(address _address, uint _amount, bool) onlyAdmin public {\n', '            Claimant memory newClaimant = Claimant ({\n', '                claimantAddress: _address,\n', '                claimantAmount: _amount,\n', '                claimantHasClaimed: false\n', '                });\n', '                claimants.push(newClaimant);\n', '    }\n', '    \n', '    \n', '    function adjustEntitlement(address _address, uint _amount) onlyAdmin public {\n', '        for (uint i = 0; i < claimants.length; i++) {\n', '            if(_address == claimants[i].claimantAddress) {\n', '                claimants[i].claimantAmount = _amount;\n', '            }\n', '            else revert();\n', '            }  \n', '    }\n', '    \n', '    // recover tokens tha were not claimed \n', '    function recoverTokens() onlyAdmin public {\n', '        require(now < (showTokenSaleClosingTime().add(61 days)));\n', '        token.transfer(admin, token.balanceOf(thisContractAddress));\n', '    }\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// This method can be used by admin to extract Eth accidentally \n', '// sent to this smart contract.\n', '// ----------------------------------------------------------------------------\n', '    function ClaimEth() onlyAdmin public {\n', '        address(admin).transfer(address(this).balance);\n', '\n', '    }  \n', '    \n', '    \n', '    \n', '// ----------------------------------------------------------------------------\n', '// PUBLIC FUNCTION - To be called by people claiming reward \n', '// ----------------------------------------------------------------------------\n', '\n', '    // callable by claimant after token sale is completed\n', '    function claimTokens() public {\n', '        require(now > showTokenSaleClosingTime());\n', '        require(now < (showTokenSaleClosingTime().add(60 days)));\n', '          for (uint i = 0; i < claimants.length; i++) {\n', '            if(msg.sender == claimants[i].claimantAddress) {\n', '                require(claimants[i].claimantHasClaimed == false);\n', '                token.transfer(msg.sender, claimants[i].claimantAmount);\n', '                claimants[i].claimantHasClaimed = true;\n', '            }\n', '          }\n', '    }\n', '    \n', '    \n', '// ----------------------------------------------------------------------------\n', '// public view Functions\n', '// ----------------------------------------------------------------------------\n', '    \n', '    // check claim entitlement\n', '    function checkClaimEntitlement() public view returns(uint) {\n', '        for (uint i = 0; i < claimants.length; i++) {\n', '            if(msg.sender == claimants[i].claimantAddress) {\n', '                require(claimants[i].claimantHasClaimed == false);\n', '                return claimants[i].claimantAmount;\n', '            }\n', '            \n', '        }  \n', '        return 0;\n', '    }\n', '    \n', '    \n', '    // check claim entitlement of any wallet\n', '    function checkClaimEntitlementofWallet(address _address) public view returns(uint) {\n', '        for (uint i = 0; i < claimants.length; i++) {\n', '            if(_address == claimants[i].claimantAddress) {\n', '                require(claimants[i].claimantHasClaimed == false);\n', '                return claimants[i].claimantAmount;\n', '            }\n', '            \n', '        }  \n', '        return 0;\n', '    }\n', '    \n', '    \n', '    // total number of claimants\n', '    function numberOfClaimants() public view returns(uint) {\n', '        return claimants.length;\n', '    }\n', '    \n', '    \n', '    \n', '    // check Eth balance of this contract\n', '    function thisContractBalance() public view returns(uint) {\n', '      return address(this).balance;\n', '    }\n', '\n', '    // check balance of this smart contract\n', '    function thisContractTokenBalance() public view returns(uint) {\n', '      return token.balanceOf(thisContractAddress);\n', '    }\n', '\n', '\n', '    function showTokenSaleClosingTime() public view returns(uint) {\n', '        return tokensale.closingTime();\n', '    }\n', '\n', '\n', '}']
['// Ethertote - Reward/Recogniton contract\n', '// 09.08.18 \n', '//\n', '// ----------------------------------------------------------------------------\n', '// Overview\n', '// ----------------------------------------------------------------------------\n', '//\n', '// There are various individuals we would like to reward over the coming \n', '// weeks with TOTE tokens. Admins will add an ethereum wallet address and a \n', '// number of tokens for each individual to this smart contract. \n', '// The individual simply needs to click on the claim button and claim their tokens.\n', '//\n', '// This function will open immediately after the completion of the token sale, and will \n', '// remain open for 60 days, after which time admin will be able to recover any \n', '// unclaimed tokens \n', '// ----------------------------------------------------------------------------\n', '\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '///////////////////////////////////////////////////////////////////////////////\n', '// SafeMath Library \n', '///////////////////////////////////////////////////////////////////////////////\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// EXTERNAL CONTRACTS\n', '// ----------------------------------------------------------------------------\n', '\n', 'contract EthertoteToken {\n', '    function thisContractAddress() public pure returns (address) {}\n', '    function balanceOf(address) public pure returns (uint256) {}\n', '    function transfer(address, uint) public {}\n', '}\n', '\n', 'contract TokenSale {\n', '    function closingTime() public pure returns (uint) {}\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// MAIN CONTRACT\n', '\n', 'contract Reward {\n', '        using SafeMath for uint256;\n', '        \n', '    // VARIABLES\n', '    address public admin;\n', '    address public thisContractAddress;\n', '    address public tokenContractAddress = 0x42be9831FFF77972c1D0E1eC0aA9bdb3CaA04D47;\n', '    \n', '    address public tokenSaleAddress = 0x1C49d3c4895E7b136e8F8b804F1279068d4c3c96;\n', '    \n', '    uint public contractCreationBlockNumber;\n', '    uint public contractCreationBlockTime;\n', '    \n', '    uint public tokenSaleClosingTime;\n', '    \n', '    bool public claimTokenWindowOpen;\n', '    uint public windowOpenTime;\n', '  \n', '    // ENUM\n', '    EthertoteToken token;       \n', '    TokenSale tokensale;\n', '    \n', '\n', '    // EVENTS \n', '\tevent Log(string text);\n', '        \n', '    // MODIFIERS\n', '    modifier onlyAdmin { \n', '        require(\n', '            msg.sender == admin\n', '        ); \n', '        _; \n', '    }\n', '        \n', '    modifier onlyContract { \n', '        require(\n', '            msg.sender == admin ||\n', '            msg.sender == thisContractAddress\n', '        ); \n', '        _; \n', '    }   \n', '        \n', ' \n', '    // CONSTRUCTOR\n', '    constructor() public payable {\n', '        admin = msg.sender;\n', '        thisContractAddress = address(this);\n', '        contractCreationBlockNumber = block.number;\n', '        token = EthertoteToken(tokenContractAddress);\n', '        tokensale = TokenSale(tokenSaleAddress);\n', '\n', '\t    emit Log("Reward contract created.");\n', '    }\n', '    \n', '    // FALLBACK FUNCTION\n', '    function () private payable {}\n', '    \n', '        \n', '// ----------------------------------------------------------------------------\n', '// Admin Only Functions\n', '// ----------------------------------------------------------------------------\n', '\n', '    // STRUCT \n', '    Claimant[] public claimants;  // special struct variable\n', '    \n', '        struct Claimant {\n', '        address claimantAddress;\n', '        uint claimantAmount;\n', '        bool claimantHasClaimed;\n', '    }\n', '\n', '\n', '    // Admin fuction to add claimants\n', '    function addClaimant(address _address, uint _amount, bool) onlyAdmin public {\n', '            Claimant memory newClaimant = Claimant ({\n', '                claimantAddress: _address,\n', '                claimantAmount: _amount,\n', '                claimantHasClaimed: false\n', '                });\n', '                claimants.push(newClaimant);\n', '    }\n', '    \n', '    \n', '    function adjustEntitlement(address _address, uint _amount) onlyAdmin public {\n', '        for (uint i = 0; i < claimants.length; i++) {\n', '            if(_address == claimants[i].claimantAddress) {\n', '                claimants[i].claimantAmount = _amount;\n', '            }\n', '            else revert();\n', '            }  \n', '    }\n', '    \n', '    // recover tokens tha were not claimed \n', '    function recoverTokens() onlyAdmin public {\n', '        require(now < (showTokenSaleClosingTime().add(61 days)));\n', '        token.transfer(admin, token.balanceOf(thisContractAddress));\n', '    }\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// This method can be used by admin to extract Eth accidentally \n', '// sent to this smart contract.\n', '// ----------------------------------------------------------------------------\n', '    function ClaimEth() onlyAdmin public {\n', '        address(admin).transfer(address(this).balance);\n', '\n', '    }  \n', '    \n', '    \n', '    \n', '// ----------------------------------------------------------------------------\n', '// PUBLIC FUNCTION - To be called by people claiming reward \n', '// ----------------------------------------------------------------------------\n', '\n', '    // callable by claimant after token sale is completed\n', '    function claimTokens() public {\n', '        require(now > showTokenSaleClosingTime());\n', '        require(now < (showTokenSaleClosingTime().add(60 days)));\n', '          for (uint i = 0; i < claimants.length; i++) {\n', '            if(msg.sender == claimants[i].claimantAddress) {\n', '                require(claimants[i].claimantHasClaimed == false);\n', '                token.transfer(msg.sender, claimants[i].claimantAmount);\n', '                claimants[i].claimantHasClaimed = true;\n', '            }\n', '          }\n', '    }\n', '    \n', '    \n', '// ----------------------------------------------------------------------------\n', '// public view Functions\n', '// ----------------------------------------------------------------------------\n', '    \n', '    // check claim entitlement\n', '    function checkClaimEntitlement() public view returns(uint) {\n', '        for (uint i = 0; i < claimants.length; i++) {\n', '            if(msg.sender == claimants[i].claimantAddress) {\n', '                require(claimants[i].claimantHasClaimed == false);\n', '                return claimants[i].claimantAmount;\n', '            }\n', '            \n', '        }  \n', '        return 0;\n', '    }\n', '    \n', '    \n', '    // check claim entitlement of any wallet\n', '    function checkClaimEntitlementofWallet(address _address) public view returns(uint) {\n', '        for (uint i = 0; i < claimants.length; i++) {\n', '            if(_address == claimants[i].claimantAddress) {\n', '                require(claimants[i].claimantHasClaimed == false);\n', '                return claimants[i].claimantAmount;\n', '            }\n', '            \n', '        }  \n', '        return 0;\n', '    }\n', '    \n', '    \n', '    // total number of claimants\n', '    function numberOfClaimants() public view returns(uint) {\n', '        return claimants.length;\n', '    }\n', '    \n', '    \n', '    \n', '    // check Eth balance of this contract\n', '    function thisContractBalance() public view returns(uint) {\n', '      return address(this).balance;\n', '    }\n', '\n', '    // check balance of this smart contract\n', '    function thisContractTokenBalance() public view returns(uint) {\n', '      return token.balanceOf(thisContractAddress);\n', '    }\n', '\n', '\n', '    function showTokenSaleClosingTime() public view returns(uint) {\n', '        return tokensale.closingTime();\n', '    }\n', '\n', '\n', '}']
