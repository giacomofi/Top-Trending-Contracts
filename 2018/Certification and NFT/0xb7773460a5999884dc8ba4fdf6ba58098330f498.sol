['pragma solidity ^0.4.24;\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', 'contract ListingsERC20NoDecimal is Ownable {\n', '      using SafeMath for uint256;\n', '\n', '    struct Listing {\n', '        address seller;\n', '        address tokenContractAddress;\n', '        uint256 price;\n', '        uint256 allowance;\n', '        uint256 dateStarts;\n', '        uint256 dateEnds;\n', '    }\n', '    event ListingCreated(bytes32 indexed listingId, address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateStarts, uint256 dateEnds, address indexed seller);\n', '    event ListingCancelled(bytes32 indexed listingId, uint256 dateCancelled);\n', '    event ListingBought(bytes32 indexed listingId, address tokenContractAddress, uint256 price, uint256 amount, uint256 dateBought, address buyer);\n', '\n', '    string constant public VERSION = "2.0.0";\n', '    uint16 constant public GAS_LIMIT = 4999;\n', '    uint256 public ownerPercentage;\n', '    mapping (bytes32 => Listing) public listings;\n', '    mapping (bytes32 => uint256) public sold;\n', '    constructor (uint256 percentage) public {\n', '        ownerPercentage = percentage;\n', '    }\n', '\n', '    function updateOwnerPercentage(uint256 percentage) external onlyOwner {\n', '        ownerPercentage = percentage;\n', '    }\n', '\n', '    function withdrawBalance() onlyOwner external {\n', '        assert(owner.send(address(this).balance));\n', '    }\n', '    function approveToken(address token, uint256 amount) onlyOwner external {\n', '        assert(DetailedERC20(token).approve(owner, amount));\n', '    }\n', '\n', '    function() external payable { }\n', '\n', '    function getHash(address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateEnds, uint256 salt) external view returns (bytes32) {\n', '        return getHashInternal(tokenContractAddress, price, allowance, dateEnds, salt);\n', '    }\n', '\n', '    function getHashInternal(address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateEnds, uint256 salt) internal view returns (bytes32) {\n', '        return keccak256(abi.encodePacked(msg.sender, tokenContractAddress, price, allowance, dateEnds, salt));\n', '    }\n', '    function getBalance(address tokenContract, address seller) internal returns (uint256) {\n', '        return DetailedERC20(tokenContract).balanceOf.gas(GAS_LIMIT)(seller);\n', '    }\n', '    function getAllowance(address tokenContract, address seller, address listingContract) internal returns (uint256) {\n', '        return DetailedERC20(tokenContract).allowance.gas(GAS_LIMIT)(seller, listingContract);\n', '    }\n', '\n', '\n', '    function createListing(address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateEnds, uint256 salt) external {\n', '        require(price > 0, "price less than zero");\n', '        require(allowance > 0, "allowance less than zero");\n', '        require(dateEnds > 0, "dateEnds less than zero");\n', '        require(getBalance(tokenContractAddress, msg.sender) >= allowance, "balance less than allowance");\n', '        bytes32 listingId = getHashInternal(tokenContractAddress, price, allowance, dateEnds, salt);\n', '        Listing memory listing = Listing(msg.sender, tokenContractAddress, price, allowance, now, dateEnds);\n', '        listings[listingId] = listing;\n', '        emit ListingCreated(listingId, tokenContractAddress, price, allowance, now, dateEnds, msg.sender);\n', '\n', '    }\n', '\n', '    function cancelListing(bytes32 listingId) external {\n', '        Listing storage listing = listings[listingId];\n', '        require(msg.sender == listing.seller);\n', '        delete listings[listingId];\n', '        emit ListingCancelled(listingId, now);\n', '    }\n', '    function buyListing(bytes32 listingId, uint256 amount) external payable {\n', '        Listing storage listing = listings[listingId];\n', '        address seller = listing.seller;\n', '        address contractAddress = listing.tokenContractAddress;\n', '        uint256 price = listing.price;\n', '        \n', '        \n', '        uint256 sale;\n', '       \n', '        sale = price.mul(amount);\n', '        \n', '        uint256 allowance = listing.allowance;\n', '        //make sure listing is still available\n', '        require(now <= listing.dateEnds);\n', '        //make sure there are still enough to sell from this listing\n', '        require(allowance - sold[listingId] >= amount);\n', '        //make sure that the seller still has that amount to sell\n', '        require(getBalance(contractAddress, seller) >= amount);\n', '        //make sure that the seller still will allow that amount to be sold\n', '        require(getAllowance(contractAddress, seller, this) >= amount);\n', '        require(msg.value == sale);\n', '        DetailedERC20 tokenContract = DetailedERC20(contractAddress);\n', '        require(tokenContract.transferFrom(seller, msg.sender, amount));\n', '        if (ownerPercentage > 0) {\n', '            seller.transfer(sale - (sale.mul(ownerPercentage).div(10000)));\n', '        } else {\n', '            seller.transfer(sale);\n', '        }\n', '        sold[listingId] = sold[listingId].add(amount);\n', '        emit ListingBought(listingId, contractAddress, price, amount, now, msg.sender);\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', 'contract ListingsERC20NoDecimal is Ownable {\n', '      using SafeMath for uint256;\n', '\n', '    struct Listing {\n', '        address seller;\n', '        address tokenContractAddress;\n', '        uint256 price;\n', '        uint256 allowance;\n', '        uint256 dateStarts;\n', '        uint256 dateEnds;\n', '    }\n', '    event ListingCreated(bytes32 indexed listingId, address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateStarts, uint256 dateEnds, address indexed seller);\n', '    event ListingCancelled(bytes32 indexed listingId, uint256 dateCancelled);\n', '    event ListingBought(bytes32 indexed listingId, address tokenContractAddress, uint256 price, uint256 amount, uint256 dateBought, address buyer);\n', '\n', '    string constant public VERSION = "2.0.0";\n', '    uint16 constant public GAS_LIMIT = 4999;\n', '    uint256 public ownerPercentage;\n', '    mapping (bytes32 => Listing) public listings;\n', '    mapping (bytes32 => uint256) public sold;\n', '    constructor (uint256 percentage) public {\n', '        ownerPercentage = percentage;\n', '    }\n', '\n', '    function updateOwnerPercentage(uint256 percentage) external onlyOwner {\n', '        ownerPercentage = percentage;\n', '    }\n', '\n', '    function withdrawBalance() onlyOwner external {\n', '        assert(owner.send(address(this).balance));\n', '    }\n', '    function approveToken(address token, uint256 amount) onlyOwner external {\n', '        assert(DetailedERC20(token).approve(owner, amount));\n', '    }\n', '\n', '    function() external payable { }\n', '\n', '    function getHash(address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateEnds, uint256 salt) external view returns (bytes32) {\n', '        return getHashInternal(tokenContractAddress, price, allowance, dateEnds, salt);\n', '    }\n', '\n', '    function getHashInternal(address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateEnds, uint256 salt) internal view returns (bytes32) {\n', '        return keccak256(abi.encodePacked(msg.sender, tokenContractAddress, price, allowance, dateEnds, salt));\n', '    }\n', '    function getBalance(address tokenContract, address seller) internal returns (uint256) {\n', '        return DetailedERC20(tokenContract).balanceOf.gas(GAS_LIMIT)(seller);\n', '    }\n', '    function getAllowance(address tokenContract, address seller, address listingContract) internal returns (uint256) {\n', '        return DetailedERC20(tokenContract).allowance.gas(GAS_LIMIT)(seller, listingContract);\n', '    }\n', '\n', '\n', '    function createListing(address tokenContractAddress, uint256 price, uint256 allowance, uint256 dateEnds, uint256 salt) external {\n', '        require(price > 0, "price less than zero");\n', '        require(allowance > 0, "allowance less than zero");\n', '        require(dateEnds > 0, "dateEnds less than zero");\n', '        require(getBalance(tokenContractAddress, msg.sender) >= allowance, "balance less than allowance");\n', '        bytes32 listingId = getHashInternal(tokenContractAddress, price, allowance, dateEnds, salt);\n', '        Listing memory listing = Listing(msg.sender, tokenContractAddress, price, allowance, now, dateEnds);\n', '        listings[listingId] = listing;\n', '        emit ListingCreated(listingId, tokenContractAddress, price, allowance, now, dateEnds, msg.sender);\n', '\n', '    }\n', '\n', '    function cancelListing(bytes32 listingId) external {\n', '        Listing storage listing = listings[listingId];\n', '        require(msg.sender == listing.seller);\n', '        delete listings[listingId];\n', '        emit ListingCancelled(listingId, now);\n', '    }\n', '    function buyListing(bytes32 listingId, uint256 amount) external payable {\n', '        Listing storage listing = listings[listingId];\n', '        address seller = listing.seller;\n', '        address contractAddress = listing.tokenContractAddress;\n', '        uint256 price = listing.price;\n', '        \n', '        \n', '        uint256 sale;\n', '       \n', '        sale = price.mul(amount);\n', '        \n', '        uint256 allowance = listing.allowance;\n', '        //make sure listing is still available\n', '        require(now <= listing.dateEnds);\n', '        //make sure there are still enough to sell from this listing\n', '        require(allowance - sold[listingId] >= amount);\n', '        //make sure that the seller still has that amount to sell\n', '        require(getBalance(contractAddress, seller) >= amount);\n', '        //make sure that the seller still will allow that amount to be sold\n', '        require(getAllowance(contractAddress, seller, this) >= amount);\n', '        require(msg.value == sale);\n', '        DetailedERC20 tokenContract = DetailedERC20(contractAddress);\n', '        require(tokenContract.transferFrom(seller, msg.sender, amount));\n', '        if (ownerPercentage > 0) {\n', '            seller.transfer(sale - (sale.mul(ownerPercentage).div(10000)));\n', '        } else {\n', '            seller.transfer(sale);\n', '        }\n', '        sold[listingId] = sold[listingId].add(amount);\n', '        emit ListingBought(listingId, contractAddress, price, amount, now, msg.sender);\n', '    }\n', '\n', '}']
