['pragma solidity ^0.4.18;\n', '\n', '/*\n', '    Manages ownership and permissions for the whole contract.\n', '*/\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/*\n', '    Manages ownership and permissions for the whole contract.\n', '*/\n', '\n', 'contract BLAccess {\n', '\n', '    address public mainAddress; //Main Contract Address\n', '    address public bonusAddress; //BonusAddress\n', '    event UpdatedMainAccount(address _newMainAddress);\n', '    event UpdatedBonusAccount(address _newBonusAddress);\n', '\n', '    function BLAccess() public {\n', '        mainAddress = msg.sender;\n', '        bonusAddress = msg.sender;\n', '    }\n', '\n', '    modifier onlyPrimary() {\n', '        require(msg.sender == mainAddress);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBonus() {\n', '      require(msg.sender == bonusAddress);\n', '      _;\n', '    }\n', '\n', '    function setSecondary(address _newSecondary) external onlyPrimary {\n', '      require(_newSecondary != address(0));\n', '      bonusAddress = _newSecondary;\n', '      UpdatedBonusAccount(_newSecondary);\n', '    }\n', '\n', '    //Allows to change the primary account for the contract\n', '    function setPrimaryAccount(address _newMainAddress) external onlyPrimary {\n', '        require(_newMainAddress != address(0));\n', '        mainAddress = _newMainAddress;\n', '        UpdatedMainAccount(_newMainAddress);\n', '    }\n', '\n', '}\n', '\n', '\n', '/*\n', ' Interface for our separate eternal storage.\n', '*/\n', '\n', 'contract DataStorageInterface {\n', '    function getUInt(bytes32 record) public constant returns (uint);\n', '    function setUInt(bytes32 record, uint value) public;\n', '    function getAdd(bytes32 record) public constant returns (address);\n', '    function setAdd(bytes32 record, address value) public;\n', '    function getBytes32(bytes32 record) public constant returns (bytes32);\n', '    function setBytes32(bytes32 record, bytes32 value) public;\n', '    function getBool(bytes32 record) public constant returns (bool);\n', '    function setBool(bytes32 record, bool value) public;\n', '    function withdraw(address beneficiary) public;\n', '}\n', '\n', '/*\n', ' Wrapper around Data Storage interface\n', '*/\n', '\n', 'contract BLStorage is BLAccess {\n', '\n', '    DataStorageInterface internal s;\n', '    address public storageAddress;\n', '\n', '    event StorageUpdated(address _newStorageAddress);\n', '\n', '    function BLStorage() public {\n', '        s = DataStorageInterface(mainAddress);\n', '    }\n', '\n', '    // allows to setup a new Storage address. Should never be needed but you never know!\n', '    function setDataStorage(address newAddress) public onlyPrimary {\n', '        s = DataStorageInterface(newAddress);\n', '        storageAddress = newAddress;\n', '        StorageUpdated(newAddress);\n', '    }\n', '\n', '    function getKey(uint x, uint y) internal pure returns(bytes32 key) {\n', '        key = keccak256(x, ":", y);\n', '    }\n', '}\n', '\n', '\n', 'contract BLBalances is BLStorage {\n', '\n', '    event WithdrawBalance(address indexed owner, uint amount);\n', '    event AllowanceGranted(address indexed owner, uint _amount);\n', '    event SentFeeToPlatform(uint amount);\n', '    event SentAmountToOwner(uint amount, address indexed owner);\n', '    event BonusGranted(address _beneficiary, uint _amount);\n', '    event SentAmountToNeighbours(uint reward, address indexed owner);\n', '\n', '    // get the balance for a given account\n', '    function getBalance() public view returns (uint) {\n', '        return s.getUInt(keccak256(msg.sender, "balance"));\n', '    }\n', '\n', '    // get the balance for a given account\n', '    function getAccountBalance(address _account) public view onlyPrimary returns (uint) {\n', '        return s.getUInt(keccak256(_account, "balance"));\n', '    }\n', '\n', '    function getAccountAllowance(address _account) public view onlyPrimary returns (uint) {\n', '        return s.getUInt(keccak256(_account, "promoAllowance"));\n', '    }\n', '\n', '    function getMyAllowance() public view returns (uint) {\n', '        return s.getUInt(keccak256(msg.sender, "promoAllowance"));\n', '    }\n', '\n', '    // IF a block has been assigned a bonus, provude the bonus to the next buyer.\n', '    function giveBonusIfExists(uint x, uint y) internal {\n', '      bytes32 key = getKey(x, y);\n', '      uint bonus = s.getUInt(keccak256(key, "bonus"));\n', '      uint balance = s.getUInt(keccak256(msg.sender, "balance"));\n', '      uint total = balance + bonus;\n', '      s.setUInt(keccak256(msg.sender, "balance"), total);\n', '      s.setUInt(keccak256(key, "bonus"), 0);\n', '      if (bonus > 0) {\n', '        BonusGranted(msg.sender, bonus);\n', '      }\n', '    }\n', '\n', '    // allow a block allowance for promo and early beta users\n', '    function grantAllowance(address beneficiary, uint allowance) public onlyPrimary {\n', '        uint existingAllowance = s.getUInt(keccak256(beneficiary, "promoAllowance"));\n', '        existingAllowance += allowance;\n', '        s.setUInt(keccak256(beneficiary, "promoAllowance"), existingAllowance);\n', '        AllowanceGranted(beneficiary, allowance);\n', '    }\n', '\n', '    // withdraw the current balance\n', '    function withdraw() public {\n', '        uint balance = s.getUInt(keccak256(msg.sender, "balance"));\n', '        s.withdraw(msg.sender);\n', '        WithdrawBalance(msg.sender, balance);\n', '    }\n', '\n', '    // Trading and buying balances flow\n', '    function rewardParties (uint x, uint y, uint feePercentage) internal {\n', '        uint fee = msg.value * feePercentage / 100;\n', '        uint remainder = msg.value - fee;\n', '        uint rewardPct = s.getUInt("neighbourRewardPercentage");\n', '        uint toOwner = remainder - (remainder * rewardPct * 8 / 100);\n', '        rewardContract(fee);\n', '        rewardPreviousOwner(x, y, toOwner);\n', '        rewardNeighbours(x, y, remainder, rewardPct);\n', '    }\n', '\n', '    function rewardNeighbours (uint x, uint y, uint remainder, uint rewardPct) internal {\n', '        uint rewardAmount = remainder * rewardPct / 100;\n', '      address nw = s.getAdd(keccak256(keccak256(x-1, ":", y-1), "owner"));\n', '      address n = s.getAdd(keccak256(keccak256(x-1, ":", y), "owner"));\n', '      address ne = s.getAdd(keccak256(keccak256(x-1, ":", y+1), "owner"));\n', '      address w = s.getAdd(keccak256(keccak256(x, ":", y-1), "owner"));\n', '      address e = s.getAdd(keccak256(keccak256(x, ":", y+1), "owner"));\n', '      address sw = s.getAdd(keccak256(keccak256(x+1, ":", y-1), "owner"));\n', '      address south = s.getAdd(keccak256(keccak256(x+1, ":", y), "owner"));\n', '      address se = s.getAdd(keccak256(keccak256(x+1, ":", y+1), "owner"));\n', '      nw != address(0) ? rewardBlock(nw, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\n', '      n != address(0) ? rewardBlock(n, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\n', '      ne != address(0) ? rewardBlock(ne, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\n', '      w != address(0) ? rewardBlock(w, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\n', '      e != address(0) ? rewardBlock(e, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\n', '      sw != address(0) ? rewardBlock(sw, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\n', '      south != address(0) ? rewardBlock(south, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\n', '      se != address(0) ? rewardBlock(se, rewardAmount) : rewardBlock(bonusAddress, rewardAmount);\n', '    }\n', '\n', '    function rewardBlock(address account, uint reward) internal {\n', '      uint balance = s.getUInt(keccak256(account, "balance"));\n', '      balance += reward;\n', '      s.setUInt(keccak256(account, "balance"), balance);\n', '      SentAmountToNeighbours(reward,account);\n', '    }\n', '\n', '    // contract commissions\n', '    function rewardContract (uint fee) internal {\n', '        uint mainBalance = s.getUInt(keccak256(mainAddress, "balance"));\n', '        mainBalance += fee;\n', '        s.setUInt(keccak256(mainAddress, "balance"), mainBalance);\n', '        SentFeeToPlatform(fee);\n', '    }\n', '\n', '    // reward the previous owner of the block or the contract if the block is bought for the first time\n', '    function rewardPreviousOwner (uint x, uint y, uint amount) internal {\n', '        uint rewardBalance;\n', '        bytes32 key = getKey(x, y);\n', '        address owner = s.getAdd(keccak256(key, "owner"));\n', '        if (owner == address(0)) {\n', '            rewardBalance = s.getUInt(keccak256(mainAddress, "balance"));\n', '            rewardBalance += amount;\n', '            s.setUInt(keccak256(mainAddress, "balance"), rewardBalance);\n', '            SentAmountToOwner(amount, mainAddress);\n', '        } else {\n', '            rewardBalance = s.getUInt(keccak256(owner, "balance"));\n', '            rewardBalance += amount;\n', '            s.setUInt(keccak256(owner, "balance"), rewardBalance);\n', '            SentAmountToOwner(amount, owner);\n', '        }\n', '    }\n', '}\n', '\n', 'contract BLBlocks is BLBalances {\n', '\n', '    event CreatedBlock(\n', '        uint x,\n', '        uint y,\n', '        uint price,\n', '        address indexed owner,\n', '        bytes32 name,\n', '        bytes32 description,\n', '        bytes32 url,\n', '        bytes32 imageURL);\n', '\n', '    event SetBlockForSale(\n', '        uint x,\n', '        uint y,\n', '        uint price,\n', '        address indexed owner);\n', '\n', '    event UnsetBlockForSale(\n', '        uint x,\n', '        uint y,\n', '        address indexed owner);\n', '\n', '    event BoughtBlock(\n', '        uint x,\n', '        uint y,\n', '        uint price,\n', '        address indexed owner,\n', '        bytes32 name,\n', '        bytes32 description,\n', '        bytes32 url,\n', '        bytes32 imageURL);\n', '\n', '    event SoldBlock(\n', '        uint x,\n', '        uint y,\n', '        uint oldPrice,\n', '        uint newPrice,\n', '        uint feePercentage,\n', '        address indexed owner);\n', '\n', '    event UpdatedBlock(uint x,\n', '        uint y,\n', '        bytes32 name,\n', '        bytes32 description,\n', '        bytes32 url,\n', '        bytes32 imageURL,\n', '        address indexed owner);\n', '\n', "    // Create a block if it doesn't exist\n", '    function createBlock(\n', '        uint x,\n', '        uint y,\n', '        bytes32 name,\n', '        bytes32 description,\n', '        bytes32 url,\n', '        bytes32 imageURL\n', '    ) public payable {\n', '        bytes32 key = getKey(x, y);\n', '        uint initialPrice = s.getUInt("initialPrice");\n', '        address owner = s.getAdd(keccak256(key, "owner"));\n', '        uint allowance = s.getUInt(keccak256(msg.sender, "promoAllowance"));\n', '        require(msg.value >= initialPrice || allowance > 0);\n', '        require(owner == address(0));\n', '        uint feePercentage = s.getUInt("buyOutFeePercentage");\n', '        if (msg.value >= initialPrice) {\n', '            rewardParties(x, y, feePercentage);\n', '            s.setUInt(keccak256(key, "price"), msg.value);\n', '        } else {\n', '            allowance--;\n', '            s.setUInt(keccak256(msg.sender, "promoAllowance"), allowance);\n', '            s.setUInt(keccak256(key, "price"), initialPrice);\n', '        }\n', '        s.setBytes32(keccak256(key, "name"), name);\n', '        s.setBytes32(keccak256(key, "description"), description);\n', '        s.setBytes32(keccak256(key, "url"), url);\n', '        s.setBytes32(keccak256(key, "imageURL"), imageURL);\n', '        s.setAdd(keccak256(key, "owner"), msg.sender);\n', '        uint blockCount = s.getUInt("blockCount");\n', '        giveBonusIfExists(x, y);\n', '        blockCount++;\n', '        s.setUInt("blockCount", blockCount);\n', '        storageAddress.transfer(msg.value);\n', '        CreatedBlock(x,\n', '            y,\n', '            msg.value,\n', '            msg.sender,\n', '            name,\n', '            description,\n', '            url,\n', '            imageURL);\n', '    }\n', '\n', '    // Get details for a block\n', '    function getBlock (uint x, uint y) public view returns (\n', '        uint price,\n', '        bytes32 name,\n', '        bytes32 description,\n', '        bytes32 url,\n', '        bytes32 imageURL,\n', '        uint forSale,\n', '        uint pricePerDay,\n', '        address owner\n', '    ) {\n', '        bytes32 key = getKey(x, y);\n', '        price = s.getUInt(keccak256(key, "price"));\n', '        name = s.getBytes32(keccak256(key, "name"));\n', '        description = s.getBytes32(keccak256(key, "description"));\n', '        url = s.getBytes32(keccak256(key, "url"));\n', '        imageURL = s.getBytes32(keccak256(key, "imageURL"));\n', '        forSale = s.getUInt(keccak256(key, "forSale"));\n', '        pricePerDay = s.getUInt(keccak256(key, "pricePerDay"));\n', '        owner = s.getAdd(keccak256(key, "owner"));\n', '    }\n', '\n', '    // Sets a block up for sale\n', '    function sellBlock(uint x, uint y, uint price) public {\n', '        bytes32 key = getKey(x, y);\n', '        uint basePrice = s.getUInt(keccak256(key, "price"));\n', '        require(s.getAdd(keccak256(key, "owner")) == msg.sender);\n', '        require(price < basePrice * 2);\n', '        s.setUInt(keccak256(key, "forSale"), price);\n', '        SetBlockForSale(x, y, price, msg.sender);\n', '    }\n', '\n', '    // Sets a block not for sale\n', '    function cancelSellBlock(uint x, uint y) public {\n', '        bytes32 key = getKey(x, y);\n', '        require(s.getAdd(keccak256(key, "owner")) == msg.sender);\n', '        s.setUInt(keccak256(key, "forSale"), 0);\n', '        UnsetBlockForSale(x, y, msg.sender);\n', '    }\n', '\n', '    // transfers ownership of an existing block\n', '    function buyBlock(\n', '        uint x,\n', '        uint y,\n', '        bytes32 name,\n', '        bytes32 description,\n', '        bytes32 url,\n', '        bytes32 imageURL\n', '    ) public payable {\n', '        bytes32 key = getKey(x, y);\n', '        uint price = s.getUInt(keccak256(key, "price"));\n', '        uint forSale = s.getUInt(keccak256(key, "forSale"));\n', '        address owner = s.getAdd(keccak256(key, "owner"));\n', '        require(owner != address(0));\n', '        require((forSale > 0 && msg.value >= forSale) || msg.value >= price * 2);\n', '        uint feePercentage = s.getUInt("buyOutFeePercentage");\n', '        rewardParties(x, y, feePercentage);\n', '        s.setUInt(keccak256(key, "price"), msg.value);\n', '        s.setBytes32(keccak256(key, "name"), name);\n', '        s.setBytes32(keccak256(key, "description"), description);\n', '        s.setBytes32(keccak256(key, "url"), url);\n', '        s.setBytes32(keccak256(key, "imageURL"), imageURL);\n', '        s.setAdd(keccak256(key, "owner"), msg.sender);\n', '        s.setUInt(keccak256(key, "forSale"), 0);\n', '        s.setUInt(keccak256(key, "pricePerDay"), 0);\n', '        giveBonusIfExists(x, y);\n', '        storageAddress.transfer(msg.value);\n', '        BoughtBlock(x, y, msg.value, msg.sender,\n', '            name, description, url, imageURL);\n', '        SoldBlock(x, y, price, msg.value, feePercentage, owner);\n', '    }\n', '\n', '    // update details for an existing block\n', '    function updateBlock(\n', '        uint x,\n', '        uint y,\n', '        bytes32 name,\n', '        bytes32 description,\n', '        bytes32 url,\n', '        bytes32 imageURL\n', '    )  public {\n', '        bytes32 key = getKey(x, y);\n', '        address owner = s.getAdd(keccak256(key, "owner"));\n', '        require(msg.sender == owner);\n', '        s.setBytes32(keccak256(key, "name"), name);\n', '        s.setBytes32(keccak256(key, "description"), description);\n', '        s.setBytes32(keccak256(key, "url"), url);\n', '        s.setBytes32(keccak256(key, "imageURL"), imageURL);\n', '        UpdatedBlock(x, y, name, description, url, imageURL, msg.sender);\n', '    }\n', '    \n', '    // Add a bonus to a block. That bonus will be awarded to the next buyer.\n', '    // Note, we are not emitting an event to avoid cheating.\n', '    function addBonusToBlock(\n', '        uint x,\n', '        uint y,\n', '        uint bonus\n', '    ) public onlyPrimary {\n', '        bytes32 key = getKey(x, y);\n', '        uint bonusBalance = s.getUInt(keccak256(bonusAddress, "balance"));\n', '        require(bonusBalance >= bonus);\n', '        s.setUInt(keccak256(key, "bonus"), bonus);\n', '    }\n', '\n', '}\n', '\n', '/*\n', '    Main Blocklord contract. It exposes some commodity functions and functions from its subcontracts.\n', '*/\n', '\n', 'contract BLMain is BLBlocks {\n', '\n', '    event ChangedInitialPrice(uint price);\n', '    event ChangedFeePercentage(uint percentage);\n', '    event ChangedNeighbourReward(uint percentage);\n', '\n', '    // provides the total number of purchased blocks\n', '    function totalSupply() public view returns (uint count) {\n', '        count = s.getUInt("blockCount");\n', '        return count;\n', '    }\n', '\n', '    // allows to change the price of an empty block\n', '    function setInitialPrice(uint price) public onlyPrimary {\n', '        s.setUInt("initialPrice", price);\n', '        ChangedInitialPrice(price);\n', '    }\n', '\n', '    // allows to change the platform fee percentage\n', '    function setFeePercentage(uint feePercentage) public onlyPrimary {\n', '        s.setUInt("buyOutFeePercentage", feePercentage);\n', '        ChangedFeePercentage(feePercentage);\n', '    }\n', '    \n', '    // allows to change the neighbour reward percentage\n', '    function setNeighbourRewardPercentage(uint rewardPercentage) public onlyPrimary {\n', '        s.setUInt("neighbourRewardPercentage", rewardPercentage);\n', '        ChangedNeighbourReward(rewardPercentage);\n', '    }\n', '\n', '    // provides the neighbourRewardPercentage\n', '    function getNeighbourReward() public view returns (uint) {\n', '        return s.getUInt("neighbourRewardPercentage");\n', '    }\n', '    \n', '        // provides the starting price for an empty block\n', '    function getInitialPrice() public view returns (uint) {\n', '        return s.getUInt("initialPrice");\n', '    }\n', '\n', '    // provides the price of an empty block\n', '    function getFeePercentage() public view returns (uint) {\n', '        return s.getUInt("buyOutFeePercentage");\n', '    }\n', '}']