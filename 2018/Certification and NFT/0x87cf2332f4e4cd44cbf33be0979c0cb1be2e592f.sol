['pragma solidity ^0.4.24;\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20Interface public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20Interface _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20Standard is ERC20Interface {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) external returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * \n', '   * To avoid this issue, allowances are only allowed to be changed between zero and non-zero.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) external returns (bool) {\n', '    require(allowed[msg.sender][_spender] == 0 || _value == 0);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() external view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) external view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) external view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC223Interface {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function transfer(address to, uint256 value, bytes data) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract ERC223Standard is ERC223Interface, ERC20Standard {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint256 _value, bytes _data) external returns(bool){\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', '     *      but doesn&#39;t contain `_data` param.\n', '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) external returns(bool){\n', '        uint256 codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', ' \n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is ERC223Standard, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract PoolAndSaleInterface {\n', '    address public tokenSaleAddr;\n', '    address public votingAddr;\n', '    address public votingTokenAddr;\n', '    uint256 public tap;\n', '    uint256 public initialTap;\n', '    uint256 public initialRelease;\n', '\n', '    function setTokenSaleContract(address _tokenSaleAddr) external;\n', '    function startProject() external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TimeLockPool{\n', '    using SafeMath for uint256;\n', '\n', '    struct LockedBalance {\n', '      uint256 balance;\n', '      uint256 releaseTime;\n', '    }\n', '\n', '    /*\n', '      structure: lockedBalnces[owner][token] = LockedBalance(balance, releaseTime);\n', '      token address = &#39;0x0&#39; stands for ETH (unit = wei)\n', '    */\n', '    mapping (address => mapping (address => LockedBalance[])) public lockedBalances;\n', '\n', '    event Deposit(\n', '        address indexed owner,\n', '        address indexed tokenAddr,\n', '        uint256 amount,\n', '        uint256 releaseTime\n', '    );\n', '\n', '    event Withdraw(\n', '        address indexed owner,\n', '        address indexed tokenAddr,\n', '        uint256 amount\n', '    );\n', '\n', '    /// @dev Constructor. \n', '    /// @return \n', '    constructor() public {}\n', '\n', '    /// @dev Deposit tokens to specific account with time-lock.\n', '    /// @param tokenAddr The contract address of a ERC20/ERC223 token.\n', '    /// @param account The owner of deposited tokens.\n', '    /// @param amount Amount to deposit.\n', '    /// @param releaseTime Time-lock period.\n', '    /// @return True if it is successful, revert otherwise.\n', '    function depositERC20 (\n', '        address tokenAddr,\n', '        address account,\n', '        uint256 amount,\n', '        uint256 releaseTime\n', '    ) external returns (bool) {\n', '        require(account != address(0x0));\n', '        require(tokenAddr != 0x0);\n', '        require(msg.value == 0);\n', '        require(amount > 0);\n', '        require(ERC20Interface(tokenAddr).transferFrom(msg.sender, this, amount));\n', '\n', '        lockedBalances[account][tokenAddr].push(LockedBalance(amount, releaseTime));\n', '        emit Deposit(account, tokenAddr, amount, releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev Deposit ETH to specific account with time-lock.\n', '    /// @param account The owner of deposited tokens.\n', '    /// @param releaseTime Timestamp to release the fund.\n', '    /// @return True if it is successful, revert otherwise.\n', '    function depositETH (\n', '        address account,\n', '        uint256 releaseTime\n', '    ) external payable returns (bool) {\n', '        require(account != address(0x0));\n', '        address tokenAddr = address(0x0);\n', '        uint256 amount = msg.value;\n', '        require(amount > 0);\n', '\n', '        lockedBalances[account][tokenAddr].push(LockedBalance(amount, releaseTime));\n', '        emit Deposit(account, tokenAddr, amount, releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev Release the available balance of an account.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @param index_from Starting index of records to withdraw.\n', '    /// @param index_to Ending index of records to withdraw.\n', '    /// @return True if it is successful, revert otherwise.\n', '    function withdraw (address account, address tokenAddr, uint256 index_from, uint256 index_to) external returns (bool) {\n', '        require(account != address(0x0));\n', '\n', '        uint256 release_amount = 0;\n', '        for (uint256 i = index_from; i < lockedBalances[account][tokenAddr].length && i < index_to + 1; i++) {\n', '            if (lockedBalances[account][tokenAddr][i].balance > 0 &&\n', '                lockedBalances[account][tokenAddr][i].releaseTime <= block.timestamp) {\n', '\n', '                release_amount = release_amount.add(lockedBalances[account][tokenAddr][i].balance);\n', '                lockedBalances[account][tokenAddr][i].balance = 0;\n', '            }\n', '        }\n', '\n', '        require(release_amount > 0);\n', '\n', '        if (tokenAddr == 0x0) {\n', '            if (!account.send(release_amount)) {\n', '                revert();\n', '            }\n', '            emit Withdraw(account, tokenAddr, release_amount);\n', '            return true;\n', '        } else {\n', '            if (!ERC20Interface(tokenAddr).transfer(account, release_amount)) {\n', '                revert();\n', '            }\n', '            emit Withdraw(account, tokenAddr, release_amount);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns total amount of balances which already passed release time.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @return Available balance of specified token.\n', '    function getAvailableBalanceOf (address account, address tokenAddr) \n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(account != address(0x0));\n', '\n', '        uint256 balance = 0;\n', '        for(uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\n', '            if (lockedBalances[account][tokenAddr][i].releaseTime <= block.timestamp) {\n', '                balance = balance.add(lockedBalances[account][tokenAddr][i].balance);\n', '            }\n', '        }\n', '        return balance;\n', '    }\n', '\n', '    /// @dev Returns total amount of balances which are still locked.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @return Locked balance of specified token.\n', '    function getLockedBalanceOf (address account, address tokenAddr)\n', '        external\n', '        view\n', '        returns (uint256) \n', '    {\n', '        require(account != address(0x0));\n', '\n', '        uint256 balance = 0;\n', '        for(uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\n', '            if(lockedBalances[account][tokenAddr][i].releaseTime > block.timestamp) {\n', '                balance = balance.add(lockedBalances[account][tokenAddr][i].balance);\n', '            }\n', '        }\n', '        return balance;\n', '    }\n', '\n', '    /// @dev Returns next release time of locked balances.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @return Timestamp of next release.\n', '    function getNextReleaseTimeOf (address account, address tokenAddr)\n', '        external\n', '        view\n', '        returns (uint256) \n', '    {\n', '        require(account != address(0x0));\n', '\n', '        uint256 nextRelease = 2**256 - 1;\n', '        for (uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\n', '            if (lockedBalances[account][tokenAddr][i].releaseTime > block.timestamp &&\n', '               lockedBalances[account][tokenAddr][i].releaseTime < nextRelease) {\n', '\n', '                nextRelease = lockedBalances[account][tokenAddr][i].releaseTime;\n', '            }\n', '        }\n', '\n', '        /* returns 0 if there are no more locked balances. */\n', '        if (nextRelease == 2**256 - 1) {\n', '            nextRelease = 0;\n', '        }\n', '        return nextRelease;\n', '    }\n', '}\n', '\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', '   * work. Calls the contract&#39;s finalization function.\n', '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', 'contract TokenController is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    MintableToken public targetToken;\n', '    address public votingAddr;\n', '    address public tokensaleManagerAddr;\n', '\n', '    State public state;\n', '\n', '    enum State {\n', '        Init,\n', '        Tokensale,\n', '        Public\n', '    }\n', '\n', '    /// @dev The deployer must change the ownership of the target token to this contract.\n', '    /// @param _targetToken : The target token this contract manage the rights to mint.\n', '    /// @return \n', '    constructor (\n', '        MintableToken _targetToken\n', '    ) public {\n', '        targetToken = MintableToken(_targetToken);\n', '        state = State.Init;\n', '    }\n', '\n', '    /// @dev Mint and distribute specified amount of tokens to an address.\n', '    /// @param to An address that receive the minted tokens.\n', '    /// @param amount Amount to mint.\n', '    /// @return True if the distribution is successful, revert otherwise.\n', '    function mint (address to, uint256 amount) external returns (bool) {\n', '        /*\n', '          being called from voting contract will be available in the future\n', '          ex. if (state == State.Public && msg.sender == votingAddr) \n', '        */\n', '\n', '        if ((state == State.Init && msg.sender == owner) ||\n', '            (state == State.Tokensale && msg.sender == tokensaleManagerAddr)) {\n', '            return targetToken.mint(to, amount);\n', '        }\n', '\n', '        revert();\n', '    }\n', '\n', '    /// @dev Change the phase from "Init" to "Tokensale".\n', '    /// @param _tokensaleManagerAddr A contract address of token-sale.\n', '    /// @return True if the change of the phase is successful, revert otherwise.\n', '    function openTokensale (address _tokensaleManagerAddr)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        /* check if the owner of the target token is set to this contract */\n', '        require(MintableToken(targetToken).owner() == address(this));\n', '        require(state == State.Init);\n', '        require(_tokensaleManagerAddr != address(0x0));\n', '\n', '        tokensaleManagerAddr = _tokensaleManagerAddr;\n', '        state = State.Tokensale;\n', '        return true;\n', '    }\n', '\n', '    /// @dev Change the phase from "Tokensale" to "Public". This function will be\n', '    ///      cahnged in the future to receive an address of voting contract as an\n', '    ///      argument in order to handle the result of minting proposal.\n', '    /// @return True if the change of the phase is successful, revert otherwise.\n', '    function closeTokensale () external returns (bool) {\n', '        require(state == State.Tokensale && msg.sender == tokensaleManagerAddr);\n', '\n', '        state = State.Public;\n', '        return true;\n', '    }\n', '\n', '    /// @dev Check if the state is "Init" or not.\n', '    /// @return True if the state is "Init", false otherwise.\n', '    function isStateInit () external view returns (bool) {\n', '        return (state == State.Init);\n', '    }\n', '\n', '    /// @dev Check if the state is "Tokensale" or not.\n', '    /// @return True if the state is "Tokensale", false otherwise.\n', '    function isStateTokensale () external view returns (bool) {\n', '        return (state == State.Tokensale);\n', '    }\n', '\n', '    /// @dev Check if the state is "Public" or not.\n', '    /// @return True if the state is "Public", false otherwise.\n', '    function isStatePublic () external view returns (bool) {\n', '        return (state == State.Public);\n', '    }\n', '}\n', '\n', 'contract TokenSaleManager is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ERC20Interface public token;\n', '    address public poolAddr;\n', '    address public tokenControllerAddr;\n', '    address public timeLockPoolAddr;\n', '    address[] public tokenSales;\n', '    mapping( address => bool ) public tokenSaleIndex;\n', '    bool public isStarted = false;\n', '    bool public isFinalized = false;\n', '\n', '    modifier onlyDaicoPool {\n', '        require(msg.sender == poolAddr);\n', '        _;\n', '    }\n', '\n', '    modifier onlyTokenSale {\n', '        require(tokenSaleIndex[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /// @dev Constructor. It set the DaicoPool to receive the starting signal from this contract.\n', '    /// @param _tokenControllerAddr The contract address of TokenController.\n', '    /// @param _timeLockPoolAddr The contract address of a TimeLockPool.\n', '    /// @param _daicoPoolAddr The contract address of DaicoPool.\n', '    /// @param _token The contract address of a ERC20 token.\n', '    constructor (\n', '        address _tokenControllerAddr,\n', '        address _timeLockPoolAddr,\n', '        address _daicoPoolAddr,\n', '        ERC20Interface _token\n', '    ) public {\n', '        require(_tokenControllerAddr != address(0x0));\n', '        tokenControllerAddr = _tokenControllerAddr;\n', '\n', '        require(_timeLockPoolAddr != address(0x0));\n', '        timeLockPoolAddr = _timeLockPoolAddr;\n', '\n', '        token = _token;\n', '\n', '        poolAddr = _daicoPoolAddr;\n', '        require(PoolAndSaleInterface(poolAddr).votingTokenAddr() == address(token));\n', '        PoolAndSaleInterface(poolAddr).setTokenSaleContract(this);\n', '\n', '    }\n', '\n', '    /// @dev This contract doen&#39;t receive any ETH.\n', '    function() external payable {\n', '        revert();\n', '    }\n', '\n', '    /// @dev Add a new token sale with specific parameters. New sale should start\n', '    /// @dev after the previous one closed.\n', '    /// @param openingTime A timestamp of the date this sale will start.\n', '    /// @param closingTime A timestamp of the date this sale will end.\n', '    /// @param tokensCap Number of tokens to be sold. Can be 0 if it accepts carryover.\n', '    /// @param rate Number of tokens issued with 1 ETH. [minimal unit of the token / ETH]  \n', '    /// @param carryover If true, unsold tokens will be carryovered to next sale. \n', '    /// @param timeLockRate Specified rate of issued tokens will be locked. ex. 50 = 50%\n', '    /// @param timeLockEnd A timestamp of the date locked tokens will be released.\n', '    /// @param minAcceptableWei Minimum contribution.\n', '    function addTokenSale (\n', '        uint256 openingTime,\n', '        uint256 closingTime,\n', '        uint256 tokensCap,\n', '        uint256 rate,\n', '        bool carryover,\n', '        uint256 timeLockRate,\n', '        uint256 timeLockEnd,\n', '        uint256 minAcceptableWei\n', '    ) external onlyOwner {\n', '        require(!isStarted);\n', '        require(\n', '            tokenSales.length == 0 ||\n', '            TimedCrowdsale(tokenSales[tokenSales.length-1]).closingTime() < openingTime\n', '        );\n', '\n', '        require(TokenController(tokenControllerAddr).state() == TokenController.State.Init);\n', '\n', '        tokenSales.push(new TokenSale(\n', '            rate,\n', '            token,\n', '            poolAddr,\n', '            openingTime,\n', '            closingTime,\n', '            tokensCap,\n', '            timeLockRate,\n', '            timeLockEnd,\n', '            carryover,\n', '            minAcceptableWei\n', '        ));\n', '        tokenSaleIndex[tokenSales[tokenSales.length-1]] = true;\n', '\n', '    }\n', '\n', '    /// @dev Initialize the tokensales. No other sales can be added after initialization.\n', '    /// @return True if successful, revert otherwise.\n', '    function initialize () external onlyOwner returns (bool) {\n', '        require(!isStarted);\n', '        TokenSale(tokenSales[0]).initialize(0);\n', '        isStarted = true;\n', '    }\n', '\n', '    /// @dev Request TokenController to mint new tokens. This function is only called by \n', '    /// @dev token sales.\n', '    /// @param _beneficiary The address to receive the new tokens.\n', '    /// @param _tokenAmount Token amount to be minted.\n', '    /// @return True if successful, revert otherwise.\n', '    function mint (\n', '        address _beneficiary,\n', '        uint256 _tokenAmount\n', '    ) external onlyTokenSale returns(bool) {\n', '        require(isStarted && !isFinalized);\n', '        require(TokenController(tokenControllerAddr).mint(_beneficiary, _tokenAmount));\n', '        return true;\n', '    }\n', '\n', '    /// @dev Mint new tokens with time-lock. This function is only called by token sales.\n', '    /// @param _beneficiary The address to receive the new tokens.\n', '    /// @param _tokenAmount Token amount to be minted.\n', '    /// @param _releaseTime A timestamp of the date locked tokens will be released.\n', '    /// @return True if successful, revert otherwise.\n', '    function mintTimeLocked (\n', '        address _beneficiary,\n', '        uint256 _tokenAmount,\n', '        uint256 _releaseTime\n', '    ) external onlyTokenSale returns(bool) {\n', '        require(isStarted && !isFinalized);\n', '        require(TokenController(tokenControllerAddr).mint(this, _tokenAmount));\n', '        require(ERC20Interface(token).approve(timeLockPoolAddr, _tokenAmount));\n', '        require(TimeLockPool(timeLockPoolAddr).depositERC20(\n', '            token,\n', '            _beneficiary,\n', '            _tokenAmount,\n', '            _releaseTime\n', '        ));\n', '        return true;\n', '    }\n', '\n', '    /// @dev Adds single address to whitelist of all token sales.\n', '    /// @param _beneficiary Address to be added to the whitelist\n', '    function addToWhitelist(address _beneficiary) external onlyOwner {\n', '        require(isStarted);\n', '        for (uint256 i = 0; i < tokenSales.length; i++ ) {\n', '            WhitelistedCrowdsale(tokenSales[i]).addToWhitelist(_beneficiary);\n', '        }\n', '    }\n', '\n', '    /// @dev Adds multiple addresses to whitelist of all token sales.\n', '    /// @param _beneficiaries Addresses to be added to the whitelist\n', '    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '        require(isStarted);\n', '        for (uint256 i = 0; i < tokenSales.length; i++ ) {\n', '            WhitelistedCrowdsale(tokenSales[i]).addManyToWhitelist(_beneficiaries);\n', '        }\n', '    }\n', '\n', '\n', '    /// @dev Finalize the specific token sale. Can be done if end date has come or \n', '    /// @dev all tokens has been sold out. It process carryover if it is set.\n', '    /// @param _indexTokenSale index of the target token sale. \n', '    function finalize (uint256 _indexTokenSale) external {\n', '        require(isStarted && !isFinalized);\n', '        TokenSale ts = TokenSale(tokenSales[_indexTokenSale]);\n', '\n', '        if (ts.canFinalize()) {\n', '            ts.finalize();\n', '            uint256 carryoverAmount = 0;\n', '            if (ts.carryover() &&\n', '                ts.tokensCap() > ts.tokensMinted() &&\n', '                _indexTokenSale.add(1) < tokenSales.length) {\n', '                carryoverAmount = ts.tokensCap().sub(ts.tokensMinted());\n', '            } \n', '            if(_indexTokenSale.add(1) < tokenSales.length) {\n', '                TokenSale(tokenSales[_indexTokenSale.add(1)]).initialize(carryoverAmount);\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    /// @dev Finalize the manager. Can be done if all token sales are already finalized.\n', '    /// @dev It makes the DaicoPool open the TAP.\n', '    function finalizeTokenSaleManager () external{\n', '        require(isStarted && !isFinalized);\n', '        for (uint256 i = 0; i < tokenSales.length; i++ ) {\n', '            require(FinalizableCrowdsale(tokenSales[i]).isFinalized());\n', '        }\n', '        require(TokenController(tokenControllerAddr).closeTokensale());\n', '        isFinalized = true;\n', '        PoolAndSaleInterface(poolAddr).startProject();\n', '    }\n', '}\n', '\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract TokenSale is FinalizableCrowdsale,\n', '                      WhitelistedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    address public managerAddr; \n', '    address public poolAddr;\n', '    bool public isInitialized = false;\n', '    uint256 public timeLockRate;\n', '    uint256 public timeLockEnd;\n', '    uint256 public tokensMinted = 0;\n', '    uint256 public tokensCap;\n', '    uint256 public minAcceptableWei;\n', '    bool public carryover;\n', '\n', '    modifier onlyManager{\n', '        require(msg.sender == managerAddr);\n', '        _;\n', '    }\n', '\n', '    /// @dev Constructor.\n', '    /// @param _rate Number of tokens issued with 1 ETH. [minimal unit of the token / ETH]\n', '    /// @param _token The contract address of a ERC20 token.\n', '    /// @param _poolAddr The contract address of DaicoPool.\n', '    /// @param _openingTime A timestamp of the date this sale will start.\n', '    /// @param _closingTime A timestamp of the date this sale will end.\n', '    /// @param _tokensCap Number of tokens to be sold. Can be 0 if it accepts carryover.\n', '    /// @param _timeLockRate Specified rate of issued tokens will be locked. ex. 50 = 50%\n', '    /// @param _timeLockEnd A timestamp of the date locked tokens will be released.\n', '    /// @param _carryover If true, unsold tokens will be carryovered to next sale. \n', '    /// @param _minAcceptableWei Minimum contribution.\n', '    /// @return \n', '    constructor (\n', '        uint256 _rate, /* The unit of rate is [nano tokens / ETH] in this contract */\n', '        ERC20Interface _token,\n', '        address _poolAddr,\n', '        uint256 _openingTime,\n', '        uint256 _closingTime,\n', '        uint256 _tokensCap,\n', '        uint256 _timeLockRate,\n', '        uint256 _timeLockEnd,\n', '        bool _carryover,\n', '        uint256 _minAcceptableWei\n', '    ) public Crowdsale(_rate, _poolAddr, _token) TimedCrowdsale(_openingTime, _closingTime) {\n', '        require(_timeLockRate >= 0 && _timeLockRate <=100);\n', '        require(_poolAddr != address(0x0));\n', '\n', '        managerAddr = msg.sender;\n', '        poolAddr = _poolAddr;\n', '        timeLockRate = _timeLockRate;\n', '        timeLockEnd = _timeLockEnd;\n', '        tokensCap = _tokensCap;\n', '        carryover = _carryover;\n', '        minAcceptableWei = _minAcceptableWei;\n', '    }\n', '\n', '    /// @dev Initialize the sale. If carryoverAmount is given, it added the tokens to be sold.\n', '    /// @param carryoverAmount Amount of tokens to be added to capTokens.\n', '    /// @return \n', '    function initialize(uint256 carryoverAmount) external onlyManager {\n', '        require(!isInitialized);\n', '        isInitialized = true;\n', '        tokensCap = tokensCap.add(carryoverAmount);\n', '    }\n', '\n', '    /// @dev Finalize the sale. It transfers all the funds it has. Can be repeated.\n', '    /// @return \n', '    function finalize() onlyOwner public {\n', '        //require(!isFinalized);\n', '        require(isInitialized);\n', '        require(canFinalize());\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /// @dev Check if the sale can be finalized.\n', '    /// @return True if closing time has come or tokens are sold out.\n', '    function canFinalize() public view returns(bool) {\n', '        return (hasClosed() || (isInitialized && tokensCap <= tokensMinted));\n', '    }\n', '\n', '\n', '    /// @dev It transfers all the funds it has.\n', '    /// @return \n', '    function finalization() internal {\n', '        if(address(this).balance > 0){\n', '            poolAddr.transfer(address(this).balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides delivery by minting tokens upon purchase.\n', '     * @param _beneficiary Token purchaser\n', '     * @param _tokenAmount Number of tokens to be minted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        //require(tokensMinted.add(_tokenAmount) <= tokensCap);\n', '        require(tokensMinted < tokensCap);\n', '\n', '        uint256 time_locked = _tokenAmount.mul(timeLockRate).div(100); \n', '        uint256 instant = _tokenAmount.sub(time_locked);\n', '\n', '        if (instant > 0) {\n', '            require(TokenSaleManager(managerAddr).mint(_beneficiary, instant));\n', '        }\n', '        if (time_locked > 0) {\n', '            require(TokenSaleManager(managerAddr).mintTimeLocked(\n', '                _beneficiary,\n', '                time_locked,\n', '                timeLockEnd\n', '            ));\n', '        }\n', '  \n', '        tokensMinted = tokensMinted.add(_tokenAmount);\n', '    }\n', '\n', '    /// @dev Overrides _forwardFunds to do nothing. \n', '    function _forwardFunds() internal {}\n', '\n', '    /// @dev Overrides _preValidatePurchase to check minimam contribution and initialization.\n', '    /// @param _beneficiary Token purchaser\n', '    /// @param _weiAmount weiAmount to pay\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(isInitialized);\n', '        require(_weiAmount >= minAcceptableWei);\n', '    }\n', '\n', '    /**\n', '     * @dev Overridden in order to change the unit of rate with [nano toekns / ETH]\n', '     * instead of original [minimal unit of the token / wei].\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '      return _weiAmount.mul(rate).div(10**18); //The unit of rate is [nano tokens / ETH].\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  ERC20Interface public token;\n', '\n', '  // Address where funds are collected\n', '  address public wallet;\n', '\n', '  // How many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // Amount of wei raised\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * Event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '  /**\n', '   * @param _rate Number of token units a buyer gets per wei\n', '   * @param _wallet Address where collected funds will be forwarded to\n', '   * @param _token Address of the token being sold\n', '   */\n', '  constructor(uint256 _rate, address _wallet, ERC20Interface _token) public {\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '    require(_token != address(0));\n', '\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '    token = _token;\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Crowdsale external interface\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev fallback function ***DO NOT OVERRIDE***\n', '   */\n', '  function () external payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  /**\n', '   * @dev low level token purchase ***DO NOT OVERRIDE***\n', '   * @param _beneficiary Address performing the token purchase\n', '   */\n', '  function buyTokens(address _beneficiary) public payable {\n', '\n', '    uint256 weiAmount = msg.value;\n', '    _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    _processPurchase(_beneficiary, tokens);\n', '    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n', '\n', '    _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '    _forwardFunds();\n', '    _postValidatePurchase(_beneficiary, weiAmount);\n', '  }\n', '\n', '  // -----------------------------------------\n', '  // Internal interface (extensible)\n', '  // -----------------------------------------\n', '\n', '  /**\n', '   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    require(_beneficiary != address(0));\n', '    require(_weiAmount != 0);\n', '  }\n', '\n', '  /**\n', '   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '   * @param _beneficiary Address performing the token purchase\n', '   * @param _tokenAmount Number of tokens to be emitted\n', '   */\n', '  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '    token.transfer(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _tokenAmount Number of tokens to be purchased\n', '   */\n', '  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n', '    _deliverTokens(_beneficiary, _tokenAmount);\n', '  }\n', '\n', '  /**\n', '   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '   * @param _beneficiary Address receiving the tokens\n', '   * @param _weiAmount Value in wei involved in the purchase\n', '   */\n', '  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n', '    // optional override\n', '  }\n', '\n', '  /**\n', '   * @dev Override to extend the way in which ether is converted to tokens.\n', '   * @param _weiAmount Value in wei to be converted into tokens\n', '   * @return Number of tokens that can be purchased with the specified _weiAmount\n', '   */\n', '  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '    return _weiAmount.mul(rate);\n', '  }\n', '\n', '  /**\n', '   * @dev Determines how ETH is stored/forwarded on purchases.\n', '   */\n', '  function _forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '}\n', '\n', 'contract ERC20Interface {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC20Standard is ERC20Interface {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) external returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * \n', '   * To avoid this issue, allowances are only allowed to be changed between zero and non-zero.\n', '   *\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) external returns (bool) {\n', '    require(allowed[msg.sender][_spender] == 0 || _value == 0);\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() external view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) external view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) external view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) external returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) external returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract ERC223Interface {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '    function transfer(address to, uint256 value, bytes data) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC223ReceivingContract { \n', '/**\n', ' * @dev Standard ERC223 function that will handle incoming token transfers.\n', ' *\n', ' * @param _from  Token sender address.\n', ' * @param _value Amount of tokens.\n', ' * @param _data  Transaction metadata.\n', ' */\n', '    function tokenFallback(address _from, uint _value, bytes _data) public;\n', '}\n', '\n', 'contract ERC223Standard is ERC223Interface, ERC20Standard {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      Invokes the `tokenFallback` function if the recipient is a contract.\n', '     *      The token transfer fails if the recipient is a contract\n', '     *      but does not implement the `tokenFallback` function\n', '     *      or the fallback function to receive funds.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     * @param _data  Transaction metadata.\n', '     */\n', '    function transfer(address _to, uint256 _value, bytes _data) external returns(bool){\n', '        // Standard function transfer similar to ERC20 transfer with no _data .\n', '        // Added due to backwards compatibility reasons .\n', '        uint256 codeLength;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '    }\n', '    \n', '    /**\n', '     * @dev Transfer the specified amount of tokens to the specified address.\n', '     *      This function works the same with the previous one\n', "     *      but doesn't contain `_data` param.\n", '     *      Added due to backwards compatibility reasons.\n', '     *\n', '     * @param _to    Receiver address.\n', '     * @param _value Amount of tokens that will be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) external returns(bool){\n', '        uint256 codeLength;\n', '        bytes memory empty;\n', '\n', '        assembly {\n', '            // Retrieve the size of the code on target address, this needs assembly .\n', '            codeLength := extcodesize(_to)\n', '        }\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        if(codeLength>0) {\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, empty);\n', '        }\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', ' \n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract MintableToken is ERC223Standard, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract PoolAndSaleInterface {\n', '    address public tokenSaleAddr;\n', '    address public votingAddr;\n', '    address public votingTokenAddr;\n', '    uint256 public tap;\n', '    uint256 public initialTap;\n', '    uint256 public initialRelease;\n', '\n', '    function setTokenSaleContract(address _tokenSaleAddr) external;\n', '    function startProject() external;\n', '}\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract TimeLockPool{\n', '    using SafeMath for uint256;\n', '\n', '    struct LockedBalance {\n', '      uint256 balance;\n', '      uint256 releaseTime;\n', '    }\n', '\n', '    /*\n', '      structure: lockedBalnces[owner][token] = LockedBalance(balance, releaseTime);\n', "      token address = '0x0' stands for ETH (unit = wei)\n", '    */\n', '    mapping (address => mapping (address => LockedBalance[])) public lockedBalances;\n', '\n', '    event Deposit(\n', '        address indexed owner,\n', '        address indexed tokenAddr,\n', '        uint256 amount,\n', '        uint256 releaseTime\n', '    );\n', '\n', '    event Withdraw(\n', '        address indexed owner,\n', '        address indexed tokenAddr,\n', '        uint256 amount\n', '    );\n', '\n', '    /// @dev Constructor. \n', '    /// @return \n', '    constructor() public {}\n', '\n', '    /// @dev Deposit tokens to specific account with time-lock.\n', '    /// @param tokenAddr The contract address of a ERC20/ERC223 token.\n', '    /// @param account The owner of deposited tokens.\n', '    /// @param amount Amount to deposit.\n', '    /// @param releaseTime Time-lock period.\n', '    /// @return True if it is successful, revert otherwise.\n', '    function depositERC20 (\n', '        address tokenAddr,\n', '        address account,\n', '        uint256 amount,\n', '        uint256 releaseTime\n', '    ) external returns (bool) {\n', '        require(account != address(0x0));\n', '        require(tokenAddr != 0x0);\n', '        require(msg.value == 0);\n', '        require(amount > 0);\n', '        require(ERC20Interface(tokenAddr).transferFrom(msg.sender, this, amount));\n', '\n', '        lockedBalances[account][tokenAddr].push(LockedBalance(amount, releaseTime));\n', '        emit Deposit(account, tokenAddr, amount, releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev Deposit ETH to specific account with time-lock.\n', '    /// @param account The owner of deposited tokens.\n', '    /// @param releaseTime Timestamp to release the fund.\n', '    /// @return True if it is successful, revert otherwise.\n', '    function depositETH (\n', '        address account,\n', '        uint256 releaseTime\n', '    ) external payable returns (bool) {\n', '        require(account != address(0x0));\n', '        address tokenAddr = address(0x0);\n', '        uint256 amount = msg.value;\n', '        require(amount > 0);\n', '\n', '        lockedBalances[account][tokenAddr].push(LockedBalance(amount, releaseTime));\n', '        emit Deposit(account, tokenAddr, amount, releaseTime);\n', '\n', '        return true;\n', '    }\n', '\n', '    /// @dev Release the available balance of an account.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @param index_from Starting index of records to withdraw.\n', '    /// @param index_to Ending index of records to withdraw.\n', '    /// @return True if it is successful, revert otherwise.\n', '    function withdraw (address account, address tokenAddr, uint256 index_from, uint256 index_to) external returns (bool) {\n', '        require(account != address(0x0));\n', '\n', '        uint256 release_amount = 0;\n', '        for (uint256 i = index_from; i < lockedBalances[account][tokenAddr].length && i < index_to + 1; i++) {\n', '            if (lockedBalances[account][tokenAddr][i].balance > 0 &&\n', '                lockedBalances[account][tokenAddr][i].releaseTime <= block.timestamp) {\n', '\n', '                release_amount = release_amount.add(lockedBalances[account][tokenAddr][i].balance);\n', '                lockedBalances[account][tokenAddr][i].balance = 0;\n', '            }\n', '        }\n', '\n', '        require(release_amount > 0);\n', '\n', '        if (tokenAddr == 0x0) {\n', '            if (!account.send(release_amount)) {\n', '                revert();\n', '            }\n', '            emit Withdraw(account, tokenAddr, release_amount);\n', '            return true;\n', '        } else {\n', '            if (!ERC20Interface(tokenAddr).transfer(account, release_amount)) {\n', '                revert();\n', '            }\n', '            emit Withdraw(account, tokenAddr, release_amount);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns total amount of balances which already passed release time.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @return Available balance of specified token.\n', '    function getAvailableBalanceOf (address account, address tokenAddr) \n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(account != address(0x0));\n', '\n', '        uint256 balance = 0;\n', '        for(uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\n', '            if (lockedBalances[account][tokenAddr][i].releaseTime <= block.timestamp) {\n', '                balance = balance.add(lockedBalances[account][tokenAddr][i].balance);\n', '            }\n', '        }\n', '        return balance;\n', '    }\n', '\n', '    /// @dev Returns total amount of balances which are still locked.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @return Locked balance of specified token.\n', '    function getLockedBalanceOf (address account, address tokenAddr)\n', '        external\n', '        view\n', '        returns (uint256) \n', '    {\n', '        require(account != address(0x0));\n', '\n', '        uint256 balance = 0;\n', '        for(uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\n', '            if(lockedBalances[account][tokenAddr][i].releaseTime > block.timestamp) {\n', '                balance = balance.add(lockedBalances[account][tokenAddr][i].balance);\n', '            }\n', '        }\n', '        return balance;\n', '    }\n', '\n', '    /// @dev Returns next release time of locked balances.\n', '    /// @param account An account to receive tokens.\n', '    /// @param tokenAddr An address of ERC20/ERC223 token.\n', '    /// @return Timestamp of next release.\n', '    function getNextReleaseTimeOf (address account, address tokenAddr)\n', '        external\n', '        view\n', '        returns (uint256) \n', '    {\n', '        require(account != address(0x0));\n', '\n', '        uint256 nextRelease = 2**256 - 1;\n', '        for (uint256 i = 0; i < lockedBalances[account][tokenAddr].length; i++) {\n', '            if (lockedBalances[account][tokenAddr][i].releaseTime > block.timestamp &&\n', '               lockedBalances[account][tokenAddr][i].releaseTime < nextRelease) {\n', '\n', '                nextRelease = lockedBalances[account][tokenAddr][i].releaseTime;\n', '            }\n', '        }\n', '\n', '        /* returns 0 if there are no more locked balances. */\n', '        if (nextRelease == 2**256 - 1) {\n', '            nextRelease = 0;\n', '        }\n', '        return nextRelease;\n', '    }\n', '}\n', '\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bool public isFinalized = false;\n', '\n', '  event Finalized();\n', '\n', '  /**\n', '   * @dev Must be called after crowdsale ends, to do some extra finalization\n', "   * work. Calls the contract's finalization function.\n", '   */\n', '  function finalize() onlyOwner public {\n', '    require(!isFinalized);\n', '    require(hasClosed());\n', '\n', '    finalization();\n', '    emit Finalized();\n', '\n', '    isFinalized = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Can be overridden to add finalization logic. The overriding function\n', '   * should call super.finalization() to ensure the chain of finalization is\n', '   * executed entirely.\n', '   */\n', '  function finalization() internal {\n', '  }\n', '\n', '}\n', '\n', 'contract TokenController is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    MintableToken public targetToken;\n', '    address public votingAddr;\n', '    address public tokensaleManagerAddr;\n', '\n', '    State public state;\n', '\n', '    enum State {\n', '        Init,\n', '        Tokensale,\n', '        Public\n', '    }\n', '\n', '    /// @dev The deployer must change the ownership of the target token to this contract.\n', '    /// @param _targetToken : The target token this contract manage the rights to mint.\n', '    /// @return \n', '    constructor (\n', '        MintableToken _targetToken\n', '    ) public {\n', '        targetToken = MintableToken(_targetToken);\n', '        state = State.Init;\n', '    }\n', '\n', '    /// @dev Mint and distribute specified amount of tokens to an address.\n', '    /// @param to An address that receive the minted tokens.\n', '    /// @param amount Amount to mint.\n', '    /// @return True if the distribution is successful, revert otherwise.\n', '    function mint (address to, uint256 amount) external returns (bool) {\n', '        /*\n', '          being called from voting contract will be available in the future\n', '          ex. if (state == State.Public && msg.sender == votingAddr) \n', '        */\n', '\n', '        if ((state == State.Init && msg.sender == owner) ||\n', '            (state == State.Tokensale && msg.sender == tokensaleManagerAddr)) {\n', '            return targetToken.mint(to, amount);\n', '        }\n', '\n', '        revert();\n', '    }\n', '\n', '    /// @dev Change the phase from "Init" to "Tokensale".\n', '    /// @param _tokensaleManagerAddr A contract address of token-sale.\n', '    /// @return True if the change of the phase is successful, revert otherwise.\n', '    function openTokensale (address _tokensaleManagerAddr)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        /* check if the owner of the target token is set to this contract */\n', '        require(MintableToken(targetToken).owner() == address(this));\n', '        require(state == State.Init);\n', '        require(_tokensaleManagerAddr != address(0x0));\n', '\n', '        tokensaleManagerAddr = _tokensaleManagerAddr;\n', '        state = State.Tokensale;\n', '        return true;\n', '    }\n', '\n', '    /// @dev Change the phase from "Tokensale" to "Public". This function will be\n', '    ///      cahnged in the future to receive an address of voting contract as an\n', '    ///      argument in order to handle the result of minting proposal.\n', '    /// @return True if the change of the phase is successful, revert otherwise.\n', '    function closeTokensale () external returns (bool) {\n', '        require(state == State.Tokensale && msg.sender == tokensaleManagerAddr);\n', '\n', '        state = State.Public;\n', '        return true;\n', '    }\n', '\n', '    /// @dev Check if the state is "Init" or not.\n', '    /// @return True if the state is "Init", false otherwise.\n', '    function isStateInit () external view returns (bool) {\n', '        return (state == State.Init);\n', '    }\n', '\n', '    /// @dev Check if the state is "Tokensale" or not.\n', '    /// @return True if the state is "Tokensale", false otherwise.\n', '    function isStateTokensale () external view returns (bool) {\n', '        return (state == State.Tokensale);\n', '    }\n', '\n', '    /// @dev Check if the state is "Public" or not.\n', '    /// @return True if the state is "Public", false otherwise.\n', '    function isStatePublic () external view returns (bool) {\n', '        return (state == State.Public);\n', '    }\n', '}\n', '\n', 'contract TokenSaleManager is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    ERC20Interface public token;\n', '    address public poolAddr;\n', '    address public tokenControllerAddr;\n', '    address public timeLockPoolAddr;\n', '    address[] public tokenSales;\n', '    mapping( address => bool ) public tokenSaleIndex;\n', '    bool public isStarted = false;\n', '    bool public isFinalized = false;\n', '\n', '    modifier onlyDaicoPool {\n', '        require(msg.sender == poolAddr);\n', '        _;\n', '    }\n', '\n', '    modifier onlyTokenSale {\n', '        require(tokenSaleIndex[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    /// @dev Constructor. It set the DaicoPool to receive the starting signal from this contract.\n', '    /// @param _tokenControllerAddr The contract address of TokenController.\n', '    /// @param _timeLockPoolAddr The contract address of a TimeLockPool.\n', '    /// @param _daicoPoolAddr The contract address of DaicoPool.\n', '    /// @param _token The contract address of a ERC20 token.\n', '    constructor (\n', '        address _tokenControllerAddr,\n', '        address _timeLockPoolAddr,\n', '        address _daicoPoolAddr,\n', '        ERC20Interface _token\n', '    ) public {\n', '        require(_tokenControllerAddr != address(0x0));\n', '        tokenControllerAddr = _tokenControllerAddr;\n', '\n', '        require(_timeLockPoolAddr != address(0x0));\n', '        timeLockPoolAddr = _timeLockPoolAddr;\n', '\n', '        token = _token;\n', '\n', '        poolAddr = _daicoPoolAddr;\n', '        require(PoolAndSaleInterface(poolAddr).votingTokenAddr() == address(token));\n', '        PoolAndSaleInterface(poolAddr).setTokenSaleContract(this);\n', '\n', '    }\n', '\n', "    /// @dev This contract doen't receive any ETH.\n", '    function() external payable {\n', '        revert();\n', '    }\n', '\n', '    /// @dev Add a new token sale with specific parameters. New sale should start\n', '    /// @dev after the previous one closed.\n', '    /// @param openingTime A timestamp of the date this sale will start.\n', '    /// @param closingTime A timestamp of the date this sale will end.\n', '    /// @param tokensCap Number of tokens to be sold. Can be 0 if it accepts carryover.\n', '    /// @param rate Number of tokens issued with 1 ETH. [minimal unit of the token / ETH]  \n', '    /// @param carryover If true, unsold tokens will be carryovered to next sale. \n', '    /// @param timeLockRate Specified rate of issued tokens will be locked. ex. 50 = 50%\n', '    /// @param timeLockEnd A timestamp of the date locked tokens will be released.\n', '    /// @param minAcceptableWei Minimum contribution.\n', '    function addTokenSale (\n', '        uint256 openingTime,\n', '        uint256 closingTime,\n', '        uint256 tokensCap,\n', '        uint256 rate,\n', '        bool carryover,\n', '        uint256 timeLockRate,\n', '        uint256 timeLockEnd,\n', '        uint256 minAcceptableWei\n', '    ) external onlyOwner {\n', '        require(!isStarted);\n', '        require(\n', '            tokenSales.length == 0 ||\n', '            TimedCrowdsale(tokenSales[tokenSales.length-1]).closingTime() < openingTime\n', '        );\n', '\n', '        require(TokenController(tokenControllerAddr).state() == TokenController.State.Init);\n', '\n', '        tokenSales.push(new TokenSale(\n', '            rate,\n', '            token,\n', '            poolAddr,\n', '            openingTime,\n', '            closingTime,\n', '            tokensCap,\n', '            timeLockRate,\n', '            timeLockEnd,\n', '            carryover,\n', '            minAcceptableWei\n', '        ));\n', '        tokenSaleIndex[tokenSales[tokenSales.length-1]] = true;\n', '\n', '    }\n', '\n', '    /// @dev Initialize the tokensales. No other sales can be added after initialization.\n', '    /// @return True if successful, revert otherwise.\n', '    function initialize () external onlyOwner returns (bool) {\n', '        require(!isStarted);\n', '        TokenSale(tokenSales[0]).initialize(0);\n', '        isStarted = true;\n', '    }\n', '\n', '    /// @dev Request TokenController to mint new tokens. This function is only called by \n', '    /// @dev token sales.\n', '    /// @param _beneficiary The address to receive the new tokens.\n', '    /// @param _tokenAmount Token amount to be minted.\n', '    /// @return True if successful, revert otherwise.\n', '    function mint (\n', '        address _beneficiary,\n', '        uint256 _tokenAmount\n', '    ) external onlyTokenSale returns(bool) {\n', '        require(isStarted && !isFinalized);\n', '        require(TokenController(tokenControllerAddr).mint(_beneficiary, _tokenAmount));\n', '        return true;\n', '    }\n', '\n', '    /// @dev Mint new tokens with time-lock. This function is only called by token sales.\n', '    /// @param _beneficiary The address to receive the new tokens.\n', '    /// @param _tokenAmount Token amount to be minted.\n', '    /// @param _releaseTime A timestamp of the date locked tokens will be released.\n', '    /// @return True if successful, revert otherwise.\n', '    function mintTimeLocked (\n', '        address _beneficiary,\n', '        uint256 _tokenAmount,\n', '        uint256 _releaseTime\n', '    ) external onlyTokenSale returns(bool) {\n', '        require(isStarted && !isFinalized);\n', '        require(TokenController(tokenControllerAddr).mint(this, _tokenAmount));\n', '        require(ERC20Interface(token).approve(timeLockPoolAddr, _tokenAmount));\n', '        require(TimeLockPool(timeLockPoolAddr).depositERC20(\n', '            token,\n', '            _beneficiary,\n', '            _tokenAmount,\n', '            _releaseTime\n', '        ));\n', '        return true;\n', '    }\n', '\n', '    /// @dev Adds single address to whitelist of all token sales.\n', '    /// @param _beneficiary Address to be added to the whitelist\n', '    function addToWhitelist(address _beneficiary) external onlyOwner {\n', '        require(isStarted);\n', '        for (uint256 i = 0; i < tokenSales.length; i++ ) {\n', '            WhitelistedCrowdsale(tokenSales[i]).addToWhitelist(_beneficiary);\n', '        }\n', '    }\n', '\n', '    /// @dev Adds multiple addresses to whitelist of all token sales.\n', '    /// @param _beneficiaries Addresses to be added to the whitelist\n', '    function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '        require(isStarted);\n', '        for (uint256 i = 0; i < tokenSales.length; i++ ) {\n', '            WhitelistedCrowdsale(tokenSales[i]).addManyToWhitelist(_beneficiaries);\n', '        }\n', '    }\n', '\n', '\n', '    /// @dev Finalize the specific token sale. Can be done if end date has come or \n', '    /// @dev all tokens has been sold out. It process carryover if it is set.\n', '    /// @param _indexTokenSale index of the target token sale. \n', '    function finalize (uint256 _indexTokenSale) external {\n', '        require(isStarted && !isFinalized);\n', '        TokenSale ts = TokenSale(tokenSales[_indexTokenSale]);\n', '\n', '        if (ts.canFinalize()) {\n', '            ts.finalize();\n', '            uint256 carryoverAmount = 0;\n', '            if (ts.carryover() &&\n', '                ts.tokensCap() > ts.tokensMinted() &&\n', '                _indexTokenSale.add(1) < tokenSales.length) {\n', '                carryoverAmount = ts.tokensCap().sub(ts.tokensMinted());\n', '            } \n', '            if(_indexTokenSale.add(1) < tokenSales.length) {\n', '                TokenSale(tokenSales[_indexTokenSale.add(1)]).initialize(carryoverAmount);\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    /// @dev Finalize the manager. Can be done if all token sales are already finalized.\n', '    /// @dev It makes the DaicoPool open the TAP.\n', '    function finalizeTokenSaleManager () external{\n', '        require(isStarted && !isFinalized);\n', '        for (uint256 i = 0; i < tokenSales.length; i++ ) {\n', '            require(FinalizableCrowdsale(tokenSales[i]).isFinalized());\n', '        }\n', '        require(TokenController(tokenControllerAddr).closeTokensale());\n', '        isFinalized = true;\n', '        PoolAndSaleInterface(poolAddr).startProject();\n', '    }\n', '}\n', '\n', 'contract WhitelistedCrowdsale is Crowdsale, Ownable {\n', '\n', '  mapping(address => bool) public whitelist;\n', '\n', '  /**\n', '   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n', '   */\n', '  modifier isWhitelisted(address _beneficiary) {\n', '    require(whitelist[_beneficiary]);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds single address to whitelist.\n', '   * @param _beneficiary Address to be added to the whitelist\n', '   */\n', '  function addToWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n', '   * @param _beneficiaries Addresses to be added to the whitelist\n', '   */\n', '  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n', '    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n', '      whitelist[_beneficiaries[i]] = true;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Removes single address from whitelist.\n', '   * @param _beneficiary Address to be removed to the whitelist\n', '   */\n', '  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n', '    whitelist[_beneficiary] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract TokenSale is FinalizableCrowdsale,\n', '                      WhitelistedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    address public managerAddr; \n', '    address public poolAddr;\n', '    bool public isInitialized = false;\n', '    uint256 public timeLockRate;\n', '    uint256 public timeLockEnd;\n', '    uint256 public tokensMinted = 0;\n', '    uint256 public tokensCap;\n', '    uint256 public minAcceptableWei;\n', '    bool public carryover;\n', '\n', '    modifier onlyManager{\n', '        require(msg.sender == managerAddr);\n', '        _;\n', '    }\n', '\n', '    /// @dev Constructor.\n', '    /// @param _rate Number of tokens issued with 1 ETH. [minimal unit of the token / ETH]\n', '    /// @param _token The contract address of a ERC20 token.\n', '    /// @param _poolAddr The contract address of DaicoPool.\n', '    /// @param _openingTime A timestamp of the date this sale will start.\n', '    /// @param _closingTime A timestamp of the date this sale will end.\n', '    /// @param _tokensCap Number of tokens to be sold. Can be 0 if it accepts carryover.\n', '    /// @param _timeLockRate Specified rate of issued tokens will be locked. ex. 50 = 50%\n', '    /// @param _timeLockEnd A timestamp of the date locked tokens will be released.\n', '    /// @param _carryover If true, unsold tokens will be carryovered to next sale. \n', '    /// @param _minAcceptableWei Minimum contribution.\n', '    /// @return \n', '    constructor (\n', '        uint256 _rate, /* The unit of rate is [nano tokens / ETH] in this contract */\n', '        ERC20Interface _token,\n', '        address _poolAddr,\n', '        uint256 _openingTime,\n', '        uint256 _closingTime,\n', '        uint256 _tokensCap,\n', '        uint256 _timeLockRate,\n', '        uint256 _timeLockEnd,\n', '        bool _carryover,\n', '        uint256 _minAcceptableWei\n', '    ) public Crowdsale(_rate, _poolAddr, _token) TimedCrowdsale(_openingTime, _closingTime) {\n', '        require(_timeLockRate >= 0 && _timeLockRate <=100);\n', '        require(_poolAddr != address(0x0));\n', '\n', '        managerAddr = msg.sender;\n', '        poolAddr = _poolAddr;\n', '        timeLockRate = _timeLockRate;\n', '        timeLockEnd = _timeLockEnd;\n', '        tokensCap = _tokensCap;\n', '        carryover = _carryover;\n', '        minAcceptableWei = _minAcceptableWei;\n', '    }\n', '\n', '    /// @dev Initialize the sale. If carryoverAmount is given, it added the tokens to be sold.\n', '    /// @param carryoverAmount Amount of tokens to be added to capTokens.\n', '    /// @return \n', '    function initialize(uint256 carryoverAmount) external onlyManager {\n', '        require(!isInitialized);\n', '        isInitialized = true;\n', '        tokensCap = tokensCap.add(carryoverAmount);\n', '    }\n', '\n', '    /// @dev Finalize the sale. It transfers all the funds it has. Can be repeated.\n', '    /// @return \n', '    function finalize() onlyOwner public {\n', '        //require(!isFinalized);\n', '        require(isInitialized);\n', '        require(canFinalize());\n', '\n', '        finalization();\n', '        emit Finalized();\n', '\n', '        isFinalized = true;\n', '    }\n', '\n', '    /// @dev Check if the sale can be finalized.\n', '    /// @return True if closing time has come or tokens are sold out.\n', '    function canFinalize() public view returns(bool) {\n', '        return (hasClosed() || (isInitialized && tokensCap <= tokensMinted));\n', '    }\n', '\n', '\n', '    /// @dev It transfers all the funds it has.\n', '    /// @return \n', '    function finalization() internal {\n', '        if(address(this).balance > 0){\n', '            poolAddr.transfer(address(this).balance);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides delivery by minting tokens upon purchase.\n', '     * @param _beneficiary Token purchaser\n', '     * @param _tokenAmount Number of tokens to be minted\n', '     */\n', '    function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n', '        //require(tokensMinted.add(_tokenAmount) <= tokensCap);\n', '        require(tokensMinted < tokensCap);\n', '\n', '        uint256 time_locked = _tokenAmount.mul(timeLockRate).div(100); \n', '        uint256 instant = _tokenAmount.sub(time_locked);\n', '\n', '        if (instant > 0) {\n', '            require(TokenSaleManager(managerAddr).mint(_beneficiary, instant));\n', '        }\n', '        if (time_locked > 0) {\n', '            require(TokenSaleManager(managerAddr).mintTimeLocked(\n', '                _beneficiary,\n', '                time_locked,\n', '                timeLockEnd\n', '            ));\n', '        }\n', '  \n', '        tokensMinted = tokensMinted.add(_tokenAmount);\n', '    }\n', '\n', '    /// @dev Overrides _forwardFunds to do nothing. \n', '    function _forwardFunds() internal {}\n', '\n', '    /// @dev Overrides _preValidatePurchase to check minimam contribution and initialization.\n', '    /// @param _beneficiary Token purchaser\n', '    /// @param _weiAmount weiAmount to pay\n', '    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n', '        super._preValidatePurchase(_beneficiary, _weiAmount);\n', '        require(isInitialized);\n', '        require(_weiAmount >= minAcceptableWei);\n', '    }\n', '\n', '    /**\n', '     * @dev Overridden in order to change the unit of rate with [nano toekns / ETH]\n', '     * instead of original [minimal unit of the token / wei].\n', '     * @param _weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {\n', '      return _weiAmount.mul(rate).div(10**18); //The unit of rate is [nano tokens / ETH].\n', '    }\n', '\n', '}']
