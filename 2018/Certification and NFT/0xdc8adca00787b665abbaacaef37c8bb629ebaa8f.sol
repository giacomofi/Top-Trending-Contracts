['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract TopIvy {\n', '\n', '  /*** CONSTANTS ***/\n', '  string public constant NAME = "TopIvy";\n', '  uint256 public constant voteCost = 0.001 ether;\n', '  \n', '  // You can use this string to verify the indices correspond to the school order below\n', '  string public constant schoolOrdering = "BrownColumbiaCornellDartmouthHarvardPennPrincetonYale";\n', '\n', '  /*** STORAGE ***/\n', '  address public ceoAddress;\n', '  uint256[8] public voteCounts = [1,1,1,1,1,1,1,1];\n', '\n', '  // Sorted alphabetically:\n', '  // 0: Brown\n', '  // 1: Columbia\n', '  // 2: Cornell\n', '  // 3: Dartmouth\n', '  // 4: Harvard\n', '  // 5: Penn\n', '  // 6: Princeton\n', '  // 7: Yale\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function TopIvy() public {\n', '    ceoAddress = msg.sender;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @dev Transfer contract balance\n', '  /// @param _to The address to receive the payout\n', '  function payout(address _to) public onlyCEO{\n', '    _payout(_to);\n', '  }\n', '\n', '  /// @dev Buys votes for an option, each vote costs voteCost.\n', '  /// @param _id Which side gets the vote\n', '  function buyVotes(uint8 _id) public payable {\n', '      // Ensure at least one vote can be purchased\n', '      require(msg.value >= voteCost);\n', '      // Ensure vote is only for listed Ivys\n', '      require(_id >= 0 && _id <= 7);\n', '      // Calculate number of votes\n', '      uint256 votes = msg.value / voteCost;\n', '      voteCounts[_id] += votes;\n', '      // Don&#39;t bother sending remainder back because it is <0.001 eth\n', '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '    ceoAddress = _newCEO;\n', '  }\n', '  \n', '  // @dev Returns the list of vote counts\n', '  function getVotes() public view returns(uint256[8]) {\n', '      return voteCounts;\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(this.balance);\n', '    } else {\n', '      _to.transfer(this.balance);\n', '    }\n', '  }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', '\n', 'contract TopIvy {\n', '\n', '  /*** CONSTANTS ***/\n', '  string public constant NAME = "TopIvy";\n', '  uint256 public constant voteCost = 0.001 ether;\n', '  \n', '  // You can use this string to verify the indices correspond to the school order below\n', '  string public constant schoolOrdering = "BrownColumbiaCornellDartmouthHarvardPennPrincetonYale";\n', '\n', '  /*** STORAGE ***/\n', '  address public ceoAddress;\n', '  uint256[8] public voteCounts = [1,1,1,1,1,1,1,1];\n', '\n', '  // Sorted alphabetically:\n', '  // 0: Brown\n', '  // 1: Columbia\n', '  // 2: Cornell\n', '  // 3: Dartmouth\n', '  // 4: Harvard\n', '  // 5: Penn\n', '  // 6: Princeton\n', '  // 7: Yale\n', '\n', '  /*** ACCESS MODIFIERS ***/\n', '  /// @dev Access modifier for CEO-only functionality\n', '  modifier onlyCEO() {\n', '    require(msg.sender == ceoAddress);\n', '    _;\n', '  }\n', '\n', '  /*** CONSTRUCTOR ***/\n', '  function TopIvy() public {\n', '    ceoAddress = msg.sender;\n', '  }\n', '\n', '  /*** PUBLIC FUNCTIONS ***/\n', '  /// @dev Transfer contract balance\n', '  /// @param _to The address to receive the payout\n', '  function payout(address _to) public onlyCEO{\n', '    _payout(_to);\n', '  }\n', '\n', '  /// @dev Buys votes for an option, each vote costs voteCost.\n', '  /// @param _id Which side gets the vote\n', '  function buyVotes(uint8 _id) public payable {\n', '      // Ensure at least one vote can be purchased\n', '      require(msg.value >= voteCost);\n', '      // Ensure vote is only for listed Ivys\n', '      require(_id >= 0 && _id <= 7);\n', '      // Calculate number of votes\n', '      uint256 votes = msg.value / voteCost;\n', '      voteCounts[_id] += votes;\n', "      // Don't bother sending remainder back because it is <0.001 eth\n", '  }\n', '\n', '  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\n', '  /// @param _newCEO The address of the new CEO\n', '  function setCEO(address _newCEO) public onlyCEO {\n', '    require(_newCEO != address(0));\n', '    ceoAddress = _newCEO;\n', '  }\n', '  \n', '  // @dev Returns the list of vote counts\n', '  function getVotes() public view returns(uint256[8]) {\n', '      return voteCounts;\n', '  }\n', '\n', '  /*** PRIVATE FUNCTIONS ***/\n', '  /// For paying out balance on contract\n', '  function _payout(address _to) private {\n', '    if (_to == address(0)) {\n', '      ceoAddress.transfer(this.balance);\n', '    } else {\n', '      _to.transfer(this.balance);\n', '    }\n', '  }\n', '}']
