['pragma solidity ^0.4.23;\n', '\n', '\n', '// @title SafeMath\n', '// @dev Math operations with safety checks that throw on error\n', 'library SafeMath {\n', '\n', '  // @dev Multiplies two numbers, throws on overflow.\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    require(c / a == b, "mul failed");\n', '    return c;\n', '  }\n', '\n', '  // @dev Integer division of two numbers, truncating the quotient.\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  // @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "sub fail");\n', '    return a - b;\n', '  }\n', '\n', '  // @dev Adds two numbers, throws on overflow.\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    require(c >= a, "add fail");\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '// @title ERC20 interface\n', '// @dev see https://github.com/ethereum/EIPs/issues/20\n', 'contract iERC20 {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// @title iNovaStaking\n', '// @dev The interface for cross-contract calls to the Nova Staking contract\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract iNovaStaking {\n', '\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '}\n', '\n', '\n', '\n', '// @title iNovaGame\n', '// @dev The interface for cross-contract calls to the Nova Game contract\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract iNovaGame {\n', '  function isAdminForGame(uint _game, address account) external view returns(bool);\n', '\n', '  // List of all games tracked by the Nova Game contract\n', '  uint[] public games;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// @title NovaMasterAccess\n', '// @dev NovaMasterAccess contract for controlling access to Nova Token contract functions\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract NovaMasterAccess {\n', '  using SafeMath for uint256;\n', '\n', '  event OwnershipTransferred(address previousOwner, address newOwner);\n', '  event PromotedGame(uint game, bool isPromoted, string json);\n', '  event SuppressedGame(uint game, bool isSuppressed);\n', '\n', '  // Reference to the address of the Nova Token ERC20 contract\n', '  iERC20 public nvtContract;\n', '\n', '  // Reference to the address of the Nova Game contract\n', '  iNovaGame public gameContract;\n', '\n', '  // The Owner can perform all admin tasks.\n', '  address public owner;\n', '\n', '  // The Recovery account can change the Owner account.\n', '  address public recoveryAddress;\n', '\n', '\n', '  // @dev The original `owner` of the contract is the contract creator.\n', '  constructor() \n', '    internal \n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  // @dev Access control modifier to limit access to the Owner account\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // @dev Access control modifier to limit access to the Recovery account\n', '  modifier onlyRecovery() {\n', '    require(msg.sender == recoveryAddress);\n', '    _;\n', '  }\n', '\n', '  // @dev Assigns a new address to act as the Owner.\n', '  // @notice Can only be called by the recovery account\n', '  // @param _newOwner The address of the new Owner\n', '  function setOwner(address _newOwner) \n', '    external \n', '    onlyRecovery \n', '  {\n', '    require(_newOwner != address(0));\n', '    require(_newOwner != recoveryAddress);\n', '\n', '    owner = _newOwner;\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '  }\n', '\n', '  // @dev Assigns a new address to act as the Recovery address.\n', '  // @notice Can only be called by the Owner account\n', '  // @param _newRecovery The address of the new Recovery account\n', '  function setRecovery(address _newRecovery) \n', '    external \n', '    onlyOwner \n', '  {\n', '    require(_newRecovery != address(0));\n', '    require(_newRecovery != owner);\n', '\n', '    recoveryAddress = _newRecovery;\n', '  }\n', '\n', '  // @dev Adds or removes a game from the list of promoted games\n', '  // @param _game - the game to be promoted\n', '  // @param _isPromoted - true for promoted, false for not\n', '  // @param _json - A json string to be used to display promotional information\n', '  function setPromotedGame(uint _game, bool _isPromoted, string _json)\n', '    external\n', '    onlyOwner\n', '  {\n', '    uint gameId = gameContract.games(_game);\n', '    require(gameId == _game, "gameIds must match");\n', '    emit PromotedGame(_game, _isPromoted, _isPromoted ? _json : "");\n', '  }\n', '\n', '  // @dev Adds or removes a game from the list of suppressed games.\n', '  //   Suppressed games won&#39;t show up on the site, but can still be interacted with\n', '  //   by users.\n', '  // @param _game - the game to be promoted\n', '  // @param _isSuppressed - true for suppressed, false for not\n', '  function setSuppressedGame(uint _game, bool _isSuppressed)\n', '    external\n', '    onlyOwner\n', '  {\n', '    uint gameId = gameContract.games(_game);\n', '    require(gameId == _game, "gameIds must match");\n', '    emit SuppressedGame(_game, _isSuppressed);\n', '  }\n', '}\n', '\n', '\n', '\n', '// @title ERC20 Sidechain manager imlpementation\n', '// @dev Utility contract that manages Ethereum and ERC-20 tokens transferred in from the main chain\n', '// @dev Can manage any number of tokens\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract NovaStakingBase is NovaMasterAccess, iNovaStaking {\n', '  using SafeMath for uint256;\n', '\n', '  uint public constant WEEK_ZERO_START = 1538352000; // 10/1/2018 @ 00:00:00\n', '  uint public constant SECONDS_PER_WEEK = 604800;\n', '\n', '  // The Nova Token balances of all games and users on the system\n', '  mapping(address => uint) public balances;\n', '  \n', '  // The number of Nova Tokens stored as income each week\n', '  mapping(uint => uint) public storedNVTbyWeek;\n', '\n', '  // @dev Access control modifier to limit access to game admin accounts\n', '  modifier onlyGameAdmin(uint _game) {\n', '    require(gameContract.isAdminForGame(_game, msg.sender));\n', '    _;\n', '  }\n', '\n', '  // @dev Used on deployment to link the Staking and Game contracts.\n', '  // @param _gameContract - the address of a valid GameContract instance\n', '  function linkContracts(address _gameContract)\n', '    external\n', '    onlyOwner\n', '  {\n', '    gameContract = iNovaGame(_gameContract);\n', '  }\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Balance(address account, uint256 value);\n', '  event StoredNVT(uint week, uint stored);\n', '\n', '  // @dev Gets the balance of the specified address.\n', '  // @param _owner The address to query the the balance of.\n', '  // @returns An uint256 representing the amount owned by the passed address.\n', '  function balanceOf(address _owner) \n', '    public\n', '    view\n', '  returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  // Internal transfer of ERC20 tokens to complete payment of an auction.\n', '  // @param _from The address which you want to send tokens from\n', '  // @param _to The address which you want to transfer to\n', '  // @param _value The amout of tokens to be transferred\n', '  function _transfer(address _from, address _to, uint _value) \n', '    internal\n', '  {\n', '    require(_from != _to, "can&#39;t transfer to yourself");\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    emit Balance(_from, balances[_from]);\n', '    emit Balance(_to, balances[_to]);\n', '  }\n', '\n', '  // @dev Gets the current week, as calculated by this smart contract\n', '  // @returns uint - the current week\n', '  function getCurrentWeek()\n', '    external\n', '    view\n', '  returns(uint) {\n', '    return _getCurrentWeek();\n', '  }\n', '\n', '  // @dev Internal function to calculate the current week\n', '  // @returns uint - the current week\n', '  function _getCurrentWeek()\n', '    internal\n', '    view\n', '  returns(uint) {\n', '    return (now - WEEK_ZERO_START) / SECONDS_PER_WEEK;\n', '  }\n', '}\n', '\n', '\n', '// @title Nova Stake Management\n', '// @dev NovaStakeManagement contract for managing stakes and game balances\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract NovaStakeManagement is NovaStakingBase {\n', '\n', '  // Emitted whenever a user or game takes a payout from the system\n', '  event Payout(address indexed staker, uint amount, uint endWeek);\n', '\n', '  // Emitted whenever a user&#39;s stake is increased or decreased.\n', '  event ChangeStake(uint week, uint indexed game, address indexed staker, uint prevStake, uint newStake,\n', '    uint accountStake, uint gameStake, uint totalStake);\n', '\n', '  // @dev Tracks current stake levels for all accounts and games.\n', '  //   Tracks separately for accounts by game, accounts, games, and the total stake on the system\n', '  // Mapping(Game => Mapping(Account => Stake))\n', '  mapping(uint => mapping(address => uint)) public gameAccountStaked;\n', '  // Mapping(Account => Stake)\n', '  mapping(address => uint) public accountStaked;\n', '  // Mapping(Game => Stake)\n', '  mapping(uint => uint) public gameStaked;\n', '  // Stake\n', '  uint public totalStaked;\n', '\n', '  // @dev Tracks stakes by week for accounts and games. Each is updated when a user changes their stake.\n', '  //   These can be zero if they haven&#39;t been updated during the current week, so "zero"\n', '  //     just means "look at the week before", as no stakes have been changed.\n', '  //   When setting a stake to zero, the system records a "1". This is safe, because it&#39;s stored\n', '  //     with 18 significant digits, and the calculation \n', '  // Mapping(Week => Mapping(Game => Mapping(Account => Stake)))\n', '  mapping(uint => mapping(uint => mapping(address => uint))) public weekGameAccountStakes;\n', '  // Mapping(Week => Mapping(Account => Stake))\n', '  mapping(uint => mapping(address => uint)) public weekAccountStakes;\n', '  // Mapping(Week => Mapping(Game => Stake))\n', '  mapping(uint => mapping(uint => uint)) public weekGameStakes;\n', '  // Mapping(Week => Stake)\n', '  mapping(uint => uint) public weekTotalStakes;\n', '\n', '  // The last week that an account took a payout. Used for calculating the remaining payout for the account\n', '  mapping(address => uint) public lastPayoutWeekByAccount;\n', '  // The last week that a game took a payout. Used for calculating the remaining payout for the game\n', '  mapping(uint => uint) public lastPayoutWeekByGame;\n', '\n', '  // Tracks the amount of income the system has taken in.\n', '  // All income is paid out to games (50%) and stakers (50%)\n', '  mapping(uint => uint) public weeklyIncome;\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    weekTotalStakes[_getCurrentWeek() - 1] = 1;\n', '  }\n', '\n', '\n', '  // @dev Sets the sender&#39;s stake on a game to an amount.\n', '  // @param _game - the game to increase or decrease the sender&#39;s stake on\n', '  // @param _newStake - The new stake value. Can be an increase or decrease,\n', '  //   but must be different than their current stake, and lower than their staking balance.\n', '  function setStake(uint _game, uint _newStake)\n', '    public\n', '  {\n', '    uint currentStake = gameAccountStaked[_game][msg.sender];\n', '    if (currentStake < _newStake) {\n', '      increaseStake(_game, _newStake - currentStake);\n', '    } else \n', '    if (currentStake > _newStake) {\n', '      decreaseStake(_game, currentStake - _newStake);\n', '\n', '    }\n', '  }\n', '\n', '  // @dev Increases the sender&#39;s stake on a game by an amount.\n', '  // @param _game - the game to increase the sender&#39;s stake on\n', '  // @param _increase - The increase must be non-zero, and less than \n', '  //   or equal to the user&#39;s available staking balance\n', '  function increaseStake(uint _game, uint _increase)\n', '    public\n', '  returns(uint newStake) {\n', '    require(_increase > 0, "Must be a non-zero change");\n', '    // Take the payment\n', '    uint newBalance = balances[msg.sender].sub(_increase);\n', '    balances[msg.sender] = newBalance;\n', '    emit Balance(msg.sender, newBalance);\n', '\n', '    uint prevStake = gameAccountStaked[_game][msg.sender];\n', '    newStake = prevStake.add(_increase);\n', '    uint gameStake = gameStaked[_game].add(_increase);\n', '    uint accountStake = accountStaked[msg.sender].add(_increase);\n', '    uint totalStake = totalStaked.add(_increase);\n', '\n', '    _storeStakes(_game, msg.sender, prevStake, newStake, gameStake, accountStake, totalStake);\n', '  }\n', '\n', '  // @dev Decreases the sender&#39;s stake on a game by an amount.\n', '  // @param _game - the game to decrease the sender&#39;s stake on\n', '  // @param _decrease - The decrease must be non-zero, and less than or equal to the user&#39;s stake on the game\n', '  function decreaseStake(uint _game, uint _decrease)\n', '    public\n', '  returns(uint newStake) {\n', '    require(_decrease > 0, "Must be a non-zero change");\n', '    uint newBalance = balances[msg.sender].add(_decrease);\n', '    balances[msg.sender] = newBalance;\n', '    emit Balance(msg.sender, newBalance);\n', '\n', '    uint prevStake = gameAccountStaked[_game][msg.sender];\n', '    newStake = prevStake.sub(_decrease);\n', '    uint gameStake = gameStaked[_game].sub(_decrease);\n', '    uint accountStake = accountStaked[msg.sender].sub(_decrease);\n', '    uint totalStake = totalStaked.sub(_decrease);\n', '\n', '    _storeStakes(_game, msg.sender, prevStake, newStake, gameStake, accountStake, totalStake);\n', '  }\n', '\n', '  // @dev Lets a  staker collect the current payout for all their stakes.\n', '  // @param _numberOfWeeks - the number of weeks to collect. Set to 0 to collect all weeks.\n', '  // @returns _payout - the total payout over all the collected weeks\n', '  function collectPayout(uint _numberOfWeeks) \n', '    public\n', '  returns(uint _payout) {\n', '    uint startWeek = lastPayoutWeekByAccount[msg.sender];\n', '    require(startWeek > 0, "must be a valid start week");\n', '    uint endWeek = _getEndWeek(startWeek, _numberOfWeeks);\n', '    require(startWeek < endWeek, "must be at least one week to pay out");\n', '    \n', '    uint lastWeekStake;\n', '    for (uint i = startWeek; i < endWeek; i++) {\n', '      // Get the stake for the week. Use the last week&#39;s stake if the stake hasn&#39;t changed\n', '      uint weeklyStake = weekAccountStakes[i][msg.sender] == 0 \n', '          ? lastWeekStake \n', '          : weekAccountStakes[i][msg.sender];\n', '      lastWeekStake = weeklyStake;\n', '\n', '      uint weekStake = _getWeekTotalStake(i);\n', '      uint storedNVT = storedNVTbyWeek[i];\n', '      uint weeklyPayout = storedNVT > 1 && weeklyStake > 1 && weekStake > 1 \n', '        ? weeklyStake.mul(storedNVT) / weekStake / 2\n', '        : 0;\n', '      _payout = _payout.add(weeklyPayout);\n', '\n', '    }\n', '    // If the weekly stake for the end week is not set, set it to the\n', '    //   last week&#39;s stake, to ensure we know what to pay out.\n', '    // This works even if the end week is the current week; the value\n', '    //   will be overwritten if necessary by future stake changes\n', '    if(weekAccountStakes[endWeek][msg.sender] == 0) {\n', '      weekAccountStakes[endWeek][msg.sender] = lastWeekStake;\n', '    }\n', '    // Always update the last payout week\n', '    lastPayoutWeekByAccount[msg.sender] = endWeek;\n', '\n', '    _transfer(address(this), msg.sender, _payout);\n', '    emit Payout(msg.sender, _payout, endWeek);\n', '  }\n', '\n', '  // @dev Lets a game admin collect the current payout for their game.\n', '  // @param _game - the game to collect\n', '  // @param _numberOfWeeks - the number of weeks to collect. Set to 0 to collect all weeks.\n', '  // @returns _payout - the total payout over all the collected weeks\n', '  function collectGamePayout(uint _game, uint _numberOfWeeks)\n', '    external\n', '    onlyGameAdmin(_game)\n', '  returns(uint _payout) {\n', '    uint week = lastPayoutWeekByGame[_game];\n', '    require(week > 0, "must be a valid start week");\n', '    uint endWeek = _getEndWeek(week, _numberOfWeeks);\n', '    require(week < endWeek, "must be at least one week to pay out");\n', '\n', '    uint lastWeekStake;\n', '    for (week; week < endWeek; week++) {\n', '      // Get the stake for the week. Use the last week&#39;s stake if the stake hasn&#39;t changed\n', '      uint weeklyStake = weekGameStakes[week][_game] == 0 \n', '          ? lastWeekStake \n', '          : weekGameStakes[week][_game];\n', '      lastWeekStake = weeklyStake;\n', '\n', '      uint weekStake = _getWeekTotalStake(week);\n', '      uint storedNVT = storedNVTbyWeek[week];\n', '      uint weeklyPayout = storedNVT > 1 && weeklyStake > 1 && weekStake > 1 \n', '        ? weeklyStake.mul(storedNVT) / weekStake / 2\n', '        : 0;\n', '      _payout = _payout.add(weeklyPayout);\n', '    }\n', '    // If the weekly stake for the end week is not set, set it to \n', '    //   the last week&#39;s stake, to ensure we know what to pay out\n', '    //   This works even if the end week is the current week; the value\n', '    //   will be overwritten if necessary by future stake changes\n', '    if(weekGameStakes[endWeek][_game] == 0) {\n', '      weekGameStakes[endWeek][_game] = lastWeekStake;\n', '    }\n', '    // Always update the last payout week\n', '    lastPayoutWeekByGame[_game] = endWeek;\n', '\n', '    _transfer(address(this), address(_game), _payout);\n', '    emit Payout(address(_game), _payout, endWeek);\n', '  }\n', '\n', '  // @dev Internal function to calculate the game, account, and total stakes on a stake change\n', '  // @param _game - the game to be staked on\n', '  // @param _staker - the account doing the staking\n', '  // @param _prevStake - the previous stake of the staker on that game\n', '  // @param _newStake - the newly updated stake of the staker on that game\n', '  // @param _gameStake - the new total stake for the game\n', '  // @param _accountStake - the new total stake for the staker&#39;s account\n', '  // @param _totalStake - the new total stake for the system as a whole\n', '  function _storeStakes(uint _game, address _staker, uint _prevStake, uint _newStake,\n', '    uint _gameStake, uint _accountStake, uint _totalStake)\n', '    internal\n', '  {\n', '    uint _currentWeek = _getCurrentWeek();\n', '\n', '    gameAccountStaked[_game][msg.sender] = _newStake;\n', '    gameStaked[_game] = _gameStake;\n', '    accountStaked[msg.sender] = _accountStake;\n', '    totalStaked = _totalStake;\n', '    \n', '    // Each of these stores the weekly stake as "1" if it&#39;s been set to 0.\n', '    // This tracks the difference between "not set this week" and "set to zero this week"\n', '    weekGameAccountStakes[_currentWeek][_game][_staker] = _newStake > 0 ? _newStake : 1;\n', '    weekAccountStakes[_currentWeek][_staker] = _accountStake > 0 ? _accountStake : 1;\n', '    weekGameStakes[_currentWeek][_game] = _gameStake > 0 ? _gameStake : 1;\n', '    weekTotalStakes[_currentWeek] = _totalStake > 0 ? _totalStake : 1;\n', '\n', '    // Get the last payout week; set it to this week if there hasn&#39;t been a week.\n', '    // This lets the user iterate payouts correctly.\n', '    if(lastPayoutWeekByAccount[_staker] == 0) {\n', '      lastPayoutWeekByAccount[_staker] = _currentWeek - 1;\n', '      if (lastPayoutWeekByGame[_game] == 0) {\n', '        lastPayoutWeekByGame[_game] = _currentWeek - 1;\n', '      }\n', '    }\n', '\n', '    emit ChangeStake(_currentWeek, _game, _staker, _prevStake, _newStake, \n', '      _accountStake, _gameStake, _totalStake);\n', '  }\n', '\n', '  // @dev Internal function to get the total stake for a given week\n', '  // @notice This updates the stored values for intervening weeks, \n', '  //   as that&#39;s more efficient at 100 or more users\n', '  // @param _week - the week in which to calculate the total stake\n', '  // @returns _stake - the total stake in that week\n', '  function _getWeekTotalStake(uint _week)\n', '    internal\n', '  returns(uint _stake) {\n', '    _stake = weekTotalStakes[_week];\n', '    if(_stake == 0) {\n', '      uint backWeek = _week;\n', '      while(_stake == 0) {\n', '        backWeek--;\n', '        _stake = weekTotalStakes[backWeek];\n', '      }\n', '      weekTotalStakes[_week] = _stake;\n', '    }\n', '  }\n', '\n', '  // @dev Internal function to get the end week based on start, number of weeks, and current week\n', '  // @param _startWeek - the start of the range\n', '  // @param _numberOfWeeks - the length of the range\n', '  // @returns endWeek - either the current week, or the end of the range\n', '  // @notice This throws if it tries to get a week range longer than the current week\n', '  function _getEndWeek(uint _startWeek, uint _numberOfWeeks)\n', '    internal\n', '    view\n', '  returns(uint endWeek) {\n', '    uint _currentWeek = _getCurrentWeek();\n', '    require(_startWeek < _currentWeek, "must get at least one week");\n', '    endWeek = _numberOfWeeks == 0 ? _currentWeek : _startWeek + _numberOfWeeks;\n', '    require(endWeek <= _currentWeek, "can&#39;t get more than the current week");\n', '  }\n', '}\n', '\n', '\n', '\n', '// @title NovaToken ERC20 contract\n', '// @dev ERC20 management contract, designed to make using ERC-20 tokens easier\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract NovaStaking is NovaStakeManagement {\n', '\n', '  event Deposit(address account, uint256 amount, uint256 balance);\n', '  event Withdrawal(address account, uint256 amount, uint256 balance);\n', '\n', '  // @dev Constructor creates a reference to the NFT ownership contract\n', '  //  and verifies the manager cut is in the valid range.\n', '  // @param _nvtContract - address of the mainnet NovaToken contract\n', '  constructor(iERC20 _nvtContract)\n', '    public\n', '  {\n', '    nvtContract = _nvtContract;\n', '  }\n', '\n', '  // @dev Allows a user to deposit NVT through approveAndCall.\n', '  // @notice Other methods of sending NVT to this contract will still work, but will result in you losing your NVT.\n', '  // @param _sender is the original sender of the message\n', '  // @param _amount is the amount of NVT that was approved\n', '  // @param _contract is the contract that sent the approval; we check to be sure it&#39;s the NVT contract\n', '  // @param _data is the data that is passed in along with the call. It&#39;s not used here\n', '  function receiveApproval(address _sender, uint _amount, address _contract, bytes _data)\n', '    public\n', '  {\n', '    require(_data.length == 0, "you must pass no data");\n', '    require(_contract == address(nvtContract), "sending from a non-NVT contract is not allowed");\n', '\n', '    // Track the transferred NVT\n', '    uint newBalance = balances[_sender].add(_amount);\n', '    balances[_sender] = newBalance;\n', '\n', '    emit Balance(_sender, newBalance);\n', '    emit Deposit(_sender, _amount, newBalance);\n', '\n', '    // Transfer the NVT to this\n', '    require(nvtContract.transferFrom(_sender, address(this), _amount), "must successfully transfer");\n', '  }\n', '\n', '  function receiveNVT(uint _amount, uint _week) \n', '    external\n', '  {\n', '    require(_week >= _getCurrentWeek(), "Current Week must be equal or greater");\n', '    uint totalDonation = weeklyIncome[_week].add(_amount);\n', '    weeklyIncome[_week] = totalDonation;\n', '\n', '    uint stored = storedNVTbyWeek[_week].add(_amount);\n', '    storedNVTbyWeek[_week] = stored;\n', '    emit StoredNVT(_week, stored);\n', '    // transfer the donation\n', '    _transfer(msg.sender, address(this), _amount);\n', '  }\n', '\n', '  // @dev Allows a user to withdraw some or all of their NVT stored in this contract\n', '  // @param _sender is the original sender of the message\n', '  // @param _amount is the amount of NVT to be withdrawn. Withdraw(0) will withdraw all.\n', '  // @returns true if successful, false if unsuccessful, but will most throw on most failures\n', '  function withdraw(uint amount)\n', '    external\n', '  {\n', '    uint withdrawalAmount = amount > 0 ? amount : balances[msg.sender];\n', '    require(withdrawalAmount > 0, "Can&#39;t withdraw - zero balance");\n', '    uint newBalance = balances[msg.sender].sub(withdrawalAmount);\n', '    balances[msg.sender] = newBalance;\n', '    emit Withdrawal(msg.sender, withdrawalAmount, newBalance);\n', '    emit Balance(msg.sender, newBalance);\n', '    nvtContract.transfer(msg.sender, withdrawalAmount);\n', '  }\n', '\n', '  // @dev Add more ERC-20 tokens to a game. Can be used to fund games with Nova Tokens for card creation\n', '  // @param _game - the # of the game to add tokens to\n', '  // @param _tokensToToAdd - the number of Nova Tokens to transfer from the calling account\n', '  function addNVTtoGame(uint _game, uint _tokensToToAdd)\n', '    external\n', '    onlyGameAdmin(_game)\n', '  {\n', '    // Take the funding, and apply it to the GAME&#39;s address (a fake ETH address...)\n', '    _transfer(msg.sender, address(_game), _tokensToToAdd);\n', '  }\n', '\n', '  // @dev Withdraw earned (or funded) Nova Tokens from a game.\n', '  // @param _game - the # of the game to add tokens to\n', '  // @param _tokensToWithdraw - the number of NVT to transfer from the game to the calling account\n', '  function withdrawNVTfromGame(uint _game, uint _tokensToWithdraw)\n', '    external\n', '    onlyGameAdmin(_game)\n', '  {\n', '    // Take the NVT funds from the game, and apply them to the game admin&#39;s address\n', '    _transfer(address(_game), msg.sender, _tokensToWithdraw);\n', '  }\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '\n', '// @title SafeMath\n', '// @dev Math operations with safety checks that throw on error\n', 'library SafeMath {\n', '\n', '  // @dev Multiplies two numbers, throws on overflow.\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    require(c / a == b, "mul failed");\n', '    return c;\n', '  }\n', '\n', '  // @dev Integer division of two numbers, truncating the quotient.\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  // @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "sub fail");\n', '    return a - b;\n', '  }\n', '\n', '  // @dev Adds two numbers, throws on overflow.\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    require(c >= a, "add fail");\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '// @title ERC20 interface\n', '// @dev see https://github.com/ethereum/EIPs/issues/20\n', 'contract iERC20 {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '  event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// @title iNovaStaking\n', '// @dev The interface for cross-contract calls to the Nova Staking contract\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract iNovaStaking {\n', '\n', '  function balanceOf(address _owner) public view returns (uint256);\n', '}\n', '\n', '\n', '\n', '// @title iNovaGame\n', '// @dev The interface for cross-contract calls to the Nova Game contract\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract iNovaGame {\n', '  function isAdminForGame(uint _game, address account) external view returns(bool);\n', '\n', '  // List of all games tracked by the Nova Game contract\n', '  uint[] public games;\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// @title NovaMasterAccess\n', '// @dev NovaMasterAccess contract for controlling access to Nova Token contract functions\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract NovaMasterAccess {\n', '  using SafeMath for uint256;\n', '\n', '  event OwnershipTransferred(address previousOwner, address newOwner);\n', '  event PromotedGame(uint game, bool isPromoted, string json);\n', '  event SuppressedGame(uint game, bool isSuppressed);\n', '\n', '  // Reference to the address of the Nova Token ERC20 contract\n', '  iERC20 public nvtContract;\n', '\n', '  // Reference to the address of the Nova Game contract\n', '  iNovaGame public gameContract;\n', '\n', '  // The Owner can perform all admin tasks.\n', '  address public owner;\n', '\n', '  // The Recovery account can change the Owner account.\n', '  address public recoveryAddress;\n', '\n', '\n', '  // @dev The original `owner` of the contract is the contract creator.\n', '  constructor() \n', '    internal \n', '  {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  // @dev Access control modifier to limit access to the Owner account\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  // @dev Access control modifier to limit access to the Recovery account\n', '  modifier onlyRecovery() {\n', '    require(msg.sender == recoveryAddress);\n', '    _;\n', '  }\n', '\n', '  // @dev Assigns a new address to act as the Owner.\n', '  // @notice Can only be called by the recovery account\n', '  // @param _newOwner The address of the new Owner\n', '  function setOwner(address _newOwner) \n', '    external \n', '    onlyRecovery \n', '  {\n', '    require(_newOwner != address(0));\n', '    require(_newOwner != recoveryAddress);\n', '\n', '    owner = _newOwner;\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '  }\n', '\n', '  // @dev Assigns a new address to act as the Recovery address.\n', '  // @notice Can only be called by the Owner account\n', '  // @param _newRecovery The address of the new Recovery account\n', '  function setRecovery(address _newRecovery) \n', '    external \n', '    onlyOwner \n', '  {\n', '    require(_newRecovery != address(0));\n', '    require(_newRecovery != owner);\n', '\n', '    recoveryAddress = _newRecovery;\n', '  }\n', '\n', '  // @dev Adds or removes a game from the list of promoted games\n', '  // @param _game - the game to be promoted\n', '  // @param _isPromoted - true for promoted, false for not\n', '  // @param _json - A json string to be used to display promotional information\n', '  function setPromotedGame(uint _game, bool _isPromoted, string _json)\n', '    external\n', '    onlyOwner\n', '  {\n', '    uint gameId = gameContract.games(_game);\n', '    require(gameId == _game, "gameIds must match");\n', '    emit PromotedGame(_game, _isPromoted, _isPromoted ? _json : "");\n', '  }\n', '\n', '  // @dev Adds or removes a game from the list of suppressed games.\n', "  //   Suppressed games won't show up on the site, but can still be interacted with\n", '  //   by users.\n', '  // @param _game - the game to be promoted\n', '  // @param _isSuppressed - true for suppressed, false for not\n', '  function setSuppressedGame(uint _game, bool _isSuppressed)\n', '    external\n', '    onlyOwner\n', '  {\n', '    uint gameId = gameContract.games(_game);\n', '    require(gameId == _game, "gameIds must match");\n', '    emit SuppressedGame(_game, _isSuppressed);\n', '  }\n', '}\n', '\n', '\n', '\n', '// @title ERC20 Sidechain manager imlpementation\n', '// @dev Utility contract that manages Ethereum and ERC-20 tokens transferred in from the main chain\n', '// @dev Can manage any number of tokens\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract NovaStakingBase is NovaMasterAccess, iNovaStaking {\n', '  using SafeMath for uint256;\n', '\n', '  uint public constant WEEK_ZERO_START = 1538352000; // 10/1/2018 @ 00:00:00\n', '  uint public constant SECONDS_PER_WEEK = 604800;\n', '\n', '  // The Nova Token balances of all games and users on the system\n', '  mapping(address => uint) public balances;\n', '  \n', '  // The number of Nova Tokens stored as income each week\n', '  mapping(uint => uint) public storedNVTbyWeek;\n', '\n', '  // @dev Access control modifier to limit access to game admin accounts\n', '  modifier onlyGameAdmin(uint _game) {\n', '    require(gameContract.isAdminForGame(_game, msg.sender));\n', '    _;\n', '  }\n', '\n', '  // @dev Used on deployment to link the Staking and Game contracts.\n', '  // @param _gameContract - the address of a valid GameContract instance\n', '  function linkContracts(address _gameContract)\n', '    external\n', '    onlyOwner\n', '  {\n', '    gameContract = iNovaGame(_gameContract);\n', '  }\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Balance(address account, uint256 value);\n', '  event StoredNVT(uint week, uint stored);\n', '\n', '  // @dev Gets the balance of the specified address.\n', '  // @param _owner The address to query the the balance of.\n', '  // @returns An uint256 representing the amount owned by the passed address.\n', '  function balanceOf(address _owner) \n', '    public\n', '    view\n', '  returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '  // Internal transfer of ERC20 tokens to complete payment of an auction.\n', '  // @param _from The address which you want to send tokens from\n', '  // @param _to The address which you want to transfer to\n', '  // @param _value The amout of tokens to be transferred\n', '  function _transfer(address _from, address _to, uint _value) \n', '    internal\n', '  {\n', '    require(_from != _to, "can\'t transfer to yourself");\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    emit Balance(_from, balances[_from]);\n', '    emit Balance(_to, balances[_to]);\n', '  }\n', '\n', '  // @dev Gets the current week, as calculated by this smart contract\n', '  // @returns uint - the current week\n', '  function getCurrentWeek()\n', '    external\n', '    view\n', '  returns(uint) {\n', '    return _getCurrentWeek();\n', '  }\n', '\n', '  // @dev Internal function to calculate the current week\n', '  // @returns uint - the current week\n', '  function _getCurrentWeek()\n', '    internal\n', '    view\n', '  returns(uint) {\n', '    return (now - WEEK_ZERO_START) / SECONDS_PER_WEEK;\n', '  }\n', '}\n', '\n', '\n', '// @title Nova Stake Management\n', '// @dev NovaStakeManagement contract for managing stakes and game balances\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract NovaStakeManagement is NovaStakingBase {\n', '\n', '  // Emitted whenever a user or game takes a payout from the system\n', '  event Payout(address indexed staker, uint amount, uint endWeek);\n', '\n', "  // Emitted whenever a user's stake is increased or decreased.\n", '  event ChangeStake(uint week, uint indexed game, address indexed staker, uint prevStake, uint newStake,\n', '    uint accountStake, uint gameStake, uint totalStake);\n', '\n', '  // @dev Tracks current stake levels for all accounts and games.\n', '  //   Tracks separately for accounts by game, accounts, games, and the total stake on the system\n', '  // Mapping(Game => Mapping(Account => Stake))\n', '  mapping(uint => mapping(address => uint)) public gameAccountStaked;\n', '  // Mapping(Account => Stake)\n', '  mapping(address => uint) public accountStaked;\n', '  // Mapping(Game => Stake)\n', '  mapping(uint => uint) public gameStaked;\n', '  // Stake\n', '  uint public totalStaked;\n', '\n', '  // @dev Tracks stakes by week for accounts and games. Each is updated when a user changes their stake.\n', '  //   These can be zero if they haven\'t been updated during the current week, so "zero"\n', '  //     just means "look at the week before", as no stakes have been changed.\n', '  //   When setting a stake to zero, the system records a "1". This is safe, because it\'s stored\n', '  //     with 18 significant digits, and the calculation \n', '  // Mapping(Week => Mapping(Game => Mapping(Account => Stake)))\n', '  mapping(uint => mapping(uint => mapping(address => uint))) public weekGameAccountStakes;\n', '  // Mapping(Week => Mapping(Account => Stake))\n', '  mapping(uint => mapping(address => uint)) public weekAccountStakes;\n', '  // Mapping(Week => Mapping(Game => Stake))\n', '  mapping(uint => mapping(uint => uint)) public weekGameStakes;\n', '  // Mapping(Week => Stake)\n', '  mapping(uint => uint) public weekTotalStakes;\n', '\n', '  // The last week that an account took a payout. Used for calculating the remaining payout for the account\n', '  mapping(address => uint) public lastPayoutWeekByAccount;\n', '  // The last week that a game took a payout. Used for calculating the remaining payout for the game\n', '  mapping(uint => uint) public lastPayoutWeekByGame;\n', '\n', '  // Tracks the amount of income the system has taken in.\n', '  // All income is paid out to games (50%) and stakers (50%)\n', '  mapping(uint => uint) public weeklyIncome;\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    weekTotalStakes[_getCurrentWeek() - 1] = 1;\n', '  }\n', '\n', '\n', "  // @dev Sets the sender's stake on a game to an amount.\n", "  // @param _game - the game to increase or decrease the sender's stake on\n", '  // @param _newStake - The new stake value. Can be an increase or decrease,\n', '  //   but must be different than their current stake, and lower than their staking balance.\n', '  function setStake(uint _game, uint _newStake)\n', '    public\n', '  {\n', '    uint currentStake = gameAccountStaked[_game][msg.sender];\n', '    if (currentStake < _newStake) {\n', '      increaseStake(_game, _newStake - currentStake);\n', '    } else \n', '    if (currentStake > _newStake) {\n', '      decreaseStake(_game, currentStake - _newStake);\n', '\n', '    }\n', '  }\n', '\n', "  // @dev Increases the sender's stake on a game by an amount.\n", "  // @param _game - the game to increase the sender's stake on\n", '  // @param _increase - The increase must be non-zero, and less than \n', "  //   or equal to the user's available staking balance\n", '  function increaseStake(uint _game, uint _increase)\n', '    public\n', '  returns(uint newStake) {\n', '    require(_increase > 0, "Must be a non-zero change");\n', '    // Take the payment\n', '    uint newBalance = balances[msg.sender].sub(_increase);\n', '    balances[msg.sender] = newBalance;\n', '    emit Balance(msg.sender, newBalance);\n', '\n', '    uint prevStake = gameAccountStaked[_game][msg.sender];\n', '    newStake = prevStake.add(_increase);\n', '    uint gameStake = gameStaked[_game].add(_increase);\n', '    uint accountStake = accountStaked[msg.sender].add(_increase);\n', '    uint totalStake = totalStaked.add(_increase);\n', '\n', '    _storeStakes(_game, msg.sender, prevStake, newStake, gameStake, accountStake, totalStake);\n', '  }\n', '\n', "  // @dev Decreases the sender's stake on a game by an amount.\n", "  // @param _game - the game to decrease the sender's stake on\n", "  // @param _decrease - The decrease must be non-zero, and less than or equal to the user's stake on the game\n", '  function decreaseStake(uint _game, uint _decrease)\n', '    public\n', '  returns(uint newStake) {\n', '    require(_decrease > 0, "Must be a non-zero change");\n', '    uint newBalance = balances[msg.sender].add(_decrease);\n', '    balances[msg.sender] = newBalance;\n', '    emit Balance(msg.sender, newBalance);\n', '\n', '    uint prevStake = gameAccountStaked[_game][msg.sender];\n', '    newStake = prevStake.sub(_decrease);\n', '    uint gameStake = gameStaked[_game].sub(_decrease);\n', '    uint accountStake = accountStaked[msg.sender].sub(_decrease);\n', '    uint totalStake = totalStaked.sub(_decrease);\n', '\n', '    _storeStakes(_game, msg.sender, prevStake, newStake, gameStake, accountStake, totalStake);\n', '  }\n', '\n', '  // @dev Lets a  staker collect the current payout for all their stakes.\n', '  // @param _numberOfWeeks - the number of weeks to collect. Set to 0 to collect all weeks.\n', '  // @returns _payout - the total payout over all the collected weeks\n', '  function collectPayout(uint _numberOfWeeks) \n', '    public\n', '  returns(uint _payout) {\n', '    uint startWeek = lastPayoutWeekByAccount[msg.sender];\n', '    require(startWeek > 0, "must be a valid start week");\n', '    uint endWeek = _getEndWeek(startWeek, _numberOfWeeks);\n', '    require(startWeek < endWeek, "must be at least one week to pay out");\n', '    \n', '    uint lastWeekStake;\n', '    for (uint i = startWeek; i < endWeek; i++) {\n', "      // Get the stake for the week. Use the last week's stake if the stake hasn't changed\n", '      uint weeklyStake = weekAccountStakes[i][msg.sender] == 0 \n', '          ? lastWeekStake \n', '          : weekAccountStakes[i][msg.sender];\n', '      lastWeekStake = weeklyStake;\n', '\n', '      uint weekStake = _getWeekTotalStake(i);\n', '      uint storedNVT = storedNVTbyWeek[i];\n', '      uint weeklyPayout = storedNVT > 1 && weeklyStake > 1 && weekStake > 1 \n', '        ? weeklyStake.mul(storedNVT) / weekStake / 2\n', '        : 0;\n', '      _payout = _payout.add(weeklyPayout);\n', '\n', '    }\n', '    // If the weekly stake for the end week is not set, set it to the\n', "    //   last week's stake, to ensure we know what to pay out.\n", '    // This works even if the end week is the current week; the value\n', '    //   will be overwritten if necessary by future stake changes\n', '    if(weekAccountStakes[endWeek][msg.sender] == 0) {\n', '      weekAccountStakes[endWeek][msg.sender] = lastWeekStake;\n', '    }\n', '    // Always update the last payout week\n', '    lastPayoutWeekByAccount[msg.sender] = endWeek;\n', '\n', '    _transfer(address(this), msg.sender, _payout);\n', '    emit Payout(msg.sender, _payout, endWeek);\n', '  }\n', '\n', '  // @dev Lets a game admin collect the current payout for their game.\n', '  // @param _game - the game to collect\n', '  // @param _numberOfWeeks - the number of weeks to collect. Set to 0 to collect all weeks.\n', '  // @returns _payout - the total payout over all the collected weeks\n', '  function collectGamePayout(uint _game, uint _numberOfWeeks)\n', '    external\n', '    onlyGameAdmin(_game)\n', '  returns(uint _payout) {\n', '    uint week = lastPayoutWeekByGame[_game];\n', '    require(week > 0, "must be a valid start week");\n', '    uint endWeek = _getEndWeek(week, _numberOfWeeks);\n', '    require(week < endWeek, "must be at least one week to pay out");\n', '\n', '    uint lastWeekStake;\n', '    for (week; week < endWeek; week++) {\n', "      // Get the stake for the week. Use the last week's stake if the stake hasn't changed\n", '      uint weeklyStake = weekGameStakes[week][_game] == 0 \n', '          ? lastWeekStake \n', '          : weekGameStakes[week][_game];\n', '      lastWeekStake = weeklyStake;\n', '\n', '      uint weekStake = _getWeekTotalStake(week);\n', '      uint storedNVT = storedNVTbyWeek[week];\n', '      uint weeklyPayout = storedNVT > 1 && weeklyStake > 1 && weekStake > 1 \n', '        ? weeklyStake.mul(storedNVT) / weekStake / 2\n', '        : 0;\n', '      _payout = _payout.add(weeklyPayout);\n', '    }\n', '    // If the weekly stake for the end week is not set, set it to \n', "    //   the last week's stake, to ensure we know what to pay out\n", '    //   This works even if the end week is the current week; the value\n', '    //   will be overwritten if necessary by future stake changes\n', '    if(weekGameStakes[endWeek][_game] == 0) {\n', '      weekGameStakes[endWeek][_game] = lastWeekStake;\n', '    }\n', '    // Always update the last payout week\n', '    lastPayoutWeekByGame[_game] = endWeek;\n', '\n', '    _transfer(address(this), address(_game), _payout);\n', '    emit Payout(address(_game), _payout, endWeek);\n', '  }\n', '\n', '  // @dev Internal function to calculate the game, account, and total stakes on a stake change\n', '  // @param _game - the game to be staked on\n', '  // @param _staker - the account doing the staking\n', '  // @param _prevStake - the previous stake of the staker on that game\n', '  // @param _newStake - the newly updated stake of the staker on that game\n', '  // @param _gameStake - the new total stake for the game\n', "  // @param _accountStake - the new total stake for the staker's account\n", '  // @param _totalStake - the new total stake for the system as a whole\n', '  function _storeStakes(uint _game, address _staker, uint _prevStake, uint _newStake,\n', '    uint _gameStake, uint _accountStake, uint _totalStake)\n', '    internal\n', '  {\n', '    uint _currentWeek = _getCurrentWeek();\n', '\n', '    gameAccountStaked[_game][msg.sender] = _newStake;\n', '    gameStaked[_game] = _gameStake;\n', '    accountStaked[msg.sender] = _accountStake;\n', '    totalStaked = _totalStake;\n', '    \n', '    // Each of these stores the weekly stake as "1" if it\'s been set to 0.\n', '    // This tracks the difference between "not set this week" and "set to zero this week"\n', '    weekGameAccountStakes[_currentWeek][_game][_staker] = _newStake > 0 ? _newStake : 1;\n', '    weekAccountStakes[_currentWeek][_staker] = _accountStake > 0 ? _accountStake : 1;\n', '    weekGameStakes[_currentWeek][_game] = _gameStake > 0 ? _gameStake : 1;\n', '    weekTotalStakes[_currentWeek] = _totalStake > 0 ? _totalStake : 1;\n', '\n', "    // Get the last payout week; set it to this week if there hasn't been a week.\n", '    // This lets the user iterate payouts correctly.\n', '    if(lastPayoutWeekByAccount[_staker] == 0) {\n', '      lastPayoutWeekByAccount[_staker] = _currentWeek - 1;\n', '      if (lastPayoutWeekByGame[_game] == 0) {\n', '        lastPayoutWeekByGame[_game] = _currentWeek - 1;\n', '      }\n', '    }\n', '\n', '    emit ChangeStake(_currentWeek, _game, _staker, _prevStake, _newStake, \n', '      _accountStake, _gameStake, _totalStake);\n', '  }\n', '\n', '  // @dev Internal function to get the total stake for a given week\n', '  // @notice This updates the stored values for intervening weeks, \n', "  //   as that's more efficient at 100 or more users\n", '  // @param _week - the week in which to calculate the total stake\n', '  // @returns _stake - the total stake in that week\n', '  function _getWeekTotalStake(uint _week)\n', '    internal\n', '  returns(uint _stake) {\n', '    _stake = weekTotalStakes[_week];\n', '    if(_stake == 0) {\n', '      uint backWeek = _week;\n', '      while(_stake == 0) {\n', '        backWeek--;\n', '        _stake = weekTotalStakes[backWeek];\n', '      }\n', '      weekTotalStakes[_week] = _stake;\n', '    }\n', '  }\n', '\n', '  // @dev Internal function to get the end week based on start, number of weeks, and current week\n', '  // @param _startWeek - the start of the range\n', '  // @param _numberOfWeeks - the length of the range\n', '  // @returns endWeek - either the current week, or the end of the range\n', '  // @notice This throws if it tries to get a week range longer than the current week\n', '  function _getEndWeek(uint _startWeek, uint _numberOfWeeks)\n', '    internal\n', '    view\n', '  returns(uint endWeek) {\n', '    uint _currentWeek = _getCurrentWeek();\n', '    require(_startWeek < _currentWeek, "must get at least one week");\n', '    endWeek = _numberOfWeeks == 0 ? _currentWeek : _startWeek + _numberOfWeeks;\n', '    require(endWeek <= _currentWeek, "can\'t get more than the current week");\n', '  }\n', '}\n', '\n', '\n', '\n', '// @title NovaToken ERC20 contract\n', '// @dev ERC20 management contract, designed to make using ERC-20 tokens easier\n', '// @author Dragon Foundry (https://www.nvt.gg)\n', '// (c) 2018 Dragon Foundry LLC. All Rights Reserved. This code is not open source.\n', 'contract NovaStaking is NovaStakeManagement {\n', '\n', '  event Deposit(address account, uint256 amount, uint256 balance);\n', '  event Withdrawal(address account, uint256 amount, uint256 balance);\n', '\n', '  // @dev Constructor creates a reference to the NFT ownership contract\n', '  //  and verifies the manager cut is in the valid range.\n', '  // @param _nvtContract - address of the mainnet NovaToken contract\n', '  constructor(iERC20 _nvtContract)\n', '    public\n', '  {\n', '    nvtContract = _nvtContract;\n', '  }\n', '\n', '  // @dev Allows a user to deposit NVT through approveAndCall.\n', '  // @notice Other methods of sending NVT to this contract will still work, but will result in you losing your NVT.\n', '  // @param _sender is the original sender of the message\n', '  // @param _amount is the amount of NVT that was approved\n', "  // @param _contract is the contract that sent the approval; we check to be sure it's the NVT contract\n", "  // @param _data is the data that is passed in along with the call. It's not used here\n", '  function receiveApproval(address _sender, uint _amount, address _contract, bytes _data)\n', '    public\n', '  {\n', '    require(_data.length == 0, "you must pass no data");\n', '    require(_contract == address(nvtContract), "sending from a non-NVT contract is not allowed");\n', '\n', '    // Track the transferred NVT\n', '    uint newBalance = balances[_sender].add(_amount);\n', '    balances[_sender] = newBalance;\n', '\n', '    emit Balance(_sender, newBalance);\n', '    emit Deposit(_sender, _amount, newBalance);\n', '\n', '    // Transfer the NVT to this\n', '    require(nvtContract.transferFrom(_sender, address(this), _amount), "must successfully transfer");\n', '  }\n', '\n', '  function receiveNVT(uint _amount, uint _week) \n', '    external\n', '  {\n', '    require(_week >= _getCurrentWeek(), "Current Week must be equal or greater");\n', '    uint totalDonation = weeklyIncome[_week].add(_amount);\n', '    weeklyIncome[_week] = totalDonation;\n', '\n', '    uint stored = storedNVTbyWeek[_week].add(_amount);\n', '    storedNVTbyWeek[_week] = stored;\n', '    emit StoredNVT(_week, stored);\n', '    // transfer the donation\n', '    _transfer(msg.sender, address(this), _amount);\n', '  }\n', '\n', '  // @dev Allows a user to withdraw some or all of their NVT stored in this contract\n', '  // @param _sender is the original sender of the message\n', '  // @param _amount is the amount of NVT to be withdrawn. Withdraw(0) will withdraw all.\n', '  // @returns true if successful, false if unsuccessful, but will most throw on most failures\n', '  function withdraw(uint amount)\n', '    external\n', '  {\n', '    uint withdrawalAmount = amount > 0 ? amount : balances[msg.sender];\n', '    require(withdrawalAmount > 0, "Can\'t withdraw - zero balance");\n', '    uint newBalance = balances[msg.sender].sub(withdrawalAmount);\n', '    balances[msg.sender] = newBalance;\n', '    emit Withdrawal(msg.sender, withdrawalAmount, newBalance);\n', '    emit Balance(msg.sender, newBalance);\n', '    nvtContract.transfer(msg.sender, withdrawalAmount);\n', '  }\n', '\n', '  // @dev Add more ERC-20 tokens to a game. Can be used to fund games with Nova Tokens for card creation\n', '  // @param _game - the # of the game to add tokens to\n', '  // @param _tokensToToAdd - the number of Nova Tokens to transfer from the calling account\n', '  function addNVTtoGame(uint _game, uint _tokensToToAdd)\n', '    external\n', '    onlyGameAdmin(_game)\n', '  {\n', "    // Take the funding, and apply it to the GAME's address (a fake ETH address...)\n", '    _transfer(msg.sender, address(_game), _tokensToToAdd);\n', '  }\n', '\n', '  // @dev Withdraw earned (or funded) Nova Tokens from a game.\n', '  // @param _game - the # of the game to add tokens to\n', '  // @param _tokensToWithdraw - the number of NVT to transfer from the game to the calling account\n', '  function withdrawNVTfromGame(uint _game, uint _tokensToWithdraw)\n', '    external\n', '    onlyGameAdmin(_game)\n', '  {\n', "    // Take the NVT funds from the game, and apply them to the game admin's address\n", '    _transfer(address(_game), msg.sender, _tokensToWithdraw);\n', '  }\n', '}']
