['pragma solidity ^0.4.19;\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '     * The address whcih deploys this contrcat is automatically assgined ownership.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Functions with this modifier can only be executed by the owner of the contract. \n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    /**\n', '    * Transfers ownership to new Ethereum address. This function can only be called by the \n', '    * owner.\n', '    * @param _newOwner the address to be granted ownership.\n', '    **/\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract TokenInterface {\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', '\n', '\n', 'contract Airdrop is Ownable {\n', '    \n', '    TokenInterface token;\n', '    \n', '    event NewTokenAddress(address indexed ERC20_ADDRESS);\n', '    event TokensWithdrawn(address indexed ERC20_ADDRESS, uint256 TOTAL);\n', '    event AirdropInvoked();\n', '    \n', '    /**\n', '     * Allows the owner of the contract to change the token to be airdropped\n', '     * \n', '     * @param _newTokenAddress The address of the token\n', '     * @return True if function executes, false otherwise\n', '     * */\n', '    function setTokenAddress(address _newTokenAddress) public onlyOwner returns(bool) {\n', '        require(_newTokenAddress != address(token));\n', '        require(_newTokenAddress != address(0));\n', '        token = TokenInterface(_newTokenAddress);\n', '        NewTokenAddress(_newTokenAddress);\n', '        return true;\n', '    }\n', '    \n', '\n', '    /**\n', '     * Allows the owner of the contract to airdrop tokens using multiple values \n', '     * \n', '     * @param _addrs The array of recipient addresses\n', '     * @param _values The array of values (i.e., tokens) each corresponding address \n', '     * will receive.\n', '     * @return True if function executes, false otherwise\n', '     * */\n', '    function multiValueAirDrop(address[] _addrs, uint256[] _values) public onlyOwner returns(bool) {\n', '\t    require(_addrs.length == _values.length && _addrs.length <= 100);\n', '        for (uint i = 0; i < _addrs.length; i++) {\n', '            if (_addrs[i] != 0x0 && _values[i] > 0) {\n', '                token.transfer(_addrs[i], _values[i]);  \n', '            }\n', '        }\n', '        AirdropInvoked();\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Allows the owner of the contract to airdrop tokens of a single value\n', '     * \n', '     * @param _addrs The array of recipient addresses\n', '     * @param _value The amount of tokens each address will receive\n', '     * @return True if function executes, false otherwise\n', '     * */\n', '    function singleValueAirDrop(address[] _addrs, uint256 _value) public onlyOwner returns(bool){\n', '\t    require(_addrs.length <= 100 && _value > 0);\n', '        for (uint i = 0; i < _addrs.length; i++) {\n', '            if (_addrs[i] != 0x0) {\n', '                token.transfer(_addrs[i], _value);\n', '            }\n', '        }\n', '        AirdropInvoked();\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows the owner of the contract to withdraw tokens from the contract\n', '     * \n', '     * @param _addressOfToken The address of the tokens to be withdrawn \n', '     * @return True if function executes, false otherwise\n', '     * */\n', '    function withdrawTokens(address _addressOfToken) public onlyOwner returns(bool) {\n', '        TokenInterface tkn = TokenInterface(_addressOfToken);\n', '        if(tkn.balanceOf(address(this)) == 0) {\n', '            revert();\n', '        }\n', '        TokensWithdrawn(_addressOfToken, tkn.balanceOf(address(this)));\n', '        tkn.transfer(owner, tkn.balanceOf(address(this)));\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '\n', 'contract Ownable {\n', '    \n', '    address public owner;\n', '\n', '    /**\n', '     * The address whcih deploys this contrcat is automatically assgined ownership.\n', '     * */\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * Functions with this modifier can only be executed by the owner of the contract. \n', '     * */\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event OwnershipTransferred(address indexed from, address indexed to);\n', '\n', '    /**\n', '    * Transfers ownership to new Ethereum address. This function can only be called by the \n', '    * owner.\n', '    * @param _newOwner the address to be granted ownership.\n', '    **/\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != 0x0);\n', '        OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract TokenInterface {\n', '    function balanceOf(address _who) public view returns (uint256);\n', '    function transfer(address _to, uint256 _value) public returns (bool);\n', '}\n', '\n', '\n', '\n', 'contract Airdrop is Ownable {\n', '    \n', '    TokenInterface token;\n', '    \n', '    event NewTokenAddress(address indexed ERC20_ADDRESS);\n', '    event TokensWithdrawn(address indexed ERC20_ADDRESS, uint256 TOTAL);\n', '    event AirdropInvoked();\n', '    \n', '    /**\n', '     * Allows the owner of the contract to change the token to be airdropped\n', '     * \n', '     * @param _newTokenAddress The address of the token\n', '     * @return True if function executes, false otherwise\n', '     * */\n', '    function setTokenAddress(address _newTokenAddress) public onlyOwner returns(bool) {\n', '        require(_newTokenAddress != address(token));\n', '        require(_newTokenAddress != address(0));\n', '        token = TokenInterface(_newTokenAddress);\n', '        NewTokenAddress(_newTokenAddress);\n', '        return true;\n', '    }\n', '    \n', '\n', '    /**\n', '     * Allows the owner of the contract to airdrop tokens using multiple values \n', '     * \n', '     * @param _addrs The array of recipient addresses\n', '     * @param _values The array of values (i.e., tokens) each corresponding address \n', '     * will receive.\n', '     * @return True if function executes, false otherwise\n', '     * */\n', '    function multiValueAirDrop(address[] _addrs, uint256[] _values) public onlyOwner returns(bool) {\n', '\t    require(_addrs.length == _values.length && _addrs.length <= 100);\n', '        for (uint i = 0; i < _addrs.length; i++) {\n', '            if (_addrs[i] != 0x0 && _values[i] > 0) {\n', '                token.transfer(_addrs[i], _values[i]);  \n', '            }\n', '        }\n', '        AirdropInvoked();\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * Allows the owner of the contract to airdrop tokens of a single value\n', '     * \n', '     * @param _addrs The array of recipient addresses\n', '     * @param _value The amount of tokens each address will receive\n', '     * @return True if function executes, false otherwise\n', '     * */\n', '    function singleValueAirDrop(address[] _addrs, uint256 _value) public onlyOwner returns(bool){\n', '\t    require(_addrs.length <= 100 && _value > 0);\n', '        for (uint i = 0; i < _addrs.length; i++) {\n', '            if (_addrs[i] != 0x0) {\n', '                token.transfer(_addrs[i], _value);\n', '            }\n', '        }\n', '        AirdropInvoked();\n', '        return true;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * Allows the owner of the contract to withdraw tokens from the contract\n', '     * \n', '     * @param _addressOfToken The address of the tokens to be withdrawn \n', '     * @return True if function executes, false otherwise\n', '     * */\n', '    function withdrawTokens(address _addressOfToken) public onlyOwner returns(bool) {\n', '        TokenInterface tkn = TokenInterface(_addressOfToken);\n', '        if(tkn.balanceOf(address(this)) == 0) {\n', '            revert();\n', '        }\n', '        TokensWithdrawn(_addressOfToken, tkn.balanceOf(address(this)));\n', '        tkn.transfer(owner, tkn.balanceOf(address(this)));\n', '    }\n', '}']
