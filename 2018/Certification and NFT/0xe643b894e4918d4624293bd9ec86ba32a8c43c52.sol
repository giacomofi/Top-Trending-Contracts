['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', ' \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a); \n', '    return a - b; \n', '  } \n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) { \n', '    uint256 c = a + b; assert(c >= a);\n', '    return c;\n', '  }\n', ' \n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '        OwnershipTransferred(owner, newOwner);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract FiatContract {\n', '  function USD(uint _id) constant returns (uint256);\n', '}\n', '\n', 'contract Main is Ownable {\n', '    using SafeMath for uint256;\n', '    address public wallet = 0x849861cE5c88F355A286d973302cf84A5e33fa6b; \n', '    uint256 public bonus = 50;\n', '    uint256 public price = 10;\n', '\n', '    function setBonus(uint newBonus) onlyOwner public  {\n', '        bonus = newBonus;\n', '    }\n', '\n', '    function setWallet(address _newWallet) onlyOwner public {\n', '        require(_newWallet != address(0));\n', '        wallet = _newWallet;\n', '    }\n', '\n', '    function setPrice(uint newPrice) onlyOwner public  {\n', '        price = newPrice;\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', 'contract Transaction is Main  {\n', '    uint256 USDv;\n', '    uint256 MIRAv;\n', '    FiatContract public fiat;\n', '    \n', '    ERC20 MIRAtoken = ERC20(0x8BCD8DaFc917BFe3C82313e05fc9738aeB72d555);\n', '\n', '     function Transaction() {\n', '          fiat = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591);\n', '     }\n', '   \n', '\n', '    function() external payable {\n', '        address buyer = msg.sender;\n', '        require(buyer != address(0));\n', '        require(msg.value != 0);\n', '        MIRAv = msg.value;\n', '        uint256 cent = fiat.USD(0);\n', '        uint256 dollar = cent*100;\n', '\n', '        USDv = msg.value.div(dollar); //USD\n', '        \n', '        require(USDv != 0);\n', '        \n', '        MIRAv = USDv.mul(1000).div(price);              // without bonus\n', '        MIRAv = MIRAv + MIRAv.div(100).mul(bonus);      // + bonus\n', '        MIRAv = MIRAv.mul(100000000);\n', '        \n', '        address(wallet).send(msg.value); //send eth\n', '        MIRAtoken.transfer(buyer,MIRAv); //send tokens\n', '    }\n', '\n', '    function getMIRABALANCE() public  constant returns (uint256) {  \n', '        require(msg.sender == owner);\n', '        return MIRAtoken.balanceOf(address(this)).div(100000000); \n', '        }\n', '    function getADR() public constant returns (address) {   return address(this);  }\n', '\n', '}\n', '\n', '\n', '\n', '// Please, visit https://miramind.io/risks.pdf to know more about the risks']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', ' \n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', ' \n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a); \n', '    return a - b; \n', '  } \n', '  \n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) { \n', '    uint256 c = a + b; assert(c >= a);\n', '    return c;\n', '  }\n', ' \n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '\n', '    function Ownable() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        owner = newOwner;\n', '        OwnershipTransferred(owner, newOwner);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) constant returns (uint256);\n', '  function transfer(address to, uint256 value) returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) returns (bool);\n', '  function approve(address spender, uint256 value) returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract FiatContract {\n', '  function USD(uint _id) constant returns (uint256);\n', '}\n', '\n', 'contract Main is Ownable {\n', '    using SafeMath for uint256;\n', '    address public wallet = 0x849861cE5c88F355A286d973302cf84A5e33fa6b; \n', '    uint256 public bonus = 50;\n', '    uint256 public price = 10;\n', '\n', '    function setBonus(uint newBonus) onlyOwner public  {\n', '        bonus = newBonus;\n', '    }\n', '\n', '    function setWallet(address _newWallet) onlyOwner public {\n', '        require(_newWallet != address(0));\n', '        wallet = _newWallet;\n', '    }\n', '\n', '    function setPrice(uint newPrice) onlyOwner public  {\n', '        price = newPrice;\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', 'contract Transaction is Main  {\n', '    uint256 USDv;\n', '    uint256 MIRAv;\n', '    FiatContract public fiat;\n', '    \n', '    ERC20 MIRAtoken = ERC20(0x8BCD8DaFc917BFe3C82313e05fc9738aeB72d555);\n', '\n', '     function Transaction() {\n', '          fiat = FiatContract(0x8055d0504666e2B6942BeB8D6014c964658Ca591);\n', '     }\n', '   \n', '\n', '    function() external payable {\n', '        address buyer = msg.sender;\n', '        require(buyer != address(0));\n', '        require(msg.value != 0);\n', '        MIRAv = msg.value;\n', '        uint256 cent = fiat.USD(0);\n', '        uint256 dollar = cent*100;\n', '\n', '        USDv = msg.value.div(dollar); //USD\n', '        \n', '        require(USDv != 0);\n', '        \n', '        MIRAv = USDv.mul(1000).div(price);              // without bonus\n', '        MIRAv = MIRAv + MIRAv.div(100).mul(bonus);      // + bonus\n', '        MIRAv = MIRAv.mul(100000000);\n', '        \n', '        address(wallet).send(msg.value); //send eth\n', '        MIRAtoken.transfer(buyer,MIRAv); //send tokens\n', '    }\n', '\n', '    function getMIRABALANCE() public  constant returns (uint256) {  \n', '        require(msg.sender == owner);\n', '        return MIRAtoken.balanceOf(address(this)).div(100000000); \n', '        }\n', '    function getADR() public constant returns (address) {   return address(this);  }\n', '\n', '}\n', '\n', '\n', '\n', '// Please, visit https://miramind.io/risks.pdf to know more about the risks']
