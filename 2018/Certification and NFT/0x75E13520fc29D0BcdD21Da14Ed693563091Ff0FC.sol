['pragma solidity ^0.4.8;\n', '\n', '//import "./ConvertLib.sol";\n', '\n', 'contract CryptoStars {\n', '\n', '    address owner;\n', '    string public standard = "STRZ";     \n', '    string public name;                     \n', '    string public symbol;  \n', '    uint8 public decimals;                         //Zero for this type of token\n', '    uint256 public totalSupply;                    //Total Supply of STRZ tokens \n', '    uint256 public initialPrice;                  //Price to buy an offered star for sale\n', '    uint256 public transferPrice;                 //Minimum price to transfer star to another address\n', '    uint256 public MaxStarIndexAvailable;         //Set a maximum for range of offered stars for sale\n', '    uint256 public MinStarIndexAvailable;        //Set a minimum for range of offered stars for sale\n', '    uint public nextStarIndexToAssign = 0;\n', '    uint public starsRemainingToAssign = 0;\n', '    uint public numberOfStarsToReserve;\n', '    uint public numberOfStarsReserved = 0;\n', '\n', '    mapping (uint => address) public starIndexToAddress;    \n', '    mapping (uint => string) public starIndexToSTRZName;        //Allowed to be set or changed by STRZ token owner\n', '    mapping (uint => string) public starIndexToSTRZMasterName;  //Only allowed to be set or changed by contract owner\n', '\n', '    /* This creates an array with all balances */\n', '    mapping (address => uint256) public balanceOf;\n', '\n', '    struct Offer {\n', '        bool isForSale;\n', '        uint starIndex;\n', '        address seller;\n', '        uint minValue;          // In Wei\n', '        address onlySellTo;     // specify to sell only to a specific person\n', '    }\n', '\n', '    struct Bid {\n', '        bool hasBid;\n', '        uint starIndex;\n', '        address bidder;        \n', '        uint value;              //In Wei\n', '    }\n', '\n', '    \n', '\n', '    // A record of stars that are offered for sale at a specific minimum value, and perhaps to a specific person\n', '    mapping (uint => Offer) public starsOfferedForSale;\n', '\n', '    // A record of the highest star bid\n', '    mapping (uint => Bid) public starBids;\n', '\n', '    // Accounts may have credit that can be withdrawn.   Credit can be from withdrawn bids or losing bids.\n', '    // Credits also occur when STRZ tokens are sold.   \n', '    mapping (address => uint) public pendingWithdrawals;\n', '\n', '\n', '    event Assign(address indexed to, uint256 starIndex, string GivenName, string MasterName);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event StarTransfer(address indexed from, address indexed to, uint256 starIndex);\n', '    event StarOffered(uint indexed starIndex, uint minValue, address indexed fromAddress, address indexed toAddress);\n', '    event StarBidEntered(uint indexed starIndex, uint value, address indexed fromAddress);\n', '    event StarBidWithdrawn(uint indexed starIndex, uint value, address indexed fromAddress);\n', '    event StarBidAccepted(uint indexed starIndex, uint value, address indexed fromAddress);\n', '    event StarBought(uint indexed starIndex, uint value, address indexed fromAddress, address indexed toAddress, string GivenName, string MasterName, uint MinStarAvailable, uint MaxStarAvailable);\n', '    event StarNoLongerForSale(uint indexed starIndex);\n', '    event StarMinMax(uint MinStarAvailable, uint MaxStarAvailable, uint256 Price);\n', '    event NewOwner(uint indexed starIndex, address indexed toAddress);\n', '\n', '   \n', '    function CryptoStars() payable {\n', '        \n', '        owner = msg.sender;\n', '        totalSupply = 119614;                        // Update total supply\n', '        starsRemainingToAssign = totalSupply;\n', '        numberOfStarsToReserve = 1000;\n', '        name = "CRYPTOSTARS";                        // Set the name for display purposes\n', '        symbol = "STRZ";                             // Set the symbol for display purposes\n', '        decimals = 0;                                // Amount of decimals for display purposes\n', '        initialPrice = 99000000000000000;          // Initial price when tokens are first sold 0.099 ETH\n', '        transferPrice = 10000000000000000;          //Set min transfer price to 0.01 ETH\n', '        MinStarIndexAvailable = 11500;               //Min Available Star Index for range of current offer group                                           \n', '        MaxStarIndexAvailable = 12000;               //Max Available Star Index for range of current offer group\n', '\n', '        //Sol - 0\n', '        starIndexToSTRZMasterName[0] = "Sol";\n', '        starIndexToAddress[0] = owner;\n', '        Assign(owner, 0, starIndexToSTRZName[0], starIndexToSTRZMasterName[0]);\n', '\n', '        //Odyssey 2001\n', '        starIndexToSTRZMasterName[2001] = "Odyssey";\n', '        starIndexToAddress[2001] = owner;\n', '        Assign(owner, 2001, starIndexToSTRZName[2001], starIndexToSTRZMasterName[2001]);\n', '\n', '        //Delta Velorum - 119006\n', '        starIndexToSTRZMasterName[119006] = "Delta Velorum";\n', '        starIndexToAddress[119006] = owner;\n', '        Assign(owner, 119006, starIndexToSTRZName[119006], starIndexToSTRZMasterName[119006]);\n', '\n', '        //Gamma Camelopardalis - 119088\n', '        starIndexToSTRZMasterName[119088] = "Gamma Camelopardalis";\n', '        starIndexToAddress[119088] = owner;\n', '        Assign(owner, 119088, starIndexToSTRZName[119088], starIndexToSTRZMasterName[119088]);\n', '\n', '        //Capella - 119514\n', '        starIndexToSTRZMasterName[119514] = "Capella";\n', '        starIndexToAddress[119514] = owner;\n', '        Assign(owner, 119514, starIndexToSTRZName[119514], starIndexToSTRZMasterName[119514]);\n', '\n', '    }\n', '\n', '\n', '    function reserveStarsForOwner(uint maxForThisRun) {              //Assign groups of stars to the owner\n', '        if (msg.sender != owner) throw;\n', '        if (numberOfStarsReserved >= numberOfStarsToReserve) throw;\n', '        uint numberStarsReservedThisRun = 0;\n', '        while (numberOfStarsReserved < numberOfStarsToReserve && numberStarsReservedThisRun < maxForThisRun) {\n', '            starIndexToAddress[nextStarIndexToAssign] = msg.sender;\n', '            Assign(msg.sender, nextStarIndexToAssign,starIndexToSTRZName[nextStarIndexToAssign], starIndexToSTRZMasterName[nextStarIndexToAssign]);\n', '            numberStarsReservedThisRun++;\n', '            nextStarIndexToAssign++;\n', '        }\n', '        starsRemainingToAssign -= numberStarsReservedThisRun;\n', '        numberOfStarsReserved += numberStarsReservedThisRun;\n', '        balanceOf[msg.sender] += numberStarsReservedThisRun;\n', '    }\n', '\n', '    function setGivenName(uint starIndex, string name) {\n', '        if (starIndexToAddress[starIndex] != msg.sender) throw;     //Only allow star owner to change GivenName\n', '        starIndexToSTRZName[starIndex] = name;\n', '        Assign(msg.sender, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);  //Update Info\n', '    }\n', '\n', '    function setMasterName(uint starIndex, string name) {\n', '        if (msg.sender != owner) throw;                             //Only allow contract owner to change MasterName\n', '        if (starIndexToAddress[starIndex] != owner) throw;          //Only allow contract owner to change MasterName if they are owner of the star\n', '       \n', '        starIndexToSTRZMasterName[starIndex] = name;\n', '        Assign(msg.sender, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);  //Update Info\n', '    }\n', '\n', '    function getMinMax(){\n', '        StarMinMax(MinStarIndexAvailable,MaxStarIndexAvailable, initialPrice);\n', '    }\n', '\n', '    function setMinMax(uint256 MaxStarIndexHolder, uint256 MinStarIndexHolder) {\n', '        if (msg.sender != owner) throw;\n', '        MaxStarIndexAvailable = MaxStarIndexHolder;\n', '        MinStarIndexAvailable = MinStarIndexHolder;\n', '        StarMinMax(MinStarIndexAvailable,MaxStarIndexAvailable, initialPrice);\n', '    }\n', '\n', '    function setStarInitialPrice(uint256 initialPriceHolder) {\n', '        if (msg.sender != owner) throw;\n', '        initialPrice = initialPriceHolder;\n', '        StarMinMax(MinStarIndexAvailable,MaxStarIndexAvailable, initialPrice);\n', '    }\n', '\n', '    function setTransferPrice(uint256 transferPriceHolder){\n', '        if (msg.sender != owner) throw;\n', '        transferPrice = transferPriceHolder;\n', '    }\n', '\n', '    function getStar(uint starIndex, string strSTRZName, string strSTRZMasterName) {\n', '        if (msg.sender != owner) throw;\n', '       \n', '        if (starIndexToAddress[starIndex] != 0x0) throw;\n', '\n', '        starIndexToSTRZName[starIndex] = strSTRZName;\n', '        starIndexToSTRZMasterName[starIndex] = strSTRZMasterName;\n', '\n', '        starIndexToAddress[starIndex] = msg.sender;\n', '    \n', '        balanceOf[msg.sender]++;\n', '        Assign(msg.sender, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);\n', '    }\n', '\n', '    \n', '    function transferStar(address to, uint starIndex) payable {\n', '        if (starIndexToAddress[starIndex] != msg.sender) throw;\n', '        if (msg.value < transferPrice) throw;                       // Didn&#39;t send enough ETH\n', '\n', '        starIndexToAddress[starIndex] = to;\n', '        balanceOf[msg.sender]--;\n', '        balanceOf[to]++;\n', '        StarTransfer(msg.sender, to, starIndex);\n', '        Assign(to, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);\n', '        pendingWithdrawals[owner] += msg.value;\n', '        //kill any bids and refund bid\n', '        Bid bid = starBids[starIndex];\n', '        if (bid.hasBid) {\n', '            pendingWithdrawals[bid.bidder] += bid.value;\n', '            starBids[starIndex] = Bid(false, starIndex, 0x0, 0);\n', '            StarBidWithdrawn(starIndex, bid.value, to);\n', '        }\n', '        \n', '        //Remove any offers\n', '        Offer offer = starsOfferedForSale[starIndex];\n', '        if (offer.isForSale) {\n', '             starsOfferedForSale[starIndex] = Offer(false, starIndex, msg.sender, 0, 0x0);\n', '        }\n', '\n', '    }\n', '\n', '    function starNoLongerForSale(uint starIndex) {\n', '        if (starIndexToAddress[starIndex] != msg.sender) throw;\n', '        starsOfferedForSale[starIndex] = Offer(false, starIndex, msg.sender, 0, 0x0);\n', '        StarNoLongerForSale(starIndex);\n', '        Bid bid = starBids[starIndex];\n', '        if (bid.bidder == msg.sender ) {\n', '            // Kill bid and refund value\n', '            pendingWithdrawals[msg.sender] += bid.value;\n', '            starBids[starIndex] = Bid(false, starIndex, 0x0, 0);\n', '            StarBidWithdrawn(starIndex, bid.value, msg.sender);\n', '        }\n', '    }\n', '\n', '    function offerStarForSale(uint starIndex, uint minSalePriceInWei) {\n', '        if (starIndexToAddress[starIndex] != msg.sender) throw;\n', '        starsOfferedForSale[starIndex] = Offer(true, starIndex, msg.sender, minSalePriceInWei, 0x0);\n', '        StarOffered(starIndex, minSalePriceInWei, msg.sender, 0x0);\n', '    }\n', '\n', '    function offerStarForSaleToAddress(uint starIndex, uint minSalePriceInWei, address toAddress) {\n', '        if (starIndexToAddress[starIndex] != msg.sender) throw;\n', '        starsOfferedForSale[starIndex] = Offer(true, starIndex, msg.sender, minSalePriceInWei, toAddress);\n', '        StarOffered(starIndex, minSalePriceInWei, msg.sender, toAddress);\n', '    }\n', '\n', '    //New owner buys a star that has been offered\n', '    function buyStar(uint starIndex) payable {\n', '        Offer offer = starsOfferedForSale[starIndex];\n', '        if (!offer.isForSale) throw;                                            // star not actually for sale\n', '        if (offer.onlySellTo != 0x0 && offer.onlySellTo != msg.sender) throw;   // star not supposed to be sold to this user\n', '        if (msg.value < offer.minValue) throw;                                  // Didn&#39;t send enough ETH\n', '        if (offer.seller != starIndexToAddress[starIndex]) throw;               // Seller no longer owner of star\n', '\n', '        address seller = offer.seller;\n', '        \n', '        balanceOf[seller]--;\n', '        balanceOf[msg.sender]++;\n', '\n', '        Assign(msg.sender, starIndex,starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);\n', '\n', '        uint amountseller = msg.value*97/100;\n', '        uint amountowner = msg.value*3/100;           //Owner of contract receives 3% registration fee\n', '\n', '        pendingWithdrawals[owner] += amountowner;    \n', '        pendingWithdrawals[seller] += amountseller;\n', '\n', '        starIndexToAddress[starIndex] = msg.sender;\n', ' \n', '        starNoLongerForSale(starIndex);\n', '    \n', '        string STRZName = starIndexToSTRZName[starIndex];\n', '        string STRZMasterName = starIndexToSTRZMasterName[starIndex];\n', '\n', '        StarBought(starIndex, msg.value, offer.seller, msg.sender, STRZName, STRZMasterName, MinStarIndexAvailable, MaxStarIndexAvailable);\n', '\n', '        Bid bid = starBids[starIndex];\n', '        if (bid.bidder == msg.sender) {\n', '            // Kill bid and refund value\n', '            pendingWithdrawals[msg.sender] += bid.value;\n', '            starBids[starIndex] = Bid(false, starIndex, 0x0, 0);\n', '            StarBidWithdrawn(starIndex, bid.value, msg.sender);\n', '        }\n', '\n', '    }\n', '\n', '    function buyStarInitial(uint starIndex, string strSTRZName) payable {\n', '         \n', '    // We only allow the Nextavailable star to be sold \n', '        if (starIndex > MaxStarIndexAvailable) throw;     //Above Current Offering Range\n', '        if (starIndex < MinStarIndexAvailable) throw;       //Below Current Offering Range\n', '        if (starIndexToAddress[starIndex] != 0x0) throw;    //Star is already owned\n', '        if (msg.value < initialPrice) throw;               // Didn&#39;t send enough ETH\n', '        \n', '        starIndexToAddress[starIndex] = msg.sender;   \n', '        starIndexToSTRZName[starIndex] = strSTRZName;      //Assign the star to new owner\n', '        \n', '        balanceOf[msg.sender]++;                            //Update the STRZ token balance for the new owner\n', '        pendingWithdrawals[owner] += msg.value;\n', '\n', '        string STRZMasterName = starIndexToSTRZMasterName[starIndex];\n', '        StarBought(starIndex, msg.value, owner, msg.sender, strSTRZName, STRZMasterName ,MinStarIndexAvailable, MaxStarIndexAvailable);\n', '\n', '        Assign(msg.sender, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);\n', '        //Assign(msg.sender, starIndex);\n', '    }\n', '\n', '    function enterBidForStar(uint starIndex) payable {\n', '\n', '        if (starIndex >= totalSupply) throw;             \n', '        if (starIndexToAddress[starIndex] == 0x0) throw;\n', '        if (starIndexToAddress[starIndex] == msg.sender) throw;\n', '        if (msg.value == 0) throw;\n', '\n', '        Bid existing = starBids[starIndex];\n', '        if (msg.value <= existing.value) throw;\n', '        if (existing.value > 0) {\n', '            // Refund the failing bid\n', '            pendingWithdrawals[existing.bidder] += existing.value;\n', '        }\n', '\n', '        starBids[starIndex] = Bid(true, starIndex, msg.sender, msg.value);\n', '        StarBidEntered(starIndex, msg.value, msg.sender);\n', '    }\n', '\n', '    function acceptBidForStar(uint starIndex, uint minPrice) {\n', '        if (starIndex >= totalSupply) throw;\n', '        //if (!allStarsAssigned) throw;                \n', '        if (starIndexToAddress[starIndex] != msg.sender) throw;\n', '        address seller = msg.sender;\n', '        Bid bid = starBids[starIndex];\n', '        if (bid.value == 0) throw;\n', '        if (bid.value < minPrice) throw;\n', '\n', '        starIndexToAddress[starIndex] = bid.bidder;\n', '        balanceOf[seller]--;\n', '        balanceOf[bid.bidder]++;\n', '        Transfer(seller, bid.bidder, 1);\n', '\n', '        starsOfferedForSale[starIndex] = Offer(false, starIndex, bid.bidder, 0, 0x0);\n', '        \n', '        uint amount = bid.value;\n', '        uint amountseller = amount*97/100;\n', '        uint amountowner = amount*3/100;\n', '        \n', '        pendingWithdrawals[seller] += amountseller;\n', '        pendingWithdrawals[owner] += amountowner;               //Registration Fee 3%\n', '\n', '        string STRZGivenName = starIndexToSTRZName[starIndex];\n', '        string STRZMasterName = starIndexToSTRZMasterName[starIndex];\n', '        StarBought(starIndex, bid.value, seller, bid.bidder, STRZGivenName, STRZMasterName, MinStarIndexAvailable, MaxStarIndexAvailable);\n', '        StarBidWithdrawn(starIndex, bid.value, bid.bidder);\n', '        Assign(bid.bidder, starIndex, starIndexToSTRZName[starIndex], starIndexToSTRZMasterName[starIndex]);\n', '        StarNoLongerForSale(starIndex);\n', '\n', '        starBids[starIndex] = Bid(false, starIndex, 0x0, 0);\n', '    }\n', '\n', '    function withdrawBidForStar(uint starIndex) {\n', '        if (starIndex >= totalSupply) throw;            \n', '        if (starIndexToAddress[starIndex] == 0x0) throw;\n', '        if (starIndexToAddress[starIndex] == msg.sender) throw;\n', '\n', '        Bid bid = starBids[starIndex];\n', '        if (bid.bidder != msg.sender) throw;\n', '        StarBidWithdrawn(starIndex, bid.value, msg.sender);\n', '        uint amount = bid.value;\n', '        starBids[starIndex] = Bid(false, starIndex, 0x0, 0);\n', '        // Refund the bid money\n', '        pendingWithdrawals[msg.sender] += amount;\n', '    \n', '    }\n', '\n', '    function withdraw() {\n', '        //if (!allStarsAssigned) throw;\n', '        uint amount = pendingWithdrawals[msg.sender];\n', '        // Remember to zero the pending refund before\n', '        // sending to prevent re-entrancy attacks\n', '        pendingWithdrawals[msg.sender] = 0;\n', '        msg.sender.send(amount);\n', '    }\n', '\n', '    function withdrawPartial(uint withdrawAmount) {\n', '        //Only available to owner\n', '        //Withdraw partial amount of the pending withdrawal\n', '        if (msg.sender != owner) throw;\n', '        if (withdrawAmount > pendingWithdrawals[msg.sender]) throw;\n', '\n', '        pendingWithdrawals[msg.sender] -= withdrawAmount;\n', '        msg.sender.send(withdrawAmount);\n', '    }\n', '}']