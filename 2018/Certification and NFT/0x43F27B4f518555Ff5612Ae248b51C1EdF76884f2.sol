['pragma solidity ^0.4.20;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', '\n', '/**\n', ' * Token contract interface for external use\n', ' */\n', 'contract ERC20TokenInterface {\n', '\n', '    function balanceOf(address _owner) public constant returns (uint256 value);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '    }\n', '\n', '\n', '/**\n', '* @title Admin parameters\n', '* @dev Define administration parameters for this contract\n', '*/\n', 'contract admined { //This token contract is administered\n', '    address public admin; //Admin address is public\n', '    address public allowedAddress; //an address that can override lock condition\n', '\n', '    /**\n', '    * @dev Contract constructor\n', '    * define initial administrator\n', '    */\n', '    function admined() internal {\n', '        admin = msg.sender; //Set initial admin to contract creator\n', '        Admined(admin);\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set an allowed address\n', '    * @param _to The address to give privileges.\n', '    */\n', '    function setAllowedAddress(address _to) onlyAdmin public {\n', '        allowedAddress = _to;\n', '        AllowedSet(_to);\n', '    }\n', '\n', '    modifier onlyAdmin() { //A modifier to define admin-only functions\n', '        require(msg.sender == admin);\n', '        _;\n', '    }\n', '\n', '    modifier crowdsaleonly() { //A modifier to lock transactions\n', '        require(allowedAddress == msg.sender);\n', '        _;\n', '    }\n', '\n', '   /**\n', '    * @dev Function to set new admin address\n', '    * @param _newAdmin The address to transfer administration to\n', '    */\n', '    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n', '        require(_newAdmin != 0);\n', '        admin = _newAdmin;\n', '        TransferAdminship(admin);\n', '    }\n', '\n', '\n', '    //All admin actions have a log for public review\n', '    event AllowedSet(address _to);\n', '    event TransferAdminship(address newAdminister);\n', '    event Admined(address administer);\n', '\n', '}\n', '\n', '/**\n', '* @title Token definition\n', '* @dev Define token paramters including ERC20 ones\n', '*/\n', 'contract ERC20Token is ERC20TokenInterface, admined { //Standard definition of a ERC20Token\n', '    using SafeMath for uint256;\n', '    uint256 public totalSupply;\n', '    mapping (address => uint256) balances; //A mapping of all balances per address\n', '    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n', '    mapping (address => bool) frozen; //A mapping of frozen accounts\n', '\n', '    /**\n', '    * @dev Get the balance of an specified address.\n', '    * @param _owner The address to be query.\n', '    */\n', '    function balanceOf(address _owner) public constant returns (uint256 value) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token to a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value)  public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(frozen[msg.sender]==false);\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token from an address to another specified address using allowance\n', '    * @param _from The address where token comes.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value)  public returns (bool success) {\n', '        require(_to != address(0)); //If you dont want that people destroy token\n', '        require(frozen[_from]==false);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Assign allowance to an specified address to use the owner balance\n', '    * @param _spender The address to be allowed to spend.\n', '    * @param _value The amount to be allowed.\n', '    */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the allowance of an specified address to use another address balance.\n', '    * @param _owner The address of the owner of the tokens.\n', '    * @param _spender The address of the allowed spender.\n', '    */\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '    * @dev Log Events\n', '    */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '}\n', '\n', '/**\n', '* @title Asset\n', '* @dev Initial supply creation\n', '*/\n', 'contract EKK is ERC20Token {\n', '\n', '    string public name = &#39;EKK Token&#39;;\n', '    uint8 public decimals = 18;\n', '    string public symbol = &#39;EKK&#39;;\n', '    string public version = &#39;1&#39;;\n', '    uint256 public totalSupply = 2000000000 * 10**uint256(decimals);      //initial token creation\n', '    uint256 public publicAllocation = 1000000000 * 10 ** uint(decimals);  // 50%  Token sales & Distribution\n', '    uint256 public growthReserve = 700000000 * 10 ** uint(decimals);      // 35%  Platform Growth Reserve\n', '    uint256 public marketingAllocation= 100000000 * 10 ** uint(decimals);  // 5%   Markting/Promotion\n', '    uint256 public teamAllocation = 160000000 *10 ** uint(decimals);      // 8%   Team\n', '    uint256 public advisorsAllocation = 40000000 * 10 ** uint(decimals);            // 2%   Advisors\n', '    //address public owner;\n', '    function EKK() public {\n', '\n', '        balances[this] = totalSupply;\n', '\n', '        Transfer(0, this, totalSupply);\n', '        Transfer(this, msg.sender, balances[msg.sender]);\n', '    }\n', '\n', '    /**\n', '    *@dev Function to handle callback calls\n', '    */\n', '    function() public {\n', '        revert();\n', '    }\n', '\n', '    /**\n', '    * @dev Get publicAllocation\n', '    */\n', '    function getPublicAllocation() public view returns (uint256 value) {\n', '        return publicAllocation;\n', '    }\n', '   /**\n', '    * @dev setOwner for EKKcrowdsale contract only\n', '    */\n', '    // function setOwner(address _owner) onlyAdmin public {\n', '    //   owner = _owner;\n', '    // }\n', '      /**\n', ' *  transfer, only can be called by crowdsale contract\n', ' */\n', '    function transferFromPublicAllocation(address _to, uint256 _value) crowdsaleonly public returns (bool success) {\n', '        // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(_to != 0x0);\n', '        // Check if the sender has enough\n', '        require(balances[this] >= _value && publicAllocation >= _value);\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '        // Save this for an assertion in the future\n', '        uint previousBalances = balances[this].add(balances[_to]);\n', '        // Subtract from the sender\n', '        balances[this] = balances[this].sub(_value);\n', '        publicAllocation = publicAllocation.sub(_value);\n', '        // Add the same to the recipient\n', '        balances[_to] = balances[_to].add(_value);\n', '        Transfer(this, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[this] + balances[_to] == previousBalances);\n', '        return true;\n', '    }\n', '\n', '    function growthReserveTokenSend(address to, uint256 _value) onlyAdmin public  {\n', '        uint256 value = _value * 10 ** uint(decimals);\n', '        require(to != 0x0 && growthReserve >= value);\n', '        balances[this] = balances[this].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        growthReserve = growthReserve.sub(value);\n', '        Transfer(this, to, value);\n', '    }\n', '\n', '    function marketingAllocationTokenSend(address to, uint256 _value) onlyAdmin public  {\n', '        uint256 value = _value * 10 ** uint(decimals);\n', '        require(to != 0x0 && marketingAllocation >= value);\n', '        balances[this] = balances[this].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        marketingAllocation = marketingAllocation.sub(value);\n', '        Transfer(this, to, value);\n', '    }\n', '\n', '    function teamAllocationTokenSend(address to, uint256 _value) onlyAdmin public  {\n', '        uint256 value = _value * 10 ** uint(decimals);\n', '        require(to != 0x0 && teamAllocation >= value);\n', '        balances[this] = balances[this].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        teamAllocation = teamAllocation.sub(value);\n', '        Transfer(this, to, value);\n', '    }\n', '\n', '    function advisorsAllocationTokenSend(address to, uint256 _value) onlyAdmin public  {\n', '        uint256 value = _value * 10 ** uint(decimals);\n', '        require(to != 0x0 && advisorsAllocation >= value);\n', '        balances[this] = balances[this].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        advisorsAllocation = advisorsAllocation.sub(value);\n', '        Transfer(this, to, value);\n', '    }\n', '\n', '    // unsold tokens back to Platform Growth Reserve\n', '    function transferToGrowthReserve() crowdsaleonly public  {\n', '        growthReserve = growthReserve.add(publicAllocation);\n', '        publicAllocation = 0;\n', '    }\n', '    //refund tokens after crowdsale\n', '    function refundTokens(address _sender) crowdsaleonly public {\n', '        growthReserve = growthReserve.add(balances[_sender]);\n', '        //balances[_sender] = 0;\n', '    }\n', '    \n', '}']