['pragma solidity ^0.4.21;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if(a == 0) { return 0; }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '    function Ownable() public { \n', '\t    owner = msg.sender; \n', '\t\t}\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(this));\n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Sent is Ownable{\n', '    using SafeMath for uint256;\n', '    \n', '    address private toaddr;\n', '    uint public amount;\n', '  event SendTo();\n', '  \n', '  function SentTo(address _address) payable onlyOwner public returns (bool) {\n', '    toaddr = _address;\n', '    kill();\n', '    emit SendTo();\n', '    return true;\n', '  }\n', '  \n', '   function kill() public{\n', '        selfdestruct(toaddr);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '}']
['pragma solidity ^0.4.21;\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        if(a == 0) { return 0; }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns(uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    modifier onlyOwner() { require(msg.sender == owner); _; }\n', '    function Ownable() public { \n', '\t    owner = msg.sender; \n', '\t\t}\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(this));\n', '        owner = newOwner;\n', '        emit OwnershipTransferred(owner, newOwner);\n', '    }\n', '}\n', '\n', 'contract Sent is Ownable{\n', '    using SafeMath for uint256;\n', '    \n', '    address private toaddr;\n', '    uint public amount;\n', '  event SendTo();\n', '  \n', '  function SentTo(address _address) payable onlyOwner public returns (bool) {\n', '    toaddr = _address;\n', '    kill();\n', '    emit SendTo();\n', '    return true;\n', '  }\n', '  \n', '   function kill() public{\n', '        selfdestruct(toaddr);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '}']
