['pragma solidity 0.4.19;\n', '\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'pragma solidity ^0.4.11;\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public constant returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public constant returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public constant returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.4.11;\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', '\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n', '    totalSupply = totalSupply.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    Mint(_to, _amount);\n', '    Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', 'contract RocketToken is MintableToken {\n', '    string public name = "ICO ROCKET";\n', '    string public symbol = "ROCKET";\n', '    uint256 public decimals = 18;\n', '}\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', ' */\n', 'contract Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  // The token being sold\n', '  MintableToken public token;\n', '\n', '  // start and end timestamps where investments are allowed (both inclusive)\n', '  uint256 public startTime;\n', '  uint256 public endTime;\n', '\n', '  // address where funds are collected\n', '  address public wallet;\n', '\n', '  // how many token units a buyer gets per wei\n', '  uint256 public rate;\n', '\n', '  // amount of raised money in wei\n', '  uint256 public weiRaised;\n', '\n', '  /**\n', '   * event for token purchase logging\n', '   * @param purchaser who paid for the tokens\n', '   * @param beneficiary who got the tokens\n', '   * @param value weis paid for purchase\n', '   * @param amount amount of tokens purchased\n', '   */\n', '  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '\n', '  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {\n', '    require(_startTime >= now);\n', '    require(_endTime >= _startTime);\n', '    require(_rate > 0);\n', '    require(_wallet != address(0));\n', '\n', '    token = createTokenContract();\n', '    startTime = _startTime;\n', '    endTime = _endTime;\n', '    rate = _rate;\n', '    wallet = _wallet;\n', '  }\n', '\n', '  // creates the token to be sold.\n', '  // override this method to have crowdsale of a specific mintable token.\n', '  function createTokenContract() internal returns (MintableToken) {\n', '    return new MintableToken();\n', '  }\n', '\n', '\n', '  // fallback function can be used to buy tokens\n', '  function () payable {\n', '    buyTokens(msg.sender);\n', '  }\n', '\n', '  // low level token purchase function\n', '  function buyTokens(address beneficiary) public payable {\n', '    require(beneficiary != address(0));\n', '    require(validPurchase());\n', '\n', '    uint256 weiAmount = msg.value;\n', '\n', '    // calculate token amount to be created\n', '    uint256 tokens = weiAmount.mul(rate);\n', '\n', '    // update state\n', '    weiRaised = weiRaised.add(weiAmount);\n', '\n', '    token.mint(beneficiary, tokens);\n', '    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '    forwardFunds();\n', '  }\n', '\n', '  // send ether to the fund collection wallet\n', '  // override to create custom fund forwarding mechanisms\n', '  function forwardFunds() internal {\n', '    wallet.transfer(msg.value);\n', '  }\n', '\n', '  // @return true if the transaction can buy tokens\n', '  function validPurchase() internal constant returns (bool) {\n', '    bool withinPeriod = now >= startTime && now <= endTime;\n', '    bool nonZeroPurchase = msg.value != 0;\n', '    return withinPeriod && nonZeroPurchase;\n', '  }\n', '\n', '  // @return true if crowdsale event has ended\n', '  function hasEnded() public constant returns (bool) {\n', '    return now > endTime;\n', '  }\n', '\n', '\n', '}\n', 'pragma solidity ^0.4.11;\n', '\n', '\n', 'contract RocketTokenCrowdsale is Ownable, Crowdsale {\n', '\n', '    using SafeMath for uint256;\n', ' \n', '    //operational\n', '    bool public LockupTokensWithdrawn = false;\n', '    uint256 public constant toDec = 10**18;\n', '    uint256 public tokensLeft = 14700000*toDec;\n', '    uint256 public constant cap = 14700000*toDec;\n', '    uint256 public constant startRate = 1000;\n', '\n', '    enum State { BeforeSale, Bonus, NormalSale, ShouldFinalize, Lockup, SaleOver }\n', '    State public state = State.BeforeSale;\n', '\n', '    /* --- Ether wallets --- */\n', '    // Admin ETH Wallet: 0x0662a2f97833b9b120ed40d4e60ceec39c71ef18\n', '\n', '    // 4% Team Tokens: 0x1EB5cc8E0825dfE322df4CA44ce8522981874d51\n', '\n', '    // 1% For me\n', '\n', '    // 25% Investor 1: TBC\n', '\n', '    // Pre ICO wallets\n', '\n', '    address[2] public wallets;\n', '\n', '    uint256 public TeamSum = 840000*toDec; // 0 - 4%\n', '\n', '    uint256 public MeSum = 210000*toDec; // 1 - 1%\n', '\n', '    uint256 public InvestorSum = 5250000*toDec; // 2 - 25%\n', '\n', '\n', '    // /* --- Time periods --- */\n', '\n', '    uint256 public startTimeNumber = block.timestamp;\n', '\n', '    uint256 public lockupPeriod = 180 * 1 days;\n', '\n', '    uint256 public bonusPeriod = 90 * 1 days;\n', '\n', '    uint256 public bonusEndTime = bonusPeriod + startTimeNumber;\n', '\n', '\n', '\n', '    event LockedUpTokensWithdrawn();\n', '    event Finalized();\n', '\n', '    modifier canWithdrawLockup() {\n', '        require(state == State.Lockup);\n', '        require(endTime.add(lockupPeriod) < block.timestamp);\n', '        _;\n', '    }\n', '\n', '    function RocketTokenCrowdsale(\n', '        address _admin, /*used as the wallet for collecting funds*/\n', '        address _team,\n', '        address _me,\n', '        address _investor)\n', '    Crowdsale(\n', '        block.timestamp + 10, // 2018-02-01T00:00:00+00:00 - 1517443200\n', '        1527811200, // 2018-08-01T00:00:00+00:00 - \n', '        1000,/* start rate - 1000 */\n', '        _admin\n', '    )  \n', '    public \n', '    {      \n', '        wallets[0] = _team;\n', '        wallets[1] = _me;\n', '        owner = _admin;\n', '        token.mint(_investor, InvestorSum);\n', '    }\n', '\n', '    // creates the token to be sold.\n', '    // override this method to have crowdsale of a specific MintableToken token.\n', '    function createTokenContract() internal returns (MintableToken) {\n', '        return new RocketToken();\n', '    }\n', '\n', '    function forwardFunds() internal {\n', '        forwardFundsAmount(msg.value);\n', '    }\n', '\n', '    function forwardFundsAmount(uint256 amount) internal {\n', '        wallet.transfer(amount);\n', '    }\n', '\n', '    function refundAmount(uint256 amount) internal {\n', '        msg.sender.transfer(amount);\n', '    }\n', '\n', '    function fixAddress(address newAddress, uint256 walletIndex) onlyOwner public {\n', '        wallets[walletIndex] = newAddress;\n', '    }\n', '\n', '    function calculateCurrentRate() internal {\n', '        if (state == State.NormalSale) {\n', '            rate = 500;\n', '        }\n', '    }\n', '\n', '    function buyTokensUpdateState() internal {\n', '        if(state == State.BeforeSale && now >= startTimeNumber) { state = State.Bonus; }\n', '        if(state == State.Bonus && now >= bonusEndTime) { state = State.NormalSale; }\n', '        calculateCurrentRate();\n', '        require(state != State.ShouldFinalize && state != State.Lockup && state != State.SaleOver && msg.value >= toDec.div(2));\n', '        if(msg.value.mul(rate) >= tokensLeft) { state = State.ShouldFinalize; }\n', '    }\n', '\n', '    function buyTokens(address beneficiary) public payable {\n', '        buyTokensUpdateState();\n', '        var numTokens = msg.value.mul(rate);\n', '        if(state == State.ShouldFinalize) {\n', '            lastTokens(beneficiary);\n', '            numTokens = tokensLeft;\n', '        }\n', '        else {\n', '            tokensLeft = tokensLeft.sub(numTokens); // if negative, should finalize\n', '            super.buyTokens(beneficiary);\n', '        }\n', '    }\n', '\n', '    function lastTokens(address beneficiary) internal {\n', '        require(beneficiary != 0x0);\n', '        require(validPurchase());\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokensForFullBuy = weiAmount.mul(rate);// must be bigger or equal to tokensLeft to get here\n', '        uint256 tokensToRefundFor = tokensForFullBuy.sub(tokensLeft);\n', '        uint256 tokensRemaining = tokensForFullBuy.sub(tokensToRefundFor);\n', '        uint256 weiAmountToRefund = tokensToRefundFor.div(rate);\n', '        uint256 weiRemaining = weiAmount.sub(weiAmountToRefund);\n', '        \n', '        // update state\n', '        weiRaised = weiRaised.add(weiRemaining);\n', '\n', '        token.mint(beneficiary, tokensRemaining);\n', '        TokenPurchase(msg.sender, beneficiary, weiRemaining, tokensRemaining);\n', '\n', '        forwardFundsAmount(weiRemaining);\n', '        refundAmount(weiAmountToRefund);\n', '    }\n', '\n', '    function withdrawLockupTokens() canWithdrawLockup public {\n', '        token.mint(wallets[1], MeSum);\n', '        token.mint(wallets[0], TeamSum);\n', '        LockupTokensWithdrawn = true;\n', '        LockedUpTokensWithdrawn();\n', '        state = State.SaleOver;\n', '    }\n', '\n', '    function finalizeUpdateState() internal {\n', '        if(now > endTime) { state = State.ShouldFinalize; }\n', '        if(tokensLeft == 0) { state = State.ShouldFinalize; }\n', '    }\n', '\n', '    function finalize() public {\n', '        finalizeUpdateState();\n', '        require (state == State.ShouldFinalize);\n', '\n', '        finalization();\n', '        Finalized();\n', '    }\n', '\n', '    function finalization() internal {\n', '        endTime = block.timestamp;\n', '        /* - preICO investors - */\n', '        tokensLeft = 0;\n', '        state = State.Lockup;\n', '    }\n', '}']