['pragma solidity ^0.4.19;\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '    address public proposedOwner = address(0);\n', '\n', '    event OwnershipTransferInitiated(address indexed _proposedOwner);\n', '    event OwnershipTransferCompleted(address indexed _newOwner);\n', '    event OwnershipTransferCanceled();\n', '\n', '\n', '    function Owned() public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender));\n', '        _;\n', '    }\n', '\n', '\n', '    function isOwner(address _address) public view returns (bool) {\n', '        return (_address == owner);\n', '    }\n', '\n', '\n', '    function initiateOwnershipTransfer(address _proposedOwner) public onlyOwner returns (bool) {\n', '        require(_proposedOwner != address(0));\n', '        require(_proposedOwner != address(this));\n', '        require(_proposedOwner != owner);\n', '\n', '        proposedOwner = _proposedOwner;\n', '\n', '        OwnershipTransferInitiated(proposedOwner);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function cancelOwnershipTransfer() public onlyOwner returns (bool) {\n', '        //if proposedOwner address already address(0) then it will return true.\n', '        if (proposedOwner == address(0)) {\n', '            return true;\n', '        }\n', '        //if not then first it will do address(0( then it will return true.\n', '        proposedOwner = address(0);\n', '\n', '        OwnershipTransferCanceled();\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function completeOwnershipTransfer() public returns (bool) {\n', '\n', '        require(msg.sender == proposedOwner);\n', '\n', '        owner = msg.sender;\n', '        proposedOwner = address(0);\n', '\n', '        OwnershipTransferCompleted(owner);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract TokenTransfer {\n', '    // minimal subset of ERC20\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function decimals() public view returns (uint8 tokenDecimals);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '}\n', '\n', 'contract FlexibleTokenSale is  Owned {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    //\n', '    // Lifecycle\n', '    //\n', '    bool public suspended;\n', '\n', '    //\n', '    // Pricing\n', '    //\n', '    uint256 public tokenPrice;\n', '    uint256 public tokenPerEther;\n', '    uint256 public contributionMin;\n', '    uint256 public tokenConversionFactor;\n', '\n', '    //\n', '    // Wallets\n', '    //\n', '    address public walletAddress;\n', '\n', '    //\n', '    // Token\n', '    //\n', '    TokenTransfer token;\n', '\n', '\n', '    //\n', '    // Counters\n', '    //\n', '    uint256 public totalTokensSold;\n', '    uint256 public totalEtherCollected;\n', '    \n', '    //\n', '    // Price Update Address\n', '    //\n', '    address public priceUpdateAddress;\n', '\n', '\n', '    //\n', '    // Events\n', '    //\n', '    event Initialized();\n', '    event TokenPriceUpdated(uint256 _newValue);\n', '    event TokenPerEtherUpdated(uint256 _newValue);\n', '    event TokenMinUpdated(uint256 _newValue);\n', '    event WalletAddressUpdated(address indexed _newAddress);\n', '    event SaleSuspended();\n', '    event SaleResumed();\n', '    event TokensPurchased(address indexed _beneficiary, uint256 _cost, uint256 _tokens);\n', '    event TokensReclaimed(uint256 _amount);\n', '    event PriceAddressUpdated(address indexed _newAddress);\n', '\n', '\n', '    function FlexibleTokenSale(address _tokenAddress,address _walletAddress,uint _tokenPerEther,address _priceUpdateAddress) public\n', '    Owned()\n', '    {\n', '\n', '        require(_walletAddress != address(0));\n', '        require(_walletAddress != address(this));\n', '        require(address(token) == address(0));\n', '        require(address(_tokenAddress) != address(0));\n', '        require(address(_tokenAddress) != address(this));\n', '        require(address(_tokenAddress) != address(walletAddress));\n', '\n', '        walletAddress = _walletAddress;\n', '        priceUpdateAddress = _priceUpdateAddress;\n', '        token = TokenTransfer(_tokenAddress);\n', '        suspended = false;\n', '        tokenPrice = 100;\n', '        tokenPerEther = _tokenPerEther;\n', '        contributionMin     = 5 * 10**18;//minimum 5 DOC token\n', '        totalTokensSold     = 0;\n', '        totalEtherCollected = 0;\n', '        // This factor is used when converting cost <-> tokens.\n', '       // 18 is because of the ETH -> Wei conversion.\n', '      // 2 because toekn price  and etherPerToken Price are expressed as 100 for $1.00  and 100000 for $1000.00 (with 2 decimals).\n', '       tokenConversionFactor = 10**(uint256(18).sub(token.decimals()).add(2));\n', '        assert(tokenConversionFactor > 0);\n', '    }\n', '\n', '\n', '    //\n', '    // Owner Configuation\n', '    //\n', '\n', '    // Allows the owner to change the wallet address which is used for collecting\n', '    // ether received during the token sale.\n', '    function setWalletAddress(address _walletAddress) external onlyOwner returns(bool) {\n', '        require(_walletAddress != address(0));\n', '        require(_walletAddress != address(this));\n', '        require(_walletAddress != address(token));\n', '        require(isOwner(_walletAddress) == false);\n', '\n', '        walletAddress = _walletAddress;\n', '\n', '        WalletAddressUpdated(_walletAddress);\n', '\n', '        return true;\n', '    }\n', '\n', '    //set token price in between $1 to $1000, pass 111 for $1.11, 100000 for $1000\n', '    function setTokenPrice(uint _tokenPrice) external onlyOwner returns (bool) {\n', '        require(_tokenPrice >= 100 && _tokenPrice <= 100000);\n', '\n', '        tokenPrice=_tokenPrice;\n', '\n', '        TokenPriceUpdated(_tokenPrice);\n', '        return true;\n', '    }\n', '\n', '    function setMinToken(uint256 _minToken) external onlyOwner returns(bool) {\n', '        require(_minToken > 0);\n', '\n', '        contributionMin = _minToken;\n', '\n', '        TokenMinUpdated(_minToken);\n', '\n', '        return true;\n', '    }\n', '\n', '    // Allows the owner to suspend the sale until it is manually resumed at a later time.\n', '    function suspend() external onlyOwner returns(bool) {\n', '        if (suspended == true) {\n', '            return false;\n', '        }\n', '\n', '        suspended = true;\n', '\n', '        SaleSuspended();\n', '\n', '        return true;\n', '    }\n', '\n', '    // Allows the owner to resume the sale.\n', '    function resume() external onlyOwner returns(bool) {\n', '        if (suspended == false) {\n', '            return false;\n', '        }\n', '\n', '        suspended = false;\n', '\n', '        SaleResumed();\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    //\n', '    // Contributions\n', '    //\n', '\n', '    // Default payable function which can be used to purchase tokens.\n', '    function () payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '\n', '    // Allows the caller to purchase tokens for a specific beneficiary (proxy purchase).\n', '    function buyTokens(address _beneficiary) public payable returns (uint256) {\n', '        require(!suspended);\n', '\n', '        require(address(token) !=  address(0));\n', '        require(_beneficiary != address(0));\n', '        require(_beneficiary != address(this));\n', '        require(_beneficiary != address(token));\n', '\n', '\n', '        // We don&#39;t want to allow the wallet collecting ETH to\n', '        // directly be used to purchase tokens.\n', '        require(msg.sender != address(walletAddress));\n', '\n', '        // Check how many tokens are still available for sale.\n', '        uint256 saleBalance = token.balanceOf(address(this));\n', '        assert(saleBalance > 0);\n', '\n', '\n', '        return buyTokensInternal(_beneficiary);\n', '    }\n', '\n', '    function updateTokenPerEther(uint _etherPrice) public returns(bool){\n', '        require(_etherPrice > 0);\n', '        require(msg.sender == priceUpdateAddress || msg.sender == owner);\n', '        tokenPerEther=_etherPrice;\n', '        TokenPerEtherUpdated(_etherPrice);\n', '        return true;\n', '    }\n', '    \n', '    function updatePriceAddress(address _newAddress) public onlyOwner returns(bool){\n', '        require(_newAddress != address(0));\n', '        priceUpdateAddress=_newAddress;\n', '        PriceAddressUpdated(_newAddress);\n', '        return true;\n', '    }\n', '\n', '\n', '    function buyTokensInternal(address _beneficiary) internal returns (uint256) {\n', '\n', '        // Calculate how many tokens the contributor could purchase based on ETH received.\n', '        uint256 tokens =msg.value.mul(tokenPerEther.mul(100).div(tokenPrice)).div(tokenConversionFactor);\n', '        require(tokens >= contributionMin);\n', '\n', '        // This is the actual amount of ETH that can be sent to the wallet.\n', '        uint256 contribution =msg.value;\n', '        walletAddress.transfer(contribution);\n', '        totalEtherCollected = totalEtherCollected.add(contribution);\n', '\n', '        // Update our stats counters.\n', '        totalTokensSold = totalTokensSold.add(tokens);\n', '\n', '        // Transfer tokens to the beneficiary.\n', '        require(token.transfer(_beneficiary, tokens));\n', '\n', '        TokensPurchased(_beneficiary, msg.value, tokens);\n', '\n', '        return tokens;\n', '    }\n', '\n', '\n', '    // Allows the owner to take back the tokens that are assigned to the sale contract.\n', '    function reclaimTokens() external onlyOwner returns (bool) {\n', '\n', '        uint256 tokens = token.balanceOf(address(this));\n', '\n', '        if (tokens == 0) {\n', '            return false;\n', '        }\n', '\n', '        require(token.transfer(owner, tokens));\n', '\n', '        TokensReclaimed(tokens);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract DOCTokenSaleConfig {\n', '    address WALLET_ADDRESS = 0xcd6b3d0c0dd850bad071cd20e428940d2e25120f;\n', '    address TOKEN_ADDRESS = 0x39a87Dc12a7199AA012c18F114B763e27D0decA4;\n', '    address UPDATE_PRICE_ADDRESS = 0x0fb285cae5dccddb4f8ea252a16876dd3dfb0f52;\n', '    \n', '    uint ETHER_PRICE = 100000;//set current ether price. if current price 1000.00 then write 100000\n', '}\n', '\n', 'contract DOCTokenSale is FlexibleTokenSale, DOCTokenSaleConfig {\n', '\n', '    function DOCTokenSale() public\n', '    FlexibleTokenSale(TOKEN_ADDRESS,WALLET_ADDRESS,ETHER_PRICE,UPDATE_PRICE_ADDRESS)\n', '    {\n', '\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.19;\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', 'contract Owned {\n', '\n', '    address public owner;\n', '    address public proposedOwner = address(0);\n', '\n', '    event OwnershipTransferInitiated(address indexed _proposedOwner);\n', '    event OwnershipTransferCompleted(address indexed _newOwner);\n', '    event OwnershipTransferCanceled();\n', '\n', '\n', '    function Owned() public\n', '    {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(msg.sender));\n', '        _;\n', '    }\n', '\n', '\n', '    function isOwner(address _address) public view returns (bool) {\n', '        return (_address == owner);\n', '    }\n', '\n', '\n', '    function initiateOwnershipTransfer(address _proposedOwner) public onlyOwner returns (bool) {\n', '        require(_proposedOwner != address(0));\n', '        require(_proposedOwner != address(this));\n', '        require(_proposedOwner != owner);\n', '\n', '        proposedOwner = _proposedOwner;\n', '\n', '        OwnershipTransferInitiated(proposedOwner);\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function cancelOwnershipTransfer() public onlyOwner returns (bool) {\n', '        //if proposedOwner address already address(0) then it will return true.\n', '        if (proposedOwner == address(0)) {\n', '            return true;\n', '        }\n', '        //if not then first it will do address(0( then it will return true.\n', '        proposedOwner = address(0);\n', '\n', '        OwnershipTransferCanceled();\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    function completeOwnershipTransfer() public returns (bool) {\n', '\n', '        require(msg.sender == proposedOwner);\n', '\n', '        owner = msg.sender;\n', '        proposedOwner = address(0);\n', '\n', '        OwnershipTransferCompleted(owner);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract TokenTransfer {\n', '    // minimal subset of ERC20\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function decimals() public view returns (uint8 tokenDecimals);\n', '    function balanceOf(address _owner) public view returns (uint256 balance);\n', '}\n', '\n', 'contract FlexibleTokenSale is  Owned {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    //\n', '    // Lifecycle\n', '    //\n', '    bool public suspended;\n', '\n', '    //\n', '    // Pricing\n', '    //\n', '    uint256 public tokenPrice;\n', '    uint256 public tokenPerEther;\n', '    uint256 public contributionMin;\n', '    uint256 public tokenConversionFactor;\n', '\n', '    //\n', '    // Wallets\n', '    //\n', '    address public walletAddress;\n', '\n', '    //\n', '    // Token\n', '    //\n', '    TokenTransfer token;\n', '\n', '\n', '    //\n', '    // Counters\n', '    //\n', '    uint256 public totalTokensSold;\n', '    uint256 public totalEtherCollected;\n', '    \n', '    //\n', '    // Price Update Address\n', '    //\n', '    address public priceUpdateAddress;\n', '\n', '\n', '    //\n', '    // Events\n', '    //\n', '    event Initialized();\n', '    event TokenPriceUpdated(uint256 _newValue);\n', '    event TokenPerEtherUpdated(uint256 _newValue);\n', '    event TokenMinUpdated(uint256 _newValue);\n', '    event WalletAddressUpdated(address indexed _newAddress);\n', '    event SaleSuspended();\n', '    event SaleResumed();\n', '    event TokensPurchased(address indexed _beneficiary, uint256 _cost, uint256 _tokens);\n', '    event TokensReclaimed(uint256 _amount);\n', '    event PriceAddressUpdated(address indexed _newAddress);\n', '\n', '\n', '    function FlexibleTokenSale(address _tokenAddress,address _walletAddress,uint _tokenPerEther,address _priceUpdateAddress) public\n', '    Owned()\n', '    {\n', '\n', '        require(_walletAddress != address(0));\n', '        require(_walletAddress != address(this));\n', '        require(address(token) == address(0));\n', '        require(address(_tokenAddress) != address(0));\n', '        require(address(_tokenAddress) != address(this));\n', '        require(address(_tokenAddress) != address(walletAddress));\n', '\n', '        walletAddress = _walletAddress;\n', '        priceUpdateAddress = _priceUpdateAddress;\n', '        token = TokenTransfer(_tokenAddress);\n', '        suspended = false;\n', '        tokenPrice = 100;\n', '        tokenPerEther = _tokenPerEther;\n', '        contributionMin     = 5 * 10**18;//minimum 5 DOC token\n', '        totalTokensSold     = 0;\n', '        totalEtherCollected = 0;\n', '        // This factor is used when converting cost <-> tokens.\n', '       // 18 is because of the ETH -> Wei conversion.\n', '      // 2 because toekn price  and etherPerToken Price are expressed as 100 for $1.00  and 100000 for $1000.00 (with 2 decimals).\n', '       tokenConversionFactor = 10**(uint256(18).sub(token.decimals()).add(2));\n', '        assert(tokenConversionFactor > 0);\n', '    }\n', '\n', '\n', '    //\n', '    // Owner Configuation\n', '    //\n', '\n', '    // Allows the owner to change the wallet address which is used for collecting\n', '    // ether received during the token sale.\n', '    function setWalletAddress(address _walletAddress) external onlyOwner returns(bool) {\n', '        require(_walletAddress != address(0));\n', '        require(_walletAddress != address(this));\n', '        require(_walletAddress != address(token));\n', '        require(isOwner(_walletAddress) == false);\n', '\n', '        walletAddress = _walletAddress;\n', '\n', '        WalletAddressUpdated(_walletAddress);\n', '\n', '        return true;\n', '    }\n', '\n', '    //set token price in between $1 to $1000, pass 111 for $1.11, 100000 for $1000\n', '    function setTokenPrice(uint _tokenPrice) external onlyOwner returns (bool) {\n', '        require(_tokenPrice >= 100 && _tokenPrice <= 100000);\n', '\n', '        tokenPrice=_tokenPrice;\n', '\n', '        TokenPriceUpdated(_tokenPrice);\n', '        return true;\n', '    }\n', '\n', '    function setMinToken(uint256 _minToken) external onlyOwner returns(bool) {\n', '        require(_minToken > 0);\n', '\n', '        contributionMin = _minToken;\n', '\n', '        TokenMinUpdated(_minToken);\n', '\n', '        return true;\n', '    }\n', '\n', '    // Allows the owner to suspend the sale until it is manually resumed at a later time.\n', '    function suspend() external onlyOwner returns(bool) {\n', '        if (suspended == true) {\n', '            return false;\n', '        }\n', '\n', '        suspended = true;\n', '\n', '        SaleSuspended();\n', '\n', '        return true;\n', '    }\n', '\n', '    // Allows the owner to resume the sale.\n', '    function resume() external onlyOwner returns(bool) {\n', '        if (suspended == false) {\n', '            return false;\n', '        }\n', '\n', '        suspended = false;\n', '\n', '        SaleResumed();\n', '\n', '        return true;\n', '    }\n', '\n', '\n', '    //\n', '    // Contributions\n', '    //\n', '\n', '    // Default payable function which can be used to purchase tokens.\n', '    function () payable public {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '\n', '    // Allows the caller to purchase tokens for a specific beneficiary (proxy purchase).\n', '    function buyTokens(address _beneficiary) public payable returns (uint256) {\n', '        require(!suspended);\n', '\n', '        require(address(token) !=  address(0));\n', '        require(_beneficiary != address(0));\n', '        require(_beneficiary != address(this));\n', '        require(_beneficiary != address(token));\n', '\n', '\n', "        // We don't want to allow the wallet collecting ETH to\n", '        // directly be used to purchase tokens.\n', '        require(msg.sender != address(walletAddress));\n', '\n', '        // Check how many tokens are still available for sale.\n', '        uint256 saleBalance = token.balanceOf(address(this));\n', '        assert(saleBalance > 0);\n', '\n', '\n', '        return buyTokensInternal(_beneficiary);\n', '    }\n', '\n', '    function updateTokenPerEther(uint _etherPrice) public returns(bool){\n', '        require(_etherPrice > 0);\n', '        require(msg.sender == priceUpdateAddress || msg.sender == owner);\n', '        tokenPerEther=_etherPrice;\n', '        TokenPerEtherUpdated(_etherPrice);\n', '        return true;\n', '    }\n', '    \n', '    function updatePriceAddress(address _newAddress) public onlyOwner returns(bool){\n', '        require(_newAddress != address(0));\n', '        priceUpdateAddress=_newAddress;\n', '        PriceAddressUpdated(_newAddress);\n', '        return true;\n', '    }\n', '\n', '\n', '    function buyTokensInternal(address _beneficiary) internal returns (uint256) {\n', '\n', '        // Calculate how many tokens the contributor could purchase based on ETH received.\n', '        uint256 tokens =msg.value.mul(tokenPerEther.mul(100).div(tokenPrice)).div(tokenConversionFactor);\n', '        require(tokens >= contributionMin);\n', '\n', '        // This is the actual amount of ETH that can be sent to the wallet.\n', '        uint256 contribution =msg.value;\n', '        walletAddress.transfer(contribution);\n', '        totalEtherCollected = totalEtherCollected.add(contribution);\n', '\n', '        // Update our stats counters.\n', '        totalTokensSold = totalTokensSold.add(tokens);\n', '\n', '        // Transfer tokens to the beneficiary.\n', '        require(token.transfer(_beneficiary, tokens));\n', '\n', '        TokensPurchased(_beneficiary, msg.value, tokens);\n', '\n', '        return tokens;\n', '    }\n', '\n', '\n', '    // Allows the owner to take back the tokens that are assigned to the sale contract.\n', '    function reclaimTokens() external onlyOwner returns (bool) {\n', '\n', '        uint256 tokens = token.balanceOf(address(this));\n', '\n', '        if (tokens == 0) {\n', '            return false;\n', '        }\n', '\n', '        require(token.transfer(owner, tokens));\n', '\n', '        TokensReclaimed(tokens);\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract DOCTokenSaleConfig {\n', '    address WALLET_ADDRESS = 0xcd6b3d0c0dd850bad071cd20e428940d2e25120f;\n', '    address TOKEN_ADDRESS = 0x39a87Dc12a7199AA012c18F114B763e27D0decA4;\n', '    address UPDATE_PRICE_ADDRESS = 0x0fb285cae5dccddb4f8ea252a16876dd3dfb0f52;\n', '    \n', '    uint ETHER_PRICE = 100000;//set current ether price. if current price 1000.00 then write 100000\n', '}\n', '\n', 'contract DOCTokenSale is FlexibleTokenSale, DOCTokenSaleConfig {\n', '\n', '    function DOCTokenSale() public\n', '    FlexibleTokenSale(TOKEN_ADDRESS,WALLET_ADDRESS,ETHER_PRICE,UPDATE_PRICE_ADDRESS)\n', '    {\n', '\n', '    }\n', '\n', '}']
