['pragma solidity 0.4.25;\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\n', '\n', '/**\n', ' * @title IERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface IERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721 is IERC165 {\n', '\n', '  event Transfer(\n', '    address indexed from,\n', '    address indexed to,\n', '    uint256 indexed tokenId\n', '  );\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed approved,\n', '    uint256 indexed tokenId\n', '  );\n', '  event ApprovalForAll(\n', '    address indexed owner,\n', '    address indexed operator,\n', '    bool approved\n', '  );\n', '\n', '  function balanceOf(address owner) public view returns (uint256 balance);\n', '  function ownerOf(uint256 tokenId) public view returns (address owner);\n', '\n', '  function approve(address to, uint256 tokenId) public;\n', '  function getApproved(uint256 tokenId)\n', '    public view returns (address operator);\n', '\n', '  function setApprovalForAll(address operator, bool _approved) public;\n', '  function isApprovedForAll(address owner, address operator)\n', '    public view returns (bool);\n', '\n', '  function transferFrom(address from, address to, uint256 tokenId) public;\n', '  function safeTransferFrom(address from, address to, uint256 tokenId)\n', '    public;\n', '\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public;\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'contract IERC721Receiver {\n', '  /**\n', '   * @notice Handle the receipt of an NFT\n', '   * @dev The ERC721 smart contract calls this function on the recipient\n', '   * after a `safeTransfer`. This function MUST return the function selector,\n', '   * otherwise the caller will revert the transaction. The selector to be\n', '   * returned can be obtained as `this.onERC721Received.selector`. This\n', '   * function MAY throw to revert and reject the transfer.\n', '   * Note: the ERC721 contract address is always the message sender.\n', '   * @param operator The address which called `safeTransferFrom` function\n', '   * @param from The address which previously owned the token\n', '   * @param tokenId The NFT identifier which is being transferred\n', '   * @param data Additional data with no specified format\n', '   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '   */\n', '  function onERC721Received(\n', '    address operator,\n', '    address from,\n', '    uint256 tokenId,\n', '    bytes data\n', '  )\n', '    public\n', '    returns(bytes4);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, reverts on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a);\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '  * reverts when dividing by zero.\n', '  */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b != 0);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/utils/Address.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library Address {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   * as the code is not actually created until after the constructor finishes.\n', '   * @param account address of the account to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(account) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '\n', '  bytes4 private constant _InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', "   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    internal\n', '  {\n', '    _registerInterface(_InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _supportedInterfaces[interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev internal method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 interfaceId)\n', '    internal\n', '  {\n', '    require(interfaceId != 0xffffffff);\n', '    _supportedInterfaces[interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721.sol\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC165, IERC721 {\n', '\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '  // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '  bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '  // Mapping from token ID to owner\n', '  mapping (uint256 => address) private _tokenOwner;\n', '\n', '  // Mapping from token ID to approved address\n', '  mapping (uint256 => address) private _tokenApprovals;\n', '\n', '  // Mapping from owner to number of owned token\n', '  mapping (address => uint256) private _ownedTokensCount;\n', '\n', '  // Mapping from owner to operator approvals\n', '  mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721 = 0x80ac58cd;\n', '  /*\n', '   * 0x80ac58cd ===\n', "   *   bytes4(keccak256('balanceOf(address)')) ^\n", "   *   bytes4(keccak256('ownerOf(uint256)')) ^\n", "   *   bytes4(keccak256('approve(address,uint256)')) ^\n", "   *   bytes4(keccak256('getApproved(uint256)')) ^\n", "   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\n", '   */\n', '\n', '  constructor()\n', '    public\n', '  {\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the balance of the specified address\n', '   * @param owner address to query the balance of\n', '   * @return uint256 representing the amount owned by the passed address\n', '   */\n', '  function balanceOf(address owner) public view returns (uint256) {\n', '    require(owner != address(0));\n', '    return _ownedTokensCount[owner];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the owner of the specified token ID\n', '   * @param tokenId uint256 ID of the token to query the owner of\n', '   * @return owner address currently marked as the owner of the given token ID\n', '   */\n', '  function ownerOf(uint256 tokenId) public view returns (address) {\n', '    address owner = _tokenOwner[tokenId];\n', '    require(owner != address(0));\n', '    return owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Approves another address to transfer the given token ID\n', '   * The zero address indicates there is no approved address.\n', '   * There can only be one approved address per token at a given time.\n', '   * Can only be called by the token owner or an approved operator.\n', '   * @param to address to be approved for the given token ID\n', '   * @param tokenId uint256 ID of the token to be approved\n', '   */\n', '  function approve(address to, uint256 tokenId) public {\n', '    address owner = ownerOf(tokenId);\n', '    require(to != owner);\n', '    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '    _tokenApprovals[tokenId] = to;\n', '    emit Approval(owner, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the approved address for a token ID, or zero if no address set\n', '   * Reverts if the token ID does not exist.\n', '   * @param tokenId uint256 ID of the token to query the approval of\n', '   * @return address currently approved for the given token ID\n', '   */\n', '  function getApproved(uint256 tokenId) public view returns (address) {\n', '    require(_exists(tokenId));\n', '    return _tokenApprovals[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Sets or unsets the approval of a given operator\n', '   * An operator is allowed to transfer all tokens of the sender on their behalf\n', '   * @param to operator address to set the approval\n', '   * @param approved representing the status of the approval to be set\n', '   */\n', '  function setApprovalForAll(address to, bool approved) public {\n', '    require(to != msg.sender);\n', '    _operatorApprovals[msg.sender][to] = approved;\n', '    emit ApprovalForAll(msg.sender, to, approved);\n', '  }\n', '\n', '  /**\n', '   * @dev Tells whether an operator is approved by a given owner\n', '   * @param owner owner address which you want to query the approval of\n', '   * @param operator operator address which you want to query the approval of\n', '   * @return bool whether the given operator is approved by the given owner\n', '   */\n', '  function isApprovedForAll(\n', '    address owner,\n', '    address operator\n', '  )\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _operatorApprovals[owner][operator];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers the ownership of a given token ID to another address\n', '   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function transferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    require(_isApprovedOrOwner(msg.sender, tokenId));\n', '    require(to != address(0));\n', '\n', '    _clearApproval(from, tokenId);\n', '    _removeTokenFrom(from, tokenId);\n', '    _addTokenTo(to, tokenId);\n', '\n', '    emit Transfer(from, to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   *\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '  */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId\n', '  )\n', '    public\n', '  {\n', '    // solium-disable-next-line arg-overflow\n', '    safeTransferFrom(from, to, tokenId, "");\n', '  }\n', '\n', '  /**\n', '   * @dev Safely transfers the ownership of a given token ID to another address\n', '   * If the target address is a contract, it must implement `onERC721Received`,\n', '   * which is called upon a safe transfer, and return the magic value\n', '   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,\n', '   * the transfer is reverted.\n', '   * Requires the msg sender to be the owner, approved, or operator\n', '   * @param from current owner of the token\n', '   * @param to address to receive the ownership of the given token ID\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes data to send along with a safe transfer check\n', '   */\n', '  function safeTransferFrom(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    public\n', '  {\n', '    transferFrom(from, to, tokenId);\n', '    // solium-disable-next-line arg-overflow\n', '    require(_checkOnERC721Received(from, to, tokenId, _data));\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the specified token exists\n', '   * @param tokenId uint256 ID of the token to query the existence of\n', '   * @return whether the token exists\n', '   */\n', '  function _exists(uint256 tokenId) internal view returns (bool) {\n', '    address owner = _tokenOwner[tokenId];\n', '    return owner != address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns whether the given spender can transfer a given token ID\n', '   * @param spender address of the spender to query\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @return bool whether the msg.sender is approved for the given token ID,\n', '   *  is an operator of the owner, or is the owner of the token\n', '   */\n', '  function _isApprovedOrOwner(\n', '    address spender,\n', '    uint256 tokenId\n', '  )\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    address owner = ownerOf(tokenId);\n', '    // Disable solium check because of\n', '    // https://github.com/duaraghav8/Solium/issues/175\n', '    // solium-disable-next-line operator-whitespace\n', '    return (\n', '      spender == owner ||\n', '      getApproved(tokenId) == spender ||\n', '      isApprovedForAll(owner, spender)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to The address that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    require(to != address(0));\n', '    _addTokenTo(to, tokenId);\n', '    emit Transfer(address(0), to, tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    _clearApproval(owner, tokenId);\n', '    _removeTokenFrom(owner, tokenId);\n', '    emit Transfer(owner, address(0), tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n', '   * intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    require(_tokenOwner[tokenId] == address(0));\n', '    _tokenOwner[tokenId] = to;\n', '    _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * Note that this function is left internal to make ERC721Enumerable possible, but is not\n', '   * intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n', "   * and doesn't clear approvals.\n", '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    require(ownerOf(tokenId) == from);\n', '    _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\n', '    _tokenOwner[tokenId] = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to invoke `onERC721Received` on a target address\n', '   * The call is not executed if the target address is not a contract\n', '   * @param from address representing the previous owner of the given token ID\n', '   * @param to target address that will receive the tokens\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   * @param _data bytes optional data to send along with the call\n', '   * @return whether the call correctly returned the expected magic value\n', '   */\n', '  function _checkOnERC721Received(\n', '    address from,\n', '    address to,\n', '    uint256 tokenId,\n', '    bytes _data\n', '  )\n', '    internal\n', '    returns (bool)\n', '  {\n', '    if (!to.isContract()) {\n', '      return true;\n', '    }\n', '    bytes4 retval = IERC721Receiver(to).onERC721Received(\n', '      msg.sender, from, tokenId, _data);\n', '    return (retval == _ERC721_RECEIVED);\n', '  }\n', '\n', '  /**\n', '   * @dev Private function to clear current approval of a given token ID\n', '   * Reverts if the given address is not indeed the owner of the token\n', '   * @param owner owner of the token\n', '   * @param tokenId uint256 ID of the token to be transferred\n', '   */\n', '  function _clearApproval(address owner, uint256 tokenId) private {\n', '    require(ownerOf(tokenId) == owner);\n', '    if (_tokenApprovals[tokenId] != address(0)) {\n', '      _tokenApprovals[tokenId] = address(0);\n', '    }\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Enumerable is IERC721 {\n', '  function totalSupply() public view returns (uint256);\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256 tokenId);\n', '\n', '  function tokenByIndex(uint256 index) public view returns (uint256);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Enumerable.sol\n', '\n', 'contract ERC721Enumerable is ERC165, ERC721, IERC721Enumerable {\n', '  // Mapping from owner to list of owned token IDs\n', '  mapping(address => uint256[]) private _ownedTokens;\n', '\n', '  // Mapping from token ID to index of the owner tokens list\n', '  mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '  // Array with all token ids, used for enumeration\n', '  uint256[] private _allTokens;\n', '\n', '  // Mapping from token id to position in the allTokens array\n', '  mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '  bytes4 private constant _InterfaceId_ERC721Enumerable = 0x780e9d63;\n', '  /**\n', '   * 0x780e9d63 ===\n', "   *   bytes4(keccak256('totalSupply()')) ^\n", "   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "   *   bytes4(keccak256('tokenByIndex(uint256)'))\n", '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor() public {\n', '    // register the supported interface to conform to ERC721 via ERC165\n', '    _registerInterface(_InterfaceId_ERC721Enumerable);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '   * @param owner address owning the tokens list to be accessed\n', '   * @param index uint256 representing the index to be accessed of the requested tokens list\n', '   * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '   */\n', '  function tokenOfOwnerByIndex(\n', '    address owner,\n', '    uint256 index\n', '  )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    require(index < balanceOf(owner));\n', '    return _ownedTokens[owner][index];\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the total amount of tokens stored by the contract\n', '   * @return uint256 representing the total amount of tokens\n', '   */\n', '  function totalSupply() public view returns (uint256) {\n', '    return _allTokens.length;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token ID at a given index of all the tokens in this contract\n', '   * Reverts if the index is greater or equal to the total number of tokens\n', '   * @param index uint256 representing the index to be accessed of the tokens list\n', '   * @return uint256 token ID at the given index of the tokens list\n', '   */\n', '  function tokenByIndex(uint256 index) public view returns (uint256) {\n', '    require(index < totalSupply());\n', '    return _allTokens[index];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to add a token ID to the list of a given address\n', '   * This function is internal due to language limitations, see the note in ERC721.sol.\n', '   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event.\n', '   * @param to address representing the new owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '   */\n', '  function _addTokenTo(address to, uint256 tokenId) internal {\n', '    super._addTokenTo(to, tokenId);\n', '    uint256 length = _ownedTokens[to].length;\n', '    _ownedTokens[to].push(tokenId);\n', '    _ownedTokensIndex[tokenId] = length;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to remove a token ID from the list of a given address\n', '   * This function is internal due to language limitations, see the note in ERC721.sol.\n', '   * It is not intended to be called by custom derived contracts: in particular, it emits no Transfer event,\n', "   * and doesn't clear approvals.\n", '   * @param from address representing the previous owner of the given token ID\n', '   * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '   */\n', '  function _removeTokenFrom(address from, uint256 tokenId) internal {\n', '    super._removeTokenFrom(from, tokenId);\n', '\n', '    // To prevent a gap in the array, we store the last token in the index of the token to delete, and\n', '    // then delete the last slot.\n', '    uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _ownedTokens[from].length.sub(1);\n', '    uint256 lastToken = _ownedTokens[from][lastTokenIndex];\n', '\n', '    _ownedTokens[from][tokenIndex] = lastToken;\n', '    // This also deletes the contents at the last position of the array\n', '    _ownedTokens[from].length--;\n', '\n', '    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '    // be zero. Then we can make sure that we will remove tokenId from the ownedTokens list since we are first swapping\n', '    // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '    _ownedTokensIndex[tokenId] = 0;\n', '    _ownedTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to mint a new token\n', '   * Reverts if the given token ID already exists\n', '   * @param to address the beneficiary that will own the minted token\n', '   * @param tokenId uint256 ID of the token to be minted by the msg.sender\n', '   */\n', '  function _mint(address to, uint256 tokenId) internal {\n', '    super._mint(to, tokenId);\n', '\n', '    _allTokensIndex[tokenId] = _allTokens.length;\n', '    _allTokens.push(tokenId);\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Reorg all tokens array\n', '    uint256 tokenIndex = _allTokensIndex[tokenId];\n', '    uint256 lastTokenIndex = _allTokens.length.sub(1);\n', '    uint256 lastToken = _allTokens[lastTokenIndex];\n', '\n', '    _allTokens[tokenIndex] = lastToken;\n', '    _allTokens[lastTokenIndex] = 0;\n', '\n', '    _allTokens.length--;\n', '    _allTokensIndex[tokenId] = 0;\n', '    _allTokensIndex[lastToken] = tokenIndex;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/IERC721Metadata.sol\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract IERC721Metadata is IERC721 {\n', '  function name() external view returns (string);\n', '  function symbol() external view returns (string);\n', '  function tokenURI(uint256 tokenId) external view returns (string);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Metadata.sol\n', '\n', 'contract ERC721Metadata is ERC165, ERC721, IERC721Metadata {\n', '  // Token name\n', '  string private _name;\n', '\n', '  // Token symbol\n', '  string private _symbol;\n', '\n', '  // Optional mapping for token URIs\n', '  mapping(uint256 => string) private _tokenURIs;\n', '\n', '  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\n', '  /**\n', '   * 0x5b5e139f ===\n', "   *   bytes4(keccak256('name()')) ^\n", "   *   bytes4(keccak256('symbol()')) ^\n", "   *   bytes4(keccak256('tokenURI(uint256)'))\n", '   */\n', '\n', '  /**\n', '   * @dev Constructor function\n', '   */\n', '  constructor(string name, string symbol) public {\n', '    _name = name;\n', '    _symbol = symbol;\n', '\n', '    // register the supported interfaces to conform to ERC721 via ERC165\n', '    _registerInterface(InterfaceId_ERC721Metadata);\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token name\n', '   * @return string representing the token name\n', '   */\n', '  function name() external view returns (string) {\n', '    return _name;\n', '  }\n', '\n', '  /**\n', '   * @dev Gets the token symbol\n', '   * @return string representing the token symbol\n', '   */\n', '  function symbol() external view returns (string) {\n', '    return _symbol;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns an URI for a given token ID\n', '   * Throws if the token ID does not exist. May return an empty string.\n', '   * @param tokenId uint256 ID of the token to query\n', '   */\n', '  function tokenURI(uint256 tokenId) external view returns (string) {\n', '    require(_exists(tokenId));\n', '    return _tokenURIs[tokenId];\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to set the token URI for a given token\n', '   * Reverts if the token ID does not exist\n', '   * @param tokenId uint256 ID of the token to set its URI\n', '   * @param uri string URI to assign\n', '   */\n', '  function _setTokenURI(uint256 tokenId, string uri) internal {\n', '    require(_exists(tokenId));\n', '    _tokenURIs[tokenId] = uri;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function to burn a specific token\n', '   * Reverts if the token does not exist\n', '   * @param owner owner of the token to burn\n', '   * @param tokenId uint256 ID of the token being burned by the msg.sender\n', '   */\n', '  function _burn(address owner, uint256 tokenId) internal {\n', '    super._burn(owner, tokenId);\n', '\n', '    // Clear metadata (if any)\n', '    if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '      delete _tokenURIs[tokenId];\n', '    }\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Full is ERC721, ERC721Enumerable, ERC721Metadata {\n', '  constructor(string name, string symbol) ERC721Metadata(name, symbol)\n', '    public\n', '  {\n', '  }\n', '}\n', '\n', '// File: contracts/Cybercon.sol\n', '\n', 'contract Cybercon is Ownable, ERC721Full {\n', '    \n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    \n', '    enum ApplicationStatus {Applied, Accepted, Declined}\n', '    \n', '    struct Talk {\n', '        string  speakerName;\n', '        string  descSpeaker;\n', '        string  deskTalk;\n', '        uint256 duration;\n', '        uint256 deposit;\n', '        address speakerAddress;\n', '        uint256 appliedAt;\n', '        bool    checkedIn;\n', '        ApplicationStatus status;\n', '        string  proof;\n', '    }\n', '    \n', '    struct Ticket {\n', '        uint256 value;\n', '        address bidderAddress;\n', '        bool    checkedIn;\n', '        bool    overbidReturned;\n', '    }\n', '    \n', '    struct CommunityBuilderMessage {\n', '        string  message;\n', '        string  link1;\n', '        string  link2;\n', '        uint256 donation;\n', '    }\n', '    \n', '    uint256 private auctionStartBlock;\n', '    uint256 private auctionStartTime;\n', '    uint256 constant private TALKS_APPLICATION_END = 1544562000;\n', '    uint256 constant private CHECKIN_START = 1544767200;\n', '    uint256 constant private CHECKIN_END = 1544788800;\n', '    uint256 constant private DISTRIBUTION_START = 1544792400;\n', '    uint256 private auctionEnd = CHECKIN_START;\n', '    // ------------\n', '    uint256 constant private INITIAL_PRICE = 3000 finney;\n', '    uint256 constant private MINIMAL_PRICE = 500 finney;\n', '    uint256 constant private BID_BLOCK_DECREASE = 30 szabo;\n', '    uint256 private endPrice = MINIMAL_PRICE;\n', '    // ------------\n', '    uint256 private ticketsAmount = 146;\n', '    uint256 constant private SPEAKERS_SLOTS = 24;\n', '    uint256 private acceptedSpeakersSlots = 0;\n', '    uint256 constant private SPEAKERS_START_SHARES = 80;\n', '    uint256 constant private SPEAKERS_END_SHARES = 20;\n', '    // ------------\n', '    uint256 private ticketsFunds = 0;\n', '    uint256 constant private MINIMAL_SPEAKER_DEPOSIT = 1000 finney;\n', '    // ------------\n', '    string constant private CYBERCON_PLACE = "Korpus 8, Minsk, Belarus";\n', '    \n', '    mapping(address => bool) private membersBidded;\n', '    uint256 private amountReturnedBids = 0;\n', '    bool private overbidsDistributed = false;\n', '    \n', '    Talk[] private speakersTalks;\n', '    Ticket[] private membersTickets;\n', '    CommunityBuilderMessage[] private communityBuildersBoard;\n', '    \n', '    string private talksGrid = "";\n', '    string private workshopsGrid = "";\n', '    \n', '    event TicketBid(\n', '        uint256 _id,\n', '        address _member,\n', '        uint256 _value\n', '    );\n', '    \n', '    event TalkApplication(\n', '        string  _name,\n', '        address _member,\n', '        uint256 _value\n', '    );\n', '    \n', '    constructor() ERC721Full("cyberc0n", "CYBERC0N")\n', '        public\n', '    {\n', '        auctionStartBlock = block.number;\n', '        auctionStartTime = block.timestamp;\n', '    }\n', '    \n', '    function() external {}\n', '    \n', '    modifier beforeApplicationStop() {\n', '        require(block.timestamp < TALKS_APPLICATION_END);\n', '        _;\n', '    }\n', '    \n', '    modifier beforeEventStart() {\n', '        require(block.timestamp < CHECKIN_START);\n', '        _;\n', '    }\n', '    \n', '    modifier duringEvent() {\n', '        require(block.timestamp >= CHECKIN_START && block.timestamp <= CHECKIN_END);\n', '        _;\n', '    }\n', '    \n', '    modifier afterDistributionStart() {\n', '        require(block.timestamp > DISTRIBUTION_START);\n', '        _;\n', '    }\n', '\n', '    function buyTicket()\n', '        external\n', '        beforeEventStart\n', '        payable\n', '    {\n', '        require(msg.value >= getCurrentPrice());\n', '        require(membersBidded[msg.sender] == false);\n', '        require(ticketsAmount > 0);\n', '        \n', '        uint256 bidId = totalSupply();\n', '        membersTickets.push(Ticket(msg.value, msg.sender, false, false));\n', '        super._mint(msg.sender, bidId);\n', '        membersBidded[msg.sender] = true;\n', '        ticketsFunds = ticketsFunds.add(msg.value);\n', '        ticketsAmount = ticketsAmount.sub(1);\n', '        \n', '        if (ticketsAmount == 0) {\n', '            auctionEnd = block.timestamp;\n', '            endPrice = msg.value;\n', '        }\n', '        \n', '        emit TicketBid(bidId, msg.sender, msg.value);\n', '    }\n', '    \n', '    function applyForTalk(\n', '        string  _speakerName,\n', '        string  _descSpeaker,\n', '        string  _deskTalk,\n', '        uint256 _duration,\n', '        string  _proof\n', '    )\n', '        external\n', '        beforeApplicationStop\n', '        payable\n', '    {\n', '        require(_duration >= 900 && _duration <= 3600);\n', '        require(msg.value >= MINIMAL_SPEAKER_DEPOSIT);\n', '        require(speakersTalks.length < 36);\n', '        \n', '        Talk memory t = (Talk(\n', '        {\n', '            speakerName: _speakerName,\n', '            descSpeaker: _descSpeaker,\n', '            deskTalk:    _deskTalk,\n', '            duration:    _duration,\n', '            deposit:     msg.value,\n', '            speakerAddress: msg.sender,\n', '            appliedAt:   block.timestamp,\n', '            checkedIn:   false,\n', '            status:      ApplicationStatus.Applied,\n', '            proof:       _proof\n', '        }));\n', '        speakersTalks.push(t);\n', '        \n', '        emit TalkApplication(_speakerName, msg.sender, msg.value);\n', '    }\n', '\n', '    function sendCommunityBuilderMessage(\n', '        uint256 _talkId,\n', '        string _message,\n', '        string _link1,\n', '        string _link2\n', '    )\n', '        external\n', '        beforeEventStart\n', '        payable\n', '    {\n', '        require(speakersTalks[_talkId].speakerAddress == msg.sender);\n', '        require(speakersTalks[_talkId].status == ApplicationStatus.Accepted);\n', '        require(msg.value > 0);\n', '        \n', '        CommunityBuilderMessage memory m = (CommunityBuilderMessage(\n', '        {\n', '            message: _message,\n', '            link1:   _link1,\n', '            link2:   _link2,\n', '            donation: msg.value\n', '        }));\n', '        communityBuildersBoard.push(m);\n', '    }\n', '    \n', '    function updateTalkDescription(\n', '        uint256 _talkId,\n', '        string  _descSpeaker,\n', '        string  _deskTalk,\n', '        string  _proof\n', '    )\n', '        external\n', '        beforeApplicationStop\n', '    {\n', '        require(msg.sender == speakersTalks[_talkId].speakerAddress);\n', '        speakersTalks[_talkId].descSpeaker = _descSpeaker;\n', '        speakersTalks[_talkId].deskTalk = _deskTalk;\n', '        speakersTalks[_talkId].proof = _proof;\n', '    }\n', '    \n', '    function acceptTalk(uint256 _talkId)\n', '        external\n', '        onlyOwner\n', '        beforeEventStart\n', '    {\n', '        require(acceptedSpeakersSlots < SPEAKERS_SLOTS); \n', '        require(speakersTalks[_talkId].status == ApplicationStatus.Applied);\n', '        acceptedSpeakersSlots = acceptedSpeakersSlots.add(1);\n', '        speakersTalks[_talkId].status = ApplicationStatus.Accepted;\n', '    }\n', '    \n', '    function declineTalk(uint256 _talkId)\n', '        external\n', '        onlyOwner\n', '        beforeEventStart\n', '    {\n', '        speakersTalks[_talkId].status = ApplicationStatus.Declined;\n', '        address speakerAddress = speakersTalks[_talkId].speakerAddress;\n', '        if (speakerAddress.isContract() == false) {\n', '            address(speakerAddress).transfer(speakersTalks[_talkId].deposit);\n', '        }\n', '    }\n', '    \n', '    function selfDeclineTalk(uint256 _talkId)\n', '        external\n', '    {\n', '        require(block.timestamp >= TALKS_APPLICATION_END && block.timestamp < CHECKIN_START);\n', '        address speakerAddress = speakersTalks[_talkId].speakerAddress;\n', '        require(msg.sender == speakerAddress);\n', '        require(speakersTalks[_talkId].status == ApplicationStatus.Applied);\n', '        speakersTalks[_talkId].status = ApplicationStatus.Declined;\n', '        if (speakerAddress.isContract() == false) {\n', '            address(speakerAddress).transfer(speakersTalks[_talkId].deposit);\n', '        }\n', '    }\n', '    \n', '    function checkinMember(uint256 _id)\n', '        external\n', '        duringEvent\n', '    {\n', '        require(membersTickets[_id].bidderAddress == msg.sender);\n', '        membersTickets[_id].checkedIn = true;\n', '    }\n', '    \n', '    function checkinSpeaker(uint256 _talkId)\n', '        external\n', '        onlyOwner\n', '        duringEvent\n', '    {\n', '        require(speakersTalks[_talkId].checkedIn == false);\n', '        require(speakersTalks[_talkId].status == ApplicationStatus.Accepted);\n', '        \n', '        uint256 bidId = totalSupply();\n', '        super._mint(msg.sender, bidId);\n', '        speakersTalks[_talkId].checkedIn = true;\n', '    }\n', '    \n', '    function distributeOverbids(uint256 _fromBid, uint256 _toBid)\n', '        external\n', '        onlyOwner\n', '        afterDistributionStart\n', '    {   \n', '        require(_fromBid <= _toBid);\n', '        uint256 checkedInSpeakers = 0;\n', '        for (uint256 y = 0; y < speakersTalks.length; y++){\n', '            if (speakersTalks[y].checkedIn) checkedInSpeakers++;\n', '        }\n', '        uint256 ticketsForMembersSupply = totalSupply().sub(checkedInSpeakers);\n', '        require(_fromBid < ticketsForMembersSupply && _toBid < ticketsForMembersSupply);\n', '        for (uint256 i = _fromBid; i <= _toBid; i++) {\n', '            require(membersTickets[i].overbidReturned == false);\n', '            address bidderAddress = membersTickets[i].bidderAddress;\n', '            uint256 overbid = (membersTickets[i].value).sub(endPrice);\n', '            if(bidderAddress.isContract() == false) {\n', '                address(bidderAddress).transfer(overbid);\n', '            }\n', '            membersTickets[i].overbidReturned = true;\n', '            amountReturnedBids++;\n', '        }\n', '        if (amountReturnedBids == ticketsForMembersSupply) {\n', '            overbidsDistributed = true;\n', '        }\n', '    }\n', '    \n', '    function distributeRewards()\n', '        external\n', '        onlyOwner\n', '        afterDistributionStart\n', '    {\n', '        require(overbidsDistributed == true);\n', '        if (acceptedSpeakersSlots > 0) {\n', '            uint256 checkedInSpeakers = 0;\n', '            for (uint256 i = 0; i < speakersTalks.length; i++){\n', '                if (speakersTalks[i].checkedIn) checkedInSpeakers++;\n', '            }\n', '            uint256 valueForTicketsForReward = endPrice.mul(membersTickets.length);\n', '            uint256 valueFromTicketsForSpeakers = valueForTicketsForReward.mul(getSpeakersShares()).div(100);\n', '            \n', '            uint256 valuePerSpeakerFromTickets = valueFromTicketsForSpeakers.div(checkedInSpeakers);\n', '            for (uint256 y = 0; y < speakersTalks.length; y++) {\n', '                address speakerAddress = speakersTalks[y].speakerAddress;\n', '                if (speakersTalks[y].checkedIn == true && speakerAddress.isContract() == false) {\n', '                    speakerAddress.transfer(valuePerSpeakerFromTickets.add(speakersTalks[y].deposit));\n', '                }\n', '            }\n', '        }\n', '        address(owner()).transfer(address(this).balance);\n', '    }\n', '    \n', '    function setTalksGrid(string _grid)\n', '        external\n', '        onlyOwner\n', '    {\n', '        talksGrid = _grid;\n', '    }\n', '    \n', '    function setWorkshopsGrid(string _grid)\n', '        external\n', '        onlyOwner\n', '    {\n', '        workshopsGrid = _grid;\n', '    }\n', '    \n', '    function getTalkById(uint256 _id)\n', '        external\n', '        view\n', '        returns(\n', '            string,\n', '            string,\n', '            string,\n', '            uint256,\n', '            uint256,\n', '            address,\n', '            uint256,\n', '            bool,\n', '            ApplicationStatus,\n', '            string \n', '        )\n', '    {\n', '        require(_id < uint256(speakersTalks.length));\n', '        Talk memory m = speakersTalks[_id];\n', '        return(\n', '            m.speakerName,\n', '            m.descSpeaker,\n', '            m.deskTalk,\n', '            m.duration,\n', '            m.deposit,\n', '            m.speakerAddress,\n', '            m.appliedAt,\n', '            m.checkedIn,\n', '            m.status,\n', '            m.proof\n', '        );\n', '    }\n', '    \n', '    function getTicket(uint256 _id)\n', '        external\n', '        view\n', '        returns(\n', '            uint256,\n', '            address,\n', '            bool,\n', '            bool\n', '        )\n', '    {\n', '        return(\n', '            membersTickets[_id].value,\n', '            membersTickets[_id].bidderAddress,\n', '            membersTickets[_id].checkedIn,\n', '            membersTickets[_id].overbidReturned\n', '        );\n', '    }\n', '    \n', '    function getAuctionStartBlock()\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return auctionStartBlock;\n', '    }\n', '    \n', '    function getAuctionStartTime()\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return auctionStartTime;\n', '    }\n', '    \n', '    function getAuctionEndTime()\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return auctionEnd;\n', '    }\n', '    \n', '    function getEventStartTime()\n', '        external\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return CHECKIN_START;\n', '    }\n', '    \n', '    function getEventEndTime()\n', '        external\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return CHECKIN_END;\n', '    }\n', '    \n', '    function getDistributionTime()\n', '        external\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return DISTRIBUTION_START;\n', '    }\n', '    \n', '    function getCurrentPrice()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 blocksPassed = block.number - auctionStartBlock;\n', '        uint256 currentDiscount = blocksPassed.mul(BID_BLOCK_DECREASE);\n', '        \n', '        if (currentDiscount < (INITIAL_PRICE - MINIMAL_PRICE)) {\n', '            return INITIAL_PRICE.sub(currentDiscount);\n', '        } else { \n', '            return MINIMAL_PRICE; \n', '        }\n', '    }\n', '    \n', '    function getEndPrice()\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return endPrice;\n', '    }\n', '    \n', '    function getMinimalPrice()\n', '        external\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return MINIMAL_PRICE;\n', '    }\n', '    \n', '    function getMinimalSpeakerDeposit()\n', '        external\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return MINIMAL_SPEAKER_DEPOSIT;\n', '    }\n', '    \n', '    function getTicketsAmount()\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return ticketsAmount;\n', '    }\n', '    \n', '    function getSpeakersSlots()\n', '        external\n', '        pure\n', '        returns(uint256)\n', '    {\n', '        return SPEAKERS_SLOTS;\n', '    }\n', '    \n', '    function getAvailableSpeaksersSlots()\n', '        external\n', '        view\n', '        returns(uint256)\n', '    { \n', '        return SPEAKERS_SLOTS.sub(acceptedSpeakersSlots); \n', '    }\n', '    \n', '    function getOrganizersShares()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        uint256 time = auctionEnd;\n', '        if (ticketsAmount > 0 && block.timestamp < CHECKIN_START) {\n', '            time = block.timestamp;\n', '        }\n', '        uint256 mul = time.sub(auctionStartTime).mul(100).div(CHECKIN_START.sub(auctionStartTime));\n', '        uint256 shares = SPEAKERS_START_SHARES.sub(SPEAKERS_END_SHARES).mul(mul).div(100);\n', '        \n', '        return SPEAKERS_END_SHARES.add(shares);\n', '    }\n', '    \n', '    function getSpeakersShares()\n', '        public\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return uint256(100).sub(getOrganizersShares());\n', '    }\n', '    \n', '    function getTicketsFunds()\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return ticketsFunds;\n', '    }\n', '    \n', '    function getPlace()\n', '        external\n', '        pure\n', '        returns(string)\n', '    { \n', '        return CYBERCON_PLACE;\n', '    }\n', '    \n', '    function getTalksGrid()\n', '        external\n', '        view\n', '        returns(string)\n', '    {\n', '        return talksGrid;\n', '    }\n', '    \n', '    function getWorkshopsGrid()\n', '        external\n', '        view\n', '        returns(string)\n', '    {\n', '        return workshopsGrid;\n', '    }\n', '    \n', '    function getCommunityBuilderMessage(uint256 _messageID)\n', '        external\n', '        view\n', '        returns(\n', '            string,\n', '            string,\n', '            string,\n', '            uint256\n', '        )\n', '    {\n', '        return(\n', '            communityBuildersBoard[_messageID].message,\n', '            communityBuildersBoard[_messageID].link1,\n', '            communityBuildersBoard[_messageID].link2,\n', '            communityBuildersBoard[_messageID].donation\n', '        );\n', '    }\n', '    \n', '    function getCommunityBuildersBoardSize()\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return communityBuildersBoard.length;\n', '    }\n', '    \n', '    function getAmountReturnedOverbids()\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return amountReturnedBids;\n', '    }\n', '}']