['pragma solidity ^0.4.21;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/subscription/Subscription.sol\n', '\n', 'contract Subscription is Ownable {\n', '  uint256 constant UINT256_MAX = ~uint256(0);\n', '  using SafeMath for uint256;\n', '\n', '  /// @dev The token being use (C8)\n', '  ERC20 public token;\n', '\n', '  /// @dev Address where fee are collected\n', '  address public wallet;\n', '\n', '  /// @dev Cost per day of membership for C8 token\n', '  uint256 public subscriptionRate;\n', '\n', '  uint public fee;\n', '\n', '  uint256 lastAppId;\n', '\n', '  struct Pricing {\n', '    uint256 day;\n', '    uint256 price;\n', '  }\n', '\n', '  struct Application {\n', '    /// @dev Application Id.\n', '    uint256 appId;\n', '\n', '    /// @dev Application name.\n', '    bytes32 appName;\n', '\n', '    /// @dev Beneficiary address.\n', '    address beneficiary;\n', '\n', '    /// @dev Owner address.\n', '    address owner;\n', '\n', '    /// @dev Timestamp of when Membership expires UserId=>timestamp of expire.\n', '    mapping(uint256 => uint256) subscriptionExpiration;\n', '\n', '    Pricing[] prices;\n', '  }\n', '\n', '  mapping(uint256 => Application) public applications;\n', '\n', '  /**\n', '   * Event for subscription purchase logging\n', '   * @param purchaser who paid for the subscription\n', '   * @param userId user id who will benefit from purchase\n', '   * @param day day of subscription purchased\n', '   * @param amount amount of subscription purchased in wei\n', '   * @param expiration expiration of user subscription.\n', '   */\n', '  event SubscriptionPurchase(\n', '    address indexed purchaser,\n', '    uint256 indexed _appId,\n', '    uint256 indexed userId,\n', '    uint256 day,\n', '    uint256 amount,\n', '    uint256 expiration\n', '  );\n', '\n', '  event Registration(\n', '    address indexed creator,\n', '    uint256 _appId,\n', '    bytes32 _appName,\n', '    uint256 _price,\n', '    address _beneficiary\n', '  );\n', '\n', '  function Subscription(\n', '    uint _fee,\n', '    address _fundWallet,\n', '    ERC20 _token) public\n', '  {\n', '    require(_token != address(0));\n', '    require(_fundWallet != address(0));\n', '    require(_fee > 0);\n', '    token = _token;\n', '    wallet = _fundWallet;\n', '    fee = _fee;\n', '    lastAppId = 0;\n', '  }\n', '\n', '  function renewSubscriptionByDays(uint256 _appId, uint256 _userId, uint _day) external {\n', '    Application storage app = applications[_appId];\n', '    require(app.appId == _appId);\n', '    require(_day >= 1);\n', '    uint256 amount = getPrice(_appId, _day);\n', '    require(amount > 0);\n', '\n', '    uint256 txFee = processFee(amount);\n', '    uint256 toAppOwner = amount.sub(txFee);\n', '    require(token.transferFrom(msg.sender, app.beneficiary, toAppOwner));\n', '\n', '    uint256 currentExpiration = app.subscriptionExpiration[_userId];\n', '    // If their membership already expired...\n', '    if (currentExpiration < now) {\n', '      // ...use `now` as the starting point of their new subscription\n', '      currentExpiration = now;\n', '    }\n', '    uint256 newExpiration = currentExpiration.add(_day.mul(1 days));\n', '    app.subscriptionExpiration[_userId] = newExpiration;\n', '    emit SubscriptionPurchase(\n', '      msg.sender,\n', '      _appId,\n', '      _userId,\n', '      _day,\n', '      amount,\n', '      newExpiration);\n', '  }\n', '\n', '  function registration(\n', '    bytes32 _appName,\n', '    uint256 _price,\n', '    address _beneficiary)\n', '  external\n', '  {\n', '    require(_appName != "");\n', '    require(_price > 0);\n', '    require(_beneficiary != address(0));\n', '    lastAppId = lastAppId.add(1);\n', '    Application storage app = applications[lastAppId];\n', '    app.appId = lastAppId;\n', '    app.appName = _appName;\n', '    app.beneficiary = _beneficiary;\n', '    app.owner = msg.sender;\n', '    app.prices.push(Pricing({\n', '      day : 1,\n', '      price : _price\n', '      }));\n', '    emit Registration(\n', '      msg.sender,\n', '      lastAppId,\n', '      _appName,\n', '      _price,\n', '      _beneficiary);\n', '  }\n', '\n', '  function setPrice(uint256 _appId, uint256[] _days, uint256[] _prices) external {\n', '    Application storage app = applications[_appId];\n', '    require(app.owner == msg.sender);\n', '    app.prices.length = 0;\n', '    for (uint i = 0; i < _days.length; i++) {\n', '      require(_days[i] > 0);\n', '      require(_prices[i] > 0);\n', '      app.prices.push(Pricing({\n', '        day : _days[i],\n', '        price : _prices[i]\n', '        }));\n', '    }\n', '  }\n', '\n', '  /// @dev Set fee percent for Carboneum team.\n', '  function setFee(uint _fee) external onlyOwner {\n', '    fee = _fee;\n', '  }\n', '\n', '  function getExpiration(uint256 _appId, uint256 _userId) public view returns (uint256) {\n', '    Application storage app = applications[_appId];\n', '    return app.subscriptionExpiration[_userId];\n', '  }\n', '\n', '  function getPrice(uint256 _appId, uint256 _day) public view returns (uint256) {\n', '    Application storage app = applications[_appId];\n', '    uint256 amount = UINT256_MAX;\n', '    for (uint i = 0; i < app.prices.length; i++) {\n', '      if (_day == app.prices[i].day) {\n', '        amount = app.prices[i].price;\n', '      } else if (_day > app.prices[i].day) {\n', '        uint256 rate = app.prices[i].price.div(app.prices[i].day);\n', '        uint256 amountInPrice = _day.mul(rate);\n', '        if (amountInPrice < amount) {\n', '          amount = amountInPrice;\n', '        }\n', '      }\n', '    }\n', '    if (amount == UINT256_MAX) {\n', '      amount = 0;\n', '    }\n', '    return amount;\n', '  }\n', '\n', '  function processFee(uint256 _weiAmount) internal returns (uint256) {\n', '    uint256 txFee = _weiAmount.mul(fee).div(100);\n', '    require(token.transferFrom(msg.sender, wallet, txFee));\n', '    return txFee;\n', '  }\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/subscription/Subscription.sol\n', '\n', 'contract Subscription is Ownable {\n', '  uint256 constant UINT256_MAX = ~uint256(0);\n', '  using SafeMath for uint256;\n', '\n', '  /// @dev The token being use (C8)\n', '  ERC20 public token;\n', '\n', '  /// @dev Address where fee are collected\n', '  address public wallet;\n', '\n', '  /// @dev Cost per day of membership for C8 token\n', '  uint256 public subscriptionRate;\n', '\n', '  uint public fee;\n', '\n', '  uint256 lastAppId;\n', '\n', '  struct Pricing {\n', '    uint256 day;\n', '    uint256 price;\n', '  }\n', '\n', '  struct Application {\n', '    /// @dev Application Id.\n', '    uint256 appId;\n', '\n', '    /// @dev Application name.\n', '    bytes32 appName;\n', '\n', '    /// @dev Beneficiary address.\n', '    address beneficiary;\n', '\n', '    /// @dev Owner address.\n', '    address owner;\n', '\n', '    /// @dev Timestamp of when Membership expires UserId=>timestamp of expire.\n', '    mapping(uint256 => uint256) subscriptionExpiration;\n', '\n', '    Pricing[] prices;\n', '  }\n', '\n', '  mapping(uint256 => Application) public applications;\n', '\n', '  /**\n', '   * Event for subscription purchase logging\n', '   * @param purchaser who paid for the subscription\n', '   * @param userId user id who will benefit from purchase\n', '   * @param day day of subscription purchased\n', '   * @param amount amount of subscription purchased in wei\n', '   * @param expiration expiration of user subscription.\n', '   */\n', '  event SubscriptionPurchase(\n', '    address indexed purchaser,\n', '    uint256 indexed _appId,\n', '    uint256 indexed userId,\n', '    uint256 day,\n', '    uint256 amount,\n', '    uint256 expiration\n', '  );\n', '\n', '  event Registration(\n', '    address indexed creator,\n', '    uint256 _appId,\n', '    bytes32 _appName,\n', '    uint256 _price,\n', '    address _beneficiary\n', '  );\n', '\n', '  function Subscription(\n', '    uint _fee,\n', '    address _fundWallet,\n', '    ERC20 _token) public\n', '  {\n', '    require(_token != address(0));\n', '    require(_fundWallet != address(0));\n', '    require(_fee > 0);\n', '    token = _token;\n', '    wallet = _fundWallet;\n', '    fee = _fee;\n', '    lastAppId = 0;\n', '  }\n', '\n', '  function renewSubscriptionByDays(uint256 _appId, uint256 _userId, uint _day) external {\n', '    Application storage app = applications[_appId];\n', '    require(app.appId == _appId);\n', '    require(_day >= 1);\n', '    uint256 amount = getPrice(_appId, _day);\n', '    require(amount > 0);\n', '\n', '    uint256 txFee = processFee(amount);\n', '    uint256 toAppOwner = amount.sub(txFee);\n', '    require(token.transferFrom(msg.sender, app.beneficiary, toAppOwner));\n', '\n', '    uint256 currentExpiration = app.subscriptionExpiration[_userId];\n', '    // If their membership already expired...\n', '    if (currentExpiration < now) {\n', '      // ...use `now` as the starting point of their new subscription\n', '      currentExpiration = now;\n', '    }\n', '    uint256 newExpiration = currentExpiration.add(_day.mul(1 days));\n', '    app.subscriptionExpiration[_userId] = newExpiration;\n', '    emit SubscriptionPurchase(\n', '      msg.sender,\n', '      _appId,\n', '      _userId,\n', '      _day,\n', '      amount,\n', '      newExpiration);\n', '  }\n', '\n', '  function registration(\n', '    bytes32 _appName,\n', '    uint256 _price,\n', '    address _beneficiary)\n', '  external\n', '  {\n', '    require(_appName != "");\n', '    require(_price > 0);\n', '    require(_beneficiary != address(0));\n', '    lastAppId = lastAppId.add(1);\n', '    Application storage app = applications[lastAppId];\n', '    app.appId = lastAppId;\n', '    app.appName = _appName;\n', '    app.beneficiary = _beneficiary;\n', '    app.owner = msg.sender;\n', '    app.prices.push(Pricing({\n', '      day : 1,\n', '      price : _price\n', '      }));\n', '    emit Registration(\n', '      msg.sender,\n', '      lastAppId,\n', '      _appName,\n', '      _price,\n', '      _beneficiary);\n', '  }\n', '\n', '  function setPrice(uint256 _appId, uint256[] _days, uint256[] _prices) external {\n', '    Application storage app = applications[_appId];\n', '    require(app.owner == msg.sender);\n', '    app.prices.length = 0;\n', '    for (uint i = 0; i < _days.length; i++) {\n', '      require(_days[i] > 0);\n', '      require(_prices[i] > 0);\n', '      app.prices.push(Pricing({\n', '        day : _days[i],\n', '        price : _prices[i]\n', '        }));\n', '    }\n', '  }\n', '\n', '  /// @dev Set fee percent for Carboneum team.\n', '  function setFee(uint _fee) external onlyOwner {\n', '    fee = _fee;\n', '  }\n', '\n', '  function getExpiration(uint256 _appId, uint256 _userId) public view returns (uint256) {\n', '    Application storage app = applications[_appId];\n', '    return app.subscriptionExpiration[_userId];\n', '  }\n', '\n', '  function getPrice(uint256 _appId, uint256 _day) public view returns (uint256) {\n', '    Application storage app = applications[_appId];\n', '    uint256 amount = UINT256_MAX;\n', '    for (uint i = 0; i < app.prices.length; i++) {\n', '      if (_day == app.prices[i].day) {\n', '        amount = app.prices[i].price;\n', '      } else if (_day > app.prices[i].day) {\n', '        uint256 rate = app.prices[i].price.div(app.prices[i].day);\n', '        uint256 amountInPrice = _day.mul(rate);\n', '        if (amountInPrice < amount) {\n', '          amount = amountInPrice;\n', '        }\n', '      }\n', '    }\n', '    if (amount == UINT256_MAX) {\n', '      amount = 0;\n', '    }\n', '    return amount;\n', '  }\n', '\n', '  function processFee(uint256 _weiAmount) internal returns (uint256) {\n', '    uint256 txFee = _weiAmount.mul(fee).div(100);\n', '    require(token.transferFrom(msg.sender, wallet, txFee));\n', '    return txFee;\n', '  }\n', '}']
