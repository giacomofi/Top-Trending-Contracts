['pragma solidity ^0.4.21;\n', '\n', '// SafeMath is a part of Zeppelin Solidity library\n', '// licensed under MIT License\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/LICENSE\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// https://github.com/OpenZeppelin/zeppelin-solidity\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev Protection from short address attack\n', '    */\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length == size + 4);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        _postTransferHook(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Hook for custom actions to be executed after transfer has completed\n', '    * @param _from Transferred from\n', '    * @param _to Transferred to\n', '    * @param _value Value transferred\n', '    */\n', '    function _postTransferHook(address _from, address _to, uint256 _value) internal;\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        _postTransferHook(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '     * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Owned {\n', '    address owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /// @dev Contract constructor\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', '\n', 'contract AcceptsTokens {\n', '    ETToken public tokenContract;\n', '\n', '    function AcceptsTokens(address _tokenContract) public {\n', '        tokenContract = ETToken(_tokenContract);\n', '    }\n', '\n', '    modifier onlyTokenContract {\n', '        require(msg.sender == address(tokenContract));\n', '        _;\n', '    }\n', '\n', '    function acceptTokens(address _from, uint256 _value, uint256 param1, uint256 param2, uint256 param3) external;\n', '}\n', '\n', 'contract ETToken is Owned, StandardToken {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "ETH.TOWN Token";\n', '    string public symbol = "ETIT";\n', '    uint8 public decimals = 18;\n', '\n', '    address public beneficiary;\n', '    address public oracle;\n', '    address public heroContract;\n', '    modifier onlyOracle {\n', '        require(msg.sender == oracle);\n', '        _;\n', '    }\n', '\n', '    mapping (uint32 => address) public floorContracts;\n', '    mapping (address => bool) public canAcceptTokens;\n', '\n', '    mapping (address => bool) public isMinter;\n', '\n', '    modifier onlyMinters {\n', '        require(msg.sender == owner || isMinter[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    event Dividend(uint256 value);\n', '    event Withdrawal(address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function ETToken() public {\n', '        oracle = owner;\n', '        beneficiary = owner;\n', '\n', '        totalSupply_ = 0;\n', '    }\n', '\n', '    function setOracle(address _oracle) external onlyOwner {\n', '        oracle = _oracle;\n', '    }\n', '    function setBeneficiary(address _beneficiary) external onlyOwner {\n', '        beneficiary = _beneficiary;\n', '    }\n', '    function setHeroContract(address _heroContract) external onlyOwner {\n', '        heroContract = _heroContract;\n', '    }\n', '\n', '    function _mintTokens(address _user, uint256 _amount) private {\n', '        require(_user != 0x0);\n', '\n', '        balances[_user] = balances[_user].add(_amount);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '\n', '        emit Transfer(address(this), _user, _amount);\n', '    }\n', '\n', '    function authorizeFloor(uint32 _index, address _floorContract) external onlyOwner {\n', '        floorContracts[_index] = _floorContract;\n', '    }\n', '\n', '    function _acceptDividends(uint256 _value) internal {\n', '        uint256 beneficiaryShare = _value / 5;\n', '        uint256 poolShare = _value.sub(beneficiaryShare);\n', '\n', '        beneficiary.transfer(beneficiaryShare);\n', '\n', '        emit Dividend(poolShare);\n', '    }\n', '\n', '    function acceptDividends(uint256 _value, uint32 _floorIndex) external {\n', '        require(floorContracts[_floorIndex] == msg.sender);\n', '\n', '        _acceptDividends(_value);\n', '    }\n', '\n', '    function rewardTokensFloor(address _user, uint256 _tokens, uint32 _floorIndex) external {\n', '        require(floorContracts[_floorIndex] == msg.sender);\n', '\n', '        _mintTokens(_user, _tokens);\n', '    }\n', '\n', '    function rewardTokens(address _user, uint256 _tokens) external onlyMinters {\n', '        _mintTokens(_user, _tokens);\n', '    }\n', '\n', '    function() payable public {\n', '        // Intentionally left empty, for use by floors\n', '    }\n', '\n', '    function payoutDividends(address _user, uint256 _value) external onlyOracle {\n', '        _user.transfer(_value);\n', '\n', '        emit Withdrawal(_user, _value);\n', '    }\n', '\n', '    function accountAuth(uint256 /*_challenge*/) external {\n', '        // Does nothing by design\n', '    }\n', '\n', '    function burn(uint256 _amount) external {\n', '        require(balances[msg.sender] >= _amount);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '\n', '        emit Burn(msg.sender, _amount);\n', '    }\n', '\n', '    function setCanAcceptTokens(address _address, bool _value) external onlyOwner {\n', '        canAcceptTokens[_address] = _value;\n', '    }\n', '\n', '    function setIsMinter(address _address, bool _value) external onlyOwner {\n', '        isMinter[_address] = _value;\n', '    }\n', '\n', '    function _invokeTokenRecipient(address _from, address _to, uint256 _value, uint256 _param1, uint256 _param2, uint256 _param3) internal {\n', '        if (!canAcceptTokens[_to]) {\n', '            return;\n', '        }\n', '\n', '        AcceptsTokens recipient = AcceptsTokens(_to);\n', '\n', '        recipient.acceptTokens(_from, _value, _param1, _param2, _param3);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address and forward the parameters to token recipient if any\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @param _param1 Parameter 1 for the token recipient\n', '    * @param _param2 Parameter 2 for the token recipient\n', '    * @param _param3 Parameter 3 for the token recipient\n', '    */\n', '    function transferWithParams(address _to, uint256 _value, uint256 _param1, uint256 _param2, uint256 _param3) onlyPayloadSize(5 * 32) external returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        _invokeTokenRecipient(msg.sender, _to, _value, _param1, _param2, _param3);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Hook for custom actions to be executed after transfer has completed\n', '    * @param _from Transferred from\n', '    * @param _to Transferred to\n', '    * @param _value Value transferred\n', '    */\n', '    function _postTransferHook(address _from, address _to, uint256 _value) internal {\n', '        _invokeTokenRecipient(_from, _to, _value, 0, 0, 0);\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '\n', 'contract Floor is Owned {\n', '    using SafeMath for uint;\n', '\n', '    enum FloorStatus {\n', '        NotYet,         // 0\n', '        Auctioning,     // 1\n', '        Sold            // 2\n', '    }\n', '\n', '    ETToken baseContract;\n', '    uint32 public floorId;\n', '    FloorStatus public status = FloorStatus.NotYet;\n', '    address public winner;\n', '\n', '    event Bid(address indexed from, uint256 value);\n', '    event FloorWon(address indexed from, uint256 value);\n', '    event Payout(address indexed to, uint256 value);\n', '\n', '    modifier onlyOracle {\n', '        require(msg.sender == baseContract.oracle());\n', '        _;\n', '    }\n', '    modifier onlyOwnerOrOracle {\n', '        require(msg.sender == owner || msg.sender == baseContract.oracle());\n', '        _;\n', '    }\n', '\n', '    function Floor(uint32 _floorId, address _baseContract) public {\n', '        baseContract = ETToken(_baseContract);\n', '        floorId = _floorId;\n', '    }\n', '\n', '\n', '    function _isContract(address _user) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(_user) }\n', '        return size > 0;\n', '    }\n', '\n', '    function _processDividends(uint256 _value) internal {\n', '        if (_value > 0) {\n', '            address(baseContract).transfer(_value);\n', '            baseContract.acceptDividends(_value, floorId);\n', '        }\n', '    }\n', '\n', '    function _processCredit(address _user, uint256 _value) internal {\n', '        if (_value > 0) {\n', '            _user.transfer(_value);\n', '        }\n', '    }\n', '\n', '    function _rewardTokens(address _user, uint256 _tokens) internal {\n', '        if (_tokens > 0) {\n', '            baseContract.rewardTokensFloor(_user, _tokens, floorId);\n', '        }\n', '    }\n', '}\n', '\n', 'contract StarAuction {\n', '    address public highestBidder;\n', '    bool public ended;\n', '}\n', '\n', 'contract CharacterSale {\n', '    mapping (address => uint32[]) public characters;\n', '}\n', '\n', 'contract CauldronsMinigamePresale is Floor, AcceptsTokens {\n', '    using SafeMath for uint;\n', '\n', '    bool public enabled;\n', '\n', '    enum CauldronType {\n', '        NoCauldron,\n', '        EtherCauldron,\n', '        EtitCauldron\n', '    }\n', '\n', '    struct Cauldron {\n', '        uint256 timerDuration;\n', '        CauldronType cauldronType;\n', '\n', '        uint32 currentRound;\n', '        uint256 expirationTimer;\n', '\n', '        mapping(uint32 => address[]) contributors;\n', '        uint32 contributorsCount;\n', '        mapping(uint32 => mapping(address => uint256)) contributions;\n', '        uint256 totalContribution;\n', '        address topContributor;\n', '    }\n', '\n', '    mapping(uint8 => Cauldron) public cauldrons;\n', '\n', '    uint constant numStarAuctions = 12;\n', '    mapping(uint8 => StarAuction) public starAuctions; // auction 7 = horse\n', '\n', '    event Contribution(address indexed from, uint256 value, uint8 cauldronId, uint32 round);\n', '    event Winner(address user, uint256 value, uint8 cauldronId, uint32 round);\n', '\n', '    function CauldronsMinigamePresale(uint32 _floorId, address _baseContract)\n', '        Floor(_floorId, _baseContract)\n', '        AcceptsTokens(_baseContract)\n', '        public\n', '    {\n', '        enabled = true;\n', '\n', '        cauldrons[1] = Cauldron({\n', '            timerDuration: 5 minutes,\n', '            cauldronType: CauldronType.EtherCauldron,\n', '\n', '            currentRound: 1,\n', '            expirationTimer: 0,\n', '\n', '            contributorsCount: 0,\n', '            totalContribution: 0,\n', '            topContributor: 0\n', '        });\n', '        cauldrons[2] = Cauldron({\n', '            timerDuration: 20 minutes,\n', '            cauldronType: CauldronType.EtitCauldron,\n', '\n', '            currentRound: 1,\n', '            expirationTimer: 0,\n', '\n', '            contributorsCount: 0,\n', '            totalContribution: 0,\n', '            topContributor: 0\n', '        });\n', '        cauldrons[3] = Cauldron({\n', '            timerDuration: 60 minutes,\n', '            cauldronType: CauldronType.EtherCauldron,\n', '\n', '            currentRound: 1,\n', '            expirationTimer: 0,\n', '\n', '            contributorsCount: 0,\n', '            totalContribution: 0,\n', '            topContributor: 0\n', '        });\n', '        cauldrons[4] = Cauldron({\n', '            timerDuration: 120 minutes,\n', '            cauldronType: CauldronType.EtitCauldron,\n', '\n', '            currentRound: 1,\n', '            expirationTimer: 0,\n', '\n', '            contributorsCount: 0,\n', '            totalContribution: 0,\n', '            topContributor: 0\n', '        });\n', '        cauldrons[5] = Cauldron({\n', '            timerDuration: 12 hours,\n', '            cauldronType: CauldronType.EtherCauldron,\n', '\n', '            currentRound: 1,\n', '            expirationTimer: 0,\n', '\n', '            contributorsCount: 0,\n', '            totalContribution: 0,\n', '            topContributor: 0\n', '        });\n', '    }\n', '\n', '    function isCauldronExpired(uint8 _cauldronId) public view returns (bool) {\n', '        return cauldrons[_cauldronId].expirationTimer != 0 && cauldrons[_cauldronId].expirationTimer < now;\n', '    }\n', '\n', '    function horseMaster() public view returns (address) {\n', '        if (address(starAuctions[7]) == 0x0) {\n', '            return 0x0;\n', '        } else {\n', '            return starAuctions[7].highestBidder();\n', '        }\n', '    }\n', '\n', '    function() public payable {\n', '        // Not accepting Ether directly\n', '        revert();\n', '    }\n', '\n', '    function setEnabled(bool _enabled) public onlyOwner {\n', '        enabled = _enabled;\n', '    }\n', '\n', '    function setStarAuction(uint8 _id, address _address) public onlyOwner {\n', '        starAuctions[_id] = StarAuction(_address);\n', '    }\n', '\n', '    function _acceptContribution(address _from, uint256 _value, uint8 _cauldronId) internal {\n', '        require(!isCauldronExpired(_cauldronId));\n', '\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        uint256 existingContribution = cauldron.contributions[cauldron.currentRound][_from];\n', '\n', '        if (existingContribution == 0) {\n', '            cauldron.contributors[cauldron.currentRound].push(_from);\n', '            cauldron.contributorsCount ++;\n', '        }\n', '\n', '        uint256 userNewContribution = existingContribution.add(_value);\n', '\n', '        cauldron.contributions[cauldron.currentRound][_from] = userNewContribution;\n', '        cauldron.totalContribution = cauldron.totalContribution.add(_value);\n', '\n', '        if (userNewContribution > cauldron.contributions[cauldron.currentRound][cauldron.topContributor]) {\n', '            cauldron.topContributor = _from;\n', '        }\n', '\n', '        uint8 peopleToStart = _cauldronId == 1 ? 10 : 3;\n', '        if (cauldron.expirationTimer == 0 && cauldron.contributorsCount >= peopleToStart) {\n', '            cauldron.expirationTimer = now + cauldron.timerDuration;\n', '        }\n', '\n', '        emit Contribution(_from, _value, _cauldronId, cauldron.currentRound);\n', '    }\n', '\n', '    function acceptTokens(address _from, uint256 _value, uint256 _cauldronId, uint256 /*param2*/, uint256 /*param3*/) external onlyTokenContract {\n', '        require(!_isContract(_from));\n', '        require(enabled);\n', '        require(cauldrons[uint8(_cauldronId)].cauldronType == CauldronType.EtitCauldron);\n', '        require(_value >= 1 finney);\n', '\n', '        _acceptContribution(_from, _value, uint8(_cauldronId));\n', '    }\n', '\n', '    function acceptEther(uint8 _cauldronId) external payable {\n', '        require(!_isContract(msg.sender));\n', '        require(enabled);\n', '        require(cauldrons[_cauldronId].cauldronType == CauldronType.EtherCauldron);\n', '        require(msg.value >= 1 finney);\n', '\n', '        _acceptContribution(msg.sender, msg.value, _cauldronId);\n', '    }\n', '\n', '    function _rotateCauldron(uint8 _cauldronId) internal {\n', '        require(isCauldronExpired(_cauldronId));\n', '\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        cauldron.currentRound ++;\n', '        cauldron.expirationTimer = 0;\n', '\n', '        cauldron.contributorsCount = 0;\n', '        cauldron.totalContribution = 0;\n', '        cauldron.topContributor = 0;\n', '    }\n', '\n', '    function calculateReward(uint256 totalValue, uint256 basePercent, uint8 level) public pure returns (uint256) {\n', '        // Reward = totalValue * rewardPercent%\n', '        // rewardPercent = basePercent*(91.5..99%)\n', '        uint256 levelAddition = uint256(level).mul(5); // 0..15 -> 0..75\n', '        uint256 modificationPercent = levelAddition.add(915);\n', '\n', '        uint256 finalPercent1000 = basePercent.mul(modificationPercent); // 0..100000\n', '\n', '        assert(finalPercent1000 / 1000 <= basePercent);\n', '        assert(finalPercent1000 <= 100000);\n', '\n', '        return totalValue.mul(finalPercent1000).div(100000);\n', '    }\n', '\n', '    function pickWinners(\n', '        uint8 _cauldronId,\n', '        address winner1,\n', '        address winner2,\n', '        address winner3,\n', '        uint8 winner1Level,\n', '        uint8 winner2Level,\n', '        uint8 winner3Level\n', '    ) external onlyOracle {\n', '        require(isCauldronExpired(_cauldronId) || !enabled);\n', '\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        require(cauldron.contributions[cauldron.currentRound][winner1] > 0);\n', '        require(cauldron.contributions[cauldron.currentRound][winner2] > 0);\n', '        require(cauldron.contributions[cauldron.currentRound][winner3] > 0);\n', '\n', '        require(winner1Level <= 15);\n', '        require(winner2Level <= 15);\n', '        require(winner3Level <= 15);\n', '\n', '        uint256 winner1Reward = calculateReward(cauldron.totalContribution, 50, winner1Level);\n', '        uint256 winner2Reward = calculateReward(cauldron.totalContribution, 35, winner2Level);\n', '        uint256 winner3Reward = calculateReward(cauldron.totalContribution, 15, winner3Level);\n', '\n', '        uint256 remainingReward =\n', '            cauldron.totalContribution\n', '                .sub(winner1Reward)\n', '                .sub(winner2Reward)\n', '                .sub(winner3Reward);\n', '\n', '        if (cauldron.cauldronType == CauldronType.EtherCauldron) {\n', '            winner1.transfer(winner1Reward);\n', '            winner2.transfer(winner2Reward);\n', '            winner3.transfer(winner3Reward);\n', '\n', '            // Infernal Horse owner gets 5% of the remainder\n', '            if (horseMaster() != 0x0) {\n', '                remainingReward = remainingReward.sub(remainingReward.mul(5).div(100));\n', '                horseMaster().transfer(remainingReward.mul(5).div(100));\n', '            }\n', '\n', '            // The rest of the remainder goes to the ETIT Dividend pool\n', '            _processDividends(remainingReward);\n', '\n', '        } else if (cauldron.cauldronType == CauldronType.EtitCauldron) {\n', '            baseContract.transfer(winner1, winner1Reward);\n', '            baseContract.transfer(winner2, winner2Reward);\n', '            baseContract.transfer(winner3, winner3Reward);\n', '\n', '            // Excess ETIT tokens are burned\n', '            baseContract.burn(remainingReward);\n', '        }\n', '\n', '        emit Winner(winner1, winner1Reward, _cauldronId, cauldron.currentRound);\n', '        emit Winner(winner2, winner2Reward, _cauldronId, cauldron.currentRound);\n', '        emit Winner(winner3, winner3Reward, _cauldronId, cauldron.currentRound);\n', '\n', '        _rotateCauldron(_cauldronId);\n', '    }\n', '\n', '\n', '    function contributorsOfCauldron(uint8 _cauldronId) public view returns (address[]) {\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        return cauldron.contributors[cauldron.currentRound];\n', '    }\n', '\n', '    function contributionInCauldron(uint8 _cauldronId, address _user) public view returns (uint256) {\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        return cauldron.contributions[cauldron.currentRound][_user];\n', '    }\n', '\n', '    function contributorsOfCauldronRound(uint8 _cauldronId, uint32 _round) public view returns (address[]) {\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        return cauldron.contributors[_round];\n', '    }\n', '\n', '    function contributionInCauldronRound(uint8 _cauldronId, address _user, uint32 _round) public view returns (uint256) {\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        return cauldron.contributions[_round][_user];\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.21;\n', '\n', '// SafeMath is a part of Zeppelin Solidity library\n', '// licensed under MIT License\n', '// https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/LICENSE\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '// https://github.com/OpenZeppelin/zeppelin-solidity\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function balanceOf(address who) public view returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '    function allowance(address owner, address spender) public view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '    function approve(address spender, uint256 value) public returns (bool);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) balances;\n', '\n', '    uint256 totalSupply_;\n', '\n', '    /**\n', '    * @dev Protection from short address attack\n', '    */\n', '    modifier onlyPayloadSize(uint size) {\n', '        assert(msg.data.length == size + 4);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        _postTransferHook(msg.sender, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Hook for custom actions to be executed after transfer has completed\n', '    * @param _from Transferred from\n', '    * @param _to Transferred to\n', '    * @param _value Value transferred\n', '    */\n', '    function _postTransferHook(address _from, address _to, uint256 _value) internal;\n', '}\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '    mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '\n', '        _postTransferHook(_from, _to, _value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '     *\n', '     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _value The amount of tokens to be spent.\n', '     */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract Owned {\n', '    address owner;\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /// @dev Contract constructor\n', '    function Owned() public {\n', '        owner = msg.sender;\n', '    }\n', '}\n', '\n', '\n', 'contract AcceptsTokens {\n', '    ETToken public tokenContract;\n', '\n', '    function AcceptsTokens(address _tokenContract) public {\n', '        tokenContract = ETToken(_tokenContract);\n', '    }\n', '\n', '    modifier onlyTokenContract {\n', '        require(msg.sender == address(tokenContract));\n', '        _;\n', '    }\n', '\n', '    function acceptTokens(address _from, uint256 _value, uint256 param1, uint256 param2, uint256 param3) external;\n', '}\n', '\n', 'contract ETToken is Owned, StandardToken {\n', '    using SafeMath for uint;\n', '\n', '    string public name = "ETH.TOWN Token";\n', '    string public symbol = "ETIT";\n', '    uint8 public decimals = 18;\n', '\n', '    address public beneficiary;\n', '    address public oracle;\n', '    address public heroContract;\n', '    modifier onlyOracle {\n', '        require(msg.sender == oracle);\n', '        _;\n', '    }\n', '\n', '    mapping (uint32 => address) public floorContracts;\n', '    mapping (address => bool) public canAcceptTokens;\n', '\n', '    mapping (address => bool) public isMinter;\n', '\n', '    modifier onlyMinters {\n', '        require(msg.sender == owner || isMinter[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    event Dividend(uint256 value);\n', '    event Withdrawal(address indexed to, uint256 value);\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '    function ETToken() public {\n', '        oracle = owner;\n', '        beneficiary = owner;\n', '\n', '        totalSupply_ = 0;\n', '    }\n', '\n', '    function setOracle(address _oracle) external onlyOwner {\n', '        oracle = _oracle;\n', '    }\n', '    function setBeneficiary(address _beneficiary) external onlyOwner {\n', '        beneficiary = _beneficiary;\n', '    }\n', '    function setHeroContract(address _heroContract) external onlyOwner {\n', '        heroContract = _heroContract;\n', '    }\n', '\n', '    function _mintTokens(address _user, uint256 _amount) private {\n', '        require(_user != 0x0);\n', '\n', '        balances[_user] = balances[_user].add(_amount);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '\n', '        emit Transfer(address(this), _user, _amount);\n', '    }\n', '\n', '    function authorizeFloor(uint32 _index, address _floorContract) external onlyOwner {\n', '        floorContracts[_index] = _floorContract;\n', '    }\n', '\n', '    function _acceptDividends(uint256 _value) internal {\n', '        uint256 beneficiaryShare = _value / 5;\n', '        uint256 poolShare = _value.sub(beneficiaryShare);\n', '\n', '        beneficiary.transfer(beneficiaryShare);\n', '\n', '        emit Dividend(poolShare);\n', '    }\n', '\n', '    function acceptDividends(uint256 _value, uint32 _floorIndex) external {\n', '        require(floorContracts[_floorIndex] == msg.sender);\n', '\n', '        _acceptDividends(_value);\n', '    }\n', '\n', '    function rewardTokensFloor(address _user, uint256 _tokens, uint32 _floorIndex) external {\n', '        require(floorContracts[_floorIndex] == msg.sender);\n', '\n', '        _mintTokens(_user, _tokens);\n', '    }\n', '\n', '    function rewardTokens(address _user, uint256 _tokens) external onlyMinters {\n', '        _mintTokens(_user, _tokens);\n', '    }\n', '\n', '    function() payable public {\n', '        // Intentionally left empty, for use by floors\n', '    }\n', '\n', '    function payoutDividends(address _user, uint256 _value) external onlyOracle {\n', '        _user.transfer(_value);\n', '\n', '        emit Withdrawal(_user, _value);\n', '    }\n', '\n', '    function accountAuth(uint256 /*_challenge*/) external {\n', '        // Does nothing by design\n', '    }\n', '\n', '    function burn(uint256 _amount) external {\n', '        require(balances[msg.sender] >= _amount);\n', '\n', '        balances[msg.sender] = balances[msg.sender].sub(_amount);\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '\n', '        emit Burn(msg.sender, _amount);\n', '    }\n', '\n', '    function setCanAcceptTokens(address _address, bool _value) external onlyOwner {\n', '        canAcceptTokens[_address] = _value;\n', '    }\n', '\n', '    function setIsMinter(address _address, bool _value) external onlyOwner {\n', '        isMinter[_address] = _value;\n', '    }\n', '\n', '    function _invokeTokenRecipient(address _from, address _to, uint256 _value, uint256 _param1, uint256 _param2, uint256 _param3) internal {\n', '        if (!canAcceptTokens[_to]) {\n', '            return;\n', '        }\n', '\n', '        AcceptsTokens recipient = AcceptsTokens(_to);\n', '\n', '        recipient.acceptTokens(_from, _value, _param1, _param2, _param3);\n', '    }\n', '\n', '    /**\n', '    * @dev transfer token for a specified address and forward the parameters to token recipient if any\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    * @param _param1 Parameter 1 for the token recipient\n', '    * @param _param2 Parameter 2 for the token recipient\n', '    * @param _param3 Parameter 3 for the token recipient\n', '    */\n', '    function transferWithParams(address _to, uint256 _value, uint256 _param1, uint256 _param2, uint256 _param3) onlyPayloadSize(5 * 32) external returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[msg.sender]);\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '\n', '        _invokeTokenRecipient(msg.sender, _to, _value, _param1, _param2, _param3);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Hook for custom actions to be executed after transfer has completed\n', '    * @param _from Transferred from\n', '    * @param _to Transferred to\n', '    * @param _value Value transferred\n', '    */\n', '    function _postTransferHook(address _from, address _to, uint256 _value) internal {\n', '        _invokeTokenRecipient(_from, _to, _value, 0, 0, 0);\n', '    }\n', '\n', '\n', '}\n', '\n', '\n', '\n', 'contract Floor is Owned {\n', '    using SafeMath for uint;\n', '\n', '    enum FloorStatus {\n', '        NotYet,         // 0\n', '        Auctioning,     // 1\n', '        Sold            // 2\n', '    }\n', '\n', '    ETToken baseContract;\n', '    uint32 public floorId;\n', '    FloorStatus public status = FloorStatus.NotYet;\n', '    address public winner;\n', '\n', '    event Bid(address indexed from, uint256 value);\n', '    event FloorWon(address indexed from, uint256 value);\n', '    event Payout(address indexed to, uint256 value);\n', '\n', '    modifier onlyOracle {\n', '        require(msg.sender == baseContract.oracle());\n', '        _;\n', '    }\n', '    modifier onlyOwnerOrOracle {\n', '        require(msg.sender == owner || msg.sender == baseContract.oracle());\n', '        _;\n', '    }\n', '\n', '    function Floor(uint32 _floorId, address _baseContract) public {\n', '        baseContract = ETToken(_baseContract);\n', '        floorId = _floorId;\n', '    }\n', '\n', '\n', '    function _isContract(address _user) internal view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(_user) }\n', '        return size > 0;\n', '    }\n', '\n', '    function _processDividends(uint256 _value) internal {\n', '        if (_value > 0) {\n', '            address(baseContract).transfer(_value);\n', '            baseContract.acceptDividends(_value, floorId);\n', '        }\n', '    }\n', '\n', '    function _processCredit(address _user, uint256 _value) internal {\n', '        if (_value > 0) {\n', '            _user.transfer(_value);\n', '        }\n', '    }\n', '\n', '    function _rewardTokens(address _user, uint256 _tokens) internal {\n', '        if (_tokens > 0) {\n', '            baseContract.rewardTokensFloor(_user, _tokens, floorId);\n', '        }\n', '    }\n', '}\n', '\n', 'contract StarAuction {\n', '    address public highestBidder;\n', '    bool public ended;\n', '}\n', '\n', 'contract CharacterSale {\n', '    mapping (address => uint32[]) public characters;\n', '}\n', '\n', 'contract CauldronsMinigamePresale is Floor, AcceptsTokens {\n', '    using SafeMath for uint;\n', '\n', '    bool public enabled;\n', '\n', '    enum CauldronType {\n', '        NoCauldron,\n', '        EtherCauldron,\n', '        EtitCauldron\n', '    }\n', '\n', '    struct Cauldron {\n', '        uint256 timerDuration;\n', '        CauldronType cauldronType;\n', '\n', '        uint32 currentRound;\n', '        uint256 expirationTimer;\n', '\n', '        mapping(uint32 => address[]) contributors;\n', '        uint32 contributorsCount;\n', '        mapping(uint32 => mapping(address => uint256)) contributions;\n', '        uint256 totalContribution;\n', '        address topContributor;\n', '    }\n', '\n', '    mapping(uint8 => Cauldron) public cauldrons;\n', '\n', '    uint constant numStarAuctions = 12;\n', '    mapping(uint8 => StarAuction) public starAuctions; // auction 7 = horse\n', '\n', '    event Contribution(address indexed from, uint256 value, uint8 cauldronId, uint32 round);\n', '    event Winner(address user, uint256 value, uint8 cauldronId, uint32 round);\n', '\n', '    function CauldronsMinigamePresale(uint32 _floorId, address _baseContract)\n', '        Floor(_floorId, _baseContract)\n', '        AcceptsTokens(_baseContract)\n', '        public\n', '    {\n', '        enabled = true;\n', '\n', '        cauldrons[1] = Cauldron({\n', '            timerDuration: 5 minutes,\n', '            cauldronType: CauldronType.EtherCauldron,\n', '\n', '            currentRound: 1,\n', '            expirationTimer: 0,\n', '\n', '            contributorsCount: 0,\n', '            totalContribution: 0,\n', '            topContributor: 0\n', '        });\n', '        cauldrons[2] = Cauldron({\n', '            timerDuration: 20 minutes,\n', '            cauldronType: CauldronType.EtitCauldron,\n', '\n', '            currentRound: 1,\n', '            expirationTimer: 0,\n', '\n', '            contributorsCount: 0,\n', '            totalContribution: 0,\n', '            topContributor: 0\n', '        });\n', '        cauldrons[3] = Cauldron({\n', '            timerDuration: 60 minutes,\n', '            cauldronType: CauldronType.EtherCauldron,\n', '\n', '            currentRound: 1,\n', '            expirationTimer: 0,\n', '\n', '            contributorsCount: 0,\n', '            totalContribution: 0,\n', '            topContributor: 0\n', '        });\n', '        cauldrons[4] = Cauldron({\n', '            timerDuration: 120 minutes,\n', '            cauldronType: CauldronType.EtitCauldron,\n', '\n', '            currentRound: 1,\n', '            expirationTimer: 0,\n', '\n', '            contributorsCount: 0,\n', '            totalContribution: 0,\n', '            topContributor: 0\n', '        });\n', '        cauldrons[5] = Cauldron({\n', '            timerDuration: 12 hours,\n', '            cauldronType: CauldronType.EtherCauldron,\n', '\n', '            currentRound: 1,\n', '            expirationTimer: 0,\n', '\n', '            contributorsCount: 0,\n', '            totalContribution: 0,\n', '            topContributor: 0\n', '        });\n', '    }\n', '\n', '    function isCauldronExpired(uint8 _cauldronId) public view returns (bool) {\n', '        return cauldrons[_cauldronId].expirationTimer != 0 && cauldrons[_cauldronId].expirationTimer < now;\n', '    }\n', '\n', '    function horseMaster() public view returns (address) {\n', '        if (address(starAuctions[7]) == 0x0) {\n', '            return 0x0;\n', '        } else {\n', '            return starAuctions[7].highestBidder();\n', '        }\n', '    }\n', '\n', '    function() public payable {\n', '        // Not accepting Ether directly\n', '        revert();\n', '    }\n', '\n', '    function setEnabled(bool _enabled) public onlyOwner {\n', '        enabled = _enabled;\n', '    }\n', '\n', '    function setStarAuction(uint8 _id, address _address) public onlyOwner {\n', '        starAuctions[_id] = StarAuction(_address);\n', '    }\n', '\n', '    function _acceptContribution(address _from, uint256 _value, uint8 _cauldronId) internal {\n', '        require(!isCauldronExpired(_cauldronId));\n', '\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        uint256 existingContribution = cauldron.contributions[cauldron.currentRound][_from];\n', '\n', '        if (existingContribution == 0) {\n', '            cauldron.contributors[cauldron.currentRound].push(_from);\n', '            cauldron.contributorsCount ++;\n', '        }\n', '\n', '        uint256 userNewContribution = existingContribution.add(_value);\n', '\n', '        cauldron.contributions[cauldron.currentRound][_from] = userNewContribution;\n', '        cauldron.totalContribution = cauldron.totalContribution.add(_value);\n', '\n', '        if (userNewContribution > cauldron.contributions[cauldron.currentRound][cauldron.topContributor]) {\n', '            cauldron.topContributor = _from;\n', '        }\n', '\n', '        uint8 peopleToStart = _cauldronId == 1 ? 10 : 3;\n', '        if (cauldron.expirationTimer == 0 && cauldron.contributorsCount >= peopleToStart) {\n', '            cauldron.expirationTimer = now + cauldron.timerDuration;\n', '        }\n', '\n', '        emit Contribution(_from, _value, _cauldronId, cauldron.currentRound);\n', '    }\n', '\n', '    function acceptTokens(address _from, uint256 _value, uint256 _cauldronId, uint256 /*param2*/, uint256 /*param3*/) external onlyTokenContract {\n', '        require(!_isContract(_from));\n', '        require(enabled);\n', '        require(cauldrons[uint8(_cauldronId)].cauldronType == CauldronType.EtitCauldron);\n', '        require(_value >= 1 finney);\n', '\n', '        _acceptContribution(_from, _value, uint8(_cauldronId));\n', '    }\n', '\n', '    function acceptEther(uint8 _cauldronId) external payable {\n', '        require(!_isContract(msg.sender));\n', '        require(enabled);\n', '        require(cauldrons[_cauldronId].cauldronType == CauldronType.EtherCauldron);\n', '        require(msg.value >= 1 finney);\n', '\n', '        _acceptContribution(msg.sender, msg.value, _cauldronId);\n', '    }\n', '\n', '    function _rotateCauldron(uint8 _cauldronId) internal {\n', '        require(isCauldronExpired(_cauldronId));\n', '\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        cauldron.currentRound ++;\n', '        cauldron.expirationTimer = 0;\n', '\n', '        cauldron.contributorsCount = 0;\n', '        cauldron.totalContribution = 0;\n', '        cauldron.topContributor = 0;\n', '    }\n', '\n', '    function calculateReward(uint256 totalValue, uint256 basePercent, uint8 level) public pure returns (uint256) {\n', '        // Reward = totalValue * rewardPercent%\n', '        // rewardPercent = basePercent*(91.5..99%)\n', '        uint256 levelAddition = uint256(level).mul(5); // 0..15 -> 0..75\n', '        uint256 modificationPercent = levelAddition.add(915);\n', '\n', '        uint256 finalPercent1000 = basePercent.mul(modificationPercent); // 0..100000\n', '\n', '        assert(finalPercent1000 / 1000 <= basePercent);\n', '        assert(finalPercent1000 <= 100000);\n', '\n', '        return totalValue.mul(finalPercent1000).div(100000);\n', '    }\n', '\n', '    function pickWinners(\n', '        uint8 _cauldronId,\n', '        address winner1,\n', '        address winner2,\n', '        address winner3,\n', '        uint8 winner1Level,\n', '        uint8 winner2Level,\n', '        uint8 winner3Level\n', '    ) external onlyOracle {\n', '        require(isCauldronExpired(_cauldronId) || !enabled);\n', '\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        require(cauldron.contributions[cauldron.currentRound][winner1] > 0);\n', '        require(cauldron.contributions[cauldron.currentRound][winner2] > 0);\n', '        require(cauldron.contributions[cauldron.currentRound][winner3] > 0);\n', '\n', '        require(winner1Level <= 15);\n', '        require(winner2Level <= 15);\n', '        require(winner3Level <= 15);\n', '\n', '        uint256 winner1Reward = calculateReward(cauldron.totalContribution, 50, winner1Level);\n', '        uint256 winner2Reward = calculateReward(cauldron.totalContribution, 35, winner2Level);\n', '        uint256 winner3Reward = calculateReward(cauldron.totalContribution, 15, winner3Level);\n', '\n', '        uint256 remainingReward =\n', '            cauldron.totalContribution\n', '                .sub(winner1Reward)\n', '                .sub(winner2Reward)\n', '                .sub(winner3Reward);\n', '\n', '        if (cauldron.cauldronType == CauldronType.EtherCauldron) {\n', '            winner1.transfer(winner1Reward);\n', '            winner2.transfer(winner2Reward);\n', '            winner3.transfer(winner3Reward);\n', '\n', '            // Infernal Horse owner gets 5% of the remainder\n', '            if (horseMaster() != 0x0) {\n', '                remainingReward = remainingReward.sub(remainingReward.mul(5).div(100));\n', '                horseMaster().transfer(remainingReward.mul(5).div(100));\n', '            }\n', '\n', '            // The rest of the remainder goes to the ETIT Dividend pool\n', '            _processDividends(remainingReward);\n', '\n', '        } else if (cauldron.cauldronType == CauldronType.EtitCauldron) {\n', '            baseContract.transfer(winner1, winner1Reward);\n', '            baseContract.transfer(winner2, winner2Reward);\n', '            baseContract.transfer(winner3, winner3Reward);\n', '\n', '            // Excess ETIT tokens are burned\n', '            baseContract.burn(remainingReward);\n', '        }\n', '\n', '        emit Winner(winner1, winner1Reward, _cauldronId, cauldron.currentRound);\n', '        emit Winner(winner2, winner2Reward, _cauldronId, cauldron.currentRound);\n', '        emit Winner(winner3, winner3Reward, _cauldronId, cauldron.currentRound);\n', '\n', '        _rotateCauldron(_cauldronId);\n', '    }\n', '\n', '\n', '    function contributorsOfCauldron(uint8 _cauldronId) public view returns (address[]) {\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        return cauldron.contributors[cauldron.currentRound];\n', '    }\n', '\n', '    function contributionInCauldron(uint8 _cauldronId, address _user) public view returns (uint256) {\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        return cauldron.contributions[cauldron.currentRound][_user];\n', '    }\n', '\n', '    function contributorsOfCauldronRound(uint8 _cauldronId, uint32 _round) public view returns (address[]) {\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        return cauldron.contributors[_round];\n', '    }\n', '\n', '    function contributionInCauldronRound(uint8 _cauldronId, address _user, uint32 _round) public view returns (uint256) {\n', '        Cauldron storage cauldron = cauldrons[_cauldronId];\n', '\n', '        return cauldron.contributions[_round][_user];\n', '    }\n', '\n', '}']
