['pragma solidity ^0.4.24;\n', '\n', ' \n', '\n', 'contract Kman{\n', '\n', '     /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '\n', '   // Only owner allowed.\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '   // The tokens can never be stolen.\n', '    modifier notBIT(address aContract)\n', '    {\n', '        require(aContract != address(BITcontract));\n', '        _;\n', '    } \n', '\n', '    modifier isOpenToPublic()\n', '    {\n', '        require(openToPublic);\n', '        _;\n', '    }\n', '\n', '    modifier onlyRealPeople()\n', '    {\n', '          require (msg.sender == tx.origin);\n', '        _;\n', '    }\n', '    \n', '    \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '\n', '   event WinnerPaid\n', '   (\n', '        uint256 amount,\n', '        address winner\n', '    );\n', '    \n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '\n', '    BIT BITcontract;  //a reference to the 8thereum contract\n', '    address owner;\n', '    bool openToPublic = false; \n', '    uint256 devFee;\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '\n', '    constructor() public\n', '    {\n', '        BITcontract = BIT(0x645f0c9695F2B970E623aE29538FdB1A67bd6b6E); //8thereum contract\n', '        openToPublic = false;\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    function BITBalanceOf(address someAddress) public view returns(uint256)\n', '    {\n', '        return BITcontract.balanceOf(someAddress);\n', '    }\n', '    \n', '    function getTokensPaidToGame(address customerAddress) public view returns (uint256)\n', '    {\n', '       return BITcontract.gamePlayers(address(this), customerAddress);\n', '    }\n', '\n', '    function firstPlacePot() public view returns(uint256)\n', '    {\n', '       uint256 balance = BITBalanceOf(this);\n', '       return balance / 4;\n', '    }\n', '    \n', '    function secondPlacePot() public view returns(uint256)\n', '    {\n', '       uint256 balance = BITBalanceOf(this);\n', '       return (balance * 15)/ 100;\n', '    }\n', '    \n', '    function thirdPlacePot() public view returns(uint256)\n', '    {\n', '       uint256 balance = BITBalanceOf(this);\n', '       return balance / 10;\n', '    }\n', '\n', '   \n', '\n', '     /*======================================\n', '     =          OWNER ONLY FUNCTIONS        =\n', '     ======================================*/\n', '\n', '   //give the people access to play\n', '    function openToThePublic()\n', '       onlyOwner()\n', '        public\n', '    {\n', '        openToPublic = true;\n', '    }\n', '\n', '    //Pay tournament winners\n', '    function PayWinners(address first, address second, address third) \n', '    public \n', '    isOpenToPublic()\n', '    onlyRealPeople() \n', '    onlyOwner()\n', '    {\n', '        uint256 balance = BITBalanceOf(this);\n', '        devFee = balance / 20;\n', '        balance -= devFee;\n', '        uint256 firstPlace = balance / 4;\n', '        uint256 secondPlace = (balance * 15)/ 100;\n', '        uint256 thirdPlace = (balance / 10);\n', '        \n', '        BITcontract.transfer(first, firstPlace);\n', '        BITcontract.transfer(second, secondPlace); \n', '        BITcontract.transfer(third, thirdPlace);\n', '        BITcontract.transfer(owner, devFee);\n', '        \n', '        \n', '        emit WinnerPaid(firstPlace, first);\n', '        emit WinnerPaid(secondPlace, second);\n', '        emit WinnerPaid(thirdPlace, third);\n', '    }\n', '    \n', '    \n', '     /* A trap door for when someone sends tokens other than the intended ones so the overseers\n', '      can decide where to send them. (credit: Doublr Contract) */\n', '    function returnAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens)\n', '    public\n', '    onlyOwner()\n', '    notBIT(tokenAddress)\n', '    returns (bool success)\n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Interface\n', '{\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '}  \n', '\n', '//Need to ensure the Lottery contract knows what a test token is\n', 'contract BIT\n', '{\n', '    function transfer(address, uint256) public returns(bool);\n', '    mapping(address => mapping(address => uint256)) public gamePlayers;\n', '    function balanceOf(address customerAddress) public view returns(uint256);\n', '}']
['pragma solidity ^0.4.24;\n', '\n', ' \n', '\n', 'contract Kman{\n', '\n', '     /*=================================\n', '    =            MODIFIERS            =\n', '    =================================*/\n', '\n', '   // Only owner allowed.\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '   // The tokens can never be stolen.\n', '    modifier notBIT(address aContract)\n', '    {\n', '        require(aContract != address(BITcontract));\n', '        _;\n', '    } \n', '\n', '    modifier isOpenToPublic()\n', '    {\n', '        require(openToPublic);\n', '        _;\n', '    }\n', '\n', '    modifier onlyRealPeople()\n', '    {\n', '          require (msg.sender == tx.origin);\n', '        _;\n', '    }\n', '    \n', '    \n', '    /*==============================\n', '    =            EVENTS            =\n', '    ==============================*/\n', '\n', '\n', '   event WinnerPaid\n', '   (\n', '        uint256 amount,\n', '        address winner\n', '    );\n', '    \n', '\n', '    /*=====================================\n', '    =            CONFIGURABLES            =\n', '    =====================================*/\n', '\n', '    BIT BITcontract;  //a reference to the 8thereum contract\n', '    address owner;\n', '    bool openToPublic = false; \n', '    uint256 devFee;\n', '\n', '\n', '    /*=======================================\n', '    =            PUBLIC FUNCTIONS            =\n', '    =======================================*/\n', '\n', '    constructor() public\n', '    {\n', '        BITcontract = BIT(0x645f0c9695F2B970E623aE29538FdB1A67bd6b6E); //8thereum contract\n', '        openToPublic = false;\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    function BITBalanceOf(address someAddress) public view returns(uint256)\n', '    {\n', '        return BITcontract.balanceOf(someAddress);\n', '    }\n', '    \n', '    function getTokensPaidToGame(address customerAddress) public view returns (uint256)\n', '    {\n', '       return BITcontract.gamePlayers(address(this), customerAddress);\n', '    }\n', '\n', '    function firstPlacePot() public view returns(uint256)\n', '    {\n', '       uint256 balance = BITBalanceOf(this);\n', '       return balance / 4;\n', '    }\n', '    \n', '    function secondPlacePot() public view returns(uint256)\n', '    {\n', '       uint256 balance = BITBalanceOf(this);\n', '       return (balance * 15)/ 100;\n', '    }\n', '    \n', '    function thirdPlacePot() public view returns(uint256)\n', '    {\n', '       uint256 balance = BITBalanceOf(this);\n', '       return balance / 10;\n', '    }\n', '\n', '   \n', '\n', '     /*======================================\n', '     =          OWNER ONLY FUNCTIONS        =\n', '     ======================================*/\n', '\n', '   //give the people access to play\n', '    function openToThePublic()\n', '       onlyOwner()\n', '        public\n', '    {\n', '        openToPublic = true;\n', '    }\n', '\n', '    //Pay tournament winners\n', '    function PayWinners(address first, address second, address third) \n', '    public \n', '    isOpenToPublic()\n', '    onlyRealPeople() \n', '    onlyOwner()\n', '    {\n', '        uint256 balance = BITBalanceOf(this);\n', '        devFee = balance / 20;\n', '        balance -= devFee;\n', '        uint256 firstPlace = balance / 4;\n', '        uint256 secondPlace = (balance * 15)/ 100;\n', '        uint256 thirdPlace = (balance / 10);\n', '        \n', '        BITcontract.transfer(first, firstPlace);\n', '        BITcontract.transfer(second, secondPlace); \n', '        BITcontract.transfer(third, thirdPlace);\n', '        BITcontract.transfer(owner, devFee);\n', '        \n', '        \n', '        emit WinnerPaid(firstPlace, first);\n', '        emit WinnerPaid(secondPlace, second);\n', '        emit WinnerPaid(thirdPlace, third);\n', '    }\n', '    \n', '    \n', '     /* A trap door for when someone sends tokens other than the intended ones so the overseers\n', '      can decide where to send them. (credit: Doublr Contract) */\n', '    function returnAnyERC20Token(address tokenAddress, address tokenOwner, uint tokens)\n', '    public\n', '    onlyOwner()\n', '    notBIT(tokenAddress)\n', '    returns (bool success)\n', '    {\n', '        return ERC20Interface(tokenAddress).transfer(tokenOwner, tokens);\n', '    }\n', '\n', '}\n', '\n', 'contract ERC20Interface\n', '{\n', '    function transfer(address to, uint256 tokens) public returns (bool success);\n', '}  \n', '\n', '//Need to ensure the Lottery contract knows what a test token is\n', 'contract BIT\n', '{\n', '    function transfer(address, uint256) public returns(bool);\n', '    mapping(address => mapping(address => uint256)) public gamePlayers;\n', '    function balanceOf(address customerAddress) public view returns(uint256);\n', '}']
