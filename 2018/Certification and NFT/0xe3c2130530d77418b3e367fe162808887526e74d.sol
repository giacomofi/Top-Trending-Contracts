['// File: contracts/StakeInterface.sol\n', '\n', 'contract StakeInterface {\n', '  function hasStake(address _address) external view returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/MainframeStake.sol\n', '\n', 'contract MainframeStake is Ownable, StakeInterface {\n', '  using SafeMath for uint256;\n', '\n', '  ERC20 token;\n', '  uint256 public arrayLimit = 200;\n', '  uint256 public totalDepositBalance;\n', '  uint256 public requiredStake;\n', '  mapping (address => uint256) public balances;\n', '\n', '  struct Staker {\n', '    uint256 stakedAmount;\n', '    address stakerAddress;\n', '  }\n', '\n', '  mapping (address => Staker) public whitelist; // map of whitelisted addresses for efficient hasStaked check\n', '\n', '  constructor(address tokenAddress) public {\n', '    token = ERC20(tokenAddress);\n', '    requiredStake = 1 ether; // ether = 10^18\n', '  }\n', '\n', '  /**\n', '  * @dev Staking MFT for a node address\n', '  * @param whitelistAddress representing the address of the node you want to stake for\n', '  */\n', '\n', '  function stake(address whitelistAddress) external returns (bool success) {\n', '    require(whitelist[whitelistAddress].stakerAddress == 0x0);\n', '\n', '    whitelist[whitelistAddress].stakerAddress = msg.sender;\n', '    whitelist[whitelistAddress].stakedAmount = requiredStake;\n', '\n', '    deposit(msg.sender, requiredStake);\n', '    emit Staked(msg.sender, whitelistAddress);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Unstake a staked node address, will remove from whitelist and refund stake\n', '  * @param whitelistAddress representing the staked node address\n', '  */\n', '\n', '  function unstake(address whitelistAddress) external {\n', '    require(whitelist[whitelistAddress].stakerAddress == msg.sender);\n', '\n', '    uint256 stakedAmount = whitelist[whitelistAddress].stakedAmount;\n', '    delete whitelist[whitelistAddress];\n', '\n', '    withdraw(msg.sender, stakedAmount);\n', '    emit Unstaked(msg.sender, whitelistAddress);\n', '  }\n', '\n', '  /**\n', '  * @dev Deposit stake amount\n', '  * @param fromAddress representing the address to deposit from\n', '  * @param depositAmount representing amount being deposited\n', '  */\n', '\n', '  function deposit(address fromAddress, uint256 depositAmount) private returns (bool success) {\n', '    token.transferFrom(fromAddress, this, depositAmount);\n', '    balances[fromAddress] = balances[fromAddress].add(depositAmount);\n', '    totalDepositBalance = totalDepositBalance.add(depositAmount);\n', '    emit Deposit(fromAddress, depositAmount, balances[fromAddress]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Withdraw funds after unstaking\n', '  * @param toAddress representing the stakers address to withdraw to\n', '  * @param withdrawAmount representing stake amount being withdrawn\n', '  */\n', '\n', '  function withdraw(address toAddress, uint256 withdrawAmount) private returns (bool success) {\n', '    require(balances[toAddress] >= withdrawAmount);\n', '    token.transfer(toAddress, withdrawAmount);\n', '    balances[toAddress] = balances[toAddress].sub(withdrawAmount);\n', '    totalDepositBalance = totalDepositBalance.sub(withdrawAmount);\n', '    emit Withdrawal(toAddress, withdrawAmount, balances[toAddress]);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _address) external view returns (uint256 balance) {\n', '    return balances[_address];\n', '  }\n', '\n', '  function totalStaked() external view returns (uint256) {\n', '    return totalDepositBalance;\n', '  }\n', '\n', '  function hasStake(address _address) external view returns (bool) {\n', '    return whitelist[_address].stakedAmount > 0;\n', '  }\n', '\n', '  function requiredStake() external view returns (uint256) {\n', '    return requiredStake;\n', '  }\n', '\n', '  function setRequiredStake(uint256 value) external onlyOwner {\n', '    requiredStake = value;\n', '  }\n', '\n', '  function setArrayLimit(uint256 newLimit) external onlyOwner {\n', '    arrayLimit = newLimit;\n', '  }\n', '\n', '  function refundBalances(address[] addresses) external onlyOwner {\n', '    require(addresses.length <= arrayLimit);\n', '    for (uint256 i = 0; i < addresses.length; i++) {\n', '      address _address = addresses[i];\n', '      require(balances[_address] > 0);\n', '      token.transfer(_address, balances[_address]);\n', '      totalDepositBalance = totalDepositBalance.sub(balances[_address]);\n', '      emit RefundedBalance(_address, balances[_address]);\n', '      balances[_address] = 0;\n', '    }\n', '  }\n', '\n', '  function emergencyERC20Drain(ERC20 _token) external onlyOwner {\n', '    // owner can drain tokens that are sent here by mistake\n', '    uint256 drainAmount;\n', '    if (address(_token) == address(token)) {\n', '      drainAmount = _token.balanceOf(this).sub(totalDepositBalance);\n', '    } else {\n', '      drainAmount = _token.balanceOf(this);\n', '    }\n', '    _token.transfer(owner, drainAmount);\n', '  }\n', '\n', '  function destroy() external onlyOwner {\n', '    require(token.balanceOf(this) == 0);\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  event Staked(address indexed owner, address whitelistAddress);\n', '  event Unstaked(address indexed owner, address whitelistAddress);\n', '  event Deposit(address indexed _address, uint256 depositAmount, uint256 balance);\n', '  event Withdrawal(address indexed _address, uint256 withdrawAmount, uint256 balance);\n', '  event RefundedBalance(address indexed _address, uint256 refundAmount);\n', '}']
['// File: contracts/StakeInterface.sol\n', '\n', 'contract StakeInterface {\n', '  function hasStake(address _address) external view returns (bool);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/MainframeStake.sol\n', '\n', 'contract MainframeStake is Ownable, StakeInterface {\n', '  using SafeMath for uint256;\n', '\n', '  ERC20 token;\n', '  uint256 public arrayLimit = 200;\n', '  uint256 public totalDepositBalance;\n', '  uint256 public requiredStake;\n', '  mapping (address => uint256) public balances;\n', '\n', '  struct Staker {\n', '    uint256 stakedAmount;\n', '    address stakerAddress;\n', '  }\n', '\n', '  mapping (address => Staker) public whitelist; // map of whitelisted addresses for efficient hasStaked check\n', '\n', '  constructor(address tokenAddress) public {\n', '    token = ERC20(tokenAddress);\n', '    requiredStake = 1 ether; // ether = 10^18\n', '  }\n', '\n', '  /**\n', '  * @dev Staking MFT for a node address\n', '  * @param whitelistAddress representing the address of the node you want to stake for\n', '  */\n', '\n', '  function stake(address whitelistAddress) external returns (bool success) {\n', '    require(whitelist[whitelistAddress].stakerAddress == 0x0);\n', '\n', '    whitelist[whitelistAddress].stakerAddress = msg.sender;\n', '    whitelist[whitelistAddress].stakedAmount = requiredStake;\n', '\n', '    deposit(msg.sender, requiredStake);\n', '    emit Staked(msg.sender, whitelistAddress);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Unstake a staked node address, will remove from whitelist and refund stake\n', '  * @param whitelistAddress representing the staked node address\n', '  */\n', '\n', '  function unstake(address whitelistAddress) external {\n', '    require(whitelist[whitelistAddress].stakerAddress == msg.sender);\n', '\n', '    uint256 stakedAmount = whitelist[whitelistAddress].stakedAmount;\n', '    delete whitelist[whitelistAddress];\n', '\n', '    withdraw(msg.sender, stakedAmount);\n', '    emit Unstaked(msg.sender, whitelistAddress);\n', '  }\n', '\n', '  /**\n', '  * @dev Deposit stake amount\n', '  * @param fromAddress representing the address to deposit from\n', '  * @param depositAmount representing amount being deposited\n', '  */\n', '\n', '  function deposit(address fromAddress, uint256 depositAmount) private returns (bool success) {\n', '    token.transferFrom(fromAddress, this, depositAmount);\n', '    balances[fromAddress] = balances[fromAddress].add(depositAmount);\n', '    totalDepositBalance = totalDepositBalance.add(depositAmount);\n', '    emit Deposit(fromAddress, depositAmount, balances[fromAddress]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Withdraw funds after unstaking\n', '  * @param toAddress representing the stakers address to withdraw to\n', '  * @param withdrawAmount representing stake amount being withdrawn\n', '  */\n', '\n', '  function withdraw(address toAddress, uint256 withdrawAmount) private returns (bool success) {\n', '    require(balances[toAddress] >= withdrawAmount);\n', '    token.transfer(toAddress, withdrawAmount);\n', '    balances[toAddress] = balances[toAddress].sub(withdrawAmount);\n', '    totalDepositBalance = totalDepositBalance.sub(withdrawAmount);\n', '    emit Withdrawal(toAddress, withdrawAmount, balances[toAddress]);\n', '    return true;\n', '  }\n', '\n', '  function balanceOf(address _address) external view returns (uint256 balance) {\n', '    return balances[_address];\n', '  }\n', '\n', '  function totalStaked() external view returns (uint256) {\n', '    return totalDepositBalance;\n', '  }\n', '\n', '  function hasStake(address _address) external view returns (bool) {\n', '    return whitelist[_address].stakedAmount > 0;\n', '  }\n', '\n', '  function requiredStake() external view returns (uint256) {\n', '    return requiredStake;\n', '  }\n', '\n', '  function setRequiredStake(uint256 value) external onlyOwner {\n', '    requiredStake = value;\n', '  }\n', '\n', '  function setArrayLimit(uint256 newLimit) external onlyOwner {\n', '    arrayLimit = newLimit;\n', '  }\n', '\n', '  function refundBalances(address[] addresses) external onlyOwner {\n', '    require(addresses.length <= arrayLimit);\n', '    for (uint256 i = 0; i < addresses.length; i++) {\n', '      address _address = addresses[i];\n', '      require(balances[_address] > 0);\n', '      token.transfer(_address, balances[_address]);\n', '      totalDepositBalance = totalDepositBalance.sub(balances[_address]);\n', '      emit RefundedBalance(_address, balances[_address]);\n', '      balances[_address] = 0;\n', '    }\n', '  }\n', '\n', '  function emergencyERC20Drain(ERC20 _token) external onlyOwner {\n', '    // owner can drain tokens that are sent here by mistake\n', '    uint256 drainAmount;\n', '    if (address(_token) == address(token)) {\n', '      drainAmount = _token.balanceOf(this).sub(totalDepositBalance);\n', '    } else {\n', '      drainAmount = _token.balanceOf(this);\n', '    }\n', '    _token.transfer(owner, drainAmount);\n', '  }\n', '\n', '  function destroy() external onlyOwner {\n', '    require(token.balanceOf(this) == 0);\n', '    selfdestruct(owner);\n', '  }\n', '\n', '  event Staked(address indexed owner, address whitelistAddress);\n', '  event Unstaked(address indexed owner, address whitelistAddress);\n', '  event Deposit(address indexed _address, uint256 depositAmount, uint256 balance);\n', '  event Withdrawal(address indexed _address, uint256 withdrawAmount, uint256 balance);\n', '  event RefundedBalance(address indexed _address, uint256 refundAmount);\n', '}']
