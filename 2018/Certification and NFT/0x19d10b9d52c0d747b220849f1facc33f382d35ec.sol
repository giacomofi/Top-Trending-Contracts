['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract IERC20 {\n', '\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', 'contract QPSEToken is IERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Token properties\n', '    string public name = "Qompass";\n', '    string public symbol = "QPSE";\n', '    uint public decimals = 18;\n', '\n', '    uint private constant STAGE_PRE_ICO = 1;\n', '    uint private constant STAGE_MAIN_ICO = 2;\n', '\n', '    uint public ico_stage = 0;\n', '    uint public _totalSupply = 33000000e18;\n', '\n', '    uint public _icoSupply = 20000000e18; // crowdsale 70%\n', '    uint public _presaleSupply = 8000000e18;\n', '    uint public _mainsaleSupply = 12000000e18;\n', '    uint public _futureSupply = 13000000e18;\n', '                                    \n', '//    uint256 public pre_startTime = 1522904400;  //2018/04/08 00:00:00 UTC + 8\n', '    uint256 public pre_endTime = 1523854800;    //2018/04/16 00:00:00 UTC + 8\n', '\t\n', '    uint256 public ico_startTime = 1523854800;  //2018/04/16 00:00:00 UTC + 8\n', '//    uint256 public ico_endTime = 1533074400;    //2018/08/01 00:00:00 UTC + 8\n', '\n', '    address eth_addr = 0xE3a08428160C8B7872EcaB35578D3304239a5748;\n', '    address token_addr = 0xDB882cFbA6A483b7e0FdedCF2aa50fA311DD392e;\n', '\n', '//    address eth_addr = 0x5A745e3A30CB59980BB86442B6B19c317585cd8e;\n', '//    address token_addr = 0x6f5A6AAfD56AF48673F0DDd32621dC140F16212a;\n', '\n', '    // Balances for each account\n', '    mapping (address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping (address => mapping(address => uint256)) allowed;\n', '\n', '    // Owner of Token\n', '    address public owner;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint public PRICE = 800;\n', '    uint public pre_PRICE = 960;  //800 + 20% as bonus\n', '    uint public ico_PRICE = 840;  //800 + 5% as bonus\n', '\n', '    // amount of raised money in wei\n', '    uint256 public fundRaised;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    // modifier to allow only owner has full control on the function\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    // @notice QPSEToken Contract\n', '    // @return the transaction address\n', '    function QPSEToken() public payable {\n', '        owner = msg.sender;\n', '\t    fundRaised = 0;\n', '        balances[token_addr] = _totalSupply; \n', '    }\n', '\n', '    // Payable method\n', '    // @notice Anyone can buy the tokens on tokensale by paying ether\n', '    function () public payable {\n', '        tokensale(msg.sender);\n', '    }\n', '\n', '    // @notice tokensale\n', '    // @param recipient The address of the recipient\n', '    // @return the transaction address and send the event as Transfer\n', '    function tokensale(address recipient) public payable {\n', '        require(recipient != 0x0);\n', '//        require(now >= pre_startTime);\n', '\n', '        if (now < pre_endTime) {\n', '            ico_stage = STAGE_PRE_ICO;\n', '        } else {\n', '            ico_stage = STAGE_MAIN_ICO;\n', '        }\n', '\n', '        if ( fundRaised >= _presaleSupply ) {\n', '            ico_stage = STAGE_MAIN_ICO;\n', '        }\n', '\t\n', '        uint256 weiAmount = msg.value;\n', '        uint tokens = weiAmount.mul(getPrice());\n', '\n', '        require(_icoSupply >= tokens);\n', '\n', '        balances[token_addr] = balances[token_addr].sub(tokens);\n', '        balances[recipient] = balances[recipient].add(tokens);\n', '\n', '        _icoSupply = _icoSupply.sub(tokens);\n', '        fundRaised = fundRaised.add(tokens);\n', '\n', '        TokenPurchase(msg.sender, recipient, weiAmount, tokens);\n', '        if ( tokens == 0 ) {\n', '            recipient.transfer(msg.value);\n', '        } else {\n', '            eth_addr.transfer(msg.value);    \n', '        }\n', '    }\n', '\n', '    // @return total tokens supplied\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    // @param who The address of the particular account\n', '    // @return the balanace the particular account\n', '    function balanceOf(address who) public constant returns (uint256) {\n', '        return balances[who];\n', '    }\n', '\n', '    // Token distribution\n', '    function sendTokenToMultiAddr(address[] _toAddresses, uint256[] _amounts) public {\n', '\t/* Ensures _toAddresses array is less than or equal to 255 */\n', '        require(_toAddresses.length <= 255);\n', '        /* Ensures _toAddress and _amounts have the same number of entries. */\n', '        require(_toAddresses.length == _amounts.length);\n', '\n', '        for (uint8 i = 0; i < _toAddresses.length; i++) {\n', '            transfer(_toAddresses[i], _amounts[i]);\n', '        }\n', '    }\n', '\n', '    // @notice send `value` token to `to` from `msg.sender`\n', '    // @param to The address of the recipient\n', '    // @param value The amount of token to be transferred\n', '    // @return the transaction address and send the event as Transfer\n', '    function transfer(address to, uint256 value) public returns (bool success) {\n', '        require (\n', '            balances[msg.sender] >= value && value > 0\n', '        );\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    // @notice send `value` token to `to` from `from`\n', '    // @param from The address of the sender\n', '    // @param to The address of the recipient\n', '    // @param value The amount of token to be transferred\n', '    // @return the transaction address and send the event as Transfer\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n', '        require (\n', '            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\n', '        );\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    // Allow spender to withdraw from your account, multiple times, up to the value amount.\n', '    // If this function is called again it overwrites the current allowance with value.\n', '    // @param spender The address of the sender\n', '    // @param value The amount to be approved\n', '    // @return the transaction address and send the event as Approval\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require (\n', '            balances[msg.sender] >= _value && _value > 0\n', '        );\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // Check the allowed value for the spender to withdraw from owner\n', '    // @param owner The address of the owner\n', '    // @param spender The address of the spender\n', '    // @return the amount which spender is still allowed to withdraw from owner\n', '    function allowance(address _owner, address spender) public view returns (uint256) {\n', '        return allowed[_owner][spender];\n', '    }\n', '\n', '    // Get current price of a Token\n', '    // @return the price or token value for a ether\n', '    function getPrice() public view returns (uint result) {\n', '        if ( ico_stage == STAGE_PRE_ICO ) {\n', '    \t    return pre_PRICE;\n', '    \t} if ( ico_stage == STAGE_MAIN_ICO ) {\n', '    \t    return ico_PRICE;\n', '    \t}\n', '    }\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract IERC20 {\n', '\n', '    function totalSupply() public constant returns (uint256);\n', '    function balanceOf(address who) public constant returns (uint256);\n', '    function transfer(address to, uint256 value) public returns (bool success);\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success);\n', '    function approve(address spender, uint256 value) public returns (bool success);\n', '    function allowance(address owner, address spender) public constant returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '}\n', '\n', 'contract QPSEToken is IERC20 {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Token properties\n', '    string public name = "Qompass";\n', '    string public symbol = "QPSE";\n', '    uint public decimals = 18;\n', '\n', '    uint private constant STAGE_PRE_ICO = 1;\n', '    uint private constant STAGE_MAIN_ICO = 2;\n', '\n', '    uint public ico_stage = 0;\n', '    uint public _totalSupply = 33000000e18;\n', '\n', '    uint public _icoSupply = 20000000e18; // crowdsale 70%\n', '    uint public _presaleSupply = 8000000e18;\n', '    uint public _mainsaleSupply = 12000000e18;\n', '    uint public _futureSupply = 13000000e18;\n', '                                    \n', '//    uint256 public pre_startTime = 1522904400;  //2018/04/08 00:00:00 UTC + 8\n', '    uint256 public pre_endTime = 1523854800;    //2018/04/16 00:00:00 UTC + 8\n', '\t\n', '    uint256 public ico_startTime = 1523854800;  //2018/04/16 00:00:00 UTC + 8\n', '//    uint256 public ico_endTime = 1533074400;    //2018/08/01 00:00:00 UTC + 8\n', '\n', '    address eth_addr = 0xE3a08428160C8B7872EcaB35578D3304239a5748;\n', '    address token_addr = 0xDB882cFbA6A483b7e0FdedCF2aa50fA311DD392e;\n', '\n', '//    address eth_addr = 0x5A745e3A30CB59980BB86442B6B19c317585cd8e;\n', '//    address token_addr = 0x6f5A6AAfD56AF48673F0DDd32621dC140F16212a;\n', '\n', '    // Balances for each account\n', '    mapping (address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    mapping (address => mapping(address => uint256)) allowed;\n', '\n', '    // Owner of Token\n', '    address public owner;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint public PRICE = 800;\n', '    uint public pre_PRICE = 960;  //800 + 20% as bonus\n', '    uint public ico_PRICE = 840;  //800 + 5% as bonus\n', '\n', '    // amount of raised money in wei\n', '    uint256 public fundRaised;\n', '\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    // modifier to allow only owner has full control on the function\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    // @notice QPSEToken Contract\n', '    // @return the transaction address\n', '    function QPSEToken() public payable {\n', '        owner = msg.sender;\n', '\t    fundRaised = 0;\n', '        balances[token_addr] = _totalSupply; \n', '    }\n', '\n', '    // Payable method\n', '    // @notice Anyone can buy the tokens on tokensale by paying ether\n', '    function () public payable {\n', '        tokensale(msg.sender);\n', '    }\n', '\n', '    // @notice tokensale\n', '    // @param recipient The address of the recipient\n', '    // @return the transaction address and send the event as Transfer\n', '    function tokensale(address recipient) public payable {\n', '        require(recipient != 0x0);\n', '//        require(now >= pre_startTime);\n', '\n', '        if (now < pre_endTime) {\n', '            ico_stage = STAGE_PRE_ICO;\n', '        } else {\n', '            ico_stage = STAGE_MAIN_ICO;\n', '        }\n', '\n', '        if ( fundRaised >= _presaleSupply ) {\n', '            ico_stage = STAGE_MAIN_ICO;\n', '        }\n', '\t\n', '        uint256 weiAmount = msg.value;\n', '        uint tokens = weiAmount.mul(getPrice());\n', '\n', '        require(_icoSupply >= tokens);\n', '\n', '        balances[token_addr] = balances[token_addr].sub(tokens);\n', '        balances[recipient] = balances[recipient].add(tokens);\n', '\n', '        _icoSupply = _icoSupply.sub(tokens);\n', '        fundRaised = fundRaised.add(tokens);\n', '\n', '        TokenPurchase(msg.sender, recipient, weiAmount, tokens);\n', '        if ( tokens == 0 ) {\n', '            recipient.transfer(msg.value);\n', '        } else {\n', '            eth_addr.transfer(msg.value);    \n', '        }\n', '    }\n', '\n', '    // @return total tokens supplied\n', '    function totalSupply() public constant returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    // What is the balance of a particular account?\n', '    // @param who The address of the particular account\n', '    // @return the balanace the particular account\n', '    function balanceOf(address who) public constant returns (uint256) {\n', '        return balances[who];\n', '    }\n', '\n', '    // Token distribution\n', '    function sendTokenToMultiAddr(address[] _toAddresses, uint256[] _amounts) public {\n', '\t/* Ensures _toAddresses array is less than or equal to 255 */\n', '        require(_toAddresses.length <= 255);\n', '        /* Ensures _toAddress and _amounts have the same number of entries. */\n', '        require(_toAddresses.length == _amounts.length);\n', '\n', '        for (uint8 i = 0; i < _toAddresses.length; i++) {\n', '            transfer(_toAddresses[i], _amounts[i]);\n', '        }\n', '    }\n', '\n', '    // @notice send `value` token to `to` from `msg.sender`\n', '    // @param to The address of the recipient\n', '    // @param value The amount of token to be transferred\n', '    // @return the transaction address and send the event as Transfer\n', '    function transfer(address to, uint256 value) public returns (bool success) {\n', '        require (\n', '            balances[msg.sender] >= value && value > 0\n', '        );\n', '        balances[msg.sender] = balances[msg.sender].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    // @notice send `value` token to `to` from `from`\n', '    // @param from The address of the sender\n', '    // @param to The address of the recipient\n', '    // @param value The amount of token to be transferred\n', '    // @return the transaction address and send the event as Transfer\n', '    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n', '        require (\n', '            allowed[from][msg.sender] >= value && balances[from] >= value && value > 0\n', '        );\n', '        balances[from] = balances[from].sub(value);\n', '        balances[to] = balances[to].add(value);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(value);\n', '        Transfer(from, to, value);\n', '        return true;\n', '    }\n', '\n', '    // Allow spender to withdraw from your account, multiple times, up to the value amount.\n', '    // If this function is called again it overwrites the current allowance with value.\n', '    // @param spender The address of the sender\n', '    // @param value The amount to be approved\n', '    // @return the transaction address and send the event as Approval\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require (\n', '            balances[msg.sender] >= _value && _value > 0\n', '        );\n', '        allowed[msg.sender][_spender] = _value;\n', '        Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    // Check the allowed value for the spender to withdraw from owner\n', '    // @param owner The address of the owner\n', '    // @param spender The address of the spender\n', '    // @return the amount which spender is still allowed to withdraw from owner\n', '    function allowance(address _owner, address spender) public view returns (uint256) {\n', '        return allowed[_owner][spender];\n', '    }\n', '\n', '    // Get current price of a Token\n', '    // @return the price or token value for a ether\n', '    function getPrice() public view returns (uint result) {\n', '        if ( ico_stage == STAGE_PRE_ICO ) {\n', '    \t    return pre_PRICE;\n', '    \t} if ( ico_stage == STAGE_MAIN_ICO ) {\n', '    \t    return ico_PRICE;\n', '    \t}\n', '    }\n', '}']
