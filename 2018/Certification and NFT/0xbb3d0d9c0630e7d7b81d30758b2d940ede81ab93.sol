['pragma solidity ^0.4.23;\n', '\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    c = a * b;\n', '    require(c / a == b, "Overflow - Multiplication");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "Underflow - Subtraction");\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    require(c >= a, "Overflow - Addition");\n', '    return c;\n', '  }\n', '}\n', '\n', 'library Contract {\n', '\n', '  using SafeMath for uint;\n', '\n', '  // Modifiers: //\n', '\n', '  // Runs two functions before and after a function -\n', '  modifier conditions(function () pure first, function () pure last) {\n', '    first();\n', '    _;\n', '    last();\n', '  }\n', '\n', '  bytes32 internal constant EXEC_PERMISSIONS = keccak256(&#39;script_exec_permissions&#39;);\n', '\n', '  // Sets up contract execution - reads execution id and sender from storage and\n', '  // places in memory, creating getters. Calling this function should be the first\n', '  // action an application does as part of execution, as it sets up memory for\n', '  // execution. Additionally, application functions in the main file should be\n', '  // external, so that memory is not touched prior to calling this function.\n', '  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\n', '  // be reverted to abstract storage to store data, emit events, and forward\n', '  // wei on behalf of the application.\n', '  function authorize(address _script_exec) internal view {\n', '    // Initialize memory\n', '    initialize();\n', '\n', '    // Check that the sender is authorized as a script exec contract for this exec id\n', '    bytes32 perms = EXEC_PERMISSIONS;\n', '    bool authorized;\n', '    assembly {\n', '      // Place the script exec address at 0, and the exec permissions seed after it\n', '      mstore(0, _script_exec)\n', '      mstore(0x20, perms)\n', '      // Hash the resulting 0x34 bytes, and place back into memory at 0\n', '      mstore(0, keccak256(0x0c, 0x34))\n', '      // Place the exec id after the hash -\n', '      mstore(0x20, mload(0x80))\n', '      // Hash the previous hash with the execution id, and check the result\n', '      authorized := sload(keccak256(0, 0x40))\n', '    }\n', '    if (!authorized)\n', '      revert("Sender is not authorized as a script exec address");\n', '  }\n', '\n', '  // Sets up contract execution when initializing an instance of the application\n', '  // First, reads execution id and sender from storage (execution id should be 0xDEAD),\n', '  // then places them in memory, creating getters. Calling this function should be the first\n', '  // action an application does as part of execution, as it sets up memory for\n', '  // execution. Additionally, application functions in the main file should be\n', '  // external, so that memory is not touched prior to calling this function.\n', '  // The 3rd slot allocated will hold a pointer to a storage buffer, which will\n', '  // be reverted to abstract storage to store data, emit events, and forward\n', '  // wei on behalf of the application.\n', '  function initialize() internal view {\n', '    // No memory should have been allocated yet - expect the free memory pointer\n', '    // to point to 0x80 - and throw if it does not\n', '    require(freeMem() == 0x80, "Memory allocated prior to execution");\n', '    // Next, set up memory for execution\n', '    assembly {\n', '      mstore(0x80, sload(0))     // Execution id, read from storage\n', '      mstore(0xa0, sload(1))     // Original sender address, read from storage\n', '      mstore(0xc0, 0)            // Pointer to storage buffer\n', '      mstore(0xe0, 0)            // Bytes4 value of the current action requestor being used\n', '      mstore(0x100, 0)           // Enum representing the next type of function to be called (when pushing to buffer)\n', '      mstore(0x120, 0)           // Number of storage slots written to in buffer\n', '      mstore(0x140, 0)           // Number of events pushed to buffer\n', '      mstore(0x160, 0)           // Number of payment destinations pushed to buffer\n', '\n', '      // Update free memory pointer -\n', '      mstore(0x40, 0x180)\n', '    }\n', '    // Ensure that the sender and execution id returned from storage are expected values -\n', '    assert(execID() != bytes32(0) && sender() != address(0));\n', '  }\n', '\n', '  // Calls the passed-in function, performing a memory state check before and after the check\n', '  // is executed.\n', '  function checks(function () view _check) conditions(validState, validState) internal view {\n', '    _check();\n', '  }\n', '\n', '  // Calls the passed-in function, performing a memory state check before and after the check\n', '  // is executed.\n', '  function checks(function () pure _check) conditions(validState, validState) internal pure {\n', '    _check();\n', '  }\n', '\n', '  // Ensures execution completed successfully, and reverts the created storage buffer\n', '  // back to the sender.\n', '  function commit() conditions(validState, none) internal pure {\n', '    // Check value of storage buffer pointer - should be at least 0x180\n', '    bytes32 ptr = buffPtr();\n', '    require(ptr >= 0x180, "Invalid buffer pointer");\n', '\n', '    assembly {\n', '      // Get the size of the buffer\n', '      let size := mload(add(0x20, ptr))\n', '      mstore(ptr, 0x20) // Place dynamic data offset before buffer\n', '      // Revert to storage\n', '      revert(ptr, add(0x40, size))\n', '    }\n', '  }\n', '\n', '  // Helpers: //\n', '\n', '  // Checks to ensure the application was correctly executed -\n', '  function validState() private pure {\n', '    if (freeMem() < 0x180)\n', '      revert(&#39;Expected Contract.execute()&#39;);\n', '\n', '    if (buffPtr() != 0 && buffPtr() < 0x180)\n', '      revert(&#39;Invalid buffer pointer&#39;);\n', '\n', '    assert(execID() != bytes32(0) && sender() != address(0));\n', '  }\n', '\n', '  // Returns a pointer to the execution storage buffer -\n', '  function buffPtr() private pure returns (bytes32 ptr) {\n', '    assembly { ptr := mload(0xc0) }\n', '  }\n', '\n', '  // Returns the location pointed to by the free memory pointer -\n', '  function freeMem() private pure returns (bytes32 ptr) {\n', '    assembly { ptr := mload(0x40) }\n', '  }\n', '\n', '  // Returns the current storage action\n', '  function currentAction() private pure returns (bytes4 action) {\n', '    if (buffPtr() == bytes32(0))\n', '      return bytes4(0);\n', '\n', '    assembly { action := mload(0xe0) }\n', '  }\n', '\n', '  // If the current action is not storing, reverts\n', '  function isStoring() private pure {\n', '    if (currentAction() != STORES)\n', '      revert(&#39;Invalid current action - expected STORES&#39;);\n', '  }\n', '\n', '  // If the current action is not emitting, reverts\n', '  function isEmitting() private pure {\n', '    if (currentAction() != EMITS)\n', '      revert(&#39;Invalid current action - expected EMITS&#39;);\n', '  }\n', '\n', '  // If the current action is not paying, reverts\n', '  function isPaying() private pure {\n', '    if (currentAction() != PAYS)\n', '      revert(&#39;Invalid current action - expected PAYS&#39;);\n', '  }\n', '\n', '  // Initializes a storage buffer in memory -\n', '  function startBuffer() private pure {\n', '    assembly {\n', '      // Get a pointer to free memory, and place at 0xc0 (storage buffer pointer)\n', '      let ptr := msize()\n', '      mstore(0xc0, ptr)\n', '      // Clear bytes at pointer -\n', '      mstore(ptr, 0)            // temp ptr\n', '      mstore(add(0x20, ptr), 0) // buffer length\n', '      // Update free memory pointer -\n', '      mstore(0x40, add(0x40, ptr))\n', '      // Set expected next function to &#39;NONE&#39; -\n', '      mstore(0x100, 1)\n', '    }\n', '  }\n', '\n', '  // Checks whether or not it is valid to create a STORES action request -\n', '  function validStoreBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;storing&#39;, and that the buffer has not already\n', '    // completed a STORES action -\n', '    if (stored() != 0 || currentAction() == STORES)\n', '      revert(&#39;Duplicate request - stores&#39;);\n', '  }\n', '\n', '  // Checks whether or not it is valid to create an EMITS action request -\n', '  function validEmitBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;emitting&#39;, and that the buffer has not already\n', '    // completed an EMITS action -\n', '    if (emitted() != 0 || currentAction() == EMITS)\n', '      revert(&#39;Duplicate request - emits&#39;);\n', '  }\n', '\n', '  // Checks whether or not it is valid to create a PAYS action request -\n', '  function validPayBuff() private pure {\n', '    // Get pointer to current buffer - if zero, create a new buffer -\n', '    if (buffPtr() == bytes32(0))\n', '      startBuffer();\n', '\n', '    // Ensure that the current action is not &#39;paying&#39;, and that the buffer has not already\n', '    // completed an PAYS action -\n', '    if (paid() != 0 || currentAction() == PAYS)\n', '      revert(&#39;Duplicate request - pays&#39;);\n', '  }\n', '\n', '  // Placeholder function when no pre or post condition for a function is needed\n', '  function none() private pure { }\n', '\n', '  // Runtime getters: //\n', '\n', '  // Returns the execution id from memory -\n', '  function execID() internal pure returns (bytes32 exec_id) {\n', '    assembly { exec_id := mload(0x80) }\n', '    require(exec_id != bytes32(0), "Execution id overwritten, or not read");\n', '  }\n', '\n', '  // Returns the original sender from memory -\n', '  function sender() internal pure returns (address addr) {\n', '    assembly { addr := mload(0xa0) }\n', '    require(addr != address(0), "Sender address overwritten, or not read");\n', '  }\n', '\n', '  // Reading from storage: //\n', '\n', '  // Reads from storage, resolving the passed-in location to its true location in storage\n', '  // by hashing with the exec id. Returns the data read from that location\n', '  function read(bytes32 _location) internal view returns (bytes32 data) {\n', '    data = keccak256(_location, execID());\n', '    assembly { data := sload(data) }\n', '  }\n', '\n', '  // Storing data, emitting events, and forwarding payments: //\n', '\n', '  bytes4 internal constant EMITS = bytes4(keccak256(&#39;Emit((bytes32[],bytes)[])&#39;));\n', '  bytes4 internal constant STORES = bytes4(keccak256(&#39;Store(bytes32[])&#39;));\n', '  bytes4 internal constant PAYS = bytes4(keccak256(&#39;Pay(bytes32[])&#39;));\n', '  bytes4 internal constant THROWS = bytes4(keccak256(&#39;Error(string)&#39;));\n', '\n', '  // Function enums -\n', '  enum NextFunction {\n', '    INVALID, NONE, STORE_DEST, VAL_SET, VAL_INC, VAL_DEC, EMIT_LOG, PAY_DEST, PAY_AMT\n', '  }\n', '\n', '  // Checks that a call pushing a storage destination to the buffer is expected and valid\n', '  function validStoreDest() private pure {\n', '    // Ensure that the next function expected pushes a storage destination -\n', '    if (expected() != NextFunction.STORE_DEST)\n', '      revert(&#39;Unexpected function order - expected storage destination to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing STORES actions -\n', '    isStoring();\n', '  }\n', '\n', '  // Checks that a call pushing a storage value to the buffer is expected and valid\n', '  function validStoreVal() private pure {\n', '    // Ensure that the next function expected pushes a storage value -\n', '    if (\n', '      expected() != NextFunction.VAL_SET &&\n', '      expected() != NextFunction.VAL_INC &&\n', '      expected() != NextFunction.VAL_DEC\n', '    ) revert(&#39;Unexpected function order - expected storage value to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing STORES actions -\n', '    isStoring();\n', '  }\n', '\n', '  // Checks that a call pushing a payment destination to the buffer is expected and valid\n', '  function validPayDest() private pure {\n', '    // Ensure that the next function expected pushes a payment destination -\n', '    if (expected() != NextFunction.PAY_DEST)\n', '      revert(&#39;Unexpected function order - expected payment destination to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing PAYS actions -\n', '    isPaying();\n', '  }\n', '\n', '  // Checks that a call pushing a payment amount to the buffer is expected and valid\n', '  function validPayAmt() private pure {\n', '    // Ensure that the next function expected pushes a payment amount -\n', '    if (expected() != NextFunction.PAY_AMT)\n', '      revert(&#39;Unexpected function order - expected payment amount to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing PAYS actions -\n', '    isPaying();\n', '  }\n', '\n', '  // Checks that a call pushing an event to the buffer is expected and valid\n', '  function validEvent() private pure {\n', '    // Ensure that the next function expected pushes an event -\n', '    if (expected() != NextFunction.EMIT_LOG)\n', '      revert(&#39;Unexpected function order - expected event to be pushed&#39;);\n', '\n', '    // Ensure that the current buffer is pushing EMITS actions -\n', '    isEmitting();\n', '  }\n', '\n', '  // Begins creating a storage buffer - values and locations pushed will be committed\n', '  // to storage at the end of execution\n', '  function storing() conditions(validStoreBuff, isStoring) internal pure {\n', '    bytes4 action_req = STORES;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the STORES action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (STORES) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets a passed in location to a value passed in via &#39;to&#39;\n', '  function set(bytes32 _field) conditions(validStoreDest, validStoreVal) internal pure returns (bytes32) {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_SET\n', '      mstore(0x100, 3)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return _field;\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32, bytes32 _val) conditions(validStoreVal, validStoreDest) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _val)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, uint _val) internal pure {\n', '    to(_field, bytes32(_val));\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, address _val) internal pure {\n', '    to(_field, bytes32(_val));\n', '  }\n', '\n', '  // Sets a previously-passed-in destination in storage to the value\n', '  function to(bytes32 _field, bool _val) internal pure {\n', '    to(\n', '      _field,\n', '      _val ? bytes32(1) : bytes32(0)\n', '    );\n', '  }\n', '\n', '  function increase(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n', '    // Read value stored at the location in storage -\n', '    val = keccak256(_field, execID());\n', '    assembly {\n', '      val := sload(val)\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_INC\n', '      mstore(0x100, 4)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return val;\n', '  }\n', '\n', '  function decrease(bytes32 _field) conditions(validStoreDest, validStoreVal) internal view returns (bytes32 val) {\n', '    // Read value stored at the location in storage -\n', '    val = keccak256(_field, execID());\n', '    assembly {\n', '      val := sload(val)\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _field)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - VAL_DEC\n', '      mstore(0x100, 5)\n', '      // Increment STORES action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of storage slots pushed to -\n', '      mstore(0x120, add(1, mload(0x120)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return val;\n', '  }\n', '\n', '  function by(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n', '    // Check the expected function type - if it is VAL_INC, perform safe-add on the value\n', '    // If it is VAL_DEC, perform safe-sub on the value\n', '    if (expected() == NextFunction.VAL_INC)\n', '      _amt = _amt.add(uint(_val));\n', '    else if (expected() == NextFunction.VAL_DEC)\n', '      _amt = uint(_val).sub(_amt);\n', '    else\n', '      revert(&#39;Expected VAL_INC or VAL_DEC&#39;);\n', '\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Decreases the value at some field by a maximum amount, and sets it to 0 if there will be underflow\n', '  function byMaximum(bytes32 _val, uint _amt) conditions(validStoreVal, validStoreDest) internal pure {\n', '    // Check the expected function type - if it is VAL_DEC, set the new amount to the difference of\n', '    // _val and _amt, to a minimum of 0\n', '    if (expected() == NextFunction.VAL_DEC) {\n', '      if (_amt >= uint(_val))\n', '        _amt = 0;\n', '      else\n', '        _amt = uint(_val).sub(_amt);\n', '    } else {\n', '      revert(&#39;Expected VAL_DEC&#39;);\n', '    }\n', '\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push storage value to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amt)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - STORE_DEST\n', '      mstore(0x100, 2)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Begins creating an event log buffer - topics and data pushed will be emitted by\n', '  // storage at the end of execution\n', '  function emitting() conditions(validEmitBuff, isEmitting) internal pure {\n', '    bytes4 action_req = EMITS;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the EMITS action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (EMITS) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - EMIT_LOG\n', '      mstore(0x100, 6)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 0 to the end of the buffer - event will have 0 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 0)\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x40, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x40 plus the original length\n', '        mstore(ptr, add(0x40, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x40, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0x60, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0x60 plus the original length\n', '        mstore(ptr, add(0x60, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[1] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 1 to the end of the buffer - event will have 1 topic\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 1)\n', '      // Push topic to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x60, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x60 plus the original length\n', '        mstore(ptr, add(0x60, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x60, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0x80, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0x80 plus the original length\n', '        mstore(ptr, add(0x80, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[2] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 2 to the end of the buffer - event will have 2 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 2)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0x80, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0x80 plus the original length\n', '        mstore(ptr, add(0x80, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0x80, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xa0 plus the original length\n', '        mstore(ptr, add(0xa0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[3] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 3 to the end of the buffer - event will have 3 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 3)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0xa0 plus the original length\n', '        mstore(ptr, add(0xa0, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0xa0, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xc0 plus the original length\n', '        mstore(ptr, add(0xc0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  function log(bytes32[4] memory _topics, bytes32 _data) conditions(validEvent, validEvent) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push 4 to the end of the buffer - event will have 4 topics\n', '      mstore(add(0x20, add(ptr, mload(ptr))), 4)\n', '      // Push topics to end of buffer\n', '      mstore(add(0x40, add(ptr, mload(ptr))), mload(_topics))\n', '      mstore(add(0x60, add(ptr, mload(ptr))), mload(add(0x20, _topics)))\n', '      mstore(add(0x80, add(ptr, mload(ptr))), mload(add(0x40, _topics)))\n', '      mstore(add(0xa0, add(ptr, mload(ptr))), mload(add(0x60, _topics)))\n', '      // If _data is zero, set data size to 0 in buffer and push -\n', '      if eq(_data, 0) {\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), 0)\n', '        // Increment buffer length - 0xc0 plus the original length\n', '        mstore(ptr, add(0xc0, mload(ptr)))\n', '      }\n', '      // If _data is not zero, set size to 0x20 and push to buffer -\n', '      if iszero(eq(_data, 0)) {\n', '        // Push data size (0x20) to the end of the buffer\n', '        mstore(add(0xc0, add(ptr, mload(ptr))), 0x20)\n', '        // Push data to the end of the buffer\n', '        mstore(add(0xe0, add(ptr, mload(ptr))), _data)\n', '        // Increment buffer length - 0xe0 plus the original length\n', '        mstore(ptr, add(0xe0, mload(ptr)))\n', '      }\n', '      // Increment EMITS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of events pushed to buffer -\n', '      mstore(0x140, add(1, mload(0x140)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Begins creating a storage buffer - destinations entered will be forwarded wei\n', '  // before the end of execution\n', '  function paying() conditions(validPayBuff, isPaying) internal pure {\n', '    bytes4 action_req = PAYS;\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push requestor to the end of buffer, as well as to the &#39;current action&#39; slot -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), action_req)\n', '      // Push &#39;0&#39; to the end of the 4 bytes just pushed - this will be the length of the PAYS action\n', '      mstore(add(0x24, add(ptr, mload(ptr))), 0)\n', '      // Increment buffer length - 0x24 plus the previous length\n', '      mstore(ptr, add(0x24, mload(ptr)))\n', '      // Set the current action being executed (PAYS) -\n', '      mstore(0xe0, action_req)\n', '      // Set the expected next function - PAY_AMT\n', '      mstore(0x100, 8)\n', '      // Set a pointer to the length of the current request within the buffer\n', '      mstore(sub(ptr, 0x20), add(ptr, mload(ptr)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Pushes an amount of wei to forward to the buffer\n', '  function pay(uint _amount) conditions(validPayAmt, validPayDest) internal pure returns (uint) {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push payment amount to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _amount)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - PAY_DEST\n', '      mstore(0x100, 7)\n', '      // Increment PAYS action length -\n', '      mstore(\n', '        mload(sub(ptr, 0x20)),\n', '        add(1, mload(mload(sub(ptr, 0x20))))\n', '      )\n', '      // Update number of payment destinations to be pushed to -\n', '      mstore(0x160, add(1, mload(0x160)))\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '    return _amount;\n', '  }\n', '\n', '  // Push an address to forward wei to, to the buffer\n', '  function toAcc(uint, address _dest) conditions(validPayDest, validPayAmt) internal pure {\n', '    assembly {\n', '      // Get pointer to buffer length -\n', '      let ptr := add(0x20, mload(0xc0))\n', '      // Push payment destination to the end of the buffer -\n', '      mstore(add(0x20, add(ptr, mload(ptr))), _dest)\n', '      // Increment buffer length - 0x20 plus the previous length\n', '      mstore(ptr, add(0x20, mload(ptr)))\n', '      // Set the expected next function - PAY_AMT\n', '      mstore(0x100, 8)\n', '    }\n', '    // Update free memory pointer\n', '    setFreeMem();\n', '  }\n', '\n', '  // Sets the free memory pointer to point beyond all accessed memory\n', '  function setFreeMem() private pure {\n', '    assembly { mstore(0x40, msize) }\n', '  }\n', '\n', '  // Returns the enum representing the next expected function to be called -\n', '  function expected() private pure returns (NextFunction next) {\n', '    assembly { next := mload(0x100) }\n', '  }\n', '\n', '  // Returns the number of events pushed to the storage buffer -\n', '  function emitted() internal pure returns (uint num_emitted) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number emitted from buffer -\n', '    assembly { num_emitted := mload(0x140) }\n', '  }\n', '\n', '  // Returns the number of storage slots pushed to the storage buffer -\n', '  function stored() internal pure returns (uint num_stored) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number stored from buffer -\n', '    assembly { num_stored := mload(0x120) }\n', '  }\n', '\n', '  // Returns the number of payment destinations and amounts pushed to the storage buffer -\n', '  function paid() internal pure returns (uint num_paid) {\n', '    if (buffPtr() == bytes32(0))\n', '      return 0;\n', '\n', '    // Load number paid from buffer -\n', '    assembly { num_paid := mload(0x160) }\n', '  }\n', '}\n', '\n', 'library ArrayUtils {\n', '\n', '  function toBytes4Arr(bytes32[] memory _arr) internal pure returns (bytes4[] memory _conv) {\n', '    assembly { _conv := _arr }\n', '  }\n', '\n', '  function toAddressArr(bytes32[] memory _arr) internal pure returns (address[] memory _conv) {\n', '    assembly { _conv := _arr }\n', '  }\n', '\n', '  function toUintArr(bytes32[] memory _arr) internal pure returns (uint[] memory _conv) {\n', '    assembly { _conv := _arr }\n', '  }\n', '}\n', '\n', 'interface GetterInterface {\n', '  function read(bytes32 exec_id, bytes32 location) external view returns (bytes32 data);\n', '  function readMulti(bytes32 exec_id, bytes32[] locations) external view returns (bytes32[] data);\n', '}\n', '\n', 'library MintedCappedIdx {\n', '\n', '  using Contract for *;\n', '  using SafeMath for uint;\n', '  using ArrayUtils for bytes32[];\n', '\n', '  bytes32 internal constant EXEC_PERMISSIONS = keccak256(&#39;script_exec_permissions&#39;);\n', '\n', '  // Returns the storage location of a script execution address&#39;s permissions -\n', '  function execPermissions(address _exec) internal pure returns (bytes32)\n', '    { return keccak256(_exec, EXEC_PERMISSIONS); }\n', '\n', '  /// SALE ///\n', '\n', '  // Storage location of crowdsale admin address\n', '  function admin() internal pure returns (bytes32)\n', '    { return keccak256(&#39;sale_admin&#39;); }\n', '\n', '  // Whether the crowdsale and token are configured, and the sale is ready to run\n', '  function isConfigured() internal pure returns (bytes32)\n', '    { return keccak256("sale_is_configured"); }\n', '\n', '  // Whether or not the crowdsale is post-purchase\n', '  function isFinished() internal pure returns (bytes32)\n', '    { return keccak256("sale_is_completed"); }\n', '\n', '  // Storage location of the crowdsale&#39;s start time\n', '  function startTime() internal pure returns (bytes32)\n', '    { return keccak256("sale_start_time"); }\n', '\n', '  // Storage location of the amount of time the crowdsale will take, accounting for all tiers\n', '  function totalDuration() internal pure returns (bytes32)\n', '    { return keccak256("sale_total_duration"); }\n', '\n', '  // Storage location of the amount of tokens sold in the crowdsale so far. Does not include reserved tokens\n', '  function tokensSold() internal pure returns (bytes32)\n', '    { return keccak256("sale_tokens_sold"); }\n', '\n', '  // Stores the amount of unique contributors so far in this crowdsale\n', '  function contributors() internal pure returns (bytes32)\n', '    { return keccak256("sale_contributors"); }\n', '\n', '  // Maps addresses to a boolean indicating whether or not this address has contributed\n', '  function hasContributed(address _purchaser) internal pure returns (bytes32)\n', '    { return keccak256(_purchaser, contributors()); }\n', '\n', '  /// TIERS ///\n', '\n', '  // Stores the number of tiers in the sale\n', '  function saleTierList() internal pure returns (bytes32)\n', '    { return keccak256("sale_tier_list"); }\n', '\n', '  // Stores the name of the tier\n', '  function tierName(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "name", saleTierList()); }\n', '\n', '  // Stores the number of tokens that will be sold in the tier\n', '  function tierCap(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "cap", saleTierList()); }\n', '\n', '  // Stores the price of a token (1 * 10^decimals units), in wei\n', '  function tierPrice(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "price", saleTierList()); }\n', '\n', '  // Stores the minimum number of tokens a user must purchase for a given tier\n', '  function tierMin(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "minimum", saleTierList()); }\n', '\n', '  // Stores the duration of a tier\n', '  function tierDuration(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "duration", saleTierList()); }\n', '\n', '  // Whether or not the tier&#39;s duration is modifiable (before it has begin)\n', '  function tierModifiable(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "mod_stat", saleTierList()); }\n', '\n', '  // Returns the storage location of the tier&#39;s whitelist status\n', '  function tierWhitelisted(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "wl_stat", saleTierList()); }\n', '\n', '  // Storage location of the index of the current tier. If zero, no tier is currently active\n', '  function currentTier() internal pure returns (bytes32)\n', '    { return keccak256("sale_current_tier"); }\n', '\n', '  // Storage location of the end time of the current tier. Purchase attempts beyond this time will update the current tier (if another is available)\n', '  function currentEndsAt() internal pure returns (bytes32)\n', '    { return keccak256("current_tier_ends_at"); }\n', '\n', '  // Storage location of the total number of tokens remaining for purchase in the current tier\n', '  function currentTokensRemaining() internal pure returns (bytes32)\n', '    { return keccak256("current_tier_tokens_remaining"); }\n', '\n', '  /// FUNDS ///\n', '\n', '  // Storage location of team funds wallet\n', '  function wallet() internal pure returns (bytes32)\n', '    { return keccak256("sale_destination_wallet"); }\n', '\n', '  // Storage location of amount of wei raised during the crowdsale, total\n', '  function totalWeiRaised() internal pure returns (bytes32)\n', '    { return keccak256("sale_tot_wei_raised"); }\n', '\n', '  /// WHITELIST ///\n', '\n', '  // Stores a tier&#39;s whitelist\n', '  function tierWhitelist(uint _idx) internal pure returns (bytes32)\n', '    { return keccak256(_idx, "tier_whitelists"); }\n', '\n', '  // Stores a spender&#39;s minimum token purchase amount for a given whitelisted tier\n', '  function whitelistMinTok(uint _idx, address _spender) internal pure returns (bytes32)\n', '    { return keccak256(_spender, "min_tok", tierWhitelist(_idx)); }\n', '\n', '  // Stores a spender&#39;s maximum number of tokens allowed to be purchased\n', '  function whitelistMaxTok(uint _idx, address _spender) internal pure returns (bytes32)\n', '    { return keccak256(_spender, "max_tok", tierWhitelist(_idx)); }\n', '\n', '  /// TOKEN ///\n', '\n', '  // Storage location for token name\n', '  function tokenName() internal pure returns (bytes32)\n', '    { return keccak256("token_name"); }\n', '\n', '  // Storage location for token ticker symbol\n', '  function tokenSymbol() internal pure returns (bytes32)\n', '    { return keccak256("token_symbol"); }\n', '\n', '  // Storage location for token decimals\n', '  function tokenDecimals() internal pure returns (bytes32)\n', '    { return keccak256("token_decimals"); }\n', '\n', '  // Storage location for token totalSupply\n', '  function tokenTotalSupply() internal pure returns (bytes32)\n', '    { return keccak256("token_total_supply"); }\n', '\n', '  // Storage seed for user balances mapping\n', '  bytes32 internal constant TOKEN_BALANCES = keccak256("token_balances");\n', '\n', '  function balances(address _owner) internal pure returns (bytes32)\n', '    { return keccak256(_owner, TOKEN_BALANCES); }\n', '\n', '  // Storage seed for user allowances mapping\n', '  bytes32 internal constant TOKEN_ALLOWANCES = keccak256("token_allowances");\n', '\n', '  function allowed(address _owner, address _spender) internal pure returns (bytes32)\n', '    { return keccak256(_spender, keccak256(_owner, TOKEN_ALLOWANCES)); }\n', '\n', '  // Storage seed for token &#39;transfer agent&#39; status for any address\n', '  // Transfer agents can transfer tokens, even if the crowdsale has not yet been finalized\n', '  bytes32 internal constant TOKEN_TRANSFER_AGENTS = keccak256("token_transfer_agents");\n', '\n', '  function transferAgents(address _agent) internal pure returns (bytes32)\n', '    { return keccak256(_agent, TOKEN_TRANSFER_AGENTS); }\n', '\n', '  // Whether or not the token is unlocked for transfers\n', '  function tokensUnlocked() internal pure returns (bytes32)\n', '    { return keccak256(&#39;sale_tokens_unlocked&#39;); }\n', '\n', '  /// RESERVED TOKENS ///\n', '\n', '  // Stores the number of addresses for which tokens are reserved\n', '  function reservedDestinations() internal pure returns (bytes32)\n', '    { return keccak256("reserved_token_dest_list"); }\n', '\n', '  // Stores the index of an address in the reservedDestinations list (1-indexed)\n', '  function destIndex(address _destination) internal pure returns (bytes32)\n', '    { return keccak256(_destination, "index", reservedDestinations()); }\n', '\n', '  // Stores the number of tokens reserved for a destination\n', '  function destTokens(address _destination) internal pure returns (bytes32)\n', '    { return keccak256(_destination, "numtokens", reservedDestinations()); }\n', '\n', '  // Stores the number of percent of tokens sold reserved for a destination\n', '  function destPercent(address _destination) internal pure returns (bytes32)\n', '    { return keccak256(_destination, "numpercent", reservedDestinations()); }\n', '\n', '  // Stores the number of decimals in the previous percentage (2 are added by default)\n', '  function destPrecision(address _destination) internal pure returns (bytes32)\n', '    { return keccak256(_destination, "precision", reservedDestinations()); }\n', '\n', '  /*\n', '  Creates a crowdsale with initial conditions. The admin should now initialize the crowdsale&#39;s token, as well\n', '  as any additional tiers of the crowdsale that will exist, followed by finalizing the initialization of the crowdsale.\n', '\n', '  @param _team_wallet: The team funds wallet, where crowdsale purchases are forwarded\n', '  @param _start_time: The start time of the initial tier of the crowdsale\n', '  @param _initial_tier_name: The name of the initial tier of the crowdsale\n', '  @param _initial_tier_price: The price of each token purchased in wei, for the initial crowdsale tier\n', '  @param _initial_tier_duration: The duration of the initial tier of the crowdsale\n', '  @param _initial_tier_token_sell_cap: The maximum number of tokens that can be sold during the initial tier\n', '  @param _initial_tier_min_purchase: The minimum number of tokens that must be purchased by a user in the initial tier\n', '  @param _initial_tier_is_whitelisted: Whether the initial tier of the crowdsale requires an address be whitelisted for successful purchase\n', '  @param _initial_tier_duration_is_modifiable: Whether the initial tier of the crowdsale has a modifiable duration\n', '  @param _admin: A privileged address which is able to complete the crowdsale initialization process\n', '  */\n', '  function init(\n', '    address _team_wallet,\n', '    uint _start_time,\n', '    bytes32 _initial_tier_name,\n', '    uint _initial_tier_price,\n', '    uint _initial_tier_duration,\n', '    uint _initial_tier_token_sell_cap,\n', '    uint _initial_tier_min_purchase,\n', '    bool _initial_tier_is_whitelisted,\n', '    bool _initial_tier_duration_is_modifiable,\n', '    address _admin\n', '  ) external view {\n', '    // Begin execution - we are initializing an instance of this application\n', '    Contract.initialize();\n', '\n', '    // Ensure valid input\n', '    if (\n', '      _team_wallet == 0\n', '      || _initial_tier_price == 0\n', '      || _start_time < now\n', '      || _start_time + _initial_tier_duration <= _start_time\n', '      || _initial_tier_token_sell_cap == 0\n', '      || _admin == address(0)\n', '    ) revert(&#39;improper initialization&#39;);\n', '\n', '    // Set up STORES action requests -\n', '    Contract.storing();\n', '    // Authorize sender as an executor for this instance -\n', '    Contract.set(execPermissions(msg.sender)).to(true);\n', '    // Store admin address, team wallet, initial tier duration, and sale start time\n', '    Contract.set(admin()).to(_admin);\n', '    Contract.set(wallet()).to(_team_wallet);\n', '    Contract.set(totalDuration()).to(_initial_tier_duration);\n', '    Contract.set(startTime()).to(_start_time);\n', '    // Store initial crowdsale tier list length and initial tier information\n', '    Contract.set(saleTierList()).to(uint(1));\n', '    // Tier name\n', '    Contract.set(tierName(uint(0))).to(_initial_tier_name);\n', '    // Tier token sell cap\n', '    Contract.set(tierCap(uint(0))).to(_initial_tier_token_sell_cap);\n', '    // Tier purchase price\n', '    Contract.set(tierPrice(uint(0))).to(_initial_tier_price);\n', '    // Tier active duration\n', '    Contract.set(tierDuration(uint(0))).to(_initial_tier_duration);\n', '    // Tier minimum purchase size\n', '    Contract.set(tierMin(uint(0))).to(_initial_tier_min_purchase);\n', '    // Whether this tier&#39;s duration is modifiable prior to its start time\n', '    Contract.set(tierModifiable(uint(0))).to(_initial_tier_duration_is_modifiable);\n', '    // Whether this tier requires an address be whitelisted to complete token purchase\n', '    Contract.set(tierWhitelisted(uint(0))).to(_initial_tier_is_whitelisted);\n', '\n', '    // Store current crowdsale tier (offset by 1)\n', '    Contract.set(currentTier()).to(uint(1));\n', '    // Store current tier end time\n', '    Contract.set(currentEndsAt()).to(_initial_tier_duration.add(_start_time));\n', '    // Store current tier tokens remaining\n', '    Contract.set(currentTokensRemaining()).to(_initial_tier_token_sell_cap);\n', '\n', '    Contract.commit();\n', '  }\n', '\n', '  /// CROWDSALE GETTERS ///\n', '\n', '  // Returns the address of the admin of the crowdsale\n', '  function getAdmin(address _storage, bytes32 _exec_id) external view returns (address)\n', '    { return address(GetterInterface(_storage).read(_exec_id, admin())); }\n', '\n', '  /*\n', '  Returns basic information on a sale\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return wei_raised: The amount of wei raised in the crowdsale so far\n', '  @return team_wallet: The address to which funds are forwarded during this crowdsale\n', '  @return is_initialized: Whether or not the crowdsale has been completely initialized by the admin\n', '  @return is_finalized: Whether or not the crowdsale has been completely finalized by the admin\n', '  */\n', '  function getCrowdsaleInfo(address _storage, bytes32 _exec_id) external view\n', '  returns (uint wei_raised, address team_wallet, bool is_initialized, bool is_finalized) {\n', '\n', '    GetterInterface target = GetterInterface(_storage);\n', '\n', '    bytes32[] memory arr_indices = new bytes32[](4);\n', '\n', '    arr_indices[0] = totalWeiRaised();\n', '    arr_indices[1] = wallet();\n', '    arr_indices[2] = isConfigured();\n', '    arr_indices[3] = isFinished();\n', '\n', '    bytes32[] memory read_values = target.readMulti(_exec_id, arr_indices);\n', '\n', '    // Get returned data -\n', '    wei_raised = uint(read_values[0]);\n', '    team_wallet = address(read_values[1]);\n', '    is_initialized = (read_values[2] == 0 ? false : true);\n', '    is_finalized = (read_values[3] == 0 ? false : true);\n', '  }\n', '\n', '  /*\n', '  Returns true if all tiers have been completely sold out\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return is_crowdsale_full: Whether or not the total number of tokens to sell in the crowdsale has been reached\n', '  @return max_sellable: The total number of tokens that can be sold in the crowdsale\n', '  */\n', '  function isCrowdsaleFull(address _storage, bytes32 _exec_id) external view returns (bool is_crowdsale_full, uint max_sellable) {\n', '    GetterInterface target = GetterInterface(_storage);\n', '\n', '    bytes32[] memory initial_arr = new bytes32[](2);\n', '    // Push crowdsale tier list length and total tokens sold storage locations to buffer\n', '    initial_arr[0] = saleTierList();\n', '    initial_arr[1] = tokensSold();\n', '    // Read from storage\n', '    uint[] memory read_values = target.readMulti(_exec_id, initial_arr).toUintArr();\n', '\n', '    // Get number of tiers and tokens sold\n', '    uint num_tiers = read_values[0];\n', '    uint _tokens_sold = read_values[1];\n', '\n', '    bytes32[] memory arr_indices = new bytes32[](num_tiers);\n', '    // Loop through tier cap locations, and add each to the calldata buffer\n', '    for (uint i = 0; i < num_tiers; i++)\n', '      arr_indices[i] = tierCap(i);\n', '\n', '    // Read from storage\n', '    read_values = target.readMulti(_exec_id, arr_indices).toUintArr();\n', '    // Ensure correct return length\n', '    assert(read_values.length == num_tiers);\n', '\n', '    // Loop through returned values, and get the sum of all tier token sell caps\n', '    for (i = 0; i < read_values.length; i++)\n', '      max_sellable += read_values[i];\n', '\n', '    // Get return value\n', '    is_crowdsale_full = (_tokens_sold >= max_sellable ? true : false);\n', '  }\n', '\n', '  // Returns the number of unique contributors to a crowdsale\n', '  function getCrowdsaleUniqueBuyers(address _storage, bytes32 _exec_id) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, contributors())); }\n', '\n', '  /*\n', '  Returns the start and end time of the crowdsale\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return start_time: The start time of the first tier of a crowdsale\n', '  @return end_time: The time at which the crowdsale ends\n', '  */\n', '  function getCrowdsaleStartAndEndTimes(address _storage, bytes32 _exec_id) external view returns (uint start_time, uint end_time) {\n', '    bytes32[] memory arr_indices = new bytes32[](2);\n', '    arr_indices[0] = startTime();\n', '    arr_indices[1] = totalDuration();\n', '\n', '    // Read from storage\n', '    uint[] memory read_values = GetterInterface(_storage).readMulti(_exec_id, arr_indices).toUintArr();\n', '\n', '    // Get return values\n', '    start_time = read_values[0];\n', '    end_time = start_time + read_values[1];\n', '  }\n', '\n', '  /*\n', '  Returns information on the current crowdsale tier\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return tier_name: The name of the current tier\n', '  @return tier_index: The current tier&#39;s index in the crowdsale_tiers() list\n', '  @return tier_ends_at: The time at which purcahses for the current tier are forcibly locked\n', '  @return tier_tokens_remaining: The amount of tokens remaining to be purchased in the current tier\n', '  @return tier_price: The price of each token purchased this tier, in wei\n', '  @return tier_min: The minimum amount of tokens that much be purchased by an investor this tier\n', '  @return duration_is_modifiable: Whether the crowdsale admin can update the duration of this tier before it starts\n', '  @return is_whitelisted: Whether an address must be whitelisted to participate in this tier\n', '  */\n', '  function getCurrentTierInfo(address _storage, bytes32 _exec_id) external view\n', '  returns (bytes32 tier_name, uint tier_index, uint tier_ends_at, uint tier_tokens_remaining, uint tier_price, uint tier_min, bool duration_is_modifiable, bool is_whitelisted) {\n', '\n', '    bytes32[] memory initial_arr = new bytes32[](4);\n', '    // Push current tier expiration time, current tier index, and current tier tokens remaining storage locations to calldata buffer\n', '    initial_arr[0] = currentEndsAt();\n', '    initial_arr[1] = currentTier();\n', '    initial_arr[2] = currentTokensRemaining();\n', '    initial_arr[3] = saleTierList();\n', '    // Read from storage and store return in buffer\n', '    uint[] memory read_values = GetterInterface(_storage).readMulti(_exec_id, initial_arr).toUintArr();\n', '    // Ensure correct return length\n', '    assert(read_values.length == 4);\n', '\n', '    // If the returned index was 0, current tier does not exist: return now\n', '    if (read_values[1] == 0)\n', '      return;\n', '\n', '    // Get returned values -\n', '    tier_ends_at = read_values[0];\n', '    // Indices are stored as 1 + (actual index), to avoid conflicts with a default 0 value\n', '    tier_index = read_values[1] - 1;\n', '    tier_tokens_remaining = read_values[2];\n', '    uint num_tiers = read_values[3];\n', '    bool updated_tier;\n', '\n', '    // If it is beyond the tier&#39;s end time, loop through tiers until the current one is found\n', '    while (now >= tier_ends_at && ++tier_index < num_tiers) {\n', '      tier_ends_at += uint(GetterInterface(_storage).read(_exec_id, tierDuration(tier_index)));\n', '      updated_tier = true;\n', '    }\n', '\n', '    // If we have passed the last tier, return default values\n', '    if (tier_index >= num_tiers)\n', '      return (0, 0, 0, 0, 0, 0, false, false);\n', '\n', '    initial_arr = new bytes32[](6);\n', '    initial_arr[0] = tierName(tier_index);\n', '    initial_arr[1] = tierPrice(tier_index);\n', '    initial_arr[2] = tierModifiable(tier_index);\n', '    initial_arr[3] = tierWhitelisted(tier_index);\n', '    initial_arr[4] = tierMin(tier_index);\n', '    initial_arr[5] = tierCap(tier_index);\n', '\n', '    // Read from storage and get return values\n', '    read_values = GetterInterface(_storage).readMulti(_exec_id, initial_arr).toUintArr();\n', '\n', '    // Ensure correct return length\n', '    assert(read_values.length == 6);\n', '\n', '    tier_name = bytes32(read_values[0]);\n', '    tier_price = read_values[1];\n', '    duration_is_modifiable = (read_values[2] == 0 ? false : true);\n', '    is_whitelisted = (read_values[3] == 0 ? false : true);\n', '    tier_min = read_values[4];\n', '    if (updated_tier)\n', '      tier_tokens_remaining = read_values[5];\n', '  }\n', '\n', '  /*\n', '  Returns information on a given tier\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @param _index: The index of the tier in the crowdsale tier list. Input index should be like a normal array index (lowest index: 0)\n', '  @return tier_name: The name of the returned tier\n', '  @return tier_sell_cap: The amount of tokens designated to be sold during this tier\n', '  @return tier_price: The price of each token in wei for this tier\n', '  @return tier_min: The minimum amount of tokens that much be purchased by an investor this tier\n', '  @return tier_duration: The duration of the given tier\n', '  @return duration_is_modifiable: Whether the crowdsale admin can change the duration of this tier prior to its start time\n', '  @return is_whitelisted: Whether an address must be whitelisted to participate in this tier\n', '  */\n', '  function getCrowdsaleTier(address _storage, bytes32 _exec_id, uint _index) external view\n', '  returns (bytes32 tier_name, uint tier_sell_cap, uint tier_price, uint tier_min, uint tier_duration, bool duration_is_modifiable, bool is_whitelisted) {\n', '    GetterInterface target = GetterInterface(_storage);\n', '\n', '    bytes32[] memory arr_indices = new bytes32[](7);\n', '    // Push tier name, sell cap, duration, and modifiable status storage locations to buffer\n', '    arr_indices[0] = tierName(_index);\n', '    arr_indices[1] = tierCap(_index);\n', '    arr_indices[2] = tierPrice(_index);\n', '    arr_indices[3] = tierDuration(_index);\n', '    arr_indices[4] = tierModifiable(_index);\n', '    arr_indices[5] = tierWhitelisted(_index);\n', '    arr_indices[6] = tierMin(_index);\n', '    // Read from storage and store return in buffer\n', '    bytes32[] memory read_values = target.readMulti(_exec_id, arr_indices);\n', '    // Ensure correct return length\n', '    assert(read_values.length == 7);\n', '\n', '    // Get returned values -\n', '    tier_name = read_values[0];\n', '    tier_sell_cap = uint(read_values[1]);\n', '    tier_price = uint(read_values[2]);\n', '    tier_duration = uint(read_values[3]);\n', '    duration_is_modifiable = (read_values[4] == 0 ? false : true);\n', '    is_whitelisted = (read_values[5] == 0 ? false : true);\n', '    tier_min = uint(read_values[6]);\n', '  }\n', '\n', '  /*\n', '  Returns the maximum amount of wei to raise, as well as the total amount of tokens that can be sold\n', '\n', '  @param _storage: The storage address of the crowdsale application\n', '  @param _exec_id: The execution id of the application\n', '  @return wei_raise_cap: The maximum amount of wei to raise\n', '  @return total_sell_cap: The maximum amount of tokens to sell\n', '  */\n', '  function getCrowdsaleMaxRaise(address _storage, bytes32 _exec_id) external view returns (uint wei_raise_cap, uint total_sell_cap) {\n', '    GetterInterface target = GetterInterface(_storage);\n', '\n', '    bytes32[] memory arr_indices = new bytes32[](3);\n', '    // Push crowdsale tier list length, token decimals, and token name storage locations to buffer\n', '    arr_indices[0] = saleTierList();\n', '    arr_indices[1] = tokenDecimals();\n', '    arr_indices[2] = tokenName();\n', '\n', '    // Read from storage\n', '    uint[] memory read_values = target.readMulti(_exec_id, arr_indices).toUintArr();\n', '    // Ensure correct return length\n', '    assert(read_values.length == 3);\n', '\n', '    // Get number of crowdsale tiers\n', '    uint num_tiers = read_values[0];\n', '    // Get number of token decimals\n', '    uint num_decimals = read_values[1];\n', '\n', '    // If the token has not been set, return\n', '    if (read_values[2] == 0)\n', '      return (0, 0);\n', '\n', '    // Overwrite previous buffer - push exec id, data read offset, and read size to buffer\n', '    bytes32[] memory last_arr = new bytes32[](2 * num_tiers);\n', '    // Loop through tiers and get sell cap and purchase price for each tier\n', '    for (uint i = 0; i < 2 * num_tiers; i += 2) {\n', '      last_arr[i] = tierCap(i / 2);\n', '      last_arr[i + 1] = tierPrice(i / 2);\n', '    }\n', '\n', '    // Read from storage\n', '    read_values = target.readMulti(_exec_id, last_arr).toUintArr();\n', '    // Ensure correct return length\n', '    assert(read_values.length == 2 * num_tiers);\n', '\n', '    // Loop through and get wei raise cap and token sell cap\n', '    for (i = 0; i < read_values.length; i+=2) {\n', '      total_sell_cap += read_values[i];\n', '      // Increase maximum wei able to be raised - (tier token sell cap) * (tier price in wei) / (10 ^ decimals)\n', '      wei_raise_cap += (read_values[i] * read_values[i + 1]) / (10 ** num_decimals);\n', '    }\n', '  }\n', '\n', '  /*\n', '  Returns a list of the named tiers of the crowdsale\n', '\n', '  @param _storage: The storage address of the crowdsale application\n', '  @param _exec_id: The execution id of the application\n', '  @return crowdsale_tiers: A list of each tier of the crowdsale\n', '  */\n', '  function getCrowdsaleTierList(address _storage, bytes32 _exec_id) external view returns (bytes32[] memory crowdsale_tiers) {\n', '    GetterInterface target = GetterInterface(_storage);\n', '    // Read from storage and get list length\n', '    uint list_length = uint(target.read(_exec_id, saleTierList()));\n', '\n', '    bytes32[] memory arr_indices = new bytes32[](list_length);\n', '    // Loop over each tier name list location and add to buffer\n', '    for (uint i = 0; i < list_length; i++)\n', '      arr_indices[i] = tierName(i);\n', '\n', '    // Read from storage and return\n', '    crowdsale_tiers = target.readMulti(_exec_id, arr_indices);\n', '  }\n', '\n', '  /*\n', '  Loops through all tiers and their durations, and returns the passed-in index&#39;s start and end dates\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @param _index: The index of the tier in the crowdsale tier list. Input index should be like a normal array index (lowest index: 0)\n', '  @return tier_start: The time when the given tier starts\n', '  @return tier_end: The time at which the given tier ends\n', '  */\n', '  function getTierStartAndEndDates(address _storage, bytes32 _exec_id, uint _index) external view returns (uint tier_start, uint tier_end) {\n', '    GetterInterface target = GetterInterface(_storage);\n', '\n', '    bytes32[] memory arr_indices = new bytes32[](3 + _index);\n', '\n', '    // Add crowdsale tier list length and crowdsale start time to buffer\n', '    arr_indices[0] = saleTierList();\n', '    arr_indices[1] = startTime();\n', '\n', '    for (uint i = 0; i <= _index; i++)\n', '      arr_indices[2 + i] = tierDuration(i);\n', '\n', '    // Read from storage and store return in buffer\n', '    uint[] memory read_values = target.readMulti(_exec_id, arr_indices).toUintArr();\n', '    // Ensure correct return length\n', '    assert(read_values.length == 3 + _index);\n', '\n', '    // Check that the passed-in index is within the range of the tier list\n', '    if (read_values[0] <= _index)\n', '      return (0, 0);\n', '\n', '    // Get returned start time, then loop through each returned duration and get the start time for the tier\n', '    tier_start = read_values[1];\n', '    for (i = 0; i < _index; i++)\n', '      tier_start += read_values[2 + i];\n', '\n', '    // Get the tier end time - start time plus the duration of the tier, the last read value in the list\n', '    tier_end = tier_start + read_values[read_values.length - 1];\n', '  }\n', '\n', '  // Returns the number of tokens sold so far this crowdsale\n', '  function getTokensSold(address _storage, bytes32 _exec_id) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, tokensSold())); }\n', '\n', '  /*\n', '  Returns whitelist information for a given buyer\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @param _tier_index: The index of the tier about which the whitelist information will be pulled\n', '  @param _buyer: The address of the user whose whitelist status will be returned\n', '  @return minimum_purchase_amt: The minimum ammount of tokens the buyer must purchase\n', '  @return max_tokens_remaining: The maximum amount of tokens able to be purchased by the user in this tier\n', '  */\n', '  function getWhitelistStatus(address _storage, bytes32 _exec_id, uint _tier_index, address _buyer) external view\n', '  returns (uint minimum_purchase_amt, uint max_tokens_remaining) {\n', '    GetterInterface target = GetterInterface(_storage);\n', '\n', '    bytes32[] memory arr_indices = new bytes32[](2);\n', '    // Push whitelist minimum contribution location to buffer\n', '    arr_indices[0] = whitelistMinTok(_tier_index, _buyer);\n', '    // Push whitlist maximum spend amount remaining location to buffer\n', '    arr_indices[1] = whitelistMaxTok(_tier_index, _buyer);\n', '\n', '    // Read from storage and return\n', '    uint[] memory read_values = target.readMulti(_exec_id, arr_indices).toUintArr();\n', '    // Ensure correct return length\n', '    assert(read_values.length == 2);\n', '\n', '    minimum_purchase_amt = read_values[0];\n', '    max_tokens_remaining = read_values[1];\n', '  }\n', '\n', '  /*\n', '  Returns the list of whitelisted buyers for a given tier\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @param _tier_index: The index of the tier about which the whitelist information will be pulled\n', '  @return num_whitelisted: The length of the tier&#39;s whitelist array\n', '  @return whitelist: The tier&#39;s whitelisted addresses\n', '  */\n', '  function getTierWhitelist(address _storage, bytes32 _exec_id, uint _tier_index) external view returns (uint num_whitelisted, address[] memory whitelist) {\n', '    // Read from storage and get returned tier whitelist length\n', '    num_whitelisted = uint(GetterInterface(_storage).read(_exec_id, tierWhitelist(_tier_index)));\n', '\n', '    // If there are no whitelisted addresses, return\n', '    if (num_whitelisted == 0)\n', '      return;\n', '\n', '    bytes32[] memory arr_indices = new bytes32[](num_whitelisted);\n', '    // Loop through the number of whitelisted addresses, and push each to the calldata buffer to be read from storage\n', '    for (uint i = 0; i < num_whitelisted; i++)\n', '      arr_indices[i] = bytes32(32 + (32 * i) + uint(tierWhitelist(_tier_index)));\n', '\n', '    // Read from storage and return\n', '    whitelist = GetterInterface(_storage).readMulti(_exec_id, arr_indices).toAddressArr();\n', '  }\n', '\n', '  /// TOKEN GETTERS ///\n', '\n', '  // Returns the token balance of an address\n', '  function balanceOf(address _storage, bytes32 _exec_id, address _owner) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, balances(_owner))); }\n', '\n', '  // Returns the amount of tokens a spender may spend on an owner&#39;s behalf\n', '  function allowance(address _storage, bytes32 _exec_id, address _owner, address _spender) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, allowed(_owner, _spender))); }\n', '\n', '  // Returns the number of display decimals for a token\n', '  function decimals(address _storage, bytes32 _exec_id) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, tokenDecimals())); }\n', '\n', '  // Returns the total token supply\n', '  function totalSupply(address _storage, bytes32 _exec_id) external view returns (uint)\n', '    { return uint(GetterInterface(_storage).read(_exec_id, tokenTotalSupply())); }\n', '\n', '  // Returns the token&#39;s name\n', '  function name(address _storage, bytes32 _exec_id) external view returns (bytes32)\n', '    { return GetterInterface(_storage).read(_exec_id, tokenName()); }\n', '\n', '  // Returns token&#39;s symbol\n', '  function symbol(address _storage, bytes32 _exec_id) external view returns (bytes32)\n', '    { return GetterInterface(_storage).read(_exec_id, tokenSymbol()); }\n', '\n', '  /*\n', '  Returns general information on a token - name, symbol, decimals, and total supply\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under which storage for this instance is located\n', '  @return token_name: The name of the token\n', '  @return token_symbol: The token ticker symbol\n', '  @return token_decimals: The display decimals for the token\n', '  @return total_supply: The total supply of the token\n', '  */\n', '  function getTokenInfo(address _storage, bytes32 _exec_id) external view\n', '  returns (bytes32 token_name, bytes32 token_symbol, uint token_decimals, uint total_supply) {\n', '    //Set up bytes32 array to hold storage seeds\n', '    bytes32[] memory seed_arr = new bytes32[](4);\n', '\n', '    //Assign locations of array to respective seeds\n', '    seed_arr[0] = tokenName();\n', '    seed_arr[1] = tokenSymbol();\n', '    seed_arr[2] = tokenDecimals();\n', '    seed_arr[3] = tokenTotalSupply();\n', '\n', '    //Read and return values from storage\n', '    bytes32[] memory values_arr = GetterInterface(_storage).readMulti(_exec_id, seed_arr);\n', '\n', '    //Assign values to return params\n', '    token_name = values_arr[0];\n', '    token_symbol = values_arr[1];\n', '    token_decimals = uint(values_arr[2]);\n', '    total_supply = uint(values_arr[3]);\n', '  }\n', '\n', '  // Returns whether or not an address is a transfer agent, meaning they can transfer tokens before the crowdsale is finished\n', '  function getTransferAgentStatus(address _storage, bytes32 _exec_id, address _agent) external view returns (bool)\n', '    { return GetterInterface(_storage).read(_exec_id, transferAgents(_agent)) != 0 ? true : false; }\n', '\n', '  /*\n', '  Returns information on a reserved token address (the crowdsale admin can set reserved tokens for addresses before initializing the crowdsale)\n', '\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under storage for this app instance is located\n', '  @return num_destinations: The length of the crowdsale&#39;s reserved token destination array\n', '  @return reserved_destinations: A list of the addresses which have reserved tokens or percents\n', '  */\n', '  function getReservedTokenDestinationList(address _storage, bytes32 _exec_id) external view\n', '  returns (uint num_destinations, address[] reserved_destinations) {\n', '    // Read reserved destination list length from storage\n', '    num_destinations = uint(GetterInterface(_storage).read(_exec_id, reservedDestinations()));\n', '\n', '    // If num_destinations is 0, return now\n', '    if (num_destinations == 0)\n', '      return (num_destinations, reserved_destinations);\n', '\n', '    /// Loop through each list in storage, and get each address -\n', '\n', '    bytes32[] memory arr_indices = new bytes32[](num_destinations);\n', '    // Add each destination index location to calldata\n', '    for (uint i = 1; i <= num_destinations; i++)\n', '      arr_indices[i - 1] = bytes32((32 * i) + uint(reservedDestinations()));\n', '\n', '    // Read from storage, and return data to buffer\n', '    reserved_destinations = GetterInterface(_storage).readMulti(_exec_id, arr_indices).toAddressArr();\n', '  }\n', '\n', '  /*\n', '  Returns information on a reserved token address (the crowdsale admin can set reserved tokens for addresses before initializing the crowdsale)\n', '  @param _storage: The address where application storage is located\n', '  @param _exec_id: The application execution id under storage for this app instance is located\n', '  @param _destination: The address about which reserved token information will be pulled\n', '  @return destination_list_index: The index in the reserved token destination list where this address is found, plus 1. If zero, destination has no reserved tokens\n', '  @return num_tokens: The number of tokens reserved for this address\n', '  @return num_percent: The percent of tokens sold during the crowdsale reserved for this address\n', '  @return percent_decimals: The number of decimals in the above percent reserved - used to calculate with precision\n', '  */\n', '  function getReservedDestinationInfo(address _storage, bytes32 _exec_id, address _destination) external view\n', '  returns (uint destination_list_index, uint num_tokens, uint num_percent, uint percent_decimals) {\n', '    bytes32[] memory arr_indices = new bytes32[](4);\n', '    arr_indices[0] = destIndex(_destination);\n', '    arr_indices[1] = destTokens(_destination);\n', '    arr_indices[2] = destPercent(_destination);\n', '    arr_indices[3] = destPrecision(_destination);\n', '\n', '    // Read from storage, and return data to buffer\n', '    bytes32[] memory read_values = GetterInterface(_storage).readMulti(_exec_id, arr_indices);\n', '\n', '    // Get returned values -\n', '    destination_list_index = uint(read_values[0]);\n', '    // If the returned list index for the destination is 0, destination is not in list\n', '    if (destination_list_index == 0)\n', '      return;\n', '    destination_list_index--;\n', '    num_tokens = uint(read_values[1]);\n', '    num_percent = uint(read_values[2]);\n', '    percent_decimals = uint(read_values[3]);\n', '  }\n', '}']