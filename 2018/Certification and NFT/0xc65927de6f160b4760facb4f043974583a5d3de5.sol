['pragma solidity ^0.4.21;\n', '\n', '/**\n', ' * @title Maths\n', ' * A library to make working with numbers in Solidity hurt your brain less.\n', ' */\n', 'library Maths {\n', '  /**\n', '   * @dev Adds two addends together, returns the sum\n', '   * @param addendA the first addend\n', '   * @param addendB the second addend\n', '   * @return sum the sum of the equation (e.g. addendA + addendB)\n', '   */\n', '  function plus(\n', '    uint256 addendA,\n', '    uint256 addendB\n', '  ) public pure returns (uint256 sum) {\n', '    sum = addendA + addendB;\n', '    assert(sum - addendB == addendA);\n', '    return sum;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts the minuend from the subtrahend, returns the difference\n', '   * @param minuend the minuend\n', '   * @param subtrahend the subtrahend\n', '   * @return difference the difference (e.g. minuend - subtrahend)\n', '   */\n', '  function minus(\n', '    uint256 minuend,\n', '    uint256 subtrahend\n', '  ) public pure returns (uint256 difference) {\n', '    assert(minuend >= subtrahend);\n', '    difference = minuend - subtrahend;\n', '    return difference;\n', '  }\n', '\n', '  /**\n', '   * @dev Multiplies two factors, returns the product\n', '   * @param factorA the first factor\n', '   * @param factorB the second factor\n', '   * @return product the product of the equation (e.g. factorA * factorB)\n', '   */\n', '  function mul(\n', '    uint256 factorA,\n', '    uint256 factorB\n', '  ) public pure returns (uint256 product) {\n', '    if (factorA == 0 || factorB == 0) return 0;\n', '    product = factorA * factorB;\n', '    assert(product / factorA == factorB);\n', '    return product;\n', '  }\n', '\n', '  /**\n', '   * @dev Multiplies two factors, returns the product\n', '   * @param factorA the first factor\n', '   * @param factorB the second factor\n', '   * @return product the product of the equation (e.g. factorA * factorB)\n', '   */\n', '  function times(\n', '    uint256 factorA,\n', '    uint256 factorB\n', '  ) public pure returns (uint256 product) {\n', '    return mul(factorA, factorB);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the truncated quotient\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   */\n', '  function div(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient) {\n', '    quotient = dividend / divisor;\n', '    assert(quotient * divisor == dividend);\n', '    return quotient;\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the truncated quotient\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   */\n', '  function dividedBy(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient) {\n', '    return div(dividend, divisor);\n', '  }\n', '\n', '  /**\n', '   * @dev Divides the dividend by divisor, returns the quotient and remainder\n', '   * @param dividend the dividend\n', '   * @param divisor the divisor\n', '   * @return quotient the quotient of the equation (e.g. dividend / divisor)\n', '   * @return remainder the remainder of the equation (e.g. dividend % divisor)\n', '   */\n', '  function divideSafely(\n', '    uint256 dividend,\n', '    uint256 divisor\n', '  ) public pure returns (uint256 quotient, uint256 remainder) {\n', '    quotient = div(dividend, divisor);\n', '    remainder = dividend % divisor;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the lesser of two values.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return result the lesser of the two values\n', '   */\n', '  function min(\n', '    uint256 a,\n', '    uint256 b\n', '  ) public pure returns (uint256 result) {\n', '    result = a <= b ? a : b;\n', '    return result;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the greater of two values.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return result the greater of the two values\n', '   */\n', '  function max(\n', '    uint256 a,\n', '    uint256 b\n', '  ) public pure returns (uint256 result) {\n', '    result = a >= b ? a : b;\n', '    return result;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is less than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than b\n', '   */\n', '  function isLessThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a < b;\n', '    return isTrue;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is equal to or less than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than or equal to b\n', '   */\n', '  function isAtMost(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a <= b;\n', '    return isTrue;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is greater than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is greater than b\n', '   */\n', '  function isGreaterThan(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a > b;\n', '    return isTrue;\n', '  }\n', '\n', '  /**\n', '   * @dev Determines whether a value is equal to or greater than another.\n', '   * @param a the first value\n', '   * @param b the second value\n', '   * @return isTrue whether a is less than b\n', '   */\n', '  function isAtLeast(uint256 a, uint256 b) public pure returns (bool isTrue) {\n', '    isTrue = a >= b;\n', '    return isTrue;\n', '  }\n', '}']