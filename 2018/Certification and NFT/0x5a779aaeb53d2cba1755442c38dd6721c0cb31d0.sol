['pragma solidity ^0.4.13;\n', '\n', 'contract ReentrancyGuard {\n', '\n', '  /**\n', '   * @dev We use a single lock for the whole contract.\n', '   */\n', '  bool private rentrancy_lock = false;\n', '\n', '  /**\n', '   * @dev Prevents a contract from calling itself, directly or indirectly.\n', '   * @notice If you mark a function `nonReentrant`, you should also\n', '   * mark it `external`. Calling one nonReentrant function from\n', '   * another is not supported. Instead, you can implement a\n', '   * `private` function doing the actual work, and a `external`\n', '   * wrapper marked as `nonReentrant`.\n', '   */\n', '  modifier nonReentrant() {\n', '    require(!rentrancy_lock);\n', '    rentrancy_lock = true;\n', '    _;\n', '    rentrancy_lock = false;\n', '  }\n', '\n', '}\n', '\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', 'contract RefundVault is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  enum State { Active, Refunding, Closed }\n', '\n', '  mapping (address => uint256) public deposited;\n', '  address public wallet;\n', '  State public state;\n', '\n', '  event Closed();\n', '  event RefundsEnabled();\n', '  event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '\n', '  function RefundVault(address _wallet) public {\n', '    require(_wallet != address(0));\n', '    wallet = _wallet;\n', '    state = State.Active;\n', '  }\n', '\n', '  function deposit(address investor) onlyOwner public payable {\n', '    require(state == State.Active);\n', '    deposited[investor] = deposited[investor].add(msg.value);\n', '  }\n', '\n', '  function close() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Closed;\n', '    Closed();\n', '    wallet.transfer(this.balance);\n', '  }\n', '\n', '  function enableRefunds() onlyOwner public {\n', '    require(state == State.Active);\n', '    state = State.Refunding;\n', '    RefundsEnabled();\n', '  }\n', '\n', '  function refund(address investor) public {\n', '    require(state == State.Refunding);\n', '    uint256 depositedValue = deposited[investor];\n', '    deposited[investor] = 0;\n', '    investor.transfer(depositedValue);\n', '    Refunded(investor, depositedValue);\n', '  }\n', '}\n', '\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', 'contract BurnableToken is StandardToken {\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '\n', '    /**\n', '     * @dev Burns a specific amount of tokens.\n', '     * @param _value The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value) public {\n', '        require(_value > 0);\n', '        require(_value <= balances[msg.sender]);\n', '        // no need to require value <= totalSupply, since that would imply the\n', "        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '    }\n', '}\n', '\n', 'contract PausableToken is StandardToken, Pausable {\n', '\n', '  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transfer(_to, _value);\n', '  }\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.transferFrom(_from, _to, _value);\n', '  }\n', '\n', '  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n', '    return super.approve(_spender, _value);\n', '  }\n', '\n', '  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n', '    return super.increaseApproval(_spender, _addedValue);\n', '  }\n', '\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n', '    return super.decreaseApproval(_spender, _subtractedValue);\n', '  }\n', '}\n', '\n', 'contract RenCrowdsale is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    // We have a window in the first 5hrs that permits to allocate all whitelist \n', '    // participants with an equal distribution => fiveHourCap = cap / whitelist participants.\n', '    uint256 public fiveHourCap;\n', '    uint256 public cap;\n', '    uint256 public goal;\n', '    uint256 public rate;\n', '\n', '\n', '    address public wallet;\n', '    RefundVault public vault;\n', '    RepublicToken public token;\n', '\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '    uint256 public fiveHours;\n', '    bool public isFinalized = false;\n', '    uint256 public weiRaised;\n', '\n', '    mapping(address => bool) public whitelist;\n', '    mapping(address => uint256) public contribution;\n', '    \n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    event TokenRelease(address indexed beneficiary, uint256 amount);\n', '    event TokenRefund(address indexed refundee, uint256 amount);\n', '    event Finalized();\n', '\n', '    function RenCrowdsale(\n', '        address _token, \n', '        address _wallet,\n', '        uint256 _startTime,\n', '        uint256 _endTime,\n', '        uint256 _rate,\n', '        uint256 _cap,\n', '        uint256 _fiveHourCap,\n', '        uint256 _goal\n', '    ) {\n', '        require(_startTime >= getBlockTimestamp());\n', '        require(_endTime >= _startTime);\n', '        require(_rate > 0);\n', '        require(_goal > 0);\n', '        require(_cap > 0);\n', '        require(_wallet != 0x0);\n', '\n', '        vault = new RefundVault(_wallet);\n', '        token = RepublicToken(_token);\n', '        startTime = _startTime;\n', '        wallet = _wallet;\n', '        endTime = _endTime;\n', '        fiveHours = startTime + 5 * 1 hours;\n', '        fiveHourCap = _fiveHourCap;\n', '        rate = _rate;\n', '        goal = _goal;\n', '        cap = _cap;\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    //low level function to buy tokens\n', '    function buyTokens(address beneficiary) internal {\n', '        require(beneficiary != 0x0);\n', '        require(whitelist[beneficiary]);\n', '        require(validPurchase());\n', '        //derive amount in wei to buy \n', '        uint256 weiAmount = msg.value;\n', '\n', '        // check if contribution is in the first 5 hours\n', '        if (getBlockTimestamp() <= fiveHours) {\n', '             require((contribution[beneficiary].add(weiAmount)) <= fiveHourCap);\n', '        }\n', '        // check if there is enough funds \n', '        uint256 remainingToFund = cap.sub(weiRaised);\n', '        if (weiAmount > remainingToFund) {\n', '            weiAmount = remainingToFund;\n', '        }\n', '        uint256 weiToReturn = msg.value.sub(weiAmount);\n', '        //Forward funds to the vault \n', '        forwardFunds(weiAmount);\n', '        //refund if the contribution exceed the cap\n', '        if (weiToReturn > 0) {\n', '            msg.sender.transfer(weiToReturn);\n', '            TokenRefund(beneficiary, weiToReturn);\n', '        }\n', '        //derive how many tokens\n', '        uint256 tokens = getTokens(weiAmount);\n', '        //update the state of weiRaised\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        contribution[beneficiary] = contribution[beneficiary].add(weiAmount);\n', '     \n', '        //Trigger the event of TokenPurchase\n', '        TokenPurchase(\n', '            msg.sender,\n', '            beneficiary,\n', '            weiAmount,\n', '            tokens\n', '        );\n', '        token.transferTokens(beneficiary, tokens);\n', '        \n', '    }\n', '\n', '    function getTokens(uint256 amount) internal constant returns (uint256) {\n', '        return amount.mul(rate);\n', '    }\n', '\n', '    // contributors can claim refund if the goal is not reached\n', '    function claimRefund() nonReentrant external {\n', '        require(isFinalized);\n', '        require(!goalReached());\n', '        vault.refund(msg.sender);\n', '    }\n', '\n', '    //in case of endTime before the reach of the cap, the owner can claim the unsold tokens\n', '    function claimUnsold() onlyOwner {\n', '        require(endTime <= getBlockTimestamp());\n', '        uint256 unsold = token.balanceOf(this);\n', '\n', '        if (unsold > 0) {\n', '            require(token.transferTokens(msg.sender, unsold));\n', '        }\n', '    }\n', '\n', '    // add/remove to whitelist array of addresses based on boolean status\n', '    function updateWhitelist(address[] addresses, bool status) public onlyOwner {\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            address contributorAddress = addresses[i];\n', '            whitelist[contributorAddress] = status;\n', '        }\n', '    }\n', '\n', '    //Only owner can manually finalize the sale\n', '    function finalize() onlyOwner {\n', '        require(!isFinalized);\n', '        require(hasEnded());\n', '\n', '        if (goalReached()) {\n', '            //Close the vault\n', '            vault.close();\n', '            //Unpause the token \n', '            token.unpause();\n', '            //give ownership back to deployer\n', '            token.transferOwnership(owner);\n', '        } else {\n', '            //else enable refunds\n', '            vault.enableRefunds();\n', '        }\n', '        //update the sate of isFinalized\n', '        isFinalized = true;\n', '        //trigger and emit the event of finalization\n', '        Finalized();\n', '    } \n', '\n', '    // send ether to the fund collection wallet, the vault in this case\n', '    function forwardFunds(uint256 weiAmount) internal {\n', '        vault.deposit.value(weiAmount)(msg.sender);\n', '    }\n', '\n', '    // @return true if crowdsale event has ended or cap reached\n', '    function hasEnded() public constant returns (bool) {\n', '        bool passedEndTime = getBlockTimestamp() > endTime;\n', '        return passedEndTime || capReached();\n', '    }\n', '\n', '    function capReached() public constant returns (bool) {\n', '        return weiRaised >= cap;\n', '    }\n', '\n', '    function goalReached() public constant returns (bool) {\n', '        return weiRaised >= goal;\n', '    }\n', '\n', '    function isWhitelisted(address contributor) public constant returns (bool) {\n', '        return whitelist[contributor];\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase() internal constant returns (bool) {\n', '        bool withinPeriod = getBlockTimestamp() >= startTime && getBlockTimestamp() <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool capNotReached = weiRaised < cap;\n', '        return withinPeriod && nonZeroPurchase && capNotReached;\n', '    }\n', '\n', '    function getBlockTimestamp() internal constant returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '}\n', '\n', 'contract RepublicToken is PausableToken, BurnableToken {\n', '\n', '    string public constant name = "Republic Token";\n', '    string public constant symbol = "REN";\n', '    uint8 public constant decimals = 18;\n', '    uint256 public constant INITIAL_SUPPLY = 1000000000 * 10**uint256(decimals);\n', '    \n', '    /**\n', '     * @notice The RepublicToken Constructor.\n', '     */\n', '    function RepublicToken() {\n', '        totalSupply = INITIAL_SUPPLY;   \n', '        balances[msg.sender] = INITIAL_SUPPLY;\n', '    }\n', '\n', '    function transferTokens(address beneficiary, uint256 amount) onlyOwner returns (bool) {\n', '        require(amount > 0);\n', '\n', '        balances[owner] = balances[owner].sub(amount);\n', '        balances[beneficiary] = balances[beneficiary].add(amount);\n', '        Transfer(owner, beneficiary, amount);\n', '\n', '        return true;\n', '    }\n', '}']