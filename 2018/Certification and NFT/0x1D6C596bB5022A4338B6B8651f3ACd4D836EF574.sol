['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', 'contract BBODServiceRegistry is Ownable {\n', '\n', '  //1. Manager\n', '  //2. CustodyStorage\n', '  mapping(uint => address) public registry;\n', '\n', '    constructor(address _owner) {\n', '        owner = _owner;\n', '    }\n', '\n', '  function setServiceRegistryEntry (uint key, address entry) external onlyOwner {\n', '    registry[key] = entry;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', 'contract ManagerInterface {\n', '  function createCustody(address) external {}\n', '\n', '  function isExchangeAlive() public pure returns (bool) {}\n', '\n', '  function isDailySettlementOnGoing() public pure returns (bool) {}\n', '}\n', '\n', 'contract Custody {\n', '\n', '  using SafeMath for uint;\n', '\n', '  BBODServiceRegistry public bbodServiceRegistry;\n', '  address public owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  constructor(address _serviceRegistryAddress, address _owner) public {\n', '    bbodServiceRegistry = BBODServiceRegistry(_serviceRegistryAddress);\n', '    owner = _owner;\n', '  }\n', '\n', '  function() public payable {}\n', '\n', '  modifier liveExchangeOrOwner(address _recipient) {\n', '    var manager = ManagerInterface(bbodServiceRegistry.registry(1));\n', '\n', '    if (manager.isExchangeAlive()) {\n', '\n', '      require(msg.sender == address(manager));\n', '\n', '      if (manager.isDailySettlementOnGoing()) {\n', '        require(_recipient == address(manager), "Only manager can do this when the settlement is ongoing");\n', '      } else {\n', '        require(_recipient == owner);\n', '      }\n', '\n', '    } else {\n', '      require(msg.sender == owner, "Only owner can do this when exchange is dead");\n', '    }\n', '    _;\n', '  }\n', '\n', '  function withdraw(uint _amount, address _recipient) external liveExchangeOrOwner(_recipient) {\n', '    _recipient.transfer(_amount);\n', '  }\n', '\n', '  function transferToken(address _erc20Address, address _recipient, uint _amount)\n', '    external liveExchangeOrOwner(_recipient) {\n', '\n', '    ERC20 token = ERC20(_erc20Address);\n', '\n', '    token.transfer(_recipient, _amount);\n', '  }\n', '\n', '  function transferOwnership(address newOwner) public {\n', '    require(msg.sender == owner, "Only the owner can transfer ownership");\n', '    require(newOwner != address(0));\n', '\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'contract Insurance is Custody {\n', '\n', '  constructor(address _serviceRegistryAddress, address _owner)\n', '  Custody(_serviceRegistryAddress, _owner) public {}\n', '\n', '  function useInsurance (uint _amount) external {\n', '    var manager = ManagerInterface(bbodServiceRegistry.registry(1));\n', '    //Only usable for manager during settlement\n', '    require(manager.isDailySettlementOnGoing() && msg.sender == address(manager));\n', '\n', '    address(manager).transfer(_amount);\n', '  }\n', '}']