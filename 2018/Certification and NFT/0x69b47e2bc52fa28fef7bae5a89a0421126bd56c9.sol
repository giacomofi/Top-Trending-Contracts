['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '    /**\n', '    * Returns whether the target address is a contract\n', '    * @dev This function will return false if invoked during the constructor of a contract,\n', '    *  as the code is not actually created until after the constructor finishes.\n', '    * @param addr address to check\n', '    * @return whether the target address is a contract\n', '    */\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '}\n', '\n', '/* Controls state and access rights for contract functions\n', ' * @title Operational Control\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from contract created by OpenZeppelin\n', ' * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract OperationalControl {\n', '    // Facilitates access & control for the game.\n', '    // Roles:\n', '    //  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)\n', '    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n', '    //  -otherManagers: Contracts that need access to functions for gameplay\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public managerPrimary;\n', '    address public managerSecondary;\n', '    address public bankManager;\n', '\n', '    // Contracts that require access for gameplay\n', '    mapping(address => uint8) public otherManagers;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n', '    bool public error = false;\n', '\n', '    /// @dev Operation modifiers for limiting access\n', '    modifier onlyManager() {\n', '        require(msg.sender == managerPrimary || msg.sender == managerSecondary);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBanker() {\n', '        require(msg.sender == bankManager);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOtherManagers() {\n', '        require(otherManagers[msg.sender] == 1);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier anyOperator() {\n', '        require(\n', '            msg.sender == managerPrimary ||\n', '            msg.sender == managerSecondary ||\n', '            msg.sender == bankManager ||\n', '            otherManagers[msg.sender] == 1\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Other Manager. (State = 1 is active, 0 is disabled)\n', '    function setOtherManager(address _newOp, uint8 _state) external onlyManager {\n', '        require(_newOp != address(0));\n', '\n', '        otherManagers[_newOp] = _state;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Primary Manager.\n', '    function setPrimaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerPrimary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Secondary Manager.\n', '    function setSecondaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerSecondary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Banker.\n', '    function setBanker(address _newBK) external onlyManager {\n', '        require(_newBK != address(0));\n', '\n', '        bankManager = _newBK;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract has Error\n', '    modifier whenError {\n', '        require(error);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any Operator role to pause the contract.\n', '    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\n', '    function pause() external onlyManager whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function unpause() public onlyManager whenPaused {\n', '        // can&#39;t unpause if contract was upgraded\n', '        paused = false;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function hasError() public onlyManager whenPaused {\n', '        error = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function noError() public onlyManager whenPaused {\n', '        error = false;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _tokenId\n', '    );\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _approved,\n', '        uint256 _tokenId\n', '    );\n', '    event ApprovalForAll(\n', '        address indexed _owner,\n', '        address indexed _operator,\n', '        bool _approved\n', '    );\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '    function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function getApproved(uint256 _tokenId)\n', '        public view returns (address _operator);\n', '\n', '    function setApprovalForAll(address _operator, bool _approved) public;\n', '    function isApprovedForAll(address _owner, address _operator)\n', '        public view returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public;\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 _tokenId);\n', '\n', '    function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '    using SafeMath for uint256;\n', '    using AddressUtils for address;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) internal tokenOwner;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) internal tokenApprovals;\n', '\n', '    // Mapping from owner to number of owned token\n', '    mapping (address => uint256) internal ownedTokensCount;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '    /**\n', '    * @dev Guarantees msg.sender is owner of the given token\n', '    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '    */\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require(ownerOf(_tokenId) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '    * @param _tokenId uint256 ID of the token to validate\n', '    */\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        require(isApprovedOrOwner(msg.sender, _tokenId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address\n', '    * @param _owner address to query the balance of\n', '    * @return uint256 representing the amount owned by the passed address\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        require(_owner != address(0));\n', '        return ownedTokensCount[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the owner of the specified token ID\n', '    * @param _tokenId uint256 ID of the token to query the owner of\n', '    * @return owner address currently marked as the owner of the given token ID\n', '    */\n', '    function ownerOf(uint256 _tokenId) public view returns (address) {\n', '        address owner = tokenOwner[_tokenId];\n', '        require(owner != address(0));\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns whether the specified token exists\n', '    * @param _tokenId uint256 ID of the token to query the existence of\n', '    * @return whether the token exists\n', '    */\n', '    function exists(uint256 _tokenId) public view returns (bool) {\n', '        address owner = tokenOwner[_tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Approves another address to transfer the given token ID\n', '    * @dev The zero address indicates there is no approved address.\n', '    * @dev There can only be one approved address per token at a given time.\n', '    * @dev Can only be called by the token owner or an approved operator.\n', '    * @param _to address to be approved for the given token ID\n', '    * @param _tokenId uint256 ID of the token to be approved\n', '    */\n', '    function approve(address _to, uint256 _tokenId) public {\n', '        address owner = ownerOf(_tokenId);\n', '        require(_to != owner);\n', '        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '        if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '            tokenApprovals[_tokenId] = _to;\n', '            emit Approval(owner, _to, _tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the approved address for a token ID, or zero if no address set\n', '    * @param _tokenId uint256 ID of the token to query the approval of\n', '    * @return address currently approved for the given token ID\n', '    */\n', '    function getApproved(uint256 _tokenId) public view returns (address) {\n', '        return tokenApprovals[_tokenId];\n', '    }\n', '\n', '    /**\n', '    * @dev Sets or unsets the approval of a given operator\n', '    * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '    * @param _to operator address to set the approval\n', '    * @param _approved representing the status of the approval to be set\n', '    */\n', '    function setApprovalForAll(address _to, bool _approved) public {\n', '        require(_to != msg.sender);\n', '        operatorApprovals[msg.sender][_to] = _approved;\n', '        emit ApprovalForAll(msg.sender, _to, _approved);\n', '    }\n', '\n', '    /**\n', '    * @dev Tells whether an operator is approved by a given owner\n', '    * @param _owner owner address which you want to query the approval of\n', '    * @param _operator operator address which you want to query the approval of\n', '    * @return bool whether the given operator is approved by the given owner\n', '    */\n', '    function isApprovedForAll(\n', '        address _owner,\n', '        address _operator\n', '    )\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return operatorApprovals[_owner][_operator];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers the ownership of a given token ID to another address\n', '    * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Safely transfers the ownership of a given token ID to another address\n', '    * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '    *  which is called upon a safe transfer, and return the magic value\n', '    *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '    *  the transfer is reverted.\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        // solium-disable-next-line arg-overflow\n', '        safeTransferFrom(_from, _to, _tokenId, "");\n', '    }\n', '\n', '    /**\n', '    * @dev Safely transfers the ownership of a given token ID to another address\n', '    * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '    *  which is called upon a safe transfer, and return the magic value\n', '    *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '    *  the transfer is reverted.\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @param _data bytes data to send along with a safe transfer check\n', '    */\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        transferFrom(_from, _to, _tokenId);\n', '        // solium-disable-next-line arg-overflow\n', '        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '    }\n', '\n', '    /**\n', '    * @dev Returns whether the given spender can transfer a given token ID\n', '    * @param _spender address of the spender to query\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @return bool whether the msg.sender is approved for the given token ID,\n', '    *  is an operator of the owner, or is the owner of the token\n', '    */\n', '    function isApprovedOrOwner(\n', '        address _spender,\n', '        uint256 _tokenId\n', '    )\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        address owner = ownerOf(_tokenId);\n', '        // Disable solium check because of\n', '        // https://github.com/duaraghav8/Solium/issues/175\n', '        // solium-disable-next-line operator-whitespace\n', '        return (\n', '        _spender == owner ||\n', '        getApproved(_tokenId) == _spender ||\n', '        isApprovedForAll(owner, _spender)\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to mint a new token\n', '    * @dev Reverts if the given token ID already exists\n', '    * @param _to The address that will own the minted token\n', '    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '    */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        require(_to != address(0));\n', '        addTokenTo(_to, _tokenId);\n', '        emit Transfer(address(0), _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to burn a specific token\n', '    * @dev Reverts if the token does not exist\n', '    * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '    */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        clearApproval(_owner, _tokenId);\n', '        removeTokenFrom(_owner, _tokenId);\n', '        emit Transfer(_owner, address(0), _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval of a given token ID\n', '    * @dev Reverts if the given address is not indeed the owner of the token\n', '    * @param _owner owner of the token\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function clearApproval(address _owner, uint256 _tokenId) internal {\n', '        require(ownerOf(_tokenId) == _owner);\n', '        if (tokenApprovals[_tokenId] != address(0)) {\n', '            tokenApprovals[_tokenId] = address(0);\n', '            emit Approval(_owner, address(0), _tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a token ID to the list of a given address\n', '    * @param _to address representing the new owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '    */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        require(tokenOwner[_tokenId] == address(0));\n', '        tokenOwner[_tokenId] = _to;\n', '        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a token ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '    */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        require(ownerOf(_tokenId) == _from);\n', '        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '        tokenOwner[_tokenId] = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to invoke `onERC721Received` on a target address\n', '    * @dev The call is not executed if the target address is not a contract\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _to target address that will receive the tokens\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @param _data bytes optional data to send along with the call\n', '    * @return whether the call correctly returned the expected magic value\n', '    */\n', '    function checkAndCallSafeTransfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (!_to.isContract()) {\n', '            return true;\n', '        }\n', '        bytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '        _from, _tokenId, _data);\n', '        return (retval == ERC721_RECEIVED);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '    /**\n', '    * @dev Magic value to be returned upon successful reception of an NFT\n', '    *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '    *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '    */\n', '    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '    /**\n', '    * @notice Handle the receipt of an NFT\n', '    * @dev The ERC721 smart contract calls this function on the recipient\n', '    *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '    *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '    *  than the magic value MUST result in the transaction being reverted.\n', '    *  Note: the contract address is always the message sender.\n', '    * @param _from The sending address\n', '    * @param _tokenId The NFT identifier which is being transfered\n', '    * @param _data Additional data with no specified format\n', '    * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '    */\n', '    function onERC721Received(\n', '        address _from,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public\n', '        returns(bytes4);\n', '}\n', 'contract ERC721Holder is ERC721Receiver {\n', '    function onERC721Received(address, uint256, bytes) public returns(bytes4) {\n', '        return ERC721_RECEIVED;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '\n', '    // Token name\n', '    string internal name_;\n', '\n', '    // Token symbol\n', '    string internal symbol_;\n', '\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping(address => uint256[]) internal ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] internal allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '    // Base Server Address for Token MetaData URI\n', '    string internal tokenURIBase;\n', '\n', '    /**\n', '    * @dev Returns an URI for a given token ID. Only returns the based location, you will have to appending a token ID to this\n', '    * @dev Throws if the token ID does not exist. May return an empty string.\n', '    * @param _tokenId uint256 ID of the token to query\n', '    */\n', '    function tokenURI(uint256 _tokenId) public view returns (string) {\n', '        require(exists(_tokenId));\n', '        return tokenURIBase;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '    * @param _owner address owning the tokens list to be accessed\n', '    * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '    * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '    */\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(_index < balanceOf(_owner));\n', '        return ownedTokens[_owner][_index];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the total amount of tokens stored by the contract\n', '    * @return uint256 representing the total amount of tokens\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return allTokens.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token ID at a given index of all the tokens in this contract\n', '    * @dev Reverts if the index is greater or equal to the total number of tokens\n', '    * @param _index uint256 representing the index to be accessed of the tokens list\n', '    * @return uint256 token ID at the given index of the tokens list\n', '    */\n', '    function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '        require(_index < totalSupply());\n', '        return allTokens[_index];\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Internal function to set the token URI for a given token\n', '    * @dev Reverts if the token ID does not exist\n', '    * @param _uri string URI to assign\n', '    */\n', '    function _setTokenURIBase(string _uri) internal {\n', '        tokenURIBase = _uri;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a token ID to the list of a given address\n', '    * @param _to address representing the new owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '    */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        super.addTokenTo(_to, _tokenId);\n', '        uint256 length = ownedTokens[_to].length;\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a token ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '    */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        super.removeTokenFrom(_from, _tokenId);\n', '\n', '        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '        ownedTokens[_from][tokenIndex] = lastToken;\n', '        ownedTokens[_from][lastTokenIndex] = 0;\n', '        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '        ownedTokens[_from].length--;\n', '        ownedTokensIndex[_tokenId] = 0;\n', '        ownedTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token name\n', '    * @return string representing the token name\n', '    */\n', '    function name() public view returns (string) {\n', '        return name_;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token symbol\n', '    * @return string representing the token symbol\n', '    */\n', '    function symbol() public view returns (string) {\n', '        return symbol_;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to mint a new token\n', '    * @dev Reverts if the given token ID already exists\n', '    * @param _to address the beneficiary that will own the minted token\n', '    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '    */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        super._mint(_to, _tokenId);\n', '\n', '        allTokensIndex[_tokenId] = allTokens.length;\n', '        allTokens.push(_tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to burn a specific token\n', '    * @dev Reverts if the token does not exist\n', '    * @param _owner owner of the token to burn\n', '    * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '    */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        super._burn(_owner, _tokenId);\n', '\n', '        // Reorg all tokens array\n', '        uint256 tokenIndex = allTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = allTokens.length.sub(1);\n', '        uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '        allTokens[tokenIndex] = lastToken;\n', '        allTokens[lastTokenIndex] = 0;\n', '\n', '        allTokens.length--;\n', '        allTokensIndex[_tokenId] = 0;\n', '        allTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    bytes4 constant InterfaceSignature_ERC165 = 0x01ffc9a7;\n', '    /*\n', '    bytes4(keccak256(&#39;supportsInterface(bytes4)&#39;));\n', '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721Enumerable = 0x780e9d63;\n', '    /*\n', '    bytes4(keccak256(&#39;totalSupply()&#39;)) ^\n', '    bytes4(keccak256(&#39;tokenOfOwnerByIndex(address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;tokenByIndex(uint256)&#39;));\n', '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721Metadata = 0x5b5e139f;\n', '    /*\n', '    bytes4(keccak256(&#39;name()&#39;)) ^\n', '    bytes4(keccak256(&#39;symbol()&#39;)) ^\n', '    bytes4(keccak256(&#39;tokenURI(uint256)&#39;));\n', '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\n', '    /*\n', '    bytes4(keccak256(&#39;balanceOf(address)&#39;)) ^\n', '    bytes4(keccak256(&#39;ownerOf(uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;approve(address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;getApproved(uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;setApprovalForAll(address,bool)&#39;)) ^\n', '    bytes4(keccak256(&#39;isApprovedForAll(address,address)&#39;)) ^\n', '    bytes4(keccak256(&#39;transferFrom(address,address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;safeTransferFrom(address,address,uint256)&#39;)) ^\n', '    bytes4(keccak256(&#39;safeTransferFrom(address,address,uint256,bytes)&#39;));\n', '    */\n', '\n', '    bytes4 public constant InterfaceSignature_ERC721Optional =- 0x4f558e79;\n', '    /*\n', '    bytes4(keccak256(&#39;exists(uint256)&#39;));\n', '    */\n', '\n', '    /**\n', '    * @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    * @dev Returns true for any standardized interfaces implemented by this contract.\n', '    * @param _interfaceID bytes4 the interface to check for\n', '    * @return true for any standardized interfaces implemented by this contract.\n', '    */\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n', '    {\n', '        return ((_interfaceID == InterfaceSignature_ERC165)\n', '        || (_interfaceID == InterfaceSignature_ERC721)\n', '        || (_interfaceID == InterfaceSignature_ERC721Enumerable)\n', '        || (_interfaceID == InterfaceSignature_ERC721Metadata));\n', '    }\n', '\n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract CCNFTFactory is ERC721Token, OperationalControl {\n', '\n', '    /*** EVENTS ***/\n', '    /// @dev The Created event is fired whenever a new asset comes into existence.\n', '    event AssetCreated(address owner, uint256 assetId, uint256 assetType, uint256 sequenceId, uint256 creationTime);\n', '\n', '    event DetachRequest(address owner, uint256 assetId, uint256 timestamp);\n', '\n', '    event NFTDetached(address requester, uint256 assetId);\n', '\n', '    event NFTAttached(address requester, uint256 assetId);\n', '\n', '    // Mapping from assetId to uint encoded data for NFT\n', '    mapping(uint256 => uint256) internal nftDataA;\n', '    mapping(uint256 => uint128) internal nftDataB;\n', '\n', '    // Mapping from Asset Types to count of that type in exsistance\n', '    mapping(uint32 => uint64) internal assetTypeTotalCount;\n', '\n', '    mapping(uint32 => uint64) internal assetTypeBurnedCount;\n', '  \n', '    // Mapping from index of a Asset Type to get AssetID\n', '    mapping(uint256 => mapping(uint32 => uint64) ) internal sequenceIDToTypeForID;\n', '\n', '     // Mapping from Asset Type to string name of type\n', '    mapping(uint256 => string) internal assetTypeName;\n', '\n', '    // Mapping from assetType to creation limit\n', '    mapping(uint256 => uint32) internal assetTypeCreationLimit;\n', '\n', '    // Indicates if attached system is Active (Transfers will be blocked if attached and active)\n', '    bool public attachedSystemActive;\n', '\n', '    // Is Asset Burning Active\n', '    bool public canBurn;\n', '\n', '    // Time LS Oracle has to respond to detach requests\n', '    uint32 public detachmentTime = 300;\n', '\n', '    /**\n', '    * @dev Constructor function\n', '    */\n', '    constructor() public {\n', '        require(msg.sender != address(0));\n', '        paused = true;\n', '        error = false;\n', '        canBurn = false;\n', '        managerPrimary = msg.sender;\n', '        managerSecondary = msg.sender;\n', '        bankManager = msg.sender;\n', '\n', '        name_ = "CCNFTFactory";\n', '        symbol_ = "CCNFT";\n', '    }\n', '\n', '    /**\n', '    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '    * @param _tokenId uint256 ID of the token to validate\n', '    */\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        uint256 isAttached = getIsNFTAttached(_tokenId);\n', '        if(isAttached == 2) {\n', '            //One-Time Auth for Physical Card Transfers\n', '            require(msg.sender == managerPrimary ||\n', '                msg.sender == managerSecondary ||\n', '                msg.sender == bankManager ||\n', '                otherManagers[msg.sender] == 1\n', '            );\n', '            updateIsAttached(_tokenId, 1);\n', '        } else if(attachedSystemActive == true && isAttached >= 1) {\n', '            require(msg.sender == managerPrimary ||\n', '                msg.sender == managerSecondary ||\n', '                msg.sender == bankManager ||\n', '                otherManagers[msg.sender] == 1\n', '            );\n', '        }\n', '        else {\n', '            require(isApprovedOrOwner(msg.sender, _tokenId));\n', '        }\n', '        \n', '    _;\n', '    }\n', '\n', '    /** Public Functions */\n', '\n', '    // Returns the AssetID for the Nth assetID for a specific type\n', '    function getAssetIDForTypeSequenceID(uint256 _seqId, uint256 _type) public view returns (uint256 _assetID) {\n', '        return sequenceIDToTypeForID[_seqId][uint32(_type)];\n', '    }\n', '\n', '    function getAssetDetails(uint256 _assetId) public view returns(\n', '        uint256 assetId,\n', '        uint256 ownersIndex,\n', '        uint256 assetTypeSeqId,\n', '        uint256 assetType,\n', '        uint256 createdTimestamp,\n', '        uint256 isAttached,\n', '        address creator,\n', '        address owner\n', '    ) {\n', '        require(exists(_assetId));\n', '\n', '        uint256 nftData = nftDataA[_assetId];\n', '        uint256 nftDataBLocal = nftDataB[_assetId];\n', '\n', '        assetId = _assetId;\n', '        ownersIndex = ownedTokensIndex[_assetId];\n', '        createdTimestamp = uint256(uint48(nftData>>160));\n', '        assetType = uint256(uint32(nftData>>208));\n', '        assetTypeSeqId = uint256(uint64(nftDataBLocal));\n', '        isAttached = uint256(uint48(nftDataBLocal>>64));\n', '        creator = address(nftData);\n', '        owner = ownerOf(_assetId);\n', '    }\n', '\n', '    function totalSupplyOfType(uint256 _type) public view returns (uint256 _totalOfType) {\n', '        return assetTypeTotalCount[uint32(_type)] - assetTypeBurnedCount[uint32(_type)];\n', '    }\n', '\n', '    function totalCreatedOfType(uint256 _type) public view returns (uint256 _totalOfType) {\n', '        return assetTypeTotalCount[uint32(_type)];\n', '    }\n', '\n', '    function totalBurnedOfType(uint256 _type) public view returns (uint256 _totalOfType) {\n', '        return assetTypeBurnedCount[uint32(_type)];\n', '    }\n', '\n', '    function getAssetRawMeta(uint256 _assetId) public view returns(\n', '        uint256 dataA,\n', '        uint128 dataB\n', '    ) {\n', '        require(exists(_assetId));\n', '\n', '        dataA = nftDataA[_assetId];\n', '        dataB = nftDataB[_assetId];\n', '    }\n', '\n', '    function getAssetIdItemType(uint256 _assetId) public view returns(\n', '        uint256 assetType\n', '    ) {\n', '        require(exists(_assetId));\n', '        uint256 dataA = nftDataA[_assetId];\n', '        assetType = uint256(uint32(dataA>>208));\n', '    }\n', '\n', '    function getAssetIdTypeSequenceId(uint256 _assetId) public view returns(\n', '        uint256 assetTypeSequenceId\n', '    ) {\n', '        require(exists(_assetId));\n', '        uint256 dataB = nftDataB[_assetId];\n', '        assetTypeSequenceId = uint256(uint64(dataB));\n', '    }\n', '    \n', '    function getIsNFTAttached( uint256 _assetId) \n', '    public view returns(\n', '        uint256 isAttached\n', '    ) {\n', '        uint256 nftData = nftDataB[_assetId];\n', '        isAttached = uint256(uint48(nftData>>64));\n', '    }\n', '\n', '    function getAssetIdCreator(uint256 _assetId) public view returns(\n', '        address creator\n', '    ) {\n', '        require(exists(_assetId));\n', '        uint256 dataA = nftDataA[_assetId];\n', '        creator = address(dataA);\n', '    }\n', '\n', '    function isAssetIdOwnerOrApproved(address requesterAddress, uint256 _assetId) public view returns(\n', '        bool\n', '    ) {\n', '        return isApprovedOrOwner(requesterAddress, _assetId);\n', '    }\n', '\n', '    function getAssetIdOwner(uint256 _assetId) public view returns(\n', '        address owner\n', '    ) {\n', '        require(exists(_assetId));\n', '\n', '        owner = ownerOf(_assetId);\n', '    }\n', '\n', '    function getAssetIdOwnerIndex(uint256 _assetId) public view returns(\n', '        uint256 ownerIndex\n', '    ) {\n', '        require(exists(_assetId));\n', '        ownerIndex = ownedTokensIndex[_assetId];\n', '    }\n', '\n', '    /// @param _owner The owner whose ships tokens we are interested in.\n', '    /// @dev This method MUST NEVER be called by smart contract code. First, it&#39;s fairly\n', '    ///  expensive (it walks the entire NFT owners array looking for NFT belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 resultIndex = 0;\n', '\n', '            // We count on the fact that all Asset have IDs starting at 0 and increasing\n', '            // sequentially up to the total count.\n', '            uint256 _itemIndex;\n', '\n', '            for (_itemIndex = 0; _itemIndex < tokenCount; _itemIndex++) {\n', '                result[resultIndex] = tokenOfOwnerByIndex(_owner,_itemIndex);\n', '                resultIndex++;\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '\n', '    // Get the name of the Asset type\n', '    function getTypeName (uint32 _type) public returns(string) {\n', '        return assetTypeName[_type];\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Transfers the ownership of a given token ID to another address, modified to prevent transfer if attached and system is active\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '    \n', '\n', '    \n', '    function multiBatchTransferFrom(\n', '        uint256[] _assetIds, \n', '        address[] _fromB, \n', '        address[] _toB) \n', '        public\n', '    {\n', '        uint256 _id;\n', '        address _to;\n', '        address _from;\n', '        \n', '        for (uint256 i = 0; i < _assetIds.length; ++i) {\n', '            _id = _assetIds[i];\n', '            _to = _toB[i];\n', '            _from = _fromB[i];\n', '\n', '            require(isApprovedOrOwner(msg.sender, _id));\n', '\n', '            require(_from != address(0));\n', '            require(_to != address(0));\n', '    \n', '            clearApproval(_from, _id);\n', '            removeTokenFrom(_from, _id);\n', '            addTokenTo(_to, _id);\n', '    \n', '            emit Transfer(_from, _to, _id);\n', '        }\n', '        \n', '    }\n', '    \n', '    function batchTransferFrom(uint256[] _assetIds, address _from, address _to) \n', '        public\n', '    {\n', '        uint256 _id;\n', '        \n', '        for (uint256 i = 0; i < _assetIds.length; ++i) {\n', '            _id = _assetIds[i];\n', '\n', '            require(isApprovedOrOwner(msg.sender, _id));\n', '\n', '            require(_from != address(0));\n', '            require(_to != address(0));\n', '    \n', '            clearApproval(_from, _id);\n', '            removeTokenFrom(_from, _id);\n', '            addTokenTo(_to, _id);\n', '    \n', '            emit Transfer(_from, _to, _id);\n', '        }\n', '    }\n', '    \n', '    function multiBatchSafeTransferFrom(\n', '        uint256[] _assetIds, \n', '        address[] _fromB, \n', '        address[] _toB\n', '        )\n', '        public\n', '    {\n', '        uint256 _id;\n', '        address _to;\n', '        address _from;\n', '        \n', '        for (uint256 i = 0; i < _assetIds.length; ++i) {\n', '            _id = _assetIds[i];\n', '            _to  = _toB[i];\n', '            _from  = _fromB[i];\n', '\n', '            safeTransferFrom(_from, _to, _id);\n', '        }\n', '    }\n', '\n', '    function batchSafeTransferFrom(\n', '        uint256[] _assetIds, \n', '        address _from, \n', '        address _to\n', '        )\n', '        public\n', '    {\n', '        uint256 _id;\n', '        for (uint256 i = 0; i < _assetIds.length; ++i) {\n', '            _id = _assetIds[i];\n', '            safeTransferFrom(_from, _to, _id);\n', '        }\n', '    }\n', '\n', '\n', '    function batchApprove(\n', '        uint256[] _assetIds, \n', '        address _spender\n', '        )\n', '        public\n', '    {\n', '        uint256 _id;\n', '        for (uint256 i = 0; i < _assetIds.length; ++i) {\n', '            _id = _assetIds[i];\n', '            approve(_spender, _id);\n', '        }\n', '        \n', '    }\n', '\n', '\n', '    function batchSetApprovalForAll(\n', '        address[] _spenders,\n', '        bool _approved\n', '        )\n', '        public\n', '    {\n', '        address _spender;\n', '        for (uint256 i = 0; i < _spenders.length; ++i) {\n', '            _spender = _spenders[i];\n', '            setApprovalForAll(_spender, _approved);\n', '        }\n', '    }  \n', '    \n', '    function requestDetachment(\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '    {\n', '        //Request can only be made by owner or approved address\n', '        require(isApprovedOrOwner(msg.sender, _tokenId));\n', '\n', '        uint256 isAttached = getIsNFTAttached(_tokenId);\n', '\n', '        require(isAttached >= 1);\n', '\n', '        if(attachedSystemActive == true) {\n', '            //Checks to see if request was made and if time elapsed\n', '            if(isAttached > 1 && block.timestamp - isAttached > detachmentTime) {\n', '                isAttached = 0;\n', '            } else if(isAttached > 1) {\n', '                //Fail if time is already set for attachment\n', '                require(isAttached == 1);\n', '            } else {\n', '                //Is attached, set detachment time and make request to detach\n', '                emit DetachRequest(msg.sender, _tokenId, block.timestamp);\n', '                isAttached = block.timestamp;\n', '            }           \n', '        } else {\n', '            isAttached = 0;\n', '        } \n', '\n', '        if(isAttached == 0) {\n', '            emit NFTDetached(msg.sender, _tokenId);\n', '        }\n', '\n', '        updateIsAttached(_tokenId, isAttached);\n', '    }\n', '\n', '    function attachAsset(\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        uint256 isAttached = getIsNFTAttached(_tokenId);\n', '\n', '        require(isAttached == 0);\n', '        isAttached = 1;\n', '\n', '        updateIsAttached(_tokenId, isAttached);\n', '\n', '        emit NFTAttached(msg.sender, _tokenId);\n', '    }\n', '\n', '    function batchAttachAssets(uint256[] _ids) public {\n', '        for(uint i = 0; i < _ids.length; i++) {\n', '            attachAsset(_ids[i]);\n', '        }\n', '    }\n', '\n', '    function batchDetachAssets(uint256[] _ids) public {\n', '        for(uint i = 0; i < _ids.length; i++) {\n', '            requestDetachment(_ids[i]);\n', '        }\n', '    }\n', '\n', '    function requestDetachmentOnPause (uint256 _tokenId) public \n', '    whenPaused {\n', '        //Request can only be made by owner or approved address\n', '        require(isApprovedOrOwner(msg.sender, _tokenId));\n', '\n', '        updateIsAttached(_tokenId, 0);\n', '    }\n', '\n', '    function batchBurnAssets(uint256[] _assetIDs) public {\n', '        uint256 _id;\n', '        for(uint i = 0; i < _assetIDs.length; i++) {\n', '            _id = _assetIDs[i];\n', '            burnAsset(_id);\n', '        }\n', '    }\n', '\n', '    function burnAsset(uint256 _assetID) public {\n', '        // Is Burn Enabled\n', '        require(canBurn == true);\n', '\n', '        // Deny Action if Attached\n', '        require(getIsNFTAttached(_assetID) == 0);\n', '\n', '        require(isApprovedOrOwner(msg.sender, _assetID) == true);\n', '        \n', '        //Updates Type Total Count\n', '        uint256 _assetType = getAssetIdItemType(_assetID);\n', '        assetTypeBurnedCount[uint32(_assetType)] += 1;\n', '        \n', '        _burn(msg.sender, _assetID);\n', '    }\n', '\n', '\n', '    /** Dev Functions */\n', '\n', '    function setTokenURIBase (string _tokenURI) public onlyManager {\n', '        _setTokenURIBase(_tokenURI);\n', '    }\n', '\n', '    function setPermanentLimitForType (uint32 _type, uint256 _limit) public onlyManager {\n', '        //Only allows Limit to be set once\n', '        require(assetTypeCreationLimit[_type] == 0);\n', '\n', '        assetTypeCreationLimit[_type] = uint32(_limit);\n', '    }\n', '\n', '    function setTypeName (uint32 _type, string _name) public anyOperator {\n', '        assetTypeName[_type] = _name;\n', '    }\n', '\n', '    // Minting Function\n', '    function batchSpawnAsset(address _to, uint256[] _assetTypes, uint256[] _assetIds, uint256 _isAttached) public anyOperator {\n', '        uint256 _id;\n', '        uint256 _assetType;\n', '        for(uint i = 0; i < _assetIds.length; i++) {\n', '            _id = _assetIds[i];\n', '            _assetType = _assetTypes[i];\n', '            _createAsset(_to, _assetType, _id, _isAttached, address(0));\n', '        }\n', '    }\n', '\n', '    function batchSpawnAsset(address[] _toB, uint256[] _assetTypes, uint256[] _assetIds, uint256 _isAttached) public anyOperator {\n', '        address _to;\n', '        uint256 _id;\n', '        uint256 _assetType;\n', '        for(uint i = 0; i < _assetIds.length; i++) {\n', '            _to = _toB[i];\n', '            _id = _assetIds[i];\n', '            _assetType = _assetTypes[i];\n', '            _createAsset(_to, _assetType, _id, _isAttached, address(0));\n', '        }\n', '    }\n', '\n', '    function batchSpawnAssetWithCreator(address[] _toB, uint256[] _assetTypes, uint256[] _assetIds, uint256[] _isAttacheds, address[] _creators) public anyOperator {\n', '        address _to;\n', '        address _creator;\n', '        uint256 _id;\n', '        uint256 _assetType;\n', '        uint256 _isAttached;\n', '        for(uint i = 0; i < _assetIds.length; i++) {\n', '            _to = _toB[i];\n', '            _id = _assetIds[i];\n', '            _assetType = _assetTypes[i];\n', '            _creator = _creators[i];\n', '            _isAttached = _isAttacheds[i];\n', '            _createAsset(_to, _assetType, _id, _isAttached, _creator);\n', '        }\n', '    }\n', '\n', '    function spawnAsset(address _to, uint256 _assetType, uint256 _assetID, uint256 _isAttached) public anyOperator {\n', '        _createAsset(_to, _assetType, _assetID, _isAttached, address(0));\n', '    }\n', '\n', '    function spawnAssetWithCreator(address _to, uint256 _assetType, uint256 _assetID, uint256 _isAttached, address _creator) public anyOperator {\n', '        _createAsset(_to, _assetType, _assetID, _isAttached, _creator);\n', '    }\n', '\n', '    /// @dev Remove all Ether from the contract, shouldn&#39;t have any but just incase.\n', '    function withdrawBalance() public onlyBanker {\n', '        // We are using this boolean method to make sure that even if one fails it will still work\n', '        bankManager.transfer(address(this).balance);\n', '    }\n', '\n', '    // Burn Functions\n', '\n', '    function setCanBurn(bool _state) public onlyManager {\n', '        canBurn = _state;\n', '    }\n', '\n', '    function burnAssetOperator(uint256 _assetID) public anyOperator {\n', '        \n', '        require(getIsNFTAttached(_assetID) > 0);\n', '\n', '        //Updates Type Total Count\n', '        uint256 _assetType = getAssetIdItemType(_assetID);\n', '        assetTypeBurnedCount[uint32(_assetType)] += 1;\n', '        \n', '        _burn(ownerOf(_assetID), _assetID);\n', '    }\n', '\n', '    function toggleAttachedEnforement (bool _state) public onlyManager {\n', '        attachedSystemActive = _state;\n', '    }\n', '\n', '    function setDetachmentTime (uint256 _time) public onlyManager {\n', '        //Detactment Time can not be set greater than 2 weeks.\n', '        require(_time <= 1209600);\n', '        detachmentTime = uint32(_time);\n', '    }\n', '\n', '    function setNFTDetached(uint256 _assetID) public anyOperator {\n', '        require(getIsNFTAttached(_assetID) > 0);\n', '\n', '        updateIsAttached(_assetID, 0);\n', '        emit NFTDetached(msg.sender, _assetID);\n', '    }\n', '\n', '    function setBatchDetachCollectibles(uint256[] _assetIds) public anyOperator {\n', '        uint256 _id;\n', '        for(uint i = 0; i < _assetIds.length; i++) {\n', '            _id = _assetIds[i];\n', '            setNFTDetached(_id);\n', '        }\n', '    }\n', '\n', '\n', '\n', '    /** Internal Functions */\n', '\n', '    // @dev For creating NFT Collectible\n', '    function _createAsset(address _to, uint256 _assetType, uint256 _assetID, uint256 _attachState, address _creator) internal returns(uint256) {\n', '        \n', '        uint256 _sequenceId = uint256(assetTypeTotalCount[uint32(_assetType)]) + 1;\n', '\n', '        //Will not allow creation if over limit\n', '        require(assetTypeCreationLimit[uint32(_assetType)] == 0 || assetTypeCreationLimit[uint32(_assetType)] > _sequenceId);\n', '        \n', '        // These requires are not strictly necessary, our calling code should make\n', '        // sure that these conditions are never broken.\n', '        require(_sequenceId == uint256(uint64(_sequenceId)));\n', '\n', '        //Creates NFT\n', '        _mint(_to, _assetID);\n', '\n', '        uint256 nftData = uint256(_creator); // 160 bit address of creator\n', '        nftData |= now<<160; // 48 bit creation timestamp\n', '        nftData |= _assetType<<208; // 32 bit item type \n', '\n', '        uint256 nftDataContinued = uint256(_sequenceId); // 64 bit sequence id of item\n', '        nftDataContinued |= _attachState<<64; // 48 bit state and/or timestamp for detachment\n', '\n', '        nftDataA[_assetID] = nftData;\n', '        nftDataB[_assetID] = uint128(nftDataContinued);\n', '\n', '        assetTypeTotalCount[uint32(_assetType)] += 1;\n', '        sequenceIDToTypeForID[_sequenceId][uint32(_assetType)] = uint64(_assetID);\n', '\n', '        // emit Created event\n', '        emit AssetCreated(_to, _assetID, _assetType, _sequenceId, now);\n', '\n', '        return _assetID;\n', '    }\n', '\n', '    function updateIsAttached(uint256 _assetID, uint256 _isAttached) \n', '    internal\n', '    {\n', '        uint256 nftData = nftDataB[_assetID];\n', '\n', '        uint256 assetTypeSeqId = uint256(uint64(nftData));\n', '\n', '        uint256 nftDataContinued = uint256(assetTypeSeqId); // 64 bit sequence id of item\n', '        nftDataContinued |= _isAttached<<64; // 48 bit state and/or timestamp for detachment\n', '\n', '        nftDataB[_assetID] = uint128(nftDataContinued);\n', '    }\n', '\n', '\n', '\n', '}']
['pragma solidity ^0.4.23;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '    /**\n', '    * Returns whether the target address is a contract\n', '    * @dev This function will return false if invoked during the constructor of a contract,\n', '    *  as the code is not actually created until after the constructor finishes.\n', '    * @param addr address to check\n', '    * @return whether the target address is a contract\n', '    */\n', '    function isContract(address addr) internal view returns (bool) {\n', '        uint256 size;\n', '        // XXX Currently there is no better way to check if there is a contract in an address\n', '        // than to check the size of the code at that address.\n', '        // See https://ethereum.stackexchange.com/a/14016/36603\n', '        // for more details about how this works.\n', '        // TODO Check this again before the Serenity release, because all addresses will be\n', '        // contracts then.\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '\n', '}\n', '\n', '/* Controls state and access rights for contract functions\n', ' * @title Operational Control\n', ' * @author Fazri Zubair & Farhan Khwaja (Lucid Sight, Inc.)\n', ' * Inspired and adapted from contract created by OpenZeppelin\n', ' * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract OperationalControl {\n', '    // Facilitates access & control for the game.\n', '    // Roles:\n', '    //  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)\n', '    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.\n', '    //  -otherManagers: Contracts that need access to functions for gameplay\n', '\n', '    /// @dev Emited when contract is upgraded\n', '    event ContractUpgrade(address newContract);\n', '\n', '    // The addresses of the accounts (or contracts) that can execute actions within each roles.\n', '    address public managerPrimary;\n', '    address public managerSecondary;\n', '    address public bankManager;\n', '\n', '    // Contracts that require access for gameplay\n', '    mapping(address => uint8) public otherManagers;\n', '\n', '    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\n', '    bool public paused = false;\n', '\n', '    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked & refund can be claimed\n', '    bool public error = false;\n', '\n', '    /// @dev Operation modifiers for limiting access\n', '    modifier onlyManager() {\n', '        require(msg.sender == managerPrimary || msg.sender == managerSecondary);\n', '        _;\n', '    }\n', '\n', '    modifier onlyBanker() {\n', '        require(msg.sender == bankManager);\n', '        _;\n', '    }\n', '\n', '    modifier onlyOtherManagers() {\n', '        require(otherManagers[msg.sender] == 1);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier anyOperator() {\n', '        require(\n', '            msg.sender == managerPrimary ||\n', '            msg.sender == managerSecondary ||\n', '            msg.sender == bankManager ||\n', '            otherManagers[msg.sender] == 1\n', '        );\n', '        _;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Other Manager. (State = 1 is active, 0 is disabled)\n', '    function setOtherManager(address _newOp, uint8 _state) external onlyManager {\n', '        require(_newOp != address(0));\n', '\n', '        otherManagers[_newOp] = _state;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Primary Manager.\n', '    function setPrimaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerPrimary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Secondary Manager.\n', '    function setSecondaryManager(address _newGM) external onlyManager {\n', '        require(_newGM != address(0));\n', '\n', '        managerSecondary = _newGM;\n', '    }\n', '\n', '    /// @dev Assigns a new address to act as the Banker.\n', '    function setBanker(address _newBK) external onlyManager {\n', '        require(_newBK != address(0));\n', '\n', '        bankManager = _newBK;\n', '    }\n', '\n', '    /*** Pausable functionality adapted from OpenZeppelin ***/\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS NOT paused\n', '    modifier whenNotPaused() {\n', '        require(!paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract IS paused\n', '    modifier whenPaused {\n', '        require(paused);\n', '        _;\n', '    }\n', '\n', '    /// @dev Modifier to allow actions only when the contract has Error\n', '    modifier whenError {\n', '        require(error);\n', '        _;\n', '    }\n', '\n', '    /// @dev Called by any Operator role to pause the contract.\n', '    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)\n', '    function pause() external onlyManager whenNotPaused {\n', '        paused = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function unpause() public onlyManager whenPaused {\n', "        // can't unpause if contract was upgraded\n", '        paused = false;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function hasError() public onlyManager whenPaused {\n', '        error = true;\n', '    }\n', '\n', '    /// @dev Unpauses the smart contract. Can only be called by the Game Master\n', '    /// @notice This is public rather than external so it can be called by derived contracts. \n', '    function noError() public onlyManager whenPaused {\n', '        error = false;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic interface\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Basic {\n', '    event Transfer(\n', '        address indexed _from,\n', '        address indexed _to,\n', '        uint256 _tokenId\n', '    );\n', '    event Approval(\n', '        address indexed _owner,\n', '        address indexed _approved,\n', '        uint256 _tokenId\n', '    );\n', '    event ApprovalForAll(\n', '        address indexed _owner,\n', '        address indexed _operator,\n', '        bool _approved\n', '    );\n', '\n', '    function balanceOf(address _owner) public view returns (uint256 _balance);\n', '    function ownerOf(uint256 _tokenId) public view returns (address _owner);\n', '    function exists(uint256 _tokenId) public view returns (bool _exists);\n', '\n', '    function approve(address _to, uint256 _tokenId) public;\n', '    function getApproved(uint256 _tokenId)\n', '        public view returns (address _operator);\n', '\n', '    function setApprovalForAll(address _operator, bool _approved) public;\n', '    function isApprovedForAll(address _owner, address _operator)\n', '        public view returns (bool);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) public;\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\n', '\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public;\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Enumerable is ERC721Basic {\n', '    function totalSupply() public view returns (uint256);\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        public\n', '        view\n', '        returns (uint256 _tokenId);\n', '\n', '    function tokenByIndex(uint256 _index) public view returns (uint256);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Metadata is ERC721Basic {\n', '    function name() public view returns (string _name);\n', '    function symbol() public view returns (string _symbol);\n', '    function tokenURI(uint256 _tokenId) public view returns (string);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, full implementation interface\n', ' * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\n', '}\n', '\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721BasicToken is ERC721Basic {\n', '    using SafeMath for uint256;\n', '    using AddressUtils for address;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '    // Mapping from token ID to owner\n', '    mapping (uint256 => address) internal tokenOwner;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) internal tokenApprovals;\n', '\n', '    // Mapping from owner to number of owned token\n', '    mapping (address => uint256) internal ownedTokensCount;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) internal operatorApprovals;\n', '\n', '    /**\n', '    * @dev Guarantees msg.sender is owner of the given token\n', '    * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\n', '    */\n', '    modifier onlyOwnerOf(uint256 _tokenId) {\n', '        require(ownerOf(_tokenId) == msg.sender);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '    * @param _tokenId uint256 ID of the token to validate\n', '    */\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        require(isApprovedOrOwner(msg.sender, _tokenId));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the balance of the specified address\n', '    * @param _owner address to query the balance of\n', '    * @return uint256 representing the amount owned by the passed address\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256) {\n', '        require(_owner != address(0));\n', '        return ownedTokensCount[_owner];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the owner of the specified token ID\n', '    * @param _tokenId uint256 ID of the token to query the owner of\n', '    * @return owner address currently marked as the owner of the given token ID\n', '    */\n', '    function ownerOf(uint256 _tokenId) public view returns (address) {\n', '        address owner = tokenOwner[_tokenId];\n', '        require(owner != address(0));\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '    * @dev Returns whether the specified token exists\n', '    * @param _tokenId uint256 ID of the token to query the existence of\n', '    * @return whether the token exists\n', '    */\n', '    function exists(uint256 _tokenId) public view returns (bool) {\n', '        address owner = tokenOwner[_tokenId];\n', '        return owner != address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Approves another address to transfer the given token ID\n', '    * @dev The zero address indicates there is no approved address.\n', '    * @dev There can only be one approved address per token at a given time.\n', '    * @dev Can only be called by the token owner or an approved operator.\n', '    * @param _to address to be approved for the given token ID\n', '    * @param _tokenId uint256 ID of the token to be approved\n', '    */\n', '    function approve(address _to, uint256 _tokenId) public {\n', '        address owner = ownerOf(_tokenId);\n', '        require(_to != owner);\n', '        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\n', '\n', '        if (getApproved(_tokenId) != address(0) || _to != address(0)) {\n', '            tokenApprovals[_tokenId] = _to;\n', '            emit Approval(owner, _to, _tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the approved address for a token ID, or zero if no address set\n', '    * @param _tokenId uint256 ID of the token to query the approval of\n', '    * @return address currently approved for the given token ID\n', '    */\n', '    function getApproved(uint256 _tokenId) public view returns (address) {\n', '        return tokenApprovals[_tokenId];\n', '    }\n', '\n', '    /**\n', '    * @dev Sets or unsets the approval of a given operator\n', '    * @dev An operator is allowed to transfer all tokens of the sender on their behalf\n', '    * @param _to operator address to set the approval\n', '    * @param _approved representing the status of the approval to be set\n', '    */\n', '    function setApprovalForAll(address _to, bool _approved) public {\n', '        require(_to != msg.sender);\n', '        operatorApprovals[msg.sender][_to] = _approved;\n', '        emit ApprovalForAll(msg.sender, _to, _approved);\n', '    }\n', '\n', '    /**\n', '    * @dev Tells whether an operator is approved by a given owner\n', '    * @param _owner owner address which you want to query the approval of\n', '    * @param _operator operator address which you want to query the approval of\n', '    * @return bool whether the given operator is approved by the given owner\n', '    */\n', '    function isApprovedForAll(\n', '        address _owner,\n', '        address _operator\n', '    )\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        return operatorApprovals[_owner][_operator];\n', '    }\n', '\n', '    /**\n', '    * @dev Transfers the ownership of a given token ID to another address\n', '    * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Safely transfers the ownership of a given token ID to another address\n', '    * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '    *  which is called upon a safe transfer, and return the magic value\n', '    *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '    *  the transfer is reverted.\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        // solium-disable-next-line arg-overflow\n', '        safeTransferFrom(_from, _to, _tokenId, "");\n', '    }\n', '\n', '    /**\n', '    * @dev Safely transfers the ownership of a given token ID to another address\n', '    * @dev If the target address is a contract, it must implement `onERC721Received`,\n', '    *  which is called upon a safe transfer, and return the magic value\n', '    *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,\n', '    *  the transfer is reverted.\n', '    * @dev Requires the msg sender to be the owner, approved, or operator\n', '    * @param _from current owner of the token\n', '    * @param _to address to receive the ownership of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @param _data bytes data to send along with a safe transfer check\n', '    */\n', '    function safeTransferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        transferFrom(_from, _to, _tokenId);\n', '        // solium-disable-next-line arg-overflow\n', '        require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\n', '    }\n', '\n', '    /**\n', '    * @dev Returns whether the given spender can transfer a given token ID\n', '    * @param _spender address of the spender to query\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @return bool whether the msg.sender is approved for the given token ID,\n', '    *  is an operator of the owner, or is the owner of the token\n', '    */\n', '    function isApprovedOrOwner(\n', '        address _spender,\n', '        uint256 _tokenId\n', '    )\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        address owner = ownerOf(_tokenId);\n', '        // Disable solium check because of\n', '        // https://github.com/duaraghav8/Solium/issues/175\n', '        // solium-disable-next-line operator-whitespace\n', '        return (\n', '        _spender == owner ||\n', '        getApproved(_tokenId) == _spender ||\n', '        isApprovedForAll(owner, _spender)\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to mint a new token\n', '    * @dev Reverts if the given token ID already exists\n', '    * @param _to The address that will own the minted token\n', '    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '    */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        require(_to != address(0));\n', '        addTokenTo(_to, _tokenId);\n', '        emit Transfer(address(0), _to, _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to burn a specific token\n', '    * @dev Reverts if the token does not exist\n', '    * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '    */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        clearApproval(_owner, _tokenId);\n', '        removeTokenFrom(_owner, _tokenId);\n', '        emit Transfer(_owner, address(0), _tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to clear current approval of a given token ID\n', '    * @dev Reverts if the given address is not indeed the owner of the token\n', '    * @param _owner owner of the token\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    */\n', '    function clearApproval(address _owner, uint256 _tokenId) internal {\n', '        require(ownerOf(_tokenId) == _owner);\n', '        if (tokenApprovals[_tokenId] != address(0)) {\n', '            tokenApprovals[_tokenId] = address(0);\n', '            emit Approval(_owner, address(0), _tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a token ID to the list of a given address\n', '    * @param _to address representing the new owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '    */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        require(tokenOwner[_tokenId] == address(0));\n', '        tokenOwner[_tokenId] = _to;\n', '        ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a token ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '    */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        require(ownerOf(_tokenId) == _from);\n', '        ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\n', '        tokenOwner[_tokenId] = address(0);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to invoke `onERC721Received` on a target address\n', '    * @dev The call is not executed if the target address is not a contract\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _to target address that will receive the tokens\n', '    * @param _tokenId uint256 ID of the token to be transferred\n', '    * @param _data bytes optional data to send along with the call\n', '    * @return whether the call correctly returned the expected magic value\n', '    */\n', '    function checkAndCallSafeTransfer(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        internal\n', '        returns (bool)\n', '    {\n', '        if (!_to.isContract()) {\n', '            return true;\n', '        }\n', '        bytes4 retval = ERC721Receiver(_to).onERC721Received(\n', '        _from, _tokenId, _data);\n', '        return (retval == ERC721_RECEIVED);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' *  from ERC721 asset contracts.\n', ' */\n', 'contract ERC721Receiver {\n', '    /**\n', '    * @dev Magic value to be returned upon successful reception of an NFT\n', '    *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,\n', '    *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\n', '    */\n', '    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\n', '\n', '    /**\n', '    * @notice Handle the receipt of an NFT\n', '    * @dev The ERC721 smart contract calls this function on the recipient\n', '    *  after a `safetransfer`. This function MAY throw to revert and reject the\n', '    *  transfer. This function MUST use 50,000 gas or less. Return of other\n', '    *  than the magic value MUST result in the transaction being reverted.\n', '    *  Note: the contract address is always the message sender.\n', '    * @param _from The sending address\n', '    * @param _tokenId The NFT identifier which is being transfered\n', '    * @param _data Additional data with no specified format\n', '    * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`\n', '    */\n', '    function onERC721Received(\n', '        address _from,\n', '        uint256 _tokenId,\n', '        bytes _data\n', '    )\n', '        public\n', '        returns(bytes4);\n', '}\n', 'contract ERC721Holder is ERC721Receiver {\n', '    function onERC721Received(address, uint256, bytes) public returns(bytes4) {\n', '        return ERC721_RECEIVED;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Full ERC721 Token\n', ' * This implementation includes all the required and some optional functionality of the ERC721 standard\n', ' * Moreover, it includes approve all functionality using operator terminology\n', ' * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', ' */\n', 'contract ERC721Token is ERC721, ERC721BasicToken {\n', '\n', '    // Token name\n', '    string internal name_;\n', '\n', '    // Token symbol\n', '    string internal symbol_;\n', '\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping(address => uint256[]) internal ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) internal ownedTokensIndex;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] internal allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) internal allTokensIndex;\n', '\n', '    // Base Server Address for Token MetaData URI\n', '    string internal tokenURIBase;\n', '\n', '    /**\n', '    * @dev Returns an URI for a given token ID. Only returns the based location, you will have to appending a token ID to this\n', '    * @dev Throws if the token ID does not exist. May return an empty string.\n', '    * @param _tokenId uint256 ID of the token to query\n', '    */\n', '    function tokenURI(uint256 _tokenId) public view returns (string) {\n', '        require(exists(_tokenId));\n', '        return tokenURIBase;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token ID at a given index of the tokens list of the requested owner\n', '    * @param _owner address owning the tokens list to be accessed\n', '    * @param _index uint256 representing the index to be accessed of the requested tokens list\n', '    * @return uint256 token ID at the given index of the tokens list owned by the requested address\n', '    */\n', '    function tokenOfOwnerByIndex(\n', '        address _owner,\n', '        uint256 _index\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(_index < balanceOf(_owner));\n', '        return ownedTokens[_owner][_index];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the total amount of tokens stored by the contract\n', '    * @return uint256 representing the total amount of tokens\n', '    */\n', '    function totalSupply() public view returns (uint256) {\n', '        return allTokens.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token ID at a given index of all the tokens in this contract\n', '    * @dev Reverts if the index is greater or equal to the total number of tokens\n', '    * @param _index uint256 representing the index to be accessed of the tokens list\n', '    * @return uint256 token ID at the given index of the tokens list\n', '    */\n', '    function tokenByIndex(uint256 _index) public view returns (uint256) {\n', '        require(_index < totalSupply());\n', '        return allTokens[_index];\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Internal function to set the token URI for a given token\n', '    * @dev Reverts if the token ID does not exist\n', '    * @param _uri string URI to assign\n', '    */\n', '    function _setTokenURIBase(string _uri) internal {\n', '        tokenURIBase = _uri;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to add a token ID to the list of a given address\n', '    * @param _to address representing the new owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '    */\n', '    function addTokenTo(address _to, uint256 _tokenId) internal {\n', '        super.addTokenTo(_to, _tokenId);\n', '        uint256 length = ownedTokens[_to].length;\n', '        ownedTokens[_to].push(_tokenId);\n', '        ownedTokensIndex[_tokenId] = length;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to remove a token ID from the list of a given address\n', '    * @param _from address representing the previous owner of the given token ID\n', '    * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '    */\n', '    function removeTokenFrom(address _from, uint256 _tokenId) internal {\n', '        super.removeTokenFrom(_from, _tokenId);\n', '\n', '        uint256 tokenIndex = ownedTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\n', '        uint256 lastToken = ownedTokens[_from][lastTokenIndex];\n', '\n', '        ownedTokens[_from][tokenIndex] = lastToken;\n', '        ownedTokens[_from][lastTokenIndex] = 0;\n', '        // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\n', '        // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\n', '        // the lastToken to the first position, and then dropping the element placed in the last position of the list\n', '\n', '        ownedTokens[_from].length--;\n', '        ownedTokensIndex[_tokenId] = 0;\n', '        ownedTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token name\n', '    * @return string representing the token name\n', '    */\n', '    function name() public view returns (string) {\n', '        return name_;\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the token symbol\n', '    * @return string representing the token symbol\n', '    */\n', '    function symbol() public view returns (string) {\n', '        return symbol_;\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to mint a new token\n', '    * @dev Reverts if the given token ID already exists\n', '    * @param _to address the beneficiary that will own the minted token\n', '    * @param _tokenId uint256 ID of the token to be minted by the msg.sender\n', '    */\n', '    function _mint(address _to, uint256 _tokenId) internal {\n', '        super._mint(_to, _tokenId);\n', '\n', '        allTokensIndex[_tokenId] = allTokens.length;\n', '        allTokens.push(_tokenId);\n', '    }\n', '\n', '    /**\n', '    * @dev Internal function to burn a specific token\n', '    * @dev Reverts if the token does not exist\n', '    * @param _owner owner of the token to burn\n', '    * @param _tokenId uint256 ID of the token being burned by the msg.sender\n', '    */\n', '    function _burn(address _owner, uint256 _tokenId) internal {\n', '        super._burn(_owner, _tokenId);\n', '\n', '        // Reorg all tokens array\n', '        uint256 tokenIndex = allTokensIndex[_tokenId];\n', '        uint256 lastTokenIndex = allTokens.length.sub(1);\n', '        uint256 lastToken = allTokens[lastTokenIndex];\n', '\n', '        allTokens[tokenIndex] = lastToken;\n', '        allTokens[lastTokenIndex] = 0;\n', '\n', '        allTokens.length--;\n', '        allTokensIndex[_tokenId] = 0;\n', '        allTokensIndex[lastToken] = tokenIndex;\n', '    }\n', '\n', '    bytes4 constant InterfaceSignature_ERC165 = 0x01ffc9a7;\n', '    /*\n', "    bytes4(keccak256('supportsInterface(bytes4)'));\n", '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721Enumerable = 0x780e9d63;\n', '    /*\n', "    bytes4(keccak256('totalSupply()')) ^\n", "    bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\n", "    bytes4(keccak256('tokenByIndex(uint256)'));\n", '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721Metadata = 0x5b5e139f;\n', '    /*\n', "    bytes4(keccak256('name()')) ^\n", "    bytes4(keccak256('symbol()')) ^\n", "    bytes4(keccak256('tokenURI(uint256)'));\n", '    */\n', '\n', '    bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\n', '    /*\n', "    bytes4(keccak256('balanceOf(address)')) ^\n", "    bytes4(keccak256('ownerOf(uint256)')) ^\n", "    bytes4(keccak256('approve(address,uint256)')) ^\n", "    bytes4(keccak256('getApproved(uint256)')) ^\n", "    bytes4(keccak256('setApprovalForAll(address,bool)')) ^\n", "    bytes4(keccak256('isApprovedForAll(address,address)')) ^\n", "    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\n", "    bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\n", "    bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'));\n", '    */\n', '\n', '    bytes4 public constant InterfaceSignature_ERC721Optional =- 0x4f558e79;\n', '    /*\n', "    bytes4(keccak256('exists(uint256)'));\n", '    */\n', '\n', '    /**\n', '    * @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\n', '    * @dev Returns true for any standardized interfaces implemented by this contract.\n', '    * @param _interfaceID bytes4 the interface to check for\n', '    * @return true for any standardized interfaces implemented by this contract.\n', '    */\n', '    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\n', '    {\n', '        return ((_interfaceID == InterfaceSignature_ERC165)\n', '        || (_interfaceID == InterfaceSignature_ERC721)\n', '        || (_interfaceID == InterfaceSignature_ERC721Enumerable)\n', '        || (_interfaceID == InterfaceSignature_ERC721Metadata));\n', '    }\n', '\n', '    function implementsERC721() public pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '}\n', '\n', 'contract CCNFTFactory is ERC721Token, OperationalControl {\n', '\n', '    /*** EVENTS ***/\n', '    /// @dev The Created event is fired whenever a new asset comes into existence.\n', '    event AssetCreated(address owner, uint256 assetId, uint256 assetType, uint256 sequenceId, uint256 creationTime);\n', '\n', '    event DetachRequest(address owner, uint256 assetId, uint256 timestamp);\n', '\n', '    event NFTDetached(address requester, uint256 assetId);\n', '\n', '    event NFTAttached(address requester, uint256 assetId);\n', '\n', '    // Mapping from assetId to uint encoded data for NFT\n', '    mapping(uint256 => uint256) internal nftDataA;\n', '    mapping(uint256 => uint128) internal nftDataB;\n', '\n', '    // Mapping from Asset Types to count of that type in exsistance\n', '    mapping(uint32 => uint64) internal assetTypeTotalCount;\n', '\n', '    mapping(uint32 => uint64) internal assetTypeBurnedCount;\n', '  \n', '    // Mapping from index of a Asset Type to get AssetID\n', '    mapping(uint256 => mapping(uint32 => uint64) ) internal sequenceIDToTypeForID;\n', '\n', '     // Mapping from Asset Type to string name of type\n', '    mapping(uint256 => string) internal assetTypeName;\n', '\n', '    // Mapping from assetType to creation limit\n', '    mapping(uint256 => uint32) internal assetTypeCreationLimit;\n', '\n', '    // Indicates if attached system is Active (Transfers will be blocked if attached and active)\n', '    bool public attachedSystemActive;\n', '\n', '    // Is Asset Burning Active\n', '    bool public canBurn;\n', '\n', '    // Time LS Oracle has to respond to detach requests\n', '    uint32 public detachmentTime = 300;\n', '\n', '    /**\n', '    * @dev Constructor function\n', '    */\n', '    constructor() public {\n', '        require(msg.sender != address(0));\n', '        paused = true;\n', '        error = false;\n', '        canBurn = false;\n', '        managerPrimary = msg.sender;\n', '        managerSecondary = msg.sender;\n', '        bankManager = msg.sender;\n', '\n', '        name_ = "CCNFTFactory";\n', '        symbol_ = "CCNFT";\n', '    }\n', '\n', '    /**\n', '    * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\n', '    * @param _tokenId uint256 ID of the token to validate\n', '    */\n', '    modifier canTransfer(uint256 _tokenId) {\n', '        uint256 isAttached = getIsNFTAttached(_tokenId);\n', '        if(isAttached == 2) {\n', '            //One-Time Auth for Physical Card Transfers\n', '            require(msg.sender == managerPrimary ||\n', '                msg.sender == managerSecondary ||\n', '                msg.sender == bankManager ||\n', '                otherManagers[msg.sender] == 1\n', '            );\n', '            updateIsAttached(_tokenId, 1);\n', '        } else if(attachedSystemActive == true && isAttached >= 1) {\n', '            require(msg.sender == managerPrimary ||\n', '                msg.sender == managerSecondary ||\n', '                msg.sender == bankManager ||\n', '                otherManagers[msg.sender] == 1\n', '            );\n', '        }\n', '        else {\n', '            require(isApprovedOrOwner(msg.sender, _tokenId));\n', '        }\n', '        \n', '    _;\n', '    }\n', '\n', '    /** Public Functions */\n', '\n', '    // Returns the AssetID for the Nth assetID for a specific type\n', '    function getAssetIDForTypeSequenceID(uint256 _seqId, uint256 _type) public view returns (uint256 _assetID) {\n', '        return sequenceIDToTypeForID[_seqId][uint32(_type)];\n', '    }\n', '\n', '    function getAssetDetails(uint256 _assetId) public view returns(\n', '        uint256 assetId,\n', '        uint256 ownersIndex,\n', '        uint256 assetTypeSeqId,\n', '        uint256 assetType,\n', '        uint256 createdTimestamp,\n', '        uint256 isAttached,\n', '        address creator,\n', '        address owner\n', '    ) {\n', '        require(exists(_assetId));\n', '\n', '        uint256 nftData = nftDataA[_assetId];\n', '        uint256 nftDataBLocal = nftDataB[_assetId];\n', '\n', '        assetId = _assetId;\n', '        ownersIndex = ownedTokensIndex[_assetId];\n', '        createdTimestamp = uint256(uint48(nftData>>160));\n', '        assetType = uint256(uint32(nftData>>208));\n', '        assetTypeSeqId = uint256(uint64(nftDataBLocal));\n', '        isAttached = uint256(uint48(nftDataBLocal>>64));\n', '        creator = address(nftData);\n', '        owner = ownerOf(_assetId);\n', '    }\n', '\n', '    function totalSupplyOfType(uint256 _type) public view returns (uint256 _totalOfType) {\n', '        return assetTypeTotalCount[uint32(_type)] - assetTypeBurnedCount[uint32(_type)];\n', '    }\n', '\n', '    function totalCreatedOfType(uint256 _type) public view returns (uint256 _totalOfType) {\n', '        return assetTypeTotalCount[uint32(_type)];\n', '    }\n', '\n', '    function totalBurnedOfType(uint256 _type) public view returns (uint256 _totalOfType) {\n', '        return assetTypeBurnedCount[uint32(_type)];\n', '    }\n', '\n', '    function getAssetRawMeta(uint256 _assetId) public view returns(\n', '        uint256 dataA,\n', '        uint128 dataB\n', '    ) {\n', '        require(exists(_assetId));\n', '\n', '        dataA = nftDataA[_assetId];\n', '        dataB = nftDataB[_assetId];\n', '    }\n', '\n', '    function getAssetIdItemType(uint256 _assetId) public view returns(\n', '        uint256 assetType\n', '    ) {\n', '        require(exists(_assetId));\n', '        uint256 dataA = nftDataA[_assetId];\n', '        assetType = uint256(uint32(dataA>>208));\n', '    }\n', '\n', '    function getAssetIdTypeSequenceId(uint256 _assetId) public view returns(\n', '        uint256 assetTypeSequenceId\n', '    ) {\n', '        require(exists(_assetId));\n', '        uint256 dataB = nftDataB[_assetId];\n', '        assetTypeSequenceId = uint256(uint64(dataB));\n', '    }\n', '    \n', '    function getIsNFTAttached( uint256 _assetId) \n', '    public view returns(\n', '        uint256 isAttached\n', '    ) {\n', '        uint256 nftData = nftDataB[_assetId];\n', '        isAttached = uint256(uint48(nftData>>64));\n', '    }\n', '\n', '    function getAssetIdCreator(uint256 _assetId) public view returns(\n', '        address creator\n', '    ) {\n', '        require(exists(_assetId));\n', '        uint256 dataA = nftDataA[_assetId];\n', '        creator = address(dataA);\n', '    }\n', '\n', '    function isAssetIdOwnerOrApproved(address requesterAddress, uint256 _assetId) public view returns(\n', '        bool\n', '    ) {\n', '        return isApprovedOrOwner(requesterAddress, _assetId);\n', '    }\n', '\n', '    function getAssetIdOwner(uint256 _assetId) public view returns(\n', '        address owner\n', '    ) {\n', '        require(exists(_assetId));\n', '\n', '        owner = ownerOf(_assetId);\n', '    }\n', '\n', '    function getAssetIdOwnerIndex(uint256 _assetId) public view returns(\n', '        uint256 ownerIndex\n', '    ) {\n', '        require(exists(_assetId));\n', '        ownerIndex = ownedTokensIndex[_assetId];\n', '    }\n', '\n', '    /// @param _owner The owner whose ships tokens we are interested in.\n', "    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\n", '    ///  expensive (it walks the entire NFT owners array looking for NFT belonging to owner),\n', '    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\n', '    ///  not contract-to-contract calls.\n', '    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\n', '        uint256 tokenCount = balanceOf(_owner);\n', '\n', '        if (tokenCount == 0) {\n', '            // Return an empty array\n', '            return new uint256[](0);\n', '        } else {\n', '            uint256[] memory result = new uint256[](tokenCount);\n', '            uint256 resultIndex = 0;\n', '\n', '            // We count on the fact that all Asset have IDs starting at 0 and increasing\n', '            // sequentially up to the total count.\n', '            uint256 _itemIndex;\n', '\n', '            for (_itemIndex = 0; _itemIndex < tokenCount; _itemIndex++) {\n', '                result[resultIndex] = tokenOfOwnerByIndex(_owner,_itemIndex);\n', '                resultIndex++;\n', '            }\n', '\n', '            return result;\n', '        }\n', '    }\n', '\n', '    // Get the name of the Asset type\n', '    function getTypeName (uint32 _type) public returns(string) {\n', '        return assetTypeName[_type];\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Transfers the ownership of a given token ID to another address, modified to prevent transfer if attached and system is active\n', '    */\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        require(_from != address(0));\n', '        require(_to != address(0));\n', '\n', '        clearApproval(_from, _tokenId);\n', '        removeTokenFrom(_from, _tokenId);\n', '        addTokenTo(_to, _tokenId);\n', '\n', '        emit Transfer(_from, _to, _tokenId);\n', '    }\n', '    \n', '\n', '    \n', '    function multiBatchTransferFrom(\n', '        uint256[] _assetIds, \n', '        address[] _fromB, \n', '        address[] _toB) \n', '        public\n', '    {\n', '        uint256 _id;\n', '        address _to;\n', '        address _from;\n', '        \n', '        for (uint256 i = 0; i < _assetIds.length; ++i) {\n', '            _id = _assetIds[i];\n', '            _to = _toB[i];\n', '            _from = _fromB[i];\n', '\n', '            require(isApprovedOrOwner(msg.sender, _id));\n', '\n', '            require(_from != address(0));\n', '            require(_to != address(0));\n', '    \n', '            clearApproval(_from, _id);\n', '            removeTokenFrom(_from, _id);\n', '            addTokenTo(_to, _id);\n', '    \n', '            emit Transfer(_from, _to, _id);\n', '        }\n', '        \n', '    }\n', '    \n', '    function batchTransferFrom(uint256[] _assetIds, address _from, address _to) \n', '        public\n', '    {\n', '        uint256 _id;\n', '        \n', '        for (uint256 i = 0; i < _assetIds.length; ++i) {\n', '            _id = _assetIds[i];\n', '\n', '            require(isApprovedOrOwner(msg.sender, _id));\n', '\n', '            require(_from != address(0));\n', '            require(_to != address(0));\n', '    \n', '            clearApproval(_from, _id);\n', '            removeTokenFrom(_from, _id);\n', '            addTokenTo(_to, _id);\n', '    \n', '            emit Transfer(_from, _to, _id);\n', '        }\n', '    }\n', '    \n', '    function multiBatchSafeTransferFrom(\n', '        uint256[] _assetIds, \n', '        address[] _fromB, \n', '        address[] _toB\n', '        )\n', '        public\n', '    {\n', '        uint256 _id;\n', '        address _to;\n', '        address _from;\n', '        \n', '        for (uint256 i = 0; i < _assetIds.length; ++i) {\n', '            _id = _assetIds[i];\n', '            _to  = _toB[i];\n', '            _from  = _fromB[i];\n', '\n', '            safeTransferFrom(_from, _to, _id);\n', '        }\n', '    }\n', '\n', '    function batchSafeTransferFrom(\n', '        uint256[] _assetIds, \n', '        address _from, \n', '        address _to\n', '        )\n', '        public\n', '    {\n', '        uint256 _id;\n', '        for (uint256 i = 0; i < _assetIds.length; ++i) {\n', '            _id = _assetIds[i];\n', '            safeTransferFrom(_from, _to, _id);\n', '        }\n', '    }\n', '\n', '\n', '    function batchApprove(\n', '        uint256[] _assetIds, \n', '        address _spender\n', '        )\n', '        public\n', '    {\n', '        uint256 _id;\n', '        for (uint256 i = 0; i < _assetIds.length; ++i) {\n', '            _id = _assetIds[i];\n', '            approve(_spender, _id);\n', '        }\n', '        \n', '    }\n', '\n', '\n', '    function batchSetApprovalForAll(\n', '        address[] _spenders,\n', '        bool _approved\n', '        )\n', '        public\n', '    {\n', '        address _spender;\n', '        for (uint256 i = 0; i < _spenders.length; ++i) {\n', '            _spender = _spenders[i];\n', '            setApprovalForAll(_spender, _approved);\n', '        }\n', '    }  \n', '    \n', '    function requestDetachment(\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '    {\n', '        //Request can only be made by owner or approved address\n', '        require(isApprovedOrOwner(msg.sender, _tokenId));\n', '\n', '        uint256 isAttached = getIsNFTAttached(_tokenId);\n', '\n', '        require(isAttached >= 1);\n', '\n', '        if(attachedSystemActive == true) {\n', '            //Checks to see if request was made and if time elapsed\n', '            if(isAttached > 1 && block.timestamp - isAttached > detachmentTime) {\n', '                isAttached = 0;\n', '            } else if(isAttached > 1) {\n', '                //Fail if time is already set for attachment\n', '                require(isAttached == 1);\n', '            } else {\n', '                //Is attached, set detachment time and make request to detach\n', '                emit DetachRequest(msg.sender, _tokenId, block.timestamp);\n', '                isAttached = block.timestamp;\n', '            }           \n', '        } else {\n', '            isAttached = 0;\n', '        } \n', '\n', '        if(isAttached == 0) {\n', '            emit NFTDetached(msg.sender, _tokenId);\n', '        }\n', '\n', '        updateIsAttached(_tokenId, isAttached);\n', '    }\n', '\n', '    function attachAsset(\n', '        uint256 _tokenId\n', '    )\n', '        public\n', '        canTransfer(_tokenId)\n', '    {\n', '        uint256 isAttached = getIsNFTAttached(_tokenId);\n', '\n', '        require(isAttached == 0);\n', '        isAttached = 1;\n', '\n', '        updateIsAttached(_tokenId, isAttached);\n', '\n', '        emit NFTAttached(msg.sender, _tokenId);\n', '    }\n', '\n', '    function batchAttachAssets(uint256[] _ids) public {\n', '        for(uint i = 0; i < _ids.length; i++) {\n', '            attachAsset(_ids[i]);\n', '        }\n', '    }\n', '\n', '    function batchDetachAssets(uint256[] _ids) public {\n', '        for(uint i = 0; i < _ids.length; i++) {\n', '            requestDetachment(_ids[i]);\n', '        }\n', '    }\n', '\n', '    function requestDetachmentOnPause (uint256 _tokenId) public \n', '    whenPaused {\n', '        //Request can only be made by owner or approved address\n', '        require(isApprovedOrOwner(msg.sender, _tokenId));\n', '\n', '        updateIsAttached(_tokenId, 0);\n', '    }\n', '\n', '    function batchBurnAssets(uint256[] _assetIDs) public {\n', '        uint256 _id;\n', '        for(uint i = 0; i < _assetIDs.length; i++) {\n', '            _id = _assetIDs[i];\n', '            burnAsset(_id);\n', '        }\n', '    }\n', '\n', '    function burnAsset(uint256 _assetID) public {\n', '        // Is Burn Enabled\n', '        require(canBurn == true);\n', '\n', '        // Deny Action if Attached\n', '        require(getIsNFTAttached(_assetID) == 0);\n', '\n', '        require(isApprovedOrOwner(msg.sender, _assetID) == true);\n', '        \n', '        //Updates Type Total Count\n', '        uint256 _assetType = getAssetIdItemType(_assetID);\n', '        assetTypeBurnedCount[uint32(_assetType)] += 1;\n', '        \n', '        _burn(msg.sender, _assetID);\n', '    }\n', '\n', '\n', '    /** Dev Functions */\n', '\n', '    function setTokenURIBase (string _tokenURI) public onlyManager {\n', '        _setTokenURIBase(_tokenURI);\n', '    }\n', '\n', '    function setPermanentLimitForType (uint32 _type, uint256 _limit) public onlyManager {\n', '        //Only allows Limit to be set once\n', '        require(assetTypeCreationLimit[_type] == 0);\n', '\n', '        assetTypeCreationLimit[_type] = uint32(_limit);\n', '    }\n', '\n', '    function setTypeName (uint32 _type, string _name) public anyOperator {\n', '        assetTypeName[_type] = _name;\n', '    }\n', '\n', '    // Minting Function\n', '    function batchSpawnAsset(address _to, uint256[] _assetTypes, uint256[] _assetIds, uint256 _isAttached) public anyOperator {\n', '        uint256 _id;\n', '        uint256 _assetType;\n', '        for(uint i = 0; i < _assetIds.length; i++) {\n', '            _id = _assetIds[i];\n', '            _assetType = _assetTypes[i];\n', '            _createAsset(_to, _assetType, _id, _isAttached, address(0));\n', '        }\n', '    }\n', '\n', '    function batchSpawnAsset(address[] _toB, uint256[] _assetTypes, uint256[] _assetIds, uint256 _isAttached) public anyOperator {\n', '        address _to;\n', '        uint256 _id;\n', '        uint256 _assetType;\n', '        for(uint i = 0; i < _assetIds.length; i++) {\n', '            _to = _toB[i];\n', '            _id = _assetIds[i];\n', '            _assetType = _assetTypes[i];\n', '            _createAsset(_to, _assetType, _id, _isAttached, address(0));\n', '        }\n', '    }\n', '\n', '    function batchSpawnAssetWithCreator(address[] _toB, uint256[] _assetTypes, uint256[] _assetIds, uint256[] _isAttacheds, address[] _creators) public anyOperator {\n', '        address _to;\n', '        address _creator;\n', '        uint256 _id;\n', '        uint256 _assetType;\n', '        uint256 _isAttached;\n', '        for(uint i = 0; i < _assetIds.length; i++) {\n', '            _to = _toB[i];\n', '            _id = _assetIds[i];\n', '            _assetType = _assetTypes[i];\n', '            _creator = _creators[i];\n', '            _isAttached = _isAttacheds[i];\n', '            _createAsset(_to, _assetType, _id, _isAttached, _creator);\n', '        }\n', '    }\n', '\n', '    function spawnAsset(address _to, uint256 _assetType, uint256 _assetID, uint256 _isAttached) public anyOperator {\n', '        _createAsset(_to, _assetType, _assetID, _isAttached, address(0));\n', '    }\n', '\n', '    function spawnAssetWithCreator(address _to, uint256 _assetType, uint256 _assetID, uint256 _isAttached, address _creator) public anyOperator {\n', '        _createAsset(_to, _assetType, _assetID, _isAttached, _creator);\n', '    }\n', '\n', "    /// @dev Remove all Ether from the contract, shouldn't have any but just incase.\n", '    function withdrawBalance() public onlyBanker {\n', '        // We are using this boolean method to make sure that even if one fails it will still work\n', '        bankManager.transfer(address(this).balance);\n', '    }\n', '\n', '    // Burn Functions\n', '\n', '    function setCanBurn(bool _state) public onlyManager {\n', '        canBurn = _state;\n', '    }\n', '\n', '    function burnAssetOperator(uint256 _assetID) public anyOperator {\n', '        \n', '        require(getIsNFTAttached(_assetID) > 0);\n', '\n', '        //Updates Type Total Count\n', '        uint256 _assetType = getAssetIdItemType(_assetID);\n', '        assetTypeBurnedCount[uint32(_assetType)] += 1;\n', '        \n', '        _burn(ownerOf(_assetID), _assetID);\n', '    }\n', '\n', '    function toggleAttachedEnforement (bool _state) public onlyManager {\n', '        attachedSystemActive = _state;\n', '    }\n', '\n', '    function setDetachmentTime (uint256 _time) public onlyManager {\n', '        //Detactment Time can not be set greater than 2 weeks.\n', '        require(_time <= 1209600);\n', '        detachmentTime = uint32(_time);\n', '    }\n', '\n', '    function setNFTDetached(uint256 _assetID) public anyOperator {\n', '        require(getIsNFTAttached(_assetID) > 0);\n', '\n', '        updateIsAttached(_assetID, 0);\n', '        emit NFTDetached(msg.sender, _assetID);\n', '    }\n', '\n', '    function setBatchDetachCollectibles(uint256[] _assetIds) public anyOperator {\n', '        uint256 _id;\n', '        for(uint i = 0; i < _assetIds.length; i++) {\n', '            _id = _assetIds[i];\n', '            setNFTDetached(_id);\n', '        }\n', '    }\n', '\n', '\n', '\n', '    /** Internal Functions */\n', '\n', '    // @dev For creating NFT Collectible\n', '    function _createAsset(address _to, uint256 _assetType, uint256 _assetID, uint256 _attachState, address _creator) internal returns(uint256) {\n', '        \n', '        uint256 _sequenceId = uint256(assetTypeTotalCount[uint32(_assetType)]) + 1;\n', '\n', '        //Will not allow creation if over limit\n', '        require(assetTypeCreationLimit[uint32(_assetType)] == 0 || assetTypeCreationLimit[uint32(_assetType)] > _sequenceId);\n', '        \n', '        // These requires are not strictly necessary, our calling code should make\n', '        // sure that these conditions are never broken.\n', '        require(_sequenceId == uint256(uint64(_sequenceId)));\n', '\n', '        //Creates NFT\n', '        _mint(_to, _assetID);\n', '\n', '        uint256 nftData = uint256(_creator); // 160 bit address of creator\n', '        nftData |= now<<160; // 48 bit creation timestamp\n', '        nftData |= _assetType<<208; // 32 bit item type \n', '\n', '        uint256 nftDataContinued = uint256(_sequenceId); // 64 bit sequence id of item\n', '        nftDataContinued |= _attachState<<64; // 48 bit state and/or timestamp for detachment\n', '\n', '        nftDataA[_assetID] = nftData;\n', '        nftDataB[_assetID] = uint128(nftDataContinued);\n', '\n', '        assetTypeTotalCount[uint32(_assetType)] += 1;\n', '        sequenceIDToTypeForID[_sequenceId][uint32(_assetType)] = uint64(_assetID);\n', '\n', '        // emit Created event\n', '        emit AssetCreated(_to, _assetID, _assetType, _sequenceId, now);\n', '\n', '        return _assetID;\n', '    }\n', '\n', '    function updateIsAttached(uint256 _assetID, uint256 _isAttached) \n', '    internal\n', '    {\n', '        uint256 nftData = nftDataB[_assetID];\n', '\n', '        uint256 assetTypeSeqId = uint256(uint64(nftData));\n', '\n', '        uint256 nftDataContinued = uint256(assetTypeSeqId); // 64 bit sequence id of item\n', '        nftDataContinued |= _isAttached<<64; // 48 bit state and/or timestamp for detachment\n', '\n', '        nftDataB[_assetID] = uint128(nftDataContinued);\n', '    }\n', '\n', '\n', '\n', '}']
