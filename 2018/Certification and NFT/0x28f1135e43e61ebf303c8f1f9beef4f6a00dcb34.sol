['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * XC Contract Interface.\n', ' */\n', 'interface XCInterface {\n', '\n', '    /**\n', '     * Set contract service status.\n', '     * @param status contract service status (0:closed;1:only-closed-lock;2:only-closed-unlock;3:opened;).\n', '     */\n', '    function setStatus(uint8 status) external;\n', '\n', '    /**\n', '     * Get contract service status.\n', '     * @return contract service status.\n', '     */\n', '    function getStatus() external view returns (uint8);\n', '\n', '    /**\n', '     * Get the current contract platform name.\n', '     * @return contract platform name.\n', '     */\n', '    function getPlatformName() external view returns (bytes32);\n', '\n', '    /**\n', '     * Set the current contract administrator.\n', '     * @param account account of contract administrator.\n', '     */\n', '    function setAdmin(address account) external;\n', '\n', '    /**\n', '     * Get the current contract administrator.\n', '     * @return contract administrator.\n', '     */\n', '    function getAdmin() external view returns (address);\n', '\n', '    /**\n', '     * Set the Token contract address.\n', '     * @param account contract address.\n', '     */\n', '    function setToken(address account) external;\n', '\n', '    /**\n', '     * Get the Token contract address.\n', '     * @return contract address.\n', '     */\n', '    function getToken() external view returns (address);\n', '\n', '    /**\n', '     * Set the XCPlugin contract address.\n', '     * @param account contract address.\n', '     */\n', '    function setXCPlugin(address account) external;\n', '\n', '    /**\n', '     * Get the XCPlugin contract address.\n', '     * @return contract address.\n', '     */\n', '    function getXCPlugin() external view returns (address);\n', '\n', '    /**\n', '     * Transfer out of cross chain.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     */\n', '    function lock(address toAccount, uint value) external;\n', '\n', '    /**\n', '     * Transfer in of cross chain.\n', '     * @param txid transaction id.\n', '     * @param fromAccount ame of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     */\n', '    function unlock(string txid, address fromAccount, address toAccount, uint value) external;\n', '\n', '    /**\n', '     * Transfer the misoperation to the amount of the contract account to the specified account.\n', '     * @param account the specified account.\n', '     * @param value transfer amount.\n', '     */\n', '    function withdraw(address account, uint value) external;\n', '}\n', '\n', '/**\n', ' * XC Plugin Contract Interface.\n', ' */\n', 'interface XCPluginInterface {\n', '\n', '    /**\n', '     * Open the contract service status.\n', '     */\n', '    function start() external;\n', '\n', '    /**\n', '     * Close the contract service status.\n', '     */\n', '    function stop() external;\n', '\n', '    /**\n', '     * Get contract service status.\n', '     * @return contract service status.\n', '     */\n', '    function getStatus() external view returns (bool);\n', '\n', '    /**\n', '     * Get the current contract platform name.\n', '     * @return contract platform name.\n', '     */\n', '    function getPlatformName() external view returns (bytes32);\n', '\n', '    /**\n', '     * Set the current contract administrator.\n', '     * @param account account of contract administrator.\n', '     */\n', '    function setAdmin(address account) external;\n', '\n', '    /**\n', '     * Get the current contract administrator.\n', '     * @return contract administrator.\n', '     */\n', '    function getAdmin() external view returns (address);\n', '\n', '    /**\n', '     * Get the current token symbol.\n', '     * @return token symbol.\n', '     */\n', '    function getTokenSymbol() external view returns (bytes32);\n', '\n', '    /**\n', '     * Add a contract trust caller.\n', '     * @param caller account of caller.\n', '     */\n', '    function addCaller(address caller) external;\n', '\n', '    /**\n', '     * Delete a contract trust caller.\n', '     * @param caller account of caller.\n', '     */\n', '    function deleteCaller(address caller) external;\n', '\n', '    /**\n', '     * Whether the trust caller exists.\n', '     * @param caller account of caller.\n', '     * @return whether exists.\n', '     */\n', '    function existCaller(address caller) external view returns (bool);\n', '\n', '    /**\n', '     * Get all contract trusted callers.\n', '     * @return al lcallers.\n', '     */\n', '    function getCallers() external view returns (address[]);\n', '\n', '    /**\n', '     * Get the trusted platform name.\n', '     * @return name a platform name.\n', '     */\n', '    function getTrustPlatform() external view returns (bytes32 name);\n', '\n', '    /**\n', '     * Add the trusted platform public key information.\n', '     * @param publicKey a public key.\n', '     */\n', '    function addPublicKey(address publicKey) external;\n', '\n', '    /**\n', '     * Delete the trusted platform public key information.\n', '     * @param publicKey a public key.\n', '     */\n', '    function deletePublicKey(address publicKey) external;\n', '\n', '    /**\n', '     * Whether the trusted platform public key information exists.\n', '     * @param publicKey a public key.\n', '     */\n', '    function existPublicKey(address publicKey) external view returns (bool);\n', '\n', '    /**\n', '     * Get the count of public key for the trusted platform.\n', '     * @return count of public key.\n', '     */\n', '    function countOfPublicKey() external view returns (uint);\n', '\n', '    /**\n', '     * Get the list of public key for the trusted platform.\n', '     * @return list of public key.\n', '     */\n', '    function publicKeys() external view returns (address[]);\n', '\n', '    /**\n', '     * Set the weight of a trusted platform.\n', '     * @param weight weight of platform.\n', '     */\n', '    function setWeight(uint weight) external;\n', '\n', '    /**\n', '     * Get the weight of a trusted platform.\n', '     * @return weight of platform.\n', '     */\n', '    function getWeight() external view returns (uint);\n', '\n', '    /**\n', '     * Initiate and vote on the transaction proposal.\n', '     * @param fromAccount name of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     * @param txid transaction id.\n', '     * @param sig transaction signature.\n', '     */\n', '    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) external;\n', '\n', '    /**\n', '     * Verify that the transaction proposal is valid.\n', '     * @param fromAccount name of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     * @param txid transaction id.\n', '     */\n', '    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool);\n', '\n', '    /**\n', '     * Commit the transaction proposal.\n', '     * @param txid transaction id.\n', '     */\n', '    function commitProposal(string txid) external returns (bool);\n', '\n', '    /**\n', '     * Get the transaction proposal information.\n', '     * @param txid transaction id.\n', '     * @return status completion status of proposal.\n', '     * @return fromAccount account of to platform.\n', '     * @return toAccount account of to platform.\n', '     * @return value transfer amount.\n', '     * @return voters notarial voters.\n', '     * @return weight The weight value of the completed time.\n', '     */\n', '    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight);\n', '\n', '    /**\n', '     * Delete the transaction proposal information.\n', '     * @param txid transaction id.\n', '     */\n', '    function deleteProposal(string txid) external;\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Token {\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '}\n', '\n', 'contract XCPlugin is XCPluginInterface {\n', '\n', '    /**\n', '     * Contract Administrator\n', '     * @field status Contract external service status.\n', '     * @field platformName Current contract platform name.\n', '     * @field tokenSymbol token Symbol.\n', '     * @field account Current contract administrator.\n', '     */\n', '    struct Admin {\n', '        bool status;\n', '        bytes32 platformName;\n', '        bytes32 tokenSymbol;\n', '        address account;\n', '        string version;\n', '    }\n', '\n', '    /**\n', '     * Transaction Proposal\n', '     * @field status Transaction proposal status(false:pending,true:complete).\n', '     * @field fromAccount Account of form platform.\n', '     * @field toAccount Account of to platform.\n', '     * @field value Transfer amount.\n', '     * @field tokenSymbol token Symbol.\n', '     * @field voters Proposers.\n', '     * @field weight The weight value of the completed time.\n', '     */\n', '    struct Proposal {\n', '        bool status;\n', '        address fromAccount;\n', '        address toAccount;\n', '        uint value;\n', '        address[] voters;\n', '        uint weight;\n', '    }\n', '\n', '    /**\n', '     * Trusted Platform\n', '     * @field status Trusted platform state(false:no trusted,true:trusted).\n', '     * @field weight weight of platform.\n', '     * @field publicKeys list of public key.\n', '     * @field proposals list of proposal.\n', '     */\n', '    struct Platform {\n', '        bool status;\n', '        bytes32 name;\n', '        uint weight;\n', '        address[] publicKeys;\n', '        mapping(string => Proposal) proposals;\n', '    }\n', '\n', '    Admin private admin;\n', '\n', '    address[] private callers;\n', '\n', '    Platform private platform;\n', '\n', '\n', '    constructor() public {\n', '        init();\n', '    }\n', '\n', '    /**\n', '     * TODO Parameters that must be set before compilation\n', '     * $Init admin.status\n', '     * $Init admin.platformName\n', '     * $Init admin.tokenSymbol\n', '     * $Init admin.account\n', '     * $Init admin.version\n', '     * $Init platform.status\n', '     * $Init platform.name\n', '     * $Init platform.weight\n', '     * $Init platform.publicKeys\n', '     */\n', '    function init() internal {\n', '        // Admin { status | platformName | tokenSymbol | account}\n', '        admin.status = true;\n', '        admin.platformName = "ETH";\n', '        admin.tokenSymbol = "INK";\n', '        admin.account = msg.sender;\n', '        admin.version = "1.0";\n', '        platform.status = true;\n', '        platform.name = "INK";\n', '        platform.weight = 3;\n', '        platform.publicKeys.push(0x80aa17b21c16620a4d7dd06ec1dcc44190b02ca0);\n', '        platform.publicKeys.push(0xd2e40bb4967b355da8d70be40c277ebcf108063c);\n', '        platform.publicKeys.push(0x1501e0f09498aa95cb0c2f1e3ee51223e5074720);\n', '    }\n', '\n', '    function start() onlyAdmin external {\n', '        if (!admin.status) {\n', '            admin.status = true;\n', '        }\n', '    }\n', '\n', '    function stop() onlyAdmin external {\n', '        if (admin.status) {\n', '            admin.status = false;\n', '        }\n', '    }\n', '\n', '    function getStatus() external view returns (bool) {\n', '        return admin.status;\n', '    }\n', '\n', '    function getPlatformName() external view returns (bytes32) {\n', '        return admin.platformName;\n', '    }\n', '\n', '    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\n', '        if (admin.account != account) {\n', '            admin.account = account;\n', '        }\n', '    }\n', '\n', '    function getAdmin() external view returns (address) {\n', '        return admin.account;\n', '    }\n', '\n', '    function getTokenSymbol() external view returns (bytes32) {\n', '        return admin.tokenSymbol;\n', '    }\n', '\n', '    function addCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n', '        if (!_existCaller(caller)) {\n', '            callers.push(caller);\n', '        }\n', '    }\n', '\n', '    function deleteCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n', '        for (uint i = 0; i < callers.length; i++) {\n', '            if (callers[i] == caller) {\n', '                if (i != callers.length - 1 ) {\n', '                    callers[i] = callers[callers.length - 1];\n', '                }\n', '                callers.length--;\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function existCaller(address caller) external view returns (bool) {\n', '        return _existCaller(caller);\n', '    }\n', '\n', '    function getCallers() external view returns (address[]) {\n', '        return callers;\n', '    }\n', '\n', '    function getTrustPlatform() external view returns (bytes32 name){\n', '        return platform.name;\n', '    }\n', '\n', '    function setWeight(uint weight) onlyAdmin external {\n', '        require(weight > 0);\n', '        if (platform.weight != weight) {\n', '            platform.weight = weight;\n', '        }\n', '    }\n', '\n', '    function getWeight() external view returns (uint) {\n', '        return platform.weight;\n', '    }\n', '\n', '    function addPublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n', '        address[] storage publicKeys = platform.publicKeys;\n', '        for (uint i; i < publicKeys.length; i++) {\n', '            if (publicKey == publicKeys[i]) {\n', '                return;\n', '            }\n', '        }\n', '        publicKeys.push(publicKey);\n', '    }\n', '\n', '    function deletePublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n', '        address[] storage publicKeys = platform.publicKeys;\n', '        for (uint i = 0; i < publicKeys.length; i++) {\n', '            if (publicKeys[i] == publicKey) {\n', '                if (i != publicKeys.length - 1 ) {\n', '                    publicKeys[i] = publicKeys[publicKeys.length - 1];\n', '                }\n', '                publicKeys.length--;\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function existPublicKey(address publicKey) external view returns (bool) {\n', '        return _existPublicKey(publicKey);\n', '    }\n', '\n', '    function countOfPublicKey() external view returns (uint){\n', '        return platform.publicKeys.length;\n', '    }\n', '\n', '    function publicKeys() external view returns (address[]){\n', '        return platform.publicKeys;\n', '    }\n', '\n', '    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) opened external {\n', '        bytes32 msgHash = hashMsg(platform.name, fromAccount, admin.platformName, toAccount, value, admin.tokenSymbol, txid,admin.version);\n', '        address publicKey = recover(msgHash, sig);\n', '        require(_existPublicKey(publicKey));\n', '        Proposal storage proposal = platform.proposals[txid];\n', '        if (proposal.value == 0) {\n', '            proposal.fromAccount = fromAccount;\n', '            proposal.toAccount = toAccount;\n', '            proposal.value = value;\n', '        } else {\n', '            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n', '        }\n', '        changeVoters(publicKey, txid);\n', '    }\n', '\n', '    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool) {\n', '        Proposal storage proposal = platform.proposals[txid];\n', '        if (proposal.status) {\n', '            return (true, (proposal.voters.length >= proposal.weight));\n', '        }\n', '        if (proposal.value == 0) {\n', '            return (false, false);\n', '        }\n', '        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n', '        return (false, (proposal.voters.length >= platform.weight));\n', '    }\n', '\n', '    function commitProposal(string txid) external returns (bool) {\n', '        require((admin.status &&_existCaller(msg.sender)) || msg.sender == admin.account);\n', '        require(!platform.proposals[txid].status);\n', '        platform.proposals[txid].status = true;\n', '        platform.proposals[txid].weight = platform.proposals[txid].voters.length;\n', '        return true;\n', '    }\n', '\n', '    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\n', '        fromAccount = platform.proposals[txid].fromAccount;\n', '        toAccount = platform.proposals[txid].toAccount;\n', '        value = platform.proposals[txid].value;\n', '        voters = platform.proposals[txid].voters;\n', '        status = platform.proposals[txid].status;\n', '        weight = platform.proposals[txid].weight;\n', '        return;\n', '    }\n', '\n', '    function deleteProposal(string txid) onlyAdmin external {\n', '        delete platform.proposals[txid];\n', '    }\n', '\n', '    /**\n', '     *   ######################\n', '     *  #  private function  #\n', '     * ######################\n', '     */\n', '\n', '    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid,string version) internal pure returns (bytes32) {\n', '        return sha256(bytes32ToStr(fromPlatform), ":0x", uintToStr(uint160(fromAccount), 16), ":", bytes32ToStr(toPlatform), ":0x", uintToStr(uint160(toAccount), 16), ":", uintToStr(value, 10), ":", bytes32ToStr(tokenSymbol), ":", txid, ":", version);\n', '    }\n', '\n', '    function changeVoters(address publicKey, string txid) internal {\n', '        address[] storage voters = platform.proposals[txid].voters;\n', '        for (uint i = 0; i < voters.length; i++) {\n', '            if (voters[i] == publicKey) {\n', '                return;\n', '            }\n', '        }\n', '        voters.push(publicKey);\n', '    }\n', '\n', '    function bytes32ToStr(bytes32 b) internal pure returns (string) {\n', '        uint length = b.length;\n', '        for (uint i = 0; i < b.length; i++) {\n', '            if (b[b.length - 1 - i] != "") {\n', '                length -= i;\n', '                break;\n', '            }\n', '        }\n', '        bytes memory bs = new bytes(length);\n', '        for (uint j = 0; j < length; j++) {\n', '            bs[j] = b[j];\n', '        }\n', '        return string(bs);\n', '    }\n', '\n', '    function uintToStr(uint value, uint base) internal pure returns (string) {\n', '        uint _value = value;\n', '        uint length = 0;\n', '        bytes16 tenStr = "0123456789abcdef";\n', '        while (true) {\n', '            if (_value > 0) {\n', '                length ++;\n', '                _value = _value / base;\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '        if (base == 16) {\n', '            length = 40;\n', '        }\n', '        bytes memory bs = new bytes(length);\n', '        for (uint i = 0; i < length; i++) {\n', '            bs[length - 1 - i] = tenStr[value % base];\n', '            value = value / base;\n', '        }\n', '        return string(bs);\n', '    }\n', '\n', '    function _existCaller(address caller) internal view returns (bool) {\n', '        for (uint i = 0; i < callers.length; i++) {\n', '            if (callers[i] == caller) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function _existPublicKey(address publicKey) internal view returns (bool) {\n', '        address[] memory publicKeys = platform.publicKeys;\n', '        for (uint i = 0; i < publicKeys.length; i++) {\n', '            if (publicKeys[i] == publicKey) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '        assembly {\n', '            r := mload(add(sig, 32))\n', '            s := mload(add(sig, 64))\n', '            v := byte(0, mload(add(sig, 96)))\n', '        }\n', '        if (v < 27) {\n', '            v += 27;\n', '        }\n', '        return ecrecover(hash, v, r, s);\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(admin.account == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier nonzeroAddress(address account) {\n', '        require(account != address(0));\n', '        _;\n', '    }\n', '\n', '    modifier opened() {\n', '        require(admin.status);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract XC is XCInterface {\n', '\n', '    /**\n', '     * Contract Administrator\n', '     * @field status Contract external service status.\n', '     * @field platformName Current contract platform name.\n', '     * @field account Current contract administrator.\n', '     */\n', '    struct Admin {\n', '        uint8 status;\n', '        bytes32 platformName;\n', '        address account;\n', '    }\n', '\n', '    Admin private admin;\n', '\n', '    uint public lockBalance;\n', '\n', '    Token private token;\n', '\n', '    XCPlugin private xcPlugin;\n', '\n', '    event Lock(bytes32 toPlatform, address toAccount, bytes32 value, bytes32 tokenSymbol);\n', '\n', '    event Unlock(string txid, bytes32 fromPlatform, address fromAccount, bytes32 value, bytes32 tokenSymbol);\n', '\n', '    constructor() public {\n', '        init();\n', '    }\n', '\n', '    /**\n', '     * TODO Parameters that must be set before compilation\n', '     * $Init admin.status\n', '     * $Init admin.platformName\n', '     * $Init admin.account\n', '     * $Init lockBalance\n', '     * $Init token\n', '     * $Init xcPlugin\n', '     */\n', '    function init() internal {\n', '        // Admin {status | platformName | account}\n', '        admin.status = 3;\n', '        admin.platformName = "ETH";\n', '        admin.account = msg.sender;\n', '        lockBalance = 344737963881081236;\n', '        token = Token(0xf4c90e18727c5c76499ea6369c856a6d61d3e92e);\n', '        xcPlugin = XCPlugin(0x15782cc68d841416f73e8f352f27cc1bc5e76e11);\n', '    }\n', '\n', '    function setStatus(uint8 status) onlyAdmin external {\n', '        require(status <= 3);\n', '        if (admin.status != status) {\n', '            admin.status = status;\n', '        }\n', '    }\n', '\n', '    function getStatus() external view returns (uint8) {\n', '        return admin.status;\n', '    }\n', '\n', '    function getPlatformName() external view returns (bytes32) {\n', '        return admin.platformName;\n', '    }\n', '\n', '    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\n', '        if (admin.account != account) {\n', '            admin.account = account;\n', '        }\n', '    }\n', '\n', '    function getAdmin() external view returns (address) {\n', '        return admin.account;\n', '    }\n', '\n', '    function setToken(address account) onlyAdmin nonzeroAddress(account) external {\n', '        if (token != account) {\n', '            token = Token(account);\n', '        }\n', '    }\n', '\n', '    function getToken() external view returns (address) {\n', '        return token;\n', '    }\n', '\n', '    function setXCPlugin(address account) onlyAdmin nonzeroAddress(account) external {\n', '        if (xcPlugin != account) {\n', '            xcPlugin = XCPlugin(account);\n', '        }\n', '    }\n', '\n', '    function getXCPlugin() external view returns (address) {\n', '        return xcPlugin;\n', '    }\n', '\n', '    function lock(address toAccount, uint value) nonzeroAddress(toAccount) external {\n', '        require(admin.status == 2 || admin.status == 3);\n', '        require(xcPlugin.getStatus());\n', '        require(value > 0);\n', '        uint allowance = token.allowance(msg.sender, this);\n', '        require(allowance >= value);\n', '        bool success = token.transferFrom(msg.sender, this, value);\n', '        require(success);\n', '        lockBalance = SafeMath.add(lockBalance, value);\n', '        emit Lock(xcPlugin.getTrustPlatform(), toAccount, bytes32(value), xcPlugin.getTokenSymbol());\n', '    }\n', '\n', '    function unlock(string txid, address fromAccount, address toAccount, uint value) nonzeroAddress(toAccount) external {\n', '        require(admin.status == 1 || admin.status == 3);\n', '        require(xcPlugin.getStatus());\n', '        require(value > 0);\n', '        bool complete;\n', '        bool verify;\n', '        (complete, verify) = xcPlugin.verifyProposal(fromAccount, toAccount, value, txid);\n', '        require(verify && !complete);\n', '        uint balance = token.balanceOf(this);\n', '        require(balance >= value);\n', '        require(token.transfer(toAccount, value));\n', '        require(xcPlugin.commitProposal(txid));\n', '        lockBalance = SafeMath.sub(lockBalance, value);\n', '        emit Unlock(txid, xcPlugin.getTrustPlatform(), fromAccount, bytes32(value), xcPlugin.getTokenSymbol());\n', '    }\n', '\n', '    function withdraw(address account, uint value) onlyAdmin nonzeroAddress(account) external {\n', '        require(value > 0);\n', '        uint balance = token.balanceOf(this);\n', '        require(SafeMath.sub(balance, lockBalance) >= value);\n', '        bool success = token.transfer(account, value);\n', '        require(success);\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(admin.account == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier nonzeroAddress(address account) {\n', '        require(account != address(0));\n', '        _;\n', '    }\n', '}']
['pragma solidity ^0.4.19;\n', '\n', '/**\n', ' * XC Contract Interface.\n', ' */\n', 'interface XCInterface {\n', '\n', '    /**\n', '     * Set contract service status.\n', '     * @param status contract service status (0:closed;1:only-closed-lock;2:only-closed-unlock;3:opened;).\n', '     */\n', '    function setStatus(uint8 status) external;\n', '\n', '    /**\n', '     * Get contract service status.\n', '     * @return contract service status.\n', '     */\n', '    function getStatus() external view returns (uint8);\n', '\n', '    /**\n', '     * Get the current contract platform name.\n', '     * @return contract platform name.\n', '     */\n', '    function getPlatformName() external view returns (bytes32);\n', '\n', '    /**\n', '     * Set the current contract administrator.\n', '     * @param account account of contract administrator.\n', '     */\n', '    function setAdmin(address account) external;\n', '\n', '    /**\n', '     * Get the current contract administrator.\n', '     * @return contract administrator.\n', '     */\n', '    function getAdmin() external view returns (address);\n', '\n', '    /**\n', '     * Set the Token contract address.\n', '     * @param account contract address.\n', '     */\n', '    function setToken(address account) external;\n', '\n', '    /**\n', '     * Get the Token contract address.\n', '     * @return contract address.\n', '     */\n', '    function getToken() external view returns (address);\n', '\n', '    /**\n', '     * Set the XCPlugin contract address.\n', '     * @param account contract address.\n', '     */\n', '    function setXCPlugin(address account) external;\n', '\n', '    /**\n', '     * Get the XCPlugin contract address.\n', '     * @return contract address.\n', '     */\n', '    function getXCPlugin() external view returns (address);\n', '\n', '    /**\n', '     * Transfer out of cross chain.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     */\n', '    function lock(address toAccount, uint value) external;\n', '\n', '    /**\n', '     * Transfer in of cross chain.\n', '     * @param txid transaction id.\n', '     * @param fromAccount ame of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     */\n', '    function unlock(string txid, address fromAccount, address toAccount, uint value) external;\n', '\n', '    /**\n', '     * Transfer the misoperation to the amount of the contract account to the specified account.\n', '     * @param account the specified account.\n', '     * @param value transfer amount.\n', '     */\n', '    function withdraw(address account, uint value) external;\n', '}\n', '\n', '/**\n', ' * XC Plugin Contract Interface.\n', ' */\n', 'interface XCPluginInterface {\n', '\n', '    /**\n', '     * Open the contract service status.\n', '     */\n', '    function start() external;\n', '\n', '    /**\n', '     * Close the contract service status.\n', '     */\n', '    function stop() external;\n', '\n', '    /**\n', '     * Get contract service status.\n', '     * @return contract service status.\n', '     */\n', '    function getStatus() external view returns (bool);\n', '\n', '    /**\n', '     * Get the current contract platform name.\n', '     * @return contract platform name.\n', '     */\n', '    function getPlatformName() external view returns (bytes32);\n', '\n', '    /**\n', '     * Set the current contract administrator.\n', '     * @param account account of contract administrator.\n', '     */\n', '    function setAdmin(address account) external;\n', '\n', '    /**\n', '     * Get the current contract administrator.\n', '     * @return contract administrator.\n', '     */\n', '    function getAdmin() external view returns (address);\n', '\n', '    /**\n', '     * Get the current token symbol.\n', '     * @return token symbol.\n', '     */\n', '    function getTokenSymbol() external view returns (bytes32);\n', '\n', '    /**\n', '     * Add a contract trust caller.\n', '     * @param caller account of caller.\n', '     */\n', '    function addCaller(address caller) external;\n', '\n', '    /**\n', '     * Delete a contract trust caller.\n', '     * @param caller account of caller.\n', '     */\n', '    function deleteCaller(address caller) external;\n', '\n', '    /**\n', '     * Whether the trust caller exists.\n', '     * @param caller account of caller.\n', '     * @return whether exists.\n', '     */\n', '    function existCaller(address caller) external view returns (bool);\n', '\n', '    /**\n', '     * Get all contract trusted callers.\n', '     * @return al lcallers.\n', '     */\n', '    function getCallers() external view returns (address[]);\n', '\n', '    /**\n', '     * Get the trusted platform name.\n', '     * @return name a platform name.\n', '     */\n', '    function getTrustPlatform() external view returns (bytes32 name);\n', '\n', '    /**\n', '     * Add the trusted platform public key information.\n', '     * @param publicKey a public key.\n', '     */\n', '    function addPublicKey(address publicKey) external;\n', '\n', '    /**\n', '     * Delete the trusted platform public key information.\n', '     * @param publicKey a public key.\n', '     */\n', '    function deletePublicKey(address publicKey) external;\n', '\n', '    /**\n', '     * Whether the trusted platform public key information exists.\n', '     * @param publicKey a public key.\n', '     */\n', '    function existPublicKey(address publicKey) external view returns (bool);\n', '\n', '    /**\n', '     * Get the count of public key for the trusted platform.\n', '     * @return count of public key.\n', '     */\n', '    function countOfPublicKey() external view returns (uint);\n', '\n', '    /**\n', '     * Get the list of public key for the trusted platform.\n', '     * @return list of public key.\n', '     */\n', '    function publicKeys() external view returns (address[]);\n', '\n', '    /**\n', '     * Set the weight of a trusted platform.\n', '     * @param weight weight of platform.\n', '     */\n', '    function setWeight(uint weight) external;\n', '\n', '    /**\n', '     * Get the weight of a trusted platform.\n', '     * @return weight of platform.\n', '     */\n', '    function getWeight() external view returns (uint);\n', '\n', '    /**\n', '     * Initiate and vote on the transaction proposal.\n', '     * @param fromAccount name of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     * @param txid transaction id.\n', '     * @param sig transaction signature.\n', '     */\n', '    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) external;\n', '\n', '    /**\n', '     * Verify that the transaction proposal is valid.\n', '     * @param fromAccount name of to platform.\n', '     * @param toAccount account of to platform.\n', '     * @param value transfer amount.\n', '     * @param txid transaction id.\n', '     */\n', '    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool);\n', '\n', '    /**\n', '     * Commit the transaction proposal.\n', '     * @param txid transaction id.\n', '     */\n', '    function commitProposal(string txid) external returns (bool);\n', '\n', '    /**\n', '     * Get the transaction proposal information.\n', '     * @param txid transaction id.\n', '     * @return status completion status of proposal.\n', '     * @return fromAccount account of to platform.\n', '     * @return toAccount account of to platform.\n', '     * @return value transfer amount.\n', '     * @return voters notarial voters.\n', '     * @return weight The weight value of the completed time.\n', '     */\n', '    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight);\n', '\n', '    /**\n', '     * Delete the transaction proposal information.\n', '     * @param txid transaction id.\n', '     */\n', '    function deleteProposal(string txid) external;\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, throws on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        // uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract Token {\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '}\n', '\n', 'contract XCPlugin is XCPluginInterface {\n', '\n', '    /**\n', '     * Contract Administrator\n', '     * @field status Contract external service status.\n', '     * @field platformName Current contract platform name.\n', '     * @field tokenSymbol token Symbol.\n', '     * @field account Current contract administrator.\n', '     */\n', '    struct Admin {\n', '        bool status;\n', '        bytes32 platformName;\n', '        bytes32 tokenSymbol;\n', '        address account;\n', '        string version;\n', '    }\n', '\n', '    /**\n', '     * Transaction Proposal\n', '     * @field status Transaction proposal status(false:pending,true:complete).\n', '     * @field fromAccount Account of form platform.\n', '     * @field toAccount Account of to platform.\n', '     * @field value Transfer amount.\n', '     * @field tokenSymbol token Symbol.\n', '     * @field voters Proposers.\n', '     * @field weight The weight value of the completed time.\n', '     */\n', '    struct Proposal {\n', '        bool status;\n', '        address fromAccount;\n', '        address toAccount;\n', '        uint value;\n', '        address[] voters;\n', '        uint weight;\n', '    }\n', '\n', '    /**\n', '     * Trusted Platform\n', '     * @field status Trusted platform state(false:no trusted,true:trusted).\n', '     * @field weight weight of platform.\n', '     * @field publicKeys list of public key.\n', '     * @field proposals list of proposal.\n', '     */\n', '    struct Platform {\n', '        bool status;\n', '        bytes32 name;\n', '        uint weight;\n', '        address[] publicKeys;\n', '        mapping(string => Proposal) proposals;\n', '    }\n', '\n', '    Admin private admin;\n', '\n', '    address[] private callers;\n', '\n', '    Platform private platform;\n', '\n', '\n', '    constructor() public {\n', '        init();\n', '    }\n', '\n', '    /**\n', '     * TODO Parameters that must be set before compilation\n', '     * $Init admin.status\n', '     * $Init admin.platformName\n', '     * $Init admin.tokenSymbol\n', '     * $Init admin.account\n', '     * $Init admin.version\n', '     * $Init platform.status\n', '     * $Init platform.name\n', '     * $Init platform.weight\n', '     * $Init platform.publicKeys\n', '     */\n', '    function init() internal {\n', '        // Admin { status | platformName | tokenSymbol | account}\n', '        admin.status = true;\n', '        admin.platformName = "ETH";\n', '        admin.tokenSymbol = "INK";\n', '        admin.account = msg.sender;\n', '        admin.version = "1.0";\n', '        platform.status = true;\n', '        platform.name = "INK";\n', '        platform.weight = 3;\n', '        platform.publicKeys.push(0x80aa17b21c16620a4d7dd06ec1dcc44190b02ca0);\n', '        platform.publicKeys.push(0xd2e40bb4967b355da8d70be40c277ebcf108063c);\n', '        platform.publicKeys.push(0x1501e0f09498aa95cb0c2f1e3ee51223e5074720);\n', '    }\n', '\n', '    function start() onlyAdmin external {\n', '        if (!admin.status) {\n', '            admin.status = true;\n', '        }\n', '    }\n', '\n', '    function stop() onlyAdmin external {\n', '        if (admin.status) {\n', '            admin.status = false;\n', '        }\n', '    }\n', '\n', '    function getStatus() external view returns (bool) {\n', '        return admin.status;\n', '    }\n', '\n', '    function getPlatformName() external view returns (bytes32) {\n', '        return admin.platformName;\n', '    }\n', '\n', '    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\n', '        if (admin.account != account) {\n', '            admin.account = account;\n', '        }\n', '    }\n', '\n', '    function getAdmin() external view returns (address) {\n', '        return admin.account;\n', '    }\n', '\n', '    function getTokenSymbol() external view returns (bytes32) {\n', '        return admin.tokenSymbol;\n', '    }\n', '\n', '    function addCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n', '        if (!_existCaller(caller)) {\n', '            callers.push(caller);\n', '        }\n', '    }\n', '\n', '    function deleteCaller(address caller) onlyAdmin nonzeroAddress(caller) external {\n', '        for (uint i = 0; i < callers.length; i++) {\n', '            if (callers[i] == caller) {\n', '                if (i != callers.length - 1 ) {\n', '                    callers[i] = callers[callers.length - 1];\n', '                }\n', '                callers.length--;\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function existCaller(address caller) external view returns (bool) {\n', '        return _existCaller(caller);\n', '    }\n', '\n', '    function getCallers() external view returns (address[]) {\n', '        return callers;\n', '    }\n', '\n', '    function getTrustPlatform() external view returns (bytes32 name){\n', '        return platform.name;\n', '    }\n', '\n', '    function setWeight(uint weight) onlyAdmin external {\n', '        require(weight > 0);\n', '        if (platform.weight != weight) {\n', '            platform.weight = weight;\n', '        }\n', '    }\n', '\n', '    function getWeight() external view returns (uint) {\n', '        return platform.weight;\n', '    }\n', '\n', '    function addPublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n', '        address[] storage publicKeys = platform.publicKeys;\n', '        for (uint i; i < publicKeys.length; i++) {\n', '            if (publicKey == publicKeys[i]) {\n', '                return;\n', '            }\n', '        }\n', '        publicKeys.push(publicKey);\n', '    }\n', '\n', '    function deletePublicKey(address publicKey) onlyAdmin nonzeroAddress(publicKey) external {\n', '        address[] storage publicKeys = platform.publicKeys;\n', '        for (uint i = 0; i < publicKeys.length; i++) {\n', '            if (publicKeys[i] == publicKey) {\n', '                if (i != publicKeys.length - 1 ) {\n', '                    publicKeys[i] = publicKeys[publicKeys.length - 1];\n', '                }\n', '                publicKeys.length--;\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function existPublicKey(address publicKey) external view returns (bool) {\n', '        return _existPublicKey(publicKey);\n', '    }\n', '\n', '    function countOfPublicKey() external view returns (uint){\n', '        return platform.publicKeys.length;\n', '    }\n', '\n', '    function publicKeys() external view returns (address[]){\n', '        return platform.publicKeys;\n', '    }\n', '\n', '    function voteProposal(address fromAccount, address toAccount, uint value, string txid, bytes sig) opened external {\n', '        bytes32 msgHash = hashMsg(platform.name, fromAccount, admin.platformName, toAccount, value, admin.tokenSymbol, txid,admin.version);\n', '        address publicKey = recover(msgHash, sig);\n', '        require(_existPublicKey(publicKey));\n', '        Proposal storage proposal = platform.proposals[txid];\n', '        if (proposal.value == 0) {\n', '            proposal.fromAccount = fromAccount;\n', '            proposal.toAccount = toAccount;\n', '            proposal.value = value;\n', '        } else {\n', '            require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n', '        }\n', '        changeVoters(publicKey, txid);\n', '    }\n', '\n', '    function verifyProposal(address fromAccount, address toAccount, uint value, string txid) external view returns (bool, bool) {\n', '        Proposal storage proposal = platform.proposals[txid];\n', '        if (proposal.status) {\n', '            return (true, (proposal.voters.length >= proposal.weight));\n', '        }\n', '        if (proposal.value == 0) {\n', '            return (false, false);\n', '        }\n', '        require(proposal.fromAccount == fromAccount && proposal.toAccount == toAccount && proposal.value == value);\n', '        return (false, (proposal.voters.length >= platform.weight));\n', '    }\n', '\n', '    function commitProposal(string txid) external returns (bool) {\n', '        require((admin.status &&_existCaller(msg.sender)) || msg.sender == admin.account);\n', '        require(!platform.proposals[txid].status);\n', '        platform.proposals[txid].status = true;\n', '        platform.proposals[txid].weight = platform.proposals[txid].voters.length;\n', '        return true;\n', '    }\n', '\n', '    function getProposal(string txid) external view returns (bool status, address fromAccount, address toAccount, uint value, address[] voters, uint weight){\n', '        fromAccount = platform.proposals[txid].fromAccount;\n', '        toAccount = platform.proposals[txid].toAccount;\n', '        value = platform.proposals[txid].value;\n', '        voters = platform.proposals[txid].voters;\n', '        status = platform.proposals[txid].status;\n', '        weight = platform.proposals[txid].weight;\n', '        return;\n', '    }\n', '\n', '    function deleteProposal(string txid) onlyAdmin external {\n', '        delete platform.proposals[txid];\n', '    }\n', '\n', '    /**\n', '     *   ######################\n', '     *  #  private function  #\n', '     * ######################\n', '     */\n', '\n', '    function hashMsg(bytes32 fromPlatform, address fromAccount, bytes32 toPlatform, address toAccount, uint value, bytes32 tokenSymbol, string txid,string version) internal pure returns (bytes32) {\n', '        return sha256(bytes32ToStr(fromPlatform), ":0x", uintToStr(uint160(fromAccount), 16), ":", bytes32ToStr(toPlatform), ":0x", uintToStr(uint160(toAccount), 16), ":", uintToStr(value, 10), ":", bytes32ToStr(tokenSymbol), ":", txid, ":", version);\n', '    }\n', '\n', '    function changeVoters(address publicKey, string txid) internal {\n', '        address[] storage voters = platform.proposals[txid].voters;\n', '        for (uint i = 0; i < voters.length; i++) {\n', '            if (voters[i] == publicKey) {\n', '                return;\n', '            }\n', '        }\n', '        voters.push(publicKey);\n', '    }\n', '\n', '    function bytes32ToStr(bytes32 b) internal pure returns (string) {\n', '        uint length = b.length;\n', '        for (uint i = 0; i < b.length; i++) {\n', '            if (b[b.length - 1 - i] != "") {\n', '                length -= i;\n', '                break;\n', '            }\n', '        }\n', '        bytes memory bs = new bytes(length);\n', '        for (uint j = 0; j < length; j++) {\n', '            bs[j] = b[j];\n', '        }\n', '        return string(bs);\n', '    }\n', '\n', '    function uintToStr(uint value, uint base) internal pure returns (string) {\n', '        uint _value = value;\n', '        uint length = 0;\n', '        bytes16 tenStr = "0123456789abcdef";\n', '        while (true) {\n', '            if (_value > 0) {\n', '                length ++;\n', '                _value = _value / base;\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '        if (base == 16) {\n', '            length = 40;\n', '        }\n', '        bytes memory bs = new bytes(length);\n', '        for (uint i = 0; i < length; i++) {\n', '            bs[length - 1 - i] = tenStr[value % base];\n', '            value = value / base;\n', '        }\n', '        return string(bs);\n', '    }\n', '\n', '    function _existCaller(address caller) internal view returns (bool) {\n', '        for (uint i = 0; i < callers.length; i++) {\n', '            if (callers[i] == caller) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function _existPublicKey(address publicKey) internal view returns (bool) {\n', '        address[] memory publicKeys = platform.publicKeys;\n', '        for (uint i = 0; i < publicKeys.length; i++) {\n', '            if (publicKeys[i] == publicKey) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function recover(bytes32 hash, bytes sig) internal pure returns (address) {\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '        assembly {\n', '            r := mload(add(sig, 32))\n', '            s := mload(add(sig, 64))\n', '            v := byte(0, mload(add(sig, 96)))\n', '        }\n', '        if (v < 27) {\n', '            v += 27;\n', '        }\n', '        return ecrecover(hash, v, r, s);\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(admin.account == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier nonzeroAddress(address account) {\n', '        require(account != address(0));\n', '        _;\n', '    }\n', '\n', '    modifier opened() {\n', '        require(admin.status);\n', '        _;\n', '    }\n', '}\n', '\n', 'contract XC is XCInterface {\n', '\n', '    /**\n', '     * Contract Administrator\n', '     * @field status Contract external service status.\n', '     * @field platformName Current contract platform name.\n', '     * @field account Current contract administrator.\n', '     */\n', '    struct Admin {\n', '        uint8 status;\n', '        bytes32 platformName;\n', '        address account;\n', '    }\n', '\n', '    Admin private admin;\n', '\n', '    uint public lockBalance;\n', '\n', '    Token private token;\n', '\n', '    XCPlugin private xcPlugin;\n', '\n', '    event Lock(bytes32 toPlatform, address toAccount, bytes32 value, bytes32 tokenSymbol);\n', '\n', '    event Unlock(string txid, bytes32 fromPlatform, address fromAccount, bytes32 value, bytes32 tokenSymbol);\n', '\n', '    constructor() public {\n', '        init();\n', '    }\n', '\n', '    /**\n', '     * TODO Parameters that must be set before compilation\n', '     * $Init admin.status\n', '     * $Init admin.platformName\n', '     * $Init admin.account\n', '     * $Init lockBalance\n', '     * $Init token\n', '     * $Init xcPlugin\n', '     */\n', '    function init() internal {\n', '        // Admin {status | platformName | account}\n', '        admin.status = 3;\n', '        admin.platformName = "ETH";\n', '        admin.account = msg.sender;\n', '        lockBalance = 344737963881081236;\n', '        token = Token(0xf4c90e18727c5c76499ea6369c856a6d61d3e92e);\n', '        xcPlugin = XCPlugin(0x15782cc68d841416f73e8f352f27cc1bc5e76e11);\n', '    }\n', '\n', '    function setStatus(uint8 status) onlyAdmin external {\n', '        require(status <= 3);\n', '        if (admin.status != status) {\n', '            admin.status = status;\n', '        }\n', '    }\n', '\n', '    function getStatus() external view returns (uint8) {\n', '        return admin.status;\n', '    }\n', '\n', '    function getPlatformName() external view returns (bytes32) {\n', '        return admin.platformName;\n', '    }\n', '\n', '    function setAdmin(address account) onlyAdmin nonzeroAddress(account) external {\n', '        if (admin.account != account) {\n', '            admin.account = account;\n', '        }\n', '    }\n', '\n', '    function getAdmin() external view returns (address) {\n', '        return admin.account;\n', '    }\n', '\n', '    function setToken(address account) onlyAdmin nonzeroAddress(account) external {\n', '        if (token != account) {\n', '            token = Token(account);\n', '        }\n', '    }\n', '\n', '    function getToken() external view returns (address) {\n', '        return token;\n', '    }\n', '\n', '    function setXCPlugin(address account) onlyAdmin nonzeroAddress(account) external {\n', '        if (xcPlugin != account) {\n', '            xcPlugin = XCPlugin(account);\n', '        }\n', '    }\n', '\n', '    function getXCPlugin() external view returns (address) {\n', '        return xcPlugin;\n', '    }\n', '\n', '    function lock(address toAccount, uint value) nonzeroAddress(toAccount) external {\n', '        require(admin.status == 2 || admin.status == 3);\n', '        require(xcPlugin.getStatus());\n', '        require(value > 0);\n', '        uint allowance = token.allowance(msg.sender, this);\n', '        require(allowance >= value);\n', '        bool success = token.transferFrom(msg.sender, this, value);\n', '        require(success);\n', '        lockBalance = SafeMath.add(lockBalance, value);\n', '        emit Lock(xcPlugin.getTrustPlatform(), toAccount, bytes32(value), xcPlugin.getTokenSymbol());\n', '    }\n', '\n', '    function unlock(string txid, address fromAccount, address toAccount, uint value) nonzeroAddress(toAccount) external {\n', '        require(admin.status == 1 || admin.status == 3);\n', '        require(xcPlugin.getStatus());\n', '        require(value > 0);\n', '        bool complete;\n', '        bool verify;\n', '        (complete, verify) = xcPlugin.verifyProposal(fromAccount, toAccount, value, txid);\n', '        require(verify && !complete);\n', '        uint balance = token.balanceOf(this);\n', '        require(balance >= value);\n', '        require(token.transfer(toAccount, value));\n', '        require(xcPlugin.commitProposal(txid));\n', '        lockBalance = SafeMath.sub(lockBalance, value);\n', '        emit Unlock(txid, xcPlugin.getTrustPlatform(), fromAccount, bytes32(value), xcPlugin.getTokenSymbol());\n', '    }\n', '\n', '    function withdraw(address account, uint value) onlyAdmin nonzeroAddress(account) external {\n', '        require(value > 0);\n', '        uint balance = token.balanceOf(this);\n', '        require(SafeMath.sub(balance, lockBalance) >= value);\n', '        bool success = token.transfer(account, value);\n', '        require(success);\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(admin.account == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier nonzeroAddress(address account) {\n', '        require(account != address(0));\n', '        _;\n', '    }\n', '}']
