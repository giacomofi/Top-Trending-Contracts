['pragma solidity ^0.4.18;\n', '\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {\n', '    assert(token.transfer(to, value));\n', '  }\n', '\n', '  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '    assert(token.transferFrom(from, to, value));\n', '  }\n', '\n', '  function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '    assert(token.approve(spender, value));\n', '  }\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract Ownable {\n', '  address public owner;                                                     // Operational owner.\n', '  address public masterOwner = 0xe4925C73851490401b858B657F26E62e9aD20F66;  // for ownership transfer segregation of duty, hard coded to wallet account\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public {\n', '    require(newOwner != address(0));\n', '    require(masterOwner == msg.sender); // only master owner can initiate change to ownership\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '\n', '  function cei(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return ((a + b - 1) / b) * b;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '\n', '/** This interfaces will be implemented by different VZT contracts in future*/\n', 'interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n', '\n', 'contract VZToken is StandardToken, Ownable {\n', '\n', '\n', '    /* metadata */\n', '\n', '    string public constant name = "VectorZilla Token"; // solium-disable-line uppercase\n', '    string public constant symbol = "VZT"; // solium-disable-line uppercase\n', '    string public constant version = "1.0"; // solium-disable-line uppercase\n', '    uint8 public constant decimals = 18; // solium-disable-line uppercase\n', '\n', '    /* all accounts in wei */\n', '\n', '    uint256 public constant INITIAL_SUPPLY = 100000000 * 10 ** 18; //intial total supply\n', '    uint256 public constant BURNABLE_UP_TO =  90000000 * 10 ** 18; //burnable up to 90% (90 million) of total supply\n', '    uint256 public constant VECTORZILLA_RESERVE_VZT = 25000000 * 10 ** 18; //25 million - reserved tokens\n', '\n', '    // Reserved tokens will be sent to this address. this address will be replaced on production:\n', '    address public constant VECTORZILLA_RESERVE = 0xF63e65c57024886cCa65985ca6E2FB38df95dA11;\n', '\n', '    // - tokenSaleContract receives the whole balance for distribution\n', '    address public tokenSaleContract;\n', '\n', '    /* Following stuff is to manage regulatory hurdles on who can and cannot use VZT token  */\n', '    mapping (address => bool) public frozenAccount;\n', '    event FrozenFunds(address target, bool frozen);\n', '\n', '\n', '    /** Modifiers to be used all over the place **/\n', '\n', '    modifier onlyOwnerAndContract() {\n', '        require(msg.sender == owner || msg.sender == tokenSaleContract);\n', '        _;\n', '    }\n', '\n', '\n', '    modifier onlyWhenValidAddress( address _addr ) {\n', '        require(_addr != address(0x0));\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenValidContractAddress(address _addr) {\n', '        require(_addr != address(0x0));\n', '        require(_addr != address(this));\n', '        require(isContract(_addr));\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenBurnable(uint256 _value) {\n', '        require(totalSupply - _value >= INITIAL_SUPPLY - BURNABLE_UP_TO);\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenNotFrozen(address _addr) {\n', '        require(!frozenAccount[_addr]);\n', '        _;\n', '    }\n', '\n', '    /** End of Modifier Definations */\n', '\n', '    /** Events */\n', '\n', '    event Burn(address indexed burner, uint256 value);\n', '    event Finalized();\n', '    //log event whenever withdrawal from this contract address happens\n', '    event Withdraw(address indexed from, address indexed to, uint256 value);\n', '\n', '    /*\n', '        Contructor that distributes initial supply between\n', '        owner and vzt reserve.\n', '    */\n', '    function VZToken(address _owner) public {\n', '        require(_owner != address(0));\n', '        totalSupply = INITIAL_SUPPLY;\n', '        balances[_owner] = INITIAL_SUPPLY - VECTORZILLA_RESERVE_VZT; //75 millions tokens\n', '        balances[VECTORZILLA_RESERVE] = VECTORZILLA_RESERVE_VZT; //25 millions\n', '        owner = _owner;\n', '    }\n', '\n', '    /*\n', '        This unnamed function is called whenever the owner send Ether to fund the gas\n', '        fees and gas reimbursement.\n', '    */\n', '    function () payable public onlyOwner {}\n', '\n', '    /**\n', '     * @dev transfer `_value` token for a specified address\n', '     * @param _to The address to transfer to.\n', '     * @param _value The amount to be transferred.\n', '     */\n', '    function transfer(address _to, uint256 _value) \n', '        public\n', '        onlyWhenValidAddress(_to)\n', '        onlyWhenNotFrozen(msg.sender)\n', '        onlyWhenNotFrozen(_to)\n', '        returns(bool) {\n', '        return super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer `_value` tokens from one address (`_from`) to another (`_to`)\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) \n', '        public\n', '        onlyWhenValidAddress(_to)\n', '        onlyWhenValidAddress(_from)\n', '        onlyWhenNotFrozen(_from)\n', '        onlyWhenNotFrozen(_to)\n', '        returns(bool) {\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Burns a specific (`_value`) amount of tokens.\n', '     * @param _value uint256 The amount of token to be burned.\n', '     */\n', '    function burn(uint256 _value)\n', '        public\n', '        onlyWhenBurnable(_value)\n', '        onlyWhenNotFrozen(msg.sender)\n', '        returns (bool) {\n', '        require(_value <= balances[msg.sender]);\n', '      // no need to require value <= totalSupply, since that would imply the\n', "      // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '        address burner = msg.sender;\n', '        balances[burner] = balances[burner].sub(_value);\n', '        totalSupply = totalSupply.sub(_value);\n', '        Burn(burner, _value);\n', '        Transfer(burner, address(0x0), _value);\n', '        return true;\n', '      }\n', '\n', '    /**\n', '     * Destroy tokens from other account\n', '     *\n', '     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n', '     *\n', '     * @param _from the address of the sender\n', '     * @param _value the amount of money to burn\n', '     */\n', '    function burnFrom(address _from, uint256 _value) \n', '        public\n', '        onlyWhenBurnable(_value)\n', '        onlyWhenNotFrozen(_from)\n', '        onlyWhenNotFrozen(msg.sender)\n', '        returns (bool success) {\n', '        assert(transferFrom( _from, msg.sender, _value ));\n', '        return burn(_value);\n', '    }\n', '\n', '    /**\n', '     * Set allowance for other address and notify\n', '     *\n', '     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n', '     *\n', '     * @param _spender The address authorized to spend\n', '     * @param _value the max amount they can spend\n', '     * @param _extraData some extra information to send to the approved contract\n', '     */\n', '    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n', '        public\n', '        onlyWhenValidAddress(_spender)\n', '        returns (bool success) {\n', '        tokenRecipient spender = tokenRecipient(_spender);\n', '        if (approve(_spender, _value)) {\n', '            spender.receiveApproval(msg.sender, _value, this, _extraData);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Freezes account and disables transfers/burning\n', '     *  This is to manage regulatory hurdlers where contract owner is required to freeze some accounts.\n', '     */\n', '    function freezeAccount(address target, bool freeze) external onlyOwner {\n', '        frozenAccount[target] = freeze;\n', '        FrozenFunds(target, freeze);\n', '    }\n', '\n', '    /* Owner withdrawal of an ether deposited from Token ether balance */\n', '    function withdrawToOwner(uint256 weiAmt) public onlyOwner {\n', '        // do not allow zero transfer\n', '        require(weiAmt > 0);\n', '        owner.transfer(weiAmt);\n', '        // signal the event for communication only it is meaningful\n', '        Withdraw(this, msg.sender, weiAmt);\n', '    }\n', '\n', '\n', '    /// @notice This method can be used by the controller to extract mistakenly\n', '    ///  sent tokens to this contract.\n', '    /// @param _token The address of the token contract that you want to recover\n', '    ///  set to 0 in case you want to extract ether.\n', '    function claimTokens(address _token) external onlyOwner {\n', '        if (_token == 0x0) {\n', '            owner.transfer(this.balance);\n', '            return;\n', '        }\n', '        StandardToken token = StandardToken(_token);\n', '        uint balance = token.balanceOf(this);\n', '        token.transfer(owner, balance);\n', '        // signal the event for communication only it is meaningful\n', '        Withdraw(this, owner, balance);\n', '    }\n', '\n', '    function setTokenSaleContract(address _tokenSaleContract)\n', '        external\n', '        onlyWhenValidContractAddress(_tokenSaleContract)\n', '        onlyOwner {\n', '           require(_tokenSaleContract != tokenSaleContract);\n', '           tokenSaleContract = _tokenSaleContract;\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr address The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns(bool) {\n', '        if (_addr == 0) {\n', '            return false;\n', '        }\n', '        uint256 size;\n', '        assembly {\n', '            size: = extcodesize(_addr)\n', '        }\n', '        return (size > 0);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to send `_value` tokens to user (`_to`) from sale contract/owner\n', '     * @param _to address The address that will receive the minted tokens.\n', '     * @param _value uint256 The amount of tokens to be sent.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function sendToken(address _to, uint256 _value)\n', '        public\n', '        onlyWhenValidAddress(_to)\n', '        onlyOwnerAndContract\n', '        returns(bool) {\n', '        address _from = owner;\n', '        // Check if the sender has enough\n', '        require(balances[_from] >= _value);\n', '        // Check for overflows\n', '        require(balances[_to] + _value > balances[_to]);\n', '        // Save this for an assertion in the future\n', '        uint256 previousBalances = balances[_from] + balances[_to];\n', '        // Subtract from the sender\n', '        balances[_from] -= _value;\n', '        // Add the same to the recipient\n', '        balances[_to] += _value;\n', '        Transfer(_from, _to, _value);\n', '        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n', '        assert(balances[_from] + balances[_to] == previousBalances);\n', '        return true;\n', '    }\n', '    /**\n', "     * @dev Batch transfer of tokens to addresses from owner's balance\n", '     * @param addresses address[] The address that will receive the minted tokens.\n', '     * @param _values uint256[] The amount of tokens to be sent.\n', '     * @return True if the operation was successful.\n', '     */\n', '    function batchSendTokens(address[] addresses, uint256[] _values) \n', '        public onlyOwnerAndContract\n', '        returns (bool) {\n', '        require(addresses.length == _values.length);\n', '        require(addresses.length <= 20); //only batches of 20 allowed\n', '        uint i = 0;\n', '        uint len = addresses.length;\n', '        for (;i < len; i++) {\n', '            sendToken(addresses[i], _values[i]);\n', '        }\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Contracts that should be able to recover tokens\n', ' * @author SylTi\n', ' * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.\n', ' * This will prevent any accidental loss of tokens.\n', ' * https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract CanReclaimToken is Ownable {\n', '  using SafeERC20 for ERC20Basic;\n', '\n', '    //log event whenever withdrawal from this contract address happens\n', '    event Withdraw(address indexed from, address indexed to, uint256 value);\n', '  /**\n', '   * @dev Reclaim all ERC20Basic compatible tokens\n', '   * @param token ERC20Basic The address of the token contract\n', '   */\n', '  function reclaimToken(address token) external onlyOwner {\n', '    if (token == 0x0) {\n', '      owner.transfer(this.balance);\n', '      return;\n', '    }\n', '    ERC20Basic ecr20BasicToken = ERC20Basic(token);\n', '    uint256 balance = ecr20BasicToken.balanceOf(this);\n', '    ecr20BasicToken.safeTransfer(owner, balance);\n', '    Withdraw(msg.sender, owner, balance);\n', '  }\n', '\n', '}\n', '\n', '/**\n', ' * @title Contracts that should not own Tokens\n', ' * @author Remco Bloemen <remco@2π.com>\n', ' * @dev This blocks incoming ERC23 tokens to prevent accidental loss of tokens.\n', ' * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the\n', ' * owner to reclaim the tokens.\n', '* https://github.com/OpenZeppelin/zeppelin-solidity/\n', ' */\n', 'contract HasNoTokens is CanReclaimToken {\n', '\n', ' /**\n', '  * @dev Reject all ERC23 compatible tokens\n', '  * @param from_ address The address that is transferring the tokens\n', '  * @param value_ uint256 the amount of the specified token\n', '  * @param data_ Bytes The data passed from the caller.\n', '  */\n', '  function tokenFallback(address from_, uint256 value_, bytes data_) pure external {\n', '    from_;\n', '    value_;\n', '    data_;\n', '    revert();\n', '  }\n', '\n', '}\n', '\n', '\n', 'contract VZTPresale is Ownable, Pausable, HasNoTokens {\n', '\n', '\n', '    using SafeMath for uint256;\n', '\n', '    string public constant name = "VectorZilla Public Presale";  // solium-disable-line uppercase\n', '    string public constant version = "1.0"; // solium-disable-line uppercase\n', '\n', '    VZToken token;\n', '\n', '    // this multi-sig address will be replaced on production:\n', '    address public constant VZT_WALLET = 0xa50EB7D45aA025525254aB2452679cE888B16b86;\n', '    /* if the minimum funding goal in wei is not reached, buyers may withdraw their funds */\n', '    uint256 public constant MIN_FUNDING_GOAL = 200 * 10 ** 18;\n', '    uint256 public constant PRESALE_TOKEN_SOFT_CAP = 1875000 * 10 ** 18;    // presale soft cap of 1,875,000 VZT\n', '    uint256 public constant PRESALE_RATE = 1250;                            // presale price is 1 ETH to 1,250 VZT\n', '    uint256 public constant SOFTCAP_RATE = 1150;                            // presale price becomes 1 ETH to 1,150 VZT after softcap is reached\n', '    uint256 public constant PRESALE_TOKEN_HARD_CAP = 5900000 * 10 ** 18;    // presale token hardcap\n', '    uint256 public constant MAX_GAS_PRICE = 50000000000;\n', '\n', '    uint256 public minimumPurchaseLimit = 0.1 * 10 ** 18;                      // minimum purchase is 0.1 ETH to make the gas worthwhile\n', '    uint256 public startDate = 1516001400;                            // January 15, 2018 7:30 AM UTC\n', '    uint256 public endDate = 1517815800;                              // Febuary 5, 2018 7:30 AM UTC\n', '    uint256 public totalCollected = 0;                                // total amount of Ether raised in wei\n', '    uint256 public tokensSold = 0;                                    // total number of VZT tokens sold\n', '    uint256 public totalDistributed = 0;                              // total number of VZT tokens distributed once finalised\n', '    uint256 public numWhitelisted = 0;                                // total number whitelisted\n', '\n', '    struct PurchaseLog {\n', '        uint256 ethValue;\n', '        uint256 vztValue;\n', '        bool kycApproved;\n', '        bool tokensDistributed;\n', '        bool paidFiat;\n', '        uint256 lastPurchaseTime;\n', '        uint256 lastDistributionTime;\n', '    }\n', '\n', '    //purchase log that captures\n', '    mapping (address => PurchaseLog) public purchaseLog;\n', '    //capture refunds\n', '    mapping (address => bool) public refundLog;\n', '    //capture buyers in array, this is for quickly looking up from DAPP\n', '    address[] public buyers;\n', '    uint256 public buyerCount = 0;                                              // total number of buyers purchased VZT\n', '\n', '    bool public isFinalized = false;                                        // it becomes true when token sale is completed\n', '    bool public publicSoftCapReached = false;                               // it becomes true when public softcap is reached\n', '\n', '    // list of addresses that can purchase\n', '    mapping(address => bool) public whitelist;\n', '\n', '    // event logging for token purchase\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '    // event logging for token sale finalized\n', '    event Finalized();\n', '    // event logging for softcap reached\n', '    event SoftCapReached();\n', '    // event logging for funds transfered to VectorZilla multi-sig wallet\n', '    event FundsTransferred();\n', '    // event logging for each individual refunded amount\n', '    event Refunded(address indexed beneficiary, uint256 weiAmount);\n', '    // event logging for each individual distributed token + bonus\n', '    event TokenDistributed(address indexed purchaser, uint256 tokenAmt);\n', '\n', '\n', '    /*\n', '        Constructor to initialize everything.\n', '    */\n', '    function VZTPresale(address _token, address _owner) public {\n', '        require(_token != address(0));\n', '        require(_owner != address(0));\n', '        token = VZToken(_token);\n', '        // default owner\n', '        owner = _owner;\n', '    }\n', '\n', '    /*\n', '       default function to buy tokens.\n', '    */\n', '\n', '    function() payable public whenNotPaused {\n', '        doPayment(msg.sender);\n', '    }\n', '\n', '    /*\n', '       allows owner to register token purchases done via fiat-eth (or equivalent currency)\n', '    */\n', '    function payableInFiatEth(address buyer, uint256 value) external onlyOwner {\n', '        purchaseLog[buyer].paidFiat = true;\n', '        // do public presale\n', '        purchasePresale(buyer, value);\n', '    }\n', '\n', '    function setTokenContract(address _token) external onlyOwner {\n', '        require(token != address(0));\n', '        token = VZToken(_token);\n', '\n', '    }\n', '\n', '    /**\n', '    * add address to whitelist\n', '    * @param _addr wallet address to be added to whitelist\n', '    */\n', '    function addToWhitelist(address _addr) public onlyOwner returns (bool) {\n', '        require(_addr != address(0));\n', '        if (!whitelist[_addr]) {\n', '            whitelist[_addr] = true;\n', '            numWhitelisted++;\n', '        }\n', '        purchaseLog[_addr].kycApproved = true;\n', '        return true;\n', '    }\n', '\n', '     /**\n', '      * add address to whitelist\n', '      * @param _addresses wallet addresses to be whitelisted\n', '      */\n', '    function addManyToWhitelist(address[] _addresses) \n', '        external \n', '        onlyOwner \n', '        returns (bool) \n', '        {\n', '        require(_addresses.length <= 50);\n', '        uint idx = 0;\n', '        uint len = _addresses.length;\n', '        for (; idx < len; idx++) {\n', '            address _addr = _addresses[idx];\n', '            addToWhitelist(_addr);\n', '        }\n', '        return true;\n', '    }\n', '    /**\n', '     * remove address from whitelist\n', '     * @param _addr wallet address to be removed from whitelist\n', '     */\n', '     function removeFomWhitelist(address _addr) public onlyOwner returns (bool) {\n', '         require(_addr != address(0));\n', '         require(whitelist[_addr]);\n', '        delete whitelist[_addr];\n', '        purchaseLog[_addr].kycApproved = false;\n', '        numWhitelisted--;\n', '        return true;\n', '     }\n', '\n', '    /*\n', '        Send Tokens tokens to a buyer:\n', '        - and KYC is approved\n', '    */\n', '    function sendTokens(address _user) public onlyOwner returns (bool) {\n', '        require(_user != address(0));\n', '        require(_user != address(this));\n', '        require(purchaseLog[_user].kycApproved);\n', '        require(purchaseLog[_user].vztValue > 0);\n', '        require(!purchaseLog[_user].tokensDistributed);\n', '        require(!refundLog[_user]);\n', '        purchaseLog[_user].tokensDistributed = true;\n', '        purchaseLog[_user].lastDistributionTime = now;\n', '        totalDistributed++;\n', '        token.sendToken(_user, purchaseLog[_user].vztValue);\n', '        TokenDistributed(_user, purchaseLog[_user].vztValue);\n', '        return true;\n', '    }\n', '\n', '    /*\n', "        Refund ethers to buyer if KYC couldn't/wasn't verified.\n", '    */\n', '    function refundEthIfKYCNotVerified(address _user) public onlyOwner returns (bool) {\n', '        if (!purchaseLog[_user].kycApproved) {\n', '            return doRefund(_user);\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /*\n', '\n', '    /*\n', '        return true if buyer is whitelisted\n', '    */\n', '    function isWhitelisted(address buyer) public view returns (bool) {\n', '        return whitelist[buyer];\n', '    }\n', '\n', '    /*\n', '        Check to see if this is public presale.\n', '    */\n', '    function isPresale() public view returns (bool) {\n', '        return !isFinalized && now >= startDate && now <= endDate;\n', '    }\n', '\n', '    /*\n', '        check if allocated has sold out.\n', '    */\n', '    function hasSoldOut() public view returns (bool) {\n', '        return PRESALE_TOKEN_HARD_CAP - tokensSold < getMinimumPurchaseVZTLimit();\n', '    }\n', '\n', '    /*\n', '        Check to see if the presale end date has passed or if all tokens allocated\n', '        for sale has been purchased.\n', '    */\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endDate || hasSoldOut();\n', '    }\n', '\n', '    /*\n', '        Determine if the minimum goal in wei has been reached.\n', '    */\n', '    function isMinimumGoalReached() public view returns (bool) {\n', '        return totalCollected >= MIN_FUNDING_GOAL;\n', '    }\n', '\n', '    /*\n', '        For the convenience of presale interface to present status info.\n', '    */\n', '    function getSoftCapReached() public view returns (bool) {\n', '        return publicSoftCapReached;\n', '    }\n', '\n', '    function setMinimumPurchaseEtherLimit(uint256 newMinimumPurchaseLimit) external onlyOwner {\n', '        require(newMinimumPurchaseLimit > 0);\n', '        minimumPurchaseLimit = newMinimumPurchaseLimit;\n', '    }\n', '    /*\n', '        For the convenience of presale interface to find current tier price.\n', '    */\n', '\n', '    function getMinimumPurchaseVZTLimit() public view returns (uint256) {\n', '        if (getTier() == 1) {\n', '            return minimumPurchaseLimit.mul(PRESALE_RATE); //1250VZT/ether\n', '        } else if (getTier() == 2) {\n', '            return minimumPurchaseLimit.mul(SOFTCAP_RATE); //1150VZT/ether\n', '        }\n', '        return minimumPurchaseLimit.mul(1000); //base price\n', '    }\n', '\n', '    /*\n', '        For the convenience of presale interface to find current discount tier.\n', '    */\n', '    function getTier() public view returns (uint256) {\n', '        // Assume presale top tier discount\n', '        uint256 tier = 1;\n', '        if (now >= startDate && now < endDate && getSoftCapReached()) {\n', '            // tier 2 discount\n', '            tier = 2;\n', '        }\n', '        return tier;\n', '    }\n', '\n', '    /*\n', '        For the convenience of presale interface to present status info.\n', '    */\n', '    function getPresaleStatus() public view returns (uint256[3]) {\n', '        // 0 - presale not started\n', '        // 1 - presale started\n', '        // 2 - presale ended\n', '        if (now < startDate)\n', '            return ([0, startDate, endDate]);\n', '        else if (now <= endDate && !hasEnded())\n', '            return ([1, startDate, endDate]);\n', '        else\n', '            return ([2, startDate, endDate]);\n', '    }\n', '\n', '    /*\n', '        Called after presale ends, to do some extra finalization work.\n', '    */\n', '    function finalize() public onlyOwner {\n', '        // do nothing if finalized\n', '        require(!isFinalized);\n', '        // presale must have ended\n', '        require(hasEnded());\n', '\n', '        if (isMinimumGoalReached()) {\n', '            // transfer to VectorZilla multisig wallet\n', '            VZT_WALLET.transfer(this.balance);\n', '            // signal the event for communication\n', '            FundsTransferred();\n', '        }\n', '        // mark as finalized\n', '        isFinalized = true;\n', '        // signal the event for communication\n', '        Finalized();\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice `proxyPayment()` allows the caller to send ether to the VZTPresale\n', '     * and have the tokens created in an address of their choosing\n', '     * @param buyer The address that will hold the newly created tokens\n', '     */\n', '    function proxyPayment(address buyer) \n', '    payable \n', '    public\n', '    whenNotPaused \n', '    returns(bool success) \n', '    {\n', '        return doPayment(buyer);\n', '    }\n', '\n', '    /*\n', '        Just in case we need to tweak pre-sale dates\n', '    */\n', '    function setDates(uint256 newStartDate, uint256 newEndDate) public onlyOwner {\n', '        require(newEndDate >= newStartDate);\n', '        startDate = newStartDate;\n', '        endDate = newEndDate;\n', '    }\n', '\n', '\n', '    // @dev `doPayment()` is an internal function that sends the ether that this\n', '    //  contract receives to the `vault` and creates tokens in the address of the\n', '    //  `buyer` assuming the VZTPresale is still accepting funds\n', '    //  @param buyer The address that will hold the newly created tokens\n', '    // @return True if payment is processed successfully\n', '    function doPayment(address buyer) internal returns(bool success) {\n', '        require(tx.gasprice <= MAX_GAS_PRICE);\n', '        // Antispam\n', '        // do not allow contracts to game the system\n', '        require(buyer != address(0));\n', '        require(!isContract(buyer));\n', '        // limit the amount of contributions to once per 100 blocks\n', '        //require(getBlockNumber().sub(lastCallBlock[msg.sender]) >= maxCallFrequency);\n', '        //lastCallBlock[msg.sender] = getBlockNumber();\n', '\n', '        if (msg.sender != owner) {\n', '            // stop if presale is over\n', '            require(isPresale());\n', '            // stop if no more token is allocated for sale\n', '            require(!hasSoldOut());\n', '            require(msg.value >= minimumPurchaseLimit);\n', '        }\n', '        require(msg.value > 0);\n', '        purchasePresale(buyer, msg.value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev Internal function to determine if an address is a contract\n', '    /// @param _addr The address being queried\n', '    /// @return True if `_addr` is a contract\n', '    function isContract(address _addr) constant internal returns (bool) {\n', '        if (_addr == 0) {\n', '            return false;\n', '        }\n', '        uint256 size;\n', '        assembly {\n', '            size := extcodesize(_addr)\n', '        }\n', '        return (size > 0);\n', '    }\n', '\n', '    /// @dev Internal function to process sale\n', '    /// @param buyer The buyer address\n', '    /// @param value  The value of ether paid\n', '    function purchasePresale(address buyer, uint256 value) internal {\n', '         require(value >= minimumPurchaseLimit);\n', '         require(buyer != address(0));\n', '        uint256 tokens = 0;\n', '        // still under soft cap\n', '        if (!publicSoftCapReached) {\n', '            // 1 ETH for 1,250 VZT\n', '            tokens = value * PRESALE_RATE;\n', '            // get less if over softcap\n', '            if (tokensSold + tokens > PRESALE_TOKEN_SOFT_CAP) {\n', '                uint256 availablePresaleTokens = PRESALE_TOKEN_SOFT_CAP - tokensSold;\n', '                uint256 softCapTokens = (value - (availablePresaleTokens / PRESALE_RATE)) * SOFTCAP_RATE;\n', '                tokens = availablePresaleTokens + softCapTokens;\n', '                // process presale at 1 ETH to 1,150 VZT\n', '                processSale(buyer, value, tokens, SOFTCAP_RATE);\n', '                // public soft cap has been reached\n', '                publicSoftCapReached = true;\n', '                // signal the event for communication\n', '                SoftCapReached();\n', '            } else {\n', '                // process presale @PRESALE_RATE\n', '                processSale(buyer, value, tokens, PRESALE_RATE);\n', '            }\n', '        } else {\n', '            // 1 ETH to 1,150 VZT\n', '            tokens = value * SOFTCAP_RATE;\n', '            // process presale at 1 ETH to 1,150 VZT\n', '            processSale(buyer, value, tokens, SOFTCAP_RATE);\n', '        }\n', '    }\n', '\n', '    /*\n', '        process sale at determined price.\n', '    */\n', '    function processSale(address buyer, uint256 value, uint256 vzt, uint256 vztRate) internal {\n', '        require(buyer != address(0));\n', '        require(vzt > 0);\n', '        require(vztRate > 0);\n', '        require(value > 0);\n', '\n', '        uint256 vztOver = 0;\n', '        uint256 excessEthInWei = 0;\n', '        uint256 paidValue = value;\n', '        uint256 purchasedVzt = vzt;\n', '\n', '        if (tokensSold + purchasedVzt > PRESALE_TOKEN_HARD_CAP) {// if maximum is exceeded\n', '            // find overage\n', '            vztOver = tokensSold + purchasedVzt - PRESALE_TOKEN_HARD_CAP;\n', '            // overage ETH to refund\n', '            excessEthInWei = vztOver / vztRate;\n', '            // adjust tokens purchased\n', '            purchasedVzt = purchasedVzt - vztOver;\n', '            // adjust Ether paid\n', '            paidValue = paidValue - excessEthInWei;\n', '        }\n', '\n', '        /* To quick lookup list of buyers (pending token, kyc, or even refunded)\n', '            we are keeping an array of buyers. There might be duplicate entries when\n', '            a buyer gets refund (incomplete kyc, or requested), and then again contributes.\n', '        */\n', '        if (purchaseLog[buyer].vztValue == 0) {\n', '            buyers.push(buyer);\n', '            buyerCount++;\n', '        }\n', '\n', '        //if not whitelisted, mark kyc pending\n', '        if (!isWhitelisted(buyer)) {\n', '            purchaseLog[buyer].kycApproved = false;\n', '        }\n', '        //reset refund status in refundLog\n', '        refundLog[buyer] = false;\n', '\n', '         // record purchase in purchaseLog\n', '        purchaseLog[buyer].vztValue = SafeMath.add(purchaseLog[buyer].vztValue, purchasedVzt);\n', '        purchaseLog[buyer].ethValue = SafeMath.add(purchaseLog[buyer].ethValue, paidValue);\n', '        purchaseLog[buyer].lastPurchaseTime = now;\n', '\n', '\n', '        // total Wei raised\n', '        totalCollected += paidValue;\n', '        // total VZT sold\n', '        tokensSold += purchasedVzt;\n', '\n', '        /*\n', '            For event, log buyer and beneficiary properly\n', '        */\n', '        address beneficiary = buyer;\n', '        if (beneficiary == msg.sender) {\n', '            beneficiary = msg.sender;\n', '        }\n', '        // signal the event for communication\n', '        TokenPurchase(buyer, beneficiary, paidValue, purchasedVzt);\n', '        // transfer must be done at the end after all states are updated to prevent reentrancy attack.\n', '        if (excessEthInWei > 0 && !purchaseLog[buyer].paidFiat) {\n', '            // refund overage ETH\n', '            buyer.transfer(excessEthInWei);\n', '            // signal the event for communication\n', '            Refunded(buyer, excessEthInWei);\n', '        }\n', '    }\n', '\n', '    /*\n', '        Distribute tokens to a buyer:\n', '        - when minimum goal is reached\n', '        - and KYC is approved\n', '    */\n', '    function distributeTokensFor(address buyer) external onlyOwner returns (bool) {\n', '        require(isFinalized);\n', '        require(hasEnded());\n', '        if (isMinimumGoalReached()) {\n', '            return sendTokens(buyer);\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /*\n', '        purchaser requesting a refund, only allowed when minimum goal not reached.\n', '    */\n', '    function claimRefund() external returns (bool) {\n', '        return doRefund(msg.sender);\n', '    }\n', '\n', '    /*\n', '      send refund to purchaser requesting a refund \n', '   */\n', '    function sendRefund(address buyer) external onlyOwner returns (bool) {\n', '        return doRefund(buyer);\n', '    }\n', '\n', '    /*\n', '        Internal function to manage refunds \n', '    */\n', '    function doRefund(address buyer) internal returns (bool) {\n', '        require(tx.gasprice <= MAX_GAS_PRICE);\n', '        require(buyer != address(0));\n', '        require(!purchaseLog[buyer].paidFiat);\n', '        if (msg.sender != owner) {\n', '            // cannot refund unless authorized\n', '            require(isFinalized && !isMinimumGoalReached());\n', '        }\n', '        require(purchaseLog[buyer].ethValue > 0);\n', '        require(purchaseLog[buyer].vztValue > 0);\n', '        require(!refundLog[buyer]);\n', '        require(!purchaseLog[buyer].tokensDistributed);\n', '\n', '        // ETH to refund\n', '        uint256 depositedValue = purchaseLog[buyer].ethValue;\n', '        //VZT to revert\n', '        uint256 vztValue = purchaseLog[buyer].vztValue;\n', '        // assume all refunded, should we even do this if\n', '        // we are going to delete buyer from log?\n', '        purchaseLog[buyer].ethValue = 0;\n', '        purchaseLog[buyer].vztValue = 0;\n', '        refundLog[buyer] = true;\n', '        //delete from purchase log.\n', "        //but we won't remove buyer from buyers array\n", '        delete purchaseLog[buyer];\n', '        //decrement global counters\n', '        tokensSold = tokensSold.sub(vztValue);\n', '        totalCollected = totalCollected.sub(depositedValue);\n', '\n', '        // send must be called only after purchaseLog[buyer] is deleted to\n', '        //prevent reentrancy attack.\n', '        buyer.transfer(depositedValue);\n', '        Refunded(buyer, depositedValue);\n', '        return true;\n', '    }\n', '\n', '    function getBuyersList() external view returns (address[]) {\n', '        return buyers;\n', '    }\n', '\n', '    /**\n', '        * @dev Transfer all Ether held by the contract to the owner.\n', '        * Emergency where we might need to recover\n', '    */\n', '    function reclaimEther() external onlyOwner {\n', '        assert(owner.send(this.balance));\n', '    }\n', '\n', '}']