['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    //SafeMath library for preventing overflow when dealing with uint256 in solidity\n', '\n', '   /**\n', '   * @dev Multiplies two numbers, throws on overflow.\n', '   */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', '        // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    //ERC20 contract used as an interface. Implementation of functions provided in the derived contract.\n', '\n', '    string public NAME;\n', '    string public SYMBOL;\n', '    uint8 public DECIMALS = 18; // 18 DECIMALS is the strongly suggested default, avoid changing it\n', '\n', '    //total supply (TOTALSUPPLY) is declared private and can be accessed via totalSupply()\n', '    uint private TOTALSUPPLY;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    //This is a mapping of a mapping\n', '    // This mapping keeps track of the allowances given\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '                 //*** ERC20 FUNCTIONS ***//\n', '    //1\n', '    //Allows an instance of a contract to calculate and return the total amount\n', '    //of the token that exists.\n', '    function totalSupply() public constant returns (uint256 _totalSupply);\n', '\n', '    //2\n', '    //Allows a contract to store and return the balance of the provided address (parameter)\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    //3\n', '    //Lets the caller send a given amount(_amount) of the token to another address(_to).\n', '    //Note: returns a boolean indicating whether transfer was successful\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    //4\n', '    //Owner "approves" the given address to withdraw instances of the tokens from the owners address\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    //5\n', '    //Lets an "approved" address transfer the approved amount from the address that called approve()\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    //6\n', '    //returns the amount of tokens approved by the owner that can *Still* be transferred\n', '    //to the spender&#39;s account using the transferFrom method.\n', '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '            //***ERC20 Events***//\n', '    //Event 1\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //Event 2\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    //Event triggered when owner address is changed.\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Bitcub is Ownable, ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant NAME = "Bitcub";\n', '    string public constant SYMBOL = "BCU";\n', '    uint8 public constant DECIMALS = 18; // 18 DECIMALS is the strongly suggested default, avoid changing it\n', '\n', '    //total supply (TOTALSUPPLY) is declared private and constant and can be accessed via totalSupply()\n', '    uint private constant TOTALSUPPLY = 500000000*(10**18);\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    //This is a mapping of a mapping\n', '    // This mapping keeps track of the allowances given\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    //Constructor FOR BITCUB TOKEN\n', '    constructor() public {\n', '        //establishes ownership of the contract upon creation\n', '        Ownable(msg.sender);\n', '\n', '        /* IMPLEMENTING ALLOCATION OF TOKENS */\n', '        balances[0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212] = 150000000*(10**18);\n', '        /* Transfer Events for the allocations */\n', '        emit Transfer(address(0), 0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212, 150000000*(10**18));\n', '\n', '        //sends all the unallocated tokens (350,000,000 tokens) to the address of the contract creator (The Crowdsale Contract)\n', '        balances[msg.sender] = TOTALSUPPLY.sub(150000000*(10**18)); \n', '        //Transfer event for sending tokens to Crowdsale Contract\n', '        emit Transfer(address(0), msg.sender, TOTALSUPPLY.sub(150000000*(10**18)));\n', '    }\n', '\n', '                 //*** ERC20 FUNCTIONS ***//\n', '    //1\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public constant returns (uint256 _totalSupply) {\n', '        //set the named return variable as the global variable totalSupply\n', '        _totalSupply = TOTALSUPPLY;\n', '    }\n', '\n', '    //2\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    //3\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    //Note: returns a boolean indicating whether transfer was successful\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //not sending to burn address\n', '        require(_value <= balances[msg.sender]); // If the sender has sufficient funds to send\n', '        require(_value>0);// and the amount is not zero or negative\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //4\n', '    //Owner "approves" the given address to withdraw instances of the tokens from the owners address\n', '    /**\n', '       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '       *\n', '       * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '       * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '       * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '       * @param _spender The address which will spend the funds.\n', '       * @param _value The amount of tokens to be spent.\n', '       */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    //5\n', '    //Lets an "approved" address transfer the approved amount from the address that called approve()\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //6\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //additional functions for altering allowances\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '              //***ERC20 Events***//\n', '    //Event 1\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //Event 2\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '}\n', '\n', '\n', '//Using OpenZeppelin Crowdsale contract as a reference and altered, also using ethereum.org/Crowdsale as a reference.\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', '\n', ' //The original OpenZeppelin contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' //This version does not use a MintableToken.\n', ' */\n', 'contract BitcubCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    Bitcub public token;\n', '\n', '    //The amount of the tokens remaining that are unsold.\n', '    uint256 remainingTokens = 350000000 *(10**18);\n', '\n', '    // start and end timestamps where investments are allowed (inclusive), as well as timestamps for beginning and end of presale tiers\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '    uint256 public tier1Start;\n', '    uint256 public tier1End;\n', '    uint256 public tier2Start;\n', '    uint256 public tier2End;\n', '\n', '    // address where funds are collected\n', '    address public etherWallet;\n', '    // address where unsold tokens are sent\n', '    address public tokenWallet;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate = 100;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    //minimum purchase for an buyer in amount of ether (1 token)\n', '    uint256 public minPurchaseInEth = 0.01 ether;\n', '  \n', '    //maximum investment for an investor in amount of tokens\n', '    //To set max investment to 5% of total, it is 25,000,000 tokens, which is 250000 ETH\n', '    uint256 public maxInvestment = 250000 ether;\n', '  \n', '    //mapping to keep track of the amount invested by each address.\n', '    mapping (address => uint256) internal invested;\n', '\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    //Constructor for crowdsale.\n', '    constructor() public {\n', '        //hard coded times and wallets \n', '        startTime = now ;\n', '        tier1Start = startTime ;\n', '        tier1End = 1528416000 ; //midnight on 2018-06-08 GMT\n', '        tier2Start = tier1End;\n', '        tier2End = 1532131200 ; //midnight on 2018-07-21 GMT\n', '        endTime = 1538265600 ; //midnight on 2018-09-30 GMT\n', '        etherWallet = 0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212; //Bitcub Reserve Wallet\n', '        tokenWallet = 0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212; //Bitcub Reserve Wallet\n', '\n', '        require(startTime >= now);\n', '        require(endTime >= startTime);\n', '        require(etherWallet != address(0));\n', '\n', '        //establishes ownership of the contract upon creation\n', '        Ownable(msg.sender);\n', '\n', '        //calls the function to create the token contract itself.\n', '        token = createTokenContract();\n', '    }\n', '\n', '    function createTokenContract() internal returns (Bitcub) {\n', '      // Create Token contract\n', '      // The amount for sale will be assigned to the crowdsale contract, the reserves will be sent to the Bitcub Wallet\n', '        return new Bitcub();\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    //This function is called whenever ether is sent to this contract address.\n', '    function () external payable {\n', '        //calls the buyTokens function with the address of the sender as the beneficiary address\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    //This function is called after the ICO has ended to send the unsold Tokens to the specified address\n', '    function finalizeCrowdsale() public onlyOwner returns (bool) {\n', '        require(hasEnded());\n', '        require(token.transfer(tokenWallet, remainingTokens));\n', '        return true;\n', '    }\n', '\n', '    // low level token purchase function\n', '    //implements the logic for the token buying\n', '    function buyTokens(address beneficiary) public payable {\n', '        //tokens cannot be burned by sending to 0x0 address\n', '        require(beneficiary != address(0));\n', '        //token must adhere to the valid restrictions of the validPurchase() function, ie within time period and buying tokens within max/min limits\n', '        require(validPurchase(beneficiary));\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be bought\n', '        uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '        //Logic so that investors must purchase at least 1 token.\n', '        require(weiAmount >= minPurchaseInEth); \n', '\n', '        //Token transfer\n', '        require(token.transfer(beneficiary, tokens));\n', '\n', '        // update state\n', '        //increment the total ammount raised by the amount of this transaction\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        //decrease the amount of remainingTokens by the amount of tokens sold\n', '        remainingTokens = remainingTokens.sub(tokens);\n', '        //increase the investment total of the buyer\n', '        invested[beneficiary] = invested[beneficiary].add(msg.value);\n', '\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        //transfer the ether received to the specified recipient address\n', '        forwardFunds();\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // Function to have a way to add business logic to your crowdsale when buying\n', '    function getTokenAmount(uint256 weiAmount) internal returns(uint256) {\n', '        //Logic for pricing based on the Tiers of the crowdsale\n', '        // These bonus amounts and the number of tiers itself can be changed\n', '        /*This means that:\n', '            - If you purchase within the tier 1 ICO (earliest tier)\n', '            you receive a 20% bonus in your token purchase.\n', '            - If you purchase within the tier 2 ICO (later tier)\n', '            you receive a 10% bonus in your token purchase.\n', '            - If you purchase outside of any of the defined bonus tiers then you\n', '            receive the original rate of tokens (1 token per 0.01 ether)\n', '            */\n', '        if (now>=tier1Start && now < tier1End) {\n', '            rate = 120;\n', '        }else if (now>=tier2Start && now < tier2End) {\n', '            rate = 110;\n', '        }else {\n', '            rate = 100;\n', '        }\n', '\n', '        return weiAmount.mul(rate);\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        etherWallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase(address beneficiary) internal view returns (bool) {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool withinMaxInvestment = ( invested[beneficiary].add(msg.value) <= maxInvestment );\n', '\n', '        return withinPeriod && nonZeroPurchase && withinMaxInvestment;\n', '    }\n', '\n', '}']
['pragma solidity ^0.4.18;\n', '\n', 'library SafeMath {\n', '    //SafeMath library for preventing overflow when dealing with uint256 in solidity\n', '\n', '   /**\n', '   * @dev Multiplies two numbers, throws on overflow.\n', '   */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        assert(c / a == b);\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, throws on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', 'contract ERC20 {\n', '    //ERC20 contract used as an interface. Implementation of functions provided in the derived contract.\n', '\n', '    string public NAME;\n', '    string public SYMBOL;\n', '    uint8 public DECIMALS = 18; // 18 DECIMALS is the strongly suggested default, avoid changing it\n', '\n', '    //total supply (TOTALSUPPLY) is declared private and can be accessed via totalSupply()\n', '    uint private TOTALSUPPLY;\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    //This is a mapping of a mapping\n', '    // This mapping keeps track of the allowances given\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '                 //*** ERC20 FUNCTIONS ***//\n', '    //1\n', '    //Allows an instance of a contract to calculate and return the total amount\n', '    //of the token that exists.\n', '    function totalSupply() public constant returns (uint256 _totalSupply);\n', '\n', '    //2\n', '    //Allows a contract to store and return the balance of the provided address (parameter)\n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '\n', '    //3\n', '    //Lets the caller send a given amount(_amount) of the token to another address(_to).\n', '    //Note: returns a boolean indicating whether transfer was successful\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '\n', '    //4\n', '    //Owner "approves" the given address to withdraw instances of the tokens from the owners address\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '\n', '    //5\n', '    //Lets an "approved" address transfer the approved amount from the address that called approve()\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '\n', '    //6\n', '    //returns the amount of tokens approved by the owner that can *Still* be transferred\n', "    //to the spender's account using the transferFrom method.\n", '    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n', '\n', '            //***ERC20 Events***//\n', '    //Event 1\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //Event 2\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '\n', '    //Event triggered when owner address is changed.\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '\n', 'contract Bitcub is Ownable, ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    string public constant NAME = "Bitcub";\n', '    string public constant SYMBOL = "BCU";\n', '    uint8 public constant DECIMALS = 18; // 18 DECIMALS is the strongly suggested default, avoid changing it\n', '\n', '    //total supply (TOTALSUPPLY) is declared private and constant and can be accessed via totalSupply()\n', '    uint private constant TOTALSUPPLY = 500000000*(10**18);\n', '\n', '    // Balances for each account\n', '    mapping(address => uint256) balances;\n', '\n', '    // Owner of account approves the transfer of an amount to another account\n', '    //This is a mapping of a mapping\n', '    // This mapping keeps track of the allowances given\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '\n', '    //Constructor FOR BITCUB TOKEN\n', '    constructor() public {\n', '        //establishes ownership of the contract upon creation\n', '        Ownable(msg.sender);\n', '\n', '        /* IMPLEMENTING ALLOCATION OF TOKENS */\n', '        balances[0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212] = 150000000*(10**18);\n', '        /* Transfer Events for the allocations */\n', '        emit Transfer(address(0), 0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212, 150000000*(10**18));\n', '\n', '        //sends all the unallocated tokens (350,000,000 tokens) to the address of the contract creator (The Crowdsale Contract)\n', '        balances[msg.sender] = TOTALSUPPLY.sub(150000000*(10**18)); \n', '        //Transfer event for sending tokens to Crowdsale Contract\n', '        emit Transfer(address(0), msg.sender, TOTALSUPPLY.sub(150000000*(10**18)));\n', '    }\n', '\n', '                 //*** ERC20 FUNCTIONS ***//\n', '    //1\n', '    /**\n', '    * @dev total number of tokens in existence\n', '    */\n', '    function totalSupply() public constant returns (uint256 _totalSupply) {\n', '        //set the named return variable as the global variable totalSupply\n', '        _totalSupply = TOTALSUPPLY;\n', '    }\n', '\n', '    //2\n', '    /**\n', '    * @dev Gets the balance of the specified address.\n', '    * @param _owner The address to query the the balance of.\n', '    * @return An uint256 representing the amount owned by the passed address.\n', '    */\n', '    function balanceOf(address _owner) public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    //3\n', '    /**\n', '    * @dev transfer token for a specified address\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    //Note: returns a boolean indicating whether transfer was successful\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        require(_to != address(0)); //not sending to burn address\n', '        require(_value <= balances[msg.sender]); // If the sender has sufficient funds to send\n', '        require(_value>0);// and the amount is not zero or negative\n', '\n', '        // SafeMath.sub will throw if there is not enough balance.\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //4\n', '    //Owner "approves" the given address to withdraw instances of the tokens from the owners address\n', '    /**\n', '       * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '       *\n', '       * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '       * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "       * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '       * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '       * @param _spender The address which will spend the funds.\n', '       * @param _value The amount of tokens to be spent.\n', '       */\n', '    function approve(address _spender, uint256 _value) public returns (bool) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    //5\n', '    //Lets an "approved" address transfer the approved amount from the address that called approve()\n', '    /**\n', '     * @dev Transfer tokens from one address to another\n', '     * @param _from address The address which you want to send tokens from\n', '     * @param _to address The address which you want to transfer to\n', '     * @param _value uint256 the amount of tokens to be transferred\n', '     */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '        require(_to != address(0));\n', '        require(_value <= balances[_from]);\n', '        require(_value <= allowed[_from][msg.sender]);\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //6\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '     * @param _owner address The address which owns the funds.\n', '     * @param _spender address The address which will spend the funds.\n', '     * @return A uint256 specifying the amount of tokens still available for the spender.\n', '     */\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '\n', '    //additional functions for altering allowances\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To increment\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '     *\n', '     * approve should be called when allowed[_spender] == 0. To decrement\n', '     * allowed value is better to use this function to avoid 2 calls (and wait until\n', '     * the first transaction is mined)\n', '     * From MonolithDAO Token.sol\n', '     * @param _spender The address which will spend the funds.\n', '     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '        uint oldValue = allowed[msg.sender][_spender];\n', '        if (_subtractedValue > oldValue) {\n', '            allowed[msg.sender][_spender] = 0;\n', '        } else {\n', '            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '        }\n', '        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '        return true;\n', '    }\n', '\n', '              //***ERC20 Events***//\n', '    //Event 1\n', '    // Triggered whenever approve(address _spender, uint256 _value) is called.\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    //Event 2\n', '    // Triggered when tokens are transferred.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '}\n', '\n', '\n', '//Using OpenZeppelin Crowdsale contract as a reference and altered, also using ethereum.org/Crowdsale as a reference.\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale.\n', ' * Crowdsales have a start and end timestamps, where investors can make\n', ' * token purchases and the crowdsale will assign them tokens based\n', ' * on a token per ETH rate. Funds collected are forwarded to a wallet\n', ' * as they arrive.\n', '\n', ' //The original OpenZeppelin contract requires a MintableToken that will be\n', ' * minted as contributions arrive, note that the crowdsale contract\n', ' * must be owner of the token in order to be able to mint it.\n', ' //This version does not use a MintableToken.\n', ' */\n', 'contract BitcubCrowdsale is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // The token being sold\n', '    Bitcub public token;\n', '\n', '    //The amount of the tokens remaining that are unsold.\n', '    uint256 remainingTokens = 350000000 *(10**18);\n', '\n', '    // start and end timestamps where investments are allowed (inclusive), as well as timestamps for beginning and end of presale tiers\n', '    uint256 public startTime;\n', '    uint256 public endTime;\n', '    uint256 public tier1Start;\n', '    uint256 public tier1End;\n', '    uint256 public tier2Start;\n', '    uint256 public tier2End;\n', '\n', '    // address where funds are collected\n', '    address public etherWallet;\n', '    // address where unsold tokens are sent\n', '    address public tokenWallet;\n', '\n', '    // how many token units a buyer gets per wei\n', '    uint256 public rate = 100;\n', '\n', '    // amount of raised money in wei\n', '    uint256 public weiRaised;\n', '\n', '    //minimum purchase for an buyer in amount of ether (1 token)\n', '    uint256 public minPurchaseInEth = 0.01 ether;\n', '  \n', '    //maximum investment for an investor in amount of tokens\n', '    //To set max investment to 5% of total, it is 25,000,000 tokens, which is 250000 ETH\n', '    uint256 public maxInvestment = 250000 ether;\n', '  \n', '    //mapping to keep track of the amount invested by each address.\n', '    mapping (address => uint256) internal invested;\n', '\n', '\n', '    /**\n', '    * event for token purchase logging\n', '    * @param purchaser who paid for the tokens\n', '    * @param beneficiary who got the tokens\n', '    * @param value weis paid for purchase\n', '    * @param amount amount of tokens purchased\n', '    */\n', '    event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    //Constructor for crowdsale.\n', '    constructor() public {\n', '        //hard coded times and wallets \n', '        startTime = now ;\n', '        tier1Start = startTime ;\n', '        tier1End = 1528416000 ; //midnight on 2018-06-08 GMT\n', '        tier2Start = tier1End;\n', '        tier2End = 1532131200 ; //midnight on 2018-07-21 GMT\n', '        endTime = 1538265600 ; //midnight on 2018-09-30 GMT\n', '        etherWallet = 0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212; //Bitcub Reserve Wallet\n', '        tokenWallet = 0xaf0A558783E92a1aEC9dd2D10f2Dc9b9AF371212; //Bitcub Reserve Wallet\n', '\n', '        require(startTime >= now);\n', '        require(endTime >= startTime);\n', '        require(etherWallet != address(0));\n', '\n', '        //establishes ownership of the contract upon creation\n', '        Ownable(msg.sender);\n', '\n', '        //calls the function to create the token contract itself.\n', '        token = createTokenContract();\n', '    }\n', '\n', '    function createTokenContract() internal returns (Bitcub) {\n', '      // Create Token contract\n', '      // The amount for sale will be assigned to the crowdsale contract, the reserves will be sent to the Bitcub Wallet\n', '        return new Bitcub();\n', '    }\n', '\n', '    // fallback function can be used to buy tokens\n', '    //This function is called whenever ether is sent to this contract address.\n', '    function () external payable {\n', '        //calls the buyTokens function with the address of the sender as the beneficiary address\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    //This function is called after the ICO has ended to send the unsold Tokens to the specified address\n', '    function finalizeCrowdsale() public onlyOwner returns (bool) {\n', '        require(hasEnded());\n', '        require(token.transfer(tokenWallet, remainingTokens));\n', '        return true;\n', '    }\n', '\n', '    // low level token purchase function\n', '    //implements the logic for the token buying\n', '    function buyTokens(address beneficiary) public payable {\n', '        //tokens cannot be burned by sending to 0x0 address\n', '        require(beneficiary != address(0));\n', '        //token must adhere to the valid restrictions of the validPurchase() function, ie within time period and buying tokens within max/min limits\n', '        require(validPurchase(beneficiary));\n', '\n', '        uint256 weiAmount = msg.value;\n', '\n', '        // calculate token amount to be bought\n', '        uint256 tokens = getTokenAmount(weiAmount);\n', '\n', '        //Logic so that investors must purchase at least 1 token.\n', '        require(weiAmount >= minPurchaseInEth); \n', '\n', '        //Token transfer\n', '        require(token.transfer(beneficiary, tokens));\n', '\n', '        // update state\n', '        //increment the total ammount raised by the amount of this transaction\n', '        weiRaised = weiRaised.add(weiAmount);\n', '        //decrease the amount of remainingTokens by the amount of tokens sold\n', '        remainingTokens = remainingTokens.sub(tokens);\n', '        //increase the investment total of the buyer\n', '        invested[beneficiary] = invested[beneficiary].add(msg.value);\n', '\n', '        emit TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        //transfer the ether received to the specified recipient address\n', '        forwardFunds();\n', '    }\n', '\n', '    // @return true if crowdsale event has ended\n', '    function hasEnded() public view returns (bool) {\n', '        return now > endTime;\n', '    }\n', '\n', '    // Function to have a way to add business logic to your crowdsale when buying\n', '    function getTokenAmount(uint256 weiAmount) internal returns(uint256) {\n', '        //Logic for pricing based on the Tiers of the crowdsale\n', '        // These bonus amounts and the number of tiers itself can be changed\n', '        /*This means that:\n', '            - If you purchase within the tier 1 ICO (earliest tier)\n', '            you receive a 20% bonus in your token purchase.\n', '            - If you purchase within the tier 2 ICO (later tier)\n', '            you receive a 10% bonus in your token purchase.\n', '            - If you purchase outside of any of the defined bonus tiers then you\n', '            receive the original rate of tokens (1 token per 0.01 ether)\n', '            */\n', '        if (now>=tier1Start && now < tier1End) {\n', '            rate = 120;\n', '        }else if (now>=tier2Start && now < tier2End) {\n', '            rate = 110;\n', '        }else {\n', '            rate = 100;\n', '        }\n', '\n', '        return weiAmount.mul(rate);\n', '    }\n', '\n', '    // send ether to the fund collection wallet\n', '    // override to create custom fund forwarding mechanisms\n', '    function forwardFunds() internal {\n', '        etherWallet.transfer(msg.value);\n', '    }\n', '\n', '    // @return true if the transaction can buy tokens\n', '    function validPurchase(address beneficiary) internal view returns (bool) {\n', '        bool withinPeriod = now >= startTime && now <= endTime;\n', '        bool nonZeroPurchase = msg.value != 0;\n', '        bool withinMaxInvestment = ( invested[beneficiary].add(msg.value) <= maxInvestment );\n', '\n', '        return withinPeriod && nonZeroPurchase && withinMaxInvestment;\n', '    }\n', '\n', '}']
