['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', '    // assert(a == b * c + a % b); // There is no case in which this doesn&#39;t hold\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', '   * race condition is to first reduce the spender&#39;s allowance to 0 and set the desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/CurrentToken.sol\n', '\n', 'contract CurrentToken is StandardToken, Pausable {\n', '    string constant public name = "CurrentCoin";\n', '    string constant public symbol = "CUR";\n', '    uint8 constant public decimals = 18;\n', '\n', '    uint256 constant public INITIAL_TOTAL_SUPPLY = 1e11 * (uint256(10) ** decimals);\n', '\n', '    address private addressIco;\n', '\n', '    modifier onlyIco() {\n', '        require(msg.sender == addressIco);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Create CurrentToken contract and set pause\n', '    * @param _ico The address of ICO contract.\n', '    */\n', '    function CurrentToken (address _ico) public {\n', '        require(_ico != address(0));\n', '\n', '        addressIco = _ico;\n', '\n', '        totalSupply_ = totalSupply_.add(INITIAL_TOTAL_SUPPLY);\n', '        balances[_ico] = balances[_ico].add(INITIAL_TOTAL_SUPPLY);\n', '        Transfer(address(0), _ico, INITIAL_TOTAL_SUPPLY);\n', '\n', '        pause();\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from ICO address to another address.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFromIco(address _to, uint256 _value) onlyIco public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Burn remaining tokens from the ICO balance.\n', '    */\n', '    function burnFromIco() onlyIco public {\n', '        uint256 remainingTokens = balanceOf(addressIco);\n', '\n', '        balances[addressIco] = balances[addressIco].sub(remainingTokens);\n', '        totalSupply_ = totalSupply_.sub(remainingTokens);\n', '        Transfer(addressIco, address(0), remainingTokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Burn all tokens form balance of token holder during refund process.\n', '    * @param _from The address of token holder whose tokens to be burned.\n', '    */\n', '    function burnFromAddress(address _from) onlyIco public {\n', '        uint256 amount = balances[_from];\n', '\n', '        balances[_from] = 0;\n', '        totalSupply_ = totalSupply_.sub(amount);\n', '        Transfer(_from, address(0), amount);\n', '    }\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist contract\n', ' * @dev Whitelist for wallets.\n', '*/\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) whitelist;\n', '\n', '    uint256 public whitelistLength = 0;\n', '\n', '    /**\n', '    * @dev Add wallet to whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of wallet to add.\n', '    */  \n', '    function addWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != address(0));\n', '        require(!isWhitelisted(_wallet));\n', '        whitelist[_wallet] = true;\n', '        whitelistLength++;\n', '    }\n', '\n', '    /**\n', '    * @dev Remove wallet from whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of whitelisted wallet to remove.\n', '    */  \n', '    function removeWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != address(0));\n', '        require(isWhitelisted(_wallet));\n', '        whitelist[_wallet] = false;\n', '        whitelistLength--;\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified wallet whether it is in the whitelist.\n', '    * @param _wallet The address of wallet to check.\n', '    */ \n', '    function isWhitelisted(address _wallet) constant public returns (bool) {\n', '        return whitelist[_wallet];\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Whitelistable.sol\n', '\n', 'contract Whitelistable {\n', '    Whitelist public whitelist;\n', '\n', '    modifier whenWhitelisted(address _wallet) {\n', '        require(whitelist.isWhitelisted(_wallet));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for Whitelistable contract.\n', '    */\n', '    function Whitelistable() public {\n', '        whitelist = new Whitelist();\n', '    }\n', '}\n', '\n', '// File: contracts/CurrentCrowdsale.sol\n', '\n', 'contract CurrentCrowdsale is Pausable, Whitelistable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant private DECIMALS = 18;\n', '    uint256 constant public RESERVED_TOKENS_FOUNDERS = 40e9 * (10 ** DECIMALS);\n', '    uint256 constant public RESERVED_TOKENS_OPERATIONAL_EXPENSES = 10e9 * (10 ** DECIMALS);\n', '    uint256 constant public HARDCAP_TOKENS_PRE_ICO = 100e6 * (10 ** DECIMALS);\n', '    uint256 constant public HARDCAP_TOKENS_ICO = 499e8 * (10 ** DECIMALS);\n', '\n', '    uint256 public startTimePreIco = 0;\n', '    uint256 public endTimePreIco = 0;\n', '\n', '    uint256 public startTimeIco = 0;\n', '    uint256 public endTimeIco = 0;\n', '\n', '    uint256 public exchangeRatePreIco = 0;\n', '\n', '    bool public isTokenRateCalculated = false;\n', '\n', '    uint256 public exchangeRateIco = 0;\n', '\n', '    uint256 public mincap = 0;\n', '    uint256 public maxcap = 0;\n', '\n', '    mapping(address => uint256) private investments;    \n', '\n', '    uint256 public tokensSoldIco = 0;\n', '    uint256 public tokensRemainingIco = HARDCAP_TOKENS_ICO;\n', '    uint256 public tokensSoldTotal = 0;\n', '\n', '    uint256 public weiRaisedPreIco = 0;\n', '    uint256 public weiRaisedIco = 0;\n', '    uint256 public weiRaisedTotal = 0;\n', '\n', '    mapping(address => uint256) private investmentsPreIco;\n', '    address[] private investorsPreIco;\n', '\n', '    address private withdrawalWallet;\n', '\n', '    bool public isTokensPreIcoDistributed = false;\n', '    uint256 public distributionPreIcoCount = 0;\n', '\n', '    CurrentToken public token = new CurrentToken(this);\n', '\n', '    modifier beforeReachingHardCap() {\n', '        require(tokensRemainingIco > 0 && weiRaisedTotal < maxcap);\n', '        _;\n', '    }\n', '\n', '    modifier whenPreIcoSaleHasEnded() {\n', '        require(now > endTimePreIco);\n', '        _;\n', '    }\n', '\n', '    modifier whenIcoSaleHasEnded() {\n', '        require(endTimeIco > 0 && now > endTimeIco);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for CurrentCrowdsale contract.\n', '    * @dev Set the owner who can manage whitelist and token.\n', '    * @param _mincap The mincap value.\n', '    * @param _startTimePreIco The pre-ICO start time.\n', '    * @param _endTimePreIco The pre-ICO end time.\n', '    * @param _foundersWallet The address to which reserved tokens for founders will be transferred.\n', '    * @param _operationalExpensesWallet The address to which reserved tokens for operational expenses will be transferred.\n', '    * @param _withdrawalWallet The address to which raised funds will be withdrawn.\n', '    */\n', '    function CurrentCrowdsale(\n', '        uint256 _mincap,\n', '        uint256 _maxcap,\n', '        uint256 _startTimePreIco,\n', '        uint256 _endTimePreIco,\n', '        address _foundersWallet,\n', '        address _operationalExpensesWallet,\n', '        address _withdrawalWallet\n', '    ) Whitelistable() public\n', '    {\n', '        require(_foundersWallet != address(0) && _operationalExpensesWallet != address(0) && _withdrawalWallet != address(0));\n', '        require(_startTimePreIco >= now && _endTimePreIco > _startTimePreIco);\n', '        require(_mincap > 0 && _maxcap > _mincap);\n', '\n', '        startTimePreIco = _startTimePreIco;\n', '        endTimePreIco = _endTimePreIco;\n', '\n', '        withdrawalWallet = _withdrawalWallet;\n', '\n', '        mincap = _mincap;\n', '        maxcap = _maxcap;\n', '\n', '        whitelist.transferOwnership(msg.sender);\n', '\n', '        token.transferFromIco(_foundersWallet, RESERVED_TOKENS_FOUNDERS);\n', '        token.transferFromIco(_operationalExpensesWallet, RESERVED_TOKENS_OPERATIONAL_EXPENSES);\n', '        token.transferOwnership(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback function can be used to buy tokens.\n', '    */\n', '    function() public payable {\n', '        if (isPreIco()) {\n', '            sellTokensPreIco();\n', '        } else if (isIco()) {\n', '            sellTokensIco();\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the pre-ICO is active at the moment.\n', '    */\n', '    function isPreIco() public constant returns (bool) {\n', '        bool withinPreIco = now >= startTimePreIco && now <= endTimePreIco;\n', '        return withinPreIco;\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the ICO is active at the moment.\n', '    */\n', '    function isIco() public constant returns (bool) {\n', '        bool withinIco = now >= startTimeIco && now <= endTimeIco;\n', '        return withinIco;\n', '    }\n', '\n', '    /**\n', '    * @dev Manual refund if mincap has not been reached.\n', '    * @dev Only applies when the ICO was ended. \n', '    */\n', '    function manualRefund() whenIcoSaleHasEnded public {\n', '        require(weiRaisedTotal < mincap);\n', '\n', '        uint256 weiAmountTotal = investments[msg.sender];\n', '        require(weiAmountTotal > 0);\n', '\n', '        investments[msg.sender] = 0;\n', '\n', '        uint256 weiAmountPreIco = investmentsPreIco[msg.sender];\n', '        uint256 weiAmountIco = weiAmountTotal;\n', '\n', '        if (weiAmountPreIco > 0) {\n', '            investmentsPreIco[msg.sender] = 0;\n', '            weiRaisedPreIco = weiRaisedPreIco.sub(weiAmountPreIco);\n', '            weiAmountIco = weiAmountIco.sub(weiAmountPreIco);\n', '        }\n', '\n', '        if (weiAmountIco > 0) {\n', '            weiRaisedIco = weiRaisedIco.sub(weiAmountIco);\n', '            uint256 tokensIco = weiAmountIco.mul(exchangeRateIco);\n', '            tokensSoldIco = tokensSoldIco.sub(tokensIco);\n', '        }\n', '\n', '        weiRaisedTotal = weiRaisedTotal.sub(weiAmountTotal);\n', '\n', '        uint256 tokensAmount = token.balanceOf(msg.sender);\n', '\n', '        tokensSoldTotal = tokensSoldTotal.sub(tokensAmount);\n', '\n', '        token.burnFromAddress(msg.sender);\n', '\n', '        msg.sender.transfer(weiAmountTotal);\n', '    }\n', '\n', '    /**\n', '    * @dev Sell tokens during pre-ICO.\n', '    * @dev Sell tokens only for whitelisted wallets.\n', '    */\n', '    function sellTokensPreIco() beforeReachingHardCap whenWhitelisted(msg.sender) whenNotPaused public payable {\n', '        require(isPreIco());\n', '        require(msg.value > 0);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 excessiveFunds = 0;\n', '\n', '        uint256 plannedWeiTotal = weiRaisedTotal.add(weiAmount);\n', '\n', '        if (plannedWeiTotal > maxcap) {\n', '            excessiveFunds = plannedWeiTotal.sub(maxcap);\n', '            weiAmount = maxcap.sub(weiRaisedTotal);\n', '        }\n', '\n', '        investments[msg.sender] = investments[msg.sender].add(weiAmount);\n', '\n', '        weiRaisedPreIco = weiRaisedPreIco.add(weiAmount);\n', '        weiRaisedTotal = weiRaisedTotal.add(weiAmount);\n', '\n', '        addInvestmentPreIco(msg.sender, weiAmount);\n', '\n', '        if (excessiveFunds > 0) {\n', '            msg.sender.transfer(excessiveFunds);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sell tokens during ICO.\n', '    * @dev Sell tokens only for whitelisted wallets.\n', '    */\n', '    function sellTokensIco() beforeReachingHardCap whenWhitelisted(msg.sender) whenNotPaused public payable {\n', '        require(isIco());\n', '        require(msg.value > 0);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 excessiveFunds = 0;\n', '\n', '        uint256 plannedWeiTotal = weiRaisedTotal.add(weiAmount);\n', '\n', '        if (plannedWeiTotal > maxcap) {\n', '            excessiveFunds = plannedWeiTotal.sub(maxcap);\n', '            weiAmount = maxcap.sub(weiRaisedTotal);\n', '        }\n', '\n', '        uint256 tokensAmount = weiAmount.mul(exchangeRateIco);\n', '\n', '        if (tokensAmount > tokensRemainingIco) {\n', '            uint256 weiToAccept = tokensRemainingIco.div(exchangeRateIco);\n', '            excessiveFunds = excessiveFunds.add(weiAmount.sub(weiToAccept));\n', '            \n', '            tokensAmount = tokensRemainingIco;\n', '            weiAmount = weiToAccept;\n', '        }\n', '\n', '        investments[msg.sender] = investments[msg.sender].add(weiAmount);\n', '\n', '        tokensSoldIco = tokensSoldIco.add(tokensAmount);\n', '        tokensSoldTotal = tokensSoldTotal.add(tokensAmount);\n', '        tokensRemainingIco = tokensRemainingIco.sub(tokensAmount);\n', '\n', '        weiRaisedIco = weiRaisedIco.add(weiAmount);\n', '        weiRaisedTotal = weiRaisedTotal.add(weiAmount);\n', '\n', '        token.transferFromIco(msg.sender, tokensAmount);\n', '\n', '        if (excessiveFunds > 0) {\n', '            msg.sender.transfer(excessiveFunds);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Send raised funds to the withdrawal wallet.\n', '    */\n', '    function forwardFunds() onlyOwner public {\n', '        require(weiRaisedTotal >= mincap);\n', '        withdrawalWallet.transfer(this.balance);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate token exchange rate for pre-ICO and ICO.\n', '    * @dev Only applies when the pre-ICO was ended.\n', '    * @dev May be called only once.\n', '    */\n', '    function calcTokenRate() whenPreIcoSaleHasEnded onlyOwner public {\n', '        require(!isTokenRateCalculated);\n', '        require(weiRaisedPreIco > 0);\n', '\n', '        exchangeRatePreIco = HARDCAP_TOKENS_PRE_ICO.div(weiRaisedPreIco);\n', '\n', '        exchangeRateIco = exchangeRatePreIco.div(2);\n', '\n', '        isTokenRateCalculated = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Distribute tokens to pre-ICO investors using pagination.\n', '    * @dev Pagination proceeds the set value (paginationCount) of tokens distributions per one function call.\n', '    * @param _paginationCount The value that used for pagination.\n', '    */\n', '    function distributeTokensPreIco(uint256 _paginationCount) onlyOwner public {\n', '        require(isTokenRateCalculated && !isTokensPreIcoDistributed);\n', '        require(_paginationCount > 0);\n', '\n', '        uint256 count = 0;\n', '        for (uint256 i = distributionPreIcoCount; i < getPreIcoInvestorsCount(); i++) {\n', '            if (count == _paginationCount) {\n', '                break;\n', '            }\n', '            uint256 investment = getPreIcoInvestment(getPreIcoInvestor(i));\n', '            uint256 tokensAmount = investment.mul(exchangeRatePreIco);\n', '            \n', '            tokensSoldTotal = tokensSoldTotal.add(tokensAmount);\n', '\n', '            token.transferFromIco(getPreIcoInvestor(i), tokensAmount);\n', '\n', '            count++;\n', '        }\n', '\n', '        distributionPreIcoCount = distributionPreIcoCount.add(count);\n', '\n', '        if (distributionPreIcoCount == getPreIcoInvestorsCount()) {\n', '            isTokensPreIcoDistributed = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Burn unsold tokens from the ICO balance.\n', '    * @dev Only applies when the ICO was ended.\n', '    */\n', '    function burnUnsoldTokens() whenIcoSaleHasEnded onlyOwner public {\n', '        require(tokensRemainingIco > 0);\n', '        token.burnFromIco();\n', '        tokensRemainingIco = 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Count the pre-ICO investors total.\n', '    */\n', '    function getPreIcoInvestorsCount() constant public returns (uint256) {\n', '        return investorsPreIco.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the pre-ICO investor address.\n', '    * @param _index the index of investor in the array. \n', '    */\n', '    function getPreIcoInvestor(uint256 _index) constant public returns (address) {\n', '        return investorsPreIco[_index];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the amount of tokens for pre-ICO investor.\n', '    * @param _investorPreIco the pre-ICO investor address.\n', '    */\n', '    function getPreIcoInvestment(address _investorPreIco) constant public returns (uint256) {\n', '        return investmentsPreIco[_investorPreIco];\n', '    }\n', '\n', '    /**\n', '    * @dev Set start time and end time for ICO.\n', '    * @dev Only applies when tokens distributions to pre-ICO investors were processed.\n', '    * @param _startTimeIco The ICO start time.\n', '    * @param _endTimeIco The ICO end time.\n', '    */\n', '    function setStartTimeIco(uint256 _startTimeIco, uint256 _endTimeIco) whenPreIcoSaleHasEnded beforeReachingHardCap onlyOwner public {\n', '        require(_startTimeIco >= now && _endTimeIco > _startTimeIco);\n', '        require(isTokenRateCalculated);\n', '\n', '        startTimeIco = _startTimeIco;\n', '        endTimeIco = _endTimeIco;\n', '    }\n', '\n', '    /**\n', '    * @dev Add new investment to the pre-ICO investments storage.\n', '    * @param _from The address of a pre-ICO investor.\n', '    * @param _value The investment received from a pre-ICO investor.\n', '    */\n', '    function addInvestmentPreIco(address _from, uint256 _value) internal {\n', '        if (investmentsPreIco[_from] == 0) {\n', '            investorsPreIco.push(_from);\n', '        }\n', '        investmentsPreIco[_from] = investmentsPreIco[_from].add(_value);\n', '    }  \n', '}']
['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/CurrentToken.sol\n', '\n', 'contract CurrentToken is StandardToken, Pausable {\n', '    string constant public name = "CurrentCoin";\n', '    string constant public symbol = "CUR";\n', '    uint8 constant public decimals = 18;\n', '\n', '    uint256 constant public INITIAL_TOTAL_SUPPLY = 1e11 * (uint256(10) ** decimals);\n', '\n', '    address private addressIco;\n', '\n', '    modifier onlyIco() {\n', '        require(msg.sender == addressIco);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Create CurrentToken contract and set pause\n', '    * @param _ico The address of ICO contract.\n', '    */\n', '    function CurrentToken (address _ico) public {\n', '        require(_ico != address(0));\n', '\n', '        addressIco = _ico;\n', '\n', '        totalSupply_ = totalSupply_.add(INITIAL_TOTAL_SUPPLY);\n', '        balances[_ico] = balances[_ico].add(INITIAL_TOTAL_SUPPLY);\n', '        Transfer(address(0), _ico, INITIAL_TOTAL_SUPPLY);\n', '\n', '        pause();\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from ICO address to another address.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFromIco(address _to, uint256 _value) onlyIco public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Burn remaining tokens from the ICO balance.\n', '    */\n', '    function burnFromIco() onlyIco public {\n', '        uint256 remainingTokens = balanceOf(addressIco);\n', '\n', '        balances[addressIco] = balances[addressIco].sub(remainingTokens);\n', '        totalSupply_ = totalSupply_.sub(remainingTokens);\n', '        Transfer(addressIco, address(0), remainingTokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Burn all tokens form balance of token holder during refund process.\n', '    * @param _from The address of token holder whose tokens to be burned.\n', '    */\n', '    function burnFromAddress(address _from) onlyIco public {\n', '        uint256 amount = balances[_from];\n', '\n', '        balances[_from] = 0;\n', '        totalSupply_ = totalSupply_.sub(amount);\n', '        Transfer(_from, address(0), amount);\n', '    }\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist contract\n', ' * @dev Whitelist for wallets.\n', '*/\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) whitelist;\n', '\n', '    uint256 public whitelistLength = 0;\n', '\n', '    /**\n', '    * @dev Add wallet to whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of wallet to add.\n', '    */  \n', '    function addWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != address(0));\n', '        require(!isWhitelisted(_wallet));\n', '        whitelist[_wallet] = true;\n', '        whitelistLength++;\n', '    }\n', '\n', '    /**\n', '    * @dev Remove wallet from whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of whitelisted wallet to remove.\n', '    */  \n', '    function removeWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != address(0));\n', '        require(isWhitelisted(_wallet));\n', '        whitelist[_wallet] = false;\n', '        whitelistLength--;\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified wallet whether it is in the whitelist.\n', '    * @param _wallet The address of wallet to check.\n', '    */ \n', '    function isWhitelisted(address _wallet) constant public returns (bool) {\n', '        return whitelist[_wallet];\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Whitelistable.sol\n', '\n', 'contract Whitelistable {\n', '    Whitelist public whitelist;\n', '\n', '    modifier whenWhitelisted(address _wallet) {\n', '        require(whitelist.isWhitelisted(_wallet));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for Whitelistable contract.\n', '    */\n', '    function Whitelistable() public {\n', '        whitelist = new Whitelist();\n', '    }\n', '}\n', '\n', '// File: contracts/CurrentCrowdsale.sol\n', '\n', 'contract CurrentCrowdsale is Pausable, Whitelistable {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 constant private DECIMALS = 18;\n', '    uint256 constant public RESERVED_TOKENS_FOUNDERS = 40e9 * (10 ** DECIMALS);\n', '    uint256 constant public RESERVED_TOKENS_OPERATIONAL_EXPENSES = 10e9 * (10 ** DECIMALS);\n', '    uint256 constant public HARDCAP_TOKENS_PRE_ICO = 100e6 * (10 ** DECIMALS);\n', '    uint256 constant public HARDCAP_TOKENS_ICO = 499e8 * (10 ** DECIMALS);\n', '\n', '    uint256 public startTimePreIco = 0;\n', '    uint256 public endTimePreIco = 0;\n', '\n', '    uint256 public startTimeIco = 0;\n', '    uint256 public endTimeIco = 0;\n', '\n', '    uint256 public exchangeRatePreIco = 0;\n', '\n', '    bool public isTokenRateCalculated = false;\n', '\n', '    uint256 public exchangeRateIco = 0;\n', '\n', '    uint256 public mincap = 0;\n', '    uint256 public maxcap = 0;\n', '\n', '    mapping(address => uint256) private investments;    \n', '\n', '    uint256 public tokensSoldIco = 0;\n', '    uint256 public tokensRemainingIco = HARDCAP_TOKENS_ICO;\n', '    uint256 public tokensSoldTotal = 0;\n', '\n', '    uint256 public weiRaisedPreIco = 0;\n', '    uint256 public weiRaisedIco = 0;\n', '    uint256 public weiRaisedTotal = 0;\n', '\n', '    mapping(address => uint256) private investmentsPreIco;\n', '    address[] private investorsPreIco;\n', '\n', '    address private withdrawalWallet;\n', '\n', '    bool public isTokensPreIcoDistributed = false;\n', '    uint256 public distributionPreIcoCount = 0;\n', '\n', '    CurrentToken public token = new CurrentToken(this);\n', '\n', '    modifier beforeReachingHardCap() {\n', '        require(tokensRemainingIco > 0 && weiRaisedTotal < maxcap);\n', '        _;\n', '    }\n', '\n', '    modifier whenPreIcoSaleHasEnded() {\n', '        require(now > endTimePreIco);\n', '        _;\n', '    }\n', '\n', '    modifier whenIcoSaleHasEnded() {\n', '        require(endTimeIco > 0 && now > endTimeIco);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for CurrentCrowdsale contract.\n', '    * @dev Set the owner who can manage whitelist and token.\n', '    * @param _mincap The mincap value.\n', '    * @param _startTimePreIco The pre-ICO start time.\n', '    * @param _endTimePreIco The pre-ICO end time.\n', '    * @param _foundersWallet The address to which reserved tokens for founders will be transferred.\n', '    * @param _operationalExpensesWallet The address to which reserved tokens for operational expenses will be transferred.\n', '    * @param _withdrawalWallet The address to which raised funds will be withdrawn.\n', '    */\n', '    function CurrentCrowdsale(\n', '        uint256 _mincap,\n', '        uint256 _maxcap,\n', '        uint256 _startTimePreIco,\n', '        uint256 _endTimePreIco,\n', '        address _foundersWallet,\n', '        address _operationalExpensesWallet,\n', '        address _withdrawalWallet\n', '    ) Whitelistable() public\n', '    {\n', '        require(_foundersWallet != address(0) && _operationalExpensesWallet != address(0) && _withdrawalWallet != address(0));\n', '        require(_startTimePreIco >= now && _endTimePreIco > _startTimePreIco);\n', '        require(_mincap > 0 && _maxcap > _mincap);\n', '\n', '        startTimePreIco = _startTimePreIco;\n', '        endTimePreIco = _endTimePreIco;\n', '\n', '        withdrawalWallet = _withdrawalWallet;\n', '\n', '        mincap = _mincap;\n', '        maxcap = _maxcap;\n', '\n', '        whitelist.transferOwnership(msg.sender);\n', '\n', '        token.transferFromIco(_foundersWallet, RESERVED_TOKENS_FOUNDERS);\n', '        token.transferFromIco(_operationalExpensesWallet, RESERVED_TOKENS_OPERATIONAL_EXPENSES);\n', '        token.transferOwnership(msg.sender);\n', '    }\n', '\n', '    /**\n', '    * @dev Fallback function can be used to buy tokens.\n', '    */\n', '    function() public payable {\n', '        if (isPreIco()) {\n', '            sellTokensPreIco();\n', '        } else if (isIco()) {\n', '            sellTokensIco();\n', '        } else {\n', '            revert();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the pre-ICO is active at the moment.\n', '    */\n', '    function isPreIco() public constant returns (bool) {\n', '        bool withinPreIco = now >= startTimePreIco && now <= endTimePreIco;\n', '        return withinPreIco;\n', '    }\n', '\n', '    /**\n', '    * @dev Check whether the ICO is active at the moment.\n', '    */\n', '    function isIco() public constant returns (bool) {\n', '        bool withinIco = now >= startTimeIco && now <= endTimeIco;\n', '        return withinIco;\n', '    }\n', '\n', '    /**\n', '    * @dev Manual refund if mincap has not been reached.\n', '    * @dev Only applies when the ICO was ended. \n', '    */\n', '    function manualRefund() whenIcoSaleHasEnded public {\n', '        require(weiRaisedTotal < mincap);\n', '\n', '        uint256 weiAmountTotal = investments[msg.sender];\n', '        require(weiAmountTotal > 0);\n', '\n', '        investments[msg.sender] = 0;\n', '\n', '        uint256 weiAmountPreIco = investmentsPreIco[msg.sender];\n', '        uint256 weiAmountIco = weiAmountTotal;\n', '\n', '        if (weiAmountPreIco > 0) {\n', '            investmentsPreIco[msg.sender] = 0;\n', '            weiRaisedPreIco = weiRaisedPreIco.sub(weiAmountPreIco);\n', '            weiAmountIco = weiAmountIco.sub(weiAmountPreIco);\n', '        }\n', '\n', '        if (weiAmountIco > 0) {\n', '            weiRaisedIco = weiRaisedIco.sub(weiAmountIco);\n', '            uint256 tokensIco = weiAmountIco.mul(exchangeRateIco);\n', '            tokensSoldIco = tokensSoldIco.sub(tokensIco);\n', '        }\n', '\n', '        weiRaisedTotal = weiRaisedTotal.sub(weiAmountTotal);\n', '\n', '        uint256 tokensAmount = token.balanceOf(msg.sender);\n', '\n', '        tokensSoldTotal = tokensSoldTotal.sub(tokensAmount);\n', '\n', '        token.burnFromAddress(msg.sender);\n', '\n', '        msg.sender.transfer(weiAmountTotal);\n', '    }\n', '\n', '    /**\n', '    * @dev Sell tokens during pre-ICO.\n', '    * @dev Sell tokens only for whitelisted wallets.\n', '    */\n', '    function sellTokensPreIco() beforeReachingHardCap whenWhitelisted(msg.sender) whenNotPaused public payable {\n', '        require(isPreIco());\n', '        require(msg.value > 0);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 excessiveFunds = 0;\n', '\n', '        uint256 plannedWeiTotal = weiRaisedTotal.add(weiAmount);\n', '\n', '        if (plannedWeiTotal > maxcap) {\n', '            excessiveFunds = plannedWeiTotal.sub(maxcap);\n', '            weiAmount = maxcap.sub(weiRaisedTotal);\n', '        }\n', '\n', '        investments[msg.sender] = investments[msg.sender].add(weiAmount);\n', '\n', '        weiRaisedPreIco = weiRaisedPreIco.add(weiAmount);\n', '        weiRaisedTotal = weiRaisedTotal.add(weiAmount);\n', '\n', '        addInvestmentPreIco(msg.sender, weiAmount);\n', '\n', '        if (excessiveFunds > 0) {\n', '            msg.sender.transfer(excessiveFunds);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Sell tokens during ICO.\n', '    * @dev Sell tokens only for whitelisted wallets.\n', '    */\n', '    function sellTokensIco() beforeReachingHardCap whenWhitelisted(msg.sender) whenNotPaused public payable {\n', '        require(isIco());\n', '        require(msg.value > 0);\n', '\n', '        uint256 weiAmount = msg.value;\n', '        uint256 excessiveFunds = 0;\n', '\n', '        uint256 plannedWeiTotal = weiRaisedTotal.add(weiAmount);\n', '\n', '        if (plannedWeiTotal > maxcap) {\n', '            excessiveFunds = plannedWeiTotal.sub(maxcap);\n', '            weiAmount = maxcap.sub(weiRaisedTotal);\n', '        }\n', '\n', '        uint256 tokensAmount = weiAmount.mul(exchangeRateIco);\n', '\n', '        if (tokensAmount > tokensRemainingIco) {\n', '            uint256 weiToAccept = tokensRemainingIco.div(exchangeRateIco);\n', '            excessiveFunds = excessiveFunds.add(weiAmount.sub(weiToAccept));\n', '            \n', '            tokensAmount = tokensRemainingIco;\n', '            weiAmount = weiToAccept;\n', '        }\n', '\n', '        investments[msg.sender] = investments[msg.sender].add(weiAmount);\n', '\n', '        tokensSoldIco = tokensSoldIco.add(tokensAmount);\n', '        tokensSoldTotal = tokensSoldTotal.add(tokensAmount);\n', '        tokensRemainingIco = tokensRemainingIco.sub(tokensAmount);\n', '\n', '        weiRaisedIco = weiRaisedIco.add(weiAmount);\n', '        weiRaisedTotal = weiRaisedTotal.add(weiAmount);\n', '\n', '        token.transferFromIco(msg.sender, tokensAmount);\n', '\n', '        if (excessiveFunds > 0) {\n', '            msg.sender.transfer(excessiveFunds);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Send raised funds to the withdrawal wallet.\n', '    */\n', '    function forwardFunds() onlyOwner public {\n', '        require(weiRaisedTotal >= mincap);\n', '        withdrawalWallet.transfer(this.balance);\n', '    }\n', '\n', '    /**\n', '    * @dev Calculate token exchange rate for pre-ICO and ICO.\n', '    * @dev Only applies when the pre-ICO was ended.\n', '    * @dev May be called only once.\n', '    */\n', '    function calcTokenRate() whenPreIcoSaleHasEnded onlyOwner public {\n', '        require(!isTokenRateCalculated);\n', '        require(weiRaisedPreIco > 0);\n', '\n', '        exchangeRatePreIco = HARDCAP_TOKENS_PRE_ICO.div(weiRaisedPreIco);\n', '\n', '        exchangeRateIco = exchangeRatePreIco.div(2);\n', '\n', '        isTokenRateCalculated = true;\n', '    }\n', '\n', '    /**\n', '    * @dev Distribute tokens to pre-ICO investors using pagination.\n', '    * @dev Pagination proceeds the set value (paginationCount) of tokens distributions per one function call.\n', '    * @param _paginationCount The value that used for pagination.\n', '    */\n', '    function distributeTokensPreIco(uint256 _paginationCount) onlyOwner public {\n', '        require(isTokenRateCalculated && !isTokensPreIcoDistributed);\n', '        require(_paginationCount > 0);\n', '\n', '        uint256 count = 0;\n', '        for (uint256 i = distributionPreIcoCount; i < getPreIcoInvestorsCount(); i++) {\n', '            if (count == _paginationCount) {\n', '                break;\n', '            }\n', '            uint256 investment = getPreIcoInvestment(getPreIcoInvestor(i));\n', '            uint256 tokensAmount = investment.mul(exchangeRatePreIco);\n', '            \n', '            tokensSoldTotal = tokensSoldTotal.add(tokensAmount);\n', '\n', '            token.transferFromIco(getPreIcoInvestor(i), tokensAmount);\n', '\n', '            count++;\n', '        }\n', '\n', '        distributionPreIcoCount = distributionPreIcoCount.add(count);\n', '\n', '        if (distributionPreIcoCount == getPreIcoInvestorsCount()) {\n', '            isTokensPreIcoDistributed = true;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Burn unsold tokens from the ICO balance.\n', '    * @dev Only applies when the ICO was ended.\n', '    */\n', '    function burnUnsoldTokens() whenIcoSaleHasEnded onlyOwner public {\n', '        require(tokensRemainingIco > 0);\n', '        token.burnFromIco();\n', '        tokensRemainingIco = 0;\n', '    }\n', '\n', '    /**\n', '    * @dev Count the pre-ICO investors total.\n', '    */\n', '    function getPreIcoInvestorsCount() constant public returns (uint256) {\n', '        return investorsPreIco.length;\n', '    }\n', '\n', '    /**\n', '    * @dev Get the pre-ICO investor address.\n', '    * @param _index the index of investor in the array. \n', '    */\n', '    function getPreIcoInvestor(uint256 _index) constant public returns (address) {\n', '        return investorsPreIco[_index];\n', '    }\n', '\n', '    /**\n', '    * @dev Gets the amount of tokens for pre-ICO investor.\n', '    * @param _investorPreIco the pre-ICO investor address.\n', '    */\n', '    function getPreIcoInvestment(address _investorPreIco) constant public returns (uint256) {\n', '        return investmentsPreIco[_investorPreIco];\n', '    }\n', '\n', '    /**\n', '    * @dev Set start time and end time for ICO.\n', '    * @dev Only applies when tokens distributions to pre-ICO investors were processed.\n', '    * @param _startTimeIco The ICO start time.\n', '    * @param _endTimeIco The ICO end time.\n', '    */\n', '    function setStartTimeIco(uint256 _startTimeIco, uint256 _endTimeIco) whenPreIcoSaleHasEnded beforeReachingHardCap onlyOwner public {\n', '        require(_startTimeIco >= now && _endTimeIco > _startTimeIco);\n', '        require(isTokenRateCalculated);\n', '\n', '        startTimeIco = _startTimeIco;\n', '        endTimeIco = _endTimeIco;\n', '    }\n', '\n', '    /**\n', '    * @dev Add new investment to the pre-ICO investments storage.\n', '    * @param _from The address of a pre-ICO investor.\n', '    * @param _value The investment received from a pre-ICO investor.\n', '    */\n', '    function addInvestmentPreIco(address _from, uint256 _value) internal {\n', '        if (investmentsPreIco[_from] == 0) {\n', '            investorsPreIco.push(_from);\n', '        }\n', '        investmentsPreIco[_from] = investmentsPreIco[_from].add(_value);\n', '    }  \n', '}']
