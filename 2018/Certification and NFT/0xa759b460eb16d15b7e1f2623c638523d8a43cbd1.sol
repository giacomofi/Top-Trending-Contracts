['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    // Gas optimization: this is cheaper than asserting &#39;a&#39; not being zero, but the\n', '    // benefit is lost if &#39;b&#39; is also tested.\n', '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', '    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn&#39;t hold\n', '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' * See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage _role, address _addr)\n', '    internal\n', '  {\n', '    _role.bearer[_addr] = true;\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address&#39; access to this role\n', '   */\n', '  function remove(Role storage _role, address _addr)\n', '    internal\n', '  {\n', '    _role.bearer[_addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage _role, address _addr)\n', '    internal\n', '    view\n', '  {\n', '    require(has(_role, _addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage _role, address _addr)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _role.bearer[_addr];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * Supports unlimited numbers of roles and addresses.\n', ' * See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' * for you to write your own implementation of this interface using Enums or similar.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address indexed operator, string role);\n', '  event RoleRemoved(address indexed operator, string role);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address _operator, string _role)\n', '    public\n', '    view\n', '  {\n', '    roles[_role].check(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address _operator, string _role)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return roles[_role].has(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function addRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].add(_operator);\n', '    emit RoleAdded(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function removeRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].remove(_operator);\n', '    emit RoleRemoved(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string _role)\n', '  {\n', '    checkRole(msg.sender, _role);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param _roles the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] _roles) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < _roles.length; i++) {\n', '  //         if (hasRole(msg.sender, _roles[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', 'contract Crowdsale {\n', ' using SafeMath for uint256;\n', ' using SafeERC20 for ERC20;\n', '\n', ' // The token being sold\n', ' ERC20 public token;\n', '\n', ' // Address where funds are collected\n', ' address public wallet;\n', '\n', ' // How many token units a buyer gets per wei.\n', ' // The rate is the conversion between wei and the smallest and indivisible token unit.\n', ' // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', ' // 1 wei will give you 1 unit, or 0.001 TOK.\n', ' uint256 public rate;\n', '\n', ' // Amount of wei raised\n', ' uint256 public weiRaised;\n', '\n', ' /**\n', '  * Event for token purchase logging\n', '  * @param purchaser who paid for the tokens\n', '  * @param beneficiary who got the tokens\n', '  * @param value weis paid for purchase\n', '  * @param amount amount of tokens purchased\n', '  */\n', ' event TokenPurchase(\n', '   address indexed purchaser,\n', '   address indexed beneficiary,\n', '   uint256 value,\n', '   uint256 amount\n', ' );\n', '\n', ' /**\n', '  * @param _rate Number of token units a buyer gets per wei\n', '  * @param _wallet Address where collected funds will be forwarded to\n', '  * @param _token Address of the token being sold\n', '  */\n', ' constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '   require(_rate > 0);\n', '   require(_wallet != address(0));\n', '   require(_token != address(0));\n', '\n', '   rate = _rate;\n', '   wallet = _wallet;\n', '   token = _token;\n', ' }\n', '\n', ' // -----------------------------------------\n', ' // Crowdsale external interface\n', ' // -----------------------------------------\n', '\n', ' /**\n', '  * @dev fallback function ***DO NOT OVERRIDE***\n', '  */\n', ' function () external payable {\n', '   buyTokens(msg.sender);\n', ' }\n', '\n', ' /**\n', '  * @dev low level token purchase ***DO NOT OVERRIDE***\n', '  * @param _beneficiary Address performing the token purchase\n', '  */\n', ' function buyTokens(address _beneficiary) public payable {\n', '\n', '   uint256 weiAmount = msg.value;\n', '   _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '   // calculate token amount to be created\n', '   uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '   // update state\n', '   weiRaised = weiRaised.add(weiAmount);\n', '\n', '   _processPurchase(_beneficiary, tokens);\n', '   emit TokenPurchase(\n', '     msg.sender,\n', '     _beneficiary,\n', '     weiAmount,\n', '     tokens\n', '   );\n', '\n', '   _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '   _forwardFunds();\n', '   _postValidatePurchase(_beneficiary, weiAmount);\n', ' }\n', '\n', ' // -----------------------------------------\n', ' // Internal interface (extensible)\n', ' // -----------------------------------------\n', '\n', ' /**\n', '  * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', '  * Example from CappedCrowdsale.sol&#39;s _preValidatePurchase method:\n', '  *   super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  *   require(weiRaised.add(_weiAmount) <= cap);\n', '  * @param _beneficiary Address performing the token purchase\n', '  * @param _weiAmount Value in wei involved in the purchase\n', '  */\n', ' function _preValidatePurchase(\n', '   address _beneficiary,\n', '   uint256 _weiAmount\n', ' )\n', '   internal\n', ' {\n', '   require(_beneficiary != address(0));\n', '   require(_weiAmount != 0);\n', ' }\n', '\n', ' /**\n', '  * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '  * @param _beneficiary Address performing the token purchase\n', '  * @param _weiAmount Value in wei involved in the purchase\n', '  */\n', ' function _postValidatePurchase(\n', '   address _beneficiary,\n', '   uint256 _weiAmount\n', ' )\n', '   internal\n', ' {\n', '   // optional override\n', ' }\n', '\n', ' /**\n', '  * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '  * @param _beneficiary Address performing the token purchase\n', '  * @param _tokenAmount Number of tokens to be emitted\n', '  */\n', ' function _deliverTokens(\n', '   address _beneficiary,\n', '   uint256 _tokenAmount\n', ' )\n', '   internal\n', ' {\n', '   token.safeTransfer(_beneficiary, _tokenAmount);\n', ' }\n', '\n', ' /**\n', '  * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '  * @param _beneficiary Address receiving the tokens\n', '  * @param _tokenAmount Number of tokens to be purchased\n', '  */\n', ' function _processPurchase(\n', '   address _beneficiary,\n', '   uint256 _tokenAmount\n', ' )\n', '   internal\n', ' {\n', '   _deliverTokens(_beneficiary, _tokenAmount);\n', ' }\n', '\n', ' /**\n', '  * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '  * @param _beneficiary Address receiving the tokens\n', '  * @param _weiAmount Value in wei involved in the purchase\n', '  */\n', ' function _updatePurchasingState(\n', '   address _beneficiary,\n', '   uint256 _weiAmount\n', ' )\n', '   internal\n', ' {\n', '   // optional override\n', ' }\n', '\n', ' /**\n', '  * @dev Override to extend the way in which ether is converted to tokens.\n', '  * @param _weiAmount Value in wei to be converted into tokens\n', '  * @return Number of tokens that can be purchased with the specified _weiAmount\n', '  */\n', ' function _getTokenAmount(uint256 _weiAmount)\n', '   internal view returns (uint256)\n', ' {\n', '   return _weiAmount.mul(rate);\n', ' }\n', '\n', ' /**\n', '  * @dev Determines how ETH is stored/forwarded on purchases.\n', '  */\n', ' function _forwardFunds() internal {\n', '   wallet.transfer(msg.value);\n', ' }\n', '}\n', '\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract Whitelist is Ownable, RBAC {\n', '  string public constant ROLE_WHITELISTED = "whitelist";\n', '\n', '  /**\n', '   * @dev Throws if operator is not whitelisted.\n', '   * @param _operator address\n', '   */\n', '  modifier onlyIfWhitelisted(address _operator) {\n', '    checkRole(_operator, ROLE_WHITELISTED);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address _operator)\n', '    public\n', '    onlyOwner\n', '  {\n', '    addRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function whitelist(address _operator)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return hasRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] _operators)\n', '    public\n', '    onlyOwner\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was removed from the whitelist,\n', '   * false if the address wasn&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressFromWhitelist(address _operator)\n', '    public\n', '    onlyOwner\n', '  {\n', '    removeRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', '   * false if all addresses weren&#39;t in the whitelist in the first place\n', '   */\n', '  function removeAddressesFromWhitelist(address[] _operators)\n', '    public\n', '    onlyOwner\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract WhitelistedCrowdsale is Whitelist, Crowdsale {\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyIfWhitelisted(_beneficiary)\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract CbntCrowdsale is TimedCrowdsale, WhitelistedCrowdsale {\n', ' using SafeMath for uint256;\n', '\n', '\n', ' struct FutureTransaction{\n', '   address beneficiary;\n', '   uint256 num;\n', '   uint32  times;\n', '   uint256 lastTime;\n', ' }\n', ' FutureTransaction[] public futureTrans;\n', ' uint256 public oweCbnt;\n', '\n', ' uint256[] public rateSteps;\n', ' uint256[] public rateStepsValue;\n', ' uint32[] public regularTransTime;\n', ' uint32 public transTimes;\n', '\n', ' uint256 public minInvest;\n', '\n', '/**\n', '  * @param _openingTime Crowdsale opening time\n', '  * @param _closingTime Crowdsale closing time\n', '  * @param _rate Number of token units a buyer gets per wei\n', '  * @param _wallet Address where collected funds will be forwarded to\n', '  * @param _token Address of the token being sold\n', '  */\n', ' constructor(uint256 _openingTime, uint256 _closingTime, uint256 _rate, address _wallet, ERC20 _token) TimedCrowdsale(_openingTime,_closingTime) Crowdsale(_rate,_wallet, _token) public {\n', '  // Crowdsale(uint256(1),_wallet, _token);\n', '   //TimedCrowdsale(_openingTime,_closingTime);\n', ' }\n', '\n', ' /** external functions **/\n', ' function triggerTransaction(uint256 beginIdx, uint256 endIdx) public returns (bool){\n', '   uint32 regularTime = findRegularTime();\n', '   require(regularTime > 0 && endIdx < futureTrans.length);\n', '\n', '   bool bRemove = false;\n', '   uint256 i = 0;\n', '   for(i = beginIdx; i<=endIdx && i<futureTrans.length; ){\n', '     bRemove = false;\n', '     if(futureTrans[i].lastTime < regularTime){  // need to set the regularTime again when it comes late than the last regularTime\n', '        uint256 transNum = futureTrans[i].num;\n', '        address beneficiary = futureTrans[i].beneficiary;\n', '        //update data\n', '\n', '        futureTrans[i].lastTime = now;\n', '        futureTrans[i].times = futureTrans[i].times - 1;\n', '        require(futureTrans[i].times <= transTimes);\n', '\n', '        // remove item if it is the last time transaction\n', '        if(futureTrans[i].times ==0 ){\n', '           bRemove = true;\n', '           futureTrans[i].beneficiary = futureTrans[futureTrans.length -1].beneficiary;\n', '           futureTrans[i].num = futureTrans[futureTrans.length -1].num;\n', '           futureTrans[i].lastTime = futureTrans[futureTrans.length -1].lastTime;\n', '           futureTrans[i].times = futureTrans[futureTrans.length -1].times;\n', '           futureTrans.length = futureTrans.length.sub(1);\n', '        }\n', '           // transfer token\n', '        oweCbnt = oweCbnt.sub(transNum);\n', '        _deliverTokens(beneficiary, transNum);\n', '     }\n', '\n', '     if(!bRemove){\n', '       i++;\n', '     }\n', '   }\n', '\n', '   return true;\n', '\n', ' }\n', ' function transferBonus(address _beneficiary, uint256 _tokenAmount) public onlyOwner returns(bool){\n', '   _deliverTokens(_beneficiary, _tokenAmount);\n', '   return true;\n', ' }\n', '\n', ' // need to set this param before start business\n', ' function setMinInvest(uint256 _minInvest) public onlyOwner returns (bool){\n', '   minInvest = _minInvest;\n', '   return true;\n', ' }\n', '\n', ' // need to set this param before start business\n', ' function setTransTimes(uint32 _times) public onlyOwner returns (bool){\n', '   transTimes = _times;\n', '   return true;\n', ' }\n', '\n', ' function setRegularTransTime(uint32[] _times) public onlyOwner returns (bool){\n', '   for (uint256 i = 0; i + 1 < _times.length; i++) {\n', '       require(_times[i] < _times[i+1]);\n', '   }\n', '\n', '   regularTransTime = _times;\n', '   return true;\n', ' }\n', '\n', ' // need to set this param before start business\n', ' function setRateSteps(uint256[] _steps, uint256[] _stepsValue) public onlyOwner returns (bool){\n', '   require(_steps.length == _stepsValue.length);\n', '   for (uint256 i = 0; i + 1 < _steps.length; i++) {\n', '       require(_steps[i] > _steps[i+1]);\n', '   }\n', '\n', '   rateSteps = _steps;\n', '   rateStepsValue = _stepsValue;\n', '   return true;\n', ' }\n', '\n', ' // need to check these params before start business\n', ' function normalCheck() public view returns (bool){\n', '   return (transTimes > 0 && regularTransTime.length > 0 && minInvest >0 && rateSteps.length >0);\n', ' }\n', '\n', ' function getFutureTransLength() public view returns(uint256) {\n', '     return futureTrans.length;\n', ' }\n', ' function getFutureTransByIdx(uint256 _idx) public view returns(address,uint256, uint32, uint256) {\n', '     return (futureTrans[_idx].beneficiary, futureTrans[_idx].num, futureTrans[_idx].times, futureTrans[_idx].lastTime);\n', ' }\n', ' function getFutureTransIdxByAddress(address _beneficiary) public view returns(uint256[]) {\n', '     uint256 i = 0;\n', '     uint256 num = 0;\n', '     for(i=0; i<futureTrans.length; i++){\n', '       if(futureTrans[i].beneficiary == _beneficiary){\n', '           num++;\n', '       }\n', '     }\n', '     uint256[] memory transList = new uint256[](num);\n', '\n', '     uint256 idx = 0;\n', '     for(i=0; i<futureTrans.length; i++){\n', '       if(futureTrans[i].beneficiary == _beneficiary){\n', '         transList[idx] = i;\n', '         idx++;\n', '       }\n', '     }\n', '     return transList;\n', ' }\n', '\n', ' /** internal functions **/\n', ' /**\n', '  * @dev Returns the rate of tokens per wei.\n', '  * Note that, as price _increases_ with invest number, the rate _increases_.\n', '  * @param _weiAmount The value in wei to be converted into tokens\n', '  * @return The number of tokens a buyer gets per wei\n', '  */\n', ' function getCurrentRate(uint256 _weiAmount) public view returns (uint256) {\n', '   for (uint256 i = 0; i < rateSteps.length; i++) {\n', '       if (_weiAmount >= rateSteps[i]) {\n', '           return rateStepsValue[i];\n', '       }\n', '   }\n', '   return 0;\n', ' }\n', '\n', ' /**\n', '  * @dev Overrides parent method taking into account variable rate.\n', '  * @param _weiAmount The value in wei to be converted into tokens\n', '  * @return The number of tokens _weiAmount wei will send at present time\n', '  */\n', ' function _getTokenAmount(uint256 _weiAmount)\n', '   internal view returns (uint256)\n', ' {\n', '   uint256 currentRate = getCurrentRate(_weiAmount);\n', '   return currentRate.mul(_weiAmount).div(transTimes);\n', ' }\n', '\n', ' /**\n', '  * @dev Extend parent behavior requiring to be within contributing period\n', '  * @param _beneficiary Token purchaser\n', '  * @param _weiAmount Amount of wei contributed\n', '  */\n', ' function _preValidatePurchase(\n', '   address _beneficiary,\n', '   uint256 _weiAmount\n', ' )\n', '   internal\n', ' {\n', '   require(msg.value >= minInvest);\n', '   super._preValidatePurchase(_beneficiary, _weiAmount);\n', ' }\n', '\n', ' /**\n', '  * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '  * @param _beneficiary Address receiving the tokens\n', '  * @param _tokenAmount Number of tokens to be purchased\n', '  */\n', ' function _processPurchase(\n', '   address _beneficiary,\n', '   uint256 _tokenAmount\n', ' )\n', '   internal\n', ' {\n', '   // update the future transactions for future using.\n', '   FutureTransaction memory tran = FutureTransaction(_beneficiary, _tokenAmount, transTimes-1, now); // the trtanstimes always lagger than 0\n', '   futureTrans.push(tran);\n', '\n', '   //update owe cbnt\n', '   oweCbnt = oweCbnt.add(_tokenAmount.mul(tran.times));\n', '   super._processPurchase(_beneficiary, _tokenAmount);\n', ' }\n', '\n', ' function findRegularTime() internal view returns (uint32) {\n', '   if(now < regularTransTime[0]){\n', '     return 0;\n', '   }\n', '\n', '   uint256 i = 0;\n', '   while(i<regularTransTime.length && now >= regularTransTime[i]){\n', '     i++;\n', '   }\n', '\n', '   return regularTransTime[i -1];\n', '\n', ' }\n', '\n', '}']
['pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (_a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = _a * _b;\n', '    assert(c / _a == _b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = _a / _b;\n', "    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n", '    return _a / _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n', '    assert(_b <= _a);\n', '    return _a - _b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n', '    c = _a + _b;\n', '    assert(c >= _a);\n', '    return c;\n', '  }\n', '}\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  function safeTransfer(\n', '    ERC20Basic _token,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transfer(_to, _value));\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    ERC20 _token,\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.transferFrom(_from, _to, _value));\n', '  }\n', '\n', '  function safeApprove(\n', '    ERC20 _token,\n', '    address _spender,\n', '    uint256 _value\n', '  )\n', '    internal\n', '  {\n', '    require(_token.approve(_spender, _value));\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * See https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address _who) public view returns (uint256);\n', '  function transfer(address _to, uint256 _value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address _owner, address _spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address _from, address _to, uint256 _value)\n', '    public returns (bool);\n', '\n', '  function approve(address _spender, uint256 _value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' * See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage _role, address _addr)\n', '    internal\n', '  {\n', '    _role.bearer[_addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage _role, address _addr)\n', '    internal\n', '  {\n', '    _role.bearer[_addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage _role, address _addr)\n', '    internal\n', '    view\n', '  {\n', '    require(has(_role, _addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage _role, address _addr)\n', '    internal\n', '    view\n', '    returns (bool)\n', '  {\n', '    return _role.bearer[_addr];\n', '  }\n', '}\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * Supports unlimited numbers of roles and addresses.\n', ' * See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' * for you to write your own implementation of this interface using Enums or similar.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address indexed operator, string role);\n', '  event RoleRemoved(address indexed operator, string role);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address _operator, string _role)\n', '    public\n', '    view\n', '  {\n', '    roles[_role].check(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address _operator, string _role)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return roles[_role].has(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function addRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].add(_operator);\n', '    emit RoleAdded(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param _operator address\n', '   * @param _role the name of the role\n', '   */\n', '  function removeRole(address _operator, string _role)\n', '    internal\n', '  {\n', '    roles[_role].remove(_operator);\n', '    emit RoleRemoved(_operator, _role);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param _role the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string _role)\n', '  {\n', '    checkRole(msg.sender, _role);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param _roles the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] _roles) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < _roles.length; i++) {\n', '  //         if (hasRole(msg.sender, _roles[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', 'contract Crowdsale {\n', ' using SafeMath for uint256;\n', ' using SafeERC20 for ERC20;\n', '\n', ' // The token being sold\n', ' ERC20 public token;\n', '\n', ' // Address where funds are collected\n', ' address public wallet;\n', '\n', ' // How many token units a buyer gets per wei.\n', ' // The rate is the conversion between wei and the smallest and indivisible token unit.\n', ' // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK\n', ' // 1 wei will give you 1 unit, or 0.001 TOK.\n', ' uint256 public rate;\n', '\n', ' // Amount of wei raised\n', ' uint256 public weiRaised;\n', '\n', ' /**\n', '  * Event for token purchase logging\n', '  * @param purchaser who paid for the tokens\n', '  * @param beneficiary who got the tokens\n', '  * @param value weis paid for purchase\n', '  * @param amount amount of tokens purchased\n', '  */\n', ' event TokenPurchase(\n', '   address indexed purchaser,\n', '   address indexed beneficiary,\n', '   uint256 value,\n', '   uint256 amount\n', ' );\n', '\n', ' /**\n', '  * @param _rate Number of token units a buyer gets per wei\n', '  * @param _wallet Address where collected funds will be forwarded to\n', '  * @param _token Address of the token being sold\n', '  */\n', ' constructor(uint256 _rate, address _wallet, ERC20 _token) public {\n', '   require(_rate > 0);\n', '   require(_wallet != address(0));\n', '   require(_token != address(0));\n', '\n', '   rate = _rate;\n', '   wallet = _wallet;\n', '   token = _token;\n', ' }\n', '\n', ' // -----------------------------------------\n', ' // Crowdsale external interface\n', ' // -----------------------------------------\n', '\n', ' /**\n', '  * @dev fallback function ***DO NOT OVERRIDE***\n', '  */\n', ' function () external payable {\n', '   buyTokens(msg.sender);\n', ' }\n', '\n', ' /**\n', '  * @dev low level token purchase ***DO NOT OVERRIDE***\n', '  * @param _beneficiary Address performing the token purchase\n', '  */\n', ' function buyTokens(address _beneficiary) public payable {\n', '\n', '   uint256 weiAmount = msg.value;\n', '   _preValidatePurchase(_beneficiary, weiAmount);\n', '\n', '   // calculate token amount to be created\n', '   uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '   // update state\n', '   weiRaised = weiRaised.add(weiAmount);\n', '\n', '   _processPurchase(_beneficiary, tokens);\n', '   emit TokenPurchase(\n', '     msg.sender,\n', '     _beneficiary,\n', '     weiAmount,\n', '     tokens\n', '   );\n', '\n', '   _updatePurchasingState(_beneficiary, weiAmount);\n', '\n', '   _forwardFunds();\n', '   _postValidatePurchase(_beneficiary, weiAmount);\n', ' }\n', '\n', ' // -----------------------------------------\n', ' // Internal interface (extensible)\n', ' // -----------------------------------------\n', '\n', ' /**\n', '  * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "  * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n", '  *   super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  *   require(weiRaised.add(_weiAmount) <= cap);\n', '  * @param _beneficiary Address performing the token purchase\n', '  * @param _weiAmount Value in wei involved in the purchase\n', '  */\n', ' function _preValidatePurchase(\n', '   address _beneficiary,\n', '   uint256 _weiAmount\n', ' )\n', '   internal\n', ' {\n', '   require(_beneficiary != address(0));\n', '   require(_weiAmount != 0);\n', ' }\n', '\n', ' /**\n', '  * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n', '  * @param _beneficiary Address performing the token purchase\n', '  * @param _weiAmount Value in wei involved in the purchase\n', '  */\n', ' function _postValidatePurchase(\n', '   address _beneficiary,\n', '   uint256 _weiAmount\n', ' )\n', '   internal\n', ' {\n', '   // optional override\n', ' }\n', '\n', ' /**\n', '  * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n', '  * @param _beneficiary Address performing the token purchase\n', '  * @param _tokenAmount Number of tokens to be emitted\n', '  */\n', ' function _deliverTokens(\n', '   address _beneficiary,\n', '   uint256 _tokenAmount\n', ' )\n', '   internal\n', ' {\n', '   token.safeTransfer(_beneficiary, _tokenAmount);\n', ' }\n', '\n', ' /**\n', '  * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '  * @param _beneficiary Address receiving the tokens\n', '  * @param _tokenAmount Number of tokens to be purchased\n', '  */\n', ' function _processPurchase(\n', '   address _beneficiary,\n', '   uint256 _tokenAmount\n', ' )\n', '   internal\n', ' {\n', '   _deliverTokens(_beneficiary, _tokenAmount);\n', ' }\n', '\n', ' /**\n', '  * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n', '  * @param _beneficiary Address receiving the tokens\n', '  * @param _weiAmount Value in wei involved in the purchase\n', '  */\n', ' function _updatePurchasingState(\n', '   address _beneficiary,\n', '   uint256 _weiAmount\n', ' )\n', '   internal\n', ' {\n', '   // optional override\n', ' }\n', '\n', ' /**\n', '  * @dev Override to extend the way in which ether is converted to tokens.\n', '  * @param _weiAmount Value in wei to be converted into tokens\n', '  * @return Number of tokens that can be purchased with the specified _weiAmount\n', '  */\n', ' function _getTokenAmount(uint256 _weiAmount)\n', '   internal view returns (uint256)\n', ' {\n', '   return _weiAmount.mul(rate);\n', ' }\n', '\n', ' /**\n', '  * @dev Determines how ETH is stored/forwarded on purchases.\n', '  */\n', ' function _forwardFunds() internal {\n', '   wallet.transfer(msg.value);\n', ' }\n', '}\n', '\n', 'contract TimedCrowdsale is Crowdsale {\n', '  using SafeMath for uint256;\n', '\n', '  uint256 public openingTime;\n', '  uint256 public closingTime;\n', '\n', '  /**\n', '   * @dev Reverts if not in crowdsale time range.\n', '   */\n', '  modifier onlyWhileOpen {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(block.timestamp >= openingTime && block.timestamp <= closingTime);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Constructor, takes crowdsale opening and closing times.\n', '   * @param _openingTime Crowdsale opening time\n', '   * @param _closingTime Crowdsale closing time\n', '   */\n', '  constructor(uint256 _openingTime, uint256 _closingTime) public {\n', '    // solium-disable-next-line security/no-block-members\n', '    require(_openingTime >= block.timestamp);\n', '    require(_closingTime >= _openingTime);\n', '\n', '    openingTime = _openingTime;\n', '    closingTime = _closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '   * @return Whether crowdsale period has elapsed\n', '   */\n', '  function hasClosed() public view returns (bool) {\n', '    // solium-disable-next-line security/no-block-members\n', '    return block.timestamp > closingTime;\n', '  }\n', '\n', '  /**\n', '   * @dev Extend parent behavior requiring to be within contributing period\n', '   * @param _beneficiary Token purchaser\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyWhileOpen\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract Whitelist is Ownable, RBAC {\n', '  string public constant ROLE_WHITELISTED = "whitelist";\n', '\n', '  /**\n', '   * @dev Throws if operator is not whitelisted.\n', '   * @param _operator address\n', '   */\n', '  modifier onlyIfWhitelisted(address _operator) {\n', '    checkRole(_operator, ROLE_WHITELISTED);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address _operator)\n', '    public\n', '    onlyOwner\n', '  {\n', '    addRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function whitelist(address _operator)\n', '    public\n', '    view\n', '    returns (bool)\n', '  {\n', '    return hasRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] _operators)\n', '    public\n', '    onlyOwner\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address _operator)\n', '    public\n', '    onlyOwner\n', '  {\n', '    removeRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] _operators)\n', '    public\n', '    onlyOwner\n', '  {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', 'contract WhitelistedCrowdsale is Whitelist, Crowdsale {\n', '  /**\n', '   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n', '   * @param _beneficiary Token beneficiary\n', '   * @param _weiAmount Amount of wei contributed\n', '   */\n', '  function _preValidatePurchase(\n', '    address _beneficiary,\n', '    uint256 _weiAmount\n', '  )\n', '    internal\n', '    onlyIfWhitelisted(_beneficiary)\n', '  {\n', '    super._preValidatePurchase(_beneficiary, _weiAmount);\n', '  }\n', '\n', '}\n', '\n', 'contract CbntCrowdsale is TimedCrowdsale, WhitelistedCrowdsale {\n', ' using SafeMath for uint256;\n', '\n', '\n', ' struct FutureTransaction{\n', '   address beneficiary;\n', '   uint256 num;\n', '   uint32  times;\n', '   uint256 lastTime;\n', ' }\n', ' FutureTransaction[] public futureTrans;\n', ' uint256 public oweCbnt;\n', '\n', ' uint256[] public rateSteps;\n', ' uint256[] public rateStepsValue;\n', ' uint32[] public regularTransTime;\n', ' uint32 public transTimes;\n', '\n', ' uint256 public minInvest;\n', '\n', '/**\n', '  * @param _openingTime Crowdsale opening time\n', '  * @param _closingTime Crowdsale closing time\n', '  * @param _rate Number of token units a buyer gets per wei\n', '  * @param _wallet Address where collected funds will be forwarded to\n', '  * @param _token Address of the token being sold\n', '  */\n', ' constructor(uint256 _openingTime, uint256 _closingTime, uint256 _rate, address _wallet, ERC20 _token) TimedCrowdsale(_openingTime,_closingTime) Crowdsale(_rate,_wallet, _token) public {\n', '  // Crowdsale(uint256(1),_wallet, _token);\n', '   //TimedCrowdsale(_openingTime,_closingTime);\n', ' }\n', '\n', ' /** external functions **/\n', ' function triggerTransaction(uint256 beginIdx, uint256 endIdx) public returns (bool){\n', '   uint32 regularTime = findRegularTime();\n', '   require(regularTime > 0 && endIdx < futureTrans.length);\n', '\n', '   bool bRemove = false;\n', '   uint256 i = 0;\n', '   for(i = beginIdx; i<=endIdx && i<futureTrans.length; ){\n', '     bRemove = false;\n', '     if(futureTrans[i].lastTime < regularTime){  // need to set the regularTime again when it comes late than the last regularTime\n', '        uint256 transNum = futureTrans[i].num;\n', '        address beneficiary = futureTrans[i].beneficiary;\n', '        //update data\n', '\n', '        futureTrans[i].lastTime = now;\n', '        futureTrans[i].times = futureTrans[i].times - 1;\n', '        require(futureTrans[i].times <= transTimes);\n', '\n', '        // remove item if it is the last time transaction\n', '        if(futureTrans[i].times ==0 ){\n', '           bRemove = true;\n', '           futureTrans[i].beneficiary = futureTrans[futureTrans.length -1].beneficiary;\n', '           futureTrans[i].num = futureTrans[futureTrans.length -1].num;\n', '           futureTrans[i].lastTime = futureTrans[futureTrans.length -1].lastTime;\n', '           futureTrans[i].times = futureTrans[futureTrans.length -1].times;\n', '           futureTrans.length = futureTrans.length.sub(1);\n', '        }\n', '           // transfer token\n', '        oweCbnt = oweCbnt.sub(transNum);\n', '        _deliverTokens(beneficiary, transNum);\n', '     }\n', '\n', '     if(!bRemove){\n', '       i++;\n', '     }\n', '   }\n', '\n', '   return true;\n', '\n', ' }\n', ' function transferBonus(address _beneficiary, uint256 _tokenAmount) public onlyOwner returns(bool){\n', '   _deliverTokens(_beneficiary, _tokenAmount);\n', '   return true;\n', ' }\n', '\n', ' // need to set this param before start business\n', ' function setMinInvest(uint256 _minInvest) public onlyOwner returns (bool){\n', '   minInvest = _minInvest;\n', '   return true;\n', ' }\n', '\n', ' // need to set this param before start business\n', ' function setTransTimes(uint32 _times) public onlyOwner returns (bool){\n', '   transTimes = _times;\n', '   return true;\n', ' }\n', '\n', ' function setRegularTransTime(uint32[] _times) public onlyOwner returns (bool){\n', '   for (uint256 i = 0; i + 1 < _times.length; i++) {\n', '       require(_times[i] < _times[i+1]);\n', '   }\n', '\n', '   regularTransTime = _times;\n', '   return true;\n', ' }\n', '\n', ' // need to set this param before start business\n', ' function setRateSteps(uint256[] _steps, uint256[] _stepsValue) public onlyOwner returns (bool){\n', '   require(_steps.length == _stepsValue.length);\n', '   for (uint256 i = 0; i + 1 < _steps.length; i++) {\n', '       require(_steps[i] > _steps[i+1]);\n', '   }\n', '\n', '   rateSteps = _steps;\n', '   rateStepsValue = _stepsValue;\n', '   return true;\n', ' }\n', '\n', ' // need to check these params before start business\n', ' function normalCheck() public view returns (bool){\n', '   return (transTimes > 0 && regularTransTime.length > 0 && minInvest >0 && rateSteps.length >0);\n', ' }\n', '\n', ' function getFutureTransLength() public view returns(uint256) {\n', '     return futureTrans.length;\n', ' }\n', ' function getFutureTransByIdx(uint256 _idx) public view returns(address,uint256, uint32, uint256) {\n', '     return (futureTrans[_idx].beneficiary, futureTrans[_idx].num, futureTrans[_idx].times, futureTrans[_idx].lastTime);\n', ' }\n', ' function getFutureTransIdxByAddress(address _beneficiary) public view returns(uint256[]) {\n', '     uint256 i = 0;\n', '     uint256 num = 0;\n', '     for(i=0; i<futureTrans.length; i++){\n', '       if(futureTrans[i].beneficiary == _beneficiary){\n', '           num++;\n', '       }\n', '     }\n', '     uint256[] memory transList = new uint256[](num);\n', '\n', '     uint256 idx = 0;\n', '     for(i=0; i<futureTrans.length; i++){\n', '       if(futureTrans[i].beneficiary == _beneficiary){\n', '         transList[idx] = i;\n', '         idx++;\n', '       }\n', '     }\n', '     return transList;\n', ' }\n', '\n', ' /** internal functions **/\n', ' /**\n', '  * @dev Returns the rate of tokens per wei.\n', '  * Note that, as price _increases_ with invest number, the rate _increases_.\n', '  * @param _weiAmount The value in wei to be converted into tokens\n', '  * @return The number of tokens a buyer gets per wei\n', '  */\n', ' function getCurrentRate(uint256 _weiAmount) public view returns (uint256) {\n', '   for (uint256 i = 0; i < rateSteps.length; i++) {\n', '       if (_weiAmount >= rateSteps[i]) {\n', '           return rateStepsValue[i];\n', '       }\n', '   }\n', '   return 0;\n', ' }\n', '\n', ' /**\n', '  * @dev Overrides parent method taking into account variable rate.\n', '  * @param _weiAmount The value in wei to be converted into tokens\n', '  * @return The number of tokens _weiAmount wei will send at present time\n', '  */\n', ' function _getTokenAmount(uint256 _weiAmount)\n', '   internal view returns (uint256)\n', ' {\n', '   uint256 currentRate = getCurrentRate(_weiAmount);\n', '   return currentRate.mul(_weiAmount).div(transTimes);\n', ' }\n', '\n', ' /**\n', '  * @dev Extend parent behavior requiring to be within contributing period\n', '  * @param _beneficiary Token purchaser\n', '  * @param _weiAmount Amount of wei contributed\n', '  */\n', ' function _preValidatePurchase(\n', '   address _beneficiary,\n', '   uint256 _weiAmount\n', ' )\n', '   internal\n', ' {\n', '   require(msg.value >= minInvest);\n', '   super._preValidatePurchase(_beneficiary, _weiAmount);\n', ' }\n', '\n', ' /**\n', '  * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n', '  * @param _beneficiary Address receiving the tokens\n', '  * @param _tokenAmount Number of tokens to be purchased\n', '  */\n', ' function _processPurchase(\n', '   address _beneficiary,\n', '   uint256 _tokenAmount\n', ' )\n', '   internal\n', ' {\n', '   // update the future transactions for future using.\n', '   FutureTransaction memory tran = FutureTransaction(_beneficiary, _tokenAmount, transTimes-1, now); // the trtanstimes always lagger than 0\n', '   futureTrans.push(tran);\n', '\n', '   //update owe cbnt\n', '   oweCbnt = oweCbnt.add(_tokenAmount.mul(tran.times));\n', '   super._processPurchase(_beneficiary, _tokenAmount);\n', ' }\n', '\n', ' function findRegularTime() internal view returns (uint32) {\n', '   if(now < regularTransTime[0]){\n', '     return 0;\n', '   }\n', '\n', '   uint256 i = 0;\n', '   while(i<regularTransTime.length && now >= regularTransTime[i]){\n', '     i++;\n', '   }\n', '\n', '   return regularTransTime[i -1];\n', '\n', ' }\n', '\n', '}']
