['pragma solidity ^0.4.18;\n', '\n', '// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  function Ownable() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    Unpause();\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  uint256 public totalSupply;\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    // SafeMath.sub will throw if there is not enough balance.\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256 balance) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender) public view returns (uint256);\n', '  function transferFrom(address from, address to, uint256 value) public returns (bool);\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: zeppelin-solidity/contracts/token/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address _owner, address _spender) public view returns (uint256) {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n', '    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/Token.sol\n', '\n', 'contract Token is StandardToken, Pausable {\n', '    string constant public name = "Bace Token";\n', '    string constant public symbol = "BACE";\n', '    uint8 constant public decimals =  18;\n', '\n', '    uint256 constant public INITIAL_TOTAL_SUPPLY = 100 * 1E6 * (uint256(10) ** (decimals));\n', '\n', '    address private addressIco;\n', '\n', '    modifier onlyIco() {\n', '        require(msg.sender == addressIco);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Create BACE Token contract and set pause\n', '    * @param _ico The address of ICO contract.\n', '    */\n', '    function Token(address _ico) public {\n', '        require(_ico != address(0));\n', '        addressIco = _ico;\n', '\n', '        totalSupply = totalSupply.add(INITIAL_TOTAL_SUPPLY);\n', '        balances[_ico] = balances[_ico].add(INITIAL_TOTAL_SUPPLY);\n', '        Transfer(address(0), _ico, INITIAL_TOTAL_SUPPLY);\n', '\n', '        pause();\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer token for a specified address with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transfer(address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from one address to another with pause feature for owner.\n', '    * @dev Only applies when the transfer is allowed by the owner.\n', '    * @param _from address The address which you want to send tokens from\n', '    * @param _to address The address which you want to transfer to\n', '    * @param _value uint256 the amount of tokens to be transferred\n', '    */\n', '    function transferFrom(address _from, address _to, uint256 _value) whenNotPaused public returns (bool) {\n', '        super.transferFrom(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Transfer tokens from ICO address to another address.\n', '    * @param _to The address to transfer to.\n', '    * @param _value The amount to be transferred.\n', '    */\n', '    function transferFromIco(address _to, uint256 _value) onlyIco public returns (bool) {\n', '        super.transfer(_to, _value);\n', '    }\n', '\n', '    /**\n', '    * @dev Burn remaining tokens from the ICO balance.\n', '    */\n', '    function burnFromIco() onlyIco public {\n', '        uint256 remainingTokens = balanceOf(addressIco);\n', '        balances[addressIco] = balances[addressIco].sub(remainingTokens);\n', '        totalSupply = totalSupply.sub(remainingTokens);\n', '        Transfer(addressIco, address(0), remainingTokens);\n', '    }\n', '\n', '    /**\n', '    * @dev Refund tokens from the investor balance.\n', '    * @dev Function is needed for Refund investors ETH, if pre-ICO has failed.\n', '    */\n', '    function refund(address _to, uint256 _value) onlyIco public {\n', '        require(_value <= balances[_to]);\n', '\n', '        address addr = _to;\n', '        balances[addr] = balances[addr].sub(_value);\n', '        balances[addressIco] = balances[addressIco].add(_value);\n', '        Transfer(_to, addressIco, _value);\n', '    }\n', '}\n', '\n', '// File: contracts/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist contract\n', ' * @dev Whitelist for wallets.\n', '*/\n', 'contract Whitelist is Ownable {\n', '    mapping(address => bool) whitelist;\n', '\n', '    uint256 public whitelistLength = 0;\n', '\t\n', '\taddress private addressApi;\n', '\t\n', '\tmodifier onlyPrivilegeAddresses {\n', '        require(msg.sender == addressApi || msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Set backend Api address.\n', '    * @dev Accept request from owner only.\n', '    * @param _api The address of backend API.\n', '    */\n', '    function setApiAddress(address _api) onlyOwner public {\n', '        require(_api != address(0));\n', '\n', '        addressApi = _api;\n', '    }\n', '\n', '\n', '    /**\n', '    * @dev Add wallet to whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of wallet to add.\n', '    */  \n', '    function addWallet(address _wallet) onlyPrivilegeAddresses public {\n', '        require(_wallet != address(0));\n', '        require(!isWhitelisted(_wallet));\n', '        whitelist[_wallet] = true;\n', '        whitelistLength++;\n', '    }\n', '\n', '    /**\n', '    * @dev Remove wallet from whitelist.\n', '    * @dev Accept request from the owner only.\n', '    * @param _wallet The address of whitelisted wallet to remove.\n', '    */  \n', '    function removeWallet(address _wallet) onlyOwner public {\n', '        require(_wallet != address(0));\n', '        require(isWhitelisted(_wallet));\n', '        whitelist[_wallet] = false;\n', '        whitelistLength--;\n', '    }\n', '\n', '    /**\n', '    * @dev Check the specified wallet whether it is in the whitelist.\n', '    * @param _wallet The address of wallet to check.\n', '    */ \n', '    function isWhitelisted(address _wallet) view public returns (bool) {\n', '        return whitelist[_wallet];\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/Whitelistable.sol\n', '\n', '/**\n', ' * @title Whitelistable contract.\n', ' * @dev Contract that can be embedded in another contract, to add functionality "whitelist".\n', ' */\n', '\n', '\n', 'contract Whitelistable {\n', '    Whitelist public whitelist;\n', '\n', '    modifier whenWhitelisted(address _wallet) {\n', '        require(whitelist.isWhitelisted(_wallet));\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Constructor for Whitelistable contract.\n', '    */\n', '    function Whitelistable() public {\n', '        whitelist = new Whitelist();\n', '    }\n', '}\n', '\n', '// File: contracts/Crowdsale.sol\n', '\n', 'contract Crowdsale is Pausable, Whitelistable {\n', '    using SafeMath for uint256;\n', '\n', '    /////////////////////////////\n', '    //Constant block\n', '    //\n', '    // DECIMALS = 18\n', '    uint256 constant private DECIMALS = 18;\n', '    // rate 1 ETH = 180 BACE tokens\n', '    uint256 constant public BACE_ETH = 1800;\n', '    // Bonus: 20%\n', '    uint256 constant public PREICO_BONUS = 20;\n', '    // 20 000 000 * 10^18\n', '    uint256 constant public RESERVED_TOKENS_BACE_TEAM = 20 * 1E6 * (10 ** DECIMALS);\n', '    // 10 000 000 * 10^18\n', '    uint256 constant public RESERVED_TOKENS_ANGLE = 10 * 1E6 * (10 ** DECIMALS);\n', '    // 10 000 000 * 10^18\n', '    uint256 constant public HARDCAP_TOKENS_PRE_ICO = 10 * 1E6 * (10 ** DECIMALS);\n', '    // 70 000 000 * 10^18\n', '    uint256 constant public HARDCAP_TOKENS_ICO = 70 * 1E6 * (10 ** DECIMALS);\n', '    // 5 000 000 * 10^18\n', '    uint256 constant public MINCAP_TOKENS = 5 * 1E6 * (10 ** DECIMALS);\n', '    /////////////////////////////\n', '\n', '    /////////////////////////////\n', '    //Live cycle block\n', '    //\n', '    uint256 public maxInvestments;\n', '\n', '    uint256 public minInvestments;\n', '\n', '    /**\n', '     * @dev test mode.\n', '     * @dev if test mode is "true" allows to change caps in an deployed contract\n', '     */\n', '    bool private testMode;\n', '\n', '    /**\n', '     * @dev contract BACE token object.\n', '     */\n', '    Token public token;\n', '\n', '    /**\n', '     * @dev start time of PreIco stage.\n', '     */\n', '    uint256 public preIcoStartTime;\n', '\n', '    /**\n', '     * @dev finish time of PreIco stage.\n', '     */\n', '    uint256 public preIcoFinishTime;\n', '\n', '    /**\n', '     * @dev start time of Ico stage.\n', '     */\n', '    uint256 public icoStartTime;\n', '\n', '    /**\n', '     * @dev finish time of Ico stage.\n', '     */\n', '    uint256 public icoFinishTime;\n', '\n', '    /**\n', '     * @dev were the Ico dates set?\n', '     */\n', '    bool public icoInstalled;\n', '\n', '    /**\n', '     * @dev The address to backend program.\n', '     */\n', '    address private backendWallet;\n', '\n', '    /**\n', '     * @dev The address to which raised funds will be withdrawn.\n', '     */\n', '    address private withdrawalWallet;\n', '\n', '    /**\n', '     * @dev The guard interval.\n', '     */\n', '    uint256 public guardInterval;\n', '    ////////////////////////////\n', '\n', '    /////////////////////////////\n', '    //ETH block\n', '    //\n', '    /**\n', '     * @dev Map of investors. Key = address, Value = Total ETH at PreIco.\n', '     */\n', '    mapping(address => uint256) public preIcoInvestors;\n', '\n', '    /**\n', '     * @dev Array of addresses of investors at PreIco.\n', '     */\n', '    address[] public preIcoInvestorsAddresses;\n', '\n', '    /**\n', '     * @dev Map of investors. Key = address, Value = Total ETH at Ico.\n', '     */\n', '    mapping(address => uint256) public icoInvestors;\n', '\n', '    /**\n', '     * @dev Array of addresses of investors at Ico.\n', '     */\n', '    address[] public icoInvestorsAddresses;\n', '\n', '    /**\n', '     * @dev Amount of investment collected in PreIco stage. (without BTC investment)\n', '     */\n', '    uint256 public preIcoTotalCollected;\n', '\n', '    /**\n', '     * @dev Amount of investment collected in Ico stage. (without BTC investment)\n', '     */\n', '    uint256 public icoTotalCollected;\n', '    ////////////////////////////\n', '\n', '    ////////////////////////////\n', '    //Tokens block\n', '    //\n', '\n', '    /**\n', '     * @dev Map of investors. Key = address, Value = Total tokens at PreIco.\n', '     */\n', '    mapping(address => uint256) public preIcoTokenHolders;\n', '\n', '    /**\n', '     * @dev Array of addresses of investors.\n', '     */\n', '    address[] public preIcoTokenHoldersAddresses;\n', '\n', '    /**\n', '     * @dev Map of investors. Key = address, Value = Total tokens at PreIco.\n', '     */\n', '    mapping(address => uint256) public icoTokenHolders;\n', '\n', '    /**\n', '     * @dev Array of addresses of investors.\n', '     */\n', '    address[] public icoTokenHoldersAddresses;\n', '\n', '    /**\n', '     * @dev the minimum amount in tokens for the investment.\n', '     */\n', '    uint256 public minCap;\n', '\n', '    /**\n', '     * @dev the maximum amount in tokens for the investment in the PreIco stage.\n', '     */\n', '    uint256 public hardCapPreIco;\n', '\n', '    /**\n', '     * @dev the maximum amount in tokens for the investment in the Ico stage.\n', '     */\n', '    uint256 public hardCapIco;\n', '\n', '    /**\n', '     * @dev number of sold tokens issued in  PreIco stage.\n', '     */\n', '    uint256 public preIcoSoldTokens;\n', '\n', '    /**\n', '     * @dev number of sold tokens issued in Ico stage.\n', '     */\n', '    uint256 public icoSoldTokens;\n', '\n', '    /**\n', '     * @dev The BACE token exchange rate for PreIco stage.\n', '     */\n', '    uint256 public exchangeRatePreIco;\n', '\n', '    /**\n', '     * @dev The BACE token exchange rate for Ico stage.\n', '     */\n', '    uint256 public exchangeRateIco;\n', '\n', '    /**\n', '     * @dev unsold BACE tokens burned?.\n', '     */\n', '    bool burnt;\n', '    ////////////////////////////\n', '\n', '    /**\n', '     * @dev Constructor for Crowdsale contract.\n', '     * @dev Set the owner who can manage whitelist and token.\n', '     * @param _startTimePreIco The PreIco start time.\n', '     * @param _endTimePreIco The PreIco end time.\n', '     * @param _angelInvestorsWallet The address to which reserved tokens angel investors will be transferred.\n', '     * @param _foundersWallet The address to which reserved tokens for founders will be transferred.\n', '     * @param _backendWallet The address to backend program.\n', '     * @param _withdrawalWallet The address to which raised funds will be withdrawn.\n', '     * @param _testMode test mode is on?\n', '     */\n', '    function Crowdsale (\n', '        uint256 _startTimePreIco,\n', '        uint256 _endTimePreIco,\n', '        address _angelInvestorsWallet,\n', '        address _foundersWallet,\n', '        address _backendWallet,\n', '        address _withdrawalWallet,\n', '        uint256 _maxInvestments,\n', '        uint256 _minInvestments,\n', '        bool _testMode\n', '    ) public Whitelistable()\n', '    {\n', '        require(_angelInvestorsWallet != address(0) && _foundersWallet != address(0) && _backendWallet != address(0) && _withdrawalWallet != address(0));\n', '        require(_startTimePreIco >= now && _endTimePreIco > _startTimePreIco);\n', '        require(_maxInvestments != 0 && _minInvestments != 0 && _maxInvestments > _minInvestments);\n', '\n', '        ////////////////////////////\n', '        //Live cycle block init\n', '        //\n', '        testMode = _testMode;\n', '        token = new Token(this);\n', '        maxInvestments = _maxInvestments;\n', '        minInvestments = _minInvestments;\n', '        preIcoStartTime = _startTimePreIco;\n', '        preIcoFinishTime = _endTimePreIco;\n', '        icoStartTime = 0;\n', '        icoFinishTime = 0;\n', '        icoInstalled = false;\n', '        guardInterval = uint256(86400).mul(7); //guard interval - 1 week\n', '        /////////////////////////////\n', '\n', '        ////////////////////////////\n', '        //ETH block init\n', '        preIcoTotalCollected = 0;\n', '        icoTotalCollected = 0;\n', '        /////////////////////////////\n', '\n', '        ////////////////////////////\n', '        //Tokens block init\n', '        //\n', '        minCap = MINCAP_TOKENS;\n', '        hardCapPreIco = HARDCAP_TOKENS_PRE_ICO;\n', '        hardCapIco = HARDCAP_TOKENS_ICO;\n', '        preIcoSoldTokens = 0;\n', '        icoSoldTokens = 0;\n', '        exchangeRateIco = BACE_ETH;\n', '        exchangeRatePreIco = exchangeRateIco.mul(uint256(100).add(PREICO_BONUS)).div(100);\n', '        burnt = false;\n', '        ////////////////////////////\n', '\n', '        backendWallet = _backendWallet;\n', '        withdrawalWallet = _withdrawalWallet;\n', '\n', '        whitelist.transferOwnership(msg.sender);\n', '\n', '        token.transferFromIco(_angelInvestorsWallet, RESERVED_TOKENS_ANGLE);\n', '        token.transferFromIco(_foundersWallet, RESERVED_TOKENS_BACE_TEAM);\n', '        token.transferOwnership(msg.sender);\n', '    }\n', '\n', '    modifier isTestMode() {\n', '        require(testMode);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev check Ico Failed.\n', '     * @return bool true if Ico Failed.\n', '     */\n', '    function isIcoFailed() public view returns (bool) {\n', '        return isIcoFinish() && icoSoldTokens.add(preIcoSoldTokens) < minCap;\n', '    }\n', '\n', '    /**\n', '     * @dev check Ico Success.\n', '     * @return bool true if Ico Success.\n', '     */\n', '    function isIcoSuccess() public view returns (bool) {\n', '        return isIcoFinish() && icoSoldTokens.add(preIcoSoldTokens) >= minCap;\n', '    }\n', '\n', '    /**\n', '     * @dev check PreIco Stage.\n', '     * @return bool true if PreIco Stage now.\n', '     */\n', '    function isPreIcoStage() public view returns (bool) {\n', '        return now > preIcoStartTime && now < preIcoFinishTime;\n', '    }\n', '\n', '    /**\n', '     * @dev check Ico Stage.\n', '     * @return bool true if Ico Stage now.\n', '     */\n', '    function isIcoStage() public view returns (bool) {\n', '        return icoInstalled && now > icoStartTime && now < icoFinishTime;\n', '    }\n', '\n', '    /**\n', '     * @dev check PreIco Finish.\n', '     * @return bool true if PreIco Finished.\n', '     */\n', '    function isPreIcoFinish() public view returns (bool) {\n', '        return now > preIcoFinishTime;\n', '    }\n', '\n', '    /**\n', '     * @dev check Ico Finish.\n', '     * @return bool true if Ico Finished.\n', '     */\n', '    function isIcoFinish() public view returns (bool) {\n', '        return icoInstalled && now > icoFinishTime;\n', '    }\n', '\n', '    /**\n', '     * @dev guard interval finished?\n', '     * @return bool true if guard Interval finished.\n', '     */\n', '    function guardIntervalFinished() public view returns (bool) {\n', '        return now > icoFinishTime.add(guardInterval);\n', '    }\n', '\n', '    /**\n', '     * @dev Set start time and end time for Ico.\n', '     * @param _startTimeIco The Ico start time.\n', '     * @param _endTimeIco The Ico end time.\n', '     */\n', '    function setStartTimeIco(uint256 _startTimeIco, uint256 _endTimeIco) onlyOwner public {\n', '        require(_startTimeIco >= now && _endTimeIco > _startTimeIco && _startTimeIco > preIcoFinishTime);\n', '\n', '        icoStartTime = _startTimeIco;\n', '        icoFinishTime = _endTimeIco;\n', '        icoInstalled = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Remaining amount of tokens for PreIco stage.\n', '     */\n', '    function tokensRemainingPreIco() public view returns(uint256) {\n', '        if (isPreIcoFinish()) {\n', '            return 0;\n', '        }\n', '        return hardCapPreIco.sub(preIcoSoldTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Remaining amount of tokens for Ico stage.\n', '     */\n', '    function tokensRemainingIco() public view returns(uint256) {\n', '        if (burnt) {\n', '            return 0;\n', '        }\n', '        if (isPreIcoFinish()) {\n', '            return hardCapIco.sub(icoSoldTokens).sub(preIcoSoldTokens);\n', '        }\n', '        return hardCapIco.sub(hardCapPreIco).sub(icoSoldTokens);\n', '    }\n', '\n', '    /**\n', '     * @dev Add information about the investment at the PreIco stage.\n', "     * @param _addr Investor's address.\n", '     * @param _weis Amount of wei(1 ETH = 1 * 10 ** 18 wei) received.\n', '     * @param _tokens Amount of Token for investor.\n', '     */\n', '    function addInvestInfoPreIco(address _addr,  uint256 _weis, uint256 _tokens) private {\n', '        if (preIcoTokenHolders[_addr] == 0) {\n', '            preIcoTokenHoldersAddresses.push(_addr);\n', '        }\n', '        preIcoTokenHolders[_addr] = preIcoTokenHolders[_addr].add(_tokens);\n', '        preIcoSoldTokens = preIcoSoldTokens.add(_tokens);\n', '        if (_weis > 0) {\n', '            if (preIcoInvestors[_addr] == 0) {\n', '                preIcoInvestorsAddresses.push(_addr);\n', '            }\n', '            preIcoInvestors[_addr] = preIcoInvestors[_addr].add(_weis);\n', '            preIcoTotalCollected = preIcoTotalCollected.add(_weis);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Add information about the investment at the Ico stage.\n', "     * @param _addr Investor's address.\n", '     * @param _weis Amount of wei(1 ETH = 1 * 10 ** 18 wei) received.\n', '     * @param _tokens Amount of Token for investor.\n', '     */\n', '    function addInvestInfoIco(address _addr,  uint256 _weis, uint256 _tokens) private {\n', '        if (icoTokenHolders[_addr] == 0) {\n', '            icoTokenHoldersAddresses.push(_addr);\n', '        }\n', '        icoTokenHolders[_addr] = icoTokenHolders[_addr].add(_tokens);\n', '        icoSoldTokens = icoSoldTokens.add(_tokens);\n', '        if (_weis > 0) {\n', '            if (icoInvestors[_addr] == 0) {\n', '                icoInvestorsAddresses.push(_addr);\n', '            }\n', '            icoInvestors[_addr] = icoInvestors[_addr].add(_weis);\n', '            icoTotalCollected = icoTotalCollected.add(_weis);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function can be used to buy tokens.\n', '     */\n', '    function() public payable {\n', '        acceptInvestments(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev function can be used to buy tokens by ETH investors.\n', '     */\n', '    function sellTokens() public payable {\n', '        acceptInvestments(msg.sender, msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Function processing new investments.\n', "     * @param _addr Investor's address.\n", '     * @param _amount The amount of wei(1 ETH = 1 * 10 ** 18 wei) received.\n', '     */\n', '    function acceptInvestments(address _addr, uint256 _amount) private whenWhitelisted(msg.sender) whenNotPaused {\n', '        require(_addr != address(0) && _amount >= minInvestments);\n', '\n', '        bool preIco = isPreIcoStage();\n', '        bool ico = isIcoStage();\n', '\n', '        require(preIco || ico);\n', '        require((preIco && tokensRemainingPreIco() > 0) || (ico && tokensRemainingIco() > 0));\n', '\n', '        uint256 intermediateEthInvestment;\n', '        uint256 ethSurrender = 0;\n', '        uint256 currentEth = preIco ? preIcoInvestors[_addr] : icoInvestors[_addr];\n', '\n', '        if (currentEth.add(_amount) > maxInvestments) {\n', '            intermediateEthInvestment = maxInvestments.sub(currentEth);\n', '            ethSurrender = ethSurrender.add(_amount.sub(intermediateEthInvestment));\n', '        } else {\n', '            intermediateEthInvestment = _amount;\n', '        }\n', '\n', '        uint256 currentRate = preIco ? exchangeRatePreIco : exchangeRateIco;\n', '        uint256 intermediateTokenInvestment = intermediateEthInvestment.mul(currentRate);\n', '        uint256 tokensRemaining = preIco ? tokensRemainingPreIco() : tokensRemainingIco();\n', '        uint256 currentTokens = preIco ? preIcoTokenHolders[_addr] : icoTokenHolders[_addr];\n', '        uint256 weiToAccept;\n', '        uint256 tokensToSell;\n', '\n', '        if (currentTokens.add(intermediateTokenInvestment) > tokensRemaining) {\n', '            tokensToSell = tokensRemaining;\n', '            weiToAccept = tokensToSell.div(currentRate);\n', '            ethSurrender = ethSurrender.add(intermediateEthInvestment.sub(weiToAccept));\n', '        } else {\n', '            tokensToSell = intermediateTokenInvestment;\n', '            weiToAccept = intermediateEthInvestment;\n', '        }\n', '\n', '        if (preIco) {\n', '            addInvestInfoPreIco(_addr, weiToAccept, tokensToSell);\n', '        } else {\n', '            addInvestInfoIco(_addr, weiToAccept, tokensToSell);\n', '        }\n', '\n', '        token.transferFromIco(_addr, tokensToSell);\n', '\n', '        if (ethSurrender > 0) {\n', '            msg.sender.transfer(ethSurrender);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function can be used to buy tokens by third-party investors.\n', '     * @dev Only the owner or the backend can call this function.\n', "     * @param _addr Investor's address.\n", '     * @param _value Amount of Token for investor.\n', '     */\n', '    function thirdPartyInvestments(address _addr, uint256 _value) public  whenWhitelisted(_addr) whenNotPaused {\n', '        require(msg.sender == backendWallet || msg.sender == owner);\n', '        require(_addr != address(0) && _value > 0);\n', '\n', '        bool preIco = isPreIcoStage();\n', '        bool ico = isIcoStage();\n', '\n', '        require(preIco || ico);\n', '        require((preIco && tokensRemainingPreIco() > 0) || (ico && tokensRemainingIco() > 0));\n', '\n', '        uint256 currentRate = preIco ? exchangeRatePreIco : exchangeRateIco;\n', '        uint256 currentTokens = preIco ? preIcoTokenHolders[_addr] : icoTokenHolders[_addr];\n', '\n', '        require(maxInvestments.mul(currentRate) >= currentTokens.add(_value));\n', '        require(minInvestments.mul(currentRate) <= _value);\n', '\n', '        uint256 tokensRemaining = preIco ? tokensRemainingPreIco() : tokensRemainingIco();\n', '\n', '        require(tokensRemaining >= _value);\n', '\n', '        if (preIco) {\n', '            addInvestInfoPreIco(_addr, 0, _value);\n', '        } else {\n', '            addInvestInfoIco(_addr, 0, _value);\n', '        }\n', '\n', '        token.transferFromIco(_addr, _value);\n', '    }\n', '\n', '    /**\n', '     * @dev Send raised funds to the withdrawal wallet.\n', '     * @param _weiAmount The amount of raised funds to withdraw.\n', '     */\n', '    function forwardFunds(uint256 _weiAmount) public onlyOwner {\n', '        require(isIcoSuccess() || (isIcoFailed() && guardIntervalFinished()));\n', '        withdrawalWallet.transfer(_weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Function for refund eth if Ico failed and guard interval has not expired.\n', '     * @dev Any wallet can call the function.\n', '     * @dev Function returns ETH for sender if it is a member of Ico or(and) PreIco.\n', '     */\n', '    function refund() public {\n', '        require(isIcoFailed() && !guardIntervalFinished());\n', '\n', '        uint256 ethAmountPreIco = preIcoInvestors[msg.sender];\n', '        uint256 ethAmountIco = icoInvestors[msg.sender];\n', '        uint256 ethAmount = ethAmountIco.add(ethAmountPreIco);\n', '\n', '        uint256 tokensAmountPreIco = preIcoTokenHolders[msg.sender];\n', '        uint256 tokensAmountIco = icoTokenHolders[msg.sender];\n', '        uint256 tokensAmount = tokensAmountPreIco.add(tokensAmountIco);\n', '\n', '        require(ethAmount > 0 && tokensAmount > 0);\n', '\n', '        preIcoInvestors[msg.sender] = 0;\n', '        icoInvestors[msg.sender] = 0;\n', '        preIcoTokenHolders[msg.sender] = 0;\n', '        icoTokenHolders[msg.sender] = 0;\n', '\n', '        msg.sender.transfer(ethAmount);\n', '        token.refund(msg.sender, tokensAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new withdrawal wallet address.\n', '     * @param _addr new withdrawal Wallet address.\n', '     */\n', '    function setWithdrawalWallet(address _addr) public onlyOwner {\n', '        require(_addr != address(0));\n', '\n', '        withdrawalWallet = _addr;\n', '    }\n', '\n', '    /**\n', '        * @dev Set new backend wallet address.\n', '        * @param _addr new backend Wallet address.\n', '        */\n', '    function setBackendWallet(address _addr) public onlyOwner {\n', '        require(_addr != address(0));\n', '\n', '        backendWallet = _addr;\n', '    }\n', '\n', '    /**\n', '    * @dev Burn unsold tokens from the Ico balance.\n', '    * @dev Only applies when the Ico was ended.\n', '    */\n', '    function burnUnsoldTokens() onlyOwner public {\n', '        require(isIcoFinish());\n', '        token.burnFromIco();\n', '        burnt = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Set new MinCap.\n', '     * @param _newMinCap new MinCap,\n', '     */\n', '    function setMinCap(uint256 _newMinCap) public onlyOwner isTestMode {\n', '        require(now < preIcoFinishTime);\n', '        minCap = _newMinCap;\n', '    }\n', '\n', '    /**\n', '     * @dev Set new PreIco HardCap.\n', '     * @param _newPreIcoHardCap new PreIco HardCap,\n', '     */\n', '    function setPreIcoHardCap(uint256 _newPreIcoHardCap) public onlyOwner isTestMode {\n', '        require(now < preIcoFinishTime);\n', '        require(_newPreIcoHardCap <= hardCapIco);\n', '        hardCapPreIco = _newPreIcoHardCap;\n', '    }\n', '\n', '    /**\n', '     * @dev Set new Ico HardCap.\n', '     * @param _newIcoHardCap new Ico HardCap,\n', '     */\n', '    function setIcoHardCap(uint256 _newIcoHardCap) public onlyOwner isTestMode {\n', '        require(now < preIcoFinishTime);\n', '        require(_newIcoHardCap > hardCapPreIco);\n', '        hardCapIco = _newIcoHardCap;\n', '    }\n', '\n', '    /**\n', '     * @dev Count the Ico investors total.\n', '     */\n', '    function getIcoTokenHoldersAddressesCount() public view returns(uint256) {\n', '        return icoTokenHoldersAddresses.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Count the PreIco investors total.\n', '     */\n', '    function getPreIcoTokenHoldersAddressesCount() public view returns(uint256) {\n', '        return preIcoTokenHoldersAddresses.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Count the Ico investors total (not including third-party investors).\n', '     */\n', '    function getIcoInvestorsAddressesCount() public view returns(uint256) {\n', '        return icoInvestorsAddresses.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Count the PreIco investors total (not including third-party investors).\n', '     */\n', '    function getPreIcoInvestorsAddressesCount() public view returns(uint256) {\n', '        return preIcoInvestorsAddresses.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Get backend wallet address.\n', '     */\n', '    function getBackendWallet() public view returns(address) {\n', '        return backendWallet;\n', '    }\n', '\n', '    /**\n', '     * @dev Get Withdrawal wallet address.\n', '     */\n', '    function getWithdrawalWallet() public view returns(address) {\n', '        return withdrawalWallet;\n', '    }\n', '}\n', '\n', '// File: contracts/CrowdsaleFactory.sol\n', '\n', 'contract Factory {\n', '    Crowdsale public crowdsale;\n', '\n', '    function createCrowdsale (\n', '        uint256 _startTimePreIco,\n', '        uint256 _endTimePreIco,\n', '        address _angelInvestorsWallet,\n', '        address _foundersWallet,\n', '        address _backendWallet,\n', '        address _withdrawalWallet,\n', '        uint256 _maxInvestments,\n', '        uint256 _minInvestments,\n', '        bool _testMode\n', '    ) public\n', '    {\n', '        crowdsale = new Crowdsale(\n', '            _startTimePreIco,\n', '            _endTimePreIco,\n', '            _angelInvestorsWallet,\n', '            _foundersWallet,\n', '            _backendWallet,\n', '            _withdrawalWallet,\n', '            _maxInvestments,\n', '            _minInvestments,\n', '            _testMode\n', '        );\n', '\n', '        Whitelist whitelist = crowdsale.whitelist();\n', '        whitelist.transferOwnership(msg.sender);\n', '\n', '        Token token = crowdsale.token();\n', '        token.transferOwnership(msg.sender);\n', '\n', '        crowdsale.transferOwnership(msg.sender);\n', '    }\n', '}']